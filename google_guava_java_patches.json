[
    {
        "commit_id": "f4b6ef015c5a8febe407e0ba8e1ee17753d26bc8",
        "commit_message": "Migrate from `<? extends @Nullable Object>` back to `<?>`.\n\nThe two are equivalent. We had to use the longer form temporarily because of a Kotlin bug that has since been fixed.\n\nCompare cl/708605353.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 730523786",
        "commit_url": "https://github.com/google/guava/commit/f4b6ef015c5a8febe407e0ba8e1ee17753d26bc8",
        "buggy_code": "public String join(Iterable<? extends @Nullable Object> parts) {",
        "fixed_code": "public String join(Iterable<?> parts) {",
        "patch": "@@ -265,7 +265,7 @@ public Joiner skipNulls() {\n     return new Joiner(this) {\n       @Override\n       @SuppressWarnings(\"JoinIterableIterator\") // suggests infinite recursion\n-      public String join(Iterable<? extends @Nullable Object> parts) {\n+      public String join(Iterable<?> parts) {\n         return join(parts.iterator());\n       }\n "
    },
    {
        "commit_id": "f4b6ef015c5a8febe407e0ba8e1ee17753d26bc8",
        "commit_message": "Migrate from `<? extends @Nullable Object>` back to `<?>`.\n\nThe two are equivalent. We had to use the longer form temporarily because of a Kotlin bug that has since been fixed.\n\nCompare cl/708605353.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 730523786",
        "commit_url": "https://github.com/google/guava/commit/f4b6ef015c5a8febe407e0ba8e1ee17753d26bc8",
        "buggy_code": "public String join(Iterable<? extends @Nullable Object> parts) {",
        "fixed_code": "public String join(Iterable<?> parts) {",
        "patch": "@@ -305,7 +305,7 @@ public Joiner skipNulls() {\n     return new Joiner(this) {\n       @Override\n       @SuppressWarnings(\"JoinIterableIterator\") // suggests infinite recursion\n-      public String join(Iterable<? extends @Nullable Object> parts) {\n+      public String join(Iterable<?> parts) {\n         return join(parts.iterator());\n       }\n "
    },
    {
        "commit_id": "2076b8ecbf78625bfa2cdb3c56d14020371ad692",
        "commit_message": "Address more Error Prone warnings.\n\n- mostly https://errorprone.info/bugpattern/UnnecessaryParentheses (by removing the parentheses)\n- in `HostAndPort`, https://errorprone.info/bugpattern/UnusedException (by using `tryParse` instead of a `try`-`catch` approach, conveniently also getting the behavior we want for `+` and for non-ASCII digits for free)\n- in `IntMath`, https://errorprone.info/bugpattern/NonFinalStaticField (by making it `final` :))\n\nRELNOTES=n/a\nPiperOrigin-RevId: 729533506",
        "commit_url": "https://github.com/google/guava/commit/2076b8ecbf78625bfa2cdb3c56d14020371ad692",
        "buggy_code": "long succMask = (~0L) >>> 32;",
        "fixed_code": "long succMask = ~0L >>> 32;",
        "patch": "@@ -150,7 +150,7 @@ int getSuccessor(int entry) {\n   }\n \n   private void setSuccessor(int entry, int succ) {\n-    long succMask = (~0L) >>> 32;\n+    long succMask = ~0L >>> 32;\n     setLink(entry, (link(entry) & ~succMask) | ((succ + 1) & succMask));\n   }\n "
    },
    {
        "commit_id": "2076b8ecbf78625bfa2cdb3c56d14020371ad692",
        "commit_message": "Address more Error Prone warnings.\n\n- mostly https://errorprone.info/bugpattern/UnnecessaryParentheses (by removing the parentheses)\n- in `HostAndPort`, https://errorprone.info/bugpattern/UnusedException (by using `tryParse` instead of a `try`-`catch` approach, conveniently also getting the behavior we want for `+` and for non-ASCII digits for free)\n- in `IntMath`, https://errorprone.info/bugpattern/NonFinalStaticField (by making it `final` :))\n\nRELNOTES=n/a\nPiperOrigin-RevId: 729533506",
        "commit_url": "https://github.com/google/guava/commit/2076b8ecbf78625bfa2cdb3c56d14020371ad692",
        "buggy_code": "long succMask = (~0L) >>> 32;",
        "fixed_code": "long succMask = ~0L >>> 32;",
        "patch": "@@ -155,7 +155,7 @@ int getSuccessor(int entry) {\n   }\n \n   private void setSuccessor(int entry, int succ) {\n-    long succMask = (~0L) >>> 32;\n+    long succMask = ~0L >>> 32;\n     setLink(entry, (link(entry) & ~succMask) | ((succ + 1) & succMask));\n   }\n "
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final String[] deduped = dedupe(elements);",
        "fixed_code": "String[] deduped = dedupe(elements);",
        "patch": "@@ -351,7 +351,7 @@ public Test testsForAbstractSet() {\n             new TestStringSetGenerator() {\n               @Override\n               protected Set<String> create(String[] elements) {\n-                final String[] deduped = dedupe(elements);\n+                String[] deduped = dedupe(elements);\n                 return new AbstractSet<String>() {\n                   @Override\n                   public int size() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Constructor<T> constructor;",
        "fixed_code": "Constructor<T> constructor;",
        "patch": "@@ -365,7 +365,7 @@ private static <T> void setImplementation(Class<T> type, Class<? extends T> impl\n     if (Modifier.isAbstract(type.getModifiers()) || !Modifier.isPublic(type.getModifiers())) {\n       return arbitraryConstantInstanceOrNull(type);\n     }\n-    final Constructor<T> constructor;\n+    Constructor<T> constructor;\n     try {\n       constructor = type.getConstructor();\n     } catch (NoSuchMethodException e) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterable<? extends Optional<? extends T>> optionals) {",
        "fixed_code": "Iterable<? extends Optional<? extends T>> optionals) {",
        "patch": "@@ -351,7 +351,7 @@ public java.util.Optional<T> toJavaUtil() {\n    * @since 11.0 (generics widened in 13.0)\n    */\n   public static <T> Iterable<T> presentInstances(\n-      final Iterable<? extends Optional<? extends T>> optionals) {\n+      Iterable<? extends Optional<? extends T>> optionals) {\n     checkNotNull(optionals);\n     return () ->\n         new AbstractIterator<T>() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();",
        "fixed_code": "Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();",
        "patch": "@@ -329,7 +329,7 @@ public V setValue(V value) {\n   }\n \n   Iterator<Entry<K, V>> entrySetIterator() {\n-    final Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();\n+    Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();\n     return new Iterator<Entry<K, V>>() {\n       @Nullable Entry<K, V> entry;\n "
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "Entry<E> output(final int index) {",
        "fixed_code": "Entry<E> output(int index) {",
        "patch": "@@ -263,7 +263,7 @@ E output(int index) {\n   Iterator<Entry<E>> entryIterator() {\n     return new Itr<Entry<E>>() {\n       @Override\n-      Entry<E> output(final int index) {\n+      Entry<E> output(int index) {\n         return new Multisets.AbstractEntry<E>() {\n           @Override\n           public E getElement() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();",
        "fixed_code": "ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();",
        "patch": "@@ -71,7 +71,7 @@ boolean isPartialView() {\n \n   @Override\n   public ImmutableList<V> asList() {\n-    final ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();\n+    ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();\n     return new ImmutableList<V>() {\n       @Override\n       public V get(int index) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterator<Entry<E>> entryIterator = entrySet().iterator();",
        "fixed_code": "Iterator<Entry<E>> entryIterator = entrySet().iterator();",
        "patch": "@@ -223,7 +223,7 @@ static <E> ImmutableMultiset<E> copyFromEntries(\n \n   @Override\n   public UnmodifiableIterator<E> iterator() {\n-    final Iterator<Entry<E>> entryIterator = entrySet().iterator();\n+    Iterator<Entry<E>> entryIterator = entrySet().iterator();\n     return new UnmodifiableIterator<E>() {\n       int remaining;\n       @Nullable E element;"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Comparator<? super K> comparator,",
        "fixed_code": "Comparator<? super K> comparator,",
        "patch": "@@ -498,7 +498,7 @@ private static <K, V> ImmutableSortedMap<K, V> fromEntries(\n   }\n \n   private static <K, V> ImmutableSortedMap<K, V> fromEntries(\n-      final Comparator<? super K> comparator,\n+      Comparator<? super K> comparator,\n       boolean sameComparator,\n       @Nullable Entry<K, V>[] entryArray,\n       int size) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Segment<K, V, E, S>[] segments = this.segments;",
        "fixed_code": "Segment<K, V, E, S>[] segments = this.segments;",
        "patch": "@@ -2392,7 +2392,7 @@ public boolean containsValue(@Nullable Object value) {\n     // such that none of the subsequent iterations observed it, despite the fact that at every point\n     // in time it was present somewhere int the map. This becomes increasingly unlikely as\n     // CONTAINS_VALUE_RETRIES increases, though without locking it is theoretically possible.\n-    final Segment<K, V, E, S>[] segments = this.segments;\n+    Segment<K, V, E, S>[] segments = this.segments;\n     long last = -1L;\n     for (int i = 0; i < CONTAINS_VALUE_RETRIES; i++) {\n       long sum = 0L;"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Entry<Class<? extends @NonNull B>, B> entry) {",
        "fixed_code": "Entry<Class<? extends @NonNull B>, B> entry) {",
        "patch": "@@ -84,7 +84,7 @@ private MutableClassToInstanceMap(Map<Class<? extends @NonNull B>, B> delegate)\n    * Wraps the {@code setValue} implementation of an {@code Entry} to enforce the class constraint.\n    */\n   private static <B extends @Nullable Object> Entry<Class<? extends @NonNull B>, B> checkedEntry(\n-      final Entry<Class<? extends @NonNull B>, B> entry) {\n+      Entry<Class<? extends @NonNull B>, B> entry) {\n     return new ForwardingMapEntry<Class<? extends @NonNull B>, B>() {\n       @Override\n       protected Entry<Class<? extends @NonNull B>, B> delegate() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {",
        "fixed_code": "Map.Entry<K, Collection<V>> transform(Map.Entry<K, Collection<V>> entry) {",
        "patch": "@@ -901,7 +901,7 @@ public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n       return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(\n           super.iterator()) {\n         @Override\n-        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {\n+        Map.Entry<K, Collection<V>> transform(Map.Entry<K, Collection<V>> entry) {\n           return new ForwardingMapEntry<K, Collection<V>>() {\n             @Override\n             protected Map.Entry<K, Collection<V>> delegate() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "private Entry<E> wrapEntry(final AvlNode<E> baseEntry) {",
        "fixed_code": "private Entry<E> wrapEntry(AvlNode<E> baseEntry) {",
        "patch": "@@ -368,7 +368,7 @@ public void clear() {\n     }\n   }\n \n-  private Entry<E> wrapEntry(final AvlNode<E> baseEntry) {\n+  private Entry<E> wrapEntry(AvlNode<E> baseEntry) {\n     return new Multisets.AbstractEntry<E>() {\n       @Override\n       @ParametricNullness"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(final ValueGraph<N, V> graph) {",
        "fixed_code": "private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(ValueGraph<N, V> graph) {",
        "patch": "@@ -140,7 +140,7 @@ public String toString() {\n         + edgeValueMap(this);\n   }\n \n-  private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(final ValueGraph<N, V> graph) {\n+  private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(ValueGraph<N, V> graph) {\n     return Maps.asMap(\n         graph.edges(),\n         edge ->"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final int max = Integer.MAX_VALUE / 10; // for int overflow detection",
        "fixed_code": "int max = Integer.MAX_VALUE / 10; // for int overflow detection",
        "patch": "@@ -376,7 +376,7 @@ private static byte parseOctet(String ipString, int start, int end) {\n   /** Returns a -1 if unable to parse */\n   private static int tryParseDecimal(String string, int start, int end) {\n     int decimal = 0;\n-    final int max = Integer.MAX_VALUE / 10; // for int overflow detection\n+    int max = Integer.MAX_VALUE / 10; // for int overflow detection\n     for (int i = start; i < end; i++) {\n       if (decimal > max) {\n         return -1;"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final String[] deduped = dedupe(elements);",
        "fixed_code": "String[] deduped = dedupe(elements);",
        "patch": "@@ -476,7 +476,7 @@ public Test testsForAbstractSet() {\n             new TestStringSetGenerator() {\n               @Override\n               protected Set<String> create(String[] elements) {\n-                final String[] deduped = dedupe(elements);\n+                String[] deduped = dedupe(elements);\n                 return new AbstractSet<String>() {\n                   @Override\n                   public int size() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Constructor<T> constructor;",
        "fixed_code": "Constructor<T> constructor;",
        "patch": "@@ -377,7 +377,7 @@ private static <T> void setImplementation(Class<T> type, Class<? extends T> impl\n     if (Modifier.isAbstract(type.getModifiers()) || !Modifier.isPublic(type.getModifiers())) {\n       return arbitraryConstantInstanceOrNull(type);\n     }\n-    final Constructor<T> constructor;\n+    Constructor<T> constructor;\n     try {\n       constructor = type.getConstructor();\n     } catch (NoSuchMethodException e) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterable<? extends Optional<? extends T>> optionals) {",
        "fixed_code": "Iterable<? extends Optional<? extends T>> optionals) {",
        "patch": "@@ -339,7 +339,7 @@ public java.util.Optional<T> toJavaUtil() {\n    * @since 11.0 (generics widened in 13.0)\n    */\n   public static <T> Iterable<T> presentInstances(\n-      final Iterable<? extends Optional<? extends T>> optionals) {\n+      Iterable<? extends Optional<? extends T>> optionals) {\n     checkNotNull(optionals);\n     return () ->\n         new AbstractIterator<T>() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();",
        "fixed_code": "Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();",
        "patch": "@@ -353,7 +353,7 @@ public V setValue(V value) {\n   }\n \n   Iterator<Entry<K, V>> entrySetIterator() {\n-    final Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();\n+    Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();\n     return new Iterator<Entry<K, V>>() {\n       @Nullable Entry<K, V> entry;\n "
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "Entry<E> output(final int index) {",
        "fixed_code": "Entry<E> output(int index) {",
        "patch": "@@ -264,7 +264,7 @@ E output(int index) {\n   Iterator<Entry<E>> entryIterator() {\n     return new Itr<Entry<E>>() {\n       @Override\n-      Entry<E> output(final int index) {\n+      Entry<E> output(int index) {\n         return new Multisets.AbstractEntry<E>() {\n           @Override\n           public E getElement() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();",
        "fixed_code": "ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();",
        "patch": "@@ -80,7 +80,7 @@ boolean isPartialView() {\n \n   @Override\n   public ImmutableList<V> asList() {\n-    final ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();\n+    ImmutableList<Entry<K, V>> entryList = map.entrySet().asList();\n     return new ImmutableAsList<V>() {\n       @Override\n       public V get(int index) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Iterator<Entry<E>> entryIterator = entrySet().iterator();",
        "fixed_code": "Iterator<Entry<E>> entryIterator = entrySet().iterator();",
        "patch": "@@ -228,7 +228,7 @@ static <E> ImmutableMultiset<E> copyFromEntries(\n \n   @Override\n   public UnmodifiableIterator<E> iterator() {\n-    final Iterator<Entry<E>> entryIterator = entrySet().iterator();\n+    Iterator<Entry<E>> entryIterator = entrySet().iterator();\n     return new UnmodifiableIterator<E>() {\n       int remaining;\n       @Nullable E element;"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Comparator<? super K> comparator,",
        "fixed_code": "Comparator<? super K> comparator,",
        "patch": "@@ -496,7 +496,7 @@ private static <K, V> ImmutableSortedMap<K, V> fromEntries(\n   }\n \n   private static <K, V> ImmutableSortedMap<K, V> fromEntries(\n-      final Comparator<? super K> comparator,\n+      Comparator<? super K> comparator,\n       boolean sameComparator,\n       @Nullable Entry<K, V>[] entryArray,\n       int size) {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Segment<K, V, E, S>[] segments = this.segments;",
        "fixed_code": "Segment<K, V, E, S>[] segments = this.segments;",
        "patch": "@@ -2392,7 +2392,7 @@ public boolean containsValue(@Nullable Object value) {\n     // such that none of the subsequent iterations observed it, despite the fact that at every point\n     // in time it was present somewhere int the map. This becomes increasingly unlikely as\n     // CONTAINS_VALUE_RETRIES increases, though without locking it is theoretically possible.\n-    final Segment<K, V, E, S>[] segments = this.segments;\n+    Segment<K, V, E, S>[] segments = this.segments;\n     long last = -1L;\n     for (int i = 0; i < CONTAINS_VALUE_RETRIES; i++) {\n       long sum = 0L;"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final Entry<Class<? extends @NonNull B>, B> entry) {",
        "fixed_code": "Entry<Class<? extends @NonNull B>, B> entry) {",
        "patch": "@@ -85,7 +85,7 @@ private MutableClassToInstanceMap(Map<Class<? extends @NonNull B>, B> delegate)\n    * Wraps the {@code setValue} implementation of an {@code Entry} to enforce the class constraint.\n    */\n   private static <B extends @Nullable Object> Entry<Class<? extends @NonNull B>, B> checkedEntry(\n-      final Entry<Class<? extends @NonNull B>, B> entry) {\n+      Entry<Class<? extends @NonNull B>, B> entry) {\n     return new ForwardingMapEntry<Class<? extends @NonNull B>, B>() {\n       @Override\n       protected Entry<Class<? extends @NonNull B>, B> delegate() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {",
        "fixed_code": "Map.Entry<K, Collection<V>> transform(Map.Entry<K, Collection<V>> entry) {",
        "patch": "@@ -966,7 +966,7 @@ public Iterator<Map.Entry<K, Collection<V>>> iterator() {\n       return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(\n           super.iterator()) {\n         @Override\n-        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {\n+        Map.Entry<K, Collection<V>> transform(Map.Entry<K, Collection<V>> entry) {\n           return new ForwardingMapEntry<K, Collection<V>>() {\n             @Override\n             protected Map.Entry<K, Collection<V>> delegate() {"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "private Entry<E> wrapEntry(final AvlNode<E> baseEntry) {",
        "fixed_code": "private Entry<E> wrapEntry(AvlNode<E> baseEntry) {",
        "patch": "@@ -370,7 +370,7 @@ public void clear() {\n     }\n   }\n \n-  private Entry<E> wrapEntry(final AvlNode<E> baseEntry) {\n+  private Entry<E> wrapEntry(AvlNode<E> baseEntry) {\n     return new Multisets.AbstractEntry<E>() {\n       @Override\n       @ParametricNullness"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(final ValueGraph<N, V> graph) {",
        "fixed_code": "private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(ValueGraph<N, V> graph) {",
        "patch": "@@ -151,7 +151,7 @@ public String toString() {\n         + edgeValueMap(this);\n   }\n \n-  private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(final ValueGraph<N, V> graph) {\n+  private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(ValueGraph<N, V> graph) {\n     return Maps.asMap(\n         graph.edges(),\n         edge ->"
    },
    {
        "commit_id": "c4965e486851765f6ffd102771abe39c529557ea",
        "commit_message": "Fix some https://errorprone.info/bugpattern/UnnecessaryFinal warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728791732",
        "commit_url": "https://github.com/google/guava/commit/c4965e486851765f6ffd102771abe39c529557ea",
        "buggy_code": "final int max = Integer.MAX_VALUE / 10; // for int overflow detection",
        "fixed_code": "int max = Integer.MAX_VALUE / 10; // for int overflow detection",
        "patch": "@@ -376,7 +376,7 @@ private static byte parseOctet(String ipString, int start, int end) {\n   /** Returns a -1 if unable to parse */\n   private static int tryParseDecimal(String string, int start, int end) {\n     int decimal = 0;\n-    final int max = Integer.MAX_VALUE / 10; // for int overflow detection\n+    int max = Integer.MAX_VALUE / 10; // for int overflow detection\n     for (int i = start; i < end; i++) {\n       if (decimal > max) {\n         return -1;"
    },
    {
        "commit_id": "688ad56ac376ba9e7cce985b1cef6690231dbec6",
        "commit_message": "Fix some https://errorprone.info/bugpattern/AnnotationPosition warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728705777",
        "commit_url": "https://github.com/google/guava/commit/688ad56ac376ba9e7cce985b1cef6690231dbec6",
        "buggy_code": "private @LazyInit ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();",
        "fixed_code": "@LazyInit private ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();",
        "patch": "@@ -99,7 +99,7 @@ public static ExecutionSequencer create() {\n   private final AtomicReference<ListenableFuture<@Nullable Void>> ref =\n       new AtomicReference<>(immediateVoidFuture());\n \n-  private @LazyInit ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();\n+  @LazyInit private ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();\n \n   /**\n    * This object is unsafely published, but avoids problematic races by relying exclusively on the"
    },
    {
        "commit_id": "688ad56ac376ba9e7cce985b1cef6690231dbec6",
        "commit_message": "Fix some https://errorprone.info/bugpattern/AnnotationPosition warnings.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 728705777",
        "commit_url": "https://github.com/google/guava/commit/688ad56ac376ba9e7cce985b1cef6690231dbec6",
        "buggy_code": "private @LazyInit ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();",
        "fixed_code": "@LazyInit private ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();",
        "patch": "@@ -99,7 +99,7 @@ public static ExecutionSequencer create() {\n   private final AtomicReference<ListenableFuture<@Nullable Void>> ref =\n       new AtomicReference<>(immediateVoidFuture());\n \n-  private @LazyInit ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();\n+  @LazyInit private ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue();\n \n   /**\n    * This object is unsafely published, but avoids problematic races by relying exclusively on the"
    },
    {
        "commit_id": "12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "commit_message": "Address some https://errorprone.info/bugpattern/UnnecessaryJavacSuppressWarnings warnings.\n\n(And push a few class-level suppressions down to individual methods.)\n\nI reverted some of the changes that Error Prone suggested. I'm a little unclear on various things:\n- whether attempting to suppress `removal` warnings accomplishes anything under any compiler that we care about\n- whether extending a deprecated type produces a warning under any compiler that we care about\n- whether some deprecation warnings are showing up as \"unnecessary\" only because of builds against other sources of `java.*` classes that don't include the JDK's deprecations\n\nHopefully all the removals that I've kept in the CL are good.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 712957106",
        "commit_url": "https://github.com/google/guava/commit/12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "buggy_code": "@SuppressWarnings(\"deprecation\") // intentional; deprecation is for callers primarily",
        "fixed_code": "@Deprecated",
        "patch": "@@ -1815,7 +1815,7 @@ public boolean matches(char c) {\n       return predicate.apply(c);\n     }\n \n-    @SuppressWarnings(\"deprecation\") // intentional; deprecation is for callers primarily\n+    @Deprecated\n     @Override\n     public boolean apply(Character character) {\n       return predicate.apply(checkNotNull(character));"
    },
    {
        "commit_id": "12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "commit_message": "Address some https://errorprone.info/bugpattern/UnnecessaryJavacSuppressWarnings warnings.\n\n(And push a few class-level suppressions down to individual methods.)\n\nI reverted some of the changes that Error Prone suggested. I'm a little unclear on various things:\n- whether attempting to suppress `removal` warnings accomplishes anything under any compiler that we care about\n- whether extending a deprecated type produces a warning under any compiler that we care about\n- whether some deprecation warnings are showing up as \"unnecessary\" only because of builds against other sources of `java.*` classes that don't include the JDK's deprecations\n\nHopefully all the removals that I've kept in the CL are good.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 712957106",
        "commit_url": "https://github.com/google/guava/commit/12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "buggy_code": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // TODO(kevinb): the right way to explain this??",
        "fixed_code": "@SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??",
        "patch": "@@ -24,11 +24,11 @@\n \n /** An ordering that uses the reverse of the natural order of the values. */\n @GwtCompatible(serializable = true)\n-@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // TODO(kevinb): the right way to explain this??\n final class ReverseNaturalOrdering extends Ordering<Comparable<?>> implements Serializable {\n   static final ReverseNaturalOrdering INSTANCE = new ReverseNaturalOrdering();\n \n   @Override\n+  @SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??\n   public int compare(Comparable<?> left, Comparable<?> right) {\n     checkNotNull(left); // right null is caught later\n     if (left == right) {"
    },
    {
        "commit_id": "12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "commit_message": "Address some https://errorprone.info/bugpattern/UnnecessaryJavacSuppressWarnings warnings.\n\n(And push a few class-level suppressions down to individual methods.)\n\nI reverted some of the changes that Error Prone suggested. I'm a little unclear on various things:\n- whether attempting to suppress `removal` warnings accomplishes anything under any compiler that we care about\n- whether extending a deprecated type produces a warning under any compiler that we care about\n- whether some deprecation warnings are showing up as \"unnecessary\" only because of builds against other sources of `java.*` classes that don't include the JDK's deprecations\n\nHopefully all the removals that I've kept in the CL are good.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 712957106",
        "commit_url": "https://github.com/google/guava/commit/12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "buggy_code": "@SuppressWarnings(\"deprecation\") // intentional; deprecation is for callers primarily",
        "fixed_code": "@Deprecated",
        "patch": "@@ -1815,7 +1815,7 @@ public boolean matches(char c) {\n       return predicate.apply(c);\n     }\n \n-    @SuppressWarnings(\"deprecation\") // intentional; deprecation is for callers primarily\n+    @Deprecated\n     @Override\n     public boolean apply(Character character) {\n       return predicate.apply(checkNotNull(character));"
    },
    {
        "commit_id": "12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "commit_message": "Address some https://errorprone.info/bugpattern/UnnecessaryJavacSuppressWarnings warnings.\n\n(And push a few class-level suppressions down to individual methods.)\n\nI reverted some of the changes that Error Prone suggested. I'm a little unclear on various things:\n- whether attempting to suppress `removal` warnings accomplishes anything under any compiler that we care about\n- whether extending a deprecated type produces a warning under any compiler that we care about\n- whether some deprecation warnings are showing up as \"unnecessary\" only because of builds against other sources of `java.*` classes that don't include the JDK's deprecations\n\nHopefully all the removals that I've kept in the CL are good.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 712957106",
        "commit_url": "https://github.com/google/guava/commit/12bf71e5e87e88516dfce13ccdf2e3aca1061572",
        "buggy_code": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // TODO(kevinb): the right way to explain this??",
        "fixed_code": "@SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??",
        "patch": "@@ -24,11 +24,11 @@\n \n /** An ordering that uses the reverse of the natural order of the values. */\n @GwtCompatible(serializable = true)\n-@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // TODO(kevinb): the right way to explain this??\n final class ReverseNaturalOrdering extends Ordering<Comparable<?>> implements Serializable {\n   static final ReverseNaturalOrdering INSTANCE = new ReverseNaturalOrdering();\n \n   @Override\n+  @SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??\n   public int compare(Comparable<?> left, Comparable<?> right) {\n     checkNotNull(left); // right null is caught later\n     if (left == right) {"
    },
    {
        "commit_id": "660e5dcc59a2bccb382bd5ccaa0fc8957f72b691",
        "commit_message": "Prefactoring for future changes that will avoid using `Unsafe`.\n\nSee https://github.com/google/guava/issues/6806#issuecomment-2513902266.\n\nChanges:\n\n- \"`SafeAtomicHelper`\" is arguably already too generic a name for that class, given that we have a `SynchronizedAtomicHelper` that also avoids using `Unsafe`. It's going to become even more overly generic (and more overly scary) when we likely introduce a `VarHandle`-based alternative. (And maybe we'll even remove the `Unsafe`-based one entirely?) Rename it.\n- Remove Javadoc from implementation classes, since it merely duplicates that from the superclass.\n- Fix links in the (package-private) Javadoc.\n\nI considered also renaming the `AtomicHelper` methods to match the terminology of `VarHandle`. This would mean only renaming `putThread`+`putNext` to... `setReleaseThread`? `setThreadReleasedly`? `setThreadUsingReleaseAccessMode`? I didn't find anything that I particularly liked.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 705868797",
        "commit_url": "https://github.com/google/guava/commit/660e5dcc59a2bccb382bd5ccaa0fc8957f72b691",
        "buggy_code": "checkHelperVersion(NO_UNSAFE, \"SafeAtomicHelper\");",
        "fixed_code": "checkHelperVersion(NO_UNSAFE, \"AtomicReferenceFieldUpdaterAtomicHelper\");",
        "patch": "@@ -85,7 +85,7 @@ public static TestSuite suite() {\n   public void runTest() throws Exception {\n     // First ensure that our classloaders are initializing the correct helper versions\n     checkHelperVersion(getClass().getClassLoader(), \"UnsafeAtomicHelper\");\n-    checkHelperVersion(NO_UNSAFE, \"SafeAtomicHelper\");\n+    checkHelperVersion(NO_UNSAFE, \"AtomicReferenceFieldUpdaterAtomicHelper\");\n     checkHelperVersion(NO_ATOMIC_REFERENCE_FIELD_UPDATER, \"SynchronizedHelper\");\n \n     // Run the corresponding AbstractFutureTest test method in a new classloader that disallows"
    },
    {
        "commit_id": "660e5dcc59a2bccb382bd5ccaa0fc8957f72b691",
        "commit_message": "Prefactoring for future changes that will avoid using `Unsafe`.\n\nSee https://github.com/google/guava/issues/6806#issuecomment-2513902266.\n\nChanges:\n\n- \"`SafeAtomicHelper`\" is arguably already too generic a name for that class, given that we have a `SynchronizedAtomicHelper` that also avoids using `Unsafe`. It's going to become even more overly generic (and more overly scary) when we likely introduce a `VarHandle`-based alternative. (And maybe we'll even remove the `Unsafe`-based one entirely?) Rename it.\n- Remove Javadoc from implementation classes, since it merely duplicates that from the superclass.\n- Fix links in the (package-private) Javadoc.\n\nI considered also renaming the `AtomicHelper` methods to match the terminology of `VarHandle`. This would mean only renaming `putThread`+`putNext` to... `setReleaseThread`? `setThreadReleasedly`? `setThreadUsingReleaseAccessMode`? I didn't find anything that I particularly liked.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 705868797",
        "commit_url": "https://github.com/google/guava/commit/660e5dcc59a2bccb382bd5ccaa0fc8957f72b691",
        "buggy_code": "checkHelperVersion(NO_UNSAFE, \"SafeAtomicHelper\");",
        "fixed_code": "checkHelperVersion(NO_UNSAFE, \"AtomicReferenceFieldUpdaterAtomicHelper\");",
        "patch": "@@ -85,7 +85,7 @@ public static TestSuite suite() {\n   public void runTest() throws Exception {\n     // First ensure that our classloaders are initializing the correct helper versions\n     checkHelperVersion(getClass().getClassLoader(), \"UnsafeAtomicHelper\");\n-    checkHelperVersion(NO_UNSAFE, \"SafeAtomicHelper\");\n+    checkHelperVersion(NO_UNSAFE, \"AtomicReferenceFieldUpdaterAtomicHelper\");\n     checkHelperVersion(NO_ATOMIC_REFERENCE_FIELD_UPDATER, \"SynchronizedHelper\");\n \n     // Run the corresponding AbstractFutureTest test method in a new classloader that disallows"
    },
    {
        "commit_id": "983c10642a64441fe9094facf2f0a6f1e8d301e9",
        "commit_message": "Fix/suppress more warnings.\n\nFor the mutex change, compare cl/660005124.\n\nAlso, sneak in an implementation comment that would have been better in cl/704698587.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 704748981",
        "commit_url": "https://github.com/google/guava/commit/983c10642a64441fe9094facf2f0a6f1e8d301e9",
        "buggy_code": "private final Object mutex = new Integer(1);",
        "fixed_code": "private final Object mutex = new Object[0]; // something Serializable",
        "patch": "@@ -261,7 +261,7 @@ public static TestSuite suite() {\n     suite.addTest(\n         NavigableMapTestSuiteBuilder.using(\n                 new TestStringSortedMapGenerator() {\n-                  private final Object mutex = new Integer(1);\n+                  private final Object mutex = new Object[0]; // something Serializable\n \n                   @Override\n                   protected SortedMap<String, String> create(Entry<String, String>[] entries) {"
    },
    {
        "commit_id": "983c10642a64441fe9094facf2f0a6f1e8d301e9",
        "commit_message": "Fix/suppress more warnings.\n\nFor the mutex change, compare cl/660005124.\n\nAlso, sneak in an implementation comment that would have been better in cl/704698587.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 704748981",
        "commit_url": "https://github.com/google/guava/commit/983c10642a64441fe9094facf2f0a6f1e8d301e9",
        "buggy_code": "private final Object mutex = new Integer(1);",
        "fixed_code": "private final Object mutex = new Object[0]; // something Serializable",
        "patch": "@@ -261,7 +261,7 @@ public static TestSuite suite() {\n     suite.addTest(\n         NavigableMapTestSuiteBuilder.using(\n                 new TestStringSortedMapGenerator() {\n-                  private final Object mutex = new Integer(1);\n+                  private final Object mutex = new Object[0]; // something Serializable\n \n                   @Override\n                   protected SortedMap<String, String> create(Entry<String, String>[] entries) {"
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "@MapFeature.Require(absent = ALLOWS_NULL_KEYS)",
        "fixed_code": "@MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)",
        "patch": "@@ -157,7 +157,7 @@ public void testPutAllOnPresentNullKey() {\n     assertGet(null, v3(), v4());\n   }\n \n-  @MapFeature.Require(absent = ALLOWS_NULL_KEYS)\n+  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)\n   public void testPutAllNullForbidden() {\n     try {\n       multimap().putAll(null, Collections.singletonList(v3()));"
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "Entry<String, Integer> entry = (Entry<String, Integer>) o;",
        "fixed_code": "Entry<String, Integer> entry = (Entry<String, Integer>) checkNotNull(o);",
        "patch": "@@ -98,7 +98,7 @@ public List<Entry<String, Integer>> create(Object... elements) {\n       ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n       for (Object o : elements) {\n         @SuppressWarnings(\"unchecked\")\n-        Entry<String, Integer> entry = (Entry<String, Integer>) o;\n+        Entry<String, Integer> entry = (Entry<String, Integer>) checkNotNull(o);\n         builder.put(entry);\n       }\n       return builder.build().entrySet().asList();"
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "CollectionFeature.ALLOWS_NULL_QUERIES)",
        "fixed_code": "CollectionFeature.ALLOWS_NULL_VALUES)",
        "patch": "@@ -50,7 +50,7 @@ public static Test suite() {\n                 CollectionSize.ANY,\n                 CollectionFeature.KNOWN_ORDER,\n                 CollectionFeature.SERIALIZABLE,\n-                CollectionFeature.ALLOWS_NULL_QUERIES)\n+                CollectionFeature.ALLOWS_NULL_VALUES)\n             .named(\"Multisets.unmodifiableMultiset[LinkedHashMultiset]\")\n             .createTestSuite());\n "
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "@MapFeature.Require(absent = ALLOWS_NULL_KEYS)",
        "fixed_code": "@MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)",
        "patch": "@@ -157,7 +157,7 @@ public void testPutAllOnPresentNullKey() {\n     assertGet(null, v3(), v4());\n   }\n \n-  @MapFeature.Require(absent = ALLOWS_NULL_KEYS)\n+  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)\n   public void testPutAllNullForbidden() {\n     try {\n       multimap().putAll(null, Collections.singletonList(v3()));"
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "Entry<String, Integer> entry = (Entry<String, Integer>) o;",
        "fixed_code": "Entry<String, Integer> entry = (Entry<String, Integer>) checkNotNull(o);",
        "patch": "@@ -98,7 +98,7 @@ public List<Entry<String, Integer>> create(Object... elements) {\n       ImmutableSortedMap.Builder<String, Integer> builder = ImmutableSortedMap.naturalOrder();\n       for (Object o : elements) {\n         @SuppressWarnings(\"unchecked\")\n-        Entry<String, Integer> entry = (Entry<String, Integer>) o;\n+        Entry<String, Integer> entry = (Entry<String, Integer>) checkNotNull(o);\n         builder.put(entry);\n       }\n       return builder.build().entrySet().asList();"
    },
    {
        "commit_id": "5da71a77865cbab3d0609b7faf8509685241ffce",
        "commit_message": "Fix some misconfigured collections test suites that were passing due to #7401.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 681498058",
        "commit_url": "https://github.com/google/guava/commit/5da71a77865cbab3d0609b7faf8509685241ffce",
        "buggy_code": "CollectionFeature.ALLOWS_NULL_QUERIES)",
        "fixed_code": "CollectionFeature.ALLOWS_NULL_VALUES)",
        "patch": "@@ -50,7 +50,7 @@ public static Test suite() {\n                 CollectionSize.ANY,\n                 CollectionFeature.KNOWN_ORDER,\n                 CollectionFeature.SERIALIZABLE,\n-                CollectionFeature.ALLOWS_NULL_QUERIES)\n+                CollectionFeature.ALLOWS_NULL_VALUES)\n             .named(\"Multisets.unmodifiableMultiset[LinkedHashMultiset]\")\n             .createTestSuite());\n "
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testMapSplitter_CharacterSeparator() {",
        "fixed_code": "public void testMapSplitter_characterSeparator() {",
        "patch": "@@ -724,7 +724,7 @@ public void testMapSplitter_notTrimmed() {\n     assertThat(m.entrySet()).containsExactlyElementsIn(expected.entrySet()).inOrder();\n   }\n \n-  public void testMapSplitter_CharacterSeparator() {\n+  public void testMapSplitter_characterSeparator() {\n     // try different delimiters.\n     Map<String, String> m =\n         Splitter.on(\",\").withKeyValueSeparator(':').split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testToString_ToStringTwice() {",
        "fixed_code": "public void testToString_toStringTwice() {",
        "patch": "@@ -241,7 +241,7 @@ public void testToStringLenient_addWithNullValue() {\n   }\n \n   @GwtIncompatible // Class names are obfuscated in GWT\n-  public void testToString_ToStringTwice() {\n+  public void testToString_toStringTwice() {\n     MoreObjects.ToStringHelper helper =\n         MoreObjects.toStringHelper(new TestClass())\n             .add(\"field1\", 1)"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testHeadSubTailMap_FilteredMap() {",
        "fixed_code": "public void testHeadSubTailMap_filteredMap() {",
        "patch": "@@ -39,7 +39,7 @@ public void testFirstAndLastKeyFilteredMap() {\n     assertEquals(\"cat\", filtered.lastKey());\n   }\n \n-  public void testHeadSubTailMap_FilteredMap() {\n+  public void testHeadSubTailMap_filteredMap() {\n     SortedMap<String, Integer> unfiltered = createUnfiltered();\n     unfiltered.put(\"apple\", 2);\n     unfiltered.put(\"banana\", 6);"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testCodePointAt_IndexOutOfBoundsException() {",
        "fixed_code": "public void testCodePointAt_indexOutOfBoundsException() {",
        "patch": "@@ -179,7 +179,7 @@ protected int nextEscapeIndex(CharSequence csq, int index, int end) {\n     assertEquals(\"\\0HELLO \\uD800\\uDC00 WORLD!\\n\", e.escape(\"\\0HeLLo \\uD800\\uDC00 WorlD!\\n\"));\n   }\n \n-  public void testCodePointAt_IndexOutOfBoundsException() {\n+  public void testCodePointAt_indexOutOfBoundsException() {\n     try {\n       UnicodeEscaper.codePointAt(\"Testing...\", 4, 2);\n       fail();"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testSkipFully_EOF() throws IOException {",
        "fixed_code": "public void testSkipFully_eof() throws IOException {",
        "patch": "@@ -118,7 +118,7 @@ public Integer getResult() {\n     assertEquals(\"ab\", sb.toString());\n   }\n \n-  public void testSkipFully_EOF() throws IOException {\n+  public void testSkipFully_eof() throws IOException {\n     Reader reader = new StringReader(\"abcde\");\n     assertThrows(EOFException.class, () -> CharStreams.skipFully(reader, 6));\n   }"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testRoundToDouble_Zero() {",
        "fixed_code": "public void testRoundToDouble_zero() {",
        "patch": "@@ -600,7 +600,7 @@ public void test() {\n \n   @J2ktIncompatible\n   @GwtIncompatible\n-  public void testRoundToDouble_Zero() {\n+  public void testRoundToDouble_zero() {\n     new RoundToDoubleTester(BigInteger.ZERO).setExpectation(0.0, values()).test();\n   }\n "
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG() {",
        "fixed_code": "public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_bug() {",
        "patch": "@@ -636,7 +636,7 @@ class Local {}\n     }\n   }\n \n-  public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG() {\n+  public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_bug() {\n     LocalClassWithSeeminglyHiddenThisInStaticInitializer unused =\n         new LocalClassWithSeeminglyHiddenThisInStaticInitializer();\n   }"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testAwaitTerminated_FailedService() throws Exception {",
        "fixed_code": "public void testAwaitTerminated_failedService() throws Exception {",
        "patch": "@@ -348,7 +348,7 @@ public void run() {\n     assertFalse(waiter.isAlive());\n   }\n \n-  public void testAwaitTerminated_FailedService() throws Exception {\n+  public void testAwaitTerminated_failedService() throws Exception {\n     final ManualSwitchedService service = new ManualSwitchedService();\n     final AtomicReference<Throwable> exception = Atomics.newReference();\n     Thread waiter ="
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testMapSplitter_CharacterSeparator() {",
        "fixed_code": "public void testMapSplitter_characterSeparator() {",
        "patch": "@@ -731,7 +731,7 @@ public void testMapSplitter_notTrimmed() {\n     assertThat(m.entrySet()).containsExactlyElementsIn(expected.entrySet()).inOrder();\n   }\n \n-  public void testMapSplitter_CharacterSeparator() {\n+  public void testMapSplitter_characterSeparator() {\n     // try different delimiters.\n     Map<String, String> m =\n         Splitter.on(\",\").withKeyValueSeparator(':').split(\"boy:tom,girl:tina,cat:kitty,dog:tommy\");"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testToString_ToStringTwice() {",
        "fixed_code": "public void testToString_toStringTwice() {",
        "patch": "@@ -241,7 +241,7 @@ public void testToStringLenient_addWithNullValue() {\n   }\n \n   @GwtIncompatible // Class names are obfuscated in GWT\n-  public void testToString_ToStringTwice() {\n+  public void testToString_toStringTwice() {\n     MoreObjects.ToStringHelper helper =\n         MoreObjects.toStringHelper(new TestClass())\n             .add(\"field1\", 1)"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testComputeIfAbsent_RemovalListener() {",
        "fixed_code": "public void testComputeIfAbsent_removalListener() {",
        "patch": "@@ -774,7 +774,7 @@ public void testValues() {\n     assertEquals(1, map.size());\n   }\n \n-  public void testComputeIfAbsent_RemovalListener() {\n+  public void testComputeIfAbsent_removalListener() {\n     List<RemovalNotification<Object, Object>> notifications = new ArrayList<>();\n     RemovalListener<Object, Object> removalListener =\n         new RemovalListener<Object, Object>() {"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testHeadSubTailMap_FilteredMap() {",
        "fixed_code": "public void testHeadSubTailMap_filteredMap() {",
        "patch": "@@ -39,7 +39,7 @@ public void testFirstAndLastKeyFilteredMap() {\n     assertEquals(\"cat\", filtered.lastKey());\n   }\n \n-  public void testHeadSubTailMap_FilteredMap() {\n+  public void testHeadSubTailMap_filteredMap() {\n     SortedMap<String, Integer> unfiltered = createUnfiltered();\n     unfiltered.put(\"apple\", 2);\n     unfiltered.put(\"banana\", 6);"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testCodePointAt_IndexOutOfBoundsException() {",
        "fixed_code": "public void testCodePointAt_indexOutOfBoundsException() {",
        "patch": "@@ -179,7 +179,7 @@ protected int nextEscapeIndex(CharSequence csq, int index, int end) {\n     assertEquals(\"\\0HELLO \\uD800\\uDC00 WORLD!\\n\", e.escape(\"\\0HeLLo \\uD800\\uDC00 WorlD!\\n\"));\n   }\n \n-  public void testCodePointAt_IndexOutOfBoundsException() {\n+  public void testCodePointAt_indexOutOfBoundsException() {\n     try {\n       UnicodeEscaper.codePointAt(\"Testing...\", 4, 2);\n       fail();"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testSkipFully_EOF() throws IOException {",
        "fixed_code": "public void testSkipFully_eof() throws IOException {",
        "patch": "@@ -118,7 +118,7 @@ public Integer getResult() {\n     assertEquals(\"ab\", sb.toString());\n   }\n \n-  public void testSkipFully_EOF() throws IOException {\n+  public void testSkipFully_eof() throws IOException {\n     Reader reader = new StringReader(\"abcde\");\n     assertThrows(EOFException.class, () -> CharStreams.skipFully(reader, 6));\n   }"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testRoundToDouble_Zero() {",
        "fixed_code": "public void testRoundToDouble_zero() {",
        "patch": "@@ -600,7 +600,7 @@ public void test() {\n \n   @J2ktIncompatible\n   @GwtIncompatible\n-  public void testRoundToDouble_Zero() {\n+  public void testRoundToDouble_zero() {\n     new RoundToDoubleTester(BigInteger.ZERO).setExpectation(0.0, values()).test();\n   }\n "
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG() {",
        "fixed_code": "public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_bug() {",
        "patch": "@@ -636,7 +636,7 @@ class Local {}\n     }\n   }\n \n-  public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG() {\n+  public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_bug() {\n     LocalClassWithSeeminglyHiddenThisInStaticInitializer unused =\n         new LocalClassWithSeeminglyHiddenThisInStaticInitializer();\n   }"
    },
    {
        "commit_id": "85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "commit_message": "Fix some [style violations](https://google.github.io/styleguide/javaguide.html#s5.2.3-method-names) in test method names.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 655713573",
        "commit_url": "https://github.com/google/guava/commit/85c6f88765ec599b2167129cca06f6a5fa14ddc1",
        "buggy_code": "public void testAwaitTerminated_FailedService() throws Exception {",
        "fixed_code": "public void testAwaitTerminated_failedService() throws Exception {",
        "patch": "@@ -348,7 +348,7 @@ public void run() {\n     assertFalse(waiter.isAlive());\n   }\n \n-  public void testAwaitTerminated_FailedService() throws Exception {\n+  public void testAwaitTerminated_failedService() throws Exception {\n     final ManualSwitchedService service = new ManualSwitchedService();\n     final AtomicReference<Throwable> exception = Atomics.newReference();\n     Thread waiter ="
    },
    {
        "commit_id": "76f87bbcc20c79de5d05582b191835f8a60de452",
        "commit_message": "Bump a few Maven plugins.\n\nI'm not sure that any of these end up being _necessary_ to what I'm doing in https://github.com/google/guava/issues/7331#issuecomment-2248105640 / https://github.com/google/guava/issues/3990#issuecomment-1444307178. But the upgrade to `maven-surefire-plugin` changes that plugin's toolchain behavior, so I particularly want to use the new version there in advance of starting to use toolchains.\n\nThis includes a workaround for a bug in the JDK 8 javac. (I don't know why the bug is appearing only after these upgrades.)\n\n```\nError:  /home/runner/work/guava/guava/guava/src/com/google/common/hash/BloomFilter.java:[78,29] error: cannot find symbol\n  symbol:   class Serializable\n  location: class BloomFilter<T>\n  where T is a type-variable:\n    T declared in class BloomFilter\n```\nRELNOTES=n/a\nPiperOrigin-RevId: 655637260",
        "commit_url": "https://github.com/google/guava/commit/76f87bbcc20c79de5d05582b191835f8a60de452",
        "buggy_code": "interface Strategy extends Serializable {",
        "fixed_code": "interface Strategy extends java.io.Serializable {",
        "patch": "@@ -74,7 +74,7 @@ public final class BloomFilter<T extends @Nullable Object> implements Predicate<\n    *\n    * <p>Implementations should be collections of pure functions (i.e. stateless).\n    */\n-  interface Strategy extends Serializable {\n+  interface Strategy extends java.io.Serializable {\n \n     /**\n      * Sets {@code numHashFunctions} bits of the given bit array, by hashing a user element."
    },
    {
        "commit_id": "76f87bbcc20c79de5d05582b191835f8a60de452",
        "commit_message": "Bump a few Maven plugins.\n\nI'm not sure that any of these end up being _necessary_ to what I'm doing in https://github.com/google/guava/issues/7331#issuecomment-2248105640 / https://github.com/google/guava/issues/3990#issuecomment-1444307178. But the upgrade to `maven-surefire-plugin` changes that plugin's toolchain behavior, so I particularly want to use the new version there in advance of starting to use toolchains.\n\nThis includes a workaround for a bug in the JDK 8 javac. (I don't know why the bug is appearing only after these upgrades.)\n\n```\nError:  /home/runner/work/guava/guava/guava/src/com/google/common/hash/BloomFilter.java:[78,29] error: cannot find symbol\n  symbol:   class Serializable\n  location: class BloomFilter<T>\n  where T is a type-variable:\n    T declared in class BloomFilter\n```\nRELNOTES=n/a\nPiperOrigin-RevId: 655637260",
        "commit_url": "https://github.com/google/guava/commit/76f87bbcc20c79de5d05582b191835f8a60de452",
        "buggy_code": "interface Strategy extends Serializable {",
        "fixed_code": "interface Strategy extends java.io.Serializable {",
        "patch": "@@ -75,7 +75,7 @@ public final class BloomFilter<T extends @Nullable Object> implements Predicate<\n    *\n    * <p>Implementations should be collections of pure functions (i.e. stateless).\n    */\n-  interface Strategy extends Serializable {\n+  interface Strategy extends java.io.Serializable {\n \n     /**\n      * Sets {@code numHashFunctions} bits of the given bit array, by hashing a user element."
    },
    {
        "commit_id": "123ae0bda7c687b63c5677b42c36f92968ba0cdd",
        "commit_message": "Fix a bad name for an exception parameter.\n\n_Some_ kind of exception is _required_ here, not merely _tolerated_. (The test _behavior_ is at least already correct: There's a `fail()` call at the end of the `try` block.)\n\nI was ready to blame this on my multicatch cl/165645769 (which I figured may have merged 2 `catch` blocks with different parameter names), but in fact the name has been wrong since the file was written back in 2008 :)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 651885774",
        "commit_url": "https://github.com/google/guava/commit/123ae0bda7c687b63c5677b42c36f92968ba0cdd",
        "buggy_code": "} catch (UnsupportedOperationException | IndexOutOfBoundsException tolerated) {",
        "fixed_code": "} catch (UnsupportedOperationException | IndexOutOfBoundsException expected) {",
        "patch": "@@ -113,7 +113,7 @@ public void testSet_unsupportedByEmptyList() {\n     try {\n       getList().set(0, e3());\n       fail(\"set() should throw UnsupportedOperationException or IndexOutOfBoundsException\");\n-    } catch (UnsupportedOperationException | IndexOutOfBoundsException tolerated) {\n+    } catch (UnsupportedOperationException | IndexOutOfBoundsException expected) {\n     }\n     expectUnchanged();\n   }"
    },
    {
        "commit_id": "123ae0bda7c687b63c5677b42c36f92968ba0cdd",
        "commit_message": "Fix a bad name for an exception parameter.\n\n_Some_ kind of exception is _required_ here, not merely _tolerated_. (The test _behavior_ is at least already correct: There's a `fail()` call at the end of the `try` block.)\n\nI was ready to blame this on my multicatch cl/165645769 (which I figured may have merged 2 `catch` blocks with different parameter names), but in fact the name has been wrong since the file was written back in 2008 :)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 651885774",
        "commit_url": "https://github.com/google/guava/commit/123ae0bda7c687b63c5677b42c36f92968ba0cdd",
        "buggy_code": "} catch (UnsupportedOperationException | IndexOutOfBoundsException tolerated) {",
        "fixed_code": "} catch (UnsupportedOperationException | IndexOutOfBoundsException expected) {",
        "patch": "@@ -113,7 +113,7 @@ public void testSet_unsupportedByEmptyList() {\n     try {\n       getList().set(0, e3());\n       fail(\"set() should throw UnsupportedOperationException or IndexOutOfBoundsException\");\n-    } catch (UnsupportedOperationException | IndexOutOfBoundsException tolerated) {\n+    } catch (UnsupportedOperationException | IndexOutOfBoundsException expected) {\n     }\n     expectUnchanged();\n   }"
    },
    {
        "commit_id": "263712a207eb26fb624576fc0f6bf543f9ce7f0b",
        "commit_message": "Fix typo.\n\nFixes #7118\n\nRELNOTES=n/a\nPiperOrigin-RevId: 645447918",
        "commit_url": "https://github.com/google/guava/commit/263712a207eb26fb624576fc0f6bf543f9ce7f0b",
        "buggy_code": "new RuntimeException(\"but culottes have a tendancy to ride up!\");",
        "fixed_code": "new RuntimeException(\"but culottes have a tendency to ride up!\");",
        "patch": "@@ -121,7 +121,7 @@ public void testSubscriberThrowsException() throws Exception {\n     final RecordingSubscriberExceptionHandler handler = new RecordingSubscriberExceptionHandler();\n     final EventBus eventBus = new EventBus(handler);\n     final RuntimeException exception =\n-        new RuntimeException(\"but culottes have a tendancy to ride up!\");\n+        new RuntimeException(\"but culottes have a tendency to ride up!\");\n     final Object subscriber =\n         new Object() {\n           @Subscribe"
    },
    {
        "commit_id": "263712a207eb26fb624576fc0f6bf543f9ce7f0b",
        "commit_message": "Fix typo.\n\nFixes #7118\n\nRELNOTES=n/a\nPiperOrigin-RevId: 645447918",
        "commit_url": "https://github.com/google/guava/commit/263712a207eb26fb624576fc0f6bf543f9ce7f0b",
        "buggy_code": "new RuntimeException(\"but culottes have a tendancy to ride up!\");",
        "fixed_code": "new RuntimeException(\"but culottes have a tendency to ride up!\");",
        "patch": "@@ -121,7 +121,7 @@ public void testSubscriberThrowsException() throws Exception {\n     final RecordingSubscriberExceptionHandler handler = new RecordingSubscriberExceptionHandler();\n     final EventBus eventBus = new EventBus(handler);\n     final RuntimeException exception =\n-        new RuntimeException(\"but culottes have a tendancy to ride up!\");\n+        new RuntimeException(\"but culottes have a tendency to ride up!\");\n     final Object subscriber =\n         new Object() {\n           @Subscribe"
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "public java.util.Map.Entry<K, V> next() {",
        "fixed_code": "public Entry<K, V> next() {",
        "patch": "@@ -320,7 +320,7 @@ public boolean hasNext() {\n         }\n \n         @Override\n-        public java.util.Map.Entry<K, V> next() {\n+        public Entry<K, V> next() {\n           if (nextOrNull == null) {\n             throw new NoSuchElementException();\n           }"
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "interface Strategy extends java.io.Serializable {",
        "fixed_code": "interface Strategy extends Serializable {",
        "patch": "@@ -74,7 +74,7 @@ public final class BloomFilter<T extends @Nullable Object> implements Predicate<\n    *\n    * <p>Implementations should be collections of pure functions (i.e. stateless).\n    */\n-  interface Strategy extends java.io.Serializable {\n+  interface Strategy extends Serializable {\n \n     /**\n      * Sets {@code numHashFunctions} bits of the given bit array, by hashing a user element."
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "private UnmodifiableEntry(java.util.Map.Entry<K, V> delegate) {",
        "fixed_code": "private UnmodifiableEntry(Entry<K, V> delegate) {",
        "patch": "@@ -162,7 +162,7 @@ public Object[] toArray() {\n       return Iterators.transform(entries, UnmodifiableEntry::new);\n     }\n \n-    private UnmodifiableEntry(java.util.Map.Entry<K, V> delegate) {\n+    private UnmodifiableEntry(Entry<K, V> delegate) {\n       this.delegate = checkNotNull(delegate);\n     }\n "
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "public java.util.Map.Entry<K, V> next() {",
        "fixed_code": "public Entry<K, V> next() {",
        "patch": "@@ -326,7 +326,7 @@ public boolean hasNext() {\n         }\n \n         @Override\n-        public java.util.Map.Entry<K, V> next() {\n+        public Entry<K, V> next() {\n           if (nextOrNull == null) {\n             throw new NoSuchElementException();\n           }"
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "interface Strategy extends java.io.Serializable {",
        "fixed_code": "interface Strategy extends Serializable {",
        "patch": "@@ -75,7 +75,7 @@ public final class BloomFilter<T extends @Nullable Object> implements Predicate<\n    *\n    * <p>Implementations should be collections of pure functions (i.e. stateless).\n    */\n-  interface Strategy extends java.io.Serializable {\n+  interface Strategy extends Serializable {\n \n     /**\n      * Sets {@code numHashFunctions} bits of the given bit array, by hashing a user element."
    },
    {
        "commit_id": "808e0799f3026c0e08500ab5c06deb0952844377",
        "commit_message": "Use imports instead of fully qualified types.\n\nI suspect that many of these fully qualified types come from fears that our tools for stripping (e.g.) `@GwtIncompatible` elements will fail to strip imports when they should. (I think that there may specifically have been a problem in Make Open Easy (whose acronym is M-O-E, which would trigger a presubmit error if I removed those hyphens :)) when a comment or Javadoc referred to the simple name of a class that was imported but not actually used.)\n\nSome others come from trying to remain in sync with an upstream whose subsequent changes we've probably never actually pulled in (e.g., `JSR166TestCase`). Still others may come from trying to write code that can be copied and pasted from one file to another without touching imports. And some of it probably comes from attempts to suppress `sunapi` warnings (which can't be done on imports)\u2014but those went from \"hard to suppress\" to \"impossible to suppress\" a while back, as discussed in cl/637073596. We _might_ actually be better off with the imports, since _maaaaaaybe_ that will lead to only one warning instead of _n_? But I doubt we'd be so lucky.\n\nPiperOrigin-RevId: 643394004",
        "commit_url": "https://github.com/google/guava/commit/808e0799f3026c0e08500ab5c06deb0952844377",
        "buggy_code": "private UnmodifiableEntry(java.util.Map.Entry<K, V> delegate) {",
        "fixed_code": "private UnmodifiableEntry(Entry<K, V> delegate) {",
        "patch": "@@ -162,7 +162,7 @@ public Object[] toArray() {\n       return Iterators.transform(entries, UnmodifiableEntry::new);\n     }\n \n-    private UnmodifiableEntry(java.util.Map.Entry<K, V> delegate) {\n+    private UnmodifiableEntry(Entry<K, V> delegate) {\n       this.delegate = checkNotNull(delegate);\n     }\n "
    },
    {
        "commit_id": "142ddbc3225e8d0fb7b516aff9f7357344cb03b5",
        "commit_message": "Fix `@VisibleForTesting` violations.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 637960009",
        "commit_url": "https://github.com/google/guava/commit/142ddbc3225e8d0fb7b516aff9f7357344cb03b5",
        "buggy_code": "@VisibleForTesting static final int MAX_HASH_BUCKET_LENGTH = 8;",
        "fixed_code": "static final int MAX_HASH_BUCKET_LENGTH = 8;",
        "patch": "@@ -68,7 +68,7 @@ final class RegularImmutableMap<K, V> extends ImmutableMap<K, V> {\n    * Maximum allowed length of a hash table bucket before falling back to a j.u.HashMap based\n    * implementation. Experimentally determined.\n    */\n-  @VisibleForTesting static final int MAX_HASH_BUCKET_LENGTH = 8;\n+  static final int MAX_HASH_BUCKET_LENGTH = 8;\n \n   // entries in insertion order\n   @VisibleForTesting final transient Entry<K, V>[] entries;"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<K, V>[]) new Entry<?, ?>[length];",
        "patch": "@@ -58,7 +58,7 @@ public Set<Entry<K, V>> create(Object... elements) {\n   @Override\n   @SuppressWarnings(\"unchecked\") // generic arrays make typesafety sad\n   public Entry<K, V>[] createArray(int length) {\n-    return new Entry[length];\n+    return (Entry<K, V>[]) new Entry<?, ?>[length];\n   }\n \n   /** Returns the original element list, unchanged. */"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<V, K>[]) new Entry<?, ?>[length];",
        "patch": "@@ -128,7 +128,7 @@ public BiMap<V, K> create(Object... elements) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<V, K>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<V, K>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<String, Integer>[]) new Entry<?, ?>[length];",
        "patch": "@@ -129,7 +129,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<String, Integer>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<String, Integer>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<String, Integer>[]) new Entry<?, ?>[length];",
        "patch": "@@ -80,7 +80,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<String, Integer>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<String, Integer>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "Entry<K, V>[] entries = new Entry[] {a, c};",
        "fixed_code": "Entry<K, V>[] entries = (Entry<K, V>[]) new Entry<?, ?>[] {a, c};",
        "patch": "@@ -74,7 +74,7 @@ public void setUp() throws Exception {\n   /** Resets the contents of navigableMap to have entries a, c, for the navigation tests. */\n   @SuppressWarnings(\"unchecked\") // Needed to stop Eclipse whining\n   private void resetWithHole() {\n-    Entry<K, V>[] entries = new Entry[] {a, c};\n+    Entry<K, V>[] entries = (Entry<K, V>[]) new Entry<?, ?>[] {a, c};\n     super.resetMap(entries);\n     navigableMap = (NavigableMap<K, V>) getMap();\n   }"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<K, V>[]) new Entry<?, ?>[length];",
        "patch": "@@ -58,7 +58,7 @@ public Set<Entry<K, V>> create(Object... elements) {\n   @Override\n   @SuppressWarnings(\"unchecked\") // generic arrays make typesafety sad\n   public Entry<K, V>[] createArray(int length) {\n-    return new Entry[length];\n+    return (Entry<K, V>[]) new Entry<?, ?>[length];\n   }\n \n   /** Returns the original element list, unchanged. */"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<V, K>[]) new Entry<?, ?>[length];",
        "patch": "@@ -128,7 +128,7 @@ public BiMap<V, K> create(Object... elements) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<V, K>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<V, K>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<String, Integer>[]) new Entry<?, ?>[length];",
        "patch": "@@ -129,7 +129,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<String, Integer>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<String, Integer>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<String, Integer>[]) new Entry<?, ?>[length];",
        "patch": "@@ -80,7 +80,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<String, Integer>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<String, Integer>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "418402455d91b68e51381475aaf8f3022cbdd322",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect.testing`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 610477014",
        "commit_url": "https://github.com/google/guava/commit/418402455d91b68e51381475aaf8f3022cbdd322",
        "buggy_code": "Entry<K, V>[] entries = new Entry[] {a, c};",
        "fixed_code": "Entry<K, V>[] entries = (Entry<K, V>[]) new Entry<?, ?>[] {a, c};",
        "patch": "@@ -74,7 +74,7 @@ public void setUp() throws Exception {\n   /** Resets the contents of navigableMap to have entries a, c, for the navigation tests. */\n   @SuppressWarnings(\"unchecked\") // Needed to stop Eclipse whining\n   private void resetWithHole() {\n-    Entry<K, V>[] entries = new Entry[] {a, c};\n+    Entry<K, V>[] entries = (Entry<K, V>[]) new Entry<?, ?>[] {a, c};\n     super.resetMap(entries);\n     navigableMap = (NavigableMap<K, V>) getMap();\n   }"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "static final FieldSetter<ConcurrentHashMultiset> COUNT_MAP_FIELD_SETTER =",
        "fixed_code": "static final FieldSetter<? super ConcurrentHashMultiset<?>> COUNT_MAP_FIELD_SETTER =",
        "patch": "@@ -77,7 +77,7 @@ public final class ConcurrentHashMultiset<E> extends AbstractMultiset<E> impleme\n   // This constant allows the deserialization code to set a final field. This holder class\n   // makes sure it is not initialized unless an instance is deserialized.\n   private static class FieldSettersHolder {\n-    static final FieldSetter<ConcurrentHashMultiset> COUNT_MAP_FIELD_SETTER =\n+    static final FieldSetter<? super ConcurrentHashMultiset<?>> COUNT_MAP_FIELD_SETTER =\n         Serialization.getFieldSetter(ConcurrentHashMultiset.class, \"countMap\");\n   }\n "
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "return new Segment[ssize];",
        "fixed_code": "return (Segment<K, V, E, S>[]) new Segment<?, ?, ?, ?>[ssize];",
        "patch": "@@ -1169,7 +1169,7 @@ V getLiveValue(E entry) {\n \n   @SuppressWarnings(\"unchecked\")\n   final Segment<K, V, E, S>[] newSegmentArray(int ssize) {\n-    return new Segment[ssize];\n+    return (Segment<K, V, E, S>[]) new Segment<?, ?, ?, ?>[ssize];\n   }\n \n   // Inner Classes"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "return new SerializedForm(delegate());",
        "fixed_code": "return new SerializedForm<>(delegate());",
        "patch": "@@ -182,7 +182,7 @@ private static <T> T cast(Class<T> type, @CheckForNull Object value) {\n   }\n \n   private Object writeReplace() {\n-    return new SerializedForm(delegate());\n+    return new SerializedForm<>(delegate());\n   }\n \n   private void readObject(ObjectInputStream stream) throws InvalidObjectException {"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =",
        "fixed_code": "static final ImmutableSortedMultiset<?> NATURAL_EMPTY_MULTISET =",
        "patch": "@@ -36,7 +36,7 @@\n final class RegularImmutableSortedMultiset<E> extends ImmutableSortedMultiset<E> {\n   private static final long[] ZERO_CUMULATIVE_COUNTS = {0};\n \n-  static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =\n+  static final ImmutableSortedMultiset<?> NATURAL_EMPTY_MULTISET =\n       new RegularImmutableSortedMultiset<>(Ordering.natural());\n \n   @VisibleForTesting final transient RegularImmutableSortedSet<E> elementSet;"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "static final FieldSetter<ConcurrentHashMultiset> COUNT_MAP_FIELD_SETTER =",
        "fixed_code": "static final FieldSetter<? super ConcurrentHashMultiset<?>> COUNT_MAP_FIELD_SETTER =",
        "patch": "@@ -77,7 +77,7 @@ public final class ConcurrentHashMultiset<E> extends AbstractMultiset<E> impleme\n   // This constant allows the deserialization code to set a final field. This holder class\n   // makes sure it is not initialized unless an instance is deserialized.\n   private static class FieldSettersHolder {\n-    static final FieldSetter<ConcurrentHashMultiset> COUNT_MAP_FIELD_SETTER =\n+    static final FieldSetter<? super ConcurrentHashMultiset<?>> COUNT_MAP_FIELD_SETTER =\n         Serialization.getFieldSetter(ConcurrentHashMultiset.class, \"countMap\");\n   }\n "
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "return new ImmutableMapEntry[size];",
        "fixed_code": "return (ImmutableMapEntry<K, V>[]) new ImmutableMapEntry<?, ?>[size];",
        "patch": "@@ -46,7 +46,7 @@ class ImmutableMapEntry<K, V> extends ImmutableEntry<K, V> {\n    */\n   @SuppressWarnings(\"unchecked\") // Safe as long as the javadocs are followed\n   static <K, V> ImmutableMapEntry<K, V>[] createEntryArray(int size) {\n-    return new ImmutableMapEntry[size];\n+    return (ImmutableMapEntry<K, V>[]) new ImmutableMapEntry<?, ?>[size];\n   }\n \n   ImmutableMapEntry(K key, V value) {"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "Entry<E>[] entriesArray = entries.toArray(new Entry[0]);",
        "fixed_code": "Entry<E>[] entriesArray = entries.toArray((Entry<E>[]) new Entry<?>[0]);",
        "patch": "@@ -40,7 +40,7 @@ final class JdkBackedImmutableMultiset<E> extends ImmutableMultiset<E> {\n \n   static <E> ImmutableMultiset<E> create(Collection<? extends Entry<? extends E>> entries) {\n     @SuppressWarnings(\"unchecked\")\n-    Entry<E>[] entriesArray = entries.toArray(new Entry[0]);\n+    Entry<E>[] entriesArray = entries.toArray((Entry<E>[]) new Entry<?>[0]);\n     Map<E, Integer> delegateMap = Maps.newHashMapWithExpectedSize(entriesArray.length);\n     long size = 0;\n     for (int i = 0; i < entriesArray.length; i++) {"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "return new Segment[ssize];",
        "fixed_code": "return (Segment<K, V, E, S>[]) new Segment<?, ?, ?, ?>[ssize];",
        "patch": "@@ -1169,7 +1169,7 @@ V getLiveValue(E entry) {\n \n   @SuppressWarnings(\"unchecked\")\n   final Segment<K, V, E, S>[] newSegmentArray(int ssize) {\n-    return new Segment[ssize];\n+    return (Segment<K, V, E, S>[]) new Segment<?, ?, ?, ?>[ssize];\n   }\n \n   // Inner Classes"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "return new SerializedForm(delegate());",
        "fixed_code": "return new SerializedForm<>(delegate());",
        "patch": "@@ -189,7 +189,7 @@ private static <T> T cast(Class<T> type, @CheckForNull Object value) {\n   }\n \n   private Object writeReplace() {\n-    return new SerializedForm(delegate());\n+    return new SerializedForm<>(delegate());\n   }\n \n   private void readObject(ObjectInputStream stream) throws InvalidObjectException {"
    },
    {
        "commit_id": "7e06618325825f14f8383c6a4dd938105eb6b99c",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect`.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609475939",
        "commit_url": "https://github.com/google/guava/commit/7e06618325825f14f8383c6a4dd938105eb6b99c",
        "buggy_code": "static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =",
        "fixed_code": "static final ImmutableSortedMultiset<?> NATURAL_EMPTY_MULTISET =",
        "patch": "@@ -37,7 +37,7 @@\n final class RegularImmutableSortedMultiset<E> extends ImmutableSortedMultiset<E> {\n   private static final long[] ZERO_CUMULATIVE_COUNTS = {0};\n \n-  static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =\n+  static final ImmutableSortedMultiset<?> NATURAL_EMPTY_MULTISET =\n       new RegularImmutableSortedMultiset<>(Ordering.natural());\n \n   @VisibleForTesting final transient RegularImmutableSortedSet<E> elementSet;"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "private static <C extends Comparable> void testInvariantsInternal(RangeSet<C> rangeSet) {",
        "fixed_code": "private static <C extends Comparable<?>> void testInvariantsInternal(RangeSet<C> rangeSet) {",
        "patch": "@@ -32,7 +32,7 @@ public static void testInvariants(RangeSet<?> rangeSet) {\n     testInvariantsInternal(rangeSet.complement());\n   }\n \n-  private static <C extends Comparable> void testInvariantsInternal(RangeSet<C> rangeSet) {\n+  private static <C extends Comparable<?>> void testInvariantsInternal(RangeSet<C> rangeSet) {\n     assertEquals(rangeSet.asRanges().isEmpty(), rangeSet.isEmpty());\n     assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(), rangeSet.isEmpty());\n     assertEquals(!rangeSet.asRanges().iterator().hasNext(), rangeSet.isEmpty());"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<Country, Currency>[]) new Entry<?, ?>[length];",
        "patch": "@@ -92,7 +92,7 @@ public SampleElements<Entry<Country, Currency>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<Country, Currency>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<Country, Currency>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<Country, String>[]) new Entry<?, ?>[length];",
        "patch": "@@ -84,7 +84,7 @@ public SampleElements<Entry<Country, String>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<Country, String>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<Country, String>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "PickyIterable<String> iterable = new PickyIterable(\"a\");",
        "fixed_code": "PickyIterable<String> iterable = new PickyIterable<>(\"a\");",
        "patch": "@@ -679,7 +679,7 @@ void checkConcurrentModification() {\n   }\n \n   public void testCycleRemoveAfterHasNextExtraPicky() {\n-    PickyIterable<String> iterable = new PickyIterable(\"a\");\n+    PickyIterable<String> iterable = new PickyIterable<>(\"a\");\n     Iterator<String> cycle = Iterators.cycle(iterable);\n     assertTrue(cycle.hasNext());\n     assertEquals(\"a\", cycle.next());"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "@SuppressWarnings(\"ComparableType\")",
        "fixed_code": "@SuppressWarnings({\"ComparableType\", \"rawtypes\"}) // https://github.com/google/guava/issues/989",
        "patch": "@@ -28,7 +28,7 @@\n  *\n  * @author Kevin Bourrillion\n  */\n-@SuppressWarnings(\"ComparableType\")\n+@SuppressWarnings({\"ComparableType\", \"rawtypes\"}) // https://github.com/google/guava/issues/989\n @GwtCompatible\n @ElementTypesAreNonnullByDefault\n class LegacyComparable implements Comparable, Serializable {"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "@SuppressWarnings(\"unchecked\")",
        "fixed_code": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
        "patch": "@@ -46,7 +46,7 @@ public static Test suite() {\n                   // Other tests will verify what real, warning-free usage looks like\n                   // but here we have to do some serious fudging\n                   @Override\n-                  @SuppressWarnings(\"unchecked\")\n+                  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n                   public Map<Class, Impl> create(Object... elements) {\n                     MutableClassToInstanceMap<Impl> map = MutableClassToInstanceMap.create();\n                     for (Object object : elements) {"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "private static <C extends Comparable> void testInvariantsInternal(RangeSet<C> rangeSet) {",
        "fixed_code": "private static <C extends Comparable<?>> void testInvariantsInternal(RangeSet<C> rangeSet) {",
        "patch": "@@ -32,7 +32,7 @@ public static void testInvariants(RangeSet<?> rangeSet) {\n     testInvariantsInternal(rangeSet.complement());\n   }\n \n-  private static <C extends Comparable> void testInvariantsInternal(RangeSet<C> rangeSet) {\n+  private static <C extends Comparable<?>> void testInvariantsInternal(RangeSet<C> rangeSet) {\n     assertEquals(rangeSet.asRanges().isEmpty(), rangeSet.isEmpty());\n     assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(), rangeSet.isEmpty());\n     assertEquals(!rangeSet.asRanges().iterator().hasNext(), rangeSet.isEmpty());"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<Country, Currency>[]) new Entry<?, ?>[length];",
        "patch": "@@ -92,7 +92,7 @@ public SampleElements<Entry<Country, Currency>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<Country, Currency>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<Country, Currency>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "return new Entry[length];",
        "fixed_code": "return (Entry<Country, String>[]) new Entry<?, ?>[length];",
        "patch": "@@ -84,7 +84,7 @@ public SampleElements<Entry<Country, String>> samples() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Entry<Country, String>[] createArray(int length) {\n-      return new Entry[length];\n+      return (Entry<Country, String>[]) new Entry<?, ?>[length];\n     }\n \n     @Override"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "PickyIterable<String> iterable = new PickyIterable(\"a\");",
        "fixed_code": "PickyIterable<String> iterable = new PickyIterable<>(\"a\");",
        "patch": "@@ -679,7 +679,7 @@ void checkConcurrentModification() {\n   }\n \n   public void testCycleRemoveAfterHasNextExtraPicky() {\n-    PickyIterable<String> iterable = new PickyIterable(\"a\");\n+    PickyIterable<String> iterable = new PickyIterable<>(\"a\");\n     Iterator<String> cycle = Iterators.cycle(iterable);\n     assertTrue(cycle.hasNext());\n     assertEquals(\"a\", cycle.next());"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "@SuppressWarnings(\"ComparableType\")",
        "fixed_code": "@SuppressWarnings({\"ComparableType\", \"rawtypes\"}) // https://github.com/google/guava/issues/989",
        "patch": "@@ -28,7 +28,7 @@\n  *\n  * @author Kevin Bourrillion\n  */\n-@SuppressWarnings(\"ComparableType\")\n+@SuppressWarnings({\"ComparableType\", \"rawtypes\"}) // https://github.com/google/guava/issues/989\n @GwtCompatible\n @ElementTypesAreNonnullByDefault\n class LegacyComparable implements Comparable, Serializable {"
    },
    {
        "commit_id": "12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in `collect` tests.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609453988",
        "commit_url": "https://github.com/google/guava/commit/12020e2dc29ae84106e3b2ad8db270f0a1bf2e7a",
        "buggy_code": "@SuppressWarnings(\"unchecked\")",
        "fixed_code": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
        "patch": "@@ -46,7 +46,7 @@ public static Test suite() {\n                   // Other tests will verify what real, warning-free usage looks like\n                   // but here we have to do some serious fudging\n                   @Override\n-                  @SuppressWarnings(\"unchecked\")\n+                  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n                   public Map<Class, Impl> create(Object... elements) {\n                     MutableClassToInstanceMap<Impl> map = MutableClassToInstanceMap.create();\n                     for (Object object : elements) {"
    },
    {
        "commit_id": "e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in non-`collect`, non-`gwt`, non-test code.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609401671",
        "commit_url": "https://github.com/google/guava/commit/e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "buggy_code": "return new Segment[ssize];",
        "fixed_code": "return (Segment<K, V>[]) new Segment<?, ?>[ssize];",
        "patch": "@@ -1853,7 +1853,7 @@ void processPendingNotifications() {\n \n   @SuppressWarnings(\"unchecked\")\n   final Segment<K, V>[] newSegmentArray(int ssize) {\n-    return new Segment[ssize];\n+    return (Segment<K, V>[]) new Segment<?, ?>[ssize];\n   }\n \n   // Inner Classes"
    },
    {
        "commit_id": "e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in non-`collect`, non-`gwt`, non-test code.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609401671",
        "commit_url": "https://github.com/google/guava/commit/e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "buggy_code": "@SuppressWarnings(\"sunapi\")",
        "fixed_code": "@SuppressWarnings({\"sunapi\", \"removal\"}) // b/318391980",
        "patch": "@@ -1342,7 +1342,7 @@ abstract boolean casListeners(\n    * <p>Static initialization of this class will fail if the {@link sun.misc.Unsafe} object cannot\n    * be accessed.\n    */\n-  @SuppressWarnings(\"sunapi\")\n+  @SuppressWarnings({\"sunapi\", \"removal\"}) // b/318391980\n   private static final class UnsafeAtomicHelper extends AtomicHelper {\n     static final sun.misc.Unsafe UNSAFE;\n     static final long LISTENERS_OFFSET;"
    },
    {
        "commit_id": "e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in non-`collect`, non-`gwt`, non-test code.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609401671",
        "commit_url": "https://github.com/google/guava/commit/e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "buggy_code": "return new Segment[ssize];",
        "fixed_code": "return (Segment<K, V>[]) new Segment<?, ?>[ssize];",
        "patch": "@@ -1857,7 +1857,7 @@ void processPendingNotifications() {\n \n   @SuppressWarnings(\"unchecked\")\n   final Segment<K, V>[] newSegmentArray(int ssize) {\n-    return new Segment[ssize];\n+    return (Segment<K, V>[]) new Segment<?, ?>[ssize];\n   }\n \n   // Inner Classes"
    },
    {
        "commit_id": "e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "commit_message": "Fix, suppress, and/or localize suppressions for `unchecked` and `rawtypes` warnings in non-`collect`, non-`gwt`, non-test code.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 609401671",
        "commit_url": "https://github.com/google/guava/commit/e5b68f120f455a3853ca6bad6ce9f4e3e0231897",
        "buggy_code": "@SuppressWarnings(\"sunapi\")",
        "fixed_code": "@SuppressWarnings({\"sunapi\", \"removal\"}) // b/318391980",
        "patch": "@@ -1342,7 +1342,7 @@ abstract boolean casListeners(\n    * <p>Static initialization of this class will fail if the {@link sun.misc.Unsafe} object cannot\n    * be accessed.\n    */\n-  @SuppressWarnings(\"sunapi\")\n+  @SuppressWarnings({\"sunapi\", \"removal\"}) // b/318391980\n   private static final class UnsafeAtomicHelper extends AtomicHelper {\n     static final sun.misc.Unsafe UNSAFE;\n     static final long LISTENERS_OFFSET;"
    },
    {
        "commit_id": "06ba460973e5316a6f35edeaa25042a3eb9e19ab",
        "commit_message": "Remove `@J2ktIncompatible` from passing `primitives` tests\n\nSome were only disabled because they were disabled for J2cl before. Some\nlong-related tests may be working now due to a fix in J2kt a while back.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 604650334",
        "commit_url": "https://github.com/google/guava/commit/06ba460973e5316a6f35edeaa25042a3eb9e19ab",
        "buggy_code": "@J2ktIncompatible // TODO(b/278877942): Enable",
        "fixed_code": "@J2ktIncompatible // b/239034072: Kotlin varargs copy parameter arrays.",
        "patch": "@@ -211,7 +211,7 @@ public void testToArray_withConversion() {\n     assertThat(Bytes.toArray(doubles)).isEqualTo(array);\n   }\n \n-  @J2ktIncompatible // TODO(b/278877942): Enable\n+  @J2ktIncompatible // b/239034072: Kotlin varargs copy parameter arrays.\n   public void testAsList_isAView() {\n     byte[] array = {(byte) 0, (byte) 1};\n     List<Byte> list = Bytes.asList(array);"
    },
    {
        "commit_id": "06ba460973e5316a6f35edeaa25042a3eb9e19ab",
        "commit_message": "Remove `@J2ktIncompatible` from passing `primitives` tests\n\nSome were only disabled because they were disabled for J2cl before. Some\nlong-related tests may be working now due to a fix in J2kt a while back.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 604650334",
        "commit_url": "https://github.com/google/guava/commit/06ba460973e5316a6f35edeaa25042a3eb9e19ab",
        "buggy_code": "@J2ktIncompatible // TODO(b/278877942): Enable",
        "fixed_code": "@J2ktIncompatible // b/239034072: Kotlin varargs copy parameter arrays.",
        "patch": "@@ -211,7 +211,7 @@ public void testToArray_withConversion() {\n     assertThat(Bytes.toArray(doubles)).isEqualTo(array);\n   }\n \n-  @J2ktIncompatible // TODO(b/278877942): Enable\n+  @J2ktIncompatible // b/239034072: Kotlin varargs copy parameter arrays.\n   public void testAsList_isAView() {\n     byte[] array = {(byte) 0, (byte) 1};\n     List<Byte> list = Bytes.asList(array);"
    },
    {
        "commit_id": "9916d82c67414b6a01d15a0fc914f75dc7edaebb",
        "commit_message": "Fix j2kt stream package nullability\nFix sort() parameter nullability\n\nRELNOTES=n/a\nPiperOrigin-RevId: 538560615",
        "commit_url": "https://github.com/google/guava/commit/9916d82c67414b6a01d15a0fc914f75dc7edaebb",
        "buggy_code": "public final void sort(Comparator<? super E> c) {",
        "fixed_code": "public final void sort(@Nullable Comparator<? super E> c) {",
        "patch": "@@ -577,7 +577,7 @@ public final void replaceAll(UnaryOperator<E> operator) {\n   @Deprecated\n   @Override\n   @DoNotCall(\"Always throws UnsupportedOperationException\")\n-  public final void sort(Comparator<? super E> c) {\n+  public final void sort(@Nullable Comparator<? super E> c) {\n     throw new UnsupportedOperationException();\n   }\n "
    },
    {
        "commit_id": "9916d82c67414b6a01d15a0fc914f75dc7edaebb",
        "commit_message": "Fix j2kt stream package nullability\nFix sort() parameter nullability\n\nRELNOTES=n/a\nPiperOrigin-RevId: 538560615",
        "commit_url": "https://github.com/google/guava/commit/9916d82c67414b6a01d15a0fc914f75dc7edaebb",
        "buggy_code": "public void sort(Comparator<? super E> c) {",
        "fixed_code": "public void sort(@Nullable Comparator<? super E> c) {",
        "patch": "@@ -447,7 +447,7 @@ public void replaceAll(UnaryOperator<E> operator) {\n     }\n \n     @Override\n-    public void sort(Comparator<? super E> c) {\n+    public void sort(@Nullable Comparator<? super E> c) {\n       synchronized (mutex) {\n         delegate().sort(c);\n       }"
    },
    {
        "commit_id": "cba0b0aa551be07650cdbc5d627bcf4f896611af",
        "commit_message": "Fix/suppress a few nullness mismatches.\n\nWe could still stand to give actual thought to the `util.concurrent` mismatches:\n- https://github.com/google/guava/issues/3566\n- https://github.com/google/guava/issues/3568\n\nThose two mismatches will be detected when we begin using a checker that contains [an annotated copy of `ThreadFactory`](https://github.com/jspecify/jdk/commit/24191c60ec8e82efd71295ee7d79ca0a7e0daa2b).\n\nThe mismatch in `MutableClassToInstanceMap` is currently not detected. That's a bug. But for some reason, it _is_ detected when we use type-use anntotations.\n\n(I included _additional_ edits to `MutableClassToInstanceMap` and `ImmutableClassToInstanceMap`\u2014specifically, in their `cast` methods. Those changes aren't necessary to the main change here. I had just started to change them to be consistent with the principle we'd discussed in cl/526184065, which is to use a non-null bound for a type parameter if all its usages would otherwise be projected. And then I realized that the second type parameter was serving no purpose, so I simplified further.)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 531012514",
        "commit_url": "https://github.com/google/guava/commit/cba0b0aa551be07650cdbc5d627bcf4f896611af",
        "buggy_code": "private static <B, T extends B> T cast(Class<T> type, B value) {",
        "fixed_code": "private static <T> T cast(Class<T> type, Object value) {",
        "patch": "@@ -123,7 +123,7 @@ public <T extends B> Builder<B> putAll(Map<? extends Class<? extends T>, ? exten\n       return this;\n     }\n \n-    private static <B, T extends B> T cast(Class<T> type, B value) {\n+    private static <T> T cast(Class<T> type, Object value) {\n       return Primitives.wrap(type).cast(value);\n     }\n "
    },
    {
        "commit_id": "cba0b0aa551be07650cdbc5d627bcf4f896611af",
        "commit_message": "Fix/suppress a few nullness mismatches.\n\nWe could still stand to give actual thought to the `util.concurrent` mismatches:\n- https://github.com/google/guava/issues/3566\n- https://github.com/google/guava/issues/3568\n\nThose two mismatches will be detected when we begin using a checker that contains [an annotated copy of `ThreadFactory`](https://github.com/jspecify/jdk/commit/24191c60ec8e82efd71295ee7d79ca0a7e0daa2b).\n\nThe mismatch in `MutableClassToInstanceMap` is currently not detected. That's a bug. But for some reason, it _is_ detected when we use type-use anntotations.\n\n(I included _additional_ edits to `MutableClassToInstanceMap` and `ImmutableClassToInstanceMap`\u2014specifically, in their `cast` methods. Those changes aren't necessary to the main change here. I had just started to change them to be consistent with the principle we'd discussed in cl/526184065, which is to use a non-null bound for a type parameter if all its usages would otherwise be projected. And then I realized that the second type parameter was serving no purpose, so I simplified further.)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 531012514",
        "commit_url": "https://github.com/google/guava/commit/cba0b0aa551be07650cdbc5d627bcf4f896611af",
        "buggy_code": "private static <B, T extends B> T cast(Class<T> type, B value) {",
        "fixed_code": "private static <T> T cast(Class<T> type, Object value) {",
        "patch": "@@ -123,7 +123,7 @@ public <T extends B> Builder<B> putAll(Map<? extends Class<? extends T>, ? exten\n       return this;\n     }\n \n-    private static <B, T extends B> T cast(Class<T> type, B value) {\n+    private static <T> T cast(Class<T> type, Object value) {\n       return Primitives.wrap(type).cast(value);\n     }\n "
    },
    {
        "commit_id": "049867c5ee9570a9988a8b06d7fa2643da70336c",
        "commit_message": "More reliably use transitional `@CheckForNull` and `@ParametricNullness` annotations.\n\nI would assume we're still not 100% consistent in using them, and we might someday consider an Error Prone check to identify the remaining places that we ought to be using them. But in an ideal world, they'll be able to go away entirely before we need to bother.\n\n(There are a few reasons to use these annotations, but the one that I was poking at today was trying to [run NullAway](https://github.com/google/guava/issues/2484#issuecomment-1203200500).)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 494880081",
        "commit_url": "https://github.com/google/guava/commit/049867c5ee9570a9988a8b06d7fa2643da70336c",
        "buggy_code": "@Nullable Comparator<? super V> valueComparator) {",
        "fixed_code": "@CheckForNull Comparator<? super V> valueComparator) {",
        "patch": "@@ -356,7 +356,7 @@ public static <K, V> ImmutableListMultimap<K, V> copyOf(\n   /** Creates an ImmutableListMultimap from an asMap.entrySet. */\n   static <K, V> ImmutableListMultimap<K, V> fromMapEntries(\n       Collection<? extends Map.Entry<? extends K, ? extends Collection<? extends V>>> mapEntries,\n-      @Nullable Comparator<? super V> valueComparator) {\n+      @CheckForNull Comparator<? super V> valueComparator) {\n     if (mapEntries.isEmpty()) {\n       return of();\n     }"
    },
    {
        "commit_id": "049867c5ee9570a9988a8b06d7fa2643da70336c",
        "commit_message": "More reliably use transitional `@CheckForNull` and `@ParametricNullness` annotations.\n\nI would assume we're still not 100% consistent in using them, and we might someday consider an Error Prone check to identify the remaining places that we ought to be using them. But in an ideal world, they'll be able to go away entirely before we need to bother.\n\n(There are a few reasons to use these annotations, but the one that I was poking at today was trying to [run NullAway](https://github.com/google/guava/issues/2484#issuecomment-1203200500).)\n\nRELNOTES=n/a\nPiperOrigin-RevId: 494880081",
        "commit_url": "https://github.com/google/guava/commit/049867c5ee9570a9988a8b06d7fa2643da70336c",
        "buggy_code": "private @Nullable Object @Nullable [] hashTable;",
        "fixed_code": "@CheckForNull private @Nullable Object[] hashTable;",
        "patch": "@@ -724,7 +724,7 @@ static int chooseTableSize(int setSize) {\n    */\n   private static final class RegularSetBuilderImpl<E> extends SetBuilderImpl<E> {\n     // null until at least two elements are present\n-    private @Nullable Object @Nullable [] hashTable;\n+    @CheckForNull private @Nullable Object[] hashTable;\n     private int maxRunBeforeFallback;\n     private int expandTableThreshold;\n     private int hashCode;"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "boolean unused = multimap().containsKey(null);",
        "fixed_code": "multimap().containsKey(null);",
        "patch": "@@ -82,7 +82,7 @@ public void testContainsKeyNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testContainsKeyNullDisallowed() {\n     try {\n-      boolean unused = multimap().containsKey(null);\n+      multimap().containsKey(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "boolean unused = multimap().containsValue(null);",
        "fixed_code": "multimap().containsValue(null);",
        "patch": "@@ -59,7 +59,7 @@ public void testContainsNullValueNo() {\n   @MapFeature.Require(absent = ALLOWS_NULL_VALUE_QUERIES)\n   public void testContainsNullValueFails() {\n     try {\n-      boolean unused = multimap().containsValue(null);\n+      multimap().containsValue(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "Collection<V> unused = multimap().get(null);",
        "fixed_code": "multimap().get(null);",
        "patch": "@@ -142,7 +142,7 @@ public void testGetNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testGetNullForbidden() {\n     try {\n-      Collection<V> unused = multimap().get(null);\n+      multimap().get(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "int unused = getMultiset().count(null);",
        "fixed_code": "getMultiset().count(null);",
        "patch": "@@ -64,7 +64,7 @@ public void testCount_nullAbsent() {\n   @CollectionFeature.Require(absent = ALLOWS_NULL_QUERIES)\n   public void testCount_null_forbidden() {\n     try {\n-      int unused = getMultiset().count(null);\n+      getMultiset().count(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "boolean unused = multimap().containsKey(null);",
        "fixed_code": "multimap().containsKey(null);",
        "patch": "@@ -82,7 +82,7 @@ public void testContainsKeyNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testContainsKeyNullDisallowed() {\n     try {\n-      boolean unused = multimap().containsKey(null);\n+      multimap().containsKey(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "boolean unused = multimap().containsValue(null);",
        "fixed_code": "multimap().containsValue(null);",
        "patch": "@@ -59,7 +59,7 @@ public void testContainsNullValueNo() {\n   @MapFeature.Require(absent = ALLOWS_NULL_VALUE_QUERIES)\n   public void testContainsNullValueFails() {\n     try {\n-      boolean unused = multimap().containsValue(null);\n+      multimap().containsValue(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "Collection<V> unused = multimap().get(null);",
        "fixed_code": "multimap().get(null);",
        "patch": "@@ -142,7 +142,7 @@ public void testGetNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testGetNullForbidden() {\n     try {\n-      Collection<V> unused = multimap().get(null);\n+      multimap().get(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "commit_message": "Roll back `CheckReturnValue` suppressions.\n\nWe've improved our checker to not issue errors for this `try`-`fail` pattern.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488963332",
        "commit_url": "https://github.com/google/guava/commit/7e87414e58caf0937fd8196e1db104e5b38b1a26",
        "buggy_code": "int unused = getMultiset().count(null);",
        "fixed_code": "getMultiset().count(null);",
        "patch": "@@ -64,7 +64,7 @@ public void testCount_nullAbsent() {\n   @CollectionFeature.Require(absent = ALLOWS_NULL_QUERIES)\n   public void testCount_null_forbidden() {\n     try {\n-      int unused = getMultiset().count(null);\n+      getMultiset().count(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().containsKey(null);",
        "fixed_code": "boolean unused = multimap().containsKey(null);",
        "patch": "@@ -82,7 +82,7 @@ public void testContainsKeyNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testContainsKeyNullDisallowed() {\n     try {\n-      multimap().containsKey(null);\n+      boolean unused = multimap().containsKey(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().containsValue(null);",
        "fixed_code": "boolean unused = multimap().containsValue(null);",
        "patch": "@@ -59,7 +59,7 @@ public void testContainsNullValueNo() {\n   @MapFeature.Require(absent = ALLOWS_NULL_VALUE_QUERIES)\n   public void testContainsNullValueFails() {\n     try {\n-      multimap().containsValue(null);\n+      boolean unused = multimap().containsValue(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().get(null);",
        "fixed_code": "Collection<V> unused = multimap().get(null);",
        "patch": "@@ -142,7 +142,7 @@ public void testGetNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testGetNullForbidden() {\n     try {\n-      multimap().get(null);\n+      Collection<V> unused = multimap().get(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "getMultiset().count(null);",
        "fixed_code": "int unused = getMultiset().count(null);",
        "patch": "@@ -64,7 +64,7 @@ public void testCount_nullAbsent() {\n   @CollectionFeature.Require(absent = ALLOWS_NULL_QUERIES)\n   public void testCount_null_forbidden() {\n     try {\n-      getMultiset().count(null);\n+      int unused = getMultiset().count(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().containsKey(null);",
        "fixed_code": "boolean unused = multimap().containsKey(null);",
        "patch": "@@ -82,7 +82,7 @@ public void testContainsKeyNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testContainsKeyNullDisallowed() {\n     try {\n-      multimap().containsKey(null);\n+      boolean unused = multimap().containsKey(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().containsValue(null);",
        "fixed_code": "boolean unused = multimap().containsValue(null);",
        "patch": "@@ -59,7 +59,7 @@ public void testContainsNullValueNo() {\n   @MapFeature.Require(absent = ALLOWS_NULL_VALUE_QUERIES)\n   public void testContainsNullValueFails() {\n     try {\n-      multimap().containsValue(null);\n+      boolean unused = multimap().containsValue(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "multimap().get(null);",
        "fixed_code": "Collection<V> unused = multimap().get(null);",
        "patch": "@@ -142,7 +142,7 @@ public void testGetNullAbsent() {\n   @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n   public void testGetNullForbidden() {\n     try {\n-      multimap().get(null);\n+      Collection<V> unused = multimap().get(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n       // success"
    },
    {
        "commit_id": "c5d7b86c19e75438d93effc176470e3a25494a08",
        "commit_message": "Suppress some `CheckReturnValue` errors.\n\nWe may just improve our checker to not issue errors for this `try`-`fail` pattern, but for now, let's get the build green.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 488760922",
        "commit_url": "https://github.com/google/guava/commit/c5d7b86c19e75438d93effc176470e3a25494a08",
        "buggy_code": "getMultiset().count(null);",
        "fixed_code": "int unused = getMultiset().count(null);",
        "patch": "@@ -64,7 +64,7 @@ public void testCount_nullAbsent() {\n   @CollectionFeature.Require(absent = ALLOWS_NULL_QUERIES)\n   public void testCount_null_forbidden() {\n     try {\n-      getMultiset().count(null);\n+      int unused = getMultiset().count(null);\n       fail(\"Expected NullPointerException\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testNonreflexiveEquals() {",
        "fixed_code": "public void testNonReflexiveEquals() {",
        "patch": "@@ -114,7 +114,7 @@ public void testTestEqualsEqualsObjects() {\n   }\n \n   /** Test proper handling of case where an object is not equal to itself */\n-  public void testNonreflexiveEquals() {\n+  public void testNonReflexiveEquals() {\n     Object obj = new NonReflexiveObject();\n     equalsTester.addEqualityGroup(obj);\n     try {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testTest_trasitive() {",
        "fixed_code": "public void testTest_transitive() {",
        "patch": "@@ -113,7 +113,7 @@ public void testTest_symmetric() {\n     fail();\n   }\n \n-  public void testTest_trasitive() {\n+  public void testTest_transitive() {\n     Object group1Item1 = new TestObject(1, 1);\n     Object group1Item2 = new TestObject(1, 2);\n     Object group1Item3 = new TestObject(1, 3);"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "@GwtIncompatible // SerializbleTester",
        "fixed_code": "@GwtIncompatible // SerializableTester",
        "patch": "@@ -764,7 +764,7 @@ public void testNullPointerExceptions() {\n   }\n \n   @SuppressWarnings(\"unchecked\") // varargs\n-  @GwtIncompatible // SerializbleTester\n+  @GwtIncompatible // SerializableTester\n   public void testCascadingSerialization() throws Exception {\n     // Eclipse says Predicate<Integer>; javac says Predicate<Object>.\n     Predicate<? super Integer> nasty ="
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testAsListInconsistentComprator() {",
        "fixed_code": "public void testAsListInconsistentComparator() {",
        "patch": "@@ -954,7 +954,7 @@ public void testSubsetAsListReturnTypeAndSerialization() {\n     assertEquals(list, copy);\n   }\n \n-  public void testAsListInconsistentComprator() {\n+  public void testAsListInconsistentComparator() {\n     ImmutableSet<String> set =\n         ImmutableSortedSet.orderedBy(STRING_LENGTH)\n             .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "assertTrue(\"Heap is not intact initally\", mmHeap.isIntact());",
        "fixed_code": "assertTrue(\"Heap is not intact initially\", mmHeap.isIntact());",
        "patch": "@@ -276,7 +276,7 @@ public void testSmallMinHeap() {\n   public void testRemove() {\n     MinMaxPriorityQueue<Integer> mmHeap = MinMaxPriorityQueue.create();\n     mmHeap.addAll(Lists.newArrayList(1, 2, 3, 4, 47, 1, 5, 3, 0));\n-    assertTrue(\"Heap is not intact initally\", mmHeap.isIntact());\n+    assertTrue(\"Heap is not intact initially\", mmHeap.isIntact());\n     assertEquals(9, mmHeap.size());\n     mmHeap.remove(5);\n     assertEquals(8, mmHeap.size());"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void nodeOrderUnorderedandEdgesSorted() {",
        "fixed_code": "public void nodeOrderUnorderedAndEdgesSorted() {",
        "patch": "@@ -150,7 +150,7 @@ public void edgeOrder_sorted() {\n   // Combined node and edge order tests\n \n   @Test\n-  public void nodeOrderUnorderedandEdgesSorted() {\n+  public void nodeOrderUnorderedAndEdgesSorted() {\n     MutableNetwork<Integer, String> network =\n         NetworkBuilder.directed()\n             .nodeOrder(unordered())"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "int maxCount = 20; // the probability of error here is miniscule",
        "fixed_code": "int maxCount = 20; // the probability of error here is minuscule",
        "patch": "@@ -376,7 +376,7 @@ static void checkNo2BitCharacteristics(HashFunction function) {\n       for (int j = 0; j < keyBits; j++) {\n         if (j <= i) continue;\n         int count = 0;\n-        int maxCount = 20; // the probability of error here is miniscule\n+        int maxCount = 20; // the probability of error here is minuscule\n         boolean diff = false;\n \n         while (!diff) {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testConextIsParameterizedType() throws Exception {",
        "fixed_code": "public void testContextIsParameterizedType() throws Exception {",
        "patch": "@@ -255,7 +255,7 @@ public void testResolveType() {\n     }\n   }\n \n-  public void testConextIsParameterizedType() throws Exception {\n+  public void testContextIsParameterizedType() throws Exception {\n     class Context {\n       @SuppressWarnings(\"unused\") // used by reflection\n       Map<String, Integer> returningMap() {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "return notSubtype(arg); // isSubtype() currently incorectly considers it a subtype.",
        "fixed_code": "return notSubtype(arg); // isSubtype() currently incorrectly considers it a subtype.",
        "patch": "@@ -237,7 +237,7 @@ private static class RecursiveTypeBoundBugExample<T extends RecursiveTypeBoundBu\n     @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true)\n     public List<RecursiveTypeBoundBugExample<?>> ifYouUseTheTypeVariableOnTheClassAndItIsRecursive(\n         List<RecursiveTypeBoundBugExample<? extends RecursiveTypeBoundBugExample<T>>> arg) {\n-      return notSubtype(arg); // isSubtype() currently incorectly considers it a subtype.\n+      return notSubtype(arg); // isSubtype() currently incorrectly considers it a subtype.\n     }\n   }\n "
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testRuntimeExeceptionFromGet() {",
        "fixed_code": "public void testRuntimeExceptionFromGet() {",
        "patch": "@@ -89,7 +89,7 @@ public void testThrowErrorFromGet() {\n     addCallback(f, callback, directExecutor());\n   }\n \n-  public void testRuntimeExeceptionFromGet() {\n+  public void testRuntimeExceptionFromGet() {\n     RuntimeException e = new IllegalArgumentException(\"foo not found\");\n     ListenableFuture<String> f = UncheckedThrowingFuture.throwingRuntimeException(e);\n     MockCallback callback = new MockCallback(e);"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "@GwtIncompatible // used only in GwtIncomaptible tests",
        "fixed_code": "@GwtIncompatible // used only in GwtIncompatible tests",
        "patch": "@@ -205,7 +205,7 @@ public void run() {\n     exitLatch.await();\n   }\n \n-  @GwtIncompatible // used only in GwtIncomaptible tests\n+  @GwtIncompatible // used only in GwtIncompatible tests\n   private void awaitUnchecked(CyclicBarrier barrier) {\n     try {\n       barrier.await();"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testNonreflexiveEquals() {",
        "fixed_code": "public void testNonReflexiveEquals() {",
        "patch": "@@ -114,7 +114,7 @@ public void testTestEqualsEqualsObjects() {\n   }\n \n   /** Test proper handling of case where an object is not equal to itself */\n-  public void testNonreflexiveEquals() {\n+  public void testNonReflexiveEquals() {\n     Object obj = new NonReflexiveObject();\n     equalsTester.addEqualityGroup(obj);\n     try {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testTest_trasitive() {",
        "fixed_code": "public void testTest_transitive() {",
        "patch": "@@ -113,7 +113,7 @@ public void testTest_symmetric() {\n     fail();\n   }\n \n-  public void testTest_trasitive() {\n+  public void testTest_transitive() {\n     Object group1Item1 = new TestObject(1, 1);\n     Object group1Item2 = new TestObject(1, 2);\n     Object group1Item3 = new TestObject(1, 3);"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "@GwtIncompatible // SerializbleTester",
        "fixed_code": "@GwtIncompatible // SerializableTester",
        "patch": "@@ -764,7 +764,7 @@ public void testNullPointerExceptions() {\n   }\n \n   @SuppressWarnings(\"unchecked\") // varargs\n-  @GwtIncompatible // SerializbleTester\n+  @GwtIncompatible // SerializableTester\n   public void testCascadingSerialization() throws Exception {\n     // Eclipse says Predicate<Integer>; javac says Predicate<Object>.\n     Predicate<? super Integer> nasty ="
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testAsListInconsistentComprator() {",
        "fixed_code": "public void testAsListInconsistentComparator() {",
        "patch": "@@ -1006,7 +1006,7 @@ public void testSubsetAsListReturnTypeAndSerialization() {\n     assertTrue(copy instanceof ImmutableSortedAsList);\n   }\n \n-  public void testAsListInconsistentComprator() {\n+  public void testAsListInconsistentComparator() {\n     ImmutableSet<String> set =\n         ImmutableSortedSet.orderedBy(STRING_LENGTH)\n             .add(\"in\", \"the\", \"quick\", \"jumped\", \"over\", \"a\")"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "assertTrue(\"Heap is not intact initally\", mmHeap.isIntact());",
        "fixed_code": "assertTrue(\"Heap is not intact initially\", mmHeap.isIntact());",
        "patch": "@@ -276,7 +276,7 @@ public void testSmallMinHeap() {\n   public void testRemove() {\n     MinMaxPriorityQueue<Integer> mmHeap = MinMaxPriorityQueue.create();\n     mmHeap.addAll(Lists.newArrayList(1, 2, 3, 4, 47, 1, 5, 3, 0));\n-    assertTrue(\"Heap is not intact initally\", mmHeap.isIntact());\n+    assertTrue(\"Heap is not intact initially\", mmHeap.isIntact());\n     assertEquals(9, mmHeap.size());\n     mmHeap.remove(5);\n     assertEquals(8, mmHeap.size());"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void nodeOrderUnorderedandEdgesSorted() {",
        "fixed_code": "public void nodeOrderUnorderedAndEdgesSorted() {",
        "patch": "@@ -150,7 +150,7 @@ public void edgeOrder_sorted() {\n   // Combined node and edge order tests\n \n   @Test\n-  public void nodeOrderUnorderedandEdgesSorted() {\n+  public void nodeOrderUnorderedAndEdgesSorted() {\n     MutableNetwork<Integer, String> network =\n         NetworkBuilder.directed()\n             .nodeOrder(unordered())"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "int maxCount = 20; // the probability of error here is miniscule",
        "fixed_code": "int maxCount = 20; // the probability of error here is minuscule",
        "patch": "@@ -376,7 +376,7 @@ static void checkNo2BitCharacteristics(HashFunction function) {\n       for (int j = 0; j < keyBits; j++) {\n         if (j <= i) continue;\n         int count = 0;\n-        int maxCount = 20; // the probability of error here is miniscule\n+        int maxCount = 20; // the probability of error here is minuscule\n         boolean diff = false;\n \n         while (!diff) {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testConextIsParameterizedType() throws Exception {",
        "fixed_code": "public void testContextIsParameterizedType() throws Exception {",
        "patch": "@@ -255,7 +255,7 @@ public void testResolveType() {\n     }\n   }\n \n-  public void testConextIsParameterizedType() throws Exception {\n+  public void testContextIsParameterizedType() throws Exception {\n     class Context {\n       @SuppressWarnings(\"unused\") // used by reflection\n       Map<String, Integer> returningMap() {"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "return notSubtype(arg); // isSubtype() currently incorectly considers it a subtype.",
        "fixed_code": "return notSubtype(arg); // isSubtype() currently incorrectly considers it a subtype.",
        "patch": "@@ -237,7 +237,7 @@ private static class RecursiveTypeBoundBugExample<T extends RecursiveTypeBoundBu\n     @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true)\n     public List<RecursiveTypeBoundBugExample<?>> ifYouUseTheTypeVariableOnTheClassAndItIsRecursive(\n         List<RecursiveTypeBoundBugExample<? extends RecursiveTypeBoundBugExample<T>>> arg) {\n-      return notSubtype(arg); // isSubtype() currently incorectly considers it a subtype.\n+      return notSubtype(arg); // isSubtype() currently incorrectly considers it a subtype.\n     }\n   }\n "
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "public void testRuntimeExeceptionFromGet() {",
        "fixed_code": "public void testRuntimeExceptionFromGet() {",
        "patch": "@@ -89,7 +89,7 @@ public void testThrowErrorFromGet() {\n     addCallback(f, callback, directExecutor());\n   }\n \n-  public void testRuntimeExeceptionFromGet() {\n+  public void testRuntimeExceptionFromGet() {\n     RuntimeException e = new IllegalArgumentException(\"foo not found\");\n     ListenableFuture<String> f = UncheckedThrowingFuture.throwingRuntimeException(e);\n     MockCallback callback = new MockCallback(e);"
    },
    {
        "commit_id": "70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "commit_message": "Fix typos in Javadocs, comments and code.\n\nFixes #6111.\n\nPiperOrigin-RevId: 480152294",
        "commit_url": "https://github.com/google/guava/commit/70d571b10a95e1579a473dfefa981ab5fcb6fcc3",
        "buggy_code": "@GwtIncompatible // used only in GwtIncomaptible tests",
        "fixed_code": "@GwtIncompatible // used only in GwtIncompatible tests",
        "patch": "@@ -205,7 +205,7 @@ public void run() {\n     exitLatch.await();\n   }\n \n-  @GwtIncompatible // used only in GwtIncomaptible tests\n+  @GwtIncompatible // used only in GwtIncompatible tests\n   private void awaitUnchecked(CyclicBarrier barrier) {\n     try {\n       barrier.await();"
    },
    {
        "commit_id": "4312d949967f3fb245636f66437a00dd8c346d38",
        "commit_message": "Fix lenient format strings in common.\n\nRELNOTES=N/A\nPiperOrigin-RevId: 469179783",
        "commit_url": "https://github.com/google/guava/commit/4312d949967f3fb245636f66437a00dd8c346d38",
        "buggy_code": "\"weigher can not be combined with maximum size\",",
        "fixed_code": "\"weigher can not be combined with maximum size (%s provided)\",",
        "patch": "@@ -572,7 +572,7 @@ public <K1 extends K, V1 extends V> CacheBuilder<K1, V1> weigher(\n     if (strictParsing) {\n       checkState(\n           this.maximumSize == UNSET_INT,\n-          \"weigher can not be combined with maximum size\",\n+          \"weigher can not be combined with maximum size (%s provided)\",\n           this.maximumSize);\n     }\n "
    },
    {
        "commit_id": "4312d949967f3fb245636f66437a00dd8c346d38",
        "commit_message": "Fix lenient format strings in common.\n\nRELNOTES=N/A\nPiperOrigin-RevId: 469179783",
        "commit_url": "https://github.com/google/guava/commit/4312d949967f3fb245636f66437a00dd8c346d38",
        "buggy_code": "\"weigher can not be combined with maximum size\",",
        "fixed_code": "\"weigher can not be combined with maximum size (%s provided)\",",
        "patch": "@@ -571,7 +571,7 @@ public <K1 extends K, V1 extends V> CacheBuilder<K1, V1> weigher(\n     if (strictParsing) {\n       checkState(\n           this.maximumSize == UNSET_INT,\n-          \"weigher can not be combined with maximum size\",\n+          \"weigher can not be combined with maximum size (%s provided)\",\n           this.maximumSize);\n     }\n "
    },
    {
        "commit_id": "e06a8cec65815599e510d7f9c1ea9d2a8eaa438a",
        "commit_message": "Enable Error Prone for Maven builds.\n\nFixes https://github.com/google/guava/issues/2484\n\nRELNOTES=n/a\nPiperOrigin-RevId: 465199181",
        "commit_url": "https://github.com/google/guava/commit/e06a8cec65815599e510d7f9c1ea9d2a8eaa438a",
        "buggy_code": "clazz.cast(obj);",
        "fixed_code": "Object unused = clazz.cast(obj);",
        "patch": "@@ -34,7 +34,7 @@ static <T> T[] clone(T[] array) {\n \n   // Class.cast is not supported in GWT.  This method is a no-op in GWT.\n   static void checkCast(Class<?> clazz, Object obj) {\n-    clazz.cast(obj);\n+    Object unused = clazz.cast(obj);\n   }\n \n   static String format(String template, Object... args) {"
    },
    {
        "commit_id": "e06a8cec65815599e510d7f9c1ea9d2a8eaa438a",
        "commit_message": "Enable Error Prone for Maven builds.\n\nFixes https://github.com/google/guava/issues/2484\n\nRELNOTES=n/a\nPiperOrigin-RevId: 465199181",
        "commit_url": "https://github.com/google/guava/commit/e06a8cec65815599e510d7f9c1ea9d2a8eaa438a",
        "buggy_code": "clazz.cast(obj);",
        "fixed_code": "Object unused = clazz.cast(obj);",
        "patch": "@@ -34,7 +34,7 @@ static <T> T[] clone(T[] array) {\n \n   // Class.cast is not supported in GWT.  This method is a no-op in GWT.\n   static void checkCast(Class<?> clazz, Object obj) {\n-    clazz.cast(obj);\n+    Object unused = clazz.cast(obj);\n   }\n \n   static String format(String template, Object... args) {"
    },
    {
        "commit_id": "76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "commit_message": "Fix issue #5843\n\nRELNOTES=Fix issue #5843\nPiperOrigin-RevId: 450827341",
        "commit_url": "https://github.com/google/guava/commit/76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "buggy_code": "return endpoints.isOrdered() || !this.isDirected();",
        "fixed_code": "return endpoints.isOrdered() == this.isDirected();",
        "patch": "@@ -241,7 +241,7 @@ protected final void validateEndpoints(EndpointPair<?> endpoints) {\n   }\n \n   protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n-    return endpoints.isOrdered() || !this.isDirected();\n+    return endpoints.isOrdered() == this.isDirected();\n   }\n \n   @Override"
    },
    {
        "commit_id": "76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "commit_message": "Fix issue #5843\n\nRELNOTES=Fix issue #5843\nPiperOrigin-RevId: 450827341",
        "commit_url": "https://github.com/google/guava/commit/76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "buggy_code": "\"Mismatch: unordered endpoints cannot be used with directed graphs\";",
        "fixed_code": "\"Mismatch: endpoints' ordering is not compatible with directionality of the graph\";",
        "patch": "@@ -52,7 +52,7 @@ private GraphConstants() {}\n           + \"adjacentNode(node) if you already have a node, or nodeU()/nodeV() if you don't.\";\n   static final String EDGE_ALREADY_EXISTS = \"Edge %s already exists in the graph.\";\n   static final String ENDPOINTS_MISMATCH =\n-      \"Mismatch: unordered endpoints cannot be used with directed graphs\";\n+      \"Mismatch: endpoints' ordering is not compatible with directionality of the graph\";\n \n   /** Singleton edge value for {@link Graph} implementations backed by {@link ValueGraph}s. */\n   enum Presence {"
    },
    {
        "commit_id": "76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "commit_message": "Fix issue #5843\n\nRELNOTES=Fix issue #5843\nPiperOrigin-RevId: 450827341",
        "commit_url": "https://github.com/google/guava/commit/76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "buggy_code": "return endpoints.isOrdered() || !this.isDirected();",
        "fixed_code": "return endpoints.isOrdered() == this.isDirected();",
        "patch": "@@ -253,7 +253,7 @@ protected final void validateEndpoints(EndpointPair<?> endpoints) {\n   }\n \n   protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) {\n-    return endpoints.isOrdered() || !this.isDirected();\n+    return endpoints.isOrdered() == this.isDirected();\n   }\n \n   @Override"
    },
    {
        "commit_id": "76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "commit_message": "Fix issue #5843\n\nRELNOTES=Fix issue #5843\nPiperOrigin-RevId: 450827341",
        "commit_url": "https://github.com/google/guava/commit/76260d9b3c6acbabf9a8ddae11d4fff3985b6272",
        "buggy_code": "\"Mismatch: unordered endpoints cannot be used with directed graphs\";",
        "fixed_code": "\"Mismatch: endpoints' ordering is not compatible with directionality of the graph\";",
        "patch": "@@ -52,7 +52,7 @@ private GraphConstants() {}\n           + \"adjacentNode(node) if you already have a node, or nodeU()/nodeV() if you don't.\";\n   static final String EDGE_ALREADY_EXISTS = \"Edge %s already exists in the graph.\";\n   static final String ENDPOINTS_MISMATCH =\n-      \"Mismatch: unordered endpoints cannot be used with directed graphs\";\n+      \"Mismatch: endpoints' ordering is not compatible with directionality of the graph\";\n \n   /** Singleton edge value for {@link Graph} implementations backed by {@link ValueGraph}s. */\n   enum Presence {"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable e) { // this includes cancellation exception",
        "fixed_code": "} catch (RuntimeException | Error e) { // this includes cancellation exception",
        "patch": "@@ -107,7 +107,7 @@ public final void run() {\n                     + e.getClass()\n                     + \" without a cause\");\n       }\n-    } catch (Throwable e) { // this includes cancellation exception\n+    } catch (RuntimeException | Error e) { // this includes cancellation exception\n       throwable = e;\n     }\n "
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable e) {",
        "fixed_code": "} catch (RuntimeException | Error e) {",
        "patch": "@@ -565,7 +565,7 @@ public Cancellable reschedule() {\n         lock.lock();\n         try {\n           toReturn = initializeOrUpdateCancellationDelegate(schedule);\n-        } catch (Throwable e) {\n+        } catch (RuntimeException | Error e) {\n           // If an exception is thrown by the subclass then we need to make sure that the service\n           // notices and transitions to the FAILED state. We do it by calling notifyFailed directly\n           // because the service does not monitor the state of the future so if the exception is not"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable t) {",
        "fixed_code": "} catch (RuntimeException | Error t) {",
        "patch": "@@ -268,7 +268,7 @@ private void collectValueFromNonCancelledFuture(int index, Future<? extends Inpu\n       collectOneValue(index, getDone(future));\n     } catch (ExecutionException e) {\n       handleException(e.getCause());\n-    } catch (Throwable t) {\n+    } catch (RuntimeException | Error t) {\n       handleException(t);\n     }\n   }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable reflectionFailure) {",
        "fixed_code": "} catch (RuntimeException | Error reflectionFailure) {",
        "patch": "@@ -61,7 +61,7 @@ abstract class AggregateFutureState<OutputT extends @Nullable Object>\n           new SafeAtomicHelper(\n               newUpdater(AggregateFutureState.class, Set.class, \"seenExceptions\"),\n               newUpdater(AggregateFutureState.class, \"remaining\"));\n-    } catch (Throwable reflectionFailure) {\n+    } catch (RuntimeException | Error reflectionFailure) {\n       // Some Android 5.0.x Samsung devices have bugs in JDK reflection APIs that cause\n       // getDeclaredField to throw a NoSuchFieldException when the field is definitely there.\n       // For these users fallback to a suboptimal implementation, based on synchronized. This will"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable t) {",
        "fixed_code": "} catch (RuntimeException | Error t) {",
        "patch": "@@ -516,7 +516,7 @@ public O get(long timeout, TimeUnit unit)\n       private O applyTransformation(I input) throws ExecutionException {\n         try {\n           return function.apply(input);\n-        } catch (Throwable t) {\n+        } catch (RuntimeException | Error t) {\n           throw new ExecutionException(t);\n         }\n       }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Exception e) {",
        "fixed_code": "} catch (RuntimeException | Error e) {",
        "patch": "@@ -182,7 +182,7 @@ private static boolean hasConstructorUsableByGetChecked(\n     try {\n       Exception unused = newWithCause(exceptionClass, new Exception());\n       return true;\n-    } catch (Exception e) {\n+    } catch (RuntimeException | Error e) {\n       return false;\n     }\n   }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable throwable) {",
        "fixed_code": "} catch (RuntimeException | Error throwable) {",
        "patch": "@@ -1011,7 +1011,7 @@ private void signalNextWaiter() {\n   private boolean isSatisfied(Guard guard) {\n     try {\n       return guard.isSatisfied();\n-    } catch (Throwable throwable) {\n+    } catch (RuntimeException | Error throwable) {\n       signalAllWaiters();\n       throw throwable;\n     }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable errorInLogging) {",
        "fixed_code": "} catch (RuntimeException | Error errorInLogging) {",
        "patch": "@@ -68,7 +68,7 @@ public void uncaughtException(Thread t, Throwable e) {\n       try {\n         logger.log(\n             SEVERE, String.format(Locale.ROOT, \"Caught an exception in %s.  Shutting down.\", t), e);\n-      } catch (Throwable errorInLogging) {\n+      } catch (RuntimeException | Error errorInLogging) {\n         // If logging fails, e.g. due to missing memory, at least try to log the\n         // message and the cause for the failed logging.\n         System.err.println(e.getMessage());"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable e) { // this includes cancellation exception",
        "fixed_code": "} catch (RuntimeException | Error e) { // this includes cancellation exception",
        "patch": "@@ -107,7 +107,7 @@ public final void run() {\n                     + e.getClass()\n                     + \" without a cause\");\n       }\n-    } catch (Throwable e) { // this includes cancellation exception\n+    } catch (RuntimeException | Error e) { // this includes cancellation exception\n       throwable = e;\n     }\n "
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable e) {",
        "fixed_code": "} catch (RuntimeException | Error e) {",
        "patch": "@@ -607,7 +607,7 @@ public Cancellable reschedule() {\n         lock.lock();\n         try {\n           toReturn = initializeOrUpdateCancellationDelegate(schedule);\n-        } catch (Throwable e) {\n+        } catch (RuntimeException | Error e) {\n           // If an exception is thrown by the subclass then we need to make sure that the service\n           // notices and transitions to the FAILED state. We do it by calling notifyFailed directly\n           // because the service does not monitor the state of the future so if the exception is not"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable t) {",
        "fixed_code": "} catch (RuntimeException | Error t) {",
        "patch": "@@ -268,7 +268,7 @@ private void collectValueFromNonCancelledFuture(int index, Future<? extends Inpu\n       collectOneValue(index, getDone(future));\n     } catch (ExecutionException e) {\n       handleException(e.getCause());\n-    } catch (Throwable t) {\n+    } catch (RuntimeException | Error t) {\n       handleException(t);\n     }\n   }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable reflectionFailure) {",
        "fixed_code": "} catch (RuntimeException | Error reflectionFailure) {",
        "patch": "@@ -61,7 +61,7 @@ abstract class AggregateFutureState<OutputT extends @Nullable Object>\n           new SafeAtomicHelper(\n               newUpdater(AggregateFutureState.class, Set.class, \"seenExceptions\"),\n               newUpdater(AggregateFutureState.class, \"remaining\"));\n-    } catch (Throwable reflectionFailure) {\n+    } catch (RuntimeException | Error reflectionFailure) {\n       // Some Android 5.0.x Samsung devices have bugs in JDK reflection APIs that cause\n       // getDeclaredField to throw a NoSuchFieldException when the field is definitely there.\n       // For these users fallback to a suboptimal implementation, based on synchronized. This will"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable t) {",
        "fixed_code": "} catch (RuntimeException | Error t) {",
        "patch": "@@ -549,7 +549,7 @@ public O get(long timeout, TimeUnit unit)\n       private O applyTransformation(I input) throws ExecutionException {\n         try {\n           return function.apply(input);\n-        } catch (Throwable t) {\n+        } catch (RuntimeException | Error t) {\n           throw new ExecutionException(t);\n         }\n       }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable throwable) {",
        "fixed_code": "} catch (RuntimeException | Error throwable) {",
        "patch": "@@ -1121,7 +1121,7 @@ private void signalNextWaiter() {\n   private boolean isSatisfied(Guard guard) {\n     try {\n       return guard.isSatisfied();\n-    } catch (Throwable throwable) {\n+    } catch (RuntimeException | Error throwable) {\n       signalAllWaiters();\n       throw throwable;\n     }"
    },
    {
        "commit_id": "f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "commit_message": "Be clearer about what types we're catching.\n\nIn particular, this helps make clearer that none of these particular `catch` blocks catch arbitrary checked exceptions\u2014and thus that none of them catch `InterruptedException`.\n\nAlso, I've removed some `catch (Throwable t)` blocks from `FakeTimeLimiter`. They could never be hit, since previous blocks had caught both `Error` and `Exception` (in the case of `Callable`) or `RuntimeException` (in the case of `Runnable`).\n\nRELNOTES=n/a\nPiperOrigin-RevId: 445538563",
        "commit_url": "https://github.com/google/guava/commit/f2bb1718f800a2486527b0bf5d83218945d3d9f1",
        "buggy_code": "} catch (Throwable errorInLogging) {",
        "fixed_code": "} catch (RuntimeException | Error errorInLogging) {",
        "patch": "@@ -68,7 +68,7 @@ public void uncaughtException(Thread t, Throwable e) {\n       try {\n         logger.log(\n             SEVERE, String.format(Locale.ROOT, \"Caught an exception in %s.  Shutting down.\", t), e);\n-      } catch (Throwable errorInLogging) {\n+      } catch (RuntimeException | Error errorInLogging) {\n         // If logging fails, e.g. due to missing memory, at least try to log the\n         // message and the cause for the failed logging.\n         System.err.println(e.getMessage());"
    },
    {
        "commit_id": "e3fc49e53990e63a3dbc37d84a2821e23a23b2fd",
        "commit_message": "Apply `@CheckReturnValue` to most of `WrappingExecutorService` and `WrappingScheduledExecutorService`.\n\nWork toward https://github.com/google/guava/issues/3655\nSomewhat relevant to https://github.com/google/error-prone/issues/1490\n\nRELNOTES=n/a\nPiperOrigin-RevId: 435341836",
        "commit_url": "https://github.com/google/guava/commit/e3fc49e53990e63a3dbc37d84a2821e23a23b2fd",
        "buggy_code": "@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.",
        "fixed_code": "@CanIgnoreReturnValue",
        "patch": "@@ -41,7 +41,6 @@\n  *\n  * @author Chris Nokleberg\n  */\n-@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n @GwtIncompatible\n @ElementTypesAreNonnullByDefault\n abstract class WrappingExecutorService implements ExecutorService {\n@@ -143,6 +142,7 @@ public final void shutdown() {\n   }\n \n   @Override\n+  @CanIgnoreReturnValue\n   public final List<Runnable> shutdownNow() {\n     return delegate.shutdownNow();\n   }"
    },
    {
        "commit_id": "e3fc49e53990e63a3dbc37d84a2821e23a23b2fd",
        "commit_message": "Apply `@CheckReturnValue` to most of `WrappingExecutorService` and `WrappingScheduledExecutorService`.\n\nWork toward https://github.com/google/guava/issues/3655\nSomewhat relevant to https://github.com/google/error-prone/issues/1490\n\nRELNOTES=n/a\nPiperOrigin-RevId: 435341836",
        "commit_url": "https://github.com/google/guava/commit/e3fc49e53990e63a3dbc37d84a2821e23a23b2fd",
        "buggy_code": "@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.",
        "fixed_code": "@CanIgnoreReturnValue",
        "patch": "@@ -41,7 +41,6 @@\n  *\n  * @author Chris Nokleberg\n  */\n-@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n @GwtIncompatible\n @ElementTypesAreNonnullByDefault\n abstract class WrappingExecutorService implements ExecutorService {\n@@ -143,6 +142,7 @@ public final void shutdown() {\n   }\n \n   @Override\n+  @CanIgnoreReturnValue\n   public final List<Runnable> shutdownNow() {\n     return delegate.shutdownNow();\n   }"
    },
    {
        "commit_id": "f881fab53f764db184ae47b91ec06dfd24331ce8",
        "commit_message": "Assorted improvements to nullness annotations.\n\nI don't think any of the Guava changes are user-visible.\n\nDetails:\n- Many of these fix bugs that will be noticed by the forthcoming version of our hacky internal nullness checker.\n- Some of these fix bugs that even the forthcoming version won't notice but that I happened to see.\n- Some changes add `@Nullable` to return types of methods that always throw an exception. There's no strict need for this, but we've mostly done it otherwise, so I figured I'd be consistent (and quiet `ReturnMissingNullable`, at least until I quiet it for all such methods with https://github.com/google/error-prone/issues/2910).\n- The `NullnessCasts` change is to discourage `ReturnMissingNullable` from adding a `@Nullable` annotation where we don't want it. (But we'll probably never run `ReturnMissingNullable` in the \"aggressive\" mode over this code, anyway, so there's not likely to be a need for the suppression.)\n- The `@ParametricNullness` changes evidently aren't necessary for anyone right now, but they could theoretically be necessary for j2objc users until j2objc further enhances its support for nullness annotations.\n- The `AbstractFuture` change removes a suppression that would be necessary under the Checker Framework (which would consider the supermethod's return type to be non-nullable) but isn't necessary for us (because we consider the supermethod's return type to have unspecified nullness).\nRELNOTES=n/a\nPiperOrigin-RevId: 427818689",
        "commit_url": "https://github.com/google/guava/commit/f881fab53f764db184ae47b91ec06dfd24331ce8",
        "buggy_code": "@SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\"})",
        "fixed_code": "@SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\", \"ReturnMissingNullable\"})",
        "patch": "@@ -57,7 +57,7 @@ final class NullnessCasts {\n   }\n \n   /** Returns {@code null} as any type, even one that does not include {@code null}. */\n-  @SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\"})\n+  @SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\", \"ReturnMissingNullable\"})\n   // The warnings are legitimate. Each time we use this method, we document why.\n   @ParametricNullness\n   static <T extends @Nullable Object> T unsafeNull() {"
    },
    {
        "commit_id": "f881fab53f764db184ae47b91ec06dfd24331ce8",
        "commit_message": "Assorted improvements to nullness annotations.\n\nI don't think any of the Guava changes are user-visible.\n\nDetails:\n- Many of these fix bugs that will be noticed by the forthcoming version of our hacky internal nullness checker.\n- Some of these fix bugs that even the forthcoming version won't notice but that I happened to see.\n- Some changes add `@Nullable` to return types of methods that always throw an exception. There's no strict need for this, but we've mostly done it otherwise, so I figured I'd be consistent (and quiet `ReturnMissingNullable`, at least until I quiet it for all such methods with https://github.com/google/error-prone/issues/2910).\n- The `NullnessCasts` change is to discourage `ReturnMissingNullable` from adding a `@Nullable` annotation where we don't want it. (But we'll probably never run `ReturnMissingNullable` in the \"aggressive\" mode over this code, anyway, so there's not likely to be a need for the suppression.)\n- The `@ParametricNullness` changes evidently aren't necessary for anyone right now, but they could theoretically be necessary for j2objc users until j2objc further enhances its support for nullness annotations.\n- The `AbstractFuture` change removes a suppression that would be necessary under the Checker Framework (which would consider the supermethod's return type to be non-nullable) but isn't necessary for us (because we consider the supermethod's return type to have unspecified nullness).\nRELNOTES=n/a\nPiperOrigin-RevId: 427818689",
        "commit_url": "https://github.com/google/guava/commit/f881fab53f764db184ae47b91ec06dfd24331ce8",
        "buggy_code": "int copyIntoArray(Object[] dst, int offset) {",
        "fixed_code": "int copyIntoArray(@Nullable Object[] dst, int offset) {",
        "patch": "@@ -155,7 +155,7 @@ boolean isPartialView() {\n   }\n \n   @Override\n-  int copyIntoArray(Object[] dst, int offset) {\n+  int copyIntoArray(@Nullable Object[] dst, int offset) {\n     return elements.copyIntoArray(dst, offset);\n   }\n "
    },
    {
        "commit_id": "f881fab53f764db184ae47b91ec06dfd24331ce8",
        "commit_message": "Assorted improvements to nullness annotations.\n\nI don't think any of the Guava changes are user-visible.\n\nDetails:\n- Many of these fix bugs that will be noticed by the forthcoming version of our hacky internal nullness checker.\n- Some of these fix bugs that even the forthcoming version won't notice but that I happened to see.\n- Some changes add `@Nullable` to return types of methods that always throw an exception. There's no strict need for this, but we've mostly done it otherwise, so I figured I'd be consistent (and quiet `ReturnMissingNullable`, at least until I quiet it for all such methods with https://github.com/google/error-prone/issues/2910).\n- The `NullnessCasts` change is to discourage `ReturnMissingNullable` from adding a `@Nullable` annotation where we don't want it. (But we'll probably never run `ReturnMissingNullable` in the \"aggressive\" mode over this code, anyway, so there's not likely to be a need for the suppression.)\n- The `@ParametricNullness` changes evidently aren't necessary for anyone right now, but they could theoretically be necessary for j2objc users until j2objc further enhances its support for nullness annotations.\n- The `AbstractFuture` change removes a suppression that would be necessary under the Checker Framework (which would consider the supermethod's return type to be non-nullable) but isn't necessary for us (because we consider the supermethod's return type to have unspecified nullness).\nRELNOTES=n/a\nPiperOrigin-RevId: 427818689",
        "commit_url": "https://github.com/google/guava/commit/f881fab53f764db184ae47b91ec06dfd24331ce8",
        "buggy_code": "int copyIntoArray(Object[] dst, int offset) {",
        "fixed_code": "int copyIntoArray(@Nullable Object[] dst, int offset) {",
        "patch": "@@ -325,7 +325,7 @@ public final boolean setCount(E element, int oldCount, int newCount) {\n \n   @GwtIncompatible // not present in emulated superclass\n   @Override\n-  int copyIntoArray(Object[] dst, int offset) {\n+  int copyIntoArray(@Nullable Object[] dst, int offset) {\n     for (Multiset.Entry<E> entry : entrySet()) {\n       Arrays.fill(dst, offset, offset + entry.getCount(), entry.getElement());\n       offset += entry.getCount();"
    },
    {
        "commit_id": "f881fab53f764db184ae47b91ec06dfd24331ce8",
        "commit_message": "Assorted improvements to nullness annotations.\n\nI don't think any of the Guava changes are user-visible.\n\nDetails:\n- Many of these fix bugs that will be noticed by the forthcoming version of our hacky internal nullness checker.\n- Some of these fix bugs that even the forthcoming version won't notice but that I happened to see.\n- Some changes add `@Nullable` to return types of methods that always throw an exception. There's no strict need for this, but we've mostly done it otherwise, so I figured I'd be consistent (and quiet `ReturnMissingNullable`, at least until I quiet it for all such methods with https://github.com/google/error-prone/issues/2910).\n- The `NullnessCasts` change is to discourage `ReturnMissingNullable` from adding a `@Nullable` annotation where we don't want it. (But we'll probably never run `ReturnMissingNullable` in the \"aggressive\" mode over this code, anyway, so there's not likely to be a need for the suppression.)\n- The `@ParametricNullness` changes evidently aren't necessary for anyone right now, but they could theoretically be necessary for j2objc users until j2objc further enhances its support for nullness annotations.\n- The `AbstractFuture` change removes a suppression that would be necessary under the Checker Framework (which would consider the supermethod's return type to be non-nullable) but isn't necessary for us (because we consider the supermethod's return type to have unspecified nullness).\nRELNOTES=n/a\nPiperOrigin-RevId: 427818689",
        "commit_url": "https://github.com/google/guava/commit/f881fab53f764db184ae47b91ec06dfd24331ce8",
        "buggy_code": "@SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\"})",
        "fixed_code": "@SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\", \"ReturnMissingNullable\"})",
        "patch": "@@ -57,7 +57,7 @@ final class NullnessCasts {\n   }\n \n   /** Returns {@code null} as any type, even one that does not include {@code null}. */\n-  @SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\"})\n+  @SuppressWarnings({\"nullness\", \"TypeParameterUnusedInFormals\", \"ReturnMissingNullable\"})\n   // The warnings are legitimate. Each time we use this method, we document why.\n   @ParametricNullness\n   static <T extends @Nullable Object> T unsafeNull() {"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "checkArgument(lowerBoundType != OPEN | upperBoundType != OPEN);",
        "fixed_code": "checkArgument(lowerBoundType != OPEN || upperBoundType != OPEN);",
        "patch": "@@ -138,7 +138,7 @@ private GeneralRange(\n       checkArgument(\n           cmp <= 0, \"lowerEndpoint (%s) > upperEndpoint (%s)\", lowerEndpoint, upperEndpoint);\n       if (cmp == 0) {\n-        checkArgument(lowerBoundType != OPEN | upperBoundType != OPEN);\n+        checkArgument(lowerBoundType != OPEN || upperBoundType != OPEN);\n       }\n     }\n   }"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
        "fixed_code": "increment = (mode == HALF_UP || (mode == HALF_EVEN && (div & 1) != 0));",
        "patch": "@@ -425,7 +425,7 @@ public static long divide(long p, long q, RoundingMode mode) {\n         // subtracting two nonnegative longs can't overflow\n         // cmpRemToHalfDivisor has the same sign as compare(abs(rem), abs(q) / 2).\n         if (cmpRemToHalfDivisor == 0) { // exactly on the half mark\n-          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));\n+          increment = (mode == HALF_UP || (mode == HALF_EVEN && (div & 1) != 0));\n         } else {\n           increment = cmpRemToHalfDivisor > 0; // closer to the UP value\n         }"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "& (queuedExecutor = executingTaskQueue.nextExecutor) != null) {",
        "fixed_code": "&& (queuedExecutor = executingTaskQueue.nextExecutor) != null) {",
        "patch": "@@ -423,7 +423,7 @@ public void run() {\n         Executor queuedExecutor;\n         // Intentionally using non-short-circuit operator\n         while ((queuedTask = executingTaskQueue.nextTask) != null\n-            & (queuedExecutor = executingTaskQueue.nextExecutor) != null) {\n+            && (queuedExecutor = executingTaskQueue.nextExecutor) != null) {\n           executingTaskQueue.nextTask = null;\n           executingTaskQueue.nextExecutor = null;\n           queuedExecutor.execute(queuedTask);"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "checkArgument(lowerBoundType != OPEN | upperBoundType != OPEN);",
        "fixed_code": "checkArgument(lowerBoundType != OPEN || upperBoundType != OPEN);",
        "patch": "@@ -138,7 +138,7 @@ private GeneralRange(\n       checkArgument(\n           cmp <= 0, \"lowerEndpoint (%s) > upperEndpoint (%s)\", lowerEndpoint, upperEndpoint);\n       if (cmp == 0) {\n-        checkArgument(lowerBoundType != OPEN | upperBoundType != OPEN);\n+        checkArgument(lowerBoundType != OPEN || upperBoundType != OPEN);\n       }\n     }\n   }"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));",
        "fixed_code": "increment = (mode == HALF_UP || (mode == HALF_EVEN && (div & 1) != 0));",
        "patch": "@@ -425,7 +425,7 @@ public static long divide(long p, long q, RoundingMode mode) {\n         // subtracting two nonnegative longs can't overflow\n         // cmpRemToHalfDivisor has the same sign as compare(abs(rem), abs(q) / 2).\n         if (cmpRemToHalfDivisor == 0) { // exactly on the half mark\n-          increment = (mode == HALF_UP | (mode == HALF_EVEN & (div & 1) != 0));\n+          increment = (mode == HALF_UP || (mode == HALF_EVEN && (div & 1) != 0));\n         } else {\n           increment = cmpRemToHalfDivisor > 0; // closer to the UP value\n         }"
    },
    {
        "commit_id": "9d690928acb69b6158bde3371c66445c861f5b7c",
        "commit_message": "Fix -Wbitwise-instead-of-logical warnings.\n\nPiperOrigin-RevId: 414465058",
        "commit_url": "https://github.com/google/guava/commit/9d690928acb69b6158bde3371c66445c861f5b7c",
        "buggy_code": "& (queuedExecutor = executingTaskQueue.nextExecutor) != null) {",
        "fixed_code": "&& (queuedExecutor = executingTaskQueue.nextExecutor) != null) {",
        "patch": "@@ -423,7 +423,7 @@ public void run() {\n         Executor queuedExecutor;\n         // Intentionally using non-short-circuit operator\n         while ((queuedTask = executingTaskQueue.nextTask) != null\n-            & (queuedExecutor = executingTaskQueue.nextExecutor) != null) {\n+            && (queuedExecutor = executingTaskQueue.nextExecutor) != null) {\n           executingTaskQueue.nextTask = null;\n           executingTaskQueue.nextExecutor = null;\n           queuedExecutor.execute(queuedTask);"
    },
    {
        "commit_id": "3dfd7076eba8540c3e2659289b310bbb050408b6",
        "commit_message": "Fix typo, and remove unused method.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 397761983",
        "commit_url": "https://github.com/google/guava/commit/3dfd7076eba8540c3e2659289b310bbb050408b6",
        "buggy_code": "public int add(@ParametricNullness E element, int occurences) {",
        "fixed_code": "public int add(@ParametricNullness E element, int occurrences) {",
        "patch": "@@ -141,7 +141,7 @@ public boolean add(@ParametricNullness E element) {\n     }\n \n     @Override\n-    public int add(@ParametricNullness E element, int occurences) {\n+    public int add(@ParametricNullness E element, int occurrences) {\n       throw new UnsupportedOperationException();\n     }\n "
    },
    {
        "commit_id": "3dfd7076eba8540c3e2659289b310bbb050408b6",
        "commit_message": "Fix typo, and remove unused method.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 397761983",
        "commit_url": "https://github.com/google/guava/commit/3dfd7076eba8540c3e2659289b310bbb050408b6",
        "buggy_code": "public int add(@ParametricNullness E element, int occurences) {",
        "fixed_code": "public int add(@ParametricNullness E element, int occurrences) {",
        "patch": "@@ -171,7 +171,7 @@ public boolean add(@ParametricNullness E element) {\n     }\n \n     @Override\n-    public int add(@ParametricNullness E element, int occurences) {\n+    public int add(@ParametricNullness E element, int occurrences) {\n       throw new UnsupportedOperationException();\n     }\n "
    },
    {
        "commit_id": "f79d923a38734bb584707ed77a98fb6d84d2aa28",
        "commit_message": "Fix bug in `TopKSelector` call to `Arrays.sort`.\n\nFixes #5691\nFixes #5692\n\nRELNOTES=n/a\nPiperOrigin-RevId: 393150511",
        "commit_url": "https://github.com/google/guava/commit/f79d923a38734bb584707ed77a98fb6d84d2aa28",
        "buggy_code": "Arrays.sort(buffer, left, right, comparator);",
        "fixed_code": "Arrays.sort(buffer, left, right + 1, comparator);",
        "patch": "@@ -185,7 +185,7 @@ private void trim() {\n       iterations++;\n       if (iterations >= maxIterations) {\n         // We've already taken O(k log k), let's make sure we don't take longer than O(k log k).\n-        Arrays.sort(buffer, left, right, comparator);\n+        Arrays.sort(buffer, left, right + 1, comparator);\n         break;\n       }\n     }"
    },
    {
        "commit_id": "f79d923a38734bb584707ed77a98fb6d84d2aa28",
        "commit_message": "Fix bug in `TopKSelector` call to `Arrays.sort`.\n\nFixes #5691\nFixes #5692\n\nRELNOTES=n/a\nPiperOrigin-RevId: 393150511",
        "commit_url": "https://github.com/google/guava/commit/f79d923a38734bb584707ed77a98fb6d84d2aa28",
        "buggy_code": "Arrays.sort(buffer, left, right, comparator);",
        "fixed_code": "Arrays.sort(buffer, left, right + 1, comparator);",
        "patch": "@@ -186,7 +186,7 @@ private void trim() {\n       iterations++;\n       if (iterations >= maxIterations) {\n         // We've already taken O(k log k), let's make sure we don't take longer than O(k log k).\n-        Arrays.sort(buffer, left, right, comparator);\n+        Arrays.sort(buffer, left, right + 1, comparator);\n         break;\n       }\n     }"
    },
    {
        "commit_id": "1e2c8066b68e23d50c8f5643a9db9c2a9c7905e3",
        "commit_message": "Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Collection`, `Iterable`, and `Iterator` APIs _must_ be either used or assigned to a variable.\n\nRELNOTES=n/a\nPiperOrigin-RevId: 373149019",
        "commit_url": "https://github.com/google/guava/commit/1e2c8066b68e23d50c8f5643a9db9c2a9c7905e3",
        "buggy_code": "hasNext();",
        "fixed_code": "boolean unused = hasNext();",
        "patch": "@@ -550,7 +550,7 @@ class EntryIterator implements Iterator<Entry<K, V>> {\n     @Override\n     public Entry<K, V> next() {\n       if (nextEntry == null) {\n-        hasNext();\n+        boolean unused = hasNext();\n \n         if (nextEntry == null) {\n           throw new NoSuchElementException();"
    },
    {
        "commit_id": "d3c306e9e4220d80f111348a92f5cb56d8ad965c",
        "commit_message": "Fix assertion for `FilesTest.testCopyIdenticalFiles()`.\n\nFixes https://github.com/google/guava/issues/5381\n\nRELNOTES=n/a\nPiperOrigin-RevId: 352593619",
        "commit_url": "https://github.com/google/guava/commit/d3c306e9e4220d80f111348a92f5cb56d8ad965c",
        "buggy_code": "assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));",
        "fixed_code": "assertEquals(ASCII, Files.toString(temp2, Charsets.UTF_8));",
        "patch": "@@ -195,7 +195,7 @@ public void testCopyIdenticalFiles() throws IOException {\n     File temp2 = createTempFile();\n     Files.write(ASCII, temp2, Charsets.UTF_8);\n     Files.copy(temp1, temp2);\n-    assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));\n+    assertEquals(ASCII, Files.toString(temp2, Charsets.UTF_8));\n   }\n \n   public void testEqual() throws IOException {"
    },
    {
        "commit_id": "d3c306e9e4220d80f111348a92f5cb56d8ad965c",
        "commit_message": "Fix assertion for `FilesTest.testCopyIdenticalFiles()`.\n\nFixes https://github.com/google/guava/issues/5381\n\nRELNOTES=n/a\nPiperOrigin-RevId: 352593619",
        "commit_url": "https://github.com/google/guava/commit/d3c306e9e4220d80f111348a92f5cb56d8ad965c",
        "buggy_code": "assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));",
        "fixed_code": "assertEquals(ASCII, Files.toString(temp2, Charsets.UTF_8));",
        "patch": "@@ -195,7 +195,7 @@ public void testCopyIdenticalFiles() throws IOException {\n     File temp2 = createTempFile();\n     Files.write(ASCII, temp2, Charsets.UTF_8);\n     Files.copy(temp1, temp2);\n-    assertEquals(ASCII, Files.toString(temp1, Charsets.UTF_8));\n+    assertEquals(ASCII, Files.toString(temp2, Charsets.UTF_8));\n   }\n \n   public void testEqual() throws IOException {"
    },
    {
        "commit_id": "902f10fb3dab70410da7ba772e36db075c3ef107",
        "commit_message": "Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).\n\nFixes #4019, #4002\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=332262870",
        "commit_url": "https://github.com/google/guava/commit/902f10fb3dab70410da7ba772e36db075c3ef107",
        "buggy_code": "super.add(rangeToAdd);",
        "fixed_code": "TreeRangeSet.this.add(rangeToAdd);",
        "patch": "@@ -896,7 +896,7 @@ public void add(Range<C> rangeToAdd) {\n           \"Cannot add range %s to subRangeSet(%s)\",\n           rangeToAdd,\n           restriction);\n-      super.add(rangeToAdd);\n+      TreeRangeSet.this.add(rangeToAdd);\n     }\n \n     @Override"
    },
    {
        "commit_id": "902f10fb3dab70410da7ba772e36db075c3ef107",
        "commit_message": "Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).\n\nFixes #4019, #4002\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=332262870",
        "commit_url": "https://github.com/google/guava/commit/902f10fb3dab70410da7ba772e36db075c3ef107",
        "buggy_code": "super.add(rangeToAdd);",
        "fixed_code": "TreeRangeSet.this.add(rangeToAdd);",
        "patch": "@@ -891,7 +891,7 @@ public void add(Range<C> rangeToAdd) {\n           \"Cannot add range %s to subRangeSet(%s)\",\n           rangeToAdd,\n           restriction);\n-      super.add(rangeToAdd);\n+      TreeRangeSet.this.add(rangeToAdd);\n     }\n \n     @Override"
    },
    {
        "commit_id": "9b972a21f793fcbb1ac2d41d6c6d6c97d54adb25",
        "commit_message": "Work around an android bug in LockSupport, this time with @CanIgnoreReturnValue\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=327861568",
        "commit_url": "https://github.com/google/guava/commit/9b972a21f793fcbb1ac2d41d6c6d6c97d54adb25",
        "buggy_code": "LockSupport.parkNanos(this, remainingNanos);",
        "fixed_code": "OverflowAvoidingLockSupport.parkNanos(this, remainingNanos);",
        "patch": "@@ -431,7 +431,7 @@ public V get(long timeout, TimeUnit unit)\n           node.setNext(oldHead);\n           if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n             while (true) {\n-              LockSupport.parkNanos(this, remainingNanos);\n+              OverflowAvoidingLockSupport.parkNanos(this, remainingNanos);\n               // Check interruption first, if we woke up due to interruption we need to honor that.\n               if (Thread.interrupted()) {\n                 removeWaiter(node);"
    },
    {
        "commit_id": "9b972a21f793fcbb1ac2d41d6c6d6c97d54adb25",
        "commit_message": "Work around an android bug in LockSupport, this time with @CanIgnoreReturnValue\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=327861568",
        "commit_url": "https://github.com/google/guava/commit/9b972a21f793fcbb1ac2d41d6c6d6c97d54adb25",
        "buggy_code": "LockSupport.parkNanos(this, remainingNanos);",
        "fixed_code": "OverflowAvoidingLockSupport.parkNanos(this, remainingNanos);",
        "patch": "@@ -431,7 +431,7 @@ public V get(long timeout, TimeUnit unit)\n           node.setNext(oldHead);\n           if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n             while (true) {\n-              LockSupport.parkNanos(this, remainingNanos);\n+              OverflowAvoidingLockSupport.parkNanos(this, remainingNanos);\n               // Check interruption first, if we woke up due to interruption we need to honor that.\n               if (Thread.interrupted()) {\n                 removeWaiter(node);"
    },
    {
        "commit_id": "215b1f0dd715d58d61aa31e3a7a8ca4ac48e218a",
        "commit_message": "Fix PowerSet.equals() when comparing to another PowerSet whose items are the same, but in a different iteration order.\n\nRELNOTES:\n  Fix issue where PowerSet.equals(PowerSet) would erroneously return\n  false if the PowerSet's underlying Sets were equal, but in a different\n  iteration order.\n\nFixes #3891, #3890\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=309745434",
        "commit_url": "https://github.com/google/guava/commit/215b1f0dd715d58d61aa31e3a7a8ca4ac48e218a",
        "buggy_code": "return inputSet.equals(that.inputSet);",
        "fixed_code": "return inputSet.keySet().equals(that.inputSet.keySet());",
        "patch": "@@ -1505,7 +1505,7 @@ public boolean contains(@NullableDecl Object obj) {\n     public boolean equals(@NullableDecl Object obj) {\n       if (obj instanceof PowerSet) {\n         PowerSet<?> that = (PowerSet<?>) obj;\n-        return inputSet.equals(that.inputSet);\n+        return inputSet.keySet().equals(that.inputSet.keySet());\n       }\n       return super.equals(obj);\n     }"
    },
    {
        "commit_id": "215b1f0dd715d58d61aa31e3a7a8ca4ac48e218a",
        "commit_message": "Fix PowerSet.equals() when comparing to another PowerSet whose items are the same, but in a different iteration order.\n\nRELNOTES:\n  Fix issue where PowerSet.equals(PowerSet) would erroneously return\n  false if the PowerSet's underlying Sets were equal, but in a different\n  iteration order.\n\nFixes #3891, #3890\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=309745434",
        "commit_url": "https://github.com/google/guava/commit/215b1f0dd715d58d61aa31e3a7a8ca4ac48e218a",
        "buggy_code": "return inputSet.equals(that.inputSet);",
        "fixed_code": "return inputSet.keySet().equals(that.inputSet.keySet());",
        "patch": "@@ -1596,7 +1596,7 @@ public boolean contains(@Nullable Object obj) {\n     public boolean equals(@Nullable Object obj) {\n       if (obj instanceof PowerSet) {\n         PowerSet<?> that = (PowerSet<?>) obj;\n-        return inputSet.equals(that.inputSet);\n+        return inputSet.keySet().equals(that.inputSet.keySet());\n       }\n       return super.equals(obj);\n     }"
    },
    {
        "commit_id": "5cee4f7300da4d7ff87c92663ab105f5e433f0cc",
        "commit_message": "Fix typo.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=306383354",
        "commit_url": "https://github.com/google/guava/commit/5cee4f7300da4d7ff87c92663ab105f5e433f0cc",
        "buggy_code": "@DoNotCall(\"instances of FluentIterable don't need to be converetd to a FluentIterable\")",
        "fixed_code": "@DoNotCall(\"instances of FluentIterable don't need to be converted to a FluentIterable\")",
        "patch": "@@ -174,7 +174,7 @@ public static <E> FluentIterable<E> from(E[] elements) {\n    *     FluentIterable}\n    */\n   @Deprecated\n-  @DoNotCall(\"instances of FluentIterable don't need to be converetd to a FluentIterable\")\n+  @DoNotCall(\"instances of FluentIterable don't need to be converted to a FluentIterable\")\n   public static <E> FluentIterable<E> from(FluentIterable<E> iterable) {\n     return checkNotNull(iterable);\n   }"
    },
    {
        "commit_id": "5cee4f7300da4d7ff87c92663ab105f5e433f0cc",
        "commit_message": "Fix typo.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=306383354",
        "commit_url": "https://github.com/google/guava/commit/5cee4f7300da4d7ff87c92663ab105f5e433f0cc",
        "buggy_code": "@DoNotCall(\"instances of FluentIterable don't need to be converetd to a FluentIterable\")",
        "fixed_code": "@DoNotCall(\"instances of FluentIterable don't need to be converted to a FluentIterable\")",
        "patch": "@@ -171,7 +171,7 @@ public static <E> FluentIterable<E> from(E[] elements) {\n    *     FluentIterable}\n    */\n   @Deprecated\n-  @DoNotCall(\"instances of FluentIterable don't need to be converetd to a FluentIterable\")\n+  @DoNotCall(\"instances of FluentIterable don't need to be converted to a FluentIterable\")\n   public static <E> FluentIterable<E> from(FluentIterable<E> iterable) {\n     return checkNotNull(iterable);\n   }"
    },
    {
        "commit_id": "afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "commit_message": "Fix unnecessary method access level escalation.\n\nFixes https://github.com/google/guava/pull/3843\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=305559100",
        "commit_url": "https://github.com/google/guava/commit/afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "buggy_code": "public HashCode makeHash() {",
        "fixed_code": "protected HashCode makeHash() {",
        "patch": "@@ -166,7 +166,7 @@ protected void processRemaining(ByteBuffer bb) {\n     }\n \n     @Override\n-    public HashCode makeHash() {\n+    protected HashCode makeHash() {\n       h1 ^= length;\n       h2 ^= length;\n "
    },
    {
        "commit_id": "afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "commit_message": "Fix unnecessary method access level escalation.\n\nFixes https://github.com/google/guava/pull/3843\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=305559100",
        "commit_url": "https://github.com/google/guava/commit/afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "buggy_code": "public HashCode makeHash() {",
        "fixed_code": "protected HashCode makeHash() {",
        "patch": "@@ -143,7 +143,7 @@ protected void processRemaining(ByteBuffer buffer) {\n     }\n \n     @Override\n-    public HashCode makeHash() {\n+    protected HashCode makeHash() {\n       // End with a byte encoding the positive integer b mod 256.\n       finalM ^= b << 56;\n       processM(finalM);"
    },
    {
        "commit_id": "afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "commit_message": "Fix unnecessary method access level escalation.\n\nFixes https://github.com/google/guava/pull/3843\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=305559100",
        "commit_url": "https://github.com/google/guava/commit/afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "buggy_code": "public HashCode makeHash() {",
        "fixed_code": "protected HashCode makeHash() {",
        "patch": "@@ -166,7 +166,7 @@ protected void processRemaining(ByteBuffer bb) {\n     }\n \n     @Override\n-    public HashCode makeHash() {\n+    protected HashCode makeHash() {\n       h1 ^= length;\n       h2 ^= length;\n "
    },
    {
        "commit_id": "afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "commit_message": "Fix unnecessary method access level escalation.\n\nFixes https://github.com/google/guava/pull/3843\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=305559100",
        "commit_url": "https://github.com/google/guava/commit/afe2d9100b7a3285c8a59c5245198e3fa3865644",
        "buggy_code": "public HashCode makeHash() {",
        "fixed_code": "protected HashCode makeHash() {",
        "patch": "@@ -143,7 +143,7 @@ protected void processRemaining(ByteBuffer buffer) {\n     }\n \n     @Override\n-    public HashCode makeHash() {\n+    protected HashCode makeHash() {\n       // End with a byte encoding the positive integer b mod 256.\n       finalM ^= b << 56;\n       processM(finalM);"
    },
    {
        "commit_id": "d86c8508eb5160fae28cee82963b5313c23780b1",
        "commit_message": "Extend deadline to fix flakiness.\n\nIt's possible that we don't really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven't bothered to look into it.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=304194678",
        "commit_url": "https://github.com/google/guava/commit/d86c8508eb5160fae28cee82963b5313c23780b1",
        "buggy_code": "assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(1, SECONDS));",
        "fixed_code": "assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(10, SECONDS));",
        "patch": "@@ -77,7 +77,7 @@ public void setUp() {\n   @Override\n   public void tearDown() throws InterruptedException {\n     threadPool.shutdown();\n-    assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(1, SECONDS));\n+    assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(10, SECONDS));\n   }\n \n   private static <T> int drain("
    },
    {
        "commit_id": "d86c8508eb5160fae28cee82963b5313c23780b1",
        "commit_message": "Extend deadline to fix flakiness.\n\nIt's possible that we don't really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven't bothered to look into it.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=304194678",
        "commit_url": "https://github.com/google/guava/commit/d86c8508eb5160fae28cee82963b5313c23780b1",
        "buggy_code": "assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(1, SECONDS));",
        "fixed_code": "assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(10, SECONDS));",
        "patch": "@@ -77,7 +77,7 @@ public void setUp() {\n   @Override\n   public void tearDown() throws InterruptedException {\n     threadPool.shutdown();\n-    assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(1, SECONDS));\n+    assertTrue(\"Some worker didn't finish in time\", threadPool.awaitTermination(10, SECONDS));\n   }\n \n   private static <T> int drain("
    },
    {
        "commit_id": "b4a573fae2a1b4c78652dba3a59da72ff6b80a13",
        "commit_message": "Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.\n\nFixes https://github.com/google/guava/pull/3730\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=284567420",
        "commit_url": "https://github.com/google/guava/commit/b4a573fae2a1b4c78652dba3a59da72ff6b80a13",
        "buggy_code": "out = new StringBuilder(s.length() + 4 * wordSeparator.length());",
        "fixed_code": "out = new StringBuilder(s.length() + 4 * format.wordSeparator.length());",
        "patch": "@@ -135,7 +135,7 @@ String convert(CaseFormat format, String s) {\n     while ((j = wordBoundary.indexIn(s, ++j)) != -1) {\n       if (i == 0) {\n         // include some extra space for separators\n-        out = new StringBuilder(s.length() + 4 * wordSeparator.length());\n+        out = new StringBuilder(s.length() + 4 * format.wordSeparator.length());\n         out.append(format.normalizeFirstWord(s.substring(i, j)));\n       } else {\n         out.append(format.normalizeWord(s.substring(i, j)));"
    },
    {
        "commit_id": "b4a573fae2a1b4c78652dba3a59da72ff6b80a13",
        "commit_message": "Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.\n\nFixes https://github.com/google/guava/pull/3730\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=284567420",
        "commit_url": "https://github.com/google/guava/commit/b4a573fae2a1b4c78652dba3a59da72ff6b80a13",
        "buggy_code": "out = new StringBuilder(s.length() + 4 * wordSeparator.length());",
        "fixed_code": "out = new StringBuilder(s.length() + 4 * format.wordSeparator.length());",
        "patch": "@@ -135,7 +135,7 @@ String convert(CaseFormat format, String s) {\n     while ((j = wordBoundary.indexIn(s, ++j)) != -1) {\n       if (i == 0) {\n         // include some extra space for separators\n-        out = new StringBuilder(s.length() + 4 * wordSeparator.length());\n+        out = new StringBuilder(s.length() + 4 * format.wordSeparator.length());\n         out.append(format.normalizeFirstWord(s.substring(i, j)));\n       } else {\n         out.append(format.normalizeWord(s.substring(i, j)));"
    },
    {
        "commit_id": "2480f414ae5cf6436523188e51a4def373595a24",
        "commit_message": "Resolve some rawtypes warnings in Converter\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=275108038",
        "commit_url": "https://github.com/google/guava/commit/2480f414ae5cf6436523188e51a4def373595a24",
        "buggy_code": "static final IdentityConverter INSTANCE = new IdentityConverter();",
        "fixed_code": "static final IdentityConverter<?> INSTANCE = new IdentityConverter<>();",
        "patch": "@@ -484,7 +484,7 @@ public static <T> Converter<T, T> identity() {\n    * \"pass-through type\".\n    */\n   private static final class IdentityConverter<T> extends Converter<T, T> implements Serializable {\n-    static final IdentityConverter INSTANCE = new IdentityConverter();\n+    static final IdentityConverter<?> INSTANCE = new IdentityConverter<>();\n \n     @Override\n     protected T doForward(T t) {"
    },
    {
        "commit_id": "2480f414ae5cf6436523188e51a4def373595a24",
        "commit_message": "Resolve some rawtypes warnings in Converter\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=275108038",
        "commit_url": "https://github.com/google/guava/commit/2480f414ae5cf6436523188e51a4def373595a24",
        "buggy_code": "static final IdentityConverter INSTANCE = new IdentityConverter();",
        "fixed_code": "static final IdentityConverter<?> INSTANCE = new IdentityConverter<>();",
        "patch": "@@ -482,7 +482,7 @@ public static <T> Converter<T, T> identity() {\n    * \"pass-through type\".\n    */\n   private static final class IdentityConverter<T> extends Converter<T, T> implements Serializable {\n-    static final IdentityConverter INSTANCE = new IdentityConverter();\n+    static final IdentityConverter<?> INSTANCE = new IdentityConverter<>();\n \n     @Override\n     protected T doForward(T t) {"
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "Optional<Number> first = (Optional) numbers.first();",
        "fixed_code": "Optional<Number> first = (Optional<Number>) numbers.first();",
        "patch": "@@ -288,7 +288,7 @@ public void testSampleCodeFine2() {\n     // Sadly, the following is what users will have to do in some circumstances.\n \n     @SuppressWarnings(\"unchecked\") // safe covariant cast\n-    Optional<Number> first = (Optional) numbers.first();\n+    Optional<Number> first = (Optional<Number>) numbers.first();\n     Number value = first.or(0.5); // fine\n   }\n "
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "ReferenceEntry<Integer, Integer> entry = (ReferenceEntry) originalHead;",
        "fixed_code": "ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;",
        "patch": "@@ -393,7 +393,7 @@ static void checkRecency(\n \n       ReferenceEntry<?, ?> originalHead = segment.accessQueue.peek();\n       @SuppressWarnings(\"unchecked\")\n-      ReferenceEntry<Integer, Integer> entry = (ReferenceEntry) originalHead;\n+      ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;\n       operation.accept(entry);\n       drainRecencyQueue(segment);\n "
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "NavigableMap<K, V> result = (NavigableMap) map;",
        "fixed_code": "NavigableMap<K, V> result = (NavigableMap<K, V>) map;",
        "patch": "@@ -3115,7 +3115,7 @@ public static <K, V> NavigableMap<K, V> unmodifiableNavigableMap(\n     checkNotNull(map);\n     if (map instanceof UnmodifiableNavigableMap) {\n       @SuppressWarnings(\"unchecked\") // covariant\n-      NavigableMap<K, V> result = (NavigableMap) map;\n+      NavigableMap<K, V> result = (NavigableMap<K, V>) map;\n       return result;\n     } else {\n       return new UnmodifiableNavigableMap<>(map);"
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "Multiset<Object> multiset = (Multiset) multiset();",
        "fixed_code": "Multiset<Object> multiset = (Multiset<Object>) multiset();",
        "patch": "@@ -1024,7 +1024,7 @@ public boolean remove(Object object) {\n         if (entryCount != 0) {\n           // Safe as long as we never add a new entry, which we won't.\n           @SuppressWarnings(\"unchecked\")\n-          Multiset<Object> multiset = (Multiset) multiset();\n+          Multiset<Object> multiset = (Multiset<Object>) multiset();\n           return multiset.setCount(element, entryCount, 0);\n         }\n       }"
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "Optional<Number> first = (Optional) numbers.first();",
        "fixed_code": "Optional<Number> first = (Optional<Number>) numbers.first();",
        "patch": "@@ -305,7 +305,7 @@ public void testSampleCodeFine2() {\n     // Sadly, the following is what users will have to do in some circumstances.\n \n     @SuppressWarnings(\"unchecked\") // safe covariant cast\n-    Optional<Number> first = (Optional) numbers.first();\n+    Optional<Number> first = (Optional<Number>) numbers.first();\n     Number value = first.or(0.5); // fine\n   }\n "
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "ReferenceEntry<Integer, Integer> entry = (ReferenceEntry) originalHead;",
        "fixed_code": "ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;",
        "patch": "@@ -393,7 +393,7 @@ static void checkRecency(\n \n       ReferenceEntry<?, ?> originalHead = segment.accessQueue.peek();\n       @SuppressWarnings(\"unchecked\")\n-      ReferenceEntry<Integer, Integer> entry = (ReferenceEntry) originalHead;\n+      ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;\n       operation.accept(entry);\n       drainRecencyQueue(segment);\n "
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "NavigableMap<K, V> result = (NavigableMap) map;",
        "fixed_code": "NavigableMap<K, V> result = (NavigableMap<K, V>) map;",
        "patch": "@@ -3268,7 +3268,7 @@ public static <K, V> NavigableMap<K, V> unmodifiableNavigableMap(\n     checkNotNull(map);\n     if (map instanceof UnmodifiableNavigableMap) {\n       @SuppressWarnings(\"unchecked\") // covariant\n-      NavigableMap<K, V> result = (NavigableMap) map;\n+      NavigableMap<K, V> result = (NavigableMap<K, V>) map;\n       return result;\n     } else {\n       return new UnmodifiableNavigableMap<>(map);"
    },
    {
        "commit_id": "aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "commit_message": "Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=268660244",
        "commit_url": "https://github.com/google/guava/commit/aa73da81be1c3dfd41b10ea6318970d279559b1c",
        "buggy_code": "Multiset<Object> multiset = (Multiset) multiset();",
        "fixed_code": "Multiset<Object> multiset = (Multiset<Object>) multiset();",
        "patch": "@@ -1035,7 +1035,7 @@ public boolean remove(Object object) {\n         if (entryCount != 0) {\n           // Safe as long as we never add a new entry, which we won't.\n           @SuppressWarnings(\"unchecked\")\n-          Multiset<Object> multiset = (Multiset) multiset();\n+          Multiset<Object> multiset = (Multiset<Object>) multiset();\n           return multiset.setCount(element, entryCount, 0);\n         }\n       }"
    },
    {
        "commit_id": "58d8f643807b05a68472a8fc030a209c5e386fd7",
        "commit_message": "Fix typo in testFindClassesToTeset_ignoreUnderscores\n\nFixes #3499\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=252402185",
        "commit_url": "https://github.com/google/guava/commit/58d8f643807b05a68472a8fc030a209c5e386fd7",
        "buggy_code": "public void testFindClassesToTeset_ignoreUnderscores() {",
        "fixed_code": "public void testFindClassesToTest_ignoreUnderscores() {",
        "patch": "@@ -72,7 +72,7 @@ public void testFindClassesToTest_ignoreClasses() {\n     assertThat(findClassesToTest(ImmutableList.of(Foo.class))).contains(Foo.class);\n   }\n \n-  public void testFindClassesToTeset_ignoreUnderscores() {\n+  public void testFindClassesToTest_ignoreUnderscores() {\n     assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class)))\n         .containsExactly(Foo.class, Foo_Bar.class);\n     sanityTests.ignoreClasses(AbstractPackageSanityTests.UNDERSCORE_IN_NAME);"
    },
    {
        "commit_id": "58d8f643807b05a68472a8fc030a209c5e386fd7",
        "commit_message": "Fix typo in testFindClassesToTeset_ignoreUnderscores\n\nFixes #3499\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=252402185",
        "commit_url": "https://github.com/google/guava/commit/58d8f643807b05a68472a8fc030a209c5e386fd7",
        "buggy_code": "public void testFindClassesToTeset_ignoreUnderscores() {",
        "fixed_code": "public void testFindClassesToTest_ignoreUnderscores() {",
        "patch": "@@ -72,7 +72,7 @@ public void testFindClassesToTest_ignoreClasses() {\n     assertThat(findClassesToTest(ImmutableList.of(Foo.class))).contains(Foo.class);\n   }\n \n-  public void testFindClassesToTeset_ignoreUnderscores() {\n+  public void testFindClassesToTest_ignoreUnderscores() {\n     assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class)))\n         .containsExactly(Foo.class, Foo_Bar.class);\n     sanityTests.ignoreClasses(AbstractPackageSanityTests.UNDERSCORE_IN_NAME);"
    },
    {
        "commit_id": "6cf3e2ec338a1e5ddd9796eaf3c8031d2b637939",
        "commit_message": "Add a link back to the goodtime rate bug.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=248579020",
        "commit_url": "https://github.com/google/guava/commit/6cf3e2ec338a1e5ddd9796eaf3c8031d2b637939",
        "buggy_code": "@SuppressWarnings(\"GoodTime\") // lots of violations - also how should we model a rate?",
        "fixed_code": "@SuppressWarnings(\"GoodTime\") // lots of violations; how should we model a rate? b/119435646",
        "patch": "@@ -92,7 +92,7 @@\n // would mean a maximum rate of \"1MB/s\", which might be small in some cases.\n @Beta\n @GwtIncompatible\n-@SuppressWarnings(\"GoodTime\") // lots of violations - also how should we model a rate?\n+@SuppressWarnings(\"GoodTime\") // lots of violations; how should we model a rate? b/119435646\n public abstract class RateLimiter {\n   /**\n    * Creates a {@code RateLimiter} with the specified stable throughput, given as \"permits per"
    },
    {
        "commit_id": "6cf3e2ec338a1e5ddd9796eaf3c8031d2b637939",
        "commit_message": "Add a link back to the goodtime rate bug.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=248579020",
        "commit_url": "https://github.com/google/guava/commit/6cf3e2ec338a1e5ddd9796eaf3c8031d2b637939",
        "buggy_code": "@SuppressWarnings(\"GoodTime\") // lots of violations - also how should we model a rate?",
        "fixed_code": "@SuppressWarnings(\"GoodTime\") // lots of violations; how should we model a rate? b/119435646",
        "patch": "@@ -92,7 +92,7 @@\n // would mean a maximum rate of \"1MB/s\", which might be small in some cases.\n @Beta\n @GwtIncompatible\n-@SuppressWarnings(\"GoodTime\") // lots of violations - also how should we model a rate?\n+@SuppressWarnings(\"GoodTime\") // lots of violations; how should we model a rate? b/119435646\n public abstract class RateLimiter {\n   /**\n    * Creates a {@code RateLimiter} with the specified stable throughput, given as \"permits per"
    },
    {
        "commit_id": "a0f748e78516c8c80c945f6a4c4fae752d11bff5",
        "commit_message": "Delete WellBehavedMap.\n\nThe bug it worked around was fixed in Java 7:\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706\n\nAnd I don't believe it was ever present under Android:\nhttps://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146\n\nI haven't looked for the absolute first version ever of GWT, but the still very old GWT file doesn't have the bug, either.\n\nDeleting this class will simplify some work I'm doing around our EnumMap usage for j2cl.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=233418344",
        "commit_url": "https://github.com/google/guava/commit/a0f748e78516c8c80c945f6a4c4fae752d11bff5",
        "buggy_code": "super(WellBehavedMap.wrap(delegate));",
        "fixed_code": "super(delegate);",
        "patch": "@@ -37,6 +37,6 @@ static <K, V> ImmutableMap<K, V> asImmutable(Map<K, V> map) {\n   }\n \n   private ImmutableEnumMap(Map<? extends K, ? extends V> delegate) {\n-    super(WellBehavedMap.wrap(delegate));\n+    super(delegate);\n   }\n }"
    },
    {
        "commit_id": "e41e8d13f3b1d3101b47df73bb2f582b8cdb51e2",
        "commit_message": "Use the primitive \"number\" type instead of the object counterpart \"Number\" to avoid a jscompiler error.\n\nAn upcoming change to J2CL that simplifies how casting logic is transpiled will make the code \"(Number) (Object) 3\" here transpile to just \"/** @type {Number} */ (3)\" and jscompiler will see the \"invalid cast\" since \"3\" is not \"Number\" in the closure type system.\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=225046969",
        "commit_url": "https://github.com/google/guava/commit/e41e8d13f3b1d3101b47df73bb2f582b8cdb51e2",
        "buggy_code": "@JsType(isNative = true, name = \"Number\", namespace = GLOBAL)",
        "fixed_code": "@JsType(isNative = true, name = \"number\", namespace = GLOBAL)",
        "patch": "@@ -67,7 +67,7 @@ static native String emptyToNull(@Nullable String string) /*-{\n     return string || null;\n   }-*/;\n \n-  @JsType(isNative = true, name = \"Number\", namespace = GLOBAL)\n+  @JsType(isNative = true, name = \"number\", namespace = GLOBAL)\n   private interface Number {\n     double toPrecision(int precision);\n   }"
    },
    {
        "commit_id": "148688a62d696f9dd0d84205b8df77e5723bb92f",
        "commit_message": "Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.\n\nNoticed during discussion of https://github.com/google/guava/issues/3202\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=205076830",
        "commit_url": "https://github.com/google/guava/commit/148688a62d696f9dd0d84205b8df77e5723bb92f",
        "buggy_code": "initialCapacity = Math.min(initialCapacity, (int) maxWeight);",
        "fixed_code": "initialCapacity = (int) Math.min(initialCapacity, maxWeight);",
        "patch": "@@ -260,7 +260,7 @@ class LocalCache<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V>\n \n     int initialCapacity = Math.min(builder.getInitialCapacity(), MAXIMUM_CAPACITY);\n     if (evictsBySize() && !customWeigher()) {\n-      initialCapacity = Math.min(initialCapacity, (int) maxWeight);\n+      initialCapacity = (int) Math.min(initialCapacity, maxWeight);\n     }\n \n     // Find the lowest power-of-two segmentCount that exceeds concurrencyLevel, unless"
    },
    {
        "commit_id": "148688a62d696f9dd0d84205b8df77e5723bb92f",
        "commit_message": "Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.\n\nNoticed during discussion of https://github.com/google/guava/issues/3202\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=205076830",
        "commit_url": "https://github.com/google/guava/commit/148688a62d696f9dd0d84205b8df77e5723bb92f",
        "buggy_code": "initialCapacity = Math.min(initialCapacity, (int) maxWeight);",
        "fixed_code": "initialCapacity = (int) Math.min(initialCapacity, maxWeight);",
        "patch": "@@ -264,7 +264,7 @@ class LocalCache<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V>\n \n     int initialCapacity = Math.min(builder.getInitialCapacity(), MAXIMUM_CAPACITY);\n     if (evictsBySize() && !customWeigher()) {\n-      initialCapacity = Math.min(initialCapacity, (int) maxWeight);\n+      initialCapacity = (int) Math.min(initialCapacity, maxWeight);\n     }\n \n     // Find the lowest power-of-two segmentCount that exceeds concurrencyLevel, unless"
    },
    {
        "commit_id": "436d4769bde6cf1928ebef10c8fc8d99b9747c31",
        "commit_message": "Fix a few formatting nits\n\nRELNOTES=N/A\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=195263207",
        "commit_url": "https://github.com/google/guava/commit/436d4769bde6cf1928ebef10c8fc8d99b9747c31",
        "buggy_code": "public int read(@NullableDecl char cbuf[], int off, int len) throws IOException {",
        "fixed_code": "public int read(@NullableDecl char[] cbuf, int off, int len) throws IOException {",
        "patch": "@@ -46,7 +46,7 @@ private void advance() throws IOException {\n   }\n \n   @Override\n-  public int read(@NullableDecl char cbuf[], int off, int len) throws IOException {\n+  public int read(@NullableDecl char[] cbuf, int off, int len) throws IOException {\n     if (current == null) {\n       return -1;\n     }"
    },
    {
        "commit_id": "436d4769bde6cf1928ebef10c8fc8d99b9747c31",
        "commit_message": "Fix a few formatting nits\n\nRELNOTES=N/A\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=195263207",
        "commit_url": "https://github.com/google/guava/commit/436d4769bde6cf1928ebef10c8fc8d99b9747c31",
        "buggy_code": "public int read(@NullableDecl char cbuf[], int off, int len) throws IOException {",
        "fixed_code": "public int read(@NullableDecl char[] cbuf, int off, int len) throws IOException {",
        "patch": "@@ -46,7 +46,7 @@ private void advance() throws IOException {\n   }\n \n   @Override\n-  public int read(@NullableDecl char cbuf[], int off, int len) throws IOException {\n+  public int read(@NullableDecl char[] cbuf, int off, int len) throws IOException {\n     if (current == null) {\n       return -1;\n     }"
    },
    {
        "commit_id": "f89ece5721b2f637fe754937ff1f3c86d80bb196",
        "commit_message": "Avoid presizing arrays.\n\nRELNOTES=Fixed Denial of Service vulnerability for servers that use Guava and deserialize attacker data: [CVE-2018-10237](https://github.com/google/guava/wiki/CVE-2018-10237).\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=194113840",
        "commit_url": "https://github.com/google/guava/commit/f89ece5721b2f637fe754937ff1f3c86d80bb196",
        "buggy_code": "List<Comparator<Object>> comparators = new ArrayList<>(n);",
        "fixed_code": "List<Comparator<Object>> comparators = new ArrayList<>();",
        "patch": "@@ -36,7 +36,7 @@ public static void deserialize(SerializationStreamReader reader, CompoundOrderin\n   public static CompoundOrdering<Object> instantiate(SerializationStreamReader reader)\n       throws SerializationException {\n     int n = reader.readInt();\n-    List<Comparator<Object>> comparators = new ArrayList<>(n);\n+    List<Comparator<Object>> comparators = new ArrayList<>();\n     for (int i = 0; i < n; i++) {\n       comparators.add((Comparator<Object>) reader.readObject());\n     }"
    },
    {
        "commit_id": "d710bd82209651d6525fef7c917ae8534327e779",
        "commit_message": "Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).\n\nThis used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter, turning it into Foo<C>, and then List<Foo<C>> isn't a subtype of List<Foo<?>>.\n\nWildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context, wildcard should remain as is.\n\nI found this when trying to add isSubtypeOf() precondition check in getSubtype(), in response to https://github.com/google/guava/issues/3048.\n\nRELNOTES=TypeToken.isSubtypeOf() bug fix.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=187730924",
        "commit_url": "https://github.com/google/guava/commit/d710bd82209651d6525fef7c917ae8534327e779",
        "buggy_code": "TypeResolver typeResolver = TypeResolver.accordingTo(parameterized.getClass());",
        "fixed_code": "TypeResolver typeResolver = TypeResolver.covariantly(parameterized.getClass());",
        "patch": "@@ -123,7 +123,7 @@ public void testResolveType_parameterizedType() {\n     @SuppressWarnings(\"rawtypes\") // trying to test raw type\n     Parameterized<?, ?, ?> parameterized =\n         new Parameterized<TypeTokenResolutionTest, Bar, String>() {};\n-    TypeResolver typeResolver = TypeResolver.accordingTo(parameterized.getClass());\n+    TypeResolver typeResolver = TypeResolver.covariantly(parameterized.getClass());\n     ParameterizedType resolved =\n         (ParameterizedType) typeResolver.resolveType(parameterized.parameterizedType());\n     assertEquals(TypeTokenResolutionTest.class, resolved.getOwnerType());"
    },
    {
        "commit_id": "d710bd82209651d6525fef7c917ae8534327e779",
        "commit_message": "Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).\n\nThis used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter, turning it into Foo<C>, and then List<Foo<C>> isn't a subtype of List<Foo<?>>.\n\nWildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context, wildcard should remain as is.\n\nI found this when trying to add isSubtypeOf() precondition check in getSubtype(), in response to https://github.com/google/guava/issues/3048.\n\nRELNOTES=TypeToken.isSubtypeOf() bug fix.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=187730924",
        "commit_url": "https://github.com/google/guava/commit/d710bd82209651d6525fef7c917ae8534327e779",
        "buggy_code": "TypeResolver typeResolver = TypeResolver.accordingTo(parameterized.getClass());",
        "fixed_code": "TypeResolver typeResolver = TypeResolver.covariantly(parameterized.getClass());",
        "patch": "@@ -123,7 +123,7 @@ public void testResolveType_parameterizedType() {\n     @SuppressWarnings(\"rawtypes\") // trying to test raw type\n     Parameterized<?, ?, ?> parameterized =\n         new Parameterized<TypeTokenResolutionTest, Bar, String>() {};\n-    TypeResolver typeResolver = TypeResolver.accordingTo(parameterized.getClass());\n+    TypeResolver typeResolver = TypeResolver.covariantly(parameterized.getClass());\n     ParameterizedType resolved =\n         (ParameterizedType) typeResolver.resolveType(parameterized.parameterizedType());\n     assertEquals(TypeTokenResolutionTest.class, resolved.getOwnerType());"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.OverridingMethodsMustInvokeSuper;",
        "fixed_code": "import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;",
        "patch": "@@ -17,12 +17,12 @@\n package com.google.common.collect.testing;\n \n import com.google.common.annotations.GwtCompatible;\n+import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import javax.annotation.OverridingMethodsMustInvokeSuper;\n \n /**\n  * Base class for testers of classes (including {@link Collection}"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -21,12 +21,12 @@\n import com.google.common.annotations.Beta;\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.collect.Lists;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A {@code TearDownStack} contains a stack of {@link TearDown} instances."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -27,6 +27,7 @@\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AbstractFutureBenchmarks.OldAbstractFuture;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.Queue;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -38,7 +39,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Benchmarks for {@link ExecutionList}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -26,13 +26,13 @@\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.Service.Listener;\n import com.google.common.util.concurrent.Service.State;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.lang.Thread.UncaughtExceptionHandler;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n-import javax.annotation.concurrent.GuardedBy;\n import junit.framework.TestCase;\n \n /**"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -49,6 +49,7 @@\n import com.google.common.util.concurrent.SettableFuture;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import com.google.common.util.concurrent.Uninterruptibles;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import com.google.j2objc.annotations.WeakOuter;\n import java.io.IOException;\n@@ -81,7 +82,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * The concurrent hash map implementation built by {@link CacheBuilder}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -23,6 +23,7 @@\n import com.google.common.collect.MapMaker.Dummy;\n import com.google.common.primitives.Ints;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import com.google.j2objc.annotations.WeakOuter;\n import java.io.IOException;\n@@ -47,7 +48,6 @@\n import java.util.concurrent.atomic.AtomicReferenceArray;\n import java.util.concurrent.locks.ReentrantLock;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * The concurrent hash map implementation built by {@link MapMaker}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -22,6 +22,7 @@\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Supplier;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Executor;\n@@ -34,7 +35,6 @@\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Base class for services that can implement {@link #startUp} and {@link #shutDown} but while in"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -30,12 +30,12 @@\n import com.google.common.util.concurrent.Service.State; // javadoc needs this\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import com.google.errorprone.annotations.ForOverride;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.concurrent.Executor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Base class for implementing services that can handle {@link #doStart} and {@link #doStop}"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.OverridingMethodsMustInvokeSuper;",
        "fixed_code": "import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;",
        "patch": "@@ -22,13 +22,13 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.collect.ImmutableCollection;\n import com.google.errorprone.annotations.ForOverride;\n+import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;\n import java.util.Set;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.OverridingMethodsMustInvokeSuper;\n \n /**\n  * A future made up of a collection of sub-futures."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -17,11 +17,11 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.annotations.GwtIncompatible;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A support class for {@code ListenableFuture} implementations to manage their listeners. An"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -19,14 +19,14 @@\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Queues;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A list of listeners for implementing a concurrency friendly observable object."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -19,11 +19,11 @@\n import com.google.common.annotations.Beta;\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Throwables;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A synchronization abstraction supporting waiting on arbitrary boolean conditions."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -27,6 +27,7 @@\n import com.google.common.collect.Queues;\n import com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.lang.reflect.InvocationTargetException;\n import java.util.Collection;\n import java.util.Collections;\n@@ -49,7 +50,6 @@\n import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link ExecutorService},"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -16,13 +16,13 @@\n \n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Preconditions;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.ArrayDeque;\n import java.util.Queue;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Executor ensuring that all Runnables submitted are executed in order, using the provided"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -50,6 +50,7 @@\n import com.google.common.collect.SetMultimap;\n import com.google.common.util.concurrent.Service.State;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.lang.ref.WeakReference;\n import java.util.Collections;\n@@ -62,7 +63,6 @@\n import java.util.concurrent.TimeoutException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A manager for monitoring and controlling a set of {@linkplain Service services}. This class"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.OverridingMethodsMustInvokeSuper;",
        "fixed_code": "import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;",
        "patch": "@@ -17,12 +17,12 @@\n package com.google.common.collect.testing;\n \n import com.google.common.annotations.GwtCompatible;\n+import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import javax.annotation.OverridingMethodsMustInvokeSuper;\n \n /**\n  * Base class for testers of classes (including {@link Collection}"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -21,12 +21,12 @@\n import com.google.common.annotations.Beta;\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.collect.Lists;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A {@code TearDownStack} contains a stack of {@link TearDown} instances."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -27,6 +27,7 @@\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AbstractFutureBenchmarks.OldAbstractFuture;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.Queue;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -38,7 +39,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Benchmarks for {@link ExecutionList}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -26,13 +26,13 @@\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.Service.Listener;\n import com.google.common.util.concurrent.Service.State;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.lang.Thread.UncaughtExceptionHandler;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n-import javax.annotation.concurrent.GuardedBy;\n import junit.framework.TestCase;\n \n /**"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -49,6 +49,7 @@\n import com.google.common.util.concurrent.SettableFuture;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n import com.google.common.util.concurrent.Uninterruptibles;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import com.google.j2objc.annotations.WeakOuter;\n import java.io.IOException;\n@@ -85,7 +86,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * The concurrent hash map implementation built by {@link CacheBuilder}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -23,6 +23,7 @@\n import com.google.common.collect.MapMaker.Dummy;\n import com.google.common.primitives.Ints;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import com.google.j2objc.annotations.WeakOuter;\n import java.io.IOException;\n@@ -47,7 +48,6 @@\n import java.util.concurrent.atomic.AtomicReferenceArray;\n import java.util.concurrent.locks.ReentrantLock;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * The concurrent hash map implementation built by {@link MapMaker}."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -22,6 +22,7 @@\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Supplier;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Executor;\n@@ -34,7 +35,6 @@\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Base class for services that can implement {@link #startUp} and {@link #shutDown} but while in"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -30,12 +30,12 @@\n import com.google.common.util.concurrent.Service.State; // javadoc needs this\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import com.google.errorprone.annotations.ForOverride;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.concurrent.Executor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Base class for implementing services that can handle {@link #doStart} and {@link #doStop}"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.OverridingMethodsMustInvokeSuper;",
        "fixed_code": "import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;",
        "patch": "@@ -22,13 +22,13 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.collect.ImmutableCollection;\n import com.google.errorprone.annotations.ForOverride;\n+import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;\n import java.util.Set;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.OverridingMethodsMustInvokeSuper;\n \n /**\n  * A future made up of a collection of sub-futures."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -17,11 +17,11 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.annotations.GwtIncompatible;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A support class for {@code ListenableFuture} implementations to manage their listeners. An"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -19,14 +19,14 @@\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Queues;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A list of listeners for implementing a concurrency friendly observable object."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -19,12 +19,12 @@\n import com.google.common.annotations.Beta;\n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Throwables;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.Weak;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.function.BooleanSupplier;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A synchronization abstraction supporting waiting on arbitrary boolean conditions."
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -27,6 +27,7 @@\n import com.google.common.collect.Queues;\n import com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import java.lang.reflect.InvocationTargetException;\n import java.util.Collection;\n import java.util.Collections;\n@@ -49,7 +50,6 @@\n import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link ExecutorService},"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -16,13 +16,13 @@\n \n import com.google.common.annotations.GwtIncompatible;\n import com.google.common.base.Preconditions;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.util.ArrayDeque;\n import java.util.Queue;\n import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * Executor ensuring that all Runnables submitted are executed in order, using the provided"
    },
    {
        "commit_id": "c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "commit_message": "Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177511255",
        "commit_url": "https://github.com/google/guava/commit/c60f24a21b7e080e21851f06fce1e8f2d782ca93",
        "buggy_code": "import javax.annotation.concurrent.GuardedBy;",
        "fixed_code": "import com.google.errorprone.annotations.concurrent.GuardedBy;",
        "patch": "@@ -50,6 +50,7 @@\n import com.google.common.collect.SetMultimap;\n import com.google.common.util.concurrent.Service.State;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n import com.google.j2objc.annotations.WeakOuter;\n import java.lang.ref.WeakReference;\n import java.util.Collections;\n@@ -62,7 +63,6 @@\n import java.util.concurrent.TimeoutException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.concurrent.GuardedBy;\n \n /**\n  * A manager for monitoring and controlling a set of {@linkplain Service services}. This class"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -23,4 +23,4 @@\n @CheckReturnValue\n package com.google.common.escape.testing;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -59,5 +59,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.base;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -29,6 +29,7 @@\n import com.google.common.cache.AbstractCache.SimpleStatsCounter;\n import com.google.common.cache.AbstractCache.StatsCounter;\n import com.google.common.cache.LocalCache.Strength;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import java.lang.ref.SoftReference;\n import java.lang.ref.WeakReference;\n import java.util.ConcurrentModificationException;\n@@ -38,7 +39,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.CheckReturnValue;\n \n /**\n  * <p>A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -222,5 +222,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.collect;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -28,5 +28,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.escape;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -245,5 +245,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.eventbus;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -25,5 +25,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.graph;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -23,5 +23,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.hash;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -24,5 +24,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.html;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -25,5 +25,5 @@\n @CheckReturnValue\n package com.google.common.math;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -20,14 +20,14 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.RandomAccess;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -20,14 +20,14 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.RandomAccess;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -20,14 +20,14 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.RandomAccess;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -63,5 +63,5 @@\n @CheckReturnValue\n package com.google.common.primitives;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -20,5 +20,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.reflect;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -19,12 +19,12 @@\n \n import com.google.common.annotations.GwtIncompatible;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import java.lang.Thread.UncaughtExceptionHandler;\n import java.util.Locale;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicLong;\n-import javax.annotation.CheckReturnValue;\n \n /**\n  * A ThreadFactory builder, providing any combination of these features:"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -29,5 +29,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.util.concurrent;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -24,5 +24,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.xml;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -23,4 +23,4 @@\n @CheckReturnValue\n package com.google.common.escape.testing;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -59,5 +59,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.base;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -29,6 +29,7 @@\n import com.google.common.cache.AbstractCache.SimpleStatsCounter;\n import com.google.common.cache.AbstractCache.StatsCounter;\n import com.google.common.cache.LocalCache.Strength;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import java.lang.ref.SoftReference;\n import java.lang.ref.WeakReference;\n import java.util.ConcurrentModificationException;\n@@ -38,7 +39,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import javax.annotation.CheckReturnValue;\n \n /**\n  * <p>A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -222,5 +222,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.collect;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -28,5 +28,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.escape;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -245,5 +245,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.eventbus;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -25,5 +25,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.graph;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -23,5 +23,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.hash;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -24,5 +24,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.html;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -25,5 +25,5 @@\n @CheckReturnValue\n package com.google.common.math;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -21,6 +21,7 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n@@ -32,7 +33,6 @@\n import java.util.Spliterators;\n import java.util.function.DoubleConsumer;\n import java.util.stream.DoubleStream;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -21,6 +21,7 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n@@ -32,7 +33,6 @@\n import java.util.Spliterators;\n import java.util.function.IntConsumer;\n import java.util.stream.IntStream;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -21,6 +21,7 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Preconditions;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import java.util.AbstractList;\n@@ -32,7 +33,6 @@\n import java.util.Spliterators;\n import java.util.function.LongConsumer;\n import java.util.stream.LongStream;\n-import javax.annotation.CheckReturnValue;\n import javax.annotation.Nullable;\n \n /**"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -63,5 +63,5 @@\n @CheckReturnValue\n package com.google.common.primitives;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -20,5 +20,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.reflect;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -19,12 +19,12 @@\n \n import com.google.common.annotations.GwtIncompatible;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import java.lang.Thread.UncaughtExceptionHandler;\n import java.util.Locale;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicLong;\n-import javax.annotation.CheckReturnValue;\n \n /**\n  * A ThreadFactory builder, providing any combination of these features:"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -29,5 +29,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.util.concurrent;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "commit_message": "Migrate from jsr305's @CheckReturnValue to Error Prone's.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=177507004",
        "commit_url": "https://github.com/google/guava/commit/6c2fe3711683897c25054ddad1d79de4c59f32dd",
        "buggy_code": "import javax.annotation.CheckReturnValue;",
        "fixed_code": "import com.google.errorprone.annotations.CheckReturnValue;",
        "patch": "@@ -24,5 +24,5 @@\n @ParametersAreNonnullByDefault\n package com.google.common.xml;\n \n-import javax.annotation.CheckReturnValue;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "901e985598a30fadb194603d6a17142cca00614b",
        "commit_message": "Migrate from jsr305's @Immutable to Error Prone's.\n\nRELNOTES=Migrate from jsr305's @Immutable to Error Prone's.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=176011904",
        "commit_url": "https://github.com/google/guava/commit/901e985598a30fadb194603d6a17142cca00614b",
        "buggy_code": "import javax.annotation.concurrent.Immutable;",
        "fixed_code": "import com.google.errorprone.annotations.Immutable;",
        "patch": "@@ -22,9 +22,9 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Objects;\n import com.google.common.base.Strings;\n+import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.Immutable;\n \n /**\n  * An immutable representation of a host and port."
    },
    {
        "commit_id": "901e985598a30fadb194603d6a17142cca00614b",
        "commit_message": "Migrate from jsr305's @Immutable to Error Prone's.\n\nRELNOTES=Migrate from jsr305's @Immutable to Error Prone's.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=176011904",
        "commit_url": "https://github.com/google/guava/commit/901e985598a30fadb194603d6a17142cca00614b",
        "buggy_code": "import javax.annotation.concurrent.Immutable;",
        "fixed_code": "import com.google.errorprone.annotations.Immutable;",
        "patch": "@@ -36,6 +36,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Multimaps;\n+import com.google.errorprone.annotations.Immutable;\n import com.google.errorprone.annotations.concurrent.LazyInit;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.Immutable;\n \n /**\n  * Represents an <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Internet Media Type</a>"
    },
    {
        "commit_id": "901e985598a30fadb194603d6a17142cca00614b",
        "commit_message": "Migrate from jsr305's @Immutable to Error Prone's.\n\nRELNOTES=Migrate from jsr305's @Immutable to Error Prone's.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=176011904",
        "commit_url": "https://github.com/google/guava/commit/901e985598a30fadb194603d6a17142cca00614b",
        "buggy_code": "import javax.annotation.concurrent.Immutable;",
        "fixed_code": "import com.google.errorprone.annotations.Immutable;",
        "patch": "@@ -22,9 +22,9 @@\n import com.google.common.annotations.GwtCompatible;\n import com.google.common.base.Objects;\n import com.google.common.base.Strings;\n+import com.google.errorprone.annotations.Immutable;\n import java.io.Serializable;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.Immutable;\n \n /**\n  * An immutable representation of a host and port."
    },
    {
        "commit_id": "901e985598a30fadb194603d6a17142cca00614b",
        "commit_message": "Migrate from jsr305's @Immutable to Error Prone's.\n\nRELNOTES=Migrate from jsr305's @Immutable to Error Prone's.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=176011904",
        "commit_url": "https://github.com/google/guava/commit/901e985598a30fadb194603d6a17142cca00614b",
        "buggy_code": "import javax.annotation.concurrent.Immutable;",
        "fixed_code": "import com.google.errorprone.annotations.Immutable;",
        "patch": "@@ -36,6 +36,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Multimaps;\n+import com.google.errorprone.annotations.Immutable;\n import com.google.errorprone.annotations.concurrent.LazyInit;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import javax.annotation.Nullable;\n-import javax.annotation.concurrent.Immutable;\n \n /**\n  * Represents an <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Internet Media Type</a>"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "public SampleElements<Map.Entry<String, String>> samples() {",
        "fixed_code": "public SampleElements<Entry<String, String>> samples() {",
        "patch": "@@ -33,7 +33,7 @@\n public abstract class TestStringMapGenerator implements TestMapGenerator<String, String> {\n \n   @Override\n-  public SampleElements<Map.Entry<String, String>> samples() {\n+  public SampleElements<Entry<String, String>> samples() {\n     return new SampleElements<>(\n         Helpers.mapEntry(\"one\", \"January\"),\n         Helpers.mapEntry(\"two\", \"February\"),"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "for (Map.Entry<K, V> entry : entries) {",
        "fixed_code": "for (Entry<K, V> entry : entries) {",
        "patch": "@@ -79,7 +79,7 @@ public void testToString_formatting() {\n \n   private String expectedToString(Set<Entry<K, V>> entries) {\n     Map<K, V> reference = new LinkedHashMap<>();\n-    for (Map.Entry<K, V> entry : entries) {\n+    for (Entry<K, V> entry : entries) {\n       reference.put(entry.getKey(), entry.getValue());\n     }\n     return reference.toString();"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "Map.Entry<?, ?> entry = (Entry<?, ?>) e;",
        "fixed_code": "Entry<?, ?> entry = (Entry<?, ?>) e;",
        "patch": "@@ -250,7 +250,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n                   public NavigableMap<String, Integer> create(Object... elements) {\n                     NavigableSet<String> set = Sets.newTreeSet(Ordering.natural());\n                     for (Object e : elements) {\n-                      Map.Entry<?, ?> entry = (Entry<?, ?>) e;\n+                      Entry<?, ?> entry = (Entry<?, ?>) e;\n                       checkNotNull(entry.getValue());\n                       set.add((String) checkNotNull(entry.getKey()));\n                     }"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "@Override public Set<Map.Entry<K, V>> entries() {",
        "fixed_code": "@Override public Set<Entry<K, V>> entries() {",
        "patch": "@@ -184,7 +184,7 @@ private static final class TestMultimap<K, V> extends ForwardingSetMultimap<K, V\n       return super.values();\n     }\n \n-    @Override public Set<Map.Entry<K, V>> entries() {\n+    @Override public Set<Entry<K, V>> entries() {\n       assertTrue(Thread.holdsLock(mutex));\n       /* TODO: verify that the Collection is also synchronized? */\n       return super.entries();"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {",
        "fixed_code": "for (Entry<? extends K, ? extends V> entry : multimap.entries()) {",
        "patch": "@@ -90,7 +90,7 @@ public boolean putAll(@Nullable K key, Iterable<? extends V> values) {\n   @Override\n   public boolean putAll(Multimap<? extends K, ? extends V> multimap) {\n     boolean changed = false;\n-    for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {\n+    for (Entry<? extends K, ? extends V> entry : multimap.entries()) {\n       changed |= put(entry.getKey(), entry.getValue());\n     }\n     return changed;"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "protected abstract Map.Entry<K, V> delegate();",
        "fixed_code": "protected abstract Entry<K, V> delegate();",
        "patch": "@@ -57,7 +57,7 @@ public abstract class ForwardingMapEntry<K, V> extends ForwardingObject implemen\n   protected ForwardingMapEntry() {}\n \n   @Override\n-  protected abstract Map.Entry<K, V> delegate();\n+  protected abstract Entry<K, V> delegate();\n \n   @Override\n   public K getKey() {"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "public Long apply(Map.Entry<Service, Long> input) {",
        "fixed_code": "public Long apply(Entry<Service, Long> input) {",
        "patch": "@@ -626,7 +626,7 @@ ImmutableMap<Service, Long> startupTimes() {\n               .onResultOf(\n                   new Function<Entry<Service, Long>, Long>() {\n                     @Override\n-                    public Long apply(Map.Entry<Service, Long> input) {\n+                    public Long apply(Entry<Service, Long> input) {\n                       return input.getValue();\n                     }\n                   }));"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "@Override public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry) {",
        "fixed_code": "@Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {",
        "patch": "@@ -89,7 +89,7 @@ public Builder() {}\n       return this;\n     }\n \n-    @Override public Builder<K, V> put(Map.Entry<? extends K, ? extends V> entry) {\n+    @Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {\n       super.put(entry);\n       return this;\n     }"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "public SampleElements<Map.Entry<String, String>> samples() {",
        "fixed_code": "public SampleElements<Entry<String, String>> samples() {",
        "patch": "@@ -33,7 +33,7 @@\n public abstract class TestStringMapGenerator implements TestMapGenerator<String, String> {\n \n   @Override\n-  public SampleElements<Map.Entry<String, String>> samples() {\n+  public SampleElements<Entry<String, String>> samples() {\n     return new SampleElements<>(\n         Helpers.mapEntry(\"one\", \"January\"),\n         Helpers.mapEntry(\"two\", \"February\"),"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "for (Map.Entry<K, V> entry : entries) {",
        "fixed_code": "for (Entry<K, V> entry : entries) {",
        "patch": "@@ -79,7 +79,7 @@ public void testToString_formatting() {\n \n   private String expectedToString(Set<Entry<K, V>> entries) {\n     Map<K, V> reference = new LinkedHashMap<>();\n-    for (Map.Entry<K, V> entry : entries) {\n+    for (Entry<K, V> entry : entries) {\n       reference.put(entry.getKey(), entry.getValue());\n     }\n     return reference.toString();"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "Map.Entry<?, ?> entry = (Entry<?, ?>) e;",
        "fixed_code": "Entry<?, ?> entry = (Entry<?, ?>) e;",
        "patch": "@@ -250,7 +250,7 @@ public SampleElements<Entry<String, Integer>> samples() {\n                   public NavigableMap<String, Integer> create(Object... elements) {\n                     NavigableSet<String> set = Sets.newTreeSet(Ordering.natural());\n                     for (Object e : elements) {\n-                      Map.Entry<?, ?> entry = (Entry<?, ?>) e;\n+                      Entry<?, ?> entry = (Entry<?, ?>) e;\n                       checkNotNull(entry.getValue());\n                       set.add((String) checkNotNull(entry.getKey()));\n                     }"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "@Override public Set<Map.Entry<K, V>> entries() {",
        "fixed_code": "@Override public Set<Entry<K, V>> entries() {",
        "patch": "@@ -184,7 +184,7 @@ private static final class TestMultimap<K, V> extends ForwardingSetMultimap<K, V\n       return super.values();\n     }\n \n-    @Override public Set<Map.Entry<K, V>> entries() {\n+    @Override public Set<Entry<K, V>> entries() {\n       assertTrue(Thread.holdsLock(mutex));\n       /* TODO: verify that the Collection is also synchronized? */\n       return super.entries();"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "for (Map.Entry<K, V> entry : result.entrySet()) {",
        "fixed_code": "for (Entry<K, V> entry : result.entrySet()) {",
        "patch": "@@ -4261,7 +4261,7 @@ Map<K, V> loadAll(Set<? extends K> keys, CacheLoader<? super K, V> loader)\n     stopwatch.stop();\n     // TODO(fry): batch by segment\n     boolean nullsPresent = false;\n-    for (Map.Entry<K, V> entry : result.entrySet()) {\n+    for (Entry<K, V> entry : result.entrySet()) {\n       K key = entry.getKey();\n       V value = entry.getValue();\n       if (key == null || value == null) {"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {",
        "fixed_code": "for (Entry<? extends K, ? extends V> entry : multimap.entries()) {",
        "patch": "@@ -92,7 +92,7 @@ public boolean putAll(@Nullable K key, Iterable<? extends V> values) {\n   @Override\n   public boolean putAll(Multimap<? extends K, ? extends V> multimap) {\n     boolean changed = false;\n-    for (Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {\n+    for (Entry<? extends K, ? extends V> entry : multimap.entries()) {\n       changed |= put(entry.getKey(), entry.getValue());\n     }\n     return changed;"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "protected abstract Map.Entry<K, V> delegate();",
        "fixed_code": "protected abstract Entry<K, V> delegate();",
        "patch": "@@ -57,7 +57,7 @@ public abstract class ForwardingMapEntry<K, V> extends ForwardingObject implemen\n   protected ForwardingMapEntry() {}\n \n   @Override\n-  protected abstract Map.Entry<K, V> delegate();\n+  protected abstract Entry<K, V> delegate();\n \n   @Override\n   public K getKey() {"
    },
    {
        "commit_id": "328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "commit_message": "Import Map.Entry almost everywhere.\n\nQualified types make @Nullable annotations more complicated: If we're using a type annotation, the \"@Nullable\" has to come between \"Map.\" and \"Entry\" rather than before the whole thing. That means diffs between the mainline, presuming that it supports type annotations, and the backport, presuming that it doesn't. It's not entirely clear that that's how things will work out, but I can't experiment until I fix the problem, and I figure I might as well submit the fix, given that I think we generally like doing this, at least with Multiset.Entry isn't in play? But it's not very hard to handle the problem as it comes up, either, if this CL is too much.\n\n(Naturally, the same problem will exist for other types. But this CL fixes the most common problem.)\n\nRELNOTES=n/a\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=175999659",
        "commit_url": "https://github.com/google/guava/commit/328481cb8b86f97f25e051fe16ad3f2f3b988dce",
        "buggy_code": "public Long apply(Map.Entry<Service, Long> input) {",
        "fixed_code": "public Long apply(Entry<Service, Long> input) {",
        "patch": "@@ -626,7 +626,7 @@ ImmutableMap<Service, Long> startupTimes() {\n               .onResultOf(\n                   new Function<Entry<Service, Long>, Long>() {\n                     @Override\n-                    public Long apply(Map.Entry<Service, Long> input) {\n+                    public Long apply(Entry<Service, Long> input) {\n                       return input.getValue();\n                     }\n                   }));"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testFinalizeClassHasNoNestedClases() throws Exception {",
        "fixed_code": "public void testFinalizeClassHasNoNestedClasses() throws Exception {",
        "patch": "@@ -150,7 +150,7 @@ public void testGetFinalizerUrl() {\n     assertNotNull(getClass().getResource(\"internal/Finalizer.class\"));\n   }\n \n-  public void testFinalizeClassHasNoNestedClases() throws Exception {\n+  public void testFinalizeClassHasNoNestedClasses() throws Exception {\n     // Ensure that the Finalizer class has no nested classes.\n     // See https://code.google.com/p/guava-libraries/issues/detail?id=1505\n     assertEquals(Collections.emptyList(), Arrays.asList(Finalizer.class.getDeclaredClasses()));"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testCharacterSplitWithMultitpleLetters() {",
        "fixed_code": "public void testCharacterSplitWithMultipleLetters() {",
        "patch": "@@ -100,7 +100,7 @@ public void testCharacterSplitWithLeadingDelimiter() {\n     assertThat(letters).containsExactly(\"\", \"a\", \"b\", \"c\").inOrder();\n   }\n \n-  public void testCharacterSplitWithMultitpleLetters() {\n+  public void testCharacterSplitWithMultipleLetters() {\n     Iterable<String> testCharacteringMotto = Splitter.on('-').split(\n         \"Testing-rocks-Debugging-sucks\");\n     assertThat(testCharacteringMotto)"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testScsiReadCommad() {",
        "fixed_code": "public void testScsiReadCommand() {",
        "patch": "@@ -59,7 +59,7 @@ public void testDescending() {\n     assertCrc(0x113fdb5c, descending);\n   }\n \n-  public void testScsiReadCommad() {\n+  public void testScsiReadCommand() {\n     // Test SCSI read command.\n     byte[] scsiReadCommand = new byte[] {\n         0x01, (byte) 0xc0, 0x00, 0x00,"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testFinalizeClassHasNoNestedClases() throws Exception {",
        "fixed_code": "public void testFinalizeClassHasNoNestedClasses() throws Exception {",
        "patch": "@@ -150,7 +150,7 @@ public void testGetFinalizerUrl() {\n     assertNotNull(getClass().getResource(\"internal/Finalizer.class\"));\n   }\n \n-  public void testFinalizeClassHasNoNestedClases() throws Exception {\n+  public void testFinalizeClassHasNoNestedClasses() throws Exception {\n     // Ensure that the Finalizer class has no nested classes.\n     // See https://code.google.com/p/guava-libraries/issues/detail?id=1505\n     assertEquals(Collections.emptyList(), Arrays.asList(Finalizer.class.getDeclaredClasses()));"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testCharacterSplitWithMultitpleLetters() {",
        "fixed_code": "public void testCharacterSplitWithMultipleLetters() {",
        "patch": "@@ -100,7 +100,7 @@ public void testCharacterSplitWithLeadingDelimiter() {\n     assertThat(letters).containsExactly(\"\", \"a\", \"b\", \"c\").inOrder();\n   }\n \n-  public void testCharacterSplitWithMultitpleLetters() {\n+  public void testCharacterSplitWithMultipleLetters() {\n     Iterable<String> testCharacteringMotto = Splitter.on('-').split(\n         \"Testing-rocks-Debugging-sucks\");\n     assertThat(testCharacteringMotto)"
    },
    {
        "commit_id": "e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "commit_message": "Fix minor spelling errors in tests.\n\nFixes #2973\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=172766537",
        "commit_url": "https://github.com/google/guava/commit/e84643cad0ebcfa85ee401e0350b8e05a0468e4d",
        "buggy_code": "public void testScsiReadCommad() {",
        "fixed_code": "public void testScsiReadCommand() {",
        "patch": "@@ -59,7 +59,7 @@ public void testDescending() {\n     assertCrc(0x113fdb5c, descending);\n   }\n \n-  public void testScsiReadCommad() {\n+  public void testScsiReadCommand() {\n     // Test SCSI read command.\n     byte[] scsiReadCommand = new byte[] {\n         0x01, (byte) 0xc0, 0x00, 0x00,"
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "} catch (NullPointerException expected) {",
        "fixed_code": "} catch (NullPointerException tolerated) {",
        "patch": "@@ -150,7 +150,7 @@ public void testRemoveAll_nullCollectionReferenceEmptySubject() {\n     try {\n       collection.removeAll(null);\n       // Returning successfully is not ideal, but tolerated.\n-    } catch (NullPointerException expected) {\n+    } catch (NullPointerException tolerated) {\n     }\n   }\n "
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "} catch (NullPointerException expected) {",
        "fixed_code": "} catch (NullPointerException tolerated) {",
        "patch": "@@ -287,7 +287,7 @@ public void testRetainAll_nullCollectionReferenceEmptySubject() {\n     try {\n       collection.retainAll(null);\n       // Returning successfully is not ideal, but tolerated.\n-    } catch (NullPointerException expected) {\n+    } catch (NullPointerException tolerated) {\n     }\n   }\n "
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "public void write(char cbuf[], int off, int len) throws IOException {",
        "fixed_code": "public void write(char[] cbuf, int off, int len) throws IOException {",
        "patch": "@@ -50,7 +50,7 @@ class AppendableWriter extends Writer {\n    */\n \n   @Override\n-  public void write(char cbuf[], int off, int len) throws IOException {\n+  public void write(char[] cbuf, int off, int len) throws IOException {\n     checkNotClosed();\n     // It turns out that creating a new String is usually as fast, or faster\n     // than wrapping cbuf in a light-weight CharSequence."
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "micros += (stableIntervalMicros * permitsToTake);",
        "fixed_code": "micros += (long) (stableIntervalMicros * permitsToTake);",
        "patch": "@@ -253,7 +253,7 @@ long storedPermitsToWaitTime(double storedPermits, double permitsToTake) {\n         permitsToTake -= permitsAboveThresholdToTake;\n       }\n       // measuring the integral on the left part of the function (the horizontal line)\n-      micros += (stableIntervalMicros * permitsToTake);\n+      micros += (long) (stableIntervalMicros * permitsToTake);\n       return micros;\n     }\n "
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "} catch (NullPointerException expected) {",
        "fixed_code": "} catch (NullPointerException tolerated) {",
        "patch": "@@ -150,7 +150,7 @@ public void testRemoveAll_nullCollectionReferenceEmptySubject() {\n     try {\n       collection.removeAll(null);\n       // Returning successfully is not ideal, but tolerated.\n-    } catch (NullPointerException expected) {\n+    } catch (NullPointerException tolerated) {\n     }\n   }\n "
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "} catch (NullPointerException expected) {",
        "fixed_code": "} catch (NullPointerException tolerated) {",
        "patch": "@@ -287,7 +287,7 @@ public void testRetainAll_nullCollectionReferenceEmptySubject() {\n     try {\n       collection.retainAll(null);\n       // Returning successfully is not ideal, but tolerated.\n-    } catch (NullPointerException expected) {\n+    } catch (NullPointerException tolerated) {\n     }\n   }\n "
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "public void write(char cbuf[], int off, int len) throws IOException {",
        "fixed_code": "public void write(char[] cbuf, int off, int len) throws IOException {",
        "patch": "@@ -50,7 +50,7 @@ class AppendableWriter extends Writer {\n    */\n \n   @Override\n-  public void write(char cbuf[], int off, int len) throws IOException {\n+  public void write(char[] cbuf, int off, int len) throws IOException {\n     checkNotClosed();\n     // It turns out that creating a new String is usually as fast, or faster\n     // than wrapping cbuf in a light-weight CharSequence."
    },
    {
        "commit_id": "33f372cba88cd687c20874d392f51bfe1069e3ae",
        "commit_message": "Fix some random Error Prone warnings.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170241825",
        "commit_url": "https://github.com/google/guava/commit/33f372cba88cd687c20874d392f51bfe1069e3ae",
        "buggy_code": "micros += (stableIntervalMicros * permitsToTake);",
        "fixed_code": "micros += (long) (stableIntervalMicros * permitsToTake);",
        "patch": "@@ -253,7 +253,7 @@ long storedPermitsToWaitTime(double storedPermits, double permitsToTake) {\n         permitsToTake -= permitsAboveThresholdToTake;\n       }\n       // measuring the integral on the left part of the function (the horizontal line)\n-      micros += (stableIntervalMicros * permitsToTake);\n+      micros += (long) (stableIntervalMicros * permitsToTake);\n       return micros;\n     }\n "
    },
    {
        "commit_id": "6290373588ef914111f0896b8d0c86a15b7f0f6b",
        "commit_message": "Fix typo in AbstractService log message.\n\nFixes #2894\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=164616826",
        "commit_url": "https://github.com/google/guava/commit/6290373588ef914111f0896b8d0c86a15b7f0f6b",
        "buggy_code": "\"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",",
        "fixed_code": "\"shutdownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",",
        "patch": "@@ -568,7 +568,7 @@ private static final class StateSnapshot {\n         State internalState, boolean shutdownWhenStartupFinishes, @Nullable Throwable failure) {\n       checkArgument(\n           !shutdownWhenStartupFinishes || internalState == STARTING,\n-          \"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",\n+          \"shutdownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",\n           internalState);\n       checkArgument(\n           !(failure != null ^ internalState == FAILED),"
    },
    {
        "commit_id": "6290373588ef914111f0896b8d0c86a15b7f0f6b",
        "commit_message": "Fix typo in AbstractService log message.\n\nFixes #2894\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=164616826",
        "commit_url": "https://github.com/google/guava/commit/6290373588ef914111f0896b8d0c86a15b7f0f6b",
        "buggy_code": "\"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",",
        "fixed_code": "\"shutdownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",",
        "patch": "@@ -568,7 +568,7 @@ private static final class StateSnapshot {\n         State internalState, boolean shutdownWhenStartupFinishes, @Nullable Throwable failure) {\n       checkArgument(\n           !shutdownWhenStartupFinishes || internalState == STARTING,\n-          \"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",\n+          \"shutdownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.\",\n           internalState);\n       checkArgument(\n           !(failure != null ^ internalState == FAILED),"
    },
    {
        "commit_id": "f89c0039a925d681cd7f4990e9a86bbe0179aeca",
        "commit_message": "Add @ForOverride to AbstractFuture.afterDone now that https://github.com/google/error-prone/issues/342 is fixed.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=162662199",
        "commit_url": "https://github.com/google/guava/commit/f89c0039a925d681cd7f4990e9a86bbe0179aeca",
        "buggy_code": "public void afterDone() {",
        "fixed_code": "protected void afterDone() {",
        "patch": "@@ -1184,7 +1184,7 @@ public boolean cancel(boolean interruptIfRunning) {\n     }\n \n     @Override\n-    public void afterDone() {\n+    protected void afterDone() {\n       state = null;\n     }\n "
    },
    {
        "commit_id": "f89c0039a925d681cd7f4990e9a86bbe0179aeca",
        "commit_message": "Add @ForOverride to AbstractFuture.afterDone now that https://github.com/google/error-prone/issues/342 is fixed.\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=162662199",
        "commit_url": "https://github.com/google/guava/commit/f89c0039a925d681cd7f4990e9a86bbe0179aeca",
        "buggy_code": "public void afterDone() {",
        "fixed_code": "protected void afterDone() {",
        "patch": "@@ -1184,7 +1184,7 @@ public boolean cancel(boolean interruptIfRunning) {\n     }\n \n     @Override\n-    public void afterDone() {\n+    protected void afterDone() {\n       state = null;\n     }\n "
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(service.state(), Service.State.FAILED);",
        "fixed_code": "assertEquals(Service.State.FAILED, service.state());",
        "patch": "@@ -91,7 +91,7 @@ public void testFailOnExceptionFromRun() throws Exception {\n     // An execution exception holds a runtime exception (from throwables.propogate) that holds our\n     // original exception.\n     assertEquals(service.runException, service.failureCause());\n-    assertEquals(service.state(), Service.State.FAILED);\n+    assertEquals(Service.State.FAILED, service.state());\n   }\n \n   public void testFailOnExceptionFromStartUp() {"
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);",
        "fixed_code": "assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);",
        "patch": "@@ -323,7 +323,7 @@ public void testCountingInMultipleThreads() throws InterruptedException {\n     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);\n+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);\n   }\n \n   /**"
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(countDownLatch.getCount(), 3L);",
        "fixed_code": "assertEquals(3L, countDownLatch.getCount());",
        "patch": "@@ -42,7 +42,7 @@ public void testRunOnPopulatedList() throws Exception {\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n-    assertEquals(countDownLatch.getCount(), 3L);\n+    assertEquals(3L, countDownLatch.getCount());\n \n     list.execute();\n "
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(q.toString(), \"[]\");",
        "fixed_code": "assertEquals(\"[]\", q.toString());",
        "patch": "@@ -1199,7 +1199,7 @@ void checkEmpty(BlockingQueue q) {\n             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n-            assertEquals(q.toString(), \"[]\");\n+            assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {"
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(service.state(), Service.State.FAILED);",
        "fixed_code": "assertEquals(Service.State.FAILED, service.state());",
        "patch": "@@ -91,7 +91,7 @@ public void testFailOnExceptionFromRun() throws Exception {\n     // An execution exception holds a runtime exception (from throwables.propogate) that holds our\n     // original exception.\n     assertEquals(service.runException, service.failureCause());\n-    assertEquals(service.state(), Service.State.FAILED);\n+    assertEquals(Service.State.FAILED, service.state());\n   }\n \n   public void testFailOnExceptionFromStartUp() {"
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);",
        "fixed_code": "assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);",
        "patch": "@@ -323,7 +323,7 @@ public void testCountingInMultipleThreads() throws InterruptedException {\n     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);\n+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);\n   }\n \n   /**"
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(countDownLatch.getCount(), 3L);",
        "fixed_code": "assertEquals(3L, countDownLatch.getCount());",
        "patch": "@@ -42,7 +42,7 @@ public void testRunOnPopulatedList() throws Exception {\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n-    assertEquals(countDownLatch.getCount(), 3L);\n+    assertEquals(3L, countDownLatch.getCount());\n \n     list.execute();\n "
    },
    {
        "commit_id": "b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157871496",
        "commit_url": "https://github.com/google/guava/commit/b366b2fb1840d4df542a69a8021a2e5498f7eec2",
        "buggy_code": "assertEquals(q.toString(), \"[]\");",
        "fixed_code": "assertEquals(\"[]\", q.toString());",
        "patch": "@@ -1199,7 +1199,7 @@ void checkEmpty(BlockingQueue q) {\n             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n-            assertEquals(q.toString(), \"[]\");\n+      assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(actualContents(), SerializableTester.reserialize(actualContents()));",
        "fixed_code": "assertEquals(SerializableTester.reserialize(actualContents()), actualContents());",
        "patch": "@@ -33,6 +33,6 @@\n public class CollectionSerializationEqualTester<E> extends AbstractCollectionTester<E> {\n   @CollectionFeature.Require(SERIALIZABLE)\n   public void testReserialize() {\n-    assertEquals(actualContents(), SerializableTester.reserialize(actualContents()));\n+    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());\n   }\n }"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(\"pa\\u00dfword\".toUpperCase(), \"PASSWORD\");    // [*]",
        "fixed_code": "assertEquals(\"PASSWORD\", \"pa\\u00dfword\".toUpperCase()); // [*]",
        "patch": "@@ -143,7 +143,7 @@ public void testEqualsIgnoreCaseUnicodeEquivalence() {\n     // regards edge cases.\n \n     // The Unicode point {@code 00df} is the lowercase form of sharp-S (\u00df), whose uppercase is \"SS\".\n-    assertEquals(\"pa\\u00dfword\".toUpperCase(), \"PASSWORD\");    // [*]\n+    assertEquals(\"PASSWORD\", \"pa\\u00dfword\".toUpperCase()); // [*]\n     assertFalse(\"pa\\u00dfword\".equalsIgnoreCase(\"PASSWORD\"));  // [*]\n     assertFalse(Ascii.equalsIgnoreCase(\"pa\\u00dfword\", \"PASSWORD\"));\n   }"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(multiset.add(KEY, 3), 12);",
        "fixed_code": "assertEquals(12, multiset.add(KEY, 3));",
        "patch": "@@ -188,7 +188,7 @@ public void testAdd_withFailures() {\n     when(backingMap.get(KEY)).thenReturn(existing);\n     // we shouldn't see any more map operations; CHM will now just update the AtomicInteger\n \n-    assertEquals(multiset.add(KEY, 3), 12);\n+    assertEquals(12, multiset.add(KEY, 3));\n     assertEquals(15, existing.get());\n   }\n "
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(elements, 0);",
        "fixed_code": "assertEquals(0, elements);",
        "patch": "@@ -187,7 +187,7 @@ private void testNegativeMaxElements(BlockingQueue<Object> q) throws Interrupted\n \n     List<Object> buf = newArrayList();\n     int elements = Queues.drain(q, buf, -1, MAX_VALUE, NANOSECONDS);\n-    assertEquals(elements, 0);\n+    assertEquals(0, elements);\n     assertThat(buf).isEmpty();\n \n     // Free the producer thread, and give subsequent tests a clean slate."
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(addCalls.get(), 1);",
        "fixed_code": "assertEquals(1, addCalls.get());",
        "patch": "@@ -72,7 +72,7 @@ public int add(String element, int occurrences) {\n     ImmutableMultiset<String> adds =\n         new ImmutableMultiset.Builder<String>().addCopies(\"x\", 10).build();\n     multiset.addAll(adds);\n-    assertEquals(addCalls.get(), 1);\n+    assertEquals(1, addCalls.get());\n   }\n \n   public void testRemoveUnsupported() {"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(actualContents(), SerializableTester.reserialize(actualContents()));",
        "fixed_code": "assertEquals(SerializableTester.reserialize(actualContents()), actualContents());",
        "patch": "@@ -33,6 +33,6 @@\n public class CollectionSerializationEqualTester<E> extends AbstractCollectionTester<E> {\n   @CollectionFeature.Require(SERIALIZABLE)\n   public void testReserialize() {\n-    assertEquals(actualContents(), SerializableTester.reserialize(actualContents()));\n+    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());\n   }\n }"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(\"pa\\u00dfword\".toUpperCase(), \"PASSWORD\");    // [*]",
        "fixed_code": "assertEquals(\"PASSWORD\", \"pa\\u00dfword\".toUpperCase()); // [*]",
        "patch": "@@ -143,7 +143,7 @@ public void testEqualsIgnoreCaseUnicodeEquivalence() {\n     // regards edge cases.\n \n     // The Unicode point {@code 00df} is the lowercase form of sharp-S (\u00df), whose uppercase is \"SS\".\n-    assertEquals(\"pa\\u00dfword\".toUpperCase(), \"PASSWORD\");    // [*]\n+    assertEquals(\"PASSWORD\", \"pa\\u00dfword\".toUpperCase()); // [*]\n     assertFalse(\"pa\\u00dfword\".equalsIgnoreCase(\"PASSWORD\"));  // [*]\n     assertFalse(Ascii.equalsIgnoreCase(\"pa\\u00dfword\", \"PASSWORD\"));\n   }"
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(multiset.add(KEY, 3), 12);",
        "fixed_code": "assertEquals(12, multiset.add(KEY, 3));",
        "patch": "@@ -188,7 +188,7 @@ public void testAdd_withFailures() {\n     when(backingMap.get(KEY)).thenReturn(existing);\n     // we shouldn't see any more map operations; CHM will now just update the AtomicInteger\n \n-    assertEquals(multiset.add(KEY, 3), 12);\n+    assertEquals(12, multiset.add(KEY, 3));\n     assertEquals(15, existing.get());\n   }\n "
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(elements, 0);",
        "fixed_code": "assertEquals(0, elements);",
        "patch": "@@ -187,7 +187,7 @@ private void testNegativeMaxElements(BlockingQueue<Object> q) throws Interrupted\n \n     List<Object> buf = newArrayList();\n     int elements = Queues.drain(q, buf, -1, MAX_VALUE, NANOSECONDS);\n-    assertEquals(elements, 0);\n+    assertEquals(0, elements);\n     assertThat(buf).isEmpty();\n \n     // Free the producer thread, and give subsequent tests a clean slate."
    },
    {
        "commit_id": "26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "commit_message": "Fixes incorrectly-ordered arguments to calls to assertEquals\n([]\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods. See\n[]\n\n[]\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157061178",
        "commit_url": "https://github.com/google/guava/commit/26970483185d6d62bbed3f048a9e12e3b6c80c2a",
        "buggy_code": "assertEquals(addCalls.get(), 1);",
        "fixed_code": "assertEquals(1, addCalls.get());",
        "patch": "@@ -72,7 +72,7 @@ public int add(String element, int occurrences) {\n     ImmutableMultiset<String> adds =\n         new ImmutableMultiset.Builder<String>().addCopies(\"x\", 10).build();\n     multiset.addAll(adds);\n-    assertEquals(addCalls.get(), 1);\n+    assertEquals(1, addCalls.get());\n   }\n \n   public void testRemoveUnsupported() {"
    },
    {
        "commit_id": "51310fb7ce3749f38165664966cd883395b643a7",
        "commit_message": "Fix https://github.com/google/guava/issues/2804 issues with nested Iterators.concats on partially advanced iterators.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=155111980",
        "commit_url": "https://github.com/google/guava/commit/51310fb7ce3749f38165664966cd883395b643a7",
        "buggy_code": "private Iterator<? extends T> current = Iterators.emptyIterator();",
        "fixed_code": "Iterator<? extends T> current = Iterators.emptyIterator();",
        "patch": "@@ -32,7 +32,7 @@\n abstract class MultitransformedIterator<F, T> implements Iterator<T> {\n   final Iterator<? extends F> backingIterator;\n \n-  private Iterator<? extends T> current = Iterators.emptyIterator();\n+  Iterator<? extends T> current = Iterators.emptyIterator();\n   private Iterator<? extends T> removeFrom;\n \n   MultitransformedIterator(Iterator<? extends F> backingIterator) {"
    },
    {
        "commit_id": "51310fb7ce3749f38165664966cd883395b643a7",
        "commit_message": "Fix https://github.com/google/guava/issues/2804 issues with nested Iterators.concats on partially advanced iterators.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=155111980",
        "commit_url": "https://github.com/google/guava/commit/51310fb7ce3749f38165664966cd883395b643a7",
        "buggy_code": "private Iterator<? extends T> current = Iterators.emptyIterator();",
        "fixed_code": "Iterator<? extends T> current = Iterators.emptyIterator();",
        "patch": "@@ -32,7 +32,7 @@\n abstract class MultitransformedIterator<F, T> implements Iterator<T> {\n   final Iterator<? extends F> backingIterator;\n \n-  private Iterator<? extends T> current = Iterators.emptyIterator();\n+  Iterator<? extends T> current = Iterators.emptyIterator();\n   private Iterator<? extends T> removeFrom;\n \n   MultitransformedIterator(Iterator<? extends F> backingIterator) {"
    },
    {
        "commit_id": "b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "commit_message": "Fix ImmutableLongArray.hashCode()\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=154726612",
        "commit_url": "https://github.com/google/guava/commit/b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "buggy_code": "hash += array[i];",
        "fixed_code": "hash += Ints.hashCode(array[i]);",
        "patch": "@@ -505,7 +505,7 @@ public int hashCode() {\n     int hash = 1;\n     for (int i = start; i < end; i++) {\n       hash *= 31;\n-      hash += array[i];\n+      hash += Ints.hashCode(array[i]);\n     }\n     return hash;\n   }"
    },
    {
        "commit_id": "b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "commit_message": "Fix ImmutableLongArray.hashCode()\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=154726612",
        "commit_url": "https://github.com/google/guava/commit/b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "buggy_code": "hash += array[i];",
        "fixed_code": "hash += Longs.hashCode(array[i]);",
        "patch": "@@ -507,7 +507,7 @@ public int hashCode() {\n     int hash = 1;\n     for (int i = start; i < end; i++) {\n       hash *= 31;\n-      hash += array[i];\n+      hash += Longs.hashCode(array[i]);\n     }\n     return hash;\n   }"
    },
    {
        "commit_id": "b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "commit_message": "Fix ImmutableLongArray.hashCode()\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=154726612",
        "commit_url": "https://github.com/google/guava/commit/b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "buggy_code": "hash += array[i];",
        "fixed_code": "hash += Ints.hashCode(array[i]);",
        "patch": "@@ -557,7 +557,7 @@ public int hashCode() {\n     int hash = 1;\n     for (int i = start; i < end; i++) {\n       hash *= 31;\n-      hash += array[i];\n+      hash += Ints.hashCode(array[i]);\n     }\n     return hash;\n   }"
    },
    {
        "commit_id": "b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "commit_message": "Fix ImmutableLongArray.hashCode()\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=154726612",
        "commit_url": "https://github.com/google/guava/commit/b7cec214a7aa9efb7a989f9e509b4ae21dd328f4",
        "buggy_code": "hash += array[i];",
        "fixed_code": "hash += Longs.hashCode(array[i]);",
        "patch": "@@ -559,7 +559,7 @@ public int hashCode() {\n     int hash = 1;\n     for (int i = start; i < end; i++) {\n       hash *= 31;\n-      hash += array[i];\n+      hash += Longs.hashCode(array[i]);\n     }\n     return hash;\n   }"
    },
    {
        "commit_id": "61110e175fc90fa2e8d675c8de85dff4ed699b07",
        "commit_message": "Fix embarrassing forEachEntry bug in ImmutableSortedMultiset.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=151063670",
        "commit_url": "https://github.com/google/guava/commit/61110e175fc90fa2e8d675c8de85dff4ed699b07",
        "buggy_code": "for (int i = 0; i < size(); i++) {",
        "fixed_code": "for (int i = 0; i < length; i++) {",
        "patch": "@@ -69,7 +69,7 @@ Entry<E> getEntry(int index) {\n   @Override\n   public void forEachEntry(ObjIntConsumer<? super E> action) {\n     checkNotNull(action);\n-    for (int i = 0; i < size(); i++) {\n+    for (int i = 0; i < length; i++) {\n       action.accept(elementSet.asList().get(i), getCount(i));\n     }\n   }"
    },
    {
        "commit_id": "89a8e3f6757b809ee43e4f7d172ba3b5af9b4c36",
        "commit_message": "Fix cases where GWT sometimes couldn't infer which types are serialized.\nAnd finally revise our (internal-only) tests to catch these problems and the problem fixed by CL 147488537.\n\nAs far as I can tell, our old tests passed only because of a GWT bug.\nThe fixes are mostly to create dummy superclasses with dummy fields, as usual.\nThe exception is ImmutableSortedSet. For some reason, the fix there is to move the existing dummy fields to RegularImmutableSortedSet. My completely wild guess (without investigating at all) is that GWT ignores the ImmutableSortedSet fields because ImmutableSortedSet_CustomFieldSerializer doesn't have the expected methods. This guess makes no sense, especially because GWT appears to be fine with the *Comparator<E>* field on ImmutableSortedSet, just not the E field. Basically nothing makes any sense, but I'm just happy it works now.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=147607863",
        "commit_url": "https://github.com/google/guava/commit/89a8e3f6757b809ee43e4f7d172ba3b5af9b4c36",
        "buggy_code": "public final class HashMultimap<K, V> extends AbstractSetMultimap<K, V> {",
        "fixed_code": "public final class HashMultimap<K, V> extends HashMultimapGwtSerializationDependencies<K, V> {",
        "patch": "@@ -46,7 +46,7 @@\n  * @since 2.0\n  */\n @GwtCompatible(serializable = true, emulated = true)\n-public final class HashMultimap<K, V> extends AbstractSetMultimap<K, V> {\n+public final class HashMultimap<K, V> extends HashMultimapGwtSerializationDependencies<K, V> {\n   private static final int DEFAULT_VALUES_PER_KEY = 2;\n \n   @VisibleForTesting transient int expectedValuesPerKey = DEFAULT_VALUES_PER_KEY;"
    },
    {
        "commit_id": "86fb7001aecb8954dd15ee3c64e7172b4a6e512a",
        "commit_message": "Automated g4 rollback of changelist 138114495.\n\n*** Reason for rollback ***\n\nThese type inference errors seem to be fixed by using a newer JDK8 version.\n\n*** Original change description ***\n\nFix JDK8 compilation errors in non-test code.\n\n***\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=138189338",
        "commit_url": "https://github.com/google/guava/commit/86fb7001aecb8954dd15ee3c64e7172b4a6e512a",
        "buggy_code": "return result = emptyMap(Ordering.from(comparator()).<K>reverse());",
        "fixed_code": "return result = emptyMap(Ordering.from(comparator()).reverse());",
        "patch": "@@ -907,7 +907,7 @@ public ImmutableSortedMap<K, V> descendingMap() {\n     ImmutableSortedMap<K, V> result = descendingMap;\n     if (result == null) {\n       if (isEmpty()) {\n-        return result = emptyMap(Ordering.from(comparator()).<K>reverse());\n+        return result = emptyMap(Ordering.from(comparator()).reverse());\n       } else {\n         return result =\n             new ImmutableSortedMap<K, V>("
    },
    {
        "commit_id": "86fb7001aecb8954dd15ee3c64e7172b4a6e512a",
        "commit_message": "Automated g4 rollback of changelist 138114495.\n\n*** Reason for rollback ***\n\nThese type inference errors seem to be fixed by using a newer JDK8 version.\n\n*** Original change description ***\n\nFix JDK8 compilation errors in non-test code.\n\n***\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=138189338",
        "commit_url": "https://github.com/google/guava/commit/86fb7001aecb8954dd15ee3c64e7172b4a6e512a",
        "buggy_code": "? emptyMultiset(Ordering.from(comparator()).<E>reverse())",
        "fixed_code": "? emptyMultiset(Ordering.from(comparator()).reverse())",
        "patch": "@@ -343,7 +343,7 @@ public ImmutableSortedMultiset<E> descendingMultiset() {\n     if (result == null) {\n       return descendingMultiset =\n           this.isEmpty()\n-              ? emptyMultiset(Ordering.from(comparator()).<E>reverse())\n+              ? emptyMultiset(Ordering.from(comparator()).reverse())\n               : new DescendingImmutableSortedMultiset<E>(this);\n     }\n     return result;"
    },
    {
        "commit_id": "9a3b74501c70289a46fbc09f137990e21bb35423",
        "commit_message": "Fix JDK8 compilation errors in non-test code.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=138114495",
        "commit_url": "https://github.com/google/guava/commit/9a3b74501c70289a46fbc09f137990e21bb35423",
        "buggy_code": "return result = emptyMap(Ordering.from(comparator()).reverse());",
        "fixed_code": "return result = emptyMap(Ordering.from(comparator()).<K>reverse());",
        "patch": "@@ -907,7 +907,7 @@ public ImmutableSortedMap<K, V> descendingMap() {\n     ImmutableSortedMap<K, V> result = descendingMap;\n     if (result == null) {\n       if (isEmpty()) {\n-        return result = emptyMap(Ordering.from(comparator()).reverse());\n+        return result = emptyMap(Ordering.from(comparator()).<K>reverse());\n       } else {\n         return result =\n             new ImmutableSortedMap<K, V>("
    },
    {
        "commit_id": "9a3b74501c70289a46fbc09f137990e21bb35423",
        "commit_message": "Fix JDK8 compilation errors in non-test code.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=138114495",
        "commit_url": "https://github.com/google/guava/commit/9a3b74501c70289a46fbc09f137990e21bb35423",
        "buggy_code": "? emptyMultiset(Ordering.from(comparator()).reverse())",
        "fixed_code": "? emptyMultiset(Ordering.from(comparator()).<E>reverse())",
        "patch": "@@ -343,7 +343,7 @@ public ImmutableSortedMultiset<E> descendingMultiset() {\n     if (result == null) {\n       return descendingMultiset =\n           this.isEmpty()\n-              ? emptyMultiset(Ordering.from(comparator()).reverse())\n+              ? emptyMultiset(Ordering.from(comparator()).<E>reverse())\n               : new DescendingImmutableSortedMultiset<E>(this);\n     }\n     return result;"
    },
    {
        "commit_id": "55524c66de8db4c2e44727b69421c7d0e4f30be0",
        "commit_message": "Fix #1190\n\nBefore this fix, splitting a single character input string with a\nSplitter.onPattern instance created with a zero-width regex pattern,\nwould have caused the input string to be dropped from the output,\nresulting in an empty iterable being returned rather than a single\nelement one.\n\nThis fix ensures that the input passes through untouched.\n\nFor example, whereas before in this code snippet, 'words' would have\nbeen initialized as an empty iterable...\n\n   String string = \"f\";\n   Iterable<String> words =\n       Splitter.on(Pattern.compile(\"\\\\b\")).split(string);\n   // words is empty!\n\nFixes #2615, #2086\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=137723825",
        "commit_url": "https://github.com/google/guava/commit/55524c66de8db4c2e44727b69421c7d0e4f30be0",
        "buggy_code": "if (offset >= toSplit.length()) {",
        "fixed_code": "if (offset > toSplit.length()) {",
        "patch": "@@ -557,7 +557,7 @@ protected String computeNext() {\n            * of the next returned substring -- so nextStart stays the same.\n            */\n           offset++;\n-          if (offset >= toSplit.length()) {\n+          if (offset > toSplit.length()) {\n             offset = -1;\n           }\n           continue;"
    },
    {
        "commit_id": "6c63cf3c8a9d94821e2b24a96fb4c3564377051f",
        "commit_message": "Fix bug in Helpers.isEmpty.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=131104085",
        "commit_url": "https://github.com/google/guava/commit/6c63cf3c8a9d94821e2b24a96fb4c3564377051f",
        "buggy_code": ": iterable.iterator().hasNext();",
        "fixed_code": ": !iterable.iterator().hasNext();",
        "patch": "@@ -77,7 +77,7 @@ public static <K, V> Entry<K, V> mapEntry(K key, V value) {\n   private static boolean isEmpty(Iterable<?> iterable) {\n     return iterable instanceof Collection\n         ? ((Collection<?>) iterable).isEmpty()\n-        : iterable.iterator().hasNext();\n+        : !iterable.iterator().hasNext();\n   }\n \n   public static void assertEmpty(Iterable<?> iterable) {"
    },
    {
        "commit_id": "e9482f34d0960a1b789301905e6ce59123d8a0ff",
        "commit_message": "Disabling SelfEquals check for test\n\nWe intend to make this a compilation error in []'s Java compiler, so it is necessary to fix existing occurrences first to avoid breaking builds.\n\nSee [] for more details.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=131053298",
        "commit_url": "https://github.com/google/guava/commit/e9482f34d0960a1b789301905e6ce59123d8a0ff",
        "buggy_code": "@SuppressWarnings(\"SelfComparison\")",
        "fixed_code": "@SuppressWarnings({\"SelfComparison\", \"SelfEquals\"})",
        "patch": "@@ -312,7 +312,7 @@ public static <T> void testComparator(\n     }\n   }\n \n-  @SuppressWarnings(\"SelfComparison\")\n+  @SuppressWarnings({\"SelfComparison\", \"SelfEquals\"})\n   public static <T extends Comparable<? super T>> void testCompareToAndEquals(\n       List<T> valuesInExpectedOrder) {\n     // This does an O(n^2) test of all pairs of values in both orders"
    },
    {
        "commit_id": "c3f9fef2e589d1555873349cce8c380f2c131653",
        "commit_message": "Update error message for calling source/target on endpoints of an undirected edge.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=130530287",
        "commit_url": "https://github.com/google/guava/commit/c3f9fef2e589d1555873349cce8c380f2c131653",
        "buggy_code": "+ \"otherNode() to get a single node or using the endpoints' iterator to get both nodes.\";",
        "fixed_code": "+ \"adjacentNode(node) if you already have a node, or nodeA()/nodeB() if you don't.\";",
        "patch": "@@ -52,7 +52,7 @@ private GraphConstants() {}\n           + \"that allows self-loops, call allowsSelfLoops(true) on the Builder.\";\n   static final String NOT_AVAILABLE_ON_UNDIRECTED =\n       \"Cannot call source()/target() on the endpoints of an undirected edge. Consider calling \"\n-          + \"otherNode() to get a single node or using the endpoints' iterator to get both nodes.\";\n+          + \"adjacentNode(node) if you already have a node, or nodeA()/nodeB() if you don't.\";\n   static final String EDGE_ALREADY_EXISTS = \"Edge %s already exists in the graph.\";\n \n   static final String GRAPH_STRING_FORMAT = \"%s, nodes: %s, edges: %s\";"
    },
    {
        "commit_id": "7dbc4dff487c38fe0531f0fd4cd989f0b0329c38",
        "commit_message": "Have more helpful error messages.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=125997504",
        "commit_url": "https://github.com/google/guava/commit/7dbc4dff487c38fe0531f0fd4cd989f0b0329c38",
        "buggy_code": "static final String ERROR_REUSE_EDGE = \"it can't be reused to connect\";",
        "fixed_code": "static final String ERROR_REUSE_EDGE = \"it cannot be reused to connect\";",
        "patch": "@@ -82,7 +82,7 @@ public abstract class AbstractNetworkTest {\n   static final String NODE_STRING = \"Node\";\n   static final String EDGE_STRING = \"Edge\";\n   static final String ERROR_PARALLEL_EDGE = \"connected by a different edge\";\n-  static final String ERROR_REUSE_EDGE = \"it can't be reused to connect\";\n+  static final String ERROR_REUSE_EDGE = \"it cannot be reused to connect\";\n   static final String ERROR_MODIFIABLE_COLLECTION =\n       \"Collection returned is unexpectedly modifiable\";\n   static final String ERROR_SELF_LOOP = \"self-loops are not allowed\";"
    },
    {
        "commit_id": "6c86373a9f7407af9a8a921435ee2e0e1ade922f",
        "commit_message": "Fix a minor oversight in using a constant in LongMath for its intended purpose.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=121145870",
        "commit_url": "https://github.com/google/guava/commit/6c86373a9f7407af9a8a921435ee2e0e1ade922f",
        "buggy_code": "if (x > (1L << (Long.SIZE - 2))) {",
        "fixed_code": "if (x > MAX_SIGNED_POWER_OF_TWO) {",
        "patch": "@@ -66,7 +66,7 @@ public final class LongMath {\n   @Beta\n   public static long ceilingPowerOfTwo(long x) {\n     checkPositive(\"x\", x);\n-    if (x > (1L << (Long.SIZE - 2))) {\n+    if (x > MAX_SIGNED_POWER_OF_TWO) {\n       throw new ArithmeticException(\"ceilingPowerOfTwo(\" + x + \") is not representable as a long\");\n     }\n     return 1L << -Long.numberOfLeadingZeros(x - 1);"
    },
    {
        "commit_id": "08a6bb421f0931cc4cee499a631c651e4633787e",
        "commit_message": "Fix modifier order\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=114875899",
        "commit_url": "https://github.com/google/guava/commit/08a6bb421f0931cc4cee499a631c651e4633787e",
        "buggy_code": "private transient final EnumMap<K, V> delegate;",
        "fixed_code": "private final transient EnumMap<K, V> delegate;",
        "patch": "@@ -46,7 +46,7 @@ static <K extends Enum<K>, V> ImmutableMap<K, V> asImmutable(EnumMap<K, V> map)\n     }\n   }\n \n-  private transient final EnumMap<K, V> delegate;\n+  private final transient EnumMap<K, V> delegate;\n \n   private ImmutableEnumMap(EnumMap<K, V> delegate) {\n     this.delegate = delegate;"
    },
    {
        "commit_id": "08a6bb421f0931cc4cee499a631c651e4633787e",
        "commit_message": "Fix modifier order\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=114875899",
        "commit_url": "https://github.com/google/guava/commit/08a6bb421f0931cc4cee499a631c651e4633787e",
        "buggy_code": "private transient final ImmutableList<Range<C>> ranges;",
        "fixed_code": "private final transient ImmutableList<Range<C>> ranges;",
        "patch": "@@ -112,7 +112,7 @@ private ImmutableRangeSet(ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> c\n     this.complement = complement;\n   }\n \n-  private transient final ImmutableList<Range<C>> ranges;\n+  private final transient ImmutableList<Range<C>> ranges;\n \n   @Override\n   public boolean intersects(Range<C> otherRange) {"
    },
    {
        "commit_id": "08a6bb421f0931cc4cee499a631c651e4633787e",
        "commit_message": "Fix modifier order\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=114875899",
        "commit_url": "https://github.com/google/guava/commit/08a6bb421f0931cc4cee499a631c651e4633787e",
        "buggy_code": "private transient final ImmutableList<E> elements;",
        "fixed_code": "private final transient ImmutableList<E> elements;",
        "patch": "@@ -48,7 +48,7 @@ final class RegularImmutableSortedSet<E> extends ImmutableSortedSet<E> {\n   static final RegularImmutableSortedSet<Comparable> NATURAL_EMPTY_SET =\n       new RegularImmutableSortedSet<Comparable>(ImmutableList.<Comparable>of(), Ordering.natural());\n \n-  private transient final ImmutableList<E> elements;\n+  private final transient ImmutableList<E> elements;\n \n   RegularImmutableSortedSet(ImmutableList<E> elements, Comparator<? super E> comparator) {\n     super(comparator);"
    },
    {
        "commit_id": "6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "commit_message": "Fix the tests in primitives for tryParse not to generate their own NPEs.\n\nhttps://github.com/google/guava/issues/2238\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=112600511",
        "commit_url": "https://github.com/google/guava/commit/6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "buggy_code": "double unused = Doubles.tryParse(null);",
        "fixed_code": "Double unused = Doubles.tryParse(null);",
        "patch": "@@ -560,7 +560,7 @@ public void testStringConverter_nullPointerTester() throws Exception {\n   public void testTryParse_withNullNoGwt() {\n     assertNull(Doubles.tryParse(\"null\"));\n     try {\n-      double unused = Doubles.tryParse(null);\n+      Double unused = Doubles.tryParse(null);\n       fail(\"Expected NPE\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "commit_message": "Fix the tests in primitives for tryParse not to generate their own NPEs.\n\nhttps://github.com/google/guava/issues/2238\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=112600511",
        "commit_url": "https://github.com/google/guava/commit/6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "buggy_code": "float unused = Floats.tryParse(null);",
        "fixed_code": "Float unused = Floats.tryParse(null);",
        "patch": "@@ -537,7 +537,7 @@ public void testStringConverter_nullPointerTester() throws Exception {\n   public void testTryParse_withNullNoGwt() {\n     assertNull(Floats.tryParse(\"null\"));\n     try {\n-      float unused = Floats.tryParse(null);\n+      Float unused = Floats.tryParse(null);\n       fail(\"Expected NPE\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "commit_message": "Fix the tests in primitives for tryParse not to generate their own NPEs.\n\nhttps://github.com/google/guava/issues/2238\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=112600511",
        "commit_url": "https://github.com/google/guava/commit/6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "buggy_code": "int unused = Ints.tryParse(null);",
        "fixed_code": "Integer unused = Ints.tryParse(null);",
        "patch": "@@ -548,7 +548,7 @@ public void testTryParse_radixTooSmall() {\n   public void testTryParse_withNullGwt() {\n     assertNull(Ints.tryParse(\"null\"));\n     try {\n-      int unused = Ints.tryParse(null);\n+      Integer unused = Ints.tryParse(null);\n       fail(\"Expected NPE\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "commit_message": "Fix the tests in primitives for tryParse not to generate their own NPEs.\n\nhttps://github.com/google/guava/issues/2238\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=112600511",
        "commit_url": "https://github.com/google/guava/commit/6fef0b0dba5dfa40fe30cdd6fbcc9d3908801e23",
        "buggy_code": "long unused = Longs.tryParse(null);",
        "fixed_code": "Long unused = Longs.tryParse(null);",
        "patch": "@@ -527,7 +527,7 @@ public void testTryParse_radixTooSmall() {\n   public void testTryParse_withNullGwt() {\n     assertNull(Longs.tryParse(\"null\"));\n     try {\n-      long unused = Longs.tryParse(null);\n+      Long unused = Longs.tryParse(null);\n       fail(\"Expected NPE\");\n     } catch (NullPointerException expected) {\n     }"
    },
    {
        "commit_id": "4dcbc834151c35573ed64e8b3b377afe68963620",
        "commit_message": "Write compare method in a way that won't look buggy to Error Prone.\n\nThis change modifies Java compare methods that are using int casts from longs in\na usually broken way. Int casts in Java will truncate a long value and\nconsequently may alter the sign of the value being cast. Compare methods may be\nimplemented using a subtract, iff values are known not to be near overflowing\nlimits. When the values are longs you can get:\n\nint compare(MyLongHolder other) {\n  return (int)(other.x - x);\n}\n\nAs the cast won\u2019t preserve the sign of the subtract it is buggy and can lead to\nbroken sort orders.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=110206257",
        "commit_url": "https://github.com/google/guava/commit/4dcbc834151c35573ed64e8b3b377afe68963620",
        "buggy_code": "return (int) (((lw >>> n) & UNSIGNED_MASK) - ((rw >>> n) & UNSIGNED_MASK));",
        "fixed_code": "return ((int) ((lw >>> n) & UNSIGNED_MASK)) - ((int) ((rw >>> n) & UNSIGNED_MASK));",
        "patch": "@@ -406,7 +406,7 @@ public int compare(byte[] left, byte[] right) {\n              * shift to get that least significant nonzero byte.\n              */\n             int n = Long.numberOfTrailingZeros(lw ^ rw) & ~0x7;\n-            return (int) (((lw >>> n) & UNSIGNED_MASK) - ((rw >>> n) & UNSIGNED_MASK));\n+            return ((int) ((lw >>> n) & UNSIGNED_MASK)) - ((int) ((rw >>> n) & UNSIGNED_MASK));\n           }\n         }\n "
    },
    {
        "commit_id": "36ab578eb78c92e9ca0a302800f437c7cf08efef",
        "commit_message": "Document that bug affecting LongMathTest.testDivNonZeroExact() has been fixed in recent versions of Android.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=109800032",
        "commit_url": "https://github.com/google/guava/commit/36ab578eb78c92e9ca0a302800f437c7cf08efef",
        "buggy_code": "@AndroidIncompatible // TODO(cpovirk): Problem with LongMath.divide on Android?",
        "fixed_code": "@AndroidIncompatible // Bug in older versions of Android we test against, since fixed.",
        "patch": "@@ -341,7 +341,7 @@ public void testDivNonZero() {\n   }\n \n   @GwtIncompatible(\"TODO\")\n-  @AndroidIncompatible // TODO(cpovirk): Problem with LongMath.divide on Android?\n+  @AndroidIncompatible // Bug in older versions of Android we test against, since fixed.\n   public void testDivNonZeroExact() {\n     for (long p : NONZERO_LONG_CANDIDATES) {\n       for (long q : NONZERO_LONG_CANDIDATES) {"
    },
    {
        "commit_id": "4362a4529306ea43e177fae2d0457e794dd77cd6",
        "commit_message": "Fix calls to contains(Object) and get(Object) that pass a value of apparently the wrong type.\nTighten up some generics in other cases to make the type, which was correct after all, look more correct.\n\nBUGS:\n\nAbstractBiMapTester:\n- Fix inv.entrySet().contains(...) check, which was using the forward entry instead of the reverse.\n- Fix getMap().get(v) call to be an inv.get(v) call.\n- Use |reversed| instead of |entry| consistently for clarity.\n\nTypeToken:\n- Call map.get(K) instead of map.get(TypeCollector).\n(Presumably this was just an optimization and not necessary for correctness?)\n\nSIMPLIFICATIONS:\n\nTypeResolver:\n- forLookup always returns a (nullable) TypeVariableKey. Declare that return type instead of plain Object.\n(benyu@: I feel like we may have talked about this, with your expressing a preference for the Object type. But I can find no record of the discussion, so I could be making that up. If you do prefer Object, I won't push for the change.)\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=108994208",
        "commit_url": "https://github.com/google/guava/commit/4362a4529306ea43e177fae2d0457e794dd77cd6",
        "buggy_code": "static Object forLookup(Type t) {",
        "fixed_code": "static TypeVariableKey forLookup(Type t) {",
        "patch": "@@ -485,7 +485,7 @@ static final class TypeVariableKey {\n     }\n \n     /** Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable. */\n-    static Object forLookup(Type t) {\n+    static TypeVariableKey forLookup(Type t) {\n       if (t instanceof TypeVariable) {\n         return new TypeVariableKey((TypeVariable<?>) t);\n       } else {"
    },
    {
        "commit_id": "4362a4529306ea43e177fae2d0457e794dd77cd6",
        "commit_message": "Fix calls to contains(Object) and get(Object) that pass a value of apparently the wrong type.\nTighten up some generics in other cases to make the type, which was correct after all, look more correct.\n\nBUGS:\n\nAbstractBiMapTester:\n- Fix inv.entrySet().contains(...) check, which was using the forward entry instead of the reverse.\n- Fix getMap().get(v) call to be an inv.get(v) call.\n- Use |reversed| instead of |entry| consistently for clarity.\n\nTypeToken:\n- Call map.get(K) instead of map.get(TypeCollector).\n(Presumably this was just an optimization and not necessary for correctness?)\n\nSIMPLIFICATIONS:\n\nTypeResolver:\n- forLookup always returns a (nullable) TypeVariableKey. Declare that return type instead of plain Object.\n(benyu@: I feel like we may have talked about this, with your expressing a preference for the Object type. But I can find no record of the discussion, so I could be making that up. If you do prefer Object, I won't push for the change.)\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=108994208",
        "commit_url": "https://github.com/google/guava/commit/4362a4529306ea43e177fae2d0457e794dd77cd6",
        "buggy_code": "Integer existing = map.get(this);",
        "fixed_code": "Integer existing = map.get(type);",
        "patch": "@@ -1167,7 +1167,7 @@ ImmutableList<K> collectTypes(Iterable<? extends K> types) {\n \n     /** Collects all types to map, and returns the total depth from T up to Object. */\n     private int collectTypes(K type, Map<? super K, Integer> map) {\n-      Integer existing = map.get(this);\n+      Integer existing = map.get(type);\n       if (existing != null) {\n         // short circuit: if set contains type it already contains its supertypes\n         return existing;"
    },
    {
        "commit_id": "97d14313b8cd6725232f2458dce376571d81bdc5",
        "commit_message": "Start running the tests for guava-testlib under Android.\nThis revealed the usual minor problems and also a new test bug in ForwardingWrapperTesterTest: The sample buggy forwarding class was buggy in *two* ways instead of the intended one. Not only did it forward to the wrong method in one case, but it also reversed the order of parameters in all cases. Android happens to test its methods in a different order than the JVM, so it detects the reversed parameters first. I've fixed this by fixing the parameter order.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=107246813",
        "commit_url": "https://github.com/google/guava/commit/97d14313b8cd6725232f2458dce376571d81bdc5",
        "buggy_code": "} catch (AssertionError expected) {",
        "fixed_code": "} catch (AssertionFailedError expected) {",
        "patch": "@@ -961,7 +961,7 @@ public void checkArray(EmptyEnum object, String s) {\n     void check() {\n       try {\n         runTester();\n-      } catch (AssertionError expected) {\n+      } catch (AssertionFailedError expected) {\n         return;\n       }\n       fail(\"Should have failed because enum has no constant\");"
    },
    {
        "commit_id": "b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "commit_message": "Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types.\nThis will enable us to make this pattern an error in [], preventing\nfuture occurrences of this bug.\n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug.  Fixing it requires making\na behavioral change, and we need your team to assume any risks associated\nwith that. Please approve this CL, so we can enable the new compiler error\nand prevent future occurrences of this bug.\n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect, e.g. Collection#contains. Consider a\nCollection<String>.  If someone invokes contains() on that collection and\npasses in an argument of type Integer, it can never return true because the\nCollection cannot contain any Integers.\n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method, such as\nObject or Collection<?>.  **This does not fix the bug.**  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler.\nFixing the bug mechanically is not feasible because the fixes are too complex,\nbut we want to prevent more instances of this bug from entering the codebase.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=106729548",
        "commit_url": "https://github.com/google/guava/commit/b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "buggy_code": "forward.remove(Object.class);",
        "fixed_code": "forward.remove((Object) Object.class);",
        "patch": "@@ -203,7 +203,7 @@ public void testRemove() {\n   }\n \n   public void testRemove_Object() {\n-    forward.remove(Object.class);\n+    forward.remove((Object) Object.class);\n     assertEquals(\"[remove(Object)]\", getCalls());\n   }\n "
    },
    {
        "commit_id": "b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "commit_message": "Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types.\nThis will enable us to make this pattern an error in [], preventing\nfuture occurrences of this bug.\n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug.  Fixing it requires making\na behavioral change, and we need your team to assume any risks associated\nwith that. Please approve this CL, so we can enable the new compiler error\nand prevent future occurrences of this bug.\n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect, e.g. Collection#contains. Consider a\nCollection<String>.  If someone invokes contains() on that collection and\npasses in an argument of type Integer, it can never return true because the\nCollection cannot contain any Integers.\n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method, such as\nObject or Collection<?>.  **This does not fix the bug.**  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler.\nFixing the bug mechanically is not feasible because the fixes are too complex,\nbut we want to prevent more instances of this bug from entering the codebase.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=106729548",
        "commit_url": "https://github.com/google/guava/commit/b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "buggy_code": "unmod.remove(\"four\");",
        "fixed_code": "unmod.remove((Object) \"four\");",
        "patch": "@@ -1969,7 +1969,7 @@ void ensureNotDirectlyModifiable(NavigableMap<Integer, String> unmod) {\n     } catch (UnsupportedOperationException expected) {\n     }\n     try {\n-      unmod.remove(\"four\");\n+      unmod.remove((Object) \"four\");\n       fail(\"UnsupportedOperationException expected\");\n     } catch (UnsupportedOperationException expected) {\n     }"
    },
    {
        "commit_id": "b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "commit_message": "Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types.\nThis will enable us to make this pattern an error in [], preventing\nfuture occurrences of this bug.\n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug.  Fixing it requires making\na behavioral change, and we need your team to assume any risks associated\nwith that. Please approve this CL, so we can enable the new compiler error\nand prevent future occurrences of this bug.\n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect, e.g. Collection#contains. Consider a\nCollection<String>.  If someone invokes contains() on that collection and\npasses in an argument of type Integer, it can never return true because the\nCollection cannot contain any Integers.\n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method, such as\nObject or Collection<?>.  **This does not fix the bug.**  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler.\nFixing the bug mechanically is not feasible because the fixes are too complex,\nbut we want to prevent more instances of this bug from entering the codebase.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=106729548",
        "commit_url": "https://github.com/google/guava/commit/b79fa921fe418f7f105e8bb9d96b6e9ae23598c9",
        "buggy_code": "assertFalse(powerSet.contains(\"notASet\"));",
        "fixed_code": "assertFalse(powerSet.contains((Object) \"notASet\"));",
        "patch": "@@ -803,7 +803,7 @@ public void testPowerSetContents() {\n     assertFalse(powerSet.contains(ImmutableSet.of(1, 2, 4)));\n     assertFalse(powerSet.contains(singleton(null)));\n     assertFalse(powerSet.contains(null));\n-    assertFalse(powerSet.contains(\"notASet\"));\n+    assertFalse(powerSet.contains((Object) \"notASet\"));\n   }\n \n   public void testPowerSetIteration_manual() {"
    },
    {
        "commit_id": "44a2592b04490ad26d2bc874f9dbd4c1146cc5de",
        "commit_message": "Fix RegularContiguousSet.intersection to handle singleton results.\n\nPull request from perceptron8 <perceptron8@gmail.com>\nhttps://github.com/google/guava/pull/2197\n\nFixes https://github.com/google/guava/issues/2196\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=106153276",
        "commit_url": "https://github.com/google/guava/commit/44a2592b04490ad26d2bc874f9dbd4c1146cc5de",
        "buggy_code": "return (lowerEndpoint.compareTo(upperEndpoint) < 0)",
        "fixed_code": "return (lowerEndpoint.compareTo(upperEndpoint) <= 0)",
        "patch": "@@ -157,7 +157,7 @@ public ContiguousSet<C> intersection(ContiguousSet<C> other) {\n     } else {\n       C lowerEndpoint = Ordering.natural().max(this.first(), other.first());\n       C upperEndpoint = Ordering.natural().min(this.last(), other.last());\n-      return (lowerEndpoint.compareTo(upperEndpoint) < 0)\n+      return (lowerEndpoint.compareTo(upperEndpoint) <= 0)\n           ? ContiguousSet.create(Range.closed(lowerEndpoint, upperEndpoint), domain)\n           : new EmptyContiguousSet<C>(domain);\n     }"
    },
    {
        "commit_id": "49d8026ac5cc8d1d0acd4bd79f0a22f5b8fcb8cf",
        "commit_message": "slight error message enhancement requested in Guava bug #2158\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=103386220",
        "commit_url": "https://github.com/google/guava/commit/49d8026ac5cc8d1d0acd4bd79f0a22f5b8fcb8cf",
        "buggy_code": "throw new IllegalArgumentException(\"No type mapping from \" + fromClass);",
        "fixed_code": "throw new IllegalArgumentException(\"No type mapping from \" + fromClass + \" to \" + to);",
        "patch": "@@ -150,7 +150,7 @@ private static void populateTypeMappings(\n         // Can't map from a raw class to anything other than itself.\n         // You can't say \"assuming String is Integer\".\n         // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n-        throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n+        throw new IllegalArgumentException(\"No type mapping from \" + fromClass + \" to \" + to);\n       }\n     }.visit(from);\n   }"
    },
    {
        "commit_id": "1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "commit_message": "Convert much of Guava to Truth by using Refaster.\n\nThe motivation was my wish for a better ThrowablesTest error message in https://github.com/google/guava/issues/2130 (though I'm pretty confident that the problem there is \\n vs. \\r\\n).\nI made a lot of changes, but I left a lot undone. In particular, I avoided most of the collection assertions, since we often want to test specific collection methods. e.g., we don't necessarily want get() to be rewritten to containsKey().\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=101020845",
        "commit_url": "https://github.com/google/guava/commit/1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "buggy_code": "assertFalse(constrained instanceof RandomAccess);",
        "fixed_code": "assertThat(constrained).isNotInstanceOf(RandomAccess.class);",
        "patch": "@@ -203,7 +203,7 @@ public void testConstrainedListRandomAccessFalse() {\n         list, TEST_CONSTRAINT);\n     list.add(TEST_ELEMENT);\n     constrained.add(\"qux\");\n-    assertFalse(constrained instanceof RandomAccess);\n+    assertThat(constrained).isNotInstanceOf(RandomAccess.class);\n   }\n \n   public void testConstrainedListIllegal() {"
    },
    {
        "commit_id": "1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "commit_message": "Convert much of Guava to Truth by using Refaster.\n\nThe motivation was my wish for a better ThrowablesTest error message in https://github.com/google/guava/issues/2130 (though I'm pretty confident that the problem there is \\n vs. \\r\\n).\nI made a lot of changes, but I left a lot undone. In particular, I avoided most of the collection assertions, since we often want to test specific collection methods. e.g., we don't necessarily want get() to be rewritten to containsKey().\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=101020845",
        "commit_url": "https://github.com/google/guava/commit/1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "buggy_code": "assertEquals(0, temp.listFiles().length);",
        "fixed_code": "assertThat(temp.listFiles()).isEmpty();",
        "patch": "@@ -417,7 +417,7 @@ public void testCreateTempDir() {\n     File temp = Files.createTempDir();\n     assertTrue(temp.exists());\n     assertTrue(temp.isDirectory());\n-    assertEquals(0, temp.listFiles().length);\n+    assertThat(temp.listFiles()).isEmpty();\n     assertTrue(temp.delete());\n   }\n "
    },
    {
        "commit_id": "1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "commit_message": "Convert much of Guava to Truth by using Refaster.\n\nThe motivation was my wish for a better ThrowablesTest error message in https://github.com/google/guava/issues/2130 (though I'm pretty confident that the problem there is \\n vs. \\r\\n).\nI made a lot of changes, but I left a lot undone. In particular, I avoided most of the collection assertions, since we often want to test specific collection methods. e.g., we don't necessarily want get() to be rewritten to containsKey().\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=101020845",
        "commit_url": "https://github.com/google/guava/commit/1f2b8775c6b29a89261cef3ddf33523b043c9056",
        "buggy_code": "assertTrue(thread.getName().matches(\"^pool-\\\\d+-thread-\" + threadId + \"$\"));",
        "fixed_code": "assertThat(thread.getName()).matches(\"^pool-\\\\d+-thread-\" + threadId + \"$\");",
        "patch": "@@ -91,7 +91,7 @@ public void testThreadFactoryBuilder_defaults() throws InterruptedException {\n   }\n \n   private static void checkThreadPoolName(Thread thread, int threadId) {\n-    assertTrue(thread.getName().matches(\"^pool-\\\\d+-thread-\" + threadId + \"$\"));\n+    assertThat(thread.getName()).matches(\"^pool-\\\\d+-thread-\" + threadId + \"$\");\n   }\n \n   public void testNameFormatWithPercentS_custom() {"
    },
    {
        "commit_id": "77dbca52620d360e15c0e4ef4ac71d6e0146298a",
        "commit_message": "Remove unneeded \"emulated=true\" to fix open-source GWT tests.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=100126746",
        "commit_url": "https://github.com/google/guava/commit/77dbca52620d360e15c0e4ef4ac71d6e0146298a",
        "buggy_code": "@GwtCompatible(emulated = true)",
        "fixed_code": "@GwtCompatible",
        "patch": "@@ -42,7 +42,7 @@\n  * @since 15.0\n  */\n @Beta\n-@GwtCompatible(emulated = true)\n+@GwtCompatible\n public final class EvictingQueue<E> extends ForwardingQueue<E> implements Serializable {\n \n   private final Queue<E> delegate;"
    },
    {
        "commit_id": "648c0fe661f328a2cb1785c85e70d9e4fbdf01ba",
        "commit_message": "Noninvasive patch for negative results from size().  See https://github.com/google/guava/issues/2108 for more details.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=99503151",
        "commit_url": "https://github.com/google/guava/commit/648c0fe661f328a2cb1785c85e70d9e4fbdf01ba",
        "buggy_code": "sum += segments[i].count;",
        "fixed_code": "sum += Math.max(0, segments[i].count); // see https://github.com/google/guava/issues/2108",
        "patch": "@@ -3914,7 +3914,7 @@ long longSize() {\n     Segment<K, V>[] segments = this.segments;\n     long sum = 0;\n     for (int i = 0; i < segments.length; ++i) {\n-      sum += segments[i].count;\n+      sum += Math.max(0, segments[i].count); // see https://github.com/google/guava/issues/2108\n     }\n     return sum;\n   }"
    },
    {
        "commit_id": "20a42756c477b03c0123870b763148f4a18bdc8e",
        "commit_message": "Fix LongMath.checkedPow to correctly error out on large negative inputs, and fix LongMathTest to test a full range of long inputs.  See https://github.com/google/guava/issues/2036 .\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=92571001",
        "commit_url": "https://github.com/google/guava/commit/20a42756c477b03c0123870b763148f4a18bdc8e",
        "buggy_code": "checkNoOverflow(b <= FLOOR_SQRT_MAX_LONG);",
        "fixed_code": "checkNoOverflow(-FLOOR_SQRT_MAX_LONG <= b && b <= FLOOR_SQRT_MAX_LONG);",
        "patch": "@@ -594,7 +594,7 @@ public static long checkedPow(long b, int k) {\n           }\n           k >>= 1;\n           if (k > 0) {\n-            checkNoOverflow(b <= FLOOR_SQRT_MAX_LONG);\n+            checkNoOverflow(-FLOOR_SQRT_MAX_LONG <= b && b <= FLOOR_SQRT_MAX_LONG);\n             b *= b;\n           }\n       }"
    },
    {
        "commit_id": "4a0e33df4e09b8e0a21c5a08e6ec83239c3db803",
        "commit_message": "Re-enable compilation of benchmarks in Guava now that caliper 1.0-beta-2 is out.\n\nFix some things this turned up:\n\n- Remove a couple benchmarks for APIs that aren't public in Guava.\n- Remove LoadingCache benchmarks that compare a LoadingCache to MapMaker.makeComputingMap, which is package-private now.\n- Fix a usage of diamond operator that snuck in.\n- Remove CombinedFuture from Futures, since the methods that use it are internal-only.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=88142834",
        "commit_url": "https://github.com/google/guava/commit/4a0e33df4e09b8e0a21c5a08e6ec83239c3db803",
        "buggy_code": "private final Set<Thread> blockedThreads = new HashSet<>();",
        "fixed_code": "private final Set<Thread> blockedThreads = new HashSet<Thread>();",
        "patch": "@@ -41,7 +41,7 @@ enum State { NOT_DONE, FINISHED, CANCELLED, FAILED}\n   @Param({\"0\", \"1\", \"5\", \"10\"}) int numListeners;\n   @Param({\"0\", \"1\", \"5\", \"10\"}) int numThreads;\n \n-  private final Set<Thread> blockedThreads = new HashSet<>();\n+  private final Set<Thread> blockedThreads = new HashSet<Thread>();\n \n   @BeforeExperiment void setUp() throws Exception {\n     if (state != State.NOT_DONE && (numListeners != 0 || numThreads != 0)) {"
    },
    {
        "commit_id": "d6ddbb7981b9e5b5c07231f8895bcda133019c63",
        "commit_message": "fix potential npe in ChainingListenableFuture.cancel\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=80832292",
        "commit_url": "https://github.com/google/guava/commit/d6ddbb7981b9e5b5c07231f8895bcda133019c63",
        "buggy_code": "inputFuture.cancel(mayInterruptIfRunning);",
        "fixed_code": "localInputFuture.cancel(mayInterruptIfRunning);",
        "patch": "@@ -851,7 +851,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {\n       if (super.cancel(mayInterruptIfRunning)) {\n         ListenableFuture<? extends I> localInputFuture = inputFuture;\n         if (localInputFuture != null) {\n-          inputFuture.cancel(mayInterruptIfRunning);\n+          localInputFuture.cancel(mayInterruptIfRunning);\n         }\n         return true;\n       }"
    },
    {
        "commit_id": "e3ee2cb617d0381c2464dd75a28460d832e92a2a",
        "commit_message": "Fix @GuardedBy annotations with invalid lock expressions.\n\n- fix typos\n- qualified 'this' accesses can only be used for enclosing classes: the\ndeclaring class is accessed as 'this', enclosing classes are accessed as\n'OuterClass.this'\n- replace annotations being used for general documentation with comments\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=75302901",
        "commit_url": "https://github.com/google/guava/commit/e3ee2cb617d0381c2464dd75a28460d832e92a2a",
        "buggy_code": "@GuardedBy(\"ComputingValueReference.this\") // writes",
        "fixed_code": "@GuardedBy(\"this\") // writes",
        "patch": "@@ -285,7 +285,7 @@ public void clear(ValueReference<K, V> newValue) {}\n   private static final class ComputingValueReference<K, V> implements ValueReference<K, V> {\n     final Function<? super K, ? extends V> computingFunction;\n \n-    @GuardedBy(\"ComputingValueReference.this\") // writes\n+    @GuardedBy(\"this\") // writes\n     volatile ValueReference<K, V> computedReference = unset();\n \n     public ComputingValueReference(Function<? super K, ? extends V> computingFunction) {"
    },
    {
        "commit_id": "adcd9984bb9a93db4ab94ceba0583520745e2b01",
        "commit_message": "Fix overflow issues in LocalCache, as per Guava issue 1761\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=68007129",
        "commit_url": "https://github.com/google/guava/commit/adcd9984bb9a93db4ab94ceba0583520745e2b01",
        "buggy_code": "int totalWeight;",
        "fixed_code": "long totalWeight;",
        "patch": "@@ -2016,7 +2016,7 @@ static class Segment<K, V> extends ReentrantLock {\n      * The weight of the live elements in this segment's region.\n      */\n     @GuardedBy(\"Segment.this\")\n-    int totalWeight;\n+    long totalWeight;\n \n     /**\n      * Number of updates that alter the size of the table. This is used during bulk-read methods to"
    },
    {
        "commit_id": "42e607b8d299d4ee79d4952becd964fb2238aebf",
        "commit_message": "Update Truth version to 0.18.\n\nThis version includes primitive type arrays, improved String support, renaming of the object under test, as well as custom error messages.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=67639126",
        "commit_url": "https://github.com/google/guava/commit/42e607b8d299d4ee79d4952becd964fb2238aebf",
        "buggy_code": "ASSERT.that(map.getInstance(type)).has().exactly(array[0]).inOrder();",
        "fixed_code": "ASSERT.that(map.getInstance(type)).asList().has().exactly(array[0]).inOrder();",
        "patch": "@@ -109,7 +109,7 @@ public void testGeneriArrayType() {\n             .put(type, array)\n             .build();\n     assertEquals(1, map.size());\n-    ASSERT.that(map.getInstance(type)).has().exactly(array[0]).inOrder();\n+    ASSERT.that(map.getInstance(type)).asList().has().exactly(array[0]).inOrder();\n   }\n \n   public void testWildcardType() {"
    },
    {
        "commit_id": "42e607b8d299d4ee79d4952becd964fb2238aebf",
        "commit_message": "Update Truth version to 0.18.\n\nThis version includes primitive type arrays, improved String support, renaming of the object under test, as well as custom error messages.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=67639126",
        "commit_url": "https://github.com/google/guava/commit/42e607b8d299d4ee79d4952becd964fb2238aebf",
        "buggy_code": "ASSERT.that(resolved.getActualTypeArguments()).has().item(String.class);",
        "fixed_code": "ASSERT.that(resolved.getActualTypeArguments()).asList().has().item(String.class);",
        "patch": "@@ -124,7 +124,7 @@ public void testResolveType_parameterizedType() {\n         parameterized.parameterizedType());\n     assertEquals(TypeTokenResolutionTest.class, resolved.getOwnerType());\n     assertEquals(Bar.class, resolved.getRawType());\n-    ASSERT.that(resolved.getActualTypeArguments()).has().item(String.class);\n+    ASSERT.that(resolved.getActualTypeArguments()).asList().has().item(String.class);\n   }\n   \n   private interface StringListPredicate extends Predicate<List<String>> {}"
    },
    {
        "commit_id": "585d047130811ba07af552c3e16158640a1e6406",
        "commit_message": "Clean up misuses of Truth where proposition values are passed into ASSERT.that() instead of the object under test.  This leads to patterns like:\n\nASSERT.that(myMap.values().isEmpty());\n\nThe above will do exactly nothing, because Truth is a fluent API and expects a value and returns an object with custom proposition methods on it, i.e.\n\nASSERT.that(myMap.values()).isEmpty(); is the appropriate fix.\n\nThis is in preparation for an upgrade to Truth which includes @CheckReturnValue on methods like .that() in order to let error-prone flag these as a compile-error.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=63974750",
        "commit_url": "https://github.com/google/guava/commit/585d047130811ba07af552c3e16158640a1e6406",
        "buggy_code": "ASSERT.that(empty);",
        "fixed_code": "ASSERT.that(empty).isEmpty();",
        "patch": "@@ -153,7 +153,7 @@ public void testCharacterSplitOnOnlyDelimiter() {\n \n   public void testCharacterSplitOnOnlyDelimitersOmitEmptyStrings() {\n     Iterable<String> empty = Splitter.on('.').omitEmptyStrings().split(\"...\");\n-    ASSERT.that(empty);\n+    ASSERT.that(empty).isEmpty();\n   }\n \n   public void testCharacterSplitWithTrim() {"
    },
    {
        "commit_id": "585d047130811ba07af552c3e16158640a1e6406",
        "commit_message": "Clean up misuses of Truth where proposition values are passed into ASSERT.that() instead of the object under test.  This leads to patterns like:\n\nASSERT.that(myMap.values().isEmpty());\n\nThe above will do exactly nothing, because Truth is a fluent API and expects a value and returns an object with custom proposition methods on it, i.e.\n\nASSERT.that(myMap.values()).isEmpty(); is the appropriate fix.\n\nThis is in preparation for an upgrade to Truth which includes @CheckReturnValue on methods like .that() in order to let error-prone flag these as a compile-error.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=63974750",
        "commit_url": "https://github.com/google/guava/commit/585d047130811ba07af552c3e16158640a1e6406",
        "buggy_code": "ASSERT.that(empty);",
        "fixed_code": "ASSERT.that(empty).isEmpty();",
        "patch": "@@ -156,7 +156,7 @@ public void testCharacterSplitOnOnlyDelimiter() {\n \n   public void testCharacterSplitOnOnlyDelimitersOmitEmptyStrings() {\n     Iterable<String> empty = Splitter.on('.').omitEmptyStrings().split(\"...\");\n-    ASSERT.that(empty);\n+    ASSERT.that(empty).isEmpty();\n   }\n \n   public void testCharacterSplitWithTrim() {"
    },
    {
        "commit_id": "b321e8aadca131d89c08bc5e4fc8ee76ac302933",
        "commit_message": "Improve the error message thrown from MediaType.parse().\n\nReport as https://code.google.com/p/guava-libraries/issues/detail?id=1667\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=61538444",
        "commit_url": "https://github.com/google/guava/commit/b321e8aadca131d89c08bc5e4fc8ee76ac302933",
        "buggy_code": "throw new IllegalArgumentException(e);",
        "fixed_code": "throw new IllegalArgumentException(\"Could not parse '\" + input + \"'\", e);",
        "patch": "@@ -615,7 +615,7 @@ public static MediaType parse(String input) {\n       }\n       return create(type, subtype, parameters.build());\n     } catch (IllegalStateException e) {\n-      throw new IllegalArgumentException(e);\n+      throw new IllegalArgumentException(\"Could not parse '\" + input + \"'\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "b42368ce50632c78886dc369f79265b1114668a2",
        "commit_message": "Fix tests that break when Stopwatch constructors are hidden.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=60761955",
        "commit_url": "https://github.com/google/guava/commit/b42368ce50632c78886dc369f79265b1114668a2",
        "buggy_code": "new AtomicReference<Object>(sepStopwatchC.newInstance());",
        "fixed_code": "new AtomicReference<Object>(sepStopwatchC.getMethod(\"createUnstarted\").invoke(null));",
        "patch": "@@ -113,7 +113,7 @@ private WeakReference<ClassLoader> useFrqInSeparateLoader() throws Exception {\n     Class<?> sepStopwatchC = sepLoader.loadClass(Stopwatch.class.getName());\n     assertSame(sepLoader, sepStopwatchC.getClassLoader());\n     AtomicReference<Object> sepStopwatchA =\n-        new AtomicReference<Object>(sepStopwatchC.newInstance());\n+        new AtomicReference<Object>(sepStopwatchC.getMethod(\"createUnstarted\").invoke(null));\n     AtomicReference<WeakReference<?>> sepStopwatchRef = new AtomicReference<WeakReference<?>>(\n         (WeakReference<?>) sepFwrCons.newInstance(sepStopwatchA.get(), sepFrqA.get()));\n     assertNotNull(sepStopwatchA.get());"
    },
    {
        "commit_id": "447e7a41c22bcaba75bef99eebae179bc15f2894",
        "commit_message": "Fix a call to checkArgument in SimpleTimeLimiter.newProxy to use string substitution.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=60440806",
        "commit_url": "https://github.com/google/guava/commit/447e7a41c22bcaba75bef99eebae179bc15f2894",
        "buggy_code": "checkArgument(timeoutDuration > 0, \"bad timeout: \" + timeoutDuration);",
        "fixed_code": "checkArgument(timeoutDuration > 0, \"bad timeout: %s\", timeoutDuration);",
        "patch": "@@ -86,7 +86,7 @@ public <T> T newProxy(final T target, Class<T> interfaceType,\n     checkNotNull(target);\n     checkNotNull(interfaceType);\n     checkNotNull(timeoutUnit);\n-    checkArgument(timeoutDuration > 0, \"bad timeout: \" + timeoutDuration);\n+    checkArgument(timeoutDuration > 0, \"bad timeout: %s\", timeoutDuration);\n     checkArgument(interfaceType.isInterface(),\n         \"interfaceType must be an interface type\");\n "
    },
    {
        "commit_id": "7de3cbca3854ae0d9e9f7973a8f3cfe855a2407a",
        "commit_message": "Javac 8 clean-up.\n\nJavac 8 places additional restrictions on generic type inference, and will\noccasionally report an inference error in situations where javac 7 would have\nbeen more permissive. This change allows compilation with javac 8 to succeed.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=57309921",
        "commit_url": "https://github.com/google/guava/commit/7de3cbca3854ae0d9e9f7973a8f3cfe855a2407a",
        "buggy_code": "EnumSet<?> enumSet = EnumSet.copyOf((EnumSet<?>) elements);",
        "fixed_code": "EnumSet<? extends Enum<?>> enumSet = EnumSet.copyOf((EnumSet<? extends Enum<?>>) elements);",
        "patch": "@@ -369,7 +369,7 @@ public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {\n         return set;\n       }\n     } else if (elements instanceof EnumSet) {\n-      EnumSet<?> enumSet = EnumSet.copyOf((EnumSet<?>) elements);\n+      EnumSet<? extends Enum<?>> enumSet = EnumSet.copyOf((EnumSet<? extends Enum<?>>) elements);\n       @SuppressWarnings(\"unchecked\")\n       // immutable collections are safe for covariant casts\n       ImmutableSet<E> result = (ImmutableSet<E>) ImmutableEnumSet.asImmutable(enumSet);"
    },
    {
        "commit_id": "1b81d3d68f71026fb81acc923e7424707ae50f95",
        "commit_message": "Fix low-hanging rawtypes warnings in javatests.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=53733108",
        "commit_url": "https://github.com/google/guava/commit/1b81d3d68f71026fb81acc923e7424707ae50f95",
        "buggy_code": "public static final class MyAbstractTester extends AbstractTester {",
        "fixed_code": "public static final class MyAbstractTester extends AbstractTester<Void> {",
        "patch": "@@ -38,7 +38,7 @@ protected void setUp() throws Exception {\n     testWasRun = false;\n   }\n \n-  public static final class MyAbstractTester extends AbstractTester {\n+  public static final class MyAbstractTester extends AbstractTester<Void> {\n     public void testNothing() {\n       testWasRun = true;\n     }"
    },
    {
        "commit_id": "1b81d3d68f71026fb81acc923e7424707ae50f95",
        "commit_message": "Fix low-hanging rawtypes warnings in javatests.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=53733108",
        "commit_url": "https://github.com/google/guava/commit/1b81d3d68f71026fb81acc923e7424707ae50f95",
        "buggy_code": "Function<String, String> computingFunction = new DelayingIdentityLoader(computingLatch);",
        "fixed_code": "Function<String, String> computingFunction = new DelayingIdentityLoader<String>(computingLatch);",
        "patch": "@@ -56,7 +56,7 @@ public void testRemovalNotification_clear() throws InterruptedException {\n     // notification.\n \n     final CountDownLatch computingLatch = new CountDownLatch(1);\n-    Function<String, String> computingFunction = new DelayingIdentityLoader(computingLatch);\n+    Function<String, String> computingFunction = new DelayingIdentityLoader<String>(computingLatch);\n     QueuingRemovalListener<String, String> listener = new QueuingRemovalListener<String, String>();\n \n     @SuppressWarnings(\"deprecation\") // test of deprecated code"
    },
    {
        "commit_id": "ba0e833f2e84baa310583f75b71ae727bea5183a",
        "commit_message": "Fix broken test name that prevents test from running.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=51318709",
        "commit_url": "https://github.com/google/guava/commit/ba0e833f2e84baa310583f75b71ae727bea5183a",
        "buggy_code": "public void tesGenericInterfaceReturnedByGenericMethod() {",
        "fixed_code": "public void testGenericInterfaceReturnedByGenericMethod() {",
        "patch": "@@ -1136,7 +1136,7 @@ void check() {\n     }\n   }\n \n-  public void tesGenericInterfaceReturnedByGenericMethod() {\n+  public void testGenericInterfaceReturnedByGenericMethod() {\n     new GenericInterface2DefaultValueChecker().check();\n   }\n "
    },
    {
        "commit_id": "037c25513fd8a08b84778f5a7fe167a2bbf48d5e",
        "commit_message": "Fix a wrong description in CharMatcher.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=50956932",
        "commit_url": "https://github.com/google/guava/commit/037c25513fd8a08b84778f5a7fe167a2bbf48d5e",
        "buggy_code": "String description = \"CharMatcher.isNot(\" + Integer.toHexString(match) + \")\";",
        "fixed_code": "String description = \"CharMatcher.isNot('\" + showCharacter(match) + \"')\";",
        "patch": "@@ -437,7 +437,7 @@ public static CharMatcher is(final char match) {\n    * <p>To negate another {@code CharMatcher}, use {@link #negate()}.\n    */\n   public static CharMatcher isNot(final char match) {\n-    String description = \"CharMatcher.isNot(\" + Integer.toHexString(match) + \")\";\n+    String description = \"CharMatcher.isNot('\" + showCharacter(match) + \"')\";\n     return new FastMatcher(description) {\n       @Override public boolean matches(char c) {\n         return c != match;"
    },
    {
        "commit_id": "037c25513fd8a08b84778f5a7fe167a2bbf48d5e",
        "commit_message": "Fix a wrong description in CharMatcher.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=50956932",
        "commit_url": "https://github.com/google/guava/commit/037c25513fd8a08b84778f5a7fe167a2bbf48d5e",
        "buggy_code": "String description = \"CharMatcher.isNot(\" + Integer.toHexString(match) + \")\";",
        "fixed_code": "String description = \"CharMatcher.isNot('\" + showCharacter(match) + \"')\";",
        "patch": "@@ -445,7 +445,7 @@ void setBits(BitSet table) {\n    * <p>To negate another {@code CharMatcher}, use {@link #negate()}.\n    */\n   public static CharMatcher isNot(final char match) {\n-    String description = \"CharMatcher.isNot(\" + Integer.toHexString(match) + \")\";\n+    String description = \"CharMatcher.isNot('\" + showCharacter(match) + \"')\";\n     return new FastMatcher(description) {\n       @Override public boolean matches(char c) {\n         return c != match;"
    },
    {
        "commit_id": "6b3dd12bb8960885afedb1807660d923fe3bfce8",
        "commit_message": "Fix division bug in HashCode.writeBytesTo()\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=50635321",
        "commit_url": "https://github.com/google/guava/commit/6b3dd12bb8960885afedb1807660d923fe3bfce8",
        "buggy_code": "maxLength = Ints.min(maxLength, bits() * 8);",
        "fixed_code": "maxLength = Ints.min(maxLength, bits() / 8);",
        "patch": "@@ -289,7 +289,7 @@ private static int decode(char ch) {\n    * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}\n    */\n   public final int writeBytesTo(byte[] dest, int offset, int maxLength) {\n-    maxLength = Ints.min(maxLength, bits() * 8);\n+    maxLength = Ints.min(maxLength, bits() / 8);\n     Preconditions.checkPositionIndexes(offset, offset + maxLength, dest.length);\n     // TODO(user): Consider avoiding the array creation in asBytes() by stepping through\n     // the bytes individually."
    },
    {
        "commit_id": "721f17976199f1636e86447370b2caa96a226a39",
        "commit_message": "Fix low-hanging rawtypes warnings for common.collect.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=48684234",
        "commit_url": "https://github.com/google/guava/commit/721f17976199f1636e86447370b2caa96a226a39",
        "buggy_code": "allEntries.toArray(new Entry[allEntries.size()]));",
        "fixed_code": "allEntries.toArray(new Entry<?, ?>[allEntries.size()]));",
        "patch": "@@ -511,7 +511,7 @@ public SortedMapSubmapTestMapGenerator(\n       allEntries.addAll(normalValues);\n       SortedMap<K, V> map = (SortedMap<K, V>)\n           delegate.create((Object[])\n-              allEntries.toArray(new Entry[allEntries.size()]));\n+              allEntries.toArray(new Entry<?, ?>[allEntries.size()]));\n \n       return createSubMap(map, firstExclusive, lastExclusive);\n     }"
    },
    {
        "commit_id": "721f17976199f1636e86447370b2caa96a226a39",
        "commit_message": "Fix low-hanging rawtypes warnings for common.collect.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=48684234",
        "commit_url": "https://github.com/google/guava/commit/721f17976199f1636e86447370b2caa96a226a39",
        "buggy_code": "Entry[] entries = new Entry[elements.length];",
        "fixed_code": "Entry<?, ?>[] entries = new Entry<?, ?>[elements.length];",
        "patch": "@@ -111,7 +111,7 @@ private Map.Entry<V, K> reverse(Map.Entry<K, V> entry) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public BiMap<V, K> create(Object... elements) {\n-      Entry[] entries = new Entry[elements.length];\n+      Entry<?, ?>[] entries = new Entry<?, ?>[elements.length];\n       for (int i = 0; i < elements.length; i++) {\n         entries[i] = reverse((Entry<K, V>) elements[i]);\n       }"
    },
    {
        "commit_id": "a1c2b84baed4ba3a8c0fffa81765c24a17a55f47",
        "commit_message": "Change x == x to equivalent isNaN() in preparation for making it a compile error.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47811494",
        "commit_url": "https://github.com/google/guava/commit/a1c2b84baed4ba3a8c0fffa81765c24a17a55f47",
        "buggy_code": "|| ((a != a) && (b != b)); // x != x is equivalent to Double.isNaN(x), but faster",
        "fixed_code": "|| (Double.isNaN(a) && Double.isNaN(b));",
        "patch": "@@ -342,7 +342,7 @@ public static boolean fuzzyEquals(double a, double b, double tolerance) {\n           Math.copySign(a - b, 1.0) <= tolerance\n            // copySign(x, 1.0) is a branch-free version of abs(x), but with different NaN semantics\n           || (a == b) // needed to ensure that infinities equal themselves\n-          || ((a != a) && (b != b)); // x != x is equivalent to Double.isNaN(x), but faster\n+          || (Double.isNaN(a) && Double.isNaN(b));\n   }\n \n   /**"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "public Entry<K, V> next(){",
        "fixed_code": "public Entry<K, V> next() {",
        "patch": "@@ -547,7 +547,7 @@ class EntryIterator implements Iterator<Entry<K, V>> {\n     }\n \n     @Override\n-    public Entry<K, V> next(){\n+    public Entry<K, V> next() {\n       if (nextEntry == null) {\n         hasNext();\n "
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "boolean isPartialView(){",
        "fixed_code": "boolean isPartialView() {",
        "patch": "@@ -91,7 +91,7 @@ static <E> ImmutableCollection<E> unsafeDelegate(Collection<E> delegate) {\n     return new ForwardingImmutableCollection<E>(delegate);\n   }\n \n-  boolean isPartialView(){\n+  boolean isPartialView() {\n     return false;\n   }\n "
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive){",
        "fixed_code": "ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {",
        "patch": "@@ -278,7 +278,7 @@ public ImmutableSortedMap<K, V> subMap(K fromKey, K toKey) {\n     return newView(sortedDelegate.subMap(fromKey, toKey));\n   }\n \n-  ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive){\n+  ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {\n     checkNotNull(fromKey);\n     checkNotNull(toKey);\n     checkArgument(comparator.compare(fromKey, toKey) <= 0);"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "static boolean equalsImpl(Set<?> s, @Nullable Object object){",
        "fixed_code": "static boolean equalsImpl(Set<?> s, @Nullable Object object) {",
        "patch": "@@ -1180,7 +1180,7 @@ static int hashCodeImpl(Set<?> s) {\n   /**\n    * An implementation for {@link Set#equals(Object)}.\n    */\n-  static boolean equalsImpl(Set<?> s, @Nullable Object object){\n+  static boolean equalsImpl(Set<?> s, @Nullable Object object) {\n     if (s == object) {\n       return true;\n     }"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "private static <E> List<E> asList(Collection<E> collection){",
        "fixed_code": "private static <E> List<E> asList(Collection<E> collection) {",
        "patch": "@@ -481,7 +481,7 @@ public void testInvalidZeroLimit() {\n     }\n   }\n \n-  private static <E> List<E> asList(Collection<E> collection){\n+  private static <E> List<E> asList(Collection<E> collection) {\n     return ImmutableList.copyOf(collection);\n   }\n "
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "public void testNulls(){",
        "fixed_code": "public void testNulls() {",
        "patch": "@@ -28,7 +28,7 @@\n  */\n public class RelationshipTesterTest extends TestCase {\n \n-  public void testNulls(){\n+  public void testNulls() {\n     new ClassSanityTester()\n         .setDefault(RelationshipAssertion.class, new RelationshipAssertion<Object>() {\n           @Override void assertRelated(Object item, Object related) {}"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "private static <E> List<E> asList(Collection<E> collection){",
        "fixed_code": "private static <E> List<E> asList(Collection<E> collection) {",
        "patch": "@@ -653,7 +653,7 @@ public void testNullPointers() {\n     tester.testAllPublicInstanceMethods(Splitter.on(',').trimResults());\n   }\n \n-  private static <E> List<E> asList(Collection<E> collection){\n+  private static <E> List<E> asList(Collection<E> collection) {\n     return ImmutableList.copyOf(collection);\n   }\n "
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "} else if (returnType == Iterator.class){",
        "fixed_code": "} else if (returnType == Iterator.class) {",
        "patch": "@@ -111,7 +111,7 @@ private static Object getDefaultValue(Class<?> returnType) {\n       return 0;\n     } else if ((returnType == Set.class) || (returnType == Collection.class)) {\n       return Collections.emptySet();\n-    } else if (returnType == Iterator.class){\n+    } else if (returnType == Iterator.class) {\n       return Iterators.emptyModifiableIterator();\n     } else if (returnType.isArray()) {\n       return Array.newInstance(returnType.getComponentType(), 0);"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "@GwtIncompatible(\"unreasonable slow\")",
        "fixed_code": "@GwtIncompatible(\"unreasonably slow\")",
        "patch": "@@ -112,7 +112,7 @@ public void testCreateFromIterable() {\n     assertEquals(\"[foo x 2, bar]\", multiset.toString());\n   }\n \n-  @GwtIncompatible(\"unreasonable slow\")\n+  @GwtIncompatible(\"unreasonably slow\")\n   public void testIteratorBashing() {\n     ms = createSample();\n     IteratorTester<String> tester ="
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "@GwtIncompatible(\"unreasonable slow\")",
        "fixed_code": "@GwtIncompatible(\"unreasonably slow\")",
        "patch": "@@ -156,7 +156,7 @@ public void testToString() {\n     assertEquals(\"[a x 3, b x 2, c]\", ms.toString());\n   }\n \n-  @GwtIncompatible(\"unreasonable slow\")\n+  @GwtIncompatible(\"unreasonably slow\")\n   public void testIteratorBashing() {\n     IteratorTester<String> tester =\n         new IteratorTester<String>(createSample().size() + 2, MODIFIABLE,"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "@Override public final V setValue(V value){",
        "fixed_code": "@Override public final V setValue(V value) {",
        "patch": "@@ -73,7 +73,7 @@ public boolean wasEvicted() {\n     return value;\n   }\n \n-  @Override public final V setValue(V value){\n+  @Override public final V setValue(V value) {\n     throw new UnsupportedOperationException();\n   }\n "
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "protected boolean standardAdd(E element){",
        "fixed_code": "protected boolean standardAdd(E element) {",
        "patch": "@@ -127,7 +127,7 @@ public List<E> subList(int fromIndex, int toIndex) {\n    *\n    * @since 7.0\n    */\n-  protected boolean standardAdd(E element){\n+  protected boolean standardAdd(E element) {\n     add(size(), element);\n     return true;\n   }"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "return Maps.asMapEntryIterator(columnKeySet(), new Function<C, Map<R, V>>(){",
        "fixed_code": "return Maps.asMapEntryIterator(columnKeySet(), new Function<C, Map<R, V>>() {",
        "patch": "@@ -790,7 +790,7 @@ private class ColumnMap extends ImprovedAbstractMap<C, Map<R, V>> {\n \n     class ColumnMapEntrySet extends TableSet<Entry<C, Map<R, V>>> {\n       @Override public Iterator<Entry<C, Map<R, V>>> iterator() {\n-        return Maps.asMapEntryIterator(columnKeySet(), new Function<C, Map<R, V>>(){\n+        return Maps.asMapEntryIterator(columnKeySet(), new Function<C, Map<R, V>>() {\n           @Override\n           public Map<R, V> apply(C columnKey) {\n             return column(columnKey);"
    },
    {
        "commit_id": "3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "commit_message": "Trivial cleanups:\n- Remove stray paren in Ordering Javadoc.\n- Fix runnable/executor confusion in ExecutionQueue Javadoc.\n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there.\n- Remove \"This class is GWT compatible\" comments, which have been redundant since we began using @GwtCompatible in testlib code.\n- \"unreasonable slow\" => \"unreasonably slow\"\n- Fix continued-line indent in Invokable.\n- Insert spaces in cast expressions.\n- Add missing spaces before open braces.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47059317",
        "commit_url": "https://github.com/google/guava/commit/3d0bd8ca07c9bfd7605cc703e61c5637cf16e0c5",
        "buggy_code": "public static BigInteger divide(BigInteger p, BigInteger q, RoundingMode mode){",
        "fixed_code": "public static BigInteger divide(BigInteger p, BigInteger q, RoundingMode mode) {",
        "patch": "@@ -291,7 +291,7 @@ private static BigInteger sqrtApproxWithDoubles(BigInteger x) {\n    *         is not an integer multiple of {@code b}\n    */\n   @GwtIncompatible(\"TODO\")\n-  public static BigInteger divide(BigInteger p, BigInteger q, RoundingMode mode){\n+  public static BigInteger divide(BigInteger p, BigInteger q, RoundingMode mode) {\n     BigDecimal pDec = new BigDecimal(p);\n     BigDecimal qDec = new BigDecimal(q);\n     return pDec.divide(qDec, 0, mode).toBigIntegerExact();"
    },
    {
        "commit_id": "c84d0031c8af6e00a9bb25a86bade4cf1d5af9ed",
        "commit_message": "Guava issue 1423: fix TreeMultimap.asMap().headMap to properly register inclusivity argument\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=47004337",
        "commit_url": "https://github.com/google/guava/commit/c84d0031c8af6e00a9bb25a86bade4cf1d5af9ed",
        "buggy_code": "return new NavigableAsMap(sortedMap().headMap(toKey, false));",
        "fixed_code": "return new NavigableAsMap(sortedMap().headMap(toKey, inclusive));",
        "patch": "@@ -1547,7 +1547,7 @@ public NavigableMap<K, Collection<V>> headMap(K toKey) {\n \n     @Override\n     public NavigableMap<K, Collection<V>> headMap(K toKey, boolean inclusive) {\n-      return new NavigableAsMap(sortedMap().headMap(toKey, false));\n+      return new NavigableAsMap(sortedMap().headMap(toKey, inclusive));\n     }\n \n     @Override"
    },
    {
        "commit_id": "542600dcff42f6846f662ac3a946348a7cf8ed3c",
        "commit_message": "Override ImmutableBiMap.containsValue() to use the O(1) implementation, as per Guava bug 1416.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=46744049",
        "commit_url": "https://github.com/google/guava/commit/542600dcff42f6846f662ac3a946348a7cf8ed3c",
        "buggy_code": "return value != null && Maps.containsValueImpl(this, value);",
        "fixed_code": "return values().contains(value);",
        "patch": "@@ -201,7 +201,7 @@ public boolean containsKey(@Nullable Object key) {\n \n   @Override\n   public boolean containsValue(@Nullable Object value) {\n-    return value != null && Maps.containsValueImpl(this, value);\n+    return values().contains(value);\n   }\n \n   private transient ImmutableSet<Entry<K, V>> cachedEntrySet = null;"
    },
    {
        "commit_id": "542600dcff42f6846f662ac3a946348a7cf8ed3c",
        "commit_message": "Override ImmutableBiMap.containsValue() to use the O(1) implementation, as per Guava bug 1416.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=46744049",
        "commit_url": "https://github.com/google/guava/commit/542600dcff42f6846f662ac3a946348a7cf8ed3c",
        "buggy_code": "return value != null && Maps.containsValueImpl(this, value);",
        "fixed_code": "return values().contains(value);",
        "patch": "@@ -374,7 +374,7 @@ public boolean containsKey(@Nullable Object key) {\n \n   @Override\n   public boolean containsValue(@Nullable Object value) {\n-    return value != null && Maps.containsValueImpl(this, value);\n+    return values().contains(value);\n   }\n \n   // Overriding to mark it Nullable"
    },
    {
        "commit_id": "dc931f9621ab1865e67fbf026590b6371e4a19f3",
        "commit_message": "Guava issue 1322: deal with a potential overflow issue in ImmutableTable.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=46160775",
        "commit_url": "https://github.com/google/guava/commit/dc931f9621ab1865e67fbf026590b6371e4a19f3",
        "buggy_code": "return (cellList.size() > ((rowSpace.size() * columnSpace.size()) / 2)) ?",
        "fixed_code": "return (cellList.size() > (((long) rowSpace.size() * columnSpace.size()) / 2)) ?",
        "patch": "@@ -172,7 +172,7 @@ static final <R, C, V> RegularImmutableTable<R, C, V> forCells(\n \n     // use a dense table if more than half of the cells have values\n     // TODO(gak): tune this condition based on empirical evidence\n-    return (cellList.size() > ((rowSpace.size() * columnSpace.size()) / 2)) ?\n+    return (cellList.size() > (((long) rowSpace.size() * columnSpace.size()) / 2)) ?\n         new DenseImmutableTable<R, C, V>(cellList, rowSpace, columnSpace) :\n         new SparseImmutableTable<R, C, V>(cellList, rowSpace, columnSpace);\n   }"
    },
    {
        "commit_id": "68591abad922e0fc89c96c52ed5be39ecac09365",
        "commit_message": "Fix SafeTreeSet so delegate.tailSet() is wrapped by a new SafeTreeSet as is headSet() and subSet()\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=43905970",
        "commit_url": "https://github.com/google/guava/commit/68591abad922e0fc89c96c52ed5be39ecac09365",
        "buggy_code": "return delegate.tailSet(checkValid(fromElement), inclusive);",
        "fixed_code": "return new SafeTreeSet<E>(delegate.tailSet(checkValid(fromElement), inclusive));",
        "patch": "@@ -184,7 +184,7 @@ private SafeTreeSet(NavigableSet<E> delegate) {\n   }\n \n   @Override public NavigableSet<E> tailSet(E fromElement, boolean inclusive) {\n-    return delegate.tailSet(checkValid(fromElement), inclusive);\n+    return new SafeTreeSet<E>(delegate.tailSet(checkValid(fromElement), inclusive));\n   }\n \n   @Override public Object[] toArray() {"
    },
    {
        "commit_id": "9129e5e50020f84c7a859726b42ce211d2e37e5f",
        "commit_message": "Miscellaneous documentation fixes and internal cleanups.\n- Remove potentially misleading \"it cannot be started/stopped more than once\" from Stopwatch exception messages.\n- Fix TreeTraverser ASCII art.\n- Remove inaccurate @GwtCompatible annotation from FeatureUtil.\n- Fix mistaken duplicate words (\"the the,\" etc.).\n- Strip *all* of benchmark running instructions from CharMatcherBenchmark, and preemptively strip instructions from internal escapers benchmarks.\n- Remove test <echo> from ant section of pom.xml.\n- Add @Nullable to StandardBaseEncoding's other constructor's paddingChar parameter.\n- Remove stale comment from Futures. (UninterruptibleFuture is long dead.)\n- Update name of Truth GWT module.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=42036409",
        "commit_url": "https://github.com/google/guava/commit/9129e5e50020f84c7a859726b42ce211d2e37e5f",
        "buggy_code": "StandardBaseEncoding(Alphabet alphabet, Character paddingChar) {",
        "fixed_code": "StandardBaseEncoding(Alphabet alphabet, @Nullable Character paddingChar) {",
        "patch": "@@ -484,7 +484,7 @@ static final class StandardBaseEncoding extends BaseEncoding {\n       this(new Alphabet(name, alphabetChars.toCharArray()), paddingChar);\n     }\n \n-    StandardBaseEncoding(Alphabet alphabet, Character paddingChar) {\n+    StandardBaseEncoding(Alphabet alphabet, @Nullable Character paddingChar) {\n       this.alphabet = checkNotNull(alphabet);\n       checkArgument(paddingChar == null || !alphabet.matches(paddingChar),\n           \"Padding character %s was already in alphabet\", paddingChar);"
    },
    {
        "commit_id": "9129e5e50020f84c7a859726b42ce211d2e37e5f",
        "commit_message": "Miscellaneous documentation fixes and internal cleanups.\n- Remove potentially misleading \"it cannot be started/stopped more than once\" from Stopwatch exception messages.\n- Fix TreeTraverser ASCII art.\n- Remove inaccurate @GwtCompatible annotation from FeatureUtil.\n- Fix mistaken duplicate words (\"the the,\" etc.).\n- Strip *all* of benchmark running instructions from CharMatcherBenchmark, and preemptively strip instructions from internal escapers benchmarks.\n- Remove test <echo> from ant section of pom.xml.\n- Add @Nullable to StandardBaseEncoding's other constructor's paddingChar parameter.\n- Remove stale comment from Futures. (UninterruptibleFuture is long dead.)\n- Update name of Truth GWT module.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=42036409",
        "commit_url": "https://github.com/google/guava/commit/9129e5e50020f84c7a859726b42ce211d2e37e5f",
        "buggy_code": "StandardBaseEncoding(Alphabet alphabet, Character paddingChar) {",
        "fixed_code": "StandardBaseEncoding(Alphabet alphabet, @Nullable Character paddingChar) {",
        "patch": "@@ -572,7 +572,7 @@ static final class StandardBaseEncoding extends BaseEncoding {\n       this(new Alphabet(name, alphabetChars.toCharArray()), paddingChar);\n     }\n \n-    StandardBaseEncoding(Alphabet alphabet, Character paddingChar) {\n+    StandardBaseEncoding(Alphabet alphabet, @Nullable Character paddingChar) {\n       this.alphabet = checkNotNull(alphabet);\n       checkArgument(paddingChar == null || !alphabet.matches(paddingChar),\n           \"Padding character %s was already in alphabet\", paddingChar);"
    },
    {
        "commit_id": "a0c67ad3ac5ace5960e422abf3d4b103075521b2",
        "commit_message": "Fix toString() of Resources.asByteSource to match method name.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=41591180",
        "commit_url": "https://github.com/google/guava/commit/a0c67ad3ac5ace5960e422abf3d4b103075521b2",
        "buggy_code": "return \"Resources.newByteSource(\" + url + \")\";",
        "fixed_code": "return \"Resources.asByteSource(\" + url + \")\";",
        "patch": "@@ -84,7 +84,7 @@ public InputStream openStream() throws IOException {\n \n     @Override\n     public String toString() {\n-      return \"Resources.newByteSource(\" + url + \")\";\n+      return \"Resources.asByteSource(\" + url + \")\";\n     }\n   }\n "
    },
    {
        "commit_id": "f39c916b07d47fb4633e9c7603f093acae1735da",
        "commit_message": "Fix toString() of some Source/Sink implementations to match method names.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=41036419",
        "commit_url": "https://github.com/google/guava/commit/f39c916b07d47fb4633e9c7603f093acae1735da",
        "buggy_code": "return \"ByteStreams.newByteSource(\" + BaseEncoding.base16().encode(bytes) + \")\";",
        "fixed_code": "return \"ByteStreams.asByteSource(\" + BaseEncoding.base16().encode(bytes) + \")\";",
        "patch": "@@ -127,7 +127,7 @@ public HashCode hash(HashFunction hashFunction) throws IOException {\n \n     @Override\n     public String toString() {\n-      return \"ByteStreams.newByteSource(\" + BaseEncoding.base16().encode(bytes) + \")\";\n+      return \"ByteStreams.asByteSource(\" + BaseEncoding.base16().encode(bytes) + \")\";\n     }\n   }\n "
    },
    {
        "commit_id": "f39c916b07d47fb4633e9c7603f093acae1735da",
        "commit_message": "Fix toString() of some Source/Sink implementations to match method names.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=41036419",
        "commit_url": "https://github.com/google/guava/commit/f39c916b07d47fb4633e9c7603f093acae1735da",
        "buggy_code": "return \"CharStreams.newCharSource(\" + limited + \")\";",
        "fixed_code": "return \"CharStreams.asCharSource(\" + limited + \")\";",
        "patch": "@@ -149,7 +149,7 @@ public String toString() {\n       String limited = (string.length() <= 15)\n           ? string\n           : string.substring(0, 12) + \"...\";\n-      return \"CharStreams.newCharSource(\" + limited + \")\";\n+      return \"CharStreams.asCharSource(\" + limited + \")\";\n     }\n   }\n "
    },
    {
        "commit_id": "313f93c8c4ec073158317473dfbfb2aff29b1d65",
        "commit_message": "Fix calls to deprecated Stopwatch.elapsedTime(TimeUnit) by inlining that method's implementation (\"elapsed(TimeUnit)\").\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=40480378",
        "commit_url": "https://github.com/google/guava/commit/313f93c8c4ec073158317473dfbfb2aff29b1d65",
        "buggy_code": "total += s.elapsedTime(TimeUnit.NANOSECONDS);",
        "fixed_code": "total += s.elapsed(TimeUnit.NANOSECONDS);",
        "patch": "@@ -35,7 +35,7 @@ public long timeStopwatch(int reps) {\n     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n       // here is where you would do something\n-      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n+      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }"
    },
    {
        "commit_id": "d6da7d86a2cab91bb3d33d983ccf5b07de14cc20",
        "commit_message": "Ensure that recordStats works on Android, GWT, and environments which may restrict the use of sun.misc.Unsafe, as per Guava issue 1228.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=40113906",
        "commit_url": "https://github.com/google/guava/commit/d6da7d86a2cab91bb3d33d983ccf5b07de14cc20",
        "buggy_code": "class LongAdder {",
        "fixed_code": "class LongAdder implements LongAddable {",
        "patch": "@@ -21,7 +21,7 @@\n  *\n  * @author Charles Fry\n  */\n-class LongAdder {\n+class LongAdder implements LongAddable {\n \n   private long value;\n "
    },
    {
        "commit_id": "0330f712f56cc53633874e95bdc1203cf881eb85",
        "commit_message": "Fix bug in TreeRangeMap.asMapOfRanges().get(absentRange)\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=38651843",
        "commit_url": "https://github.com/google/guava/commit/0330f712f56cc53633874e95bdc1203cf881eb85",
        "buggy_code": "if (rangeMapEntry.getKey().equals(range)) {",
        "fixed_code": "if (rangeMapEntry != null && rangeMapEntry.getKey().equals(range)) {",
        "patch": "@@ -211,7 +211,7 @@ public V get(@Nullable Object key) {\n       if (key instanceof Range) {\n         Range<?> range = (Range<?>) key;\n         RangeMapEntry<K, V> rangeMapEntry = entriesByLowerBound.get(range.lowerBound);\n-        if (rangeMapEntry.getKey().equals(range)) {\n+        if (rangeMapEntry != null && rangeMapEntry.getKey().equals(range)) {\n           return rangeMapEntry.getValue();\n         }\n       }"
    },
    {
        "commit_id": "9c9cb7da27bfcabd87931b46dbd48858ceefb5e7",
        "commit_message": "Fix precondition error message to use %s instead of %d (which is not supported by the preconditions formatter).\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=36322003",
        "commit_url": "https://github.com/google/guava/commit/9c9cb7da27bfcabd87931b46dbd48858ceefb5e7",
        "buggy_code": "checkArgument(k >= 0, \"k (%d) must be nonnegative\", k);",
        "fixed_code": "checkArgument(k >= 0, \"k (%s) must be nonnegative\", k);",
        "patch": "@@ -628,7 +628,7 @@ public <E extends T> List<E> leastOf(Iterable<E> iterable, int k) {\n   @Beta\n   public <E extends T> List<E> leastOf(Iterator<E> elements, int k) {\n     checkNotNull(elements);\n-    checkArgument(k >= 0, \"k (%d) must be nonnegative\", k);\n+    checkArgument(k >= 0, \"k (%s) must be nonnegative\", k);\n \n     if (k == 0 || !elements.hasNext()) {\n       return ImmutableList.of();"
    },
    {
        "commit_id": "cc85d09a69713574da89f12ff881cb91fa15185b",
        "commit_message": "Guava issue 1120. Remove ThreadLocal value in EventBus rather than setting to false.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=36161462",
        "commit_url": "https://github.com/google/guava/commit/cc85d09a69713574da89f12ff881cb91fa15185b",
        "buggy_code": "isDispatching.set(false);",
        "fixed_code": "isDispatching.remove();",
        "patch": "@@ -296,7 +296,7 @@ void dispatchQueuedEvents() {\n         dispatch(eventWithHandler.event, eventWithHandler.handler);\n       }\n     } finally {\n-      isDispatching.set(false);\n+      isDispatching.remove();\n     }\n   }\n "
    },
    {
        "commit_id": "507e694274947e3ef4dcecc45695a447330e6456",
        "commit_message": "Fix a bug so we actually store the cause of cancellation in cancelled futures.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=34502625",
        "commit_url": "https://github.com/google/guava/commit/507e694274947e3ef4dcecc45695a447330e6456",
        "buggy_code": "this.exception = isCancelled()",
        "fixed_code": "this.exception = ((finalState & (CANCELLED | INTERRUPTED)) != 0)",
        "patch": "@@ -382,7 +382,7 @@ private boolean complete(@Nullable V v, @Nullable Throwable t,\n         // and exception and then release to the final state.\n         this.value = v;\n         // Don't actually construct a CancellationException until necessary.\n-        this.exception = isCancelled()\n+        this.exception = ((finalState & (CANCELLED | INTERRUPTED)) != 0)\n             ? new CancellationException(\"Future.cancel() was called.\") : t;\n         releaseShared(finalState);\n       } else if (getState() == COMPLETING) {"
    },
    {
        "commit_id": "cd251bcba76af57b67994869c770793955aaeb1b",
        "commit_message": "Guava issue 1154: use the new String(byte[], Charset) constructor directly\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=34385923",
        "commit_url": "https://github.com/google/guava/commit/cd251bcba76af57b67994869c770793955aaeb1b",
        "buggy_code": "return new String(toByteArray(file), charset.name());",
        "fixed_code": "return new String(toByteArray(file), charset);",
        "patch": "@@ -242,7 +242,7 @@ public static byte[] toByteArray(File file) throws IOException {\n   public static String toString(File file, Charset charset) throws IOException {\n     checkNotNull(file);\n     checkNotNull(charset);\n-    return new String(toByteArray(file), charset.name());\n+    return new String(toByteArray(file), charset);\n   }\n \n   /**"
    },
    {
        "commit_id": "4ab9205558043640770fa5888c56ff3e639903df",
        "commit_message": "Added testEquals() to AbstractPackageSanityTests.\n\nExtracted some of the code into a new ClassSanityTester class.\n\nAlso added utility to test factory classes such as Predicates, for example:\n\nnew ClassSanityTester().forAllPublicStaticMethods(Predicates.class)\n.testEqualsAndSerialiable();\n\nThis cannot be performed by package sanity tests because there is no reliable pattern to tell that a class is a factory class (using plural is tricky in i18n if not anything else). But I think adding a simple test to PredicatesTest for Predicates is already a lot easier.\n\nAdded javadoc to explain which case are covered by these automated sanity tests and which aren't.\n\nAdded ItemReporter to RelationshipTester and EqualsTester so that the error message can be customized. The default \"group i, item j\" message is useless for automated test, since user didn't explicitly create the equality groups and the group numbers and item numbers are meaningless to users.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=34054176",
        "commit_url": "https://github.com/google/guava/commit/4ab9205558043640770fa5888c56ff3e639903df",
        "buggy_code": "defaults.put(type, checkNotNull(value));",
        "fixed_code": "defaults.putInstance(type, checkNotNull(value));",
        "patch": "@@ -75,7 +75,7 @@ public final class NullPointerTester {\n    * {@code type}. Returns this object.\n    */\n   public <T> NullPointerTester setDefault(Class<T> type, T value) {\n-    defaults.put(type, checkNotNull(value));\n+    defaults.putInstance(type, checkNotNull(value));\n     return this;\n   }\n "
    },
    {
        "commit_id": "6995e685d84ad06cb8632517fdbc487246183a95",
        "commit_message": "Assorted cleanup:\n- Fix bogus \"ImmutableMap.keySet\" name for ImmutableMap test.\n- Remove unused FeatureUtil manual GWT emulation.\n- Remove one odd whitespace occurrence.\n- Fix Closeables Javadoc code formatting, plus other tweaks.\n- Change @link to @linkplain and Equivalances to Equivalence in Equivalence.\n- Fix various Javadoc warnings.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=33430865",
        "commit_url": "https://github.com/google/guava/commit/6995e685d84ad06cb8632517fdbc487246183a95",
        "buggy_code": "assertFalse(entrySet.retainAll( asList(null, entryOf(0, 0), entryOf(15, 15))));",
        "fixed_code": "assertFalse(entrySet.retainAll(asList(null, entryOf(0, 0), entryOf(15, 15))));",
        "patch": "@@ -316,7 +316,7 @@ public void testEntrySet_empty_remove() {\n       assertFalse(entrySet.remove(entryOf(6, 6)));\n       assertFalse(entrySet.remove(entryOf(-6, -6)));\n       assertFalse(entrySet.removeAll(asList(null, entryOf(0, 0), entryOf(15, 15))));\n-      assertFalse(entrySet.retainAll( asList(null, entryOf(0, 0), entryOf(15, 15))));\n+      assertFalse(entrySet.retainAll(asList(null, entryOf(0, 0), entryOf(15, 15))));\n       checkEmpty(entrySet);\n       checkEmpty(cache);\n     }"
    },
    {
        "commit_id": "6995e685d84ad06cb8632517fdbc487246183a95",
        "commit_message": "Assorted cleanup:\n- Fix bogus \"ImmutableMap.keySet\" name for ImmutableMap test.\n- Remove unused FeatureUtil manual GWT emulation.\n- Remove one odd whitespace occurrence.\n- Fix Closeables Javadoc code formatting, plus other tweaks.\n- Change @link to @linkplain and Equivalances to Equivalence in Equivalence.\n- Fix various Javadoc warnings.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=33430865",
        "commit_url": "https://github.com/google/guava/commit/6995e685d84ad06cb8632517fdbc487246183a95",
        "buggy_code": ".named(\"ImmutableMap.keySet\")",
        "fixed_code": ".named(\"ImmutableMap\")",
        "patch": "@@ -71,7 +71,7 @@ public static Test suite() {\n             CollectionFeature.KNOWN_ORDER,\n             MapFeature.REJECTS_DUPLICATES_AT_CREATION,\n             CollectionFeature.ALLOWS_NULL_QUERIES)\n-        .named(\"ImmutableMap.keySet\")\n+        .named(\"ImmutableMap\")\n         .createTestSuite());\n \n     suite.addTest(CollectionTestSuiteBuilder.using("
    },
    {
        "commit_id": "c399bb5be8c6b477656a31927545dbd46eafbc7d",
        "commit_message": "Fix incorrect @SuppressWarnings annotations:\n\n@SuppressWarnings(\"deprecated\")\n\nshould be:\n\n@SuppressWarnings(\"deprecation\")\n\nTested:\nTAP presubmits for global presubmit queue\n[]\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=33053189",
        "commit_url": "https://github.com/google/guava/commit/c399bb5be8c6b477656a31927545dbd46eafbc7d",
        "buggy_code": "@SuppressWarnings(\"deprecated\") // test of a deprecated method",
        "fixed_code": "@SuppressWarnings(\"deprecation\") // test of a deprecated method",
        "patch": "@@ -101,7 +101,7 @@ public void testCompareTrueFirst() {\n     assertTrue(ComparisonChain.start().compareTrueFirst(false, false).result() == 0);\n   }\n \n-  @SuppressWarnings(\"deprecated\") // test of a deprecated method\n+  @SuppressWarnings(\"deprecation\") // test of a deprecated method\n   public void testCompareBooleans() {\n     assertTrue(ComparisonChain.start().compare(true, true).result() == 0);\n     assertTrue(ComparisonChain.start().compare(true, false).result() > 0);"
    },
    {
        "commit_id": "0b11aaacc0a7623675755a30aa1b172ad1150644",
        "commit_message": "Move ComputingMapAdapter to MapMaker.\nThis seems to work around the JDK bug that causes http://code.google.com/p/guava-libraries/issues/detail?id=950\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=32499454",
        "commit_url": "https://github.com/google/guava/commit/0b11aaacc0a7623675755a30aa1b172ad1150644",
        "buggy_code": "import com.google.common.collect.ComputingConcurrentHashMap.ComputingMapAdapter;",
        "fixed_code": "import com.google.common.collect.MapMaker.ComputingMapAdapter;",
        "patch": "@@ -25,7 +25,7 @@\n import static com.google.common.collect.MapMakerInternalMapTest.checkExpirationTimes;\n \n import com.google.common.base.Function;\n-import com.google.common.collect.ComputingConcurrentHashMap.ComputingMapAdapter;\n+import com.google.common.collect.MapMaker.ComputingMapAdapter;\n import com.google.common.collect.MapMaker.RemovalCause;\n import com.google.common.collect.MapMakerInternalMap.ReferenceEntry;\n import com.google.common.collect.MapMakerInternalMap.Segment;"
    },
    {
        "commit_id": "ed38ec2fbd739995c79ca020bfcaf04d47082e42",
        "commit_message": "Fix non-fatal GWT compilation errors:\n[ERROR] Errors in 'generated://1DCFAC23BE2D8C9BC205377978109764/com/google/common/collect/ForwardingImmutableList_FieldSerializer.java'\n[ERROR] Line 12: The method deserialize(SerializationStreamReader, ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR] Line 17: The method serialize(SerializationStreamWriter, ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com.google.common.collect.ForwardingImmutableList_FieldSerializer7338663414191156255.java\n[ERROR] Errors in 'generated://678D18D6E583C7FF092AA10F8A0D52A6/com/google/common/collect/ImmutableAsList_FieldSerializer.java'\n[ERROR] Line 12: The method deserialize(SerializationStreamReader, ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR] Line 17: The method serialize(SerializationStreamWriter, ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com.google.common.collect.ImmutableAsList_FieldSerializer2670401979529327298.java\nSneak in a little internal cleanup.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=29200972",
        "commit_url": "https://github.com/google/guava/commit/ed38ec2fbd739995c79ca020bfcaf04d47082e42",
        "buggy_code": "public abstract class ForwardingImmutableList<E> extends ImmutableList<E> {",
        "fixed_code": "abstract class ForwardingImmutableList<E> extends ImmutableList<E> {",
        "patch": "@@ -27,7 +27,7 @@\n  *\n  * @author Hayward Chan\n  */\n-public abstract class ForwardingImmutableList<E> extends ImmutableList<E> {\n+abstract class ForwardingImmutableList<E> extends ImmutableList<E> {\n \n   ForwardingImmutableList() {\n   }"
    },
    {
        "commit_id": "ed38ec2fbd739995c79ca020bfcaf04d47082e42",
        "commit_message": "Fix non-fatal GWT compilation errors:\n[ERROR] Errors in 'generated://1DCFAC23BE2D8C9BC205377978109764/com/google/common/collect/ForwardingImmutableList_FieldSerializer.java'\n[ERROR] Line 12: The method deserialize(SerializationStreamReader, ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR] Line 17: The method serialize(SerializationStreamWriter, ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com.google.common.collect.ForwardingImmutableList_FieldSerializer7338663414191156255.java\n[ERROR] Errors in 'generated://678D18D6E583C7FF092AA10F8A0D52A6/com/google/common/collect/ImmutableAsList_FieldSerializer.java'\n[ERROR] Line 12: The method deserialize(SerializationStreamReader, ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR] Line 17: The method serialize(SerializationStreamWriter, ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com.google.common.collect.ImmutableAsList_FieldSerializer2670401979529327298.java\nSneak in a little internal cleanup.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=29200972",
        "commit_url": "https://github.com/google/guava/commit/ed38ec2fbd739995c79ca020bfcaf04d47082e42",
        "buggy_code": "abstract class ForwardingImmutableList<E> extends ImmutableList<E> {",
        "fixed_code": "abstract class ForwardingImmutableList<E> {",
        "patch": "@@ -24,6 +24,6 @@\n  * @author Chris Povirk\n  */\n @GwtCompatible(emulated = true)\n-abstract class ForwardingImmutableList<E> extends ImmutableList<E> {\n+abstract class ForwardingImmutableList<E> {\n   private ForwardingImmutableList() {}\n }"
    },
    {
        "commit_id": "d72c700e82a8aa728569ff7182aac5b63978f83f",
        "commit_message": "Fix GWT behavior of \"opportunistic\" ImmutableList subclasses.\nThe \"standard\" ImmutableLists were fine, but Lists.charactersOf() and\nTransformedImmutableList were broken.\nUnder Java, they inherited working implementations of their methods; under GWT,\nthey inherited versions that forwarded to an empty \"delegate\" collection.\nI've overridden all forwarding methods in the GWT emulation in order to avoid\nthis.\nI've also added tests for charactersOf(), which reveal that GWT\nString/StringBuilder doesn't perform index checks, so I've added manual checks.\nTransformedImmutableList could probably stand to have some tests, too, but at\nleast it will be exercised indirectly through the asList() views implemented\natop it in Louis's coming CL, which is in fact what revealed these problems.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=28741879",
        "commit_url": "https://github.com/google/guava/commit/d72c700e82a8aa728569ff7182aac5b63978f83f",
        "buggy_code": "class RegularImmutableList<E> extends ImmutableList<E> {",
        "fixed_code": "class RegularImmutableList<E> extends ForwardingImmutableList<E> {",
        "patch": "@@ -23,7 +23,7 @@\n  *\n  * @author Hayward Chan\n  */\n-class RegularImmutableList<E> extends ImmutableList<E> {\n+class RegularImmutableList<E> extends ForwardingImmutableList<E> {\n   RegularImmutableList(List<E> delegate) {\n     super(delegate);\n   }"
    },
    {
        "commit_id": "d72c700e82a8aa728569ff7182aac5b63978f83f",
        "commit_message": "Fix GWT behavior of \"opportunistic\" ImmutableList subclasses.\nThe \"standard\" ImmutableLists were fine, but Lists.charactersOf() and\nTransformedImmutableList were broken.\nUnder Java, they inherited working implementations of their methods; under GWT,\nthey inherited versions that forwarded to an empty \"delegate\" collection.\nI've overridden all forwarding methods in the GWT emulation in order to avoid\nthis.\nI've also added tests for charactersOf(), which reveal that GWT\nString/StringBuilder doesn't perform index checks, so I've added manual checks.\nTransformedImmutableList could probably stand to have some tests, too, but at\nleast it will be exercised indirectly through the asList() views implemented\natop it in Louis's coming CL, which is in fact what revealed these problems.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=28741879",
        "commit_url": "https://github.com/google/guava/commit/d72c700e82a8aa728569ff7182aac5b63978f83f",
        "buggy_code": "final class SingletonImmutableList<E> extends ImmutableList<E> {",
        "fixed_code": "final class SingletonImmutableList<E> extends ForwardingImmutableList<E> {",
        "patch": "@@ -25,7 +25,7 @@\n  *\n  * @author Hayward Chan\n  */\n-final class SingletonImmutableList<E> extends ImmutableList<E> {\n+final class SingletonImmutableList<E> extends ForwardingImmutableList<E> {\n \n   // This reference is used both by the custom field serializer, and by the\n   // GWT compiler to infer the elements of the lists that needs to be"
    },
    {
        "commit_id": "320501e0a6457802f4afc9d2f21cf394b3e173a8",
        "commit_message": "- Eliminate serialization warning on TreeMultiset by marking AbstractSortedMultiset.comparator as @GwtTransient: http://code.google.com/p/guava-libraries/issues/detail?id=871\n- Eliminate reference to long-gone \"Note on element equivalence\" in Multiset docs.\n- Fix ByteStreams.copy inconsistency over whether the output is closed: http://code.google.com/p/guava-libraries/issues/detail?id=757\n- Link in Partition shouldn't contain the space after the word.\n- Mention unsigned types in package-info.\n- Standardize on \"input\" for name of input Future parameters in transformation methods.\n- Remove deprecated Futures.chain for Guava 12.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=27031992",
        "commit_url": "https://github.com/google/guava/commit/320501e0a6457802f4afc9d2f21cf394b3e173a8",
        "buggy_code": "final Comparator<? super E> comparator;",
        "fixed_code": "@GwtTransient final Comparator<? super E> comparator;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n @GwtCompatible\n abstract class AbstractSortedMultiset<E> extends AbstractMultiset<E> implements SortedMultiset<E> {\n-  final Comparator<? super E> comparator;\n+  @GwtTransient final Comparator<? super E> comparator;\n \n   // needed for serialization\n   @SuppressWarnings(\"unchecked\")"
    },
    {
        "commit_id": "556976f81c236be7798e5d065a0dae09ca0cc1d3",
        "commit_message": "Fixing bug in NullPointerTester, where it fails spuriously for methods with no default value for @Nullable parameters.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=26289693",
        "commit_url": "https://github.com/google/guava/commit/556976f81c236be7798e5d065a0dae09ca0cc1d3",
        "buggy_code": "if (!parameterIsPrimitiveOrNullable(func, indexOfParamToSetToNull)) {",
        "fixed_code": "if (!parameterIsPrimitiveOrNullable(func, i)) {",
        "patch": "@@ -292,7 +292,7 @@ private Object[] buildParamList(Functor func, int indexOfParamToSetToNull) {\n     for (int i = 0; i < types.length; i++) {\n       if (i != indexOfParamToSetToNull) {\n         params[i] = defaults.get(types[i]);\n-        if (!parameterIsPrimitiveOrNullable(func, indexOfParamToSetToNull)) {\n+        if (!parameterIsPrimitiveOrNullable(func, i)) {\n           Assert.assertTrue(\"No default value found for \" + types[i].getName(),\n               params[i] != null);\n         }"
    },
    {
        "commit_id": "e4916cf1ad5e18427e76851741c88eb901d4bf8c",
        "commit_message": "Fix TreeMultiset.subMultiset().size() overflow condition.\nFrom Louis: http://codereview.appspot.com/5153041/\n\nAlso, remove SortedTreeMultiset now that it's been moved to TreeMultiset, since it, too, would have needed to have been updated in this CL.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=24372922",
        "commit_url": "https://github.com/google/guava/commit/e4916cf1ad5e18427e76851741c88eb901d4bf8c",
        "buggy_code": "public int treeValue(@Nullable SimpleNode tree) {",
        "fixed_code": "public long treeValue(@Nullable SimpleNode tree) {",
        "patch": "@@ -106,7 +106,7 @@ public int entryValue(SimpleNode entry) {\n     }\n \n     @Override\n-    public int treeValue(@Nullable SimpleNode tree) {\n+    public long treeValue(@Nullable SimpleNode tree) {\n       if (tree == null) {\n         return 0;\n       } else {"
    },
    {
        "commit_id": "3ba2abcbae26e2943b5514910a3ccee4966bae65",
        "commit_message": "Handling paths of the form x/../../b (bug 705)",
        "commit_url": "https://github.com/google/guava/commit/3ba2abcbae26e2943b5514910a3ccee4966bae65",
        "buggy_code": "if (name[q] != name[firstNonSlash]) {",
        "fixed_code": "if (name[q] != name[firstNonSlash] || name[q] == '.') {",
        "patch": "@@ -803,7 +803,7 @@ && sep(name, p + 2)) {\n         }\n       } else {\n         /* real path element */\n-        if (name[q] != name[firstNonSlash]) {\n+        if (name[q] != name[firstNonSlash] || name[q] == '.') {\n           name[q++] = '/';\n         }\n         while ((q < name.length && p < name.length) &&"
    },
    {
        "commit_id": "ad3640c6eec0ccac230a0f9c96b343aa025b89bb",
        "commit_message": "\n- Fix strongValues key/value confusion reported on guava-discuss.\n- Make HostAndPort's port field final.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=2004\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@429 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/ad3640c6eec0ccac230a0f9c96b343aa025b89bb",
        "buggy_code": "private int port;",
        "fixed_code": "private final int port;",
        "patch": "@@ -63,7 +63,7 @@ public final class HostAndPort {\n   private final String host;\n \n   /** Validated port number in the range [0..65535], or NO_PORT */\n-  private int port;\n+  private final int port;\n \n   /** True if the parsed host has colons, but no surrounding brackets. */\n   private final boolean hasBracketlessColons;"
    },
    {
        "commit_id": "036ebbac7132b8ae7156a7939d77578f668b3c35",
        "commit_message": "\n- Make AbstractService's Futures implement ListenableFuture by reimplementing the custom Transition class on top of AbstractListenableFuture.\n- Remove asciiHtmlEscaper, replaced with Html.htmlContentEscaper.\n- Make Service.start() and stop() return a ListenableFuture.\n- Eliminate the distinction between Range and DiscreteRange and move operations that used to live in DiscreteRange into ContiguousSet.\n- Preserve strict/lenient validation when deriving IDN instances from other IDN instances. No test changes yet; wanted to get feedback on the approach first.\n- Add a deprecated version of Ranges.integers() and Ranges.longs() to temporarily fix builds.\n- MapMaker:\n\t- containsValue should fail on collected key\n\t- refine expiration javadocs\n\t- structure all reads similarly, documenting more assumptions\n\t- more white-box tests\n- Use constants in UriEscapers instead of PercentEscaper, deprecating the latter.\n- Make Javadoc (and occasionally FindBugs) happier.\n- Rename package.html files to package-info.html, which are preferred as for JDK 5 (see `man javadoc`).\n- Avoid stack overflow.\n- Make InternetDomainName lenient validation a little less lenient.\n- Remove all usages of Ranges.longs() and Ranges.integers().\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=946\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@262 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/036ebbac7132b8ae7156a7939d77578f668b3c35",
        "buggy_code": "super(Sets.newTreeSet(comparator));",
        "fixed_code": "super(comparator);",
        "patch": "@@ -25,6 +25,6 @@\n  */\n class EmptyImmutableSortedSet<E> extends ImmutableSortedSet<E> {\n   EmptyImmutableSortedSet(Comparator<? super E> comparator) {\n-    super(Sets.newTreeSet(comparator));\n+    super(comparator);\n   }\n }"
    },
    {
        "commit_id": "ad3f05ddb4028b3bfd022388783fb718dd001c5a",
        "commit_message": "Restore CharMatcher.SINGLE_WIDTH\nDeprecate MapMaker.expiration\nMake Equivalences.equals/identity null-aware, deprecate nullAwareEquals\nLists.reverse out of beta\nFix some multimap javadoc problems\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@159 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/ad3f05ddb4028b3bfd022388783fb718dd001c5a",
        "buggy_code": "@Beta public static <T> List<T> reverse(List<T> list) {",
        "fixed_code": "public static <T> List<T> reverse(List<T> list) {",
        "patch": "@@ -708,7 +708,7 @@ private static final class CharSequenceAsList\n    *\n    * @since 7\n    */\n-  @Beta public static <T> List<T> reverse(List<T> list) {\n+  public static <T> List<T> reverse(List<T> list) {\n     if (list instanceof ReverseList) {\n       return ((ReverseList<T>) list).getForwardList();\n     } else if (list instanceof RandomAccess) {"
    },
    {
        "commit_id": "4fdf70002a73087bcb94ac0619f819bbc6c035d8",
        "commit_message": "@Beta release of MapMaker.maximumSize()!\n\nAdd Interners.asFunction per issue 398.\n\t\nStart emulating ImmutableAsList, and make it GWT serializable.\n\nAdd missing Javadoc to Maps.EntryTransformer.transformEntry().\n\t\nSince ConcurrentHashMap consistently invokes equals() as\n\"objectYouJustGaveMe.equals(objectAlreadyInMap)\", it was suggested we should do\nthe same with our equivalences.\n\t\nVarious small doc fixes.\n\n\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@132 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/4fdf70002a73087bcb94ac0619f819bbc6c035d8",
        "buggy_code": "return new RegularImmutableList<E>(Arrays.asList(castedArray));",
        "fixed_code": "return new ImmutableAsList<E>(Arrays.asList(castedArray));",
        "patch": "@@ -129,7 +129,7 @@ ImmutableList<E> createAsList() {\n       default:\n         @SuppressWarnings(\"unchecked\")\n         E[] castedArray = (E[]) toArray();\n-        return new RegularImmutableList<E>(Arrays.asList(castedArray));\n+        return new ImmutableAsList<E>(Arrays.asList(castedArray));\n     }\n   }\n   static <E> ImmutableCollection<E> unsafeDelegate(Collection<E> delegate) {"
    },
    {
        "commit_id": "4fdf70002a73087bcb94ac0619f819bbc6c035d8",
        "commit_message": "@Beta release of MapMaker.maximumSize()!\n\nAdd Interners.asFunction per issue 398.\n\t\nStart emulating ImmutableAsList, and make it GWT serializable.\n\nAdd missing Javadoc to Maps.EntryTransformer.transformEntry().\n\t\nSince ConcurrentHashMap consistently invokes equals() as\n\"objectYouJustGaveMe.equals(objectAlreadyInMap)\", it was suggested we should do\nthe same with our equivalences.\n\t\nVarious small doc fixes.\n\n\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@132 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/4fdf70002a73087bcb94ac0619f819bbc6c035d8",
        "buggy_code": "final class RegularImmutableList<E> extends ImmutableList<E> {",
        "fixed_code": "class RegularImmutableList<E> extends ImmutableList<E> {",
        "patch": "@@ -23,7 +23,7 @@\n  *\n  * @author Hayward Chan\n  */\n-final class RegularImmutableList<E> extends ImmutableList<E> {\n+class RegularImmutableList<E> extends ImmutableList<E> {\n   RegularImmutableList(List<E> delegate) {\n     super(delegate);\n   }"
    },
    {
        "commit_id": "4583e8bd8b7eac0e3fbef41d341d57ef5a925c5d",
        "commit_message": "\nLists.charactersOf(CharSequence)\n\nFix RegularImmutableSortedSet.containsAll to handle sets with the same comparator, but different element types.\n\nOrdering needed @Nullables on a few methods (issue 346).\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=219055\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@115 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/4583e8bd8b7eac0e3fbef41d341d57ef5a925c5d",
        "buggy_code": "public int compare(T left, T right) {",
        "fixed_code": "public int compare(@Nullable T left, @Nullable T right) {",
        "patch": "@@ -31,7 +31,7 @@ final class NullsFirstOrdering<T> extends Ordering<T> implements Serializable {\n     this.ordering = ordering;\n   }\n \n-  public int compare(T left, T right) {\n+  public int compare(@Nullable T left, @Nullable T right) {\n     if (left == right) {\n       return 0;\n     }"
    },
    {
        "commit_id": "4583e8bd8b7eac0e3fbef41d341d57ef5a925c5d",
        "commit_message": "\nLists.charactersOf(CharSequence)\n\nFix RegularImmutableSortedSet.containsAll to handle sets with the same comparator, but different element types.\n\nOrdering needed @Nullables on a few methods (issue 346).\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=219055\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@115 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/4583e8bd8b7eac0e3fbef41d341d57ef5a925c5d",
        "buggy_code": "public int compare(T left, T right) {",
        "fixed_code": "public int compare(@Nullable T left, @Nullable T right) {",
        "patch": "@@ -31,7 +31,7 @@ final class NullsLastOrdering<T> extends Ordering<T> implements Serializable {\n     this.ordering = ordering;\n   }\n \n-  public int compare(T left, T right) {\n+  public int compare(@Nullable T left, @Nullable T right) {\n     if (left == right) {\n       return 0;\n     }"
    },
    {
        "commit_id": "b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "commit_message": "\nFix our TODO comments to include username as required, usually naming\nmyself.  Remove a few I don't think we need, and handle one (it said \"use\nthis method from Maps when that class is gwt-safe\"). Make moe not choke on\nunrecognized usernames. Whitelist a few usernames for non-scrubbing who\nhave agreed to it.\n\nR=jlevy\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=92006\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@81 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "buggy_code": "return o.hashCode(); // TODO: why NPE? counter-intuitive.",
        "fixed_code": "return o.hashCode(); // TODO(kevinb): why NPE? counter-intuitive.",
        "patch": "@@ -82,7 +82,7 @@ public boolean equivalent(Object a, Object b) {\n       }\n \n       public int hash(Object o) {\n-        return o.hashCode(); // TODO: why NPE? counter-intuitive.\n+        return o.hashCode(); // TODO(kevinb): why NPE? counter-intuitive.\n       }\n     },\n   }"
    },
    {
        "commit_id": "b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "commit_message": "\nFix our TODO comments to include username as required, usually naming\nmyself.  Remove a few I don't think we need, and handle one (it said \"use\nthis method from Maps when that class is gwt-safe\"). Make moe not choke on\nunrecognized usernames. Whitelist a few usernames for non-scrubbing who\nhave agreed to it.\n\nR=jlevy\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=92006\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@81 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "buggy_code": "@Beta // TODO: make it an abstract class and move to common.util.concurrent",
        "fixed_code": "@Beta // TODO(kevinb): make abstract class? move to common.util.concurrent?",
        "patch": "@@ -46,7 +46,7 @@\n  * @author Jesse Wilson\n  * @since 1\n  */\n-@Beta // TODO: make it an abstract class and move to common.util.concurrent\n+@Beta // TODO(kevinb): make abstract class? move to common.util.concurrent?\n public interface Service {\n   /**\n    * If the service state is {@link State#NEW}, this initiates service startup"
    },
    {
        "commit_id": "b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "commit_message": "\nFix our TODO comments to include username as required, usually naming\nmyself.  Remove a few I don't think we need, and handle one (it said \"use\nthis method from Maps when that class is gwt-safe\"). Make moe not choke on\nunrecognized usernames. Whitelist a few usernames for non-scrubbing who\nhave agreed to it.\n\nR=jlevy\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=92006\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@81 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "buggy_code": "@Beta // TODO: decide best return type",
        "fixed_code": "@Beta // TODO(kevinb): decide best return type",
        "patch": "@@ -189,7 +189,7 @@ public static Throwable getRootCause(Throwable throwable) {\n    * @return an unmodifiable list containing the cause chain starting with\n    *     {@code throwable}\n    */\n-  @Beta // TODO: decide best return type\n+  @Beta // TODO(kevinb): decide best return type\n   public static List<Throwable> getCausalChain(Throwable throwable) {\n     checkNotNull(throwable);\n     List<Throwable> causes = new ArrayList<Throwable>(4);"
    },
    {
        "commit_id": "b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "commit_message": "\nFix our TODO comments to include username as required, usually naming\nmyself.  Remove a few I don't think we need, and handle one (it said \"use\nthis method from Maps when that class is gwt-safe\"). Make moe not choke on\nunrecognized usernames. Whitelist a few usernames for non-scrubbing who\nhave agreed to it.\n\nR=jlevy\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION=92006\n\n\ngit-svn-id: https://guava-libraries.googlecode.com/svn/trunk@81 8138a162-5c33-11de-8abc-d1c337b90d21",
        "commit_url": "https://github.com/google/guava/commit/b3804dc9b51bca094e92f4c21ef263cd5cbb27a1",
        "buggy_code": "@SuppressWarnings(\"unchecked\") // TODO: the right way to explain this??",
        "fixed_code": "@SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??",
        "patch": "@@ -24,7 +24,7 @@\n \n /** An ordering that uses the reverse of the natural order of the values. */\n @GwtCompatible(serializable = true)\n-@SuppressWarnings(\"unchecked\") // TODO: the right way to explain this??\n+@SuppressWarnings(\"unchecked\") // TODO(kevinb): the right way to explain this??\n final class ReverseNaturalOrdering\n     extends Ordering<Comparable> implements Serializable {\n   static final ReverseNaturalOrdering INSTANCE = new ReverseNaturalOrdering();"
    }
]