[
    {
        "commit_id": "12fa43435f8d9ba6dafc967cf4ccc7ef13873170",
        "commit_message": "Fix typo in `analyze_and_compare.py` (#461)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/12fa43435f8d9ba6dafc967cf4ccc7ef13873170",
        "buggy_code": "if job.is_failed == 'passed' and original_result['tr_log_status'] == 'broken':",
        "fixed_code": "if job.f_or_p == 'passed' and original_result['tr_log_status'] == 'broken':",
        "patch": "@@ -78,7 +78,7 @@ def _get_original_result(analyzer, utils, job):\n         raise ReproduceError('Original log was not generated from a job in a supported programming language. '\n                              'The primary language was \"{}.\"'.format(original_result['primary_language']))\n \n-    if job.is_failed == 'passed' and original_result['tr_log_status'] == 'broken':\n+    if job.f_or_p == 'passed' and original_result['tr_log_status'] == 'broken':\n         log.warning('Analyzer incorrectly classified an ok original log as broken. Overriding.')\n         original_result['tr_log_status'] = 'ok'\n "
    },
    {
        "commit_id": "dff8daf8fb6ef54bf33b722be53ee3fb749c0f5c",
        "commit_message": "Analyzer updates (#453)\n\n* Retool maven analyzer:\r\n\r\n- Support later versions of maven\r\n- Better support for parameterized tests\r\n\r\n* Change gradle analyzer regex\r\n\r\n* Maven: handle more edge cases\r\n\r\n* Maven: remove duplicate failed tests if necessary\r\n\r\n* Gradle: edge cases\r\n\r\n* Pytest: edge case (error collecting dir, not file)\r\n\r\n* More robust maven detection\r\n\r\n* Update tests\r\n\r\n* Slightly refactored maven test class detection\r\n\r\n* Add unit tests\r\n\r\n* Fix lint errors\r\n\r\n* Revert \"Fix lint errors\"\r\n\r\nThis reverts commit f080c4073f8a1cbb895261043123b203d6f6cecc.\r\n\r\n* Fix lint errors\r\n\r\n* Fix test",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/dff8daf8fb6ef54bf33b722be53ee3fb749c0f5c",
        "buggy_code": "maven1 = re.search(r'mvn.*(install|compile|test)', line, re.M)",
        "fixed_code": "maven1 = re.search(r'mvn.*(install|compile|test|verify|package)', line, re.M)",
        "patch": "@@ -50,7 +50,7 @@ def __init__(self):\n \n     def get_build_system_from_build_command(self, lines):\n         for line in lines:\n-            maven1 = re.search(r'mvn.*(install|compile|test)', line, re.M)\n+            maven1 = re.search(r'mvn.*(install|compile|test|verify|package)', line, re.M)\n             maven2 = re.search(r'The command \"mvn ', line, re.M)\n             gradle1 = re.search(r'gradle(w)?.*(assemble|check|test)', line, re.M)\n             gradle2 = re.search(r'\\* Get more help at https://help\\.gradle\\.org', line, re.M)"
    },
    {
        "commit_id": "dff8daf8fb6ef54bf33b722be53ee3fb749c0f5c",
        "commit_message": "Analyzer updates (#453)\n\n* Retool maven analyzer:\r\n\r\n- Support later versions of maven\r\n- Better support for parameterized tests\r\n\r\n* Change gradle analyzer regex\r\n\r\n* Maven: handle more edge cases\r\n\r\n* Maven: remove duplicate failed tests if necessary\r\n\r\n* Gradle: edge cases\r\n\r\n* Pytest: edge case (error collecting dir, not file)\r\n\r\n* More robust maven detection\r\n\r\n* Update tests\r\n\r\n* Slightly refactored maven test class detection\r\n\r\n* Add unit tests\r\n\r\n* Fix lint errors\r\n\r\n* Revert \"Fix lint errors\"\r\n\r\nThis reverts commit f080c4073f8a1cbb895261043123b203d6f6cecc.\r\n\r\n* Fix lint errors\r\n\r\n* Fix test",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/dff8daf8fb6ef54bf33b722be53ee3fb749c0f5c",
        "buggy_code": "match_obj = re.search(r'_+ ERROR (\\w+ )?([\\w\\/.]+)\\.py _+', line, re.M)",
        "fixed_code": "match_obj = re.search(r'^_+ ERROR (\\w+ )?([\\w\\/.-]+?)(\\.py)? _+$', line, re.M)",
        "patch": "@@ -336,7 +336,7 @@ def analyze_tests(self):\n \n             # Used to extract errored test *files* for pytest\n             # class error, no method name\n-            match_obj = re.search(r'_+ ERROR (\\w+ )?([\\w\\/.]+)\\.py _+', line, re.M)\n+            match_obj = re.search(r'^_+ ERROR (\\w+ )?([\\w\\/.-]+?)(\\.py)? _+$', line, re.M)\n             if match_obj and not summary_seen:\n                 # Matches the likes of _______________ ERROR collecting test/unittests/tts/test_tts.py ________________\n                 # Appends '(test.unittests.tts.test_tts)' to self.tests_failed"
    },
    {
        "commit_id": "bfc3250e462d7b3fe5e268ce68ac18b795236ade",
        "commit_message": "Fix CI tests, run CI under ubuntu 22.04 (#441)\n\n* Remove ubuntu 18 tests\r\n\r\n* Change ubuntu 20 image\r\n\r\n* Add ubuntu 22\r\n\r\n* Bump PyYAML 5.4-->6.0.1",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/bfc3250e462d7b3fe5e268ce68ac18b795236ade",
        "buggy_code": "'PyYAML==5.4',",
        "fixed_code": "'PyYAML==6.0.1',",
        "patch": "@@ -28,7 +28,7 @@\n         'docker==2.5.1',\n         'gitpython==3.0.8',\n         'python-dateutil==2.8.1',\n-        'PyYAML==5.4',\n+        'PyYAML==6.0.1',\n         'beautifulsoup4==4.8.2',\n         'lxml==4.6.5',\n         'packaging==20.7',"
    },
    {
        "commit_id": "d87800a396bf798bfede2f8149baf4a90f854d4a",
        "commit_message": "PairFilter: Replace `utils.download_github_log()` w/ bugswarm.common's `download_log()` (#428)\n\n* Replace utils.download_github_log w/ download_log\r\n\r\n* Remove unused import\r\n\r\n* Fix test",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/d87800a396bf798bfede2f8149baf4a90f854d4a",
        "buggy_code": "if not os.path.exists(orig_log_path) and not utils.download_github_log(repo, job_id, orig_log_path):",
        "fixed_code": "if not os.path.exists(orig_log_path) and not download_log(job_id, orig_log_path, repo=repo):",
        "patch": "@@ -50,7 +50,7 @@ def filter_expired_logs(pairs) -> int:\n             continue\n \n         orig_log_path = utils.get_orig_log_path(job_id)\n-        if not os.path.exists(orig_log_path) and not utils.download_github_log(repo, job_id, orig_log_path):\n+        if not os.path.exists(orig_log_path) and not download_log(job_id, orig_log_path, repo=repo):\n             filtered += 1\n             running_unavailable_count += 1\n             jp[FILTERED_REASON_KEY] = reasons.NO_ORIGINAL_LOG"
    },
    {
        "commit_id": "17a114a7f180b72b492ae7a416e0c03bc2f7697e",
        "commit_message": "Miscellaneous cacher fixes (#395)\n\n* Correctly handle --language argument\r\n\r\n* Have DynamicPatchArtifactTask clean up properly\r\n\r\n* Handle empty `$cacher_input_file` correctly\r\n\r\n* PairChooser: Fix for when --pair-file isn't passed\r\n\r\n* Use absolute path for task json in cacher stage\r\n\r\n* Use $task_json_path consistently\r\n\r\n* Check correct path for orig log\r\n\r\n* Fix TOTAL_STEPS",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/17a114a7f180b72b492ae7a416e0c03bc2f7697e",
        "buggy_code": "location = '../reproducer/intermediates/orig_logs/{}-orig.log'.format(job_id)",
        "fixed_code": "location = '../github-reproducer/intermediates/orig_logs/{}-orig.log'.format(job_id)",
        "patch": "@@ -64,7 +64,7 @@ def _get_orig_logs(self):\n             job_orig_log = {}\n             for f_or_p in ['failed', 'passed']:\n                 job_id = self.job_id[f_or_p]\n-                location = '../reproducer/intermediates/orig_logs/{}-orig.log'.format(job_id)\n+                location = '../github-reproducer/intermediates/orig_logs/{}-orig.log'.format(job_id)\n                 if not os.path.isfile(location):\n                     location = '../pair-filter/original-logs/{}-orig.log'.format(job_id)\n                 if not os.path.isfile(location) and not download_log(job_id, location, repo=self.repo):"
    },
    {
        "commit_id": "17a114a7f180b72b492ae7a416e0c03bc2f7697e",
        "commit_message": "Miscellaneous cacher fixes (#395)\n\n* Correctly handle --language argument\r\n\r\n* Have DynamicPatchArtifactTask clean up properly\r\n\r\n* Handle empty `$cacher_input_file` correctly\r\n\r\n* PairChooser: Fix for when --pair-file isn't passed\r\n\r\n* Use absolute path for task json in cacher stage\r\n\r\n* Use $task_json_path consistently\r\n\r\n* Check correct path for orig log\r\n\r\n* Fix TOTAL_STEPS",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/17a114a7f180b72b492ae7a416e0c03bc2f7697e",
        "buggy_code": "if not os.path.isfile(args.pair_file):",
        "fixed_code": "if args.pair_file and not os.path.isfile(args.pair_file):",
        "patch": "@@ -229,7 +229,7 @@ def _validate_input(argv):\n         p.error('--pair-file cannot be used with -r, -f, or -p.')\n     if args.failed_job_id == args.passed_job_id is not None:\n         p.error('The passed and failed job ID arguments cannot be the same.')\n-    if not os.path.isfile(args.pair_file):\n+    if args.pair_file and not os.path.isfile(args.pair_file):\n         p.error('\"{}\" does not exist or is not a file.'.format(args.pair_file))\n \n     return args.output_path, args.pair_file, args.repo, args.failed_job_id, args.passed_job_id"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "'Can\\'t get http',",
        "fixed_code": "\"Can't get http\",",
        "patch": "@@ -33,7 +33,7 @@ def custom_analyze(self):\n     def get_connection_lines(self):\n         terms_to_catch = [\n             'getRepositorySession()',\n-            'Can\\'t get http',\n+            \"Can't get http\",\n             '404 Not Found',\n             'Failed to fetch',\n             'MockWebServer',"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "curr_test = \"\"",
        "fixed_code": "curr_test = ''",
        "patch": "@@ -126,7 +126,7 @@ def extract_test_method_name(string):\n     def analyze_tests(self):\n         failed_tests_started = False\n         running_test = False\n-        curr_test = \"\"\n+        curr_test = ''\n \n         for line in self.test_lines:\n             if re.search(r'(Failed tests:)|(Tests in error:)', line, re.M):"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "'Can\\'t get http',",
        "fixed_code": "\"Can't get http\",",
        "patch": "@@ -44,7 +44,7 @@ def check_is_invalid_log(self):\n     def get_connection_lines(self):\n         terms_to_catch = [\n             'getRepositorySession()',\n-            'Can\\'t get http',\n+            \"Can't get http\",\n             '404 Not Found',\n             'Failed to fetch',\n             'MockWebServer',"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "log.error('Unable to get build system from BugSwarm\\'s API due to {}'.format(repr(e)))",
        "fixed_code": "log.error(\"Unable to get build system from BugSwarm's API due to {}\".format(repr(e)))",
        "patch": "@@ -151,7 +151,7 @@ def get_build_system_from_bugswarm_database(self, job_id):\n                 build_system = result['build_system']\n                 return build_system if build_system == 'NA' else build_system.lower()\n         except Exception as e:\n-            log.error('Unable to get build system from BugSwarm\\'s API due to {}'.format(repr(e)))\n+            log.error(\"Unable to get build system from BugSwarm's API due to {}\".format(repr(e)))\n         # We call this function in analyzer.py, it expects 'None' if we cannot get build system from BugSwarm API.\n         return None\n "
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "raise AttributeError(\"unreadable attribute\")",
        "fixed_code": "raise AttributeError('unreadable attribute')",
        "patch": "@@ -23,7 +23,7 @@ def __get__(self, obj, objtype=None):\n         if obj is None:\n             return self\n         if self.fget is None:\n-            raise AttributeError(\"unreadable attribute\")\n+            raise AttributeError('unreadable attribute')\n         return self.fget(obj.__class__)\n \n     def __set__(self, obj, value):"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "log.error('Could not download log from {}.'.format(log_url, e.reason))",
        "fixed_code": "log.error('Could not download log from {}: {}.'.format(log_url, e.reason))",
        "patch": "@@ -143,7 +143,7 @@ def _get_log_from_url(log_url: str, max_retries: int, retry_count: int = 0, need\n             log.error('Could not download log from {}, unexpected status code: {}'.format(log_url, e.code))\n         return None\n     except URLError as e:\n-        log.error('Could not download log from {}.'.format(log_url, e.reason))\n+        log.error('Could not download log from {}: {}.'.format(log_url, e.reason))\n         return None\n     except ConnectionResetError:\n         if retry_count == max_retries:"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "log.warning('Project\\'s pyproject.toml contains poetry, but cacher didn\\'t find any poetry command!')",
        "fixed_code": "log.warning(\"Project's pyproject.toml contains poetry, but cacher didn't find any poetry command!\")",
        "patch": "@@ -223,7 +223,7 @@ def _check_poetry(self, container_id, fail_or_pass):\n             )\n \n             if stdout == '0':\n-                log.warning('Project\\'s pyproject.toml contains poetry, but cacher didn\\'t find any poetry command!')\n+                log.warning(\"Project's pyproject.toml contains poetry, but cacher didn't find any poetry command!\")\n \n \n def main(argv=None):"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "key, _, val = line.partition(\"=\")",
        "fixed_code": "key, _, val = line.partition('=')",
        "patch": "@@ -344,7 +344,7 @@ def read_env():\n             for line in f.readlines():\n                 line = line.strip()\n                 if line:\n-                    key, _, val = line.partition(\"=\")\n+                    key, _, val = line.partition('=')\n                     if key and val:\n                         envs[key] = val\n     except FileNotFoundError:"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "warnings.simplefilter(\"ignore\", ResourceWarning)",
        "fixed_code": "warnings.simplefilter('ignore', ResourceWarning)",
        "patch": "@@ -21,7 +21,7 @@ def setUpClass(cls):\n         shutil.copytree(FROM_HOST, join(SANDBOX_DIR, 'from_host'))\n \n     def setUp(self):\n-        warnings.simplefilter(\"ignore\", ResourceWarning)\n+        warnings.simplefilter('ignore', ResourceWarning)\n         if IN_CONTAINER:\n             self.run_command(['sudo', 'mkdir', '-p', '/home/github'])\n             self.run_command(['sudo', 'mv', '/usr/bin/git', '/usr/bin/git_original'])"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "log.warning('Unable to check for pre steps (First step\\'s name starts with \\'Pre\\')')",
        "fixed_code": "log.warning(\"Unable to check for pre steps (First step's name starts with 'Pre')\")",
        "patch": "@@ -307,7 +307,7 @@ def get_failed_step(failed_step_index: int, job_config: dict, api_steps: list):\n     index -= len(build_steps)\n \n     if steps and steps[0].get('name', '').startswith('Pre '):\n-        log.warning('Unable to check for pre steps (First step\\'s name starts with \\'Pre\\')')\n+        log.warning(\"Unable to check for pre steps (First step's name starts with 'Pre')\")\n     else:\n         first_step_index = failed_step_index - index\n         if index >= 0 and len(api_step_names) > first_step_index:"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "output = to_dict(step.process(input, {\"repo\": repo}))",
        "fixed_code": "output = to_dict(step.process(input, {'repo': repo}))",
        "patch": "@@ -182,7 +182,7 @@ def test_construct_config(self, mock: requests_mock.Mocker):\n             expected_output = json.load(f)\n \n         step = ConstructJobConfig()\n-        output = to_dict(step.process(input, {\"repo\": repo}))\n+        output = to_dict(step.process(input, {'repo': repo}))\n \n         for group_id in output:\n             for i in range(len(output[group_id]['pairs'])):"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "log.info('[THREAD {}] Cleaning workspace.'.format(tid, job))",
        "fixed_code": "log.info('[THREAD {}] Cleaning workspace.'.format(tid))",
        "patch": "@@ -75,7 +75,7 @@ def _reproduce_job(self, job, tid):\n \n         # If --keep is specified, gen_files_for_job copies the build directory into the output directory, so it's safe\n         # to remove the workspace job dir.\n-        log.info('[THREAD {}] Cleaning workspace.'.format(tid, job))\n+        log.info('[THREAD {}] Cleaning workspace.'.format(tid))\n         self.utils.clean_workspace_job_dir(job)\n         if not self.keep:\n             log.info('[THREAD {}] Removing reproduction image.'.format(tid))"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "return '${{}}'.format(key), True",
        "fixed_code": "return '${{{}}}'.format(key), True",
        "patch": "@@ -30,4 +30,4 @@ def get(self, path: str, err_if_not_present=False, make_string=False) -> Tuple[A\n         # Otherwise, replace it with environment variable\n         if '-' in key:\n             return '$(printenv {})'.format(key), True\n-        return '${{}}'.format(key), True\n+        return '${{{}}}'.format(key), True"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):",
        "fixed_code": "def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):",
        "patch": "@@ -9,7 +9,7 @@\n \n class Test(unittest.TestCase):\n \n-    def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):\n+    def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):\n         mock_resp = mock.Mock()\n         # mock raise_for_status call w/ optional error\n         mock_resp.raise_for_status = mock.Mock()"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):",
        "fixed_code": "def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):",
        "patch": "@@ -10,7 +10,7 @@\n \n class Test(unittest.TestCase):\n \n-    def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):\n+    def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):\n         mock_resp = mock.Mock()\n         # mock raise_for_status call w/ optional error\n         mock_resp.raise_for_status = mock.Mock()"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "from pair_filter.image_chooser import (ExactImageChooserByCommitSHA, ExactImageChooserByTag,",
        "fixed_code": "from pair_filter.image_chooser import (ExactImageChooserByCommitSHA, ExactImageChooserByTag,  # noqa: E402",
        "patch": "@@ -6,7 +6,7 @@\n \n sys.path.append('../')\n from pair_filter.constants import DOCKERHUB_IMAGES_JSON, TRAVIS_IMAGES_JSON  # noqa: E402\n-from pair_filter.image_chooser import (ExactImageChooserByCommitSHA, ExactImageChooserByTag,\n+from pair_filter.image_chooser import (ExactImageChooserByCommitSHA, ExactImageChooserByTag,  # noqa: E402\n                                        ExactImageChooserByTime)  # noqa: E402\n \n "
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "if __name__ == \"__main__\":",
        "fixed_code": "if __name__ == '__main__':",
        "patch": "@@ -61,5 +61,5 @@ def main():\n         print('Reproducer test passed!')\n \n \n-if __name__ == \"__main__\":\n+if __name__ == '__main__':\n     sys.exit(main())"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "if __name__ == \"__main__\":",
        "fixed_code": "if __name__ == '__main__':",
        "patch": "@@ -35,5 +35,5 @@ def main():\n     return 1\n \n \n-if __name__ == \"__main__\":\n+if __name__ == '__main__':\n     sys.exit(main())"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "if __name__ == \"__main__\":",
        "fixed_code": "if __name__ == '__main__':",
        "patch": "@@ -55,5 +55,5 @@ def main():\n     return 1\n \n \n-if __name__ == \"__main__\":\n+if __name__ == '__main__':\n     sys.exit(main())"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "raise Exception(\"Cannot modify Maven settings correctly\")",
        "fixed_code": "raise Exception('Cannot modify Maven settings correctly')",
        "patch": "@@ -88,7 +88,7 @@ def add_mvn_local_repo(repo):\n     travis_xml_setting_file_path = '/home/travis/.m2/settings.xml'\n     if not os.path.exists(travis_xml_setting_file_path):\n         if found != 2:\n-            raise Exception(\"Cannot modify Maven settings correctly\")\n+            raise Exception('Cannot modify Maven settings correctly')\n         print('Warning: ~/.m2/settings.xml not found')\n     else:\n         travis_xml_setting_file_path = '/home/travis/.m2/settings.xml'"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "with open(yaml_path, \"w+\") as f:",
        "fixed_code": "with open(yaml_path, 'w+') as f:",
        "patch": "@@ -32,7 +32,7 @@ def gen_script(utils, job, dependence_solver):\n         yaml_path = os.path.join(reproducing_dir, '.travis.yml')\n         yaml_dict = job.config\n         fixed_yaml_dict, pip_patch, apt_patch = fix_dict(reproducing_dir, yaml_dict, commit_time)\n-        with open(yaml_path, \"w+\") as f:\n+        with open(yaml_path, 'w+') as f:\n             yaml.dump(fixed_yaml_dict, f)\n \n         if pip_patch:"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "task_dir = \"{}_run{}\".format(self.config.current_task_dir, run)",
        "fixed_code": "task_dir = '{}_run{}'.format(self.config.current_task_dir, run)",
        "patch": "@@ -213,7 +213,7 @@ def get_orig_travis_log_path(self, job):\n \n     def get_jobpair_dir(self, job, run=None):\n         if run:\n-            task_dir = \"{}_run{}\".format(self.config.current_task_dir, run)\n+            task_dir = '{}_run{}'.format(self.config.current_task_dir, run)\n             return os.path.join(task_dir, job.buildpair_name, job.jobpair_name)\n         else:\n             return os.path.join(self.config.current_task_dir, job.buildpair_name, job.jobpair_name)"
    },
    {
        "commit_id": "e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "commit_message": "Enforce single quotes in CI (#391)\n\n* Use flake8-quotes in testing\r\n\r\n* Add .flake8\r\n\r\nSo we don't have to specify everything on the command line\r\n\r\n* Fix flake8 issues\r\n\r\nMost of these are quoting issues, but there are a few other fixes too.\r\n(Namely passing an incorrect number of arguments to str.format)\r\nAutopep8 also messed with the indentation in a couple places. \u00af\\_(\u30c4)_/\u00af\r\n\r\n* Pin flake8(-quotes) versions\r\n\r\n* Use flake8 version compatible with python 3.8.0",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e6ec94de3b4ba3bd41c16dbea57a1bd1566152f2",
        "buggy_code": "def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):",
        "fixed_code": "def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):",
        "patch": "@@ -9,7 +9,7 @@\n \n class Test(unittest.TestCase):\n \n-    def _mock_response(self, status=200, content=\"CONTENT\", json_data=None, raise_for_status=None):\n+    def _mock_response(self, status=200, content='CONTENT', json_data=None, raise_for_status=None):\n         mock_resp = mock.Mock()\n         # mock raise_for_status call w/ optional error\n         mock_resp.raise_for_status = mock.Mock()"
    },
    {
        "commit_id": "06bf2893b3e6b6c8729498ee8a9643762b8b0818",
        "commit_message": "Fix swapped arguments (#383)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/06bf2893b3e6b6c8729498ee8a9643762b8b0818",
        "buggy_code": "compare_result = analyzer.compare_single_log(log_path, orig_log_path, 'github', orig_job_id, bs)",
        "fixed_code": "compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, 'github', bs)",
        "patch": "@@ -228,7 +228,7 @@ def run_build_script(self, container_id, f_or_p, log_path, orig_log_path, orig_j\n             # For Java\n             bs = build_system.lower()\n             assert bs in ['maven', 'gradle', 'ant']\n-        compare_result = analyzer.compare_single_log(log_path, orig_log_path, 'github', orig_job_id, bs)\n+        compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, 'github', bs)\n         with open(log_path + '.cmp', 'w') as f:\n             print(repr(compare_result), file=f)\n         if not compare_result[0]:"
    },
    {
        "commit_id": "9e0576a7b882eebc6aef97471a714e1045105982",
        "commit_message": "GHA merge: common components (#379)\n\n* Rename ci-specific components; add ci flag\r\n\r\n* Copy pair-filter from GHA, with minor revisions\r\n\r\n* Copy pair-classifier from GHA repo w minor changes\r\n\r\n* Add GHA repo's changes to bugswarm/common\r\n\r\n* Apply changes from GHA's generate_pair_input.py\r\n\r\n* Reflect updated analyzer signature\r\n\r\n* Fix workflow file",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/9e0576a7b882eebc6aef97471a714e1045105982",
        "buggy_code": "compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, bs)",
        "fixed_code": "compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, 'travis', build_system=bs)",
        "patch": "@@ -226,7 +226,7 @@ def run_build_script(self, container_id, f_or_p, log_path, orig_log_path, orig_j\n             # For Java\n             bs = build_system.lower()\n             assert bs in ['maven', 'gradle', 'ant']\n-        compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, bs)\n+        compare_result = analyzer.compare_single_log(log_path, orig_log_path, orig_job_id, 'travis', build_system=bs)\n         with open(log_path + '.cmp', 'w') as f:\n             print(repr(compare_result), file=f)\n         if not compare_result[0]:"
    },
    {
        "commit_id": "9e0576a7b882eebc6aef97471a714e1045105982",
        "commit_message": "GHA merge: common components (#379)\n\n* Rename ci-specific components; add ci flag\r\n\r\n* Copy pair-filter from GHA, with minor revisions\r\n\r\n* Copy pair-classifier from GHA repo w minor changes\r\n\r\n* Add GHA repo's changes to bugswarm/common\r\n\r\n* Apply changes from GHA's generate_pair_input.py\r\n\r\n* Reflect updated analyzer signature\r\n\r\n* Fix workflow file",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/9e0576a7b882eebc6aef97471a714e1045105982",
        "buggy_code": "with open('../cache-dependency/output/{}.csv'.format(self.task)) as f:",
        "fixed_code": "with open('../travis-cacher/output/{}.csv'.format(self.task)) as f:",
        "patch": "@@ -32,7 +32,7 @@ def run(self):\n         buildpairs = read_json(self.input_file)\n         # Only check for skipping if CSV mode is disabled.\n         cached_image_tags = []\n-        with open('../cache-dependency/output/{}.csv'.format(self.task)) as f:\n+        with open('../travis-cacher/output/{}.csv'.format(self.task)) as f:\n             for row in f:\n                 # This assumes format  '<image tag>, <succeed/error>, <size>, <size increase>'\n                 row_list = row.split(', ')"
    },
    {
        "commit_id": "daed131bf18e877d15a3a2f71c17cced953a6585",
        "commit_message": "Fix style/linting issues",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/daed131bf18e877d15a3a2f71c17cced953a6585",
        "buggy_code": "return sorted(names_and_configs, key=lambda l: len(l), reverse=True)",
        "fixed_code": "return sorted(names_and_configs, key=lambda lst: len(lst), reverse=True)",
        "patch": "@@ -261,7 +261,7 @@ def expand_job_matrixes(workflow: dict):\n             names_and_configs.append([(job_api_name, job_base_api_name, job_workflow_name, job)])\n \n     # Sort by length in descending order.\n-    return sorted(names_and_configs, key=lambda l: len(l), reverse=True)\n+    return sorted(names_and_configs, key=lambda lst: len(lst), reverse=True)\n \n \n def get_failed_step(failed_step_index: int, job_config: dict, api_steps: list):"
    },
    {
        "commit_id": "d0420875af95c84fe63de47ed01d18953ec2993c",
        "commit_message": "Improve reproducer (#46)\n\n* Fix predefined actions' version problem.\r\n\r\n* Fix ValueError\r\n\r\n* Fix clone_action_repo_if_not_exists\r\n\r\n* Fix missing sha if actions have path problem\r\n\r\n* Fix ref context\r\n\r\n* Fix base_ref/env context\r\n\r\n* Fix ref_name context\r\n\r\n* Fix ref_name context/env\r\n\r\n* Fix GITHUB_EVENT_NAME env\r\n\r\n* Fix GITHUB_REF_PROTECTED env\r\n\r\n* Fix container jobs missing toolcache problem\r\n\r\n* Update Operating System group\r\n\r\n* Fix container and env context\r\n\r\n* Update docker image\r\n\r\n* Fix var name\r\n\r\n* Remove linuxbrew\r\n\r\n* Change directory ownership",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/d0420875af95c84fe63de47ed01d18953ec2993c",
        "buggy_code": "varname = path.upper().replace(' ', '_')",
        "fixed_code": "varname = path.replace(' ', '_')",
        "patch": "@@ -44,7 +44,7 @@ def update_env(self, workflow_env, job, parent_step, step, root_context):\n             self.updating = False\n \n     def get(self, path: str, err_if_not_present=False, make_string=False) -> Tuple[Any, bool]:\n-        varname = path.upper().replace(' ', '_')\n+        varname = path.replace(' ', '_')\n         default_value, default_dyn = super().get(path, err_if_not_present, make_string)\n \n         # Step envs override $GITHUB_ENV. See https://github.com/Robert-Furth/actions-test/actions/runs/3114758307."
    },
    {
        "commit_id": "d0420875af95c84fe63de47ed01d18953ec2993c",
        "commit_message": "Improve reproducer (#46)\n\n* Fix predefined actions' version problem.\r\n\r\n* Fix ValueError\r\n\r\n* Fix clone_action_repo_if_not_exists\r\n\r\n* Fix missing sha if actions have path problem\r\n\r\n* Fix ref context\r\n\r\n* Fix base_ref/env context\r\n\r\n* Fix ref_name context\r\n\r\n* Fix ref_name context/env\r\n\r\n* Fix GITHUB_EVENT_NAME env\r\n\r\n* Fix GITHUB_REF_PROTECTED env\r\n\r\n* Fix container jobs missing toolcache problem\r\n\r\n* Update Operating System group\r\n\r\n* Fix container and env context\r\n\r\n* Update docker image\r\n\r\n* Fix var name\r\n\r\n* Remove linuxbrew\r\n\r\n* Change directory ownership",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/d0420875af95c84fe63de47ed01d18953ec2993c",
        "buggy_code": "self.ref_name = job_object.branch",
        "fixed_code": "self.ref_name = ''",
        "patch": "@@ -52,7 +52,7 @@ def __init__(self, job_object: Job):\n         # The URL of the GitHub GraphQL API.\n         self.graphql_url = 'https://api.github.com/graphql'\n         # The branch or tag name that triggered the workflow run.\n-        self.ref_name = job_object.branch\n+        self.ref_name = ''\n         # true if branch protections are configured for the ref that triggered the workflow run.\n         self.ref_protected = 'false'\n         # The type of ref that triggered the workflow run. Valid values are branch or tag."
    },
    {
        "commit_id": "d0420875af95c84fe63de47ed01d18953ec2993c",
        "commit_message": "Improve reproducer (#46)\n\n* Fix predefined actions' version problem.\r\n\r\n* Fix ValueError\r\n\r\n* Fix clone_action_repo_if_not_exists\r\n\r\n* Fix missing sha if actions have path problem\r\n\r\n* Fix ref context\r\n\r\n* Fix base_ref/env context\r\n\r\n* Fix ref_name context\r\n\r\n* Fix ref_name context/env\r\n\r\n* Fix GITHUB_EVENT_NAME env\r\n\r\n* Fix GITHUB_REF_PROTECTED env\r\n\r\n* Fix container jobs missing toolcache problem\r\n\r\n* Update Operating System group\r\n\r\n* Fix container and env context\r\n\r\n* Update docker image\r\n\r\n* Fix var name\r\n\r\n* Remove linuxbrew\r\n\r\n* Change directory ownership",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/d0420875af95c84fe63de47ed01d18953ec2993c",
        "buggy_code": "gen_dockerfile(job.image_tag, job, job_dispatcher.utils, dockerfile_path)",
        "fixed_code": "gen_dockerfile(job, dockerfile_path)",
        "patch": "@@ -83,7 +83,7 @@ def gen_files_for_job(job_dispatcher, job, copy_files=False, dependency_solver=F\n     # STEP 4: Generate the Dockerfile.\n     dockerfile_path = job_dispatcher.utils.get_dockerfile_path(job)\n     if not isfile(dockerfile_path):\n-        gen_dockerfile(job.image_tag, job, job_dispatcher.utils, dockerfile_path)\n+        gen_dockerfile(job, dockerfile_path)\n \n     # Post-job step.\n     if copy_files:"
    },
    {
        "commit_id": "080a53fdfdd728aa89ea878f994e559c4117b5e9",
        "commit_message": "Fix packaging error due to incomplete package name (#358)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/080a53fdfdd728aa89ea878f994e559c4117b5e9",
        "buggy_code": "packages=find_packages('bugswarm', exclude=['analyzer*']),",
        "fixed_code": "packages=find_packages(exclude=['pair*', 'tests*', 'bugswarm.analyzer*']),",
        "patch": "@@ -23,7 +23,7 @@\n         'License :: OSI Approved :: BSD License',\n     ],\n     zip_safe=False,\n-    packages=find_packages('bugswarm', exclude=['analyzer*']),\n+    packages=find_packages(exclude=['pair*', 'tests*', 'bugswarm.analyzer*']),\n     install_requires=[\n         'requests>=2.20.0',\n         'CacheControl==0.12.3',"
    },
    {
        "commit_id": "47ae6d56faf6af05b8545f59787ed6cbc7caec12",
        "commit_message": "Correctly handle ubuntu-latest and container (#41)\n\n* Handle ubuntu-latest\r\n\r\n* Update reproducer/reproducer/utils.py\r\n\r\nCo-authored-by: Robert Furth <44911447+Robert-Furth@users.noreply.github.com>\r\n\r\n* Fix merge error\r\n\r\n* Fix format error\r\n\r\nCo-authored-by: Robert Furth <44911447+Robert-Furth@users.noreply.github.com>",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/47ae6d56faf6af05b8545f59787ed6cbc7caec12",
        "buggy_code": "gen_dockerfile(job.image_tag, job, dockerfile_path)",
        "fixed_code": "gen_dockerfile(job.image_tag, job, job_dispatcher.utils, dockerfile_path)",
        "patch": "@@ -83,7 +83,7 @@ def gen_files_for_job(job_dispatcher, job, copy_files=False, dependency_solver=F\n     # STEP 4: Generate the Dockerfile.\n     dockerfile_path = job_dispatcher.utils.get_dockerfile_path(job)\n     if not isfile(dockerfile_path):\n-        gen_dockerfile(job.image_tag, job, dockerfile_path)\n+        gen_dockerfile(job.image_tag, job, job_dispatcher.utils, dockerfile_path)\n \n     # Post-job step.\n     if copy_files:"
    },
    {
        "commit_id": "9ecebfca85844efecaa4e1606820e9d652841f04",
        "commit_message": "Fix guan-kevin/hunting-ground4.0 tests (#36)\n\n* Fix guan-kevin/hunting-ground4.0 tests\r\n\r\n* Use 'id-in-workflow' key",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/9ecebfca85844efecaa4e1606820e9d652841f04",
        "buggy_code": "self.status = '${_CONTEXT_JOB_STATUS}'",
        "fixed_code": "self.status = '\"${_GITHUB_JOB_STATUS}\"'",
        "patch": "@@ -4,7 +4,7 @@\n class JobContext(Context):\n     def __init__(self):\n         super().__init__()\n-        self.status = '${_CONTEXT_JOB_STATUS}'\n+        self.status = '\"${_GITHUB_JOB_STATUS}\"'\n \n     def as_dict(self) -> dict:\n         return {'status': self.status}"
    },
    {
        "commit_id": "9ecebfca85844efecaa4e1606820e9d652841f04",
        "commit_message": "Fix guan-kevin/hunting-ground4.0 tests (#36)\n\n* Fix guan-kevin/hunting-ground4.0 tests\r\n\r\n* Use 'id-in-workflow' key",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/9ecebfca85844efecaa4e1606820e9d652841f04",
        "buggy_code": "step_if, _ = expressions.parse_expression(step['if'], job_id, contexts)",
        "fixed_code": "step_if, _ = expressions.parse_expression(step_if, job_id, contexts)",
        "patch": "@@ -57,7 +57,7 @@ def parse(github_builder: GitHubBuilder, step_number, step, envs, working_dir):\n         if not re.search(r'\\b(success|failure|cancelled|always)\\s*\\(\\s*\\)', str(step['if'])):\n             step_if = re.sub(r'^\\s*\\${{|}}\\s*$', '', str(step['if']))\n             step_if = 'success() && ({})'.format(expressions.to_str(step_if))\n-        step_if, _ = expressions.parse_expression(step['if'], job_id, contexts)\n+        step_if, _ = expressions.parse_expression(step_if, job_id, contexts)\n \n     timeout_minutes = 360\n     if 'timeout-minutes' in step:"
    },
    {
        "commit_id": "9ecebfca85844efecaa4e1606820e9d652841f04",
        "commit_message": "Fix guan-kevin/hunting-ground4.0 tests (#36)\n\n* Fix guan-kevin/hunting-ground4.0 tests\r\n\r\n* Use 'id-in-workflow' key",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/9ecebfca85844efecaa4e1606820e9d652841f04",
        "buggy_code": "step_if, _ = expressions.parse_expression(step['if'], job_id, contexts, quote_result=True)",
        "fixed_code": "step_if, _ = expressions.parse_expression(step_if, job_id, contexts, quote_result=True)",
        "patch": "@@ -140,7 +140,7 @@ def parse(github_builder: GitHubBuilder, step_number, step, envs):\n         if not re.search(r'\\b(success|failure|cancelled|always)\\s*\\(\\s*\\)', str(step['if'])):\n             step_if = re.sub(r'^\\s*\\${{|}}\\s*$', '', str(step['if']))\n             step_if = 'success() && ({})'.format(expressions.to_str(step_if))\n-        step_if, _ = expressions.parse_expression(step['if'], job_id, contexts, quote_result=True)\n+        step_if, _ = expressions.parse_expression(step_if, job_id, contexts, quote_result=True)\n \n     step_name = 'Run {}'.format(name)\n "
    },
    {
        "commit_id": "f7493fb87b5f852d5e3b92fbbf006590060a1b19",
        "commit_message": "Fix reproducer pipeline (#31)\n\n* fix reproducer\r\n\r\n* Put helpers script to the right dir\r\n\r\n* No docker image prune for now.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/f7493fb87b5f852d5e3b92fbbf006590060a1b19",
        "buggy_code": "jp['build_system'] == 'Maven' and",
        "fixed_code": "jp['build_system'] in {'Maven', 'Gradle'} and",
        "patch": "@@ -38,7 +38,7 @@ def main(argv):\n         prefix = bp['repo'].replace('/', '-') + '-'\n         for jp in bp['jobpairs']:\n             should_be_cached = (not jp['is_filtered'] and\n-                                jp['build_system'] == 'Maven' and\n+                                jp['build_system'] in {'Maven', 'Gradle'} and\n                                 jp['failed_job']['job_id'] in java_jobs and\n                                 jp['passed_job']['job_id'] in java_jobs)\n             if should_be_cached:"
    },
    {
        "commit_id": "f7493fb87b5f852d5e3b92fbbf006590060a1b19",
        "commit_message": "Fix reproducer pipeline (#31)\n\n* fix reproducer\r\n\r\n* Put helpers script to the right dir\r\n\r\n* No docker image prune for now.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/f7493fb87b5f852d5e3b92fbbf006590060a1b19",
        "buggy_code": "'ADD --chown=github:github {}/helpers /home/github/{}/helpers'.format(passed_job_id, failed_job_id),",
        "fixed_code": "'ADD --chown=github:github {}/helpers /home/github/{}/helpers'.format(passed_job_id, passed_job_id),",
        "patch": "@@ -149,7 +149,7 @@ def _write_package_dockerfile(utils: Utils, jobpair: JobPair):\n         'ADD --chown=github:github {}/run.sh /usr/local/bin/run_passed.sh'.format(passed_job_id),\n         'ADD --chown=github:github {}/actions /home/github/{}/actions'.format(passed_job_id, passed_job_id),\n         'ADD --chown=github:github {}/steps /home/github/{}/steps'.format(passed_job_id, passed_job_id),\n-        'ADD --chown=github:github {}/helpers /home/github/{}/helpers'.format(passed_job_id, failed_job_id),\n+        'ADD --chown=github:github {}/helpers /home/github/{}/helpers'.format(passed_job_id, passed_job_id),\n         'ADD --chown=github:github {}/event.json /home/github/{}/event.json'.format(passed_job_id, passed_job_id),\n         'RUN chmod 777 /usr/local/bin/run_passed.sh',\n         'RUN chmod -R 777 /home/github/{}'.format(passed_job_id),"
    },
    {
        "commit_id": "1134a178d257d179ad05085bc4a150829f325880",
        "commit_message": "Fix reproducer permission and download problems (#22)\n\n* Fix permission and download problems\r\n\r\n* Move zip's dir and catch copy_and_reset_repo error\r\n\r\n* Rename job_dir to job_archive_dir\r\n\r\n* Prevent race condition",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/1134a178d257d179ad05085bc4a150829f325880",
        "buggy_code": "'RUN chown -R github:github /home/github/build/',",
        "fixed_code": "'RUN chmod -R 777 /home/github/build',",
        "patch": "@@ -127,7 +127,7 @@ def _write_package_dockerfile(utils: Utils, jobpair: JobPair):\n         # Add the repositories.\n         'ADD failed.tar /home/github/build/failed/',\n         'ADD passed.tar /home/github/build/passed/',\n-        'RUN chown -R github:github /home/github/build/',\n+        'RUN chmod -R 777 /home/github/build',\n \n         # Add the original logs.\n         'ADD {}-orig.log /home/github/build/'.format(failed_job_id),"
    },
    {
        "commit_id": "1134a178d257d179ad05085bc4a150829f325880",
        "commit_message": "Fix reproducer permission and download problems (#22)\n\n* Fix permission and download problems\r\n\r\n* Move zip's dir and catch copy_and_reset_repo error\r\n\r\n* Rename job_dir to job_archive_dir\r\n\r\n* Prevent race condition",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/1134a178d257d179ad05085bc4a150829f325880",
        "buggy_code": "'RUN chown -R github:github /home/github/build',",
        "fixed_code": "'RUN chmod -R 777 /home/github/build',",
        "patch": "@@ -67,7 +67,7 @@ def _write_dockerfile(destination: str, base_image: str, job_id: str):\n \n         # Add the repository.\n         'ADD repo-to-docker.tar /home/github/build/',\n-        'RUN chown -R github:github /home/github/build',\n+        'RUN chmod -R 777 /home/github/build',\n \n         # Add the build script and predefined actions.\n         'ADD --chown=github:github {}/run.sh /usr/local/bin/'.format(job_id),"
    },
    {
        "commit_id": "5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "commit_message": "Reproducer improvement (#19)\n\n* Run custom actions properly.\r\n\r\n* Support run predefined actions in subdirectory and sha ref.\r\n\r\n* Support jobs.<job_id>.defaults\r\n\r\n* Support workflow level's env and defaults. Fixed some GitHub action env.\r\n\r\n* Support continue-on-error and always() and failure() condition.\r\n\r\n* ImagePackager for GitHub Actions pipeline.\r\n\r\n* Fix ImagePackager and other.\r\n\r\n* Clean up.\r\n\r\n* Fix flake\r\n\r\n* Use container attribute as job runner's image.\r\n\r\n* Fix container option\r\n\r\n* Run private action\r\n\r\n* Correctly handle `runs.using`\r\n\r\n* GitHubBuilder clean up\r\n\r\n* Prepare for composite actions\r\n\r\n* Predefined action parser will handle composite actions.\r\n\r\n* Fix flake\r\n\r\n* Fix composite action's build script\r\n\r\n* Temporary fix: OOM error\r\n\r\n* Fix gradle analyzer, try to fix ansi escape problem by removing tty mode.\r\n\r\n* Fix step name output and Gradle analyzer\r\n\r\n* Fix image building issue.\r\n\r\n* Fix potential permission issue\r\n\r\n* Fix potential permission issue again\r\n\r\n* Fix composite bugswarm_cmd.sh overriding issue.\r\n\r\n* Fix missing image's environment variables issue.\r\n\r\n* Fix composite action.\r\n\r\n* Correctly handle GITHUB_ENV\r\n\r\n* Correctly handle $GITHUB_PATH and fix GITHUB_ENV new line issue.\r\n\r\n* Clean up, use correct node version for container job.\r\n\r\n* Improve image's build time for jobs that use BugSwarm's runner image.\r\n\r\n* Handle basic setup temporarily\r\n\r\n* Fix docker permission issue\r\n\r\n* Fix typo\r\n\r\n* Use /home/github/build instead\r\n\r\n* Ignore cancel workflow action\r\n\r\n* Fix BUILD_PATH in package mode.\r\n\r\n* use >=",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "buggy_code": "if not download_log(job_id, original_log_path):",
        "fixed_code": "if not download_log(job_id, original_log_path, repo=repo):",
        "patch": "@@ -158,7 +158,7 @@ def _write_output_json(self):\n                                 job_name = 'failed_job' if i == 0 else 'passed_job'\n                                 job_id = jp[job_name]['job_id']\n                                 original_log_path = self.utils.get_orig_log_path(job_id)\n-                                if not download_log(job_id, original_log_path):\n+                                if not download_log(job_id, original_log_path, repo=repo):\n                                     continue\n                                 original_result = self.analyzer.analyze_single_log(original_log_path, job_id,\n                                                                                    trigger_sha, repo)"
    },
    {
        "commit_id": "5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "commit_message": "Reproducer improvement (#19)\n\n* Run custom actions properly.\r\n\r\n* Support run predefined actions in subdirectory and sha ref.\r\n\r\n* Support jobs.<job_id>.defaults\r\n\r\n* Support workflow level's env and defaults. Fixed some GitHub action env.\r\n\r\n* Support continue-on-error and always() and failure() condition.\r\n\r\n* ImagePackager for GitHub Actions pipeline.\r\n\r\n* Fix ImagePackager and other.\r\n\r\n* Clean up.\r\n\r\n* Fix flake\r\n\r\n* Use container attribute as job runner's image.\r\n\r\n* Fix container option\r\n\r\n* Run private action\r\n\r\n* Correctly handle `runs.using`\r\n\r\n* GitHubBuilder clean up\r\n\r\n* Prepare for composite actions\r\n\r\n* Predefined action parser will handle composite actions.\r\n\r\n* Fix flake\r\n\r\n* Fix composite action's build script\r\n\r\n* Temporary fix: OOM error\r\n\r\n* Fix gradle analyzer, try to fix ansi escape problem by removing tty mode.\r\n\r\n* Fix step name output and Gradle analyzer\r\n\r\n* Fix image building issue.\r\n\r\n* Fix potential permission issue\r\n\r\n* Fix potential permission issue again\r\n\r\n* Fix composite bugswarm_cmd.sh overriding issue.\r\n\r\n* Fix missing image's environment variables issue.\r\n\r\n* Fix composite action.\r\n\r\n* Correctly handle GITHUB_ENV\r\n\r\n* Correctly handle $GITHUB_PATH and fix GITHUB_ENV new line issue.\r\n\r\n* Clean up, use correct node version for container job.\r\n\r\n* Improve image's build time for jobs that use BugSwarm's runner image.\r\n\r\n* Handle basic setup temporarily\r\n\r\n* Fix docker permission issue\r\n\r\n* Fix typo\r\n\r\n* Use /home/github/build instead\r\n\r\n* Ignore cancel workflow action\r\n\r\n* Fix BUILD_PATH in package mode.\r\n\r\n* use >=",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "buggy_code": "self.is_failed = 'failed' if build.is_failed else 'passed'",
        "fixed_code": "self.is_failed = 'failed' if build.is_failed else 'passed'  # TODO: WHY NOT BOOLEAN???",
        "patch": "@@ -18,7 +18,7 @@ def __init__(self, build, build_job, job_id, language, config, image_tag):\n         self.travis_merge_sha = build.travis_merge_sha\n         self.resettable = build.resettable\n         self.github_archived = build.github_archived\n-        self.is_failed = 'failed' if build.is_failed else 'passed'\n+        self.is_failed = 'failed' if build.is_failed else 'passed'  # TODO: WHY NOT BOOLEAN???\n         if build.buildpair.pr_num != -1:\n             self.is_pr = True\n         else:"
    },
    {
        "commit_id": "5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "commit_message": "Reproducer improvement (#19)\n\n* Run custom actions properly.\r\n\r\n* Support run predefined actions in subdirectory and sha ref.\r\n\r\n* Support jobs.<job_id>.defaults\r\n\r\n* Support workflow level's env and defaults. Fixed some GitHub action env.\r\n\r\n* Support continue-on-error and always() and failure() condition.\r\n\r\n* ImagePackager for GitHub Actions pipeline.\r\n\r\n* Fix ImagePackager and other.\r\n\r\n* Clean up.\r\n\r\n* Fix flake\r\n\r\n* Use container attribute as job runner's image.\r\n\r\n* Fix container option\r\n\r\n* Run private action\r\n\r\n* Correctly handle `runs.using`\r\n\r\n* GitHubBuilder clean up\r\n\r\n* Prepare for composite actions\r\n\r\n* Predefined action parser will handle composite actions.\r\n\r\n* Fix flake\r\n\r\n* Fix composite action's build script\r\n\r\n* Temporary fix: OOM error\r\n\r\n* Fix gradle analyzer, try to fix ansi escape problem by removing tty mode.\r\n\r\n* Fix step name output and Gradle analyzer\r\n\r\n* Fix image building issue.\r\n\r\n* Fix potential permission issue\r\n\r\n* Fix potential permission issue again\r\n\r\n* Fix composite bugswarm_cmd.sh overriding issue.\r\n\r\n* Fix missing image's environment variables issue.\r\n\r\n* Fix composite action.\r\n\r\n* Correctly handle GITHUB_ENV\r\n\r\n* Correctly handle $GITHUB_PATH and fix GITHUB_ENV new line issue.\r\n\r\n* Clean up, use correct node version for container job.\r\n\r\n* Improve image's build time for jobs that use BugSwarm's runner image.\r\n\r\n* Handle basic setup temporarily\r\n\r\n* Fix docker permission issue\r\n\r\n* Fix typo\r\n\r\n* Use /home/github/build instead\r\n\r\n* Ignore cancel workflow action\r\n\r\n* Fix BUILD_PATH in package mode.\r\n\r\n* use >=",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/5b5f7f22d3823b67d80101a5a92e367426e7ff9c",
        "buggy_code": "if not download_log(job_id, original_log_path):",
        "fixed_code": "if not download_log(job_id, original_log_path, repo=repo):",
        "patch": "@@ -60,7 +60,7 @@ def _get_original_result(analyzer, utils, job_id, trigger_sha, repo):\n     if not os.path.isfile(original_log_path):\n         log.debug('Original log not found at {}.'.format(original_log_path))\n         log.info('Download original log.')\n-        if not download_log(job_id, original_log_path):\n+        if not download_log(job_id, original_log_path, repo=repo):\n             log.info('Could not download original log.')\n             return None, original_log_path\n "
    },
    {
        "commit_id": "be163e05881ddde59f67ac13f8e96bedd0bdfa7b",
        "commit_message": "Fix lint issues.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/be163e05881ddde59f67ac13f8e96bedd0bdfa7b",
        "buggy_code": "string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)",
        "fixed_code": "string = re.sub(r'\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)",
        "patch": "@@ -466,7 +466,7 @@ def replace_matrix(config: dict) -> dict:\n                 string = json.dumps(config, skipkeys=True)\n                 matrix = config['strategy']['matrix']\n                 for matrix_key, matrix_val in matrix.items():\n-                    string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)\n+                    string = re.sub(r'\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)\n                 return json.loads(string)\n             except json.JSONDecodeError:\n                 log.error('Cannot replace matrix values.')"
    },
    {
        "commit_id": "b5fc92995376faa96482ffe44464b6280daae0d8",
        "commit_message": "Fix comment.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/b5fc92995376faa96482ffe44464b6280daae0d8",
        "buggy_code": "steps = []  # (Step Number: str, Step Name: str, Step Commands: [str])",
        "fixed_code": "steps = []  # (Step Number: str, Step Name: str, Step Commands: [str], Step Environment Variables: str)",
        "patch": "@@ -38,7 +38,7 @@ def build(self):\n             GitHubBuilder.raise_error(\n                 'Encountered an error while generating the build script: steps attribute is missing from config.', 1)\n \n-        steps = []  # (Step Number: str, Step Name: str, Step Commands: [str])\n+        steps = []  # (Step Number: str, Step Name: str, Step Commands: [str], Step Environment Variables: str)\n         for step_number, step in enumerate(self.job.config['steps']):\n             if 'uses' in step:\n                 steps.append(self.predefined_action(step_number, step))"
    },
    {
        "commit_id": "a04fc6eb8e73055f1ecd32ff7077e6a35685fd2f",
        "commit_message": "Fix replace_matrix's matrix_val cannot accept int",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/a04fc6eb8e73055f1ecd32ff7077e6a35685fd2f",
        "buggy_code": "string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), matrix_val, string)",
        "fixed_code": "string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)",
        "patch": "@@ -466,7 +466,7 @@ def replace_matrix(config: dict) -> dict:\n                 string = json.dumps(config, skipkeys=True)\n                 matrix = config['strategy']['matrix']\n                 for matrix_key, matrix_val in matrix.items():\n-                    string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), matrix_val, string)\n+                    string = re.sub('\\${{{{ matrix.{} }}}}'.format(matrix_key), str(matrix_val), string)\n                 return json.loads(string)\n             except json.JSONDecodeError:\n                 log.error('Cannot replace matrix values.')"
    },
    {
        "commit_id": "88b691dce575724703d6b6e34a95cd270e61f6d6",
        "commit_message": "Fix Dockerfile.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/88b691dce575724703d6b6e34a95cd270e61f6d6",
        "buggy_code": "return '{}.sh'.format(job.job_id)",
        "fixed_code": "return 'run.sh'",
        "patch": "@@ -186,7 +186,7 @@ def copy_dockerfile_from_task_into_workspace(self, job):\n \n     @staticmethod\n     def construct_build_sh_name(job):\n-        return '{}.sh'.format(job.job_id)\n+        return 'run.sh'\n \n     def get_build_sh_path(self, job, reproduce_tmp_path=None):\n         if not reproduce_tmp_path:"
    },
    {
        "commit_id": "b9bfe3d4bfca8680431d10ca4a4480cba5f52ab7",
        "commit_message": "Database and API updates (#345)\n\n* Update schema and database API\r\n\r\n* Add minedProjects repo-ci_service index to DB dump\r\n\r\n* Update existing uses of mined project API methods\r\n\r\n* Fix formatting\r\n\r\n* Set ci_service in PairFinder's MinedProjectBuilder\r\n\r\n* Add `ci_service` key to MinedBuildPairSchema\r\n\r\n* Add `ci_service` to PairFinder output json\r\n\r\n* feat: add failed step kind/command to bp schema",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/b9bfe3d4bfca8680431d10ca4a4480cba5f52ab7",
        "buggy_code": "if not bugswarmapi.set_mined_project_progression_metric(repo, metric_name, metric_value):",
        "fixed_code": "if not bugswarmapi.set_mined_project_progression_metric(repo, 'travis', metric_name, metric_value):",
        "patch": "@@ -119,7 +119,7 @@ def _unfiltered_key(pr: bool):\n                 metric_value = metric_value + original_d['progression_metrics'][metric_name]\n             except KeyError:\n                 pass\n-            if not bugswarmapi.set_mined_project_progression_metric(repo, metric_name, metric_value):\n+            if not bugswarmapi.set_mined_project_progression_metric(repo, 'travis', metric_name, metric_value):\n                 log.error('Encountered an error while setting a progression metric. Exiting.')\n                 sys.exit(1)\n "
    },
    {
        "commit_id": "b9bfe3d4bfca8680431d10ca4a4480cba5f52ab7",
        "commit_message": "Database and API updates (#345)\n\n* Update schema and database API\r\n\r\n* Add minedProjects repo-ci_service index to DB dump\r\n\r\n* Update existing uses of mined project API methods\r\n\r\n* Fix formatting\r\n\r\n* Set ci_service in PairFinder's MinedProjectBuilder\r\n\r\n* Add `ci_service` key to MinedBuildPairSchema\r\n\r\n* Add `ci_service` to PairFinder output json\r\n\r\n* feat: add failed step kind/command to bp schema",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/b9bfe3d4bfca8680431d10ca4a4480cba5f52ab7",
        "buggy_code": "bugswarmapi.set_latest_build_info_metric(repo, highest_build_number, highest_build_number_id)",
        "fixed_code": "bugswarmapi.set_latest_build_info_metric(repo, 'travis', highest_build_number, highest_build_number_id)",
        "patch": "@@ -167,7 +167,7 @@ def process(self, data: Any, context: dict) -> Optional[Any]:\n             msg = 'Did not get any jobs for {}.'.format(repo)\n             # Set the build_number & build_id metric to the latest build info we've received if no jobs are found.\n             bugswarmapi = DatabaseAPI(DATABASE_PIPELINE_TOKEN)\n-            bugswarmapi.set_latest_build_info_metric(repo, highest_build_number, highest_build_number_id)\n+            bugswarmapi.set_latest_build_info_metric(repo, 'travis', highest_build_number, highest_build_number_id)\n             raise StepException(msg)\n \n         # Expose mining progression metrics via the context. Other pipeline steps must not change these values."
    },
    {
        "commit_id": "e69c45e48bb4cdcb5a3ea179ae36826623917fd0",
        "commit_message": "fix attribute name on ResultComparer (#348)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/e69c45e48bb4cdcb5a3ea179ae36826623917fd0",
        "buggy_code": "'could_not_resolve_dep', 'tr_os', 'tr_cookbook'",
        "fixed_code": "'tr_could_not_resolve_dep', 'tr_os', 'tr_cookbook'",
        "patch": "@@ -13,7 +13,7 @@ def compare_attributes(reproduced, original, ignore_status=False):\n         ignored_attributes = [\n             'tr_log_testduration', 'tr_log_buildduration', 'tr_log_setup_time', 'tr_err_msg', 'tr_build_image',\n             'tr_worker_instance', 'tr_connection_lines', 'tr_using_worker',\n-            'could_not_resolve_dep', 'tr_os', 'tr_cookbook'\n+            'tr_could_not_resolve_dep', 'tr_os', 'tr_cookbook'\n         ]\n         if ignore_status:\n             ignored_attributes.append('tr_log_status')"
    },
    {
        "commit_id": "8da8123544052bef5662ae103c293b5fc5b7c868",
        "commit_message": "Fix type passed to API to string (#298)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/8da8123544052bef5662ae103c293b5fc5b7c868",
        "buggy_code": "content = bugswarmapi.get_build_log(job_id[f_or_p])",
        "fixed_code": "content = bugswarmapi.get_build_log(str(job_id[f_or_p]))",
        "patch": "@@ -49,7 +49,7 @@ def cache_artifact_dependency(self):\n         }\n         try:\n             for f_or_p in ['failed', 'passed']:\n-                content = bugswarmapi.get_build_log(job_id[f_or_p])\n+                content = bugswarmapi.get_build_log(str(job_id[f_or_p]))\n                 with open(job_orig_log[f_or_p], 'w') as f:\n                     f.write(content)\n         except Exception:"
    },
    {
        "commit_id": "8da8123544052bef5662ae103c293b5fc5b7c868",
        "commit_message": "Fix type passed to API to string (#298)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/8da8123544052bef5662ae103c293b5fc5b7c868",
        "buggy_code": "content = bugswarmapi.get_build_log(job_id[f_or_p])",
        "fixed_code": "content = bugswarmapi.get_build_log(str(job_id[f_or_p]))",
        "patch": "@@ -41,7 +41,7 @@ def cache_artifact_dependency(self):\n         }\n         try:\n             for f_or_p in ['failed', 'passed']:\n-                content = bugswarmapi.get_build_log(job_id[f_or_p])\n+                content = bugswarmapi.get_build_log(str(job_id[f_or_p]))\n                 with open(job_orig_log[f_or_p], 'w') as f:\n                     f.write(content)\n         except Exception:"
    },
    {
        "commit_id": "51a34979112d4f8158394367841b1c88b7fbdbb5",
        "commit_message": "Add code to separate cached files in artifacts (#277)\n\n* Start on putting functions in caching scripts into classes\r\n\r\n* lint\r\n\r\n* fix compile errors\r\n\r\n* lint\r\n\r\n* lint\r\n\r\n* store_true\r\n\r\n* Add lock to output file\r\n\r\n* Add options to print error / raise exception in run_command()\r\n\r\n* lint\r\n\r\n* Make TMP_DIR only computed once in utils.py\r\n\r\n* Pass TMP_DIR through class\r\n\r\n* lint\r\n\r\n* start copy-gradle\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Also save .gradle in project directory\r\n\r\n* lint\r\n\r\n* Ignore chown error\r\n\r\n* Start rewriting caching script\r\n\r\n* lint\r\n\r\n* self._run_build_script\r\n\r\n* lint\r\n\r\n* lint\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* did some changes\r\n\r\n* debuged\r\n\r\n* Workaround https://github.com/BugSwarm/bugswarm-dev/issues/276\r\n\r\n* debuged\r\n\r\n* Suppress tar error\r\n\r\n* Remove some useless logs\r\n\r\n* Move a lot of functions into classes\r\n\r\n* Add logging to run_command\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Add timeout to _run_build_script\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Log more info\r\n\r\n* Add keep_tars\r\n\r\n* Rewrite CachePython.py\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debugged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Change docker volume to tar\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Update docs\r\n\r\n* did some changes\r\n\r\n* modified:   README.md\r\n\r\n* modified:   README.md\r\n\r\n* no_remove_maven_repositories\r\n\r\n* Add some more arguments\r\n\r\n* Log args\r\n\r\n* modified:   README.md\r\n\r\n* _add_untar_to_build_script\r\n\r\n* Lint\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Handle timeout\r\n\r\n* Add docker login to README.md (closes #246)\r\n\r\n* Remove -d in docker exec\r\n\r\n* modified:   README.md",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/51a34979112d4f8158394367841b1c88b7fbdbb5",
        "buggy_code": "self.run_command('docker exec -td {} sudo chown -R travis:travis {}'.format(container_id, cache_dir_container))",
        "fixed_code": "self.run_command('docker exec -t {} sudo chown -R travis:travis {}'.format(container_id, cache_dir_container))",
        "patch": "@@ -147,7 +147,7 @@ def move_dependencies_into_container(self, container_id, f_or_p):\n             self.run_command('docker exec {} tar xvf {} -C {}'.format(container_id, tar_file_container,\n                                                                       cache_dir_container))\n             self.remove_file_from_container(container_id, tar_file_container)\n-        self.run_command('docker exec -td {} sudo chown -R travis:travis {}'.format(container_id, cache_dir_container))\n+        self.run_command('docker exec -t {} sudo chown -R travis:travis {}'.format(container_id, cache_dir_container))\n \n \n def get_dependencies(log_path):"
    },
    {
        "commit_id": "6d85faf36bc5025d2e2f6010b36687c50887d2a4",
        "commit_message": "Change container for tar xkvf command (#270)\n\n* Start writing m2 copying script\r\n\r\n* Get container_id when starting container\r\n\r\n* Remove find_container_id_by_image_tag\r\n\r\n* .\r\n\r\n* debugged\r\n\r\n* import\r\n\r\n* lint\r\n\r\n* .\r\n\r\n* Complete CacheMaven script with copying\r\n\r\n* lint\r\n\r\n* mkdir\r\n\r\n* Add task-name to container name\r\n\r\n* Remove container\r\n\r\n* debug info\r\n\r\n* add more debug info\r\n\r\n* debugged\r\n\r\n* Remove debug info\r\n\r\n* Pass task_name out\r\n\r\n* 1. `chown` for copied files\r\n2. Disable running the script for package mode\r\n\r\n* debuged\r\n\r\n* Enable aggressive copy\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* debugged\r\n\r\n* debuged\r\n\r\n* Working on argparse\r\n\r\n* Debugged\r\n\r\n* did some changes\r\n\r\n* propagate args\r\n\r\n* Update README\r\n\r\n* debuged\r\n\r\n* lint\r\n\r\n* lint\r\n\r\n* Save log in container\r\n\r\n* Clean up containers correctly\r\n\r\n* Clean up containers correctly\r\n\r\n* Prevent log overwriting\r\n\r\n* lint\r\n\r\n* Change variable name\r\n\r\n* _remove_container_maven_repositories\r\n\r\n* lint\r\n\r\n* Change variable name\r\n\r\n* debuged\r\n\r\n* lint\r\n\r\n* modified:   README.md\r\n\r\n* Skip old files in tar (to prevent error)\r\n\r\n* Do not use --skip-old-files\r\n\r\n* add copy_intermediate_log_out_of_container\r\n\r\n* Add --keep-containers\r\n\r\n* debuged\r\n\r\n* debuged\r\n\r\n* Fix bug\r\n\r\n* lint\r\n\r\n* Add option to container name\r\n\r\n* Also collect stderr in from_host/*.py\r\n\r\n* Remove incorrect fix\r\n\r\n* Use 2>&1 instead of &>\r\n\r\n* .",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/6d85faf36bc5025d2e2f6010b36687c50887d2a4",
        "buggy_code": "'docker exec {} tar --directory / -xkvf {}'.format(container_id, cont_tar))",
        "fixed_code": "'docker exec {} tar --directory / -xkvf {}'.format(container2_id, cont_tar))",
        "patch": "@@ -151,7 +151,7 @@ def _cache_artifact_dependency(image_tag, output_file, args):\n                     copy_file_to_container(container2_id, src, des)\n                     copy_file_to_container(container2_id, host_path, cont_tar)\n                     _, stdout, stderr, ok = run_command(\n-                        'docker exec {} tar --directory / -xkvf {}'.format(container_id, cont_tar))\n+                        'docker exec {} tar --directory / -xkvf {}'.format(container2_id, cont_tar))\n                     if ok:\n                         log.info('Tar xkvf succeed')\n                     else:"
    },
    {
        "commit_id": "0f818d0f75abc758527ead082bf718ef37e94844",
        "commit_message": "Minor bugfix for the result JSON analyzer (#220)\n\nBecause Python3's sort() can't sort lists with both integers and strings, this fix coerces all job names to strings. Tested on the result_json generated from the sannies/mp4parser repository.",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/0f818d0f75abc758527ead082bf718ef37e94844",
        "buggy_code": "all_task_names.append(task_name)",
        "fixed_code": "all_task_names.append(str(task_name))",
        "patch": "@@ -181,7 +181,7 @@ def _get_all_jobpairs_and_task_names(self) -> Tuple[List[JobPair], List[str]]:\n         all_task_names = []\n         for jp in all_jobpairs:\n             for task_name in jp.match_history:\n-                all_task_names.append(task_name)\n+                all_task_names.append(str(task_name))\n         all_task_names = list(set(all_task_names))\n         all_task_names.sort()\n         return all_jobpairs, all_task_names"
    },
    {
        "commit_id": "cb6ac288d92ab8feea9a2725ef637339dba837f7",
        "commit_message": "Added assertions and fix for metrics (#95)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/cb6ac288d92ab8feea9a2725ef637339dba837f7",
        "buggy_code": "result = re.search(r'[0-9]+,?[0-9]+', strong.string)",
        "fixed_code": "result = re.search(r'([0-9]+),?([0-9]+)?', strong.string)",
        "patch": "@@ -41,7 +41,7 @@ def get_changed_files_metrics(soup):\n     for strong in strong_list:\n         # matches numbers similar to 1,000, 10,000, etc & then we strip out the comma\n         # as our previous data is only numbers\n-        result = re.search(r'[0-9]+,?[0-9]+', strong.string)\n+        result = re.search(r'([0-9]+),?([0-9]+)?', strong.string)\n         if ',' in result.group():\n             result = result.group().replace(',', '')\n             list_of_metrics.append(int(result))"
    },
    {
        "commit_id": "d0a699b18886400b4d98c81fd1413ec32e71ca01",
        "commit_message": "Fix run_reproduce_project script (#72)\n\n* fix run reproduce project, bug in utils",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/d0a699b18886400b4d98c81fd1413ec32e71ca01",
        "buggy_code": "return '{}:{}'.format(self.config.dockerhub_repo, image_tag)",
        "fixed_code": "return '{}:{}'.format(self.config.docker_hub_repo, image_tag)",
        "patch": "@@ -375,7 +375,7 @@ def construct_jobpair_image_tag_from_dict(jobpair, slug) -> str:\n         return bugswarmutils.get_image_tag(slug, jobpair['failed_job']['job_id'])\n \n     def construct_full_image_name(self, image_tag):\n-        return '{}:{}'.format(self.config.dockerhub_repo, image_tag)\n+        return '{}:{}'.format(self.config.docker_hub_repo, image_tag)\n \n     @staticmethod\n     def check_disk_space_available():"
    },
    {
        "commit_id": "461de8330ce56b5d6e35708d621547b5f1d00392",
        "commit_message": "Updated DB Directory for new tag field, and added error handling for pair inputs (#36)",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/461de8330ce56b5d6e35708d621547b5f1d00392",
        "buggy_code": "'tag': NonEmptyStr,",
        "fixed_code": "'current_image_tag': NonEmptyStr,",
        "patch": "@@ -75,7 +75,7 @@\n     'reproduce_successes': RequiredInt,\n     'reproduced': RequiredBool,\n     'stability': NonEmptyStr,\n-    'tag': NonEmptyStr,\n+    'current_image_tag': NonEmptyStr,\n     'test_framework': RequiredStr,\n \n     # The project attributes are separate because they may be removed or relocated."
    },
    {
        "commit_id": "6e2ba20591f9cc48af388b4b9cf1c9540471b689",
        "commit_message": "Fix for standalone Analyzer entry.py (#16)\n\n* Fix for standalone Analyzer entry.py\r\n- Added the '--java' argument for analyzing a Java project's log so we error handle as necessary\r\n- Python does need additional arguments provided to analyze\r\n\r\n* Added --java argument to examples\r\n\r\n* Reverting all code back to Abigail's solution and changed pair-classifier to use repo and trigger_sha parameters\r\n\r\n* Deleting unnecessary changes\r\n\r\n* Testing statushero\r\n\r\n* Reverting test for testing statushero\r\n\r\n* Reverted argument to previous code",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/6e2ba20591f9cc48af388b4b9cf1c9540471b689",
        "buggy_code": "failed_job_id)",
        "fixed_code": "failed_job_id, trigger_sha=failed_sha, repo=repo)",
        "patch": "@@ -154,7 +154,7 @@ def run(repo: str, dir_of_jsons: str, args: dict):\n \n                 try:\n                     result = analyzer.analyze_single_log('{}/{}-orig.log'.format(origin_log_dir, failed_job_id),\n-                                                         failed_job_id)\n+                                                         failed_job_id, trigger_sha=failed_sha, repo=repo)\n                 except BaseException:\n                     log.error('Error analyzing log for {}'.format(failed_job_id))\n                     continue"
    },
    {
        "commit_id": "f360ee92c8d39c486f78ddf08f94eafec62f4079",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/f360ee92c8d39c486f78ddf08f94eafec62f4079",
        "buggy_code": "ts, r = self. self.get_trigger_sha_and_repo(job_ids[i])",
        "fixed_code": "ts, r = self.get_trigger_sha_and_repo(job_ids[i])",
        "patch": "@@ -260,7 +260,7 @@ def test_detect_analyzer_maven(self):\n         for i, log in enumerate(logs_folder):\n             file_path = logs_folder + log\n             if isfile(file_path) and log[-4:] == \".log\":\n-                ts, r = self. self.get_trigger_sha_and_repo(job_ids[i])\n+                ts, r = self.get_trigger_sha_and_repo(job_ids[i])\n                 result = self.dispatcher.analyze(file_path, job_ids[i], trigger_sha=ts, repo=r)\n                 yield self.compare_analyzer, result, \"java-maven\"\n "
    },
    {
        "commit_id": "4ac6101bf3adaccc289d91e31a439ade8d048bc4",
        "commit_message": "Reformatted DockerHub images JSON file (#8)\n\n* Reformatted DockerHub images JSON file\r\n- Fixed  formatting issue\r\n- Added indentation for  to properly format if generated through script\r\n\r\n* Added missing travis_images.json to reproducer\r\n\r\n* Reverted accidental change to format\r\n\r\n* Renamed file to meet our naming convention\r\n\r\n* Small change regarding new file name\r\n\r\n* Refactored code that parses dockerhub_images.json for REGEX search\r\n\r\n* Added newline at end of file\r\n\r\n* Added unit-testing for pair-filter & code for matching the exact image used\r\n\r\n* Added example comment for what REGEX search matches\r\n\r\n* Renamed test methods & removed code for match object that is handled by another class\r\n\r\n* Removed unused import and blank lines\r\n\r\n* Removed blank line at the end of the file\r\n\r\n* Add dockerhub_images.json file\r\n\r\n* Added pair-filter testing into main.yml",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/4ac6101bf3adaccc289d91e31a439ade8d048bc4",
        "buggy_code": "json.dump(image_list, file)",
        "fixed_code": "json.dump(image_list, file, indent=2)",
        "patch": "@@ -14,7 +14,7 @@ def generate_image_file():\n     for repo_name in DOCKERHUB_REPO_NAME:\n         image_list[repo_name] = utils._registry_tags_list(repo_name)\n     with open(DOCKERHUB_IMAGES_JSON, 'w+') as file:\n-        json.dump(image_list, file)\n+        json.dump(image_list, file, indent=2)\n \n \n def main():"
    },
    {
        "commit_id": "4ac6101bf3adaccc289d91e31a439ade8d048bc4",
        "commit_message": "Reformatted DockerHub images JSON file (#8)\n\n* Reformatted DockerHub images JSON file\r\n- Fixed  formatting issue\r\n- Added indentation for  to properly format if generated through script\r\n\r\n* Added missing travis_images.json to reproducer\r\n\r\n* Reverted accidental change to format\r\n\r\n* Renamed file to meet our naming convention\r\n\r\n* Small change regarding new file name\r\n\r\n* Refactored code that parses dockerhub_images.json for REGEX search\r\n\r\n* Added newline at end of file\r\n\r\n* Added unit-testing for pair-filter & code for matching the exact image used\r\n\r\n* Added example comment for what REGEX search matches\r\n\r\n* Renamed test methods & removed code for match object that is handled by another class\r\n\r\n* Removed unused import and blank lines\r\n\r\n* Removed blank line at the end of the file\r\n\r\n* Add dockerhub_images.json file\r\n\r\n* Added pair-filter testing into main.yml",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/4ac6101bf3adaccc289d91e31a439ade8d048bc4",
        "buggy_code": "log.info('File dockerhub_image.json not found. Please run gen-image-list.py')",
        "fixed_code": "log.info('File dockerhub_image.json not found. Please run gen_image_list.py')",
        "patch": "@@ -176,7 +176,7 @@ def main(argv=None):\n     # Log the current version of this BugSwarm component.\n     log.info(get_current_component_version_message('PairFilter'))\n     if not path.exists(DOCKERHUB_IMAGES_JSON):\n-        log.info('File dockerhub_image.json not found. Please run gen-image-list.py')\n+        log.info('File dockerhub_image.json not found. Please run gen_image_list.py')\n \n     repo, dir_of_jsons = _validate_input(argv)\n     PairFilter.run(repo, dir_of_jsons)"
    },
    {
        "commit_id": "ccb4ca3dff94aa52489e540165d6297a7c72461a",
        "commit_message": "Merge pull request #6 from BugSwarm/fix-missing-parameter\n\nChecking Docker Storage missing parameter",
        "commit_url": "https://github.com/BugSwarm/bugswarm/commit/ccb4ca3dff94aa52489e540165d6297a7c72461a",
        "buggy_code": "if not self.utils.check_docker_disk_space_available():",
        "fixed_code": "if not self.utils.check_docker_disk_space_available(self.docker_storage_path):",
        "patch": "@@ -75,7 +75,7 @@ def run(self):\n                         raise OSError(msg)\n                 if not self.utils.check_docker_disk_space_available(self.docker_storage_path):\n                     self.utils.clean_docker_disk_usage(self.docker)\n-                    if not self.utils.check_docker_disk_space_available():\n+                    if not self.utils.check_docker_disk_space_available(self.docker_storage_path):\n                         msg = 'Still inadequate disk space after removing inactive Docker Images. Exiting.'\n                         log.error(msg)\n                         raise OSError(msg)"
    }
]