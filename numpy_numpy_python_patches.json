[
    {
        "commit_id": "0c33694df077f867d589e45ad75e1e1996024bb3",
        "commit_message": "Merge pull request #28754 from DimitriPapadopoulos/PLE\n\nMNT: Enforce ruff/Pylint Error rules (PLE)",
        "commit_url": "https://github.com/numpy/numpy/commit/0c33694df077f867d589e45ad75e1e1996024bb3",
        "buggy_code": "def __getitem__(self): pass",
        "fixed_code": "def __getitem__(self, _, /): pass",
        "patch": "@@ -638,7 +638,7 @@ def test_stringlike_empty_list(self):\n         b = np.array([b'done'])\n \n         class bad_sequence:\n-            def __getitem__(self): pass\n+            def __getitem__(self, _, /): pass\n             def __len__(self): raise RuntimeError\n \n         assert_raises(ValueError, operator.setitem, u, 0, [])"
    },
    {
        "commit_id": "0c33694df077f867d589e45ad75e1e1996024bb3",
        "commit_message": "Merge pull request #28754 from DimitriPapadopoulos/PLE\n\nMNT: Enforce ruff/Pylint Error rules (PLE)",
        "commit_url": "https://github.com/numpy/numpy/commit/0c33694df077f867d589e45ad75e1e1996024bb3",
        "buggy_code": "__all__ = _pocketfft.__all__.copy()",
        "fixed_code": "__all__ = _pocketfft.__all__.copy()  # noqa: PLE0605",
        "patch": "@@ -207,7 +207,7 @@\n from ._pocketfft import *\n from ._helper import *\n \n-__all__ = _pocketfft.__all__.copy()\n+__all__ = _pocketfft.__all__.copy()  # noqa: PLE0605\n __all__ += _helper.__all__\n \n from numpy._pytesttester import PytestTester"
    },
    {
        "commit_id": "0c33694df077f867d589e45ad75e1e1996024bb3",
        "commit_message": "Merge pull request #28754 from DimitriPapadopoulos/PLE\n\nMNT: Enforce ruff/Pylint Error rules (PLE)",
        "commit_url": "https://github.com/numpy/numpy/commit/0c33694df077f867d589e45ad75e1e1996024bb3",
        "buggy_code": "__all__ = _linalg.__all__.copy()",
        "fixed_code": "__all__ = _linalg.__all__.copy()  # noqa: PLE0605",
        "patch": "@@ -88,7 +88,7 @@\n from . import _linalg\n from ._linalg import *\n \n-__all__ = _linalg.__all__.copy()\n+__all__ = _linalg.__all__.copy()  # noqa: PLE0605\n \n from numpy._pytesttester import PytestTester\n test = PytestTester(__name__)"
    },
    {
        "commit_id": "0c33694df077f867d589e45ad75e1e1996024bb3",
        "commit_message": "Merge pull request #28754 from DimitriPapadopoulos/PLE\n\nMNT: Enforce ruff/Pylint Error rules (PLE)",
        "commit_url": "https://github.com/numpy/numpy/commit/0c33694df077f867d589e45ad75e1e1996024bb3",
        "buggy_code": "__all__ = __all__masked + __some__from_testing",
        "fixed_code": "__all__ = __all__masked + __some__from_testing  # noqa: PLE0605",
        "patch": "@@ -35,7 +35,7 @@\n     'assert_raises'\n     ]\n \n-__all__ = __all__masked + __some__from_testing\n+__all__ = __all__masked + __some__from_testing  # noqa: PLE0605\n \n \n def approx(a, b, fill_value=True, rtol=1e-5, atol=1e-8):"
    },
    {
        "commit_id": "36d8febb4697761aa45a22fa87bed1de0f4d412c",
        "commit_message": "MNT: Apply ruff/Pylint rule  PLW0129\n\nAsserting on a non-empty string literal will always pass\n\nThis line had been modified by #28214 / b45b614 without any explanation.\nI believe it's an error as the current assertion is a no-op. Change to\nhave the test actually test something.",
        "commit_url": "https://github.com/numpy/numpy/commit/36d8febb4697761aa45a22fa87bed1de0f4d412c",
        "buggy_code": "assert f'-I{os.fspath(INCLUDE_DIR)}'",
        "fixed_code": "assert f'-I{os.fspath(INCLUDE_DIR)}' in stdout",
        "patch": "@@ -31,7 +31,7 @@ def test_configtool_version(self):\n \n     def test_configtool_cflags(self):\n         stdout = self.check_numpyconfig('--cflags')\n-        assert f'-I{os.fspath(INCLUDE_DIR)}'\n+        assert f'-I{os.fspath(INCLUDE_DIR)}' in stdout\n \n     def test_configtool_pkgconfigdir(self):\n         stdout = self.check_numpyconfig('--pkgconfigdir')"
    },
    {
        "commit_id": "72e1458a444c41803ef3193ba50d1229f7131bf5",
        "commit_message": "API: Allow forcing an array result in ufuncs (#28576)\n\n* API,ENH: Allow forcing an array result in ufuncs\n\nThis allows using `out=...` for ufuncs (including reductions) to enforce an array result.\nWith it, the result will never be converted to a scalar, but subclasses are preserved\nnormally.\n(A subclass might still misbehave and convert to a scalar anyway, but it would be a bug there.)\n\nThere is some discussion in gh-14489 about this.  I still think `...`\nis the best, because `out=np.ndarray` doesn't generalize for\n`__array_ufunc__`, and yes, I like `...` because it also indicates an\narray return in indexing.  (`arr[i, ...]` always returns an array.)\n\nIt uses this in a few places, although there are many more, e.g. `_methods.py`\nshould probably use it, but it is very subtle there.\n(Also because some paths are probably subtly wrong for object dtype.)\n\n---------\n\nSigned-off-by: Sebastian Berg <sebastianb@nvidia.com>\nCo-authored-by: Marten H. van Kerkwijk <mhvk@astro.utoronto.ca>\nCo-authored-by: Nathan Goldbaum <nathan.goldbaum@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/72e1458a444c41803ef3193ba50d1229f7131bf5",
        "buggy_code": "tmp = array(a2 * b1)",
        "fixed_code": "tmp = np.multiply(a2, b1, out=...)",
        "patch": "@@ -1717,7 +1717,7 @@ def cross2d(x, y):\n             # cp1 = a2 * b0 - a0 * b2\n             # cp2 = a0 * b1 - a1 * b0\n             multiply(a1, b2, out=cp0)\n-            tmp = array(a2 * b1)\n+            tmp = np.multiply(a2, b1, out=...)\n             cp0 -= tmp\n             multiply(a2, b0, out=cp1)\n             multiply(a0, b2, out=tmp)"
    },
    {
        "commit_id": "214b9f7c6d27f48b163dd7adbf9de368ad59859f",
        "commit_message": "Merge pull request #28621 from jsdodge/patch-2\n\nDOC: Update __init__.py",
        "commit_url": "https://github.com/numpy/numpy/commit/214b9f7c6d27f48b163dd7adbf9de368ad59859f",
        "buggy_code": "correct, all operations are that can potentially perform a 0D-array -> scalar",
        "fixed_code": "correct, all operations that can potentially perform a 0D-array -> scalar",
        "patch": "@@ -125,7 +125,7 @@\n corresponding `~numpy.generic` instance. Until the introduction of shape\n typing (see :pep:`646`) it is unfortunately not possible to make the\n necessary distinction between 0D and >0D arrays. While thus not strictly\n-correct, all operations are that can potentially perform a 0D-array -> scalar\n+correct, all operations that can potentially perform a 0D-array -> scalar\n cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n If it is known in advance that an operation *will* perform a"
    },
    {
        "commit_id": "032363362cf40ed67b5971dab9a748e1093dd7e4",
        "commit_message": "Update __init__.py\n\nFix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/032363362cf40ed67b5971dab9a748e1093dd7e4",
        "buggy_code": "correct, all operations are that can potentially perform a 0D-array -> scalar",
        "fixed_code": "correct, all operations that can potentially perform a 0D-array -> scalar",
        "patch": "@@ -125,7 +125,7 @@\n corresponding `~numpy.generic` instance. Until the introduction of shape\n typing (see :pep:`646`) it is unfortunately not possible to make the\n necessary distinction between 0D and >0D arrays. While thus not strictly\n-correct, all operations are that can potentially perform a 0D-array -> scalar\n+correct, all operations that can potentially perform a 0D-array -> scalar\n cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n If it is known in advance that an operation *will* perform a"
    },
    {
        "commit_id": "9159ed17927338b9abd7a0bb0e17104d43121872",
        "commit_message": "BUG: numpy.loadtxt reads only 50000 lines when skip_rows >= max_rows (#28319)\n\n* fixed bug in function _read in numpy/lib/_npyio_impl.py, misnamed variable skiplines as skiprows; added test in numpy/lib/tests/test_loadtxt.py\n\n* fixed sintax in test_loadtxt.py\n\n* changed use of mkstemp with use of tmpdir provided by pytest\n\n* fixed bug in use of tmpdir in loadtxt test\n\n* Update numpy/lib/tests/test_loadtxt.py\n\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>\n\n* Update file numpy/lib/tests/test_loadtxt.py\n\n* Update file numpy/lib/tests/test_loadtxt.py\n\n* Update numpy/lib/tests/test_loadtxt.py\n\n---------\n\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/9159ed17927338b9abd7a0bb0e17104d43121872",
        "buggy_code": "skiprows = 0  # Only have to skip for first chunk",
        "fixed_code": "skiplines = 0  # Only have to skip for first chunk",
        "patch": "@@ -1085,7 +1085,7 @@ def _read(fname, *, delimiter=',', comment='#', quote='\"',\n                 # be adapted (in principle the concatenate could cast).\n                 chunks.append(next_arr.astype(read_dtype_via_object_chunks))\n \n-                skiprows = 0  # Only have to skip for first chunk\n+                skiplines = 0  # Only have to skip for first chunk\n                 if max_rows >= 0:\n                     max_rows -= chunk_size\n                 if len(next_arr) < chunk_size:"
    },
    {
        "commit_id": "52eea8d48ae98bebca251a4acc205f986f905bd5",
        "commit_message": "DOC: fix typo (#28350)",
        "commit_url": "https://github.com/numpy/numpy/commit/52eea8d48ae98bebca251a4acc205f986f905bd5",
        "buggy_code": "intended to be use with :ref:`basics.broadcasting`.  When all",
        "fixed_code": "intended to be used with :ref:`basics.broadcasting`.  When all",
        "patch": "@@ -5138,7 +5138,7 @@ def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):\n         If True the shape of the returned coordinate array for dimension *i*\n         is reduced from ``(N1, ..., Ni, ... Nn)`` to\n         ``(1, ..., 1, Ni, 1, ..., 1)``.  These sparse coordinate grids are\n-        intended to be use with :ref:`basics.broadcasting`.  When all\n+        intended to be used with :ref:`basics.broadcasting`.  When all\n         coordinates are used in an expression, broadcasting still leads to a\n         fully-dimensonal result array.\n "
    },
    {
        "commit_id": "137ca3cd3f8deb8ee1ee795d80bd51643fee0f82",
        "commit_message": "MAINT: spawn fewer threads to hopefully fix 32 bit runners",
        "commit_url": "https://github.com/numpy/numpy/commit/137ca3cd3f8deb8ee1ee795d80bd51643fee0f82",
        "buggy_code": "run_threaded(closure, 1000, pass_barrier=True)",
        "fixed_code": "run_threaded(closure, 250, pass_barrier=True)",
        "patch": "@@ -262,4 +262,4 @@ def closure(b):\n         b.wait()\n         np.full((10, 10), 1, _rational_tests.rational)\n \n-    run_threaded(closure, 1000, pass_barrier=True)\n+    run_threaded(closure, 250, pass_barrier=True)"
    },
    {
        "commit_id": "958a5de42447119bf6fa0d5417e642dfbd1a5ff4",
        "commit_message": "Merge pull request #28252 from haampie/hs/fix/redundant-tuple\n\ntest_casting_unittests.py: remove tuple",
        "commit_url": "https://github.com/numpy/numpy/commit/958a5de42447119bf6fa0d5417e642dfbd1a5ff4",
        "buggy_code": "arr_NULLs.astype(dtype),",
        "fixed_code": "arr_NULLs.astype(dtype)",
        "patch": "@@ -802,7 +802,7 @@ def test_object_casts_NULL_None_equivalence(self, dtype):\n             expected = arr_normal.astype(dtype)\n         except TypeError:\n             with pytest.raises(TypeError):\n-                arr_NULLs.astype(dtype),\n+                arr_NULLs.astype(dtype)\n         else:\n             assert_array_equal(expected, arr_NULLs.astype(dtype))\n "
    },
    {
        "commit_id": "e2afc3c8c57e3822940ecdc25ca62edbbaece52b",
        "commit_message": "Merge pull request #28074 from Shashwatpandey4/issue-27995-gradient-varargs\n\nDOC: clarify np.gradient varargs requirement for axis parameter",
        "commit_url": "https://github.com/numpy/numpy/commit/e2afc3c8c57e3822940ecdc25ca62edbbaece52b",
        "buggy_code": "If `axis` is given, the number of varargs must equal the number of axes.",
        "fixed_code": "If `axis` is given, the number of varargs must equal the number of axes specified in the axis parameter.",
        "patch": "@@ -999,7 +999,7 @@ def gradient(f, *varargs, axis=None, edge_order=1):\n            the corresponding dimension\n         4. Any combination of N scalars/arrays with the meaning of 2. and 3.\n \n-        If `axis` is given, the number of varargs must equal the number of axes.\n+        If `axis` is given, the number of varargs must equal the number of axes specified in the axis parameter.\n         Default: 1. (see Examples below).\n \n     edge_order : {1, 2}, optional"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "raise(",
        "fixed_code": "raise (",
        "patch": "@@ -277,7 +277,7 @@ def _set_mem_rlimit(max_mem=None):\n def _commit_to_sha(commit):\n     p = spin.util.run(['git', 'rev-parse', commit], output=False, echo=False)\n     if p.returncode != 0:\n-        raise(\n+        raise (\n             click.ClickException(\n                 f'Could not find SHA matching commit `{commit}`'\n             )"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "self.data = self.data * self.data.T*1j",
        "fixed_code": "self.data = self.data * self.data.T * 1j",
        "patch": "@@ -52,7 +52,7 @@ class StatsReductions(Benchmark):\n     def setup(self, dtype):\n         self.data = np.ones(200, dtype=dtype)\n         if dtype.startswith('complex'):\n-            self.data = self.data * self.data.T*1j\n+            self.data = self.data * self.data.T * 1j\n \n     def time_min(self, dtype):\n         np.min(self.data)"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "[np.full(shape=[s//n_chunk for s, n_chunk in zip(shape, n_chunks)],",
        "fixed_code": "[np.full(shape=[s // n_chunk for s, n_chunk in zip(shape, n_chunks)],",
        "patch": "@@ -76,7 +76,7 @@ class Block2D(Benchmark):\n     def setup(self, shape, dtype, n_chunks):\n \n         self.block_list = [\n-             [np.full(shape=[s//n_chunk for s, n_chunk in zip(shape, n_chunks)],\n+             [np.full(shape=[s // n_chunk for s, n_chunk in zip(shape, n_chunks)],\n                      fill_value=1, dtype=dtype) for _ in range(n_chunks[1])]\n             for _ in range(n_chunks[0])\n         ]"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "plt.plot(x, y, 'purple') # line",
        "fixed_code": "plt.plot(x, y, 'purple')  # line",
        "patch": "@@ -3,6 +3,6 @@\n \n x = np.linspace(0, 5, 20)\n y = np.linspace(0, 10, 20)\n-plt.plot(x, y, 'purple') # line\n+plt.plot(x, y, 'purple')  # line\n plt.plot(x, y, 'o')      # dots\n plt.show()"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "return \"'%s%d'\" % (_kind_name(dtype), 8*dtype.itemsize)",
        "fixed_code": "return \"'%s%d'\" % (_kind_name(dtype), 8 * dtype.itemsize)",
        "patch": "@@ -153,7 +153,7 @@ def _scalar_str(dtype, short):\n \n         # Longer repr, like 'float64'\n         else:\n-            return \"'%s%d'\" % (_kind_name(dtype), 8*dtype.itemsize)\n+            return \"'%s%d'\" % (_kind_name(dtype), 8 * dtype.itemsize)\n \n     elif dtype.isbuiltin == 2:\n         return dtype.type.__name__"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "internal_type =  None if len(val) == 1 else val[1]",
        "fixed_code": "internal_type = None if len(val) == 1 else val[1]",
        "patch": "@@ -259,7 +259,7 @@ def do_generate_api(targets, sources):\n \n     for name, val in types_api.items():\n         index = val[0]\n-        internal_type =  None if len(val) == 1 else val[1]\n+        internal_type = None if len(val) == 1 else val[1]\n         multiarray_api_dict[name] = TypeApi(\n             name, index, 'PyTypeObject', api_name, internal_type)\n "
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "lf = '\\n'+' '*len(prefix)",
        "fixed_code": "lf = '\\n' + ' ' * len(prefix)",
        "patch": "@@ -533,7 +533,7 @@ def __repr__(self):\n             # show zero-length shape unless it is (0,)\n             lst = \"[], shape=%s\" % (repr(self.shape),)\n \n-        lf = '\\n'+' '*len(prefix)\n+        lf = '\\n' + ' ' * len(prefix)\n         if _get_legacy_print_mode() <= 113:\n             lf = ' ' + lf  # trailing space\n         return fmt % (lst, lf, repr_dtype)"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "yield param(2e300+0j, \"complex64\", id=\"complex-to-c8\")",
        "fixed_code": "yield param(2e300 + 0j, \"complex64\", id=\"complex-to-c8\")",
        "patch": "@@ -36,7 +36,7 @@ def values_and_dtypes():\n \n     # Cast to complex32:\n     yield param(2e300, \"complex64\", id=\"float-to-c8\")\n-    yield param(2e300+0j, \"complex64\", id=\"complex-to-c8\")\n+    yield param(2e300 + 0j, \"complex64\", id=\"complex-to-c8\")\n     yield param(2e300j, \"complex64\", id=\"complex-to-c8\")\n     yield param(np.longdouble(2e300), \"complex64\", id=\"longdouble-to-c8\")\n "
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "arr = np.array([0, 10+10j], dtype=\"F\")",
        "fixed_code": "arr = np.array([0, 10 + 10j], dtype=\"F\")",
        "patch": "@@ -292,7 +292,7 @@ def test_fillwithbytes(install_temp):\n def test_complex(install_temp):\n     from checks import inc2_cfloat_struct\n \n-    arr = np.array([0, 10+10j], dtype=\"F\")\n+    arr = np.array([0, 10 + 10j], dtype=\"F\")\n     inc2_cfloat_struct(arr)\n     assert arr[1] == (12 + 12j)\n "
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "[-2*100, -1, 0, 9, 10, 11, 2**63, 2*100])",
        "fixed_code": "[-2 * 100, -1, 0, 9, 10, 11, 2**63, 2 * 100])",
        "patch": "@@ -215,7 +215,7 @@ def test_expected_promotion(expected, dtypes, optional_dtypes, data):\n         [np.int8, np.int16, np.int32, np.int64,\n          np.uint8, np.uint16, np.uint32, np.uint64])\n @pytest.mark.parametrize(\"other_val\",\n-        [-2*100, -1, 0, 9, 10, 11, 2**63, 2*100])\n+        [-2 * 100, -1, 0, 9, 10, 11, 2**63, 2 * 100])\n @pytest.mark.parametrize(\"comp\",\n         [operator.eq, operator.ne, operator.le, operator.lt,\n          operator.ge, operator.gt])"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "byteorder = {'little':'<', 'big':'>'}[sys.byteorder]",
        "fixed_code": "byteorder = {'little': '<', 'big': '>'}[sys.byteorder]",
        "patch": "@@ -73,7 +73,7 @@\n     ]\n \n \n-byteorder = {'little':'<', 'big':'>'}[sys.byteorder]\n+byteorder = {'little': '<', 'big': '>'}[sys.byteorder]\n \n def normalize_descr(descr):\n     \"Normalize a description adding the platform byteorder.\""
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "assert(type(ret) is type(s))",
        "fixed_code": "assert type(ret) is type(s)",
        "patch": "@@ -93,7 +93,7 @@ class MyBytes(bytes, np.generic):\n             pass\n \n         ret = s + MyBytes(b'abc')\n-        assert(type(ret) is type(s))\n+        assert type(ret) is type(s)\n         assert ret == b\"defabc\"\n \n     def test_char_repeat(self):"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "a, b = [npyv.setall_u32(1)]*2",
        "fixed_code": "a, b = [npyv.setall_u32(1)] * 2",
        "patch": "@@ -36,7 +36,7 @@ def test_type_name(self, sfx):\n         assert vector.__name__ == \"npyv_\" + sfx\n \n     def test_raises(self):\n-        a, b = [npyv.setall_u32(1)]*2\n+        a, b = [npyv.setall_u32(1)] * 2\n         for sfx in all_sfx:\n             vcb = lambda intrin: getattr(npyv, f\"{intrin}_{sfx}\")\n             pytest.raises(TypeError, vcb(\"add\"), a)"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "pytest_args += [\"-\" + \"v\"*(verbose - 1)]",
        "fixed_code": "pytest_args += [\"-\" + \"v\" * (verbose - 1)]",
        "patch": "@@ -165,7 +165,7 @@ def __call__(self, label='fast', verbose=1, extra_argv=None,\n             pytest_args += list(extra_argv)\n \n         if verbose > 1:\n-            pytest_args += [\"-\" + \"v\"*(verbose - 1)]\n+            pytest_args += [\"-\" + \"v\" * (verbose - 1)]\n \n         if coverage:\n             pytest_args += [\"--cov=\" + module_path]"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "return  testroot / \"array_from_pyobj\"",
        "fixed_code": "return testroot / \"array_from_pyobj\"",
        "patch": "@@ -20,7 +20,7 @@\n \n def get_testdir():\n     testroot = Path(__file__).resolve().parent / \"src\"\n-    return  testroot / \"array_from_pyobj\"\n+    return testroot / \"array_from_pyobj\"\n \n def setup_module():\n     \"\"\""
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "return x*x",
        "fixed_code": "return x * x",
        "patch": "@@ -241,7 +241,7 @@ class TestGH25211(util.F2PyTest):\n \n     def test_gh25211(self):\n         def bar(x):\n-            return x*x\n+            return x * x\n \n         res = self.module.foo(bar)\n         assert res == 110"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "expected = (5,7)",
        "fixed_code": "expected = (5, 7)",
        "patch": "@@ -587,7 +587,7 @@ def test_char(self):\n     def test_char_arr(self):\n         for out in (self.module.string_test.strarr,\n                     self.module.string_test.strarr77):\n-            expected = (5,7)\n+            expected = (5, 7)\n             assert out.shape == expected\n             expected = '|S12'\n             assert out.dtype == expected"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "stop=edge.squeeze(axis), # Dimension is replaced by linspace",
        "fixed_code": "stop=edge.squeeze(axis),  # Dimension is replaced by linspace",
        "patch": "@@ -210,7 +210,7 @@ def _get_linear_ramps(padded, axis, width_pair, end_value_pair):\n     left_ramp, right_ramp = (\n         np.linspace(\n             start=end_value,\n-            stop=edge.squeeze(axis), # Dimension is replaced by linspace\n+            stop=edge.squeeze(axis),  # Dimension is replaced by linspace\n             num=width,\n             endpoint=False,\n             dtype=padded.dtype,"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "return nx.log(x)/nx.log(n)",
        "fixed_code": "return nx.log(x) / nx.log(n)",
        "patch": "@@ -380,7 +380,7 @@ def logn(n, x):\n     \"\"\"\n     x = _fix_real_lt_zero(x)\n     n = _fix_real_lt_zero(n)\n-    return nx.log(x)/nx.log(n)\n+    return nx.log(x) / nx.log(n)\n \n \n @set_module('numpy.lib.scimath')"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "m0d = m[0,...]",
        "fixed_code": "m0d = m[0, ...]",
        "patch": "@@ -76,7 +76,7 @@ def __array_finalize__(self, obj):\n         assert_equal(f.metadata, 'foo')\n \n         # check 0d arrays don't decay to scalars\n-        m0d = m[0,...]\n+        m0d = m[0, ...]\n         m0d.metadata = 'bar'\n         f0d = fix(m0d)\n         assert_(isinstance(f0d, MyArray))"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "assert_equal(add(mx, x), mx+x)",
        "fixed_code": "assert_equal(add(mx, x), mx + x)",
        "patch": "@@ -198,7 +198,7 @@ def test_masked_binary_operations(self):\n         assert_(isinstance(add(mx, mx), MMatrix))\n         assert_(isinstance(add(mx, x), MMatrix))\n         # Result should work\n-        assert_equal(add(mx, x), mx+x)\n+        assert_equal(add(mx, x), mx + x)\n         assert_(isinstance(add(mx, mx)._data, np.matrix))\n         with assert_warns(DeprecationWarning):\n             assert_(isinstance(add.outer(mx, mx), MMatrix))"
    },
    {
        "commit_id": "c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "commit_message": "CI: pycodestyle \u2192 ruff (#27300)\n\n* CI: pycodestyle \u2192 ruff check\n\n* MAINT: Apply ruff/pycodestyle rule E101\n\nE101 Indentation contains mixed spaces and tabs\n\n* MAINT: Apply ruff/pycodestyle rule E111\n\nE111 Indentation is not a multiple of 4\n\n* MAINT: Apply ruff/pycodestyle rule E116\n\nE116 Unexpected indentation (comment)\n\n* MAINT: Apply ruff/pycodestyle rule E117\n\nE117 Over-indented\n\n* MAINT: Apply ruff/pycodestyle rule E201\n\nE201 Whitespace after bracket\n\n* MAINT: Apply ruff/pycodestyle rule E202\n\nE202 Whitespace before bracket\n\n* MAINT: Apply ruff/pycodestyle rule E203\n\nE203 Whitespace before punctuation\n\n* MAINT: Apply ruff/pycodestyle rule E211\n\nE211 Whitespace before '('\n\n* MAINT: Apply ruff/pycodestyle rule E221\n\nE221 Multiple spaces before operator\n\n* MAINT: Apply ruff/pycodestyle rule E222\n\nE222 Multiple spaces after operator\n\n* MAINT: Apply ruff/pycodestyle rule E225\n\nE225 Missing whitespace around operator\n\n* MAINT: Apply ruff/pycodestyle rule E226\n\nE226 Missing whitespace around arithmetic operator\n\n* MAINT: Apply ruff/pycodestyle rule E227\n\nE227 Missing whitespace around bitwise or shift operator\n\n* MAINT: Apply ruff/pycodestyle rule E228\n\nE228 Missing whitespace around modulo operator\n\n* MAINT: Apply ruff/pycodestyle rule E252\n\nE252 Missing whitespace around parameter equals\n\n* MAINT: Apply ruff/pycodestyle rule E261\n\nE261 Insert at least two spaces before an inline comment\n\n* MAINT: Apply ruff/pycodestyle rule E271\n\nE271 Multiple spaces after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E272\n\nE272 Multiple spaces before keyword\n\n* MAINT: Apply ruff/pycodestyle rule E275\n\nE275 Missing whitespace after keyword\n\n* MAINT: Apply ruff/pycodestyle rule E301\n\nE301 Expected 1 blank line between methods\n\n* MAINT: Apply ruff/pycodestyle rule E303\n\nE303 Too many blank lines\n\n* MAINT: Apply ruff/pycodestyle rule E304\n\nE304 Blank lines found after function decorator\n\n* MAINT: Apply ruff/pycodestyle rule E305\n\nE305 Expected 2 blank lines after class or function definition\n\n* MAINT: Apply ruff/pycodestyle rule E306\n\nE306 Expected 1 blank line before a nested definition\n\n* MAINT: Apply ruff/pycodestyle rule E501\n\nE501 Line too long\n\n* MAINT: Disable ruff/pycodestyle rule E714 in tests\n\nE714 Test for object identity should be `is not`\n\n* MAINT: Apply ruff/pycodestyle rule E743\n\nE743 Ambiguous function name\n\n* MAINT: Disable E501 for now\n\nRuff has found 1080 occurrences of this error. Fixing them sounds excessive.",
        "commit_url": "https://github.com/numpy/numpy/commit/c31e59993874f0f3b2dfce24df3bd910b44a632d",
        "buggy_code": "np.asmatrix(np.eye(2))*np.ones(2)",
        "fixed_code": "np.asmatrix(np.eye(2)) * np.ones(2)",
        "patch": "@@ -20,7 +20,7 @@ def test_matrix_properties(self):\n     def test_matrix_multiply_by_1d_vector(self):\n         # Ticket #473\n         def mul():\n-            np.asmatrix(np.eye(2))*np.ones(2)\n+            np.asmatrix(np.eye(2)) * np.ones(2)\n \n         assert_raises(ValueError, mul)\n "
    },
    {
        "commit_id": "71240911fafb2c82198701de1bf3b48796c456eb",
        "commit_message": "PERF: improve multithreaded ufunc scaling (#27896)\n\n* PERF: add a fast path to ufunc type resolution\n\n* MAINT: move dispatching.c to C++\n\n* MAINT: move npy_hashtable to C++ and use std::shared_mutex\n\n* MAINT: fix windows linking\n\n* MAINT: remove outdated comment\n\n* MAINT: only call try_promote on free-threaded build\n\nConverts dispatching to cpp in order to use `std::shared_mutex` to improve free-threaded scaling.\n\n* MAINT: try to give new function a name indicating it uses a mutex\n\n* MAINT: only do complicated casting to get a mutex pointer once\n\n* MAINT: use std::nothrow to avoid dealing with exceptions\n\n* DOC: add changelog",
        "commit_url": "https://github.com/numpy/numpy/commit/71240911fafb2c82198701de1bf3b48796c456eb",
        "buggy_code": "join('umath', 'dispatching.c'),",
        "fixed_code": "join('umath', 'dispatching.cpp'),",
        "patch": "@@ -85,7 +85,7 @@ def get_processor():\n              join('multiarray', 'stringdtype', 'static_string.c'),\n              join('multiarray', 'strfuncs.c'),\n              join('multiarray', 'usertypes.c'),\n-             join('umath', 'dispatching.c'),\n+             join('umath', 'dispatching.cpp'),\n              join('umath', 'extobj.c'),\n              join('umath', 'loops.c.src'),\n              join('umath', 'reduction.c'),"
    },
    {
        "commit_id": "87ad5a27bfa11a54c2837c6967349bdadb6d5984",
        "commit_message": "BUG: Fix coreoffset mechanism and unset buf-reuse on different (partial) copy",
        "commit_url": "https://github.com/numpy/numpy/commit/87ad5a27bfa11a54c2837c6967349bdadb6d5984",
        "buggy_code": "|   BufIterEnd: 50",
        "fixed_code": "|   BufIterEnd: 5",
        "patch": "@@ -3321,7 +3321,7 @@ def test_debug_print(capfd):\n     | BufferData:\n     |   BufferSize: 50\n     |   Size: 5\n-    |   BufIterEnd: 50\n+    |   BufIterEnd: 5\n     |   REDUCE Pos: 0\n     |   BUFFER CoreSize: 5\n     |   BUFFER Reduce outersize: 10"
    },
    {
        "commit_id": "63503c9b640c192664d29f39a39eac8ede7d82dd",
        "commit_message": "BUG: fix importing numpy in Python's optimized mode (#27868)\n\n* TST: add PYTHONOPTIMIZE=2 to full CI (linux)\r\n\r\n* BUG: fix importing numpy in Python's optimized mode\r\n\r\n* TST: fix a test for compatibility with PYTHONOPTIMIZE",
        "commit_url": "https://github.com/numpy/numpy/commit/63503c9b640c192664d29f39a39eac8ede7d82dd",
        "buggy_code": "def get_array_function_like_doc(public_api, docstring_template=None):",
        "fixed_code": "def get_array_function_like_doc(public_api, docstring_template=\"\"):",
        "patch": "@@ -19,7 +19,7 @@\n         compatible with that passed in via this argument.\"\"\"\n )\n \n-def get_array_function_like_doc(public_api, docstring_template=None):\n+def get_array_function_like_doc(public_api, docstring_template=\"\"):\n     ARRAY_FUNCTIONS.add(public_api)\n     docstring = public_api.__doc__ or docstring_template\n     return docstring.replace(\"${ARRAY_FUNCTION_LIKE}\", array_function_like_doc)"
    },
    {
        "commit_id": "16b210c24a80cdba854ccafdff35d2568762c941",
        "commit_message": "BUG,ENH: Fix internal ``__array_wrap__`` for direct calls (#27807)\n\n* BUG,ENH: Fix internal ``__array_wrap__`` for direct calls\r\n\r\nSince adding `return_scalar` as am argument, the array-wrap\r\nimplementations were slightly wrong when that argument was actually\r\npassed and the function called directly.\r\n\r\nNumPy itself rarely (or never) did so for our builtin types now\r\nso that was not a problem within NumPy.\r\n\r\nFurther, the scalar version was completely broken, converting to\r\nscalar even when such a conversion was impossible.\r\n\r\nAs explained in the code.  For array subclasses we NEVER want to\r\nconvert to scalar by default.  The subclass must make that choice\r\nexplicitly.\r\n(There are plenty of tests for this behavior.)\r\n\r\n* BUG: Ensure cast to self in ndarray.__array_wrap__ and other review fixes",
        "commit_url": "https://github.com/numpy/numpy/commit/16b210c24a80cdba854ccafdff35d2568762c941",
        "buggy_code": "return super().__array_wrap__(new)",
        "fixed_code": "return super().__array_wrap__(new, context, return_scalar)",
        "patch": "@@ -9807,7 +9807,7 @@ class MyArr(np.ndarray):\n \n         def __array_wrap__(self, new, context=None, return_scalar=False):\n             type(self).called_wrap += 1\n-            return super().__array_wrap__(new)\n+            return super().__array_wrap__(new, context, return_scalar)\n \n     numpy_arr = np.zeros(5, dtype=dt1)\n     my_arr = np.zeros(5, dtype=dt2).view(MyArr)"
    },
    {
        "commit_id": "236cda163640d06bdac10531a209301d1e1da5b8",
        "commit_message": "DOC: Adapt to changes in docs (and fix typo/style nit)",
        "commit_url": "https://github.com/numpy/numpy/commit/236cda163640d06bdac10531a209301d1e1da5b8",
        "buggy_code": "@pytest.mark.parametrize(\"dtype\",\"bBiIqQ\")",
        "fixed_code": "@pytest.mark.parametrize(\"dtype\", \"bBiIqQ\")",
        "patch": "@@ -1351,7 +1351,7 @@ def test_minmax_dtypes(self):\n             assert masked_array([-cmax, 0], mask=[0, 1]).max() == -cmax\n             assert masked_array([cmax, 0], mask=[0, 1]).min() == cmax\n \n-    @pytest.mark.parametrize(\"dtype\",\"bBiIqQ\")\n+    @pytest.mark.parametrize(\"dtype\", \"bBiIqQ\")\n     @pytest.mark.parametrize(\"mask\", [\n         [False, False, False, True, True],  # masked min/max\n         [False, False, False, True, False],  # masked max only"
    },
    {
        "commit_id": "cd63250ce6c8ff5a5562bc12101098c0a0d1212d",
        "commit_message": "Merge pull request #27731 from HaoZeke/fortrannameFunc\n\nBUG: Fix `fortranname` for functions",
        "commit_url": "https://github.com/numpy/numpy/commit/cd63250ce6c8ff5a5562bc12101098c0a0d1212d",
        "buggy_code": "tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);",
        "fixed_code": "tmp = F2PyCapsule_FromVoidPtr((void*)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),NULL);",
        "patch": "@@ -459,7 +459,7 @@\n     {\n       extern #ctype# #F_FUNC#(#name_lower#,#NAME#)(void);\n       PyObject* o = PyDict_GetItemString(d,\"#name#\");\n-      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n+      tmp = F2PyCapsule_FromVoidPtr((void*)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),NULL);\n       PyObject_SetAttrString(o,\"_cpointer\", tmp);\n       Py_DECREF(tmp);\n       s = PyUnicode_FromString(\"#name#\");"
    },
    {
        "commit_id": "a39d91c2839e4a36dbe9d72d78fa086bf0c06ed0",
        "commit_message": "BUG: Fix wrappers for fortranname\n\nCloses gh-25700",
        "commit_url": "https://github.com/numpy/numpy/commit/a39d91c2839e4a36dbe9d72d78fa086bf0c06ed0",
        "buggy_code": "tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);",
        "fixed_code": "tmp = F2PyCapsule_FromVoidPtr((void*)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),NULL);",
        "patch": "@@ -459,7 +459,7 @@\n     {\n       extern #ctype# #F_FUNC#(#name_lower#,#NAME#)(void);\n       PyObject* o = PyDict_GetItemString(d,\"#name#\");\n-      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n+      tmp = F2PyCapsule_FromVoidPtr((void*)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),NULL);\n       PyObject_SetAttrString(o,\"_cpointer\", tmp);\n       Py_DECREF(tmp);\n       s = PyUnicode_FromString(\"#name#\");"
    },
    {
        "commit_id": "a39d91c2839e4a36dbe9d72d78fa086bf0c06ed0",
        "commit_message": "BUG: Fix wrappers for fortranname\n\nCloses gh-25700",
        "commit_url": "https://github.com/numpy/numpy/commit/a39d91c2839e4a36dbe9d72d78fa086bf0c06ed0",
        "buggy_code": "def test_renamed_function(self):",
        "fixed_code": "def test_gh25799(self):",
        "patch": "@@ -10,7 +10,7 @@ class TestRenamedFunc(util.F2PyTest):\n     ]\n     module_name = \"funcfortranname\"\n \n-    def test_renamed_function(self):\n+    def test_gh25799(self):\n         assert dir(self.module)\n         assert self.module.funcfortranname_default(200, 12) == 212\n "
    },
    {
        "commit_id": "fdeb79add0dd5e5ccc92f9aae1a0e3b5945fde31",
        "commit_message": "Merge pull request #27695 from HaoZeke/fixModuleF2PYdat\n\nBUG: Fix multiple modules in F2PY and COMMON handling",
        "commit_url": "https://github.com/numpy/numpy/commit/fdeb79add0dd5e5ccc92f9aae1a0e3b5945fde31",
        "buggy_code": "'process_f2cmap_dict'",
        "fixed_code": "'process_f2cmap_dict', 'containscommon'",
        "patch": "@@ -43,7 +43,7 @@\n     'isunsigned_long_long', 'isunsigned_long_longarray', 'isunsigned_short',\n     'isunsigned_shortarray', 'l_and', 'l_not', 'l_or', 'outmess', 'replace',\n     'show', 'stripcomma', 'throw_error', 'isattr_value', 'getuseblocks',\n-    'process_f2cmap_dict'\n+    'process_f2cmap_dict', 'containscommon'\n ]\n \n "
    },
    {
        "commit_id": "531a6943191bfa49c50a0fb350d2b42fcc6a4488",
        "commit_message": "BUG: Handle multi-module files and common better\n\nFixes gh-25186 gh-25337 gh-27622",
        "commit_url": "https://github.com/numpy/numpy/commit/531a6943191bfa49c50a0fb350d2b42fcc6a4488",
        "buggy_code": "'process_f2cmap_dict'",
        "fixed_code": "'process_f2cmap_dict', 'containscommon'",
        "patch": "@@ -43,7 +43,7 @@\n     'isunsigned_long_long', 'isunsigned_long_longarray', 'isunsigned_short',\n     'isunsigned_shortarray', 'l_and', 'l_not', 'l_or', 'outmess', 'replace',\n     'show', 'stripcomma', 'throw_error', 'isattr_value', 'getuseblocks',\n-    'process_f2cmap_dict'\n+    'process_f2cmap_dict', 'containscommon'\n ]\n \n "
    },
    {
        "commit_id": "8145832e1faf311946ac6adee00d00a700175489",
        "commit_message": "Merge pull request #27661 from tylerjereddy/treddy_issue_27658\n\nBUG: np.cov transpose control",
        "commit_url": "https://github.com/numpy/numpy/commit/8145832e1faf311946ac6adee00d00a700175489",
        "buggy_code": "if not rowvar and X.shape[0] != 1:",
        "fixed_code": "if not rowvar and m.ndim != 1:",
        "patch": "@@ -2736,7 +2736,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n             dtype = np.result_type(m, y, np.float64)\n \n     X = array(m, ndmin=2, dtype=dtype)\n-    if not rowvar and X.shape[0] != 1:\n+    if not rowvar and m.ndim != 1:\n         X = X.T\n     if X.shape[0] == 0:\n         return np.array([]).reshape(0, 0)"
    },
    {
        "commit_id": "e003e823e4c9add852a854b10cfa1fc382e3aa7f",
        "commit_message": "BUG: np.cov transpose control\n\n* Fixes #27658\n\n* Use a more sensible filter for controlling\nthe decision to transpose the design matrix\nreceived by `np.cov`.\n\n* Add a release note.",
        "commit_url": "https://github.com/numpy/numpy/commit/e003e823e4c9add852a854b10cfa1fc382e3aa7f",
        "buggy_code": "if not rowvar and X.shape[0] != 1:",
        "fixed_code": "if not rowvar and m.ndim != 1:",
        "patch": "@@ -2736,7 +2736,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n             dtype = np.result_type(m, y, np.float64)\n \n     X = array(m, ndmin=2, dtype=dtype)\n-    if not rowvar and X.shape[0] != 1:\n+    if not rowvar and m.ndim != 1:\n         X = X.T\n     if X.shape[0] == 0:\n         return np.array([]).reshape(0, 0)"
    },
    {
        "commit_id": "ba48efef11b9b0e078ae7db3645c43631a13e27e",
        "commit_message": "BUG: fix lazy loading and reloading",
        "commit_url": "https://github.com/numpy/numpy/commit/ba48efef11b9b0e078ae7db3645c43631a13e27e",
        "buggy_code": "from numpy.dtypes import StringDType",
        "fixed_code": "from numpy._core.multiarray import StringDType",
        "patch": "@@ -21,7 +21,7 @@\n     str_,\n     bytes_,\n )\n-from numpy.dtypes import StringDType\n+from numpy._core.multiarray import StringDType\n from ._nested_sequence import _NestedSequence\n from ._shape import _Shape\n "
    },
    {
        "commit_id": "6ece4458fd580787a84891673eaf246d36ba2639",
        "commit_message": "DOC: fix missing arguments (copy and device) from asanyarray's signature (#27499)",
        "commit_url": "https://github.com/numpy/numpy/commit/6ece4458fd580787a84891673eaf246d36ba2639",
        "buggy_code": "asanyarray(a, dtype=None, order=None, *, like=None)",
        "fixed_code": "asanyarray(a, dtype=None, order=None, *, device=None, copy=None, like=None)",
        "patch": "@@ -1029,7 +1029,7 @@\n \n add_newdoc('numpy._core.multiarray', 'asanyarray',\n     \"\"\"\n-    asanyarray(a, dtype=None, order=None, *, like=None)\n+    asanyarray(a, dtype=None, order=None, *, device=None, copy=None, like=None)\n \n     Convert the input to an ndarray, but pass ndarray subclasses through.\n "
    },
    {
        "commit_id": "22c791356d49358df0d13130abdcd063256411be",
        "commit_message": "BUG: fftn axis bug (#27466)\n\n* rfftn axis bug\r\n\r\n* added test on shapes and fixed the linter issue\r\n\r\n* linter length",
        "commit_url": "https://github.com/numpy/numpy/commit/22c791356d49358df0d13130abdcd063256411be",
        "buggy_code": "for ii in range(len(axes)-1):",
        "fixed_code": "for ii in range(len(axes)-2, -1, -1):",
        "patch": "@@ -1379,7 +1379,7 @@ def rfftn(a, s=None, axes=None, norm=None, out=None):\n     a = asarray(a)\n     s, axes = _cook_nd_args(a, s, axes)\n     a = rfft(a, s[-1], axes[-1], norm, out=out)\n-    for ii in range(len(axes)-1):\n+    for ii in range(len(axes)-2, -1, -1):\n         a = fft(a, s[ii], axes[ii], norm, out=out)\n     return a\n "
    },
    {
        "commit_id": "43b10db40f94e3b4a250bc18fd4b9c5641a42ff8",
        "commit_message": "Merge pull request #27464 from WarrenWeckesser/docfix-cumulative-sum\n\nDOC: Fix a copy-paste mistake in the cumulative_sum docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/43b10db40f94e3b4a250bc18fd4b9c5641a42ff8",
        "buggy_code": "Boolean indicating whether to include the initial value (ones) as",
        "fixed_code": "Boolean indicating whether to include the initial value (zeros) as",
        "patch": "@@ -2817,7 +2817,7 @@ def cumulative_sum(x, /, *, axis=None, dtype=None, out=None,\n         but the type will be cast if necessary. See :ref:`ufuncs-output-type`\n         for more details.\n     include_initial : bool, optional\n-        Boolean indicating whether to include the initial value (ones) as\n+        Boolean indicating whether to include the initial value (zeros) as\n         the first value in the output. With ``include_initial=True``\n         the shape of the output is different than the shape of the input.\n         Default: ``False``."
    },
    {
        "commit_id": "a2493770d3b412b22a6acb174f9b79dd45c91496",
        "commit_message": "DOC: Fix a copy-paste mistake in the cumulative_sum docstring.\n\nChange '(ones)' to '(zeros)' in the description of `include_initial`.\n'(ones)' was probably left over from a copy-paste of the\n`cumulative_prod` docstring.\n\n[skip actions] [skip azp] [skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/a2493770d3b412b22a6acb174f9b79dd45c91496",
        "buggy_code": "Boolean indicating whether to include the initial value (ones) as",
        "fixed_code": "Boolean indicating whether to include the initial value (zeros) as",
        "patch": "@@ -2817,7 +2817,7 @@ def cumulative_sum(x, /, *, axis=None, dtype=None, out=None,\n         but the type will be cast if necessary. See :ref:`ufuncs-output-type`\n         for more details.\n     include_initial : bool, optional\n-        Boolean indicating whether to include the initial value (ones) as\n+        Boolean indicating whether to include the initial value (zeros) as\n         the first value in the output. With ``include_initial=True``\n         the shape of the output is different than the shape of the input.\n         Default: ``False``."
    },
    {
        "commit_id": "ff1c4e61b7b8cbe68fa4543802d4d40306032bbf",
        "commit_message": "Merge pull request #27431 from eendebakpt/roll\n\nBUG: Allow unsigned shift argument for np.roll",
        "commit_url": "https://github.com/numpy/numpy/commit/ff1c4e61b7b8cbe68fa4543802d4d40306032bbf",
        "buggy_code": "shifts[ax] += sh",
        "fixed_code": "shifts[ax] += int(sh)",
        "patch": "@@ -1293,7 +1293,7 @@ def roll(a, shift, axis=None):\n                 \"'shift' and 'axis' should be scalars or 1D sequences\")\n         shifts = {ax: 0 for ax in range(a.ndim)}\n         for sh, ax in broadcasted:\n-            shifts[ax] += sh\n+            shifts[ax] += int(sh)\n \n         rolls = [((slice(None), slice(None)),)] * a.ndim\n         for ax, offset in shifts.items():"
    },
    {
        "commit_id": "4d5b9bc66f1b113169a632afda674495d2931692",
        "commit_message": "BUG: Allow unsigned shift argument for np.roll",
        "commit_url": "https://github.com/numpy/numpy/commit/4d5b9bc66f1b113169a632afda674495d2931692",
        "buggy_code": "shifts[ax] += sh",
        "fixed_code": "shifts[ax] += int(sh)",
        "patch": "@@ -1293,7 +1293,7 @@ def roll(a, shift, axis=None):\n                 \"'shift' and 'axis' should be scalars or 1D sequences\")\n         shifts = {ax: 0 for ax in range(a.ndim)}\n         for sh, ax in broadcasted:\n-            shifts[ax] += sh\n+            shifts[ax] += int(sh)\n \n         rolls = [((slice(None), slice(None)),)] * a.ndim\n         for ax, offset in shifts.items():"
    },
    {
        "commit_id": "cecc005ff2b2ac133f0f535fa86c781dfcb9d1ae",
        "commit_message": "Merge pull request #27360 from ianharris/ma-allequal-edge-case\n\nBUG: fix _shrink edge case in np.ma.mask_or",
        "commit_url": "https://github.com/numpy/numpy/commit/cecc005ff2b2ac133f0f535fa86c781dfcb9d1ae",
        "buggy_code": "return m1",
        "fixed_code": "return _shrink_mask(m1) if shrink else m1",
        "patch": "@@ -1787,7 +1787,7 @@ def mask_or(m1, m2, copy=False, shrink=True):\n         dtype = getattr(m1, 'dtype', MaskType)\n         return make_mask(m1, copy=copy, shrink=shrink, dtype=dtype)\n     if m1 is m2 and is_mask(m1):\n-        return m1\n+        return _shrink_mask(m1) if shrink else m1\n     (dtype1, dtype2) = (getattr(m1, 'dtype', None), getattr(m2, 'dtype', None))\n     if dtype1 != dtype2:\n         raise ValueError(\"Incompatible dtypes '%s'<>'%s'\" % (dtype1, dtype2))"
    },
    {
        "commit_id": "6e0bbebf56fd2f9af048cc5e04a576566ae3a7a1",
        "commit_message": "BUG: fix edge case in np.ma.allequal\n\nFix an edge case in numpy/ma/core.py::allequal where calling the\nfunction on the same input (i.e. `allequal(x, x)`) where the input is\nan unmasked array (i.e. `mask=np.ma.nomask`) would return `False`. The\nfix involves updating the `np.ma.mask_or` function to call\n`_shrink_mask` on the mask returned in this case. See issue #27201.\n\nadd test for mask_or(x, x) where x is all False\n\nfix linting issue",
        "commit_url": "https://github.com/numpy/numpy/commit/6e0bbebf56fd2f9af048cc5e04a576566ae3a7a1",
        "buggy_code": "return m1",
        "fixed_code": "return _shrink_mask(m1) if shrink else m1",
        "patch": "@@ -1787,7 +1787,7 @@ def mask_or(m1, m2, copy=False, shrink=True):\n         dtype = getattr(m1, 'dtype', MaskType)\n         return make_mask(m1, copy=copy, shrink=shrink, dtype=dtype)\n     if m1 is m2 and is_mask(m1):\n-        return m1\n+        return _shrink_mask(m1) if shrink else m1\n     (dtype1, dtype2) = (getattr(m1, 'dtype', None), getattr(m2, 'dtype', None))\n     if dtype1 != dtype2:\n         raise ValueError(\"Incompatible dtypes '%s'<>'%s'\" % (dtype1, dtype2))"
    },
    {
        "commit_id": "129c6e57052eb243241b5d2d8b7ccb8a8bb3d9ae",
        "commit_message": "Merge pull request #27376 from DimitriPapadopoulos/typos\n\nMAINT: Fix a few typos - and sometimes improve wording",
        "commit_url": "https://github.com/numpy/numpy/commit/129c6e57052eb243241b5d2d8b7ccb8a8bb3d9ae",
        "buggy_code": "Result of the recution operation",
        "fixed_code": "Result of the reduction operation",
        "patch": "@@ -1212,7 +1212,7 @@ def apply_along_fields(func, arr):\n     Returns\n     -------\n     out : ndarray\n-       Result of the recution operation\n+       Result of the reduction operation\n \n     Examples\n     --------"
    },
    {
        "commit_id": "0e5fbac3308c4060aa6a46fca275ef1c84749acb",
        "commit_message": "MAINT: Fix a few typos - and sometimes improve wording",
        "commit_url": "https://github.com/numpy/numpy/commit/0e5fbac3308c4060aa6a46fca275ef1c84749acb",
        "buggy_code": "Result of the recution operation",
        "fixed_code": "Result of the reduction operation",
        "patch": "@@ -1212,7 +1212,7 @@ def apply_along_fields(func, arr):\n     Returns\n     -------\n     out : ndarray\n-       Result of the recution operation\n+       Result of the reduction operation\n \n     Examples\n     --------"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "For lint checks of your development brach with `main` or a custom branch:",
        "fixed_code": "For lint checks of your development branch with `main` or a custom branch:",
        "patch": "@@ -508,7 +508,7 @@ def lint(ctx, branch, uncommitted):\n     Examples:\n \n     \\b\n-    For lint checks of your development brach with `main` or a custom branch:\n+    For lint checks of your development branch with `main` or a custom branch:\n \n     \\b\n     $ spin lint # defaults to main"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "Where the Python ``float`` behaves samilar to a Python value ``0.0``",
        "fixed_code": "Where the Python ``float`` behaves similar to a Python value ``0.0``",
        "patch": "@@ -5741,7 +5741,7 @@\n     >>> np.add.resolve_dtypes((float32, float, None))\n     (dtype('float32'), dtype('float32'), dtype('float32'))\n \n-    Where the Python ``float`` behaves samilar to a Python value ``0.0``\n+    Where the Python ``float`` behaves similar to a Python value ``0.0``\n     in a ufunc call.  (See :ref:`NEP 50 <NEP50>` for details.)\n \n     \"\"\"))"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "def test_structured_view_offsets_paramteric(",
        "fixed_code": "def test_structured_view_offsets_parametric(",
        "patch": "@@ -776,7 +776,7 @@ def test_structured_field_offsets(self, to_dt, expected_off):\n             # completely invalid/impossible cast:\n             (\"i,i\", \"i,i,i\", None),\n         ])\n-    def test_structured_view_offsets_paramteric(\n+    def test_structured_view_offsets_parametric(\n             self, from_dt, to_dt, expected_off):\n         # TODO: While this test is fairly thorough, right now, it does not\n         # really test some paths that may have nonzero offsets (they don't"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "def common_sign2map(a, var):  # obsolute",
        "fixed_code": "def common_sign2map(a, var):  # obsolete",
        "patch": "@@ -798,7 +798,7 @@ def cb_routsign2map(rout, um):\n     return ret\n \n \n-def common_sign2map(a, var):  # obsolute\n+def common_sign2map(a, var):  # obsolete\n     ret = {'varname': a, 'ctype': getctype(var)}\n     if isstringarray(var):\n         ret['ctype'] = 'char'"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "'error:', msg, '(ignore it, build_flib is obsolute for numpy.distutils 0.2.2 and up)')",
        "fixed_code": "'error:', msg, '(ignore it, build_flib is obsolete for numpy.distutils 0.2.2 and up)')",
        "patch": "@@ -100,7 +100,7 @@ def run():\n                     print('------')\n         except Exception as msg:\n             print(\n-                'error:', msg, '(ignore it, build_flib is obsolute for numpy.distutils 0.2.2 and up)')\n+                'error:', msg, '(ignore it, build_flib is obsolete for numpy.distutils 0.2.2 and up)')\n             print('------')\n         try:\n             if has_numpy_distutils == 2:"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "Dictionary of parent fields (used interbally during recursion).",
        "fixed_code": "Dictionary of parent fields (used internally during recursion).",
        "patch": "@@ -241,7 +241,7 @@ def get_fieldstructure(adtype, lastname=None, parents=None,):\n     lastname : optional\n         Last processed field name (used internally during recursion).\n     parents : dictionary\n-        Dictionary of parent fields (used interbally during recursion).\n+        Dictionary of parent fields (used internally during recursion).\n \n     Examples\n     --------"
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "Fixture providing hetergeneous input data with a structured dtype, along",
        "fixed_code": "Fixture providing heterogeneous input data with a structured dtype, along",
        "patch": "@@ -42,7 +42,7 @@ def test_comment_multiple_chars(comment):\n @pytest.fixture\n def mixed_types_structured():\n     \"\"\"\n-    Fixture providing hetergeneous input data with a structured dtype, along\n+    Fixture providing heterogeneous input data with a structured dtype, along\n     with the associated structured array.\n     \"\"\"\n     data = StringIO("
    },
    {
        "commit_id": "d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "commit_message": "Merge pull request #27344 from vaerksted/main\n\nMAINT: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/d6bfeb02241c8307e64e2f419821b2fc9b021862",
        "buggy_code": "warn(UserWarning)  # should be supppressed",
        "fixed_code": "warn(UserWarning)  # should be suppressed",
        "patch": "@@ -1689,7 +1689,7 @@ def warn(category):\n \n     with warnings.catch_warnings(record=True) as w:\n         warnings.simplefilter(\"always\")\n-        warn(UserWarning)  # should be supppressed\n+        warn(UserWarning)  # should be suppressed\n         warn(RuntimeWarning)\n         assert_equal(len(w), 1)\n "
    },
    {
        "commit_id": "6e24f0f08fac09345c3fd9b53a625d6d26084483",
        "commit_message": "Merge pull request #27302 from charris/fix-circleci-bug\n\nBUG: Fix bug in ``doc/neps/tools/build_index.py``",
        "commit_url": "https://github.com/numpy/numpy/commit/6e24f0f08fac09345c3fd9b53a625d6d26084483",
        "buggy_code": "for line in lines[:-1]:",
        "fixed_code": "for i, line in enumerate(lines[:-1]):",
        "patch": "@@ -38,7 +38,7 @@ def nep_metadata():\n \n             # The title should be the first line after a line containing only\n             # * or = signs.\n-            for line in lines[:-1]:\n+            for i, line in enumerate(lines[:-1]):\n                 chars = set(line.rstrip())\n                 if len(chars) == 1 and (\"=\" in chars or \"*\" in chars):\n                     break"
    },
    {
        "commit_id": "b43d97b480a2ab64dbe792a8b22b2dd238f52281",
        "commit_message": "BUG: Fix bug in ``doc/neps/tools/build_index.py``\n\nThe bug was introduced in gh-27293 when `enumerate` was removed.",
        "commit_url": "https://github.com/numpy/numpy/commit/b43d97b480a2ab64dbe792a8b22b2dd238f52281",
        "buggy_code": "for line in lines[:-1]:",
        "fixed_code": "for i, line in enumerate(lines[:-1]):",
        "patch": "@@ -38,7 +38,7 @@ def nep_metadata():\n \n             # The title should be the first line after a line containing only\n             # * or = signs.\n-            for line in lines[:-1]:\n+            for i, line in enumerate(lines[:-1]):\n                 chars = set(line.rstrip())\n                 if len(chars) == 1 and (\"=\" in chars or \"*\" in chars):\n                     break"
    },
    {
        "commit_id": "ae926d7e01053baede90a989fb9bf98515d23a22",
        "commit_message": "Merge pull request #27262 from mtsokol/bug-27256-27257\n\nBUG: Fix #27256 and #27257",
        "commit_url": "https://github.com/numpy/numpy/commit/ae926d7e01053baede90a989fb9bf98515d23a22",
        "buggy_code": "The ceiling of each element in `x`, with `float` dtype.",
        "fixed_code": "The ceiling of each element in `x`.",
        "patch": "@@ -795,7 +795,7 @@ def add_newdoc(place, name, doc):\n     Returns\n     -------\n     y : ndarray or scalar\n-        The ceiling of each element in `x`, with `float` dtype.\n+        The ceiling of each element in `x`.\n         $OUT_SCALAR_1\n \n     See Also"
    },
    {
        "commit_id": "90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "commit_message": "TST: fix examples for struct-check dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "buggy_code": "255",
        "fixed_code": "np.uint8(255)",
        "patch": "@@ -1439,7 +1439,7 @@ def diff(a, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):\n     >>> np.diff(u8_arr)\n     array([255], dtype=uint8)\n     >>> u8_arr[1,...] - u8_arr[0,...]\n-    255\n+    np.uint8(255)\n \n     If this is not desirable, then the array should be cast to a larger\n     integer type first:"
    },
    {
        "commit_id": "90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "commit_message": "TST: fix examples for struct-check dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "buggy_code": "255",
        "fixed_code": "np.uint8(255)",
        "patch": "@@ -7808,7 +7808,7 @@ def diff(a, /, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):\n            fill_value=np.int64(999999),\n                 dtype=uint8)\n     >>> u8_arr[1,...] - u8_arr[0,...]\n-    255\n+    np.uint8(255)\n \n     If this is not desirable, then the array should be cast to a larger\n     integer type first:"
    },
    {
        "commit_id": "90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "commit_message": "TST: fix examples for struct-check dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/90c34cbbe8c87d49f17a7e657b4c4805797111a7",
        "buggy_code": "4,",
        "fixed_code": "np.int32(4),",
        "patch": "@@ -1468,7 +1468,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None):\n     array([-6.73496154e-17, -1.00000000e+00,  0.00000000e+00,  1.00000000e+00])\n     >>> stats # note the minuscule SSR\n     [array([8.79579319e-31]),\n-     4,\n+     np.int32(4),\n      array([1.38446749, 1.32119158, 0.50443316, 0.28853036]),\n      1.1324274851176597e-14]\n "
    },
    {
        "commit_id": "bff71ca926aa5a24ededc0342156401a76d9c076",
        "commit_message": "BUG: Fix #27256 and #27257",
        "commit_url": "https://github.com/numpy/numpy/commit/bff71ca926aa5a24ededc0342156401a76d9c076",
        "buggy_code": "The ceiling of each element in `x`, with `float` dtype.",
        "fixed_code": "The ceiling of each element in `x`.",
        "patch": "@@ -795,7 +795,7 @@ def add_newdoc(place, name, doc):\n     Returns\n     -------\n     y : ndarray or scalar\n-        The ceiling of each element in `x`, with `float` dtype.\n+        The ceiling of each element in `x`.\n         $OUT_SCALAR_1\n \n     See Also"
    },
    {
        "commit_id": "d6021964a0c3275d7985cb30aca33f169bad7e45",
        "commit_message": "Merge pull request #27117 from seberg/binop-fixup\n\nBUG: Ensure that scalar binops prioritize __array_ufunc__",
        "commit_url": "https://github.com/numpy/numpy/commit/d6021964a0c3275d7985cb30aca33f169bad7e45",
        "buggy_code": "objecty_things = [object(), None]",
        "fixed_code": "objecty_things = [object(), None, np.array(None, dtype=object)]",
        "patch": "@@ -27,7 +27,7 @@\n floating_types = np.floating.__subclasses__()\n complex_floating_types = np.complexfloating.__subclasses__()\n \n-objecty_things = [object(), None]\n+objecty_things = [object(), None, np.array(None, dtype=object)]\n \n binary_operators_for_scalars = [\n     operator.lt, operator.le, operator.eq, operator.ne, operator.ge,"
    },
    {
        "commit_id": "a0a7fc1d4041543d808d34f32310aca6abb40345",
        "commit_message": "BUG: Ensure that scalar binops prioritize __array_ufunc__\n\nIf array-ufunc is implemented, we must call always use it for all\noperators (that seems to be the promise).\n\nIf __array_function__ is defined we are in the clear w.r.t. recursion\nbecause the object is either an array (can be unpacked, but already\nchecked earlier now also), or it cannot call the ufunc without unpacking\nitself (otherwise it would cause recursion).\n\nThere is an oddity about `__array_wrap__`.  Rather than trying to\ndo odd things to deal with it, I added a comment explaining why it\ndoens't matter (roughly: don't use our scalar priority if you want\nto be sure to get a chance).",
        "commit_url": "https://github.com/numpy/numpy/commit/a0a7fc1d4041543d808d34f32310aca6abb40345",
        "buggy_code": "objecty_things = [object(), None]",
        "fixed_code": "objecty_things = [object(), None, np.array(None, dtype=object)]",
        "patch": "@@ -27,7 +27,7 @@\n floating_types = np.floating.__subclasses__()\n complex_floating_types = np.complexfloating.__subclasses__()\n \n-objecty_things = [object(), None]\n+objecty_things = [object(), None, np.array(None, dtype=object)]\n \n binary_operators_for_scalars = [\n     operator.lt, operator.le, operator.eq, operator.ne, operator.ge,"
    },
    {
        "commit_id": "c64d775e872aaabac8ea258250c66921c7e7ed70",
        "commit_message": "MAINT: update error message\n\nCo-authored-by: Pieter Eendebak <pieter.eendebak@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/c64d775e872aaabac8ea258250c66921c7e7ed70",
        "buggy_code": "raise ValueError('Can only find greatest common demoninator of '",
        "fixed_code": "raise ValueError('Can only find greatest common divisor of '",
        "patch": "@@ -862,7 +862,7 @@ def _prod(a):\n def _gcd(a, b):\n     \"\"\"Calculate the greatest common divisor of a and b\"\"\"\n     if not (math.isfinite(a) and math.isfinite(b)):\n-        raise ValueError('Can only find greatest common demoninator of '\n+        raise ValueError('Can only find greatest common divisor of '\n                             f'finite arguments, found \"{a}\" and \"{b}\"')\n     while b:\n         a, b = b, a % b"
    },
    {
        "commit_id": "0d57708d23a8f539d02589acd7cbea7ff66b7436",
        "commit_message": "Merge pull request #27013 from nicoddemus/issue-26862-freeze-stderr\n\ncfuncs.py: fix crash when sys.stderr is not available",
        "commit_url": "https://github.com/numpy/numpy/commit/0d57708d23a8f539d02589acd7cbea7ff66b7436",
        "buggy_code": "errmess = sys.stderr.write",
        "fixed_code": "from .cfuncs import errmess",
        "patch": "@@ -17,6 +17,7 @@\n \n from . import __version__\n from . import cfuncs\n+from .cfuncs import errmess\n \n __all__ = [\n     'applyrules', 'debugcapi', 'dictappend', 'errmess', 'gentitle',\n@@ -51,7 +52,6 @@\n f2py_version = __version__.version\n \n \n-errmess = sys.stderr.write\n show = pprint.pprint\n \n options = {}"
    },
    {
        "commit_id": "3887aafc360f14c8335c488b63a50a63f252a56f",
        "commit_message": "cfuncs.py: fix crash when sys.stderr is not available\n\nIn some environments (for example frozen executables created with PyInstaller for GUI applications) `sys.stderr` and `sys.stdout` might be `None`.\n\nThe import-time access to `sys.stderr.write` in some `f2py` modules was causing such applications to crash during startup.\n\nFix #26862",
        "commit_url": "https://github.com/numpy/numpy/commit/3887aafc360f14c8335c488b63a50a63f252a56f",
        "buggy_code": "errmess = sys.stderr.write",
        "fixed_code": "from .cfuncs import errmess",
        "patch": "@@ -17,6 +17,7 @@\n \n from . import __version__\n from . import cfuncs\n+from .cfuncs import errmess\n \n __all__ = [\n     'applyrules', 'debugcapi', 'dictappend', 'errmess', 'gentitle',\n@@ -51,7 +52,6 @@\n f2py_version = __version__.version\n \n \n-errmess = sys.stderr.write\n show = pprint.pprint\n \n options = {}"
    },
    {
        "commit_id": "ecf44cbd4bd5355a17fd91738dff874fe2704f99",
        "commit_message": "TST: fix errant print in test",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf44cbd4bd5355a17fd91738dff874fe2704f99",
        "buggy_code": "cmd = f\"{sys.executable} -c \\\"import sys; print(sys._is_gil_enabled()); import blah; blah.hi();\"",
        "fixed_code": "cmd = f\"{sys.executable} -c \\\"import blah; blah.hi();\"",
        "patch": "@@ -760,7 +760,7 @@ def test_no_freethreading_compatible(hello_world_f90, monkeypatch):\n \n     with util.switchdir(ipath.parent):\n         f2pycli()\n-        cmd = f\"{sys.executable} -c \\\"import sys; print(sys._is_gil_enabled()); import blah; blah.hi();\"\n+        cmd = f\"{sys.executable} -c \\\"import blah; blah.hi();\"\n         if NOGIL_BUILD:\n             cmd += \"import sys; assert sys._is_gil_enabled() is True\\\"\"\n         else:"
    },
    {
        "commit_id": "776f8814c0ab7e164fc93e1a2196a871f0b1090b",
        "commit_message": "Merge pull request #26935 from paddyroddy/f2py-compile-test\n\nBUG: fix `f2py` tests to work with v2 API",
        "commit_url": "https://github.com/numpy/numpy/commit/776f8814c0ab7e164fc93e1a2196a871f0b1090b",
        "buggy_code": "except:",
        "fixed_code": "except subprocess.CalledProcessError:",
        "patch": "@@ -328,7 +328,7 @@ def build_meson(source_files, module_name=None, **kwargs):\n     # compiler stack is on the CI\n     try:\n         backend.compile()\n-    except:\n+    except subprocess.CalledProcessError:\n         pytest.skip(\"Failed to compile module\")\n \n     # Import the compiled module"
    },
    {
        "commit_id": "7622b67bebc19437d2e6e6c7f748a557534c5d5c",
        "commit_message": "BUG: fix f2py tests to work with v2 API\n\nThis is a clear bug which CI unfortunately doesn't see because it\njust skips the f2py test if compilation fails (which it does here).\n\nThe error is slightly more precise now, but not precise enough to\navoid that issue.",
        "commit_url": "https://github.com/numpy/numpy/commit/7622b67bebc19437d2e6e6c7f748a557534c5d5c",
        "buggy_code": "except:",
        "fixed_code": "except subprocess.CalledProcessError:",
        "patch": "@@ -328,7 +328,7 @@ def build_meson(source_files, module_name=None, **kwargs):\n     # compiler stack is on the CI\n     try:\n         backend.compile()\n-    except:\n+    except subprocess.CalledProcessError:\n         pytest.skip(\"Failed to compile module\")\n \n     # Import the compiled module"
    },
    {
        "commit_id": "7bff2754f64cb855c39b59cf6d0b7bc51fe49a61",
        "commit_message": "Merge pull request #26931 from paddyroddy/spin-full-test\n\nBUG: Fix running full test command in docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/7bff2754f64cb855c39b59cf6d0b7bc51fe49a61",
        "buggy_code": "`spin -m full`",
        "fixed_code": "`spin test -m full`",
        "patch": "@@ -246,7 +246,7 @@ def test(ctx, pytest_args, markexpr, n_jobs, tests, verbose, *args, **kwargs):\n      spin test -- -k \"geometric and not rgeometric\"\n \n     By default, spin will run `-m 'not slow'`. To run the full test suite, use\n-    `spin -m full`\n+    `spin test -m full`\n \n     For more, see `pytest --help`.\n     \"\"\"  # noqa: E501"
    },
    {
        "commit_id": "b17dc3e1ef12720fa72a12e407569b7a7ccaba34",
        "commit_message": "BUG: FIx running full test command in docstring\n\n`spin -m full` doesn't work by itself",
        "commit_url": "https://github.com/numpy/numpy/commit/b17dc3e1ef12720fa72a12e407569b7a7ccaba34",
        "buggy_code": "`spin -m full`",
        "fixed_code": "`spin test -m full`",
        "patch": "@@ -246,7 +246,7 @@ def test(ctx, pytest_args, markexpr, n_jobs, tests, verbose, *args, **kwargs):\n      spin test -- -k \"geometric and not rgeometric\"\n \n     By default, spin will run `-m 'not slow'`. To run the full test suite, use\n-    `spin -m full`\n+    `spin test -m full`\n \n     For more, see `pytest --help`.\n     \"\"\"  # noqa: E501"
    },
    {
        "commit_id": "f76def3608dc9bb59954f5cb4b4c5f30e8544b8a",
        "commit_message": "Merge pull request #26877 from DimitriPapadopoulos/ISC\n\nBUG: start applying ruff/flake8-implicit-str-concat rules (ISC)",
        "commit_url": "https://github.com/numpy/numpy/commit/f76def3608dc9bb59954f5cb4b4c5f30e8544b8a",
        "buggy_code": "param_names = ['ufunc', 'stride_in0', 'stride_in1' 'stride_out', 'dtype']",
        "fixed_code": "param_names = ['ufunc', 'stride_in0', 'stride_in1', 'stride_out', 'dtype']",
        "patch": "@@ -8,7 +8,7 @@\n \n class _AbstractBinary(Benchmark):\n     params = []\n-    param_names = ['ufunc', 'stride_in0', 'stride_in1' 'stride_out', 'dtype']\n+    param_names = ['ufunc', 'stride_in0', 'stride_in1', 'stride_out', 'dtype']\n     timeout = 10\n     arrlen = 10000\n     data_finite = True"
    },
    {
        "commit_id": "b8b0d88eb3561b52ab0588014e5239bf5886ab54",
        "commit_message": "Merge pull request #26881 from DimitriPapadopoulos/codespell\n\nDOC, MAINT: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/b8b0d88eb3561b52ab0588014e5239bf5886ab54",
        "buggy_code": "pre-pends the local_path if needed. Because this is called on all",
        "fixed_code": "prepends the local_path if needed. Because this is called on all",
        "patch": "@@ -1420,7 +1420,7 @@ def paths(self,*paths,**kws):\n         \"\"\"Apply glob to paths and prepend local_path if needed.\n \n         Applies glob.glob(...) to each path in the sequence (if needed) and\n-        pre-pends the local_path if needed. Because this is called on all\n+        prepends the local_path if needed. Because this is called on all\n         source lists, this allows wildcard characters to be specified in lists\n         of sources for extension modules and libraries and scripts and allows\n         path-names be relative to the source directory."
    },
    {
        "commit_id": "b8b0d88eb3561b52ab0588014e5239bf5886ab54",
        "commit_message": "Merge pull request #26881 from DimitriPapadopoulos/codespell\n\nDOC, MAINT: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/b8b0d88eb3561b52ab0588014e5239bf5886ab54",
        "buggy_code": "Return a np.array that encodes the optimal order of mutiplications.",
        "fixed_code": "Return a np.array that encodes the optimal order of multiplications.",
        "patch": "@@ -3032,7 +3032,7 @@ def _multi_dot_three(A, B, C, out=None):\n \n def _multi_dot_matrix_chain_order(arrays, return_costs=False):\n     \"\"\"\n-    Return a np.array that encodes the optimal order of mutiplications.\n+    Return a np.array that encodes the optimal order of multiplications.\n \n     The optimal order array is then used by `_multi_dot()` to do the\n     multiplication."
    },
    {
        "commit_id": "d7f8f1618b1910d636c9018580ab9d027f3aa83c",
        "commit_message": "MAINT: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/d7f8f1618b1910d636c9018580ab9d027f3aa83c",
        "buggy_code": "pre-pends the local_path if needed. Because this is called on all",
        "fixed_code": "prepends the local_path if needed. Because this is called on all",
        "patch": "@@ -1420,7 +1420,7 @@ def paths(self,*paths,**kws):\n         \"\"\"Apply glob to paths and prepend local_path if needed.\n \n         Applies glob.glob(...) to each path in the sequence (if needed) and\n-        pre-pends the local_path if needed. Because this is called on all\n+        prepends the local_path if needed. Because this is called on all\n         source lists, this allows wildcard characters to be specified in lists\n         of sources for extension modules and libraries and scripts and allows\n         path-names be relative to the source directory."
    },
    {
        "commit_id": "d7f8f1618b1910d636c9018580ab9d027f3aa83c",
        "commit_message": "MAINT: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/d7f8f1618b1910d636c9018580ab9d027f3aa83c",
        "buggy_code": "Return a np.array that encodes the optimal order of mutiplications.",
        "fixed_code": "Return a np.array that encodes the optimal order of multiplications.",
        "patch": "@@ -3032,7 +3032,7 @@ def _multi_dot_three(A, B, C, out=None):\n \n def _multi_dot_matrix_chain_order(arrays, return_costs=False):\n     \"\"\"\n-    Return a np.array that encodes the optimal order of mutiplications.\n+    Return a np.array that encodes the optimal order of multiplications.\n \n     The optimal order array is then used by `_multi_dot()` to do the\n     multiplication."
    },
    {
        "commit_id": "e94bd89fe72967572cea414253950f4ae43abf23",
        "commit_message": "BUG: apply ruff/flake8-implicit-str-concat rule ISC001\n\nISC001 Implicitly concatenated string literals on one line",
        "commit_url": "https://github.com/numpy/numpy/commit/e94bd89fe72967572cea414253950f4ae43abf23",
        "buggy_code": "param_names = ['ufunc', 'stride_in0', 'stride_in1' 'stride_out', 'dtype']",
        "fixed_code": "param_names = ['ufunc', 'stride_in0', 'stride_in1', 'stride_out', 'dtype']",
        "patch": "@@ -8,7 +8,7 @@\n \n class _AbstractBinary(Benchmark):\n     params = []\n-    param_names = ['ufunc', 'stride_in0', 'stride_in1' 'stride_out', 'dtype']\n+    param_names = ['ufunc', 'stride_in0', 'stride_in1', 'stride_out', 'dtype']\n     timeout = 10\n     arrlen = 10000\n     data_finite = True"
    },
    {
        "commit_id": "fae3738ddddd8972008c7d2d3cc19250d748d0a2",
        "commit_message": "Merge pull request #26703 from HaoZeke/fixF2PYflags\n\nBUG: Handle `--f77flags` and `--f90flags` for `meson`",
        "commit_url": "https://github.com/numpy/numpy/commit/fae3738ddddd8972008c7d2d3cc19250d748d0a2",
        "buggy_code": "if ext in (\".f90\", \".f\", \".c\", \".pyf\"):",
        "fixed_code": "if ext in (\".f90\", \".f95\", \".f\", \".c\", \".pyf\"):",
        "patch": "@@ -121,7 +121,7 @@ def build_module(source_files, options=[], skip=[], only=[], module_name=None):\n         dst_sources.append(dst)\n \n         base, ext = os.path.splitext(dst)\n-        if ext in (\".f90\", \".f\", \".c\", \".pyf\"):\n+        if ext in (\".f90\", \".f95\", \".f\", \".c\", \".pyf\"):\n             f2py_sources.append(dst)\n \n     assert f2py_sources"
    },
    {
        "commit_id": "2ad1c9d4bbf5b16f237428ba71a2b8a82cb813f9",
        "commit_message": "Fix docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/2ad1c9d4bbf5b16f237428ba71a2b8a82cb813f9",
        "buggy_code": "{'edgeitems': 3, 'threshold': 1000, ..., 'legacy': False}",
        "fixed_code": "{'edgeitems': 3, 'threshold': 1000, ..., 'override_repr': None}",
        "patch": "@@ -340,7 +340,7 @@ def get_printoptions():\n     --------\n \n     >>> np.get_printoptions()\n-    {'edgeitems': 3, 'threshold': 1000, ..., 'legacy': False}\n+    {'edgeitems': 3, 'threshold': 1000, ..., 'override_repr': None}\n \n     >>> np.get_printoptions()['linewidth']\n     75"
    },
    {
        "commit_id": "75eaca20c615ca5ec7fbbe5c5211d4475f1d42fd",
        "commit_message": "BUG: fix char.array doctest\n\n[skip actions][skip azp][skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/75eaca20c615ca5ec7fbbe5c5211d4475f1d42fd",
        "buggy_code": "array(['a', 'b', 'c'], dtype='<U8')",
        "fixed_code": "chararray(['a', 'b', 'c'], dtype='<U8')",
        "patch": "@@ -1265,7 +1265,7 @@ class adds the following functionality:\n     >>> np.char.array([\"a\", \"b\", \"c\"])\n     chararray(['a', 'b', 'c'], dtype='<U1')\n     >>> np.char.array([\"a\", \"b\", \"c\"], itemsize=8)\n-    array(['a', 'b', 'c'], dtype='<U8')\n+    chararray(['a', 'b', 'c'], dtype='<U8')\n     >>> np.char.array([1, 2, 3])\n     chararray([b'1', b'2', b'3'], dtype='|S1')\n "
    },
    {
        "commit_id": "04b1067c8ffcc34bc1c27b7255295a3e8ebc80c2",
        "commit_message": "BUG: fix isalpha docstring undetermined string literal\n\n[skip actions][skip azp][skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/04b1067c8ffcc34bc1c27b7255295a3e8ebc80c2",
        "buggy_code": ">>> np.char.isalpha([\"not\", \"\\x00\", \"alpha\"])",
        "fixed_code": ">>> np.char.isalpha([\"not\", \"\\\\x00\", \"alpha\"])",
        "patch": "@@ -4377,7 +4377,7 @@ def add_newdoc(place, name, doc):\n     --------\n     >>> np.char.isalpha([\"yes\", \"alpha\"])\n     array([ True,  True])\n-    >>> np.char.isalpha([\"not\", \"\\x00\", \"alpha\"])\n+    >>> np.char.isalpha([\"not\", \"\\\\x00\", \"alpha\"])\n     array([ True, False,  True])\n     >>> np.char.isalpha([\"n0t\", \"4lpha\"])\n     array([ False, False])"
    },
    {
        "commit_id": "570e5cb4bc2a0bde5941e3883dc105b0982cf1f2",
        "commit_message": "Merge pull request #26637 from ngoldbaum/bench-linalg-fix\n\nBUG: fix incorrect randomized parameterization in bench_linalg",
        "commit_url": "https://github.com/numpy/numpy/commit/570e5cb4bc2a0bde5941e3883dc105b0982cf1f2",
        "buggy_code": "params = set(TYPES1) - set(['float16'])",
        "fixed_code": "params = sorted(list(set(TYPES1) - set(['float16'])))",
        "patch": "@@ -72,7 +72,7 @@ def time_tensordot_a_b_axes_1_0_0_1(self):\n \n \n class Linalg(Benchmark):\n-    params = set(TYPES1) - set(['float16'])\n+    params = sorted(list(set(TYPES1) - set(['float16'])))\n     param_names = ['dtype']\n \n     def setup(self, typename):"
    },
    {
        "commit_id": "5ce234e922cc4830ef039bbc5be21420332b88a7",
        "commit_message": "BUG: fix incorrect randomized parameterization in bench_linalg",
        "commit_url": "https://github.com/numpy/numpy/commit/5ce234e922cc4830ef039bbc5be21420332b88a7",
        "buggy_code": "params = set(TYPES1) - set(['float16'])",
        "fixed_code": "params = sorted(list(set(TYPES1) - set(['float16'])))",
        "patch": "@@ -72,7 +72,7 @@ def time_tensordot_a_b_axes_1_0_0_1(self):\n \n \n class Linalg(Benchmark):\n-    params = set(TYPES1) - set(['float16'])\n+    params = sorted(list(set(TYPES1) - set(['float16'])))\n     param_names = ['dtype']\n \n     def setup(self, typename):"
    },
    {
        "commit_id": "3eca7a65403d3e6dc9363d822e0c57173f63aa0c",
        "commit_message": "DOC: fix +NORMALIZE_WHITESPACE for `unique_all` example\n\n[skip actions][skip azp][skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/3eca7a65403d3e6dc9363d822e0c57173f63aa0c",
        "buggy_code": ">>> np.unique_all([1, 1, 2])",
        "fixed_code": ">>> np.unique_all([1, 1, 2])  # doctest: +NORMALIZE_WHITESPACE",
        "patch": "@@ -435,7 +435,7 @@ def unique_all(x):\n \n     Examples\n     --------\n-    >>> np.unique_all([1, 1, 2])\n+    >>> np.unique_all([1, 1, 2])  # doctest: +NORMALIZE_WHITESPACE\n     UniqueAllResult(\n             values=array([1, 2]),\n             indices=array([0, 2]),"
    },
    {
        "commit_id": "22f5282b1b3af88d1326017f49d190d658d2e939",
        "commit_message": "MAINT: fix up several doctests",
        "commit_url": "https://github.com/numpy/numpy/commit/22f5282b1b3af88d1326017f49d190d658d2e939",
        "buggy_code": "array([\"hello\", None, \"world\", dtype=StringDType(na_object=None))",
        "fixed_code": "array([\"hello\", None, \"world\"], dtype=StringDType(na_object=None))",
        "patch": "@@ -6939,7 +6939,7 @@ def refer_to_array_attribute(attr, method=True):\n     >>> arr = np.array([\"hello\", None, \"world\"],\n     ...                dtype=StringDType(na_object=None))\n     >>> arr\n-    array([\"hello\", None, \"world\", dtype=StringDType(na_object=None))\n+    array([\"hello\", None, \"world\"], dtype=StringDType(na_object=None))\n     >>> arr[1] is None\n     True\n "
    },
    {
        "commit_id": "22f5282b1b3af88d1326017f49d190d658d2e939",
        "commit_message": "MAINT: fix up several doctests",
        "commit_url": "https://github.com/numpy/numpy/commit/22f5282b1b3af88d1326017f49d190d658d2e939",
        "buggy_code": ">>> np.add(np.arange(2),np.arange(2.),x)",
        "fixed_code": ">>> np.add(np.arange(2, dtype=float), np.arange(2, dtype=float), x, casting='unsafe')",
        "patch": "@@ -113,7 +113,7 @@\n output argument is used, the ufunc still returns a reference to the result.\n \n  >>> x = np.arange(2)\n- >>> np.add(np.arange(2),np.arange(2.),x)\n+ >>> np.add(np.arange(2, dtype=float), np.arange(2, dtype=float), x, casting='unsafe')\n  array([0, 2])\n  >>> x\n  array([0, 2])"
    },
    {
        "commit_id": "19a68c78e51f9f24ec586d43ebdfbf6ab240a067",
        "commit_message": "fix lint error",
        "commit_url": "https://github.com/numpy/numpy/commit/19a68c78e51f9f24ec586d43ebdfbf6ab240a067",
        "buggy_code": "(np.empty, (5,5)),",
        "fixed_code": "(np.empty, (5, 5)),",
        "patch": "@@ -10237,7 +10237,7 @@ class TestDevice:\n         (np.arange, 5),\n         (np.empty_like, []),\n         (np.zeros, 5),\n-        (np.empty, (5,5)),\n+        (np.empty, (5, 5)),\n         (np.asarray, []),\n         (np.asanyarray, []),\n     ])"
    },
    {
        "commit_id": "72e7dc76b59ee9c94336f0ba4b45a8f4350c8fe6",
        "commit_message": "DOC: fix several doctest errors",
        "commit_url": "https://github.com/numpy/numpy/commit/72e7dc76b59ee9c94336f0ba4b45a8f4350c8fe6",
        "buggy_code": "numpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]",
        "fixed_code": "numpy.ndarray[typing.Any, numpy.dtype[+_ScalarType_co]]",
        "patch": "@@ -136,7 +136,7 @@ def _parse_docstrings() -> str:\n         >>> import numpy.typing as npt\n \n         >>> print(npt.NDArray)\n-        numpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]\n+        numpy.ndarray[typing.Any, numpy.dtype[+_ScalarType_co]]\n \n         >>> print(npt.NDArray[np.float64])\n         numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"
    },
    {
        "commit_id": "4ea21f3bef79e797323be950ef64ee1273c9a6b1",
        "commit_message": "BUG: fix setxor1d when input arrays aren't 1D (#26559)\n\n* BUG: fix setxor1d when input arrays aren't 1D\r\n\r\nSee #14670. Previously, when `assume_unique=True`, `setxor1d` attemptes\r\nto concatenate arrays with potentially incompatible dimensions.\r\nThe choice to call `np.ravel` instead of enforcing that the input\r\narrays are 1D stems from the consensus in the linked issue to avoid\r\nbreaking existing code.\r\n\r\n* Simplified implementation according to comments\r\n\r\n* Shift new tests into seperate functions",
        "commit_url": "https://github.com/numpy/numpy/commit/4ea21f3bef79e797323be950ef64ee1273c9a6b1",
        "buggy_code": "aux = ma.concatenate((ar1, ar2))",
        "fixed_code": "aux = ma.concatenate((ar1, ar2), axis=None)",
        "patch": "@@ -1395,7 +1395,7 @@ def setxor1d(ar1, ar2, assume_unique=False):\n         ar1 = unique(ar1)\n         ar2 = unique(ar2)\n \n-    aux = ma.concatenate((ar1, ar2))\n+    aux = ma.concatenate((ar1, ar2), axis=None)\n     if aux.size == 0:\n         return aux\n     aux.sort()"
    },
    {
        "commit_id": "c654203a63ea5e93e1c8096cc303f0f870371187",
        "commit_message": "BUG: cast missing in PyPy-specific f2py code, pin spin in CI (#26534)\n\n* BUG: cast missing in PyPy-specific f2py code\r\n\r\n* CI: use build_requirements.txt",
        "commit_url": "https://github.com/numpy/numpy/commit/c654203a63ea5e93e1c8096cc303f0f870371187",
        "buggy_code": "capi_arglist_list = PySequence_List(capi_arglist);",
        "fixed_code": "capi_arglist_list = PySequence_List((PyObject *)capi_arglist);",
        "patch": "@@ -122,7 +122,7 @@\n #setdims#\n #ifdef PYPY_VERSION\n #define CAPI_ARGLIST_SETITEM(idx, value) PyList_SetItem((PyObject *)capi_arglist_list, idx, value)\n-    capi_arglist_list = PySequence_List(capi_arglist);\n+    capi_arglist_list = PySequence_List((PyObject *)capi_arglist);\n     if (capi_arglist_list == NULL) goto capi_fail;\n #else\n #define CAPI_ARGLIST_SETITEM(idx, value) PyTuple_SetItem((PyObject *)capi_arglist, idx, value)"
    },
    {
        "commit_id": "a6e9dc7152098182b45ecd6effa15223890d663e",
        "commit_message": "Merge pull request #26531 from quotuva/main\n\nBUG: Fix entry-point of Texinfo docs",
        "commit_url": "https://github.com/numpy/numpy/commit/a6e9dc7152098182b45ecd6effa15223890d663e",
        "buggy_code": "(\"contents\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',",
        "fixed_code": "(\"index\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',",
        "patch": "@@ -388,7 +388,7 @@ def setup(app):\n # -----------------------------------------------------------------------------\n \n texinfo_documents = [\n-  (\"contents\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',\n+  (\"index\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',\n    \"NumPy: array processing for numbers, strings, records, and objects.\",\n    'Programming',\n    1),"
    },
    {
        "commit_id": "82232918903818f0d5ebbdb75cb96166baeda87e",
        "commit_message": "BUG: Fix entry-point of Texinfo docs\n\nThe info documentation was buildable after this change was applied to v1.26.5.\n[skip azp] [skip circle] [skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/82232918903818f0d5ebbdb75cb96166baeda87e",
        "buggy_code": "(\"contents\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',",
        "fixed_code": "(\"index\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',",
        "patch": "@@ -388,7 +388,7 @@ def setup(app):\n # -----------------------------------------------------------------------------\n \n texinfo_documents = [\n-  (\"contents\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',\n+  (\"index\", 'numpy', 'NumPy Documentation', _stdauthor, 'NumPy',\n    \"NumPy: array processing for numbers, strings, records, and objects.\",\n    'Programming',\n    1),"
    },
    {
        "commit_id": "04ede7bf4887f106680a0b216f79107a99746e99",
        "commit_message": "Merge branch 'numpy:main' into fix-ma-cov",
        "commit_url": "https://github.com/numpy/numpy/commit/04ede7bf4887f106680a0b216f79107a99746e99",
        "buggy_code": "'subtract', 'tan', 'tanh', 'true_divide', 'trunc', 'vecdot']",
        "fixed_code": "'subtract', 'tan', 'tanh', 'true_divide', 'trunc']",
        "patch": "@@ -37,4 +37,4 @@\n     'multiply', 'negative', 'nextafter', 'not_equal', 'pi', 'positive',\n     'power', 'rad2deg', 'radians', 'reciprocal', 'remainder', 'right_shift',\n     'rint', 'sign', 'signbit', 'sin', 'sinh', 'spacing', 'sqrt', 'square',\n-    'subtract', 'tan', 'tanh', 'true_divide', 'trunc', 'vecdot']\n+    'subtract', 'tan', 'tanh', 'true_divide', 'trunc']"
    },
    {
        "commit_id": "04ede7bf4887f106680a0b216f79107a99746e99",
        "commit_message": "Merge branch 'numpy:main' into fix-ma-cov",
        "commit_url": "https://github.com/numpy/numpy/commit/04ede7bf4887f106680a0b216f79107a99746e99",
        "buggy_code": "pickle.dump(array, fp, protocol=3, **pickle_kwargs)",
        "fixed_code": "pickle.dump(array, fp, protocol=4, **pickle_kwargs)",
        "patch": "@@ -741,7 +741,7 @@ def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):\n                                  \"when allow_pickle=False\")\n         if pickle_kwargs is None:\n             pickle_kwargs = {}\n-        pickle.dump(array, fp, protocol=3, **pickle_kwargs)\n+        pickle.dump(array, fp, protocol=4, **pickle_kwargs)\n     elif array.flags.f_contiguous and not array.flags.c_contiguous:\n         if isfileobj(fp):\n             array.T.tofile(fp)"
    },
    {
        "commit_id": "6c648e7af3bc873fec4312db04a6fdc9e7c90c26",
        "commit_message": "Merge pull request #26503 from ngoldbaum/fix-free-threaded-test-flake\n\nTST: work around flaky test on free-threaded build",
        "commit_url": "https://github.com/numpy/numpy/commit/6c648e7af3bc873fec4312db04a6fdc9e7c90c26",
        "buggy_code": "with pytest.warns(RuntimeWarning):",
        "fixed_code": "with pytest.raises(RuntimeWarning):",
        "patch": "@@ -362,7 +362,7 @@ def weak_warn():\n         np._set_promotion_state(\"weak\")\n         b.wait()\n         assert np._get_promotion_state() == \"weak\"\n-        with pytest.warns(RuntimeWarning):\n+        with pytest.raises(RuntimeWarning):\n             np.float16(1) + 131008\n \n     task1 = threading.Thread(target=legacy_no_warn)"
    },
    {
        "commit_id": "98e8913d2ac49ef9203e2f651a3d54fb166d1bd4",
        "commit_message": "BUG: Use Python pickle protocol version 4 for np.save (#26388)\n\n* BUG: Use default Python pickle protocol version rather than outdated protocol 3\r\n\r\n* Update default pickle of np.save to 4\r\n\r\n* Adds document for default pickle protocol 4",
        "commit_url": "https://github.com/numpy/numpy/commit/98e8913d2ac49ef9203e2f651a3d54fb166d1bd4",
        "buggy_code": "compatible between Python 2 and Python 3).",
        "fixed_code": "compatible between different versions of Python).",
        "patch": "@@ -520,7 +520,7 @@ def save(file, arr, allow_pickle=True, fix_imports=True):\n         arbitrary code) and portability (pickled objects may not be loadable\n         on different Python installations, for example if the stored objects\n         require libraries that are not available, and not all pickled data is\n-        compatible between Python 2 and Python 3).\n+        compatible between different versions of Python).\n         Default: True\n     fix_imports : bool, optional\n         Only useful in forcing objects in object arrays on Python 3 to be"
    },
    {
        "commit_id": "98e8913d2ac49ef9203e2f651a3d54fb166d1bd4",
        "commit_message": "BUG: Use Python pickle protocol version 4 for np.save (#26388)\n\n* BUG: Use default Python pickle protocol version rather than outdated protocol 3\r\n\r\n* Update default pickle of np.save to 4\r\n\r\n* Adds document for default pickle protocol 4",
        "commit_url": "https://github.com/numpy/numpy/commit/98e8913d2ac49ef9203e2f651a3d54fb166d1bd4",
        "buggy_code": "pickle.dump(array, fp, protocol=3, **pickle_kwargs)",
        "fixed_code": "pickle.dump(array, fp, protocol=4, **pickle_kwargs)",
        "patch": "@@ -741,7 +741,7 @@ def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):\n                                  \"when allow_pickle=False\")\n         if pickle_kwargs is None:\n             pickle_kwargs = {}\n-        pickle.dump(array, fp, protocol=3, **pickle_kwargs)\n+        pickle.dump(array, fp, protocol=4, **pickle_kwargs)\n     elif array.flags.f_contiguous and not array.flags.c_contiguous:\n         if isfileobj(fp):\n             array.T.tofile(fp)"
    },
    {
        "commit_id": "51bedd5b7592a316e55ccd01f6f5586e0cfadc7e",
        "commit_message": "fix tests on all platforms",
        "commit_url": "https://github.com/numpy/numpy/commit/51bedd5b7592a316e55ccd01f6f5586e0cfadc7e",
        "buggy_code": "a = np.array([0, 1.1, 2, 12e12, np.inf], dt)",
        "fixed_code": "a = np.array([0, 1.1, 2, 12e12], dt)",
        "patch": "@@ -1243,7 +1243,7 @@ def test_power_fast_paths(self):\n             result = np.power(a, 2.)\n             assert_array_max_ulp(result, expected.astype(dt), maxulp=1)\n \n-            a = np.array([0, 1.1, 2, 12e12, np.inf], dt)\n+            a = np.array([0, 1.1, 2, 12e12], dt)\n             expected = np.sqrt(a).astype(dt)\n             result = np.power(a, 0.5)\n             assert_array_max_ulp(result, expected, maxulp=1)"
    },
    {
        "commit_id": "44a90a5c1cc60747d7f31fd507a9836695d12c9c",
        "commit_message": "BUG: vecdot signature",
        "commit_url": "https://github.com/numpy/numpy/commit/44a90a5c1cc60747d7f31fd507a9836695d12c9c",
        "buggy_code": "'subtract', 'tan', 'tanh', 'true_divide', 'trunc', 'vecdot']",
        "fixed_code": "'subtract', 'tan', 'tanh', 'true_divide', 'trunc']",
        "patch": "@@ -37,4 +37,4 @@\n     'multiply', 'negative', 'nextafter', 'not_equal', 'pi', 'positive',\n     'power', 'rad2deg', 'radians', 'reciprocal', 'remainder', 'right_shift',\n     'rint', 'sign', 'signbit', 'sin', 'sinh', 'spacing', 'sqrt', 'square',\n-    'subtract', 'tan', 'tanh', 'true_divide', 'trunc', 'vecdot']\n+    'subtract', 'tan', 'tanh', 'true_divide', 'trunc']"
    },
    {
        "commit_id": "4e6d2bf866ff26e7088c47b01a4dfbb5485c7c85",
        "commit_message": "ENH: add support for nan-like null strings in string replace (#26355)\n\nThis fixes an issue similar to the one fixed by #26353.\r\n\r\nIn particular, right now np.strings.replace calls the count ufunc to get the number of replacements. This is necessary for fixed-width strings, but it turns out to make it impossible to support null strings in replace.\r\n\r\nI went ahead and instead found the replacement counts inline in the ufunc loop. This lets me add support for nan-like null strings, which it turns out pandas needs.",
        "commit_url": "https://github.com/numpy/numpy/commit/4e6d2bf866ff26e7088c47b01a4dfbb5485c7c85",
        "buggy_code": "\"replace\",",
        "fixed_code": "\"replace\"",
        "patch": "@@ -1218,6 +1218,7 @@ def test_unary(string_array, unicode_array, function_name):\n     \"strip\",\n     \"lstrip\",\n     \"rstrip\",\n+    \"replace\"\n     \"zfill\",\n ]\n \n@@ -1230,7 +1231,6 @@ def test_unary(string_array, unicode_array, function_name):\n     \"count\",\n     \"find\",\n     \"rfind\",\n-    \"replace\",\n ]\n \n SUPPORTS_NULLS = ("
    },
    {
        "commit_id": "4a264d16640505401287e82e7b6a945414e132e5",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/numpy/numpy/commit/4a264d16640505401287e82e7b6a945414e132e5",
        "buggy_code": "ValueError,",
        "fixed_code": "TypeError,",
        "patch": "@@ -171,7 +171,7 @@ def test_reshape_shape_arg(self):\n         expected = arr.reshape(shape)\n \n         with pytest.raises(\n-            ValueError,\n+            TypeError,\n             match=\"You cannot specify 'newshape' and 'shape' \"\n                   \"arguments at the same time.\"\n         ):"
    },
    {
        "commit_id": "552fdd4a476c6cc99a9f985493664f7279bbff65",
        "commit_message": "Merge pull request #26319 from pijyoi/fix-asv-win32\n\nBUG: fix spin bench not running on Windows",
        "commit_url": "https://github.com/numpy/numpy/commit/552fdd4a476c6cc99a9f985493664f7279bbff65",
        "buggy_code": "env['PATH'] = f'EXTRA_PATH:{PATH}'",
        "fixed_code": "env['PATH'] = f'{EXTRA_PATH}{os.pathsep}{PATH}'",
        "patch": "@@ -309,7 +309,7 @@ def _run_asv(cmd):\n         '/usr/local/lib/ccache', '/usr/local/lib/f90cache'\n     ])\n     env = os.environ\n-    env['PATH'] = f'EXTRA_PATH:{PATH}'\n+    env['PATH'] = f'{EXTRA_PATH}{os.pathsep}{PATH}'\n \n     # Control BLAS/LAPACK threads\n     env['OPENBLAS_NUM_THREADS'] = '1'"
    },
    {
        "commit_id": "44fddc29d4fcd43570d885c85662bd1727c3a637",
        "commit_message": "DOC: fix typo in _add_newdoc_ufunc docstring (#26232)",
        "commit_url": "https://github.com/numpy/numpy/commit/44fddc29d4fcd43570d885c85662bd1727c3a637",
        "buggy_code": "the heap. Technically this creates a mempory leak, since this",
        "fixed_code": "the heap. Technically this creates a memory leak, since this",
        "patch": "@@ -4743,7 +4743,7 @@\n     Notes\n     -----\n     This method allocates memory for new_docstring on\n-    the heap. Technically this creates a mempory leak, since this\n+    the heap. Technically this creates a memory leak, since this\n     memory will not be reclaimed until the end of the program\n     even if the ufunc itself is removed. However this will only\n     be a problem if the user is repeatedly creating ufuncs with"
    },
    {
        "commit_id": "ffb23cd626bc1f7d09aed257e28142346661a915",
        "commit_message": "Merge pull request #26147 from ngoldbaum/fix-stringdtype-views\n\nBUG: introduce PyArray_SafeCast to fix issues around stringdtype views",
        "commit_url": "https://github.com/numpy/numpy/commit/ffb23cd626bc1f7d09aed257e28142346661a915",
        "buggy_code": "raise TypeError(\"Cannot change data-type for object array.\")",
        "fixed_code": "raise TypeError(\"Cannot change data-type for array of references.\")",
        "patch": "@@ -560,7 +560,7 @@ def _view_is_safe(oldtype, newtype):\n         return\n \n     if newtype.hasobject or oldtype.hasobject:\n-        raise TypeError(\"Cannot change data-type for object array.\")\n+        raise TypeError(\"Cannot change data-type for array of references.\")\n     return\n \n "
    },
    {
        "commit_id": "970476737080a053d9be3d6f4479bb1b5cd17f19",
        "commit_message": "BUG: masked array division should ignore all FPEs in mask calculation (#26135)\n\n* BUG: masked array division broken with np.seterr(under=raise) #25810\r\n\r\n* STY: Remove unnecessary brackets\r\n\r\nCloses gh-25810\r\n\r\n---------\r\n\r\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/970476737080a053d9be3d6f4479bb1b5cd17f19",
        "buggy_code": "with np.errstate(invalid='ignore'):",
        "fixed_code": "with np.errstate(all='ignore'):",
        "patch": "@@ -877,7 +877,7 @@ def __call__(self, a, b):\n             self.tolerance = np.finfo(float).tiny\n         # don't call ma ufuncs from __array_wrap__ which would fail for scalars\n         a, b = np.asarray(a), np.asarray(b)\n-        with np.errstate(invalid='ignore'):\n+        with np.errstate(all='ignore'):\n             return umath.absolute(a) * self.tolerance >= umath.absolute(b)\n \n "
    },
    {
        "commit_id": "3fca2157c975a36e56b335c029c8902f3d4496ef",
        "commit_message": "Merge pull request #26136 from batatas-fritas/patch\n\nBUG: fixed datetime64[ns] conversion issue in numpy.vectorize, see #25936",
        "commit_url": "https://github.com/numpy/numpy/commit/3fca2157c975a36e56b335c029c8902f3d4496ef",
        "buggy_code": "otypes = ''.join([_nx.dtype(x).char for x in otypes])",
        "fixed_code": "otypes = [_nx.dtype(x) for x in otypes]",
        "patch": "@@ -2330,7 +2330,7 @@ def __init__(self, pyfunc=np._NoValue, otypes=None, doc=None,\n                 if char not in typecodes['All']:\n                     raise ValueError(\"Invalid otype specified: %s\" % (char,))\n         elif iterable(otypes):\n-            otypes = ''.join([_nx.dtype(x).char for x in otypes])\n+            otypes = [_nx.dtype(x) for x in otypes]\n         elif otypes is not None:\n             raise ValueError(\"Invalid otype specification\")\n         self.otypes = otypes"
    },
    {
        "commit_id": "ef6299c7c2bd309646b6cc64f302de93de5e99b8",
        "commit_message": "Merge pull request #26162 from krisrosengreen/base_repr_fix\n\nBUG: Infinite Loop in numpy.base_repr",
        "commit_url": "https://github.com/numpy/numpy/commit/ef6299c7c2bd309646b6cc64f302de93de5e99b8",
        "buggy_code": "num = abs(number)",
        "fixed_code": "num = abs(int(number))",
        "patch": "@@ -2142,7 +2142,7 @@ def base_repr(number, base=2, padding=0):\n     elif base < 2:\n         raise ValueError(\"Bases less than 2 not handled in base_repr.\")\n \n-    num = abs(number)\n+    num = abs(int(number))\n     res = []\n     while num:\n         res.append(digits[num % base])"
    },
    {
        "commit_id": "15b08c305d23bf07b240f8792aa17a1359da4a8d",
        "commit_message": "BUG: Infinite Loop in numpy.base_repr",
        "commit_url": "https://github.com/numpy/numpy/commit/15b08c305d23bf07b240f8792aa17a1359da4a8d",
        "buggy_code": "num = abs(number)",
        "fixed_code": "num = abs(int(number))",
        "patch": "@@ -2142,7 +2142,7 @@ def base_repr(number, base=2, padding=0):\n     elif base < 2:\n         raise ValueError(\"Bases less than 2 not handled in base_repr.\")\n \n-    num = abs(number)\n+    num = abs(int(number))\n     res = []\n     while num:\n         res.append(digits[num % base])"
    },
    {
        "commit_id": "973b99f340042128e8357d0e48de7b029ac798fa",
        "commit_message": "TST: Fixup test for changed error message...",
        "commit_url": "https://github.com/numpy/numpy/commit/973b99f340042128e8357d0e48de7b029ac798fa",
        "buggy_code": "match=r\"Unable to avoid copy(.|\\n)*changed in NumPy 2\"):",
        "fixed_code": "match=r\"Unable to avoid copy(.|\\n)*numpy_2_0_migration_guide.html\"):",
        "patch": "@@ -8498,7 +8498,7 @@ def __array__(self, dtype=None):\n         # an error:\n         with pytest.warns(DeprecationWarning, match=\"__array__.*'copy'\"):\n             with pytest.raises(ValueError,\n-                    match=r\"Unable to avoid copy(.|\\n)*changed in NumPy 2\"):\n+                    match=r\"Unable to avoid copy(.|\\n)*numpy_2_0_migration_guide.html\"):\n                 np.array(a, copy=False)\n \n     @pytest.mark.skipif(not HAS_REFCOUNT, reason=\"Python lacks refcounts\")"
    },
    {
        "commit_id": "a703ff341df516eff831d0fea87f617ccae086ff",
        "commit_message": "BUG: introduce PyArray_ViewableTypes to fix issues around stringdtype views",
        "commit_url": "https://github.com/numpy/numpy/commit/a703ff341df516eff831d0fea87f617ccae086ff",
        "buggy_code": "raise TypeError(\"Cannot change data-type for object array.\")",
        "fixed_code": "raise TypeError(\"Cannot change data-type for array of references.\")",
        "patch": "@@ -560,7 +560,7 @@ def _view_is_safe(oldtype, newtype):\n         return\n \n     if newtype.hasobject or oldtype.hasobject:\n-        raise TypeError(\"Cannot change data-type for object array.\")\n+        raise TypeError(\"Cannot change data-type for array of references.\")\n     return\n \n "
    },
    {
        "commit_id": "e9cc084fa222a00746939de04d8f136f8ef13d2f",
        "commit_message": "BUG: fixed datetime64[ns] conversion issue in numpy.vectorize, see #25936",
        "commit_url": "https://github.com/numpy/numpy/commit/e9cc084fa222a00746939de04d8f136f8ef13d2f",
        "buggy_code": "otypes = ''.join([_nx.dtype(x).char for x in otypes])",
        "fixed_code": "otypes = [_nx.dtype(x) for x in otypes]",
        "patch": "@@ -2330,7 +2330,7 @@ def __init__(self, pyfunc=np._NoValue, otypes=None, doc=None,\n                 if char not in typecodes['All']:\n                     raise ValueError(\"Invalid otype specified: %s\" % (char,))\n         elif iterable(otypes):\n-            otypes = ''.join([_nx.dtype(x).char for x in otypes])\n+            otypes = [_nx.dtype(x) for x in otypes]\n         elif otypes is not None:\n             raise ValueError(\"Invalid otype specification\")\n         self.otypes = otypes"
    },
    {
        "commit_id": "70d8d7eaa4674b1172c39b923d3c9fcad46fd8c9",
        "commit_message": "Merge pull request #26112 from ngoldbaum/test-fix\n\nTST: fix incorrect dtype in test",
        "commit_url": "https://github.com/numpy/numpy/commit/70d8d7eaa4674b1172c39b923d3c9fcad46fd8c9",
        "buggy_code": "arr = np.array([\"hello\", \"world\"])",
        "fixed_code": "arr = np.array([\"hello\", \"world\"], dtype=\"T\")",
        "patch": "@@ -766,7 +766,7 @@ def test_multiply_reduce():\n \n \n def test_multiply_two_string_raises():\n-    arr = np.array([\"hello\", \"world\"])\n+    arr = np.array([\"hello\", \"world\"], dtype=\"T\")\n     with pytest.raises(np._core._exceptions._UFuncNoLoopError):\n         np.multiply(arr, arr)\n "
    },
    {
        "commit_id": "65afaf8603da46418a2f2e1c408085322c31f91c",
        "commit_message": "TST: fix incorrect dtype in test",
        "commit_url": "https://github.com/numpy/numpy/commit/65afaf8603da46418a2f2e1c408085322c31f91c",
        "buggy_code": "arr = np.array([\"hello\", \"world\"])",
        "fixed_code": "arr = np.array([\"hello\", \"world\"], dtype=\"T\")",
        "patch": "@@ -766,7 +766,7 @@ def test_multiply_reduce():\n \n \n def test_multiply_two_string_raises():\n-    arr = np.array([\"hello\", \"world\"])\n+    arr = np.array([\"hello\", \"world\"], dtype=\"T\")\n     with pytest.raises(np._core._exceptions._UFuncNoLoopError):\n         np.multiply(arr, arr)\n "
    },
    {
        "commit_id": "1ab88061bad059899db59761b8f324edc9040353",
        "commit_message": "Merge pull request #25964 from mattip/doc-fixes2\n\nCI: fix last docbuild warnings",
        "commit_url": "https://github.com/numpy/numpy/commit/1ab88061bad059899db59761b8f324edc9040353",
        "buggy_code": "`numpy.format_parser` to construct a dtype. See that function for",
        "fixed_code": "`numpy.rec.format_parser` to construct a dtype. See that function for",
        "patch": "@@ -583,7 +583,7 @@ def fromarrays(arrayList, dtype=None, shape=None, formats=None,\n         ``arrayList[0]``.\n     formats, names, titles, aligned, byteorder :\n         If `dtype` is ``None``, these arguments are passed to\n-        `numpy.format_parser` to construct a dtype. See that function for\n+        `numpy.rec.format_parser` to construct a dtype. See that function for\n         detailed documentation.\n \n     Returns"
    },
    {
        "commit_id": "5dbf807a7c98c8e1458c733b98d69397d1955890",
        "commit_message": "DOC: fix references [skip actions][skip azp][skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/5dbf807a7c98c8e1458c733b98d69397d1955890",
        "buggy_code": "`numpy.format_parser` to construct a dtype. See that function for",
        "fixed_code": "`numpy.rec.format_parser` to construct a dtype. See that function for",
        "patch": "@@ -583,7 +583,7 @@ def fromarrays(arrayList, dtype=None, shape=None, formats=None,\n         ``arrayList[0]``.\n     formats, names, titles, aligned, byteorder :\n         If `dtype` is ``None``, these arguments are passed to\n-        `numpy.format_parser` to construct a dtype. See that function for\n+        `numpy.rec.format_parser` to construct a dtype. See that function for\n         detailed documentation.\n \n     Returns"
    },
    {
        "commit_id": "adaa8c0513ccf82c1b02fd30c4b205f5420dd71b",
        "commit_message": "Merge pull request #25961 from charris/fix-test-identity\n\nTST, MAINT: Loosen tolerance in fft test.",
        "commit_url": "https://github.com/numpy/numpy/commit/adaa8c0513ccf82c1b02fd30c4b205f5420dd71b",
        "buggy_code": "atol = 4 * np.spacing(np.array(1., dtype=dtype))",
        "fixed_code": "atol = 5 * np.spacing(np.array(1., dtype=dtype))",
        "patch": "@@ -55,7 +55,7 @@ def test_identity_long_short(self, dtype):\n     def test_identity_long_short_reversed(self, dtype):\n         # Also test explicitly given number of points in reversed order.\n         maxlen = 16\n-        atol = 4 * np.spacing(np.array(1., dtype=dtype))\n+        atol = 5 * np.spacing(np.array(1., dtype=dtype))\n         x = random(maxlen).astype(dtype) + 1j*random(maxlen).astype(dtype)\n         xx = np.concatenate([x, np.zeros_like(x)])\n         for i in range(1, maxlen*2):"
    },
    {
        "commit_id": "7ceb9aff058191d6329704a39a5496d85c6e7e6c",
        "commit_message": "Fix _expandtabs docstring and array sizes in resolve_descriptors funcs",
        "commit_url": "https://github.com/numpy/numpy/commit/7ceb9aff058191d6329704a39a5496d85c6e7e6c",
        "buggy_code": "docstrings.get('numpy._core.umath._expandtabs_length'),",
        "fixed_code": "docstrings.get('numpy._core.umath._expandtabs'),",
        "patch": "@@ -1277,7 +1277,7 @@ def english_upper(s):\n           ),\n '_expandtabs':\n     Ufunc(2, 1, None,\n-          docstrings.get('numpy._core.umath._expandtabs_length'),\n+          docstrings.get('numpy._core.umath._expandtabs'),\n           None,\n           ),\n "
    },
    {
        "commit_id": "a53b0b3777a966554add1313e22b625638282192",
        "commit_message": "Merge pull request #25886 from rouault/typo_fixes\n\nBUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/a53b0b3777a966554add1313e22b625638282192",
        "buggy_code": "To allow NEP 50 weak promotion later, it may be desireable to preserve",
        "fixed_code": "To allow NEP 50 weak promotion later, it may be desirable to preserve",
        "patch": "@@ -4790,7 +4790,7 @@\n     subok : True or False, optional\n         Whether array subclasses are preserved.\n     pyscalars : {\"convert\", \"preserve\", \"convert_if_no_array\"}, optional\n-        To allow NEP 50 weak promotion later, it may be desireable to preserve\n+        To allow NEP 50 weak promotion later, it may be desirable to preserve\n         Python scalars.  As default, these are preserved unless all inputs\n         are Python scalars.  \"convert\" enforces an array return.\n     \"\"\"))"
    },
    {
        "commit_id": "a53b0b3777a966554add1313e22b625638282192",
        "commit_message": "Merge pull request #25886 from rouault/typo_fixes\n\nBUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/a53b0b3777a966554add1313e22b625638282192",
        "buggy_code": "- Wether we should consider or not, NaNs, being equal.",
        "fixed_code": "- Whether we should consider or not, NaNs, being equal.",
        "patch": "@@ -2108,7 +2108,7 @@ def test_array_equal_equal_nan(self, bx, by, equal_nan, expected):\n \n         - are the two inputs the same object or not (same object many not\n           be equal if contains NaNs)\n-        - Wether we should consider or not, NaNs, being equal.\n+        - Whether we should consider or not, NaNs, being equal.\n \n         \"\"\"\n         if equal_nan is None:"
    },
    {
        "commit_id": "a53b0b3777a966554add1313e22b625638282192",
        "commit_message": "Merge pull request #25886 from rouault/typo_fixes\n\nBUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/a53b0b3777a966554add1313e22b625638282192",
        "buggy_code": "be innacurate due to floating-point errors.",
        "fixed_code": "be inaccurate due to floating-point errors.",
        "patch": "@@ -520,7 +520,7 @@ def inv(a):\n \n     If `a` is detected to be singular, a `LinAlgError` is raised. If `a` is\n     ill-conditioned, a `LinAlgError` may or may not be raised, and results may\n-    be innacurate due to floating-point errors.\n+    be inaccurate due to floating-point errors.\n \n     References\n     ----------"
    },
    {
        "commit_id": "075e3df1af1f9273449ee80e7a776efe6660067e",
        "commit_message": "BUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/075e3df1af1f9273449ee80e7a776efe6660067e",
        "buggy_code": "To allow NEP 50 weak promotion later, it may be desireable to preserve",
        "fixed_code": "To allow NEP 50 weak promotion later, it may be desirable to preserve",
        "patch": "@@ -4790,7 +4790,7 @@\n     subok : True or False, optional\n         Whether array subclasses are preserved.\n     pyscalars : {\"convert\", \"preserve\", \"convert_if_no_array\"}, optional\n-        To allow NEP 50 weak promotion later, it may be desireable to preserve\n+        To allow NEP 50 weak promotion later, it may be desirable to preserve\n         Python scalars.  As default, these are preserved unless all inputs\n         are Python scalars.  \"convert\" enforces an array return.\n     \"\"\"))"
    },
    {
        "commit_id": "075e3df1af1f9273449ee80e7a776efe6660067e",
        "commit_message": "BUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/075e3df1af1f9273449ee80e7a776efe6660067e",
        "buggy_code": "- Wether we should consider or not, NaNs, being equal.",
        "fixed_code": "- Whether we should consider or not, NaNs, being equal.",
        "patch": "@@ -2108,7 +2108,7 @@ def test_array_equal_equal_nan(self, bx, by, equal_nan, expected):\n \n         - are the two inputs the same object or not (same object many not\n           be equal if contains NaNs)\n-        - Wether we should consider or not, NaNs, being equal.\n+        - Whether we should consider or not, NaNs, being equal.\n \n         \"\"\"\n         if equal_nan is None:"
    },
    {
        "commit_id": "075e3df1af1f9273449ee80e7a776efe6660067e",
        "commit_message": "BUG: fix code comment typos in numpy/ directory",
        "commit_url": "https://github.com/numpy/numpy/commit/075e3df1af1f9273449ee80e7a776efe6660067e",
        "buggy_code": "be innacurate due to floating-point errors.",
        "fixed_code": "be inaccurate due to floating-point errors.",
        "patch": "@@ -520,7 +520,7 @@ def inv(a):\n \n     If `a` is detected to be singular, a `LinAlgError` is raised. If `a` is\n     ill-conditioned, a `LinAlgError` may or may not be raised, and results may\n-    be innacurate due to floating-point errors.\n+    be inaccurate due to floating-point errors.\n \n     References\n     ----------"
    },
    {
        "commit_id": "3b373f1f58a68e898cd67ccbeeab9ea17b7978a7",
        "commit_message": "Merge pull request #25883 from rouault/TestDeprecatedDTypeParenthesizedRepeatCount_message\n\nBUG: fix typo in 'message' static variable of TestDeprecatedDTypeParenthesizedRepeatCount",
        "commit_url": "https://github.com/numpy/numpy/commit/3b373f1f58a68e898cd67ccbeeab9ea17b7978a7",
        "buggy_code": "messsage = \"Passing in a parenthesized single number\"",
        "fixed_code": "message = \"Passing in a parenthesized single number\"",
        "patch": "@@ -718,7 +718,7 @@ def __array_wrap__(self, arr):\n \n \n class TestDeprecatedDTypeParenthesizedRepeatCount(_DeprecationTestCase):\n-    messsage = \"Passing in a parenthesized single number\"\n+    message = \"Passing in a parenthesized single number\"\n \n     @pytest.mark.parametrize(\"string\", [\"(2)i,\", \"(3)3S,\", \"f,(2)f\"])\n     def test_parenthesized_repeat_count(self, string):"
    },
    {
        "commit_id": "07b2f2a998e6e57336808af234ecd2381bcc1069",
        "commit_message": "BUG: fix typo in 'message' static variable of TestDeprecatedDTypeParenthesizedRepeatCount",
        "commit_url": "https://github.com/numpy/numpy/commit/07b2f2a998e6e57336808af234ecd2381bcc1069",
        "buggy_code": "messsage = \"Passing in a parenthesized single number\"",
        "fixed_code": "message = \"Passing in a parenthesized single number\"",
        "patch": "@@ -718,7 +718,7 @@ def __array_wrap__(self, arr):\n \n \n class TestDeprecatedDTypeParenthesizedRepeatCount(_DeprecationTestCase):\n-    messsage = \"Passing in a parenthesized single number\"\n+    message = \"Passing in a parenthesized single number\"\n \n     @pytest.mark.parametrize(\"string\", [\"(2)i,\", \"(3)3S,\", \"f,(2)f\"])\n     def test_parenthesized_repeat_count(self, string):"
    },
    {
        "commit_id": "121817707d2ae10e550ee2c1288fcb6f1a9b09b9",
        "commit_message": "BUG: Fix gh-25867",
        "commit_url": "https://github.com/numpy/numpy/commit/121817707d2ae10e550ee2c1288fcb6f1a9b09b9",
        "buggy_code": "module_name = \"example\"",
        "fixed_code": "module_name = \"fmath\"",
        "patch": "@@ -37,7 +37,7 @@ def test_gh25337(self):\n \n @pytest.mark.slow\n class TestUsedModule(util.F2PyTest):\n-    module_name = \"example\"\n+    module_name = \"fmath\"\n     sources = [\n         util.getpath(\"tests\", \"src\", \"modules\", \"use_modules.f90\"),\n     ]"
    },
    {
        "commit_id": "99a9e5bf9cc343b32311747146c5c4f51a53ec69",
        "commit_message": "Merge pull request #25845 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix some typos",
        "commit_url": "https://github.com/numpy/numpy/commit/99a9e5bf9cc343b32311747146c5c4f51a53ec69",
        "buggy_code": "``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.",
        "fixed_code": "``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.",
        "patch": "@@ -1751,7 +1751,7 @@ class Hermite(ABCPolyBase):\n     ----------\n     coef : array_like\n         Hermite coefficients in order of increasing degree, i.e,\n-        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.\n+        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n         to the interval ``[window[0], window[1]]`` by shifting and scaling."
    },
    {
        "commit_id": "4edd60a8e86f34a4edf4ce2ebabc86251a8f72e6",
        "commit_message": "DOC: Fix some typos\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/4edd60a8e86f34a4edf4ce2ebabc86251a8f72e6",
        "buggy_code": "``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.",
        "fixed_code": "``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.",
        "patch": "@@ -1751,7 +1751,7 @@ class Hermite(ABCPolyBase):\n     ----------\n     coef : array_like\n         Hermite coefficients in order of increasing degree, i.e,\n-        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.\n+        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n         to the interval ``[window[0], window[1]]`` by shifting and scaling."
    },
    {
        "commit_id": "69c2eeb12506ca746d1df283b0f47f17c94fadd1",
        "commit_message": "Merge pull request #25833 from F3eQnxN3RriK/doc-patch-1\n\nDOC: Fix some reference warnings",
        "commit_url": "https://github.com/numpy/numpy/commit/69c2eeb12506ca746d1df283b0f47f17c94fadd1",
        "buggy_code": "Most C libraries used with `distutils` are only used to build python",
        "fixed_code": "Most C libraries used with ``distutils`` are only used to build python",
        "patch": "@@ -1598,7 +1598,7 @@ def add_installed_library(self, name, sources, install_dir, build_info=None):\n         \"\"\"\n         Similar to add_library, but the specified library is installed.\n \n-        Most C libraries used with `distutils` are only used to build python\n+        Most C libraries used with ``distutils`` are only used to build python\n         extensions, but libraries built through this method will be installed\n         so that they can be reused by third-party packages.\n "
    },
    {
        "commit_id": "80fdf5d5cc6c5a7d780fad543bdd56792ad5e720",
        "commit_message": "DOC: Fix some reference warnings\n\nref: gh-13114\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/80fdf5d5cc6c5a7d780fad543bdd56792ad5e720",
        "buggy_code": "Most C libraries used with `distutils` are only used to build python",
        "fixed_code": "Most C libraries used with ``distutils`` are only used to build python",
        "patch": "@@ -1598,7 +1598,7 @@ def add_installed_library(self, name, sources, install_dir, build_info=None):\n         \"\"\"\n         Similar to add_library, but the specified library is installed.\n \n-        Most C libraries used with `distutils` are only used to build python\n+        Most C libraries used with ``distutils`` are only used to build python\n         extensions, but libraries built through this method will be installed\n         so that they can be reused by third-party packages.\n "
    },
    {
        "commit_id": "98b6ecdff23667144e8de433dd9e2c1d6253a01f",
        "commit_message": "DOC: fix a number of doc build warnings\n\n[skip cirrus] [skip actions] [skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/98b6ecdff23667144e8de433dd9e2c1d6253a01f",
        "buggy_code": "language = None",
        "fixed_code": "language = \"en\"",
        "patch": "@@ -66,7 +66,7 @@\n #\n # This is also used if you do content translation via gettext catalogs.\n # Usually you set \"language\" from the command line for these cases.\n-language = None\n+language = \"en\"\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files."
    },
    {
        "commit_id": "5aef3dcd5eb0524cd09b3991daba90a72ba429f6",
        "commit_message": "Merge pull request #25734 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix markups of code literals in ``polynomial``",
        "commit_url": "https://github.com/numpy/numpy/commit/5aef3dcd5eb0524cd09b3991daba90a72ba429f6",
        "buggy_code": "ignored. The default value is len(x)*eps, where eps is the",
        "fixed_code": "ignored. The default value is ``len(x)*eps``, where eps is the",
        "patch": "@@ -981,7 +981,7 @@ class domain in NumPy 1.4 and ``None`` in later versions.\n         rcond : float, optional\n             Relative condition number of the fit. Singular values smaller\n             than this relative to the largest singular value will be\n-            ignored. The default value is len(x)*eps, where eps is the\n+            ignored. The default value is ``len(x)*eps``, where eps is the\n             relative precision of the float type, about 2e-16 in most\n             cases.\n         full : bool, optional"
    },
    {
        "commit_id": "09127d3f9152acece1e7906b1a007cd07964a1fe",
        "commit_message": "DOC: Fix markups of code literals in ``polynomial``\n\nFixed single backticked code literals(tuple, expression, etc.) to double\nbackticked, as these are not parameter or reference.\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/09127d3f9152acece1e7906b1a007cd07964a1fe",
        "buggy_code": "ignored. The default value is len(x)*eps, where eps is the",
        "fixed_code": "ignored. The default value is ``len(x)*eps``, where eps is the",
        "patch": "@@ -981,7 +981,7 @@ class domain in NumPy 1.4 and ``None`` in later versions.\n         rcond : float, optional\n             Relative condition number of the fit. Singular values smaller\n             than this relative to the largest singular value will be\n-            ignored. The default value is len(x)*eps, where eps is the\n+            ignored. The default value is ``len(x)*eps``, where eps is the\n             relative precision of the float type, about 2e-16 in most\n             cases.\n         full : bool, optional"
    },
    {
        "commit_id": "1df5ad97b20d5ee4413bcbe6db7a2c96f64d4e25",
        "commit_message": "Merge pull request #25699 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix some references in document",
        "commit_url": "https://github.com/numpy/numpy/commit/1df5ad97b20d5ee4413bcbe6db7a2c96f64d4e25",
        "buggy_code": "consequently the number of bins (see `Notes` for more detail on",
        "fixed_code": "consequently the number of bins (see `Notes`_ for more detail on",
        "patch": "@@ -487,7 +487,7 @@ def histogram_bin_edges(a, bins=10, range=None, weights=None):\n \n         If `bins` is a string from the list below, `histogram_bin_edges` will use\n         the method chosen to calculate the optimal bin width and\n-        consequently the number of bins (see `Notes` for more detail on\n+        consequently the number of bins (see `Notes`_ for more detail on\n         the estimators) from the data that falls within the requested\n         range. While the bin width will be optimal for the actual data\n         in the range, the number of bins will be computed to fill the"
    },
    {
        "commit_id": "d23a1ee29266b288177ce95451f7a0c833a6b73f",
        "commit_message": "DOC: Fix some references in document\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/d23a1ee29266b288177ce95451f7a0c833a6b73f",
        "buggy_code": "consequently the number of bins (see `Notes` for more detail on",
        "fixed_code": "consequently the number of bins (see `Notes`_ for more detail on",
        "patch": "@@ -487,7 +487,7 @@ def histogram_bin_edges(a, bins=10, range=None, weights=None):\n \n         If `bins` is a string from the list below, `histogram_bin_edges` will use\n         the method chosen to calculate the optimal bin width and\n-        consequently the number of bins (see `Notes` for more detail on\n+        consequently the number of bins (see `Notes`_ for more detail on\n         the estimators) from the data that falls within the requested\n         range. While the bin width will be optimal for the actual data\n         in the range, the number of bins will be computed to fill the"
    },
    {
        "commit_id": "d23a1ee29266b288177ce95451f7a0c833a6b73f",
        "commit_message": "DOC: Fix some references in document\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/d23a1ee29266b288177ce95451f7a0c833a6b73f",
        "buggy_code": "deprecate : Decorate a function such that it issues a `DeprecationWarning`",
        "fixed_code": "deprecate : Decorate a function such that it issues a :exc:`DeprecationWarning`",
        "patch": "@@ -261,7 +261,7 @@ def deprecate_with_doc(msg):\n \n     See Also\n     --------\n-    deprecate : Decorate a function such that it issues a `DeprecationWarning`\n+    deprecate : Decorate a function such that it issues a :exc:`DeprecationWarning`\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "commit_message": "API,MAINT: Reorganize array-wrap calling and introduce ``return_scalar`` (#25409)\n\nThis reorganize how array-wrap is called. It might very mildly change the semantics for reductions I think (and for negative priorities).\r\n\r\nOverall, it now passes a new return_scalar=False/True when calling __array_wrap__ and deprecates any array-wrap which does not accept arr, context, return_scalar.\r\n\r\nI have not integrated it yet, but half the reason for the reorganization is to integrate it/reuse it in the array_coverter helper PR (gh-24214), which stumbled over trying to make the scalar handling sane.\r\n\r\nForcing downstream to add return_scalar=False to the signature is a bit annoying, but e.g. our memory maps currently try to guess at it, which seems bad. I am hoping, this can be part to making the scalar vs. array return more sane.\r\n\r\nBut, maybe mainly, I hope it consolidates things (together with gh-24124 mainly, as if ufuncs were the only complex place we used this, it wouldn't matter much).\r\n\r\n---\r\n\r\n* API: Reorganize `__array_wrap__` and add `return_scalar=False`\r\n\r\nThis also deprecates any `__array_wrap__` which does not accept\r\n`context` and `return_scalar`.\r\n\r\n* BUG: Fix niche bug in rounding.\r\n\r\n* MAINT: Adjust __array_wrap__ in code and tests (also deprecation test)\r\n\r\n* MAINT: Use/move the simplest C-wrapping also\r\n\r\n* DOC: Update doc and add release note\r\n\r\n* STY: Make linter happy in old tests\r\n\r\n* MAINT: Silence GCC warning (value cannot really be used uninitialized)\r\n\r\n* MAINT: Small style fixes\r\n\r\n* BUG: Fix reference leak in ufunc array-wrapping\r\n\r\nThis probably doesn't fix the 32bit issue unfortunately, only the windows ones...\r\n\r\n* BUG: Fix leak for result arrays in all ufunc calls\r\n\r\n* Ensure we try passing context and address related smaller review comments\r\n\r\n* Ensure we don't try `context=None` and expand code comment\r\n\r\n* Rely on return_scalar always being right (and style nit)\r\n\r\n* Remove outdated comments as per review\r\n\r\n* Let's just undo force-wrap for now for reductions (its a change...)\r\n\r\n* ENH: Chain the original error when the deprecationwarning is raised\r\n\r\nDoing this due to gh-25635 since it is super confusing with the\r\nbad retrying...\r\n\r\n* BUG,MAINT: Address Martens review comments",
        "commit_url": "https://github.com/numpy/numpy/commit/6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "buggy_code": "def __array_wrap__(self, arr, context=None):",
        "fixed_code": "def __array_wrap__(self, arr, context=None, return_scalar=False):",
        "patch": "@@ -2268,7 +2268,7 @@ def __new__(subtype, shape, itemsize=1, unicode=False, buffer=None,\n \n         return self\n \n-    def __array_wrap__(self, arr, context=None):\n+    def __array_wrap__(self, arr, context=None, return_scalar=False):\n         # When calling a ufunc (and some other functions), we return a\n         # chararray if the ufunc output is a string-like array,\n         # or an ndarray otherwise"
    },
    {
        "commit_id": "6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "commit_message": "API,MAINT: Reorganize array-wrap calling and introduce ``return_scalar`` (#25409)\n\nThis reorganize how array-wrap is called. It might very mildly change the semantics for reductions I think (and for negative priorities).\r\n\r\nOverall, it now passes a new return_scalar=False/True when calling __array_wrap__ and deprecates any array-wrap which does not accept arr, context, return_scalar.\r\n\r\nI have not integrated it yet, but half the reason for the reorganization is to integrate it/reuse it in the array_coverter helper PR (gh-24214), which stumbled over trying to make the scalar handling sane.\r\n\r\nForcing downstream to add return_scalar=False to the signature is a bit annoying, but e.g. our memory maps currently try to guess at it, which seems bad. I am hoping, this can be part to making the scalar vs. array return more sane.\r\n\r\nBut, maybe mainly, I hope it consolidates things (together with gh-24124 mainly, as if ufuncs were the only complex place we used this, it wouldn't matter much).\r\n\r\n---\r\n\r\n* API: Reorganize `__array_wrap__` and add `return_scalar=False`\r\n\r\nThis also deprecates any `__array_wrap__` which does not accept\r\n`context` and `return_scalar`.\r\n\r\n* BUG: Fix niche bug in rounding.\r\n\r\n* MAINT: Adjust __array_wrap__ in code and tests (also deprecation test)\r\n\r\n* MAINT: Use/move the simplest C-wrapping also\r\n\r\n* DOC: Update doc and add release note\r\n\r\n* STY: Make linter happy in old tests\r\n\r\n* MAINT: Silence GCC warning (value cannot really be used uninitialized)\r\n\r\n* MAINT: Small style fixes\r\n\r\n* BUG: Fix reference leak in ufunc array-wrapping\r\n\r\nThis probably doesn't fix the 32bit issue unfortunately, only the windows ones...\r\n\r\n* BUG: Fix leak for result arrays in all ufunc calls\r\n\r\n* Ensure we try passing context and address related smaller review comments\r\n\r\n* Ensure we don't try `context=None` and expand code comment\r\n\r\n* Rely on return_scalar always being right (and style nit)\r\n\r\n* Remove outdated comments as per review\r\n\r\n* Let's just undo force-wrap for now for reductions (its a change...)\r\n\r\n* ENH: Chain the original error when the deprecationwarning is raised\r\n\r\nDoing this due to gh-25635 since it is super confusing with the\r\nbad retrying...\r\n\r\n* BUG,MAINT: Address Martens review comments",
        "commit_url": "https://github.com/numpy/numpy/commit/6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "buggy_code": "def __array_wrap__(self, new):",
        "fixed_code": "def __array_wrap__(self, new, context=None, return_scalar=False):",
        "patch": "@@ -9630,7 +9630,7 @@ def test_equal_subclass_no_override(op, dt1, dt2):\n     class MyArr(np.ndarray):\n         called_wrap = 0\n \n-        def __array_wrap__(self, new):\n+        def __array_wrap__(self, new, context=None, return_scalar=False):\n             type(self).called_wrap += 1\n             return super().__array_wrap__(new)\n "
    },
    {
        "commit_id": "6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "commit_message": "API,MAINT: Reorganize array-wrap calling and introduce ``return_scalar`` (#25409)\n\nThis reorganize how array-wrap is called. It might very mildly change the semantics for reductions I think (and for negative priorities).\r\n\r\nOverall, it now passes a new return_scalar=False/True when calling __array_wrap__ and deprecates any array-wrap which does not accept arr, context, return_scalar.\r\n\r\nI have not integrated it yet, but half the reason for the reorganization is to integrate it/reuse it in the array_coverter helper PR (gh-24214), which stumbled over trying to make the scalar handling sane.\r\n\r\nForcing downstream to add return_scalar=False to the signature is a bit annoying, but e.g. our memory maps currently try to guess at it, which seems bad. I am hoping, this can be part to making the scalar vs. array return more sane.\r\n\r\nBut, maybe mainly, I hope it consolidates things (together with gh-24124 mainly, as if ufuncs were the only complex place we used this, it wouldn't matter much).\r\n\r\n---\r\n\r\n* API: Reorganize `__array_wrap__` and add `return_scalar=False`\r\n\r\nThis also deprecates any `__array_wrap__` which does not accept\r\n`context` and `return_scalar`.\r\n\r\n* BUG: Fix niche bug in rounding.\r\n\r\n* MAINT: Adjust __array_wrap__ in code and tests (also deprecation test)\r\n\r\n* MAINT: Use/move the simplest C-wrapping also\r\n\r\n* DOC: Update doc and add release note\r\n\r\n* STY: Make linter happy in old tests\r\n\r\n* MAINT: Silence GCC warning (value cannot really be used uninitialized)\r\n\r\n* MAINT: Small style fixes\r\n\r\n* BUG: Fix reference leak in ufunc array-wrapping\r\n\r\nThis probably doesn't fix the 32bit issue unfortunately, only the windows ones...\r\n\r\n* BUG: Fix leak for result arrays in all ufunc calls\r\n\r\n* Ensure we try passing context and address related smaller review comments\r\n\r\n* Ensure we don't try `context=None` and expand code comment\r\n\r\n* Rely on return_scalar always being right (and style nit)\r\n\r\n* Remove outdated comments as per review\r\n\r\n* Let's just undo force-wrap for now for reductions (its a change...)\r\n\r\n* ENH: Chain the original error when the deprecationwarning is raised\r\n\r\nDoing this due to gh-25635 since it is super confusing with the\r\nbad retrying...\r\n\r\n* BUG,MAINT: Address Martens review comments",
        "commit_url": "https://github.com/numpy/numpy/commit/6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "buggy_code": "def __array_wrap__(self, arr):",
        "fixed_code": "def __array_wrap__(self, arr, context, return_scalar):",
        "patch": "@@ -2502,7 +2502,7 @@ def test_non_array(self):\n         class array_like:\n             __array_interface__ = a.__array_interface__\n \n-            def __array_wrap__(self, arr):\n+            def __array_wrap__(self, arr, context, return_scalar):\n                 return self\n \n         # E.g. pandas series survive ufunc calls through array-wrap:"
    },
    {
        "commit_id": "6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "commit_message": "API,MAINT: Reorganize array-wrap calling and introduce ``return_scalar`` (#25409)\n\nThis reorganize how array-wrap is called. It might very mildly change the semantics for reductions I think (and for negative priorities).\r\n\r\nOverall, it now passes a new return_scalar=False/True when calling __array_wrap__ and deprecates any array-wrap which does not accept arr, context, return_scalar.\r\n\r\nI have not integrated it yet, but half the reason for the reorganization is to integrate it/reuse it in the array_coverter helper PR (gh-24214), which stumbled over trying to make the scalar handling sane.\r\n\r\nForcing downstream to add return_scalar=False to the signature is a bit annoying, but e.g. our memory maps currently try to guess at it, which seems bad. I am hoping, this can be part to making the scalar vs. array return more sane.\r\n\r\nBut, maybe mainly, I hope it consolidates things (together with gh-24124 mainly, as if ufuncs were the only complex place we used this, it wouldn't matter much).\r\n\r\n---\r\n\r\n* API: Reorganize `__array_wrap__` and add `return_scalar=False`\r\n\r\nThis also deprecates any `__array_wrap__` which does not accept\r\n`context` and `return_scalar`.\r\n\r\n* BUG: Fix niche bug in rounding.\r\n\r\n* MAINT: Adjust __array_wrap__ in code and tests (also deprecation test)\r\n\r\n* MAINT: Use/move the simplest C-wrapping also\r\n\r\n* DOC: Update doc and add release note\r\n\r\n* STY: Make linter happy in old tests\r\n\r\n* MAINT: Silence GCC warning (value cannot really be used uninitialized)\r\n\r\n* MAINT: Small style fixes\r\n\r\n* BUG: Fix reference leak in ufunc array-wrapping\r\n\r\nThis probably doesn't fix the 32bit issue unfortunately, only the windows ones...\r\n\r\n* BUG: Fix leak for result arrays in all ufunc calls\r\n\r\n* Ensure we try passing context and address related smaller review comments\r\n\r\n* Ensure we don't try `context=None` and expand code comment\r\n\r\n* Rely on return_scalar always being right (and style nit)\r\n\r\n* Remove outdated comments as per review\r\n\r\n* Let's just undo force-wrap for now for reductions (its a change...)\r\n\r\n* ENH: Chain the original error when the deprecationwarning is raised\r\n\r\nDoing this due to gh-25635 since it is super confusing with the\r\nbad retrying...\r\n\r\n* BUG,MAINT: Address Martens review comments",
        "commit_url": "https://github.com/numpy/numpy/commit/6bd3abfadd21757bbfc7563da5ac9fe996d58e55",
        "buggy_code": "def __array_wrap__(self, obj, context=None):",
        "fixed_code": "def __array_wrap__(self, obj, context=None, return_scalar=False):",
        "patch": "@@ -57,7 +57,7 @@ def __new__(cls, data, metadata=None):\n                 res.metadata = metadata\n                 return res\n \n-            def __array_wrap__(self, obj, context=None):\n+            def __array_wrap__(self, obj, context=None, return_scalar=False):\n                 if not isinstance(obj, MyArray):\n                     obj = obj.view(MyArray)\n                 if obj.metadata is None:"
    },
    {
        "commit_id": "c7d7af5ea15898eca3fbcac39bc45d37c19d7c88",
        "commit_message": "Merge pull request #25628 from QuLogic/fix-warning-test\n\nTST: Fix test_warning_calls on Python 3.12",
        "commit_url": "https://github.com/numpy/numpy/commit/c7d7af5ea15898eca3fbcac39bc45d37c19d7c88",
        "buggy_code": "if node.args[0].s == \"ignore\":",
        "fixed_code": "if node.args[0].value == \"ignore\":",
        "patch": "@@ -32,7 +32,7 @@ def visit_Call(self, node):\n         ast.NodeVisitor.generic_visit(self, node)\n \n         if p.ls[-1] == 'simplefilter' or p.ls[-1] == 'filterwarnings':\n-            if node.args[0].s == \"ignore\":\n+            if node.args[0].value == \"ignore\":\n                 raise AssertionError(\n                     \"warnings should have an appropriate stacklevel; found in \"\n                     \"{} on line {}\".format(self.__filename, node.lineno))"
    },
    {
        "commit_id": "644d0be676fa168b9c82c12b660e6a19227fbd84",
        "commit_message": "TST: Fix test_warning_calls on Python 3.12\n\nIt currently raises a warning:\n```\nDeprecationWarning: Attribute s is deprecated and will be removed in Python 3.14; use value instead\n```\nAFAICT, the `value` attribute has always existed (at least in supported\nversions of Python 3.)",
        "commit_url": "https://github.com/numpy/numpy/commit/644d0be676fa168b9c82c12b660e6a19227fbd84",
        "buggy_code": "if node.args[0].s == \"ignore\":",
        "fixed_code": "if node.args[0].value == \"ignore\":",
        "patch": "@@ -32,7 +32,7 @@ def visit_Call(self, node):\n         ast.NodeVisitor.generic_visit(self, node)\n \n         if p.ls[-1] == 'simplefilter' or p.ls[-1] == 'filterwarnings':\n-            if node.args[0].s == \"ignore\":\n+            if node.args[0].value == \"ignore\":\n                 raise AssertionError(\n                     \"warnings should have an appropriate stacklevel; found in \"\n                     \"{} on line {}\".format(self.__filename, node.lineno))"
    },
    {
        "commit_id": "ed7a95e2f72817718586f1918551c3cf1f9502f1",
        "commit_message": "Merge pull request #25615 from rgommers/tiny-all-fix\n\nMAINT: add `newaxis` to `__all__` in `numpy.array_api`",
        "commit_url": "https://github.com/numpy/numpy/commit/ed7a95e2f72817718586f1918551c3cf1f9502f1",
        "buggy_code": "__all__ += [\"e\", \"inf\", \"nan\", \"pi\"]",
        "fixed_code": "__all__ += [\"e\", \"inf\", \"nan\", \"pi\", \"newaxis\"]",
        "patch": "@@ -127,7 +127,7 @@\n \n from ._constants import e, inf, nan, pi, newaxis\n \n-__all__ += [\"e\", \"inf\", \"nan\", \"pi\"]\n+__all__ += [\"e\", \"inf\", \"nan\", \"pi\", \"newaxis\"]\n \n from ._creation_functions import (\n     asarray,"
    },
    {
        "commit_id": "8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "commit_message": "Fix some linter issues",
        "commit_url": "https://github.com/numpy/numpy/commit/8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "buggy_code": "if not dtype in (None,) + _all_dtypes:",
        "fixed_code": "if dtype not in (None,) + _all_dtypes:",
        "patch": "@@ -19,7 +19,7 @@\n \n def _check_valid_dtype(dtype):\n     # Note: Only spelling dtypes as the dtype objects is supported.\n-    if not dtype in (None,) + _all_dtypes:\n+    if dtype not in (None,) + _all_dtypes:\n         raise ValueError(\"dtype must be one of the supported dtypes\")\n \n "
    },
    {
        "commit_id": "8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "commit_message": "Fix some linter issues",
        "commit_url": "https://github.com/numpy/numpy/commit/8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "buggy_code": "complex128",
        "fixed_code": "complex128,",
        "patch": "@@ -6,7 +6,7 @@\n     float32,\n     float64,\n     complex64,\n-    complex128\n+    complex128,\n )\n from ._data_type_functions import finfo\n from ._manipulation_functions import reshape"
    },
    {
        "commit_id": "8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "commit_message": "Fix some linter issues",
        "commit_url": "https://github.com/numpy/numpy/commit/8e2af026d9ee4fe919f77ec52a86ddc2de55705f",
        "buggy_code": "([2, 3], [1, 1, 0], 0,  [3, 3, 2]),",
        "fixed_code": "([2, 3], [1, 1, 0], 0, [3, 3, 2]),",
        "patch": "@@ -6,7 +6,7 @@\n @pytest.mark.parametrize(\n     \"x, indices, axis, expected\",\n     [\n-        ([2, 3], [1, 1, 0], 0,  [3, 3, 2]),\n+        ([2, 3], [1, 1, 0], 0, [3, 3, 2]),\n         ([2, 3], [1, 1, 0], -1, [3, 3, 2]),\n         ([[2, 3]], [1], -1, [[3]]),\n         ([[2, 3]], [0, 0], 0, [[2, 3], [2, 3]]),"
    },
    {
        "commit_id": "cad2c172a28c62ae7b100eeb773087bef56b1bbb",
        "commit_message": "Merge pull request #25434 from mhvk/dtype-from-string-with-trailing-comma\n\nAPI,BUG,DEP: treat trailing comma as a tuple and thus a structured dtype.",
        "commit_url": "https://github.com/numpy/numpy/commit/cad2c172a28c62ae7b100eeb773087bef56b1bbb",
        "buggy_code": "np.loadtxt([\"1,1\\n\"], dtype=\"i,(2)i\", usecols=[0], delimiter=\",\")",
        "fixed_code": "np.loadtxt([\"1,1\\n\"], dtype=\"i,2i\", usecols=[0], delimiter=\",\")",
        "patch": "@@ -928,7 +928,7 @@ def test_bad_usecols(self):\n         with pytest.raises(TypeError,\n                 match=\"If a structured dtype .*. But 1 usecols were given and \"\n                       \"the number of fields is 3.\"):\n-            np.loadtxt([\"1,1\\n\"], dtype=\"i,(2)i\", usecols=[0], delimiter=\",\")\n+            np.loadtxt([\"1,1\\n\"], dtype=\"i,2i\", usecols=[0], delimiter=\",\")\n \n     def test_fancy_dtype(self):\n         c = TextIO()"
    },
    {
        "commit_id": "cad2c172a28c62ae7b100eeb773087bef56b1bbb",
        "commit_message": "Merge pull request #25434 from mhvk/dtype-from-string-with-trailing-comma\n\nAPI,BUG,DEP: treat trailing comma as a tuple and thus a structured dtype.",
        "commit_url": "https://github.com/numpy/numpy/commit/cad2c172a28c62ae7b100eeb773087bef56b1bbb",
        "buggy_code": "a = empty(shape=(3, ), dtype=\"(2)3S,(2)3U\")",
        "fixed_code": "a = empty(shape=(3, ), dtype=\"(2,)3S,(2,)3U\")",
        "patch": "@@ -2432,7 +2432,7 @@ def test_fillvalue_in_view(self):\n     def test_fillvalue_bytes_or_str(self):\n         # Test whether fill values work as expected for structured dtypes\n         # containing bytes or str.  See issue #7259.\n-        a = empty(shape=(3, ), dtype=\"(2)3S,(2)3U\")\n+        a = empty(shape=(3, ), dtype=\"(2,)3S,(2,)3U\")\n         assert_equal(a[\"f0\"].fill_value, default_fill_value(b\"spam\"))\n         assert_equal(a[\"f1\"].fill_value, default_fill_value(\"eggs\"))\n "
    },
    {
        "commit_id": "86b39ab8a92bb741abf3e3d32a5708cef1da692b",
        "commit_message": "API,BUG,DEP: treat trailing comma as a tuple and thus a structured dtype.\n\nPreviously, `np.dtype(\"i\")` and `np.dtype(\"i,\")` were treated as\nidentical, even though `np.dtype(\"i,i\")` creates a structured dtype\nwith two fields.  Now, `np.dtype(\"i,\")` will create a structured dtype\nas well, with a single field.\n\nAt the same time, the use of `np.dtype(\"(2)i,\")` to create a subarray\nwith 2 elements is deprecated; one should use `np.dtype(\"(2,)i\")` or\n`np.dtype(\"2i\")` instead.  This is consistent with `np.dtype(\"(2)i\")`\nraising an exception.",
        "commit_url": "https://github.com/numpy/numpy/commit/86b39ab8a92bb741abf3e3d32a5708cef1da692b",
        "buggy_code": "np.loadtxt([\"1,1\\n\"], dtype=\"i,(2)i\", usecols=[0], delimiter=\",\")",
        "fixed_code": "np.loadtxt([\"1,1\\n\"], dtype=\"i,2i\", usecols=[0], delimiter=\",\")",
        "patch": "@@ -928,7 +928,7 @@ def test_bad_usecols(self):\n         with pytest.raises(TypeError,\n                 match=\"If a structured dtype .*. But 1 usecols were given and \"\n                       \"the number of fields is 3.\"):\n-            np.loadtxt([\"1,1\\n\"], dtype=\"i,(2)i\", usecols=[0], delimiter=\",\")\n+            np.loadtxt([\"1,1\\n\"], dtype=\"i,2i\", usecols=[0], delimiter=\",\")\n \n     def test_fancy_dtype(self):\n         c = TextIO()"
    },
    {
        "commit_id": "86b39ab8a92bb741abf3e3d32a5708cef1da692b",
        "commit_message": "API,BUG,DEP: treat trailing comma as a tuple and thus a structured dtype.\n\nPreviously, `np.dtype(\"i\")` and `np.dtype(\"i,\")` were treated as\nidentical, even though `np.dtype(\"i,i\")` creates a structured dtype\nwith two fields.  Now, `np.dtype(\"i,\")` will create a structured dtype\nas well, with a single field.\n\nAt the same time, the use of `np.dtype(\"(2)i,\")` to create a subarray\nwith 2 elements is deprecated; one should use `np.dtype(\"(2,)i\")` or\n`np.dtype(\"2i\")` instead.  This is consistent with `np.dtype(\"(2)i\")`\nraising an exception.",
        "commit_url": "https://github.com/numpy/numpy/commit/86b39ab8a92bb741abf3e3d32a5708cef1da692b",
        "buggy_code": "a = empty(shape=(3, ), dtype=\"(2)3S,(2)3U\")",
        "fixed_code": "a = empty(shape=(3, ), dtype=\"(2,)3S,(2,)3U\")",
        "patch": "@@ -2432,7 +2432,7 @@ def test_fillvalue_in_view(self):\n     def test_fillvalue_bytes_or_str(self):\n         # Test whether fill values work as expected for structured dtypes\n         # containing bytes or str.  See issue #7259.\n-        a = empty(shape=(3, ), dtype=\"(2)3S,(2)3U\")\n+        a = empty(shape=(3, ), dtype=\"(2,)3S,(2,)3U\")\n         assert_equal(a[\"f0\"].fill_value, default_fill_value(b\"spam\"))\n         assert_equal(a[\"f1\"].fill_value, default_fill_value(\"eggs\"))\n "
    },
    {
        "commit_id": "d8f8c77178378231126e9a13e99a353146a96906",
        "commit_message": "Try to fix leading whitespace error in splitlines",
        "commit_url": "https://github.com/numpy/numpy/commit/d8f8c77178378231126e9a13e99a353146a96906",
        "buggy_code": ">>> a = np.array(['hello world', 'hello\\nworld'])",
        "fixed_code": ">>> a = np.array(['hello world', 'hello\\n world'])",
        "patch": "@@ -1716,7 +1716,7 @@ def splitlines(a, keepends=None):\n \n     Examples\n     --------\n-    >>> a = np.array(['hello world', 'hello\\nworld'])\n+    >>> a = np.array(['hello world', 'hello\\n world'])\n     >>> np.char.splitlines(a)\n     array([list(['hello world']), list(['hello', 'world'])], dtype=object)\n "
    },
    {
        "commit_id": "4c55afd94c9f78a7c2c18c921beded528ca80e98",
        "commit_message": "Fix spacing",
        "commit_url": "https://github.com/numpy/numpy/commit/4c55afd94c9f78a7c2c18c921beded528ca80e98",
        "buggy_code": "array([True, False,  True])",
        "fixed_code": "array([ True, False,  True])",
        "patch": "@@ -163,7 +163,7 @@ def not_equal(x1, x2):\n     --------\n     >>> x1 = np.array(['a', 'b', 'c'])\n     >>> np.char.not_equal(x1, 'b')\n-    array([True, False,  True])\n+    array([ True, False,  True])\n     \n     \"\"\"\n     return compare_chararrays(x1, x2, '!=', True)"
    },
    {
        "commit_id": "8ca094d3d86355ee074f82a00279d0f83f89774b",
        "commit_message": "Merge branch 'main' into docs-fix-refguide-check",
        "commit_url": "https://github.com/numpy/numpy/commit/8ca094d3d86355ee074f82a00279d0f83f89774b",
        "buggy_code": "\"NEON\", \"ASIMD\", \"FPHP\", \"ASIMDHP\", \"ASIMDDP\", \"ASIMDFHM\"",
        "fixed_code": "\"SVE\", \"NEON\", \"ASIMD\", \"FPHP\", \"ASIMDHP\", \"ASIMDDP\", \"ASIMDFHM\"",
        "patch": "@@ -382,7 +382,7 @@ def load_flags(self):\n @pytest.mark.skipif(not is_linux or not is_arm, reason=\"Only for Linux and ARM\")\n class Test_ARM_Features(AbstractTest):\n     features = [\n-        \"NEON\", \"ASIMD\", \"FPHP\", \"ASIMDHP\", \"ASIMDDP\", \"ASIMDFHM\"\n+        \"SVE\", \"NEON\", \"ASIMD\", \"FPHP\", \"ASIMDHP\", \"ASIMDDP\", \"ASIMDFHM\"\n     ]\n     features_groups = dict(\n         NEON_FP16  = [\"NEON\", \"HALF\"],"
    },
    {
        "commit_id": "35c4319f33f3eafa091d4c9790b6de2468874b51",
        "commit_message": "Merge pull request #25361 from HaoZeke/gh25337f2yregre\n\nBUG: Fix regression with `f2py` wrappers when modules and subroutines are present",
        "commit_url": "https://github.com/numpy/numpy/commit/35c4319f33f3eafa091d4c9790b6de2468874b51",
        "buggy_code": "if m['name'] in usenames:",
        "fixed_code": "if m['name'] in usenames and not onlyvars:",
        "patch": "@@ -112,7 +112,7 @@ def dadd(line, s=doc):\n                 mfargs.append(n)\n         outmess('\\t\\tConstructing F90 module support for \"%s\"...\\n' %\n                 (m['name']))\n-        if m['name'] in usenames:\n+        if m['name'] in usenames and not onlyvars:\n             outmess(f\"\\t\\t\\tSkipping {m['name']} since it is in 'use'...\\n\")\n             continue\n         if onlyvars:"
    },
    {
        "commit_id": "0cbdf62de7db42e47ce69e3f26e1fefb39fc1911",
        "commit_message": "BUG: Fix gh-25337 [f2py]",
        "commit_url": "https://github.com/numpy/numpy/commit/0cbdf62de7db42e47ce69e3f26e1fefb39fc1911",
        "buggy_code": "if m['name'] in usenames:",
        "fixed_code": "if m['name'] in usenames and not onlyvars:",
        "patch": "@@ -112,7 +112,7 @@ def dadd(line, s=doc):\n                 mfargs.append(n)\n         outmess('\\t\\tConstructing F90 module support for \"%s\"...\\n' %\n                 (m['name']))\n-        if m['name'] in usenames:\n+        if m['name'] in usenames and not onlyvars:\n             outmess(f\"\\t\\t\\tSkipping {m['name']} since it is in 'use'...\\n\")\n             continue\n         if onlyvars:"
    },
    {
        "commit_id": "eba61c730a6d0ceee8ea469361e75a6d660f4620",
        "commit_message": "Merge pull request #25254 from matoro/main\n\nBUG: mips doesn't use REAL(10)",
        "commit_url": "https://github.com/numpy/numpy/commit/eba61c730a6d0ceee8ea469361e75a6d660f4620",
        "buggy_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'mips', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2466,7 +2466,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'mips', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "022e8ae129aa78265c4770a65d29bc935a3dcd2e",
        "commit_message": "BUG: mips doesn't use REAL(10)\n\nSame as e.g. loongarch per gh-24904, alpha per gh-25078, etc...",
        "commit_url": "https://github.com/numpy/numpy/commit/022e8ae129aa78265c4770a65d29bc935a3dcd2e",
        "buggy_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'mips', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2466,7 +2466,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'mips', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "8ac314ffefd31e224ee79450677e036b69ff64eb",
        "commit_message": "TST: Use `meson` for testing ``f2py`` (#25111)\n\n* MAINT,TST: Use meson for compiler checks [f2py]\r\n\r\n* MAINT: Cache the compiler checks [f2py]\r\n\r\n* MAINT,TST: Always use meson [f2py]\r\n\r\n* TST: Rework to have a build_meson [f2py]\r\n\r\n* MAINT,TST: Simplify the meson backend [f2py]\r\n\r\n* TST: Use the build_meson function [f2py]\r\n\r\n* MAINT,TST: Minor cleanup [f2py]\r\n\r\n* TST: Ensure TestDocAdvanced runs with spin [f2py]\r\n\r\n* TST: Use cleanup meson backend [f2py]\r\n\r\n* MAINT,TST: Generalize build_meson [f2py]\r\n\r\n* TST: Use a helper for spin tests [f2py]\r\n\r\n* MAINT: Simplify meson backend [f2py]\r\n\r\n* TST: Handle unsupported compilers [f2py]\r\n\r\n* TST: Fix gibberish in [f2py] documentation test\r\n\r\n* CI: Add meson for cygwin runs\r\n\r\n* TST: Skips for 32-bit errors [f2py]\r\n\r\n* TST: Skip for cygwin since meson is old [f2py]\r\n\r\n* CI: Revert grabbing meson on cygwin\r\n\r\nThe version is too old to be of use\r\n\r\n* TST: Cleanup old distutils builder [f2py]\r\n\r\n* TST: Skip cygwin better [f2py]\r\n\r\n* TST: Don't touch distutils\r\n\r\n* MAINT: Vendor in distutils testing requirement\r\n\r\n* TST: Try removing cygwin restrictions\r\n\r\n* MAINT: Cleanup some tests [f2py]\r\n\r\n* TST: Try to use concurrency for i/o bounds [f2py]\r\n\r\n* TST: Mark slow tests [f2py]\r\n\r\nShould finish in around a minute now",
        "commit_url": "https://github.com/numpy/numpy/commit/8ac314ffefd31e224ee79450677e036b69ff64eb",
        "buggy_code": "from numpy.f2py.tests.util import has_f77_compiler",
        "fixed_code": "from numpy.distutils.tests.utilities import has_f77_compiler",
        "patch": "@@ -18,7 +18,7 @@ def test_multi_fortran_libs_link(tmp_path):\n     # We need to make sure we actually have an f77 compiler.\n     # This is nontrivial, so we'll borrow the utilities\n     # from f2py tests:\n-    from numpy.f2py.tests.util import has_f77_compiler\n+    from numpy.distutils.tests.utilities import has_f77_compiler\n     if not has_f77_compiler():\n         pytest.skip('No F77 compiler found')\n "
    },
    {
        "commit_id": "8ac314ffefd31e224ee79450677e036b69ff64eb",
        "commit_message": "TST: Use `meson` for testing ``f2py`` (#25111)\n\n* MAINT,TST: Use meson for compiler checks [f2py]\r\n\r\n* MAINT: Cache the compiler checks [f2py]\r\n\r\n* MAINT,TST: Always use meson [f2py]\r\n\r\n* TST: Rework to have a build_meson [f2py]\r\n\r\n* MAINT,TST: Simplify the meson backend [f2py]\r\n\r\n* TST: Use the build_meson function [f2py]\r\n\r\n* MAINT,TST: Minor cleanup [f2py]\r\n\r\n* TST: Ensure TestDocAdvanced runs with spin [f2py]\r\n\r\n* TST: Use cleanup meson backend [f2py]\r\n\r\n* MAINT,TST: Generalize build_meson [f2py]\r\n\r\n* TST: Use a helper for spin tests [f2py]\r\n\r\n* MAINT: Simplify meson backend [f2py]\r\n\r\n* TST: Handle unsupported compilers [f2py]\r\n\r\n* TST: Fix gibberish in [f2py] documentation test\r\n\r\n* CI: Add meson for cygwin runs\r\n\r\n* TST: Skips for 32-bit errors [f2py]\r\n\r\n* TST: Skip for cygwin since meson is old [f2py]\r\n\r\n* CI: Revert grabbing meson on cygwin\r\n\r\nThe version is too old to be of use\r\n\r\n* TST: Cleanup old distutils builder [f2py]\r\n\r\n* TST: Skip cygwin better [f2py]\r\n\r\n* TST: Don't touch distutils\r\n\r\n* MAINT: Vendor in distutils testing requirement\r\n\r\n* TST: Try removing cygwin restrictions\r\n\r\n* MAINT: Cleanup some tests [f2py]\r\n\r\n* TST: Try to use concurrency for i/o bounds [f2py]\r\n\r\n* TST: Mark slow tests [f2py]\r\n\r\nShould finish in around a minute now",
        "commit_url": "https://github.com/numpy/numpy/commit/8ac314ffefd31e224ee79450677e036b69ff64eb",
        "buggy_code": "def test_long_long_map(self):",
        "fixed_code": "def test_gh15095(self):",
        "patch": "@@ -8,7 +8,7 @@ class TestF2Cmap(util.F2PyTest):\n     ]\n \n     # gh-15095\n-    def test_long_long_map(self):\n+    def test_gh15095(self):\n         inp = np.ones(3)\n         out = self.module.func1(inp)\n         exp_out = 3"
    },
    {
        "commit_id": "764c64ea58c5f86ef0860025b4c26eb0ce9df3ff",
        "commit_message": "DOC: Document the loss of f2py.compile in the news\n\nMAINT: Fix typo\n\nDOC: Add a note on native files\n\nDOC: Update changelog\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>\n\nDOC: Update release note\n\nCo-authored-by: rgommers <rgommers@users.noreply.github.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/764c64ea58c5f86ef0860025b4c26eb0ce9df3ff",
        "buggy_code": "__all__ = ['run_main', 'compile', 'get_include']",
        "fixed_code": "__all__ = ['run_main', 'get_include']",
        "patch": "@@ -8,7 +8,7 @@\n \n NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.\n \"\"\"\n-__all__ = ['run_main', 'compile', 'get_include']\n+__all__ = ['run_main', 'get_include']\n \n import sys\n import subprocess"
    },
    {
        "commit_id": "47b2a9b5dc9d743abfca43e30376ceff507d1ac6",
        "commit_message": "Merge pull request #25212 from HaoZeke/fixScipyUseblock\n\nBUG: Don't try to grab callback modules",
        "commit_url": "https://github.com/numpy/numpy/commit/47b2a9b5dc9d743abfca43e30376ceff507d1ac6",
        "buggy_code": "all_uses.extend([x for x in modblock.get('use').keys()])",
        "fixed_code": "all_uses.extend([x for x in modblock.get(\"use\").keys() if \"__\" not in x])",
        "patch": "@@ -943,5 +943,5 @@ def getuseblocks(pymod):\n     for inner in pymod['body']:\n         for modblock in inner['body']:\n             if modblock.get('use'):\n-                all_uses.extend([x for x in modblock.get('use').keys()])\n+                all_uses.extend([x for x in modblock.get(\"use\").keys() if \"__\" not in x])\n     return all_uses"
    },
    {
        "commit_id": "7ff359d3e21149d50a79fa616ef5cf7d3753d56b",
        "commit_message": "BUG: Don't try to grab callback modules\n\nCloses gh-25211",
        "commit_url": "https://github.com/numpy/numpy/commit/7ff359d3e21149d50a79fa616ef5cf7d3753d56b",
        "buggy_code": "all_uses.extend([x for x in modblock.get('use').keys()])",
        "fixed_code": "all_uses.extend([x for x in modblock.get(\"use\").keys() if \"__\" not in x])",
        "patch": "@@ -943,5 +943,5 @@ def getuseblocks(pymod):\n     for inner in pymod['body']:\n         for modblock in inner['body']:\n             if modblock.get('use'):\n-                all_uses.extend([x for x in modblock.get('use').keys()])\n+                all_uses.extend([x for x in modblock.get(\"use\").keys() if \"__\" not in x])\n     return all_uses"
    },
    {
        "commit_id": "8f3dfa5abf021b0af7ef7e837d6da155f1660932",
        "commit_message": "BUG: Fix ma.convolve if propagate_mask=False (#24869)",
        "commit_url": "https://github.com/numpy/numpy/commit/8f3dfa5abf021b0af7ef7e837d6da155f1660932",
        "buggy_code": "mask = ~f(~getmaskarray(a), ~getmaskarray(v))",
        "fixed_code": "mask = ~f(~getmaskarray(a), ~getmaskarray(v), mode=mode)",
        "patch": "@@ -8053,7 +8053,7 @@ def _convolve_or_correlate(f, a, v, mode, propagate_mask):\n         data = f(getdata(a), getdata(v), mode=mode)\n     else:\n         # results which are not contributed to by any pair of valid elements\n-        mask = ~f(~getmaskarray(a), ~getmaskarray(v))\n+        mask = ~f(~getmaskarray(a), ~getmaskarray(v), mode=mode)\n         data = f(filled(a, 0), filled(v, 0), mode=mode)\n \n     return masked_array(data, mask=mask)"
    },
    {
        "commit_id": "0f61000320f056fbd6a55392579429e73bed7268",
        "commit_message": "Merge pull request #25146 from rgommers/array-api-fixes\n\nBUG: fix issues with `newaxis` and `linalg.solve` in `numpy.array_api`",
        "commit_url": "https://github.com/numpy/numpy/commit/0f61000320f056fbd6a55392579429e73bed7268",
        "buggy_code": "from ._constants import e, inf, nan, pi",
        "fixed_code": "from ._constants import e, inf, nan, pi, newaxis",
        "patch": "@@ -125,7 +125,7 @@\n \n __all__ = [\"__array_api_version__\"]\n \n-from ._constants import e, inf, nan, pi\n+from ._constants import e, inf, nan, pi, newaxis\n \n __all__ += [\"e\", \"inf\", \"nan\", \"pi\"]\n "
    },
    {
        "commit_id": "562d55fe7b6b6e03d7fd776392f56fb992a2bafd",
        "commit_message": "BUG: fix issues with `newaxis` and `linalg.solve` in `numpy.array_api`\n\n[skip azp] [skip cirrus] [skip circle]",
        "commit_url": "https://github.com/numpy/numpy/commit/562d55fe7b6b6e03d7fd776392f56fb992a2bafd",
        "buggy_code": "from ._constants import e, inf, nan, pi",
        "fixed_code": "from ._constants import e, inf, nan, pi, newaxis",
        "patch": "@@ -125,7 +125,7 @@\n \n __all__ = [\"__array_api_version__\"]\n \n-from ._constants import e, inf, nan, pi\n+from ._constants import e, inf, nan, pi, newaxis\n \n __all__ += [\"e\", \"inf\", \"nan\", \"pi\"]\n "
    },
    {
        "commit_id": "3b98c617f84f364bd7732c8513abccddbfb1852a",
        "commit_message": "Merge pull request #25078 from matoro/main\n\nBUG: alpha doesn't use REAL(10)",
        "commit_url": "https://github.com/numpy/numpy/commit/3b98c617f84f364bd7732c8513abccddbfb1852a",
        "buggy_code": "if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2452,7 +2452,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "43aaf2093d8dfb3c1fea5d409ea4aa1d0f77816f",
        "commit_message": "BUG: alpha doesn't use REAL(10)\n\nSame as e.g. loongarch per gh-24904.  At this point seems like it should\nbe more of an exclude list than an include one...",
        "commit_url": "https://github.com/numpy/numpy/commit/43aaf2093d8dfb3c1fea5d409ea4aa1d0f77816f",
        "buggy_code": "if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2452,7 +2452,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'alpha', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "6fbcd0118a10e74034d56742e04ac2e2040154bb",
        "commit_message": "Fix typing and typo based on review",
        "commit_url": "https://github.com/numpy/numpy/commit/6fbcd0118a10e74034d56742e04ac2e2040154bb",
        "buggy_code": "_NBitInt = _NBitIntP",
        "fixed_code": "_NBitInt = Any",
        "patch": "@@ -7,7 +7,7 @@\n _NBitShort = Any\n _NBitIntC = Any\n _NBitIntP = Any\n-_NBitInt = _NBitIntP\n+_NBitInt = Any\n _NBitLong = Any\n _NBitLongLong = Any\n "
    },
    {
        "commit_id": "ab0346403aa89777b49e4f8302f132fcdcaf677b",
        "commit_message": "TST: Fix legacy random test hashes to toggle on long (not default int)",
        "commit_url": "https://github.com/numpy/numpy/commit/ab0346403aa89777b49e4f8302f132fcdcaf677b",
        "buggy_code": "if np.iinfo(int).max < 2**32:",
        "fixed_code": "if np.iinfo(np.long).max < 2**32:",
        "patch": "@@ -24,7 +24,7 @@\n              'zipf': (2,),\n              }\n \n-if np.iinfo(int).max < 2**32:\n+if np.iinfo(np.long).max < 2**32:\n     # Windows and some 32-bit platforms, e.g., ARM\n     INT_FUNC_HASHES = {'binomial': '2fbead005fc63942decb5326d36a1f32fe2c9d32c904ee61e46866b88447c263',\n                        'logseries': '23ead5dcde35d4cfd4ef2c105e4c3d43304b45dc1b1444b7823b9ee4fa144ebb',"
    },
    {
        "commit_id": "dcb8de260237284dd351237a421940702c9c03f6",
        "commit_message": "TST: Adjust test to avoid overflow (and bad results on BSD)\n\nReadding invalid warning ignoring, even though it should not matter\n(it does seem to for macos arm64 tests, maybe some M2/clang version issue...).",
        "commit_url": "https://github.com/numpy/numpy/commit/dcb8de260237284dd351237a421940702c9c03f6",
        "buggy_code": "assert op(sctype(3), 2**64) == op(sctype(3), sctype(2**64))",
        "fixed_code": "assert op(sctype(3), -2**64) == op(sctype(3), sctype(-2**64))",
        "patch": "@@ -942,7 +942,7 @@ def test_longdouble_operators_with_large_int(sctype, op):\n         with pytest.raises(TypeError):\n             op(sctype(3), 2**64)\n     else:\n-        assert op(sctype(3), 2**64) == op(sctype(3), sctype(2**64))\n+        assert op(sctype(3), -2**64) == op(sctype(3), sctype(-2**64))\n         assert op(2**64, sctype(3)) == op(sctype(2**64), sctype(3))\n \n "
    },
    {
        "commit_id": "0aa93fa49bc3e08e22e811dd62d3708a6acd2246",
        "commit_message": "DOC: Fix docstring pointing out quirks that got less bad with NEP 50",
        "commit_url": "https://github.com/numpy/numpy/commit/0aa93fa49bc3e08e22e811dd62d3708a6acd2246",
        "buggy_code": ">>> a = np.left_shift(np.uint8(255), 1) # Expect 254",
        "fixed_code": ">>> a = np.left_shift(np.uint8(255), np.int64(1))  # Expect 254",
        "patch": "@@ -1893,7 +1893,7 @@ def add_newdoc(place, name, doc):\n     result and can lead to unexpected results in some cases (see\n     :ref:`Casting Rules <ufuncs.casting>`):\n \n-    >>> a = np.left_shift(np.uint8(255), 1) # Expect 254\n+    >>> a = np.left_shift(np.uint8(255), np.int64(1))  # Expect 254\n     >>> print(a, type(a)) # Unexpected result due to upcasting\n     510 <class 'numpy.int64'>\n     >>> b = np.left_shift(np.uint8(255), np.uint8(1))"
    },
    {
        "commit_id": "af5fe2ee3ac2128766fb7a6a61964143796c3994",
        "commit_message": "MAINT,TST: Fix issues due to out-of-range integers\n\nThis contains two fixes:\n1. a somewhat hackish solution to keep allowing very large integers\n   for unary ufuncs.  This is partially wrong, but keeps isnan and\n   other functions working (reducing fallout in the tests quite a bit)\n2. Generally adapt changes that now fail for the same reason, this is\n   mainly due to comparisons like `-1 < uint8` now failing in generally.\n   That is fixable in principle, but it isn't super easy.\n\nNeither is perfect, both are the pragmatic solutions at this time until\nthey proof to be too problematic for some reason.\n\n(Getting rid of going to object for large integers is tougher and needs\ndeeper work.  It certainly is possible but too difficult at this stage:\nwe need to remove some old branches first.\nWe could, and maybe should, get rid of the `uint` step though, it is even\nmore of a trap I think!)",
        "commit_url": "https://github.com/numpy/numpy/commit/af5fe2ee3ac2128766fb7a6a61964143796c3994",
        "buggy_code": "(np.zeros(10, dtype=np.int64),",
        "fixed_code": "(np.zeros(10, dtype=object),",
        "patch": "@@ -2600,7 +2600,7 @@ def test_clip_value_min_max_flip(self, amin, amax):\n     @pytest.mark.parametrize(\"arr, amin, amax, exp\", [\n         # for a bug in npy_ObjectClip, based on a\n         # case produced by hypothesis\n-        (np.zeros(10, dtype=np.int64),\n+        (np.zeros(10, dtype=object),\n          0,\n          -2**64+1,\n          np.full(10, -2**64+1, dtype=object)),"
    },
    {
        "commit_id": "af5fe2ee3ac2128766fb7a6a61964143796c3994",
        "commit_message": "MAINT,TST: Fix issues due to out-of-range integers\n\nThis contains two fixes:\n1. a somewhat hackish solution to keep allowing very large integers\n   for unary ufuncs.  This is partially wrong, but keeps isnan and\n   other functions working (reducing fallout in the tests quite a bit)\n2. Generally adapt changes that now fail for the same reason, this is\n   mainly due to comparisons like `-1 < uint8` now failing in generally.\n   That is fixable in principle, but it isn't super easy.\n\nNeither is perfect, both are the pragmatic solutions at this time until\nthey proof to be too problematic for some reason.\n\n(Getting rid of going to object for large integers is tougher and needs\ndeeper work.  It certainly is possible but too difficult at this stage:\nwe need to remove some old branches first.\nWe could, and maybe should, get rid of the `uint` step though, it is even\nmore of a trap I think!)",
        "commit_url": "https://github.com/numpy/numpy/commit/af5fe2ee3ac2128766fb7a6a61964143796c3994",
        "buggy_code": "with pytest.warns(DeprecationWarning):",
        "fixed_code": "with pytest.raises(OverflowError):",
        "patch": "@@ -78,7 +78,7 @@ def test_intp(self):\n         assert_equal(1024, np.intp(1024))\n \n     def test_uint64_from_negative(self):\n-        with pytest.warns(DeprecationWarning):\n+        with pytest.raises(OverflowError):\n             assert_equal(np.uint64(-2), np.uint64(18446744073709551614))\n \n "
    },
    {
        "commit_id": "09839ccee3e96025e11a68e2e4179a60cbb0549a",
        "commit_message": "Fix after merge",
        "commit_url": "https://github.com/numpy/numpy/commit/09839ccee3e96025e11a68e2e4179a60cbb0549a",
        "buggy_code": "with pytest.raises(np.core._exceptions.UFuncTypeError) as exc:",
        "fixed_code": "with pytest.raises(np._core._exceptions.UFuncTypeError) as exc:",
        "patch": "@@ -2875,7 +2875,7 @@ def test_addition_reduce_negative_zero(dtype, use_initial):\n def test_addition_string_types(dt1, dt2):\n     arr1 = np.array([1234234], dtype=dt1)\n     arr2 = np.array([b\"423\"], dtype=dt2)\n-    with pytest.raises(np.core._exceptions.UFuncTypeError) as exc:\n+    with pytest.raises(np._core._exceptions.UFuncTypeError) as exc:\n         np.add(arr1, arr2)\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.overrides import array_function_dispatch",
        "fixed_code": "from numpy._core.overrides import array_function_dispatch",
        "patch": "@@ -1,7 +1,7 @@\n from .common import Benchmark\n \n try:\n-    from numpy.core.overrides import array_function_dispatch\n+    from numpy._core.overrides import array_function_dispatch\n except ImportError:\n     # Don't fail at import time with old Numpy versions\n     def array_function_dispatch(*args, **kwargs):"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "UFUNCS = [obj for obj in np.core.umath.__dict__.values() if",
        "fixed_code": "UFUNCS = [obj for obj in np._core.umath.__dict__.values() if",
        "patch": "@@ -2,7 +2,7 @@\n \n import numpy as np\n \n-UFUNCS = [obj for obj in np.core.umath.__dict__.values() if\n+UFUNCS = [obj for obj in np._core.umath.__dict__.values() if\n           isinstance(obj, np.ufunc)]\n UFUNCS_UNARY = [uf for uf in UFUNCS if \"O->O\" in uf.types]\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "if np.core.arrayprint._get_legacy_print_mode() <= 121:",
        "fixed_code": "if np._core.arrayprint._get_legacy_print_mode() <= 121:",
        "patch": "@@ -203,7 +203,7 @@ def _struct_dict_str(dtype, includealignedflag):\n \n     # Build up a string to make the dictionary\n \n-    if np.core.arrayprint._get_legacy_print_mode() <= 121:\n+    if np._core.arrayprint._get_legacy_print_mode() <= 121:\n         colon = \":\"\n         fieldsep = \",\"\n     else:"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_umath import (",
        "fixed_code": "from numpy._core._multiarray_umath import (",
        "patch": "@@ -5,7 +5,7 @@\n \n from .._utils import set_module\n from .._utils._inspect import getargspec\n-from numpy.core._multiarray_umath import (\n+from numpy._core._multiarray_umath import (\n     add_docstring,  _get_implementing_args, _ArrayFunctionDispatcher)\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.numerictypes import sctypes",
        "fixed_code": "from numpy._core.numerictypes import sctypes",
        "patch": "@@ -3,7 +3,7 @@\n import numbers\n \n import numpy as np\n-from numpy.core.numerictypes import sctypes\n+from numpy._core.numerictypes import sctypes\n \n class TestABC:\n     def test_abstract(self):"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_umath import _get_castingimpl as get_castingimpl",
        "fixed_code": "from numpy._core._multiarray_umath import _get_castingimpl as get_castingimpl",
        "patch": "@@ -12,7 +12,7 @@\n import pytest\n \n import numpy as np\n-from numpy.core._multiarray_umath import _get_castingimpl as get_castingimpl\n+from numpy._core._multiarray_umath import _get_castingimpl as get_castingimpl\n \n \n class TestResolveDescriptors:"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.arrayprint import _typelessdata",
        "fixed_code": "from numpy._core.arrayprint import _typelessdata",
        "patch": "@@ -9,7 +9,7 @@\n     assert_, assert_equal, assert_raises, assert_warns, HAS_REFCOUNT,\n     assert_raises_regex,\n     )\n-from numpy.core.arrayprint import _typelessdata\n+from numpy._core.arrayprint import _typelessdata\n import textwrap\n \n class TestArrayRepr:"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_umath import _get_castingimpl as get_castingimpl",
        "fixed_code": "from numpy._core._multiarray_umath import _get_castingimpl as get_castingimpl",
        "patch": "@@ -16,7 +16,7 @@\n from numpy.lib.stride_tricks import as_strided\n \n from numpy.testing import assert_array_equal\n-from numpy.core._multiarray_umath import _get_castingimpl as get_castingimpl\n+from numpy._core._multiarray_umath import _get_castingimpl as get_castingimpl\n \n \n # Simple skips object, parametric and long double (unsupported by struct)"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_umath import (",
        "fixed_code": "from numpy._core._multiarray_umath import (",
        "patch": "@@ -5,7 +5,7 @@\n \n import numpy as np\n from numpy.testing import assert_array_equal\n-from numpy.core._multiarray_umath import (\n+from numpy._core._multiarray_umath import (\n     _discover_array_parameters as discover_array_params, _get_sfloat_dtype)\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import _vec_string",
        "fixed_code": "from numpy._core.multiarray import _vec_string",
        "patch": "@@ -1,7 +1,7 @@\n import pytest\n \n import numpy as np\n-from numpy.core.multiarray import _vec_string\n+from numpy._core.multiarray import _vec_string\n from numpy.testing import (\n     assert_, assert_equal, assert_array_equal, assert_raises,\n     assert_raises_regex"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core._multiarray_tests as mt",
        "fixed_code": "import numpy._core._multiarray_tests as mt",
        "patch": "@@ -4,7 +4,7 @@\n import pytest\n \n import numpy as np\n-import numpy.core._multiarray_tests as mt\n+import numpy._core._multiarray_tests as mt\n \n from numpy.testing import assert_raises, assert_equal\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_tests import identityhash_tester",
        "fixed_code": "from numpy._core._multiarray_tests import identityhash_tester",
        "patch": "@@ -1,7 +1,7 @@\n import pytest\n \n import random\n-from numpy.core._multiarray_tests import identityhash_tester\n+from numpy._core._multiarray_tests import identityhash_tester\n \n \n @pytest.mark.parametrize(\"key_length\", [1, 3, 6])"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_tests import array_indexing",
        "fixed_code": "from numpy._core._multiarray_tests import array_indexing",
        "patch": "@@ -6,7 +6,7 @@\n import pytest\n \n import numpy as np\n-from numpy.core._multiarray_tests import array_indexing\n+from numpy._core._multiarray_tests import array_indexing\n from itertools import product\n from numpy.exceptions import ComplexWarning, VisibleDeprecationWarning\n from numpy.testing import ("
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy._core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -4,7 +4,7 @@\n \n import numpy as np\n from numpy.testing import assert_, assert_equal, IS_MUSL\n-from numpy.core.tests._locales import CommaDecimalPointLocale\n+from numpy._core.tests._locales import CommaDecimalPointLocale\n \n \n from io import StringIO"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import sctypes",
        "fixed_code": "from numpy._core import sctypes",
        "patch": "@@ -9,7 +9,7 @@\n import pytest\n import numpy as np\n \n-from numpy.core import sctypes\n+from numpy._core import sctypes\n from numpy.testing import assert_equal, assert_raises, IS_MUSL\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._simd import targets",
        "fixed_code": "from numpy._core._simd import targets",
        "patch": "@@ -1,5 +1,5 @@\n import pytest\n-from numpy.core._simd import targets\n+from numpy._core._simd import targets\n \"\"\"\n This testing unit only for checking the sanity of common functionality,\n therefore all we need is just to take one submodule that represents any"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core._multiarray_umath as ncu",
        "fixed_code": "import numpy._core._multiarray_umath as ncu",
        "patch": "@@ -4,7 +4,7 @@\n \n import numpy as np\n # import the c-extension module directly since _arg is not exported via umath\n-import numpy.core._multiarray_umath as ncu\n+import numpy._core._multiarray_umath as ncu\n from numpy.testing import (\n     assert_raises, assert_equal, assert_array_equal, assert_almost_equal, assert_array_max_ulp\n     )"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "Create the numpy.core.umath namespace for backward compatibility. In v1.16",
        "fixed_code": "Create the numpy._core.umath namespace for backward compatibility. In v1.16",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-Create the numpy.core.umath namespace for backward compatibility. In v1.16\n+Create the numpy._core.umath namespace for backward compatibility. In v1.16\n the multiarray and umath c-extension modules were merged into a single\n _multiarray_umath extension module. So we replicate the old namespace\n by importing from the extension module."
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "hiddenimports = ['numpy.core._dtype_ctypes', 'numpy.core._multiarray_tests']",
        "fixed_code": "hiddenimports = ['numpy._core._dtype_ctypes', 'numpy._core._multiarray_tests']",
        "patch": "@@ -22,7 +22,7 @@\n \n # Submodules PyInstaller cannot detect.  `_dtype_ctypes` is only imported\n # from C and `_multiarray_tests` is used in tests (which are not packed).\n-hiddenimports = ['numpy.core._dtype_ctypes', 'numpy.core._multiarray_tests']\n+hiddenimports = ['numpy._core._dtype_ctypes', 'numpy._core._multiarray_tests']\n \n # Remove testing and building code and packages that are referenced throughout\n # NumPy but are not really dependencies."
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "in ``numpy.core``.",
        "fixed_code": "in ``numpy._core``.",
        "patch": "@@ -5,7 +5,7 @@\n Everything in here must be self-contained so that it can be\n imported anywhere else without creating circular imports.\n If a utility requires the import of NumPy, it probably belongs\n-in ``numpy.core``.\n+in ``numpy._core``.\n \"\"\"\n \n from ._convertions import asunicode, asbytes"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from ..core.numeric import normalize_axis_tuple",
        "fixed_code": "from .._core.numeric import normalize_axis_tuple",
        "patch": "@@ -11,7 +11,7 @@\n from ._manipulation_functions import reshape\n from ._array_object import Array\n \n-from ..core.numeric import normalize_axis_tuple\n+from .._core.numeric import normalize_axis_tuple\n \n from typing import TYPE_CHECKING\n if TYPE_CHECKING:"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._multiarray_tests import get_fpu_mode",
        "fixed_code": "from numpy._core._multiarray_tests import get_fpu_mode",
        "patch": "@@ -8,7 +8,7 @@\n import pytest\n import numpy\n \n-from numpy.core._multiarray_tests import get_fpu_mode\n+from numpy._core._multiarray_tests import get_fpu_mode\n \n \n _old_fpu_mode = None"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "if header[0] == 'numpy.core':",
        "fixed_code": "if header[0] == 'numpy._core':",
        "patch": "@@ -12,7 +12,7 @@ def run (self):\n         for header in headers:\n             if isinstance(header, tuple):\n                 # Kind of a hack, but I don't know where else to change this...\n-                if header[0] == 'numpy.core':\n+                if header[0] == 'numpy._core':\n                     header = ('numpy', header[1])\n                     if os.path.splitext(header[1])[1] == '.inc':\n                         continue"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._type_aliases import c_names_dict as _c_names_dict",
        "fixed_code": "from numpy._core._type_aliases import c_names_dict as _c_names_dict",
        "patch": "@@ -7,7 +7,7 @@\n import numpy as np\n \n from numpy.testing import assert_, assert_equal\n-from numpy.core._type_aliases import c_names_dict as _c_names_dict\n+from numpy._core._type_aliases import c_names_dict as _c_names_dict\n from . import util\n \n wrap = None"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import asarray, concatenate, arange, take",
        "fixed_code": "from numpy._core import asarray, concatenate, arange, take",
        "patch": "@@ -85,7 +85,7 @@ def test_uneven_dims(self):\n \n     def test_equal_to_original(self):\n         \"\"\" Test that the new (>=v1.15) implementation (see #10073) is equal to the original (<=v1.14) \"\"\"\n-        from numpy.core import asarray, concatenate, arange, take\n+        from numpy._core import asarray, concatenate, arange, take\n \n         def original_fftshift(x, axes=None):\n             \"\"\" How fftshift was implemented in v1.14\"\"\""
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.overrides import array_function_dispatch",
        "fixed_code": "from numpy._core.overrides import array_function_dispatch",
        "patch": "@@ -4,7 +4,7 @@\n \n \"\"\"\n import numpy as np\n-from numpy.core.overrides import array_function_dispatch\n+from numpy._core.overrides import array_function_dispatch\n from numpy.lib._index_tricks_impl import ndindex\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import overrides",
        "fixed_code": "from numpy._core import overrides",
        "patch": "@@ -18,7 +18,7 @@\n import warnings\n \n import numpy as np\n-from numpy.core import overrides\n+from numpy._core import overrides\n \n \n array_function_dispatch = functools.partial("
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import overrides",
        "fixed_code": "from numpy._core import overrides",
        "patch": "@@ -7,7 +7,7 @@\n import warnings\n \n import numpy as np\n-from numpy.core import overrides\n+from numpy._core import overrides\n \n __all__ = ['histogram', 'histogramdd', 'histogram_bin_edges']\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core.numeric as nx",
        "fixed_code": "import numpy._core.numeric as nx",
        "patch": "@@ -4,7 +4,7 @@\n __docformat__ = \"restructuredtext en\"\n \n import numpy as np\n-import numpy.core.numeric as nx\n+import numpy._core.numeric as nx\n from numpy._utils import asbytes, asunicode\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import overrides",
        "fixed_code": "from numpy._core import overrides",
        "patch": "@@ -24,7 +24,7 @@\n import warnings\n import numpy as np\n from numpy.lib import _function_base_impl as fnb\n-from numpy.core import overrides\n+from numpy._core import overrides\n \n \n array_function_dispatch = functools.partial("
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import umath as um",
        "fixed_code": "from numpy._core import umath as um",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"Mixin classes for custom array types that don't inherit from ndarray.\"\"\"\n-from numpy.core import umath as um\n+from numpy._core import umath as um\n \n \n __all__ = ['NDArrayOperatorsMixin']"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core.numeric as nx",
        "fixed_code": "import numpy._core.numeric as nx",
        "patch": "@@ -159,7 +159,7 @@ def test_upgrade(self):\n \n         # On systems where long defaults to 32-bit, the statuses will be\n         # offset by one, so we check for this here.\n-        import numpy.core.numeric as nx\n+        import numpy._core.numeric as nx\n         status_offset = int(nx.dtype(nx.int_).itemsize < nx.dtype(nx.int64).itemsize)\n \n         # test int > 2**32"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.numeric import normalize_axis_tuple",
        "fixed_code": "from numpy._core.numeric import normalize_axis_tuple",
        "patch": "@@ -3,7 +3,7 @@\n import inspect\n \n import numpy as np\n-from numpy.core.numeric import normalize_axis_tuple\n+from numpy._core.numeric import normalize_axis_tuple\n from numpy.exceptions import AxisError, ComplexWarning\n from numpy.lib._nanfunctions_impl import _nan_mask, _replace_nan\n from numpy.testing import ("
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core._rational_tests import rational",
        "fixed_code": "from numpy._core._rational_tests import rational",
        "patch": "@@ -1,5 +1,5 @@\n import numpy as np\n-from numpy.core._rational_tests import rational\n+from numpy._core._rational_tests import rational\n from numpy.testing import (\n     assert_equal, assert_array_equal, assert_raises, assert_,\n     assert_raises_regex, assert_warns,"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import (",
        "fixed_code": "from numpy._core import (",
        "patch": "@@ -5,7 +5,7 @@\n complete.\n \n \"\"\"\n-from numpy.core import (\n+from numpy._core import (\n     array, asarray, absolute, add, subtract, multiply, divide,\n     remainder, power, left_shift, right_shift, bitwise_and, bitwise_or,\n     bitwise_xor, invert, less, less_equal, not_equal, equal, greater,"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import (",
        "fixed_code": "from numpy._core import (",
        "patch": "@@ -20,7 +20,7 @@\n from typing import NamedTuple, Any\n \n from numpy._utils import set_module\n-from numpy.core import (\n+from numpy._core import (\n     array, asarray, zeros, empty, empty_like, intc, single, double,\n     csingle, cdouble, inexact, complexfloating, newaxis, all, inf, dot,\n     add, multiply, sqrt, sum, isfinite, finfo, errstate, moveaxis, amin,"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import swapaxes",
        "fixed_code": "from numpy._core import swapaxes",
        "patch": "@@ -11,7 +11,7 @@\n \n import numpy as np\n from numpy import array, single, double, csingle, cdouble, dot, identity, matmul\n-from numpy.core import swapaxes\n+from numpy._core import swapaxes\n from numpy.exceptions import AxisError\n from numpy import multiply, atleast_2d, inf, asarray\n from numpy import linalg"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.numeric import normalize_axis_tuple",
        "fixed_code": "from numpy._core.numeric import normalize_axis_tuple",
        "patch": "@@ -12,7 +12,7 @@\n import pytest\n \n import numpy as np\n-from numpy.core.numeric import normalize_axis_tuple\n+from numpy._core.numeric import normalize_axis_tuple\n from numpy.testing import (\n     assert_warns, suppress_warnings\n     )"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.records import (",
        "fixed_code": "from numpy._core.records import (",
        "patch": "@@ -11,7 +11,7 @@\n import numpy.ma as ma\n from numpy.ma import masked, nomask\n from numpy.testing import temppath\n-from numpy.core.records import (\n+from numpy._core.records import (\n     recarray, fromrecords as recfromrecords, fromarrays as recfromarrays\n     )\n from numpy.ma.mrecords import ("
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core.umath as umath",
        "fixed_code": "import numpy._core.umath as umath",
        "patch": "@@ -9,7 +9,7 @@\n \n import numpy as np\n from numpy import ndarray\n-import numpy.core.umath as umath\n+import numpy._core.umath as umath\n import numpy.testing\n from numpy.testing import (\n     assert_, assert_allclose, assert_array_almost_equal_nulp,"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core.fromnumeric as fromnumeric",
        "fixed_code": "import numpy._core.fromnumeric as fromnumeric",
        "patch": "@@ -2,7 +2,7 @@\n from functools import reduce\n \n import numpy as np\n-import numpy.core.fromnumeric as fromnumeric\n+import numpy._core.fromnumeric as fromnumeric\n \n from numpy.testing import build_err_msg\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -109,7 +109,7 @@\n \"\"\"\n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -77,7 +77,7 @@\n \"\"\"\n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -77,7 +77,7 @@\n \"\"\"\n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -77,7 +77,7 @@\n \"\"\"\n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -81,7 +81,7 @@\n \"\"\"\n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core.multiarray import normalize_axis_index",
        "fixed_code": "from numpy._core.multiarray import normalize_axis_index",
        "patch": "@@ -81,7 +81,7 @@\n \n import numpy as np\n import numpy.linalg as la\n-from numpy.core.multiarray import normalize_axis_index\n+from numpy._core.multiarray import normalize_axis_index\n \n from . import polyutils as pu\n from ._polybase import ABCPolyBase"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import array, arange, printoptions",
        "fixed_code": "from numpy._core import array, arange, printoptions",
        "patch": "@@ -1,6 +1,6 @@\n from math import nan, inf\n import pytest\n-from numpy.core import array, arange, printoptions\n+from numpy._core import array, arange, printoptions\n import numpy.polynomial as poly\n from numpy.testing import assert_equal, assert_\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "from numpy.core import array",
        "fixed_code": "from numpy._core import array",
        "patch": "@@ -4,7 +4,7 @@\n \n import pytest\n import numpy.polynomial as poly\n-from numpy.core import array\n+from numpy._core import array\n from numpy.testing import assert_equal, assert_raises, assert_\n \n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "import numpy.core._multiarray_umath as ncu",
        "fixed_code": "import numpy._core._multiarray_umath as ncu",
        "patch": "@@ -6,7 +6,7 @@\n import weakref\n \n import numpy as np\n-import numpy.core._multiarray_umath as ncu\n+import numpy._core._multiarray_umath as ncu\n from numpy.testing import (\n     assert_equal, assert_array_equal, assert_almost_equal,\n     assert_array_almost_equal, assert_array_less, build_err_msg,"
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "\"\"\"Tests for :mod:`numpy.core.fromnumeric`.\"\"\"",
        "fixed_code": "\"\"\"Tests for :mod:`numpy._core.fromnumeric`.\"\"\"",
        "patch": "@@ -1,4 +1,4 @@\n-\"\"\"Tests for :mod:`numpy.core.fromnumeric`.\"\"\"\n+\"\"\"Tests for :mod:`numpy._core.fromnumeric`.\"\"\"\n \n import numpy as np\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "Tests for :mod:`numpy.core.numeric`.",
        "fixed_code": "Tests for :mod:`numpy._core.numeric`.",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-Tests for :mod:`numpy.core.numeric`.\n+Tests for :mod:`numpy._core.numeric`.\n \n Does not include tests which fall under ``array_constructors``.\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "\"\"\"Typing tests for `numpy.core._ufunc_config`.\"\"\"",
        "fixed_code": "\"\"\"Typing tests for `numpy._core._ufunc_config`.\"\"\"",
        "patch": "@@ -1,4 +1,4 @@\n-\"\"\"Typing tests for `numpy.core._ufunc_config`.\"\"\"\n+\"\"\"Typing tests for `numpy._core._ufunc_config`.\"\"\"\n \n import numpy as np\n "
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "ROOT / \"core\" / \"__init__.pyi\",",
        "fixed_code": "ROOT / \"_core\" / \"__init__.pyi\",",
        "patch": "@@ -10,7 +10,7 @@\n     ROOT / \"py.typed\",\n     ROOT / \"__init__.pyi\",\n     ROOT / \"ctypeslib.pyi\",\n-    ROOT / \"core\" / \"__init__.pyi\",\n+    ROOT / \"_core\" / \"__init__.pyi\",\n     ROOT / \"f2py\" / \"__init__.pyi\",\n     ROOT / \"fft\" / \"__init__.pyi\",\n     ROOT / \"lib\" / \"__init__.pyi\","
    },
    {
        "commit_id": "47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "commit_message": "MAINT: Update numpy.core paths to numpy._core\n\nMAINT: Update git submodules, fix test_format",
        "commit_url": "https://github.com/numpy/numpy/commit/47b70cbffd672849a5d3b9b6fa6e515700460fd0",
        "buggy_code": "\"core\",",
        "fixed_code": "\"_core\",",
        "patch": "@@ -32,7 +32,7 @@\n         \"math\",\n         # Accidentally public, deprecated, or shouldn't be used\n         \"Tester\",\n-        \"core\",\n+        \"_core\",\n         \"get_array_wrap\",\n         \"int_asbuffer\",\n         \"numarray\","
    },
    {
        "commit_id": "67539a40cb13bad56a650809bf10a49e905a250d",
        "commit_message": "DOC: fix typos in docstrings and comments (#24913)",
        "commit_url": "https://github.com/numpy/numpy/commit/67539a40cb13bad56a650809bf10a49e905a250d",
        "buggy_code": "\"\"\"Check the the message is formatted correctly when overflow can occur",
        "fixed_code": "\"\"\"Check the message is formatted correctly when overflow can occur",
        "patch": "@@ -929,7 +929,7 @@ def test_timedelta(self):\n         assert_allclose(a, a)\n \n     def test_error_message_unsigned(self):\n-        \"\"\"Check the the message is formatted correctly when overflow can occur\n+        \"\"\"Check the message is formatted correctly when overflow can occur\n            (gh21768)\"\"\"\n         # Ensure to test for potential overflow in the case of:\n         #        x - y"
    },
    {
        "commit_id": "86e17568a31fc14e01d48d192ab46423ca463a26",
        "commit_message": "Merge pull request #24904 from iv-m/loongarch-fix\n\nBUG: loongarch doesn't use REAL(10)",
        "commit_url": "https://github.com/numpy/numpy/commit/86e17568a31fc14e01d48d192ab46423ca463a26",
        "buggy_code": "if machine.startswith(('aarch64', 'arm64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2452,7 +2452,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'arm64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "0a90b4f08ab85ea63e8b6408604e6801dbc6eb2a",
        "commit_message": "BUG: loongarch doesn't use REAL(10)\n\nThis fixes numpy.f2py.tests.test_kind.TestKind",
        "commit_url": "https://github.com/numpy/numpy/commit/0a90b4f08ab85ea63e8b6408604e6801dbc6eb2a",
        "buggy_code": "if machine.startswith(('aarch64', 'arm64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2452,7 +2452,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'arm64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'arm64', 'loongarch', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 33:\n             return 16\n     else:"
    },
    {
        "commit_id": "77415c322fd3550a39222303b4015894bbf203a7",
        "commit_message": "DOC: Fix typo in linalg.py docs (#24886)\n\nThis PR fixes a typo in the linalg.py documentation. Specifically, it fixes the eigenvector/eigenvalue equation.",
        "commit_url": "https://github.com/numpy/numpy/commit/77415c322fd3550a39222303b4015894bbf203a7",
        "buggy_code": "eigenvalues[i] * eigenvalues[:,i]`` for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.",
        "fixed_code": "eigenvalues[i] * eigenvectors[:,i]`` for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.",
        "patch": "@@ -1238,7 +1238,7 @@ def eig(a):\n     The number `w` is an eigenvalue of `a` if there exists a vector `v` such\n     that ``a @ v = w * v``. Thus, the arrays `a`, `eigenvalues`, and\n     `eigenvectors` satisfy the equations ``a @ eigenvectors[:,i] =\n-    eigenvalues[i] * eigenvalues[:,i]`` for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.\n+    eigenvalues[i] * eigenvectors[:,i]`` for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.\n \n     The array `eigenvectors` may not be of maximum rank, that is, some of the\n     columns may be linearly dependent, although round-off error may obscure"
    },
    {
        "commit_id": "2343d3d8b198a1b54cea3c727c1aea2243daf7f0",
        "commit_message": "DOC: Fix reference warning in some rst files (#24847)\n\n[skip actions][skip cirrus][skip azp]\r\n\r\nSigned-off-by: Liang Yan <ckgppl_yan@sina.cn>",
        "commit_url": "https://github.com/numpy/numpy/commit/2343d3d8b198a1b54cea3c727c1aea2243daf7f0",
        "buggy_code": "`_Config.conf_features`.",
        "fixed_code": "``_Config.conf_features``.",
        "patch": "@@ -1308,7 +1308,7 @@ def feature_names(self, names=None, force_flags=None, macros=[]):\n     def feature_is_exist(self, name):\n         \"\"\"\n         Returns True if a certain feature is exist and covered within\n-        `_Config.conf_features`.\n+        ``_Config.conf_features``.\n \n         Parameters\n         ----------"
    },
    {
        "commit_id": "6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "commit_message": "Merge pull request #24805 from liang3zy22/somerefwarn4\n\nDOC: Fix reference warning in some rst files",
        "commit_url": "https://github.com/numpy/numpy/commit/6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "buggy_code": "`bitwise_not` is an alias for `invert`:",
        "fixed_code": "``numpy.bitwise_not`` is an alias for `invert`:",
        "patch": "@@ -1617,7 +1617,7 @@ def add_newdoc(place, name, doc):\n \n     Notes\n     -----\n-    `bitwise_not` is an alias for `invert`:\n+    ``numpy.bitwise_not`` is an alias for `invert`:\n \n     >>> np.bitwise_not is np.invert\n     True"
    },
    {
        "commit_id": "6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "commit_message": "Merge pull request #24805 from liang3zy22/somerefwarn4\n\nDOC: Fix reference warning in some rst files",
        "commit_url": "https://github.com/numpy/numpy/commit/6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "buggy_code": "doc.indexing, atleast_1d, atleast_2d, atleast_3d",
        "fixed_code": "atleast_1d, atleast_2d, atleast_3d",
        "patch": "@@ -545,7 +545,7 @@ def expand_dims(a, axis):\n     --------\n     squeeze : The inverse operation, removing singleton dimensions\n     reshape : Insert, remove, and combine dimensions, and resize existing ones\n-    doc.indexing, atleast_1d, atleast_2d, atleast_3d\n+    atleast_1d, atleast_2d, atleast_3d\n \n     Examples\n     --------"
    },
    {
        "commit_id": "6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "commit_message": "Merge pull request #24805 from liang3zy22/somerefwarn4\n\nDOC: Fix reference warning in some rst files",
        "commit_url": "https://github.com/numpy/numpy/commit/6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "buggy_code": "dtype, typecodes",
        "fixed_code": "dtype",
        "patch": "@@ -589,7 +589,7 @@ def typename(char):\n \n     See Also\n     --------\n-    dtype, typecodes\n+    dtype\n \n     Examples\n     --------"
    },
    {
        "commit_id": "6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "commit_message": "Merge pull request #24805 from liang3zy22/somerefwarn4\n\nDOC: Fix reference warning in some rst files",
        "commit_url": "https://github.com/numpy/numpy/commit/6bddc31c157944a0b1f4ec393b726dbc9d0b4faf",
        "buggy_code": "doctests) for `numpy.lib`:",
        "fixed_code": "doctests) for ``numpy.lib``:",
        "patch": "@@ -1208,7 +1208,7 @@ def rundocs(filename=None, raise_on_error=True):\n     -----\n     The doctests can be run by the user/developer by adding the ``doctests``\n     argument to the ``test()`` call. For example, to run all tests (including\n-    doctests) for `numpy.lib`:\n+    doctests) for ``numpy.lib``:\n \n     >>> np.lib.test(doctests=True)  # doctest: +SKIP\n     \"\"\""
    },
    {
        "commit_id": "c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "commit_message": "DOC: Fix reference warning in some rst files\n[skip actions][skip cirrus][skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "buggy_code": "`bitwise_not` is an alias for `invert`:",
        "fixed_code": "``numpy.bitwise_not`` is an alias for `invert`:",
        "patch": "@@ -1617,7 +1617,7 @@ def add_newdoc(place, name, doc):\n \n     Notes\n     -----\n-    `bitwise_not` is an alias for `invert`:\n+    ``numpy.bitwise_not`` is an alias for `invert`:\n \n     >>> np.bitwise_not is np.invert\n     True"
    },
    {
        "commit_id": "c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "commit_message": "DOC: Fix reference warning in some rst files\n[skip actions][skip cirrus][skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "buggy_code": "doc.indexing, atleast_1d, atleast_2d, atleast_3d",
        "fixed_code": "atleast_1d, atleast_2d, atleast_3d",
        "patch": "@@ -545,7 +545,7 @@ def expand_dims(a, axis):\n     --------\n     squeeze : The inverse operation, removing singleton dimensions\n     reshape : Insert, remove, and combine dimensions, and resize existing ones\n-    doc.indexing, atleast_1d, atleast_2d, atleast_3d\n+    atleast_1d, atleast_2d, atleast_3d\n \n     Examples\n     --------"
    },
    {
        "commit_id": "c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "commit_message": "DOC: Fix reference warning in some rst files\n[skip actions][skip cirrus][skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "buggy_code": "dtype, typecodes",
        "fixed_code": "dtype",
        "patch": "@@ -589,7 +589,7 @@ def typename(char):\n \n     See Also\n     --------\n-    dtype, typecodes\n+    dtype\n \n     Examples\n     --------"
    },
    {
        "commit_id": "c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "commit_message": "DOC: Fix reference warning in some rst files\n[skip actions][skip cirrus][skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/c236e694d222ae6b812cb8dab54471bc4c912f0f",
        "buggy_code": "doctests) for `numpy.lib`:",
        "fixed_code": "doctests) for ``numpy.lib``:",
        "patch": "@@ -1208,7 +1208,7 @@ def rundocs(filename=None, raise_on_error=True):\n     -----\n     The doctests can be run by the user/developer by adding the ``doctests``\n     argument to the ``test()`` call. For example, to run all tests (including\n-    doctests) for `numpy.lib`:\n+    doctests) for ``numpy.lib``:\n \n     >>> np.lib.test(doctests=True)  # doctest: +SKIP\n     \"\"\""
    },
    {
        "commit_id": "8867a455420ddface2b4aef32bf3d48df8f43523",
        "commit_message": "ENH: Changed `bit_count` UFunc return to int8\n\nWIP: Fix the typing",
        "commit_url": "https://github.com/numpy/numpy/commit/8867a455420ddface2b4aef32bf3d48df8f43523",
        "buggy_code": "TD(ints),",
        "fixed_code": "TD(ints, out='B'),",
        "patch": "@@ -1126,7 +1126,7 @@ def english_upper(s):\n     Ufunc(1, 1, None,\n           docstrings.get('numpy.core.umath.bit_count'),\n           None,\n-          TD(ints),\n+          TD(ints, out='B'),\n           TD('O', f='npy_ObjectPopCount'),\n           ),\n 'matmul' :"
    },
    {
        "commit_id": "350b27c35de9a91e0f497adcc39e2d2774a23142",
        "commit_message": "ENH: Added countbits (popcount)\n\nENH, DOC: Added countbits (popcount)\n\nENH: Popcount implementation\n\nENH: Add popcount to umath\n\nENH: Added countbits (popcount) to umath `__all__`\n\nENH: Refined popcount logic\n\nDOC: Added `bit_count`\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>\n\nMAINT: Renamed `countbits` to `bit_count`\n\nMAINT: Fixed 4 1s magic number\n\nDOC: Added `popcount` to docstring\n\nENH: Added bit_count annotations\n\nENH: Added GNU/CLANG popcount\n\nDOC: Added `popcount` language example\n\nENH, BUG: Moved `bitcount` to npy_math.h as `popcount` | Fixed final right shift\n\nENH: Enable `popcount` for signed\n\nTST: Tests for `bit_count`\n\nBUG, DOC: (BUG) Added missing typecast causing an unwanted upcast\n          (DOC) Added more details on `popcount` implementation\n\nMAINT, BUG: (MAINT) Refined `popcount` TC to use typecode\n            (BUG) Fixed ufunc.ntypes to include signed ints\n\nENH: Added windows builtin support\n\nENH: Added `popcount` implementation for big python ints natively\n[1/2] `popcount` object loop changes\n\nENH: Object loop for `bit_count`\n[2/2] `popcount` object loop changes\n\nTST: Refined `bit_count` tests and added object type\n\nENH: Added `bit_count` to `np.int*`\n\nDOC: Added `np.bit_count` (#19355)\n\nMAINT: Various linting and minor fixes:\n1. Fixed passing all args to _internals umath bitcount.\n   Note: We use kwargs here that might hinder performance\n2. Fixed linting errors.\n3. Improved verbosity of logs\n4. Made a generic TO_BITS_LEN macro to accomdate more length based\n   functions in future\n\nBENCH: Added bit_count (popcount)\n\nMAINT: Style nits | Added signed case\n\nDOC, MAINT: Improved example\n\nENH: Added annotations for bit_count\n\nTST: Added annotations tests for bit_count\n\nMAINT: Fixed linting errors\n\nMAINT: Moved Magic constants to npy_math_internal\n\nMAINT: Remove python implementation | Added 3.10 check to tests\n\nDOC: Added abs value usage to doc\n\nMAINT: Resolved merge conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/350b27c35de9a91e0f497adcc39e2d2774a23142",
        "buggy_code": "'arctan', 'arctan2', 'arctanh', 'bitwise_and', 'bitwise_not',",
        "fixed_code": "'arctan', 'arctan2', 'arctanh', 'bit_count', 'bitwise_and', 'bitwise_not',",
        "patch": "@@ -7,7 +7,7 @@\n \n \n ufuncs = ['abs', 'absolute', 'add', 'arccos', 'arccosh', 'arcsin', 'arcsinh',\n-          'arctan', 'arctan2', 'arctanh', 'bitwise_and', 'bitwise_not',\n+          'arctan', 'arctan2', 'arctanh', 'bit_count', 'bitwise_and', 'bitwise_not',\n           'bitwise_or', 'bitwise_xor', 'cbrt', 'ceil', 'conj', 'conjugate',\n           'copysign', 'cos', 'cosh', 'deg2rad', 'degrees', 'divide', 'divmod',\n           'equal', 'exp', 'exp2', 'expm1', 'fabs', 'float_power', 'floor',"
    },
    {
        "commit_id": "350b27c35de9a91e0f497adcc39e2d2774a23142",
        "commit_message": "ENH: Added countbits (popcount)\n\nENH, DOC: Added countbits (popcount)\n\nENH: Popcount implementation\n\nENH: Add popcount to umath\n\nENH: Added countbits (popcount) to umath `__all__`\n\nENH: Refined popcount logic\n\nDOC: Added `bit_count`\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>\n\nMAINT: Renamed `countbits` to `bit_count`\n\nMAINT: Fixed 4 1s magic number\n\nDOC: Added `popcount` to docstring\n\nENH: Added bit_count annotations\n\nENH: Added GNU/CLANG popcount\n\nDOC: Added `popcount` language example\n\nENH, BUG: Moved `bitcount` to npy_math.h as `popcount` | Fixed final right shift\n\nENH: Enable `popcount` for signed\n\nTST: Tests for `bit_count`\n\nBUG, DOC: (BUG) Added missing typecast causing an unwanted upcast\n          (DOC) Added more details on `popcount` implementation\n\nMAINT, BUG: (MAINT) Refined `popcount` TC to use typecode\n            (BUG) Fixed ufunc.ntypes to include signed ints\n\nENH: Added windows builtin support\n\nENH: Added `popcount` implementation for big python ints natively\n[1/2] `popcount` object loop changes\n\nENH: Object loop for `bit_count`\n[2/2] `popcount` object loop changes\n\nTST: Refined `bit_count` tests and added object type\n\nENH: Added `bit_count` to `np.int*`\n\nDOC: Added `np.bit_count` (#19355)\n\nMAINT: Various linting and minor fixes:\n1. Fixed passing all args to _internals umath bitcount.\n   Note: We use kwargs here that might hinder performance\n2. Fixed linting errors.\n3. Improved verbosity of logs\n4. Made a generic TO_BITS_LEN macro to accomdate more length based\n   functions in future\n\nBENCH: Added bit_count (popcount)\n\nMAINT: Style nits | Added signed case\n\nDOC, MAINT: Improved example\n\nENH: Added annotations for bit_count\n\nTST: Added annotations tests for bit_count\n\nMAINT: Fixed linting errors\n\nMAINT: Moved Magic constants to npy_math_internal\n\nMAINT: Remove python implementation | Added 3.10 check to tests\n\nDOC: Added abs value usage to doc\n\nMAINT: Resolved merge conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/350b27c35de9a91e0f497adcc39e2d2774a23142",
        "buggy_code": "'conjugate', 'copysign', 'cos', 'cosh', 'deg2rad', 'degrees', 'divide',",
        "fixed_code": "'conjugate', 'copysign', 'cos', 'cosh', 'bit_count', 'deg2rad', 'degrees', 'divide',",
        "patch": "@@ -19,7 +19,7 @@\n     'absolute', 'add',\n     'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh',\n     'bitwise_and', 'bitwise_or', 'bitwise_xor', 'cbrt', 'ceil', 'conj',\n-    'conjugate', 'copysign', 'cos', 'cosh', 'deg2rad', 'degrees', 'divide',\n+    'conjugate', 'copysign', 'cos', 'cosh', 'bit_count', 'deg2rad', 'degrees', 'divide',\n     'divmod', 'e', 'equal', 'euler_gamma', 'exp', 'exp2', 'expm1', 'fabs',\n     'floor', 'floor_divide', 'float_power', 'fmax', 'fmin', 'fmod', 'frexp',\n     'frompyfunc', 'gcd', 'greater', 'greater_equal', 'heaviside',"
    },
    {
        "commit_id": "350b27c35de9a91e0f497adcc39e2d2774a23142",
        "commit_message": "ENH: Added countbits (popcount)\n\nENH, DOC: Added countbits (popcount)\n\nENH: Popcount implementation\n\nENH: Add popcount to umath\n\nENH: Added countbits (popcount) to umath `__all__`\n\nENH: Refined popcount logic\n\nDOC: Added `bit_count`\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>\n\nMAINT: Renamed `countbits` to `bit_count`\n\nMAINT: Fixed 4 1s magic number\n\nDOC: Added `popcount` to docstring\n\nENH: Added bit_count annotations\n\nENH: Added GNU/CLANG popcount\n\nDOC: Added `popcount` language example\n\nENH, BUG: Moved `bitcount` to npy_math.h as `popcount` | Fixed final right shift\n\nENH: Enable `popcount` for signed\n\nTST: Tests for `bit_count`\n\nBUG, DOC: (BUG) Added missing typecast causing an unwanted upcast\n          (DOC) Added more details on `popcount` implementation\n\nMAINT, BUG: (MAINT) Refined `popcount` TC to use typecode\n            (BUG) Fixed ufunc.ntypes to include signed ints\n\nENH: Added windows builtin support\n\nENH: Added `popcount` implementation for big python ints natively\n[1/2] `popcount` object loop changes\n\nENH: Object loop for `bit_count`\n[2/2] `popcount` object loop changes\n\nTST: Refined `bit_count` tests and added object type\n\nENH: Added `bit_count` to `np.int*`\n\nDOC: Added `np.bit_count` (#19355)\n\nMAINT: Various linting and minor fixes:\n1. Fixed passing all args to _internals umath bitcount.\n   Note: We use kwargs here that might hinder performance\n2. Fixed linting errors.\n3. Improved verbosity of logs\n4. Made a generic TO_BITS_LEN macro to accomdate more length based\n   functions in future\n\nBENCH: Added bit_count (popcount)\n\nMAINT: Style nits | Added signed case\n\nDOC, MAINT: Improved example\n\nENH: Added annotations for bit_count\n\nTST: Added annotations tests for bit_count\n\nMAINT: Fixed linting errors\n\nMAINT: Moved Magic constants to npy_math_internal\n\nMAINT: Remove python implementation | Added 3.10 check to tests\n\nDOC: Added abs value usage to doc\n\nMAINT: Resolved merge conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/350b27c35de9a91e0f497adcc39e2d2774a23142",
        "buggy_code": "'prod', 'std', 'ctypes', 'itemset',",
        "fixed_code": "'prod', 'std', 'ctypes', 'itemset', 'bit_count',",
        "patch": "@@ -286,7 +286,7 @@ def test_instance_methods(self):\n             'partition', 'argpartition', 'newbyteorder',\n             'take', 'tofile', 'tolist', 'tostring', 'tobytes', 'all', 'any',\n             'sum', 'argmax', 'argmin', 'min', 'max', 'mean', 'var', 'ptp',\n-            'prod', 'std', 'ctypes', 'itemset',\n+            'prod', 'std', 'ctypes', 'itemset', 'bit_count',\n             ]\n         for attrib in dir(a):\n             if attrib.startswith('_') or attrib in excluded_methods:"
    },
    {
        "commit_id": "9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "commit_message": "Merge pull request #24817 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix markups for emphasis",
        "commit_url": "https://github.com/numpy/numpy/commit/9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "buggy_code": "Since concatenation happens along the last axis first, `block` is _not_",
        "fixed_code": "Since concatenation happens along the last axis first, `block` is *not*",
        "patch": "@@ -775,7 +775,7 @@ def block(arrays):\n         AAAbb\n         cDDDD\n \n-    Since concatenation happens along the last axis first, `block` is _not_\n+    Since concatenation happens along the last axis first, `block` is *not*\n     capable of producing the following directly::\n \n         AAAbb"
    },
    {
        "commit_id": "9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "commit_message": "Merge pull request #24817 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix markups for emphasis",
        "commit_url": "https://github.com/numpy/numpy/commit/9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "buggy_code": "For monotonically _increasing_ `bins`, the following are equivalent::",
        "fixed_code": "For monotonically *increasing* `bins`, the following are equivalent::",
        "patch": "@@ -5616,7 +5616,7 @@ def digitize(x, bins, right=False):\n     much better for larger number of bins than the previous linear search.\n     It also removes the requirement for the input array to be 1-dimensional.\n \n-    For monotonically _increasing_ `bins`, the following are equivalent::\n+    For monotonically *increasing* `bins`, the following are equivalent::\n \n         np.digitize(x, bins, right=True)\n         np.searchsorted(bins, x, side='left')"
    },
    {
        "commit_id": "9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "commit_message": "Merge pull request #24817 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix markups for emphasis",
        "commit_url": "https://github.com/numpy/numpy/commit/9d4c1484b96ed2b7dff49c479e9d0822a4b91f80",
        "buggy_code": "If it is known in advance that an operation _will_ perform a",
        "fixed_code": "If it is known in advance that an operation *will* perform a",
        "patch": "@@ -128,7 +128,7 @@\n correct, all operations are that can potentially perform a 0D-array -> scalar\n cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n-If it is known in advance that an operation _will_ perform a\n+If it is known in advance that an operation *will* perform a\n 0D-array -> scalar cast, then one can consider manually remedying the\n situation with either `typing.cast` or a ``# type: ignore`` comment.\n "
    },
    {
        "commit_id": "a19ec108692517c028134d0d0e2a96647e5edca8",
        "commit_message": "DOC: Fix markups for emphasis\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/a19ec108692517c028134d0d0e2a96647e5edca8",
        "buggy_code": "Since concatenation happens along the last axis first, `block` is _not_",
        "fixed_code": "Since concatenation happens along the last axis first, `block` is *not*",
        "patch": "@@ -775,7 +775,7 @@ def block(arrays):\n         AAAbb\n         cDDDD\n \n-    Since concatenation happens along the last axis first, `block` is _not_\n+    Since concatenation happens along the last axis first, `block` is *not*\n     capable of producing the following directly::\n \n         AAAbb"
    },
    {
        "commit_id": "a19ec108692517c028134d0d0e2a96647e5edca8",
        "commit_message": "DOC: Fix markups for emphasis\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/a19ec108692517c028134d0d0e2a96647e5edca8",
        "buggy_code": "For monotonically _increasing_ `bins`, the following are equivalent::",
        "fixed_code": "For monotonically *increasing* `bins`, the following are equivalent::",
        "patch": "@@ -5616,7 +5616,7 @@ def digitize(x, bins, right=False):\n     much better for larger number of bins than the previous linear search.\n     It also removes the requirement for the input array to be 1-dimensional.\n \n-    For monotonically _increasing_ `bins`, the following are equivalent::\n+    For monotonically *increasing* `bins`, the following are equivalent::\n \n         np.digitize(x, bins, right=True)\n         np.searchsorted(bins, x, side='left')"
    },
    {
        "commit_id": "a19ec108692517c028134d0d0e2a96647e5edca8",
        "commit_message": "DOC: Fix markups for emphasis\n\n[skip cirrus] [skip azp] [skip actions]",
        "commit_url": "https://github.com/numpy/numpy/commit/a19ec108692517c028134d0d0e2a96647e5edca8",
        "buggy_code": "If it is known in advance that an operation _will_ perform a",
        "fixed_code": "If it is known in advance that an operation *will* perform a",
        "patch": "@@ -128,7 +128,7 @@\n correct, all operations are that can potentially perform a 0D-array -> scalar\n cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n-If it is known in advance that an operation _will_ perform a\n+If it is known in advance that an operation *will* perform a\n 0D-array -> scalar cast, then one can consider manually remedying the\n situation with either `typing.cast` or a ``# type: ignore`` comment.\n "
    },
    {
        "commit_id": "87146b8dbea350b9e89da70e6a65880160a8c2be",
        "commit_message": "Merge pull request #24781 from DimitriPapadopoulos/codespell\n\nMAINT, DOC: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/87146b8dbea350b9e89da70e6a65880160a8c2be",
        "buggy_code": "If ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it.",
        "fixed_code": "If ``A.ndim > d``, `reps` is promoted to `A`.ndim by prepending 1's to it.",
        "patch": "@@ -1210,7 +1210,7 @@ def tile(A, reps):\n     behavior, promote `A` to d-dimensions manually before calling this\n     function.\n \n-    If ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it.\n+    If ``A.ndim > d``, `reps` is promoted to `A`.ndim by prepending 1's to it.\n     Thus for an `A` of shape (2, 3, 4, 5), a `reps` of (2, 2) is treated as\n     (1, 1, 2, 2).\n "
    },
    {
        "commit_id": "83061481e125050eb9f90df29f51f42260325d44",
        "commit_message": "Merge pull request #24787 from ShaliniR8/piecewise-signum-example\n\nDOC: Closes issue #24730, 'sigma' to 'signum' in piecewise example",
        "commit_url": "https://github.com/numpy/numpy/commit/83061481e125050eb9f90df29f51f42260325d44",
        "buggy_code": "Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.",
        "fixed_code": "Define the signum function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.",
        "patch": "@@ -703,7 +703,7 @@ def piecewise(x, condlist, funclist, *args, **kw):\n \n     Examples\n     --------\n-    Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n+    Define the signum function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n \n     >>> x = np.linspace(-2.5, 2.5, 6)\n     >>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])"
    },
    {
        "commit_id": "0c476bcc2c61fe4fdba49bae34f25656cf83222a",
        "commit_message": "Merge pull request #24795 from khawajaJunaid/spelling-mistake-fix\n\nBUG : fix spelling mistake for \"imaginary\" param in _read closes #24797",
        "commit_url": "https://github.com/numpy/numpy/commit/0c476bcc2c61fe4fdba49bae34f25656cf83222a",
        "buggy_code": "Character that represent the imaginay unit `sqrt(-1)`.",
        "fixed_code": "Character that represent the imaginary unit `sqrt(-1)`.",
        "patch": "@@ -838,7 +838,7 @@ def _read(fname, *, delimiter=',', comment='#', quote='\"',\n         Character that is used to quote string fields. Default is '\"'\n         (a double quote). Use None to disable quote support.\n     imaginary_unit : str, optional\n-        Character that represent the imaginay unit `sqrt(-1)`.\n+        Character that represent the imaginary unit `sqrt(-1)`.\n         Default is 'j'.\n     usecols : array_like, optional\n         A one-dimensional array of integer column numbers.  These are the"
    },
    {
        "commit_id": "0ee39d347977b09f79fe5bcfdfcba97c842a7f2b",
        "commit_message": "DOC: Closes issue #24730, 'sigma' to 'signum' in piecewise function example",
        "commit_url": "https://github.com/numpy/numpy/commit/0ee39d347977b09f79fe5bcfdfcba97c842a7f2b",
        "buggy_code": "Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.",
        "fixed_code": "Define the signum function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.",
        "patch": "@@ -703,7 +703,7 @@ def piecewise(x, condlist, funclist, *args, **kw):\n \n     Examples\n     --------\n-    Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n+    Define the signum function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n \n     >>> x = np.linspace(-2.5, 2.5, 6)\n     >>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])"
    },
    {
        "commit_id": "d41572ca41c1c8d247ef0eb1bb6e47ee0e4f8314",
        "commit_message": "MAINT, DOC: fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/d41572ca41c1c8d247ef0eb1bb6e47ee0e4f8314",
        "buggy_code": "If ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it.",
        "fixed_code": "If ``A.ndim > d``, `reps` is promoted to `A`.ndim by prepending 1's to it.",
        "patch": "@@ -1210,7 +1210,7 @@ def tile(A, reps):\n     behavior, promote `A` to d-dimensions manually before calling this\n     function.\n \n-    If ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it.\n+    If ``A.ndim > d``, `reps` is promoted to `A`.ndim by prepending 1's to it.\n     Thus for an `A` of shape (2, 3, 4, 5), a `reps` of (2, 2) is treated as\n     (1, 1, 2, 2).\n "
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "chebdomain = np.array([-1, 1])",
        "fixed_code": "chebdomain = np.array([-1., 1.])",
        "patch": "@@ -461,7 +461,7 @@ def cheb2poly(c):\n #\n \n # Chebyshev default domain.\n-chebdomain = np.array([-1, 1])\n+chebdomain = np.array([-1., 1.])\n \n # Chebyshev coefficients representing zero.\n chebzero = np.array([0])"
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "hermdomain = np.array([-1, 1])",
        "fixed_code": "hermdomain = np.array([-1., 1.])",
        "patch": "@@ -202,7 +202,7 @@ def herm2poly(c):\n #\n \n # Hermite\n-hermdomain = np.array([-1, 1])\n+hermdomain = np.array([-1., 1.])\n \n # Hermite coefficients representing zero.\n hermzero = np.array([0])"
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "hermedomain = np.array([-1, 1])",
        "fixed_code": "hermedomain = np.array([-1., 1.])",
        "patch": "@@ -202,7 +202,7 @@ def herme2poly(c):\n #\n \n # Hermite\n-hermedomain = np.array([-1, 1])\n+hermedomain = np.array([-1., 1.])\n \n # Hermite coefficients representing zero.\n hermezero = np.array([0])"
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "lagdomain = np.array([0, 1])",
        "fixed_code": "lagdomain = np.array([0., 1.])",
        "patch": "@@ -198,7 +198,7 @@ def lag2poly(c):\n #\n \n # Laguerre\n-lagdomain = np.array([0, 1])\n+lagdomain = np.array([0., 1.])\n \n # Laguerre coefficients representing zero.\n lagzero = np.array([0])"
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "legdomain = np.array([-1, 1])",
        "fixed_code": "legdomain = np.array([-1., 1.])",
        "patch": "@@ -212,7 +212,7 @@ def leg2poly(c):\n #\n \n # Legendre\n-legdomain = np.array([-1, 1])\n+legdomain = np.array([-1., 1.])\n \n # Legendre coefficients representing zero.\n legzero = np.array([0])"
    },
    {
        "commit_id": "22c83ee2707756694c3d39232b3ba551a88a6c01",
        "commit_message": "ENH: Change default values in polynomial package\n\nChange default values for domain and window\nparameters for all convenience classes in\nnumpy.polynomial, as discussed in issue #24568.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c83ee2707756694c3d39232b3ba551a88a6c01",
        "buggy_code": "polydomain = np.array([-1, 1])",
        "fixed_code": "polydomain = np.array([-1., 1.])",
        "patch": "@@ -94,7 +94,7 @@\n #\n \n # Polynomial default domain.\n-polydomain = np.array([-1, 1])\n+polydomain = np.array([-1., 1.])\n \n # Polynomial coefficients representing zero.\n polyzero = np.array([0])"
    },
    {
        "commit_id": "0ff4ac72af38c55015e024e45026bbf36a7efefe",
        "commit_message": "Fix after rebase",
        "commit_url": "https://github.com/numpy/numpy/commit/0ff4ac72af38c55015e024e45026bbf36a7efefe",
        "buggy_code": "byte_bounds, show_runtime, get_include, info",
        "fixed_code": "show_runtime, get_include, info",
        "patch": "@@ -218,7 +218,7 @@\n     from .lib._ufunclike_impl import fix, isneginf, isposinf\n     from .lib._arraypad_impl import pad\n     from .lib._utils_impl import (\n-        byte_bounds, show_runtime, get_include, info\n+        show_runtime, get_include, info\n     )\n     from .lib._stride_tricks_impl import (\n         broadcast_arrays, broadcast_shapes, broadcast_to"
    },
    {
        "commit_id": "50c611a6072beef7913164365ea8dbc866edea2f",
        "commit_message": "DOC: fix isreal docstring (complex -> imaginary) (#24605)\n\n[skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/50c611a6072beef7913164365ea8dbc866edea2f",
        "buggy_code": "If element has complex type with zero complex part, the return value",
        "fixed_code": "If element has complex type with zero imaginary part, the return value",
        "patch": "@@ -211,7 +211,7 @@ def isreal(x):\n     \"\"\"\n     Returns a bool array, where True if input element is real.\n \n-    If element has complex type with zero complex part, the return value\n+    If element has complex type with zero imaginary part, the return value\n     for that element is True.\n \n     Parameters"
    },
    {
        "commit_id": "c1f9a3bf69492e9c86fc5240399ab35a3eb87644",
        "commit_message": "fix assert",
        "commit_url": "https://github.com/numpy/numpy/commit/c1f9a3bf69492e9c86fc5240399ab35a3eb87644",
        "buggy_code": "self.assertIsInstance(p(f), Fraction)",
        "fixed_code": "assert_(isinstance(p(f), Fraction))",
        "patch": "@@ -136,7 +136,7 @@ def test_Fraction(self):\n                                        Fraction(4, 9)], dtype=object))\n         assert_equal(p.domain, [zero, one])\n         assert_equal(p.coef.dtype, np.dtypes.ObjectDType())\n-        self.assertIsInstance(p(f), Fraction)\n+        assert_(isinstance(p(f), Fraction))\n         assert_equal(p(f), Fraction(10, 9))\n         p_deriv = poly.Polynomial([Fraction(2, 3)], domain=[zero, one],\n                                   window=[zero, one])"
    },
    {
        "commit_id": "2e170ea4d18635e5090f56d87af9f8aa9edbcef6",
        "commit_message": "Merge pull request #24562 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2e170ea4d18635e5090f56d87af9f8aa9edbcef6",
        "buggy_code": "For complex-valued input, `arccos` is a complex analytical function that",
        "fixed_code": "For complex-valued input, `arcsinh` is a complex analytical function that",
        "patch": "@@ -350,7 +350,7 @@ def add_newdoc(place, name, doc):\n     For each value that cannot be expressed as a real number or infinity, it\n     returns ``nan`` and sets the `invalid` floating point error flag.\n \n-    For complex-valued input, `arccos` is a complex analytical function that\n+    For complex-valued input, `arcsinh` is a complex analytical function that\n     has branch cuts `[1j, infj]` and `[-1j, -infj]` and is continuous from\n     the right on the former and from the left on the latter.\n "
    },
    {
        "commit_id": "b5c812c1220c886e9a9366c7d786cc9713b0c228",
        "commit_message": "DOC: Fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/b5c812c1220c886e9a9366c7d786cc9713b0c228",
        "buggy_code": "For complex-valued input, `arccos` is a complex analytical function that",
        "fixed_code": "For complex-valued input, `arcsinh` is a complex analytical function that",
        "patch": "@@ -350,7 +350,7 @@ def add_newdoc(place, name, doc):\n     For each value that cannot be expressed as a real number or infinity, it\n     returns ``nan`` and sets the `invalid` floating point error flag.\n \n-    For complex-valued input, `arccos` is a complex analytical function that\n+    For complex-valued input, `arcsinh` is a complex analytical function that\n     has branch cuts `[1j, infj]` and `[-1j, -infj]` and is continuous from\n     the right on the former and from the left on the latter.\n "
    },
    {
        "commit_id": "9bb3c18fcf3e1d977ba83934407f9448d582c61d",
        "commit_message": "Merge pull request #24560 from rgommers/ci-fix-linux\n\nCI/BENCH: move more jobs to Meson and fix all broken benchmarks",
        "commit_url": "https://github.com/numpy/numpy/commit/9bb3c18fcf3e1d977ba83934407f9448d582c61d",
        "buggy_code": "[(1000, 1), (1000, 2), (2, 1000, 1), (1000, 3)],",
        "fixed_code": "[(1000, 1), (2, 1000, 1), (1000, 3)],",
        "patch": "@@ -5,7 +5,7 @@\n \n class Take(Benchmark):\n     params = [\n-        [(1000, 1), (1000, 2), (2, 1000, 1), (1000, 3)],\n+        [(1000, 1), (2, 1000, 1), (1000, 3)],\n         [\"raise\", \"wrap\", \"clip\"],\n         TYPES1 + [\"O\", \"i,O\"]]\n     param_names = [\"shape\", \"mode\", \"dtype\"]"
    },
    {
        "commit_id": "9bb3c18fcf3e1d977ba83934407f9448d582c61d",
        "commit_message": "Merge pull request #24560 from rgommers/ci-fix-linux\n\nCI/BENCH: move more jobs to Meson and fix all broken benchmarks",
        "commit_url": "https://github.com/numpy/numpy/commit/9bb3c18fcf3e1d977ba83934407f9448d582c61d",
        "buggy_code": "params = [[(16, 16), (32, 32), (64, 64), (128, 128), (256, 256), (512, 512), (1024, 1024)],",
        "fixed_code": "params = [[(16, 16), (64, 64), (256, 256), (1024, 1024)],",
        "patch": "@@ -68,7 +68,7 @@ def time_no_lists(self, n):\n \n \n class Block2D(Benchmark):\n-    params = [[(16, 16), (32, 32), (64, 64), (128, 128), (256, 256), (512, 512), (1024, 1024)],\n+    params = [[(16, 16), (64, 64), (256, 256), (1024, 1024)],\n               ['uint8', 'uint16', 'uint32', 'uint64'],\n               [(2, 2), (4, 4)]]\n     param_names = ['shape', 'dtype', 'n_chunks']"
    },
    {
        "commit_id": "1cb9eeef3e17ce3f7ce686c4ff07d626feb0e427",
        "commit_message": "BENCH: fix `bench_reduce.py` and `bench_shape_base.py`",
        "commit_url": "https://github.com/numpy/numpy/commit/1cb9eeef3e17ce3f7ce686c4ff07d626feb0e427",
        "buggy_code": "params = [[(16, 16), (32, 32), (64, 64), (128, 128), (256, 256), (512, 512), (1024, 1024)],",
        "fixed_code": "params = [[(16, 16), (64, 64), (256, 256), (1024, 1024)],",
        "patch": "@@ -68,7 +68,7 @@ def time_no_lists(self, n):\n \n \n class Block2D(Benchmark):\n-    params = [[(16, 16), (32, 32), (64, 64), (128, 128), (256, 256), (512, 512), (1024, 1024)],\n+    params = [[(16, 16), (64, 64), (256, 256), (1024, 1024)],\n               ['uint8', 'uint16', 'uint32', 'uint64'],\n               [(2, 2), (4, 4)]]\n     param_names = ['shape', 'dtype', 'n_chunks']"
    },
    {
        "commit_id": "639b8a61d2bfc2feb45b54f86e7d6d40a2c8dea0",
        "commit_message": "BENCH: fix linalg and itemselection benchmarks",
        "commit_url": "https://github.com/numpy/numpy/commit/639b8a61d2bfc2feb45b54f86e7d6d40a2c8dea0",
        "buggy_code": "[(1000, 1), (1000, 2), (2, 1000, 1), (1000, 3)],",
        "fixed_code": "[(1000, 1), (2, 1000, 1), (1000, 3)],",
        "patch": "@@ -5,7 +5,7 @@\n \n class Take(Benchmark):\n     params = [\n-        [(1000, 1), (1000, 2), (2, 1000, 1), (1000, 3)],\n+        [(1000, 1), (2, 1000, 1), (1000, 3)],\n         [\"raise\", \"wrap\", \"clip\"],\n         TYPES1 + [\"O\", \"i,O\"]]\n     param_names = [\"shape\", \"mode\", \"dtype\"]"
    },
    {
        "commit_id": "3ccc483bda676251ced9f1e3135981059f63b161",
        "commit_message": "MAINT: Fix regep for bind matches\n\nMake name optional",
        "commit_url": "https://github.com/numpy/numpy/commit/3ccc483bda676251ced9f1e3135981059f63b161",
        "buggy_code": "pattern = re.compile(r'bind\\(\\s*(?P<lang>[^,]+)\\s*,\\s*name\\s*=\\s*\"(?P<name>[^\"]+)\"\\s*\\)', re.I)",
        "fixed_code": "pattern = re.compile(r'bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*[\"\\'](?P<name>[^\"\\']+)[\"\\']\\s*)?\\)', re.I)",
        "patch": "@@ -969,7 +969,7 @@ def _resolvetypedefpattern(line):\n     return None, [], None\n \n def parse_name_for_bind(line):\n-    pattern = re.compile(r'bind\\(\\s*(?P<lang>[^,]+)\\s*,\\s*name\\s*=\\s*\"(?P<name>[^\"]+)\"\\s*\\)', re.I)\n+    pattern = re.compile(r'bind\\(\\s*(?P<lang>[^,]+)(?:\\s*,\\s*name\\s*=\\s*[\"\\'](?P<name>[^\"\\']+)[\"\\']\\s*)?\\)', re.I)\n     match = pattern.search(line)\n     bind_statement = None\n     if match:"
    },
    {
        "commit_id": "e841e6337eca767065e27129903dea5ae199fde3",
        "commit_message": "Merge pull request #24539 from rgommers/fix-circleci-job\n\nCI: fix CircleCI job for move to Meson",
        "commit_url": "https://github.com/numpy/numpy/commit/e841e6337eca767065e27129903dea5ae199fde3",
        "buggy_code": "[(1, 9), (1, 0), (3, 0), (4, 4), (4, 2), (4, 1), (5, 4)]",
        "fixed_code": "[(1, 9), (1, 0), (3, 0), (4, 4), (4, 1), (4, 2), (5, 4)]",
        "patch": "@@ -480,7 +480,7 @@ def lexsort(keys, axis=None):\n     A normal ``argsort`` would have yielded:\n \n     >>> [(a[i],b[i]) for i in np.argsort(a)]\n-    [(1, 9), (1, 0), (3, 0), (4, 4), (4, 2), (4, 1), (5, 4)]\n+    [(1, 9), (1, 0), (3, 0), (4, 4), (4, 1), (4, 2), (5, 4)]\n \n     Structured arrays are sorted lexically by ``argsort``:\n "
    },
    {
        "commit_id": "e841e6337eca767065e27129903dea5ae199fde3",
        "commit_message": "Merge pull request #24539 from rgommers/fix-circleci-job\n\nCI: fix CircleCI job for move to Meson",
        "commit_url": "https://github.com/numpy/numpy/commit/e841e6337eca767065e27129903dea5ae199fde3",
        "buggy_code": "masked_array(data=[0.29880715233359845, 15.784728999999999, 1.0, --],",
        "fixed_code": "masked_array(data=[0.2988071523335984, 15.784728999999999, 1.0, --],",
        "patch": "@@ -7011,7 +7011,7 @@ def power(a, b, third=None):\n              mask=[False, False, False,  True],\n        fill_value=1e+20)\n     >>> ma.power(masked_x, masked_y)\n-    masked_array(data=[0.29880715233359845, 15.784728999999999, 1.0, --],\n+    masked_array(data=[0.2988071523335984, 15.784728999999999, 1.0, --],\n              mask=[False, False, False,  True],\n        fill_value=1e+20)\n "
    },
    {
        "commit_id": "2059dd9e6dce61d4c52571b3865faebd8fd5ccec",
        "commit_message": "DOC: fix up examples for repr changes\n\n[skip actions] [skip azp] [skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/2059dd9e6dce61d4c52571b3865faebd8fd5ccec",
        "buggy_code": "[(1, 9), (1, 0), (3, 0), (4, 4), (4, 2), (4, 1), (5, 4)]",
        "fixed_code": "[(1, 9), (1, 0), (3, 0), (4, 4), (4, 1), (4, 2), (5, 4)]",
        "patch": "@@ -480,7 +480,7 @@ def lexsort(keys, axis=None):\n     A normal ``argsort`` would have yielded:\n \n     >>> [(a[i],b[i]) for i in np.argsort(a)]\n-    [(1, 9), (1, 0), (3, 0), (4, 4), (4, 2), (4, 1), (5, 4)]\n+    [(1, 9), (1, 0), (3, 0), (4, 4), (4, 1), (4, 2), (5, 4)]\n \n     Structured arrays are sorted lexically by ``argsort``:\n "
    },
    {
        "commit_id": "2059dd9e6dce61d4c52571b3865faebd8fd5ccec",
        "commit_message": "DOC: fix up examples for repr changes\n\n[skip actions] [skip azp] [skip cirrus]",
        "commit_url": "https://github.com/numpy/numpy/commit/2059dd9e6dce61d4c52571b3865faebd8fd5ccec",
        "buggy_code": "masked_array(data=[0.29880715233359845, 15.784728999999999, 1.0, --],",
        "fixed_code": "masked_array(data=[0.2988071523335984, 15.784728999999999, 1.0, --],",
        "patch": "@@ -7011,7 +7011,7 @@ def power(a, b, third=None):\n              mask=[False, False, False,  True],\n        fill_value=1e+20)\n     >>> ma.power(masked_x, masked_y)\n-    masked_array(data=[0.29880715233359845, 15.784728999999999, 1.0, --],\n+    masked_array(data=[0.2988071523335984, 15.784728999999999, 1.0, --],\n              mask=[False, False, False,  True],\n        fill_value=1e+20)\n "
    },
    {
        "commit_id": "7a37bb1c6b09c87d5c16a345bb14062cf2826d1d",
        "commit_message": "Merge pull request #24485 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix some broken links",
        "commit_url": "https://github.com/numpy/numpy/commit/7a37bb1c6b09c87d5c16a345bb14062cf2826d1d",
        "buggy_code": "(e.g. `np.int8`, `np.int16`, etc) is also a signed integer",
        "fixed_code": "(e.g. `numpy.int8`, `numpy.int16`, etc) is also a signed integer",
        "patch": "@@ -2600,7 +2600,7 @@ def ptp(a, axis=None, out=None, keepdims=np._NoValue):\n     .. warning::\n         `ptp` preserves the data type of the array. This means the\n         return value for an input of signed integers with n bits\n-        (e.g. `np.int8`, `np.int16`, etc) is also a signed integer\n+        (e.g. `numpy.int8`, `numpy.int16`, etc) is also a signed integer\n         with n bits.  In that case, peak-to-peak values greater than\n         ``2**(n-1)-1`` will be returned as negative values. An example\n         with a work-around is shown below."
    },
    {
        "commit_id": "eb62df72240b88e49c2499e38c521e7993ae91fe",
        "commit_message": "DOC: Fix some broken links",
        "commit_url": "https://github.com/numpy/numpy/commit/eb62df72240b88e49c2499e38c521e7993ae91fe",
        "buggy_code": "(e.g. `np.int8`, `np.int16`, etc) is also a signed integer",
        "fixed_code": "(e.g. `numpy.int8`, `numpy.int16`, etc) is also a signed integer",
        "patch": "@@ -2600,7 +2600,7 @@ def ptp(a, axis=None, out=None, keepdims=np._NoValue):\n     .. warning::\n         `ptp` preserves the data type of the array. This means the\n         return value for an input of signed integers with n bits\n-        (e.g. `np.int8`, `np.int16`, etc) is also a signed integer\n+        (e.g. `numpy.int8`, `numpy.int16`, etc) is also a signed integer\n         with n bits.  In that case, peak-to-peak values greater than\n         ``2**(n-1)-1`` will be returned as negative values. An example\n         with a work-around is shown below."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1355,7 +1355,7 @@ def chebgrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1075,7 +1075,7 @@ def hermgrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1067,7 +1067,7 @@ def hermegrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1073,7 +1073,7 @@ def laggrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1094,7 +1094,7 @@ def leggrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "97d1d31883452c139b6066c045b2932be144e601",
        "commit_message": "DOC: Fix some incorrect rst markups (#24471)\n\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/97d1d31883452c139b6066c045b2932be144e601",
        "buggy_code": "Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a",
        "fixed_code": "Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a",
        "patch": "@@ -1026,7 +1026,7 @@ def polygrid3d(x, y, z, c):\n     ----------\n     x, y, z : array_like, compatible objects\n         The three dimensional series is evaluated at the points in the\n-        Cartesian product of `x`, `y`, and `z`.  If `x`,`y`, or `z` is a\n+        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n         list or tuple, it is first converted to an ndarray, otherwise it is\n         left unchanged and, if it isn't an ndarray, it is treated as a\n         scalar."
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "methods listed below.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1997,7 +1997,7 @@ class Chebyshev(ABCPolyBase):\n \n     The Chebyshev class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    methods listed below.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1660,7 +1660,7 @@ class Hermite(ABCPolyBase):\n \n     The Hermite class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1652,7 +1652,7 @@ class HermiteE(ABCPolyBase):\n \n     The HermiteE class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1608,7 +1608,7 @@ class Laguerre(ABCPolyBase):\n \n     The Laguerre class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1621,7 +1621,7 @@ class Legendre(ABCPolyBase):\n \n     The Legendre class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "commit_message": "Merge pull request #24383 from liang3zy22/abcploybaserefwarn\n\nDOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcd3593023db6c2796c31d2af425a3e90a3bbc65",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1474,7 +1474,7 @@ class Polynomial(ABCPolyBase):\n \n     The Polynomial class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "methods listed below.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1997,7 +1997,7 @@ class Chebyshev(ABCPolyBase):\n \n     The Chebyshev class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    methods listed below.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1660,7 +1660,7 @@ class Hermite(ABCPolyBase):\n \n     The Hermite class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1652,7 +1652,7 @@ class HermiteE(ABCPolyBase):\n \n     The HermiteE class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1608,7 +1608,7 @@ class Laguerre(ABCPolyBase):\n \n     The Laguerre class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1621,7 +1621,7 @@ class Legendre(ABCPolyBase):\n \n     The Legendre class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "commit_message": "DOC: Fix reference warning for ABCPolyBase.",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ebe72e4cb072dd233e7cf9660ca86ef926988b",
        "buggy_code": "attributes and methods listed in the `ABCPolyBase` documentation.",
        "fixed_code": "attributes and methods listed below.",
        "patch": "@@ -1474,7 +1474,7 @@ class Polynomial(ABCPolyBase):\n \n     The Polynomial class provides the standard Python numerical methods\n     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n-    attributes and methods listed in the `ABCPolyBase` documentation.\n+    attributes and methods listed below.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "a2bfa54f825c93ad1e10e5014202c36c224edc55",
        "commit_message": "Merge pull request #24364 from lysnikolaou/complex-keyword\n\nBUG: Remove #undef complex from npy_common.h",
        "commit_url": "https://github.com/numpy/numpy/commit/a2bfa54f825c93ad1e10e5014202c36c224edc55",
        "buggy_code": "c_patch_file = c_file + '.patch'",
        "fixed_code": "c_patch_file = os.path.basename(c_file) + '.patch'",
        "patch": "@@ -369,7 +369,7 @@ def main():\n         scrubF2CSource(c_file)\n \n         # patch any changes needed to the C file\n-        c_patch_file = c_file + '.patch'\n+        c_patch_file = os.path.basename(c_file) + '.patch'\n         if os.path.exists(c_patch_file):\n             subprocess.check_call(['patch', '-u', c_file, c_patch_file])\n "
    },
    {
        "commit_id": "6882593bc3c242448ec13a5c93b3dffc4a86e667",
        "commit_message": "BUG: Remove #undef complex from npy_common.h\n\n- Change complex to is_complex in multiarray/buffer.c\n- Change all complex occurences in vendored f2c to singlecomplex\n- Modify patches for f2c-generated code and regenerate\n\nCloses #24344.",
        "commit_url": "https://github.com/numpy/numpy/commit/6882593bc3c242448ec13a5c93b3dffc4a86e667",
        "buggy_code": "c_patch_file = c_file + '.patch'",
        "fixed_code": "c_patch_file = os.path.basename(c_file) + '.patch'",
        "patch": "@@ -369,7 +369,7 @@ def main():\n         scrubF2CSource(c_file)\n \n         # patch any changes needed to the C file\n-        c_patch_file = c_file + '.patch'\n+        c_patch_file = os.path.basename(c_file) + '.patch'\n         if os.path.exists(c_patch_file):\n             subprocess.check_call(['patch', '-u', c_file, c_patch_file])\n "
    },
    {
        "commit_id": "3fa0d7eb1c3e0cccc6d05b02387e6c7df16973cb",
        "commit_message": "Merge pull request #24360 from edoyango/linalgsmallarrays-bench-fix\n\nBENCH: fix small array det benchmark",
        "commit_url": "https://github.com/numpy/numpy/commit/3fa0d7eb1c3e0cccc6d05b02387e6c7df16973cb",
        "buggy_code": "self.array_5_5 = np.arange(5.)",
        "fixed_code": "self.array_5_5 = np.reshape(np.arange(25.), (5., 5.))",
        "patch": "@@ -102,7 +102,7 @@ class LinalgSmallArrays(Benchmark):\n     \"\"\" Test overhead of linalg methods for small arrays \"\"\"\n     def setup(self):\n         self.array_5 = np.arange(5.)\n-        self.array_5_5 = np.arange(5.)\n+        self.array_5_5 = np.reshape(np.arange(25.), (5., 5.))\n \n     def time_norm_small_array(self):\n         np.linalg.norm(self.array_5)"
    },
    {
        "commit_id": "a3dde907f9feef94c11f52439df0198154c6b0d1",
        "commit_message": "fix small array det bench",
        "commit_url": "https://github.com/numpy/numpy/commit/a3dde907f9feef94c11f52439df0198154c6b0d1",
        "buggy_code": "self.array_5_5 = np.arange(5.)",
        "fixed_code": "self.array_5_5 = np.reshape(np.arange(25.), (5., 5.))",
        "patch": "@@ -102,7 +102,7 @@ class LinalgSmallArrays(Benchmark):\n     \"\"\" Test overhead of linalg methods for small arrays \"\"\"\n     def setup(self):\n         self.array_5 = np.arange(5.)\n-        self.array_5_5 = np.arange(5.)\n+        self.array_5_5 = np.reshape(np.arange(25.), (5., 5.))\n \n     def time_norm_small_array(self):\n         np.linalg.norm(self.array_5)"
    },
    {
        "commit_id": "c23af896cc6ad1b6bafd60f54a15d17f7ac8cdb9",
        "commit_message": "Merge pull request #24315 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix some links in documents",
        "commit_url": "https://github.com/numpy/numpy/commit/c23af896cc6ad1b6bafd60f54a15d17f7ac8cdb9",
        "buggy_code": "cast are currently annotated as exclusively returning an `ndarray`.",
        "fixed_code": "cast are currently annotated as exclusively returning an `~numpy.ndarray`.",
        "patch": "@@ -126,7 +126,7 @@\n typing (see :pep:`646`) it is unfortunately not possible to make the\n necessary distinction between 0D and >0D arrays. While thus not strictly\n correct, all operations are that can potentially perform a 0D-array -> scalar\n-cast are currently annotated as exclusively returning an `ndarray`.\n+cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n If it is known in advance that an operation _will_ perform a\n 0D-array -> scalar cast, then one can consider manually remedying the"
    },
    {
        "commit_id": "962c4cbdf4c0647471e754d528f03802a52f9fc2",
        "commit_message": "DOC: Fix some links in documents",
        "commit_url": "https://github.com/numpy/numpy/commit/962c4cbdf4c0647471e754d528f03802a52f9fc2",
        "buggy_code": "cast are currently annotated as exclusively returning an `ndarray`.",
        "fixed_code": "cast are currently annotated as exclusively returning an `~numpy.ndarray`.",
        "patch": "@@ -126,7 +126,7 @@\n typing (see :pep:`646`) it is unfortunately not possible to make the\n necessary distinction between 0D and >0D arrays. While thus not strictly\n correct, all operations are that can potentially perform a 0D-array -> scalar\n-cast are currently annotated as exclusively returning an `ndarray`.\n+cast are currently annotated as exclusively returning an `~numpy.ndarray`.\n \n If it is known in advance that an operation _will_ perform a\n 0D-array -> scalar cast, then one can consider manually remedying the"
    },
    {
        "commit_id": "488d535c777f0caf4601e502ba323cc241a1312a",
        "commit_message": "BLD: fix issue ILP64 OpenBLAS detection, disable BLAS for PyPy job\n\nDisable using BLAS in the PyPy job on Azure because it was broken.\nBefore this PR, it uses to silently not find OpenBLAS and continue,\nnow we have to be explicit about it.",
        "commit_url": "https://github.com/numpy/numpy/commit/488d535c777f0caf4601e502ba323cc241a1312a",
        "buggy_code": "print(f\"Check broken in CI on PyPy, data is: {data}\")",
        "fixed_code": "print(f\"Not using OpenBLAS for PyPy in Azure CI, so skip this\")",
        "patch": "@@ -324,7 +324,7 @@ def test_version(expected_version=None):\n     data = threadpoolctl.threadpool_info()\n     if len(data) != 1:\n         if platform.python_implementation() == 'PyPy':\n-            print(f\"Check broken in CI on PyPy, data is: {data}\")\n+            print(f\"Not using OpenBLAS for PyPy in Azure CI, so skip this\")\n             return\n         raise ValueError(f\"expected single threadpool_info result, got {data}\")\n     if not expected_version:"
    },
    {
        "commit_id": "2e668061db8967de50413f3e201e97edae4c4a75",
        "commit_message": "Merge pull request #24205 from DimitriPapadopoulos/codespell\n\nMAINT: Fix new or residual typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/2e668061db8967de50413f3e201e97edae4c4a75",
        "buggy_code": "same type as `retval`. The result dtype follows a genereal pattern.",
        "fixed_code": "same type as `retval`. The result dtype follows a general pattern.",
        "patch": "@@ -447,7 +447,7 @@ def average(a, axis=None, weights=None, returned=False, *,\n         Return the average along the specified axis. When `returned` is `True`,\n         return a tuple with the average as the first element and the sum\n         of the weights as the second element. `sum_of_weights` is of the\n-        same type as `retval`. The result dtype follows a genereal pattern.\n+        same type as `retval`. The result dtype follows a general pattern.\n         If `weights` is None, the result dtype will be that of `a` , or ``float64``\n         if `a` is integral. Otherwise, if `weights` is not None and `a` is non-\n         integral, the result type will be the type of lowest precision capable of"
    },
    {
        "commit_id": "90a8b616b43b656247c81841753896825b47e6dc",
        "commit_message": "MAINT: Allow all options again (because subarrays need them) and fix test\n\nIf we use a format string, just ignore all other options and grab\nthe global ones.  I am not 100% sure if there might be a weird path\nwhere things get lost on the way for structured arrays or so,\nthis change is new, I so I think its fine eithe  way.\n\n(and I suspect it is actually correct)",
        "commit_url": "https://github.com/numpy/numpy/commit/90a8b616b43b656247c81841753896825b47e6dc",
        "buggy_code": "expected = [\"nan\", \"inf\", \"-inf\", repr(fi.max), repr(fi.min)]",
        "fixed_code": "expected = [\"nan\", \"inf\", \"-inf\", str(fi.max), str(fi.min)]",
        "patch": "@@ -91,7 +91,7 @@ def test_float_to_string_cast(str_dt, float_dt):\n     float_dt = np.dtype(float_dt)\n     fi = np.finfo(float_dt)\n     arr = np.array([np.nan, np.inf, -np.inf, fi.max, fi.min], dtype=float_dt)\n-    expected = [\"nan\", \"inf\", \"-inf\", repr(fi.max), repr(fi.min)]\n+    expected = [\"nan\", \"inf\", \"-inf\", str(fi.max), str(fi.min)]\n     if float_dt.kind == 'c':\n         expected = [f\"({r}+0j)\" for r in expected]\n "
    },
    {
        "commit_id": "1a53d88d7884935a8f892f7b6e365b23fb0cbaaa",
        "commit_message": "BUG: Fixups for last changes to make CI pass\n\nI had tested the refguide mainly (the functions part only), which missed\na lot of smaller errors in the last iteration...",
        "commit_url": "https://github.com/numpy/numpy/commit/1a53d88d7884935a8f892f7b6e365b23fb0cbaaa",
        "buggy_code": "\"np.void((1., 1.), dtype=[('f0', '<f4'), ('f1', '<f4')])\")",
        "fixed_code": "\"np.void((1.0, 1.0), dtype=[('f0', '<f4'), ('f1', '<f4')])\")",
        "patch": "@@ -698,7 +698,7 @@ def test_sign_spacing_structured(self):\n         assert_equal(repr(a),\n             \"array([(1., 1.), (1., 1.)], dtype=[('f0', '<f4'), ('f1', '<f4')])\")\n         assert_equal(repr(a[0]),\n-            \"np.void((1., 1.), dtype=[('f0', '<f4'), ('f1', '<f4')])\")\n+            \"np.void((1.0, 1.0), dtype=[('f0', '<f4'), ('f1', '<f4')])\")\n \n     def test_floatmode(self):\n         x = np.array([0.6104, 0.922, 0.457, 0.0906, 0.3733, 0.007244,"
    },
    {
        "commit_id": "1a53d88d7884935a8f892f7b6e365b23fb0cbaaa",
        "commit_message": "BUG: Fixups for last changes to make CI pass\n\nI had tested the refguide mainly (the functions part only), which missed\na lot of smaller errors in the last iteration...",
        "commit_url": "https://github.com/numpy/numpy/commit/1a53d88d7884935a8f892f7b6e365b23fb0cbaaa",
        "buggy_code": "\"np.record((1, 2., '2003'), \"",
        "fixed_code": "\"np.record((1, 2.0, '2003'), \"",
        "patch": "@@ -133,7 +133,7 @@ def test_0d_recarray_repr(self):\n \n         record = arr_0d[()]\n         assert_equal(repr(record), \n-            \"np.record((1, 2., '2003'), \"\n+            \"np.record((1, 2.0, '2003'), \"\n             \"dtype=[('f0', '<i4'), ('f1', '<f8'), ('f2', '<M8[Y]')])\")\n         # 1.13 converted to python scalars before the repr\n         try:"
    },
    {
        "commit_id": "a4c582d4b3c530176be393ac596dd00130367ddb",
        "commit_message": "MAINT: Fix new or residual typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/a4c582d4b3c530176be393ac596dd00130367ddb",
        "buggy_code": "same type as `retval`. The result dtype follows a genereal pattern.",
        "fixed_code": "same type as `retval`. The result dtype follows a general pattern.",
        "patch": "@@ -447,7 +447,7 @@ def average(a, axis=None, weights=None, returned=False, *,\n         Return the average along the specified axis. When `returned` is `True`,\n         return a tuple with the average as the first element and the sum\n         of the weights as the second element. `sum_of_weights` is of the\n-        same type as `retval`. The result dtype follows a genereal pattern.\n+        same type as `retval`. The result dtype follows a general pattern.\n         If `weights` is None, the result dtype will be that of `a` , or ``float64``\n         if `a` is integral. Otherwise, if `weights` is not None and `a` is non-\n         integral, the result type will be the type of lowest precision capable of"
    },
    {
        "commit_id": "de6e0895f27fc052666cbe74d8704242e1997424",
        "commit_message": "DOC: Fix the reference in the docstring of numpy.meshgrid (#24113)",
        "commit_url": "https://github.com/numpy/numpy/commit/de6e0895f27fc052666cbe74d8704242e1997424",
        "buggy_code": "how-to-index",
        "fixed_code": ":ref:`how-to-index`",
        "patch": "@@ -5050,7 +5050,7 @@ def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):\n     mgrid : Construct a multi-dimensional \"meshgrid\" using indexing notation.\n     ogrid : Construct an open multi-dimensional \"meshgrid\" using indexing\n             notation.\n-    how-to-index\n+    :ref:`how-to-index`\n \n     Examples\n     --------"
    },
    {
        "commit_id": "d370ed046339fc71568831edbbd6a7fa156dc257",
        "commit_message": "Merge pull request #23979 from DimitriPapadopoulos/codespell\n\nMAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/d370ed046339fc71568831edbbd6a7fa156dc257",
        "buggy_code": "Given two vectors `a` and `b` of length ``M`` and ``N``, repsectively,",
        "fixed_code": "Given two vectors `a` and `b` of length ``M`` and ``N``, respectively,",
        "patch": "@@ -841,7 +841,7 @@ def outer(a, b, out=None):\n     \"\"\"\n     Compute the outer product of two vectors.\n \n-    Given two vectors `a` and `b` of length ``M`` and ``N``, repsectively,\n+    Given two vectors `a` and `b` of length ``M`` and ``N``, respectively,\n     the outer product [1]_ is::\n \n       [[a_0*b_0  a_0*b_1 ... a_0*b_{N-1} ]"
    },
    {
        "commit_id": "dbc454a15d26a9fd23200c62e0214f3ed95756ad",
        "commit_message": "Merge pull request #23991 from rgommers/py312-wheels\n\nCI: BLD: build wheels and fix test suite for Python 3.12",
        "commit_url": "https://github.com/numpy/numpy/commit/dbc454a15d26a9fd23200c62e0214f3ed95756ad",
        "buggy_code": "Fortran compilers support and more.",
        "fixed_code": "Fortran compilers support and more (for Python <= 3.11)",
        "patch": "@@ -66,7 +66,7 @@\n     NumPy testing tools\n distutils\n     Enhancements to distutils with support for\n-    Fortran compilers support and more.\n+    Fortran compilers support and more (for Python <= 3.11)\n \n Utilities\n ---------"
    },
    {
        "commit_id": "515403f2c637cb58f8dc326d88dd6f768f027cf4",
        "commit_message": "TST: disable `test_new_policy` test for memory allocator.\n\nThis is way too slow, running a large part of the test suite twice.\nIssue 23975 tracks changing how this feature is tested.",
        "commit_url": "https://github.com/numpy/numpy/commit/515403f2c637cb58f8dc326d88dd6f768f027cf4",
        "buggy_code": "@pytest.mark.slow",
        "fixed_code": "@pytest.mark.skip(reason=\"too slow, see gh-23975\")",
        "patch": "@@ -359,7 +359,7 @@ def test_thread_locality(get_module):\n     assert np.core.multiarray.get_handler_name() == orig_policy_name\n \n \n-@pytest.mark.slow\n+@pytest.mark.skip(reason=\"too slow, see gh-23975\")\n def test_new_policy(get_module):\n     a = np.arange(10)\n     orig_policy_name = np.core.multiarray.get_handler_name(a)"
    },
    {
        "commit_id": "f9ff49e9daf20c2f1acf716b07d9c8d340240317",
        "commit_message": "MAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/f9ff49e9daf20c2f1acf716b07d9c8d340240317",
        "buggy_code": "Given two vectors `a` and `b` of length ``M`` and ``N``, repsectively,",
        "fixed_code": "Given two vectors `a` and `b` of length ``M`` and ``N``, respectively,",
        "patch": "@@ -841,7 +841,7 @@ def outer(a, b, out=None):\n     \"\"\"\n     Compute the outer product of two vectors.\n \n-    Given two vectors `a` and `b` of length ``M`` and ``N``, repsectively,\n+    Given two vectors `a` and `b` of length ``M`` and ``N``, respectively,\n     the outer product [1]_ is::\n \n       [[a_0*b_0  a_0*b_1 ... a_0*b_{N-1} ]"
    },
    {
        "commit_id": "0e5a362fdaae6aac2d82c0767cfff25eebc5856e",
        "commit_message": "Merge pull request #23964 from charris/fix-references\n\nMAINT: Remove references to removed functions\r\n\r\n[skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/0e5a362fdaae6aac2d82c0767cfff25eebc5856e",
        "buggy_code": "Exiting a ``with errstate():` will also restore the bufsize.",
        "fixed_code": "Exiting a ``with errstate():`` will also restore the bufsize.",
        "patch": "@@ -158,7 +158,7 @@ def setbufsize(size):\n \n     .. versionchanged:: 2.0\n         The scope of setting the buffer is tied to the `np.errstate` context.\n-        Exiting a ``with errstate():` will also restore the bufsize.\n+        Exiting a ``with errstate():`` will also restore the bufsize.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "8692e2478cc74cc7c08e9b2a0f731a10a1ca7118",
        "commit_message": "Merge pull request #23923 from pratiklp00/Fix-vec_st-ambiguity\n\nBUG:Fix for call to 'vec_st' is ambiguous",
        "commit_url": "https://github.com/numpy/numpy/commit/8692e2478cc74cc7c08e9b2a0f731a10a1ca7118",
        "buggy_code": "ppc64_clang=\"-maltivec -mvsx -mpower8-vector\",",
        "fixed_code": "ppc64_clang=\"-mcpu=power8\",",
        "patch": "@@ -440,7 +440,7 @@ def test_flags(self):\n             x86_iccw=\"/arch:SSE2\",\n             x86_msvc=\"/arch:SSE2\" if self.march() == \"x86\" else \"\",\n             ppc64_gcc= \"-mcpu=power8\",\n-            ppc64_clang=\"-maltivec -mvsx -mpower8-vector\",\n+            ppc64_clang=\"-mcpu=power8\",\n             armhf_gcc=\"-mfpu=neon-fp16 -mfp16-format=ieee\",\n             aarch64=\"\",\n             s390x=\"-mzvector -march=arch12\""
    },
    {
        "commit_id": "9aca665438c427bf0fa6e6096861489b4e6fc532",
        "commit_message": "DOC: Fix references to `AxisError` in docstrings (#23918)\n\nReducing 3 warnings (ref: gh-13114)\r\n\r\n\r\nCo-authored-by: Matti Picus <matti.picus@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/9aca665438c427bf0fa6e6096861489b4e6fc532",
        "buggy_code": "``except IndexError`` statements continue to catch `AxisError`.",
        "fixed_code": "``except IndexError`` statements continue to catch ``AxisError``.",
        "patch": "@@ -103,7 +103,7 @@ class AxisError(ValueError, IndexError):\n     For compatibility with code written against older numpy versions, which\n     raised a mixture of `ValueError` and `IndexError` for this situation, this\n     exception subclasses both to ensure that ``except ValueError`` and\n-    ``except IndexError`` statements continue to catch `AxisError`.\n+    ``except IndexError`` statements continue to catch ``AxisError``.\n \n     .. versionadded:: 1.13\n "
    },
    {
        "commit_id": "80aa0f6831c3369d9d767f33ee2e46bd920d26d8",
        "commit_message": "fix for vec_st error",
        "commit_url": "https://github.com/numpy/numpy/commit/80aa0f6831c3369d9d767f33ee2e46bd920d26d8",
        "buggy_code": "ppc64_clang=\"-maltivec -mvsx -mpower8-vector\",",
        "fixed_code": "ppc64_clang=\"-mcpu=power8\",",
        "patch": "@@ -440,7 +440,7 @@ def test_flags(self):\n             x86_iccw=\"/arch:SSE2\",\n             x86_msvc=\"/arch:SSE2\" if self.march() == \"x86\" else \"\",\n             ppc64_gcc= \"-mcpu=power8\",\n-            ppc64_clang=\"-maltivec -mvsx -mpower8-vector\",\n+            ppc64_clang=\"-mcpu=power8\",\n             armhf_gcc=\"-mfpu=neon-fp16 -mfp16-format=ieee\",\n             aarch64=\"\",\n             s390x=\"-mzvector -march=arch12\""
    },
    {
        "commit_id": "85de7693e35547d0e387bc08ad28734aa51ac44b",
        "commit_message": "Merge pull request #23897 from andersonm-ibm/transpose-documentation\n\nDOC: Fix transpose() description with a correct reference to atleast_2d()",
        "commit_url": "https://github.com/numpy/numpy/commit/85de7693e35547d0e387bc08ad28734aa51ac44b",
        "buggy_code": "must be added, e.g., ``np.atleast2d(a).T`` achieves this, as does",
        "fixed_code": "must be added, e.g., ``np.atleast_2d(a).T`` achieves this, as does",
        "patch": "@@ -593,7 +593,7 @@ def transpose(a, axes=None):\n     For a 1-D array, this returns an unchanged view of the original array, as a\n     transposed vector is simply the same vector.\n     To convert a 1-D array into a 2-D column vector, an additional dimension\n-    must be added, e.g., ``np.atleast2d(a).T`` achieves this, as does\n+    must be added, e.g., ``np.atleast_2d(a).T`` achieves this, as does\n     ``a[:, np.newaxis]``.\n     For a 2-D array, this is the standard matrix transpose.\n     For an n-D array, if axes are given, their order indicates how the"
    },
    {
        "commit_id": "b07264ba4a7cc40aad518f460684b19d3a221dbd",
        "commit_message": "DOC: Fix transpose() description with a correct reference to atleast_2d()",
        "commit_url": "https://github.com/numpy/numpy/commit/b07264ba4a7cc40aad518f460684b19d3a221dbd",
        "buggy_code": "must be added, e.g., ``np.atleast2d(a).T`` achieves this, as does",
        "fixed_code": "must be added, e.g., ``np.atleast_2d(a).T`` achieves this, as does",
        "patch": "@@ -593,7 +593,7 @@ def transpose(a, axes=None):\n     For a 1-D array, this returns an unchanged view of the original array, as a\n     transposed vector is simply the same vector.\n     To convert a 1-D array into a 2-D column vector, an additional dimension\n-    must be added, e.g., ``np.atleast2d(a).T`` achieves this, as does\n+    must be added, e.g., ``np.atleast_2d(a).T`` achieves this, as does\n     ``a[:, np.newaxis]``.\n     For a 2-D array, this is the standard matrix transpose.\n     For an n-D array, if axes are given, their order indicates how the"
    },
    {
        "commit_id": "91153af22ffc07d2b7653d406d93e99d136e89d6",
        "commit_message": "Fix __complex__ type annotation\n\nCo-authored-by: Bas van Beek <43369155+BvB93@users.noreply.github.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/91153af22ffc07d2b7653d406d93e99d136e89d6",
        "buggy_code": "def __complex__(self: Array, /) -> float:",
        "fixed_code": "def __complex__(self: Array, /) -> complex:",
        "patch": "@@ -470,7 +470,7 @@ def __bool__(self: Array, /) -> bool:\n         res = self._array.__bool__()\n         return res\n \n-    def __complex__(self: Array, /) -> float:\n+    def __complex__(self: Array, /) -> complex:\n         \"\"\"\n         Performs the operation __complex__.\n         \"\"\""
    },
    {
        "commit_id": "8c378b0ab8d673ac1e4d4549703af44d521d6c5d",
        "commit_message": "BUG: make use of locals() in a comprehension fully compatible with Python 3.12 (#23855)\n\nIn Python 3.12, comprehensions are inlined; they are no longer a separate function. (See PEP 709.) Although comprehension iteration variables are still isolated (any prior value is pushed to the stack before the comprehension runs and restored after), they are now part of the local variables of the surrounding function. So in this case, `k` and `v` will become part of the locals of `_make_options_dict` (temporarily, while the comprehension is running.)\r\n\r\nThe frame locals dictionary is lazily updated from the \"fast locals\" array on the frame object, whenever someone calls `locals()` or accesses `frame.f_locals`. So this code will still work on Python 3.12 most of the time; nothing triggers an update of the locals dictionary after the `locals()` call (which happens before the comprehension runs).\r\n\r\nBut, if this code runs under a `sys.settrace` function (e.g. test coverage measurement) which accesses `frame.f_locals` within the trace handler, then the locals dictionary will gain the new keys `k` and `v` while the comprehension is running, and this will cause a `RuntimeError: dictionary changed size during iteration`.\r\n\r\nThe fix is to avoid lazy iteration of `locals()`, and ensure we capture the locals we want before running any more code that could add/change locals.",
        "commit_url": "https://github.com/numpy/numpy/commit/8c378b0ab8d673ac1e4d4549703af44d521d6c5d",
        "buggy_code": "options = {k: v for k, v in locals().items() if v is not None}",
        "fixed_code": "options = {k: v for k, v in list(locals().items()) if v is not None}",
        "patch": "@@ -69,7 +69,7 @@ def _make_options_dict(precision=None, threshold=None, edgeitems=None,\n     *legacy* and sanity checks.\n     \"\"\"\n \n-    options = {k: v for k, v in locals().items() if v is not None}\n+    options = {k: v for k, v in list(locals().items()) if v is not None}\n \n     if suppress is not None:\n         options['suppress'] = bool(suppress)"
    },
    {
        "commit_id": "00e5923cb8173f7b4b57f6db2777c986bcc6e9f8",
        "commit_message": "Merge pull request #23819 from charris/fix-refguide-check-failure\n\nBUG: Doctest doesn't have a SHOW_WARNINGS directive.",
        "commit_url": "https://github.com/numpy/numpy/commit/00e5923cb8173f7b4b57f6db2777c986bcc6e9f8",
        "buggy_code": ">>> np.arange(3.) / np.arange(3.)  # doctest: +SHOW_WARNINGS",
        "fixed_code": ">>> np.arange(3.) / np.arange(3.)  # doctest: +SKIP",
        "patch": "@@ -154,7 +154,7 @@ def geterr():\n     --------\n     >>> np.geterr()\n     {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}\n-    >>> np.arange(3.) / np.arange(3.)  # doctest: +SHOW_WARNINGS\n+    >>> np.arange(3.) / np.arange(3.)  # doctest: +SKIP\n     array([nan,  1.,  1.])\n     RuntimeWarning: invalid value encountered in divide\n "
    },
    {
        "commit_id": "37e14b73939b953fce3c01547678dc0d026e3491",
        "commit_message": "BUG: Doctest doesn't have a SHOW_WARNINGS directive.",
        "commit_url": "https://github.com/numpy/numpy/commit/37e14b73939b953fce3c01547678dc0d026e3491",
        "buggy_code": ">>> np.arange(3.) / np.arange(3.)  # doctest: +SHOW_WARNINGS",
        "fixed_code": ">>> np.arange(3.) / np.arange(3.)  # doctest: +SKIP",
        "patch": "@@ -154,7 +154,7 @@ def geterr():\n     --------\n     >>> np.geterr()\n     {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}\n-    >>> np.arange(3.) / np.arange(3.)  # doctest: +SHOW_WARNINGS\n+    >>> np.arange(3.) / np.arange(3.)  # doctest: +SKIP\n     array([nan,  1.,  1.])\n     RuntimeWarning: invalid value encountered in divide\n "
    },
    {
        "commit_id": "25908cacd19915bf3ddd659c28be28a41bd97a54",
        "commit_message": "BUG: properly handle tuple keys in NpZFile.__getitem__ (#23757)\n\n* BUG: properly handle tuple keys in NpZFile.__getitem__\r\n\r\n* TST: test tuple rendering specifically.\r\n\r\n---------\r\n\r\nCo-authored-by: Ross Barnowski <rossbar@berkeley.edu>",
        "commit_url": "https://github.com/numpy/numpy/commit/25908cacd19915bf3ddd659c28be28a41bd97a54",
        "buggy_code": "raise KeyError(\"%s is not a file in the archive\" % key)",
        "fixed_code": "raise KeyError(f\"{key} is not a file in the archive\")",
        "patch": "@@ -260,7 +260,7 @@ def __getitem__(self, key):\n             else:\n                 return self.zip.read(key)\n         else:\n-            raise KeyError(\"%s is not a file in the archive\" % key)\n+            raise KeyError(f\"{key} is not a file in the archive\")\n \n     def __contains__(self, key):\n         return (key in self._files or key in self.files)"
    },
    {
        "commit_id": "da762e2ce5997b199f6e01b1313d52353156733c",
        "commit_message": "DOC: minor fix",
        "commit_url": "https://github.com/numpy/numpy/commit/da762e2ce5997b199f6e01b1313d52353156733c",
        "buggy_code": "dtype it (or any of its structure dtypes) contained metadata.",
        "fixed_code": "dtype if it (or any of its structure dtypes) contained metadata.",
        "patch": "@@ -1145,7 +1145,7 @@ def _opt_info():\n def drop_metadata(dtype, /):\n     \"\"\"\n     Returns the dtype unchanged if it contained no metadata or a copy of the\n-    dtype it (or any of its structure dtypes) contained metadata.\n+    dtype if it (or any of its structure dtypes) contained metadata.\n \n     This utility is used by `np.save` and `np.savez` to drop metadata before\n     saving."
    },
    {
        "commit_id": "ac78f9e45313e963d6bd40a2a7d139993904d03f",
        "commit_message": "Merge pull request #23726 from neutrinoceros/fix_numpy_testing_assert_array_less_docstring\n\nDOC: fix incorrect description of raise condition in numpy.testing.assert_array_less's docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/ac78f9e45313e963d6bd40a2a7d139993904d03f",
        "buggy_code": "If actual and desired objects are not equal.",
        "fixed_code": "If x is not strictly smaller than y, element-wise.",
        "patch": "@@ -1067,7 +1067,7 @@ def assert_array_less(x, y, err_msg='', verbose=True):\n     Raises\n     ------\n     AssertionError\n-      If actual and desired objects are not equal.\n+      If x is not strictly smaller than y, element-wise.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "291132113335d611a02fffcce5ce2f4b74c54802",
        "commit_message": "DOC: fix incorrect description of raise condition in numpy.testing.assert_array_less's docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/291132113335d611a02fffcce5ce2f4b74c54802",
        "buggy_code": "If actual and desired objects are not equal.",
        "fixed_code": "If x is not strictly smaller than y, element-wise.",
        "patch": "@@ -1067,7 +1067,7 @@ def assert_array_less(x, y, err_msg='', verbose=True):\n     Raises\n     ------\n     AssertionError\n-      If actual and desired objects are not equal.\n+      If x is not strictly smaller than y, element-wise.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "0bc686818d9e08dbd44715d3c9ff8821d677ec88",
        "commit_message": "Merge pull request #23680 from seberg/ma-kraken\n\nBUG: Fix masked array ravel order for A (and somewhat K)",
        "commit_url": "https://github.com/numpy/numpy/commit/0bc686818d9e08dbd44715d3c9ff8821d677ec88",
        "buggy_code": "order = \"C\" if self._data.flags.fnc else \"F\"",
        "fixed_code": "order = \"F\" if self._data.flags.fnc else \"C\"",
        "patch": "@@ -4668,7 +4668,7 @@ def ravel(self, order='C'):\n         # TODO: We don't actually support K, so use A instead.  We could\n         #       try to guess this correct by sorting strides or deprecate.\n         if order in \"kKaA\":\n-            order = \"C\" if self._data.flags.fnc else \"F\"\n+            order = \"F\" if self._data.flags.fnc else \"C\"\n         r = ndarray.ravel(self._data, order=order).view(type(self))\n         r._update_from(self)\n         if self._mask is not nomask:"
    },
    {
        "commit_id": "e8920038ade22a8966fb977e77aa00a82142901b",
        "commit_message": "BUG: Fix masked array ravel order for A (and somewhat K)\n\nSwaps the order to the correct thing and thus\n\ncloses gh-23651",
        "commit_url": "https://github.com/numpy/numpy/commit/e8920038ade22a8966fb977e77aa00a82142901b",
        "buggy_code": "order = \"C\" if self._data.flags.fnc else \"F\"",
        "fixed_code": "order = \"F\" if self._data.flags.fnc else \"C\"",
        "patch": "@@ -4668,7 +4668,7 @@ def ravel(self, order='C'):\n         # TODO: We don't actually support K, so use A instead.  We could\n         #       try to guess this correct by sorting strides or deprecate.\n         if order in \"kKaA\":\n-            order = \"C\" if self._data.flags.fnc else \"F\"\n+            order = \"F\" if self._data.flags.fnc else \"C\"\n         r = ndarray.ravel(self._data, order=order).view(type(self))\n         r._update_from(self)\n         if self._mask is not nomask:"
    },
    {
        "commit_id": "147f82db3ec7bd8a15eec7ea3c26cd519584d0a2",
        "commit_message": "fix doc build warning (missing backtick)\n\n/opt/numpy/numpy/dtypes.py:docstring of numpy.dtypes:20: WARNING: Inline literal start-string without end-string.",
        "commit_url": "https://github.com/numpy/numpy/commit/147f82db3ec7bd8a15eec7ea3c26cd519584d0a2",
        "buggy_code": "like ``\"float64\"` can be used.",
        "fixed_code": "like ``\"float64\"`` can be used.",
        "patch": "@@ -22,7 +22,7 @@\n NumPy scalar types.  The classes can be used in ``isinstance`` checks and can\n also be instantiated or used directly.  Direct use of these classes is not\n typical, since their scalar counterparts (e.g. ``np.float64``) or strings\n-like ``\"float64\"` can be used.\n+like ``\"float64\"`` can be used.\n \n .. list-table::\n     :header-rows: 1"
    },
    {
        "commit_id": "afa98ddefde2af25676ae52837d648ee7d2b6e93",
        "commit_message": "Merge pull request #23623 from F3eQnxN3RriK/doc-patch-2\n\nDOC: Fix incorrect structure in `sqrt` docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/afa98ddefde2af25676ae52837d648ee7d2b6e93",
        "buggy_code": "Note: 0.0 and -0.0 are handled differently for complex inputs.",
        "fixed_code": "Note that 0.0 and -0.0 are handled differently for complex inputs.",
        "patch": "@@ -3833,7 +3833,7 @@ def add_newdoc(place, name, doc):\n     --------\n     emath.sqrt\n         A version which returns complex numbers when given negative reals.\n-        Note: 0.0 and -0.0 are handled differently for complex inputs.\n+        Note that 0.0 and -0.0 are handled differently for complex inputs.\n \n     Notes\n     -----"
    },
    {
        "commit_id": "bd9c2d610a6c66727a536d8f225bbaaccd2c3726",
        "commit_message": "DOC: Fix incorrect structure in `sqrt` docstring\n\nIn the \"See also\" section of [`sqrt` docstring](https://numpy.org/devdocs/reference/generated/numpy.sqrt.html#numpy.sqrt),\n`Note: ...` is incorrectly parsed by numpydoc. So removed `:` to fix.",
        "commit_url": "https://github.com/numpy/numpy/commit/bd9c2d610a6c66727a536d8f225bbaaccd2c3726",
        "buggy_code": "Note: 0.0 and -0.0 are handled differently for complex inputs.",
        "fixed_code": "Note that 0.0 and -0.0 are handled differently for complex inputs.",
        "patch": "@@ -3833,7 +3833,7 @@ def add_newdoc(place, name, doc):\n     --------\n     emath.sqrt\n         A version which returns complex numbers when given negative reals.\n-        Note: 0.0 and -0.0 are handled differently for complex inputs.\n+        Note that 0.0 and -0.0 are handled differently for complex inputs.\n \n     Notes\n     -----"
    },
    {
        "commit_id": "1acac891f99075128450aacf2a4538de3ff9d028",
        "commit_message": "DEP: deprecate scalar conversions for arrays with ndim > 0 (#10615)\n\nThis PR reflects some of the progress achieved in issue #10404 and is used to asses the impact of the changes. \r\n\r\nWith the changes in this PR, `float(numpy.array([1.0])` now gives a warning; likewise some other things:\r\n```python\r\nimport numpy\r\n\r\na = numpy.random.rand(10, 1)\r\na[0] = numpy.array([1.0])       # okay\r\na[0] = numpy.array(1.0)         # okay\r\na[0] = 1.0                      # okay\r\n\r\nb = numpy.random.rand(10)\r\nb[0] = numpy.array([1.0])       # ValueError: setting an array element with a sequence.\r\nb[0, ...] = numpy.array([1.0])  # okay\r\nb[0] = numpy.array(1.0)         # okay\r\nb[0] = 1.0                      # okay\r\n```\r\nThis aligns the behavior of numpy arrays with that of lists:\r\n```python\r\nfloat([3.14]) \r\n```\r\n```\r\nTypeError: float() argument must be a string or a number, not 'list'\r\n```\r\n```python\r\nimport numpy as np\r\n\r\na = np.random.rand(5)\r\na[0] = [3.14]\r\n```\r\n```\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nFixes #10404.",
        "commit_url": "https://github.com/numpy/numpy/commit/1acac891f99075128450aacf2a4538de3ff9d028",
        "buggy_code": "y[-1] = stop",
        "fixed_code": "y[-1, ...] = stop",
        "patch": "@@ -168,7 +168,7 @@ def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None,\n     y += start\n \n     if endpoint and num > 1:\n-        y[-1] = stop\n+        y[-1, ...] = stop\n \n     if axis != 0:\n         y = _nx.moveaxis(y, 0, axis)"
    },
    {
        "commit_id": "7aa6d6dabe0b4b3e5bf378ec684778b46167cce4",
        "commit_message": "BUG: include macOS arm64 `machine()` value in `_selected_real_kind_func`",
        "commit_url": "https://github.com/numpy/numpy/commit/7aa6d6dabe0b4b3e5bf378ec684778b46167cce4",
        "buggy_code": "for i in range(20):",
        "fixed_code": "for i in range(40):",
        "patch": "@@ -20,7 +20,7 @@ def test_all(self):\n                 i\n             ), f\"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}\"\n \n-        for i in range(20):\n+        for i in range(40):\n             assert selectedrealkind(i) == selected_real_kind(\n                 i\n             ), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\""
    },
    {
        "commit_id": "d79fe4364c34c3f99c101e1c27824203c78e6dea",
        "commit_message": "Merge pull request #23519 from F3eQnxN3RriK/fix-builtin-len\n\nDOC: Fix a reference to built-in `len` in `char.str_len` docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/d79fe4364c34c3f99c101e1c27824203c78e6dea",
        "buggy_code": "builtins.len",
        "fixed_code": "len",
        "patch": "@@ -278,7 +278,7 @@ def str_len(a):\n \n     See Also\n     --------\n-    builtins.len\n+    len\n \n     Examples\n     --------"
    },
    {
        "commit_id": "eeb8153a251675f90636fa09b9ae17044b5dc7f2",
        "commit_message": "TST,DOC: Avoid spaces to hopefully ensure more info on error and fix memtests",
        "commit_url": "https://github.com/numpy/numpy/commit/eeb8153a251675f90636fa09b9ae17044b5dc7f2",
        "buggy_code": "\"(Old_NumPy_target see also: \"",
        "fixed_code": "\"(Old_NumPy_target_see_depending_on_numpy__\"",
        "patch": "@@ -112,7 +112,7 @@ def __str__(self):\n     def add_guard(self, name, normal_define):\n         \"\"\"Wrap a definition behind a version guard\"\"\"\n         numpy_target_help_pointer = (\n-            \"(Old_NumPy_target see also: \"\n+            \"(Old_NumPy_target_see_depending_on_numpy__\"\n             \"https://numpy.org/devdocs/dev/depending_on_numpy.html)\")\n \n         wrap = textwrap.dedent(f\"\"\""
    },
    {
        "commit_id": "f9fef812b9ec4ad2fe4feaf290652e3e814e5f08",
        "commit_message": "DOC: Fix a reference to built-in `len` in `char.str_len` docstring\n\nBuilt-in function `len()` should not have prefix `builtins.`,\nso removed it to fix the reference.",
        "commit_url": "https://github.com/numpy/numpy/commit/f9fef812b9ec4ad2fe4feaf290652e3e814e5f08",
        "buggy_code": "builtins.len",
        "fixed_code": "len",
        "patch": "@@ -278,7 +278,7 @@ def str_len(a):\n \n     See Also\n     --------\n-    builtins.len\n+    len\n \n     Examples\n     --------"
    },
    {
        "commit_id": "b50568d9e758b489c2a3c409ef4e57b67820f090",
        "commit_message": "DOC: Fix typos & grammer in docstrings and comments (#23503)",
        "commit_url": "https://github.com/numpy/numpy/commit/b50568d9e758b489c2a3c409ef4e57b67820f090",
        "buggy_code": "ways of contracting the listed tensors and choosest the least costly",
        "fixed_code": "ways of contracting the listed tensors and chooses the least costly",
        "patch": "@@ -728,7 +728,7 @@ def einsum_path(*operands, optimize='greedy', einsum_call=False):\n         * if False no optimization is taken\n         * if True defaults to the 'greedy' algorithm\n         * 'optimal' An algorithm that combinatorially explores all possible\n-          ways of contracting the listed tensors and choosest the least costly\n+          ways of contracting the listed tensors and chooses the least costly\n           path. Scales exponentially with the number of terms in the\n           contraction.\n         * 'greedy' An algorithm that chooses the best pair contraction"
    },
    {
        "commit_id": "b50568d9e758b489c2a3c409ef4e57b67820f090",
        "commit_message": "DOC: Fix typos & grammer in docstrings and comments (#23503)",
        "commit_url": "https://github.com/numpy/numpy/commit/b50568d9e758b489c2a3c409ef4e57b67820f090",
        "buggy_code": "\"Support for NPY_RELAXED_STRIDES_CHECKING=0 has been remove as of \"",
        "fixed_code": "\"Support for NPY_RELAXED_STRIDES_CHECKING=0 has been removed as of \"",
        "patch": "@@ -20,7 +20,7 @@\n NPY_RELAXED_STRIDES_CHECKING = (os.environ.get('NPY_RELAXED_STRIDES_CHECKING', \"1\") != \"0\")\n if not NPY_RELAXED_STRIDES_CHECKING:\n     raise SystemError(\n-        \"Support for NPY_RELAXED_STRIDES_CHECKING=0 has been remove as of \"\n+        \"Support for NPY_RELAXED_STRIDES_CHECKING=0 has been removed as of \"\n         \"NumPy 1.23.  This error will eventually be removed entirely.\")\n \n # Put NPY_RELAXED_STRIDES_DEBUG=1 in the environment if you want numpy to use a"
    },
    {
        "commit_id": "b50568d9e758b489c2a3c409ef4e57b67820f090",
        "commit_message": "DOC: Fix typos & grammer in docstrings and comments (#23503)",
        "commit_url": "https://github.com/numpy/numpy/commit/b50568d9e758b489c2a3c409ef4e57b67820f090",
        "buggy_code": "This warning should not be used, since nose testing is not relvant",
        "fixed_code": "This warning should not be used, since nose testing is not relevant",
        "patch": "@@ -60,7 +60,7 @@ class ModuleDeprecationWarning(DeprecationWarning):\n \n     .. warning::\n \n-        This warning should not be used, since nose testing is not relvant\n+        This warning should not be used, since nose testing is not relevant\n         anymore.\n \n     The nose tester turns ordinary Deprecation warnings into test failures."
    },
    {
        "commit_id": "94d4f702017be274acb130cbe9cf163910137fbc",
        "commit_message": "BUG: Use output when given on numpy.dot C-API branch (#23459)\n\nUpdated the dot function C-API so that it now calls `np.multiply` with `out=` and returns it on branch of the function where the correct behaviour was not in place. Added two tests regarding this issue.\r\n\r\nCloses #21081.\r\n\r\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/94d4f702017be274acb130cbe9cf163910137fbc",
        "buggy_code": "A.dot(1, out=B0)",
        "fixed_code": "A.dot(1, out=B2)",
        "patch": "@@ -150,7 +150,7 @@ class SubClass(np.ndarray): ...\n A.diagonal()\n \n A.dot(1)\n-A.dot(1, out=B0)\n+A.dot(1, out=B2)\n \n A.nonzero()\n "
    },
    {
        "commit_id": "322cace686fbd079877fc73f9aa68063c5c47dfb",
        "commit_message": "Merge pull request #23460 from molsonkiko/crackfortran_backtracking\n\nMAINT: Fix ReDOS vulnerability in crackfortran.py",
        "commit_url": "https://github.com/numpy/numpy/commit/322cace686fbd079877fc73f9aa68063c5c47dfb",
        "buggy_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "fixed_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>(?:(?!@\\)@).)*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "patch": "@@ -935,7 +935,7 @@ def appenddecl(decl, decl2, force=1):\n     r'(?:,(?P<attributes>[\\w(),]+))?(::)?(?P<name>\\b[a-z$_][\\w$]*\\b)'\n     r'(?:\\((?P<params>[\\w,]*)\\))?\\Z', re.I)\n nameargspattern = re.compile(\n-    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)\n+    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>(?:(?!@\\)@).)*)\\s*@\\)@))*\\s*\\Z', re.I)\n operatorpattern = re.compile(\n     r'\\s*(?P<scheme>(operator|assignment))'\n     r'@\\(@\\s*(?P<name>[^)]+)\\s*@\\)@\\s*\\Z', re.I)"
    },
    {
        "commit_id": "09c23ef73c839d3a7f31e755f40f2f06b9791b7f",
        "commit_message": "make regex still match cases where OG fix failed\nMy first replacement regex would have failed to match\ncases like '@)@bind foo bar baz@(@@)@' which should\napparently be matched.\nAdded a test to make sure the regex does this.",
        "commit_url": "https://github.com/numpy/numpy/commit/09c23ef73c839d3a7f31e755f40f2f06b9791b7f",
        "buggy_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>[^\\s@]*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "fixed_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>(?:(?!@\\)@).)*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "patch": "@@ -935,7 +935,7 @@ def appenddecl(decl, decl2, force=1):\n     r'(?:,(?P<attributes>[\\w(),]+))?(::)?(?P<name>\\b[a-z$_][\\w$]*\\b)'\n     r'(?:\\((?P<params>[\\w,]*)\\))?\\Z', re.I)\n nameargspattern = re.compile(\n-    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>[^\\s@]*)\\s*@\\)@))*\\s*\\Z', re.I)\n+    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>(?:(?!@\\)@).)*)\\s*@\\)@))*\\s*\\Z', re.I)\n operatorpattern = re.compile(\n     r'\\s*(?P<scheme>(operator|assignment))'\n     r'@\\(@\\s*(?P<name>[^)]+)\\s*@\\)@\\s*\\Z', re.I)"
    },
    {
        "commit_id": "39c380ccf12a15cf560260dac461649c26bd0e5e",
        "commit_message": "initial fix for nameargspattern regex",
        "commit_url": "https://github.com/numpy/numpy/commit/39c380ccf12a15cf560260dac461649c26bd0e5e",
        "buggy_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "fixed_code": "r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>[^\\s@]*)\\s*@\\)@))*\\s*\\Z', re.I)",
        "patch": "@@ -935,7 +935,7 @@ def appenddecl(decl, decl2, force=1):\n     r'(?:,(?P<attributes>[\\w(),]+))?(::)?(?P<name>\\b[a-z$_][\\w$]*\\b)'\n     r'(?:\\((?P<params>[\\w,]*)\\))?\\Z', re.I)\n nameargspattern = re.compile(\n-    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)\n+    r'\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>[^\\s@]*)\\s*@\\)@))*\\s*\\Z', re.I)\n operatorpattern = re.compile(\n     r'\\s*(?P<scheme>(operator|assignment))'\n     r'@\\(@\\s*(?P<name>[^)]+)\\s*@\\)@\\s*\\Z', re.I)"
    },
    {
        "commit_id": "6c31fef645b244d0a22fcc5597b42b6c650ca75e",
        "commit_message": "Merge pull request #23408 from XPhyro/fix-extra-space\n\nDOC: fix extra space in error message",
        "commit_url": "https://github.com/numpy/numpy/commit/6c31fef645b244d0a22fcc5597b42b6c650ca75e",
        "buggy_code": "' sample x.')",
        "fixed_code": "'sample x.')",
        "patch": "@@ -981,7 +981,7 @@ def histogramdd(sample, bins=10, range=None, density=None, weights=None):\n         if M != D:\n             raise ValueError(\n                 'The dimension of bins must be equal to the dimension of the '\n-                ' sample x.')\n+                'sample x.')\n     except TypeError:\n         # bins is an integer\n         bins = D*[bins]"
    },
    {
        "commit_id": "deb475a1d423bd20ea3d4cea5a13ee9299ef5d9c",
        "commit_message": "DOC: fix extra space in error message",
        "commit_url": "https://github.com/numpy/numpy/commit/deb475a1d423bd20ea3d4cea5a13ee9299ef5d9c",
        "buggy_code": "' sample x.')",
        "fixed_code": "'sample x.')",
        "patch": "@@ -981,7 +981,7 @@ def histogramdd(sample, bins=10, range=None, density=None, weights=None):\n         if M != D:\n             raise ValueError(\n                 'The dimension of bins must be equal to the dimension of the '\n-                ' sample x.')\n+                'sample x.')\n     except TypeError:\n         # bins is an integer\n         bins = D*[bins]"
    },
    {
        "commit_id": "4bd253b5339bb21216c535258ac644640bd3f562",
        "commit_message": "MAINT: Modify style, change spelling a bit and fix Cython except",
        "commit_url": "https://github.com/numpy/numpy/commit/4bd253b5339bb21216c535258ac644640bd3f562",
        "buggy_code": "'NpyDatetime_ConvertPydatetimeToDatetimeStruct':   (309,),",
        "fixed_code": "'NpyDatetime_ConvertPyDateTimeToDatetimeStruct':   (309,),",
        "patch": "@@ -372,7 +372,7 @@ def get_StealRef():\n     # End 1.22 API\n     'NpyDatetime_ConvertDatetime64ToDatetimeStruct':   (307,),\n     'NpyDatetime_ConvertDatetimeStructToDatetime64':   (308,),\n-    'NpyDatetime_ConvertPydatetimeToDatetimeStruct':   (309,),\n+    'NpyDatetime_ConvertPyDateTimeToDatetimeStruct':   (309,),\n     'NpyDatetime_GetDatetimeISO8601StrLen':            (310,),\n     'NpyDatetime_MakeISO8601Datetime':                 (311,),\n }"
    },
    {
        "commit_id": "4db5303f478e92c9b0ddd0700b479a0ef2c04bff",
        "commit_message": "Merge pull request #23359 from WarrenWeckesser/doc-fix-info\n\nDOC: Add 'may vary' markup in info() docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/4db5303f478e92c9b0ddd0700b479a0ef2c04bff",
        "buggy_code": "data pointer: 0x562b6e0d2860",
        "fixed_code": "data pointer: 0x562b6e0d2860  # may vary",
        "patch": "@@ -587,7 +587,7 @@ def info(object=None, maxwidth=76, output=None, toplevel='numpy'):\n     aligned:  True\n     contiguous:  True\n     fortran:  False\n-    data pointer: 0x562b6e0d2860\n+    data pointer: 0x562b6e0d2860  # may vary\n     byteorder:  little\n     byteswap:  False\n     type: complex64"
    },
    {
        "commit_id": "25010c16edbe54ac9449ccac9d8f1da0c2d97cb0",
        "commit_message": "Merge pull request #23335 from tylerjereddy/treddy_issue_22041\n\nBUG: ma with structured dtype",
        "commit_url": "https://github.com/numpy/numpy/commit/25010c16edbe54ac9449ccac9d8f1da0c2d97cb0",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (ValueError, TypeError):",
        "patch": "@@ -2857,7 +2857,7 @@ def __new__(cls, data=None, mask=nomask, dtype=None, copy=False,\n                     mask = np.array(\n                         [getmaskarray(np.asanyarray(m, dtype=_data.dtype))\n                          for m in data], dtype=mdtype)\n-                except ValueError:\n+                except (ValueError, TypeError):\n                     # If data is nested\n                     mask = nomask\n                 # Force shrinking of the mask if needed (and possible)"
    },
    {
        "commit_id": "9fe3554b33ed1c3e7c8c78a8ac97322c0a16f7cb",
        "commit_message": "BUG: ma with structured dtype\n\nFixes #22041\n\n* add regression test and fix for creating a masked array with a\nstructured dtype; the test is simply for lack of error in the repoducer\n\n* the concern expressed by core team in matching issue was that\n`astropy` might be negatively affected; I ran full `astropy` (hash: `c9ad7c56`)\ntest suite locally with this feature branch and it seemed \"ok,\"\njust 1 unrelated network failure in the network-requiring tests\n(`test_ftp_tls_auto`):\n\n```1 failed, 21430 passed, 3490 skipped, 176 xfailed, 23275 warnings in\n430.18s (0:07:10)```",
        "commit_url": "https://github.com/numpy/numpy/commit/9fe3554b33ed1c3e7c8c78a8ac97322c0a16f7cb",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (ValueError, TypeError):",
        "patch": "@@ -2857,7 +2857,7 @@ def __new__(cls, data=None, mask=nomask, dtype=None, copy=False,\n                     mask = np.array(\n                         [getmaskarray(np.asanyarray(m, dtype=_data.dtype))\n                          for m in data], dtype=mdtype)\n-                except ValueError:\n+                except (ValueError, TypeError):\n                     # If data is nested\n                     mask = nomask\n                 # Force shrinking of the mask if needed (and possible)"
    },
    {
        "commit_id": "284523848164454f8d3f780824c1a827477c9957",
        "commit_message": "BUG: PR 23269 revisions\n\n* handle 0-D masked object array deepcopies, with\nregression test, based on reviewer feedback",
        "commit_url": "https://github.com/numpy/numpy/commit/284523848164454f8d3f780824c1a827477c9957",
        "buggy_code": "copied._data[:] = deepcopy(copied._data)",
        "fixed_code": "copied._data[...] = deepcopy(copied._data)",
        "patch": "@@ -6311,7 +6311,7 @@ def __deepcopy__(self, memo=None):\n         # contain compound types--you cannot depend on normal\n         # copy semantics to do the right thing here\n         if self.dtype.hasobject:\n-            copied._data[:] = deepcopy(copied._data)\n+            copied._data[...] = deepcopy(copied._data)\n         return copied\n \n "
    },
    {
        "commit_id": "a36782f163414a44c6ae37d453b07395673b2cac",
        "commit_message": "DOC: Fix code formatting",
        "commit_url": "https://github.com/numpy/numpy/commit/a36782f163414a44c6ae37d453b07395673b2cac",
        "buggy_code": "This function is equivalent to `isinstance(func, np.ufunc)` and",
        "fixed_code": "This function is equivalent to ``isinstance(func, np.ufunc)`` and",
        "patch": "@@ -40,7 +40,7 @@ def allows_array_ufunc_override(func):\n \n     Notes\n     -----\n-    This function is equivalent to `isinstance(func, np.ufunc)` and\n+    This function is equivalent to ``isinstance(func, np.ufunc)`` and\n     will work correctly for ufuncs defined outside of Numpy.\n \n     \"\"\""
    },
    {
        "commit_id": "482d3fadbfe23a1d2a2bb179e90369e0d08b11be",
        "commit_message": "DOC: Fix matpltolib error in documentation (#23212)\n\nAs noted by Kyle Sunden, this was deprecated and has been removed,\r\nusing the method is the correct way of doing it in newer matplotlib.\r\n\r\nCloses gh-23209\r\n\r\nCo-authored-by: Kyle Sunden <ksunden@users.noreply.github.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/482d3fadbfe23a1d2a2bb179e90369e0d08b11be",
        "buggy_code": ">>> ax.images.append(im)",
        "fixed_code": ">>> ax.add_image(im)",
        "patch": "@@ -754,7 +754,7 @@ def histogram2d(x, y, bins=10, range=None, density=None, weights=None):\n     >>> xcenters = (xedges[:-1] + xedges[1:]) / 2\n     >>> ycenters = (yedges[:-1] + yedges[1:]) / 2\n     >>> im.set_data(xcenters, ycenters, H)\n-    >>> ax.images.append(im)\n+    >>> ax.add_image(im)\n     >>> plt.show()\n \n     It is also possible to construct a 2-D histogram without specifying bin"
    },
    {
        "commit_id": "9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "commit_message": "Merge pull request #23200 from DimitriPapadopoulos/codespell\n\nFix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "buggy_code": "3. When a ``dtype=`` is passed the call is rougly the same as an",
        "fixed_code": "3. When a ``dtype=`` is passed the call is roughly the same as an",
        "patch": "@@ -255,7 +255,7 @@ def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):\n        ``\\0`` bytes.  The 5 can be a Python or NumPy integer.\n     2. ``np.void(b\"bytes-like\")`` creates a void scalar from the byte string.\n        The dtype itemsize will match the byte string length, here ``\"V10\"``.\n-    3. When a ``dtype=`` is passed the call is rougly the same as an\n+    3. When a ``dtype=`` is passed the call is roughly the same as an\n        array creation.  However, a void scalar rather than array is returned.\n \n     Please see the examples which show all three different conventions."
    },
    {
        "commit_id": "9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "commit_message": "Merge pull request #23200 from DimitriPapadopoulos/codespell\n\nFix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "buggy_code": "([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successfull)",
        "fixed_code": "([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successful)",
        "patch": "@@ -9534,7 +9534,7 @@ class MyAlwaysEqualNew(MyAlwaysEqual):\n \n @pytest.mark.parametrize(\"op\", [operator.eq, operator.ne])\n @pytest.mark.parametrize([\"dt1\", \"dt2\"], [\n-        ([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successfull)\n+        ([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successful)\n         (\"M8\", \"d\"),  # impossible comparison: result is all True or False\n         (\"d\", \"d\"),  # valid comparison\n         ])"
    },
    {
        "commit_id": "9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "commit_message": "Merge pull request #23200 from DimitriPapadopoulos/codespell\n\nFix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/9dde0a930aa568bbdd3ba176b12d1d46c72d3d4e",
        "buggy_code": ".. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trignometry,",
        "fixed_code": ".. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trigonometry,",
        "patch": "@@ -104,7 +104,7 @@ def poly(seq_of_zeros):\n \n     References\n     ----------\n-    .. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trignometry,\n+    .. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trigonometry,\n        Enhanced With Graphing Utilities,\" Prentice-Hall, pg. 318, 1996.\n \n     .. [2] G. Strang, \"Linear Algebra and Its Applications, 2nd Edition,\""
    },
    {
        "commit_id": "e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "commit_message": "Fix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "buggy_code": "3. When a ``dtype=`` is passed the call is rougly the same as an",
        "fixed_code": "3. When a ``dtype=`` is passed the call is roughly the same as an",
        "patch": "@@ -255,7 +255,7 @@ def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):\n        ``\\0`` bytes.  The 5 can be a Python or NumPy integer.\n     2. ``np.void(b\"bytes-like\")`` creates a void scalar from the byte string.\n        The dtype itemsize will match the byte string length, here ``\"V10\"``.\n-    3. When a ``dtype=`` is passed the call is rougly the same as an\n+    3. When a ``dtype=`` is passed the call is roughly the same as an\n        array creation.  However, a void scalar rather than array is returned.\n \n     Please see the examples which show all three different conventions."
    },
    {
        "commit_id": "e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "commit_message": "Fix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "buggy_code": "([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successfull)",
        "fixed_code": "([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successful)",
        "patch": "@@ -9534,7 +9534,7 @@ class MyAlwaysEqualNew(MyAlwaysEqual):\n \n @pytest.mark.parametrize(\"op\", [operator.eq, operator.ne])\n @pytest.mark.parametrize([\"dt1\", \"dt2\"], [\n-        ([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successfull)\n+        ([(\"f\", \"i\")], [(\"f\", \"i\")]),  # structured comparison (successful)\n         (\"M8\", \"d\"),  # impossible comparison: result is all True or False\n         (\"d\", \"d\"),  # valid comparison\n         ])"
    },
    {
        "commit_id": "e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "commit_message": "Fix typos found by copdespell",
        "commit_url": "https://github.com/numpy/numpy/commit/e1e487acf1d820cbab8a6f97986bf2fb451dfa8e",
        "buggy_code": ".. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trignometry,",
        "fixed_code": ".. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trigonometry,",
        "patch": "@@ -104,7 +104,7 @@ def poly(seq_of_zeros):\n \n     References\n     ----------\n-    .. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trignometry,\n+    .. [1] M. Sullivan and M. Sullivan, III, \"Algebra and Trigonometry,\n        Enhanced With Graphing Utilities,\" Prentice-Hall, pg. 318, 1996.\n \n     .. [2] G. Strang, \"Linear Algebra and Its Applications, 2nd Edition,\""
    },
    {
        "commit_id": "68ff715959408773d7a991167c13974796c4c7dc",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/68ff715959408773d7a991167c13974796c4c7dc",
        "buggy_code": "\"AVX512VBMI\", \"AVX512VBMI2\", \"AVX512BITALG, AVX512FP16\",",
        "fixed_code": "\"AVX512VBMI\", \"AVX512VBMI2\", \"AVX512BITALG\", \"AVX512FP16\",",
        "patch": "@@ -116,7 +116,7 @@ class Test_X86_Features(AbstractTest):\n         \"AVX\", \"F16C\", \"XOP\", \"FMA4\", \"FMA3\", \"AVX2\", \"AVX512F\", \"AVX512CD\",\n         \"AVX512ER\", \"AVX512PF\", \"AVX5124FMAPS\", \"AVX5124VNNIW\", \"AVX512VPOPCNTDQ\",\n         \"AVX512VL\", \"AVX512BW\", \"AVX512DQ\", \"AVX512VNNI\", \"AVX512IFMA\",\n-        \"AVX512VBMI\", \"AVX512VBMI2\", \"AVX512BITALG, AVX512FP16\",\n+        \"AVX512VBMI\", \"AVX512VBMI2\", \"AVX512BITALG\", \"AVX512FP16\",\n     ]\n     features_groups = dict(\n         AVX512_KNL = [\"AVX512F\", \"AVX512CD\", \"AVX512ER\", \"AVX512PF\"],"
    },
    {
        "commit_id": "8bfaaf35c80a02657c353b641652de9fa4719daa",
        "commit_message": "BENCH: fix benchmark",
        "commit_url": "https://github.com/numpy/numpy/commit/8bfaaf35c80a02657c353b641652de9fa4719daa",
        "buggy_code": "output = np.zeros(c.shape, np.int)",
        "fixed_code": "output = np.zeros(c.shape, np.int32)",
        "patch": "@@ -150,7 +150,7 @@ def g(self,z,c):\n         return np.sum(np.multiply(z,z) + c)\n \n     def mandelbrot_numpy(self, c, maxiter):\n-        output = np.zeros(c.shape, np.int)\n+        output = np.zeros(c.shape, np.int32)\n         z = np.empty(c.shape, np.complex64)\n         for it in range(maxiter):\n             notdone = self.f(z)"
    },
    {
        "commit_id": "6615d6bc26c30bf618538230ded86c09381a3e28",
        "commit_message": "Merge pull request #23121 from arunkumarkota/issue23086_second_try\n\nDOC:fix type in bitwise_ior",
        "commit_url": "https://github.com/numpy/numpy/commit/6615d6bc26c30bf618538230ded86c09381a3e28",
        "buggy_code": "then ``000111011``, or 29:",
        "fixed_code": "then ``00011101``, or 29:",
        "patch": "@@ -667,7 +667,7 @@ def add_newdoc(place, name, doc):\n     --------\n     The number 13 has the binary representation ``00001101``. Likewise,\n     16 is represented by ``00010000``.  The bit-wise OR of 13 and 16 is\n-    then ``000111011``, or 29:\n+    then ``00011101``, or 29:\n \n     >>> np.bitwise_or(13, 16)\n     29"
    },
    {
        "commit_id": "e5725a4a09ced8dd3a1b667edb4715b1cd3cb95a",
        "commit_message": "DOC:fix type in bitwise_ior",
        "commit_url": "https://github.com/numpy/numpy/commit/e5725a4a09ced8dd3a1b667edb4715b1cd3cb95a",
        "buggy_code": "then ``000111011``, or 29:",
        "fixed_code": "then ``00011101``, or 29:",
        "patch": "@@ -667,7 +667,7 @@ def add_newdoc(place, name, doc):\n     --------\n     The number 13 has the binary representation ``00001101``. Likewise,\n     16 is represented by ``00010000``.  The bit-wise OR of 13 and 16 is\n-    then ``000111011``, or 29:\n+    then ``00011101``, or 29:\n \n     >>> np.bitwise_or(13, 16)\n     29"
    },
    {
        "commit_id": "5c7c696db3441ada1d66a26d907d39f2a5ae5049",
        "commit_message": "ENH: unifying error type for gh scipy #1339",
        "commit_url": "https://github.com/numpy/numpy/commit/5c7c696db3441ada1d66a26d907d39f2a5ae5049",
        "buggy_code": "assert_raises(ValueError, getattr, p, \"r\")",
        "fixed_code": "assert_raises(np.linalg.LinAlgError, getattr, p, \"r\")",
        "patch": "@@ -53,7 +53,7 @@ def p(x, y):\n     def test_poly1d_nan_roots(self):\n         # Ticket #396\n         p = np.poly1d([np.nan, np.nan, 1], r=False)\n-        assert_raises(ValueError, getattr, p, \"r\")\n+        assert_raises(np.linalg.LinAlgError, getattr, p, \"r\")\n \n     def test_mem_polymul(self):\n         # Ticket #448"
    },
    {
        "commit_id": "3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "commit_message": "MAINT: Fix stacklevels for the new C dispatcher not adding one",
        "commit_url": "https://github.com/numpy/numpy/commit/3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "buggy_code": "DeprecationWarning, stacklevel=3)",
        "fixed_code": "DeprecationWarning, stacklevel=2)",
        "patch": "@@ -724,7 +724,7 @@ def array2string(a, max_line_width=None, precision=None,\n         # Deprecation 11-9-2017  v1.14\n         warnings.warn(\"'style' argument is deprecated and no longer functional\"\n                       \" except in 1.13 'legacy' mode\",\n-                      DeprecationWarning, stacklevel=3)\n+                      DeprecationWarning, stacklevel=2)\n \n     if options['legacy'] > 113:\n         options['linewidth'] -= len(suffix)"
    },
    {
        "commit_id": "3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "commit_message": "MAINT: Fix stacklevels for the new C dispatcher not adding one",
        "commit_url": "https://github.com/numpy/numpy/commit/3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "buggy_code": "DeprecationWarning, stacklevel=3)",
        "fixed_code": "DeprecationWarning, stacklevel=2)",
        "patch": "@@ -2313,7 +2313,7 @@ def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,\n         warnings.warn(\n             \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"\n             \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",\n-            DeprecationWarning, stacklevel=3)\n+            DeprecationWarning, stacklevel=2)\n \n         res = _sum_(a)\n         if out is not None:"
    },
    {
        "commit_id": "3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "commit_message": "MAINT: Fix stacklevels for the new C dispatcher not adding one",
        "commit_url": "https://github.com/numpy/numpy/commit/3f00488871ac169b1fd2f40495ad85cb581cc02b",
        "buggy_code": "warnings.warn(msg, RankWarning, stacklevel=4)",
        "fixed_code": "warnings.warn(msg, RankWarning, stacklevel=2)",
        "patch": "@@ -672,7 +672,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n     # warn on rank reduction, which indicates an ill conditioned matrix\n     if rank != order and not full:\n         msg = \"Polyfit may be poorly conditioned\"\n-        warnings.warn(msg, RankWarning, stacklevel=4)\n+        warnings.warn(msg, RankWarning, stacklevel=2)\n \n     if full:\n         return c, resids, rank, s, rcond"
    },
    {
        "commit_id": "55e47e36ec9dbdd47d58900a8b504d9e159f1beb",
        "commit_message": "Merge pull request #22991 from oleksandr-pavlyk/docs/result_type-docstring-fix\n\nDOC: Fix gh-22990 by correcting docstring of result_type",
        "commit_url": "https://github.com/numpy/numpy/commit/55e47e36ec9dbdd47d58900a8b504d9e159f1beb",
        "buggy_code": "Otherwise, `min_scalar_type` is called on each array, and",
        "fixed_code": "Otherwise, `min_scalar_type` is called on each scalar, and",
        "patch": "@@ -714,7 +714,7 @@ def result_type(*arrays_and_dtypes):\n     the data types are combined with :func:`promote_types`\n     to produce the return value.\n \n-    Otherwise, `min_scalar_type` is called on each array, and\n+    Otherwise, `min_scalar_type` is called on each scalar, and\n     the resulting data types are all combined with :func:`promote_types`\n     to produce the return value.\n "
    },
    {
        "commit_id": "a98839841c6dcbc85c7afc9855008dda68c477f3",
        "commit_message": "DOC: Fix gh-22990 by correcting docstring of result_type",
        "commit_url": "https://github.com/numpy/numpy/commit/a98839841c6dcbc85c7afc9855008dda68c477f3",
        "buggy_code": "Otherwise, `min_scalar_type` is called on each array, and",
        "fixed_code": "Otherwise, `min_scalar_type` is called on each scalar, and",
        "patch": "@@ -714,7 +714,7 @@ def result_type(*arrays_and_dtypes):\n     the data types are combined with :func:`promote_types`\n     to produce the return value.\n \n-    Otherwise, `min_scalar_type` is called on each array, and\n+    Otherwise, `min_scalar_type` is called on each scalar, and\n     the resulting data types are all combined with :func:`promote_types`\n     to produce the return value.\n "
    },
    {
        "commit_id": "271876ec27d711136db510b5874714b5e17bb1ea",
        "commit_message": "Fix a doctest",
        "commit_url": "https://github.com/numpy/numpy/commit/271876ec27d711136db510b5874714b5e17bb1ea",
        "buggy_code": ">>> sign * np.exp(logdet)",
        "fixed_code": ">>> sign * np.exp(logabsdet)",
        "patch": "@@ -2100,7 +2100,7 @@ def slogdet(a):\n     >>> sign, logabsdet = np.linalg.slogdet(a)\n     >>> (sign, logabsdet)\n     (array([-1., -1., -1.]), array([ 0.69314718,  1.09861229,  2.07944154]))\n-    >>> sign * np.exp(logdet)\n+    >>> sign * np.exp(logabsdet)\n     array([-2., -3., -8.])\n \n     This routine succeeds where ordinary `det` does not:"
    },
    {
        "commit_id": "343fae66d533eef7fc2185c9884240c2a22f0f2f",
        "commit_message": "Merge pull request #22670 from MatteoRaso/master\n\nBUG: Polynomials now copy properly (#22669)",
        "commit_url": "https://github.com/numpy/numpy/commit/343fae66d533eef7fc2185c9884240c2a22f0f2f",
        "buggy_code": "ret['symbol'] = self.symbol.copy()",
        "fixed_code": "ret['symbol'] = self.symbol",
        "patch": "@@ -499,7 +499,7 @@ def __getstate__(self):\n         ret['coef'] = self.coef.copy()\n         ret['domain'] = self.domain.copy()\n         ret['window'] = self.window.copy()\n-        ret['symbol'] = self.symbol.copy()\n+        ret['symbol'] = self.symbol\n         return ret\n \n     def __setstate__(self, dict):"
    },
    {
        "commit_id": "3b9c49e5bb47a979fedb151e36f4e3a00724b096",
        "commit_message": "BUG: Polynomials now copy properly (#22669)\n\nOn line 502, self.symbol.copy() was called, which\ncauses an AttributeError, since self.symbol is a\nstring, so it doesn't have a copy() method. To fix\nit, I simply removed the copy() and directly assigned\nthe string.",
        "commit_url": "https://github.com/numpy/numpy/commit/3b9c49e5bb47a979fedb151e36f4e3a00724b096",
        "buggy_code": "ret['symbol'] = self.symbol.copy()",
        "fixed_code": "ret['symbol'] = self.symbol",
        "patch": "@@ -499,7 +499,7 @@ def __getstate__(self):\n         ret['coef'] = self.coef.copy()\n         ret['domain'] = self.domain.copy()\n         ret['window'] = self.window.copy()\n-        ret['symbol'] = self.symbol.copy()\n+        ret['symbol'] = self.symbol\n         return ret\n \n     def __setstate__(self, dict):"
    },
    {
        "commit_id": "6a2bc601b24a414fe8f4a17493e9b344dc547096",
        "commit_message": "Merge pull request #22620 from WarrenWeckesser/nulps-typo\n\nDOC: testing: Fix typo: nulps -> nulp",
        "commit_url": "https://github.com/numpy/numpy/commit/6a2bc601b24a414fe8f4a17493e9b344dc547096",
        "buggy_code": "abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))",
        "fixed_code": "abs(x - y) <= nulp * spacing(maximum(abs(x), abs(y)))",
        "patch": "@@ -1626,7 +1626,7 @@ def assert_array_almost_equal_nulp(x, y, nulp=1):\n     -----\n     An assertion is raised if the following condition is not met::\n \n-        abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))\n+        abs(x - y) <= nulp * spacing(maximum(abs(x), abs(y)))\n \n     Examples\n     --------"
    },
    {
        "commit_id": "c6e75fce247d3d698ef76bb2c550858d32241268",
        "commit_message": "DOC: testing: Fix typo: nulps -> nulp\n\n[skip actions] [skip travis] [skip azp]",
        "commit_url": "https://github.com/numpy/numpy/commit/c6e75fce247d3d698ef76bb2c550858d32241268",
        "buggy_code": "abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))",
        "fixed_code": "abs(x - y) <= nulp * spacing(maximum(abs(x), abs(y)))",
        "patch": "@@ -1626,7 +1626,7 @@ def assert_array_almost_equal_nulp(x, y, nulp=1):\n     -----\n     An assertion is raised if the following condition is not met::\n \n-        abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))\n+        abs(x - y) <= nulp * spacing(maximum(abs(x), abs(y)))\n \n     Examples\n     --------"
    },
    {
        "commit_id": "72af24df557802015820714aaa3d105d53216431",
        "commit_message": "BUG: Histogramdd breaks on big arrays in Windows (#22561)\n\n* BUG: Histogramdd breaks on big arrays in Windows\r\n\r\nResolved the issue with line change from int to np.intp in numpy/numpy/lib/histograms.py\r\n\r\n* BUG: Histogramdd breaks on big arrays in Windows\r\n\r\nResolved the issue with line change from int to np.intp in numpy/numpy/lib/histograms.py\r\n\r\n* Removed the binary files\r\n\r\n* Update test_histograms.py\r\n\r\n* Update test_histograms.py\r\n\r\n* Update test_histograms.py",
        "commit_url": "https://github.com/numpy/numpy/commit/72af24df557802015820714aaa3d105d53216431",
        "buggy_code": "nbin = np.empty(D, int)",
        "fixed_code": "nbin = np.empty(D, np.intp)",
        "patch": "@@ -970,7 +970,7 @@ def histogramdd(sample, bins=10, range=None, density=None, weights=None):\n         sample = np.atleast_2d(sample).T\n         N, D = sample.shape\n \n-    nbin = np.empty(D, int)\n+    nbin = np.empty(D, np.intp)\n     edges = D*[None]\n     dedges = D*[None]\n     if weights is not None:"
    },
    {
        "commit_id": "2172528b7b196e470cf4d39b61e1067bdb7e0a9f",
        "commit_message": "MAINT: Work around bug introduced by Versioneer 0.23\n\nhttps://github.com/python-versioneer/python-versioneer/pull/342",
        "commit_url": "https://github.com/numpy/numpy/commit/2172528b7b196e470cf4d39b61e1067bdb7e0a9f",
        "buggy_code": "_sdist = cmds['egg_info']",
        "fixed_code": "_egg_info = cmds['egg_info']",
        "patch": "@@ -1973,7 +1973,7 @@ def run(self):\n \n     # sdist farms its file list building out to egg_info\n     if 'egg_info' in cmds:\n-        _sdist = cmds['egg_info']\n+        _egg_info = cmds['egg_info']\n     else:\n         from setuptools.command.egg_info import egg_info as _egg_info\n "
    },
    {
        "commit_id": "2145d9ec97771001bf205e5f36f7609c1682e010",
        "commit_message": "MAINT: Don't include \"dirty\" in versioneer generated versions.\n\nWe patch the LICENSE file for both sdist and wheel releases, making them\nall \"dirty\", i.e., containing files that have not been committed. Having\n\"dirty\" in the product name is bad marketing and the versioneer tool\ndoes not have an option or style that will omit that bit of information,\nso patch the versioneer files to make that tag an empty string.",
        "commit_url": "https://github.com/numpy/numpy/commit/2145d9ec97771001bf205e5f36f7609c1682e010",
        "buggy_code": "\"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",",
        "fixed_code": "\"describe\", \"--tags\", \"--dirty=\", \"--always\", \"--long\",",
        "patch": "@@ -258,7 +258,7 @@ def git_pieces_from_vcs(tag_prefix, root, verbose, runner=run_command):\n     # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n     # if there isn't one, this yields HEX[-dirty] (no NUM)\n     describe_out, rc = runner(GITS, [\n-        \"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",\n+        \"describe\", \"--tags\", \"--dirty=\", \"--always\", \"--long\",\n         \"--match\", f\"{tag_prefix}[[:digit:]]*\"\n     ], cwd=root)\n     # --long was added in git-1.5.5"
    },
    {
        "commit_id": "241c905c464a29c7b25858d57ea1a43131848530",
        "commit_message": "Merge pull request #22418 from charris/fix-memory-check\n\nTST, BLD: Fix failing aarch64 wheel builds.",
        "commit_url": "https://github.com/numpy/numpy/commit/241c905c464a29c7b25858d57ea1a43131848530",
        "buggy_code": "@requires_memory(free_bytes=9*10**9)  # complex case needs 8GiB+",
        "fixed_code": "@requires_memory(free_bytes=18e9)  # complex case needs 18GiB+",
        "patch": "@@ -6722,7 +6722,7 @@ def assert_dot_close(A, X, desired):\n \n     @pytest.mark.slow\n     @pytest.mark.parametrize(\"dtype\", [np.float64, np.complex128])\n-    @requires_memory(free_bytes=9*10**9)  # complex case needs 8GiB+\n+    @requires_memory(free_bytes=18e9)  # complex case needs 18GiB+\n     def test_huge_vectordot(self, dtype):\n         # Large vector multiplications are chunked with 32bit BLAS\n         # Test that the chunking does the right thing, see also gh-22262"
    },
    {
        "commit_id": "d7da7a490fc983f67a1241fe9fe409436d78f10c",
        "commit_message": "TST, BLD: Fix failing aarch64 wheel builds.\n\nThe aarch64 wheel build tests are failing with OOM. The new test for\ncomplex128 dot for huge vectors is responsible as the useable memory\nis incorrectly determined and the check for sufficient memory fails.\nThe fix here is to define the `NPY_AVAILABLE_MEM=\"4 GB\"` environment\nvariable before the test call in `cibw_test_command.sh`.",
        "commit_url": "https://github.com/numpy/numpy/commit/d7da7a490fc983f67a1241fe9fe409436d78f10c",
        "buggy_code": "@requires_memory(free_bytes=9*10**9)  # complex case needs 8GiB+",
        "fixed_code": "@requires_memory(free_bytes=18e9)  # complex case needs 18GiB+",
        "patch": "@@ -6721,7 +6721,7 @@ def assert_dot_close(A, X, desired):\n \n     @pytest.mark.slow\n     @pytest.mark.parametrize(\"dtype\", [np.float64, np.complex128])\n-    @requires_memory(free_bytes=9*10**9)  # complex case needs 8GiB+\n+    @requires_memory(free_bytes=18e9)  # complex case needs 18GiB+\n     def test_huge_vectordot(self, dtype):\n         # Large vector multiplications are chunked with 32bit BLAS\n         # Test that the chunking does the right thing, see also gh-22262"
    },
    {
        "commit_id": "67b2d7398cd7e95b49d39a3ac5691fae438d57b0",
        "commit_message": "Merge pull request #22399 from DimitriPapadopoulos/codespell\n\nMAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/67b2d7398cd7e95b49d39a3ac5691fae438d57b0",
        "buggy_code": "arithmitic errors so there's generally no need to verify any calculation's",
        "fixed_code": "arithmetic errors so there's generally no need to verify any calculation's",
        "patch": "@@ -4,7 +4,7 @@\n modules or shared libraries. This script should aim to touch as many of those\n as possible in an attempt to trip a ModuleNotFoundError or a DLL load failure\n due to an uncollected resource. Missing resources are unlikely to lead to\n-arithmitic errors so there's generally no need to verify any calculation's\n+arithmetic errors so there's generally no need to verify any calculation's\n output - merely that it made it to the end OK. This script should not\n explicitly import any of numpy's submodules as that gives PyInstaller undue\n hints that those submodules exist and should be collected (accessing implicitly"
    },
    {
        "commit_id": "67b2d7398cd7e95b49d39a3ac5691fae438d57b0",
        "commit_message": "Merge pull request #22399 from DimitriPapadopoulos/codespell\n\nMAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/67b2d7398cd7e95b49d39a3ac5691fae438d57b0",
        "buggy_code": "called early the shared data is freed and invlaid memory accesses will",
        "fixed_code": "called early the shared data is freed and invalid memory accesses will",
        "patch": "@@ -136,7 +136,7 @@ class data_source:\n         This class is for testing the timing of the PyCapsule destructor\n         invoked when numpy release its reference to the shared data as part of\n         the numpy array interface protocol. If the PyCapsule destructor is\n-        called early the shared data is freed and invlaid memory accesses will\n+        called early the shared data is freed and invalid memory accesses will\n         occur.\n         \"\"\"\n "
    },
    {
        "commit_id": "8551018184e16dc76cadb05cfaf73985105a3293",
        "commit_message": "MAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/8551018184e16dc76cadb05cfaf73985105a3293",
        "buggy_code": "arithmitic errors so there's generally no need to verify any calculation's",
        "fixed_code": "arithmetic errors so there's generally no need to verify any calculation's",
        "patch": "@@ -4,7 +4,7 @@\n modules or shared libraries. This script should aim to touch as many of those\n as possible in an attempt to trip a ModuleNotFoundError or a DLL load failure\n due to an uncollected resource. Missing resources are unlikely to lead to\n-arithmitic errors so there's generally no need to verify any calculation's\n+arithmetic errors so there's generally no need to verify any calculation's\n output - merely that it made it to the end OK. This script should not\n explicitly import any of numpy's submodules as that gives PyInstaller undue\n hints that those submodules exist and should be collected (accessing implicitly"
    },
    {
        "commit_id": "8551018184e16dc76cadb05cfaf73985105a3293",
        "commit_message": "MAINT: Fix typos found by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/8551018184e16dc76cadb05cfaf73985105a3293",
        "buggy_code": "called early the shared data is freed and invlaid memory accesses will",
        "fixed_code": "called early the shared data is freed and invalid memory accesses will",
        "patch": "@@ -136,7 +136,7 @@ class data_source:\n         This class is for testing the timing of the PyCapsule destructor\n         invoked when numpy release its reference to the shared data as part of\n         the numpy array interface protocol. If the PyCapsule destructor is\n-        called early the shared data is freed and invlaid memory accesses will\n+        called early the shared data is freed and invalid memory accesses will\n         occur.\n         \"\"\"\n "
    },
    {
        "commit_id": "17051caef30ad3b99291077c95f5ca9e55f0e082",
        "commit_message": "Merge pull request #22147 from eelregit/eelregit_tensorsolve_doc_fix\n\nDOC: fix linalg.tensorsolve docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/17051caef30ad3b99291077c95f5ca9e55f0e082",
        "buggy_code": "``tensordot(a, x, axes=b.ndim)``.",
        "fixed_code": "``tensordot(a, x, axes=x.ndim)``.",
        "patch": "@@ -243,7 +243,7 @@ def tensorsolve(a, b, axes=None):\n \n     It is assumed that all indices of `x` are summed over in the product,\n     together with the rightmost indices of `a`, as is done in, for example,\n-    ``tensordot(a, x, axes=b.ndim)``.\n+    ``tensordot(a, x, axes=x.ndim)``.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "924a57d18bb98ec7cb3ceb35995b65f0d1cc4903",
        "commit_message": "Merge pull request #22344 from gdementen/patch-1\n\nDOC: fixed minor typo in percentile docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/924a57d18bb98ec7cb3ceb35995b65f0d1cc4903",
        "buggy_code": "The first three methods are discontiuous.  NumPy further defines the",
        "fixed_code": "The first three methods are discontinuous.  NumPy further defines the",
        "patch": "@@ -3942,7 +3942,7 @@ def percentile(a,\n         8. 'median_unbiased'\n         9. 'normal_unbiased'\n \n-        The first three methods are discontiuous.  NumPy further defines the\n+        The first three methods are discontinuous.  NumPy further defines the\n         following discontinuous variations of the default 'linear' (7.) option:\n \n         * 'lower'"
    },
    {
        "commit_id": "80f0015c53f25d7b53d362d8b76356f221924c5d",
        "commit_message": "MAINT: Fix linter error",
        "commit_url": "https://github.com/numpy/numpy/commit/80f0015c53f25d7b53d362d8b76356f221924c5d",
        "buggy_code": "dtype  = ['e', 'f', 'd']",
        "fixed_code": "dtype = ['e', 'f', 'd']",
        "patch": "@@ -9,7 +9,7 @@\n \n stride = [1, 2, 4]\n stride_out = [1, 2, 4]\n-dtype  = ['e', 'f', 'd']\n+dtype = ['e', 'f', 'd']\n \n class Unary(Benchmark):\n     params = [UNARY_OBJECT_UFUNCS, stride, stride_out, dtype]"
    },
    {
        "commit_id": "688f48ac8448b367bb5c37fa231f667484a50eee",
        "commit_message": "Merge pull request #22253 from rossbar/fix-concatenate-error-msg\n\nDOC: Update concatenate exception message.",
        "commit_url": "https://github.com/numpy/numpy/commit/688f48ac8448b367bb5c37fa231f667484a50eee",
        "buggy_code": "\"all the input array dimensions for the concatenation axis \"",
        "fixed_code": "\"all the input array dimensions except for the concatenation axis \"",
        "patch": "@@ -260,7 +260,7 @@ def test_exceptions(self):\n             np.concatenate((a, b), axis=axis[0])  # OK\n             assert_raises_regex(\n                 ValueError,\n-                \"all the input array dimensions for the concatenation axis \"\n+                \"all the input array dimensions except for the concatenation axis \"\n                 \"must match exactly, but along dimension {}, the array at \"\n                 \"index 0 has size 1 and the array at index 1 has size 2\"\n                 .format(i),"
    },
    {
        "commit_id": "65c10c1cfecb2b3ebd0306ed1c63b103158f80d5",
        "commit_message": "Merge pull request #21995 from eirrgang/mei-1468\n\nBUG: Distinguish exact vs. equivalent dtype for C type aliases.",
        "commit_url": "https://github.com/numpy/numpy/commit/65c10c1cfecb2b3ebd0306ed1c63b103158f80d5",
        "buggy_code": "descr = [('v', int, 3), ('x', [('y', float)])]",
        "fixed_code": "descr = np.dtype([('v', int, 3), ('x', [('y', float)])])",
        "patch": "@@ -5387,7 +5387,7 @@ def test_ufunc_with_out_varied():\n \n \n def test_astype_mask_ordering():\n-    descr = [('v', int, 3), ('x', [('y', float)])]\n+    descr = np.dtype([('v', int, 3), ('x', [('y', float)])])\n     x = array([\n         [([1, 2, 3], (1.0,)),  ([1, 2, 3], (2.0,))],\n         [([1, 2, 3], (3.0,)),  ([1, 2, 3], (4.0,))]], dtype=descr)"
    },
    {
        "commit_id": "0003671d3db5a36c9a2d2994e350620ce72420cb",
        "commit_message": "Merge pull request #22205 from milliams/fromfunction-doc-fix\n\nDOC: Clarify that `like` is not passed to `function`",
        "commit_url": "https://github.com/numpy/numpy/commit/0003671d3db5a36c9a2d2994e350620ce72420cb",
        "buggy_code": "Keywords other than `dtype` are passed to `function`.",
        "fixed_code": "Keywords other than `dtype` and `like` are passed to `function`.",
        "patch": "@@ -1836,7 +1836,7 @@ def fromfunction(function, shape, *, dtype=float, like=None, **kwargs):\n \n     Notes\n     -----\n-    Keywords other than `dtype` are passed to `function`.\n+    Keywords other than `dtype` and `like` are passed to `function`.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "9b4e12e196146f8e73af86cdf38d16a072d968c0",
        "commit_message": "Fix linalg.tensorsolve docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/9b4e12e196146f8e73af86cdf38d16a072d968c0",
        "buggy_code": "``tensordot(a, x, axes=b.ndim)``.",
        "fixed_code": "``tensordot(a, x, axes=x.ndim)``.",
        "patch": "@@ -243,7 +243,7 @@ def tensorsolve(a, b, axes=None):\n \n     It is assumed that all indices of `x` are summed over in the product,\n     together with the rightmost indices of `a`, as is done in, for example,\n-    ``tensordot(a, x, axes=b.ndim)``.\n+    ``tensordot(a, x, axes=x.ndim)``.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "3255a9e0d991eef4ac284c95b12f5ec397e8bd9f",
        "commit_message": "Merge pull request #22144 from gregsadetsky/patch-1",
        "commit_url": "https://github.com/numpy/numpy/commit/3255a9e0d991eef4ac284c95b12f5ec397e8bd9f",
        "buggy_code": "before it and all larger elements behind it. The order all",
        "fixed_code": "before it and all larger elements behind it. The order of all",
        "patch": "@@ -788,7 +788,7 @@ def argpartition(a, kth, axis=-1, kind='introselect', order=None):\n     kth : int or sequence of ints\n         Element index to partition by. The k-th element will be in its\n         final sorted position and all smaller elements will be moved\n-        before it and all larger elements behind it. The order all\n+        before it and all larger elements behind it. The order of all\n         elements in the partitions is undefined. If provided with a\n         sequence of k-th it will partition all of them into their sorted\n         position at once."
    },
    {
        "commit_id": "86a368f53ba15a610be4c6cb3a173446aef3aa80",
        "commit_message": "Merge pull request #22105 from palbarta/lerp_symmetric_test_issue_22073\n\nTST: fix test_linear_interpolation_formula_symmetric",
        "commit_url": "https://github.com/numpy/numpy/commit/86a368f53ba15a610be4c6cb3a173446aef3aa80",
        "buggy_code": "assert left == right",
        "fixed_code": "assert_allclose(left, right)",
        "patch": "@@ -3579,7 +3579,7 @@ def test_linear_interpolation_formula_symmetric(self, t, a, b):\n         # double subtraction is needed to remove the extra precision of t < 0.5\n         left = nfb._lerp(a, b, 1 - (1 - t))\n         right = nfb._lerp(b, a, 1 - t)\n-        assert left == right\n+        assert_allclose(left, right)\n \n     def test_linear_interpolation_formula_0d_inputs(self):\n         a = np.array(2)"
    },
    {
        "commit_id": "002df0e20f109dd001053f42bdc9a90632f536ff",
        "commit_message": "TST: fix test_linear_interpolation_formula_symmetric\n\nThe lerp test compared the output of the original and the symmetric\nfunctions by using basic assertion. Double precision errors could\naccumulate in a way that the 2 outputs mismatch by epsilon.\nFor more information on the precision issue, see #22073\n\nFix: use assert_allclose instead for float comparison.",
        "commit_url": "https://github.com/numpy/numpy/commit/002df0e20f109dd001053f42bdc9a90632f536ff",
        "buggy_code": "assert left == right",
        "fixed_code": "assert_allclose(left, right)",
        "patch": "@@ -3579,7 +3579,7 @@ def test_linear_interpolation_formula_symmetric(self, t, a, b):\n         # double subtraction is needed to remove the extra precision of t < 0.5\n         left = nfb._lerp(a, b, 1 - (1 - t))\n         right = nfb._lerp(b, a, 1 - t)\n-        assert left == right\n+        assert_allclose(left, right)\n \n     def test_linear_interpolation_formula_0d_inputs(self):\n         a = np.array(2)"
    },
    {
        "commit_id": "7c8e1134ae86f8a8c002e1068337bec63ddf7f0d",
        "commit_message": "MAINT: fix typo in test_array_object test description (#22071)",
        "commit_url": "https://github.com/numpy/numpy/commit/7c8e1134ae86f8a8c002e1068337bec63ddf7f0d",
        "buggy_code": "TODO: Find and use appropiate __setitem__() case.",
        "fixed_code": "TODO: Find and use appropriate __setitem__() case.",
        "patch": "@@ -364,7 +364,7 @@ def test_array_keys_use_private_array():\n     in __getitem__(). This is achieved by passing array_api arrays with 0-sized\n     dimensions, which NumPy-proper treats erroneously - not sure why!\n \n-    TODO: Find and use appropiate __setitem__() case.\n+    TODO: Find and use appropriate __setitem__() case.\n     \"\"\"\n     a = ones((0, 0), dtype=bool_)\n     assert a[a].shape == (0,)"
    },
    {
        "commit_id": "88466d22b64b665b080d703067b0ce8a0e20181b",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/88466d22b64b665b080d703067b0ce8a0e20181b",
        "buggy_code": "alias_doc += ''.join(\"{_doc_alias_string} `numpy.{alias}`: {doc}.\\n    \"",
        "fixed_code": "alias_doc += ''.join(f\"{_doc_alias_string} `numpy.{alias}`: {doc}.\\n    \"",
        "patch": "@@ -80,7 +80,7 @@ def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):\n                             for alias in fixed_aliases)\n     else:\n         alias_doc = ''\n-    alias_doc += ''.join(\"{_doc_alias_string} `numpy.{alias}`: {doc}.\\n    \"\n+    alias_doc += ''.join(f\"{_doc_alias_string} `numpy.{alias}`: {doc}.\\n    \"\n                          for (alias_type, alias, doc) in possible_aliases if alias_type is o)\n \n     docstring = f\"\"\""
    },
    {
        "commit_id": "606fa1fb6d4ff573675ca146f880c7aa012b42c8",
        "commit_message": "Merge pull request #22016 from mattip/revert21977\n\nBUG: Revert using __array_ufunc__ for MaskedArray",
        "commit_url": "https://github.com/numpy/numpy/commit/606fa1fb6d4ff573675ca146f880c7aa012b42c8",
        "buggy_code": "assert_array_equal(out.data, [[1], [4], [6], [8], [1]])",
        "fixed_code": "assert_array_equal(out.data, [[1], [1], [1], [1], [1]])",
        "patch": "@@ -780,7 +780,7 @@ def test_subclass(self):\n                      mask=[[False, False], [True, False],\n                            [False, True], [True, True], [False, False]])\n         out = diff(x)\n-        assert_array_equal(out.data, [[1], [4], [6], [8], [1]])\n+        assert_array_equal(out.data, [[1], [1], [1], [1], [1]])\n         assert_array_equal(out.mask, [[False], [True],\n                                       [True], [True], [False]])\n         assert_(type(out) is type(x))"
    },
    {
        "commit_id": "871a1f9e7ac791acde6664498cf374ed88b0c850",
        "commit_message": "Don't regenerate the descriptor unnecessarily.\n\nFix a false mismatch. Separate dtype objects, even if equivalent,\ncause distinct array views to be created.",
        "commit_url": "https://github.com/numpy/numpy/commit/871a1f9e7ac791acde6664498cf374ed88b0c850",
        "buggy_code": "descr = [('v', int, 3), ('x', [('y', float)])]",
        "fixed_code": "descr = np.dtype([('v', int, 3), ('x', [('y', float)])])",
        "patch": "@@ -5387,7 +5387,7 @@ def test_ufunc_with_out_varied():\n \n \n def test_astype_mask_ordering():\n-    descr = [('v', int, 3), ('x', [('y', float)])]\n+    descr = np.dtype([('v', int, 3), ('x', [('y', float)])])\n     x = array([\n         [([1, 2, 3], (1.0,)),  ([1, 2, 3], (2.0,))],\n         [([1, 2, 3], (3.0,)),  ([1, 2, 3], (4.0,))]], dtype=descr)"
    },
    {
        "commit_id": "b89a1d219d493d62f0253b8f276b84cb61ed044a",
        "commit_message": "Merge pull request #21890 from HaoZeke/fixSylcotRegression\n\nBUG: Fix KeyError in crackfortran operator support",
        "commit_url": "https://github.com/numpy/numpy/commit/b89a1d219d493d62f0253b8f276b84cb61ed044a",
        "buggy_code": "not b['body'] and not b['implementedby']:",
        "fixed_code": "not b['body'] and not b.get('implementedby'):",
        "patch": "@@ -2191,7 +2191,7 @@ def analyzebody(block, args, tab=''):\n             as_ = args\n         b = postcrack(b, as_, tab=tab + '\\t')\n         if b['block'] in ['interface', 'abstract interface'] and \\\n-           not b['body'] and not b['implementedby']:\n+           not b['body'] and not b.get('implementedby'):\n             if 'f2pyenhancements' not in b:\n                 continue\n         if b['block'].replace(' ', '') == 'pythonmodule':"
    },
    {
        "commit_id": "1e98d60a1e68f94bdfe4eaedd6229f25b7554a74",
        "commit_message": "Adding docs about the C-API incompatibility error and pointing to the docs in the error",
        "commit_url": "https://github.com/numpy/numpy/commit/1e98d60a1e68f94bdfe4eaedd6229f25b7554a74",
        "buggy_code": "\"https://numpy.org/devdocs/user/troubleshooting-importerror.html#troubleshooting-importerror \"\\",
        "fixed_code": "\"https://numpy.org/devdocs/user/troubleshooting-importerror.html#c-api-incompatibility \"\\",
        "patch": "@@ -80,7 +80,7 @@\n       PyErr_Format(PyExc_RuntimeError, \"module compiled against \"\\\n              \"API version 0x%%x but this version of numpy is 0x%%x .\"\\\n              \"Check the section C-API incompatibility at the Troubleshooting ImportError section at \"\\ \n-             \"https://numpy.org/devdocs/user/troubleshooting-importerror.html#troubleshooting-importerror \"\\\n+             \"https://numpy.org/devdocs/user/troubleshooting-importerror.html#c-api-incompatibility \"\\\n               \"for indications on how to solve this problem .\", \\\n              (int) NPY_FEATURE_VERSION, (int) PyArray_GetNDArrayCFeatureVersion());\n       return -1;"
    },
    {
        "commit_id": "9d0f6e5b1c7d5fa51f0734fbb09f392453e8c7cd",
        "commit_message": "Changing error type in test for nan values in poly test",
        "commit_url": "https://github.com/numpy/numpy/commit/9d0f6e5b1c7d5fa51f0734fbb09f392453e8c7cd",
        "buggy_code": "assert_raises(np.linalg.LinAlgError, getattr, p, \"r\")",
        "fixed_code": "assert_raises(ValueError, getattr, p, \"r\")",
        "patch": "@@ -53,7 +53,7 @@ def p(x, y):\n     def test_poly1d_nan_roots(self):\n         # Ticket #396\n         p = np.poly1d([np.nan, np.nan, 1], r=False)\n-        assert_raises(np.linalg.LinAlgError, getattr, p, \"r\")\n+        assert_raises(ValueError, getattr, p, \"r\")\n \n     def test_mem_polymul(self):\n         # Ticket #448"
    },
    {
        "commit_id": "235aa7d7a570139e9f15efc3be119f5a2c4d9578",
        "commit_message": "BUG: Fix KeyError in crackfortran operator support",
        "commit_url": "https://github.com/numpy/numpy/commit/235aa7d7a570139e9f15efc3be119f5a2c4d9578",
        "buggy_code": "not b['body'] and not b['implementedby']:",
        "fixed_code": "not b['body'] and not b.get('implementedby'):",
        "patch": "@@ -2191,7 +2191,7 @@ def analyzebody(block, args, tab=''):\n             as_ = args\n         b = postcrack(b, as_, tab=tab + '\\t')\n         if b['block'] in ['interface', 'abstract interface'] and \\\n-           not b['body'] and not b['implementedby']:\n+           not b['body'] and not b.get('implementedby'):\n             if 'f2pyenhancements' not in b:\n                 continue\n         if b['block'].replace(' ', '') == 'pythonmodule':"
    },
    {
        "commit_id": "b0b523ec0980e46ca735ce96c7c976c4fdd28424",
        "commit_message": "Merge pull request #21885 from ssanya942/patch-3\n\nDOC: Link to PEP-484 in the typing docs",
        "commit_url": "https://github.com/numpy/numpy/commit/b0b523ec0980e46ca735ce96c7c976c4fdd28424",
        "buggy_code": "Large parts of the NumPy API have PEP-484-style type annotations. In",
        "fixed_code": "Large parts of the NumPy API have :pep:`484`-style type annotations. In",
        "patch": "@@ -5,7 +5,7 @@\n \n .. versionadded:: 1.20\n \n-Large parts of the NumPy API have PEP-484-style type annotations. In\n+Large parts of the NumPy API have :pep:`484`-style type annotations. In\n addition a number of type aliases are available to users, most prominently\n the two below:\n "
    },
    {
        "commit_id": "7cbeb8e906339c8eeae79d7ba1ea70a719cd76c3",
        "commit_message": "DOC: Fix link to PEP-484\n\nCo-authored-by: Bas van Beek <43369155+BvB93@users.noreply.github.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/7cbeb8e906339c8eeae79d7ba1ea70a719cd76c3",
        "buggy_code": "Large parts of the NumPy API have PEP-484-style[https://peps.python.org/pep-0484/] type annotations. In",
        "fixed_code": "Large parts of the NumPy API have :pep:`484`-style type annotations. In",
        "patch": "@@ -5,7 +5,7 @@\n \n .. versionadded:: 1.20\n \n-Large parts of the NumPy API have PEP-484-style[https://peps.python.org/pep-0484/] type annotations. In\n+Large parts of the NumPy API have :pep:`484`-style type annotations. In\n addition a number of type aliases are available to users, most prominently\n the two below:\n "
    },
    {
        "commit_id": "e67fe9f1a86013dbfd4a5ad2bd69aa6e7f60e1fb",
        "commit_message": "BUG: Use `keepdims` during normalization in `np.average` and `np.ma.average` (#21851)\n\nThe keepdims flag needs to be applied during the calculation of the sum of\r\nthe weights in np.average and np.ma.average.  Not passing it causes weights\r\nto broadcast incorrectly.\r\n\r\nFixes #21850",
        "commit_url": "https://github.com/numpy/numpy/commit/e67fe9f1a86013dbfd4a5ad2bd69aa6e7f60e1fb",
        "buggy_code": "scl = wgt.sum(axis=axis, dtype=result_dtype)",
        "fixed_code": "scl = wgt.sum(axis=axis, dtype=result_dtype, **keepdims_kw)",
        "patch": "@@ -542,7 +542,7 @@ def average(a, axis=None, weights=None, returned=False, *,\n             wgt = np.broadcast_to(wgt, (a.ndim-1)*(1,) + wgt.shape)\n             wgt = wgt.swapaxes(-1, axis)\n \n-        scl = wgt.sum(axis=axis, dtype=result_dtype)\n+        scl = wgt.sum(axis=axis, dtype=result_dtype, **keepdims_kw)\n         if np.any(scl == 0.0):\n             raise ZeroDivisionError(\n                 \"Weights sum to zero, can't be normalized\")"
    },
    {
        "commit_id": "e67fe9f1a86013dbfd4a5ad2bd69aa6e7f60e1fb",
        "commit_message": "BUG: Use `keepdims` during normalization in `np.average` and `np.ma.average` (#21851)\n\nThe keepdims flag needs to be applied during the calculation of the sum of\r\nthe weights in np.average and np.ma.average.  Not passing it causes weights\r\nto broadcast incorrectly.\r\n\r\nFixes #21850",
        "commit_url": "https://github.com/numpy/numpy/commit/e67fe9f1a86013dbfd4a5ad2bd69aa6e7f60e1fb",
        "buggy_code": "scl = wgt.sum(axis=axis, dtype=result_dtype)",
        "fixed_code": "scl = wgt.sum(axis=axis, dtype=result_dtype, **keepdims_kw)",
        "patch": "@@ -645,7 +645,7 @@ def average(a, axis=None, weights=None, returned=False, *,\n             wgt = wgt*(~a.mask)\n             wgt.mask |= a.mask\n \n-        scl = wgt.sum(axis=axis, dtype=result_dtype)\n+        scl = wgt.sum(axis=axis, dtype=result_dtype, **keepdims_kw)\n         avg = np.multiply(a, wgt,\n                           dtype=result_dtype).sum(axis, **keepdims_kw) / scl\n "
    },
    {
        "commit_id": "fecd51b1028e945f916e8198b67b93d0d1c56aeb",
        "commit_message": "Merge pull request #21794 from WarrenWeckesser/fix-loadtxt-error-msg\n\nBUG: lib: A loadtxt error message had two values reversed.",
        "commit_url": "https://github.com/numpy/numpy/commit/fecd51b1028e945f916e8198b67b93d0d1c56aeb",
        "buggy_code": "match=\"invalid column index -2 at row 1 with 2 columns\"):",
        "fixed_code": "match=\"invalid column index -2 at row 2 with 1 columns\"):",
        "patch": "@@ -253,7 +253,7 @@ def test_ragged_usecols():\n \n     txt = StringIO(\"0,0,XXX\\n0\\n0,XXX,XXX,0,XXX\\n\")\n     with pytest.raises(ValueError,\n-                match=\"invalid column index -2 at row 1 with 2 columns\"):\n+                match=\"invalid column index -2 at row 2 with 1 columns\"):\n         # There is no -2 column in the second row:\n         np.loadtxt(txt, dtype=float, delimiter=\",\", usecols=[0, -2])\n "
    },
    {
        "commit_id": "a9a364b9782d2a615de858c07640e88d9d141992",
        "commit_message": "BUG: lib: A loadtxt error message had two values reversed.\n\nFix the reversed arguments to the call of PyErr_Format() that generates\nthe exception for an invalid index in usecols.\n\nAlso fix the format characters in several other calls of PyErr_Format()\nwhere the arguments are Py_ssize_t.",
        "commit_url": "https://github.com/numpy/numpy/commit/a9a364b9782d2a615de858c07640e88d9d141992",
        "buggy_code": "match=\"invalid column index -2 at row 1 with 2 columns\"):",
        "fixed_code": "match=\"invalid column index -2 at row 2 with 1 columns\"):",
        "patch": "@@ -253,7 +253,7 @@ def test_ragged_usecols():\n \n     txt = StringIO(\"0,0,XXX\\n0\\n0,XXX,XXX,0,XXX\\n\")\n     with pytest.raises(ValueError,\n-                match=\"invalid column index -2 at row 1 with 2 columns\"):\n+                match=\"invalid column index -2 at row 2 with 1 columns\"):\n         # There is no -2 column in the second row:\n         np.loadtxt(txt, dtype=float, delimiter=\",\", usecols=[0, -2])\n "
    },
    {
        "commit_id": "2d4452477245f1332b607c2899a12f6e398a8675",
        "commit_message": "Merge pull request #21764 from LostBenjamin/patch-1\n\nBUG: Fix a potential variable misuse bug",
        "commit_url": "https://github.com/numpy/numpy/commit/2d4452477245f1332b607c2899a12f6e398a8675",
        "buggy_code": "bgcode = 40 + _colour_codes.get(fg.lower(), 7)",
        "fixed_code": "bgcode = 40 + _colour_codes.get(bg.lower(), 7)",
        "patch": "@@ -358,7 +358,7 @@ def colour_text(s, fg=None, bg=None, bold=False):\n             fgcode = 30 + _colour_codes.get(fg.lower(), 0)\n             seq.append(str(fgcode))\n         if bg:\n-            bgcode = 40 + _colour_codes.get(fg.lower(), 7)\n+            bgcode = 40 + _colour_codes.get(bg.lower(), 7)\n             seq.append(str(bgcode))\n         if seq:\n             return '\\x1b[%sm%s\\x1b[0m' % (';'.join(seq), s)"
    },
    {
        "commit_id": "4d0b23eccc23718e420dfd29b2023ecf90300036",
        "commit_message": "Fix a potential variable misuse bug",
        "commit_url": "https://github.com/numpy/numpy/commit/4d0b23eccc23718e420dfd29b2023ecf90300036",
        "buggy_code": "bgcode = 40 + _colour_codes.get(fg.lower(), 7)",
        "fixed_code": "bgcode = 40 + _colour_codes.get(bg.lower(), 7)",
        "patch": "@@ -358,7 +358,7 @@ def colour_text(s, fg=None, bg=None, bold=False):\n             fgcode = 30 + _colour_codes.get(fg.lower(), 0)\n             seq.append(str(fgcode))\n         if bg:\n-            bgcode = 40 + _colour_codes.get(fg.lower(), 7)\n+            bgcode = 40 + _colour_codes.get(bg.lower(), 7)\n             seq.append(str(bgcode))\n         if seq:\n             return '\\x1b[%sm%s\\x1b[0m' % (';'.join(seq), s)"
    },
    {
        "commit_id": "7a85f1f6f2166b69b4199c21b91d9634a703b452",
        "commit_message": "Fix lint",
        "commit_url": "https://github.com/numpy/numpy/commit/7a85f1f6f2166b69b4199c21b91d9634a703b452",
        "buggy_code": "else: # handle windows",
        "fixed_code": "else:  # handle windows",
        "patch": "@@ -42,7 +42,7 @@ def calc_info(self):\n                 size_t_size = sysconfig.get_config_var(\"SIZEOF_SIZE_T\")\n                 if size_t_size:\n                     maxsize = 2**(size_t_size - 1) - 1\n-                else: # handle windows\n+                else:  # handle windows\n                     maxsize = sys.maxsize\n                 if maxsize > 2**32:\n                     # Build lapack-lite in 64-bit integer mode."
    },
    {
        "commit_id": "ac624d012cc0c3f90da4593e7bb8d9d335fa9696",
        "commit_message": "MAINT: Simplify element setting and use it for filling\n\nThis slightly modifies the behaviour of `arr.fill()` to be\n`arr.fill(scalar)`, i.e. match `arr1d[0] = scalar`, rather than\n`arr.fill(np.asarray(scalar))`, which subtely different!\n(Note that object was already special cased to have the scalar\nlogic.)\n\nOtherwise, `PyArray_Pack` is now the actual, full featured, \"scalar\"\nassignment logic.  It is a bit strange due to that quantity/masked\narray issue, but there is nothing to be done about it.\nThe simplifications in `PyArray_AssignFromCache` should not cause\nany change in practice, because non 0-D arrays would have been\nrejected earlier on in that path.\n(Basically, it does not need the full `PyArray_Pack` logic, but that\nis fine, I intially split the two, but consolidated them again.)",
        "commit_url": "https://github.com/numpy/numpy/commit/ac624d012cc0c3f90da4593e7bb8d9d335fa9696",
        "buggy_code": "data.fill(0)",
        "fixed_code": "buf.fill(0)",
        "patch": "@@ -68,8 +68,8 @@ def _aligned_zeros(shape, dtype=float, order=\"C\", align=None):\n     # Note: slices producing 0-size arrays do not necessarily change\n     # data pointer --- so we use and allocate size+1\n     buf = buf[offset:offset+size+1][:-1]\n+    buf.fill(0)\n     data = np.ndarray(shape, dtype, buf, order=order)\n-    data.fill(0)\n     return data\n \n "
    },
    {
        "commit_id": "71f7f7c9df592094c3ca8cfb45cea2211de24a58",
        "commit_message": "ENH: Implement string comparison ufuncs (or almost) (#21041)\n\n* ENH: Implement string comparison ufuncs (or almost)\r\n\r\nThis makes all comparison operators and ufuncs work on strings\r\nusing the ufunc machinery.\r\nIt requires a half-manual \"ufunc\" to keep supporting void comparisons\r\nand especially `np.compare_chararrays` (that one may have a bit more\r\noverhead now).\r\n\r\nIn general the new code should be much faster, and has a lot of easier\r\noptimization potential.  It is also much simpler since it can outsource\r\nsome complexities to the ufunc/iterator machinery.\r\n\r\nThis further fixes a couple of bugs with byte-swapped strings.\r\n\r\nThe backward compatibility related change is that using the normal\r\nufunc machinery means that string comparisons between string and\r\nunicode now give a `FutureWarning` (instead of just False).\r\n\r\n* MAINT: Do not use C99 tagged struct init in C++\r\n\r\nC++ does not like it (at least not before C++20)... GCC and clang\r\ndon't seem to mind, but MSVC seems to.\r\n\r\n* BENCH: Add basic string comparison benchmarks\r\n\r\n* DOC,STY: Fixup string-comparisons comments based on review\r\n\r\nThanks to Marten's comments, a few clarfications and slight fixups.\r\n\r\n* ENH: Use `memcmp` because it may be faster for the byte case\r\n\r\n* TST: Improve string and unicode comparison tests.\r\n\r\n* MAINT: Use switch statement based on review\r\n\r\nAs suggested be Serge.\r\n\r\nCo-authored-by: Serge Guelton <serge.guelton@telecom-bretagne.eu>\r\n\r\n* TST: Make unicode byte-swap test slightly more concrete\r\n\r\nThe issue is that the `view` needs to use native byte-order, so\r\njust ensure native byte-order for the view, and then do another cast\r\nto get it right.\r\n\r\n* BUG: Add `np.compare_chararrays` to test and fix typo\r\n\r\n* TST: Add test for empty string comparisons\r\n\r\n* TST: Fixup string test based on martens review\r\n\r\n* MAINT: Move definitions back into string_ufuncs.h\r\n\r\n* MAINT: Use enum class for comparison operator templating\r\n\r\nThis removes the need for a dynamic (or static) assert in the\r\nswitch statement.\r\n\r\n* Template version of add_loop to avoid redundant code\r\n\r\n* STY: Fixup style, two spaces, error is -1\r\n\r\n* STY: Small `string_ufuncs.cpp` fixups based on Serge's review\r\n\r\n* MAINT: Fix merge conflict (ensure_dtype_nbo was removed)\r\n\r\nCo-authored-by: Serge Guelton <serge.guelton@telecom-bretagne.eu>",
        "commit_url": "https://github.com/numpy/numpy/commit/71f7f7c9df592094c3ca8cfb45cea2211de24a58",
        "buggy_code": "assert_raises(ValueError, lambda x, y: x == y, a, b)",
        "fixed_code": "assert_warns(FutureWarning, lambda x, y: x == y, a, b)",
        "patch": "@@ -166,7 +166,7 @@ def test_string(self):\n         # For two string arrays, strings always raised the broadcasting error:\n         a = np.array(['a', 'b'])\n         b = np.array(['a', 'b', 'c'])\n-        assert_raises(ValueError, lambda x, y: x == y, a, b)\n+        assert_warns(FutureWarning, lambda x, y: x == y, a, b)\n \n         # The empty list is not cast to string, and this used to pass due\n         # to dtype mismatch; now (2018-06-21) it correctly leads to a"
    },
    {
        "commit_id": "0587534a6a8cf9b29b97c8d731e8d27c15a16432",
        "commit_message": "Merge pull request #21707 from kanavin/fix-repro\n\nMAINT: generate_umath.py: do not write full path into output files",
        "commit_url": "https://github.com/numpy/numpy/commit/0587534a6a8cf9b29b97c8d731e8d27c15a16432",
        "buggy_code": "\"\"\") % (filename, code1, code2, code3)",
        "fixed_code": "\"\"\") % (os.path.basename(filename), code1, code2, code3)",
        "patch": "@@ -1236,7 +1236,7 @@ def make_code(funcdict, filename):\n \n         return 0;\n     }\n-    \"\"\") % (filename, code1, code2, code3)\n+    \"\"\") % (os.path.basename(filename), code1, code2, code3)\n     return code\n \n "
    },
    {
        "commit_id": "5c0ecb52890f92d43cf70519cd5491b8415b3710",
        "commit_message": "MAINT,DOC: Fix doc fragments and tests",
        "commit_url": "https://github.com/numpy/numpy/commit/5c0ecb52890f92d43cf70519cd5491b8415b3710",
        "buggy_code": "'doc', 'source', 'f2py'))",
        "fixed_code": "'doc', 'source', 'f2py', 'code'))",
        "patch": "@@ -11,7 +11,7 @@ def get_docdir():\n     return os.path.abspath(os.path.join(\n         os.path.dirname(__file__),\n         '..', '..', '..',\n-        'doc', 'source', 'f2py'))\n+        'doc', 'source', 'f2py', 'code'))\n \n \n pytestmark = pytest.mark.skipif("
    },
    {
        "commit_id": "f20d90cc2598c95dbcf7e0246f83499f4f4c5c27",
        "commit_message": "TST: Fix build by changing call signature",
        "commit_url": "https://github.com/numpy/numpy/commit/f20d90cc2598c95dbcf7e0246f83499f4f4c5c27",
        "buggy_code": "res = f(callback, cu, len(cu))",
        "fixed_code": "res = f(callback, cu, cu.size)",
        "patch": "@@ -116,7 +116,7 @@ def callback(cu, lencu):\n \n         f = getattr(self.module, \"string_callback_array\")\n         for cu in [cu1, cu2, cu3]:\n-            res = f(callback, cu, len(cu))\n+            res = f(callback, cu, cu.size)\n             assert res == 0\n \n     def test_threadsafety(self):"
    },
    {
        "commit_id": "d4e11c7a2eb64861275facb076d47ccd135fa28c",
        "commit_message": "ENH: Support character string arrays\n\nTST: added test for issue #18684\n\nENH: f2py opens files with correct encoding, fixes #635\n\nTST: added test for issue #6308\n\nTST: added test for issue #4519\n\nTST: added test for issue #3425\n\nENH: Implement user-defined hooks support for post-processing f2py data structure. Implement character BC hook.\n\nENH: Add support for detecting utf-16 and utf-32 encodings.",
        "commit_url": "https://github.com/numpy/numpy/commit/d4e11c7a2eb64861275facb076d47ccd135fa28c",
        "buggy_code": "assert t(23) == b\"2\"",
        "fixed_code": "assert t(\"23\") == b\"2\"",
        "patch": "@@ -10,7 +10,7 @@\n class TestReturnCharacter(util.F2PyTest):\n     def check_function(self, t, tname):\n         if tname in [\"t0\", \"t1\", \"s0\", \"s1\"]:\n-            assert t(23) == b\"2\"\n+            assert t(\"23\") == b\"2\"\n             r = t(\"ab\")\n             assert r == b\"a\"\n             r = t(array(\"ab\"))"
    },
    {
        "commit_id": "84eeca630ec9c5bf580bc456035c87d8591c1389",
        "commit_message": "DIC: Misc RST reformatting.\n\nThis contains various RST reformatting.\n\nOne, moving `(C)` one line up, is specific to a bug in tree-sitter-rst\nthat mis parses this section. Another is adding one black line for a\nsimilar reason where `..` is seen as section underline by\ntree-sitter-rst.\n\nThis is some shuffling of section underline: try to be consitant,\n`=`, then `-`, then `~`, with this refactor there is also no more\nsection that use backticks as underline.\n\nNote in particular that non-consitency of underline lead to a problem in\ndatetime64 section where \"weekmasks\" (underlined with `-`) were actually\na level-4 heading instead of a level 2 or 3 I guess, and thus were\nnested under the `busday_count()` section.\n\nYou'll note also 2 formulas that are under double-quotes as they are not\nreferences.",
        "commit_url": "https://github.com/numpy/numpy/commit/84eeca630ec9c5bf580bc456035c87d8591c1389",
        "buggy_code": "More generally, if `ndim(a) = r > 0` and `ndim(b) = s > 0`::",
        "fixed_code": "More generally, if ``ndim(a) = r > 0`` and ``ndim(b) = s > 0``::",
        "patch": "@@ -287,7 +287,7 @@ def inner(a, b):\n \n         np.inner(a, b) = sum(a[:]*b[:])\n \n-    More generally, if `ndim(a) = r > 0` and `ndim(b) = s > 0`::\n+    More generally, if ``ndim(a) = r > 0`` and ``ndim(b) = s > 0``::\n \n         np.inner(a, b) = np.tensordot(a, b, axes=(-1,-1))\n "
    },
    {
        "commit_id": "df01bb56d56cbdb82deb543cb5824074b8659c1b",
        "commit_message": "Merge pull request #21659 from NamamiShanker/run_main_bug\n\nBUG: Fix a bug left after f2py2e refactor",
        "commit_url": "https://github.com/numpy/numpy/commit/df01bb56d56cbdb82deb543cb5824074b8659c1b",
        "buggy_code": "repr(postlist[i]['block'])))",
        "fixed_code": "repr(plist['block'])))",
        "patch": "@@ -467,7 +467,7 @@ def run_main(comline_list):\n                 errmess(\n                     'Tip: If your original code is Fortran source then you must use -m option.\\n')\n             raise TypeError('All blocks must be python module blocks but got %s' % (\n-                repr(postlist[i]['block'])))\n+                repr(plist['block'])))\n     auxfuncs.debugoptions = options['debug']\n     f90mod_rules.options = options\n     auxfuncs.wrapfuncs = options['wrapfuncs']"
    },
    {
        "commit_id": "ce47eaa84b02ca41ec87d75cb5d70eab56de43b3",
        "commit_message": "BUG: Fix a refactor leftover bug",
        "commit_url": "https://github.com/numpy/numpy/commit/ce47eaa84b02ca41ec87d75cb5d70eab56de43b3",
        "buggy_code": "repr(postlist[i]['block'])))",
        "fixed_code": "repr(plist['block'])))",
        "patch": "@@ -467,7 +467,7 @@ def run_main(comline_list):\n                 errmess(\n                     'Tip: If your original code is Fortran source then you must use -m option.\\n')\n             raise TypeError('All blocks must be python module blocks but got %s' % (\n-                repr(postlist[i]['block'])))\n+                repr(plist['block'])))\n     auxfuncs.debugoptions = options['debug']\n     f90mod_rules.options = options\n     auxfuncs.wrapfuncs = options['wrapfuncs']"
    },
    {
        "commit_id": "49f278f7c993985ab47ba1ad85cb9c69e8f2bdcc",
        "commit_message": "DOC: Fix axis naming in `argpartition` docs (#21098)\n\n* Update fromnumeric.py\r\n\r\nFixing DOC: typo on website for numpy.argpartition #21093\r\n\r\n* Update fromnumeric.py\r\n\r\nFixing Typo\r\n\r\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/49f278f7c993985ab47ba1ad85cb9c69e8f2bdcc",
        "buggy_code": "More generally, ``np.take_along_axis(a, index_array, axis)``",
        "fixed_code": "More generally, ``np.take_along_axis(a, index_array, axis=axis)``",
        "patch": "@@ -804,7 +804,7 @@ def argpartition(a, kth, axis=-1, kind='introselect', order=None):\n     index_array : ndarray, int\n         Array of indices that partition `a` along the specified axis.\n         If `a` is one-dimensional, ``a[index_array]`` yields a partitioned `a`.\n-        More generally, ``np.take_along_axis(a, index_array, axis)``\n+        More generally, ``np.take_along_axis(a, index_array, axis=axis)``\n         always yields the partitioned `a`, irrespective of dimensionality.\n \n     See Also"
    },
    {
        "commit_id": "d4732a26d2d044eee59bf6f889666a26ead5db92",
        "commit_message": "Merge pull request #21504 from Yulv-git/typos1\n\nMAINT: Fix some typos.",
        "commit_url": "https://github.com/numpy/numpy/commit/d4732a26d2d044eee59bf6f889666a26ead5db92",
        "buggy_code": "\"\"\"Returns True if the the dtype is a parametric legacy dtype (itemsize",
        "fixed_code": "\"\"\"Returns True if the dtype is a parametric legacy dtype (itemsize",
        "patch": "@@ -135,7 +135,7 @@ def scalar_instances(times=True, extended_precision=True, user_dtype=True):\n \n \n def is_parametric_dtype(dtype):\n-    \"\"\"Returns True if the the dtype is a parametric legacy dtype (itemsize\n+    \"\"\"Returns True if the dtype is a parametric legacy dtype (itemsize\n     is 0, or a datetime without units)\n     \"\"\"\n     if dtype.itemsize == 0:"
    },
    {
        "commit_id": "d4732a26d2d044eee59bf6f889666a26ead5db92",
        "commit_message": "Merge pull request #21504 from Yulv-git/typos1\n\nMAINT: Fix some typos.",
        "commit_url": "https://github.com/numpy/numpy/commit/d4732a26d2d044eee59bf6f889666a26ead5db92",
        "buggy_code": "raise NotImplementedError(\"Currently limited to atmost 2D array.\")",
        "fixed_code": "raise NotImplementedError(\"Currently limited to at most 2D array.\")",
        "patch": "@@ -1844,7 +1844,7 @@ def notmasked_contiguous(a, axis=None):\n     a = asarray(a)\n     nd = a.ndim\n     if nd > 2:\n-        raise NotImplementedError(\"Currently limited to atmost 2D array.\")\n+        raise NotImplementedError(\"Currently limited to at most 2D array.\")\n     if axis is None or nd == 1:\n         return flatnotmasked_contiguous(a)\n     #"
    },
    {
        "commit_id": "7332a698c8194c6e680510da086678fe07d9cf9d",
        "commit_message": "Fix some typos.",
        "commit_url": "https://github.com/numpy/numpy/commit/7332a698c8194c6e680510da086678fe07d9cf9d",
        "buggy_code": "\"\"\"Returns True if the the dtype is a parametric legacy dtype (itemsize",
        "fixed_code": "\"\"\"Returns True if the dtype is a parametric legacy dtype (itemsize",
        "patch": "@@ -135,7 +135,7 @@ def scalar_instances(times=True, extended_precision=True, user_dtype=True):\n \n \n def is_parametric_dtype(dtype):\n-    \"\"\"Returns True if the the dtype is a parametric legacy dtype (itemsize\n+    \"\"\"Returns True if the dtype is a parametric legacy dtype (itemsize\n     is 0, or a datetime without units)\n     \"\"\"\n     if dtype.itemsize == 0:"
    },
    {
        "commit_id": "7332a698c8194c6e680510da086678fe07d9cf9d",
        "commit_message": "Fix some typos.",
        "commit_url": "https://github.com/numpy/numpy/commit/7332a698c8194c6e680510da086678fe07d9cf9d",
        "buggy_code": "raise NotImplementedError(\"Currently limited to atmost 2D array.\")",
        "fixed_code": "raise NotImplementedError(\"Currently limited to at most 2D array.\")",
        "patch": "@@ -1844,7 +1844,7 @@ def notmasked_contiguous(a, axis=None):\n     a = asarray(a)\n     nd = a.ndim\n     if nd > 2:\n-        raise NotImplementedError(\"Currently limited to atmost 2D array.\")\n+        raise NotImplementedError(\"Currently limited to at most 2D array.\")\n     if axis is None or nd == 1:\n         return flatnotmasked_contiguous(a)\n     #"
    },
    {
        "commit_id": "fd45ab90e9ce6f6724a57f215592fd3066a7436c",
        "commit_message": "Merge pull request #21500 from seberg/test-fixup-ma-ndenumerate\n\nTST: Fix uninitialized value in masked ndenumerate test",
        "commit_url": "https://github.com/numpy/numpy/commit/fd45ab90e9ce6f6724a57f215592fd3066a7436c",
        "buggy_code": "ordinary = np.ndarray(6).reshape((1, 3, 2))",
        "fixed_code": "ordinary = np.arange(6.).reshape((1, 3, 2))",
        "patch": "@@ -1674,7 +1674,7 @@ def test_shape_scalar(self):\n class TestNDEnumerate:\n \n     def test_ndenumerate_nomasked(self):\n-        ordinary = np.ndarray(6).reshape((1, 3, 2))\n+        ordinary = np.arange(6.).reshape((1, 3, 2))\n         empty_mask = np.zeros_like(ordinary, dtype=bool)\n         with_mask = masked_array(ordinary, mask=empty_mask)\n         assert_equal(list(np.ndenumerate(ordinary)),"
    },
    {
        "commit_id": "6996397b00e4d2dd609deca430d05f6e80e8cea2",
        "commit_message": "TST: Fix uninitialized value in masked ndenumerate test\n\nThe test used unintialized values, if NaN happened to be there\nthe test would fail (and generally, uninitialized values being used\nin tests is bad, since it shows up in valgrind).",
        "commit_url": "https://github.com/numpy/numpy/commit/6996397b00e4d2dd609deca430d05f6e80e8cea2",
        "buggy_code": "ordinary = np.ndarray(6).reshape((1, 3, 2))",
        "fixed_code": "ordinary = np.arange(6.).reshape((1, 3, 2))",
        "patch": "@@ -1674,7 +1674,7 @@ def test_shape_scalar(self):\n class TestNDEnumerate:\n \n     def test_ndenumerate_nomasked(self):\n-        ordinary = np.ndarray(6).reshape((1, 3, 2))\n+        ordinary = np.arange(6.).reshape((1, 3, 2))\n         empty_mask = np.zeros_like(ordinary, dtype=bool)\n         with_mask = masked_array(ordinary, mask=empty_mask)\n         assert_equal(list(np.ndenumerate(ordinary)),"
    },
    {
        "commit_id": "a73755455ae73dd7fe93836c72e72c6ffaee7977",
        "commit_message": "Merge pull request #21415 from HaoZeke/fixBLDf2py\n\nBUG: Fix handling of skip-empty-wrappers",
        "commit_url": "https://github.com/numpy/numpy/commit/a73755455ae73dd7fe93836c72e72c6ffaee7977",
        "buggy_code": "r'--((no-|)(wrap-functions|lower)|debug-capi|quiet)|-include')",
        "fixed_code": "r'--((no-|)(wrap-functions|lower)|debug-capi|quiet|skip-empty-wrappers)|-include')",
        "patch": "@@ -531,7 +531,7 @@ def run_compile():\n         sysinfo_flags = [f[7:] for f in sysinfo_flags]\n \n     _reg2 = re.compile(\n-        r'--((no-|)(wrap-functions|lower)|debug-capi|quiet)|-include')\n+        r'--((no-|)(wrap-functions|lower)|debug-capi|quiet|skip-empty-wrappers)|-include')\n     f2py_flags = [_m for _m in sys.argv[1:] if _reg2.match(_m)]\n     sys.argv = [_m for _m in sys.argv if _m not in f2py_flags]\n     f2py_flags2 = []"
    },
    {
        "commit_id": "4cd63418bc3134af68033e4f10d7f9958107703a",
        "commit_message": "BUG: Fix handling of skip-empty-wrappers",
        "commit_url": "https://github.com/numpy/numpy/commit/4cd63418bc3134af68033e4f10d7f9958107703a",
        "buggy_code": "r'--((no-|)(wrap-functions|lower)|debug-capi|quiet)|-include')",
        "fixed_code": "r'--((no-|)(wrap-functions|lower)|debug-capi|quiet|skip-empty-wrappers)|-include')",
        "patch": "@@ -531,7 +531,7 @@ def run_compile():\n         sysinfo_flags = [f[7:] for f in sysinfo_flags]\n \n     _reg2 = re.compile(\n-        r'--((no-|)(wrap-functions|lower)|debug-capi|quiet)|-include')\n+        r'--((no-|)(wrap-functions|lower)|debug-capi|quiet|skip-empty-wrappers)|-include')\n     f2py_flags = [_m for _m in sys.argv[1:] if _reg2.match(_m)]\n     sys.argv = [_m for _m in sys.argv if _m not in f2py_flags]\n     f2py_flags2 = []"
    },
    {
        "commit_id": "91a3e3a500aa121cf53223b1cc75adb46979bb15",
        "commit_message": "MAINT: Translate ieee754.c.src to C++ using templates. (#21367)\n\n* [Road to C++] Rename ieee754.c.src into ieee754.cpp.src\r\n\r\n* [Road to C++] Remove all use of internal template engine\r\n\r\nReplace them by regular C++ templates.\r\n\r\n* [Road to C++] mv ieee754.cpp.src ro ieee754.cpp\r\n\r\nClang-format it, and update build system accordingly.\r\n\r\n* Fix 'unnecessary parentheses in declaration of \u2018__NPY_UNUSED_TAGGEDc\u2019 [-Wparentheses]'\r\n\r\n* [Road to C++] Fix misc conversion issues in ieee754.cpp\r\n\r\n- hex float literal are not supported in C++\r\n- avoid overload issues when numpy_longdouble ultimately is equal to double\r\n- _statusfp2 exepcts unsigned arguments",
        "commit_url": "https://github.com/numpy/numpy/commit/91a3e3a500aa121cf53223b1cc75adb46979bb15",
        "buggy_code": "join('src', 'npymath', 'ieee754.c.src'),",
        "fixed_code": "join('src', 'npymath', 'ieee754.cpp'),",
        "patch": "@@ -769,7 +769,7 @@ def get_mathlib_info(*args):\n \n     npymath_sources = [join('src', 'npymath', 'npy_math_internal.h.src'),\n                        join('src', 'npymath', 'npy_math.c'),\n-                       join('src', 'npymath', 'ieee754.c.src'),\n+                       join('src', 'npymath', 'ieee754.cpp'),\n                        join('src', 'npymath', 'npy_math_complex.c.src'),\n                        join('src', 'npymath', 'halffloat.c')\n                        ]"
    },
    {
        "commit_id": "d59f7b0f307e2ad80d13c5078ff654c3c13df1e4",
        "commit_message": "BUG: Move FPE clearing to work around issue on clang\n\nI am not sure why the previous places led to (oddly) unreliable code\non some Mac clang versions.  Moving it here fixes it, so it is all fine.\n\nThere was previously some inlining, which we should be able to trust the\ncompiler to do (as an attempt to get back to the same result as the\nmacro version.\nBut it turned out the issue was moving down the FPE clearing till after\nwe know we actually do the operation.\n\nThis also removes an unused function for true division IIRC.",
        "commit_url": "https://github.com/numpy/numpy/commit/d59f7b0f307e2ad80d13c5078ff654c3c13df1e4",
        "buggy_code": "@pytest.mark.parametrize(\"sctype\", [np.float32, np.longdouble])",
        "fixed_code": "@pytest.mark.parametrize(\"sctype\", [np.float32, np.float64, np.longdouble])",
        "patch": "@@ -949,7 +949,7 @@ def test_scalar_integer_operation_divbyzero(dtype, operation):\n \n \n @pytest.mark.parametrize([\"__op__\", \"__rop__\", \"op\", \"cmp\"], ops_with_names)\n-@pytest.mark.parametrize(\"sctype\", [np.float32, np.longdouble])\n+@pytest.mark.parametrize(\"sctype\", [np.float32, np.float64, np.longdouble])\n def test_subclass_deferral(sctype, __op__, __rop__, op, cmp):\n     \"\"\"\n     This test covers scalar subclass deferral.  Note that this is exceedingly"
    },
    {
        "commit_id": "732ed25e4a1e3802d82a976f9541f74548b13e6f",
        "commit_message": "Merge pull request #21384 from code-review-doctor/fix-probably-meant-fstring\n\nMissing `f` prefix on f-strings fix",
        "commit_url": "https://github.com/numpy/numpy/commit/732ed25e4a1e3802d82a976f9541f74548b13e6f",
        "buggy_code": "dllname = 'Unknown platform {implementation}'",
        "fixed_code": "dllname = f'Unknown platform {implementation}'",
        "patch": "@@ -215,7 +215,7 @@ def find_python_dll():\n     elif implementation == 'PyPy':\n         dllname = f'libpypy{major_version}-c.dll'\n     else:\n-        dllname = 'Unknown platform {implementation}' \n+        dllname = f'Unknown platform {implementation}' \n     print(\"Looking for %s\" % dllname)\n     for folder in lib_dirs:\n         dll = os.path.join(folder, dllname)"
    },
    {
        "commit_id": "f8a62be72b0cd8a77eb8fe3e5f7f01284d4c37c8",
        "commit_message": " Fix issue probably-meant-fstring found at https://codereview.doctor",
        "commit_url": "https://github.com/numpy/numpy/commit/f8a62be72b0cd8a77eb8fe3e5f7f01284d4c37c8",
        "buggy_code": "dllname = 'Unknown platform {implementation}'",
        "fixed_code": "dllname = f'Unknown platform {implementation}'",
        "patch": "@@ -215,7 +215,7 @@ def find_python_dll():\n     elif implementation == 'PyPy':\n         dllname = f'libpypy{major_version}-c.dll'\n     else:\n-        dllname = 'Unknown platform {implementation}' \n+        dllname = f'Unknown platform {implementation}' \n     print(\"Looking for %s\" % dllname)\n     for folder in lib_dirs:\n         dll = os.path.join(folder, dllname)"
    },
    {
        "commit_id": "dc5aba5f04b7a59b49a6ffd4b635ba3d28de1469",
        "commit_message": "Merge pull request #21032 from jon-deng/fix-sphinx-doc-errors\n\nDOC: fix sphinx errors due to np.emath references",
        "commit_url": "https://github.com/numpy/numpy/commit/dc5aba5f04b7a59b49a6ffd4b635ba3d28de1469",
        "buggy_code": "lib.scimath.sqrt",
        "fixed_code": "emath.sqrt",
        "patch": "@@ -3817,7 +3817,7 @@ def add_newdoc(place, name, doc):\n \n     See Also\n     --------\n-    lib.scimath.sqrt\n+    emath.sqrt\n         A version which returns complex numbers when given negative reals.\n         Note: 0.0 and -0.0 are handled differently for complex inputs.\n "
    },
    {
        "commit_id": "b2e7534466abd6eded6b4d154fa0ea2a74369607",
        "commit_message": "DOC: various spell checks and typo fixes (#21314)\n\n* DOC: contigous -> contiguous\r\n\r\n* DOC: enlongated -> elongated\r\n\r\n* DOC: thuse -> thus\r\n\r\n* DOC: quantityt -> quantity\r\n\r\n* DOC: suppled -> supplied\r\n\r\n* DOC: intgrally -> integrally\r\n\r\n* DOC: assignnent -> assignment\r\n\r\n* DOC: homoegeneous -> homogeneous\r\n\r\n* DOC: interpereted -> interpreted\r\n\r\n* DOC: optimised -> optimized\r\n\r\n* DOC: Advantanges -> Advantages\r\n\r\n* DOC: realised -> realized\r\n\r\n* DOC: parametrizing -> parameterizing\r\n\r\n* DOC: realised -> realized\r\n\r\n* DOC: intrisics -> intrinsics\r\n\r\n* DOC: ablility -> ability\r\n\r\n* DOC: intrisic -> intrinsic\r\n\r\n* DOC: unversal -> universal\r\n\r\n* DOC: machnisms -> mechanisms\r\n\r\n* DOC: specfiy -> specify\r\n\r\n* DOC: exclution -> exclusion\r\n\r\n* DOC: optimzations -> optimizations\r\n\r\n* DOC: declrations -> declarations\r\n\r\n* DOC: auto-gernreated -> auto-generated\r\n\r\n* DOC: it highely recomaned -> it is highly recommended\r\n\r\n* DOC: exectuing -> executing\r\n\r\n* DOC: strectched -> stretched\r\n\r\n* DOC: foriegn -> foreign\r\n\r\n* DOC: indeded -> intended\r\n\r\n* DOC: multimdimensional -> multidimensional\r\n\r\n* DOC: supserseded -> superseded\r\n\r\n* DOC: generalisation -> generalization\r\n\r\n* FIX: whitespace before comma",
        "commit_url": "https://github.com/numpy/numpy/commit/b2e7534466abd6eded6b4d154fa0ea2a74369607",
        "buggy_code": "'(note that \u2014 here is a special, enlongated dash). Got: '",
        "fixed_code": "'(note that \u2014 here is a special, elongated dash). Got: '",
        "patch": "@@ -51,7 +51,7 @@ def nep_metadata():\n         if not tags['Title'].startswith(f'NEP {nr} \u2014 '):\n             raise RuntimeError(\n                 f'Title for NEP {nr} does not start with \"NEP {nr} \u2014 \" '\n-                '(note that \u2014 here is a special, enlongated dash). Got: '\n+                '(note that \u2014 here is a special, elongated dash). Got: '\n                 f'    {tags[\"Title\"]!r}')\n \n         if tags['Status'] in ('Accepted', 'Rejected', 'Withdrawn'):"
    },
    {
        "commit_id": "4457e37b39bfc660beb8be579b282e5acbae1b5f",
        "commit_message": "Fix a type hint in numpy.array_api",
        "commit_url": "https://github.com/numpy/numpy/commit/4457e37b39bfc660beb8be579b282e5acbae1b5f",
        "buggy_code": "def vector_norm(x: Array, /, *, axis: Optional[Union[int, Tuple[int, int]]] = None, keepdims: bool = False, ord: Optional[Union[int, float]] = 2) -> Array:",
        "fixed_code": "def vector_norm(x: Array, /, *, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False, ord: Optional[Union[int, float]] = 2) -> Array:",
        "patch": "@@ -384,7 +384,7 @@ def vecdot(x1: Array, x2: Array, /, *, axis: int = -1) -> Array:\n \n # The type for ord should be Optional[Union[int, float, Literal[np.inf,\n # -np.inf]]] but Literal does not support floating-point literals.\n-def vector_norm(x: Array, /, *, axis: Optional[Union[int, Tuple[int, int]]] = None, keepdims: bool = False, ord: Optional[Union[int, float]] = 2) -> Array:\n+def vector_norm(x: Array, /, *, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False, ord: Optional[Union[int, float]] = 2) -> Array:\n     \"\"\"\n     Array API compatible wrapper for :py:func:`np.linalg.norm <numpy.linalg.norm>`.\n "
    },
    {
        "commit_id": "b516cc24ec81fbc093f080c126dba9f360ceca52",
        "commit_message": "DOC: fix code sample for leg2poly (#21253)\n\nThe previous code sample throws an attribute error around `P.leg2poly()`.\r\nSince commit d41fc4d (2012), leg2poly is not exposed in\r\nnp.polynomial, and need to be explicitly called from `legendre`.\r\n\r\nFixes #20925",
        "commit_url": "https://github.com/numpy/numpy/commit/b516cc24ec81fbc093f080c126dba9f360ceca52",
        "buggy_code": ">>> P.leg2poly(range(4))",
        "fixed_code": ">>> P.legendre.leg2poly(range(4))",
        "patch": "@@ -185,7 +185,7 @@ def leg2poly(c):\n     >>> p = c.convert(kind=P.Polynomial)\n     >>> p\n     Polynomial([-1. , -3.5,  3. ,  7.5], domain=[-1.,  1.], window=[-1.,  1.])\n-    >>> P.leg2poly(range(4))\n+    >>> P.legendre.leg2poly(range(4))\n     array([-1. , -3.5,  3. ,  7.5])\n \n "
    },
    {
        "commit_id": "65ec64c932626689b50b53e0909ced47f5a821fa",
        "commit_message": "DOC: Fix an `automodule` path",
        "commit_url": "https://github.com/numpy/numpy/commit/65ec64c932626689b50b53e0909ced47f5a821fa",
        "buggy_code": ".. automodule:: numpy._typing.mypy_plugin",
        "fixed_code": ".. automodule:: numpy.typing.mypy_plugin",
        "patch": "@@ -19,7 +19,7 @@\n \n .. versionadded:: 1.21\n \n-.. automodule:: numpy._typing.mypy_plugin\n+.. automodule:: numpy.typing.mypy_plugin\n \n .. currentmodule:: numpy.typing\n "
    },
    {
        "commit_id": "3135e1f2a3feb318295e780823d5436d1a9224f0",
        "commit_message": "Merge pull request #21145 from tirthasheshpatel/fix-gh20743\n\nMAINT, DOC: make np._from_dlpack public",
        "commit_url": "https://github.com/numpy/numpy/commit/3135e1f2a3feb318295e780823d5436d1a9224f0",
        "buggy_code": "return Array._new(np._from_dlpack(x))",
        "fixed_code": "return Array._new(np.from_dlpack(x))",
        "patch": "@@ -154,7 +154,7 @@ def eye(\n def from_dlpack(x: object, /) -> Array:\n     from ._array_object import Array\n \n-    return Array._new(np._from_dlpack(x))\n+    return Array._new(np.from_dlpack(x))\n \n \n def full("
    },
    {
        "commit_id": "5d1d0d6e6c3a4ed10040a05613aadd0da745d01d",
        "commit_message": "DOC: Fix missing lib.scimath.sqrt function reference",
        "commit_url": "https://github.com/numpy/numpy/commit/5d1d0d6e6c3a4ed10040a05613aadd0da745d01d",
        "buggy_code": "lib.scimath.sqrt",
        "fixed_code": "emath.sqrt",
        "patch": "@@ -3817,7 +3817,7 @@ def add_newdoc(place, name, doc):\n \n     See Also\n     --------\n-    lib.scimath.sqrt\n+    emath.sqrt\n         A version which returns complex numbers when given negative reals.\n         Note: 0.0 and -0.0 are handled differently for complex inputs.\n "
    },
    {
        "commit_id": "e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "commit_message": "Merge branch 'main' into fix-sphinx-doc-errors",
        "commit_url": "https://github.com/numpy/numpy/commit/e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "buggy_code": "array([ 0.        ,  3.14159265,  0.78539816])",
        "fixed_code": "array([0.        , 3.14159265, 0.78539816])",
        "patch": "@@ -512,7 +512,7 @@ def add_newdoc(place, name, doc):\n     >>> np.arctan2([1., -1.], [0., 0.])\n     array([ 1.57079633, -1.57079633])\n     >>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf])\n-    array([ 0.        ,  3.14159265,  0.78539816])\n+    array([0.        , 3.14159265, 0.78539816])\n \n     \"\"\")\n "
    },
    {
        "commit_id": "e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "commit_message": "Merge branch 'main' into fix-sphinx-doc-errors",
        "commit_url": "https://github.com/numpy/numpy/commit/e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "buggy_code": "\"\"\"like : array_like",
        "fixed_code": "\"\"\"like : array_like, optional",
        "patch": "@@ -12,7 +12,7 @@\n     int(os.environ.get('NUMPY_EXPERIMENTAL_ARRAY_FUNCTION', 1)))\n \n array_function_like_doc = (\n-    \"\"\"like : array_like\n+    \"\"\"like : array_like, optional\n         Reference object to allow the creation of arrays which are not\n         NumPy arrays. If an array-like passed in as ``like`` supports\n         the ``__array_function__`` protocol, the result will be defined"
    },
    {
        "commit_id": "e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "commit_message": "Merge branch 'main' into fix-sphinx-doc-errors",
        "commit_url": "https://github.com/numpy/numpy/commit/e5214e2253ce9e4204932fa018bf6a84b77920bc",
        "buggy_code": "`collections.abc.Sequence`",
        "fixed_code": "collections.abc.Sequence",
        "patch": "@@ -25,7 +25,7 @@ class _NestedSequence(Protocol[_T_co]):\n \n     See Also\n     --------\n-    `collections.abc.Sequence`\n+    collections.abc.Sequence\n         ABCs for read-only and mutable :term:`sequences`.\n \n     Examples"
    },
    {
        "commit_id": "b3eed1459ccd97255e9868d43b4a8d937a5f9d4c",
        "commit_message": "BUILD: Disable MMX registers when building with -mavx512f\n\nWork around for a bug in gcc compiler. When using several kmask\nvariables __mmask16/__mmask8, the compiler sometimes uses %mmx registers\nto save them on to the stack which corrupts the x87 stack.",
        "commit_url": "https://github.com/numpy/numpy/commit/b3eed1459ccd97255e9868d43b4a8d937a5f9d4c",
        "buggy_code": "AVX512F = dict(flags=\"-mavx512f\"),",
        "fixed_code": "AVX512F = dict(flags=\"-mavx512f -mno-mmx\"),",
        "patch": "@@ -346,7 +346,7 @@ class attribute `conf_features`, also its override\n             FMA4   = dict(flags=\"-mfma4\"),\n             FMA3   = dict(flags=\"-mfma\"),\n             AVX2   = dict(flags=\"-mavx2\"),\n-            AVX512F = dict(flags=\"-mavx512f\"),\n+            AVX512F = dict(flags=\"-mavx512f -mno-mmx\"),\n             AVX512CD = dict(flags=\"-mavx512cd\"),\n             AVX512_KNL = dict(flags=\"-mavx512er -mavx512pf\"),\n             AVX512_KNM = dict("
    },
    {
        "commit_id": "5a53fa9326047e33c251d238a6ce344980cbe038",
        "commit_message": "DOC: fix output spacing in arctan2 example (#21064)",
        "commit_url": "https://github.com/numpy/numpy/commit/5a53fa9326047e33c251d238a6ce344980cbe038",
        "buggy_code": "array([ 0.        ,  3.14159265,  0.78539816])",
        "fixed_code": "array([0.        , 3.14159265, 0.78539816])",
        "patch": "@@ -512,7 +512,7 @@ def add_newdoc(place, name, doc):\n     >>> np.arctan2([1., -1.], [0., 0.])\n     array([ 1.57079633, -1.57079633])\n     >>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf])\n-    array([ 0.        ,  3.14159265,  0.78539816])\n+    array([0.        , 3.14159265, 0.78539816])\n \n     \"\"\")\n "
    },
    {
        "commit_id": "f30e5a870a97feca2c19cffeee1c32a568337688",
        "commit_message": "DOC: See also should not have backticks.\n\nNumpyDoc fails on this with a parse Error",
        "commit_url": "https://github.com/numpy/numpy/commit/f30e5a870a97feca2c19cffeee1c32a568337688",
        "buggy_code": "`collections.abc.Sequence`",
        "fixed_code": "collections.abc.Sequence",
        "patch": "@@ -25,7 +25,7 @@ class _NestedSequence(Protocol[_T_co]):\n \n     See Also\n     --------\n-    `collections.abc.Sequence`\n+    collections.abc.Sequence\n         ABCs for read-only and mutable :term:`sequences`.\n \n     Examples"
    },
    {
        "commit_id": "9ccf84d82c01842c01f983080b665b70376c54d7",
        "commit_message": "Convert npy_partition.h.src to numpy/core/src/common/npy_partition.h\n\nThis patch is part of the conversion of templated code to C++ serie.\n\nIt reuses the taglist mechanism combined with variadic arguments to\nautomatically generates the C <> C++ boilerplate code.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ccf84d82c01842c01f983080b665b70376c54d7",
        "buggy_code": "join('src', 'common', 'npy_partition.h.src'),",
        "fixed_code": "join('src', 'common', 'npy_partition.h'),",
        "patch": "@@ -954,7 +954,7 @@ def gl_if_msvc(build_cmd):\n             join('src', 'npysort', 'timsort.cpp'),\n             join('src', 'npysort', 'heapsort.cpp'),\n             join('src', 'npysort', 'radixsort.cpp'),\n-            join('src', 'common', 'npy_partition.h.src'),\n+            join('src', 'common', 'npy_partition.h'),\n             join('src', 'npysort', 'selection.cpp'),\n             join('src', 'common', 'npy_binsearch.h'),\n             join('src', 'npysort', 'binsearch.cpp'),"
    },
    {
        "commit_id": "9d3735a6c0781585a4a6cd767f68967d3897b38b",
        "commit_message": "Merge pull request #21016 from melissawm/doc-intersphinx-scipy\n\nMAINT, DOC: Fix SciPy intersphinx link",
        "commit_url": "https://github.com/numpy/numpy/commit/9d3735a6c0781585a4a6cd767f68967d3897b38b",
        "buggy_code": "'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),",
        "fixed_code": "'scipy': ('https://docs.scipy.org/doc/scipy', None),",
        "patch": "@@ -298,7 +298,7 @@ def setup(app):\n intersphinx_mapping = {\n     'neps': ('https://numpy.org/neps', None),\n     'python': ('https://docs.python.org/3', None),\n-    'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),\n+    'scipy': ('https://docs.scipy.org/doc/scipy', None),\n     'matplotlib': ('https://matplotlib.org/stable', None),\n     'imageio': ('https://imageio.readthedocs.io/en/stable', None),\n     'skimage': ('https://scikit-image.org/docs/stable', None),"
    },
    {
        "commit_id": "0b64e2a91483b80b86ab8a44534e09c015fdea88",
        "commit_message": "MAINT, DOC: Fix SciPy intersphinx link",
        "commit_url": "https://github.com/numpy/numpy/commit/0b64e2a91483b80b86ab8a44534e09c015fdea88",
        "buggy_code": "'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),",
        "fixed_code": "'scipy': ('https://docs.scipy.org/doc/scipy', None),",
        "patch": "@@ -298,7 +298,7 @@ def setup(app):\n intersphinx_mapping = {\n     'neps': ('https://numpy.org/neps', None),\n     'python': ('https://docs.python.org/3', None),\n-    'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),\n+    'scipy': ('https://docs.scipy.org/doc/scipy', None),\n     'matplotlib': ('https://matplotlib.org/stable', None),\n     'imageio': ('https://imageio.readthedocs.io/en/stable', None),\n     'skimage': ('https://scikit-image.org/docs/stable', None),"
    },
    {
        "commit_id": "f69ddd7111048111a7e486a2d7d008bd231af33d",
        "commit_message": "ENH: Suppress over-/underflow RuntimeWarning in assert_array_equal (#21003)\n\n* TST: Test suppression of asset_array_equal RuntimeWarning See #18992\r\n\r\n* ENH: Suppress over-/underflow warnings on asset_array_equal - Closes #18992\r\n\r\n* MAINT: Resolve linting issues of prior commit\r\n\r\n* MAINT: Simplified ignore and test case of asset_array_equal\r\n\r\n* MAINT: Removed unused import in test_utils.py",
        "commit_url": "https://github.com/numpy/numpy/commit/f69ddd7111048111a7e486a2d7d008bd231af33d",
        "buggy_code": "with errstate(invalid='ignore', divide='ignore'):",
        "fixed_code": "with errstate(all='ignore'):",
        "patch": "@@ -810,7 +810,7 @@ def func_assert_same_pos(x, y, func=isnan, hasval='nan'):\n                 'Mismatched elements: {} / {} ({:.3g}%)'.format(\n                     n_mismatch, n_elements, percent_mismatch)]\n \n-            with errstate(invalid='ignore', divide='ignore'):\n+            with errstate(all='ignore'):\n                 # ignore errors for non-numeric types\n                 with contextlib.suppress(TypeError):\n                     error = abs(x - y)"
    },
    {
        "commit_id": "6554778e47f75d46677fc858dd14e2414e420c99",
        "commit_message": "Merge pull request #21010 from sadielbartholomew/fix-warning-msg-interpolation-kwarg\n\nMAINT: Fix warning message for deprecated keyword",
        "commit_url": "https://github.com/numpy/numpy/commit/6554778e47f75d46677fc858dd14e2414e420c99",
        "buggy_code": "\"'midpoint' are encouraged to review the method they. \"",
        "fixed_code": "\"'midpoint' are encouraged to review the method they used. \"",
        "patch": "@@ -4411,7 +4411,7 @@ def _check_interpolation_as_method(method, interpolation, fname):\n         f\"the `interpolation=` argument to {fname} was renamed to \"\n         \"`method=`, which has additional options.\\n\"\n         \"Users of the modes 'nearest', 'lower', 'higher', or \"\n-        \"'midpoint' are encouraged to review the method they. \"\n+        \"'midpoint' are encouraged to review the method they used. \"\n         \"(Deprecated NumPy 1.22)\",\n         DeprecationWarning, stacklevel=4)\n     if method != \"linear\":"
    },
    {
        "commit_id": "bc6a6084f6e49bd78c12508131395304a63cc6ca",
        "commit_message": "DOC: improper doc syntax (markdown and imbalanced ticks). (#20944)\n\nHere are two modifications:\r\n\r\nThe first one is the inclusion of markdown fence blocks in the middle of\r\nRST. While this is not really a problem for current documentation as\r\nthis is a private function, it still makes other RST parser choke on\r\nthis.\r\n\r\nIn particular this is seen as a tile as it is a text line followed by\r\na line of only backticks, and that makes my new project to show better\r\ndocstrings in Jupyter fails.\r\n\r\nI can locally exclude this function, but while not fix it to show good\r\nexamples ?\r\n\r\nSecond, while grepping for triple backticks I found that there are a\r\nstray one in another place.",
        "commit_url": "https://github.com/numpy/numpy/commit/bc6a6084f6e49bd78c12508131395304a63cc6ca",
        "buggy_code": "```#define {conf_c_prefix}_XXXX`` where ``XXXX`` is the case name in upper case.",
        "fixed_code": "``#define {conf_c_prefix}_XXXX`` where ``XXXX`` is the case name in upper case.",
        "patch": "@@ -169,7 +169,7 @@ class _Config:\n \n             If the compiler able to successfully compile the C file then `CCompilerOpt`\n             will add a C ``#define`` for it into the main dispatch header, e.g.\n-            ```#define {conf_c_prefix}_XXXX`` where ``XXXX`` is the case name in upper case.\n+            ``#define {conf_c_prefix}_XXXX`` where ``XXXX`` is the case name in upper case.\n \n         **NOTES**:\n             * space can be used as separator with options that supports \"str or list\""
    },
    {
        "commit_id": "1dc594cf86a01aac4ef1ab15f7e5397da1fdd82f",
        "commit_message": "DOC: fix input parameter type in docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/1dc594cf86a01aac4ef1ab15f7e5397da1fdd82f",
        "buggy_code": "a : narray",
        "fixed_code": "a : array_like",
        "patch": "@@ -1632,7 +1632,7 @@ def flatnotmasked_contiguous(a):\n \n     Parameters\n     ----------\n-    a : narray\n+    a : array_like\n         The input array.\n \n     Returns"
    },
    {
        "commit_id": "20ebea86de438721ade63fb32f08916c2ce4b9cb",
        "commit_message": "DOC: fix np.ma.flatnotmasked_contiguous docstring\n\nThe first line of the docstring for `flatnotmasked_contiguous` was identical to that in `notmasked_contiguous` and refered to a given axis despite the fact that no axis is given as an argument.",
        "commit_url": "https://github.com/numpy/numpy/commit/20ebea86de438721ade63fb32f08916c2ce4b9cb",
        "buggy_code": "Find contiguous unmasked data in a masked array along the given axis.",
        "fixed_code": "Find contiguous unmasked data in a masked array.",
        "patch": "@@ -1628,7 +1628,7 @@ def notmasked_edges(a, axis=None):\n \n def flatnotmasked_contiguous(a):\n     \"\"\"\n-    Find contiguous unmasked data in a masked array along the given axis.\n+    Find contiguous unmasked data in a masked array.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "c30876f6411ef0c5365a8e4cf40cc3d4ba41196c",
        "commit_message": "Merge pull request #20851 from EmmaSimon/patch-2\n\nDOC: Fix typo in meshgrid example",
        "commit_url": "https://github.com/numpy/numpy/commit/c30876f6411ef0c5365a8e4cf40cc3d4ba41196c",
        "buggy_code": ">>> # full coorindate arrays",
        "fixed_code": ">>> # full coordinate arrays",
        "patch": "@@ -4907,7 +4907,7 @@ def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):\n \n     >>> x = np.linspace(-5, 5, 101)\n     >>> y = np.linspace(-5, 5, 101)\n-    >>> # full coorindate arrays\n+    >>> # full coordinate arrays\n     >>> xx, yy = np.meshgrid(x, y)\n     >>> zz = np.sqrt(xx**2 + yy**2)\n     >>> xx.shape, yy.shape, zz.shape"
    },
    {
        "commit_id": "85a2a7776e8cc01ce3efdc92e262a7764f5fc061",
        "commit_message": "DOC: Fix typo in meshgrid example\n\ncoordinate was misspelled in a comment in the example code\r\n\r\n[ci skip]",
        "commit_url": "https://github.com/numpy/numpy/commit/85a2a7776e8cc01ce3efdc92e262a7764f5fc061",
        "buggy_code": ">>> # full coorindate arrays",
        "fixed_code": ">>> # full coordinate arrays",
        "patch": "@@ -4907,7 +4907,7 @@ def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):\n \n     >>> x = np.linspace(-5, 5, 101)\n     >>> y = np.linspace(-5, 5, 101)\n-    >>> # full coorindate arrays\n+    >>> # full coordinate arrays\n     >>> xx, yy = np.meshgrid(x, y)\n     >>> zz = np.sqrt(xx**2 + yy**2)\n     >>> xx.shape, yy.shape, zz.shape"
    },
    {
        "commit_id": "4f3b3d2e225d960ef6e8fdb63efc5c75b02b3cbb",
        "commit_message": "BUG: Fix loadtxt no data warning stacklevel",
        "commit_url": "https://github.com/numpy/numpy/commit/4f3b3d2e225d960ef6e8fdb63efc5c75b02b3cbb",
        "buggy_code": "stacklevel=2",
        "fixed_code": "stacklevel=3",
        "patch": "@@ -1057,7 +1057,7 @@ def _read(fname, *, delimiter=',', comment='#', quote='\"',\n             warnings.warn(\n                 f'loadtxt: input contained no data: \"{fname}\"',\n                 category=UserWarning,\n-                stacklevel=2\n+                stacklevel=3\n             )\n \n     if unpack:"
    },
    {
        "commit_id": "1e6b72b42292e62c1c86e4f77e30324e43aaa218",
        "commit_message": "TST,STY: Add small additional tests for converters/usecols\n\nAlso fix style a bit to silence linter (hopefully), removes some\nblack style, but I am not too opinionated about that :)",
        "commit_url": "https://github.com/numpy/numpy/commit/1e6b72b42292e62c1c86e4f77e30324e43aaa218",
        "buggy_code": "(0, StringIO(\"-1,0\\n1,2\\n\\n3,4\")),])",
        "fixed_code": "(0, StringIO(\"-1,0\\n1,2\\n\\n3,4\"))])",
        "patch": "@@ -1212,7 +1212,7 @@ def test_max_rows_larger(self):\n             # Same as above, but do not skip any lines:\n             (0, [\"-1,0\\n\", \"1,2\\n\", \"\\n\", \"3,4\\n\"]),\n             (0, [\"-1,0\", \"1,2\", \"\", \"3,4\"]),\n-            (0, StringIO(\"-1,0\\n1,2\\n\\n3,4\")),])\n+            (0, StringIO(\"-1,0\\n1,2\\n\\n3,4\"))])\n     def test_max_rows_empty_lines(self, skip, data):\n         with pytest.warns(UserWarning,\n                     match=f\"Input line 3.*max_rows={3-skip}\"):"
    },
    {
        "commit_id": "f40b105d627096ef04ca7a5ccbcd6ff53d810be6",
        "commit_message": "Merge pull request #20818 from lpsinger/test-third-party-c-extensions-limited-api\n\nBUG: Fix build of third-party extensions with Py_LIMITED_API",
        "commit_url": "https://github.com/numpy/numpy/commit/f40b105d627096ef04ca7a5ccbcd6ff53d810be6",
        "buggy_code": "ext_dir = os.path.join(here, \"examples\")",
        "fixed_code": "ext_dir = os.path.join(here, \"examples\", \"cython\")",
        "patch": "@@ -32,7 +32,7 @@ def install_temp(request, tmp_path):\n     # Based in part on test_cython from random.tests.test_extending\n \n     here = os.path.dirname(__file__)\n-    ext_dir = os.path.join(here, \"examples\")\n+    ext_dir = os.path.join(here, \"examples\", \"cython\")\n \n     cytest = str(tmp_path / \"cytest\")\n "
    },
    {
        "commit_id": "813a0c11186ded0b5caeb853fd2b22fb9addd511",
        "commit_message": "Merge pull request #20784 from DimitriPapadopoulos/codespell\n\nMAINT, DOC: fix new typos detected by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/813a0c11186ded0b5caeb853fd2b22fb9addd511",
        "buggy_code": "_ensure_ndmin_ndarray. Is intented to be used as",
        "fixed_code": "_ensure_ndmin_ndarray. It is intended to be used as",
        "patch": "@@ -818,7 +818,7 @@ def _loadtxt_pack_items(packing, items):\n \n def _ensure_ndmin_ndarray_check_param(ndmin):\n     \"\"\"Just checks if the param ndmin is supported on\n-        _ensure_ndmin_ndarray. Is intented to be used as\n+        _ensure_ndmin_ndarray. It is intended to be used as\n         verification before running anything expensive.\n         e.g. loadtxt, genfromtxt\n     \"\"\""
    },
    {
        "commit_id": "813a0c11186ded0b5caeb853fd2b22fb9addd511",
        "commit_message": "Merge pull request #20784 from DimitriPapadopoulos/codespell\n\nMAINT, DOC: fix new typos detected by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/813a0c11186ded0b5caeb853fd2b22fb9addd511",
        "buggy_code": "Code to preceed the rest, usually extra ``#include`` or ``#define``",
        "fixed_code": "Code to precede the rest, usually extra ``#include`` or ``#define``",
        "patch": "@@ -27,7 +27,7 @@ def build_and_import_extension(\n     functions : list of fragments\n         Each fragment is a sequence of func_name, calling convention, snippet.\n     prologue : string\n-        Code to preceed the rest, usually extra ``#include`` or ``#define``\n+        Code to precede the rest, usually extra ``#include`` or ``#define``\n         macros.\n     build_dir : pathlib.Path\n         Where to build the module, usually a temporary directory"
    },
    {
        "commit_id": "76b1ba156e792187f133db8e8bdd968a3fdbe5be",
        "commit_message": "MAINT, DOC: fix new typos detected by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/76b1ba156e792187f133db8e8bdd968a3fdbe5be",
        "buggy_code": "_ensure_ndmin_ndarray. Is intented to be used as",
        "fixed_code": "_ensure_ndmin_ndarray. It is intended to be used as",
        "patch": "@@ -818,7 +818,7 @@ def _loadtxt_pack_items(packing, items):\n \n def _ensure_ndmin_ndarray_check_param(ndmin):\n     \"\"\"Just checks if the param ndmin is supported on\n-        _ensure_ndmin_ndarray. Is intented to be used as\n+        _ensure_ndmin_ndarray. It is intended to be used as\n         verification before running anything expensive.\n         e.g. loadtxt, genfromtxt\n     \"\"\""
    },
    {
        "commit_id": "76b1ba156e792187f133db8e8bdd968a3fdbe5be",
        "commit_message": "MAINT, DOC: fix new typos detected by codespell",
        "commit_url": "https://github.com/numpy/numpy/commit/76b1ba156e792187f133db8e8bdd968a3fdbe5be",
        "buggy_code": "Code to preceed the rest, usually extra ``#include`` or ``#define``",
        "fixed_code": "Code to precede the rest, usually extra ``#include`` or ``#define``",
        "patch": "@@ -27,7 +27,7 @@ def build_and_import_extension(\n     functions : list of fragments\n         Each fragment is a sequence of func_name, calling convention, snippet.\n     prologue : string\n-        Code to preceed the rest, usually extra ``#include`` or ``#define``\n+        Code to precede the rest, usually extra ``#include`` or ``#define``\n         macros.\n     build_dir : pathlib.Path\n         Where to build the module, usually a temporary directory"
    },
    {
        "commit_id": "f98c60a035b007680fe811eeed3b6326961ccff5",
        "commit_message": "Merge pull request #20762 from honno/xp-pow-fixes\n\nBUG: Allow integer inputs for pow-related functions in `array_api`",
        "commit_url": "https://github.com/numpy/numpy/commit/f98c60a035b007680fe811eeed3b6326961ccff5",
        "buggy_code": "\"__pow__\": \"floating\",",
        "fixed_code": "\"__pow__\": \"numeric\",",
        "patch": "@@ -98,7 +98,7 @@ def test_operators():\n         \"__mul__\": \"numeric\",\n         \"__ne__\": \"all\",\n         \"__or__\": \"integer_or_boolean\",\n-        \"__pow__\": \"floating\",\n+        \"__pow__\": \"numeric\",\n         \"__rshift__\": \"integer\",\n         \"__sub__\": \"numeric\",\n         \"__truediv__\": \"floating\","
    },
    {
        "commit_id": "f98c60a035b007680fe811eeed3b6326961ccff5",
        "commit_message": "Merge pull request #20762 from honno/xp-pow-fixes\n\nBUG: Allow integer inputs for pow-related functions in `array_api`",
        "commit_url": "https://github.com/numpy/numpy/commit/f98c60a035b007680fe811eeed3b6326961ccff5",
        "buggy_code": "\"pow\": \"floating-point\",",
        "fixed_code": "\"pow\": \"numeric\",",
        "patch": "@@ -66,7 +66,7 @@ def test_function_types():\n         \"negative\": \"numeric\",\n         \"not_equal\": \"all\",\n         \"positive\": \"numeric\",\n-        \"pow\": \"floating-point\",\n+        \"pow\": \"numeric\",\n         \"remainder\": \"numeric\",\n         \"round\": \"numeric\",\n         \"sign\": \"numeric\","
    },
    {
        "commit_id": "879ec4100214f92877f148230c6cfec6dd2ecb99",
        "commit_message": "Merge pull request #20786 from melissawm/f2py-scipy-docs\n\nBUG, DOC: Fixes SciPy docs build warnings",
        "commit_url": "https://github.com/numpy/numpy/commit/879ec4100214f92877f148230c6cfec6dd2ecb99",
        "buggy_code": "r = f'({cond} ? {expr1} : {expr2})'",
        "fixed_code": "r = f'({cond}?{expr1}:{expr2})'",
        "patch": "@@ -381,7 +381,7 @@ def tostring(self, parent_precedence=Precedence.NONE,\n                                              language=language)\n                                   for a in self.data]\n             if language is Language.C:\n-                r = f'({cond} ? {expr1} : {expr2})'\n+                r = f'({cond}?{expr1}:{expr2})'\n             elif language is Language.Python:\n                 r = f'({expr1} if {cond} else {expr2})'\n             elif language is Language.Fortran:"
    },
    {
        "commit_id": "879ec4100214f92877f148230c6cfec6dd2ecb99",
        "commit_message": "Merge pull request #20786 from melissawm/f2py-scipy-docs\n\nBUG, DOC: Fixes SciPy docs build warnings",
        "commit_url": "https://github.com/numpy/numpy/commit/879ec4100214f92877f148230c6cfec6dd2ecb99",
        "buggy_code": "assert as_ternary(x, y, z).tostring(language=language) == \"(x ? y : z)\"",
        "fixed_code": "assert as_ternary(x, y, z).tostring(language=language) == \"(x?y:z)\"",
        "patch": "@@ -201,7 +201,7 @@ def test_tostring_c(self):\n         assert (x + (x - y) / (x + y) +\n                 n).tostring(language=language) == \"123 + x + (x - y) / (x + y)\"\n \n-        assert as_ternary(x, y, z).tostring(language=language) == \"(x ? y : z)\"\n+        assert as_ternary(x, y, z).tostring(language=language) == \"(x?y:z)\"\n         assert as_eq(x, y).tostring(language=language) == \"x == y\"\n         assert as_ne(x, y).tostring(language=language) == \"x != y\"\n         assert as_lt(x, y).tostring(language=language) == \"x < y\""
    },
    {
        "commit_id": "9cdc23720a594384125ffbf6e1ef381a3b8310bc",
        "commit_message": "BUG, DOC: Fixes SciPy docs build warnings\n\nThe new f2py symbolic parser writes ternary expressions with\nspaces surrounding the colon operator, which causes the generated\ndocstrings to be incorrectly parsed. Removing the spaces solves the\nissue.",
        "commit_url": "https://github.com/numpy/numpy/commit/9cdc23720a594384125ffbf6e1ef381a3b8310bc",
        "buggy_code": "r = f'({cond} ? {expr1} : {expr2})'",
        "fixed_code": "r = f'({cond}?{expr1}:{expr2})'",
        "patch": "@@ -381,7 +381,7 @@ def tostring(self, parent_precedence=Precedence.NONE,\n                                              language=language)\n                                   for a in self.data]\n             if language is Language.C:\n-                r = f'({cond} ? {expr1} : {expr2})'\n+                r = f'({cond}?{expr1}:{expr2})'\n             elif language is Language.Python:\n                 r = f'({expr1} if {cond} else {expr2})'\n             elif language is Language.Fortran:"
    },
    {
        "commit_id": "9cdc23720a594384125ffbf6e1ef381a3b8310bc",
        "commit_message": "BUG, DOC: Fixes SciPy docs build warnings\n\nThe new f2py symbolic parser writes ternary expressions with\nspaces surrounding the colon operator, which causes the generated\ndocstrings to be incorrectly parsed. Removing the spaces solves the\nissue.",
        "commit_url": "https://github.com/numpy/numpy/commit/9cdc23720a594384125ffbf6e1ef381a3b8310bc",
        "buggy_code": "assert as_ternary(x, y, z).tostring(language=language) == \"(x ? y : z)\"",
        "fixed_code": "assert as_ternary(x, y, z).tostring(language=language) == \"(x?y:z)\"",
        "patch": "@@ -201,7 +201,7 @@ def test_tostring_c(self):\n         assert (x + (x - y) / (x + y) +\n                 n).tostring(language=language) == \"123 + x + (x - y) / (x + y)\"\n \n-        assert as_ternary(x, y, z).tostring(language=language) == \"(x ? y : z)\"\n+        assert as_ternary(x, y, z).tostring(language=language) == \"(x?y:z)\"\n         assert as_eq(x, y).tostring(language=language) == \"x == y\"\n         assert as_ne(x, y).tostring(language=language) == \"x != y\"\n         assert as_lt(x, y).tostring(language=language) == \"x < y\""
    },
    {
        "commit_id": "e3406ed3ef83f7de0f3419361e85bd8634d0fd2b",
        "commit_message": "BUG: Allow integer inputs for pow-related functions in `array_api`\n\nUpdates `xp.power()`, `x.__pow__()`, `x.__ipow()__` and `x.__rpow()__`",
        "commit_url": "https://github.com/numpy/numpy/commit/e3406ed3ef83f7de0f3419361e85bd8634d0fd2b",
        "buggy_code": "\"__pow__\": \"floating\",",
        "fixed_code": "\"__pow__\": \"numeric\",",
        "patch": "@@ -98,7 +98,7 @@ def test_operators():\n         \"__mul__\": \"numeric\",\n         \"__ne__\": \"all\",\n         \"__or__\": \"integer_or_boolean\",\n-        \"__pow__\": \"floating\",\n+        \"__pow__\": \"numeric\",\n         \"__rshift__\": \"integer\",\n         \"__sub__\": \"numeric\",\n         \"__truediv__\": \"floating\","
    },
    {
        "commit_id": "e3406ed3ef83f7de0f3419361e85bd8634d0fd2b",
        "commit_message": "BUG: Allow integer inputs for pow-related functions in `array_api`\n\nUpdates `xp.power()`, `x.__pow__()`, `x.__ipow()__` and `x.__rpow()__`",
        "commit_url": "https://github.com/numpy/numpy/commit/e3406ed3ef83f7de0f3419361e85bd8634d0fd2b",
        "buggy_code": "\"pow\": \"floating-point\",",
        "fixed_code": "\"pow\": \"numeric\",",
        "patch": "@@ -66,7 +66,7 @@ def test_function_types():\n         \"negative\": \"numeric\",\n         \"not_equal\": \"all\",\n         \"positive\": \"numeric\",\n-        \"pow\": \"floating-point\",\n+        \"pow\": \"numeric\",\n         \"remainder\": \"numeric\",\n         \"round\": \"numeric\",\n         \"sign\": \"numeric\","
    },
    {
        "commit_id": "c975a3724831739c2a536510d3998a7f3033d149",
        "commit_message": "Merge branch 'main' into doc-fix-mvn-example",
        "commit_url": "https://github.com/numpy/numpy/commit/c975a3724831739c2a536510d3998a7f3033d149",
        "buggy_code": "return self._array.T",
        "fixed_code": "return self.__class__._new(self._array.T)",
        "patch": "@@ -1072,4 +1072,4 @@ def T(self) -> Array:\n         # https://data-apis.org/array-api/latest/API_specification/array_object.html#t\n         if self.ndim != 2:\n             raise ValueError(\"x.T requires x to have 2 dimensions. Use x.mT to transpose stacks of matrices and permute_dims() to permute dimensions.\")\n-        return self._array.T\n+        return self.__class__._new(self._array.T)"
    },
    {
        "commit_id": "c975a3724831739c2a536510d3998a7f3033d149",
        "commit_message": "Merge branch 'main' into doc-fix-mvn-example",
        "commit_url": "https://github.com/numpy/numpy/commit/c975a3724831739c2a536510d3998a7f3033d149",
        "buggy_code": "sources=[join('src', 'umath', '_operand_flag_tests.c.src')])",
        "fixed_code": "sources=[join('src', 'umath', '_operand_flag_tests.c')])",
        "patch": "@@ -1065,7 +1065,7 @@ def generate_umath_c(ext, build_dir):\n     #######################################################################\n \n     config.add_extension('_operand_flag_tests',\n-                    sources=[join('src', 'umath', '_operand_flag_tests.c.src')])\n+                    sources=[join('src', 'umath', '_operand_flag_tests.c')])\n \n     #######################################################################\n     #                        SIMD module                                  #"
    },
    {
        "commit_id": "c975a3724831739c2a536510d3998a7f3033d149",
        "commit_message": "Merge branch 'main' into doc-fix-mvn-example",
        "commit_url": "https://github.com/numpy/numpy/commit/c975a3724831739c2a536510d3998a7f3033d149",
        "buggy_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)",
        "fixed_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)",
        "patch": "@@ -442,7 +442,7 @@ def getpydocsign(a, var):\n         sigout = sig\n     else:\n         errmess(\n-            'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)\n+            'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)\n     return sig, sigout\n \n "
    },
    {
        "commit_id": "c975a3724831739c2a536510d3998a7f3033d149",
        "commit_message": "Merge branch 'main' into doc-fix-mvn-example",
        "commit_url": "https://github.com/numpy/numpy/commit/c975a3724831739c2a536510d3998a7f3033d149",
        "buggy_code": "RELEASE_NOTES = 'doc/source/release/1.22.0-notes.rst'",
        "fixed_code": "RELEASE_NOTES = 'doc/source/release/1.23.0-notes.rst'",
        "patch": "@@ -38,7 +38,7 @@\n #-----------------------------------\n \n # Path to the release notes\n-RELEASE_NOTES = 'doc/source/release/1.22.0-notes.rst'\n+RELEASE_NOTES = 'doc/source/release/1.23.0-notes.rst'\n \n \n #-------------------------------------------------------"
    },
    {
        "commit_id": "742f13f7ee6ff8ed56fc468c9ef57b3853141768",
        "commit_message": "Merge pull request #20499 from asmeurer/array_api_T\n\nBUG: Fix the .T attribute in the array_api namespace",
        "commit_url": "https://github.com/numpy/numpy/commit/742f13f7ee6ff8ed56fc468c9ef57b3853141768",
        "buggy_code": "return self._array.T",
        "fixed_code": "return self.__class__._new(self._array.T)",
        "patch": "@@ -1072,4 +1072,4 @@ def T(self) -> Array:\n         # https://data-apis.org/array-api/latest/API_specification/array_object.html#t\n         if self.ndim != 2:\n             raise ValueError(\"x.T requires x to have 2 dimensions. Use x.mT to transpose stacks of matrices and permute_dims() to permute dimensions.\")\n-        return self._array.T\n+        return self.__class__._new(self._array.T)"
    },
    {
        "commit_id": "eb865fa4683bca9a9d7c840f8addd30e39b62f5b",
        "commit_message": "BUG: Fix the .T attribute in the array_api namespace\n\nFixes #20498.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb865fa4683bca9a9d7c840f8addd30e39b62f5b",
        "buggy_code": "return self._array.T",
        "fixed_code": "return self.__class__._new(self._array.T)",
        "patch": "@@ -1072,4 +1072,4 @@ def T(self) -> Array:\n         # https://data-apis.org/array-api/latest/API_specification/array_object.html#t\n         if self.ndim != 2:\n             raise ValueError(\"x.T requires x to have 2 dimensions. Use x.mT to transpose stacks of matrices and permute_dims() to permute dimensions.\")\n-        return self._array.T\n+        return self.__class__._new(self._array.T)"
    },
    {
        "commit_id": "424eff16588d02bd0247d9074ec3c2f2b9f1e41f",
        "commit_message": "TST,MAINT: Fix F2PY test typo",
        "commit_url": "https://github.com/numpy/numpy/commit/424eff16588d02bd0247d9074ec3c2f2b9f1e41f",
        "buggy_code": "assert b.tobytes() == b'B23\\0\\0', (b.tobytes(),)",
        "fixed_code": "assert b.tobytes() == b'B23\\0\\0'",
        "patch": "@@ -60,7 +60,7 @@ def test_example(self):\n         self.module.foo(a, b, c, d)\n \n         assert a.tobytes() == b'123\\0\\0'\n-        assert b.tobytes() == b'B23\\0\\0', (b.tobytes(),)\n+        assert b.tobytes() == b'B23\\0\\0'\n         assert c.tobytes() == b'123'\n         assert d.tobytes() == b'D23'\n "
    },
    {
        "commit_id": "9f9cec1b37fbe298b792240ecc670ab34fcfbd84",
        "commit_message": "fix: get scikit-build example working",
        "commit_url": "https://github.com/numpy/numpy/commit/9f9cec1b37fbe298b792240ecc670ab34fcfbd84",
        "buggy_code": "cmake_args=['-DSKBUILD=ON']",
        "fixed_code": "python_requires=\">=3.7\",",
        "patch": "@@ -6,5 +6,5 @@\n     description=\"a minimal example package (fortran version)\",\n     license=\"MIT\",\n     packages=['fibby'],\n-    cmake_args=['-DSKBUILD=ON']\n+    python_requires=\">=3.7\",\n )"
    },
    {
        "commit_id": "dc2b556285383e080c9ee6e579feb07ef9d0a4bd",
        "commit_message": "Merge pull request #20427 from charris/fix-umath-longdouble-test\n\nMAINT: Fix longdouble precision check in test_umath.py",
        "commit_url": "https://github.com/numpy/numpy/commit/dc2b556285383e080c9ee6e579feb07ef9d0a4bd",
        "buggy_code": "if glibc_older_than(\"2.19\") and dtype is np.longcomplex:",
        "fixed_code": "if dtype is np.longcomplex:",
        "patch": "@@ -3433,7 +3433,7 @@ def check(x, rtol):\n         x_series = np.logspace(-20, -3.001, 200)\n         x_basic = np.logspace(-2.999, 0, 10, endpoint=False)\n \n-        if glibc_older_than(\"2.19\") and dtype is np.longcomplex:\n+        if dtype is np.longcomplex:\n             if (platform.machine() == 'aarch64' and bad_arcsinh()):\n                 pytest.skip(\"Trig functions of np.longcomplex values known \"\n                             \"to be inaccurate on aarch64 for some compilation \""
    },
    {
        "commit_id": "a5d002e2b969d59e1cea226361f7518921c289e0",
        "commit_message": "MAINT: Fix longdouble precision check.\n\nThis is a partial reversion of #20274. My guess is that\n`glibc_older_than(\"2.19\")` is not working correctly on manylinux2014\non aarch64.\n\nCloses #20426.",
        "commit_url": "https://github.com/numpy/numpy/commit/a5d002e2b969d59e1cea226361f7518921c289e0",
        "buggy_code": "if glibc_older_than(\"2.19\") and dtype is np.longcomplex:",
        "fixed_code": "if dtype is np.longcomplex:",
        "patch": "@@ -3433,7 +3433,7 @@ def check(x, rtol):\n         x_series = np.logspace(-20, -3.001, 200)\n         x_basic = np.logspace(-2.999, 0, 10, endpoint=False)\n \n-        if glibc_older_than(\"2.19\") and dtype is np.longcomplex:\n+        if dtype is np.longcomplex:\n             if (platform.machine() == 'aarch64' and bad_arcsinh()):\n                 pytest.skip(\"Trig functions of np.longcomplex values known \"\n                             \"to be inaccurate on aarch64 for some compilation \""
    },
    {
        "commit_id": "96a4a8af5695551f9486e35a407baf214996a5c8",
        "commit_message": "Merge pull request #20398 from lithomas1/patch-2\n\nBLD: Fix Macos Builds [wheel build]",
        "commit_url": "https://github.com/numpy/numpy/commit/96a4a8af5695551f9486e35a407baf214996a5c8",
        "buggy_code": "_cxx_ignore_flags = {'-Werror=implicit-function-declaration'}",
        "fixed_code": "_cxx_ignore_flags = {'-Werror=implicit-function-declaration', '-std=c99'}",
        "patch": "@@ -2481,7 +2481,7 @@ def get_build_architecture():\n     return get_build_architecture()\n \n \n-_cxx_ignore_flags = {'-Werror=implicit-function-declaration'}\n+_cxx_ignore_flags = {'-Werror=implicit-function-declaration', '-std=c99'}\n \n \n def sanitize_cxx_flags(cxxflags):"
    },
    {
        "commit_id": "0cae372f06576059e77a6306a1cda5ab9e931c3d",
        "commit_message": "BLD: Fix Macos Builds [wheel build]",
        "commit_url": "https://github.com/numpy/numpy/commit/0cae372f06576059e77a6306a1cda5ab9e931c3d",
        "buggy_code": "_cxx_ignore_flags = {'-Werror=implicit-function-declaration'}",
        "fixed_code": "_cxx_ignore_flags = {'-Werror=implicit-function-declaration', '-std=c99'}",
        "patch": "@@ -2481,7 +2481,7 @@ def get_build_architecture():\n     return get_build_architecture()\n \n \n-_cxx_ignore_flags = {'-Werror=implicit-function-declaration'}\n+_cxx_ignore_flags = {'-Werror=implicit-function-declaration', '-std=c99'}\n \n \n def sanitize_cxx_flags(cxxflags):"
    },
    {
        "commit_id": "b75fe5766c3739972e8f5c10a85f320f08e74d26",
        "commit_message": "Merge pull request #20369 from bilderbuchi/missing_diagnostics_newlines\n\nMAINT: Fix newlines in diagnostics output of numpy.f2py.",
        "commit_url": "https://github.com/numpy/numpy/commit/b75fe5766c3739972e8f5c10a85f320f08e74d26",
        "buggy_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)",
        "fixed_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)",
        "patch": "@@ -442,7 +442,7 @@ def getpydocsign(a, var):\n         sigout = sig\n     else:\n         errmess(\n-            'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)\n+            'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)\n     return sig, sigout\n \n "
    },
    {
        "commit_id": "b75fe5766c3739972e8f5c10a85f320f08e74d26",
        "commit_message": "Merge pull request #20369 from bilderbuchi/missing_diagnostics_newlines\n\nMAINT: Fix newlines in diagnostics output of numpy.f2py.",
        "commit_url": "https://github.com/numpy/numpy/commit/b75fe5766c3739972e8f5c10a85f320f08e74d26",
        "buggy_code": "outmess('Creating build directory %s' % (buildpath))",
        "fixed_code": "outmess('Creating build directory %s\\n' % (buildpath))",
        "patch": "@@ -286,7 +286,7 @@ def scaninputline(inputline):\n         sys.exit()\n     if not os.path.isdir(buildpath):\n         if not verbose:\n-            outmess('Creating build directory %s' % (buildpath))\n+            outmess('Creating build directory %s\\n' % (buildpath))\n         os.mkdir(buildpath)\n     if signsfile:\n         signsfile = os.path.join(buildpath, signsfile)"
    },
    {
        "commit_id": "a565be5792bac34938f477e27bc085e65bd3191d",
        "commit_message": "MAINT: Fix build issues",
        "commit_url": "https://github.com/numpy/numpy/commit/a565be5792bac34938f477e27bc085e65bd3191d",
        "buggy_code": ".. literalinclude:: code/results/compile_session.dat",
        "fixed_code": ".. literalinclude:: ../../source/f2py/code/results/compile_session.dat",
        "patch": "@@ -71,7 +71,7 @@ def compile(source,\n \n     Examples\n     --------\n-    .. literalinclude:: code/results/compile_session.dat\n+    .. literalinclude:: ../../source/f2py/code/results/compile_session.dat\n         :language: python\n \n     \"\"\""
    },
    {
        "commit_id": "a565be5792bac34938f477e27bc085e65bd3191d",
        "commit_message": "MAINT: Fix build issues",
        "commit_url": "https://github.com/numpy/numpy/commit/a565be5792bac34938f477e27bc085e65bd3191d",
        "buggy_code": ".. literalinclude:: code/results/run_main_session.dat",
        "fixed_code": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
        "patch": "@@ -416,7 +416,7 @@ def run_main(comline_list):\n \n     Examples\n     --------\n-    .. literalinclude:: code/results/run_main_session.dat\n+    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n         :language: python\n \n     \"\"\""
    },
    {
        "commit_id": "cbc25d2cc9ed50e8f0d026d1e2e4766378d1640f",
        "commit_message": "MAINT: Fix newlines in diagnostics output of numpy.f2py.\n\nLinebreaks were not consistently added to errmess/outmess\narguments, which led to very long lines and wrong\nconcatenation with compiler messages in f2py console output.",
        "commit_url": "https://github.com/numpy/numpy/commit/cbc25d2cc9ed50e8f0d026d1e2e4766378d1640f",
        "buggy_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)",
        "fixed_code": "'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)",
        "patch": "@@ -442,7 +442,7 @@ def getpydocsign(a, var):\n         sigout = sig\n     else:\n         errmess(\n-            'getpydocsign: Could not resolve docsignature for \"%s\".\\\\n' % a)\n+            'getpydocsign: Could not resolve docsignature for \"%s\".\\n' % a)\n     return sig, sigout\n \n "
    },
    {
        "commit_id": "cbc25d2cc9ed50e8f0d026d1e2e4766378d1640f",
        "commit_message": "MAINT: Fix newlines in diagnostics output of numpy.f2py.\n\nLinebreaks were not consistently added to errmess/outmess\narguments, which led to very long lines and wrong\nconcatenation with compiler messages in f2py console output.",
        "commit_url": "https://github.com/numpy/numpy/commit/cbc25d2cc9ed50e8f0d026d1e2e4766378d1640f",
        "buggy_code": "outmess('Creating build directory %s' % (buildpath))",
        "fixed_code": "outmess('Creating build directory %s\\n' % (buildpath))",
        "patch": "@@ -286,7 +286,7 @@ def scaninputline(inputline):\n         sys.exit()\n     if not os.path.isdir(buildpath):\n         if not verbose:\n-            outmess('Creating build directory %s' % (buildpath))\n+            outmess('Creating build directory %s\\n' % (buildpath))\n         os.mkdir(buildpath)\n     if signsfile:\n         signsfile = os.path.join(buildpath, signsfile)"
    },
    {
        "commit_id": "5bd71fb76c68f41debe3a15fbf316ce6ef7fd795",
        "commit_message": "DOC: Add ticks to quantile interpolation/method error\n\nCo-authored-by: abel <aoun@cerfacs.fr>",
        "commit_url": "https://github.com/numpy/numpy/commit/5bd71fb76c68f41debe3a15fbf316ce6ef7fd795",
        "buggy_code": "\"(`interpolation` is Deprecated in favor of method)\")",
        "fixed_code": "\"(`interpolation` is Deprecated in favor of `method`)\")",
        "patch": "@@ -4418,7 +4418,7 @@ def _check_interpolation_as_method(method, interpolation, fname):\n         # sanity check, we assume this basically never happens\n         raise TypeError(\n             \"You shall not pass both `method` and `interpolation`!\\n\"\n-            \"(`interpolation` is Deprecated in favor of method)\")\n+            \"(`interpolation` is Deprecated in favor of `method`)\")\n     return interpolation\n \n "
    },
    {
        "commit_id": "9ebee26c6c5cd89623d531608eed25a770d01fff",
        "commit_message": "BUG: Fix handling of C-contiguous and 1-element arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ebee26c6c5cd89623d531608eed25a770d01fff",
        "buggy_code": "x = np.zeros(shape, dtype=np.float64, order='C')",
        "fixed_code": "x = np.zeros(shape, dtype=np.float64)",
        "patch": "@@ -84,6 +84,6 @@ def test_non_contiguous(self):\n     @pytest.mark.parametrize(\"ndim\", range(33))\n     def test_higher_dims(self, ndim):\n         shape = (1,) * ndim\n-        x = np.zeros(shape, dtype=np.float64, order='C')\n+        x = np.zeros(shape, dtype=np.float64)\n \n         assert shape == np.from_dlpack(x).shape"
    },
    {
        "commit_id": "c7d5624c4e89b92e4530aa2f92f662fbe551929d",
        "commit_message": "Merge pull request #20235 from Michael-T-McCann/example-typo\n\nDOC: fix typo in example, put the return statement inside the with context",
        "commit_url": "https://github.com/numpy/numpy/commit/c7d5624c4e89b92e4530aa2f92f662fbe551929d",
        "buggy_code": "...     return it.operands[2]",
        "fixed_code": "...         return it.operands[2]",
        "patch": "@@ -328,7 +328,7 @@\n     ...     with it:\n     ...         for (a, b, c) in it:\n     ...             addop(a, b, out=c)\n-    ...     return it.operands[2]\n+    ...         return it.operands[2]\n \n     Here is the same function, but following the C-style pattern:\n "
    },
    {
        "commit_id": "f5090701de7181d5cab7b7b0c7eec029c00356db",
        "commit_message": "DOC: fix typo in example, throws ValueError if return statement is not inside the with:",
        "commit_url": "https://github.com/numpy/numpy/commit/f5090701de7181d5cab7b7b0c7eec029c00356db",
        "buggy_code": "...     return it.operands[2]",
        "fixed_code": "...          return it.operands[2]",
        "patch": "@@ -328,7 +328,7 @@\n     ...     with it:\n     ...         for (a, b, c) in it:\n     ...             addop(a, b, out=c)\n-    ...     return it.operands[2]\n+    ...          return it.operands[2]\n \n     Here is the same function, but following the C-style pattern:\n "
    },
    {
        "commit_id": "383ef2e7611fba853df20bb2e427faa4ad936df5",
        "commit_message": "Merge pull request #20214 from mattip/work-in-venv\n\nBUG: fix test c-extension compilation inside a venv",
        "commit_url": "https://github.com/numpy/numpy/commit/383ef2e7611fba853df20bb2e427faa4ad936df5",
        "buggy_code": "link_extra = [\"/LIBPATH:\" + os.path.join(sys.exec_prefix, 'libs')]",
        "fixed_code": "link_extra = [\"/LIBPATH:\" + os.path.join(sys.base_prefix, 'libs')]",
        "patch": "@@ -183,7 +183,7 @@ def _c_compile(cfile, outputfilename, include_dirs=[], libraries=[],\n                library_dirs=[]):\n     if sys.platform == 'win32':\n         compile_extra = [\"/we4013\"]\n-        link_extra = [\"/LIBPATH:\" + os.path.join(sys.exec_prefix, 'libs')]\n+        link_extra = [\"/LIBPATH:\" + os.path.join(sys.base_prefix, 'libs')]\n     elif sys.platform.startswith('linux'):\n         compile_extra = [\n             \"-O0\", \"-g\", \"-Werror=implicit-function-declaration\", \"-fPIC\"]"
    },
    {
        "commit_id": "66bd55046a637e0e52c6c8a7d8972995dbe31f3c",
        "commit_message": "BUG: fix test c-extension compilation inside a venv",
        "commit_url": "https://github.com/numpy/numpy/commit/66bd55046a637e0e52c6c8a7d8972995dbe31f3c",
        "buggy_code": "link_extra = [\"/LIBPATH:\" + os.path.join(sys.exec_prefix, 'libs')]",
        "fixed_code": "link_extra = [\"/LIBPATH:\" + os.path.join(sys.base_prefix, 'libs')]",
        "patch": "@@ -183,7 +183,7 @@ def _c_compile(cfile, outputfilename, include_dirs=[], libraries=[],\n                library_dirs=[]):\n     if sys.platform == 'win32':\n         compile_extra = [\"/we4013\"]\n-        link_extra = [\"/LIBPATH:\" + os.path.join(sys.exec_prefix, 'libs')]\n+        link_extra = [\"/LIBPATH:\" + os.path.join(sys.base_prefix, 'libs')]\n     elif sys.platform.startswith('linux'):\n         compile_extra = [\n             \"-O0\", \"-g\", \"-Werror=implicit-function-declaration\", \"-fPIC\"]"
    },
    {
        "commit_id": "84e0707afa587e7655410561324ac36085db2b95",
        "commit_message": "ENH: Configurable allocator (#17582)\n\nFixes gh-17467. Adds a public struct to hold memory manipulation routines PyDataMem_Handler and two new API functions PyDataMem_SetHandler to replace the current routines with the new ones, and PyDataMem_GetHandlerName to get the string name of the current routines (either globally or for a specific ndarray object). This also changes the size of the ndarray object to hold the PyDataMem_Handler active when it was created so subsequent actions on its data memory will remain consistent.\r\n\r\nTests and documentation are included. Along the way, I found some places in the code where the current policy is inconsistent (all data memory handling should have gone through npy_*_cache not PyDataMem_*) so even if this is rejected it might improve the cache handling.\r\n\r\nThe PyDataMem_Handler has fields to override memcpy, these are currently not implemented: memcpy in the code base is untouched. I think this PR is invasive enough as-is, if desired memcpy can be handled in a follow-up PR.\r\n\r\n\r\n* ENH: add and use global configurable memory routines\r\n\r\n* ENH: add tests and a way to compile c-extensions from tests\r\n\r\n* fix allocation/free exposed by tests\r\n\r\n* DOC: document the new APIs (and some old ones too)\r\n\r\n* BUG: return void from FREE, also some cleanup\r\n\r\n* MAINT: changes from review\r\n\r\n* fixes from linter\r\n\r\n* setting ndarray->descr on 0d or scalars mess with FREE\r\n\r\n* make scalar allocation more consistent wrt np_alloc_cache\r\n\r\n* change formatting for sphinx\r\n\r\n* remove memcpy variants\r\n\r\n* update to match NEP 49\r\n\r\n* ENH: add a python-level get_handler_name\r\n\r\n* ENH: add core.multiarray.get_handler_name\r\n\r\n* Allow closure-like definition of the data mem routines\r\n\r\n* Fix incompatible pointer warnings\r\n\r\n* Note PyDataMemAllocator and PyMemAllocatorEx differentiation\r\n\r\nCo-authored-by: Matti Picus <matti.picus@gmail.com>\r\n\r\n* Redefine default allocator handling\r\n\r\n* Always allocate new arrays using the current_handler\r\n\r\n* Search for the mem_handler name of the data owner\r\n\r\n* Sub-comparisons don't need a local mem_handler\r\n\r\n* Make the default_handler a valid PyDataMem_Handler\r\n\r\n* Fix PyDataMem_SetHandler description (NEP discussion)\r\n\r\n* Pass the allocators by reference\r\n\r\n* Implement allocator context-locality\r\n\r\n* Fix documentation, make PyDataMem_GetHandler return const\r\n\r\n* remove import of setuptools==49.1.3, doesn't work on python3.10\r\n\r\n* Fix refcount leaks\r\n\r\n* fix function signatures in test\r\n\r\n* Return early on PyDataMem_GetHandler error (VOID_compare)\r\n\r\n* Add context/thread-locality tests, allow testing custom policies\r\n\r\n* ENH: add and use global configurable memory routines\r\n\r\n* ENH: add tests and a way to compile c-extensions from tests\r\n\r\n* fix allocation/free exposed by tests\r\n\r\n* DOC: document the new APIs (and some old ones too)\r\n\r\n* BUG: return void from FREE, also some cleanup\r\n\r\n* MAINT: changes from review\r\n\r\n* fixes from linter\r\n\r\n* setting ndarray->descr on 0d or scalars mess with FREE\r\n\r\n* make scalar allocation more consistent wrt np_alloc_cache\r\n\r\n* change formatting for sphinx\r\n\r\n* remove memcpy variants\r\n\r\n* update to match NEP 49\r\n\r\n* ENH: add a python-level get_handler_name\r\n\r\n* ENH: add core.multiarray.get_handler_name\r\n\r\n* Allow closure-like definition of the data mem routines\r\n\r\n* Fix incompatible pointer warnings\r\n\r\n* Note PyDataMemAllocator and PyMemAllocatorEx differentiation\r\n\r\nCo-authored-by: Matti Picus <matti.picus@gmail.com>\r\n\r\n* Redefine default allocator handling\r\n\r\n* Always allocate new arrays using the current_handler\r\n\r\n* Search for the mem_handler name of the data owner\r\n\r\n* Sub-comparisons don't need a local mem_handler\r\n\r\n* Make the default_handler a valid PyDataMem_Handler\r\n\r\n* Fix PyDataMem_SetHandler description (NEP discussion)\r\n\r\n* Pass the allocators by reference\r\n\r\n* remove import of setuptools==49.1.3, doesn't work on python3.10\r\n\r\n* fix function signatures in test\r\n\r\n* try to fix cygwin extension building\r\n\r\n* YAPF mem_policy test\r\n\r\n* Less empty lines, more comments (tests)\r\n\r\n* Apply suggestions from code review (set an exception and)\r\n\r\nCo-authored-by: Matti Picus <matti.picus@gmail.com>\r\n\r\n* skip test on cygwin\r\n\r\n* update API hash for changed signature\r\n\r\n* TST: add gc.collect to make sure cycles are broken\r\n\r\n* Implement thread-locality for PyPy\r\n\r\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>\r\n\r\n* Update numpy/core/tests/test_mem_policy.py\r\n\r\nCo-authored-by: Sebastian Berg <sebastian@sipsolutions.net>\r\n\r\n* fixes from review\r\n\r\n* update circleci config\r\n\r\n* fix test\r\n\r\n* make the connection between OWNDATA and having a allocator handle more explicit\r\n\r\n* improve docstring, fix flake8 for tests\r\n\r\n* update PyDataMem_GetHandler() from review\r\n\r\n* Implement allocator lifetime management\r\n\r\n* update NEP and add best-effort handling of error in PyDataMem_UserFREE\r\n\r\n* ENH: fix and test for blindly taking ownership of data\r\n\r\n* Update doc/neps/nep-0049.rst\r\n\r\nCo-authored-by: Elias Koromilas <elias.koromilas@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/84e0707afa587e7655410561324ac36085db2b95",
        "buggy_code": "from ._private import decorators as dec",
        "fixed_code": "from ._private import extbuild, decorators as dec",
        "patch": "@@ -10,7 +10,7 @@\n from ._private.utils import *\n from ._private.utils import (_assert_valid_refcount, _gen_alignment_data,\n                              IS_PYSTON)\n-from ._private import decorators as dec\n+from ._private import extbuild, decorators as dec\n from ._private.nosetester import (\n     run_module_suite, NoseTester as Tester\n     )"
    },
    {
        "commit_id": "48e6ac6e120c6d408d85d4fdd3c4867e0195a758",
        "commit_message": "BUG,DOC: Resolve a refguide failure for `ndarray.__class_getitem__` (#20187)",
        "commit_url": "https://github.com/numpy/numpy/commit/48e6ac6e120c6d408d85d4fdd3c4867e0195a758",
        "buggy_code": "numpy.ndarray[typing.Any, numpy.dtype[Any]]",
        "fixed_code": "numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]",
        "patch": "@@ -2819,7 +2819,7 @@\n     >>> import numpy as np\n \n     >>> np.ndarray[Any, np.dtype[Any]]\n-    numpy.ndarray[typing.Any, numpy.dtype[Any]]\n+    numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]\n \n     Notes\n     -----"
    },
    {
        "commit_id": "13cd98abdf77c7c181da9f883d54a274100a03c8",
        "commit_message": "MAINT: Fixups and new tests based on Marten's reviews\n\nMore fixups are coming, the biggest change is that the error message\nis now improved when a reduction makes no sense such as\n`np.subtract.reduce(np.array([1, 2, 3], dtype=\"M8[s]\"))`\nwhere input and output cannot have the same descriptor.\n\n(Some more fixups still to go)",
        "commit_url": "https://github.com/numpy/numpy/commit/13cd98abdf77c7c181da9f883d54a274100a03c8",
        "buggy_code": "match=\"The resolved dtypes are not compatible\"):",
        "fixed_code": "match=\"the resolved dtypes are not compatible\"):",
        "patch": "@@ -114,7 +114,7 @@ def test_possible_and_impossible_reduce(self):\n         # possible (the relaxed version of the old refusal to handle any\n         # flexible dtype).\n         with pytest.raises(TypeError,\n-                match=\"The resolved dtypes are not compatible\"):\n+                match=\"the resolved dtypes are not compatible\"):\n             np.multiply.reduce(a)\n \n     def test_basic_multiply_promotion(self):"
    },
    {
        "commit_id": "c2d2104356b51be6c9596d354d7fa389c6a8ddbc",
        "commit_message": "Merge pull request #20091 from johan12345/patch-1\n\nDOC: fix typo in docstring of bitwise_or",
        "commit_url": "https://github.com/numpy/numpy/commit/c2d2104356b51be6c9596d354d7fa389c6a8ddbc",
        "buggy_code": "The number 13 has the binaray representation ``00001101``. Likewise,",
        "fixed_code": "The number 13 has the binary representation ``00001101``. Likewise,",
        "patch": "@@ -668,7 +668,7 @@ def add_newdoc(place, name, doc):\n \n     Examples\n     --------\n-    The number 13 has the binaray representation ``00001101``. Likewise,\n+    The number 13 has the binary representation ``00001101``. Likewise,\n     16 is represented by ``00010000``.  The bit-wise OR of 13 and 16 is\n     then ``000111011``, or 29:\n "
    },
    {
        "commit_id": "952ae80c9e780100a0fa017fe8ef0fe988ba4ad2",
        "commit_message": "DOC: fix typo in docstring of bitwise_or",
        "commit_url": "https://github.com/numpy/numpy/commit/952ae80c9e780100a0fa017fe8ef0fe988ba4ad2",
        "buggy_code": "The number 13 has the binaray representation ``00001101``. Likewise,",
        "fixed_code": "The number 13 has the binary representation ``00001101``. Likewise,",
        "patch": "@@ -668,7 +668,7 @@ def add_newdoc(place, name, doc):\n \n     Examples\n     --------\n-    The number 13 has the binaray representation ``00001101``. Likewise,\n+    The number 13 has the binary representation ``00001101``. Likewise,\n     16 is represented by ``00010000``.  The bit-wise OR of 13 and 16 is\n     then ``000111011``, or 29:\n "
    },
    {
        "commit_id": "dfc3761d6dedadb677aca907a0d098406a3241e7",
        "commit_message": "MAINT: Fix LGTM.com warning: Implicit string concatenation in a list\n\nImplicit string concatenation. Maybe missing a comma?",
        "commit_url": "https://github.com/numpy/numpy/commit/dfc3761d6dedadb677aca907a0d098406a3241e7",
        "buggy_code": "'#name#_return_value_len+1) == NULL) {',",
        "fixed_code": "+ '#name#_return_value_len+1) == NULL) {',",
        "patch": "@@ -566,7 +566,7 @@\n         'callfortran':'#name#_return_value,#name#_return_value_len,',\n         'callfortranroutine':['    #name#_return_value_len = #rlength#;',\n                               '    if ((#name#_return_value = (string)malloc('\n-                                  '#name#_return_value_len+1) == NULL) {',\n+                              + '#name#_return_value_len+1) == NULL) {',\n                               '        PyErr_SetString(PyExc_MemoryError, \\\"out of memory\\\");',\n                               '        f2py_success = 0;',\n                               '    } else {',"
    },
    {
        "commit_id": "cbfa658684d7e40005b9bcb84bd11838349366cb",
        "commit_message": "MAINT: Fix typo in public API\n\nBy keeping both variants of the keyowrd parameter, we achieve backwards\ncompatibility. The old mispelled variant has been removed from the\ndocumentation, the new variant does appear in the documentation and\nusing noth variants raises a TypeError.\n\nAdditionally, the old variant can only be used as a keyword argument,\nnot as a positional argument.\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/cbfa658684d7e40005b9bcb84bd11838349366cb",
        "buggy_code": "mrectxt = fromtextfile(path, delimitor=',', varnames='ABCDEFG')",
        "fixed_code": "mrectxt = fromtextfile(path, delimiter=',', varnames='ABCDEFG')",
        "patch": "@@ -468,7 +468,7 @@ def test_fromtextfile(self):\n         with temppath() as path:\n             with open(path, 'w') as f:\n                 f.write(fcontent)\n-            mrectxt = fromtextfile(path, delimitor=',', varnames='ABCDEFG')\n+            mrectxt = fromtextfile(path, delimiter=',', varnames='ABCDEFG')\n         assert_(isinstance(mrectxt, MaskedRecords))\n         assert_equal(mrectxt.F, [1, 1, 1, 1])\n         assert_equal(mrectxt.E._mask, [1, 1, 1, 1])"
    },
    {
        "commit_id": "e874e1319b0b6f885886bf12b36b7869624edb5c",
        "commit_message": "REV: 8396026\n\nRevert delimitor -> delimiter as the parameter name is part of the\npublic API. We'll find a different solution to fix that.",
        "commit_url": "https://github.com/numpy/numpy/commit/e874e1319b0b6f885886bf12b36b7869624edb5c",
        "buggy_code": "mrectxt = fromtextfile(path, delimiter=',', varnames='ABCDEFG')",
        "fixed_code": "mrectxt = fromtextfile(path, delimitor=',', varnames='ABCDEFG')",
        "patch": "@@ -468,7 +468,7 @@ def test_fromtextfile(self):\n         with temppath() as path:\n             with open(path, 'w') as f:\n                 f.write(fcontent)\n-            mrectxt = fromtextfile(path, delimiter=',', varnames='ABCDEFG')\n+            mrectxt = fromtextfile(path, delimitor=',', varnames='ABCDEFG')\n         assert_(isinstance(mrectxt, MaskedRecords))\n         assert_equal(mrectxt.F, [1, 1, 1, 1])\n         assert_equal(mrectxt.E._mask, [1, 1, 1, 1])"
    },
    {
        "commit_id": "11420ae27f36bf8a49b7661be44dad94f39a79b0",
        "commit_message": "Merge pull request #19818 from sistaseetaram/related-to-#19077\n\nMAINT: fix unhashable instance and potential exception identified by LGTM.",
        "commit_url": "https://github.com/numpy/numpy/commit/11420ae27f36bf8a49b7661be44dad94f39a79b0",
        "buggy_code": "Union[[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]]",
        "fixed_code": "Union[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]",
        "patch": "@@ -37,7 +37,7 @@\n \n Device = Any\n Dtype = Type[\n-    Union[[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]]\n+    Union[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]\n ]\n SupportsDLPack = Any\n SupportsBufferProtocol = Any"
    },
    {
        "commit_id": "e4c589054b342dc750cdd09686c0c01ab762679c",
        "commit_message": " fix unhashable instance and potential exception identified by LGTM",
        "commit_url": "https://github.com/numpy/numpy/commit/e4c589054b342dc750cdd09686c0c01ab762679c",
        "buggy_code": "Union[(int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64)]",
        "fixed_code": "Union[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]",
        "patch": "@@ -37,7 +37,7 @@\n \n Device = Any\n Dtype = Type[\n-    Union[(int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64)]\n+    Union[int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64]\n ]\n SupportsDLPack = Any\n SupportsBufferProtocol = Any"
    },
    {
        "commit_id": "7b229a277a2a1ed8e3d49d361acbc0d4918f8bf5",
        "commit_message": "Fix a mistake",
        "commit_url": "https://github.com/numpy/numpy/commit/7b229a277a2a1ed8e3d49d361acbc0d4918f8bf5",
        "buggy_code": "class ExprWarning(warnings.UserWarning):",
        "fixed_code": "class ExprWarning(UserWarning):",
        "patch": "@@ -99,7 +99,7 @@ def _pairs_add(d, k, v):\n             del d[k]\n \n \n-class ExprWarning(warnings.UserWarning):\n+class ExprWarning(UserWarning):\n     pass\n \n "
    },
    {
        "commit_id": "a2a61e212fb1b8f27bc522b3769de93afdbb419d",
        "commit_message": "MAINT: Fix spelling",
        "commit_url": "https://github.com/numpy/numpy/commit/a2a61e212fb1b8f27bc522b3769de93afdbb419d",
        "buggy_code": "inidicate a cast-safety as well (which is normally always \"no\").",
        "fixed_code": "indicate a cast-safety as well (which is normally always \"no\").",
        "patch": "@@ -539,7 +539,7 @@ def test_forced_dtype_times(self):\n     @pytest.mark.parametrize(\"ufunc\", [np.add, np.sqrt])\n     def test_cast_safety(self, ufunc):\n         \"\"\"Basic test for the safest casts, because ufuncs inner loops can\n-        inidicate a cast-safety as well (which is normally always \"no\").\n+        indicate a cast-safety as well (which is normally always \"no\").\n         \"\"\"\n         def call_ufunc(arr, **kwargs):\n             return ufunc(*(arr,) * ufunc.nin, **kwargs)"
    },
    {
        "commit_id": "84ced527f53a0a2e0b937ece69c56fd57fd391d1",
        "commit_message": "TST: increase error tol from 12 to 11 decimal places for test_approximation\n\nSVML library is accurate upto 4ULP and hence reduces the accuracy\nslightly",
        "commit_url": "https://github.com/numpy/numpy/commit/84ced527f53a0a2e0b937ece69c56fd57fd391d1",
        "buggy_code": "assert_almost_equal(p(x), powx(x, t), decimal=12)",
        "fixed_code": "assert_almost_equal(p(x), powx(x, t), decimal=11)",
        "patch": "@@ -597,4 +597,4 @@ def powx(x, p):\n         for deg in range(0, 10):\n             for t in range(0, deg + 1):\n                 p = Chebyshev.interpolate(powx, deg, domain=[0, 2], args=(t,))\n-                assert_almost_equal(p(x), powx(x, t), decimal=12)\n+                assert_almost_equal(p(x), powx(x, t), decimal=11)"
    },
    {
        "commit_id": "04216da0970380bb9ef3c0437eb98d63bb78b680",
        "commit_message": "Merge pull request #19695 from ghilesmeddour/topic/fix_typo\n\nDOC: Fix typo in `unwrap` docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/04216da0970380bb9ef3c0437eb98d63bb78b680",
        "buggy_code": "For the default case where `period` is :math:`2\\pi` and is `discont` is",
        "fixed_code": "For the default case where `period` is :math:`2\\pi` and `discont` is",
        "patch": "@@ -1512,7 +1512,7 @@ def unwrap(p, discont=None, axis=-1, *, period=2*pi):\n     difference from their predecessor of more than ``max(discont, period/2)``\n     to their `period`-complementary values.\n \n-    For the default case where `period` is :math:`2\\pi` and is `discont` is\n+    For the default case where `period` is :math:`2\\pi` and `discont` is\n     :math:`\\pi`, this unwraps a radian phase `p` such that adjacent differences\n     are never greater than :math:`\\pi` by adding :math:`2k\\pi` for some\n     integer :math:`k`."
    },
    {
        "commit_id": "a562cb2d44760d01a5481280d98248026fabeb40",
        "commit_message": "DOC: Fix typo in `unwrap` docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/a562cb2d44760d01a5481280d98248026fabeb40",
        "buggy_code": "For the default case where `period` is :math:`2\\pi` and is `discont` is",
        "fixed_code": "For the default case where `period` is :math:`2\\pi` and `discont` is",
        "patch": "@@ -1512,7 +1512,7 @@ def unwrap(p, discont=None, axis=-1, *, period=2*pi):\n     difference from their predecessor of more than ``max(discont, period/2)``\n     to their `period`-complementary values.\n \n-    For the default case where `period` is :math:`2\\pi` and is `discont` is\n+    For the default case where `period` is :math:`2\\pi` and `discont` is\n     :math:`\\pi`, this unwraps a radian phase `p` such that adjacent differences\n     are never greater than :math:`\\pi` by adding :math:`2k\\pi` for some\n     integer :math:`k`."
    },
    {
        "commit_id": "d5956c170b07cf26b05c921d810dc387d7e819da",
        "commit_message": "Fix the return annotation for numpy.array_api.Array.__setitem__",
        "commit_url": "https://github.com/numpy/numpy/commit/d5956c170b07cf26b05c921d810dc387d7e819da",
        "buggy_code": ") -> Array:",
        "fixed_code": ") -> None:",
        "patch": "@@ -647,7 +647,7 @@ def __setitem__(\n         ],\n         value: Union[int, float, bool, Array],\n         /,\n-    ) -> Array:\n+    ) -> None:\n         \"\"\"\n         Performs the operation __setitem__.\n         \"\"\""
    },
    {
        "commit_id": "f13f08f6c00ff5debf918dd50546b3215e39a5b8",
        "commit_message": "Fix the array API nonzero() function",
        "commit_url": "https://github.com/numpy/numpy/commit/f13f08f6c00ff5debf918dd50546b3215e39a5b8",
        "buggy_code": "return Array._new(np.nonzero(x._array))",
        "fixed_code": "return tuple(Array._new(i) for i in np.nonzero(x._array))",
        "patch": "@@ -29,7 +29,7 @@ def nonzero(x: Array, /) -> Tuple[Array, ...]:\n \n     See its docstring for more information.\n     \"\"\"\n-    return Array._new(np.nonzero(x._array))\n+    return tuple(Array._new(i) for i in np.nonzero(x._array))\n \n def where(condition: Array, x1: Array, x2: Array, /) -> Array:\n     \"\"\""
    },
    {
        "commit_id": "9d5d0ec2264c86a19714cf185a5a183df14cbb94",
        "commit_message": "Fix a typo in an error message",
        "commit_url": "https://github.com/numpy/numpy/commit/9d5d0ec2264c86a19714cf185a5a183df14cbb94",
        "buggy_code": "raise TypeError('Only integer_or_boolean dtypes are allowed in bitwise_and')",
        "fixed_code": "raise TypeError('Only integer or boolean dtypes are allowed in bitwise_and')",
        "patch": "@@ -113,7 +113,7 @@ def bitwise_and(x1: Array, x2: Array, /) -> Array:\n     See its docstring for more information.\n     \"\"\"\n     if x1.dtype not in _integer_or_boolean_dtypes or x2.dtype not in _integer_or_boolean_dtypes:\n-        raise TypeError('Only integer_or_boolean dtypes are allowed in bitwise_and')\n+        raise TypeError('Only integer or boolean dtypes are allowed in bitwise_and')\n     x1, x2 = Array._normalize_two_args(x1, x2)\n     return Array._new(np.bitwise_and(x1._array, x2._array))\n "
    },
    {
        "commit_id": "38c61b6f33d32b6f394b0a309c93c78cadab7e07",
        "commit_message": "BUG: typo",
        "commit_url": "https://github.com/numpy/numpy/commit/38c61b6f33d32b6f394b0a309c93c78cadab7e07",
        "buggy_code": "else",
        "fixed_code": "else:",
        "patch": "@@ -151,7 +151,7 @@ def unpack_windows_zip(fname):\n                     'in downloaded zipfile' % OPENBLAS_LONG\n         if get_ilp64() is None:\n             target = os.path.join(gettempdir(), 'openblas.a')\n-        else\n+        else:\n             target = os.path.join(gettempdir(), 'openblas64_.a')\n         with open(target, 'wb') as fid:\n             fid.write(zf.read(lib[0]))"
    },
    {
        "commit_id": "05d6e615095e04c5f3bc6e9256882bcdd2950f12",
        "commit_message": "fix \")\" position",
        "commit_url": "https://github.com/numpy/numpy/commit/05d6e615095e04c5f3bc6e9256882bcdd2950f12",
        "buggy_code": "``pip install numpy --no-binary numpy)`` looks for BLAS and",
        "fixed_code": "``pip install numpy --no-binary numpy``) looks for BLAS and",
        "patch": "@@ -2374,7 +2374,7 @@ def show():\n                 compiled with gcc/gfortran.\n \n                 Installing numpy from source (e.g.\n-                ``pip install numpy --no-binary numpy)`` looks for BLAS and\n+                ``pip install numpy --no-binary numpy``) looks for BLAS and\n                 LAPACK dynamic link libraries at build time. This search is\n                 influenced by the environment variables\n                 NPY_BLAS_ORDER/NPY_LAPACK_ORDER, if set, and the file"
    },
    {
        "commit_id": "6765494edee2b90f239ae622abb5f3a7d218aa84",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/6765494edee2b90f239ae622abb5f3a7d218aa84",
        "buggy_code": "_boolean_dtypes = (bool)",
        "fixed_code": "_boolean_dtypes = (bool,)",
        "patch": "@@ -17,7 +17,7 @@\n \n _all_dtypes = (int8, int16, int32, int64, uint8, uint16, uint32, uint64,\n                float32, float64, bool)\n-_boolean_dtypes = (bool)\n+_boolean_dtypes = (bool,)\n _floating_dtypes = (float32, float64)\n _integer_dtypes = (int8, int16, int32, int64, uint8, uint16, uint32, uint64)\n _integer_or_boolean_dtypes = (bool, int8, int16, int32, int64, uint8, uint16, uint32, uint64)"
    },
    {
        "commit_id": "4fcea6deac29276605e58b0a011f7ef6d089f66b",
        "commit_message": "Merge pull request #19393 from wandrewjam/remove-base-exception\n\nMAINT: fix overly broad exception handling listed in LGTM",
        "commit_url": "https://github.com/numpy/numpy/commit/4fcea6deac29276605e58b0a011f7ef6d089f66b",
        "buggy_code": "except BaseException:",
        "fixed_code": "except (Exception, SystemExit):",
        "patch": "@@ -904,7 +904,7 @@ def _lookfor_generate_cache(module, import_modules, regenerate):\n                                 sys.stdout = old_stdout\n                                 sys.stderr = old_stderr\n                         # Catch SystemExit, too\n-                        except BaseException:\n+                        except (Exception, SystemExit):\n                             continue\n \n             for n, v in _getmembers(item):"
    },
    {
        "commit_id": "d5cac2c1991daa32a1423634e980e9b98035ebef",
        "commit_message": "Merge pull request #19402 from ZJUGuoShuai/patch-1\n\nDOC: typo fix",
        "commit_url": "https://github.com/numpy/numpy/commit/d5cac2c1991daa32a1423634e980e9b98035ebef",
        "buggy_code": "- Allows memory-mapping of the data. See `open_memmep`.",
        "fixed_code": "- Allows memory-mapping of the data. See `open_memmap`.",
        "patch": "@@ -44,7 +44,7 @@\n   read most ``.npy`` files that they have been given without much\n   documentation.\n \n-- Allows memory-mapping of the data. See `open_memmep`.\n+- Allows memory-mapping of the data. See `open_memmap`.\n \n - Can be read from a filelike stream object instead of an actual file.\n "
    },
    {
        "commit_id": "be07cbcb57a9ae449302de595144539e9020a021",
        "commit_message": "DOC: typo fix",
        "commit_url": "https://github.com/numpy/numpy/commit/be07cbcb57a9ae449302de595144539e9020a021",
        "buggy_code": "- Allows memory-mapping of the data. See `open_memmep`.",
        "fixed_code": "- Allows memory-mapping of the data. See `open_memmap`.",
        "patch": "@@ -44,7 +44,7 @@\n   read most ``.npy`` files that they have been given without much\n   documentation.\n \n-- Allows memory-mapping of the data. See `open_memmep`.\n+- Allows memory-mapping of the data. See `open_memmap`.\n \n - Can be read from a filelike stream object instead of an actual file.\n "
    },
    {
        "commit_id": "7949ba5ec0543d3b1fd68e95072838fbb3333492",
        "commit_message": "MAINT: fix overly broad exception handling listed in LGTM\n\nRelates to ticket #19077",
        "commit_url": "https://github.com/numpy/numpy/commit/7949ba5ec0543d3b1fd68e95072838fbb3333492",
        "buggy_code": "except BaseException:",
        "fixed_code": "except SystemExit:",
        "patch": "@@ -904,7 +904,7 @@ def _lookfor_generate_cache(module, import_modules, regenerate):\n                                 sys.stdout = old_stdout\n                                 sys.stderr = old_stderr\n                         # Catch SystemExit, too\n-                        except BaseException:\n+                        except SystemExit:\n                             continue\n \n             for n, v in _getmembers(item):"
    },
    {
        "commit_id": "7949ba5ec0543d3b1fd68e95072838fbb3333492",
        "commit_message": "MAINT: fix overly broad exception handling listed in LGTM\n\nRelates to ticket #19077",
        "commit_url": "https://github.com/numpy/numpy/commit/7949ba5ec0543d3b1fd68e95072838fbb3333492",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -275,7 +275,7 @@ def scrubF2CSource(c_file):\n def ensure_executable(name):\n     try:\n         which(name)\n-    except:\n+    except Exception:\n         raise SystemExit(name + ' not found')\n \n def create_name_header(output_dir):"
    },
    {
        "commit_id": "1fe600c15c7e988ecde323a5807f11f5703567eb",
        "commit_message": "MAINT: Replace `\"dtype[Any]\"` with `dtype` in the definiton of `npt.ArrayLike`\n\nStrings and types that are not subscriptable during runtime can cause issues with runtime Introspection helpers such as `typing.get_type_hints`.\n\nWhile this is very much an upstream issue, the particular case of `npt.ArrayLike` can be quite easily resolved in numpy.",
        "commit_url": "https://github.com/numpy/numpy/commit/1fe600c15c7e988ecde323a5807f11f5703567eb",
        "buggy_code": "\"dtype[Any]\",",
        "fixed_code": "dtype,",
        "patch": "@@ -73,7 +73,7 @@ class _SupportsArray(Generic[_DType_co]): ...\n ArrayLike = Union[\n     _RecursiveSequence,\n     _ArrayLike[\n-        \"dtype[Any]\",\n+        dtype,\n         Union[bool, int, float, complex, str, bytes]\n     ],\n ]"
    },
    {
        "commit_id": "a79a913efd9bd7b7d8f8fc8619768dd2b30067f7",
        "commit_message": "Merge pull request #19135 from ganesh-k13/BUG_13236_remove_complex_floor_divide\n\nBUG: Remove complex floor divide",
        "commit_url": "https://github.com/numpy/numpy/commit/a79a913efd9bd7b7d8f8fc8619768dd2b30067f7",
        "buggy_code": "TD(flts + cmplx),",
        "fixed_code": "TD(flts),",
        "patch": "@@ -329,7 +329,7 @@ def english_upper(s):\n           'PyUFunc_DivisionTypeResolver',\n           TD(ints, cfunc_alias='divide',\n               dispatch=[('loops_arithmetic', 'bBhHiIlLqQ')]),\n-          TD(flts + cmplx),\n+          TD(flts),\n           [TypeDescription('m', FullTypeDescr, 'mq', 'm'),\n            TypeDescription('m', FullTypeDescr, 'md', 'm'),\n            TypeDescription('m', FullTypeDescr, 'mm', 'q'),"
    },
    {
        "commit_id": "d60d60716d73e6517b08d0f81b2ed82fad0ba2fb",
        "commit_message": "MAINT: Move array-prep and type resolution to earlier\n\nThis also fixes a bug in the masked handling of array prep, that\nwas seems to  have been simply completely broken.\n\nNote that the long term goal is to unify the masked and non-masked,\nbut that is tricky right now due to the different signatures.",
        "commit_url": "https://github.com/numpy/numpy/commit/d60d60716d73e6517b08d0f81b2ed82fad0ba2fb",
        "buggy_code": "assert_raises(ValueError, self.matmul, np.arange(10), np.void(b'abc'))",
        "fixed_code": "assert_raises(TypeError, self.matmul, np.arange(10), np.void(b'abc'))",
        "patch": "@@ -6723,7 +6723,7 @@ def __rmatmul__(self, other):\n     def test_matmul_raises(self):\n         assert_raises(TypeError, self.matmul, np.int8(5), np.int8(5))\n         assert_raises(TypeError, self.matmul, np.void(b'abc'), np.void(b'abc'))\n-        assert_raises(ValueError, self.matmul, np.arange(10), np.void(b'abc'))\n+        assert_raises(TypeError, self.matmul, np.arange(10), np.void(b'abc'))\n \n def test_matmul_inplace():\n     # It would be nice to support in-place matmul eventually, but for now"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "super(AxisError, self).__init__(msg)",
        "fixed_code": "super().__init__(msg)",
        "patch": "@@ -135,7 +135,7 @@ def __init__(self, axis, ndim=None, msg_prefix=None):\n             if msg_prefix is not None:\n                 msg = \"{}: {}\".format(msg_prefix, msg)\n \n-        super(AxisError, self).__init__(msg)\n+        super().__init__(msg)\n \n \n @_display_as_base"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "Graphical illustration of ``endpoint`` parameter:",
        "fixed_code": "Graphical illustration of `endpoint` parameter:",
        "patch": "@@ -371,7 +371,7 @@ def geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0):\n             6.12323400e-17+1.00000000e+00j,  7.07106781e-01+7.07106781e-01j,\n             1.00000000e+00+0.00000000e+00j])\n \n-    Graphical illustration of ``endpoint`` parameter:\n+    Graphical illustration of `endpoint` parameter:\n \n     >>> import matplotlib.pyplot as plt\n     >>> N = 10"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "print(\"    \" + \"    \\n\".join(fragments))",
        "fixed_code": "print(\"    \" + \"\\n    \".join(fragments))",
        "patch": "@@ -12,5 +12,5 @@\n \n if fragments:\n     print(\"The following files were not found by towncrier:\")\n-    print(\"    \" + \"    \\n\".join(fragments))\n+    print(\"    \" + \"\\n    \".join(fragments))\n     sys.exit(1)"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "names = re.compile(r'r\\d+\\s[|]\\s(.*)\\s[|]\\s200')",
        "fixed_code": "names = re.compile(r'r\\d+\\s\\|\\s(.*)\\s\\|\\s200')",
        "patch": "@@ -4,7 +4,7 @@\n import numpy as np\n import os\n \n-names = re.compile(r'r\\d+\\s[|]\\s(.*)\\s[|]\\s200')\n+names = re.compile(r'r\\d+\\s\\|\\s(.*)\\s\\|\\s200')\n \n def get_count(filename, repo):\n     mystr = open(filename).read()"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "Takes a lexed set of tokens, and removes whitespace when there is",
        "fixed_code": "Takes a lexed list of tokens, and removes whitespace when there is",
        "patch": "@@ -705,7 +705,7 @@ def lex(s, name=None, trim_whitespace=True, line_offset=0, delimiters=None):\n \n def trim_lex(tokens):\n     r\"\"\"\n-    Takes a lexed set of tokens, and removes whitespace when there is\n+    Takes a lexed list of tokens, and removes whitespace when there is\n     a directive on a line by itself:\n \n        >>> tokens = lex('{{if x}}\\nx\\n{{endif}}\\ny', trim_whitespace=False)"
    },
    {
        "commit_id": "8c78b84968e580f24b3705378fb35705a434cdf1",
        "commit_message": "Merge branch 'main' into matrix_rank-doc-fix",
        "commit_url": "https://github.com/numpy/numpy/commit/8c78b84968e580f24b3705378fb35705a434cdf1",
        "buggy_code": "class Job(object):",
        "fixed_code": "class Job:",
        "patch": "@@ -103,7 +103,7 @@ def summarise(jobs):\n     print(\"   \" + \"-\" * end)\n \n \n-class Job(object):\n+class Job:\n     def __init__(self, length):\n         global count\n         self.id = count"
    },
    {
        "commit_id": "b92df509ca6767f65891b1b0eac6e64ee7621ee4",
        "commit_message": "Fix lint E225 complaint",
        "commit_url": "https://github.com/numpy/numpy/commit/b92df509ca6767f65891b1b0eac6e64ee7621ee4",
        "buggy_code": "c = a>=3",
        "fixed_code": "c = a >= 3",
        "patch": "@@ -700,7 +700,7 @@ def test_testSingleElementSubscript(self):\n     def test_assignment_by_condition(self):\n         # Test for gh-18951\n         a = array([1, 2, 3, 4], mask=[1, 0, 1, 0])\n-        c = a>=3\n+        c = a >= 3\n         a[c] = 5\n         assert_(a[2] is masked)\n "
    },
    {
        "commit_id": "7a181643665a1a71cb720baecf3713767650a64f",
        "commit_message": "Merge pull request #19214 from kmaehashi/fix-np-version-major\n\nENH: Support major version larger than 9 in `NumpyVersion`",
        "commit_url": "https://github.com/numpy/numpy/commit/7a181643665a1a71cb720baecf3713767650a64f",
        "buggy_code": "for ver in ['1.9.0', '2.0.0', '1.8.1']:",
        "fixed_code": "for ver in ['1.9.0', '2.0.0', '1.8.1', '10.0.1']:",
        "patch": "@@ -7,7 +7,7 @@\n \n def test_main_versions():\n     assert_(NumpyVersion('1.8.0') == '1.8.0')\n-    for ver in ['1.9.0', '2.0.0', '1.8.1']:\n+    for ver in ['1.9.0', '2.0.0', '1.8.1', '10.0.1']:\n         assert_(NumpyVersion('1.8.0') < ver)\n \n     for ver in ['1.7.0', '1.7.1', '0.9.9']:"
    },
    {
        "commit_id": "bd2209a779d0dd3998451ed808725f6ec6306b21",
        "commit_message": "DOC: fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/bd2209a779d0dd3998451ed808725f6ec6306b21",
        "buggy_code": "can be > 9) in principle):",
        "fixed_code": "can be > 9 in principle):",
        "patch": "@@ -15,7 +15,7 @@ class NumpyVersion():\n     \"\"\"Parse and compare numpy version strings.\n \n     NumPy has the following versioning scheme (numbers given are examples; they\n-    can be > 9) in principle):\n+    can be > 9 in principle):\n \n     - Released version: '1.8.0', '1.8.1', etc.\n     - Alpha: '1.8.0a1', '1.8.0a2', etc."
    },
    {
        "commit_id": "7f49243908d480e2cd171648e3497c421ef2085e",
        "commit_message": "Merge pull request #19177 from i-shenl/i-shenl/set-icc-c99\n\nBUG: Add ``-std=c99`` to intel icc compiler flags on linux",
        "commit_url": "https://github.com/numpy/numpy/commit/7f49243908d480e2cd171648e3497c421ef2085e",
        "buggy_code": "self.cc_exe = ('icc -m64 -fPIC -fp-model strict -O3 '",
        "fixed_code": "self.cc_exe = ('icc -std=c99 -m64 -fPIC -fp-model strict -O3 '",
        "patch": "@@ -58,7 +58,7 @@ def __init__(self, verbose=0, dry_run=0, force=0):\n \n         v = self.get_version()\n         mpopt = 'openmp' if v and v < '15' else 'qopenmp'\n-        self.cc_exe = ('icc -m64 -fPIC -fp-model strict -O3 '\n+        self.cc_exe = ('icc -std=c99 -m64 -fPIC -fp-model strict -O3 '\n                        '-fomit-frame-pointer -{}').format(mpopt)\n         compiler = self.cc_exe\n "
    },
    {
        "commit_id": "7162dc3c9f3cc02434c50dfb4e55b790453c00a4",
        "commit_message": "REV,BUG: Replace `NotImplemented` with `typing.Any`",
        "commit_url": "https://github.com/numpy/numpy/commit/7162dc3c9f3cc02434c50dfb4e55b790453c00a4",
        "buggy_code": "_DTypeDict = NotImplemented",
        "fixed_code": "_DTypeDict = Any",
        "patch": "@@ -81,7 +81,7 @@ class _SupportsDType(Protocol[_DType_co]):\n         def dtype(self) -> _DType_co: ...\n \n else:\n-    _DTypeDict = NotImplemented\n+    _DTypeDict = Any\n \n     class _SupportsDType: ...\n     _SupportsDType = GenericAlias(_SupportsDType, _DType_co)"
    },
    {
        "commit_id": "982cafd324d6b0a9c77b61f2ea3ca335812a2949",
        "commit_message": "BUG: Fixe an issue wherein `_GenericAlias` could raise for non-tuple parameters",
        "commit_url": "https://github.com/numpy/numpy/commit/982cafd324d6b0a9c77b61f2ea3ca335812a2949",
        "buggy_code": "self._parameters = tuple(_parse_parameters(args))",
        "fixed_code": "self._parameters = tuple(_parse_parameters(self.__args__))",
        "patch": "@@ -104,7 +104,7 @@ def __parameters__(self) -> Tuple[TypeVar, ...]:\n     def __init__(self, origin: type, args: Any) -> None:\n         self._origin = origin\n         self._args = args if isinstance(args, tuple) else (args,)\n-        self._parameters = tuple(_parse_parameters(args))\n+        self._parameters = tuple(_parse_parameters(self.__args__))\n \n     @property\n     def __call__(self) -> type:"
    },
    {
        "commit_id": "75495a3cdedfd2ed381744732ca1c2a274ad10db",
        "commit_message": "BUG: re-introduce short-version as it was",
        "commit_url": "https://github.com/numpy/numpy/commit/75495a3cdedfd2ed381744732ca1c2a274ad10db",
        "buggy_code": "short_version: str = vinfo['version']",
        "fixed_code": "short_version: str = vinfo['version'].split(\"+\")[0]",
        "patch": "@@ -5,8 +5,8 @@\n vinfo = get_versions()\n version: str = vinfo[\"version\"]\n full_version: str = vinfo['version']\n-short_version: str = vinfo['version']\n git_revision: str = vinfo['full-revisionid']\n release = 'dev0' not in version and '+' not in version\n+short_version: str = vinfo['version'].split(\"+\")[0]\n \n del get_versions, vinfo"
    },
    {
        "commit_id": "fcf4749ae97c8c46a28abb02e099ffd59a4c426b",
        "commit_message": "BUG: Removed complex type for floor_divide",
        "commit_url": "https://github.com/numpy/numpy/commit/fcf4749ae97c8c46a28abb02e099ffd59a4c426b",
        "buggy_code": "TD(flts + cmplx),",
        "fixed_code": "TD(flts),",
        "patch": "@@ -329,7 +329,7 @@ def english_upper(s):\n           'PyUFunc_DivisionTypeResolver',\n           TD(ints, cfunc_alias='divide',\n               dispatch=[('loops_arithmetic', 'bBhHiIlLqQ')]),\n-          TD(flts + cmplx),\n+          TD(flts),\n           [TypeDescription('m', FullTypeDescr, 'mq', 'm'),\n            TypeDescription('m', FullTypeDescr, 'md', 'm'),\n            TypeDescription('m', FullTypeDescr, 'mm', 'q'),"
    },
    {
        "commit_id": "f7e6e512105c0a26917d00f597b11efe0de97375",
        "commit_message": "Merge pull request #19110 from himanshu007-creator/himanshu007-creator-patch-1\n\nDOC: Fix the documented default value of the `order` parameter of `np.asarray`",
        "commit_url": "https://github.com/numpy/numpy/commit/f7e6e512105c0a26917d00f597b11efe0de97375",
        "buggy_code": "Defaults to 'C'.",
        "fixed_code": "Defaults to 'K'.",
        "patch": "@@ -924,7 +924,7 @@\n         'F' column-major (Fortran-style) memory representation.\n         'A' (any) means 'F' if `a` is Fortran contiguous, 'C' otherwise\n         'K' (keep) preserve input order\n-        Defaults to 'C'.\n+        Defaults to 'K'.\n     ${ARRAY_FUNCTION_LIKE}\n \n         .. versionadded:: 1.20.0"
    },
    {
        "commit_id": "6e82773ef1d171c7237f18bccf517409930daa05",
        "commit_message": "Merge pull request #19072 from charris/fix-version-problem\n\nBUG, TST: Fix test_numpy_version.",
        "commit_url": "https://github.com/numpy/numpy/commit/6e82773ef1d171c7237f18bccf517409930daa05",
        "buggy_code": "release = 'dev0' not in version",
        "fixed_code": "release = 'dev0' not in version and '+' not in version",
        "patch": "@@ -6,6 +6,6 @@\n version: str = vinfo[\"version\"]\n full_version: str = vinfo['version']\n git_revision: str = vinfo['full-revisionid']\n-release = 'dev0' not in version\n+release = 'dev0' not in version and '+' not in version\n \n del get_versions, vinfo"
    },
    {
        "commit_id": "d3d84017a230c1cc34517d19cb4fb9fc1854874d",
        "commit_message": "BUG: Fix test_numpy_version.\n\n- Make versions of the form '1.22.0.dev0' valid for non-releases.\n- Put empty match at end of groups instead of at the beginning.\n- Require eol in match, do not allow trailing characters.",
        "commit_url": "https://github.com/numpy/numpy/commit/d3d84017a230c1cc34517d19cb4fb9fc1854874d",
        "buggy_code": "release = 'dev0' not in version",
        "fixed_code": "release = 'dev0' not in version and '+' not in version",
        "patch": "@@ -6,6 +6,6 @@\n version: str = vinfo[\"version\"]\n full_version: str = vinfo['version']\n git_revision: str = vinfo['full-revisionid']\n-release = 'dev0' not in version\n+release = 'dev0' not in version and '+' not in version\n \n del get_versions, vinfo"
    },
    {
        "commit_id": "9ee4ed31de1c582366e44c488047b4e9432682e9",
        "commit_message": "BUG: Fix duplicate variable names in compiler check for AVX512_SKX\n\nThe code that checks for AVX512 SKX intrisics compiler support has a bug\nwhich always causes the check to fail and hence disables code that used\nAVX512_SKX features. Introduced in\nhttps://github.com/numpy/numpy/pull/16871/.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ee4ed31de1c582366e44c488047b4e9432682e9",
        "buggy_code": "__m512i temp = _mm512_castps_si512(_mm512_set1_ps(1.0));\\",
        "fixed_code": "__m512i unused_temp = _mm512_castps_si512(_mm512_set1_ps(1.0));\\",
        "patch": "@@ -194,7 +194,7 @@ def check_api_version(apiversion, codegen_dir):\n                                 ('__attribute__((target (\"avx512f,avx512dq,avx512bw,avx512vl,avx512cd\")))',\n                                 'attribute_target_avx512_skx_with_intrinsics',\n                                 '__mmask8 temp = _mm512_fpclass_pd_mask(_mm512_set1_pd(1.0), 0x01);\\\n-                                __m512i temp = _mm512_castps_si512(_mm512_set1_ps(1.0));\\\n+                                __m512i unused_temp = _mm512_castps_si512(_mm512_set1_ps(1.0));\\\n                                 _mm_mask_storeu_epi8(NULL, 0xFF, _mm_broadcastmb_epi64(temp))',\n                                 'immintrin.h'),\n                                 ]"
    },
    {
        "commit_id": "1a828f525d2737bfe93e91034603bb2f4f3414db",
        "commit_message": "DEP: Ensure the string promotion FutureWarning is raised\n\nPromotion errors are currently ignored and instead we use `object`\nas dtype. This means that the FutureWarning is ignored when raised.\n\nIt also means that there is no way to opt into \"future\" behaviour,\nalthough arguably, we may want to force `dtype=object` in any case\nif a promotion error occurred (or some signal at least).\n\nCloses gh-18721\nAddresses gh-18425  (Does not actually fix it, but chances are we won't)",
        "commit_url": "https://github.com/numpy/numpy/commit/1a828f525d2737bfe93e91034603bb2f4f3414db",
        "buggy_code": "_x = ma.array([1, 1.1, 'one'], mask=[1, 0, 0],)",
        "fixed_code": "_x = ma.array([1, 1.1, 'one'], mask=[1, 0, 0], dtype=object)",
        "patch": "@@ -405,7 +405,7 @@ def test_fromarrays(self):\n         for (f, l) in zip(('a', 'b', 'c'), (_a, _b, _c)):\n             assert_equal(getattr(mrec, f)._mask, l._mask)\n         # One record only\n-        _x = ma.array([1, 1.1, 'one'], mask=[1, 0, 0],)\n+        _x = ma.array([1, 1.1, 'one'], mask=[1, 0, 0], dtype=object)\n         assert_equal_records(fromarrays(_x, dtype=mrec.dtype), mrec[0])\n \n     def test_fromrecords(self):"
    },
    {
        "commit_id": "bb745921ac6c27d6caf9b76663668e5b9f28abac",
        "commit_message": "BUG: fixed ma.average ignoring masked weights (#18960)\n\nCloses #10438\r\n\r\nCo-authored-by: mecopur <mecopur@outlook.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/bb745921ac6c27d6caf9b76663668e5b9f28abac",
        "buggy_code": "wgt = np.broadcast_to(wgt, (a.ndim-1)*(1,) + wgt.shape)",
        "fixed_code": "wgt = np.broadcast_to(wgt, (a.ndim-1)*(1,) + wgt.shape, subok=True)",
        "patch": "@@ -614,7 +614,7 @@ def average(a, axis=None, weights=None, returned=False):\n                     \"Length of weights not compatible with specified axis.\")\n \n             # setup wgt to broadcast along axis\n-            wgt = np.broadcast_to(wgt, (a.ndim-1)*(1,) + wgt.shape)\n+            wgt = np.broadcast_to(wgt, (a.ndim-1)*(1,) + wgt.shape, subok=True)\n             wgt = wgt.swapaxes(-1, axis)\n \n         if m is not nomask:"
    },
    {
        "commit_id": "f49fc543292103df783d40f18465ccd6f6de3509",
        "commit_message": "TST: Fixed an incorrect error message",
        "commit_url": "https://github.com/numpy/numpy/commit/f49fc543292103df783d40f18465ccd6f6de3509",
        "buggy_code": "version >= b\"1.8.0\"  # E: incompatible type",
        "fixed_code": "version >= b\"1.8.0\"  # E: Unsupported operand types",
        "patch": "@@ -3,4 +3,4 @@\n version: NumpyVersion\n \n NumpyVersion(b\"1.8.0\")  # E: incompatible type\n-version >= b\"1.8.0\"  # E: incompatible type\n+version >= b\"1.8.0\"  # E: Unsupported operand types"
    },
    {
        "commit_id": "85606c6f7a01b027107e0997057e57629f536ccb",
        "commit_message": "BUG: Fixed a broken `NumpyVersion.__repr__` method",
        "commit_url": "https://github.com/numpy/numpy/commit/85606c6f7a01b027107e0997057e57629f536ccb",
        "buggy_code": "def __repr(self):",
        "fixed_code": "def __repr__(self):",
        "patch": "@@ -151,5 +151,5 @@ def __gt__(self, other):\n     def __ge__(self, other):\n         return self._compare(other) >= 0\n \n-    def __repr(self):\n+    def __repr__(self):\n         return \"NumpyVersion(%s)\" % self.vstring"
    },
    {
        "commit_id": "219968727b6a28e8564a22284cb630a808bc0c04",
        "commit_message": "Fix the array API norm() function",
        "commit_url": "https://github.com/numpy/numpy/commit/219968727b6a28e8564a22284cb630a808bc0c04",
        "buggy_code": "x = x.flatten()",
        "fixed_code": "x = ndarray._new(x._array.flatten())",
        "patch": "@@ -122,7 +122,7 @@ def norm(x: array, /, *, axis: Optional[Union[int, Tuple[int, int]]] = None, kee\n     \"\"\"\n     # Note: this is different from the default behavior\n     if axis == None and x.ndim > 2:\n-        x = x.flatten()\n+        x = ndarray._new(x._array.flatten())\n     # Note: this function is being imported from a nondefault namespace\n     return ndarray._new(np.linalg.norm(x._array, axis=axis, keepdims=keepdims, ord=ord))\n "
    },
    {
        "commit_id": "cd73ab781fd98b9154bdee522e2cd16be8bfb75e",
        "commit_message": "Merge pull request #18933 from seiko2plus/issue_18932\n\nBUG: Fix underflow error in AVX512 implementation of ufunc exp/f64",
        "commit_url": "https://github.com/numpy/numpy/commit/cd73ab781fd98b9154bdee522e2cd16be8bfb75e",
        "buggy_code": "assert_array_equal(res_num.astype(\"O\"), res_obj)",
        "fixed_code": "assert_array_almost_equal(res_num.astype(\"O\"), res_obj)",
        "patch": "@@ -175,7 +175,7 @@ def __getattr__(self, attr):\n                     ufunc(obj_arr)\n             else:\n                 res_obj = ufunc(obj_arr)\n-                assert_array_equal(res_num.astype(\"O\"), res_obj)\n+                assert_array_almost_equal(res_num.astype(\"O\"), res_obj)\n \n \n def _pickleable_module_global():"
    },
    {
        "commit_id": "a25f1ab93e8d71e39e9226ca3394ff665341a9e6",
        "commit_message": "TST: Use almost equal to get rid of object -> float64 comparison error",
        "commit_url": "https://github.com/numpy/numpy/commit/a25f1ab93e8d71e39e9226ca3394ff665341a9e6",
        "buggy_code": "assert_array_equal(res_num.astype(\"O\"), res_obj)",
        "fixed_code": "assert_array_almost_equal(res_num.astype(\"O\"), res_obj)",
        "patch": "@@ -175,7 +175,7 @@ def __getattr__(self, attr):\n                     ufunc(obj_arr)\n             else:\n                 res_obj = ufunc(obj_arr)\n-                assert_array_equal(res_num.astype(\"O\"), res_obj)\n+                assert_array_almost_equal(res_num.astype(\"O\"), res_obj)\n \n \n def _pickleable_module_global():"
    },
    {
        "commit_id": "3fd849356a2cc5a0b501454decc65090227b4d56",
        "commit_message": "API: Ensure that casting does not affect ufunc loop\n\nThis ensures that casting does not affect ufunc loops, which means\nthat the following will give the same result:\n\n```\n>>> np.not_equal(None, False, dtype=bool)\nTrue\n\n>>> np.not_equal(None, False, dtype=bool, casting=\"unsafe\")\nFalse\n```\n\nThis is absolutely necessary to make new promotion and type resolution\nsane.\n\nIn some cases, it causes problems with existing weirder dtype usage,\nthe workaround is that we allow the promoter (in current terms the\ntype resolver) to resolve more strictly (potentially ignoring input\ntypes).\nI.e. a promoter (after not finding match), can use the fixed (signature)\ndtypes to infer the loop.\n\nBecause this makes things more strict, most importantly `nextafter`\ncauses problems. Code like:\n```\nnp.nextafter(0., np.inf, dtype=np.float32)\n```\nlooks harmless enough, but requires such preferential treatment.  NumPy\nhas such capabilities currently for the homogeneous type resolver, so\nchanging to that fixes it (SciPy uses the above quite a lot).\n\nSciPy also has code like (in the tests):\n```\nnp.nextafter(0, 1)\n```\nwhich will now FAIL.  However, this is for the better since the above code\nis actually buggy: It will return different values on windows and 32bit linux\nbecause it will find the float32 instead of the float64 loop. That is almost\ncertainly not the expected result.",
        "commit_url": "https://github.com/numpy/numpy/commit/3fd849356a2cc5a0b501454decc65090227b4d56",
        "buggy_code": "None,",
        "fixed_code": "\"PyUFunc_SimpleUniformOperationTypeResolver\",",
        "patch": "@@ -902,7 +902,7 @@ def english_upper(s):\n 'nextafter':\n     Ufunc(2, 1, None,\n           docstrings.get('numpy.core.umath.nextafter'),\n-          None,\n+          \"PyUFunc_SimpleUniformOperationTypeResolver\",\n           TD(flts),\n           ),\n 'spacing':"
    },
    {
        "commit_id": "cffb693566360e33c76ef6d9981ced15dbebacff",
        "commit_message": "Merge pull request #18801 from slayoo/patch-1\n\nDOC: fix typo in frexp docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/cffb693566360e33c76ef6d9981ced15dbebacff",
        "buggy_code": "The mantissa is lies in the open interval(-1, 1), while the twos",
        "fixed_code": "The mantissa lies in the open interval(-1, 1), while the twos",
        "patch": "@@ -4081,7 +4081,7 @@ def add_newdoc(place, name, doc):\n     Decompose the elements of x into mantissa and twos exponent.\n \n     Returns (`mantissa`, `exponent`), where `x = mantissa * 2**exponent``.\n-    The mantissa is lies in the open interval(-1, 1), while the twos\n+    The mantissa lies in the open interval(-1, 1), while the twos\n     exponent is a signed integer.\n \n     Parameters"
    },
    {
        "commit_id": "3510e04d618bb5aad39cd3422316d0031351d8c8",
        "commit_message": "typo fix within docstring (\"is lies\")",
        "commit_url": "https://github.com/numpy/numpy/commit/3510e04d618bb5aad39cd3422316d0031351d8c8",
        "buggy_code": "The mantissa is lies in the open interval(-1, 1), while the twos",
        "fixed_code": "The mantissa lies in the open interval(-1, 1), while the twos",
        "patch": "@@ -4081,7 +4081,7 @@ def add_newdoc(place, name, doc):\n     Decompose the elements of x into mantissa and twos exponent.\n \n     Returns (`mantissa`, `exponent`), where `x = mantissa * 2**exponent``.\n-    The mantissa is lies in the open interval(-1, 1), while the twos\n+    The mantissa lies in the open interval(-1, 1), while the twos\n     exponent is a signed integer.\n \n     Parameters"
    },
    {
        "commit_id": "b75a135751e4b38f144027678d1ddc74ee4d50fc",
        "commit_message": "Fix int bounds checking in asarray() to only happen when dtype=None",
        "commit_url": "https://github.com/numpy/numpy/commit/b75a135751e4b38f144027678d1ddc74ee4d50fc",
        "buggy_code": "if isinstance(obj, int) and (obj > 2**64 or obj < -2**63):",
        "fixed_code": "if dtype is None and isinstance(obj, int) and (obj > 2**64 or obj < -2**63):",
        "patch": "@@ -26,7 +26,7 @@ def asarray(obj: Union[float, NestedSequence[bool|int|float], SupportsDLPack, Su\n         raise NotImplementedError(\"The copy keyword argument to asarray is not yet implemented\")\n     if isinstance(obj, ndarray) and (dtype is None or obj.dtype == dtype):\n         return obj\n-    if isinstance(obj, int) and (obj > 2**64 or obj < -2**63):\n+    if dtype is None and isinstance(obj, int) and (obj > 2**64 or obj < -2**63):\n         # Give a better error message in this case. NumPy would convert this\n         # to an object array.\n         raise OverflowError(\"Integer out of bounds for array dtypes\")"
    },
    {
        "commit_id": "b6a1677133efedefabe791ec532e08005d903135",
        "commit_message": "Merge pull request #18686 from mgorny/test-path-dot-fix\n\nBUG: Fix test_ccompiler_opt when path contains dots",
        "commit_url": "https://github.com/numpy/numpy/commit/b6a1677133efedefabe791ec532e08005d903135",
        "buggy_code": "gtar = source.split('.')[1:-1]",
        "fixed_code": "gtar = path.basename(source).split('.')[1:-1]",
        "patch": "@@ -112,7 +112,7 @@ def get_targets(self, targets, groups, **kwargs):\n             gflags = {}\n             fake_objects = opt.try_dispatch([file])\n             for source, flags in fake_objects:\n-                gtar = source.split('.')[1:-1]\n+                gtar = path.basename(source).split('.')[1:-1]\n                 glen = len(gtar)\n                 if glen == 0:\n                     gtar = \"baseline\""
    },
    {
        "commit_id": "6f2f26e08c6e0d476593c82ad31d13847f30cbf4",
        "commit_message": "BUG: Fix test_ccompiler_opt when path contains dots\n\nFix test_ccompiler_opt not to be confused by dots occurring on the path\nto the temporary directory, by using only the source file's basename\nwhen grabbing options.  Otherwise, the test can fail with mismatches\nsuch as:\n\n    E           AssertionError: 'sources_status' returns different targets than the compiled targets\n    E           ['AVX512F', 'AVX2'] != ['(20 2/TEMP/TMPB0YHSCAI/TEST_TARGETS AVX512F)', '(20 2/TEMP/TMPB0YHSCAI/TEST_TARGETS AVX2)']\n\nThis is because our TMPDIR value includes numpy version, i.e. 1.20.2.\nThe splitting happens on the first dot that is part of the directory\npath rather than test filename.",
        "commit_url": "https://github.com/numpy/numpy/commit/6f2f26e08c6e0d476593c82ad31d13847f30cbf4",
        "buggy_code": "gtar = source.split('.')[1:-1]",
        "fixed_code": "gtar = path.basename(source).split('.')[1:-1]",
        "patch": "@@ -112,7 +112,7 @@ def get_targets(self, targets, groups, **kwargs):\n             gflags = {}\n             fake_objects = opt.try_dispatch([file])\n             for source, flags in fake_objects:\n-                gtar = source.split('.')[1:-1]\n+                gtar = path.basename(source).split('.')[1:-1]\n                 glen = len(gtar)\n                 if glen == 0:\n                     gtar = \"baseline\""
    },
    {
        "commit_id": "2ccc7942f072b7fdbe54f148cdcb6a7d79388a89",
        "commit_message": "BUG: Fix small valgrind-found issues (#18651)\n\n* BUG: Fix small valgrind-found issues\r\n\r\nThis should be backportable. There was at least one that I could\r\nnot reproduce when running the tests again. And the new random-shuffle\r\ntests give false-positives (which is just slightly annoying, considering\r\nthat we are very close to almost only \"longdouble\" related\r\nfalse-positives)\r\n\r\n* BUG: Add missing decref in user-dtype fallback paths\r\n\r\nThe missing decref here only leaks references and can never leak\r\nactual memory fortunately.\r\n\r\n* MAINT,TST: Simplify the \"refcount logic\" in the dispatch tests again\r\n\r\nUsing SETREF can be nice, but was just overcomplicating thing here...",
        "commit_url": "https://github.com/numpy/numpy/commit/2ccc7942f072b7fdbe54f148cdcb6a7d79388a89",
        "buggy_code": "a = np.empty((1,) * 32)",
        "fixed_code": "a = np.ones((1,) * 32)",
        "patch": "@@ -7486,7 +7486,7 @@ def test_out_of_order_fields(self):\n             memoryview(arr)\n \n     def test_max_dims(self):\n-        a = np.empty((1,) * 32)\n+        a = np.ones((1,) * 32)\n         self._check_roundtrip(a)\n \n     @pytest.mark.slow"
    },
    {
        "commit_id": "0ea47e1901d08cad5fba9cba6ddb40a9ed947bd8",
        "commit_message": "BUG: import `asanyarray` to `_asarray.py` as its used in `np.require`",
        "commit_url": "https://github.com/numpy/numpy/commit/0ea47e1901d08cad5fba9cba6ddb40a9ed947bd8",
        "buggy_code": "from .multiarray import array",
        "fixed_code": "from .multiarray import array, asanyarray",
        "patch": "@@ -8,7 +8,7 @@\n     set_array_function_like_doc,\n     set_module,\n )\n-from .multiarray import array\n+from .multiarray import array, asanyarray\n \n \n __all__ = [\"require\"]"
    },
    {
        "commit_id": "bb7a31a6a852ecc64d3f7cffb70121fc8bef20eb",
        "commit_message": "Merge pull request #18398 from seberg/casting-loop-signature\n\nMAINT: Fix casting signatures to align with NEP 43 signature",
        "commit_url": "https://github.com/numpy/numpy/commit/bb7a31a6a852ecc64d3f7cffb70121fc8bef20eb",
        "buggy_code": "with assert_raises(ValueError):",
        "fixed_code": "with assert_raises(TypeError):",
        "patch": "@@ -149,7 +149,7 @@ def test_array_impossible_casts(array):\n     rt = rational(1, 2)\n     if array:\n         rt = np.array(rt)\n-    with assert_raises(ValueError):\n+    with assert_raises(TypeError):\n         np.array(rt, dtype=\"M8\")\n \n "
    },
    {
        "commit_id": "02cc19271286c9b1ac53e71e11e0678ecde89c86",
        "commit_message": "Merge pull request #18437 from seberg/no-caches-and-fixes\n\nTST: Fix some uninitialized memory in the tests",
        "commit_url": "https://github.com/numpy/numpy/commit/02cc19271286c9b1ac53e71e11e0678ecde89c86",
        "buggy_code": "return np.empty(()).view(cls)",
        "fixed_code": "return np.zeros(()).view(cls)",
        "patch": "@@ -1952,7 +1952,7 @@ class StoreArrayPrepareWrap(np.ndarray):\n             _wrap_args = None\n             _prepare_args = None\n             def __new__(cls):\n-                return np.empty(()).view(cls)\n+                return np.zeros(()).view(cls)\n             def __array_wrap__(self, obj, context):\n                 self._wrap_args = context[1]\n                 return obj"
    },
    {
        "commit_id": "abf593e91023aca8f1efbd74581a754cdeaf3593",
        "commit_message": "TST: Fix some uninitialized memory in the tests\n\nThese don't typically show up, because of our caches, but if\narray-data cache is disabled (which can be convenient for valgrind),\nthese do show up.",
        "commit_url": "https://github.com/numpy/numpy/commit/abf593e91023aca8f1efbd74581a754cdeaf3593",
        "buggy_code": "return np.empty(()).view(cls)",
        "fixed_code": "return np.zeros(()).view(cls)",
        "patch": "@@ -1952,7 +1952,7 @@ class StoreArrayPrepareWrap(np.ndarray):\n             _wrap_args = None\n             _prepare_args = None\n             def __new__(cls):\n-                return np.empty(()).view(cls)\n+                return np.zeros(()).view(cls)\n             def __array_wrap__(self, obj, context):\n                 self._wrap_args = context[1]\n                 return obj"
    },
    {
        "commit_id": "3412ef6643a946a04f5e522e5a412ff24b0ea4b9",
        "commit_message": "CI: another master -> main fix (#18566)",
        "commit_url": "https://github.com/numpy/numpy/commit/3412ef6643a946a04f5e522e5a412ff24b0ea4b9",
        "buggy_code": "https://github.com/scipy/scipy/blob/master/tools/lint_diff.py",
        "fixed_code": "https://github.com/scipy/scipy/blob/main/tools/lint_diff.py",
        "patch": "@@ -40,7 +40,7 @@ def run_pycodestyle(self, diff):\n         \"\"\"\n             Original Author: Josh Wilson (@person142)\n             Source:\n-              https://github.com/scipy/scipy/blob/master/tools/lint_diff.py\n+              https://github.com/scipy/scipy/blob/main/tools/lint_diff.py\n             Run pycodestyle on the given diff.\n         \"\"\"\n         res = subprocess.run("
    },
    {
        "commit_id": "954605ec08ad833899ffb956395f2d70f8eea2df",
        "commit_message": "MAINT: Update master to main after branch rename (gh-18544)\n\n* Upload docs to main branch of neps/devdocs\r\n\r\n* Update `master` to `main` to be consistent with current state of renaming\r\n\r\n* Remove badges from README\r\n\r\n* Replace remaining instances of `master` with `main`\r\n\r\n* Add back logo\r\n\r\n* Fix CircleCI branch checks\r\n\r\n* Fix GA branch name\r\n\r\n* master->main in issue templates.\r\n\r\n* master->main for 2 links to numpy archive.\r\n\r\n* Change master to main in NEP 23\r\n\r\nCo-authored-by: Ross Barnowski <rossbar@berkeley.edu>",
        "commit_url": "https://github.com/numpy/numpy/commit/954605ec08ad833899ffb956395f2d70f8eea2df",
        "buggy_code": "run(['git', 'push', 'origin', 'master', '--force'])",
        "fixed_code": "run(['git', 'push', 'origin', 'main', '--force'])",
        "patch": "@@ -56,7 +56,7 @@ def run(cmd, stdout=True):\n \n print('- uploading as %s <%s>' % (args.committer, args.email))\n if args.force:\n-    run(['git', 'push', 'origin', 'master', '--force'])\n+    run(['git', 'push', 'origin', 'main', '--force'])\n else:\n     print('\\n!! No `--force` argument specified; aborting')\n     print('!! Before enabling that flag, make sure you know what it does\\n')"
    },
    {
        "commit_id": "6e2e9e678a44650d45f036d4a6c72609a3b8ab20",
        "commit_message": "Merge pull request #18509 from timhoffm/doc-link-fix\n\nDOC: trunc, floor, ceil, rint, fix should all link to each other",
        "commit_url": "https://github.com/numpy/numpy/commit/6e2e9e678a44650d45f036d4a6c72609a3b8ab20",
        "buggy_code": "trunc, floor, ceil",
        "fixed_code": "rint, trunc, floor, ceil",
        "patch": "@@ -100,7 +100,7 @@ def fix(x, out=None):\n \n     See Also\n     --------\n-    trunc, floor, ceil\n+    rint, trunc, floor, ceil\n     around : Round to given number of decimals\n \n     Examples"
    },
    {
        "commit_id": "4f3aa0018b2a9adceddc5eb5361a2f09af759b06",
        "commit_message": "DOC: trunc, floor, ceil, rint, fix should all link to each other in see also",
        "commit_url": "https://github.com/numpy/numpy/commit/4f3aa0018b2a9adceddc5eb5361a2f09af759b06",
        "buggy_code": "trunc, floor, ceil",
        "fixed_code": "rint, trunc, floor, ceil",
        "patch": "@@ -100,7 +100,7 @@ def fix(x, out=None):\n \n     See Also\n     --------\n-    trunc, floor, ceil\n+    rint, trunc, floor, ceil\n     around : Round to given number of decimals\n \n     Examples"
    },
    {
        "commit_id": "f9dd21e64584f6e821805daa450b8bc9f8ef3526",
        "commit_message": "Merge pull request #18502 from rossbar/doc/fix-landing-page\n\nDOC: Fix links to landing page",
        "commit_url": "https://github.com/numpy/numpy/commit/f9dd21e64584f6e821805daa450b8bc9f8ef3526",
        "buggy_code": "master_doc = 'contents'",
        "fixed_code": "master_doc = 'index'",
        "patch": "@@ -94,7 +94,7 @@ class PyTypeObject(ctypes.Structure):\n # The suffix of source filenames.\n source_suffix = '.rst'\n \n-master_doc = 'contents'\n+master_doc = 'index'\n \n # General substitutions.\n project = 'NumPy'"
    },
    {
        "commit_id": "b7856e348d731551405bdf0dd41ff1b0416da129",
        "commit_message": "Make an error message easier to read",
        "commit_url": "https://github.com/numpy/numpy/commit/b7856e348d731551405bdf0dd41ff1b0416da129",
        "buggy_code": "raise TypeError(f\"The array_api namespace does not support the dtype {res.dtype}\")",
        "fixed_code": "raise TypeError(f\"The array_api namespace does not support the dtype '{res.dtype}'\")",
        "patch": "@@ -23,7 +23,7 @@ def asarray(obj: Union[float, NestedSequence[bool|int|float], SupportsDLPack, Su\n         return obj\n     res = np.asarray(obj, dtype=dtype)\n     if res.dtype not in _dtypes._all_dtypes:\n-        raise TypeError(f\"The array_api namespace does not support the dtype {res.dtype}\")\n+        raise TypeError(f\"The array_api namespace does not support the dtype '{res.dtype}'\")\n     return ndarray._new(res)\n \n def arange(start: Union[int, float], /, *, stop: Optional[Union[int, float]] = None, step: Union[int, float] = 1, dtype: Optional[dtype] = None, device: Optional[device] = None) -> array:"
    },
    {
        "commit_id": "b1015adfdbce55b7ee9211baca2f51284d67694a",
        "commit_message": "Port error to RandomState",
        "commit_url": "https://github.com/numpy/numpy/commit/b1015adfdbce55b7ee9211baca2f51284d67694a",
        "buggy_code": "match = r\"[\\w\\s]*pvals are cast to 64-bit floating\"",
        "fixed_code": "match = r\"[\\w\\s]*pvals array is cast to 64-bit floating\"",
        "patch": "@@ -147,7 +147,7 @@ def test_multinomial_pvals_float32(self):\n                       1.0e-09, 1.0e-09, 1.0e-09, 1.0e-09], dtype=np.float32)\n         pvals = x / x.sum()\n         random = Generator(MT19937(1432985819))\n-        match = r\"[\\w\\s]*pvals are cast to 64-bit floating\"\n+        match = r\"[\\w\\s]*pvals array is cast to 64-bit floating\"\n         with pytest.raises(ValueError, match=match):\n             random.multinomial(1, pvals)\n "
    },
    {
        "commit_id": "a14c41264855e44ebd6187d7541b5b8d59bb32cb",
        "commit_message": "Merge pull request #18493 from larsoner/fallback\n\nBUG: Fix non-versioneer uses of numpy.distutils",
        "commit_url": "https://github.com/numpy/numpy/commit/a14c41264855e44ebd6187d7541b5b8d59bb32cb",
        "buggy_code": "version = None",
        "fixed_code": "pass",
        "patch": "@@ -1970,7 +1970,7 @@ def get_version(self, version_file=None, version_variable=None):\n                 try:\n                     version = version_module.get_versions()['version']\n                 except AttributeError:\n-                    version = None\n+                    pass\n \n                 if version is not None:\n                     break"
    },
    {
        "commit_id": "8faae9d5fad6a8342b21deed1dcbecaaa9a32711",
        "commit_message": "BUG: Fix non-versioneer uses",
        "commit_url": "https://github.com/numpy/numpy/commit/8faae9d5fad6a8342b21deed1dcbecaaa9a32711",
        "buggy_code": "version = None",
        "fixed_code": "pass",
        "patch": "@@ -1970,7 +1970,7 @@ def get_version(self, version_file=None, version_variable=None):\n                 try:\n                     version = version_module.get_versions()['version']\n                 except AttributeError:\n-                    version = None\n+                    pass\n \n                 if version is not None:\n                     break"
    },
    {
        "commit_id": "06b995cae91b98778b78e5249129912b5372a959",
        "commit_message": "Merge pull request #18429 from jklymak/patch-1\n\nDOC: point intersphinx to matplotlib/stable...",
        "commit_url": "https://github.com/numpy/numpy/commit/06b995cae91b98778b78e5249129912b5372a959",
        "buggy_code": "'matplotlib': ('https://matplotlib.org', None),",
        "fixed_code": "'matplotlib': ('https://matplotlib.org/stable', None),",
        "patch": "@@ -285,7 +285,7 @@ def setup(app):\n     'neps': ('https://numpy.org/neps', None),\n     'python': ('https://docs.python.org/dev', None),\n     'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),\n-    'matplotlib': ('https://matplotlib.org', None),\n+    'matplotlib': ('https://matplotlib.org/stable', None),\n     'imageio': ('https://imageio.readthedocs.io/en/stable', None),\n     'skimage': ('https://scikit-image.org/docs/stable', None),\n     'pandas': ('https://pandas.pydata.org/pandas-docs/stable', None),"
    },
    {
        "commit_id": "3be1eaccc98cddb95ed2d77b7689e685c086da0a",
        "commit_message": "MAINT: Fix casting signatures to align with NEP 43\n\nThis changes all casting loops to get passed in a new `context`\nwhich holds some data such as the descriptors (and methods).\nFor the most part, this is unnecessary information, but it\nallows us to pass additional information to ufuncs while also\naligning ufunc and casting signatures (and definition).\n\nTo achieve this, we have to fill and store this context\neverywhere, which leads to some rework.\nThat means that this PR changes some of the chained loops\nto use fewer specialized loops.\n\nThere should be no typical speed effect for larger arrays\naside possibly a small one for rarer cases such as byteswapped\nor unaligned arrays (although we currently consider strings\nunaligned much too often).\n\nHowever, there will be a small increase in overheads, timing\nit, it appears to be <10% in the most extreme cases.\nWhile not neglible there are bigger optimizations possible\n(even moving the buffer-info data to the array struct was\na bigger speedup in most cases!).\n\nBelow are individual (squashed) commit while working on this,\nsince the change had to be mostly complete to compile/test\nits fairly long (leaving it just for fun)\n\nIndividual commit\n-----------------\n\nFurther changes\n\nFixup the main multi-step cast functions\n\nRestructure field transfers (partially?)\n\ncontinuation\n\nWIP: This is tricky, need to redo some stuff (this is the start of that redo)\n\nWIP: more small changes\n\nAnd more work...\n\nClean out/simplify legacy multi-step casts (mainly datetime)\n\nFixup strided one to n field transfer (and decref partially)\n\nFixup n-to-n cast for new methods\n\nFix subarray casts for the new calling convention\n\nFinish fixing up the structured transfers and decref\n\nstart with cleaning up masked casts\n\nBUG: Fixup struct access typo\n\nFixup any-to-object\n\nFinish all/most of masked casting, this brings me to debugging...\n\nFixup object copy and move functions\n\nCode now compiles without errors (of course segfaults immediately :))\n\nFinish fixup of array_assign_*\n\nPass pointer to cast_info_xfree (to be able to NULL func and error check)\n\nAlso silence a few warnings\n\nBug: Make sure datetime casts have copy/copyswap only path\n\nThis is necessary to ensure the recursive calls don't recurse\nforever :).\n\nSmall fixes, mostly make sure we use PyMem_* for all allocations/frees\n\nBUG: Fix memset in multistep cast\n\nSeems that code was little enough tested, that most test runs would\nsimply not notice the issue (i.e. requires debug mode usually probably).\nNow it is used a lot and things came down hard.\n\nBug: Fix stride order typo affecting strided masked indexing\n\nBUG: Finish npy-iter copy fixup (apparently it was not...)\n\nBUG: Fix scalar assignment mixup\n\nFix bug in field bookkeeping and rename decsrcref to decref\n\nIts called \"decref\" everywhere, the \"src\" is just confusing\nespecially since now we don't have the `func(dst, src)` calling\nconvention anymore.\n\nFinal fixes and cleanup of comments\n\ne.g. removed some comments alluring to a future that is unlikely\nto ever come...\n\nDOC: Change casting error message to be closer to other messages\n\nFixup rebase: masked transfer function initialize got lost\n\nFixup: remove print added for debugging into recfunctions",
        "commit_url": "https://github.com/numpy/numpy/commit/3be1eaccc98cddb95ed2d77b7689e685c086da0a",
        "buggy_code": "with assert_raises(ValueError):",
        "fixed_code": "with assert_raises(TypeError):",
        "patch": "@@ -149,7 +149,7 @@ def test_array_impossible_casts(array):\n     rt = rational(1, 2)\n     if array:\n         rt = np.array(rt)\n-    with assert_raises(ValueError):\n+    with assert_raises(TypeError):\n         np.array(rt, dtype=\"M8\")\n \n "
    },
    {
        "commit_id": "ea557b2c6c681f029cfee1ea3ddf0b6e87f2dab5",
        "commit_message": "[MAINT] Fix regression in using --capi-api flag and callbacks",
        "commit_url": "https://github.com/numpy/numpy/commit/ea557b2c6c681f029cfee1ea3ddf0b6e87f2dab5",
        "buggy_code": "CFUNCSMESSPY(\\\"for #varname#=\\\",#cbname#_capi);\"\"\",",
        "fixed_code": "CFUNCSMESSPY(\\\"for #varname#=\\\",#varname#_cb.capi);\"\"\",",
        "patch": "@@ -809,7 +809,7 @@\n \"\"\",\n             {debugcapi: [\"\"\"\\\n         fprintf(stderr,\\\"debug-capi:Assuming %d arguments; at most #maxnofargs#(-#nofoptargs#) is expected.\\\\n\\\",#varname#_cb.nofargs);\n-        CFUNCSMESSPY(\\\"for #varname#=\\\",#cbname#_capi);\"\"\",\n+        CFUNCSMESSPY(\\\"for #varname#=\\\",#varname#_cb.capi);\"\"\",\n                          {l_not(isintent_callback): \"\"\"        fprintf(stderr,\\\"#vardebugshowvalue# (call-back in C).\\\\n\\\",#cbname#);\"\"\"}]},\n             \"\"\"\\\n         CFUNCSMESS(\\\"Saving callback variables for `#varname#`.\\\\n\\\");"
    },
    {
        "commit_id": "5cf29978851d7ca7f81fc5d8f5b5089d22b535c5",
        "commit_message": "Merge pull request #18301 from abhayaman669/fix-exception-raise\n\nMAINT: avoid chaining exceptions in conv_template.py",
        "commit_url": "https://github.com/numpy/numpy/commit/5cf29978851d7ca7f81fc5d8f5b5089d22b535c5",
        "buggy_code": "raise ValueError(msg)",
        "fixed_code": "raise ValueError(msg) from None",
        "patch": "@@ -218,7 +218,7 @@ def replace(match):\n             val = env[name]\n         except KeyError:\n             msg = 'line %d: no definition of key \"%s\"'%(line, name)\n-            raise ValueError(msg)\n+            raise ValueError(msg) from None\n         return val\n \n     code = [lineno]"
    },
    {
        "commit_id": "d788788f8233d96e647c64bd4070305146b9ff92",
        "commit_message": "MAINT: typo fix: `_UInt8Codes` -> `_Int8Codes`",
        "commit_url": "https://github.com/numpy/numpy/commit/d788788f8233d96e647c64bd4070305146b9ff92",
        "buggy_code": "_UInt8Codes,",
        "fixed_code": "_Int8Codes,",
        "patch": "@@ -154,7 +154,7 @@ def dtype(self) -> _DType_co: ...\n     Type[np.signedinteger],\n     \"np.dtype[np.signedinteger]\",\n     \"_SupportsDType[np.dtype[np.signedinteger]]\",\n-    _UInt8Codes,\n+    _Int8Codes,\n     _Int16Codes,\n     _Int32Codes,\n     _Int64Codes,"
    },
    {
        "commit_id": "bec2b07db5c999721d2d2c10334f3afe78aaadd9",
        "commit_message": "Merge pull request #18210 from madphysicist/patch-2\n\nDOC: typo in post-loop return",
        "commit_url": "https://github.com/numpy/numpy/commit/bec2b07db5c999721d2d2c10334f3afe78aaadd9",
        "buggy_code": "...        return it.operands[0]",
        "fixed_code": "...    return it.operands[0]",
        "patch": "@@ -377,7 +377,7 @@\n     ...    while not it.finished:\n     ...        it[0] = lamdaexpr(*it[1:])\n     ...        it.iternext()\n-    ...        return it.operands[0]\n+    ...    return it.operands[0]\n \n     >>> a = np.arange(5)\n     >>> b = np.ones(5)"
    },
    {
        "commit_id": "5df8ec9673a73e71554c8f53cc6edb60533c5d17",
        "commit_message": "Fix some incorrect type annotations in the array API submodule\n\n(see https://github.com/data-apis/array-api/pull/116)",
        "commit_url": "https://github.com/numpy/numpy/commit/5df8ec9673a73e71554c8f53cc6edb60533c5d17",
        "buggy_code": "def linspace(start: Union[int, float], stop: Union[int, float], num: int, /, *, dtype: Optional[dtype] = None, device: Optional[device] = None, endpoint: Optional[bool] = True) -> array:",
        "fixed_code": "def linspace(start: Union[int, float], stop: Union[int, float], num: int, /, *, dtype: Optional[dtype] = None, device: Optional[device] = None, endpoint: bool = True) -> array:",
        "patch": "@@ -70,7 +70,7 @@ def full_like(x: array, fill_value: Union[int, float], /, *, dtype: Optional[dty\n         raise NotImplementedError(\"Device support is not yet implemented\")\n     return np.full_like(x, fill_value, dtype=dtype)\n \n-def linspace(start: Union[int, float], stop: Union[int, float], num: int, /, *, dtype: Optional[dtype] = None, device: Optional[device] = None, endpoint: Optional[bool] = True) -> array:\n+def linspace(start: Union[int, float], stop: Union[int, float], num: int, /, *, dtype: Optional[dtype] = None, device: Optional[device] = None, endpoint: bool = True) -> array:\n     \"\"\"\n     Array API compatible wrapper for :py:func:`np.linspace <numpy.linspace>`.\n "
    },
    {
        "commit_id": "5df8ec9673a73e71554c8f53cc6edb60533c5d17",
        "commit_message": "Fix some incorrect type annotations in the array API submodule\n\n(see https://github.com/data-apis/array-api/pull/116)",
        "commit_url": "https://github.com/numpy/numpy/commit/5df8ec9673a73e71554c8f53cc6edb60533c5d17",
        "buggy_code": "def stack(arrays: Tuple[array], /, *, axis: Optional[int] = 0) -> array:",
        "fixed_code": "def stack(arrays: Tuple[array], /, *, axis: int = 0) -> array:",
        "patch": "@@ -53,7 +53,7 @@ def squeeze(x: array, /, *, axis: Optional[Union[int, Tuple[int, ...]]] = None)\n     \"\"\"\n     return np.squeeze(x, axis=axis)\n \n-def stack(arrays: Tuple[array], /, *, axis: Optional[int] = 0) -> array:\n+def stack(arrays: Tuple[array], /, *, axis: int = 0) -> array:\n     \"\"\"\n     Array API compatible wrapper for :py:func:`np.stack <numpy.stack>`.\n "
    },
    {
        "commit_id": "efaf210f7128f32e6d3d193f79ccc6b43ff8c006",
        "commit_message": "Merge pull request #18184 from pearu/17797\n\nBUG: Fix f2py bugs when wrapping F90 subroutines.",
        "commit_url": "https://github.com/numpy/numpy/commit/efaf210f7128f32e6d3d193f79ccc6b43ff8c006",
        "buggy_code": "if _has_f_header(line):",
        "fixed_code": "if _has_f_header(line) or _has_fix_header(line):",
        "patch": "@@ -976,7 +976,7 @@ def is_free_format(file):\n     with open(file, encoding='latin1') as f:\n         line = f.readline()\n         n = 10000 # the number of non-comment lines to scan for hints\n-        if _has_f_header(line):\n+        if _has_f_header(line) or _has_fix_header(line):\n             n = 0\n         elif _has_f90_header(line):\n             n = 0"
    },
    {
        "commit_id": "26a2f584dc79cb0ef02ca41f4785152b8041c71b",
        "commit_message": "BUG: Fix detecting Fortran 90+ source format.",
        "commit_url": "https://github.com/numpy/numpy/commit/26a2f584dc79cb0ef02ca41f4785152b8041c71b",
        "buggy_code": "if _has_f_header(line):",
        "fixed_code": "if _has_f_header(line) or _has_fix_header(line):",
        "patch": "@@ -976,7 +976,7 @@ def is_free_format(file):\n     with open(file, encoding='latin1') as f:\n         line = f.readline()\n         n = 10000 # the number of non-comment lines to scan for hints\n-        if _has_f_header(line):\n+        if _has_f_header(line) or _has_fix_header(line):\n             n = 0\n         elif _has_f90_header(line):\n             n = 0"
    },
    {
        "commit_id": "fde2e536a1c1a1ba90727958f0b6da34fa53db1f",
        "commit_message": "Merge pull request #18118 from seiko2plus/issue_18106\n\nBUG, MAINT: improve avx512 mask logical operations",
        "commit_url": "https://github.com/numpy/numpy/commit/fde2e536a1c1a1ba90727958f0b6da34fa53db1f",
        "buggy_code": "extra_checks=\"AVX512BW_MASK\"",
        "fixed_code": "extra_checks=\"AVX512BW_MASK AVX512DQ_MASK\"",
        "patch": "@@ -259,7 +259,7 @@ class _Config:\n         AVX512_SKX = dict(\n             interest=42, implies=\"AVX512CD\", group=\"AVX512VL AVX512BW AVX512DQ\",\n             detect=\"AVX512_SKX\", implies_detect=False,\n-            extra_checks=\"AVX512BW_MASK\"\n+            extra_checks=\"AVX512BW_MASK AVX512DQ_MASK\"\n         ),\n         AVX512_CLX = dict(\n             interest=43, implies=\"AVX512_SKX\", group=\"AVX512VNNI\","
    },
    {
        "commit_id": "3dbf5ce5fdbc996e8abb6929a219689cf8c18e69",
        "commit_message": "Merge pull request #18109 from PhanatosZou/chain-exceptions\n\nMAINT: Fix exception cause in mingw32ccompiler.py",
        "commit_url": "https://github.com/numpy/numpy/commit/3dbf5ce5fdbc996e8abb6929a219689cf8c18e69",
        "buggy_code": "(maj, min))",
        "fixed_code": "(maj, min)) from None",
        "patch": "@@ -566,7 +566,7 @@ def msvc_manifest_xml(maj, min):\n         fullver = _MSVCRVER_TO_FULLVER[str(maj * 10 + min)]\n     except KeyError:\n         raise ValueError(\"Version %d,%d of MSVCRT not supported yet\" %\n-                         (maj, min))\n+                         (maj, min)) from None\n     # Don't be fooled, it looks like an XML, but it is not. In particular, it\n     # should not have any space before starting, and its size should be\n     # divisible by 4, most likely for alignment constraints when the xml is"
    },
    {
        "commit_id": "86cd3582c0e9101ac40434ae4488abdab1c1c910",
        "commit_message": "fix exception cause in mingw32ccompiler.py",
        "commit_url": "https://github.com/numpy/numpy/commit/86cd3582c0e9101ac40434ae4488abdab1c1c910",
        "buggy_code": "(maj, min))",
        "fixed_code": "(maj, min)) from None",
        "patch": "@@ -566,7 +566,7 @@ def msvc_manifest_xml(maj, min):\n         fullver = _MSVCRVER_TO_FULLVER[str(maj * 10 + min)]\n     except KeyError:\n         raise ValueError(\"Version %d,%d of MSVCRT not supported yet\" %\n-                         (maj, min))\n+                         (maj, min)) from None\n     # Don't be fooled, it looks like an XML, but it is not. In particular, it\n     # should not have any space before starting, and its size should be\n     # divisible by 4, most likely for alignment constraints when the xml is"
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -940,7 +940,7 @@ class domain in NumPy 1.4 and ``None`` in later versions.\n             also returned.\n         w : array_like, shape (M,), optional\n             Weights. If not None the contribution of each point\n-            ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+            ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n             weights are chosen so that the errors of the products\n             ``w[i]*y[i]`` all have the same variance.  The default value is\n             None."
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1586,7 +1586,7 @@ def chebfit(x, y, deg, rcond=None, full=False, w=None):\n         information from the singular value decomposition is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1311,7 +1311,7 @@ def hermfit(x, y, deg, rcond=None, full=False, w=None):\n         information from the singular value decomposition is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1302,7 +1302,7 @@ def hermefit(x, y, deg, rcond=None, full=False, w=None):\n         information from the singular value decomposition is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1308,7 +1308,7 @@ def lagfit(x, y, deg, rcond=None, full=False, w=None):\n         information from the singular value decomposition is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1328,7 +1328,7 @@ def legfit(x, y, deg, rcond=None, full=False, w=None):\n         information from the singular value decomposition is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "fcaaf276ee6dc7149a9ef442111748970fa46925",
        "commit_message": "DOC: Update reference to verbatim in a few location.\n\nSingle backticks default role is reference, while here it seem to be for\nverbatim. Fix it in a couple of places.",
        "commit_url": "https://github.com/numpy/numpy/commit/fcaaf276ee6dc7149a9ef442111748970fa46925",
        "buggy_code": "``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the",
        "fixed_code": "``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the",
        "patch": "@@ -1253,7 +1253,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None):\n         to solve the fit's matrix equation) is also returned.\n     w : array_like, shape (`M`,), optional\n         Weights. If not None, the contribution of each point\n-        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n+        ``(x[i],y[i])`` to the fit is weighted by ``w[i]``. Ideally the\n         weights are chosen so that the errors of the products ``w[i]*y[i]``\n         all have the same variance.  The default value is None.\n "
    },
    {
        "commit_id": "2e5502ecaab235d9a1b5e4ae341a86714f981355",
        "commit_message": "Merge pull request #18001 from seiko2plus/fix_detect_aarch64_osx\n\nBLD, BUG: Fix detecting aarch64 on macOS",
        "commit_url": "https://github.com/numpy/numpy/commit/2e5502ecaab235d9a1b5e4ae341a86714f981355",
        "buggy_code": "FakeCCompilerOpt.fake_info = self.arch + '_' + self.cc",
        "fixed_code": "FakeCCompilerOpt.fake_info = (self.arch, self.cc, \"\")",
        "patch": "@@ -82,7 +82,7 @@ def setup(self):\n         self._opt = None\n \n     def nopt(self, *args, **kwargs):\n-        FakeCCompilerOpt.fake_info = self.arch + '_' + self.cc\n+        FakeCCompilerOpt.fake_info = (self.arch, self.cc, \"\")\n         return FakeCCompilerOpt(*args, **kwargs)\n \n     def opt(self):"
    },
    {
        "commit_id": "c5539458a06e79af6b3a96134de39336f44aa1a8",
        "commit_message": "BLD, BUG: Fix detecting aarch64 on macOS\n\nCo-authored-by: h-vetinari <h.vetinari@gmx.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/c5539458a06e79af6b3a96134de39336f44aa1a8",
        "buggy_code": "FakeCCompilerOpt.fake_info = self.arch + '_' + self.cc",
        "fixed_code": "FakeCCompilerOpt.fake_info = (self.arch, self.cc, \"\")",
        "patch": "@@ -82,7 +82,7 @@ def setup(self):\n         self._opt = None\n \n     def nopt(self, *args, **kwargs):\n-        FakeCCompilerOpt.fake_info = self.arch + '_' + self.cc\n+        FakeCCompilerOpt.fake_info = (self.arch, self.cc, \"\")\n         return FakeCCompilerOpt(*args, **kwargs)\n \n     def opt(self):"
    },
    {
        "commit_id": "b2f29f2751a8c9fcd83bb106d5e020d1901377d6",
        "commit_message": "Merge pull request #18034 from Carreau/wrong-ref-arctan\n\nDOC: Fix a couple of reference to verbatim and vice versa",
        "commit_url": "https://github.com/numpy/numpy/commit/b2f29f2751a8c9fcd83bb106d5e020d1901377d6",
        "buggy_code": "The test verifies that the elements of ``actual`` and ``desired`` satisfy.",
        "fixed_code": "The test verifies that the elements of `actual` and `desired` satisfy.",
        "patch": "@@ -481,7 +481,7 @@ def assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True):\n               instead of this function for more consistent floating point\n               comparisons.\n \n-    The test verifies that the elements of ``actual`` and ``desired`` satisfy.\n+    The test verifies that the elements of `actual` and `desired` satisfy.\n \n         ``abs(desired-actual) < 1.5 * 10**(-decimal)``\n "
    },
    {
        "commit_id": "09cbb7495b92a37ddfb5e7d1bc2e9964bc6a0609",
        "commit_message": "DOC: Fix a couple of reference to verbatim and vice versa\n\nThis update a coupe of references (single backticks) that actually are not to\nverbatim/code (double backticks); and a couple of verbatim to reference\nwhen they do actually exists and can be resolved in context.\n\nI probably missed other; and stayed simple but spoted a few other\ninconsistencies that I did not fix:\n\n  - some ``...`` could actually be :math:`...` but not always clear if\n  it would be better.\n  - some intervals are [``...``], other are ``[...]``\n\nI guess they could be discussed individually; it was mostly the failing\nreferences that bothered me.",
        "commit_url": "https://github.com/numpy/numpy/commit/09cbb7495b92a37ddfb5e7d1bc2e9964bc6a0609",
        "buggy_code": "The test verifies that the elements of ``actual`` and ``desired`` satisfy.",
        "fixed_code": "The test verifies that the elements of `actual` and `desired` satisfy.",
        "patch": "@@ -481,7 +481,7 @@ def assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True):\n               instead of this function for more consistent floating point\n               comparisons.\n \n-    The test verifies that the elements of ``actual`` and ``desired`` satisfy.\n+    The test verifies that the elements of `actual` and `desired` satisfy.\n \n         ``abs(desired-actual) < 1.5 * 10**(-decimal)``\n "
    },
    {
        "commit_id": "3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "commit_message": "Merge branch 'master' into fix-issue-10244",
        "commit_url": "https://github.com/numpy/numpy/commit/3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "buggy_code": "np.find_common_type(np.int64, np.int64)  # E: incompatible type \"Type[int64]\"",
        "fixed_code": "np.find_common_type(np.int64, np.int64)  # E: incompatible type \"Type[signedinteger[Any]]\"",
        "patch": "@@ -10,4 +10,4 @@\n \n np.issubdtype(1, np.int64)  # E: incompatible type \"int\"\n \n-np.find_common_type(np.int64, np.int64)  # E: incompatible type \"Type[int64]\"\n+np.find_common_type(np.int64, np.int64)  # E: incompatible type \"Type[signedinteger[Any]]\""
    },
    {
        "commit_id": "3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "commit_message": "Merge branch 'master' into fix-issue-10244",
        "commit_url": "https://github.com/numpy/numpy/commit/3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "buggy_code": "reveal_type(nd.tolist())  # E: builtins.list[Any]",
        "fixed_code": "reveal_type(nd.tolist())  # E: Any",
        "patch": "@@ -9,7 +9,7 @@\n reveal_type(nd.item((0, 1)))  # E: Any\n \n # tolist\n-reveal_type(nd.tolist())  # E: builtins.list[Any]\n+reveal_type(nd.tolist())  # E: Any\n \n # itemset does not return a value\n # tostring is pretty simple"
    },
    {
        "commit_id": "3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "commit_message": "Merge branch 'master' into fix-issue-10244",
        "commit_url": "https://github.com/numpy/numpy/commit/3fe2d9d2627fc0f84aeed293ff8afa7c1f08d899",
        "buggy_code": "RELEASE_NOTES = 'doc/source/release/1.18.0-notes.rst'",
        "fixed_code": "RELEASE_NOTES = 'doc/source/release/1.21.0-notes.rst'",
        "patch": "@@ -37,7 +37,7 @@\n #-----------------------------------\n \n # Path to the release notes\n-RELEASE_NOTES = 'doc/source/release/1.18.0-notes.rst'\n+RELEASE_NOTES = 'doc/source/release/1.21.0-notes.rst'\n \n \n #-------------------------------------------------------"
    },
    {
        "commit_id": "7a42940e610b77cee2f98eb88aed5e66ef6d8c2a",
        "commit_message": "Merge pull request #17974 from charris/fix-versioneer-dirty\n\nBLD: Fixes for versioneer and setup.py sdist.",
        "commit_url": "https://github.com/numpy/numpy/commit/7a42940e610b77cee2f98eb88aed5e66ef6d8c2a",
        "buggy_code": "describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\",",
        "fixed_code": "describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty=\",",
        "patch": "@@ -236,7 +236,7 @@ def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n \n     # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n     # if there isn't one, this yields HEX[-dirty] (no NUM)\n-    describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\",\n+    describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty=\",\n                                           \"--always\", \"--long\",\n                                           \"--match\", \"%s*\" % tag_prefix],\n                                    cwd=root)"
    },
    {
        "commit_id": "779613108f2d7a138bf20c8e6c82d9f98e2cde74",
        "commit_message": "Merge pull request #17906 from fxcoudert/patch-1\n\nBUG: Fix a MacOS build failure",
        "commit_url": "https://github.com/numpy/numpy/commit/779613108f2d7a138bf20c8e6c82d9f98e2cde74",
        "buggy_code": "os.environ['MACOSX_DEPLOYMENT_TARGET'] = target",
        "fixed_code": "os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(target)",
        "patch": "@@ -126,7 +126,7 @@ def get_flags_linker_so(self):\n                     target = '10.9'\n                     s = f'Env. variable MACOSX_DEPLOYMENT_TARGET set to {target}'\n                     warnings.warn(s, stacklevel=2)\n-                os.environ['MACOSX_DEPLOYMENT_TARGET'] = target\n+                os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(target)\n             opt.extend(['-undefined', 'dynamic_lookup', '-bundle'])\n         else:\n             opt.append(\"-shared\")"
    },
    {
        "commit_id": "d06d38c10080ebdbc928e69131116e6a9d45100d",
        "commit_message": "MAINT: Don't include \"dirty\" in versioneer generated versions.\n\nWe patch the LICENSE file for both sdist and wheel releases, making them\nall \"dirty\", i.e., containing files that have not been committed. Having\n\"dirty\" in the product name is bad marketing and the versioneer tool\ndoes not have an option or style that will omit that bit of information,\nso patch the versioneer files to make that tag an empty string.",
        "commit_url": "https://github.com/numpy/numpy/commit/d06d38c10080ebdbc928e69131116e6a9d45100d",
        "buggy_code": "describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\",",
        "fixed_code": "describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty=\",",
        "patch": "@@ -236,7 +236,7 @@ def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n \n     # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n     # if there isn't one, this yields HEX[-dirty] (no NUM)\n-    describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\",\n+    describe_out, rc = run_command(GITS, [\"describe\", \"--tags\", \"--dirty=\",\n                                           \"--always\", \"--long\",\n                                           \"--match\", \"%s*\" % tag_prefix],\n                                    cwd=root)"
    },
    {
        "commit_id": "bffb00600e686d7d321d5b7529390201382c41b7",
        "commit_message": "Merge pull request #17950 from Brunochris13/master\n\nBUG: Removed empty String from Nag Compiler's Flags",
        "commit_url": "https://github.com/numpy/numpy/commit/bffb00600e686d7d321d5b7529390201382c41b7",
        "buggy_code": "return ['']",
        "fixed_code": "return []",
        "patch": "@@ -19,7 +19,7 @@ def get_flags_linker_so(self):\n     def get_flags_opt(self):\n         return ['-O4']\n     def get_flags_arch(self):\n-        return ['']\n+        return []\n \n class NAGFCompiler(BaseNAGFCompiler):\n "
    },
    {
        "commit_id": "134bfbb08c5e0d75fa1ac6c66cf1c8402c52caf5",
        "commit_message": "BUG: Removed empty String from Nag Compiler's Flags",
        "commit_url": "https://github.com/numpy/numpy/commit/134bfbb08c5e0d75fa1ac6c66cf1c8402c52caf5",
        "buggy_code": "return ['']",
        "fixed_code": "return []",
        "patch": "@@ -19,7 +19,7 @@ def get_flags_linker_so(self):\n     def get_flags_opt(self):\n         return ['-O4']\n     def get_flags_arch(self):\n-        return ['']\n+        return []\n \n class NAGFCompiler(BaseNAGFCompiler):\n "
    },
    {
        "commit_id": "45840adcf20eabc665d2fc17f28bf93e75bdf20a",
        "commit_message": "Merge pull request #17907 from cgohlke/patch-1\n\nBUG: 'bool' object has no attribute 'ndim'",
        "commit_url": "https://github.com/numpy/numpy/commit/45840adcf20eabc665d2fc17f28bf93e75bdf20a",
        "buggy_code": "elif isinstance(x_id, bool) or y_id.ndim == 0:",
        "fixed_code": "elif isinstance(y_id, bool) or y_id.ndim == 0:",
        "patch": "@@ -745,7 +745,7 @@ def func_assert_same_pos(x, y, func=isnan, hasval='nan'):\n         # flag as it everywhere, so we should return the scalar flag.\n         if isinstance(x_id, bool) or x_id.ndim == 0:\n             return bool_(x_id)\n-        elif isinstance(x_id, bool) or y_id.ndim == 0:\n+        elif isinstance(y_id, bool) or y_id.ndim == 0:\n             return bool_(y_id)\n         else:\n             return y_id"
    },
    {
        "commit_id": "e538e11d2b0acd93f5ce74fb3c6a0e25a4aa3ef8",
        "commit_message": "Merge pull request #17912 from dhomeier/fix-extending-f-string\n\nBUG: remove stray '+' from f-string upgrade in numba/extending.py",
        "commit_url": "https://github.com/numpy/numpy/commit/e538e11d2b0acd93f5ce74fb3c6a0e25a4aa3ef8",
        "buggy_code": "+print(f'{t1:.2f} secs for {n} PCG64 (Numba/PCG64) gaussian randoms')",
        "fixed_code": "print(f'{t1:.2f} secs for {n} PCG64 (Numba/PCG64) gaussian randoms')",
        "patch": "@@ -44,7 +44,7 @@ def numpycall():\n assert r1.shape == r2.shape\n \n t1 = timeit(numbacall, number=1000)\n-+print(f'{t1:.2f} secs for {n} PCG64 (Numba/PCG64) gaussian randoms')\n+print(f'{t1:.2f} secs for {n} PCG64 (Numba/PCG64) gaussian randoms')\n t2 = timeit(numpycall, number=1000)\n print(f'{t2:.2f} secs for {n} PCG64 (NumPy/PCG64) gaussian randoms')\n "
    },
    {
        "commit_id": "bd7609c2aa11de9f46d084e607ae42d1bbe17797",
        "commit_message": "Fix AttributeError: 'bool' object has no attribute 'ndim'",
        "commit_url": "https://github.com/numpy/numpy/commit/bd7609c2aa11de9f46d084e607ae42d1bbe17797",
        "buggy_code": "elif isinstance(x_id, bool) or y_id.ndim == 0:",
        "fixed_code": "elif isinstance(y_id, bool) or y_id.ndim == 0:",
        "patch": "@@ -745,7 +745,7 @@ def func_assert_same_pos(x, y, func=isnan, hasval='nan'):\n         # flag as it everywhere, so we should return the scalar flag.\n         if isinstance(x_id, bool) or x_id.ndim == 0:\n             return bool_(x_id)\n-        elif isinstance(x_id, bool) or y_id.ndim == 0:\n+        elif isinstance(y_id, bool) or y_id.ndim == 0:\n             return bool_(y_id)\n         else:\n             return y_id"
    },
    {
        "commit_id": "e38a64fd8d78d838f950db685a16337aa78f9940",
        "commit_message": "Merge pull request #17841 from a-elhag/docstring-fix\n\nDOC: Fixing boilerplate code example",
        "commit_url": "https://github.com/numpy/numpy/commit/e38a64fd8d78d838f950db685a16337aa78f9940",
        "buggy_code": "test = PytestTester(__name__).test",
        "fixed_code": "test = PytestTester(__name__)",
        "patch": "@@ -6,7 +6,7 @@\n ``__init__.py`` file::\n \n     from numpy._pytesttester import PytestTester\n-    test = PytestTester(__name__).test\n+    test = PytestTester(__name__)\n     del PytestTester\n \n "
    },
    {
        "commit_id": "81e363da7a59ebccf3d583fb77dacb959cf6fa9a",
        "commit_message": "Fix copy-paste typo in empty_like documentation.",
        "commit_url": "https://github.com/numpy/numpy/commit/81e363da7a59ebccf3d583fb77dacb959cf6fa9a",
        "buggy_code": "type of 'a', otherwise it will be a base-class array. Defaults",
        "fixed_code": "type of `prototype`, otherwise it will be a base-class array. Defaults",
        "patch": "@@ -97,7 +97,7 @@ def empty_like(prototype, dtype=None, order=None, subok=None, shape=None):\n         .. versionadded:: 1.6.0\n     subok : bool, optional.\n         If True, then the newly created array will use the sub-class\n-        type of 'a', otherwise it will be a base-class array. Defaults\n+        type of `prototype`, otherwise it will be a base-class array. Defaults\n         to True.\n     shape : int or sequence of ints, optional.\n         Overrides the shape of the result. If order='K' and the number of"
    },
    {
        "commit_id": "36181419fd32becd79819e132f04342c0d6a31e6",
        "commit_message": "Merge pull request #17748 from xoviat/patch-1\n\nBLD: compare platform.architecture() correctly",
        "commit_url": "https://github.com/numpy/numpy/commit/36181419fd32becd79819e132f04342c0d6a31e6",
        "buggy_code": "if platform.architecture() == '32bit':",
        "fixed_code": "if platform.architecture()[0] == '32bit':",
        "patch": "@@ -290,7 +290,7 @@ def add_system_root(library_root):\n     vcpkg = shutil.which('vcpkg')\n     if vcpkg:\n         vcpkg_dir = os.path.dirname(vcpkg)\n-        if platform.architecture() == '32bit':\n+        if platform.architecture()[0] == '32bit':\n             specifier = 'x86'\n         else:\n             specifier = 'x64'"
    },
    {
        "commit_id": "0e894153d7ac241c770286bd8c100c9c269dc44e",
        "commit_message": "MAINT: ma: Remove unused `**options` from MaskedArray `__new__` method.\n\nThe `__new__` method of `MaskedArray` has the parameter `**options`,\nbut it is not used.  This means a mistyped parameter is silently ignored,\ne.g. if I mistype the `mask` parameter like this, I don't get an error:\n\n    In [2]: m = np.ma.MaskedArray([1, 2, 3], maks=[0, 1, 0])\n\n    In [3]: m\n    Out[3]:\n    masked_array(data=[1, 2, 3],\n                 mask=False,\n           fill_value=999999)\n\nIn this PR, I simply remove `**options` from the signature of\n`MaskedArray.__new__`.  This affected one test.  That test was passing the\nargument `shape=(0, 1, 2)` to the constructor of a subclass of `MaskedArray`,\nbut since any unknown keywords were silently ignored, that use of `shape` had\nno effect.  I replaced it with the positional argument `[[[]], [[]]]`, which\nI believe has the effect that was originally intended with the use of the\n`shape` argument.",
        "commit_url": "https://github.com/numpy/numpy/commit/0e894153d7ac241c770286bd8c100c9c269dc44e",
        "buggy_code": "hard_mask=None, shrink=True, order=None, **options):",
        "fixed_code": "hard_mask=None, shrink=True, order=None):",
        "patch": "@@ -2812,7 +2812,7 @@ class MaskedArray(ndarray):\n \n     def __new__(cls, data=None, mask=nomask, dtype=None, copy=False,\n                 subok=True, ndmin=0, fill_value=None, keep_mask=True,\n-                hard_mask=None, shrink=True, order=None, **options):\n+                hard_mask=None, shrink=True, order=None):\n         \"\"\"\n         Create a new masked array from scratch.\n "
    },
    {
        "commit_id": "c96717f9fa0e9efe506ad4eeebf36f5a8b27bd80",
        "commit_message": "Merge pull request #17689 from charris/fix-lgtm-error\n\nBUG: Fix small bug in ``make_lite.py``.",
        "commit_url": "https://github.com/numpy/numpy/commit/c96717f9fa0e9efe506ad4eeebf36f5a8b27bd80",
        "buggy_code": "return return f'FortranRoutine({self.name!r}, filename={self.filename!r})'",
        "fixed_code": "return f'FortranRoutine({self.name!r}, filename={self.filename!r})'",
        "patch": "@@ -81,7 +81,7 @@ def dependencies(self):\n         return self._dependencies\n \n     def __repr__(self):\n-        return return f'FortranRoutine({self.name!r}, filename={self.filename!r})'\n+        return f'FortranRoutine({self.name!r}, filename={self.filename!r})'\n \n class UnknownFortranRoutine(FortranRoutine):\n     \"\"\"Wrapper for a Fortran routine for which the corresponding file"
    },
    {
        "commit_id": "dbe23fd71261940d0919071d72d579aa2c831603",
        "commit_message": "BUG: Fix small bug in make_lite.py.\n\nFlagged by LGTM.",
        "commit_url": "https://github.com/numpy/numpy/commit/dbe23fd71261940d0919071d72d579aa2c831603",
        "buggy_code": "return return f'FortranRoutine({self.name!r}, filename={self.filename!r})'",
        "fixed_code": "return f'FortranRoutine({self.name!r}, filename={self.filename!r})'",
        "patch": "@@ -81,7 +81,7 @@ def dependencies(self):\n         return self._dependencies\n \n     def __repr__(self):\n-        return return f'FortranRoutine({self.name!r}, filename={self.filename!r})'\n+        return f'FortranRoutine({self.name!r}, filename={self.filename!r})'\n \n class UnknownFortranRoutine(FortranRoutine):\n     \"\"\"Wrapper for a Fortran routine for which the corresponding file"
    },
    {
        "commit_id": "0fe3a700a559d6bdf05d7aed95528290d3aaa698",
        "commit_message": "Merge pull request #17611 from mbkumar/f2py_dylib_mac\n\nBUG: mac dylib treated as part of extra objects by f2py",
        "commit_url": "https://github.com/numpy/numpy/commit/0fe3a700a559d6bdf05d7aed95528290d3aaa698",
        "buggy_code": "extra_objects, sources = filter_files('', '[.](o|a|so)', sources)",
        "fixed_code": "extra_objects, sources = filter_files('', '[.](o|a|so|dylib)', sources)",
        "patch": "@@ -604,7 +604,7 @@ def run_compile():\n             if modulename:\n                 break\n \n-    extra_objects, sources = filter_files('', '[.](o|a|so)', sources)\n+    extra_objects, sources = filter_files('', '[.](o|a|so|dylib)', sources)\n     include_dirs, sources = filter_files('-I', '', sources, remove_prefix=1)\n     library_dirs, sources = filter_files('-L', '', sources, remove_prefix=1)\n     libraries, sources = filter_files('-l', '', sources, remove_prefix=1)"
    },
    {
        "commit_id": "ba1fdc94b0d7358c993361bdd73feca09d38171c",
        "commit_message": "Merge pull request #17610 from johnthagen/patch-1\n\nMAINT: fully qualify license trove classifier",
        "commit_url": "https://github.com/numpy/numpy/commit/ba1fdc94b0d7358c993361bdd73feca09d38171c",
        "buggy_code": "License :: OSI Approved",
        "fixed_code": "License :: OSI Approved :: BSD License",
        "patch": "@@ -36,7 +36,7 @@\n Development Status :: 5 - Production/Stable\n Intended Audience :: Science/Research\n Intended Audience :: Developers\n-License :: OSI Approved\n+License :: OSI Approved :: BSD License\n Programming Language :: C\n Programming Language :: Python\n Programming Language :: Python :: 3"
    },
    {
        "commit_id": "ec359c37ba8f542fae97ff4e51a6d23876dcf185",
        "commit_message": "fix quotation marks",
        "commit_url": "https://github.com/numpy/numpy/commit/ec359c37ba8f542fae97ff4e51a6d23876dcf185",
        "buggy_code": "msg = f'Differences in strings:\\n{''.join(diff_list).rstrip()}'",
        "fixed_code": "msg = f\"Differences in strings:\\n{''.join(diff_list).rstrip()}\"",
        "patch": "@@ -1199,7 +1199,7 @@ def assert_string_equal(actual, desired):\n         raise AssertionError(repr(d1))\n     if not diff_list:\n         return\n-    msg = f'Differences in strings:\\n{''.join(diff_list).rstrip()}'\n+    msg = f\"Differences in strings:\\n{''.join(diff_list).rstrip()}\"\n     if actual != desired:\n         raise AssertionError(msg)\n "
    },
    {
        "commit_id": "7a4588e00bea078a2e0ebdb1540c05d061796ccf",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/7a4588e00bea078a2e0ebdb1540c05d061796ccf",
        "buggy_code": "ame_str = f' when calling {name}' if name is not None else ''",
        "fixed_code": "name_str = f' when calling {name}' if name is not None else ''",
        "patch": "@@ -2336,7 +2336,7 @@ def _assert_no_gc_cycles_context(name=None):\n         gc.enable()\n \n     if n_objects_in_cycles:\n-        ame_str = f' when calling {name}' if name is not None else ''\n+        name_str = f' when calling {name}' if name is not None else ''\n         raise AssertionError(\n             \"Reference cycles were found{}: {} objects were collected, \"\n             \"of which {} are shown below:{}\""
    },
    {
        "commit_id": "2eefb6d1fdd46193328332b84de0e607f0a40318",
        "commit_message": "BUG: mac dylib treated as extra library by f2py",
        "commit_url": "https://github.com/numpy/numpy/commit/2eefb6d1fdd46193328332b84de0e607f0a40318",
        "buggy_code": "extra_objects, sources = filter_files('', '[.](o|a|so)', sources)",
        "fixed_code": "extra_objects, sources = filter_files('', '[.](o|a|so|dylib)', sources)",
        "patch": "@@ -604,7 +604,7 @@ def run_compile():\n             if modulename:\n                 break\n \n-    extra_objects, sources = filter_files('', '[.](o|a|so)', sources)\n+    extra_objects, sources = filter_files('', '[.](o|a|so|dylib)', sources)\n     include_dirs, sources = filter_files('-I', '', sources, remove_prefix=1)\n     library_dirs, sources = filter_files('-L', '', sources, remove_prefix=1)\n     libraries, sources = filter_files('-l', '', sources, remove_prefix=1)"
    },
    {
        "commit_id": "32f1359fc2d11014b240dee2270acea1784a34bb",
        "commit_message": "Merge pull request #17594 from andryandrew/patch-1\n\nDOC: Typo in lexsort docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/32f1359fc2d11014b240dee2270acea1784a34bb",
        "buggy_code": "for the keys argument, it's rows are interpreted as the sorting keys and",
        "fixed_code": "for the keys argument, its rows are interpreted as the sorting keys and",
        "patch": "@@ -406,7 +406,7 @@ def lexsort(keys, axis=None):\n     for the primary sort order, the second-to-last key for the secondary sort\n     order, and so on. The keys argument must be a sequence of objects that\n     can be converted to arrays of the same shape. If a 2D array is provided\n-    for the keys argument, it's rows are interpreted as the sorting keys and\n+    for the keys argument, its rows are interpreted as the sorting keys and\n     sorting is according to the last row, second last row etc.\n \n     Parameters"
    },
    {
        "commit_id": "56dedfc23f8f4ee0ce17c710b505254528566960",
        "commit_message": "BUG: Respect dtype of all-zero argument to poly1d\n\nFixes gh-16354. Previously np.poly1d(z).coeffs.dtype would always\nbe np.float64 for zero array z, regardless of z's dtype.",
        "commit_url": "https://github.com/numpy/numpy/commit/56dedfc23f8f4ee0ce17c710b505254528566960",
        "buggy_code": "c_or_r = NX.array([0.])",
        "fixed_code": "c_or_r = NX.array([0.], dtype=c_or_r.dtype)",
        "patch": "@@ -1236,7 +1236,7 @@ def __init__(self, c_or_r, r=False, variable=None):\n             raise ValueError(\"Polynomial must be 1d only.\")\n         c_or_r = trim_zeros(c_or_r, trim='f')\n         if len(c_or_r) == 0:\n-            c_or_r = NX.array([0.])\n+            c_or_r = NX.array([0.], dtype=c_or_r.dtype)\n         self._coeffs = c_or_r\n         if variable is None:\n             variable = 'x'"
    },
    {
        "commit_id": "a6fb91670017abd2c9378e5f1df3174a6e5a505d",
        "commit_message": "DOC: Fix escaping",
        "commit_url": "https://github.com/numpy/numpy/commit/a6fb91670017abd2c9378e5f1df3174a6e5a505d",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -200,7 +200,7 @@ def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):\n     \"\"\")\n \n add_newdoc_for_scalar_type('void', [],\n-    \"\"\"\n+    r\"\"\"\n     Either an opaque sequence of bytes, or a structure.\n     \n     >>> np.void(b'abcd')"
    },
    {
        "commit_id": "2a267e6a49ed68da01761c92deb7c90be207660d",
        "commit_message": "DOC: Fixing references in ma docstrings (#16300)\n\nFix broken links in see also section of some ma functions.",
        "commit_url": "https://github.com/numpy/numpy/commit/2a267e6a49ed68da01761c92deb7c90be207660d",
        "buggy_code": "numpy.ndarray.around : corresponding function for ndarrays",
        "fixed_code": "numpy.ndarray.round : corresponding function for ndarrays",
        "patch": "@@ -5389,7 +5389,7 @@ def round(self, decimals=0, out=None):\n \n         See Also\n         --------\n-        numpy.ndarray.around : corresponding function for ndarrays\n+        numpy.ndarray.round : corresponding function for ndarrays\n         numpy.around : equivalent function\n         \"\"\"\n         result = self._data.round(decimals=decimals, out=out).view(type(self))"
    },
    {
        "commit_id": "9e37e585cc86ff6dc821d0566baacc137cb16343",
        "commit_message": "Merge pull request #17442 from devhpes/devhpes\n\nMAINT: fix exception chaining in format.py",
        "commit_url": "https://github.com/numpy/numpy/commit/9e37e585cc86ff6dc821d0566baacc137cb16343",
        "buggy_code": "\"to numpy.load\" % (err,))",
        "fixed_code": "\"to numpy.load\" % (err,)) from err",
        "patch": "@@ -746,7 +746,7 @@ def read_array(fp, allow_pickle=False, pickle_kwargs=None):\n             # Friendlier error message\n             raise UnicodeError(\"Unpickling a python object failed: %r\\n\"\n                                \"You may need to pass the encoding= option \"\n-                               \"to numpy.load\" % (err,))\n+                               \"to numpy.load\" % (err,)) from err\n     else:\n         if isfileobj(fp):\n             # We can use the fast fromfile() function."
    },
    {
        "commit_id": "2eed8784d5946e420500bf87f9af305d87aaa055",
        "commit_message": "Merge pull request #17472 from jsignell/patch-2\n\nTST: Fix doctest for full_like",
        "commit_url": "https://github.com/numpy/numpy/commit/2eed8784d5946e420500bf87f9af305d87aaa055",
        "buggy_code": "array([0.1,  0.1,  0.1,  0.1,  0.1,  0.1])",
        "fixed_code": "array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])",
        "patch": "@@ -409,7 +409,7 @@ def full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None):\n \n     >>> y = np.arange(6, dtype=np.double)\n     >>> np.full_like(y, 0.1)\n-    array([0.1,  0.1,  0.1,  0.1,  0.1,  0.1])\n+    array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n \n     \"\"\"\n     res = empty_like(a, dtype=dtype, order=order, subok=subok, shape=shape)"
    },
    {
        "commit_id": "11f051a37bed48c341849e79cac1863a03626f73",
        "commit_message": "TST: Fix doctest for full_like",
        "commit_url": "https://github.com/numpy/numpy/commit/11f051a37bed48c341849e79cac1863a03626f73",
        "buggy_code": "array([0.1,  0.1,  0.1,  0.1,  0.1,  0.1])",
        "fixed_code": "array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])",
        "patch": "@@ -409,7 +409,7 @@ def full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None):\n \n     >>> y = np.arange(6, dtype=np.double)\n     >>> np.full_like(y, 0.1)\n-    array([0.1,  0.1,  0.1,  0.1,  0.1,  0.1])\n+    array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n \n     \"\"\"\n     res = empty_like(a, dtype=dtype, order=order, subok=subok, shape=shape)"
    },
    {
        "commit_id": "225c3360721ba515de88a1e191ede58e8b95593d",
        "commit_message": "BUG: Fixes incorrect error message in numpy.ediff1d (#17457)\n\nFixes the error message reported by ediff1d in the case of\r\nan invalid to_begin and updates tests to assert validity.\r\n\r\nCo-authored-by: Ross Barnowski <rossbar@berkeley.edu>",
        "commit_url": "https://github.com/numpy/numpy/commit/225c3360721ba515de88a1e191ede58e8b95593d",
        "buggy_code": "raise TypeError(\"dtype of `to_end` must be compatible \"",
        "fixed_code": "raise TypeError(\"dtype of `to_begin` must be compatible \"",
        "patch": "@@ -93,7 +93,7 @@ def ediff1d(ary, to_end=None, to_begin=None):\n     else:\n         to_begin = np.asanyarray(to_begin)\n         if not np.can_cast(to_begin, dtype_req, casting=\"same_kind\"):\n-            raise TypeError(\"dtype of `to_end` must be compatible \"\n+            raise TypeError(\"dtype of `to_begin` must be compatible \"\n                             \"with input `ary` under the `same_kind` rule.\")\n \n         to_begin = to_begin.ravel()"
    },
    {
        "commit_id": "fe01a9b1cca286f67e01807786b991dd22b1b7f7",
        "commit_message": "fix exception chaining in format.py",
        "commit_url": "https://github.com/numpy/numpy/commit/fe01a9b1cca286f67e01807786b991dd22b1b7f7",
        "buggy_code": "\"to numpy.load\" % (err,))",
        "fixed_code": "\"to numpy.load\" % (err,)) from err",
        "patch": "@@ -746,7 +746,7 @@ def read_array(fp, allow_pickle=False, pickle_kwargs=None):\n             # Friendlier error message\n             raise UnicodeError(\"Unpickling a python object failed: %r\\n\"\n                                \"You may need to pass the encoding= option \"\n-                               \"to numpy.load\" % (err,))\n+                               \"to numpy.load\" % (err,)) from err\n     else:\n         if isfileobj(fp):\n             # We can use the fast fromfile() function."
    },
    {
        "commit_id": "57adb4bb6a8eb46fed597d4a781e47bcb86ebe11",
        "commit_message": "DOC: Fix a parameter type in the `putmask` docs (#17412)",
        "commit_url": "https://github.com/numpy/numpy/commit/57adb4bb6a8eb46fed597d4a781e47bcb86ebe11",
        "buggy_code": "a : array_like",
        "fixed_code": "a : ndarray",
        "patch": "@@ -1100,7 +1100,7 @@ def putmask(a, mask, values):\n \n     Parameters\n     ----------\n-    a : array_like\n+    a : ndarray\n         Target array.\n     mask : array_like\n         Boolean mask array. It has to be the same shape as `a`."
    },
    {
        "commit_id": "82226d816c67a80ff634fd202c1df32865175232",
        "commit_message": "Merge pull request #17373 from melissawm/f2py-print\n\nBUG: Fixes module data docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/82226d816c67a80ff634fd202c1df32865175232",
        "buggy_code": "expected = \"'i'-array(2,3)\\n\"",
        "fixed_code": "expected = \"bar : 'i'-array(2,3)\\n\"",
        "patch": "@@ -19,5 +19,5 @@ class TestBlockDocString(util.F2PyTest):\n     @pytest.mark.xfail(IS_PYPY,\n                        reason=\"PyPy cannot modify tp_doc after PyType_Ready\")\n     def test_block_docstring(self):\n-        expected = \"'i'-array(2,3)\\n\"\n+        expected = \"bar : 'i'-array(2,3)\\n\"\n         assert_equal(self.module.block.__doc__, expected)"
    },
    {
        "commit_id": "bf71a62b52dedd8ceaa47a96c144a3584e1bd95b",
        "commit_message": "BUG: Fixes module data docstrings.\n\nFixes gh-15325",
        "commit_url": "https://github.com/numpy/numpy/commit/bf71a62b52dedd8ceaa47a96c144a3584e1bd95b",
        "buggy_code": "expected = \"'i'-array(2,3)\\n\"",
        "fixed_code": "expected = \"bar : 'i'-array(2,3)\\n\"",
        "patch": "@@ -19,5 +19,5 @@ class TestBlockDocString(util.F2PyTest):\n     @pytest.mark.xfail(IS_PYPY,\n                        reason=\"PyPy cannot modify tp_doc after PyType_Ready\")\n     def test_block_docstring(self):\n-        expected = \"'i'-array(2,3)\\n\"\n+        expected = \"bar : 'i'-array(2,3)\\n\"\n         assert_equal(self.module.block.__doc__, expected)"
    },
    {
        "commit_id": "60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "commit_message": "DOC: Fix syntax errors in docstrings for versionchanged, versionadded (#17338)\n\n* DOC: Fix typos in versionchanged.",
        "commit_url": "https://github.com/numpy/numpy/commit/60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "buggy_code": "..versionchanged:: 1.16.0",
        "fixed_code": ".. versionchanged:: 1.16.0",
        "patch": "@@ -1450,7 +1450,7 @@ def angle(z, deg=False):\n         The counterclockwise angle from the positive real axis on the complex\n         plane in the range ``(-pi, pi]``, with dtype as numpy.float64.\n \n-        ..versionchanged:: 1.16.0\n+        .. versionchanged:: 1.16.0\n             This function works on subclasses of ndarray like `ma.array`.\n \n     See Also"
    },
    {
        "commit_id": "60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "commit_message": "DOC: Fix syntax errors in docstrings for versionchanged, versionadded (#17338)\n\n* DOC: Fix typos in versionchanged.",
        "commit_url": "https://github.com/numpy/numpy/commit/60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "buggy_code": "..versionchanged: 1.18.0",
        "fixed_code": ".. versionchanged:: 1.18.0",
        "patch": "@@ -513,7 +513,7 @@ def drop_fields(base, drop_names, usemask=True, asrecarray=False):\n \n     Nested fields are supported.\n \n-    ..versionchanged: 1.18.0\n+    .. versionchanged:: 1.18.0\n         `drop_fields` returns an array with 0 fields if all fields are dropped,\n         rather than returning ``None`` as it did previously.\n "
    },
    {
        "commit_id": "60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "commit_message": "DOC: Fix syntax errors in docstrings for versionchanged, versionadded (#17338)\n\n* DOC: Fix typos in versionchanged.",
        "commit_url": "https://github.com/numpy/numpy/commit/60a1e10c4593736b188b38e7d7c51aefb213af6a",
        "buggy_code": "..versionchanged:: 1.15.0",
        "fixed_code": ".. versionchanged:: 1.15.0",
        "patch": "@@ -1641,7 +1641,7 @@ def flatnotmasked_contiguous(a):\n     slice_list : list\n         A sorted sequence of `slice` objects (start index, end index).\n \n-        ..versionchanged:: 1.15.0\n+        .. versionchanged:: 1.15.0\n             Now returns an empty list instead of None for a fully masked array\n \n     See Also"
    },
    {
        "commit_id": "5c3f10061f39a7858a5f2c6cd48773abe3252e48",
        "commit_message": "DOC: Fix broken references and make the tables a little clearer\n\n`types.BooleanType` and similar names were python2 things that no longer exist\n\n`unicode` also no longer exists, and is now `str`",
        "commit_url": "https://github.com/numpy/numpy/commit/5c3f10061f39a7858a5f2c6cd48773abe3252e48",
        "buggy_code": "numpy.core.numerictypes : Overview of numpy type hierarchy.",
        "fixed_code": ":ref:`arrays.scalars` : Overview of the numpy type hierarchy.",
        "patch": "@@ -374,8 +374,8 @@ def issubdtype(arg1, arg2):\n \n     See Also\n     --------\n+    :ref:`arrays.scalars` : Overview of the numpy type hierarchy.\n     issubsctype, issubclass_\n-    numpy.core.numerictypes : Overview of numpy type hierarchy.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "295c8af73969d8101af5e91c9c45b7adbadee077",
        "commit_message": "DEP: Change the financial name access warning to DeprecationWarning\n\nMost end-users will probably not care about the warning in any case,\nsince they will not just import the function but also use it.\nWe can't just remove it, due to gh-17143: Astropy currently pulls\nin these functions (but doesn't use them), so that plain removal\nwould lead to an unusable astropy if a new NumPy is installed.\nEven more annoying, due to a (faulty?) astropy pytest plugin, this\naffects all pytest runs (which do not use `PYTEST_DISABLE_PLUGIN_AUTOLOAD`).\n\nChanging it to a DeprecationWarning seems to remove the issue from\npytest runs, this may make the warning less visible in rare cases\nwhere it should be seen, but hopefully it will still be visible enough.",
        "commit_url": "https://github.com/numpy/numpy/commit/295c8af73969d8101af5e91c9c45b7adbadee077",
        "buggy_code": "warnings.warn(msg, RuntimeWarning)",
        "fixed_code": "warnings.warn(msg, DeprecationWarning, stacklevel=2)",
        "patch": "@@ -247,7 +247,7 @@ def __getattr__(attr):\n             except KeyError:\n                 pass\n             else:\n-                warnings.warn(msg, RuntimeWarning)\n+                warnings.warn(msg, DeprecationWarning, stacklevel=2)\n \n                 def _expired(*args, **kwds):\n                     raise RuntimeError(msg)"
    },
    {
        "commit_id": "295c8af73969d8101af5e91c9c45b7adbadee077",
        "commit_message": "DEP: Change the financial name access warning to DeprecationWarning\n\nMost end-users will probably not care about the warning in any case,\nsince they will not just import the function but also use it.\nWe can't just remove it, due to gh-17143: Astropy currently pulls\nin these functions (but doesn't use them), so that plain removal\nwould lead to an unusable astropy if a new NumPy is installed.\nEven more annoying, due to a (faulty?) astropy pytest plugin, this\naffects all pytest runs (which do not use `PYTEST_DISABLE_PLUGIN_AUTOLOAD`).\n\nChanging it to a DeprecationWarning seems to remove the issue from\npytest runs, this may make the warning less visible in rare cases\nwhere it should be seen, but hopefully it will still be visible enough.",
        "commit_url": "https://github.com/numpy/numpy/commit/295c8af73969d8101af5e91c9c45b7adbadee077",
        "buggy_code": "with pytest.warns(RuntimeWarning, match=match):",
        "fixed_code": "with pytest.warns(DeprecationWarning, match=match):",
        "patch": "@@ -7,7 +7,7 @@\n                     reason=\"requires python 3.7 or higher\")\n def test_financial_expired():\n     match = 'NEP 32'\n-    with pytest.warns(RuntimeWarning, match=match):\n+    with pytest.warns(DeprecationWarning, match=match):\n         func = np.fv\n     with pytest.raises(RuntimeError, match=match):\n         func(1, 2, 3)"
    },
    {
        "commit_id": "7e9d603664edc756f555fecf8649bf888a46d47c",
        "commit_message": "Merge pull request #17250 from albertvillanova/fix-docstring\n\nDOC: Fix docstring cross-referencing",
        "commit_url": "https://github.com/numpy/numpy/commit/7e9d603664edc756f555fecf8649bf888a46d47c",
        "buggy_code": "parse_targets() :",
        "fixed_code": "parse_targets :",
        "patch": "@@ -2186,7 +2186,7 @@ def try_dispatch(self, sources, src_dir=None, **kwargs):\n \n         See Also\n         --------\n-        parse_targets() :\n+        parse_targets :\n             Parsing the configuration statements of dispatch-able sources.\n         \"\"\"\n         to_compile = {}"
    },
    {
        "commit_id": "9c9df9c649361fb651f4b2174e779b3036464ab4",
        "commit_message": "Merge pull request #17214 from BvB93/generic\n\nMAINT: Fix various issues with the `np.generic` annotations",
        "commit_url": "https://github.com/numpy/numpy/commit/9c9df9c649361fb651f4b2174e779b3036464ab4",
        "buggy_code": "if \" E:\" not in line and lineno not in errors:",
        "fixed_code": "if line.startswith('#') or (\" E:\" not in line and lineno not in errors):",
        "patch": "@@ -89,7 +89,7 @@ def test_fail(path):\n \n     for i, line in enumerate(lines):\n         lineno = i + 1\n-        if \" E:\" not in line and lineno not in errors:\n+        if line.startswith('#') or (\" E:\" not in line and lineno not in errors):\n             continue\n \n         target_line = lines[lineno - 1]"
    },
    {
        "commit_id": "8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "commit_message": "Fix docstring cross-referencing",
        "commit_url": "https://github.com/numpy/numpy/commit/8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "buggy_code": "lib.scimath.sqrt",
        "fixed_code": "numpy.lib.scimath.sqrt",
        "patch": "@@ -3596,7 +3596,7 @@ def add_newdoc(place, name, doc):\n \n     See Also\n     --------\n-    lib.scimath.sqrt\n+    numpy.lib.scimath.sqrt\n         A version which returns complex numbers when given negative reals.\n \n     Notes"
    },
    {
        "commit_id": "8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "commit_message": "Fix docstring cross-referencing",
        "commit_url": "https://github.com/numpy/numpy/commit/8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "buggy_code": "parse_targets() :",
        "fixed_code": "parse_targets :",
        "patch": "@@ -2127,7 +2127,7 @@ def try_dispatch(self, sources, src_dir=None, **kwargs):\n \n         See Also\n         --------\n-        parse_targets() :\n+        parse_targets :\n             Parsing the configuration statements of dispatch-able sources.\n         \"\"\"\n         to_compile = {}"
    },
    {
        "commit_id": "8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "commit_message": "Fix docstring cross-referencing",
        "commit_url": "https://github.com/numpy/numpy/commit/8599fe0abc88f584ee45b54654833cdccefc3cd0",
        "buggy_code": "`numpy.doc.indexing`",
        "fixed_code": "numpy.doc.indexing",
        "patch": "@@ -137,7 +137,7 @@ def add_newdoc(module, name, doc):\n \n     See Also\n     --------\n-    `numpy.doc.indexing`\n+    numpy.doc.indexing\n \n     Examples\n     --------"
    },
    {
        "commit_id": "912790315033d8a2b8d525eb36db410a851ca1f4",
        "commit_message": "MAINT: added exception chaining in shape_base.py (gh-17240)\n\nThis edit is relation to issue gh-15986.\r\nChained exception in shape_base.py",
        "commit_url": "https://github.com/numpy/numpy/commit/912790315033d8a2b8d525eb36db410a851ca1f4",
        "buggy_code": "'array split does not result in an equal division')",
        "fixed_code": "'array split does not result in an equal division') from None",
        "patch": "@@ -870,7 +870,7 @@ def split(ary, indices_or_sections, axis=0):\n         N = ary.shape[axis]\n         if N % sections:\n             raise ValueError(\n-                'array split does not result in an equal division')\n+                'array split does not result in an equal division') from None\n     return array_split(ary, indices_or_sections, axis)\n \n "
    },
    {
        "commit_id": "3dacab0b327a0a289c1bafc2a5744974732794e2",
        "commit_message": "Merge pull request #17237 from charris/fix-flatiter-typing\n\nBUG: Avoid using ``np.random`` in typing tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/3dacab0b327a0a289c1bafc2a5744974732794e2",
        "buggy_code": "a = np.random.rand(5).flat",
        "fixed_code": "a = np.empty((2, 2)).flat",
        "patch": "@@ -1,6 +1,6 @@\n import numpy as np\n \n-a = np.random.rand(5).flat\n+a = np.empty((2, 2)).flat\n \n a.base\n a.copy()"
    },
    {
        "commit_id": "d7dfb635457a14bd2a3eaccf2ed94423cedb33df",
        "commit_message": "BUG: Avoid using ``np.random`` in typing tests.\n\nUsing `np.random` can cause mysterious test failures in  mypy `api.run`\nwith a report that 'error: Module has no attribute \"rand\"'.  The fix\nhere is to use `np.empty` instead of `np.random.rand`. Why this works\nis unknown at present.",
        "commit_url": "https://github.com/numpy/numpy/commit/d7dfb635457a14bd2a3eaccf2ed94423cedb33df",
        "buggy_code": "a = np.random.rand(5).flat",
        "fixed_code": "a = np.empty((2, 2)).flat",
        "patch": "@@ -1,6 +1,6 @@\n import numpy as np\n \n-a = np.random.rand(5).flat\n+a = np.empty((2, 2)).flat\n \n a.base\n a.copy()"
    },
    {
        "commit_id": "7b71d6a0f599580547881bd61625c465c52720b7",
        "commit_message": "MAINT: fix win exec_prefix",
        "commit_url": "https://github.com/numpy/numpy/commit/7b71d6a0f599580547881bd61625c465c52720b7",
        "buggy_code": "os.path.join(sysconfig.EXEC_PREFIX,",
        "fixed_code": "os.path.join(sysconfig.get_config_var('exec_prefix'),",
        "patch": "@@ -256,7 +256,7 @@ def libpaths(paths, bits):\n \n if sys.platform == 'win32':\n     default_lib_dirs = ['C:\\\\',\n-                        os.path.join(sysconfig.EXEC_PREFIX,\n+                        os.path.join(sysconfig.get_config_var('exec_prefix'),\n                                      'libs')]\n     default_runtime_dirs = []\n     default_include_dirs = []"
    },
    {
        "commit_id": "1f8ce6341159ebb0731c2c262f4576609210d2c8",
        "commit_message": "MAINT, DOC:  move informational files from numpy.doc.*.py to their *.rst counterparts (#17222)\n\n* DOC: redistribute docstring-only content from numpy/doc\r\n\r\n* DOC: post-transition clean-up\r\n\r\n* DOC, MAINT: reskip doctests, fix a few easy ones",
        "commit_url": "https://github.com/numpy/numpy/commit/1f8ce6341159ebb0731c2c262f4576609210d2c8",
        "buggy_code": "`doc.structured_arrays`.",
        "fixed_code": "`basics.rec`.",
        "patch": "@@ -1520,7 +1520,7 @@ def fromregex(file, regexp, dtype, encoding=None):\n     -----\n     Dtypes for structured arrays can be specified in several forms, but all\n     forms specify at least the data type and field name. For details see\n-    `doc.structured_arrays`.\n+    `basics.rec`.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "eaa59b4f04a0c75091e332afa95a304eddcd93ab",
        "commit_message": "Merge pull request #17068 from charris/cleanup-pystring_fromstring-usage\n\nMAINT, BUG: Remove uses of PyString_FromString.",
        "commit_url": "https://github.com/numpy/numpy/commit/eaa59b4f04a0c75091e332afa95a304eddcd93ab",
        "buggy_code": "\\ts = PyString_FromString(\\\"$R\"\"\" + \"\"\"evision: $\\\");",
        "fixed_code": "\\ts = PyUnicode_FromString(\\\"$R\"\"\" + \"\"\"evision: $\\\");",
        "patch": "@@ -202,7 +202,7 @@\n \\tif (PyErr_Occurred())\n \\t\\t{PyErr_SetString(PyExc_ImportError, \\\"can't initialize module #modulename# (failed to import numpy)\\\"); return m;}\n \\td = PyModule_GetDict(m);\n-\\ts = PyString_FromString(\\\"$R\"\"\" + \"\"\"evision: $\\\");\n+\\ts = PyUnicode_FromString(\\\"$R\"\"\" + \"\"\"evision: $\\\");\n \\tPyDict_SetItemString(d, \\\"__version__\\\", s);\n \\tPy_DECREF(s);\n \\ts = PyUnicode_FromString("
    },
    {
        "commit_id": "0dc55882a976630d832ebebdb58350d9c26205fe",
        "commit_message": "BUG: fix typo in polydiv that prevented promotion to poly1d (#17053)\n\nFix bug caused by typo and added tests",
        "commit_url": "https://github.com/numpy/numpy/commit/0dc55882a976630d832ebebdb58350d9c26205fe",
        "buggy_code": "truepoly = (isinstance(u, poly1d) or isinstance(u, poly1d))",
        "fixed_code": "truepoly = (isinstance(u, poly1d) or isinstance(v, poly1d))",
        "patch": "@@ -1017,7 +1017,7 @@ def polydiv(u, v):\n     (array([1.5 , 1.75]), array([0.25]))\n \n     \"\"\"\n-    truepoly = (isinstance(u, poly1d) or isinstance(u, poly1d))\n+    truepoly = (isinstance(u, poly1d) or isinstance(v, poly1d))\n     u = atleast_1d(u) + 0.0\n     v = atleast_1d(v) + 0.0\n     # w has the common type"
    },
    {
        "commit_id": "3023d06a05136bf8345e781cc11a01d776a9f314",
        "commit_message": "DOC: Fix non-matching pronoun in format.py documentation. (gh-17022)\n\nFollow up to [this commit](https://github.com/numpy/numpy/commit/36f71788620bb17d123669cf03f086fb2b87b3a8), which missed the second pronoun in this sentence.",
        "commit_url": "https://github.com/numpy/numpy/commit/3023d06a05136bf8345e781cc11a01d776a9f314",
        "buggy_code": "read most ``.npy`` files that he has been given without much",
        "fixed_code": "read most ``.npy`` files that they have been given without much",
        "patch": "@@ -41,7 +41,7 @@\n - Is straightforward to reverse engineer. Datasets often live longer than\n   the programs that created them. A competent developer should be\n   able to create a solution in their preferred programming language to\n-  read most ``.npy`` files that he has been given without much\n+  read most ``.npy`` files that they have been given without much\n   documentation.\n \n - Allows memory-mapping of the data. See `open_memmep`."
    },
    {
        "commit_id": "fb79b9b5233c4059b259d43417cecfb58b2dc367",
        "commit_message": "ENH: Use f90 compiler specified in command line args for pgi compilers. Issue #16481",
        "commit_url": "https://github.com/numpy/numpy/commit/fb79b9b5233c4059b259d43417cecfb58b2dc367",
        "buggy_code": "'linker_so': [\"pgfortran\"],",
        "fixed_code": "'linker_so': [\"<F90>\"],",
        "patch": "@@ -31,7 +31,7 @@ class PGroupFCompiler(FCompiler):\n             'compiler_f77': [\"pgfortran\"],\n             'compiler_fix': [\"pgfortran\", \"-Mfixed\"],\n             'compiler_f90': [\"pgfortran\"],\n-            'linker_so': [\"pgfortran\"],\n+            'linker_so': [\"<F90>\"],\n             'archiver': [\"ar\", \"-cr\"],\n             'ranlib': [\"ranlib\"]\n         }"
    },
    {
        "commit_id": "5db1c6a48c9bf626ad171caab6085eec5b7408ea",
        "commit_message": "changed from large number error to different solution",
        "commit_url": "https://github.com/numpy/numpy/commit/5db1c6a48c9bf626ad171caab6085eec5b7408ea",
        "buggy_code": "assert_raises(ValueError, digitize, x, [x - 1, x + 1], False, True)",
        "fixed_code": "assert_equal(np.digitize(x, [x - 1, x + 1], False, True), 1)",
        "patch": "@@ -1743,7 +1743,7 @@ def test_large_integers_increasing(self):\n         # gh-11022\n         x = 2**54  # loses precision in a float\n         assert_equal(np.digitize(x, [x - 1, x + 1]), 1)\n-        assert_raises(ValueError, digitize, x, [x - 1, x + 1], False, True)\n+        assert_equal(np.digitize(x, [x - 1, x + 1], False, True), 1)\n \n     @pytest.mark.xfail(\n         reason=\"gh-11022: np.core.multiarray._monoticity loses precision\")"
    },
    {
        "commit_id": "5dd1fe6d2335cd56d5e93b5a3f9484456b961a4f",
        "commit_message": "Fix exception causes in __init__.py",
        "commit_url": "https://github.com/numpy/numpy/commit/5dd1fe6d2335cd56d5e93b5a3f9484456b961a4f",
        "buggy_code": "raise RuntimeError(msg.format(__file__))",
        "fixed_code": "raise RuntimeError(msg.format(__file__)) from None",
        "patch": "@@ -295,7 +295,7 @@ def _sanity_check():\n                    \"by incorrect BLAS library being linked in, or by mixing \"\n                    \"package managers (pip, conda, apt, ...). Search closed \"\n                    \"numpy issues for similar problems.\")\n-            raise RuntimeError(msg.format(__file__))\n+            raise RuntimeError(msg.format(__file__)) from None\n \n     _sanity_check()\n     del _sanity_check"
    },
    {
        "commit_id": "d3eae8be4d783948a0d71363bc07558524e905e5",
        "commit_message": "Merge pull request #16532 from seberg/delete-sigint-handling\n\nBUG: Remove non-threadsafe sigint handling from fft calculation",
        "commit_url": "https://github.com/numpy/numpy/commit/d3eae8be4d783948a0d71363bc07558524e905e5",
        "buggy_code": "'set_string_function', 'set_typeDict', 'shares_memory', 'test_interrupt',",
        "fixed_code": "'set_string_function', 'set_typeDict', 'shares_memory',",
        "patch": "@@ -38,7 +38,7 @@\n     'nested_iters', 'normalize_axis_index', 'packbits',\n     'promote_types', 'putmask', 'ravel_multi_index', 'result_type', 'scalar',\n     'set_datetimeparse_function', 'set_legacy_print_mode', 'set_numeric_ops',\n-    'set_string_function', 'set_typeDict', 'shares_memory', 'test_interrupt',\n+    'set_string_function', 'set_typeDict', 'shares_memory',\n     'tracemalloc_domain', 'typeinfo', 'unpackbits', 'unravel_index', 'vdot',\n     'where', 'zeros']\n "
    },
    {
        "commit_id": "bf10f6633b5070f41ccc56a9234fb4d3c00204f1",
        "commit_message": "Merge pull request #16883 from rossbar/bug/bad_mpl_kwarg_hist2d\n\nBUG,DOC: Fix bad MPL kwarg in docs",
        "commit_url": "https://github.com/numpy/numpy/commit/bf10f6633b5070f41ccc56a9234fb4d3c00204f1",
        "buggy_code": ">>> plt.imshow(H, interpolation='nearest', origin='low',",
        "fixed_code": ">>> plt.imshow(H, interpolation='nearest', origin='lower',",
        "patch": "@@ -675,7 +675,7 @@ def histogram2d(x, y, bins=10, range=None, normed=None, weights=None,\n \n     >>> fig = plt.figure(figsize=(7, 3))\n     >>> ax = fig.add_subplot(131, title='imshow: square bins')\n-    >>> plt.imshow(H, interpolation='nearest', origin='low',\n+    >>> plt.imshow(H, interpolation='nearest', origin='lower',\n     ...         extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]])\n     <matplotlib.image.AxesImage object at 0x...>\n "
    },
    {
        "commit_id": "831e580cd7bcb42d9e9d758e45076bd0645c04c7",
        "commit_message": "BUG,DOC: Fix bad MPL kwarg.\n\nInvalide kwarg to imshow causes failures in the plot directive\nfor docs builds using MPL > v3.3",
        "commit_url": "https://github.com/numpy/numpy/commit/831e580cd7bcb42d9e9d758e45076bd0645c04c7",
        "buggy_code": ">>> plt.imshow(H, interpolation='nearest', origin='low',",
        "fixed_code": ">>> plt.imshow(H, interpolation='nearest', origin='lower',",
        "patch": "@@ -675,7 +675,7 @@ def histogram2d(x, y, bins=10, range=None, normed=None, weights=None,\n \n     >>> fig = plt.figure(figsize=(7, 3))\n     >>> ax = fig.add_subplot(131, title='imshow: square bins')\n-    >>> plt.imshow(H, interpolation='nearest', origin='low',\n+    >>> plt.imshow(H, interpolation='nearest', origin='lower',\n     ...         extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]])\n     <matplotlib.image.AxesImage object at 0x...>\n "
    },
    {
        "commit_id": "aac965af6032b69d5cb515ad785cc9a331e816f4",
        "commit_message": "Merge pull request #16874 from takanori-pskq/fixup-1\n\nTST, MAINT: fix the test for ``np.ones``",
        "commit_url": "https://github.com/numpy/numpy/commit/aac965af6032b69d5cb515ad785cc9a331e816f4",
        "buggy_code": "self.check_function(np.zeros)",
        "fixed_code": "self.check_function(np.ones)",
        "patch": "@@ -2521,7 +2521,7 @@ def test_zeros(self):\n         self.check_function(np.zeros)\n \n     def test_ones(self):\n-        self.check_function(np.zeros)\n+        self.check_function(np.ones)\n \n     def test_empty(self):\n         self.check_function(np.empty)"
    },
    {
        "commit_id": "affcc831fec3bcf47eacfbfdd0df352b176546b5",
        "commit_message": "Merge pull request #16860 from marload/patch/remove-file-func\n\nMAINT: Remove deprecated python function 'file()'",
        "commit_url": "https://github.com/numpy/numpy/commit/affcc831fec3bcf47eacfbfdd0df352b176546b5",
        "buggy_code": "for line in file(branch_cache_fn, 'r'):",
        "fixed_code": "for line in open(branch_cache_fn, 'r'):",
        "patch": "@@ -1900,7 +1900,7 @@ def _get_hg_revision(self, path):\n                 revision0 = f.read().strip()\n \n             branch_map = {}\n-            for line in file(branch_cache_fn, 'r'):\n+            for line in open(branch_cache_fn, 'r'):\n                 branch1, revision1  = line.split()[:2]\n                 if revision1==revision0:\n                     branch0 = branch1"
    },
    {
        "commit_id": "e90c52d70c5d4f764641f74a00e64aae012d383e",
        "commit_message": "Merge pull request #16831 from bsipocz/sphinx_fix_deprecation\n\nMAINT: fix sphinx deprecation",
        "commit_url": "https://github.com/numpy/numpy/commit/e90c52d70c5d4f764641f74a00e64aae012d383e",
        "buggy_code": "app.add_lexer('NumPyC', NumPyLexer(stripnl=False))",
        "fixed_code": "app.add_lexer('NumPyC', NumPyLexer)",
        "patch": "@@ -88,7 +88,7 @@\n def setup(app):\n     # add a config value for `ifconfig` directives\n     app.add_config_value('python_version_major', str(sys.version_info.major), 'env')\n-    app.add_lexer('NumPyC', NumPyLexer(stripnl=False))\n+    app.add_lexer('NumPyC', NumPyLexer)\n \n # -----------------------------------------------------------------------------\n # HTML output"
    },
    {
        "commit_id": "e9300832dd6f9fb24d70a32f836f0189cbef9df5",
        "commit_message": "Merge pull request #16821 from rohitsanj/document-ndindex\n\nDOC: fix inconsistent parameter name in np.ndindex docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/e9300832dd6f9fb24d70a32f836f0189cbef9df5",
        "buggy_code": "`*args` : ints, or a single tuple of ints",
        "fixed_code": "shape : ints, or a single tuple of ints",
        "patch": "@@ -611,7 +611,7 @@ class ndindex:\n \n     Parameters\n     ----------\n-    `*args` : ints, or a single tuple of ints\n+    shape : ints, or a single tuple of ints\n         The size of each dimension of the array can be passed as \n         individual parameters or as the elements of a tuple.\n "
    },
    {
        "commit_id": "088364bd1b6f64872487bf44eaaf1ec765592fa2",
        "commit_message": "DOC: fix inconsistent parameter name in np.ndindex docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/088364bd1b6f64872487bf44eaaf1ec765592fa2",
        "buggy_code": "`*args` : ints, or a single tuple of ints",
        "fixed_code": "shape : ints, or a single tuple of ints",
        "patch": "@@ -611,7 +611,7 @@ class ndindex:\n \n     Parameters\n     ----------\n-    `*args` : ints, or a single tuple of ints\n+    shape : ints, or a single tuple of ints\n         The size of each dimension of the array can be passed as \n         individual parameters or as the elements of a tuple.\n "
    },
    {
        "commit_id": "ec62be21cf109dac436f9a68a84fbd674c1faebb",
        "commit_message": "BUG: Remove non-threadsafe sigint handling from fft calculation\n\nThe fft calculation is the only point in our code where this function\nis used.  Allowing Ctrl+C, in FFT specifically used have more reasons,\nsince before pocketfft, some array-sizes could lead to very large\nrun-times.\nPocketfft fixed that issue, and now FFT is not really any slower,\nfaster, or memory hungry than any other NumPy operation so it feels\nit does not need this handling.  Rather, if we can find a better\nsolution, it should also be added to more functions.\n\nThe reason for removal is that it is not only unsafe while the\nFFT is running (in theory). Multiple, threaded FFT run can easily\nleave the signal handler in a bad state, causing crashes if Ctrl+C\n(sigint) is given at any point after the call.\n\nIt would be possible to patch that over, by only resetting the\nsignal handler if we actually changed it (or even more complex\ntricks), or possibly only using this technique when on the main\nthread.\nBut, all of these solutions seem to complicate things, when the\nmain reason for why allowing sigint seems useful is gone with\npocketfft.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec62be21cf109dac436f9a68a84fbd674c1faebb",
        "buggy_code": "'set_string_function', 'set_typeDict', 'shares_memory', 'test_interrupt',",
        "fixed_code": "'set_string_function', 'set_typeDict', 'shares_memory',",
        "patch": "@@ -38,7 +38,7 @@\n     'nested_iters', 'normalize_axis_index', 'packbits',\n     'promote_types', 'putmask', 'ravel_multi_index', 'result_type', 'scalar',\n     'set_datetimeparse_function', 'set_legacy_print_mode', 'set_numeric_ops',\n-    'set_string_function', 'set_typeDict', 'shares_memory', 'test_interrupt',\n+    'set_string_function', 'set_typeDict', 'shares_memory',\n     'tracemalloc_domain', 'typeinfo', 'unpackbits', 'unravel_index', 'vdot',\n     'where', 'zeros']\n "
    },
    {
        "commit_id": "63e256cb9b2316ece0e8eb05ea992345a573b190",
        "commit_message": "Fix broken link in open_memmap See Also",
        "commit_url": "https://github.com/numpy/numpy/commit/63e256cb9b2316ece0e8eb05ea992345a573b190",
        "buggy_code": "memmap",
        "fixed_code": "numpy.memmap",
        "patch": "@@ -820,7 +820,7 @@ def open_memmap(filename, mode='r+', dtype=None, shape=None,\n \n     See Also\n     --------\n-    memmap\n+    numpy.memmap\n \n     \"\"\"\n     if isfileobj(filename):"
    },
    {
        "commit_id": "2c05353e8342c555604be78a640646bc01511208",
        "commit_message": "fix _scalar_or_0d in _lerp",
        "commit_url": "https://github.com/numpy/numpy/commit/2c05353e8342c555604be78a640646bc01511208",
        "buggy_code": "_scalar_or_0d = lambda x: np.isscalar(a) or np.ndim(x) == 0",
        "fixed_code": "_scalar_or_0d = lambda x: np.isscalar(x) or np.ndim(x) == 0",
        "patch": "@@ -3877,7 +3877,7 @@ def _lerp(a, b, t, out=None):\n     \"\"\" Linearly interpolate from a to b by a factor of t \"\"\"\n     diff_b_a = subtract(b, a)\n \n-    _scalar_or_0d = lambda x: np.isscalar(a) or np.ndim(x) == 0\n+    _scalar_or_0d = lambda x: np.isscalar(x) or np.ndim(x) == 0\n     if _scalar_or_0d(a) and _scalar_or_0d(b) and _scalar_or_0d(t):\n         if t <= 0.5:\n             return add(a, diff_b_a * t, out=out)"
    },
    {
        "commit_id": "9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "commit_message": "DOC: Fixes for 18 broken links (#16472)\n\n* DOC: Fixes for 18 broken links\r\n\r\nThis, with PR #16465, should fix nearly all the remaining broken links\r\non the site. 4 or 5 others should be easy to fix and just\r\nneed attention from someone more knowledgeable -- will\r\nopen an issue. For release notes with dead links,\r\nI could usually find links on archive.org for roughly contemporary\r\nversions.\r\n\r\n* DOC: Update to \"Fixes for 18 broken links #16472\"\r\n\r\n* Obsolete links, previously commented out, now deleted:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433928958\r\n\r\n* Semantic markup for reference to Python class:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433553928\r\n\r\n* Missing :ref: in internal link:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554484\r\n\r\nNot included: Resolution on using external/internal doc link in .py:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554824\r\n\r\n* DOC: Add internal link for 'Fixes for 18 broken links' PR #16472\r\n\r\nMaking reference [1] an internal link in function_base.py => numpy.vectorize.html\r\n\r\n* DOC: Redirect 2 link fixes in PR #16472\r\n\r\n* governance.rst link reverted\r\n* ununcs.rst `overridden` link goes where it was meant to\r\n\r\n\r\nper https://github.com/numpy/numpy/pull/16472#pullrequestreview-424666070",
        "commit_url": "https://github.com/numpy/numpy/commit/9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "buggy_code": "<../../neps/nep-0013-ufunc-overrides.html>`_.",
        "fixed_code": "<https://numpy.org/neps/nep-0013-ufunc-overrides.html>`_.",
        "patch": "@@ -68,7 +68,7 @@ class NDArrayOperatorsMixin:\n     It is useful for writing classes that do not inherit from `numpy.ndarray`,\n     but that should support arithmetic and numpy universal functions like\n     arrays as described in `A Mechanism for Overriding Ufuncs\n-    <../../neps/nep-0013-ufunc-overrides.html>`_.\n+    <https://numpy.org/neps/nep-0013-ufunc-overrides.html>`_.\n \n     As an trivial example, consider this implementation of an ``ArrayLike``\n     class that simply wraps a NumPy array and ensures that the result of any"
    },
    {
        "commit_id": "9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "commit_message": "DOC: Fixes for 18 broken links (#16472)\n\n* DOC: Fixes for 18 broken links\r\n\r\nThis, with PR #16465, should fix nearly all the remaining broken links\r\non the site. 4 or 5 others should be easy to fix and just\r\nneed attention from someone more knowledgeable -- will\r\nopen an issue. For release notes with dead links,\r\nI could usually find links on archive.org for roughly contemporary\r\nversions.\r\n\r\n* DOC: Update to \"Fixes for 18 broken links #16472\"\r\n\r\n* Obsolete links, previously commented out, now deleted:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433928958\r\n\r\n* Semantic markup for reference to Python class:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433553928\r\n\r\n* Missing :ref: in internal link:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554484\r\n\r\nNot included: Resolution on using external/internal doc link in .py:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554824\r\n\r\n* DOC: Add internal link for 'Fixes for 18 broken links' PR #16472\r\n\r\nMaking reference [1] an internal link in function_base.py => numpy.vectorize.html\r\n\r\n* DOC: Redirect 2 link fixes in PR #16472\r\n\r\n* governance.rst link reverted\r\n* ununcs.rst `overridden` link goes where it was meant to\r\n\r\n\r\nper https://github.com/numpy/numpy/pull/16472#pullrequestreview-424666070",
        "commit_url": "https://github.com/numpy/numpy/commit/9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "buggy_code": "(preprint: https://www.math.hmc.edu/~benjamin/papers/CombTrig.pdf, pg. 4)",
        "fixed_code": "(https://web.archive.org/web/20080221202153/https://www.math.hmc.edu/~benjamin/papers/CombTrig.pdf, pg. 4)",
        "patch": "@@ -104,7 +104,7 @@\n ----------\n .. [1] A. T. Benjamin, et al., \"Combinatorial Trigonometry with Chebyshev\n   Polynomials,\" *Journal of Statistical Planning and Inference 14*, 2008\n-  (preprint: https://www.math.hmc.edu/~benjamin/papers/CombTrig.pdf, pg. 4)\n+  (https://web.archive.org/web/20080221202153/https://www.math.hmc.edu/~benjamin/papers/CombTrig.pdf, pg. 4)\n \n \"\"\"\n import numpy as np"
    },
    {
        "commit_id": "9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "commit_message": "DOC: Fixes for 18 broken links (#16472)\n\n* DOC: Fixes for 18 broken links\r\n\r\nThis, with PR #16465, should fix nearly all the remaining broken links\r\non the site. 4 or 5 others should be easy to fix and just\r\nneed attention from someone more knowledgeable -- will\r\nopen an issue. For release notes with dead links,\r\nI could usually find links on archive.org for roughly contemporary\r\nversions.\r\n\r\n* DOC: Update to \"Fixes for 18 broken links #16472\"\r\n\r\n* Obsolete links, previously commented out, now deleted:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433928958\r\n\r\n* Semantic markup for reference to Python class:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433553928\r\n\r\n* Missing :ref: in internal link:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554484\r\n\r\nNot included: Resolution on using external/internal doc link in .py:\r\nhttps://github.com/numpy/numpy/pull/16472#discussion_r433554824\r\n\r\n* DOC: Add internal link for 'Fixes for 18 broken links' PR #16472\r\n\r\nMaking reference [1] an internal link in function_base.py => numpy.vectorize.html\r\n\r\n* DOC: Redirect 2 link fixes in PR #16472\r\n\r\n* governance.rst link reverted\r\n* ununcs.rst `overridden` link goes where it was meant to\r\n\r\n\r\nper https://github.com/numpy/numpy/pull/16472#pullrequestreview-424666070",
        "commit_url": "https://github.com/numpy/numpy/commit/9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9",
        "buggy_code": "`coverage module <https://nedbatchelder.com/code/modules/coveragehtml>`_).",
        "fixed_code": "`coverage module <https://pypi.org/project/coverage/>`_).",
        "patch": "@@ -352,7 +352,7 @@ def test(self, label='fast', verbose=1, extra_argv=None,\n         coverage : bool, optional\n             If True, report coverage of NumPy code. Default is False.\n             (This requires the\n-            `coverage module <https://nedbatchelder.com/code/modules/coveragehtml>`_).\n+            `coverage module <https://pypi.org/project/coverage/>`_).\n         raise_warnings : None, str or sequence of warnings, optional\n             This specifies which warnings to configure as 'raise' instead\n             of being shown once during the test execution. Valid strings are:"
    },
    {
        "commit_id": "2ffcb119c0235ee7b5c169cae65fcac44064b35a",
        "commit_message": "fix symmetry test",
        "commit_url": "https://github.com/numpy/numpy/commit/2ffcb119c0235ee7b5c169cae65fcac44064b35a",
        "buggy_code": "assert np.lib.function_base._lerp(a, b, t) == np.lib.function_base._lerp(b, a, t)",
        "fixed_code": "assert np.isclose(np.lib.function_base._lerp(a, b, t), np.lib.function_base._lerp(b, a, (1-t)))",
        "patch": "@@ -3153,7 +3153,7 @@ def test_lerp_bounded(self, t, a, b):\n                       a=st.floats(allow_nan=False, allow_infinity=False),\n                       b=st.floats(allow_nan=False, allow_infinity=False))\n     def test_lerp_symmetric(self, t, a, b):\n-        assert np.lib.function_base._lerp(a, b, t) == np.lib.function_base._lerp(b, a, t)\n+        assert np.isclose(np.lib.function_base._lerp(a, b, t), np.lib.function_base._lerp(b, a, (1-t)))\n \n \n class TestMedian:"
    },
    {
        "commit_id": "a7e65a0bfced15f1ebee9c9d4a6b49d6008007a6",
        "commit_message": "Merge pull request #16333 from kevmo/homogeneous-16324\n\nDOC: Fix spelling typo - homogenous to homogeneous. (#16324)",
        "commit_url": "https://github.com/numpy/numpy/commit/a7e65a0bfced15f1ebee9c9d4a6b49d6008007a6",
        "buggy_code": "def test_sequence_non_homogenous(self):",
        "fixed_code": "def test_sequence_non_homogeneous(self):",
        "patch": "@@ -929,7 +929,7 @@ def test_empty_unicode(self):\n             d = np.empty(i, dtype='U')\n             str(d)\n \n-    def test_sequence_non_homogenous(self):\n+    def test_sequence_non_homogeneous(self):\n         assert_equal(np.array([4, 2**80]).dtype, object)\n         assert_equal(np.array([4, 2**80, 4]).dtype, object)\n         assert_equal(np.array([2**80, 4]).dtype, object)"
    },
    {
        "commit_id": "a7e65a0bfced15f1ebee9c9d4a6b49d6008007a6",
        "commit_message": "Merge pull request #16333 from kevmo/homogeneous-16324\n\nDOC: Fix spelling typo - homogenous to homogeneous. (#16324)",
        "commit_url": "https://github.com/numpy/numpy/commit/a7e65a0bfced15f1ebee9c9d4a6b49d6008007a6",
        "buggy_code": "homogenous",
        "fixed_code": "homogeneous",
        "patch": "@@ -169,7 +169,7 @@\n        Collapsed to a one-dimensional array. See `numpy.ndarray.flatten`\n        for details.\n \n-   homogenous\n+   homogeneous\n        Describes a block of memory comprised of blocks, each block comprised of \n        items and of the same size, and blocks are interpreted in exactly the\n        same way. In the simplest case each block contains a single item, for"
    },
    {
        "commit_id": "6dfce7f498a9ee7f4cb396105270793ddc828e80",
        "commit_message": "DOC: Fix spelling typo - homogenous to homogeneous. (#16324)",
        "commit_url": "https://github.com/numpy/numpy/commit/6dfce7f498a9ee7f4cb396105270793ddc828e80",
        "buggy_code": "def test_sequence_non_homogenous(self):",
        "fixed_code": "def test_sequence_non_homogeneous(self):",
        "patch": "@@ -929,7 +929,7 @@ def test_empty_unicode(self):\n             d = np.empty(i, dtype='U')\n             str(d)\n \n-    def test_sequence_non_homogenous(self):\n+    def test_sequence_non_homogeneous(self):\n         assert_equal(np.array([4, 2**80]).dtype, object)\n         assert_equal(np.array([4, 2**80, 4]).dtype, object)\n         assert_equal(np.array([2**80, 4]).dtype, object)"
    },
    {
        "commit_id": "6dfce7f498a9ee7f4cb396105270793ddc828e80",
        "commit_message": "DOC: Fix spelling typo - homogenous to homogeneous. (#16324)",
        "commit_url": "https://github.com/numpy/numpy/commit/6dfce7f498a9ee7f4cb396105270793ddc828e80",
        "buggy_code": "homogenous",
        "fixed_code": "homogeneous",
        "patch": "@@ -169,7 +169,7 @@\n        Collapsed to a one-dimensional array. See `numpy.ndarray.flatten`\n        for details.\n \n-   homogenous\n+   homogeneous\n        Describes a block of memory comprised of blocks, each block comprised of \n        items and of the same size, and blocks are interpreted in exactly the\n        same way. In the simplest case each block contains a single item, for"
    },
    {
        "commit_id": "f6196441b7240c0fa862790efdfb1a62bf557744",
        "commit_message": "BUG: relpath fails for different drives on windows (#16308)\n\n* BUG: relpath fails for different drives on windows\r\n\r\n* ENH: always use abspath",
        "commit_url": "https://github.com/numpy/numpy/commit/f6196441b7240c0fa862790efdfb1a62bf557744",
        "buggy_code": "fobjects = [os.path.relpath(obj) for obj in unlinkable_fobjects]",
        "fixed_code": "fobjects = [os.path.abspath(obj) for obj in unlinkable_fobjects]",
        "patch": "@@ -520,7 +520,7 @@ def _process_unlinkable_fobjects(self, objects, libraries,\n \n         # Wrap unlinkable objects to a linkable one\n         if unlinkable_fobjects:\n-            fobjects = [os.path.relpath(obj) for obj in unlinkable_fobjects]\n+            fobjects = [os.path.abspath(obj) for obj in unlinkable_fobjects]\n             wrapped = fcompiler.wrap_unlinkable_objects(\n                     fobjects, output_dir=self.build_temp,\n                     extra_dll_dir=self.extra_dll_dir)"
    },
    {
        "commit_id": "f10a3df5f0b8434bf7c33faf00719c84333e65a0",
        "commit_message": "Merge pull request #16305 from Carreau/doc-micro-fix\n\nDOC: Fix packbits documentation rendering,",
        "commit_url": "https://github.com/numpy/numpy/commit/f10a3df5f0b8434bf7c33faf00719c84333e65a0",
        "buggy_code": "``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011 => ``, 'little' will",
        "fixed_code": "``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will",
        "patch": "@@ -1139,7 +1139,7 @@ def packbits(a, axis=None, bitorder='big'):\n         ``None`` implies packing the flattened array.\n     bitorder : {'big', 'little'}, optional\n         The order of the input bits. 'big' will mimic bin(val),\n-        ``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011 => ``, 'little' will\n+        ``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\n         reverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\n         Defaults to 'big'.\n "
    },
    {
        "commit_id": "043799295f82b01235479d5b323de4598dca48a0",
        "commit_message": "DOC: Fix documentation rendering,\n\nthe => seem to be extra and rst seem to not interprete backtick with\nleading space as closing a directive, the the full line on text was put\nin a html pre-tag when building the docs.\n\nsee current https://numpy.org/doc/stable/reference/generated/numpy.packbits.html",
        "commit_url": "https://github.com/numpy/numpy/commit/043799295f82b01235479d5b323de4598dca48a0",
        "buggy_code": "``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011 => ``, 'little' will",
        "fixed_code": "``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will",
        "patch": "@@ -1139,7 +1139,7 @@ def packbits(a, axis=None, bitorder='big'):\n         ``None`` implies packing the flattened array.\n     bitorder : {'big', 'little'}, optional\n         The order of the input bits. 'big' will mimic bin(val),\n-        ``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011 => ``, 'little' will\n+        ``[0, 0, 0, 0, 0, 0, 1, 1] => 3 = 0b00000011``, 'little' will\n         reverse the order so ``[1, 1, 0, 0, 0, 0, 0, 0] => 3``.\n         Defaults to 'big'.\n "
    },
    {
        "commit_id": "bd8be5417632c019dbc1d36400052805f95a372c",
        "commit_message": "Merge pull request #16269 from tbm/typo\n\nDOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/bd8be5417632c019dbc1d36400052805f95a372c",
        "buggy_code": "that that can be used to form decimal-radix numbers,",
        "fixed_code": "that can be used to form decimal-radix numbers,",
        "patch": "@@ -1779,7 +1779,7 @@ def isdecimal(a):\n     Calls `unicode.isdecimal` element-wise.\n \n     Decimal characters include digit characters, and all characters\n-    that that can be used to form decimal-radix numbers,\n+    that can be used to form decimal-radix numbers,\n     e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.\n \n     Parameters"
    },
    {
        "commit_id": "bd8be5417632c019dbc1d36400052805f95a372c",
        "commit_message": "Merge pull request #16269 from tbm/typo\n\nDOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/bd8be5417632c019dbc1d36400052805f95a372c",
        "buggy_code": "it's own function, but is easily calculated with the 'fv' function.",
        "fixed_code": "its own function, but is easily calculated with the 'fv' function.",
        "patch": "@@ -466,7 +466,7 @@ def _rbl(rate, per, pmt, pv, when):\n     This function is here to simply have a different name for the 'fv'\n     function to not interfere with the 'fv' keyword argument within the 'ipmt'\n     function.  It is the 'remaining balance on loan' which might be useful as\n-    it's own function, but is easily calculated with the 'fv' function.\n+    its own function, but is easily calculated with the 'fv' function.\n     \"\"\"\n     return fv(rate, (per - 1), pmt, pv, when)\n "
    },
    {
        "commit_id": "bd8be5417632c019dbc1d36400052805f95a372c",
        "commit_message": "Merge pull request #16269 from tbm/typo\n\nDOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/bd8be5417632c019dbc1d36400052805f95a372c",
        "buggy_code": "Path of the directory and it's sub directories",
        "fixed_code": "Path of the directory and its sub directories",
        "patch": "@@ -1037,7 +1037,7 @@ def iter_included_files(base_path, verbose=0, suffixes=('.rst',)):\n     Yields\n     ------\n     path\n-        Path of the directory and it's sub directories\n+        Path of the directory and its sub directories\n     \"\"\"\n     if os.path.exists(base_path) and os.path.isfile(base_path):\n         yield base_path"
    },
    {
        "commit_id": "0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "commit_message": "DOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "buggy_code": "that that can be used to form decimal-radix numbers,",
        "fixed_code": "that can be used to form decimal-radix numbers,",
        "patch": "@@ -1779,7 +1779,7 @@ def isdecimal(a):\n     Calls `unicode.isdecimal` element-wise.\n \n     Decimal characters include digit characters, and all characters\n-    that that can be used to form decimal-radix numbers,\n+    that can be used to form decimal-radix numbers,\n     e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.\n \n     Parameters"
    },
    {
        "commit_id": "0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "commit_message": "DOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "buggy_code": "it's own function, but is easily calculated with the 'fv' function.",
        "fixed_code": "its own function, but is easily calculated with the 'fv' function.",
        "patch": "@@ -466,7 +466,7 @@ def _rbl(rate, per, pmt, pv, when):\n     This function is here to simply have a different name for the 'fv'\n     function to not interfere with the 'fv' keyword argument within the 'ipmt'\n     function.  It is the 'remaining balance on loan' which might be useful as\n-    it's own function, but is easily calculated with the 'fv' function.\n+    its own function, but is easily calculated with the 'fv' function.\n     \"\"\"\n     return fv(rate, (per - 1), pmt, pv, when)\n "
    },
    {
        "commit_id": "0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "commit_message": "DOC: Fix typos and cosmetic issues",
        "commit_url": "https://github.com/numpy/numpy/commit/0a2893149e88e5c5bb69a29f78a4ad262a08cd29",
        "buggy_code": "Path of the directory and it's sub directories",
        "fixed_code": "Path of the directory and its sub directories",
        "patch": "@@ -1037,7 +1037,7 @@ def iter_included_files(base_path, verbose=0, suffixes=('.rst',)):\n     Yields\n     ------\n     path\n-        Path of the directory and it's sub directories\n+        Path of the directory and its sub directories\n     \"\"\"\n     if os.path.exists(base_path) and os.path.isfile(base_path):\n         yield base_path"
    },
    {
        "commit_id": "0a222b87ab733955f34719a79c0dcb44a830a31f",
        "commit_message": "Merge pull request #16133 from seberg/maint-cast-error\n\nMAINT: Unify casting error creation (outside the iterator)",
        "commit_url": "https://github.com/numpy/numpy/commit/0a222b87ab733955f34719a79c0dcb44a830a31f",
        "buggy_code": "TypeError: Cannot cast scalar from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'",
        "fixed_code": "TypeError: Cannot cast array data from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'",
        "patch": "@@ -341,7 +341,7 @@\n  >>> nostruct[:] = twofield\n  Traceback (most recent call last):\n  ...\n- TypeError: Cannot cast scalar from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'\n+ TypeError: Cannot cast array data from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'\n \n Assignment from other Structured Arrays\n ```````````````````````````````````````"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -2,7 +2,7 @@ def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n \n     config = Configuration('compat', parent_package, top_path)\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     return config\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -961,7 +961,7 @@ def generate_umath_c(ext, build_dir):\n     config.add_extension('_operand_flag_tests',\n                     sources=[join('src', 'umath', '_operand_flag_tests.c.src')])\n \n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     config.add_data_dir('tests/data')\n \n     config.make_svn_version_py()"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -4,7 +4,7 @@ def configuration(parent_package='',top_path=None):\n     config = Configuration('distutils', parent_package, top_path)\n     config.add_subpackage('command')\n     config.add_subpackage('fcompiler')\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     config.add_data_files('site.cfg')\n     config.add_data_files('mingw/gfortran_vs2003_hack.c')\n     config.make_config_py()"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -4,7 +4,7 @@ def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('fft', parent_package, top_path)\n \n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n \n     # AIX needs to be told to use large file support - at all times\n     defs = [('_LARGE_FILES', None)] if sys.platform[:3] == \"aix\" else []"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -6,7 +6,7 @@ def configuration(parent_package='', top_path=None):\n     from numpy.distutils.system_info import get_info, system_info\n     config = Configuration('linalg', parent_package, top_path)\n \n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n \n     # Configure lapack_lite\n "
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -2,7 +2,7 @@\n def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('ma', parent_package, top_path)\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     return config\n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -2,7 +2,7 @@\n def configuration(parent_package='', top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('matrixlib', parent_package, top_path)\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     return config\n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -1,7 +1,7 @@\n def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('polynomial', parent_package, top_path)\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     return config\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -18,7 +18,7 @@ def configuration(parent_package='',top_path=None):\n     config.add_subpackage('random')\n     config.add_subpackage('testing')\n     config.add_data_dir('doc')\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     config.make_config_py() # installs __config__.py\n     return config\n "
    },
    {
        "commit_id": "ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "commit_message": "Merge pull request #16173 from hameerabbasi/issue-3996\n\nMAINT: Mark tests as a subpackage rather than data.",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf407ec846324cabaa0afd4bcfbe90899c94da1",
        "buggy_code": "config.add_data_dir('tests')",
        "fixed_code": "config.add_subpackage('tests')",
        "patch": "@@ -5,7 +5,7 @@ def configuration(parent_package='',top_path=None):\n     config = Configuration('testing', parent_package, top_path)\n \n     config.add_subpackage('_private')\n-    config.add_data_dir('tests')\n+    config.add_subpackage('tests')\n     return config\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "aab329ce1c92c2b5a12dcf545c91761ec5c5a4a1",
        "commit_message": "BUG: use default",
        "commit_url": "https://github.com/numpy/numpy/commit/aab329ce1c92c2b5a12dcf545c91761ec5c5a4a1",
        "buggy_code": "ret = os.environ.get(\"MB_ML_VER\", \"2010\")",
        "fixed_code": "ret = os.environ.get(\"MB_ML_VER\", default)",
        "patch": "@@ -43,7 +43,7 @@ def get_manylinux(arch):\n         default = '2010'\n     else:\n         default = '2014'\n-    ret = os.environ.get(\"MB_ML_VER\", \"2010\")\n+    ret = os.environ.get(\"MB_ML_VER\", default)\n     # XXX For PEP 600 this can be a glibc version\n     assert ret in ('1', '2010', '2014'), f'invalid MB_ML_VER {ret}'\n     return ret"
    },
    {
        "commit_id": "cea894c0e9ce12f3823d06f680a5e8523a255371",
        "commit_message": "MAINT: Fix '2104' typo, should be '2014'.",
        "commit_url": "https://github.com/numpy/numpy/commit/cea894c0e9ce12f3823d06f680a5e8523a255371",
        "buggy_code": "default = '2104'",
        "fixed_code": "default = '2014'",
        "patch": "@@ -42,7 +42,7 @@ def get_manylinux(arch):\n     if arch in ('x86_64', 'i686'):\n         default = '2010'\n     else:\n-        default = '2104'\n+        default = '2014'\n     ret = os.environ.get(\"MB_ML_VER\", \"2010\")\n     # XXX For PEP 600 this can be a glibc version\n     assert ret in ('1', '2010', '2014'), f'invalid MB_ML_VER {ret}'"
    },
    {
        "commit_id": "22724bac3465e6f699313cb6301722cddc6351b3",
        "commit_message": "Merge pull request #15769 from seberg/hugepages-allow-toggling\n\nENH: Allow toggling madvise hugepage and fix default",
        "commit_url": "https://github.com/numpy/numpy/commit/22724bac3465e6f699313cb6301722cddc6351b3",
        "buggy_code": "_ARRAY_API, _monotonicity, _get_ndarray_c_version",
        "fixed_code": "_ARRAY_API, _monotonicity, _get_ndarray_c_version, _set_madvise_hugepage,",
        "patch": "@@ -17,7 +17,7 @@\n # _get_ndarray_c_version is semi-public, on purpose not added to __all__\n from ._multiarray_umath import (\n     _fastCopyAndTranspose, _flagdict, _insert, _reconstruct, _vec_string,\n-    _ARRAY_API, _monotonicity, _get_ndarray_c_version\n+    _ARRAY_API, _monotonicity, _get_ndarray_c_version, _set_madvise_hugepage,\n     )\n \n __all__ = ["
    },
    {
        "commit_id": "ffe76ac8df65c8e7831df9924a782276e060f3e6",
        "commit_message": "MAINT: Unify casting error creation (outside the iterator)",
        "commit_url": "https://github.com/numpy/numpy/commit/ffe76ac8df65c8e7831df9924a782276e060f3e6",
        "buggy_code": "TypeError: Cannot cast scalar from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'",
        "fixed_code": "TypeError: Cannot cast array data from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'",
        "patch": "@@ -341,7 +341,7 @@\n  >>> nostruct[:] = twofield\n  Traceback (most recent call last):\n  ...\n- TypeError: Cannot cast scalar from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'\n+ TypeError: Cannot cast array data from dtype([('A', '<i4'), ('B', '<i4')]) to dtype('int32') according to the rule 'unsafe'\n \n Assignment from other Structured Arrays\n ```````````````````````````````````````"
    },
    {
        "commit_id": "8f83fa577b01fbf5144ca9771ab91bd68f16bb7f",
        "commit_message": "Fix other comments from Ross and make it ImportError specific",
        "commit_url": "https://github.com/numpy/numpy/commit/8f83fa577b01fbf5144ca9771ab91bd68f16bb7f",
        "buggy_code": "https://numpy.org/devdocs/user/troubleshooting.html",
        "fixed_code": "https://numpy.org/devdocs/user/troubleshooting-importerror.html",
        "patch": "@@ -32,7 +32,7 @@\n \n We have compiled some common reasons and troubleshooting tips at:\n \n-    https://numpy.org/devdocs/user/troubleshooting.html\n+    https://numpy.org/devdocs/user/troubleshooting-importerror.html\n \n Please note and check the following:\n "
    },
    {
        "commit_id": "cc7038fb59f8dbe8ff08cae4723aca38169a5a59",
        "commit_message": "Merge pull request #16008 from eric-wieser/tidy-converter-errors\n\nBUG: Unify handling of string enum converters",
        "commit_url": "https://github.com/numpy/numpy/commit/cc7038fb59f8dbe8ff08cae4723aca38169a5a59",
        "buggy_code": "assert_raises(TypeError, np.einsum, \"\", 0, order='W',",
        "fixed_code": "assert_raises(ValueError, np.einsum, \"\", 0, order='W',",
        "patch": "@@ -27,7 +27,7 @@ def test_einsum_errors(self):\n                           optimize=do_opt)\n \n             # order parameter must be a valid order\n-            assert_raises(TypeError, np.einsum, \"\", 0, order='W',\n+            assert_raises(ValueError, np.einsum, \"\", 0, order='W',\n                           optimize=do_opt)\n \n             # casting parameter must be a valid casting"
    },
    {
        "commit_id": "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
        "commit_message": "BUG: Unify handling of string enum converters\n\nThis fixes a collection of bugs:\n\n* Confusion between `TypeError` and `ValueError`\n* Allowing invalid arguments if they are valid up to the first embedded null\n* Producing better errors for non-ascii unicode strings",
        "commit_url": "https://github.com/numpy/numpy/commit/35b0a051c19265f5643f6011ee11e31d30c8bc4c",
        "buggy_code": "assert_raises(TypeError, np.einsum, \"\", 0, order='W',",
        "fixed_code": "assert_raises(ValueError, np.einsum, \"\", 0, order='W',",
        "patch": "@@ -27,7 +27,7 @@ def test_einsum_errors(self):\n                           optimize=do_opt)\n \n             # order parameter must be a valid order\n-            assert_raises(TypeError, np.einsum, \"\", 0, order='W',\n+            assert_raises(ValueError, np.einsum, \"\", 0, order='W',\n                           optimize=do_opt)\n \n             # casting parameter must be a valid casting"
    },
    {
        "commit_id": "b57c5349442d11f7f72aacec299e2c6740ec0a32",
        "commit_message": "Merge pull request #16041 from mattip/typo\n\nBUG: missing 'f' prefix for fstring",
        "commit_url": "https://github.com/numpy/numpy/commit/b57c5349442d11f7f72aacec299e2c6740ec0a32",
        "buggy_code": "config.add_data_files('{gen}.pxd')",
        "fixed_code": "config.add_data_files(f'{gen}.pxd')",
        "patch": "@@ -110,7 +110,7 @@ def generate_libraries(ext, build_dir):\n                              depends=depends + [f'{gen}.pyx', f'{gen}.pxd',],\n                              define_macros=defs,\n                              )\n-        config.add_data_files('{gen}.pxd')\n+        config.add_data_files(f'{gen}.pxd')\n     for gen in ['_generator', '_bounded_integers']:\n         # gen.pyx, src/distributions/distributions.c\n         config.add_extension(gen,"
    },
    {
        "commit_id": "c0d8fe1f6c360949db800c195fc757322d5e0c39",
        "commit_message": "BUG: missing 'f' prefix for fstring",
        "commit_url": "https://github.com/numpy/numpy/commit/c0d8fe1f6c360949db800c195fc757322d5e0c39",
        "buggy_code": "config.add_data_files('{gen}.pxd')",
        "fixed_code": "config.add_data_files(f'{gen}.pxd')",
        "patch": "@@ -110,7 +110,7 @@ def generate_libraries(ext, build_dir):\n                              depends=depends + [f'{gen}.pyx', f'{gen}.pxd',],\n                              define_macros=defs,\n                              )\n-        config.add_data_files('{gen}.pxd')\n+        config.add_data_files(f'{gen}.pxd')\n     for gen in ['_generator', '_bounded_integers']:\n         # gen.pyx, src/distributions/distributions.c\n         config.add_extension(gen,"
    },
    {
        "commit_id": "caa9b6045cedfaf0a4735bd2be55164549a4ddcf",
        "commit_message": "DOC: Minor fix to _hist_bin_fd documentation (#15839)\n\nCo-Authored-By: Ross Barnowski <rossbar@berkeley.edu>>",
        "commit_url": "https://github.com/numpy/numpy/commit/caa9b6045cedfaf0a4735bd2be55164549a4ddcf",
        "buggy_code": "If the IQR is 0, this function returns 1 for the number of bins.",
        "fixed_code": "If the IQR is 0, this function returns 0 for the bin width.",
        "patch": "@@ -207,7 +207,7 @@ def _hist_bin_fd(x, range):\n     than the standard deviation, so it is less accurate, especially for\n     long tailed distributions.\n \n-    If the IQR is 0, this function returns 1 for the number of bins.\n+    If the IQR is 0, this function returns 0 for the bin width.\n     Binwidth is inversely proportional to the cube root of data size\n     (asymptotically optimal).\n "
    },
    {
        "commit_id": "3310cd0e8f1b36d7da8c1352441b1240be4bedc5",
        "commit_message": "Merge pull request #15885 from eric-wieser/fix-nditer-itershape-()\n\nBUG: Respect itershape=() in nditer",
        "commit_url": "https://github.com/numpy/numpy/commit/3310cd0e8f1b36d7da8c1352441b1240be4bedc5",
        "buggy_code": "nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=(), buffersize=0)",
        "fixed_code": "nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)",
        "patch": "@@ -152,7 +152,7 @@\n \n add_newdoc('numpy.core', 'nditer',\n     \"\"\"\n-    nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=(), buffersize=0)\n+    nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)\n \n     Efficient multi-dimensional iterator object to iterate over arrays.\n     To get started using this object, see the"
    },
    {
        "commit_id": "5ae9f65f3d8a991baa14575af2b34c8665e97559",
        "commit_message": "BUG: Respect itershape=() in nditer\n\nPreviously this was treated as itershape=None, which meant something else.\n\nThe docstring was added only a handful of commits ago, so it shouldn't matter that the documented default \"changed\".",
        "commit_url": "https://github.com/numpy/numpy/commit/5ae9f65f3d8a991baa14575af2b34c8665e97559",
        "buggy_code": "nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=(), buffersize=0)",
        "fixed_code": "nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)",
        "patch": "@@ -152,7 +152,7 @@\n \n add_newdoc('numpy.core', 'nditer',\n     \"\"\"\n-    nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=(), buffersize=0)\n+    nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)\n \n     Efficient multi-dimensional iterator object to iterate over arrays.\n     To get started using this object, see the"
    },
    {
        "commit_id": "f01b4e54a4b46a84a5a79b03bd2bd2f21b190f12",
        "commit_message": "Merge pull request #15881 from eric-wieser/empty_like-0d\n\nBUG: Fix empty_like to respect shape=()",
        "commit_url": "https://github.com/numpy/numpy/commit/f01b4e54a4b46a84a5a79b03bd2bd2f21b190f12",
        "buggy_code": "self.shapes = [(5,), (5,6,), (5,6,7,)]",
        "fixed_code": "self.shapes = [(), (5,), (5,6,), (5,6,7,)]",
        "patch": "@@ -2457,7 +2457,7 @@ def setup(self):\n                 (np.arange(24).reshape(2, 3, 4).swapaxes(0, 1), None),\n                 (np.arange(24).reshape(4, 3, 2).swapaxes(0, 1), '?'),\n                      ]\n-        self.shapes = [(5,), (5,6,), (5,6,7,)]\n+        self.shapes = [(), (5,), (5,6,), (5,6,7,)]\n \n     def compare_array_value(self, dz, value, fill_value):\n         if value is not None:"
    },
    {
        "commit_id": "8235553ec3e5b6ec64c0e0146849498aed49bbaa",
        "commit_message": "BUG: Fix empty_like to respect shape=()\n\nPreviously this was treated the same as shape=None.",
        "commit_url": "https://github.com/numpy/numpy/commit/8235553ec3e5b6ec64c0e0146849498aed49bbaa",
        "buggy_code": "self.shapes = [(5,), (5,6,), (5,6,7,)]",
        "fixed_code": "self.shapes = [(), (5,), (5,6,), (5,6,7,)]",
        "patch": "@@ -2457,7 +2457,7 @@ def setup(self):\n                 (np.arange(24).reshape(2, 3, 4).swapaxes(0, 1), None),\n                 (np.arange(24).reshape(4, 3, 2).swapaxes(0, 1), '?'),\n                      ]\n-        self.shapes = [(5,), (5,6,), (5,6,7,)]\n+        self.shapes = [(), (5,), (5,6,), (5,6,7,)]\n \n     def compare_array_value(self, dz, value, fill_value):\n         if value is not None:"
    },
    {
        "commit_id": "2582c681082e6c2c74d424e255afa8efefa4f899",
        "commit_message": "Merge pull request #15836 from sgasse/axis_np_mean\n\nBUG: Fix IndexError for illegal axis in np.mean",
        "commit_url": "https://github.com/numpy/numpy/commit/2582c681082e6c2c74d424e255afa8efefa4f899",
        "buggy_code": "items *= arr.shape[ax]",
        "fixed_code": "items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]",
        "patch": "@@ -63,7 +63,7 @@ def _count_reduce_items(arr, axis):\n         axis = (axis,)\n     items = 1\n     for ax in axis:\n-        items *= arr.shape[ax]\n+        items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\n     return items\n \n # Numpy 1.17.0, 2019-02-24"
    },
    {
        "commit_id": "36dd1b36474d9a6e46c86f708b9a62efa0a7309a",
        "commit_message": "BUG: Fix IndexError for illegal axis in np.mean\n\nCatch IndexError in _count_reduce_items used in np.mean and np.var for\nillegal axis and reraise as AxisError, see gh-15817.",
        "commit_url": "https://github.com/numpy/numpy/commit/36dd1b36474d9a6e46c86f708b9a62efa0a7309a",
        "buggy_code": "items *= arr.shape[ax]",
        "fixed_code": "items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]",
        "patch": "@@ -63,7 +63,7 @@ def _count_reduce_items(arr, axis):\n         axis = (axis,)\n     items = 1\n     for ax in axis:\n-        items *= arr.shape[ax]\n+        items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\n     return items\n \n # Numpy 1.17.0, 2019-02-24"
    },
    {
        "commit_id": "68439794b84836f43ec389be0e702ff64ee76d44",
        "commit_message": "ENH: Use TypeError in `np.array` for python consistency (#15784)\n\nCurrently, when writing something like \r\n```\r\npd.DataFrame({'arr': np.array(1., 2., 3.)})\r\n```\r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-ffdb00ae9b74> in <module>()\r\n      1 import numpy as np\r\n      2 import pandas as pd\r\n----> 3 pd.DataFrame({'arr': np.array(1., 2., 3.)})\r\n\r\nValueError: only 2 non-keyword arguments accepted\r\n```\r\nThis stack trace that doesn't include a frame for the np constructor, because the constructor is generated python code. This may lead users to look elsewhere for the issuer of the ValueError, which may create red-herrings in that folks may look elsewhere.\r\n\r\nThis changes makes it more obvious where the error is coming from.\r\n\r\n\r\n* reflects  eric-wieser's suggestion about common error messages\r\n\r\n* Documents required non-keyword args for np.array\r\n\r\n* Update numpy/core/src/multiarray/multiarraymodule.c\r\n\r\nCo-Authored-By: Eric Wieser <wieser.eric@gmail.com>\r\n\r\n* Update numpy/core/src/multiarray/multiarraymodule.c\r\n\r\nCo-Authored-By: Eric Wieser <wieser.eric@gmail.com>\r\n\r\n* Update numpy/core/src/multiarray/multiarraymodule.c\r\n\r\nCo-Authored-By: Eric Wieser <wieser.eric@gmail.com>\r\n\r\n* Update multiarraymodule.c\r\n\r\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/68439794b84836f43ec389be0e702ff64ee76d44",
        "buggy_code": "array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)",
        "fixed_code": "array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0)",
        "patch": "@@ -784,7 +784,7 @@\n \n add_newdoc('numpy.core.multiarray', 'array',\n     \"\"\"\n-    array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)\n+    array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0)\n \n     Create an array.\n "
    },
    {
        "commit_id": "4f2b219647ae6a7928590be2b709894ae2403274",
        "commit_message": "BUG: add missing c_distributions.pxd, enables cython use of random C-API (gh-15463)\n\nxref gh-14778\r\n\r\nAs pointed out in the comment by @jamesthomasgriffin, we did not include a pxd file to expose the distribution functions documented in the random c-api. This PR adds a c_distributions.pxd file that exposes them.\r\n\r\nSquashed commits:\r\n\r\n* BUG: add missing c_distributions.pxd to enable cython use of random C-API\r\n\r\n* ENH, TST: add npyrandom library like npymath, test cython use of it\r\n\r\n* BUG: actually prefix f-string with f\r\n\r\n* MAINT: fixes from review, add _bit_generato_bit_generator.pxd\r\n\r\n* STY: fixes from review\r\n\r\n* BLD: don't use nprandom library for mtrand legacy build\r\n\r\n* TST: WindowsPath cannot be used in subprocess's list2cmdline\r\n\r\n* MAINT, API: move _bit_generator to bit_generator\r\n\r\n* DOC: add release note about moving bit_generator\r\n\r\n* DOC, MAINT: fixes from review\r\n\r\n* MAINT: redo dtype determination from review",
        "commit_url": "https://github.com/numpy/numpy/commit/4f2b219647ae6a7928590be2b709894ae2403274",
        "buggy_code": "from ._bit_generator import SeedSequence, BitGenerator",
        "fixed_code": "from .bit_generator import SeedSequence, BitGenerator",
        "patch": "@@ -181,7 +181,7 @@\n from . import _bounded_integers\n \n from ._generator import Generator, default_rng\n-from ._bit_generator import SeedSequence, BitGenerator\n+from .bit_generator import SeedSequence, BitGenerator\n from ._mt19937 import MT19937\n from ._pcg64 import PCG64\n from ._philox import Philox"
    },
    {
        "commit_id": "4f2b219647ae6a7928590be2b709894ae2403274",
        "commit_message": "BUG: add missing c_distributions.pxd, enables cython use of random C-API (gh-15463)\n\nxref gh-14778\r\n\r\nAs pointed out in the comment by @jamesthomasgriffin, we did not include a pxd file to expose the distribution functions documented in the random c-api. This PR adds a c_distributions.pxd file that exposes them.\r\n\r\nSquashed commits:\r\n\r\n* BUG: add missing c_distributions.pxd to enable cython use of random C-API\r\n\r\n* ENH, TST: add npyrandom library like npymath, test cython use of it\r\n\r\n* BUG: actually prefix f-string with f\r\n\r\n* MAINT: fixes from review, add _bit_generato_bit_generator.pxd\r\n\r\n* STY: fixes from review\r\n\r\n* BLD: don't use nprandom library for mtrand legacy build\r\n\r\n* TST: WindowsPath cannot be used in subprocess's list2cmdline\r\n\r\n* MAINT, API: move _bit_generator to bit_generator\r\n\r\n* DOC: add release note about moving bit_generator\r\n\r\n* DOC, MAINT: fixes from review\r\n\r\n* MAINT: redo dtype determination from review",
        "commit_url": "https://github.com/numpy/numpy/commit/4f2b219647ae6a7928590be2b709894ae2403274",
        "buggy_code": "from numpy.random._bit_generator import (ISeedSequence,",
        "fixed_code": "from numpy.random.bit_generator import (ISeedSequence,",
        "patch": "@@ -127,7 +127,7 @@ def gauss_from_uint(x, n, bits):\n     return gauss[:n]\n \n def test_seedsequence():\n-    from numpy.random._bit_generator import (ISeedSequence,\n+    from numpy.random.bit_generator import (ISeedSequence,\n                                             ISpawnableSeedSequence,\n                                             SeedlessSeedSequence)\n "
    },
    {
        "commit_id": "91411eea6306d5b9aabab4b5abf5a16df4c3396b",
        "commit_message": "Merge pull request #15487 from ericmariasis/quantile\n\nBUG: Fixing result of np quantile edge case",
        "commit_url": "https://github.com/numpy/numpy/commit/91411eea6306d5b9aabab4b5abf5a16df4c3396b",
        "buggy_code": "if indices.dtype == intp:  # take the points along axis",
        "fixed_code": "if np.issubdtype(indices.dtype, np.integer):  # take the points along axis",
        "patch": "@@ -3870,7 +3870,7 @@ def _quantile_ureduce_func(a, q, axis=None, out=None, overwrite_input=False,\n             \"'midpoint', or 'nearest'\")\n \n     n = np.array(False, dtype=bool)  # check for nan's flag\n-    if indices.dtype == intp:  # take the points along axis\n+    if np.issubdtype(indices.dtype, np.integer):  # take the points along axis\n         # Check if the array contains any nan's\n         if np.issubdtype(a.dtype, np.inexact):\n             indices = concatenate((indices, [-1]))"
    },
    {
        "commit_id": "6361c2cd62b25a4b8602c647ac64466d9cc011fd",
        "commit_message": "BUG: Fixing result of np quantile edge case",
        "commit_url": "https://github.com/numpy/numpy/commit/6361c2cd62b25a4b8602c647ac64466d9cc011fd",
        "buggy_code": "if indices.dtype == intp:  # take the points along axis",
        "fixed_code": "if np.issubdtype(indices.dtype, np.integer):  # take the points along axis",
        "patch": "@@ -3870,7 +3870,7 @@ def _quantile_ureduce_func(a, q, axis=None, out=None, overwrite_input=False,\n             \"'midpoint', or 'nearest'\")\n \n     n = np.array(False, dtype=bool)  # check for nan's flag\n-    if indices.dtype == intp:  # take the points along axis\n+    if np.issubdtype(indices.dtype, np.integer):  # take the points along axis\n         # Check if the array contains any nan's\n         if np.issubdtype(a.dtype, np.inexact):\n             indices = concatenate((indices, [-1]))"
    },
    {
        "commit_id": "1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "commit_message": "DEP: Do not allow \"abstract\" dtype conversion/creation\n\nThese dtypes do not really make sense as instances. We can (somewhat)\nreasonably define np.dtype(np.int64) as the default (machine endianess)\nint64. (Arguably, it is unclear that `np.array(arr_of_>f8, dtype=\"f\")`\nshould return arr_of_<f8, but that would be very noisy!)\n\nHowever, `np.integer` as equivalent to long, is not well defined.\nSimilarly, `dtype=Decimal` may be neat to spell `dtype=object` when you\nintend to put Decimal objects into the array. But it is misleading,\nsince there is no special meaning to it at this time.\n\nThe biggest issue with it, is that `arr.astype(np.floating)` looks\nlike it will let float32 or float128 pass, but it will force a\nfloat64 output! Arguably downcasting is a bug in this case.\n\nA related issue is `np.dtype(\"S\")` and especially \"S0\". The dtype \"S\"\ndoes make sense for most or all places where `dtype=...` can be\npassed. However, it is conceptionally different from other dtypes, since\nit will not end up being attached to the array (unlike \"S2\" which\nwould be). The dtype \"S\" really means the type number/DType class\nof String, and not a specific dtype instance.",
        "commit_url": "https://github.com/numpy/numpy/commit/1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "buggy_code": "@pytest.mark.parametrize('dt', [float, Decimal], ids=['float', 'object'])",
        "fixed_code": "@pytest.mark.parametrize('dt', [float, object], ids=['float', 'object'])",
        "patch": "@@ -6456,7 +6456,7 @@ def test_broadcast2(self):\n NEIGH_MODE = {'zero': 0, 'one': 1, 'constant': 2, 'circular': 3, 'mirror': 4}\n \n \n-@pytest.mark.parametrize('dt', [float, Decimal], ids=['float', 'object'])\n+@pytest.mark.parametrize('dt', [float, object], ids=['float', 'object'])\n class TestNeighborhoodIter:\n     # Simple, 2d tests\n     def test_simple2d(self, dt):"
    },
    {
        "commit_id": "1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "commit_message": "DEP: Do not allow \"abstract\" dtype conversion/creation\n\nThese dtypes do not really make sense as instances. We can (somewhat)\nreasonably define np.dtype(np.int64) as the default (machine endianess)\nint64. (Arguably, it is unclear that `np.array(arr_of_>f8, dtype=\"f\")`\nshould return arr_of_<f8, but that would be very noisy!)\n\nHowever, `np.integer` as equivalent to long, is not well defined.\nSimilarly, `dtype=Decimal` may be neat to spell `dtype=object` when you\nintend to put Decimal objects into the array. But it is misleading,\nsince there is no special meaning to it at this time.\n\nThe biggest issue with it, is that `arr.astype(np.floating)` looks\nlike it will let float32 or float128 pass, but it will force a\nfloat64 output! Arguably downcasting is a bug in this case.\n\nA related issue is `np.dtype(\"S\")` and especially \"S0\". The dtype \"S\"\ndoes make sense for most or all places where `dtype=...` can be\npassed. However, it is conceptionally different from other dtypes, since\nit will not end up being attached to the array (unlike \"S2\" which\nwould be). The dtype \"S\" really means the type number/DType class\nof String, and not a specific dtype instance.",
        "commit_url": "https://github.com/numpy/numpy/commit/1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "buggy_code": "self._setup(Decimal)",
        "fixed_code": "self._setup(object)",
        "patch": "@@ -2543,7 +2543,7 @@ def test_float(self):\n         assert_array_almost_equal(z, self.zs)\n \n     def test_object(self):\n-        self._setup(Decimal)\n+        self._setup(object)\n         z = np.correlate(self.x, self.y, 'full')\n         assert_array_almost_equal(z, self.z1)\n         z = np.correlate(self.y, self.x, 'full')"
    },
    {
        "commit_id": "1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "commit_message": "DEP: Do not allow \"abstract\" dtype conversion/creation\n\nThese dtypes do not really make sense as instances. We can (somewhat)\nreasonably define np.dtype(np.int64) as the default (machine endianess)\nint64. (Arguably, it is unclear that `np.array(arr_of_>f8, dtype=\"f\")`\nshould return arr_of_<f8, but that would be very noisy!)\n\nHowever, `np.integer` as equivalent to long, is not well defined.\nSimilarly, `dtype=Decimal` may be neat to spell `dtype=object` when you\nintend to put Decimal objects into the array. But it is misleading,\nsince there is no special meaning to it at this time.\n\nThe biggest issue with it, is that `arr.astype(np.floating)` looks\nlike it will let float32 or float128 pass, but it will force a\nfloat64 output! Arguably downcasting is a bug in this case.\n\nA related issue is `np.dtype(\"S\")` and especially \"S0\". The dtype \"S\"\ndoes make sense for most or all places where `dtype=...` can be\npassed. However, it is conceptionally different from other dtypes, since\nit will not end up being attached to the array (unlike \"S2\" which\nwould be). The dtype \"S\" really means the type number/DType class\nof String, and not a specific dtype instance.",
        "commit_url": "https://github.com/numpy/numpy/commit/1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "buggy_code": "assert_(dat.astype(TestArray).info == 'jubba')",
        "fixed_code": "assert_(dat.astype(object).info == 'jubba')",
        "patch": "@@ -1152,7 +1152,7 @@ def __array_finalize__(self, obj):\n         assert_(dat.argmax(1).info == 'jubba')\n         assert_(dat.argmin(1).info == 'jubba')\n         assert_(dat.argsort(1).info == 'jubba')\n-        assert_(dat.astype(TestArray).info == 'jubba')\n+        assert_(dat.astype(object).info == 'jubba')\n         assert_(dat.byteswap().info == 'jubba')\n         assert_(dat.clip(2, 7).info == 'jubba')\n         assert_(dat.compress([0, 1, 1]).info == 'jubba')"
    },
    {
        "commit_id": "1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "commit_message": "DEP: Do not allow \"abstract\" dtype conversion/creation\n\nThese dtypes do not really make sense as instances. We can (somewhat)\nreasonably define np.dtype(np.int64) as the default (machine endianess)\nint64. (Arguably, it is unclear that `np.array(arr_of_>f8, dtype=\"f\")`\nshould return arr_of_<f8, but that would be very noisy!)\n\nHowever, `np.integer` as equivalent to long, is not well defined.\nSimilarly, `dtype=Decimal` may be neat to spell `dtype=object` when you\nintend to put Decimal objects into the array. But it is misleading,\nsince there is no special meaning to it at this time.\n\nThe biggest issue with it, is that `arr.astype(np.floating)` looks\nlike it will let float32 or float128 pass, but it will force a\nfloat64 output! Arguably downcasting is a bug in this case.\n\nA related issue is `np.dtype(\"S\")` and especially \"S0\". The dtype \"S\"\ndoes make sense for most or all places where `dtype=...` can be\npassed. However, it is conceptionally different from other dtypes, since\nit will not end up being attached to the array (unlike \"S2\" which\nwould be). The dtype \"S\" really means the type number/DType class\nof String, and not a specific dtype instance.",
        "commit_url": "https://github.com/numpy/numpy/commit/1a1611a33cfb5ea50d16d20affa5c6fa03e148d7",
        "buggy_code": "assert_(test.dtype['f2'] == np.integer)",
        "fixed_code": "assert_(test.dtype['f2'] == np.int_)",
        "patch": "@@ -2332,7 +2332,7 @@ def test_auto_dtype_largeint(self):\n \n         assert_(test.dtype['f0'] == float)\n         assert_(test.dtype['f1'] == np.int64)\n-        assert_(test.dtype['f2'] == np.integer)\n+        assert_(test.dtype['f2'] == np.int_)\n \n         assert_allclose(test['f0'], 73786976294838206464.)\n         assert_equal(test['f1'], 17179869184)"
    },
    {
        "commit_id": "2b118ec1e1c64385b0b6e0e3641df720c9c225e9",
        "commit_message": "Updated openblas_support.py\n\nfixed issue",
        "commit_url": "https://github.com/numpy/numpy/commit/2b118ec1e1c64385b0b6e0e3641df720c9c225e9",
        "buggy_code": "filename = f'{RACKSPACE}/openblas{fnsuffix}-{OPENBLAS_LONG}-{MAC_VERSION}'",
        "fixed_code": "filename = f'{RACKSPACE}/openblas{fnsuffix}-{OPENBLAS_LONG}-{suffix}'",
        "patch": "@@ -49,7 +49,7 @@ def download_openblas(target, arch, ilp64):\n         typ = 'tar.gz'\n     elif arch == 'darwin':\n         suffix = 'macosx_10_9_x86_64-gf_1becaaa.tar.gz'\n-        filename = f'{RACKSPACE}/openblas{fnsuffix}-{OPENBLAS_LONG}-{MAC_VERSION}'\n+        filename = f'{RACKSPACE}/openblas{fnsuffix}-{OPENBLAS_LONG}-{suffix}'\n         typ = 'tar.gz'\n     elif arch == 'windows':\n         if IS_32BIT:"
    },
    {
        "commit_id": "c61e667c90f7aa80c41fcfa3dd098832fbfe7139",
        "commit_message": "Merge pull request #15405 from WarrenWeckesser/undefa\n\nBUG/TEST: core: Fix an undefined name in a test.",
        "commit_url": "https://github.com/numpy/numpy/commit/c61e667c90f7aa80c41fcfa3dd098832fbfe7139",
        "buggy_code": "expected = np.minimum(np.maximum(a, amin), amax)",
        "fixed_code": "expected = np.minimum(np.maximum(arr, amin), amax)",
        "patch": "@@ -2015,7 +2015,7 @@ def test_clip_scalar_nan_propagation(self, arr, amin, amax):\n     def test_NaT_propagation(self, arr, amin, amax):\n         # NOTE: the expected function spec doesn't\n         # propagate NaT, but clip() now does\n-        expected = np.minimum(np.maximum(a, amin), amax)\n+        expected = np.minimum(np.maximum(arr, amin), amax)\n         actual = np.clip(arr, amin, amax)\n         assert_equal(actual, expected)\n "
    },
    {
        "commit_id": "c758839239626a2acc1884f58e9e3eb7c9177cb6",
        "commit_message": "BUG/TEST: core: Fix an undefined name in a test.\n\nThis hasn't generated an error because the test is marked `xfail`.\nCode checkers such as pyflakes will flag it, so fixing it is worthwhile.",
        "commit_url": "https://github.com/numpy/numpy/commit/c758839239626a2acc1884f58e9e3eb7c9177cb6",
        "buggy_code": "expected = np.minimum(np.maximum(a, amin), amax)",
        "fixed_code": "expected = np.minimum(np.maximum(arr, amin), amax)",
        "patch": "@@ -2015,7 +2015,7 @@ def test_clip_scalar_nan_propagation(self, arr, amin, amax):\n     def test_NaT_propagation(self, arr, amin, amax):\n         # NOTE: the expected function spec doesn't\n         # propagate NaT, but clip() now does\n-        expected = np.minimum(np.maximum(a, amin), amax)\n+        expected = np.minimum(np.maximum(arr, amin), amax)\n         actual = np.clip(arr, amin, amax)\n         assert_equal(actual, expected)\n "
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from setup_common import *",
        "fixed_code": "from setup_common import *  # noqa: F403",
        "patch": "@@ -14,7 +14,7 @@\n     uses_accelerate_framework, get_sgemv_fix\n     )\n from numpy.compat import npy_load_module\n-from setup_common import *\n+from setup_common import *  # noqa: F403\n \n # Set to True to enable relaxed strides checking. This (mostly) means\n # that `strides[dim]` is ignored if `shape[dim] == 1` when setting flags."
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from ctypes import *",
        "fixed_code": "from ctypes import c_float, c_int, cast, pointer, POINTER",
        "patch": "@@ -3,7 +3,7 @@\n from os import path\n import sys\n import pytest\n-from ctypes import *\n+from ctypes import c_float, c_int, cast, pointer, POINTER\n from numpy.testing import assert_array_max_ulp\n \n runtest = sys.platform.startswith('linux') and (platform.machine() == 'x86_64')"
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from distutils.core import *",
        "fixed_code": "from distutils.core import Distribution, setup",
        "patch": "@@ -1,5 +1,5 @@\n import sys\n-from distutils.core import *\n+from distutils.core import Distribution, setup\n \n if 'setuptools' in sys.modules:\n     have_setuptools = True"
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from distutils.log import *",
        "fixed_code": "from distutils.log import *  # noqa: F403",
        "patch": "@@ -1,6 +1,6 @@\n # Colored log\n import sys\n-from distutils.log import *\n+from distutils.log import *  # noqa: F403\n from distutils.log import Log as old_Log\n from distutils.log import _global_log\n "
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from numpy import *",
        "fixed_code": "from numpy import *  # noqa: F403",
        "patch": "@@ -1,7 +1,7 @@\n import numpy as np\n from numpy.matrixlib.defmatrix import matrix, asmatrix\n # need * as we're copying the numpy namespace (FIXME: this makes little sense)\n-from numpy import *\n+from numpy import *  # noqa: F403\n \n __version__ = np.__version__\n "
    },
    {
        "commit_id": "61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "commit_message": "Merge pull request #15366 from mwtoews/F403\n\nMAINT: resolve pyflake F403\t'from module import *' used",
        "commit_url": "https://github.com/numpy/numpy/commit/61c5c5d2c4ad91a1c5507162c822bfb1426ea405",
        "buggy_code": "from distutils.core import *",
        "fixed_code": "from distutils.core import Extension, setup",
        "patch": "@@ -1,6 +1,6 @@\n #! /usr/bin/env python\n # System imports\n-from distutils.core import *\n+from distutils.core import Extension, setup\n from distutils      import sysconfig\n \n # Third-party modules - we depend on numpy for everything"
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from setup_common import *",
        "fixed_code": "from setup_common import *  # noqa: F403",
        "patch": "@@ -14,7 +14,7 @@\n     uses_accelerate_framework, get_sgemv_fix\n     )\n from numpy.compat import npy_load_module\n-from setup_common import *\n+from setup_common import *  # noqa: F403\n \n # Set to True to enable relaxed strides checking. This (mostly) means\n # that `strides[dim]` is ignored if `shape[dim] == 1` when setting flags."
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from ctypes import *",
        "fixed_code": "from ctypes import c_float, c_int, cast, pointer, POINTER",
        "patch": "@@ -3,7 +3,7 @@\n from os import path\n import sys\n import pytest\n-from ctypes import *\n+from ctypes import c_float, c_int, cast, pointer, POINTER\n from numpy.testing import assert_array_max_ulp\n \n runtest = sys.platform.startswith('linux') and (platform.machine() == 'x86_64')"
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from distutils.core import *",
        "fixed_code": "from distutils.core import Distribution, setup",
        "patch": "@@ -1,5 +1,5 @@\n import sys\n-from distutils.core import *\n+from distutils.core import Distribution, setup\n \n if 'setuptools' in sys.modules:\n     have_setuptools = True"
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from distutils.log import *",
        "fixed_code": "from distutils.log import *  # noqa: F403",
        "patch": "@@ -1,6 +1,6 @@\n # Colored log, requires Python 2.3 or up.\n import sys\n-from distutils.log import *\n+from distutils.log import *  # noqa: F403\n from distutils.log import Log as old_Log\n from distutils.log import _global_log\n "
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from numpy import *",
        "fixed_code": "from numpy import *  # noqa: F403",
        "patch": "@@ -1,7 +1,7 @@\n import numpy as np\n from numpy.matrixlib.defmatrix import matrix, asmatrix\n # need * as we're copying the numpy namespace (FIXME: this makes little sense)\n-from numpy import *\n+from numpy import *  # noqa: F403\n \n __version__ = np.__version__\n "
    },
    {
        "commit_id": "f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "commit_message": "MAINT: resolve pyflake F403 'from module import *' used\n\n* For external modules, resolve imported members\n* Most internal relative modules were ignored or marked noqa: F403\n* Convert a few internal absolute imports to relative imports",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c5bd5ed1c241b189cea6cf5aef750526194708",
        "buggy_code": "from distutils.core import *",
        "fixed_code": "from distutils.core import Extension, setup",
        "patch": "@@ -1,6 +1,6 @@\n #! /usr/bin/env python\n # System imports\n-from distutils.core import *\n+from distutils.core import Extension, setup\n from distutils      import sysconfig\n \n # Third-party modules - we depend on numpy for everything"
    },
    {
        "commit_id": "287a9d0646c9cc40385615264348a637a7c57205",
        "commit_message": "NEP: issue deprecation warning when creating ragged array (NEP 34)\n\nThis implements NEP 34.",
        "commit_url": "https://github.com/numpy/numpy/commit/287a9d0646c9cc40385615264348a637a7c57205",
        "buggy_code": "return 'ctypes' in ctype_base.__module__",
        "fixed_code": "return '_ctypes' in ctype_base.__module__",
        "patch": "@@ -838,7 +838,7 @@ def npy_ctypes_check(cls):\n             # # (..., _ctypes._CData, object)\n             ctype_base = cls.__mro__[-2]\n         # right now, they're part of the _ctypes module\n-        return 'ctypes' in ctype_base.__module__\n+        return '_ctypes' in ctype_base.__module__\n     except Exception:\n         return False\n "
    },
    {
        "commit_id": "287a9d0646c9cc40385615264348a637a7c57205",
        "commit_message": "NEP: issue deprecation warning when creating ragged array (NEP 34)\n\nThis implements NEP 34.",
        "commit_url": "https://github.com/numpy/numpy/commit/287a9d0646c9cc40385615264348a637a7c57205",
        "buggy_code": "a = np.array([np.array([1, 2]), 3])",
        "fixed_code": "a = np.array([np.array([1, 2]), 3], dtype=object)",
        "patch": "@@ -1209,7 +1209,7 @@ def test_array_method(self):\n \n     def test_nonzero_invalid_object(self):\n         # gh-9295\n-        a = np.array([np.array([1, 2]), 3])\n+        a = np.array([np.array([1, 2]), 3], dtype=object)\n         assert_raises(ValueError, np.nonzero, a)\n \n         class BoolErrors:"
    },
    {
        "commit_id": "287a9d0646c9cc40385615264348a637a7c57205",
        "commit_message": "NEP: issue deprecation warning when creating ragged array (NEP 34)\n\nThis implements NEP 34.",
        "commit_url": "https://github.com/numpy/numpy/commit/287a9d0646c9cc40385615264348a637a7c57205",
        "buggy_code": "for i in range(800000)])",
        "fixed_code": "for i in range(800000)], dtype=object)",
        "patch": "@@ -575,7 +575,7 @@ def test_unicode_and_bytes_fmt(self, fmt, iotype):\n     def test_large_zip(self):\n         # The test takes at least 6GB of memory, writes a file larger than 4GB\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)\n-                               for i in range(800000)])\n+                               for i in range(800000)], dtype=object)\n         with tempdir() as tmpdir:\n             np.savez(os.path.join(tmpdir, 'test.npz'), test_data=test_data)\n "
    },
    {
        "commit_id": "287a9d0646c9cc40385615264348a637a7c57205",
        "commit_message": "NEP: issue deprecation warning when creating ragged array (NEP 34)\n\nThis implements NEP 34.",
        "commit_url": "https://github.com/numpy/numpy/commit/287a9d0646c9cc40385615264348a637a7c57205",
        "buggy_code": "mx = masked_array([mx1, mx2], mask=[False, True])",
        "fixed_code": "mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)",
        "patch": "@@ -934,7 +934,7 @@ def test_mvoid_multidim_print(self):\n     def test_object_with_array(self):\n         mx1 = masked_array([1.], mask=[True])\n         mx2 = masked_array([1., 2.])\n-        mx = masked_array([mx1, mx2], mask=[False, True])\n+        mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)\n         assert_(mx[0] is mx1)\n         assert_(mx[1] is not mx2)\n         assert_(np.all(mx[1].data == mx2.data))"
    },
    {
        "commit_id": "558080ef33de051c52bd1214c372380680cb6800",
        "commit_message": "Merge pull request #15324 from bwignall/typo\n\nDOC: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/558080ef33de051c52bd1214c372380680cb6800",
        "buggy_code": "\"\"\" Return a dictonary with items that are compatible",
        "fixed_code": "\"\"\" Return a dictionary with items that are compatible",
        "patch": "@@ -714,7 +714,7 @@ def calc_extra_info(self):\n         return info\n \n     def get_info(self, notfound_action=0):\n-        \"\"\" Return a dictonary with items that are compatible\n+        \"\"\" Return a dictionary with items that are compatible\n             with numpy.distutils.setup keyword arguments.\n         \"\"\"\n         flag = 0"
    },
    {
        "commit_id": "558080ef33de051c52bd1214c372380680cb6800",
        "commit_message": "Merge pull request #15324 from bwignall/typo\n\nDOC: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/558080ef33de051c52bd1214c372380680cb6800",
        "buggy_code": "is wrong (gh-8701), which now must be kept for backwards compatibiity.",
        "fixed_code": "is wrong (gh-8701), which now must be kept for backwards compatibility.",
        "patch": "@@ -99,7 +99,7 @@ def _deprecate_argsort_axis(arr):\n         The array which argsort was called on\n \n     np.ma.argsort has a long-term bug where the default of the axis argument\n-    is wrong (gh-8701), which now must be kept for backwards compatibiity.\n+    is wrong (gh-8701), which now must be kept for backwards compatibility.\n     Thankfully, this only makes a difference when arrays are 2- or more-\n     dimensional, so we only need a warning then.\n     \"\"\""
    },
    {
        "commit_id": "b485da191ec08597835292e45f3ee52f3b1e23e5",
        "commit_message": "DOC: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/b485da191ec08597835292e45f3ee52f3b1e23e5",
        "buggy_code": "\"\"\" Return a dictonary with items that are compatible",
        "fixed_code": "\"\"\" Return a dictionary with items that are compatible",
        "patch": "@@ -714,7 +714,7 @@ def calc_extra_info(self):\n         return info\n \n     def get_info(self, notfound_action=0):\n-        \"\"\" Return a dictonary with items that are compatible\n+        \"\"\" Return a dictionary with items that are compatible\n             with numpy.distutils.setup keyword arguments.\n         \"\"\"\n         flag = 0"
    },
    {
        "commit_id": "b485da191ec08597835292e45f3ee52f3b1e23e5",
        "commit_message": "DOC: fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/b485da191ec08597835292e45f3ee52f3b1e23e5",
        "buggy_code": "is wrong (gh-8701), which now must be kept for backwards compatibiity.",
        "fixed_code": "is wrong (gh-8701), which now must be kept for backwards compatibility.",
        "patch": "@@ -99,7 +99,7 @@ def _deprecate_argsort_axis(arr):\n         The array which argsort was called on\n \n     np.ma.argsort has a long-term bug where the default of the axis argument\n-    is wrong (gh-8701), which now must be kept for backwards compatibiity.\n+    is wrong (gh-8701), which now must be kept for backwards compatibility.\n     Thankfully, this only makes a difference when arrays are 2- or more-\n     dimensional, so we only need a warning then.\n     \"\"\""
    },
    {
        "commit_id": "aa422b7c391a28dc1d09ba9dbd8e2945b54a9537",
        "commit_message": "MAINT: Address attribute error in trim_zeros",
        "commit_url": "https://github.com/numpy/numpy/commit/aa422b7c391a28dc1d09ba9dbd8e2945b54a9537",
        "buggy_code": "if start.size == 1:",
        "fixed_code": "if len(start) == 1:",
        "patch": "@@ -1651,7 +1651,7 @@ def trim_zeros(filt, trim='fb', axis=-1):\n         if 'b' not in trim:\n             stop = (None,) * ndim\n \n-    if start.size == 1:\n+    if len(start) == 1:\n         # filt is 1D -> don't use multi-dimensional slicing to preserve\n         # non-array input types\n         sl = slice(start[0], stop[0])"
    },
    {
        "commit_id": "63ef78b1cb80ae52dae115afa2463510336e6759",
        "commit_message": "BUG: remove -std=c99 for c++ compilation (#15194)\n\nThis flag is only legal for C compilers",
        "commit_url": "https://github.com/numpy/numpy/commit/63ef78b1cb80ae52dae115afa2463510336e6759",
        "buggy_code": "if 'gcc' in self.compiler[0]:",
        "fixed_code": "if 'gcc' in self.compiler[0] and not need_cxx:",
        "patch": "@@ -532,7 +532,7 @@ def CCompiler_customize(self, dist, need_cxx=0):\n                                       'g++' in self.compiler[0] or\n                                       'clang' in self.compiler[0]):\n         self._auto_depends = True\n-        if 'gcc' in self.compiler[0]:\n+        if 'gcc' in self.compiler[0] and not need_cxx:\n             # add std=c99 flag for gcc\n             # TODO: does this need to be more specific?\n             self.compiler.append('-std=c99')"
    },
    {
        "commit_id": "316fef7cc4933fbb01e46e5e15b875b0b879a06b",
        "commit_message": "REL: Update master after NumPy 1.18.0 release.\n\n- Update .mailmap.\n- Update release notes.\n- Create changelog\n- Remove duplicate release note entry.\n- Fix release note path in pavement.\n\n[skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/316fef7cc4933fbb01e46e5e15b875b0b879a06b",
        "buggy_code": "RELEASE_NOTES = 'doc/release/1.18.0-notes.rst'",
        "fixed_code": "RELEASE_NOTES = 'doc/source/release/1.18.0-notes.rst'",
        "patch": "@@ -41,7 +41,7 @@\n #-----------------------------------\n \n # Path to the release notes\n-RELEASE_NOTES = 'doc/release/1.18.0-notes.rst'\n+RELEASE_NOTES = 'doc/source/release/1.18.0-notes.rst'\n \n \n #-------------------------------------------------------"
    },
    {
        "commit_id": "a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "commit_message": "Merge pull request #15129 from bwignall/typo_leven\n\nDOC: Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "buggy_code": "All warnings except those explicily filtered out are raised as error.",
        "fixed_code": "All warnings except those explicitly filtered out are raised as error.",
        "patch": "@@ -15,7 +15,7 @@\n whether or not that file is found as follows:\n \n * ``pytest.ini`` is present (develop mode)\n-    All warnings except those explicily filtered out are raised as error.\n+    All warnings except those explicitly filtered out are raised as error.\n * ``pytest.ini`` is absent (release mode)\n     DeprecationWarnings and PendingDeprecationWarnings are ignored, other\n     warnings are passed through."
    },
    {
        "commit_id": "a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "commit_message": "Merge pull request #15129 from bwignall/typo_leven\n\nDOC: Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "buggy_code": "While this file was originally intented for Python 2 -> 3 transition,",
        "fixed_code": "While this file was originally intended for Python 2 -> 3 transition,",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n Python 3.X compatibility tools.\n \n-While this file was originally intented for Python 2 -> 3 transition,\n+While this file was originally intended for Python 2 -> 3 transition,\n it is now used to create a compatibility layer between different\n minor versions of Python 3.\n "
    },
    {
        "commit_id": "a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "commit_message": "Merge pull request #15129 from bwignall/typo_leven\n\nDOC: Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "buggy_code": "way through the interaces ``__array_ufunc__`` and ``__array_function__``. Let's",
        "fixed_code": "way through the interfaces ``__array_ufunc__`` and ``__array_function__``. Let's",
        "patch": "@@ -58,7 +58,7 @@\n \n How can we pass our custom array type through this function? Numpy allows a\n class to indicate that it would like to handle computations in a custom-defined\n-way through the interaces ``__array_ufunc__`` and ``__array_function__``. Let's\n+way through the interfaces ``__array_ufunc__`` and ``__array_function__``. Let's\n take one at a time, starting with ``_array_ufunc__``. This method covers\n :ref:`ufuncs`, a class of functions that includes, for example,\n :func:`numpy.multiply` and :func:`numpy.sin`."
    },
    {
        "commit_id": "a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "commit_message": "Merge pull request #15129 from bwignall/typo_leven\n\nDOC: Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "buggy_code": "\"\"\"Return the type of a line of Fortan code.\"\"\"",
        "fixed_code": "\"\"\"Return the type of a line of Fortran code.\"\"\"",
        "patch": "@@ -14,7 +14,7 @@ def isContinuation(line):\n \n COMMENT, STATEMENT, CONTINUATION = 0, 1, 2\n def lineType(line):\n-    \"\"\"Return the type of a line of Fortan code.\"\"\"\n+    \"\"\"Return the type of a line of Fortran code.\"\"\"\n     if isBlank(line):\n         return COMMENT\n     elif isLabel(line):"
    },
    {
        "commit_id": "a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "commit_message": "Merge pull request #15129 from bwignall/typo_leven\n\nDOC: Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/a9bb517554004cf2ce7a4be93bcbfb63ee149844",
        "buggy_code": "it's done during test disocvery where the test runner should be the",
        "fixed_code": "it's done during test discovery where the test runner should be the",
        "patch": "@@ -271,7 +271,7 @@ def set_test_runner(name):\n def detect_runner():\n     \"\"\" Guess which test runner we're using by traversing the stack and looking\n         for the first matching module. This *should* be reasonably safe, as\n-        it's done during test disocvery where the test runner should be the\n+        it's done during test discovery where the test runner should be the\n         stack frame immediately outside. \"\"\"\n     if _test_runner_override is not None:\n         return _test_runner_override"
    },
    {
        "commit_id": "0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "commit_message": "Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "buggy_code": "All warnings except those explicily filtered out are raised as error.",
        "fixed_code": "All warnings except those explicitly filtered out are raised as error.",
        "patch": "@@ -15,7 +15,7 @@\n whether or not that file is found as follows:\n \n * ``pytest.ini`` is present (develop mode)\n-    All warnings except those explicily filtered out are raised as error.\n+    All warnings except those explicitly filtered out are raised as error.\n * ``pytest.ini`` is absent (release mode)\n     DeprecationWarnings and PendingDeprecationWarnings are ignored, other\n     warnings are passed through."
    },
    {
        "commit_id": "0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "commit_message": "Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "buggy_code": "While this file was originally intented for Python 2 -> 3 transition,",
        "fixed_code": "While this file was originally intended for Python 2 -> 3 transition,",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n Python 3.X compatibility tools.\n \n-While this file was originally intented for Python 2 -> 3 transition,\n+While this file was originally intended for Python 2 -> 3 transition,\n it is now used to create a compatibility layer between different\n minor versions of Python 3.\n "
    },
    {
        "commit_id": "0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "commit_message": "Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "buggy_code": "way through the interaces ``__array_ufunc__`` and ``__array_function__``. Let's",
        "fixed_code": "way through the interfaces ``__array_ufunc__`` and ``__array_function__``. Let's",
        "patch": "@@ -58,7 +58,7 @@\n \n How can we pass our custom array type through this function? Numpy allows a\n class to indicate that it would like to handle computations in a custom-defined\n-way through the interaces ``__array_ufunc__`` and ``__array_function__``. Let's\n+way through the interfaces ``__array_ufunc__`` and ``__array_function__``. Let's\n take one at a time, starting with ``_array_ufunc__``. This method covers\n :ref:`ufuncs`, a class of functions that includes, for example,\n :func:`numpy.multiply` and :func:`numpy.sin`."
    },
    {
        "commit_id": "0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "commit_message": "Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "buggy_code": "\"\"\"Return the type of a line of Fortan code.\"\"\"",
        "fixed_code": "\"\"\"Return the type of a line of Fortran code.\"\"\"",
        "patch": "@@ -14,7 +14,7 @@ def isContinuation(line):\n \n COMMENT, STATEMENT, CONTINUATION = 0, 1, 2\n def lineType(line):\n-    \"\"\"Return the type of a line of Fortan code.\"\"\"\n+    \"\"\"Return the type of a line of Fortran code.\"\"\"\n     if isBlank(line):\n         return COMMENT\n     elif isLabel(line):"
    },
    {
        "commit_id": "0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "commit_message": "Fix typos, via a Levenshtein-style corrector",
        "commit_url": "https://github.com/numpy/numpy/commit/0c2a5eb42c0cddf6844880f1494ddf7765bf9c7b",
        "buggy_code": "it's done during test disocvery where the test runner should be the",
        "fixed_code": "it's done during test discovery where the test runner should be the",
        "patch": "@@ -271,7 +271,7 @@ def set_test_runner(name):\n def detect_runner():\n     \"\"\" Guess which test runner we're using by traversing the stack and looking\n         for the first matching module. This *should* be reasonably safe, as\n-        it's done during test disocvery where the test runner should be the\n+        it's done during test discovery where the test runner should be the\n         stack frame immediately outside. \"\"\"\n     if _test_runner_override is not None:\n         return _test_runner_override"
    },
    {
        "commit_id": "6d69a9e163858de5d0ea2ae810b8febc7eec1dbc",
        "commit_message": "MAINT: Fix randint 0d limits and other 0d cleanups (#15126)\n\n* MAINT: only treat 0d case separately in randint, simplify some tests",
        "commit_url": "https://github.com/numpy/numpy/commit/6d69a9e163858de5d0ea2ae810b8febc7eec1dbc",
        "buggy_code": "MachAr(lambda v:array([v], hiprec))",
        "fixed_code": "MachAr(lambda v: array(v, hiprec))",
        "patch": "@@ -16,7 +16,7 @@ def _run_machar_highprec(self):\n         # underflow\n         try:\n             hiprec = ntypes.float96\n-            MachAr(lambda v:array([v], hiprec))\n+            MachAr(lambda v: array(v, hiprec))\n         except AttributeError:\n             # Fixme, this needs to raise a 'skip' exception.\n             \"Skipping test: no ntypes.float96 available on this platform.\""
    },
    {
        "commit_id": "6d69a9e163858de5d0ea2ae810b8febc7eec1dbc",
        "commit_message": "MAINT: Fix randint 0d limits and other 0d cleanups (#15126)\n\n* MAINT: only treat 0d case separately in randint, simplify some tests",
        "commit_url": "https://github.com/numpy/numpy/commit/6d69a9e163858de5d0ea2ae810b8febc7eec1dbc",
        "buggy_code": "assert_equal(int_func(np.array([0])), 0)",
        "fixed_code": "assert_equal(int_func(np.array(0)), 0)",
        "patch": "@@ -7564,8 +7564,8 @@ def test_to_int_scalar(self):\n         # gh-9972 means that these aren't always the same\n         int_funcs = (int, lambda x: x.__int__())\n         for int_func in int_funcs:\n+            assert_equal(int_func(np.array(0)), 0)\n             assert_equal(int_func(np.array([1])), 1)\n-            assert_equal(int_func(np.array([0])), 0)\n             assert_equal(int_func(np.array([[42]])), 42)\n             assert_raises(TypeError, int_func, np.array([1, 2]))\n "
    },
    {
        "commit_id": "ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "commit_message": "Merge pull request #15066 from numpy/revert-14794-nep-0034-impl\n\nRevert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "buggy_code": "a = np.array([np.array([1, 2]), 3], dtype=object)",
        "fixed_code": "a = np.array([np.array([1, 2]), 3])",
        "patch": "@@ -1211,7 +1211,7 @@ def test_array_method(self):\n \n     def test_nonzero_invalid_object(self):\n         # gh-9295\n-        a = np.array([np.array([1, 2]), 3], dtype=object)\n+        a = np.array([np.array([1, 2]), 3])\n         assert_raises(ValueError, np.nonzero, a)\n \n         class BoolErrors:"
    },
    {
        "commit_id": "ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "commit_message": "Merge pull request #15066 from numpy/revert-14794-nep-0034-impl\n\nRevert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "buggy_code": "for i in range(800000)], dtype=object)",
        "fixed_code": "for i in range(800000)])",
        "patch": "@@ -580,7 +580,7 @@ def test_unicode_and_bytes_fmt(self, fmt, iotype):\n     def test_large_zip(self):\n         # The test takes at least 6GB of memory, writes a file larger than 4GB\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)\n-                               for i in range(800000)], dtype=object)\n+                               for i in range(800000)])\n         with tempdir() as tmpdir:\n             np.savez(os.path.join(tmpdir, 'test.npz'), test_data=test_data)\n "
    },
    {
        "commit_id": "ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "commit_message": "Merge pull request #15066 from numpy/revert-14794-nep-0034-impl\n\nRevert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/ab89b1ab87f2c3d4b7dd2502d5920e35e37c616d",
        "buggy_code": "mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)",
        "fixed_code": "mx = masked_array([mx1, mx2], mask=[False, True])",
        "patch": "@@ -936,7 +936,7 @@ def test_mvoid_multidim_print(self):\n     def test_object_with_array(self):\n         mx1 = masked_array([1.], mask=[True])\n         mx2 = masked_array([1., 2.])\n-        mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)\n+        mx = masked_array([mx1, mx2], mask=[False, True])\n         assert_(mx[0] is mx1)\n         assert_(mx[1] is not mx2)\n         assert_(np.all(mx[1].data == mx2.data))"
    },
    {
        "commit_id": "f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "commit_message": "Revert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "buggy_code": "a = np.array([np.array([1, 2]), 3], dtype=object)",
        "fixed_code": "a = np.array([np.array([1, 2]), 3])",
        "patch": "@@ -1211,7 +1211,7 @@ def test_array_method(self):\n \n     def test_nonzero_invalid_object(self):\n         # gh-9295\n-        a = np.array([np.array([1, 2]), 3], dtype=object)\n+        a = np.array([np.array([1, 2]), 3])\n         assert_raises(ValueError, np.nonzero, a)\n \n         class BoolErrors:"
    },
    {
        "commit_id": "f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "commit_message": "Revert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "buggy_code": "for i in range(800000)], dtype=object)",
        "fixed_code": "for i in range(800000)])",
        "patch": "@@ -580,7 +580,7 @@ def test_unicode_and_bytes_fmt(self, fmt, iotype):\n     def test_large_zip(self):\n         # The test takes at least 6GB of memory, writes a file larger than 4GB\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)\n-                               for i in range(800000)], dtype=object)\n+                               for i in range(800000)])\n         with tempdir() as tmpdir:\n             np.savez(os.path.join(tmpdir, 'test.npz'), test_data=test_data)\n "
    },
    {
        "commit_id": "f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "commit_message": "Revert \"DEP: issue deprecation warning when creating ragged array (NEP 34)\"",
        "commit_url": "https://github.com/numpy/numpy/commit/f6a7a440669c6f386a1b15e081c6db740bb87a88",
        "buggy_code": "mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)",
        "fixed_code": "mx = masked_array([mx1, mx2], mask=[False, True])",
        "patch": "@@ -936,7 +936,7 @@ def test_mvoid_multidim_print(self):\n     def test_object_with_array(self):\n         mx1 = masked_array([1.], mask=[True])\n         mx2 = masked_array([1., 2.])\n-        mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)\n+        mx = masked_array([mx1, mx2], mask=[False, True])\n         assert_(mx[0] is mx1)\n         assert_(mx[1] is not mx2)\n         assert_(np.all(mx[1].data == mx2.data))"
    },
    {
        "commit_id": "0aeab48b9e914d1dc7041b7e3f3b7e575ffcbbed",
        "commit_message": "DOC: Fix statement about norms (#15050)\n\nThe \"0.5-norm\" violates the triangle inequality because its unit ball is nonconvex.",
        "commit_url": "https://github.com/numpy/numpy/commit/0aeab48b9e914d1dc7041b7e3f3b7e575ffcbbed",
        "buggy_code": "For values of ``ord <= 0``, the result is, strictly speaking, not a",
        "fixed_code": "For values of ``ord < 1``, the result is, strictly speaking, not a",
        "patch": "@@ -2355,7 +2355,7 @@ def norm(x, ord=None, axis=None, keepdims=False):\n \n     Notes\n     -----\n-    For values of ``ord <= 0``, the result is, strictly speaking, not a\n+    For values of ``ord < 1``, the result is, strictly speaking, not a\n     mathematical 'norm', but it may still be useful for various numerical\n     purposes.\n "
    },
    {
        "commit_id": "d3f6a7eddc68c9160db695106d196cebbc8d9fd4",
        "commit_message": "TST: fix up issues in requires_memory decorator\n\nFix wrong multiplier for /proc/meminfo, and do style cleanups.",
        "commit_url": "https://github.com/numpy/numpy/commit/d3f6a7eddc68c9160db695106d196cebbc8d9fd4",
        "buggy_code": "@requires_memory(7e9)",
        "fixed_code": "@requires_memory(free_bytes=7e9)",
        "patch": "@@ -576,7 +576,7 @@ def test_unicode_and_bytes_fmt(self, fmt, iotype):\n     @pytest.mark.skipif(sys.platform=='win32',\n                         reason=\"large files cause problems\")\n     @pytest.mark.slow\n-    @requires_memory(7e9)\n+    @requires_memory(free_bytes=7e9)\n     def test_large_zip(self):\n         # The test takes at least 6GB of memory, writes a file larger than 4GB\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)"
    },
    {
        "commit_id": "d3f6a7eddc68c9160db695106d196cebbc8d9fd4",
        "commit_message": "TST: fix up issues in requires_memory decorator\n\nFix wrong multiplier for /proc/meminfo, and do style cleanups.",
        "commit_url": "https://github.com/numpy/numpy/commit/d3f6a7eddc68c9160db695106d196cebbc8d9fd4",
        "buggy_code": "@requires_memory(16e9)",
        "fixed_code": "@requires_memory(free_bytes=16e9)",
        "patch": "@@ -2008,7 +2008,7 @@ def test_unsupported_commontype():\n @pytest.mark.slow\n @pytest.mark.xfail(not HAS_LAPACK64, run=False,\n                    reason=\"Numpy not compiled with 64-bit BLAS/LAPACK\")\n-@requires_memory(16e9)\n+@requires_memory(free_bytes=16e9)\n def test_blas64_dot():\n     n = 2**32\n     a = np.zeros([1, n], dtype=np.float32)"
    },
    {
        "commit_id": "3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "commit_message": "Merge pull request #14794 from mattip/nep-0034-impl\n\nDEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "buggy_code": "a = np.array([np.array([1, 2]), 3])",
        "fixed_code": "a = np.array([np.array([1, 2]), 3], dtype=object)",
        "patch": "@@ -1211,7 +1211,7 @@ def test_array_method(self):\n \n     def test_nonzero_invalid_object(self):\n         # gh-9295\n-        a = np.array([np.array([1, 2]), 3])\n+        a = np.array([np.array([1, 2]), 3], dtype=object)\n         assert_raises(ValueError, np.nonzero, a)\n \n         class BoolErrors:"
    },
    {
        "commit_id": "3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "commit_message": "Merge pull request #14794 from mattip/nep-0034-impl\n\nDEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "buggy_code": "for i in range(800000)])",
        "fixed_code": "for i in range(800000)], dtype=object)",
        "patch": "@@ -580,7 +580,7 @@ def test_unicode_and_bytes_fmt(self, fmt, iotype):\n     def test_large_zip(self):\n         # The test takes at least 6GB of memory, writes a file larger than 4GB\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)\n-                               for i in range(800000)])\n+                               for i in range(800000)], dtype=object)\n         with tempdir() as tmpdir:\n             np.savez(os.path.join(tmpdir, 'test.npz'), test_data=test_data)\n "
    },
    {
        "commit_id": "3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "commit_message": "Merge pull request #14794 from mattip/nep-0034-impl\n\nDEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/3a9a63f81aa37b48bc3eb4efdc2e695210805aa5",
        "buggy_code": "mx = masked_array([mx1, mx2], mask=[False, True])",
        "fixed_code": "mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)",
        "patch": "@@ -936,7 +936,7 @@ def test_mvoid_multidim_print(self):\n     def test_object_with_array(self):\n         mx1 = masked_array([1.], mask=[True])\n         mx2 = masked_array([1., 2.])\n-        mx = masked_array([mx1, mx2], mask=[False, True])\n+        mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)\n         assert_(mx[0] is mx1)\n         assert_(mx[1] is not mx2)\n         assert_(np.all(mx[1].data == mx2.data))"
    },
    {
        "commit_id": "905dd9a34707cf4bd4b5533b12a68e027751ab92",
        "commit_message": "DOC: Fix typo in numpy.loadtxt documentation\n\nParameter fname: generator must return byte strings for Python 3, not Python3k.",
        "commit_url": "https://github.com/numpy/numpy/commit/905dd9a34707cf4bd4b5533b12a68e027751ab92",
        "buggy_code": "generators should return byte strings for Python 3k.",
        "fixed_code": "generators should return byte strings for Python 3.",
        "patch": "@@ -833,7 +833,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n     fname : file, str, or pathlib.Path\n         File, filename, or generator to read.  If the filename extension is\n         ``.gz`` or ``.bz2``, the file is first decompressed. Note that\n-        generators should return byte strings for Python 3k.\n+        generators should return byte strings for Python 3.\n     dtype : data-type, optional\n         Data-type of the resulting array; default: float.  If this is a\n         structured data-type, the resulting array will be 1-dimensional, and"
    },
    {
        "commit_id": "78b143c4ddd5965bbb79cc9d47355d13ef9401ff",
        "commit_message": "Merge pull request #14982 from bwignall/typo\n\nMAINT: Fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/78b143c4ddd5965bbb79cc9d47355d13ef9401ff",
        "buggy_code": "to existing slice tuple without creating a new tuple everytime.",
        "fixed_code": "to existing slice tuple without creating a new tuple every time.",
        "patch": "@@ -575,7 +575,7 @@ def _concatenate_shapes(shapes, axis):\n         that was computed deeper in the recursion.\n \n         These are returned as tuples to ensure that they can quickly be added\n-        to existing slice tuple without creating a new tuple everytime.\n+        to existing slice tuple without creating a new tuple every time.\n \n     \"\"\"\n     # Cache a result that will be reused."
    },
    {
        "commit_id": "3f31943b9aa5a0a8bc5f203d2e248c6249da21cf",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/numpy/numpy/commit/3f31943b9aa5a0a8bc5f203d2e248c6249da21cf",
        "buggy_code": "to existing slice tuple without creating a new tuple everytime.",
        "fixed_code": "to existing slice tuple without creating a new tuple every time.",
        "patch": "@@ -575,7 +575,7 @@ def _concatenate_shapes(shapes, axis):\n         that was computed deeper in the recursion.\n \n         These are returned as tuples to ensure that they can quickly be added\n-        to existing slice tuple without creating a new tuple everytime.\n+        to existing slice tuple without creating a new tuple every time.\n \n     \"\"\"\n     # Cache a result that will be reused."
    },
    {
        "commit_id": "035ef5ac3ca52b9f14ea3effe739c6aaca9411bc",
        "commit_message": "BUG: Fix np.__dir__ to correctly handle new properties\n\nPreviously this would fail, but only on python 3.7+\n```\nnp.new_member = 1\nassert 'new_member' in dir(np)\n```\n\nWhile this isn't something we support anyway, it certainly wasn't intentional.",
        "commit_url": "https://github.com/numpy/numpy/commit/035ef5ac3ca52b9f14ea3effe739c6aaca9411bc",
        "buggy_code": "return __all__ + ['Tester', 'testing']",
        "fixed_code": "return list(globals().keys()) + ['Tester', 'testing']",
        "patch": "@@ -216,7 +216,7 @@ def __getattr__(attr):\n                                      \"{!r}\".format(__name__, attr))\n \n         def __dir__():\n-            return __all__ + ['Tester', 'testing']\n+            return list(globals().keys()) + ['Tester', 'testing']\n \n     else:\n         # We don't actually use this ourselves anymore, but I'm not 100% sure that"
    },
    {
        "commit_id": "7bc36c2c39b4412ba8aa01ff1197c999920cad1f",
        "commit_message": "TST: fix failing test",
        "commit_url": "https://github.com/numpy/numpy/commit/7bc36c2c39b4412ba8aa01ff1197c999920cad1f",
        "buggy_code": "for i in range(800000)])",
        "fixed_code": "for i in range(800000)], dtype=object)",
        "patch": "@@ -583,7 +583,7 @@ def test_large_zip(self):\n         except (MemoryError, OverflowError):\n             pytest.skip(\"Cannot allocate enough memory for test\")\n         test_data = np.asarray([np.random.rand(np.random.randint(50,100),4)\n-                               for i in range(800000)])\n+                               for i in range(800000)], dtype=object)\n         with tempdir() as tmpdir:\n             np.savez(os.path.join(tmpdir, 'test.npz'), test_data=test_data)\n "
    },
    {
        "commit_id": "61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "commit_message": "DEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "buggy_code": "a = np.array([np.array([1, 2]), 3])",
        "fixed_code": "a = np.array([np.array([1, 2]), 3], dtype=object)",
        "patch": "@@ -1211,7 +1211,7 @@ def test_array_method(self):\n \n     def test_nonzero_invalid_object(self):\n         # gh-9295\n-        a = np.array([np.array([1, 2]), 3])\n+        a = np.array([np.array([1, 2]), 3], dtype=object)\n         assert_raises(ValueError, np.nonzero, a)\n \n         class BoolErrors:"
    },
    {
        "commit_id": "61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "commit_message": "DEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "buggy_code": "mx = masked_array([mx1, mx2], mask=[False, True])",
        "fixed_code": "mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)",
        "patch": "@@ -936,7 +936,7 @@ def test_mvoid_multidim_print(self):\n     def test_object_with_array(self):\n         mx1 = masked_array([1.], mask=[True])\n         mx2 = masked_array([1., 2.])\n-        mx = masked_array([mx1, mx2], mask=[False, True])\n+        mx = masked_array([mx1, mx2], mask=[False, True], dtype=object)\n         assert_(mx[0] is mx1)\n         assert_(mx[1] is not mx2)\n         assert_(np.all(mx[1].data == mx2.data))"
    },
    {
        "commit_id": "61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "commit_message": "DEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "buggy_code": "a = np.array([np.arange(1), np.arange(4)])",
        "fixed_code": "a = np.array([np.arange(1), np.arange(4)], dtype=object)",
        "patch": "@@ -128,7 +128,7 @@ def test_shuffle_of_array_of_objects(self):\n         # a segfault on garbage collection.\n         # See gh-7719\n         random.seed(1234)\n-        a = np.array([np.arange(1), np.arange(4)])\n+        a = np.array([np.arange(1), np.arange(4)], dtype=object)\n \n         for _ in range(1000):\n             random.shuffle(a)"
    },
    {
        "commit_id": "61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "commit_message": "DEP: issue deprecation warning when creating ragged array (NEP 34)",
        "commit_url": "https://github.com/numpy/numpy/commit/61bd4c2ed7d6abc1e489e0fba66ded4a7f3e2d42",
        "buggy_code": "a = np.array([np.arange(1), np.arange(4)])",
        "fixed_code": "a = np.array([np.arange(1), np.arange(4)], dtype=object)",
        "patch": "@@ -126,7 +126,7 @@ def test_shuffle_of_array_of_objects(self):\n         # a segfault on garbage collection.\n         # See gh-7719\n         np.random.seed(1234)\n-        a = np.array([np.arange(1), np.arange(4)])\n+        a = np.array([np.arange(1), np.arange(4)], dtype=object)\n \n         for _ in range(1000):\n             np.random.shuffle(a)"
    },
    {
        "commit_id": "396af7def65e75b6ef8a4e82f8aa8a357a9230f4",
        "commit_message": "BUILD: emit more helpful error messages when compiler is broken",
        "commit_url": "https://github.com/numpy/numpy/commit/396af7def65e75b6ef8a4e82f8aa8a357a9230f4",
        "buggy_code": "if atlas_version == '3.2.1_pre3.3.6':",
        "fixed_code": "elif atlas_version == '3.2.1_pre3.3.6':",
        "patch": "@@ -1580,7 +1580,7 @@ def get_atlas_version(**config):\n             log.info('Status: %d', s)\n             log.info('Output: %s', o)\n \n-    if atlas_version == '3.2.1_pre3.3.6':\n+    elif atlas_version == '3.2.1_pre3.3.6':\n         dict_append(info, define_macros=[('NO_ATLAS_INFO', -2)])\n     else:\n         dict_append(info, define_macros=[("
    },
    {
        "commit_id": "dc20ec8c857bc1f1b717b56f3a5c64dbf31f16ac",
        "commit_message": "Merge pull request #14714 from eric-wieser/datetime-arange-fix\n\nDefault start to 0 for timedelta arange",
        "commit_url": "https://github.com/numpy/numpy/commit/dc20ec8c857bc1f1b717b56f3a5c64dbf31f16ac",
        "buggy_code": "assert_raises(ValueError, np.arange, d)",
        "fixed_code": "assert_equal(np.arange(d), np.arange(0, d))",
        "patch": "@@ -1831,7 +1831,7 @@ def test_timedelta_modulus_type_resolution(self, val1, val2):\n     def test_timedelta_arange_no_dtype(self):\n         d = np.array(5, dtype=\"m8[D]\")\n         assert_equal(np.arange(d, d + 1), d)\n-        assert_raises(ValueError, np.arange, d)\n+        assert_equal(np.arange(d), np.arange(0, d))\n \n     def test_datetime_maximum_reduce(self):\n         a = np.array(['2010-01-02', '1999-03-14', '1833-03'], dtype='M8[D]')"
    },
    {
        "commit_id": "c75756a85be29fc7889c003deb28a4250b8d4487",
        "commit_message": "BUG: Default start to 0 for timedelta arange\n\nBefore this change, it would confusingly default to NaT, which was not useful.\n\nFixes gh-14713",
        "commit_url": "https://github.com/numpy/numpy/commit/c75756a85be29fc7889c003deb28a4250b8d4487",
        "buggy_code": "assert_raises(ValueError, np.arange, d)",
        "fixed_code": "assert_equal(np.arange(d), np.arange(0, d))",
        "patch": "@@ -1831,7 +1831,7 @@ def test_timedelta_modulus_type_resolution(self, val1, val2):\n     def test_timedelta_arange_no_dtype(self):\n         d = np.array(5, dtype=\"m8[D]\")\n         assert_equal(np.arange(d, d + 1), d)\n-        assert_raises(ValueError, np.arange, d)\n+        assert_equal(np.arange(d), np.arange(0, d))\n \n     def test_datetime_maximum_reduce(self):\n         a = np.array(['2010-01-02', '1999-03-14', '1833-03'], dtype='M8[D]')"
    },
    {
        "commit_id": "d874804aeaf31049d258bb8f2943ad8ca7e68f0f",
        "commit_message": "BUG: fixing multiple CI failures\n\n(1) Workaround for bug in clang6: added missing GCC attribute to the\nprototype of ISA_sqrt_TYPE function which otherwise leads to a weird\nbuild failure in clang6 (gcc and clang7.0 doesnt have this issue)\n\n(2) Changed np.float128 to np.longdouble in tests: NumPy in windows\ndoesn't support the np.float128 dtype\n\n(3) GCC 4.8/5.0 doesn't support _mm512_abs_ps/pd intrinsic",
        "commit_url": "https://github.com/numpy/numpy/commit/d874804aeaf31049d258bb8f2943ad8ca7e68f0f",
        "buggy_code": "x_f128 = np.float128(x_f32)",
        "fixed_code": "x_f128 = np.longdouble(x_f32)",
        "patch": "@@ -761,7 +761,7 @@ def test_avx_based_ufunc(self):\n                 x_f32 = np.float32(np.random.uniform(low=minval, high=maxval,\n                     size=size))\n                 x_f64 = np.float64(x_f32)\n-                x_f128 = np.float128(x_f32)\n+                x_f128 = np.longdouble(x_f32)\n                 y_true128 = myfunc(x_f128)\n                 if maxulperr == 0:\n                     assert_equal(myfunc(x_f32), np.float32(y_true128))"
    },
    {
        "commit_id": "c8fdb4491b527fed144f7a88f3248a809f8ede4d",
        "commit_message": "Merge pull request #14568 from mattip/hide-config-probe2\n\nBLD, DOC: fix gh-14518, add release note",
        "commit_url": "https://github.com/numpy/numpy/commit/c8fdb4491b527fed144f7a88f3248a809f8ede4d",
        "buggy_code": "self.verbose = False",
        "fixed_code": "self.verbose = None",
        "patch": "@@ -79,7 +79,7 @@ def initialize_options(self):\n         self.swig_opts = None\n         self.swig_cpp = None\n         self.swig = None\n-        self.verbose = False\n+        self.verbose = None\n \n     def finalize_options(self):\n         self.set_undefined_options('build',"
    },
    {
        "commit_id": "aa0f7f7a11ac1b5c9c5da2d1ce1798f258af6439",
        "commit_message": "BUILD, DOC: fix 14518, add release note",
        "commit_url": "https://github.com/numpy/numpy/commit/aa0f7f7a11ac1b5c9c5da2d1ce1798f258af6439",
        "buggy_code": "self.verbose = False",
        "fixed_code": "self.verbose = None",
        "patch": "@@ -79,7 +79,7 @@ def initialize_options(self):\n         self.swig_opts = None\n         self.swig_cpp = None\n         self.swig = None\n-        self.verbose = False\n+        self.verbose = None\n \n     def finalize_options(self):\n         self.set_undefined_options('build',"
    },
    {
        "commit_id": "f5487746586045d1be89e1205108fe0f1808def0",
        "commit_message": "BUILD: fix runtests.py option, fix previous changeset",
        "commit_url": "https://github.com/numpy/numpy/commit/f5487746586045d1be89e1205108fe0f1808def0",
        "buggy_code": "log.info('File:', target)",
        "fixed_code": "log.info('File: %s' % target)",
        "patch": "@@ -497,7 +497,7 @@ def generate_config_h(ext, build_dir):\n                     #endif\n                     \"\"\"))\n \n-            log.info('File:', target)\n+            log.info('File: %s' % target)\n             with open(target) as target_f:\n                 log.info(target_f.read())\n             log.info('EOF')"
    },
    {
        "commit_id": "5e74e9d5996419dd10c30e5d397f2a0dcf2ca0a9",
        "commit_message": "Merge pull request #14511 from eric-wieser/fix-flatten_dtype\n\nBUG: Fix flatten_dtype so that nested 0-field structs are flattened correctly",
        "commit_url": "https://github.com/numpy/numpy/commit/5e74e9d5996419dd10c30e5d397f2a0dcf2ca0a9",
        "buggy_code": "if typ.names:",
        "fixed_code": "if typ.names is not None:",
        "patch": "@@ -200,7 +200,7 @@ def flatten_descr(ndtype):\n         descr = []\n         for field in names:\n             (typ, _) = ndtype.fields[field]\n-            if typ.names:\n+            if typ.names is not None:\n                 descr.extend(flatten_descr(typ))\n             else:\n                 descr.append((field, typ))"
    },
    {
        "commit_id": "003bdc25b75566de64a90e223338b4bd4565155a",
        "commit_message": "BUG: Fix flatten_dtype so that nested 0-field structs are flattened correctly\n\nThis affects the behavior of merge_arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/003bdc25b75566de64a90e223338b4bd4565155a",
        "buggy_code": "if typ.names:",
        "fixed_code": "if typ.names is not None:",
        "patch": "@@ -200,7 +200,7 @@ def flatten_descr(ndtype):\n         descr = []\n         for field in names:\n             (typ, _) = ndtype.fields[field]\n-            if typ.names:\n+            if typ.names is not None:\n                 descr.extend(flatten_descr(typ))\n             else:\n                 descr.append((field, typ))"
    },
    {
        "commit_id": "ce24b2e585635f62c7187e0c5eaa675bb6a94e84",
        "commit_message": "BUG: typo in _ctypes class",
        "commit_url": "https://github.com/numpy/numpy/commit/ce24b2e585635f62c7187e0c5eaa675bb6a94e84",
        "buggy_code": "return self.data_as(ctpyes.c_void_p)",
        "fixed_code": "return self.data_as(ctypes.c_void_p)",
        "patch": "@@ -386,7 +386,7 @@ def _as_parameter_(self):\n \n         Enables `c_func(some_array.ctypes)`\n         \"\"\"\n-        return self.data_as(ctpyes.c_void_p)\n+        return self.data_as(ctypes.c_void_p)\n \n     # kept for compatibility\n     get_data = data.fget"
    },
    {
        "commit_id": "857a48654942cc8e8086577757d4f981cf6be544",
        "commit_message": "BUG: _ctypes._as_parameter_ did not hold the array object",
        "commit_url": "https://github.com/numpy/numpy/commit/857a48654942cc8e8086577757d4f981cf6be544",
        "buggy_code": "return self._data",
        "fixed_code": "return self.data_as(ctpyes.c_void_p)",
        "patch": "@@ -386,7 +386,7 @@ def _as_parameter_(self):\n \n         Enables `c_func(some_array.ctypes)`\n         \"\"\"\n-        return self._data\n+        return self.data_as(ctpyes.c_void_p)\n \n     # kept for compatibility\n     get_data = data.fget"
    },
    {
        "commit_id": "983303f1809b3882d4774fdc220b75711063ef29",
        "commit_message": "DOC: fix issue with __new__ usage in subclassing doc.\n\nCloses gh-14386.",
        "commit_url": "https://github.com/numpy/numpy/commit/983303f1809b3882d4774fdc220b75711063ef29",
        "buggy_code": "return object.__new__(cls, *args)",
        "fixed_code": "return object.__new__(cls)",
        "patch": "@@ -118,7 +118,7 @@ class C(object):\n       def __new__(cls, *args):\n           print('Cls in __new__:', cls)\n           print('Args in __new__:', args)\n-          return object.__new__(cls, *args)\n+          return object.__new__(cls)\n \n       def __init__(self, *args):\n           print('type(self) in __init__:', type(self))"
    },
    {
        "commit_id": "766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "commit_message": "Merge pull request #14364 from hugovk/fix-flake8-2020\n\nMAINT: Fixes for prospective Python 3.10 and 4.0",
        "commit_url": "https://github.com/numpy/numpy/commit/766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "buggy_code": "if sys.version_info[0] == 3:",
        "fixed_code": "if sys.version_info[0] >= 3:",
        "patch": "@@ -464,7 +464,7 @@ def generate_config_h(ext, build_dir):\n             moredefs.append(('HAVE_LDOUBLE_%s' % rep, 1))\n \n             # Py3K check\n-            if sys.version_info[0] == 3:\n+            if sys.version_info[0] >= 3:\n                 moredefs.append(('NPY_PY3K', 1))\n \n             # Generate the config.h file from moredefs"
    },
    {
        "commit_id": "766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "commit_message": "Merge pull request #14364 from hugovk/fix-flake8-2020\n\nMAINT: Fixes for prospective Python 3.10 and 4.0",
        "commit_url": "https://github.com/numpy/numpy/commit/766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "buggy_code": "plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])",
        "fixed_code": "plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info[:2])",
        "patch": "@@ -38,7 +38,7 @@ def finalize_options(self):\n                 raise ValueError(\"--parallel/-j argument must be an integer\")\n         build_scripts = self.build_scripts\n         old_build.finalize_options(self)\n-        plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])\n+        plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info[:2])\n         if build_scripts is None:\n             self.build_scripts = os.path.join(self.build_base,\n                                               'scripts' + plat_specifier)"
    },
    {
        "commit_id": "766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "commit_message": "Merge pull request #14364 from hugovk/fix-flake8-2020\n\nMAINT: Fixes for prospective Python 3.10 and 4.0",
        "commit_url": "https://github.com/numpy/numpy/commit/766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "buggy_code": "plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])",
        "fixed_code": "plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info[:2])",
        "patch": "@@ -90,7 +90,7 @@ def finalize_options(self):\n         self.data_files = self.distribution.data_files or []\n \n         if self.build_src is None:\n-            plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])\n+            plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info[:2])\n             self.build_src = os.path.join(self.build_base, 'src'+plat_specifier)\n \n         # py_modules_dict is used in build_py.find_package_modules"
    },
    {
        "commit_id": "766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "commit_message": "Merge pull request #14364 from hugovk/fix-flake8-2020\n\nMAINT: Fixes for prospective Python 3.10 and 4.0",
        "commit_url": "https://github.com/numpy/numpy/commit/766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "buggy_code": "PY3 = True if sys.version_info[0] == 3 else False",
        "fixed_code": "PY3 = True if sys.version_info[0] >= 3 else False",
        "patch": "@@ -5,7 +5,7 @@\n __all__ = ['PY3', 'b', 'basestring_', 'bytes', 'next', 'is_unicode',\n            'iteritems']\n \n-PY3 = True if sys.version_info[0] == 3 else False\n+PY3 = True if sys.version_info[0] >= 3 else False\n \n if sys.version_info[0] < 3:\n "
    },
    {
        "commit_id": "766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "commit_message": "Merge pull request #14364 from hugovk/fix-flake8-2020\n\nMAINT: Fixes for prospective Python 3.10 and 4.0",
        "commit_url": "https://github.com/numpy/numpy/commit/766a88d2a1fcc03c74d19a6c04b87ab825819067",
        "buggy_code": "libDir = \"lib.%s-%s\" % (get_platform(), sys.version[:3])",
        "fixed_code": "libDir = \"lib.{}-{}.{}\".format(get_platform(), *sys.version_info[:2])",
        "patch": "@@ -15,7 +15,7 @@\n \n # Add the distutils-generated build directory to the python search path and then\n # import the extension module\n-libDir = \"lib.%s-%s\" % (get_platform(), sys.version[:3])\n+libDir = \"lib.{}-{}.{}\".format(get_platform(), *sys.version_info[:2])\n sys.path.insert(0, os.path.join(\"build\", libDir))\n import Farray\n "
    },
    {
        "commit_id": "5c02fedbe1585a8e2ae530ec34d44dc80eadd4e5",
        "commit_message": "BUG: Fix for Python 4",
        "commit_url": "https://github.com/numpy/numpy/commit/5c02fedbe1585a8e2ae530ec34d44dc80eadd4e5",
        "buggy_code": "if sys.version_info[0] == 3:",
        "fixed_code": "if sys.version_info[0] >= 3:",
        "patch": "@@ -464,7 +464,7 @@ def generate_config_h(ext, build_dir):\n             moredefs.append(('HAVE_LDOUBLE_%s' % rep, 1))\n \n             # Py3K check\n-            if sys.version_info[0] == 3:\n+            if sys.version_info[0] >= 3:\n                 moredefs.append(('NPY_PY3K', 1))\n \n             # Generate the config.h file from moredefs"
    },
    {
        "commit_id": "5c02fedbe1585a8e2ae530ec34d44dc80eadd4e5",
        "commit_message": "BUG: Fix for Python 4",
        "commit_url": "https://github.com/numpy/numpy/commit/5c02fedbe1585a8e2ae530ec34d44dc80eadd4e5",
        "buggy_code": "PY3 = True if sys.version_info[0] == 3 else False",
        "fixed_code": "PY3 = True if sys.version_info[0] >= 3 else False",
        "patch": "@@ -5,7 +5,7 @@\n __all__ = ['PY3', 'b', 'basestring_', 'bytes', 'next', 'is_unicode',\n            'iteritems']\n \n-PY3 = True if sys.version_info[0] == 3 else False\n+PY3 = True if sys.version_info[0] >= 3 else False\n \n if sys.version_info[0] < 3:\n "
    },
    {
        "commit_id": "e7c1f8e789d8ccea6034f791393a2122e1237886",
        "commit_message": "BUG: Fix for Python 3.10",
        "commit_url": "https://github.com/numpy/numpy/commit/e7c1f8e789d8ccea6034f791393a2122e1237886",
        "buggy_code": "plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])",
        "fixed_code": "plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info)",
        "patch": "@@ -38,7 +38,7 @@ def finalize_options(self):\n                 raise ValueError(\"--parallel/-j argument must be an integer\")\n         build_scripts = self.build_scripts\n         old_build.finalize_options(self)\n-        plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])\n+        plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info)\n         if build_scripts is None:\n             self.build_scripts = os.path.join(self.build_base,\n                                               'scripts' + plat_specifier)"
    },
    {
        "commit_id": "e7c1f8e789d8ccea6034f791393a2122e1237886",
        "commit_message": "BUG: Fix for Python 3.10",
        "commit_url": "https://github.com/numpy/numpy/commit/e7c1f8e789d8ccea6034f791393a2122e1237886",
        "buggy_code": "plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])",
        "fixed_code": "plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info)",
        "patch": "@@ -90,7 +90,7 @@ def finalize_options(self):\n         self.data_files = self.distribution.data_files or []\n \n         if self.build_src is None:\n-            plat_specifier = \".%s-%s\" % (get_platform(), sys.version[0:3])\n+            plat_specifier = \".{}-{}.{}\".format(get_platform(), *sys.version_info)\n             self.build_src = os.path.join(self.build_base, 'src'+plat_specifier)\n \n         # py_modules_dict is used in build_py.find_package_modules"
    },
    {
        "commit_id": "e7c1f8e789d8ccea6034f791393a2122e1237886",
        "commit_message": "BUG: Fix for Python 3.10",
        "commit_url": "https://github.com/numpy/numpy/commit/e7c1f8e789d8ccea6034f791393a2122e1237886",
        "buggy_code": "libDir = \"lib.%s-%s\" % (get_platform(), sys.version[:3])",
        "fixed_code": "libDir = \"lib.{}-{}.{}\".format(get_platform(), *sys.version_info)",
        "patch": "@@ -15,7 +15,7 @@\n \n # Add the distutils-generated build directory to the python search path and then\n # import the extension module\n-libDir = \"lib.%s-%s\" % (get_platform(), sys.version[:3])\n+libDir = \"lib.{}-{}.{}\".format(get_platform(), *sys.version_info)\n sys.path.insert(0, os.path.join(\"build\", libDir))\n import Farray\n "
    },
    {
        "commit_id": "77b421d271ecb5cbdb6c118389a6141f7d1a1998",
        "commit_message": "Merge pull request #14351 from danielballan/doc-typo\n\nDOC: Fix a minor typo in dispatch documentation.",
        "commit_url": "https://github.com/numpy/numpy/commit/77b421d271ecb5cbdb6c118389a6141f7d1a1998",
        "buggy_code": "... def sum(arr):",
        "fixed_code": "... def mean(arr):",
        "patch": "@@ -223,7 +223,7 @@ class to indicate that it would like to handle computations in a custom-defined\n ...     return arr._i * arr._N\n ...\n >>> @implements(np.mean)\n-... def sum(arr):\n+... def mean(arr):\n ...     \"Implementation of np.mean for DiagonalArray objects\"\n ...     return arr._i / arr._N\n ..."
    },
    {
        "commit_id": "8ec4c73e9e9268e0c9e42ed000799f32b92745e8",
        "commit_message": "DOC: Fix a minor typo in dispatch documentation.",
        "commit_url": "https://github.com/numpy/numpy/commit/8ec4c73e9e9268e0c9e42ed000799f32b92745e8",
        "buggy_code": "... def sum(arr):",
        "fixed_code": "... def mean(arr):",
        "patch": "@@ -223,7 +223,7 @@ class to indicate that it would like to handle computations in a custom-defined\n ...     return arr._i * arr._N\n ...\n >>> @implements(np.mean)\n-... def sum(arr):\n+... def mean(arr):\n ...     \"Implementation of np.mean for DiagonalArray objects\"\n ...     return arr._i / arr._N\n ..."
    },
    {
        "commit_id": "cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "commit_message": "Merge pull request #14290 from eric-wieser/fix-if-fields\n\nBUG: Fix misuse of .names and .fields in various places",
        "commit_url": "https://github.com/numpy/numpy/commit/cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "buggy_code": "if oldtype.names:",
        "fixed_code": "if oldtype.names is not None:",
        "patch": "@@ -459,7 +459,7 @@ def _getfield_is_safe(oldtype, newtype, offset):\n     if newtype.hasobject or oldtype.hasobject:\n         if offset == 0 and newtype == oldtype:\n             return\n-        if oldtype.names:\n+        if oldtype.names is not None:\n             for name in oldtype.names:\n                 if (oldtype.fields[name][1] == offset and\n                         oldtype.fields[name][0] == newtype):"
    },
    {
        "commit_id": "cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "commit_message": "Merge pull request #14290 from eric-wieser/fix-if-fields\n\nBUG: Fix misuse of .names and .fields in various places",
        "commit_url": "https://github.com/numpy/numpy/commit/cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "buggy_code": "if a.shape == () and not a.dtype.names:",
        "fixed_code": "if a.shape == () and a.dtype.names is None:",
        "patch": "@@ -685,7 +685,7 @@ def array2string(a, max_line_width=None, precision=None,\n         if style is np._NoValue:\n             style = repr\n \n-        if a.shape == () and not a.dtype.names:\n+        if a.shape == () and a.dtype.names is None:\n             return style(a.item())\n     elif style is not np._NoValue:\n         # Deprecation 11-9-2017  v1.14"
    },
    {
        "commit_id": "cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "commit_message": "Merge pull request #14290 from eric-wieser/fix-if-fields\n\nBUG: Fix misuse of .names and .fields in various places",
        "commit_url": "https://github.com/numpy/numpy/commit/cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "buggy_code": "if isinstance(result, np.ndarray) and result.dtype.names:",
        "fixed_code": "if isinstance(result, np.ndarray) and result.dtype.names is not None:",
        "patch": "@@ -468,7 +468,7 @@ def test_pickle_py2_bytes_encoding(self):\n                 result = pickle.loads(data, encoding='bytes')\n                 assert_equal(result, original)\n \n-                if isinstance(result, np.ndarray) and result.dtype.names:\n+                if isinstance(result, np.ndarray) and result.dtype.names is not None:\n                     for name in result.dtype.names:\n                         assert_(isinstance(name, str))\n "
    },
    {
        "commit_id": "cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "commit_message": "Merge pull request #14290 from eric-wieser/fix-if-fields\n\nBUG: Fix misuse of .names and .fields in various places",
        "commit_url": "https://github.com/numpy/numpy/commit/cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "buggy_code": "elif dtype.names:",
        "fixed_code": "elif dtype.names is not None:",
        "patch": "@@ -321,7 +321,7 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n     # produce a name for the new type\n     if dtype is None:\n         name = 'any'\n-    elif dtype.names:\n+    elif dtype.names is not None:\n         name = str(id(dtype))\n     else:\n         name = dtype.str"
    },
    {
        "commit_id": "cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "commit_message": "Merge pull request #14290 from eric-wieser/fix-if-fields\n\nBUG: Fix misuse of .names and .fields in various places",
        "commit_url": "https://github.com/numpy/numpy/commit/cd4cda8c0faef8d97e18629dbb8ea8a2c4685451",
        "buggy_code": "if obj.dtype.fields:",
        "fixed_code": "if obj.dtype.names is not None:",
        "patch": "@@ -208,7 +208,7 @@ def __getattribute__(self, attr):\n         _localdict = ndarray.__getattribute__(self, '__dict__')\n         _data = ndarray.view(self, _localdict['_baseclass'])\n         obj = _data.getfield(*res)\n-        if obj.dtype.fields:\n+        if obj.dtype.names is not None:\n             raise NotImplementedError(\"MaskedRecords is currently limited to\"\n                                       \"simple records.\")\n         # Get some special attributes"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "np.linalg.lstsq(self.a, self.b)",
        "fixed_code": "np.linalg.lstsq(self.a, self.b, rcond=-1)",
        "patch": "@@ -106,4 +106,4 @@ def setup(self):\n         self.b = get_indexes_rand()[:100].astype(np.float64)\n \n     def time_numpy_linalg_lstsq_a__b_float64(self):\n-        np.linalg.lstsq(self.a, self.b)\n+        np.linalg.lstsq(self.a, self.b, rcond=-1)"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "self.ones = np.full(100000, 0, bool)",
        "fixed_code": "self.ones = np.full(100000, 1, bool)",
        "patch": "@@ -32,7 +32,7 @@ def setup(self):\n         # avoid np.zeros's lazy allocation that would\n         # cause page faults during benchmark\n         self.zeros = np.full(100000, 0, bool)\n-        self.ones = np.full(100000, 0, bool)\n+        self.ones = np.full(100000, 1, bool)\n \n     def time_all_fast(self):\n         self.zeros.all()"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "'logical_xor', 'maximum', 'minimum', 'mod', 'modf', 'multiply',",
        "fixed_code": "'logical_xor', 'matmul', 'maximum', 'minimum', 'mod', 'modf', 'multiply',",
        "patch": "@@ -15,7 +15,7 @@\n           'isinf', 'isnan', 'isnat', 'lcm', 'ldexp', 'left_shift', 'less',\n           'less_equal', 'log', 'log10', 'log1p', 'log2', 'logaddexp',\n           'logaddexp2', 'logical_and', 'logical_not', 'logical_or',\n-          'logical_xor', 'maximum', 'minimum', 'mod', 'modf', 'multiply',\n+          'logical_xor', 'matmul', 'maximum', 'minimum', 'mod', 'modf', 'multiply',\n           'negative', 'nextafter', 'not_equal', 'positive', 'power',\n           'rad2deg', 'radians', 'reciprocal', 'remainder', 'right_shift',\n           'rint', 'sign', 'signbit', 'sin', 'sinh', 'spacing', 'sqrt',"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.",
        "fixed_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.",
        "patch": "@@ -252,7 +252,7 @@ def _is_packed(dtype):\n     from a list of the field names and dtypes with no additional\n     dtype parameters.\n \n-    Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.\n+    Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.\n     \"\"\"\n     total_offset = 0\n     for name in dtype.names:"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "In an ideal world, we could acheive this through the PEP3118 buffer protocol,",
        "fixed_code": "In an ideal world, we could achieve this through the PEP3118 buffer protocol,",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n Conversion from ctypes to dtype.\n \n-In an ideal world, we could acheive this through the PEP3118 buffer protocol,\n+In an ideal world, we could achieve this through the PEP3118 buffer protocol,\n something like::\n \n     def dtype_from_ctypes_type(t):"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "expected_size += 2 * np.dtype((np.float64, 1)).itemsize",
        "fixed_code": "expected_size += 2 * np.dtype(np.float64).itemsize",
        "patch": "@@ -65,7 +65,7 @@ def test_void_scalar_structured_data(self):\n         assert_(isinstance(x, np.void))\n         mv_x = memoryview(x)\n         expected_size = 16 * np.dtype((np.unicode_, 1)).itemsize\n-        expected_size += 2 * np.dtype((np.float64, 1)).itemsize\n+        expected_size += 2 * np.dtype(np.float64).itemsize\n         assert_equal(mv_x.itemsize, expected_size)\n         assert_equal(mv_x.ndim, 0)\n         assert_equal(mv_x.shape, ())"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),",
        "fixed_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc\"),",
        "patch": "@@ -422,7 +422,7 @@ def test_int_from_infinite_longdouble___int__(self):\n \n     @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),\n                         reason=\"long double is same as double\")\n-    @pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),\n+    @pytest.mark.skipif(platform.machine().startswith(\"ppc\"),\n                         reason=\"IBM double double\")\n     def test_int_from_huge_longdouble(self):\n         # Produce a longdouble that would overflow a double,"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "return ['-link', '/PATH:\"%s\"' % (dir)]",
        "fixed_code": "return ['-link', '/PATH:%s' % (dir)]",
        "patch": "@@ -66,7 +66,7 @@ def get_flags_linker_so(self):\n \n     def library_dir_option(self, dir):\n         if os.name=='nt':\n-            return ['-link', '/PATH:\"%s\"' % (dir)]\n+            return ['-link', '/PATH:%s' % (dir)]\n         return \"-L\" + dir\n \n     def library_option(self, lib):"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "if not \"path']\" in str(e):",
        "fixed_code": "if not \"'path'\" in str(e):",
        "patch": "@@ -95,7 +95,7 @@ class CompaqVisualFCompiler(FCompiler):\n                 raise e\n         except ValueError:\n             e = get_exception()\n-            if not \"path']\" in str(e):\n+            if not \"'path'\" in str(e):\n                 print(\"Unexpected ValueError in\", __file__)\n                 raise e\n "
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "return '-R\"%s\"' % dir",
        "fixed_code": "return '-R%s' % dir",
        "patch": "@@ -44,7 +44,7 @@ def get_libraries(self):\n         return opt\n \n     def runtime_library_dir_option(self, dir):\n-        return '-R\"%s\"' % dir\n+        return '-R%s' % dir\n \n if __name__ == '__main__':\n     from distutils import log"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "raise ValueError(\"--define-variable option should be of \" \\",
        "fixed_code": "raise ValueError(\"--define-variable option should be of \"",
        "patch": "@@ -426,7 +426,7 @@ def read_config(pkgname, dirs=None):\n     if options.define_variable:\n         m = re.search(r'([\\S]+)=([\\S]+)', options.define_variable)\n         if not m:\n-            raise ValueError(\"--define-variable option should be of \" \\\n+            raise ValueError(\"--define-variable option should be of \"\n                              \"the form --define-variable=foo=bar\")\n         else:\n             name = m.group(1)"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "from f2py2e import main",
        "fixed_code": "from numpy.f2py.f2py2e import main",
        "patch": "@@ -1,6 +1,6 @@\n # See http://cens.ioc.ee/projects/f2py2e/\n from __future__ import division, print_function\n \n-from f2py2e import main\n+from numpy.f2py.f2py2e import main\n \n main()"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "python setup.py install",
        "fixed_code": "pip install .",
        "patch": "@@ -3,7 +3,7 @@\n setup.py for installing F2PY\n \n Usage:\n-   python setup.py install\n+   pip install .\n \n Copyright 2001-2005 Pearu Peterson all rights reserved,\n Pearu Peterson <pearu@cens.ioc.ee>"
    },
    {
        "commit_id": "0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-if-fields",
        "commit_url": "https://github.com/numpy/numpy/commit/0f5e376d3eb6118b783cdd3ecd27722c2d1934ba",
        "buggy_code": "from .fftpack import *",
        "fixed_code": "from .pocketfft import *",
        "patch": "@@ -3,7 +3,7 @@\n # To get sub-modules\n from .info import __doc__\n \n-from .fftpack import *\n+from .pocketfft import *\n from .helper import *\n \n from numpy._pytesttester import PytestTester"
    },
    {
        "commit_id": "5d63992a53ca71c3e00c52031b1f68921137bc4f",
        "commit_message": "BUG: Fix detection of structured arrays in mrecords\n\nThis check would fail on the structured type `np.dtype([])`.\n\nNo test, since I don't really understand mrecords",
        "commit_url": "https://github.com/numpy/numpy/commit/5d63992a53ca71c3e00c52031b1f68921137bc4f",
        "buggy_code": "if obj.dtype.fields:",
        "fixed_code": "if obj.dtype.names is not None:",
        "patch": "@@ -211,7 +211,7 @@ def __getattribute__(self, attr):\n         _localdict = ndarray.__getattribute__(self, '__dict__')\n         _data = ndarray.view(self, _localdict['_baseclass'])\n         obj = _data.getfield(*res)\n-        if obj.dtype.fields:\n+        if obj.dtype.names is not None:\n             raise NotImplementedError(\"MaskedRecords is currently limited to\"\n                                       \"simple records.\")\n         # Get some special attributes"
    },
    {
        "commit_id": "8187c9efcfcaa5d9ae0fcda42f9512b860001ffa",
        "commit_message": "BUG: Don't construct masked arrays with the wrong mask type in genfromtxt\n\nThis only affects arrays with `dtype([])`, but also follows the recommended way to check for structured arrays in our docs",
        "commit_url": "https://github.com/numpy/numpy/commit/8187c9efcfcaa5d9ae0fcda42f9512b860001ffa",
        "buggy_code": "if dtype.names:",
        "fixed_code": "if dtype.names is not None:",
        "patch": "@@ -2197,7 +2197,7 @@ def encode_unicode_cols(row_tup):\n             #\n             output = np.array(data, dtype)\n             if usemask:\n-                if dtype.names:\n+                if dtype.names is not None:\n                     mdtype = [(_, bool) for _ in dtype.names]\n                 else:\n                     mdtype = bool"
    },
    {
        "commit_id": "b11468e1a38c19a24ed0ebaede023c159c745e33",
        "commit_message": "BUG: Don't allow extra fields to be added in genfromtxt\n\nPreviously passing `dtype=[], names=['a']` would append an extra field, even though `dtype=['a'], names=['b', 'c']` does not.",
        "commit_url": "https://github.com/numpy/numpy/commit/b11468e1a38c19a24ed0ebaede023c159c745e33",
        "buggy_code": "if names and dtype.names:",
        "fixed_code": "if names and dtype.names is not None:",
        "patch": "@@ -2147,7 +2147,7 @@ def encode_unicode_cols(row_tup):\n             outputmask = np.array(masks, dtype=mdtype)\n     else:\n         # Overwrite the initial dtype names if needed\n-        if names and dtype.names:\n+        if names and dtype.names is not None:\n             dtype.names = names\n         # Case 1. We have a structured type\n         if len(dtype_flat) > 1:"
    },
    {
        "commit_id": "731127385578fa2cf4e0ad48ef2e456d897d36de",
        "commit_message": "BUG: Fix crash on genfromtxt with nested empty structured array\n\nPreviously this would fail with `ValueError: could not assign tuple of length 2 to structure with 3 fields.`, now it raises `NotImplementedError`.",
        "commit_url": "https://github.com/numpy/numpy/commit/731127385578fa2cf4e0ad48ef2e456d897d36de",
        "buggy_code": "if ndtype[name].names:",
        "fixed_code": "if ndtype[name].names is not None:",
        "patch": "@@ -121,7 +121,7 @@ def has_nested_fields(ndtype):\n \n     \"\"\"\n     for name in ndtype.names or ():\n-        if ndtype[name].names:\n+        if ndtype[name].names is not None:\n             return True\n     return False\n "
    },
    {
        "commit_id": "30500e692c7d31f456d697da64743d22448f5e5c",
        "commit_message": "Merge pull request #14195 from guanqun/guanqun/typo\n\nMAINT: Fix the typo",
        "commit_url": "https://github.com/numpy/numpy/commit/30500e692c7d31f456d697da64743d22448f5e5c",
        "buggy_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.",
        "fixed_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.",
        "patch": "@@ -252,7 +252,7 @@ def _is_packed(dtype):\n     from a list of the field names and dtypes with no additional\n     dtype parameters.\n \n-    Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.\n+    Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.\n     \"\"\"\n     total_offset = 0\n     for name in dtype.names:"
    },
    {
        "commit_id": "b92fe6f93c39b16f46fc04b5722cc3c0ec874422",
        "commit_message": "MAINT: Fix the typo",
        "commit_url": "https://github.com/numpy/numpy/commit/b92fe6f93c39b16f46fc04b5722cc3c0ec874422",
        "buggy_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.",
        "fixed_code": "Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.",
        "patch": "@@ -252,7 +252,7 @@ def _is_packed(dtype):\n     from a list of the field names and dtypes with no additional\n     dtype parameters.\n \n-    Duplicates the C `is_dtype_struct_simple_unaligned_layout` functio.\n+    Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.\n     \"\"\"\n     total_offset = 0\n     for name in dtype.names:"
    },
    {
        "commit_id": "b4c1d4f93d2ed34bc27b59ece2f26a8b3b16e5e4",
        "commit_message": "DOC: Fix misleading `allclose` docstring for `equal_nan` (gh-14183)\n\nThere is no output array for allclose as opposed to isclose, so do not reference one.",
        "commit_url": "https://github.com/numpy/numpy/commit/b4c1d4f93d2ed34bc27b59ece2f26a8b3b16e5e4",
        "buggy_code": "considered equal to NaN's in `b` in the output array.",
        "fixed_code": "considered equal to NaN's in `b`.",
        "patch": "@@ -2124,7 +2124,7 @@ def allclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):\n         The absolute tolerance parameter (see Notes).\n     equal_nan : bool\n         Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n-        considered equal to NaN's in `b` in the output array.\n+        considered equal to NaN's in `b`.\n \n         .. versionadded:: 1.10.0\n "
    },
    {
        "commit_id": "f6f7995b485d5b9895cd456815192abe10ac6fcb",
        "commit_message": "Merge pull request #14124 from Harmon758/equality-check-fix\n\nMAINT: Use equality instead of identity check with literal",
        "commit_url": "https://github.com/numpy/numpy/commit/f6f7995b485d5b9895cd456815192abe10ac6fcb",
        "buggy_code": "if self.shape is ():",
        "fixed_code": "if self.shape == ():",
        "patch": "@@ -4455,7 +4455,7 @@ def count(self, axis=None, keepdims=np._NoValue):\n         if m is nomask:\n             # compare to _count_reduce_items in _methods.py\n \n-            if self.shape is ():\n+            if self.shape == ():\n                 if axis not in (None, 0):\n                     raise np.AxisError(axis=axis, ndim=self.ndim)\n                 return 1"
    },
    {
        "commit_id": "691e6dbe1fd70c7638daf3ab38e877419babeed2",
        "commit_message": "Merge pull request #14096 from hvy/docs-tri-ij\n\nDOC: fix documentation of i and j for tri.",
        "commit_url": "https://github.com/numpy/numpy/commit/691e6dbe1fd70c7638daf3ab38e877419babeed2",
        "buggy_code": "in other words ``T[i,j] == 1`` for ``i <= j + k``, 0 otherwise.",
        "fixed_code": "in other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.",
        "patch": "@@ -368,7 +368,7 @@ def tri(N, M=None, k=0, dtype=float):\n     -------\n     tri : ndarray of shape (N, M)\n         Array with its lower triangle filled with ones and zero elsewhere;\n-        in other words ``T[i,j] == 1`` for ``i <= j + k``, 0 otherwise.\n+        in other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "a3ca52f7738bc75eb5bdc6b840fe8dc674cda603",
        "commit_message": "DOC: fix documentation of i and j for tri.",
        "commit_url": "https://github.com/numpy/numpy/commit/a3ca52f7738bc75eb5bdc6b840fe8dc674cda603",
        "buggy_code": "in other words ``T[i,j] == 1`` for ``i <= j + k``, 0 otherwise.",
        "fixed_code": "in other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.",
        "patch": "@@ -368,7 +368,7 @@ def tri(N, M=None, k=0, dtype=float):\n     -------\n     tri : ndarray of shape (N, M)\n         Array with its lower triangle filled with ones and zero elsewhere;\n-        in other words ``T[i,j] == 1`` for ``i <= j + k``, 0 otherwise.\n+        in other words ``T[i,j] == 1`` for ``j <= i + k``, 0 otherwise.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "3ca1147553cf1d601f71320e8c9943178eba13f5",
        "commit_message": "fix tests",
        "commit_url": "https://github.com/numpy/numpy/commit/3ca1147553cf1d601f71320e8c9943178eba13f5",
        "buggy_code": "choice_hash = '9420df83972c186bdde8696cb9bd594a'",
        "fixed_code": "choice_hash = '411103da935251235af7f643ad6a3327'",
        "patch": "@@ -688,7 +688,7 @@ def test_choice_return_type(self):\n     def test_choice_large_sample(self):\n         import hashlib\n \n-        choice_hash = '9420df83972c186bdde8696cb9bd594a'\n+        choice_hash = '411103da935251235af7f643ad6a3327'\n         random = Generator(MT19937(self.seed))\n         actual = random.choice(10000, 5000, replace=False)\n         if sys.byteorder != 'little':"
    },
    {
        "commit_id": "ad34df696322068036c3e82ef5cd89a95e700479",
        "commit_message": "Merge pull request #13950 from IntelPython/fix-fcompiler-compaq\n\nFixing failure on Python 2.7 on Windows 7",
        "commit_url": "https://github.com/numpy/numpy/commit/ad34df696322068036c3e82ef5cd89a95e700479",
        "buggy_code": "if not \"path']\" in str(e):",
        "fixed_code": "if not \"'path'\" in str(e):",
        "patch": "@@ -95,7 +95,7 @@ class CompaqVisualFCompiler(FCompiler):\n                 raise e\n         except ValueError:\n             e = get_exception()\n-            if not \"path']\" in str(e):\n+            if not \"'path'\" in str(e):\n                 print(\"Unexpected ValueError in\", __file__)\n                 raise e\n "
    },
    {
        "commit_id": "6f3483ac04bc59c6b9810397b674ec19b9c071c9",
        "commit_message": "Fixing failure on Python 2.7 on Windows 7\n\nWhen executing pytest --pyargs numpy.distuils.tests.test_fcompiler\ntest_fcompiler_flags fails with\n\n```\n>                   raise e\nE                   ValueError: [u'path', u'include', u'lib']\n\nlib\\site-packages\\numpy\\distutils\\fcompiler\\compaq.py:100: ValueError\n---------------------------- Captured stdout call -----------------------------\nUnexpected ValueError in C:\\TCAgent1\\work\\7cc6992266387eba\\distribution\\lib\\site\n-packages\\numpy\\distutils\\fcompiler\\compaq.py\n```\n\nIt appears that the list argument of ValueError contains 'path' not at the\nend of the list like the current test expects, but at the beginning.\n\nAfter this fix, 9 test failures of `pytest --pyargs numpy.distutils` go away.",
        "commit_url": "https://github.com/numpy/numpy/commit/6f3483ac04bc59c6b9810397b674ec19b9c071c9",
        "buggy_code": "if not \"path']\" in str(e):",
        "fixed_code": "if not \"'path'\" in str(e):",
        "patch": "@@ -95,7 +95,7 @@ class CompaqVisualFCompiler(FCompiler):\n                 raise e\n         except ValueError:\n             e = get_exception()\n-            if not \"path']\" in str(e):\n+            if not \"'path'\" in str(e):\n                 print(\"Unexpected ValueError in\", __file__)\n                 raise e\n "
    },
    {
        "commit_id": "f751336b0261fb86b15f949251f31314e08ecc00",
        "commit_message": "Merge pull request #13895 from MSeifert04/fix-typo-make-mask\n\nDOC: Fix typo in \"make_mask\" documentation",
        "commit_url": "https://github.com/numpy/numpy/commit/f751336b0261fb86b15f949251f31314e08ecc00",
        "buggy_code": "of 0 are interepreted as False, everything else as True.",
        "fixed_code": "of 0 are interpreted as False, everything else as True.",
        "patch": "@@ -1554,7 +1554,7 @@ def make_mask(m, copy=False, shrink=True, dtype=MaskType):\n     Return `m` as a boolean mask, creating a copy if necessary or requested.\n     The function can accept any sequence that is convertible to integers,\n     or ``nomask``.  Does not require that contents must be 0s and 1s, values\n-    of 0 are interepreted as False, everything else as True.\n+    of 0 are interpreted as False, everything else as True.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "88c2cb10958de6a063a2f42f81cf8e2eb4dca080",
        "commit_message": "DOC: Fix typo in \"make_mask\" documentation",
        "commit_url": "https://github.com/numpy/numpy/commit/88c2cb10958de6a063a2f42f81cf8e2eb4dca080",
        "buggy_code": "of 0 are interepreted as False, everything else as True.",
        "fixed_code": "of 0 are interpreted as False, everything else as True.",
        "patch": "@@ -1554,7 +1554,7 @@ def make_mask(m, copy=False, shrink=True, dtype=MaskType):\n     Return `m` as a boolean mask, creating a copy if necessary or requested.\n     The function can accept any sequence that is convertible to integers,\n     or ``nomask``.  Does not require that contents must be 0s and 1s, values\n-    of 0 are interepreted as False, everything else as True.\n+    of 0 are interpreted as False, everything else as True.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "ae65a534645ca26992c208275c7a9554450edf73",
        "commit_message": "BUG: Add missing `np.core.multiarray._get_ndarray_c_version`  function\n\nThis must have been lost in the multiarray / umath merge.\n\nFound by noticing that `add_newdocs` was being called on an object that does not exist.",
        "commit_url": "https://github.com/numpy/numpy/commit/ae65a534645ca26992c208275c7a9554450edf73",
        "buggy_code": "_ARRAY_API, _monotonicity",
        "fixed_code": "_ARRAY_API, _monotonicity, _get_ndarray_c_version",
        "patch": "@@ -16,7 +16,7 @@\n from numpy.core._multiarray_umath import *\n from numpy.core._multiarray_umath import (\n     _fastCopyAndTranspose, _flagdict, _insert, _reconstruct, _vec_string,\n-    _ARRAY_API, _monotonicity\n+    _ARRAY_API, _monotonicity, _get_ndarray_c_version\n     )\n \n __all__ = ["
    },
    {
        "commit_id": "46f1b50c3381516a6f93efb1dbd72bbc8dd5fc32",
        "commit_message": "Merge pull request #13864 from seberg/nose-azure-error\n\nTST: Ignore DeprecationWarning during nose imports",
        "commit_url": "https://github.com/numpy/numpy/commit/46f1b50c3381516a6f93efb1dbd72bbc8dd5fc32",
        "buggy_code": "assert 'loop of ufunc does not support' in str(exc)",
        "fixed_code": "assert exc.match('loop of ufunc does not support')",
        "patch": "@@ -1859,7 +1859,7 @@ def test_invalid_args(self):\n         # gh-7961\n         exc = pytest.raises(TypeError, np.sqrt, None)\n         # minimally check the exception text\n-        assert 'loop of ufunc does not support' in str(exc)\n+        assert exc.match('loop of ufunc does not support')\n \n     @pytest.mark.parametrize('nat', [np.datetime64('nat'), np.timedelta64('nat')])\n     def test_nat_is_not_finite(self, nat):"
    },
    {
        "commit_id": "0a00dc9d5a6c7ad87a8117bace5a6775b0d737df",
        "commit_message": "Merge pull request #13813 from mhvk/histogram2d-dispatcher-fixup\n\nBUG: further fixup to histogram2d dispatcher.",
        "commit_url": "https://github.com/numpy/numpy/commit/0a00dc9d5a6c7ad87a8117bace5a6775b0d737df",
        "buggy_code": "if N != 1 and N != 2:",
        "fixed_code": "if N == 2:",
        "patch": "@@ -573,7 +573,7 @@ def _histogram2d_dispatcher(x, y, bins=None, range=None, normed=None,\n         N = len(bins)\n     except TypeError:\n         N = 1\n-    if N != 1 and N != 2:\n+    if N == 2:\n         yield from bins  # bins=[x, y]\n     else:\n         yield bins"
    },
    {
        "commit_id": "22d5415f4e5e2e7009ccd86ac7915ba43a0b7d97",
        "commit_message": "BUG: further fixup to histogram2d dispatcher.\n\nNow with tests....",
        "commit_url": "https://github.com/numpy/numpy/commit/22d5415f4e5e2e7009ccd86ac7915ba43a0b7d97",
        "buggy_code": "if N != 1 and N != 2:",
        "fixed_code": "if N == 2:",
        "patch": "@@ -573,7 +573,7 @@ def _histogram2d_dispatcher(x, y, bins=None, range=None, normed=None,\n         N = len(bins)\n     except TypeError:\n         N = 1\n-    if N != 1 and N != 2:\n+    if N == 2:\n         yield from bins  # bins=[x, y]\n     else:\n         yield bins"
    },
    {
        "commit_id": "9f8401f7e03c35a1afbc5329d6c216c39c8b808a",
        "commit_message": "Merge pull request #13788 from tacaswell/mnt_glob_bug\n\nMAINT: fix 'in' -> 'is' typo",
        "commit_url": "https://github.com/numpy/numpy/commit/9f8401f7e03c35a1afbc5329d6c216c39c8b808a",
        "buggy_code": "return is_string(s) and ('*' in s or '?' is s)",
        "fixed_code": "return is_string(s) and ('*' in s or '?' in s)",
        "patch": "@@ -472,7 +472,7 @@ def is_sequence(seq):\n     return True\n \n def is_glob_pattern(s):\n-    return is_string(s) and ('*' in s or '?' is s)\n+    return is_string(s) and ('*' in s or '?' in s)\n \n def as_list(seq):\n     if is_sequence(seq):"
    },
    {
        "commit_id": "5e6a3fd5c1bc15a7173d1fc347597c6acf166d0a",
        "commit_message": "MAINT: fix 'in' -> 'is' typo\n\nThis is generating a SyntaxWarning.\n\nIt looks like it has been like this from\n2006 (8869df5b1cba1ffeda6d772eee1a7507fe18bdef) when this first came\ninto the code base.",
        "commit_url": "https://github.com/numpy/numpy/commit/5e6a3fd5c1bc15a7173d1fc347597c6acf166d0a",
        "buggy_code": "return is_string(s) and ('*' in s or '?' is s)",
        "fixed_code": "return is_string(s) and ('*' in s or '?' in s)",
        "patch": "@@ -472,7 +472,7 @@ def is_sequence(seq):\n     return True\n \n def is_glob_pattern(s):\n-    return is_string(s) and ('*' in s or '?' is s)\n+    return is_string(s) and ('*' in s or '?' in s)\n \n def as_list(seq):\n     if is_sequence(seq):"
    },
    {
        "commit_id": "e3eb3986dd87e700a694d6b4151c96ef92dfabe0",
        "commit_message": "Merge pull request #11859 from kirienko/bug-fix-5645-dtypes\n\nBUG: test and fix np.dtype('i,L') #5645",
        "commit_url": "https://github.com/numpy/numpy/commit/e3eb3986dd87e700a694d6b4151c96ef92dfabe0",
        "buggy_code": "br'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'",
        "fixed_code": "br'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'",
        "patch": "@@ -146,7 +146,7 @@ def _reconstruct(subtype, shape, dtype):\n # format_re was originally from numarray by J. Todd Miller\n \n format_re = re.compile(br'(?P<order1>[<>|=]?)'\n-                       br'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'\n+                       br'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'\n                        br'(?P<order2>[<>|=]?)'\n                        br'(?P<dtype>[A-Za-z0-9.?]*(?:\\[[a-zA-Z0-9,.]+\\])?)')\n sep_re = re.compile(br'\\s*,\\s*')"
    },
    {
        "commit_id": "6420e7f528a6c42422966544e453bdb2805ff620",
        "commit_message": "Merge pull request #13648 from mhvk/disallow-can-cast-of-everything-to-structured\n\nBUG: ensure that casting to/from structured is properly checked.",
        "commit_url": "https://github.com/numpy/numpy/commit/6420e7f528a6c42422966544e453bdb2805ff620",
        "buggy_code": "assert_raises(ValueError, lambda: (",
        "fixed_code": "assert_raises(TypeError, lambda: (",
        "patch": "@@ -1864,7 +1864,7 @@ def test_iter_buffered_cast_structured_type():\n     # make sure multi-field struct type -> simple doesn't work\n     sdt = [('a', 'f4'), ('b', 'i8'), ('d', 'O')]\n     a = np.array([(5.5, 7, 'test'), (8, 10, 11)], dtype=sdt)\n-    assert_raises(ValueError, lambda: (\n+    assert_raises(TypeError, lambda: (\n         nditer(a, ['buffered', 'refs_ok'], ['readonly'],\n                casting='unsafe',\n                op_dtypes='i4')))"
    },
    {
        "commit_id": "e12c6bda05c8b8c024f04f2d41416e5e63971b3e",
        "commit_message": "BUG: ensure that casting to/from structured is properly checked.\n\nAllow unsafe casting from a simple data type to a structured one with\nmultiple fields, but only from structured data type with a single\nfield (checked recursively) to a simple data type.\n\nFor now, continue to allow any structured to structured with\ncasting=\"unsafe\", as the current can_cast implementation does not\nmatch that of \"astype\".",
        "commit_url": "https://github.com/numpy/numpy/commit/e12c6bda05c8b8c024f04f2d41416e5e63971b3e",
        "buggy_code": "assert_raises(ValueError, lambda: (",
        "fixed_code": "assert_raises(TypeError, lambda: (",
        "patch": "@@ -1864,7 +1864,7 @@ def test_iter_buffered_cast_structured_type():\n     # make sure multi-field struct type -> simple doesn't work\n     sdt = [('a', 'f4'), ('b', 'i8'), ('d', 'O')]\n     a = np.array([(5.5, 7, 'test'), (8, 10, 11)], dtype=sdt)\n-    assert_raises(ValueError, lambda: (\n+    assert_raises(TypeError, lambda: (\n         nditer(a, ['buffered', 'refs_ok'], ['readonly'],\n                casting='unsafe',\n                op_dtypes='i4')))"
    },
    {
        "commit_id": "07c625cedd18d817b0941e39b4fe6a13caf034a1",
        "commit_message": "Merge pull request #13721 from eric-wieser/more_ufunc_exception_cleanup\n\nMAINT,BUG: More ufunc exception cleanup",
        "commit_url": "https://github.com/numpy/numpy/commit/07c625cedd18d817b0941e39b4fe6a13caf034a1",
        "buggy_code": "\"remainder cannot use operands with types\"):",
        "fixed_code": "\"'remainder' cannot use operands with types\"):",
        "patch": "@@ -1825,7 +1825,7 @@ def test_timedelta_modulus_type_resolution(self, val1, val2):\n         # NOTE: some of the operations may be supported\n         # in the future\n         with assert_raises_regex(TypeError,\n-                                 \"remainder cannot use operands with types\"):\n+                                 \"'remainder' cannot use operands with types\"):\n             val1 % val2\n \n     def test_timedelta_arange_no_dtype(self):"
    },
    {
        "commit_id": "2a1b2e5ed87a9dcf39342c394f815ccfbc93b7bd",
        "commit_message": "BUG: Prevent unsafe string concatenation\n\nThis did not handle exceptions correctly.\nChanged to use python to format the exception like all the others in this file.\n\nThis also adds quotes around the ufunc name.",
        "commit_url": "https://github.com/numpy/numpy/commit/2a1b2e5ed87a9dcf39342c394f815ccfbc93b7bd",
        "buggy_code": "\"remainder cannot use operands with types\"):",
        "fixed_code": "\"'remainder' cannot use operands with types\"):",
        "patch": "@@ -1825,7 +1825,7 @@ def test_timedelta_modulus_type_resolution(self, val1, val2):\n         # NOTE: some of the operations may be supported\n         # in the future\n         with assert_raises_regex(TypeError,\n-                                 \"remainder cannot use operands with types\"):\n+                                 \"'remainder' cannot use operands with types\"):\n             val1 % val2\n \n     def test_timedelta_arange_no_dtype(self):"
    },
    {
        "commit_id": "9e5ae6156855e5a2e2edccaf0112362ecb6d31fc",
        "commit_message": "BUG: Change renamed attribute\n\nChange renamed attribute",
        "commit_url": "https://github.com/numpy/numpy/commit/9e5ae6156855e5a2e2edccaf0112362ecb6d31fc",
        "buggy_code": "max_lam = np.random.RandomState().poisson_lam_max",
        "fixed_code": "max_lam = np.random.RandomState()._poisson_lam_max",
        "patch": "@@ -1447,7 +1447,7 @@ def test_negative_binomial(self):\n         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)\n \n     def test_poisson(self):\n-        max_lam = np.random.RandomState().poisson_lam_max\n+        max_lam = np.random.RandomState()._poisson_lam_max\n \n         lam = [1]\n         bad_lam_one = [-1]"
    },
    {
        "commit_id": "2c14e47834262de85673c0b71e94494a5f642268",
        "commit_message": "ENH: Split poisson_lam_max\n\nUse type-dependent poisson lam max\nMake private\nFix backward compat issue in loggam",
        "commit_url": "https://github.com/numpy/numpy/commit/2c14e47834262de85673c0b71e94494a5f642268",
        "buggy_code": "max_lam = random.RandomState().poisson_lam_max",
        "fixed_code": "max_lam = random.RandomState()._poisson_lam_max",
        "patch": "@@ -1693,7 +1693,7 @@ def test_negative_binomial(self):\n         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)\n \n     def test_poisson(self):\n-        max_lam = random.RandomState().poisson_lam_max\n+        max_lam = random.RandomState()._poisson_lam_max\n \n         lam = [1]\n         bad_lam_one = [-1]"
    },
    {
        "commit_id": "9b89cfd2f0364151cc6a23806b2b03bc09e16035",
        "commit_message": "Merge pull request #13558 from seberg/py38-compat\n\nMAINT: Fix errors seen on new python 3.8",
        "commit_url": "https://github.com/numpy/numpy/commit/9b89cfd2f0364151cc6a23806b2b03bc09e16035",
        "buggy_code": "if \"testing/tests/test_warnings.py\" is self.__filename:",
        "fixed_code": "if \"testing/tests/test_warnings.py\" == self.__filename:",
        "patch": "@@ -44,7 +44,7 @@ def visit_Call(self, node):\n             if p.ls[-1] == 'warn' and (\n                     len(p.ls) == 1 or p.ls[-2] == 'warnings'):\n \n-                if \"testing/tests/test_warnings.py\" is self.__filename:\n+                if \"testing/tests/test_warnings.py\" == self.__filename:\n                     # This file\n                     return\n "
    },
    {
        "commit_id": "2895dab41944b2f28c130533b91ed4e55fd54b58",
        "commit_message": "Merge pull request #13574 from belm0/patch-1\n\nDOC: remove performance claim from searchsorted()",
        "commit_url": "https://github.com/numpy/numpy/commit/2895dab41944b2f28c130533b91ed4e55fd54b58",
        "buggy_code": "This function is a faster version of the builtin python `bisect.bisect_left`",
        "fixed_code": "This function uses the same algorithm as the builtin python `bisect.bisect_left`",
        "patch": "@@ -1279,7 +1279,7 @@ def searchsorted(a, v, side='left', sorter=None):\n     As of NumPy 1.4.0 `searchsorted` works with real/complex arrays containing\n     `nan` values. The enhanced sort order is documented in `sort`.\n \n-    This function is a faster version of the builtin python `bisect.bisect_left`\n+    This function uses the same algorithm as the builtin python `bisect.bisect_left`\n     (``side='left'``) and `bisect.bisect_right` (``side='right'``) functions,\n     which is also vectorized in the `v` argument.\n "
    },
    {
        "commit_id": "9cdd0cb1967891c650fa5964b2cd683bbbb81f8a",
        "commit_message": "MAINT: Fix errors seen on new python 3.8\n\nOne of this is a small issue exposed by new warnings, the others are\nsimply adapting our test suit to stricter integer coercion rules\n(avoiding float -> int conversions).\n\nThe last one is that we assumed pickle protocol 5 would be in 3.8.\nIt is not yet included in the alpha releases at least.\nIt seems not necessary for the numpy test suit to check whether\nit is available based on the python version so removing that test.\n(Also testing if the pickle5 module works seems unnecessary.)\n\nCloses gh-13412",
        "commit_url": "https://github.com/numpy/numpy/commit/9cdd0cb1967891c650fa5964b2cd683bbbb81f8a",
        "buggy_code": "if \"testing/tests/test_warnings.py\" is self.__filename:",
        "fixed_code": "if \"testing/tests/test_warnings.py\" == self.__filename:",
        "patch": "@@ -44,7 +44,7 @@ def visit_Call(self, node):\n             if p.ls[-1] == 'warn' and (\n                     len(p.ls) == 1 or p.ls[-2] == 'warnings'):\n \n-                if \"testing/tests/test_warnings.py\" is self.__filename:\n+                if \"testing/tests/test_warnings.py\" == self.__filename:\n                     # This file\n                     return\n "
    },
    {
        "commit_id": "73e545e8ab277c2baef7c025b1df21496ccce7c1",
        "commit_message": "Merge pull request #13599 from javidcf/patch-1\n\nDOC: Fixed minor doc error in take_along_axis",
        "commit_url": "https://github.com/numpy/numpy/commit/73e545e8ab277c2baef7c025b1df21496ccce7c1",
        "buggy_code": "out = np.empty(Nk + (J,) + Nk)",
        "fixed_code": "out = np.empty(Ni + (J,) + Nk)",
        "patch": "@@ -94,7 +94,7 @@ def take_along_axis(arr, indices, axis):\n \n         Ni, M, Nk = a.shape[:axis], a.shape[axis], a.shape[axis+1:]\n         J = indices.shape[axis]  # Need not equal M\n-        out = np.empty(Nk + (J,) + Nk)\n+        out = np.empty(Ni + (J,) + Nk)\n \n         for ii in ndindex(Ni):\n             for kk in ndindex(Nk):"
    },
    {
        "commit_id": "62301b08a4cd2a3c3cd214f89faa72f12b68dbf3",
        "commit_message": "Fixed minor doc error in take_along_axis\n\nFixes #13598",
        "commit_url": "https://github.com/numpy/numpy/commit/62301b08a4cd2a3c3cd214f89faa72f12b68dbf3",
        "buggy_code": "out = np.empty(Nk + (J,) + Nk)",
        "fixed_code": "out = np.empty(Ni + (J,) + Nk)",
        "patch": "@@ -94,7 +94,7 @@ def take_along_axis(arr, indices, axis):\n \n         Ni, M, Nk = a.shape[:axis], a.shape[axis], a.shape[axis+1:]\n         J = indices.shape[axis]  # Need not equal M\n-        out = np.empty(Nk + (J,) + Nk)\n+        out = np.empty(Ni + (J,) + Nk)\n \n         for ii in ndindex(Ni):\n             for kk in ndindex(Nk):"
    },
    {
        "commit_id": "f9c1502e7ace9b48f0256a77c560aae43763a1f2",
        "commit_message": "BUG: Increment stacklevel for warnings to account for NEP-18 overrides (#13589)\n\n* Increment stacklevel for warnings to account for NEP-18 overrides\r\n\r\nFor NumPy functions that make use of `__array_function__`, the appropriate the\r\nstack level for warnings should generally be increased by 1 to account for\r\nthe override function defined in numpy.core.overrides.\r\n\r\nFixes GH-13329\r\n\r\n* Update numpy/lib/type_check.py\r\n\r\nCo-Authored-By: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c1502e7ace9b48f0256a77c560aae43763a1f2",
        "buggy_code": "warnings.warn(msg, RankWarning, stacklevel=3)",
        "fixed_code": "warnings.warn(msg, RankWarning, stacklevel=4)",
        "patch": "@@ -634,7 +634,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n     # warn on rank reduction, which indicates an ill conditioned matrix\n     if rank != order and not full:\n         msg = \"Polyfit may be poorly conditioned\"\n-        warnings.warn(msg, RankWarning, stacklevel=3)\n+        warnings.warn(msg, RankWarning, stacklevel=4)\n \n     if full:\n         return c, resids, rank, s, rcond"
    },
    {
        "commit_id": "f9c1502e7ace9b48f0256a77c560aae43763a1f2",
        "commit_message": "BUG: Increment stacklevel for warnings to account for NEP-18 overrides (#13589)\n\n* Increment stacklevel for warnings to account for NEP-18 overrides\r\n\r\nFor NumPy functions that make use of `__array_function__`, the appropriate the\r\nstack level for warnings should generally be increased by 1 to account for\r\nthe override function defined in numpy.core.overrides.\r\n\r\nFixes GH-13329\r\n\r\n* Update numpy/lib/type_check.py\r\n\r\nCo-Authored-By: Sebastian Berg <sebastian@sipsolutions.net>",
        "commit_url": "https://github.com/numpy/numpy/commit/f9c1502e7ace9b48f0256a77c560aae43763a1f2",
        "buggy_code": "DeprecationWarning, stacklevel=2)",
        "fixed_code": "DeprecationWarning, stacklevel=3)",
        "patch": "@@ -578,7 +578,7 @@ def expand_dims(a, axis):\n         # 2017-05-17, 1.13.0\n         warnings.warn(\"Both axis > a.ndim and axis < -a.ndim - 1 are \"\n                       \"deprecated and will raise an AxisError in the future.\",\n-                      DeprecationWarning, stacklevel=2)\n+                      DeprecationWarning, stacklevel=3)\n     # When the deprecation period expires, delete this if block,\n     if axis < 0:\n         axis = axis + a.ndim + 1"
    },
    {
        "commit_id": "9578dcfbe744854312690ea79063e50d67fc88a2",
        "commit_message": "BUG: __dealloc__ can be called without __init__ in some error modes\n\nskip doctests that require scipy\nmove original mtrand module to _mtrand\nadjust documentation for namespace change",
        "commit_url": "https://github.com/numpy/numpy/commit/9578dcfbe744854312690ea79063e50d67fc88a2",
        "buggy_code": "['mtrand.c', 'randomkit.c', 'initarray.c',",
        "fixed_code": "['_mtrand.c', 'randomkit.c', 'initarray.c',",
        "patch": "@@ -48,7 +48,7 @@ def generate_libraries(ext, build_dir):\n     # Configure mtrand\n     config.add_extension('_mtrand',\n                          sources=[join('_mtrand', x) for x in\n-                                  ['mtrand.c', 'randomkit.c', 'initarray.c',\n+                                  ['_mtrand.c', 'randomkit.c', 'initarray.c',\n                                    'distributions.c']]+[generate_libraries],\n                          libraries=libs,\n                          depends=[join('_mtrand', '*.h'),"
    },
    {
        "commit_id": "c53b2eb729bae1f248a2654dfcfa4a3dd3e2902b",
        "commit_message": "BENCH: convert bencmarks to asv format\n\nremove files that were part of the origal repo\nrework randomgen docs to integrate with numpy and fix some links\nremove convenience functions, require explicit call to gen.brng\nmove code out of numpy.random.randomgen into numpy.random",
        "commit_url": "https://github.com/numpy/numpy/commit/c53b2eb729bae1f248a2654dfcfa4a3dd3e2902b",
        "buggy_code": "from ...randomgen import MT19937, Xoshiro256StarStar, mtrand as random",
        "fixed_code": "from numpy.random import MT19937, Xoshiro256StarStar, mtrand as random",
        "patch": "@@ -9,7 +9,7 @@\n         suppress_warnings\n         )\n \n-from ...randomgen import MT19937, Xoshiro256StarStar, mtrand as random\n+from numpy.random import MT19937, Xoshiro256StarStar, mtrand as random\n \n \n def assert_mt19937_state_equal(a, b):"
    },
    {
        "commit_id": "c53b2eb729bae1f248a2654dfcfa4a3dd3e2902b",
        "commit_message": "BENCH: convert bencmarks to asv format\n\nremove files that were part of the origal repo\nrework randomgen docs to integrate with numpy and fix some links\nremove convenience functions, require explicit call to gen.brng\nmove code out of numpy.random.randomgen into numpy.random",
        "commit_url": "https://github.com/numpy/numpy/commit/c53b2eb729bae1f248a2654dfcfa4a3dd3e2902b",
        "buggy_code": "from ...randomgen import mtrand as random",
        "fixed_code": "from numpy.random import mtrand as random",
        "patch": "@@ -5,7 +5,7 @@\n from numpy.compat import long\n import numpy as np\n \n-from ...randomgen import mtrand as random\n+from numpy.random import mtrand as random\n \n \n class TestRegression(object):"
    },
    {
        "commit_id": "fa8af41c9d375072b2c7af66e5f7f01df4754841",
        "commit_message": "BUILD: move files out of _randomgen\n\nfirst cut at building randomgen\nupgrade 'cythonize' and fix absolute imports to relative\ndefine NPY_NO_DEPRECATED_API and fix other warnings\nenable pgc64 by always using PCG_EMULATED_MATH\nrefactor so import randomgen works\nadd TODO comments for pcg64 improvements\nfix imports, module name in setup.py; remove _testing\nmake cythonize non-recursive, restore examples to proper place\nupdate to randomgen 7bca296c0b9\nreplace mtrand with LegacyGenerator, tweak for compatibility\nport f879ef4 to fix GH10839\nminimized difference between generator.pyx and _legacy.pyx\nfix namespace in doctests, mark results that are random\nupdate to randomgen commit 95c8cdd1c\nIncorporate testing of edge cases into main tests\nRename test files to describe their purpose\nImport import locations to reflect numpy paths\nCorrect tolerance on float32 tests\nRemove set_printoptions\nRemove complex normal\nRemove future imports\nPull in BasicRNG source changes from original author\nSmall doc fixes\n_mtrand => _rand\nImprove consistency of nan handling\nPrevent nans prducing values from int functions\nadd randomgen documentation to the tree",
        "commit_url": "https://github.com/numpy/numpy/commit/fa8af41c9d375072b2c7af66e5f7f01df4754841",
        "buggy_code": "bounded_uint(323, 2394691, s.value)",
        "fixed_code": "print(bounded_uint(323, 2394691, s.value))",
        "patch": "@@ -26,7 +26,7 @@ def bounded_uint(lb, ub, state):\n     return lb + val\n \n \n-bounded_uint(323, 2394691, s.value)\n+print(bounded_uint(323, 2394691, s.value))\n \n \n @nb.jit(nopython=True)"
    },
    {
        "commit_id": "d780f063790a27bdac1750da70bda3a10c101851",
        "commit_message": "DOC: Fix doc and example error\n\nEnsure cython example works\nAdd cimport for cython example",
        "commit_url": "https://github.com/numpy/numpy/commit/d780f063790a27bdac1750da70bda3a10c101851",
        "buggy_code": "join('..', '..', 'randomgen', 'src',",
        "fixed_code": "join('..', '..', '..', 'randomgen', 'src',",
        "patch": "@@ -10,7 +10,7 @@\n                       include_dirs=[np.get_include()])\n distributions = Extension(\"extending_distributions\",\n                           sources=['extending_distributions.pyx',\n-                                   join('..', '..', 'randomgen', 'src',\n+                                   join('..', '..', '..', 'randomgen', 'src',\n                                         'distributions', 'distributions.c')],\n                           include_dirs=[np.get_include()])\n "
    },
    {
        "commit_id": "75025d98a85feff614644044e40a3f47e2285d86",
        "commit_message": "TST: Fix tailing test on 32bit platofrms\n\nRelax check for 32 bit platforms",
        "commit_url": "https://github.com/numpy/numpy/commit/75025d98a85feff614644044e40a3f47e2285d86",
        "buggy_code": "assert (state[4] == state2['gauss'])",
        "fixed_code": "assert_allclose(state[4], state2['gauss'], atol=1e-10)",
        "patch": "@@ -128,7 +128,7 @@ def _is_state_common_legacy(self):\n         assert (state[1] == state2['state']['key']).all()\n         assert (state[2] == state2['state']['pos'])\n         assert (state[3] == state2['has_gauss'])\n-        assert (state[4] == state2['gauss'])\n+        assert_allclose(state[4], state2['gauss'], atol=1e-10)\n \n     def test_common_seed(self):\n         self.rg.seed(1234)"
    },
    {
        "commit_id": "a85ee48f215189577583570085a282175628cce3",
        "commit_message": "BUG: Fix failing test\n\nCorrect list of expected methods\nRename random_sample to random_double to allow random_sample to be used by Python",
        "commit_url": "https://github.com/numpy/numpy/commit/a85ee48f215189577583570085a282175628cce3",
        "buggy_code": "'random_integers', 'random_raw', 'random_uintegers', 'rayleigh', 'state', 'sample', 'shuffle',",
        "fixed_code": "'random_integers', 'random_raw', 'random_sample', 'random_uintegers', 'rayleigh', 'state', 'shuffle',",
        "patch": "@@ -15,7 +15,7 @@\n            'gamma', 'geometric', 'gumbel', 'hypergeometric', 'laplace', 'logistic', 'lognormal', 'logseries',\n            'multinomial', 'multivariate_normal', 'negative_binomial', 'noncentral_chisquare', 'noncentral_f',\n            'normal', 'permutation', 'pareto', 'poisson', 'power', 'rand', 'randint', 'randn',\n-           'random_integers', 'random_raw', 'random_uintegers', 'rayleigh', 'state', 'sample', 'shuffle',\n+           'random_integers', 'random_raw', 'random_sample', 'random_uintegers', 'rayleigh', 'state', 'shuffle',\n            'standard_cauchy', 'standard_exponential', 'standard_gamma', 'standard_normal', 'standard_t',\n            'tomaxint', 'triangular', 'uniform', 'vonmises', 'wald', 'weibull', 'zipf']\n "
    },
    {
        "commit_id": "ed825fb2823c60de45950cab286ccc5cf9a2cdcb",
        "commit_message": "BUG: Restore the old non-object behavior for min > max\n\nThis changes the object array behavior to match the other behavior",
        "commit_url": "https://github.com/numpy/numpy/commit/ed825fb2823c60de45950cab286ccc5cf9a2cdcb",
        "buggy_code": "Equivalent to but faster than ``np.maximum(a_min, np.minimum(a, a_max))``.",
        "fixed_code": "Equivalent to but faster than ``np.minimum(np.maximum(a, a_min), a_max)``.",
        "patch": "@@ -2550,7 +2550,7 @@ def add_newdoc(place, name, doc):\n     is specified, values smaller than 0 become 0, and values larger\n     than 1 become 1.\n \n-    Equivalent to but faster than ``np.maximum(a_min, np.minimum(a, a_max))``.\n+    Equivalent to but faster than ``np.minimum(np.maximum(a, a_min), a_max)``.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "aa04be9e443e7c087c10989559af24e5ab6459f0",
        "commit_message": "Merge upstream branch 'master' of https://github.com/numpy/numpy into fix-genfromtxt",
        "commit_url": "https://github.com/numpy/numpy/commit/aa04be9e443e7c087c10989559af24e5ab6459f0",
        "buggy_code": "def argsort(self, axis=-1, kind='quicksort', order=None):",
        "fixed_code": "def argsort(self, axis=-1, kind=None, order=None):",
        "patch": "@@ -2124,7 +2124,7 @@ def __mod__(self, i):\n     def __rmod__(self, other):\n         return NotImplemented\n \n-    def argsort(self, axis=-1, kind='quicksort', order=None):\n+    def argsort(self, axis=-1, kind=None, order=None):\n         \"\"\"\n         Return the indices that sort the array lexicographically.\n "
    },
    {
        "commit_id": "aa04be9e443e7c087c10989559af24e5ab6459f0",
        "commit_message": "Merge upstream branch 'master' of https://github.com/numpy/numpy into fix-genfromtxt",
        "commit_url": "https://github.com/numpy/numpy/commit/aa04be9e443e7c087c10989559af24e5ab6459f0",
        "buggy_code": "\"\"\"Emits a MismacthCAPIWarning if the C API version needs updating.\"\"\"",
        "fixed_code": "\"\"\"Emits a MismatchCAPIWarning if the C API version needs updating.\"\"\"",
        "patch": "@@ -81,7 +81,7 @@ def get_api_versions(apiversion, codegen_dir):\n     return curapi_hash, apis_hash[apiversion]\n \n def check_api_version(apiversion, codegen_dir):\n-    \"\"\"Emits a MismacthCAPIWarning if the C API version needs updating.\"\"\"\n+    \"\"\"Emits a MismatchCAPIWarning if the C API version needs updating.\"\"\"\n     curapi_hash, api_hash = get_api_versions(apiversion, codegen_dir)\n \n     # If different hash, it means that the api .txt files in"
    },
    {
        "commit_id": "aa04be9e443e7c087c10989559af24e5ab6459f0",
        "commit_message": "Merge upstream branch 'master' of https://github.com/numpy/numpy into fix-genfromtxt",
        "commit_url": "https://github.com/numpy/numpy/commit/aa04be9e443e7c087c10989559af24e5ab6459f0",
        "buggy_code": "except (NameError, SyntaxError):",
        "fixed_code": "except (NameError, SyntaxError, TypeError):",
        "patch": "@@ -2512,7 +2512,7 @@ def _eval_scalar(value, params):\n         value = value.split('_')[0]\n     try:\n         value = str(eval(value, {}, params))\n-    except (NameError, SyntaxError):\n+    except (NameError, SyntaxError, TypeError):\n         return value\n     except Exception as msg:\n         errmess('\"%s\" in evaluating %r '"
    },
    {
        "commit_id": "fa709605401b5acde6fa515239ba29a548c53755",
        "commit_message": "BUG: parametrize tests, fix for interaction of count, order",
        "commit_url": "https://github.com/numpy/numpy/commit/fa709605401b5acde6fa515239ba29a548c53755",
        "buggy_code": "where 3 => [0, 0, 0, 0, 0, 1, 1]",
        "fixed_code": "where [0, 0, 0, 0, 0, 1, 1] => 3",
        "patch": "@@ -1132,7 +1132,7 @@ def packbits(a, axis=None, order='big'):\n         ``None`` implies packing the flattened array.\n     order : 'big' or 'little', only the first letter is checked\n         The order of the returned bits. The default is the common standard\n-        where 3 => [0, 0, 0, 0, 0, 1, 1]\n+        where [0, 0, 0, 0, 0, 1, 1] => 3\n \n         .. versionadded:: 1.17.0\n "
    },
    {
        "commit_id": "bf20e3034085716c4559ec4bf31b23b6016f266c",
        "commit_message": "Merge pull request #13496 from peterbell10/ma-tostring-order\n\nBUG: ma.tostring should respect the order parameter",
        "commit_url": "https://github.com/numpy/numpy/commit/bf20e3034085716c4559ec4bf31b23b6016f266c",
        "buggy_code": "return self.tobytes(fill_value, order='C')",
        "fixed_code": "return self.tobytes(fill_value, order=order)",
        "patch": "@@ -5935,7 +5935,7 @@ def tostring(self, fill_value=None, order='C'):\n         returns bytes not strings.\n         \"\"\"\n \n-        return self.tobytes(fill_value, order='C')\n+        return self.tobytes(fill_value, order=order)\n \n     def tobytes(self, fill_value=None, order='C'):\n         \"\"\""
    },
    {
        "commit_id": "fad2ad1631774690e594e076cf07613a072ca980",
        "commit_message": "BUG: ma.tostring should respect the order parameter",
        "commit_url": "https://github.com/numpy/numpy/commit/fad2ad1631774690e594e076cf07613a072ca980",
        "buggy_code": "return self.tobytes(fill_value, order='C')",
        "fixed_code": "return self.tobytes(fill_value, order=order)",
        "patch": "@@ -5935,7 +5935,7 @@ def tostring(self, fill_value=None, order='C'):\n         returns bytes not strings.\n         \"\"\"\n \n-        return self.tobytes(fill_value, order='C')\n+        return self.tobytes(fill_value, order=order)\n \n     def tobytes(self, fill_value=None, order='C'):\n         \"\"\""
    },
    {
        "commit_id": "4b6b29afc06a639975d08f2e95dc3e1c36486188",
        "commit_message": "Merge pull request #13449 from mattip/exception\n\nBUG: missing git raises an OSError",
        "commit_url": "https://github.com/numpy/numpy/commit/4b6b29afc06a639975d08f2e95dc3e1c36486188",
        "buggy_code": "except subprocess.SubprocessError:",
        "fixed_code": "except (subprocess.SubprocessError, OSError):",
        "patch": "@@ -79,7 +79,7 @@ def _minimal_ext_cmd(cmd):\n     try:\n         out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])\n         GIT_REVISION = out.strip().decode('ascii')\n-    except subprocess.SubprocessError:\n+    except (subprocess.SubprocessError, OSError):\n         GIT_REVISION = \"Unknown\"\n \n     return GIT_REVISION"
    },
    {
        "commit_id": "1f1e8f94ea343084889bae2e9081c3fa3d581b65",
        "commit_message": "BUG: missing git raises an OSError",
        "commit_url": "https://github.com/numpy/numpy/commit/1f1e8f94ea343084889bae2e9081c3fa3d581b65",
        "buggy_code": "except subprocess.SubprocessError:",
        "fixed_code": "except (subprocess.SubprocessError, OSError):",
        "patch": "@@ -79,7 +79,7 @@ def _minimal_ext_cmd(cmd):\n     try:\n         out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])\n         GIT_REVISION = out.strip().decode('ascii')\n-    except subprocess.SubprocessError:\n+    except (subprocess.SubprocessError, OSError):\n         GIT_REVISION = \"Unknown\"\n \n     return GIT_REVISION"
    },
    {
        "commit_id": "fb9df20d0eb4053356525f1c6e85af09e2ba4a5e",
        "commit_message": "Merge pull request #13435 from mattip/crack-fortran\n\nBUG: blindly add TypeError to accepted exceptions",
        "commit_url": "https://github.com/numpy/numpy/commit/fb9df20d0eb4053356525f1c6e85af09e2ba4a5e",
        "buggy_code": "except (NameError, SyntaxError):",
        "fixed_code": "except (NameError, SyntaxError, TypeError):",
        "patch": "@@ -2512,7 +2512,7 @@ def _eval_scalar(value, params):\n         value = value.split('_')[0]\n     try:\n         value = str(eval(value, {}, params))\n-    except (NameError, SyntaxError):\n+    except (NameError, SyntaxError, TypeError):\n         return value\n     except Exception as msg:\n         errmess('\"%s\" in evaluating %r '"
    },
    {
        "commit_id": "76b83a7e49fc954ae79950da6e4481904a3f1a1c",
        "commit_message": "BUG: blindly add TypeError to accepted exceptions",
        "commit_url": "https://github.com/numpy/numpy/commit/76b83a7e49fc954ae79950da6e4481904a3f1a1c",
        "buggy_code": "except (NameError, SyntaxError):",
        "fixed_code": "except (NameError, SyntaxError, TypeError):",
        "patch": "@@ -2512,7 +2512,7 @@ def _eval_scalar(value, params):\n         value = value.split('_')[0]\n     try:\n         value = str(eval(value, {}, params))\n-    except (NameError, SyntaxError):\n+    except (NameError, SyntaxError, TypeError):\n         return value\n     except Exception as msg:\n         errmess('\"%s\" in evaluating %r '"
    },
    {
        "commit_id": "06fb13dc9ce85300c35062d50e910b36b67233f0",
        "commit_message": "BUG: test and fix np.dtype('i,L')",
        "commit_url": "https://github.com/numpy/numpy/commit/06fb13dc9ce85300c35062d50e910b36b67233f0",
        "buggy_code": "br'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'",
        "fixed_code": "br'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'",
        "patch": "@@ -146,7 +146,7 @@ def _reconstruct(subtype, shape, dtype):\n # format_re was originally from numarray by J. Todd Miller\n \n format_re = re.compile(br'(?P<order1>[<>|=]?)'\n-                       br'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'\n+                       br'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'\n                        br'(?P<order2>[<>|=]?)'\n                        br'(?P<dtype>[A-Za-z0-9.?]*(?:\\[[a-zA-Z0-9,.]+\\])?)')\n sep_re = re.compile(br'\\s*,\\s*')"
    },
    {
        "commit_id": "178a53fccc4dc7990e59915ef8b666a9cf7e2ef0",
        "commit_message": "BUG: fixed PYTHONOPTIMIZE run\n\nSigned-off-by: Nick Papior <nickpapior@gmail.com>",
        "commit_url": "https://github.com/numpy/numpy/commit/178a53fccc4dc7990e59915ef8b666a9cf7e2ef0",
        "buggy_code": "warnings.warn(BlasOptNotFoundError.__doc__, stacklevel=3)",
        "fixed_code": "warnings.warn(BlasOptNotFoundError.__doc__ or '', stacklevel=3)",
        "patch": "@@ -1712,7 +1712,7 @@ def _calc_info_accelerate(self):\n \n     def _calc_info_blas(self):\n         # Warn about a non-optimized BLAS library\n-        warnings.warn(BlasOptNotFoundError.__doc__, stacklevel=3)\n+        warnings.warn(BlasOptNotFoundError.__doc__ or '', stacklevel=3)\n         info = {}\n         dict_append(info, define_macros=[('NO_ATLAS_INFO', 1)])\n "
    },
    {
        "commit_id": "ff99a67e13ca1b07d7399b0586e8c265ed0a5f76",
        "commit_message": "Merge pull request #13425 from minho42/fix-typo\n\nMAINT: fixed typo 'Mismacth' from numpy/core/setup_common.py",
        "commit_url": "https://github.com/numpy/numpy/commit/ff99a67e13ca1b07d7399b0586e8c265ed0a5f76",
        "buggy_code": "\"\"\"Emits a MismacthCAPIWarning if the C API version needs updating.\"\"\"",
        "fixed_code": "\"\"\"Emits a MismatchCAPIWarning if the C API version needs updating.\"\"\"",
        "patch": "@@ -81,7 +81,7 @@ def get_api_versions(apiversion, codegen_dir):\n     return curapi_hash, apis_hash[apiversion]\n \n def check_api_version(apiversion, codegen_dir):\n-    \"\"\"Emits a MismacthCAPIWarning if the C API version needs updating.\"\"\"\n+    \"\"\"Emits a MismatchCAPIWarning if the C API version needs updating.\"\"\"\n     curapi_hash, api_hash = get_api_versions(apiversion, codegen_dir)\n \n     # If different hash, it means that the api .txt files in"
    },
    {
        "commit_id": "bf1e9b747db5b0ccee6fe58c92a4d0adee2c2063",
        "commit_message": "Merge pull request #13409 from seberg/fix-unicode-fmt-savetxt\n\nBUG: (py2 only) fix unicode support for savetxt fmt string",
        "commit_url": "https://github.com/numpy/numpy/commit/bf1e9b747db5b0ccee6fe58c92a4d0adee2c2063",
        "buggy_code": "elif isinstance(fmt, str):",
        "fixed_code": "elif isinstance(fmt, basestring):",
        "patch": "@@ -1399,7 +1399,7 @@ def first_write(self, v):\n             if len(fmt) != ncol:\n                 raise AttributeError('fmt has wrong shape.  %s' % str(fmt))\n             format = asstr(delimiter).join(map(asstr, fmt))\n-        elif isinstance(fmt, str):\n+        elif isinstance(fmt, basestring):\n             n_fmt_chars = fmt.count('%')\n             error = ValueError('fmt has wrong number of %% formats:  %s' % fmt)\n             if n_fmt_chars == 1:"
    },
    {
        "commit_id": "59a521ee07693cc5c58d68987691df4bcc9e48ff",
        "commit_message": "BUG: (py2 only) fix unicode support for savetxt fmt string\n\nBy now, all that is needed is to also allow unicode strings to\npass through. Adds a test for the support which already succeeds\non python3.\n\nCloses gh-4053 (replaces the old PR)",
        "commit_url": "https://github.com/numpy/numpy/commit/59a521ee07693cc5c58d68987691df4bcc9e48ff",
        "buggy_code": "elif isinstance(fmt, str):",
        "fixed_code": "elif isinstance(fmt, basestring):",
        "patch": "@@ -1390,7 +1390,7 @@ def first_write(self, v):\n             if len(fmt) != ncol:\n                 raise AttributeError('fmt has wrong shape.  %s' % str(fmt))\n             format = asstr(delimiter).join(map(asstr, fmt))\n-        elif isinstance(fmt, str):\n+        elif isinstance(fmt, basestring):\n             n_fmt_chars = fmt.count('%')\n             error = ValueError('fmt has wrong number of %% formats:  %s' % fmt)\n             if n_fmt_chars == 1:"
    },
    {
        "commit_id": "171a3e5811e43643788c20075be9ba52efb83b81",
        "commit_message": "Merge pull request #13334 from eric-wieser/fix-1-field-unstructured\n\nBUG: Fix structured_to_unstructured on single-field types",
        "commit_url": "https://github.com/numpy/numpy/commit/171a3e5811e43643788c20075be9ba52efb83b81",
        "buggy_code": "return arr.view((out_dtype, sum(counts)))",
        "fixed_code": "return arr.view((out_dtype, (sum(counts),)))",
        "patch": "@@ -980,7 +980,7 @@ def structured_to_unstructured(arr, dtype=None, copy=False, casting='unsafe'):\n     arr = arr.astype(packed_fields, copy=copy, casting=casting)\n \n     # finally is it safe to view the packed fields as the unstructured type\n-    return arr.view((out_dtype, sum(counts)))\n+    return arr.view((out_dtype, (sum(counts),)))\n \n def _unstructured_to_structured_dispatcher(arr, dtype=None, names=None,\n                                            align=None, copy=None, casting=None):"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "np.linalg.lstsq(self.a, self.b)",
        "fixed_code": "np.linalg.lstsq(self.a, self.b, rcond=-1)",
        "patch": "@@ -106,4 +106,4 @@ def setup(self):\n         self.b = get_indexes_rand()[:100].astype(np.float64)\n \n     def time_numpy_linalg_lstsq_a__b_float64(self):\n-        np.linalg.lstsq(self.a, self.b)\n+        np.linalg.lstsq(self.a, self.b, rcond=-1)"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "self.ones = np.full(100000, 0, bool)",
        "fixed_code": "self.ones = np.full(100000, 1, bool)",
        "patch": "@@ -32,7 +32,7 @@ def setup(self):\n         # avoid np.zeros's lazy allocation that would\n         # cause page faults during benchmark\n         self.zeros = np.full(100000, 0, bool)\n-        self.ones = np.full(100000, 0, bool)\n+        self.ones = np.full(100000, 1, bool)\n \n     def time_all_fast(self):\n         self.zeros.all()"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "'logical_xor', 'maximum', 'minimum', 'mod', 'modf', 'multiply',",
        "fixed_code": "'logical_xor', 'matmul', 'maximum', 'minimum', 'mod', 'modf', 'multiply',",
        "patch": "@@ -15,7 +15,7 @@\n           'isinf', 'isnan', 'isnat', 'lcm', 'ldexp', 'left_shift', 'less',\n           'less_equal', 'log', 'log10', 'log1p', 'log2', 'logaddexp',\n           'logaddexp2', 'logical_and', 'logical_not', 'logical_or',\n-          'logical_xor', 'maximum', 'minimum', 'mod', 'modf', 'multiply',\n+          'logical_xor', 'matmul', 'maximum', 'minimum', 'mod', 'modf', 'multiply',\n           'negative', 'nextafter', 'not_equal', 'positive', 'power',\n           'rad2deg', 'radians', 'reciprocal', 'remainder', 'right_shift',\n           'rint', 'sign', 'signbit', 'sin', 'sinh', 'spacing', 'sqrt',"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "copyright = '2008-2018, The SciPy community'",
        "fixed_code": "copyright = '2008-2019, The SciPy community'",
        "patch": "@@ -39,7 +39,7 @@\n \n # General substitutions.\n project = 'NumPy'\n-copyright = '2008-2018, The SciPy community'\n+copyright = '2008-2019, The SciPy community'\n \n # The default replacements for |version| and |release|, also used in various\n # other places throughout the built documents."
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "_concrete_types = set(v.type for k, v in _concrete_typeinfo.items())",
        "fixed_code": "_concrete_types = {v.type for k, v in _concrete_typeinfo.items()}",
        "patch": "@@ -60,7 +60,7 @@ def get(self, key, default=None):\n     else:\n         _concrete_typeinfo[k] = v\n \n-_concrete_types = set(v.type for k, v in _concrete_typeinfo.items())\n+_concrete_types = {v.type for k, v in _concrete_typeinfo.items()}\n \n \n def _bits_of(obj):"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "from numpy.core.numeric import errstate",
        "fixed_code": "from numpy.core._ufunc_config import errstate",
        "patch": "@@ -10,7 +10,7 @@\n __all__ = ['MachAr']\n \n from numpy.core.fromnumeric import any\n-from numpy.core.numeric import errstate\n+from numpy.core._ufunc_config import errstate\n from numpy.core.overrides import set_module\n \n # Need to speed this up...especially for longfloat"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": ">>> run_module_suite(file_to_run=\"numpy/tests/test_matlib.py\")",
        "fixed_code": ">>> run_module_suite(file_to_run=\"numpy/tests/test_matlib.py\")  # doctest: +SKIP",
        "patch": "@@ -92,7 +92,7 @@ def run_module_suite(file_to_run=None, argv=None):\n \n     Alternatively, calling::\n \n-    >>> run_module_suite(file_to_run=\"numpy/tests/test_matlib.py\")\n+    >>> run_module_suite(file_to_run=\"numpy/tests/test_matlib.py\")  # doctest: +SKIP\n \n     from an interpreter will run all the test routine in 'test_matlib.py'.\n     \"\"\""
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "seen_arg_names = set([ n for (n, _) in result ])",
        "fixed_code": "seen_arg_names = {n for (n, _) in result}",
        "patch": "@@ -190,7 +190,7 @@ def parameterized_argument_value_pairs(func, p):\n         in zip(named_args, argspec.defaults or [])\n     ])\n \n-    seen_arg_names = set([ n for (n, _) in result ])\n+    seen_arg_names = {n for (n, _) in result}\n     keywords = QuietOrderedDict(sorted([\n         (name, p.kwargs[name])\n         for name in p.kwargs"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "import nose",
        "fixed_code": "import nose  # noqa: F401",
        "patch": "@@ -13,7 +13,7 @@\n \n \n try:\n-    import nose\n+    import nose  # noqa: F401\n except ImportError:\n     HAVE_NOSE = False\n else:"
    },
    {
        "commit_id": "20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into fix-1-field-unstructured",
        "commit_url": "https://github.com/numpy/numpy/commit/20472595f5b9f4b2fcfedcf6aae9684f95af1c8c",
        "buggy_code": "from numpy.core.numeric import pickle",
        "fixed_code": "from numpy.compat import pickle",
        "patch": "@@ -3,7 +3,7 @@\n import sys\n \n from numpy.testing import assert_raises, assert_, assert_equal\n-from numpy.core.numeric import pickle\n+from numpy.compat import pickle\n \n if sys.version_info[:2] >= (3, 4):\n     from importlib import reload"
    },
    {
        "commit_id": "8f31f95910d27da75941bbbbde7ef1ecec9b0f74",
        "commit_message": "Merge pull request #12889 from ivanov/no-pickles-for-you\n\nBUG: Make allow_pickle=False the default for loading",
        "commit_url": "https://github.com/numpy/numpy/commit/8f31f95910d27da75941bbbbde7ef1ecec9b0f74",
        "buggy_code": "ca = np.load(f)",
        "fixed_code": "ca = np.load(f, allow_pickle=True)",
        "patch": "@@ -98,7 +98,7 @@ def test_char_dump(self):\n             f = BytesIO()\n             pickle.dump(ca, f, protocol=proto)\n             f.seek(0)\n-            ca = np.load(f)\n+            ca = np.load(f, allow_pickle=True)\n             f.close()\n \n     def test_noncontiguous_fill(self):"
    },
    {
        "commit_id": "8f31f95910d27da75941bbbbde7ef1ecec9b0f74",
        "commit_message": "Merge pull request #12889 from ivanov/no-pickles-for-you\n\nBUG: Make allow_pickle=False the default for loading",
        "commit_url": "https://github.com/numpy/numpy/commit/8f31f95910d27da75941bbbbde7ef1ecec9b0f74",
        "buggy_code": "load_kwds = kwargs.get('load_kwds', {})",
        "fixed_code": "load_kwds = kwargs.get('load_kwds', {\"allow_pickle\": True})",
        "patch": "@@ -87,7 +87,7 @@ def roundtrip(self, save_func, *args, **kwargs):\n \n         \"\"\"\n         save_kwds = kwargs.get('save_kwds', {})\n-        load_kwds = kwargs.get('load_kwds', {})\n+        load_kwds = kwargs.get('load_kwds', {\"allow_pickle\": True})\n         file_on_disk = kwargs.get('file_on_disk', False)\n \n         if file_on_disk:"
    },
    {
        "commit_id": "a4df7e51483c78853bb33814073498fb027aa9d4",
        "commit_message": "BUG: load fails when using pickle without allow_pickle=True\n\na partial mitigation of #12759.\n\nsee also https://nvd.nist.gov/vuln/detail/CVE-2019-6446",
        "commit_url": "https://github.com/numpy/numpy/commit/a4df7e51483c78853bb33814073498fb027aa9d4",
        "buggy_code": "ca = np.load(f)",
        "fixed_code": "ca = np.load(f, allow_pickle=True)",
        "patch": "@@ -98,7 +98,7 @@ def test_char_dump(self):\n             f = BytesIO()\n             pickle.dump(ca, f, protocol=proto)\n             f.seek(0)\n-            ca = np.load(f)\n+            ca = np.load(f, allow_pickle=True)\n             f.close()\n \n     def test_noncontiguous_fill(self):"
    },
    {
        "commit_id": "a4df7e51483c78853bb33814073498fb027aa9d4",
        "commit_message": "BUG: load fails when using pickle without allow_pickle=True\n\na partial mitigation of #12759.\n\nsee also https://nvd.nist.gov/vuln/detail/CVE-2019-6446",
        "commit_url": "https://github.com/numpy/numpy/commit/a4df7e51483c78853bb33814073498fb027aa9d4",
        "buggy_code": "load_kwds = kwargs.get('load_kwds', {})",
        "fixed_code": "load_kwds = kwargs.get('load_kwds', {\"allow_pickle\": True})",
        "patch": "@@ -87,7 +87,7 @@ def roundtrip(self, save_func, *args, **kwargs):\n \n         \"\"\"\n         save_kwds = kwargs.get('save_kwds', {})\n-        load_kwds = kwargs.get('load_kwds', {})\n+        load_kwds = kwargs.get('load_kwds', {\"allow_pickle\": True})\n         file_on_disk = kwargs.get('file_on_disk', False)\n \n         if file_on_disk:"
    },
    {
        "commit_id": "b5895be146cdc3063ffa9ca8ae27b5bcf7992719",
        "commit_message": "BUG: Fix structured_to_unstructured on single-field types\n\nPreviously a single-field type would decay, which is undesirable.\n\nThe included test previously did not pass",
        "commit_url": "https://github.com/numpy/numpy/commit/b5895be146cdc3063ffa9ca8ae27b5bcf7992719",
        "buggy_code": "return arr.view((out_dtype, sum(counts)))",
        "fixed_code": "return arr.view((out_dtype, (sum(counts),)))",
        "patch": "@@ -976,7 +976,7 @@ def structured_to_unstructured(arr, dtype=None, copy=False, casting='unsafe'):\n     arr = arr.astype(packed_fields, copy=copy, casting=casting)\n \n     # finally is it safe to view the packed fields as the unstructured type\n-    return arr.view((out_dtype, sum(counts)))\n+    return arr.view((out_dtype, (sum(counts),)))\n \n def _unstructured_to_structured_dispatcher(arr, dtype=None, names=None,\n                                            align=None, copy=None, casting=None):"
    },
    {
        "commit_id": "cc94f360febdef0e6c4183c50555ba82e60ccff6",
        "commit_message": "Merge pull request #13331 from rgommers/fix-docs\n\nDOC, BLD: fix doc build issues in preparation for the next numpydoc release",
        "commit_url": "https://github.com/numpy/numpy/commit/cc94f360febdef0e6c4183c50555ba82e60ccff6",
        "buggy_code": "std , mean, nanmean, nanstd, nanvar",
        "fixed_code": "std, mean, nanmean, nanstd, nanvar",
        "patch": "@@ -3406,7 +3406,7 @@ def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):\n \n     See Also\n     --------\n-    std , mean, nanmean, nanstd, nanvar\n+    std, mean, nanmean, nanstd, nanvar\n     numpy.doc.ufuncs : Section \"Output arguments\"\n \n     Notes"
    },
    {
        "commit_id": "cc94f360febdef0e6c4183c50555ba82e60ccff6",
        "commit_message": "Merge pull request #13331 from rgommers/fix-docs\n\nDOC, BLD: fix doc build issues in preparation for the next numpydoc release",
        "commit_url": "https://github.com/numpy/numpy/commit/cc94f360febdef0e6c4183c50555ba82e60ccff6",
        "buggy_code": "issctype, issubdtype,obj2sctype",
        "fixed_code": "issctype, issubdtype, obj2sctype",
        "patch": "@@ -347,7 +347,7 @@ def issubsctype(arg1, arg2):\n \n     See Also\n     --------\n-    issctype, issubdtype,obj2sctype\n+    issctype, issubdtype, obj2sctype\n \n     Examples\n     --------"
    },
    {
        "commit_id": "524abf2f43b0f6d5baaec14c5e1a5feb53610f73",
        "commit_message": "DOC: fix doc formatting issues exposed by numpydoc 0.9.0rc1",
        "commit_url": "https://github.com/numpy/numpy/commit/524abf2f43b0f6d5baaec14c5e1a5feb53610f73",
        "buggy_code": "std , mean, nanmean, nanstd, nanvar",
        "fixed_code": "std, mean, nanmean, nanstd, nanvar",
        "patch": "@@ -3390,7 +3390,7 @@ def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):\n \n     See Also\n     --------\n-    std , mean, nanmean, nanstd, nanvar\n+    std, mean, nanmean, nanstd, nanvar\n     numpy.doc.ufuncs : Section \"Output arguments\"\n \n     Notes"
    },
    {
        "commit_id": "524abf2f43b0f6d5baaec14c5e1a5feb53610f73",
        "commit_message": "DOC: fix doc formatting issues exposed by numpydoc 0.9.0rc1",
        "commit_url": "https://github.com/numpy/numpy/commit/524abf2f43b0f6d5baaec14c5e1a5feb53610f73",
        "buggy_code": "issctype, issubdtype,obj2sctype",
        "fixed_code": "issctype, issubdtype, obj2sctype",
        "patch": "@@ -347,7 +347,7 @@ def issubsctype(arg1, arg2):\n \n     See Also\n     --------\n-    issctype, issubdtype,obj2sctype\n+    issctype, issubdtype, obj2sctype\n \n     Examples\n     --------"
    },
    {
        "commit_id": "fb425b769bbe4ff4b5a28f58876871414cc8bb12",
        "commit_message": "Merge pull request #13322 from eric-wieser/cyclic-import\n\nMAINT: Move umath error helpers into their own module",
        "commit_url": "https://github.com/numpy/numpy/commit/fb425b769bbe4ff4b5a28f58876871414cc8bb12",
        "buggy_code": "from numpy.core.numeric import errstate",
        "fixed_code": "from numpy.core._ufunc_config import errstate",
        "patch": "@@ -10,7 +10,7 @@\n __all__ = ['MachAr']\n \n from numpy.core.fromnumeric import any\n-from numpy.core.numeric import errstate\n+from numpy.core._ufunc_config import errstate\n from numpy.core.overrides import set_module\n \n # Need to speed this up...especially for longfloat"
    },
    {
        "commit_id": "b87a9e2784b7e5c864ebe19708b07d7211e01e29",
        "commit_message": "MAINT: Move umath error helpers into their own module\n\nThis is a direct move, with some tweaks to imports.\n\nFor some reason, this changed the results of running the doctests, which now reflect the actual defaults for `geterrobj`.\n\nThis helps to make `core.numeric` a little shorter.\n\nThis doesn't affect the value of `np.core.numeric.__all__` which keeps code doing `from numpy.core.numeric import *` working.",
        "commit_url": "https://github.com/numpy/numpy/commit/b87a9e2784b7e5c864ebe19708b07d7211e01e29",
        "buggy_code": "from numpy.core.numeric import errstate",
        "fixed_code": "from numpy.core._ufunc_config import errstate",
        "patch": "@@ -10,7 +10,7 @@\n __all__ = ['MachAr']\n \n from numpy.core.fromnumeric import any\n-from numpy.core.numeric import errstate\n+from numpy.core._ufunc_config import errstate\n from numpy.core.overrides import set_module\n \n # Need to speed this up...especially for longfloat"
    },
    {
        "commit_id": "c73865c057d25c64cf434adfebc38b2e289bdf7c",
        "commit_message": "Merge pull request #13311 from eric-wieser/memmap-empty\n\nBUG: Fix bad error message in np.memmap",
        "commit_url": "https://github.com/numpy/numpy/commit/c73865c057d25c64cf434adfebc38b2e289bdf7c",
        "buggy_code": "if mode == 'w+' or (mode == 'r+' and flen < bytes):",
        "fixed_code": "if mode in ('w+', 'r+') and flen < bytes:",
        "patch": "@@ -246,7 +246,7 @@ def __new__(subtype, filename, dtype=uint8, mode='r+', offset=0,\n \n             bytes = long(offset + size*_dbytes)\n \n-            if mode == 'w+' or (mode == 'r+' and flen < bytes):\n+            if mode in ('w+', 'r+') and flen < bytes:\n                 fid.seek(bytes - 1, 0)\n                 fid.write(b'\\0')\n                 fid.flush()"
    },
    {
        "commit_id": "7dbb325c9be319eaf2ca288b798e4f9417fad042",
        "commit_message": "Merge pull request #13313 from eric-wieser/fix-typo\n\nMAINT: fix typo in 'self'",
        "commit_url": "https://github.com/numpy/numpy/commit/7dbb325c9be319eaf2ca288b798e4f9417fad042",
        "buggy_code": "def update_executables(elf):",
        "fixed_code": "def update_executables(self):",
        "patch": "@@ -362,7 +362,7 @@ def set_exe(exe_key, f77=None, f90=None):\n         set_exe('archiver')\n         set_exe('ranlib')\n \n-    def update_executables(elf):\n+    def update_executables(self):\n         \"\"\"Called at the beginning of customisation. Subclasses should\n         override this if they need to set up the executables dictionary.\n "
    },
    {
        "commit_id": "20f5774acba6195fbf0611f37770a3490bb27f24",
        "commit_message": "MAINT: fix typo in 'self'",
        "commit_url": "https://github.com/numpy/numpy/commit/20f5774acba6195fbf0611f37770a3490bb27f24",
        "buggy_code": "def update_executables(elf):",
        "fixed_code": "def update_executables(self):",
        "patch": "@@ -362,7 +362,7 @@ def set_exe(exe_key, f77=None, f90=None):\n         set_exe('archiver')\n         set_exe('ranlib')\n \n-    def update_executables(elf):\n+    def update_executables(self):\n         \"\"\"Called at the beginning of customisation. Subclasses should\n         override this if they need to set up the executables dictionary.\n "
    },
    {
        "commit_id": "b60f33dd0747574570764ac8072386dccc85dd44",
        "commit_message": "BUG: Fix bad error message in np.memmap\n\nThis previously raisd `OSError: [Errno 22] Invalid argument` while trying to seek to byte -1 of the file.\n\nIt now raises `ValueError: cannot mmap an empty file`\n\nThe simple fix is not to write the file at all if we know it's already long enough.\n\nIn future we could consider allowing memmap to do an extra write behind the scenes to ensure the fiel is not empty, but that seems out of scope.\n\nFixes gh-12653",
        "commit_url": "https://github.com/numpy/numpy/commit/b60f33dd0747574570764ac8072386dccc85dd44",
        "buggy_code": "if mode == 'w+' or (mode == 'r+' and flen < bytes):",
        "fixed_code": "if mode in ('w+', 'r+') and flen < bytes:",
        "patch": "@@ -246,7 +246,7 @@ def __new__(subtype, filename, dtype=uint8, mode='r+', offset=0,\n \n             bytes = long(offset + size*_dbytes)\n \n-            if mode == 'w+' or (mode == 'r+' and flen < bytes):\n+            if mode in ('w+', 'r+') and flen < bytes:\n                 fid.seek(bytes - 1, 0)\n                 fid.write(b'\\0')\n                 fid.flush()"
    },
    {
        "commit_id": "f4a24b1f4779d1b9966efe2ad79cba21241ce500",
        "commit_message": "Merge pull request #13301 from eric-wieser/remove-descr-again\n\nBUG: Fix crash when calling savetxt on a padded array",
        "commit_url": "https://github.com/numpy/numpy/commit/f4a24b1f4779d1b9966efe2ad79cba21241ce500",
        "buggy_code": "ncol = len(X.dtype.descr)",
        "fixed_code": "ncol = len(X.dtype.names)",
        "patch": "@@ -1379,7 +1379,7 @@ def first_write(self, v):\n \n             # Complex dtype -- each field indicates a separate column\n             else:\n-                ncol = len(X.dtype.descr)\n+                ncol = len(X.dtype.names)\n         else:\n             ncol = X.shape[1]\n "
    },
    {
        "commit_id": "54294f17cf78b4209c18b1724f948861f6580661",
        "commit_message": "TST: fix up test_structured_padded\n\n* minor reviewer adjustments in PR\n13301: in test_structured_padded it\nis necessary to perform the seek\nafter writing to the file, and to\nspecify a fmt option to match\nthe expected result",
        "commit_url": "https://github.com/numpy/numpy/commit/54294f17cf78b4209c18b1724f948861f6580661",
        "buggy_code": "np.savetxt(c, a[['foo', 'baz']])",
        "fixed_code": "np.savetxt(c, a[['foo', 'baz']], fmt='%d')",
        "patch": "@@ -360,8 +360,8 @@ def test_structured_padded(self):\n             ('foo', 'i4'), ('bar', 'i4'), ('baz', 'i4')\n         ])\n         c = BytesIO()\n+        np.savetxt(c, a[['foo', 'baz']], fmt='%d')\n         c.seek(0)\n-        np.savetxt(c, a[['foo', 'baz']])\n         assert_equal(c.readlines(), [b'1 3\\n', b'4 6\\n'])\n \n     @pytest.mark.skipif(Path is None, reason=\"No pathlib.Path\")"
    },
    {
        "commit_id": "efdd3f50bd5a1e58b815ad8f82d896f4e72ae2b5",
        "commit_message": "BUG: Fix crash when calling savetxt on a padded array\n\nAs a general rule, _every_ use of `.descr` is broken.\n\nFixes #13297",
        "commit_url": "https://github.com/numpy/numpy/commit/efdd3f50bd5a1e58b815ad8f82d896f4e72ae2b5",
        "buggy_code": "ncol = len(X.dtype.descr)",
        "fixed_code": "ncol = len(X.dtype.names)",
        "patch": "@@ -1379,7 +1379,7 @@ def first_write(self, v):\n \n             # Complex dtype -- each field indicates a separate column\n             else:\n-                ncol = len(X.dtype.descr)\n+                ncol = len(X.dtype.names)\n         else:\n             ncol = X.shape[1]\n "
    },
    {
        "commit_id": "e7b8ba69696161639d065646ddf93cab5ed302e9",
        "commit_message": "fix test name",
        "commit_url": "https://github.com/numpy/numpy/commit/e7b8ba69696161639d065646ddf93cab5ed302e9",
        "buggy_code": "def test_do_not_rewrite__previous_keyword(self):",
        "fixed_code": "def test_do_not_rewrite_previous_keyword(self):",
        "patch": "@@ -447,7 +447,7 @@ def test_complex_bad2(self):\n         # !! changes\n         #assert_all(vals.real < -1e10) and assert_all(np.isfinite(vals))\n     \n-    def test_do_not_rewrite__previous_keyword(self):\n+    def test_do_not_rewrite_previous_keyword(self):\n         # This is done to test that when, for instance, nan=np.inf then these \n         # values are not rewritten by posinf keyword to the posinf value.\n         with np.errstate(divide='ignore', invalid='ignore'):"
    },
    {
        "commit_id": "96cacd74e50d972df8f6c8704b0f4b3c3dfbc81c",
        "commit_message": "ENH: use rotated companion matrix to reduce error",
        "commit_url": "https://github.com/numpy/numpy/commit/96cacd74e50d972df8f6c8704b0f4b3c3dfbc81c",
        "buggy_code": "r = la.eigvals(m)",
        "fixed_code": "r = la.eigvals(m[::-1,::-1])",
        "patch": "@@ -1429,7 +1429,7 @@ def polyroots(c):\n         return np.array([-c[0]/c[1]])\n \n     m = polycompanion(c)\n-    r = la.eigvals(m)\n+    r = la.eigvals(m[::-1,::-1])\n     r.sort()\n     return r\n "
    },
    {
        "commit_id": "9a037558d66f54b27acd133b8b8e92f76717a849",
        "commit_message": "Fix array dispatcher",
        "commit_url": "https://github.com/numpy/numpy/commit/9a037558d66f54b27acd133b8b8e92f76717a849",
        "buggy_code": "def _pad_dispatcher(array, pad_width, mode, **kwargs):",
        "fixed_code": "def _pad_dispatcher(array, pad_width, mode=None, **kwargs):",
        "patch": "@@ -957,7 +957,7 @@ def _as_pairs(x, ndim, as_index=False):\n # Public functions\n \n \n-def _pad_dispatcher(array, pad_width, mode, **kwargs):\n+def _pad_dispatcher(array, pad_width, mode=None, **kwargs):\n     return (array,)\n \n "
    },
    {
        "commit_id": "9a037558d66f54b27acd133b8b8e92f76717a849",
        "commit_message": "Fix array dispatcher",
        "commit_url": "https://github.com/numpy/numpy/commit/9a037558d66f54b27acd133b8b8e92f76717a849",
        "buggy_code": "assert_array_equal(pad(arr, 2), [0, 0, 1, 1, 0, 0])",
        "fixed_code": "assert_array_equal(np.pad(arr, 2), [0, 0, 1, 1, 0, 0])",
        "patch": "@@ -1251,7 +1251,7 @@ def test_kwargs(mode):\n \n def test_constant_zero_default():\n     arr = np.array([1, 1])\n-    assert_array_equal(pad(arr, 2), [0, 0, 1, 1, 0, 0])\n+    assert_array_equal(np.pad(arr, 2), [0, 0, 1, 1, 0, 0])\n \n \n @pytest.mark.parametrize(\"mode\", _all_modes.keys())"
    },
    {
        "commit_id": "cf73967fae0a68344a0b246d6dcd898ec1e84343",
        "commit_message": "Merge pull request #13095 from andreas-schwab/master\n\nFix testsuite failures on ppc and riscv",
        "commit_url": "https://github.com/numpy/numpy/commit/cf73967fae0a68344a0b246d6dcd898ec1e84343",
        "buggy_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),",
        "fixed_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc\"),",
        "patch": "@@ -422,7 +422,7 @@ def test_int_from_infinite_longdouble___int__(self):\n \n     @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),\n                         reason=\"long double is same as double\")\n-    @pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),\n+    @pytest.mark.skipif(platform.machine().startswith(\"ppc\"),\n                         reason=\"IBM double double\")\n     def test_int_from_huge_longdouble(self):\n         # Produce a longdouble that would overflow a double,"
    },
    {
        "commit_id": "cf73967fae0a68344a0b246d6dcd898ec1e84343",
        "commit_message": "Merge pull request #13095 from andreas-schwab/master\n\nFix testsuite failures on ppc and riscv",
        "commit_url": "https://github.com/numpy/numpy/commit/cf73967fae0a68344a0b246d6dcd898ec1e84343",
        "buggy_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2399,7 +2399,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "c8a8f524f693fc7facfc934743073e75a36d0a0e",
        "commit_message": "TEST: allow margin of error, increase discoverability of refcheck option",
        "commit_url": "https://github.com/numpy/numpy/commit/c8a8f524f693fc7facfc934743073e75a36d0a0e",
        "buggy_code": "help=\"Run refguide check (do not run regular tests.)\")",
        "fixed_code": "help=\"Run refguide (doctest) check (do not run regular tests.)\")",
        "patch": "@@ -74,7 +74,7 @@ def main(argv):\n     parser.add_argument(\"--doctests\", action=\"store_true\", default=False,\n                         help=\"Run doctests in module\")\n     parser.add_argument(\"--refguide-check\", action=\"store_true\", default=False,\n-                        help=\"Run refguide check (do not run regular tests.)\")\n+                        help=\"Run refguide (doctest) check (do not run regular tests.)\")\n     parser.add_argument(\"--coverage\", action=\"store_true\", default=False,\n                         help=(\"report coverage of project code. HTML output goes \"\n                               \"under build/coverage\"))"
    },
    {
        "commit_id": "8b7f71730c38b8a233094a8fea7aa0c1697b0ec1",
        "commit_message": "BUG: ppc and riscv don't use REAL(10)\n\nThis fixes numpy.f2py.tests.test_kind.TestKind",
        "commit_url": "https://github.com/numpy/numpy/commit/8b7f71730c38b8a233094a8fea7aa0c1697b0ec1",
        "buggy_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):",
        "patch": "@@ -2399,7 +2399,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):\n+    if machine.startswith(('aarch64', 'power', 'ppc', 'riscv', 's390x', 'sparc')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "d9c3878d3a9147f34ae5fadfe45b2c28431ba5d7",
        "commit_message": "BUG: ppc is using IBM double double\n\nThis fixes TestConversion.test_int_from_huge_longdouble.",
        "commit_url": "https://github.com/numpy/numpy/commit/d9c3878d3a9147f34ae5fadfe45b2c28431ba5d7",
        "buggy_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),",
        "fixed_code": "@pytest.mark.skipif(platform.machine().startswith(\"ppc\"),",
        "patch": "@@ -422,7 +422,7 @@ def test_int_from_infinite_longdouble___int__(self):\n \n     @pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble),\n                         reason=\"long double is same as double\")\n-    @pytest.mark.skipif(platform.machine().startswith(\"ppc64\"),\n+    @pytest.mark.skipif(platform.machine().startswith(\"ppc\"),\n                         reason=\"IBM double double\")\n     def test_int_from_huge_longdouble(self):\n         # Produce a longdouble that would overflow a double,"
    },
    {
        "commit_id": "67e20d09d3d83eed4c8ce06cf5d5dd6e0b38b856",
        "commit_message": "Merge pull request #12831 from petronny/patch-1\n\nBUG: do not catch stderr when checking compiler version",
        "commit_url": "https://github.com/numpy/numpy/commit/67e20d09d3d83eed4c8ce06cf5d5dd6e0b38b856",
        "buggy_code": "output = subprocess.check_output(version_cmd)",
        "fixed_code": "output = subprocess.check_output(version_cmd, stderr=subprocess.STDOUT)",
        "patch": "@@ -639,7 +639,7 @@ def matcher(version_string):\n             return version\n \n     try:\n-        output = subprocess.check_output(version_cmd)\n+        output = subprocess.check_output(version_cmd, stderr=subprocess.STDOUT)\n     except subprocess.CalledProcessError as exc:\n         output = exc.output\n         status = exc.returncode"
    },
    {
        "commit_id": "b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "commit_message": "Merge pull request #12892 from eric-wieser/distutils-debug\n\nBUG: Do not double-quote arguments passed on to the linker",
        "commit_url": "https://github.com/numpy/numpy/commit/b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "buggy_code": "return ['-link', '/PATH:\"%s\"' % (dir)]",
        "fixed_code": "return ['-link', '/PATH:%s' % (dir)]",
        "patch": "@@ -66,7 +66,7 @@ def get_flags_linker_so(self):\n \n     def library_dir_option(self, dir):\n         if os.name=='nt':\n-            return ['-link', '/PATH:\"%s\"' % (dir)]\n+            return ['-link', '/PATH:%s' % (dir)]\n         return \"-L\" + dir\n \n     def library_option(self, lib):"
    },
    {
        "commit_id": "b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "commit_message": "Merge pull request #12892 from eric-wieser/distutils-debug\n\nBUG: Do not double-quote arguments passed on to the linker",
        "commit_url": "https://github.com/numpy/numpy/commit/b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "buggy_code": "return '-R\"%s\"' % dir",
        "fixed_code": "return '-R%s' % dir",
        "patch": "@@ -61,7 +61,7 @@ def get_flags_linker_so(self):\n             return [\"-shared\", '-fpic']\n \n     def runtime_library_dir_option(self, dir):\n-        return '-R\"%s\"' % dir\n+        return '-R%s' % dir\n \n \n if sys.version_info >= (3, 5):"
    },
    {
        "commit_id": "b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "commit_message": "Merge pull request #12892 from eric-wieser/distutils-debug\n\nBUG: Do not double-quote arguments passed on to the linker",
        "commit_url": "https://github.com/numpy/numpy/commit/b1d7001ba91a38bafa7b61489e0071ad785e2c96",
        "buggy_code": "return '-R\"%s\"' % dir",
        "fixed_code": "return '-R%s' % dir",
        "patch": "@@ -44,7 +44,7 @@ def get_libraries(self):\n         return opt\n \n     def runtime_library_dir_option(self, dir):\n-        return '-R\"%s\"' % dir\n+        return '-R%s' % dir\n \n if __name__ == '__main__':\n     from distutils import log"
    },
    {
        "commit_id": "37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "commit_message": "BUG: Do not double-quote arguments passed on to the linker\n\nAfter the recent patch to CCompiler.spawn, the file-paths no longer need manual quoting - that's handled as needed within subprocess.\n\nThis also states our assumption that our paths do not contain commas.\nIf we care about this, we could adopt the approach used by https://github.com/rust-lang/rust/issues/38795.\n\nTested for gcc locally by looking at the error messages of `subprocess.check_call([\"gcc\", r'-Wl,spaces and no quotes'])`\n\nOther fortran compiler changes not tested, but assumed to be broken in the same way.\n\nFixes #12882",
        "commit_url": "https://github.com/numpy/numpy/commit/37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "buggy_code": "return ['-link', '/PATH:\"%s\"' % (dir)]",
        "fixed_code": "return ['-link', '/PATH:%s' % (dir)]",
        "patch": "@@ -66,7 +66,7 @@ def get_flags_linker_so(self):\n \n     def library_dir_option(self, dir):\n         if os.name=='nt':\n-            return ['-link', '/PATH:\"%s\"' % (dir)]\n+            return ['-link', '/PATH:%s' % (dir)]\n         return \"-L\" + dir\n \n     def library_option(self, lib):"
    },
    {
        "commit_id": "37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "commit_message": "BUG: Do not double-quote arguments passed on to the linker\n\nAfter the recent patch to CCompiler.spawn, the file-paths no longer need manual quoting - that's handled as needed within subprocess.\n\nThis also states our assumption that our paths do not contain commas.\nIf we care about this, we could adopt the approach used by https://github.com/rust-lang/rust/issues/38795.\n\nTested for gcc locally by looking at the error messages of `subprocess.check_call([\"gcc\", r'-Wl,spaces and no quotes'])`\n\nOther fortran compiler changes not tested, but assumed to be broken in the same way.\n\nFixes #12882",
        "commit_url": "https://github.com/numpy/numpy/commit/37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "buggy_code": "return '-R\"%s\"' % dir",
        "fixed_code": "return '-R%s' % dir",
        "patch": "@@ -57,7 +57,7 @@ def get_flags_linker_so(self):\n             return [\"-dynamic\", '-undefined', 'dynamic_lookup']\n \n     def runtime_library_dir_option(self, dir):\n-        return '-R\"%s\"' % dir\n+        return '-R%s' % dir\n \n \n if sys.version_info >= (3, 5):"
    },
    {
        "commit_id": "37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "commit_message": "BUG: Do not double-quote arguments passed on to the linker\n\nAfter the recent patch to CCompiler.spawn, the file-paths no longer need manual quoting - that's handled as needed within subprocess.\n\nThis also states our assumption that our paths do not contain commas.\nIf we care about this, we could adopt the approach used by https://github.com/rust-lang/rust/issues/38795.\n\nTested for gcc locally by looking at the error messages of `subprocess.check_call([\"gcc\", r'-Wl,spaces and no quotes'])`\n\nOther fortran compiler changes not tested, but assumed to be broken in the same way.\n\nFixes #12882",
        "commit_url": "https://github.com/numpy/numpy/commit/37ba40b7f975f266d24fa916050fa27c88ab9dbf",
        "buggy_code": "return '-R\"%s\"' % dir",
        "fixed_code": "return '-R%s' % dir",
        "patch": "@@ -44,7 +44,7 @@ def get_libraries(self):\n         return opt\n \n     def runtime_library_dir_option(self, dir):\n-        return '-R\"%s\"' % dir\n+        return '-R%s' % dir\n \n if __name__ == '__main__':\n     from distutils import log"
    },
    {
        "commit_id": "2096b6d20d45e990a77ebea6735a41c191f008b0",
        "commit_message": "DOC: fix invalid escape sequence",
        "commit_url": "https://github.com/numpy/numpy/commit/2096b6d20d45e990a77ebea6735a41c191f008b0",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -2130,7 +2130,7 @@ def _lstsq_dispatcher(a, b, rcond=None):\n \n @array_function_dispatch(_lstsq_dispatcher)\n def lstsq(a, b, rcond=\"warn\"):\n-    \"\"\"\n+    r\"\"\"\n     Return the least-squares solution to a linear matrix equation.\n \n     Solves the equation :math:`a x = b` by computing a vector `x` that"
    },
    {
        "commit_id": "1be850b0782a1dcbb3da22fb9d5c74c3ce367936",
        "commit_message": "BUG: squeeze corner case",
        "commit_url": "https://github.com/numpy/numpy/commit/1be850b0782a1dcbb3da22fb9d5c74c3ce367936",
        "buggy_code": "return _wrapit(a, 'squeeze')",
        "fixed_code": "return _wrapit(a, 'squeeze', axis=axis)",
        "patch": "@@ -1385,7 +1385,7 @@ def squeeze(a, axis=None):\n     try:\n         squeeze = a.squeeze\n     except AttributeError:\n-        return _wrapit(a, 'squeeze')\n+        return _wrapit(a, 'squeeze', axis=axis)\n     if axis is None:\n         return squeeze()\n     else:"
    },
    {
        "commit_id": "df54ff86105288ca2fabdf410c3b415399276e2c",
        "commit_message": "BUG: timedelta64 % 0 behavior\n\n* modulus operation with two timedelta64\noperands now returns NaT in the case of\ndivision by zero, rather than returning\nzero",
        "commit_url": "https://github.com/numpy/numpy/commit/df54ff86105288ca2fabdf410c3b415399276e2c",
        "buggy_code": "assert_equal(actual, np.timedelta64(0, 's'))",
        "fixed_code": "assert_equal(actual, np.timedelta64('NaT'))",
        "patch": "@@ -1758,7 +1758,7 @@ def test_timedelta_modulus_error(self, val1, val2):\n     def test_timedelta_modulus_div_by_zero(self):\n         with assert_warns(RuntimeWarning):\n             actual = np.timedelta64(10, 's') % np.timedelta64(0, 's')\n-            assert_equal(actual, np.timedelta64(0, 's'))\n+            assert_equal(actual, np.timedelta64('NaT'))\n \n     @pytest.mark.parametrize(\"val1, val2\", [\n         # cases where one operand is not"
    },
    {
        "commit_id": "8f547f246b0c7463768adebafe0a57df9c03321b",
        "commit_message": "Merge pull request #12758 from ajschol/patch-1\n\nDOC: Update docstring of diff() to use 'i' not 'n'",
        "commit_url": "https://github.com/numpy/numpy/commit/8f547f246b0c7463768adebafe0a57df9c03321b",
        "buggy_code": "The first difference is given by ``out[n] = a[n+1] - a[n]`` along",
        "fixed_code": "The first difference is given by ``out[i] = a[i+1] - a[i]`` along",
        "patch": "@@ -1150,7 +1150,7 @@ def diff(a, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):\n     \"\"\"\n     Calculate the n-th discrete difference along the given axis.\n \n-    The first difference is given by ``out[n] = a[n+1] - a[n]`` along\n+    The first difference is given by ``out[i] = a[i+1] - a[i]`` along\n     the given axis, higher differences are calculated by using `diff`\n     recursively.\n "
    },
    {
        "commit_id": "38e5bad90699b88e54e9d067250a83f466e20d5d",
        "commit_message": "DOC: Update docstring of diff() to use 'i' not 'n'\n\nSee issue https://github.com/numpy/numpy/issues/12742",
        "commit_url": "https://github.com/numpy/numpy/commit/38e5bad90699b88e54e9d067250a83f466e20d5d",
        "buggy_code": "The first difference is given by ``out[n] = a[n+1] - a[n]`` along",
        "fixed_code": "The first difference is given by ``out[i] = a[i+1] - a[i]`` along",
        "patch": "@@ -1150,7 +1150,7 @@ def diff(a, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue):\n     \"\"\"\n     Calculate the n-th discrete difference along the given axis.\n \n-    The first difference is given by ``out[n] = a[n+1] - a[n]`` along\n+    The first difference is given by ``out[i] = a[i+1] - a[i]`` along\n     the given axis, higher differences are calculated by using `diff`\n     recursively.\n "
    },
    {
        "commit_id": "f4f3fa757c6a3ce498ea04a1bb0cbf7634be1d57",
        "commit_message": "ENH: Use richer exception types for ufunc type resolution errors\n\nThis might make it easier for users to implement `__array_ufunc__` with custom casting behavior.\n\nThe motivation for this was to be able to deprecate the broken casting behavior in `np.clip`, without resorting to inspecting error strings.\nThis also removes the need for gh-12178",
        "commit_url": "https://github.com/numpy/numpy/commit/f4f3fa757c6a3ce498ea04a1bb0cbf7634be1d57",
        "buggy_code": "msg = \"Cannot cast ufunc matmul output\"",
        "fixed_code": "msg = \"Cannot cast ufunc .* output\"",
        "patch": "@@ -5910,7 +5910,7 @@ def test_out_arg(self):\n         assert_array_equal(out, tgt, err_msg=msg)\n \n         # test out with not allowed type cast (safe casting)\n-        msg = \"Cannot cast ufunc matmul output\"\n+        msg = \"Cannot cast ufunc .* output\"\n         out = np.zeros((5, 2), dtype=np.int32)\n         assert_raises_regex(TypeError, msg, self.matmul, a, b, out=out)\n "
    },
    {
        "commit_id": "608fc9808f05abb41a44f92c63242a505accc844",
        "commit_message": "Merge pull request #12672 from charris/fix-selected_real_kind-for-sparc\n\nBUG: Add 'sparc' to platforms implementing 16 byte reals.",
        "commit_url": "https://github.com/numpy/numpy/commit/608fc9808f05abb41a44f92c63242a505accc844",
        "buggy_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):",
        "patch": "@@ -2399,7 +2399,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):\n+    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "4ff8fd5462fa1aaafc9b3519dfca0892f01e977e",
        "commit_message": "BUG: Add 'sparc' to platforms implementing 16 byte reals.\n\nThis is for the _selected_real_kind_func function in\nf2py/crackfortran.py",
        "commit_url": "https://github.com/numpy/numpy/commit/4ff8fd5462fa1aaafc9b3519dfca0892f01e977e",
        "buggy_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):",
        "patch": "@@ -2399,7 +2399,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):\n+    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x', 'sparc')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "c409aa228b579cbf944288a826dee4feed81e210",
        "commit_message": "Merge pull request #12584 from iljah/patch-1\n\nDOC: Clarify skiprows in loadtxt",
        "commit_url": "https://github.com/numpy/numpy/commit/c409aa228b579cbf944288a826dee4feed81e210",
        "buggy_code": "Skip the first `skiprows` lines; default: 0.",
        "fixed_code": "Skip the first `skiprows` lines, including comments; default: 0.",
        "patch": "@@ -829,7 +829,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n         `genfromtxt`): ``converters = {3: lambda s: float(s.strip() or 0)}``.\n         Default: None.\n     skiprows : int, optional\n-        Skip the first `skiprows` lines; default: 0.\n+        Skip the first `skiprows` lines, including comments; default: 0.\n     usecols : int or sequence, optional\n         Which columns to read, with 0 being the first. For example,\n         ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns."
    },
    {
        "commit_id": "982f12b9c6ed22079a3f358afe35ab75e3521490",
        "commit_message": "Merge pull request #12577 from juliantaylor/fix-f2py\n\nBUG: fix f2py pep338 execution method",
        "commit_url": "https://github.com/numpy/numpy/commit/982f12b9c6ed22079a3f358afe35ab75e3521490",
        "buggy_code": "from f2py2e import main",
        "fixed_code": "from numpy.f2py.f2py2e import main",
        "patch": "@@ -1,6 +1,6 @@\n # See http://cens.ioc.ee/projects/f2py2e/\n from __future__ import division, print_function\n \n-from f2py2e import main\n+from numpy.f2py.f2py2e import main\n \n main()"
    },
    {
        "commit_id": "1e296433a7987834f914b553741a91e873b5387f",
        "commit_message": "BUG: fix f2py pep338 execution method\n\nCloses gh-12576",
        "commit_url": "https://github.com/numpy/numpy/commit/1e296433a7987834f914b553741a91e873b5387f",
        "buggy_code": "from f2py2e import main",
        "fixed_code": "from numpy.f2py.f2py2e import main",
        "patch": "@@ -1,6 +1,6 @@\n # See http://cens.ioc.ee/projects/f2py2e/\n from __future__ import division, print_function\n \n-from f2py2e import main\n+from numpy.f2py.f2py2e import main\n \n main()"
    },
    {
        "commit_id": "af20f922f7bbce02cbb9e3ac73b1235773aad06a",
        "commit_message": "Merge pull request #12566 from asottile/segfault_ctypeslib\n\nBUG: fix segfault in ctypeslib with obj being collected",
        "commit_url": "https://github.com/numpy/numpy/commit/af20f922f7bbce02cbb9e3ac73b1235773aad06a",
        "buggy_code": "result.__keep = ai",
        "fixed_code": "result.__keep = obj",
        "patch": "@@ -401,5 +401,5 @@ def as_ctypes(obj):\n             raise TypeError(\"readonly arrays unsupported\")\n         tp = _ctype_ndarray(_typecodes[ai[\"typestr\"]], ai[\"shape\"])\n         result = tp.from_address(addr)\n-        result.__keep = ai\n+        result.__keep = obj\n         return result"
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "_concrete_types = set(v.type for k, v in _concrete_typeinfo.items())",
        "fixed_code": "_concrete_types = {v.type for k, v in _concrete_typeinfo.items()}",
        "patch": "@@ -60,7 +60,7 @@ def get(self, key, default=None):\n     else:\n         _concrete_typeinfo[k] = v\n \n-_concrete_types = set(v.type for k, v in _concrete_typeinfo.items())\n+_concrete_types = {v.type for k, v in _concrete_typeinfo.items()}\n \n \n def _bits_of(obj):"
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "from numpy.testing import assert_, assert_equal, suppress_warnings",
        "fixed_code": "from numpy.testing import assert_, assert_equal",
        "patch": "@@ -5,7 +5,7 @@\n \n import numpy as np\n from numpy import uint16, float16, float32, float64\n-from numpy.testing import assert_, assert_equal, suppress_warnings\n+from numpy.testing import assert_, assert_equal\n \n \n def assert_raises_fpe(strmatch, callable, *args, **kwargs):"
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "assert_, assert_raises, assert_equal, assert_array_equal, assert_allclose",
        "fixed_code": "assert_, assert_raises, assert_equal, assert_array_equal",
        "patch": "@@ -10,7 +10,7 @@\n from numpy.lib.stride_tricks import as_strided\n from numpy.compat import long\n from numpy.testing import (\n-    assert_, assert_raises, assert_equal, assert_array_equal, assert_allclose\n+    assert_, assert_raises, assert_equal, assert_array_equal\n     )\n \n if sys.version_info[0] >= 3:"
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "suppress_warnings, HAS_REFCOUNT",
        "fixed_code": "HAS_REFCOUNT",
        "patch": "@@ -13,7 +13,7 @@\n from numpy.testing import (\n     assert_, assert_equal, assert_raises, assert_raises_regex,\n     assert_array_equal, assert_almost_equal, assert_array_almost_equal,\n-    suppress_warnings, HAS_REFCOUNT\n+    HAS_REFCOUNT\n     )\n \n "
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "from numpy.testing import assert_, assert_equal, suppress_warnings, dec",
        "fixed_code": "from numpy.testing import assert_, assert_equal, suppress_warnings",
        "patch": "@@ -10,7 +10,7 @@\n \n from tempfile import TemporaryFile\n import numpy as np\n-from numpy.testing import assert_, assert_equal, suppress_warnings, dec\n+from numpy.testing import assert_, assert_equal, suppress_warnings\n \n class TestRealScalars(object):\n     def test_str(self):"
    },
    {
        "commit_id": "620d54110ac5897d47e0ac95e6251fe330534186",
        "commit_message": "Merge commit '7ce7382d5eacbc3da026289483a841184a609928' into fix-9647",
        "commit_url": "https://github.com/numpy/numpy/commit/620d54110ac5897d47e0ac95e6251fe330534186",
        "buggy_code": "msg = str(get_exception())",
        "fixed_code": "str(get_exception())",
        "patch": "@@ -95,7 +95,7 @@ def _wrap_method(self, mth, lang, args):\n         try:\n             ret = mth(*((self,)+args))\n         except (DistutilsExecError, CompileError):\n-            msg = str(get_exception())\n+            str(get_exception())\n             self.compiler = save_compiler\n             raise CompileError\n         self.compiler = save_compiler"
    },
    {
        "commit_id": "e1940a6fcc65c01b4b9760e3fda198aa36c82360",
        "commit_message": "BUG: Fix regression in _missing_ctypes.cast that is not tested in CI",
        "commit_url": "https://github.com/numpy/numpy/commit/e1940a6fcc65c01b4b9760e3fda198aa36c82360",
        "buggy_code": "return obj.value",
        "fixed_code": "return num.value",
        "patch": "@@ -237,7 +237,7 @@ def _getintp_ctype():\n \n class _missing_ctypes(object):\n     def cast(self, num, obj):\n-        return obj.value\n+        return num.value\n \n     class c_void_p(object):\n         def __init__(self, ptr):"
    },
    {
        "commit_id": "cec59cc17025352a4159172dbe5077e30eee01a1",
        "commit_message": "BUG: fix segfault in ctypeslib with obj being collected\n\n- https://bugs.python.org/issue35507\n- https://stackoverflow.com/q/53757856/812183",
        "commit_url": "https://github.com/numpy/numpy/commit/cec59cc17025352a4159172dbe5077e30eee01a1",
        "buggy_code": "result.__keep = ai",
        "fixed_code": "result.__keep = obj",
        "patch": "@@ -401,5 +401,5 @@ def as_ctypes(obj):\n             raise TypeError(\"readonly arrays unsupported\")\n         tp = _ctype_ndarray(_typecodes[ai[\"typestr\"]], ai[\"shape\"])\n         result = tp.from_address(addr)\n-        result.__keep = ai\n+        result.__keep = obj\n         return result"
    },
    {
        "commit_id": "5d3ff239a75bdfd59b2c4adbfd2af343b3a36007",
        "commit_message": "BUG: Fix `/` that should be `//`.\n\nSeems this old style division was missed when going to Python3\r\ncompatibility.",
        "commit_url": "https://github.com/numpy/numpy/commit/5d3ff239a75bdfd59b2c4adbfd2af343b3a36007",
        "buggy_code": "shape[shape.index(-1)] = size / -shapesize",
        "fixed_code": "shape[shape.index(-1)] = size // -shapesize",
        "patch": "@@ -787,7 +787,7 @@ def fromfile(fd, dtype=None, shape=None, offset=0, formats=None,\n     shapesize = shapeprod * itemsize\n     if shapesize < 0:\n         shape = list(shape)\n-        shape[shape.index(-1)] = size / -shapesize\n+        shape[shape.index(-1)] = size // -shapesize\n         shape = tuple(shape)\n         shapeprod = sb.array(shape).prod(dtype=nt.intp)\n "
    },
    {
        "commit_id": "7ada0c13a3e0d003670f421e8533cbb5388f705c",
        "commit_message": "Merge pull request #12399 from hershen/fix-polyint-typo\n\nDOC: Fix typo in polyint. Fixes #12386.",
        "commit_url": "https://github.com/numpy/numpy/commit/7ada0c13a3e0d003670f421e8533cbb5388f705c",
        "buggy_code": "Polynomial to differentiate.",
        "fixed_code": "Polynomial to integrate.",
        "patch": "@@ -272,7 +272,7 @@ def polyint(p, m=1, k=None):\n     Parameters\n     ----------\n     p : array_like or poly1d\n-        Polynomial to differentiate.\n+        Polynomial to integrate.\n         A sequence is interpreted as polynomial coefficients, see `poly1d`.\n     m : int, optional\n         Order of the antiderivative. (Default: 1)"
    },
    {
        "commit_id": "dde6a64fc78bd2159ae610e59bdc99ee5211ab08",
        "commit_message": "DOC: Fix typo in polyint.\n\nChange differentiate to integrate in parameter `p` description.\nFixes #12386.",
        "commit_url": "https://github.com/numpy/numpy/commit/dde6a64fc78bd2159ae610e59bdc99ee5211ab08",
        "buggy_code": "Polynomial to differentiate.",
        "fixed_code": "Polynomial to integrate.",
        "patch": "@@ -272,7 +272,7 @@ def polyint(p, m=1, k=None):\n     Parameters\n     ----------\n     p : array_like or poly1d\n-        Polynomial to differentiate.\n+        Polynomial to integrate.\n         A sequence is interpreted as polynomial coefficients, see `poly1d`.\n     m : int, optional\n         Order of the antiderivative. (Default: 1)"
    },
    {
        "commit_id": "ff8b0b21e0f17dbcc94fc87ba1194dcbbbe15432",
        "commit_message": "Merge pull request #12381 from tylerjereddy/datasource_del_handling\n\nBUG: graceful DataSource __del__ when __init__ fails",
        "commit_url": "https://github.com/numpy/numpy/commit/ff8b0b21e0f17dbcc94fc87ba1194dcbbbe15432",
        "buggy_code": "if self._istmpdest:",
        "fixed_code": "if hasattr(self, '_istmpdest') and self._istmpdest:",
        "patch": "@@ -328,7 +328,7 @@ def __init__(self, destpath=os.curdir):\n \n     def __del__(self):\n         # Remove temp directories\n-        if self._istmpdest:\n+        if hasattr(self, '_istmpdest') and self._istmpdest:\n             shutil.rmtree(self._destpath)\n \n     def _iszip(self, filename):"
    },
    {
        "commit_id": "de8cf0af77aa68593a50e5463d464fbf12c65c01",
        "commit_message": "MAINT: fix mispelling",
        "commit_url": "https://github.com/numpy/numpy/commit/de8cf0af77aa68593a50e5463d464fbf12c65c01",
        "buggy_code": "return _multiarray_umath.unpackfdbits(myarray, axis)",
        "fixed_code": "return _multiarray_umath.unpackbits(myarray, axis)",
        "patch": "@@ -1233,7 +1233,7 @@ def unpackbits(myarray, axis=None):\n            [0, 0, 0, 1, 0, 1, 1, 1]], dtype=uint8)\n \n     \"\"\"\n-    return _multiarray_umath.unpackfdbits(myarray, axis)\n+    return _multiarray_umath.unpackbits(myarray, axis)\n \n \n def _shares_memory_dispatcher(a, b, max_work=None):"
    },
    {
        "commit_id": "470d53fc6bc8267fec7d7cf5c7116d5e7437d789",
        "commit_message": "BUG: improve DataSource __del__\n\n* DataSource __del__ could raise an AttributeError\nif __init__ failed for any reason; __del__ now gracefully\nhandles the case where __init__ fails, as happens in the\ninternals of refguide_check when handling DataSource with\nan unexpected kwarg",
        "commit_url": "https://github.com/numpy/numpy/commit/470d53fc6bc8267fec7d7cf5c7116d5e7437d789",
        "buggy_code": "if self._istmpdest:",
        "fixed_code": "if hasattr(self, '_istmpdest') and self._istmpdest:",
        "patch": "@@ -323,7 +323,7 @@ def __init__(self, destpath=os.curdir):\n \n     def __del__(self):\n         # Remove temp directories\n-        if self._istmpdest:\n+        if hasattr(self, '_istmpdest') and self._istmpdest:\n             shutil.rmtree(self._destpath)\n \n     def _iszip(self, filename):"
    },
    {
        "commit_id": "56ce2327462eb9e3980c568ce9be628892aad89f",
        "commit_message": "MAINT: fix disabling __array_function__",
        "commit_url": "https://github.com/numpy/numpy/commit/56ce2327462eb9e3980c568ce9be628892aad89f",
        "buggy_code": "if ENABLE_ARRAY_FUNCTION:",
        "fixed_code": "if not ENABLE_ARRAY_FUNCTION:",
        "patch": "@@ -153,7 +153,7 @@ def verify_matching_signatures(implementation, dispatcher):\n def array_function_dispatch(dispatcher, module=None, verify=True):\n     \"\"\"Decorator for adding dispatch with the __array_function__ protocol.\"\"\"\n     def decorator(implementation):\n-        if ENABLE_ARRAY_FUNCTION:\n+        if not ENABLE_ARRAY_FUNCTION:\n             # __array_function__ requires an explicit opt-in for now\n             public_api = implementation\n         else:"
    },
    {
        "commit_id": "fbc3ad69d2396fc5edbb2f145c82965756185f82",
        "commit_message": "Merge branch 'master' into fix-overloaded-repr",
        "commit_url": "https://github.com/numpy/numpy/commit/fbc3ad69d2396fc5edbb2f145c82965756185f82",
        "buggy_code": "@array_function_dispatch(_pad_dispatcher)",
        "fixed_code": "@array_function_dispatch(_pad_dispatcher, module='numpy')",
        "patch": "@@ -995,7 +995,7 @@ def _pad_dispatcher(array, pad_width, mode, **kwargs):\n     return (array,)\n \n \n-@array_function_dispatch(_pad_dispatcher)\n+@array_function_dispatch(_pad_dispatcher, module='numpy')\n def pad(array, pad_width, mode, **kwargs):\n     \"\"\"\n     Pads an array."
    },
    {
        "commit_id": "872372bd56ccb5fe98faae8be7d14e4a8c69e037",
        "commit_message": "Merge pull request #12251 from shoyer/array-function-error-msg\n\nMAINT: improved error message when no __array_function__ implementation found",
        "commit_url": "https://github.com/numpy/numpy/commit/872372bd56ccb5fe98faae8be7d14e4a8c69e037",
        "buggy_code": "@array_function_dispatch(_pad_dispatcher)",
        "fixed_code": "@array_function_dispatch(_pad_dispatcher, module='numpy')",
        "patch": "@@ -995,7 +995,7 @@ def _pad_dispatcher(array, pad_width, mode, **kwargs):\n     return (array,)\n \n \n-@array_function_dispatch(_pad_dispatcher)\n+@array_function_dispatch(_pad_dispatcher, module='numpy')\n def pad(array, pad_width, mode, **kwargs):\n     \"\"\"\n     Pads an array."
    },
    {
        "commit_id": "dc9b616828f7eda0a932319a24cd61c3a39598c4",
        "commit_message": "Merge pull request #12181 from raggleton/fix-sum-depr\n\nMAINT: fix depreciation message typo for np.sum",
        "commit_url": "https://github.com/numpy/numpy/commit/dc9b616828f7eda0a932319a24cd61c3a39598c4",
        "buggy_code": "\"Use np.sum(np.from_iter(generator)) or the python sum builtin instead.\",",
        "fixed_code": "\"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",",
        "patch": "@@ -2061,7 +2061,7 @@ def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._No\n         # 2018-02-25, 1.15.0\n         warnings.warn(\n             \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"\n-            \"Use np.sum(np.from_iter(generator)) or the python sum builtin instead.\",\n+            \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",\n             DeprecationWarning, stacklevel=2)\n \n         res = _sum_(a)"
    },
    {
        "commit_id": "2eb4d5f137d45566770a9e1eb7e07b8dd3b1e717",
        "commit_message": "MAINT: fix depreciation message typo for np.sum",
        "commit_url": "https://github.com/numpy/numpy/commit/2eb4d5f137d45566770a9e1eb7e07b8dd3b1e717",
        "buggy_code": "\"Use np.sum(np.from_iter(generator)) or the python sum builtin instead.\",",
        "fixed_code": "\"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",",
        "patch": "@@ -2061,7 +2061,7 @@ def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._No\n         # 2018-02-25, 1.15.0\n         warnings.warn(\n             \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"\n-            \"Use np.sum(np.from_iter(generator)) or the python sum builtin instead.\",\n+            \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",\n             DeprecationWarning, stacklevel=2)\n \n         res = _sum_(a)"
    },
    {
        "commit_id": "cb9add3de86a5b886e08b5b649be7e6ccdf5f927",
        "commit_message": "Merge pull request #12093 from yarikoptic/enh-disclose-type\n\nENH: Extend info in Invalid integer dtype error message",
        "commit_url": "https://github.com/numpy/numpy/commit/cb9add3de86a5b886e08b5b649be7e6ccdf5f927",
        "buggy_code": "raise ValueError(\"Invalid integer data type.\")",
        "fixed_code": "raise ValueError(\"Invalid integer data type %r.\" % (self.kind,))",
        "patch": "@@ -513,7 +513,7 @@ def __init__(self, int_type):\n         self.bits = self.dtype.itemsize * 8\n         self.key = \"%s%d\" % (self.kind, self.bits)\n         if self.kind not in 'iu':\n-            raise ValueError(\"Invalid integer data type.\")\n+            raise ValueError(\"Invalid integer data type %r.\" % (self.kind,))\n \n     def min(self):\n         \"\"\"Minimum value of given dtype.\"\"\""
    },
    {
        "commit_id": "b72019ce94fceac2585b54fbbd7426aff6b1df78",
        "commit_message": "Merge pull request #11941 from rsokl/einsum_opt\n\nBUG: Ensure einsum(optimize=True) dispatches tensordot deterministically",
        "commit_url": "https://github.com/numpy/numpy/commit/b72019ce94fceac2585b54fbbd7426aff6b1df78",
        "buggy_code": "for s in idx_rm:",
        "fixed_code": "for s in sorted(idx_rm):",
        "patch": "@@ -1373,7 +1373,7 @@ def einsum(*operands, **kwargs):\n \n             # Find indices to contract over\n             left_pos, right_pos = [], []\n-            for s in idx_rm:\n+            for s in sorted(idx_rm):\n                 left_pos.append(input_left.find(s))\n                 right_pos.append(input_right.find(s))\n "
    },
    {
        "commit_id": "6d0c342e0fbb1f1fb394ab9249265a62b980d74b",
        "commit_message": "BUG/ENH: Ensure einsum-optimize dispatches tensordot using ordered axes",
        "commit_url": "https://github.com/numpy/numpy/commit/6d0c342e0fbb1f1fb394ab9249265a62b980d74b",
        "buggy_code": "for s in idx_rm:",
        "fixed_code": "for s in sorted(idx_rm):",
        "patch": "@@ -1373,7 +1373,7 @@ def einsum(*operands, **kwargs):\n \n             # Find indices to contract over\n             left_pos, right_pos = [], []\n-            for s in idx_rm:\n+            for s in sorted(idx_rm):\n                 left_pos.append(input_left.find(s))\n                 right_pos.append(input_right.find(s))\n "
    },
    {
        "commit_id": "91454d6611021cc1d0d581f7bc81775ca0184517",
        "commit_message": "Merge pull request #11920 from YannickJadoul/test_numerictypes.py-TestSctypeDict-class-fix\n\nTST: Fix 'def' test_numerictypes.py::TestSctypeDict to 'class' to enable the test",
        "commit_url": "https://github.com/numpy/numpy/commit/91454d6611021cc1d0d581f7bc81775ca0184517",
        "buggy_code": "def TestSctypeDict(object):",
        "fixed_code": "class TestSctypeDict(object):",
        "patch": "@@ -408,7 +408,7 @@ def test_sibling_class(self):\n             assert_(not np.issubdtype(w1(np.float64), w2(np.float32)))\n \n \n-def TestSctypeDict(object):\n+class TestSctypeDict(object):\n     def test_longdouble(self):\n         assert_(np.sctypeDict['f8'] is not np.longdouble)\n         assert_(np.sctypeDict['c16'] is not np.clongdouble)"
    },
    {
        "commit_id": "dfe364ba3eab531e58d0a3f6843e0bc539064710",
        "commit_message": "TST: Fix 'def' of core/tests/test_numerictypes.py::TestSctypeDict test class to 'class' to actually enable the test",
        "commit_url": "https://github.com/numpy/numpy/commit/dfe364ba3eab531e58d0a3f6843e0bc539064710",
        "buggy_code": "def TestSctypeDict(object):",
        "fixed_code": "class TestSctypeDict(object):",
        "patch": "@@ -408,7 +408,7 @@ def test_sibling_class(self):\n             assert_(not np.issubdtype(w1(np.float64), w2(np.float32)))\n \n \n-def TestSctypeDict(object):\n+class TestSctypeDict(object):\n     def test_longdouble(self):\n         assert_(np.sctypeDict['f8'] is not np.longdouble)\n         assert_(np.sctypeDict['c16'] is not np.clongdouble)"
    },
    {
        "commit_id": "44d3b5976d55d028e85c075933837dff150d9840",
        "commit_message": "Merge pull request #11834 from charris/fix-polynomial-grammar\n\nMAINT, DOC: Replace 'an' by 'a' in some docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/44d3b5976d55d028e85c075933837dff150d9840",
        "buggy_code": "legpow               raise a Legendre series to an positive integer power.",
        "fixed_code": "legpow               raise a Legendre series to a positive integer power.",
        "patch": "@@ -32,7 +32,7 @@\n    legmulx              multiply a Legendre series in ``P_i(x)`` by ``x``.\n    legmul               multiply two Legendre series.\n    legdiv               divide one Legendre series by another.\n-   legpow               raise a Legendre series to an positive integer power.\n+   legpow               raise a Legendre series to a positive integer power.\n    legval               evaluate a Legendre series at given points.\n    legval2d             evaluate a 2D Legendre series at given points.\n    legval3d             evaluate a 3D Legendre series at given points."
    },
    {
        "commit_id": "44d3b5976d55d028e85c075933837dff150d9840",
        "commit_message": "Merge pull request #11834 from charris/fix-polynomial-grammar\n\nMAINT, DOC: Replace 'an' by 'a' in some docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/44d3b5976d55d028e85c075933837dff150d9840",
        "buggy_code": "- `polypow` -- raise a polynomial to an positive integer power.",
        "fixed_code": "- `polypow` -- raise a polynomial to a positive integer power.",
        "patch": "@@ -21,7 +21,7 @@\n - `polymulx` -- multiply a polynomial in ``P_i(x)`` by ``x``.\n - `polymul` -- multiply two polynomials.\n - `polydiv` -- divide one polynomial by another.\n-- `polypow` -- raise a polynomial to an positive integer power.\n+- `polypow` -- raise a polynomial to a positive integer power.\n - `polyval` -- evaluate a polynomial at given points.\n - `polyval2d` -- evaluate a 2D polynomial at given points.\n - `polyval3d` -- evaluate a 3D polynomial at given points."
    },
    {
        "commit_id": "591880b0a7bcbb493d9ec023783157818f2f5236",
        "commit_message": "Merge pull request #11745 from charris/fix-polyfit-doc\n\nDOC: Small docstring fixes for old polyfit.",
        "commit_url": "https://github.com/numpy/numpy/commit/591880b0a7bcbb493d9ec023783157818f2f5236",
        "buggy_code": "of interest, do ``new_series.convert().coef``",
        "fixed_code": "of interest, do ``new_series.convert().coef``.",
        "patch": "@@ -862,7 +862,7 @@ class domain in NumPy 1.4 and ``None`` in later versions.\n             A series that represents the least squares fit to the data and\n             has the domain and window specified in the call. If the\n             coefficients for the unscaled and unshifted basis polynomials are\n-            of interest, do ``new_series.convert().coef``\n+            of interest, do ``new_series.convert().coef``.\n \n         [resid, rank, sv, rcond] : list\n             These values are only returned if `full` = True"
    },
    {
        "commit_id": "73d11ceb5e0fbbd98b3c2d0ab1d3042d09026c3d",
        "commit_message": "Merge pull request #11725 from QuLogic/selected-real-kind\n\nBUG: Fix Fortran kind detection for aarch64 & s390x.",
        "commit_url": "https://github.com/numpy/numpy/commit/73d11ceb5e0fbbd98b3c2d0ab1d3042d09026c3d",
        "buggy_code": "if machine.startswith('power') or machine.startswith('ppc64'):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):",
        "patch": "@@ -2403,7 +2403,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith('power') or machine.startswith('ppc64'):\n+    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "e0c126dfc7b19f7681380b413e4793e94a85b065",
        "commit_message": "Fix Fortran kind detection for aarch64 & s390x.",
        "commit_url": "https://github.com/numpy/numpy/commit/e0c126dfc7b19f7681380b413e4793e94a85b065",
        "buggy_code": "if machine.startswith('power') or machine.startswith('ppc64'):",
        "fixed_code": "if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):",
        "patch": "@@ -2403,7 +2403,7 @@ def _selected_real_kind_func(p, r=0, radix=0):\n     if p < 16:\n         return 8\n     machine = platform.machine().lower()\n-    if machine.startswith('power') or machine.startswith('ppc64'):\n+    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):\n         if p <= 20:\n             return 16\n     else:"
    },
    {
        "commit_id": "81bd37e73b854974312a971d0742793caf425684",
        "commit_message": "TST: add broadcast_arrays() kwarg unit test for TypeError\n\n* broadcast_arrays() is now tested for the case when an invalid\nkeyword argument is used; the appropriate error string content\nis also tested for\n\n* the TypeError message produced in the above case has been restored\nto the correct value in Python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/81bd37e73b854974312a971d0742793caf425684",
        "buggy_code": "'argument {!r}'.format(kwargs.keys()[0]))",
        "fixed_code": "'argument {!r}'.format(list(kwargs.keys())[0]))",
        "patch": "@@ -242,7 +242,7 @@ def broadcast_arrays(*args, **kwargs):\n     subok = kwargs.pop('subok', False)\n     if kwargs:\n         raise TypeError('broadcast_arrays() got an unexpected keyword '\n-                        'argument {!r}'.format(kwargs.keys()[0]))\n+                        'argument {!r}'.format(list(kwargs.keys())[0]))\n     args = [np.array(_m, copy=False, subok=subok) for _m in args]\n \n     shape = _broadcast_shape(*args)"
    },
    {
        "commit_id": "58df86ae9520dc9c667ff43176a0bd08c565cc3d",
        "commit_message": "MAINT: np.angle: Fix type of default argument to match docs",
        "commit_url": "https://github.com/numpy/numpy/commit/58df86ae9520dc9c667ff43176a0bd08c565cc3d",
        "buggy_code": "def angle(z, deg=0):",
        "fixed_code": "def angle(z, deg=False):",
        "patch": "@@ -1309,7 +1309,7 @@ def interp(x, xp, fp, left=None, right=None, period=None):\n     return interp_func(x, xp, fp, left, right)\n \n \n-def angle(z, deg=0):\n+def angle(z, deg=False):\n     \"\"\"\n     Return the angle of the complex argument.\n "
    },
    {
        "commit_id": "1e1f08bd317657d63ede46de260f98ac0adf9b92",
        "commit_message": "BUG: is_complex should explicitly change an array scalar to scalar.\n\nRather than rely on +array doing that for it.",
        "commit_url": "https://github.com/numpy/numpy/commit/1e1f08bd317657d63ede46de260f98ac0adf9b92",
        "buggy_code": "return +res  # convert to array-scalar if needed",
        "fixed_code": "return res[()]   # convert to scalar if needed",
        "patch": "@@ -215,7 +215,7 @@ def iscomplex(x):\n     if issubclass(ax.dtype.type, _nx.complexfloating):\n         return ax.imag != 0\n     res = zeros(ax.shape, bool)\n-    return +res  # convert to array-scalar if needed\n+    return res[()]   # convert to scalar if needed\n \n def isreal(x):\n     \"\"\""
    },
    {
        "commit_id": "65687ff01c932b53d641fbe91b8d945d1a550744",
        "commit_message": "convert env variable flags and fix LDSHARED",
        "commit_url": "https://github.com/numpy/numpy/commit/65687ff01c932b53d641fbe91b8d945d1a550744",
        "buggy_code": "linker_so = ('exe.linker_so', 'LDSHARED', 'ldshared', None, True),",
        "fixed_code": "linker_so = ('exe.linker_so', 'LDSHARED', 'ldshared', None, False),",
        "patch": "@@ -114,7 +114,7 @@ class FCompiler(CCompiler):\n         compiler_f90 = ('exe.compiler_f90', 'F90', 'f90exec', None, False),\n         compiler_fix = ('exe.compiler_fix', 'F90', 'f90exec', None, False),\n         version_cmd = ('exe.version_cmd', None, None, None, False),\n-        linker_so = ('exe.linker_so', 'LDSHARED', 'ldshared', None, True),\n+        linker_so = ('exe.linker_so', 'LDSHARED', 'ldshared', None, False),\n         linker_exe = ('exe.linker_exe', 'LD', 'ld', None, False),\n         archiver = (None, 'AR', 'ar', None, False),\n         ranlib = (None, 'RANLIB', 'ranlib', None, False),"
    },
    {
        "commit_id": "47d5ff9039860548fd1e840c4045ab54f5e154c9",
        "commit_message": "Merge pull request #11444 from silenc3r/patch-1\n\nDOC: Fix documentation for fromfunction",
        "commit_url": "https://github.com/numpy/numpy/commit/47d5ff9039860548fd1e840c4045ab54f5e154c9",
        "buggy_code": "`fromfunction` would match the `shape` parameter.",
        "fixed_code": "`fromfunction` would not match the `shape` parameter.",
        "patch": "@@ -1897,7 +1897,7 @@ def fromfunction(function, shape, **kwargs):\n         The result of the call to `function` is passed back directly.\n         Therefore the shape of `fromfunction` is completely determined by\n         `function`.  If `function` returns a scalar value, the shape of\n-        `fromfunction` would match the `shape` parameter.\n+        `fromfunction` would not match the `shape` parameter.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "e9bf4aefc982341c106a05e1db60054bc1c5957c",
        "commit_message": "Fix documentation for fromfunction\n\n```np.fromfunction(lambda i, j: 1, (3, 3), dtype=int)``` returns ```1```.",
        "commit_url": "https://github.com/numpy/numpy/commit/e9bf4aefc982341c106a05e1db60054bc1c5957c",
        "buggy_code": "`fromfunction` would match the `shape` parameter.",
        "fixed_code": "`fromfunction` would not match the `shape` parameter.",
        "patch": "@@ -1897,7 +1897,7 @@ def fromfunction(function, shape, **kwargs):\n         The result of the call to `function` is passed back directly.\n         Therefore the shape of `fromfunction` is completely determined by\n         `function`.  If `function` returns a scalar value, the shape of\n-        `fromfunction` would match the `shape` parameter.\n+        `fromfunction` would not match the `shape` parameter.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "72d2bc0b36478e06cc9d2f942f24308cabf1a22e",
        "commit_message": "Merge pull request #11428 from eric-wieser/deprecate-normed-1.15.0\n\nBUG: Fix incorrect deprecation logic for histogram(normed=...) (master)",
        "commit_url": "https://github.com/numpy/numpy/commit/72d2bc0b36478e06cc9d2f942f24308cabf1a22e",
        "buggy_code": "normed = False",
        "fixed_code": "normed = None",
        "patch": "@@ -782,7 +782,7 @@ def histogram(a, bins=10, range=None, normed=None, weights=None,\n                     \"The normed argument is ignored when density is provided. \"\n                     \"In future passing both will result in an error.\",\n                     DeprecationWarning, stacklevel=2)\n-        normed = False\n+        normed = None\n \n     if density:\n         db = np.array(np.diff(bin_edges), float)"
    },
    {
        "commit_id": "431740e8a04855f8cdf2f720752e462a9cf69269",
        "commit_message": "BUG: Fix incorrect deprecation logic for histogram(normed=...)\n\nFixes #11426, which was introduced in #11323 and #11352",
        "commit_url": "https://github.com/numpy/numpy/commit/431740e8a04855f8cdf2f720752e462a9cf69269",
        "buggy_code": "normed = False",
        "fixed_code": "normed = None",
        "patch": "@@ -782,7 +782,7 @@ def histogram(a, bins=10, range=None, normed=None, weights=None,\n                     \"The normed argument is ignored when density is provided. \"\n                     \"In future passing both will result in an error.\",\n                     DeprecationWarning, stacklevel=2)\n-        normed = False\n+        normed = None\n \n     if density:\n         db = np.array(np.diff(bin_edges), float)"
    },
    {
        "commit_id": "8c55ee6856ede7157f2d666560461941db6bc5eb",
        "commit_message": "Merge pull request #11218 from rsokl/master\n\nBUG: Fixes einsum broadcasting bug when optimize=True",
        "commit_url": "https://github.com/numpy/numpy/commit/8c55ee6856ede7157f2d666560461941db6bc5eb",
        "buggy_code": "if 1 in tmp_operands[0] or 1 in tmp_operands[1]:",
        "fixed_code": "if 1 in tmp_operands[0].shape or 1 in tmp_operands[1].shape:",
        "patch": "@@ -1109,7 +1109,7 @@ def einsum(*operands, **kwargs):\n             # Checks have already been handled\n             input_str, results_index = einsum_str.split('->')\n             input_left, input_right = input_str.split(',')\n-            if 1 in tmp_operands[0] or 1 in tmp_operands[1]:\n+            if 1 in tmp_operands[0].shape or 1 in tmp_operands[1].shape:\n                 left_dims = {dim: size for dim, size in\n                              zip(input_left, tmp_operands[0].shape)}\n                 right_dims = {dim: size for dim, size in"
    },
    {
        "commit_id": "8682a3bd34d42c48f52690563de8e2f667e49bc1",
        "commit_message": "einsum bug fix: check array shapes, not array elements, for singleton dimensions",
        "commit_url": "https://github.com/numpy/numpy/commit/8682a3bd34d42c48f52690563de8e2f667e49bc1",
        "buggy_code": "if 1 in tmp_operands[0] or 1 in tmp_operands[1]:",
        "fixed_code": "if 1 in tmp_operands[0].shape or 1 in tmp_operands[1].shape:",
        "patch": "@@ -1109,7 +1109,7 @@ def einsum(*operands, **kwargs):\n             # Checks have already been handled\n             input_str, results_index = einsum_str.split('->')\n             input_left, input_right = input_str.split(',')\n-            if 1 in tmp_operands[0] or 1 in tmp_operands[1]:\n+            if 1 in tmp_operands[0].shape or 1 in tmp_operands[1].shape:\n                 left_dims = {dim: size for dim, size in\n                              zip(input_left, tmp_operands[0].shape)}\n                 right_dims = {dim: size for dim, size in"
    },
    {
        "commit_id": "9e4403deb37d6dd5658a4a2cb1de14274a806e98",
        "commit_message": "Merge pull request #11182 from eric-wieser/index-tricks-warning\n\nBUG: Avoid deprecated non-tuple indexing",
        "commit_url": "https://github.com/numpy/numpy/commit/9e4403deb37d6dd5658a4a2cb1de14274a806e98",
        "buggy_code": "nn[k] = nn[k][slobj]",
        "fixed_code": "nn[k] = nn[k][tuple(slobj)]",
        "patch": "@@ -201,7 +201,7 @@ def __getitem__(self, key):\n                 slobj = [_nx.newaxis]*len(size)\n                 for k in range(len(size)):\n                     slobj[k] = slice(None, None)\n-                    nn[k] = nn[k][slobj]\n+                    nn[k] = nn[k][tuple(slobj)]\n                     slobj[k] = _nx.newaxis\n             return nn\n         except (IndexError, TypeError):"
    },
    {
        "commit_id": "7bf34020951f2c99d390870b085843835057e4a7",
        "commit_message": "BUG: Avoid deprecated non-tuple indexing\n\nnp.ogrid was not tested anyway, so this was not caught.",
        "commit_url": "https://github.com/numpy/numpy/commit/7bf34020951f2c99d390870b085843835057e4a7",
        "buggy_code": "nn[k] = nn[k][slobj]",
        "fixed_code": "nn[k] = nn[k][tuple(slobj)]",
        "patch": "@@ -201,7 +201,7 @@ def __getitem__(self, key):\n                 slobj = [_nx.newaxis]*len(size)\n                 for k in range(len(size)):\n                     slobj[k] = slice(None, None)\n-                    nn[k] = nn[k][slobj]\n+                    nn[k] = nn[k][tuple(slobj)]\n                     slobj[k] = _nx.newaxis\n             return nn\n         except (IndexError, TypeError):"
    },
    {
        "commit_id": "6aa659951a63d7c491f1a06aea0605ea30ec699f",
        "commit_message": "BUG: Fix typo in variable name (#11116)\n\nTypo fix in variable name in core/numeric/binary_repr/warn_if_insufficient.\r\n\r\nThis only worked before because it used binwidth from the outer namespace.",
        "commit_url": "https://github.com/numpy/numpy/commit/6aa659951a63d7c491f1a06aea0605ea30ec699f",
        "buggy_code": "def warn_if_insufficient(width, binwdith):",
        "fixed_code": "def warn_if_insufficient(width, binwidth):",
        "patch": "@@ -2035,7 +2035,7 @@ def binary_repr(num, width=None):\n     '11101'\n \n     \"\"\"\n-    def warn_if_insufficient(width, binwdith):\n+    def warn_if_insufficient(width, binwidth):\n         if width is not None and width < binwidth:\n             warnings.warn(\n                 \"Insufficient bit width provided. This behavior \""
    },
    {
        "commit_id": "7c74d1be745b19bc789967e8b3a552a590bcd673",
        "commit_message": "Merge pull request #11111 from juliantaylor/avx-fix\n\nBUG: fix case of ISA selector in ufunc selection",
        "commit_url": "https://github.com/numpy/numpy/commit/7c74d1be745b19bc789967e8b3a552a590bcd673",
        "buggy_code": "if (npy_cpu_supports(\"{ISA}\")) {{",
        "fixed_code": "if (npy_cpu_supports(\"{isa}\")) {{",
        "patch": "@@ -972,7 +972,7 @@ def make_arrays(funcdict):\n                     for vt in t.simd:\n                         code2list.append(textwrap.dedent(\"\"\"\\\n                         #ifdef HAVE_ATTRIBUTE_TARGET_{ISA}\n-                        if (npy_cpu_supports(\"{ISA}\")) {{\n+                        if (npy_cpu_supports(\"{isa}\")) {{\n                             {fname}_functions[{idx}] = {type}_{fname}_{isa};\n                         }}\n                         #endif"
    },
    {
        "commit_id": "f461570e69eb290a77baf8fee1b169057ee02d0d",
        "commit_message": "BUG: fix case of ISA selector in ufunc selection\n\nThe function expects lowercase so we accidentally turned of avx support\ncompletely.",
        "commit_url": "https://github.com/numpy/numpy/commit/f461570e69eb290a77baf8fee1b169057ee02d0d",
        "buggy_code": "if (npy_cpu_supports(\"{ISA}\")) {{",
        "fixed_code": "if (npy_cpu_supports(\"{isa}\")) {{",
        "patch": "@@ -972,7 +972,7 @@ def make_arrays(funcdict):\n                     for vt in t.simd:\n                         code2list.append(textwrap.dedent(\"\"\"\\\n                         #ifdef HAVE_ATTRIBUTE_TARGET_{ISA}\n-                        if (npy_cpu_supports(\"{ISA}\")) {{\n+                        if (npy_cpu_supports(\"{isa}\")) {{\n                             {fname}_functions[{idx}] = {type}_{fname}_{isa};\n                         }}\n                         #endif"
    },
    {
        "commit_id": "7c7ad152867928a3b4b6d5d5ff6c5e266360c6be",
        "commit_message": "BUG: Fix missing `type` in identity test.",
        "commit_url": "https://github.com/numpy/numpy/commit/7c7ad152867928a3b4b6d5d5ff6c5e266360c6be",
        "buggy_code": "assert_(type(a) is not (i.operands[2]))",
        "fixed_code": "assert_(type(a) is not type(i.operands[2]))",
        "patch": "@@ -1486,7 +1486,7 @@ class MyNDArray(np.ndarray):\n                [['readonly'], ['readonly'],\n                 ['writeonly', 'allocate', 'no_subtype']])\n     assert_equal(type(b), type(i.operands[2]))\n-    assert_(type(a) is not (i.operands[2]))\n+    assert_(type(a) is not type(i.operands[2]))\n     assert_equal(i.operands[2].shape, (2, 2))\n \n def test_iter_allocate_output_errors():"
    },
    {
        "commit_id": "2cf2db309dcbce5a99102d568f50e734633e2eb8",
        "commit_message": "Merge pull request #11023 from eric-wieser/histogramdd-no-fuzz\n\nBUG: np.histogramdd loses precision on its inputs, leading to incorrect results",
        "commit_url": "https://github.com/numpy/numpy/commit/2cf2db309dcbce5a99102d568f50e734633e2eb8",
        "buggy_code": "xedges = yedges = asarray(bins, float)",
        "fixed_code": "xedges = yedges = asarray(bins)",
        "patch": "@@ -650,7 +650,7 @@ def histogram2d(x, y, bins=10, range=None, normed=False, weights=None):\n         N = 1\n \n     if N != 1 and N != 2:\n-        xedges = yedges = asarray(bins, float)\n+        xedges = yedges = asarray(bins)\n         bins = [xedges, yedges]\n     hist, edges = histogramdd([x, y], bins, range, normed, weights)\n     return hist, edges[0], edges[1]"
    },
    {
        "commit_id": "ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "commit_message": "Merge pull request #11057 from mattip/absolute-test-import\n\nBUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -6,7 +6,7 @@\n from numpy.testing import (\n     assert_, assert_equal, assert_raises, assert_array_equal, temppath,\n     )\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n LD_INFO = np.finfo(np.longdouble)\n longdouble_longer_than_double = (LD_INFO.eps < np.finfo(np.double).eps)"
    },
    {
        "commit_id": "ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "commit_message": "Merge pull request #11057 from mattip/absolute-test-import\n\nBUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -34,7 +34,7 @@\n     assert_allclose, IS_PYPY, HAS_REFCOUNT, assert_array_less, runstring,\n     SkipTest, temppath, suppress_warnings\n     )\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n # Need to test an object that does not fully implement math interface\n from datetime import timedelta, datetime"
    },
    {
        "commit_id": "ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "commit_message": "Merge pull request #11057 from mattip/absolute-test-import\n\nBUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/ed6d6dc52764c8d6a44f0b1bb731a20bca75401d",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -4,7 +4,7 @@\n \n import numpy as np\n from numpy.testing import assert_, assert_equal, SkipTest\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n \n if sys.version_info[0] >= 3:"
    },
    {
        "commit_id": "7bbf2bca11bee820086465853e5a6e813b4d02da",
        "commit_message": "BUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/7bbf2bca11bee820086465853e5a6e813b4d02da",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -6,7 +6,7 @@\n from numpy.testing import (\n     assert_, assert_equal, assert_raises, assert_array_equal, temppath,\n     )\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n LD_INFO = np.finfo(np.longdouble)\n longdouble_longer_than_double = (LD_INFO.eps < np.finfo(np.double).eps)"
    },
    {
        "commit_id": "7bbf2bca11bee820086465853e5a6e813b4d02da",
        "commit_message": "BUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/7bbf2bca11bee820086465853e5a6e813b4d02da",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -34,7 +34,7 @@\n     assert_allclose, IS_PYPY, HAS_REFCOUNT, assert_array_less, runstring,\n     SkipTest, temppath, suppress_warnings\n     )\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n # Need to test an object that does not fully implement math interface\n from datetime import timedelta, datetime"
    },
    {
        "commit_id": "7bbf2bca11bee820086465853e5a6e813b4d02da",
        "commit_message": "BUG: use absolute imports in test files",
        "commit_url": "https://github.com/numpy/numpy/commit/7bbf2bca11bee820086465853e5a6e813b4d02da",
        "buggy_code": "from ._locales import CommaDecimalPointLocale",
        "fixed_code": "from numpy.core.tests._locales import CommaDecimalPointLocale",
        "patch": "@@ -4,7 +4,7 @@\n \n import numpy as np\n from numpy.testing import assert_, assert_equal, SkipTest\n-from ._locales import CommaDecimalPointLocale\n+from numpy.core.tests._locales import CommaDecimalPointLocale\n \n \n if sys.version_info[0] >= 3:"
    },
    {
        "commit_id": "8e2f3f9eeea4395ceb00a92c3bfdaddac9cab077",
        "commit_message": "DOC: Fix incorrect function name in format_float_positional example (#10987)\n\nThe result was correct",
        "commit_url": "https://github.com/numpy/numpy/commit/8e2f3f9eeea4395ceb00a92c3bfdaddac9cab077",
        "buggy_code": ">>> np.format_float_scientific(np.float32(np.pi))",
        "fixed_code": ">>> np.format_float_positional(np.float32(np.pi))",
        "patch": "@@ -1088,7 +1088,7 @@ def format_float_positional(x, precision=None, unique=True,\n \n     Examples\n     --------\n-    >>> np.format_float_scientific(np.float32(np.pi))\n+    >>> np.format_float_positional(np.float32(np.pi))\n     '3.1415927'\n     >>> np.format_float_positional(np.float16(np.pi))\n     '3.14'"
    },
    {
        "commit_id": "76aa47df078ca4f546487642635b12baca34d775",
        "commit_message": "Merge pull request #10940 from nkartashov/10939-fixing-broken-developer-links\n\nDOC: fix broken links for developer documentation",
        "commit_url": "https://github.com/numpy/numpy/commit/76aa47df078ca4f546487642635b12baca34d775",
        "buggy_code": "`f2py <http://docs.scipy.org/doc/numpy-dev/f2py/>`_.",
        "fixed_code": "`f2py <http://docs.scipy.org/doc/numpy/f2py/>`_.",
        "patch": "@@ -209,7 +209,7 @@\n Interfacing to Fortran:\n -----------------------\n The clear choice to wrap Fortran code is\n-`f2py <http://docs.scipy.org/doc/numpy-dev/f2py/>`_.\n+`f2py <http://docs.scipy.org/doc/numpy/f2py/>`_.\n \n Pyfort is an older alternative, but not supported any longer.\n Fwrap is a newer project that looked promising but isn't being developed any"
    },
    {
        "commit_id": "c3c52b276892c7c1d8eeb1c9067dc02178e48863",
        "commit_message": "DOC: fix broken links for developer documentation\n\nSome links in developer documentation and files had extraneous '-dev' in\nthem, removing it restore the working state of the links.\nSee: #10939",
        "commit_url": "https://github.com/numpy/numpy/commit/c3c52b276892c7c1d8eeb1c9067dc02178e48863",
        "buggy_code": "`f2py <http://docs.scipy.org/doc/numpy-dev/f2py/>`_.",
        "fixed_code": "`f2py <http://docs.scipy.org/doc/numpy/f2py/>`_.",
        "patch": "@@ -209,7 +209,7 @@\n Interfacing to Fortran:\n -----------------------\n The clear choice to wrap Fortran code is\n-`f2py <http://docs.scipy.org/doc/numpy-dev/f2py/>`_.\n+`f2py <http://docs.scipy.org/doc/numpy/f2py/>`_.\n \n Pyfort is an older alternative, but not supported any longer.\n Fwrap is a newer project that looked promising but isn't being developed any"
    },
    {
        "commit_id": "67b9a768a7e6f373bbba02df302622773559ca4b",
        "commit_message": "Merge pull request #10921 from mattip/percentile-graph\n\nDOC: clear up warnings, fix matplotlib plot",
        "commit_url": "https://github.com/numpy/numpy/commit/67b9a768a7e6f373bbba02df302622773559ca4b",
        "buggy_code": "'matplotlib': ('http://matplotlib.org', None)",
        "fixed_code": "'matplotlib': ('https://matplotlib.org', None)",
        "patch": "@@ -215,7 +215,7 @@ def setup(app):\n intersphinx_mapping = {\n     'python': ('https://docs.python.org/dev', None),\n     'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),\n-    'matplotlib': ('http://matplotlib.org', None)\n+    'matplotlib': ('https://matplotlib.org', None)\n }\n \n "
    },
    {
        "commit_id": "7f7a917a49a8f7600f8614adaf5b0c5883aee881",
        "commit_message": "Merge pull request #10936 from stefanv/npversion\n\nDOC: Fix NumpyVersion example (closes gh-10935)",
        "commit_url": "https://github.com/numpy/numpy/commit/7f7a917a49a8f7600f8614adaf5b0c5883aee881",
        "buggy_code": ">>> if NumpyVersion(np.__version__) < '1.7.0'):",
        "fixed_code": ">>> if NumpyVersion(np.__version__) < '1.7.0':",
        "patch": "@@ -45,7 +45,7 @@ class NumpyVersion():\n     Examples\n     --------\n     >>> from numpy.lib import NumpyVersion\n-    >>> if NumpyVersion(np.__version__) < '1.7.0'):\n+    >>> if NumpyVersion(np.__version__) < '1.7.0':\n     ...     print('skip')\n     skip\n "
    },
    {
        "commit_id": "f462e78fb49ed21d4817562d88cc19e6b9c2e5c1",
        "commit_message": "DOC: Fix NumpyVersion example (closes gh-10935)",
        "commit_url": "https://github.com/numpy/numpy/commit/f462e78fb49ed21d4817562d88cc19e6b9c2e5c1",
        "buggy_code": ">>> if NumpyVersion(np.__version__) < '1.7.0'):",
        "fixed_code": ">>> if NumpyVersion(np.__version__) < '1.7.0':",
        "patch": "@@ -45,7 +45,7 @@ class NumpyVersion():\n     Examples\n     --------\n     >>> from numpy.lib import NumpyVersion\n-    >>> if NumpyVersion(np.__version__) < '1.7.0'):\n+    >>> if NumpyVersion(np.__version__) < '1.7.0':\n     ...     print('skip')\n     skip\n "
    },
    {
        "commit_id": "df8e83538461c29bc12c44198574bde8ffefcad7",
        "commit_message": "DOC: clear up warnings, fix matplotlib plot",
        "commit_url": "https://github.com/numpy/numpy/commit/df8e83538461c29bc12c44198574bde8ffefcad7",
        "buggy_code": "'matplotlib': ('http://matplotlib.org', None)",
        "fixed_code": "'matplotlib': ('https://matplotlib.org', None)",
        "patch": "@@ -215,7 +215,7 @@ def setup(app):\n intersphinx_mapping = {\n     'python': ('https://docs.python.org/dev', None),\n     'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),\n-    'matplotlib': ('http://matplotlib.org', None)\n+    'matplotlib': ('https://matplotlib.org', None)\n }\n \n "
    },
    {
        "commit_id": "40ef8a6ade7282c613d58ed24c68915d61dcc07b",
        "commit_message": "Merge pull request #10874 from pchanial/fix-10873-lexsoft-docstring\n\nDOC: State in docstring that lexsort is stable (#10873).",
        "commit_url": "https://github.com/numpy/numpy/commit/40ef8a6ade7282c613d58ed24c68915d61dcc07b",
        "buggy_code": "Perform an indirect sort using a sequence of keys.",
        "fixed_code": "Perform an indirect stable sort using a sequence of keys.",
        "patch": "@@ -1589,7 +1589,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     \"\"\"\n     lexsort(keys, axis=-1)\n \n-    Perform an indirect sort using a sequence of keys.\n+    Perform an indirect stable sort using a sequence of keys.\n \n     Given multiple sorting keys, which can be interpreted as columns in a\n     spreadsheet, lexsort returns an array of integer indices that describes"
    },
    {
        "commit_id": "c8a5f560f1eedd510ca5656b06dd1ca2ba9322bd",
        "commit_message": "BUG: Use intp for indices\n\nFixes gh-8531",
        "commit_url": "https://github.com/numpy/numpy/commit/c8a5f560f1eedd510ca5656b06dd1ca2ba9322bd",
        "buggy_code": "xy = np.zeros(N, int)",
        "fixed_code": "xy = np.zeros(N, np.intp)",
        "patch": "@@ -927,7 +927,7 @@ def histogramdd(sample, bins=10, range=None, normed=False, weights=None):\n \n     # Compute the sample indices in the flattened histogram matrix.\n     ni = nbin.argsort()\n-    xy = np.zeros(N, int)\n+    xy = np.zeros(N, np.intp)\n     for i in np.arange(0, D-1):\n         xy += Ncount[ni[i]] * nbin[ni[i+1:]].prod()\n     xy += Ncount[ni[-1]]"
    },
    {
        "commit_id": "77b6a10f942aab5e7670d71cab7c71c368665e47",
        "commit_message": "Merge pull request #10831 from luzpaz/fix-minor-typos\n\nDOC: Fix minor typos",
        "commit_url": "https://github.com/numpy/numpy/commit/77b6a10f942aab5e7670d71cab7c71c368665e47",
        "buggy_code": "change the output type of a ufunc, but, in constrast to",
        "fixed_code": "change the output type of a ufunc, but, in contrast to",
        "patch": "@@ -562,7 +562,7 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n \n Prior to numpy 1.13, the behaviour of ufuncs could only be tuned using\n ``__array_wrap__`` and ``__array_prepare__``. These two allowed one to\n-change the output type of a ufunc, but, in constrast to\n+change the output type of a ufunc, but, in contrast to\n ``__array_ufunc__``, did not allow one to make any changes to the inputs.\n It is hoped to eventually deprecate these, but ``__array_wrap__`` is also\n used by other numpy functions and methods, such as ``squeeze``, so at the"
    },
    {
        "commit_id": "77b6a10f942aab5e7670d71cab7c71c368665e47",
        "commit_message": "Merge pull request #10831 from luzpaz/fix-minor-typos\n\nDOC: Fix minor typos",
        "commit_url": "https://github.com/numpy/numpy/commit/77b6a10f942aab5e7670d71cab7c71c368665e47",
        "buggy_code": "where i is the index of first occurence of one of the characters",
        "fixed_code": "where i is the index of first occurrence of one of the characters",
        "patch": "@@ -612,7 +612,7 @@ def readfortrancode(ffile, dowithline=show, istop=1):\n def split_by_unquoted(line, characters):\n     \"\"\"\n     Splits the line into (line[:i], line[i:]),\n-    where i is the index of first occurence of one of the characters\n+    where i is the index of first occurrence of one of the characters\n     not within quotes, or len(line) if no such index exists\n     \"\"\"\n     assert not (set('\"\\'') & set(characters)), \"cannot split by unquoted quotes\""
    },
    {
        "commit_id": "108d01a0a4eea38ed5b8e88de34ee2d0324fec65",
        "commit_message": "DOC: Fix minor typos\n\nFound via `codespell -q 3 -I ../numpy-whitelist.txt`",
        "commit_url": "https://github.com/numpy/numpy/commit/108d01a0a4eea38ed5b8e88de34ee2d0324fec65",
        "buggy_code": "change the output type of a ufunc, but, in constrast to",
        "fixed_code": "change the output type of a ufunc, but, in contrast to",
        "patch": "@@ -562,7 +562,7 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n \n Prior to numpy 1.13, the behaviour of ufuncs could only be tuned using\n ``__array_wrap__`` and ``__array_prepare__``. These two allowed one to\n-change the output type of a ufunc, but, in constrast to\n+change the output type of a ufunc, but, in contrast to\n ``__array_ufunc__``, did not allow one to make any changes to the inputs.\n It is hoped to eventually deprecate these, but ``__array_wrap__`` is also\n used by other numpy functions and methods, such as ``squeeze``, so at the"
    },
    {
        "commit_id": "108d01a0a4eea38ed5b8e88de34ee2d0324fec65",
        "commit_message": "DOC: Fix minor typos\n\nFound via `codespell -q 3 -I ../numpy-whitelist.txt`",
        "commit_url": "https://github.com/numpy/numpy/commit/108d01a0a4eea38ed5b8e88de34ee2d0324fec65",
        "buggy_code": "where i is the index of first occurence of one of the characters",
        "fixed_code": "where i is the index of first occurrence of one of the characters",
        "patch": "@@ -612,7 +612,7 @@ def readfortrancode(ffile, dowithline=show, istop=1):\n def split_by_unquoted(line, characters):\n     \"\"\"\n     Splits the line into (line[:i], line[i:]),\n-    where i is the index of first occurence of one of the characters\n+    where i is the index of first occurrence of one of the characters\n     not within quotes, or len(line) if no such index exists\n     \"\"\"\n     assert not (set('\"\\'') & set(characters)), \"cannot split by unquoted quotes\""
    },
    {
        "commit_id": "e19e52e0934690323d666704b850dcab1f8c66bf",
        "commit_message": "Merge pull request #10666 from dfreese/fix/covcomplex\n\nBUG: fix complex casting error in cov with aweights",
        "commit_url": "https://github.com/numpy/numpy/commit/e19e52e0934690323d666704b850dcab1f8c66bf",
        "buggy_code": "c *= 1. / np.float64(fact)",
        "fixed_code": "c *= np.true_divide(1, fact)",
        "patch": "@@ -2302,7 +2302,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n     else:\n         X_T = (X*w).T\n     c = dot(X, X_T.conj())\n-    c *= 1. / np.float64(fact)\n+    c *= np.true_divide(1, fact)\n     return c.squeeze()\n \n "
    },
    {
        "commit_id": "e97de95d4cae6805ed6c258655e7492a5f2ce863",
        "commit_message": "Fix low-hanging Pypy compatibility issues (#10737)\n\n* TST: skip refcount-requiring tests if sys.refcount is missing\r\n\r\n* ENH: io: add refcheck=False to a safe .resize() call\r\n\r\nThe array is allocated immediately above, and the resize always succeeds\r\nso it is not necessary to check it. Fixes Pypy compatibility.\r\n\r\n* TST: remove unused code\r\n\r\n* TST: factor skipif(not HAS_REFCOUNT) into a separate decorator",
        "commit_url": "https://github.com/numpy/numpy/commit/e97de95d4cae6805ed6c258655e7492a5f2ce863",
        "buggy_code": "@dec.skipif(not HAS_REFCOUNT, \"python does not have sys.getrefcount\")",
        "fixed_code": "@dec._needs_refcount",
        "patch": "@@ -33,7 +33,7 @@ def iter_iterindices(i):\n         i.iternext()\n     return ret\n \n-@dec.skipif(not HAS_REFCOUNT, \"python does not have sys.getrefcount\")\n+@dec._needs_refcount\n def test_iter_refcount():\n     # Make sure the iterator doesn't leak\n "
    },
    {
        "commit_id": "e97de95d4cae6805ed6c258655e7492a5f2ce863",
        "commit_message": "Fix low-hanging Pypy compatibility issues (#10737)\n\n* TST: skip refcount-requiring tests if sys.refcount is missing\r\n\r\n* ENH: io: add refcheck=False to a safe .resize() call\r\n\r\nThe array is allocated immediately above, and the resize always succeeds\r\nso it is not necessary to check it. Fixes Pypy compatibility.\r\n\r\n* TST: remove unused code\r\n\r\n* TST: factor skipif(not HAS_REFCOUNT) into a separate decorator",
        "commit_url": "https://github.com/numpy/numpy/commit/e97de95d4cae6805ed6c258655e7492a5f2ce863",
        "buggy_code": "X.resize(nshape)",
        "fixed_code": "X.resize(nshape, refcheck=False)",
        "patch": "@@ -1104,7 +1104,7 @@ def tobytes_first(x, conv):\n                 nshape = list(X.shape)\n                 pos = nshape[0]\n                 nshape[0] += len(x)\n-                X.resize(nshape)\n+                X.resize(nshape, refcheck=False)\n                 X[pos:, ...] = x\n     finally:\n         if fown:"
    },
    {
        "commit_id": "055ce3e90b50b5f9ef8cf1b8641c42e391f10735",
        "commit_message": "MAINT: Misc small fixes. (#10722)\n\n* MAINT: Replace print statements for Python3.\r\n\r\nUpdates tools/swig/test/testSuperTensor.py.\r\n\r\n* MAINT: Fix deprecated escaped characters for python 3.6+.\r\n\r\nUpdate numpy/linalg/lapack_lite/clapack_scrub.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/055ce3e90b50b5f9ef8cf1b8641c42e391f10735",
        "buggy_code": "'/\\* Subroutine \\*/^\\s*(?:(?:inline|static)\\s+){0,2}(?!else|typedef|return)\\w+\\s+\\*?\\s*(\\w+)\\s*\\([^0]+\\)\\s*;?'",
        "fixed_code": "r'/[*] Subroutine [*]/^\\s*(?:(?:inline|static)\\s+){0,2}(?!else|typedef|return)\\w+\\s+\\*?\\s*(\\w+)\\s*\\([^0]+\\)\\s*;?'",
        "patch": "@@ -229,7 +229,7 @@ def OutOfHeader(line):\n \n def removeSubroutinePrototypes(source):\n     expression = re.compile(\n-        '/\\* Subroutine \\*/^\\s*(?:(?:inline|static)\\s+){0,2}(?!else|typedef|return)\\w+\\s+\\*?\\s*(\\w+)\\s*\\([^0]+\\)\\s*;?'\n+        r'/[*] Subroutine [*]/^\\s*(?:(?:inline|static)\\s+){0,2}(?!else|typedef|return)\\w+\\s+\\*?\\s*(\\w+)\\s*\\([^0]+\\)\\s*;?'\n     )\n     lines = LineQueue()\n     for line in UStringIO(source):"
    },
    {
        "commit_id": "52e5ddcb56b6b91b0f223a0d952d97a387af6d62",
        "commit_message": "Merge pull request #10694 from lumbric/patch-2\n\nDOC: Improve docstring of memmap",
        "commit_url": "https://github.com/numpy/numpy/commit/52e5ddcb56b6b91b0f223a0d952d97a387af6d62",
        "buggy_code": "Delete the memmap instance to close.",
        "fixed_code": "Delete the memmap instance to close the memmap file.",
        "patch": "@@ -34,7 +34,7 @@ class memmap(ndarray):\n     This class may at some point be turned into a factory function\n     which returns a view into an mmap buffer.\n \n-    Delete the memmap instance to close.\n+    Delete the memmap instance to close the memmap file.\n \n \n     Parameters"
    },
    {
        "commit_id": "fdf4926b7af50707461f3fe96ede865dd7dfb0e6",
        "commit_message": "Merge pull request #10710 from louispotok/select-error-message\n\nBUG: fix error message in numpy.select",
        "commit_url": "https://github.com/numpy/numpy/commit/fdf4926b7af50707461f3fe96ede865dd7dfb0e6",
        "buggy_code": "'invalid entry in choicelist: should be boolean ndarray')",
        "fixed_code": "'invalid entry {} in condlist: should be boolean ndarray'.format(i))",
        "patch": "@@ -632,7 +632,7 @@ def select(condlist, choicelist, default=0):\n                 deprecated_ints = True\n             else:\n                 raise ValueError(\n-                    'invalid entry in choicelist: should be boolean ndarray')\n+                    'invalid entry {} in condlist: should be boolean ndarray'.format(i))\n \n     if deprecated_ints:\n         # 2014-02-24, 1.9"
    },
    {
        "commit_id": "6e6602ef7dc2168138959522b18afe556bc1321e",
        "commit_message": "BUG: fix error message in numpy.select",
        "commit_url": "https://github.com/numpy/numpy/commit/6e6602ef7dc2168138959522b18afe556bc1321e",
        "buggy_code": "'invalid entry in choicelist: should be boolean ndarray')",
        "fixed_code": "'invalid entry {} in condlist: should be boolean ndarray'.format(i))",
        "patch": "@@ -632,7 +632,7 @@ def select(condlist, choicelist, default=0):\n                 deprecated_ints = True\n             else:\n                 raise ValueError(\n-                    'invalid entry in choicelist: should be boolean ndarray')\n+                    'invalid entry {} in condlist: should be boolean ndarray'.format(i))\n \n     if deprecated_ints:\n         # 2014-02-24, 1.9"
    },
    {
        "commit_id": "a8b8830ca0ff7e437db7801ed63910de8b35318e",
        "commit_message": "Merge pull request #10547 from hobler/patch-1\n\nDOC: Fix incorrect formula in gradient docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/a8b8830ca0ff7e437db7801ed63910de8b35318e",
        "buggy_code": "-\\\\beta h_{d}+\\\\gamma h_{s}=1 \\\\\\\\",
        "fixed_code": "\\\\beta h_{d}-\\\\gamma h_{s}=1 \\\\\\\\",
        "patch": "@@ -839,7 +839,7 @@ def gradient(f, *varargs, **kwargs):\n         \\\\left\\\\{\n             \\\\begin{array}{r}\n                 \\\\alpha+\\\\beta+\\\\gamma=0 \\\\\\\\\n-                -\\\\beta h_{d}+\\\\gamma h_{s}=1 \\\\\\\\\n+                \\\\beta h_{d}-\\\\gamma h_{s}=1 \\\\\\\\\n                 \\\\beta h_{d}^{2}+\\\\gamma h_{s}^{2}=0\n             \\\\end{array}\n         \\\\right."
    },
    {
        "commit_id": "018dfbcaa69d8bcda4d909be11a65a188cf5d1dd",
        "commit_message": "BUG: fix complex casting error in cov with aweights\n\nWhen using cov with a complex input and with aweights specified, cov\nwill error as a result of trying to cast a complex value into a float64.\nThis comes about since average is used to calculate the sum of the\nweights from aweights.  average returns the sum of weights as the same\ntype as its result, not the weights type.  For a complex input m, and\nany type for aweights, this would result in a complex value for fact.\nIt appears the primary purpose of np.float64(fact) is to provide a NaN\nvalue from the divide when fact is an integer zero.  This has been\nreplaced by using numpy.divide to replicate the same behavior, but to\nalso handle complex types.",
        "commit_url": "https://github.com/numpy/numpy/commit/018dfbcaa69d8bcda4d909be11a65a188cf5d1dd",
        "buggy_code": "c *= 1. / np.float64(fact)",
        "fixed_code": "c *= np.true_divide(1, fact)",
        "patch": "@@ -2309,7 +2309,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n     else:\n         X_T = (X*w).T\n     c = dot(X, X_T.conj())\n-    c *= 1. / np.float64(fact)\n+    c *= np.true_divide(1, fact)\n     return c.squeeze()\n \n "
    },
    {
        "commit_id": "2f9d3c0796951af6d962795671135da93bbfe1c1",
        "commit_message": "Merge pull request #10604 from luzpaz/misc-typos\n\nMAINT: Fix Misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2f9d3c0796951af6d962795671135da93bbfe1c1",
        "buggy_code": "contract the ``b`` and ``c`` tensors first as reprsented by the first",
        "fixed_code": "contract the ``b`` and ``c`` tensors first as represented by the first",
        "patch": "@@ -596,7 +596,7 @@ def einsum_path(*operands, **kwargs):\n     --------\n \n     We can begin with a chain dot example. In this case, it is optimal to\n-    contract the ``b`` and ``c`` tensors first as reprsented by the first\n+    contract the ``b`` and ``c`` tensors first as represented by the first\n     element of the path ``(1, 2)``. The resulting tensor is added to the end\n     of the contraction and the remaining contraction ``(0, 1)`` is then\n     completed."
    },
    {
        "commit_id": "2f9d3c0796951af6d962795671135da93bbfe1c1",
        "commit_message": "Merge pull request #10604 from luzpaz/misc-typos\n\nMAINT: Fix Misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2f9d3c0796951af6d962795671135da93bbfe1c1",
        "buggy_code": "Test the scalar contructors, which also do type-coercion",
        "fixed_code": "Test the scalar constructors, which also do type-coercion",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-Test the scalar contructors, which also do type-coercion\n+Test the scalar constructors, which also do type-coercion\n \"\"\"\n from __future__ import division, absolute_import, print_function\n "
    },
    {
        "commit_id": "2f9d3c0796951af6d962795671135da93bbfe1c1",
        "commit_message": "Merge pull request #10604 from luzpaz/misc-typos\n\nMAINT: Fix Misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2f9d3c0796951af6d962795671135da93bbfe1c1",
        "buggy_code": "description=\"F2PY - Fortran to Python Interface Generaton\",",
        "fixed_code": "description=\"F2PY - Fortran to Python Interface Generator\",",
        "patch": "@@ -99,7 +99,7 @@ def generate_f2py_py(build_dir):\n         'Topic :: Software Development :: Code Generators',\n     ]\n     setup(version=version,\n-          description=\"F2PY - Fortran to Python Interface Generaton\",\n+          description=\"F2PY - Fortran to Python Interface Generator\",\n           author=\"Pearu Peterson\",\n           author_email=\"pearu@cens.ioc.ee\",\n           maintainer=\"Pearu Peterson\","
    },
    {
        "commit_id": "c0c861924ef170c52ddad130be5529eada1d3c61",
        "commit_message": "Merge pull request #10589 from xoviat/from-template\n\nBUG: fix entry_points typo for from-template",
        "commit_url": "https://github.com/numpy/numpy/commit/c0c861924ef170c52ddad130be5529eada1d3c61",
        "buggy_code": "'from-template = numpy.distutils.conv_template:main',",
        "fixed_code": "'from-template = numpy.distutils.from_template:main',",
        "patch": "@@ -364,7 +364,7 @@ def setup_package():\n             'console_scripts': [\n                 'f2py = numpy.f2py.__main__:main',\n                 'conv-template = numpy.distutils.conv_template:main',\n-                'from-template = numpy.distutils.conv_template:main',\n+                'from-template = numpy.distutils.from_template:main',\n             ]\n         },\n     )"
    },
    {
        "commit_id": "a2ad5f1c8f3f5d7c8ffc2be6759fbe94f1e71a7e",
        "commit_message": "BUG: fix entry_points typo for from-template",
        "commit_url": "https://github.com/numpy/numpy/commit/a2ad5f1c8f3f5d7c8ffc2be6759fbe94f1e71a7e",
        "buggy_code": "'from-template = numpy.distutils.conv_template:main',",
        "fixed_code": "'from-template = numpy.distutils.from_template:main',",
        "patch": "@@ -364,7 +364,7 @@ def setup_package():\n             'console_scripts': [\n                 'f2py = numpy.f2py.__main__:main',\n                 'conv-template = numpy.distutils.conv_template:main',\n-                'from-template = numpy.distutils.conv_template:main',\n+                'from-template = numpy.distutils.from_template:main',\n             ]\n         },\n     )"
    },
    {
        "commit_id": "e988535a06c8150e28e6858d7be0a5d2f7e08fa9",
        "commit_message": "BUG: Fixed polydiv for Complex Numbers (#10473)\n\nThis previously failed with:\r\n\r\nTypeError: Cannot cast ufunc subtract output from dtype('complex128') to dtype('float64') with casting rule 'same_kind'",
        "commit_url": "https://github.com/numpy/numpy/commit/e988535a06c8150e28e6858d7be0a5d2f7e08fa9",
        "buggy_code": "r = u.copy()",
        "fixed_code": "r = u.astype(w.dtype)",
        "patch": "@@ -897,7 +897,7 @@ def polydiv(u, v):\n     n = len(v) - 1\n     scale = 1. / v[0]\n     q = NX.zeros((max(m - n + 1, 1),), w.dtype)\n-    r = u.copy()\n+    r = u.astype(w.dtype)\n     for k in range(0, m-n+1):\n         d = scale * r[k]\n         q[k] = d"
    },
    {
        "commit_id": "c3fd79150bc183e8852f1330ea6e8cb4ca7ce7bc",
        "commit_message": "Merge pull request #10443 from ahaldane/big_endian_fixes\n\nBUG: Fix various Big-Endian test failures (ppc64)",
        "commit_url": "https://github.com/numpy/numpy/commit/c3fd79150bc183e8852f1330ea6e8cb4ca7ce7bc",
        "buggy_code": "self.assertTrue(dt.byteorder != dt3.byteorder, \"bogus test\")",
        "fixed_code": "assert_(dt.byteorder != dt3.byteorder, \"bogus test\")",
        "patch": "@@ -40,7 +40,7 @@ def test_dtype(self):\n                 assert_(dt.byteorder != dt2.byteorder, \"bogus test\")\n                 assert_dtype_equal(dt, dt2)\n             else:\n-                self.assertTrue(dt.byteorder != dt3.byteorder, \"bogus test\")\n+                assert_(dt.byteorder != dt3.byteorder, \"bogus test\")\n                 assert_dtype_equal(dt, dt3)\n \n     def test_equivalent_dtype_hashing(self):"
    },
    {
        "commit_id": "d03e4653da05218ea8f18fcabd535a1a67c2f5e6",
        "commit_message": "BUG: Fix various Big-Endian test failures (ppc64)",
        "commit_url": "https://github.com/numpy/numpy/commit/d03e4653da05218ea8f18fcabd535a1a67c2f5e6",
        "buggy_code": "self.assertTrue(dt.byteorder != dt3.byteorder, \"bogus test\")",
        "fixed_code": "assert_(dt.byteorder != dt3.byteorder, \"bogus test\")",
        "patch": "@@ -40,7 +40,7 @@ def test_dtype(self):\n                 assert_(dt.byteorder != dt2.byteorder, \"bogus test\")\n                 assert_dtype_equal(dt, dt2)\n             else:\n-                self.assertTrue(dt.byteorder != dt3.byteorder, \"bogus test\")\n+                assert_(dt.byteorder != dt3.byteorder, \"bogus test\")\n                 assert_dtype_equal(dt, dt3)\n \n     def test_equivalent_dtype_hashing(self):"
    },
    {
        "commit_id": "7d2c9d1b32a2d76d28453705e6f8b589d7e273d7",
        "commit_message": "Merge pull request #10342 from anaskhan96/union1d-fix\n\nBUG: arrays not being flattened in `union1d`",
        "commit_url": "https://github.com/numpy/numpy/commit/7d2c9d1b32a2d76d28453705e6f8b589d7e273d7",
        "buggy_code": "return unique(np.concatenate((ar1, ar2)))",
        "fixed_code": "return unique(np.concatenate((ar1, ar2), axis=None))",
        "patch": "@@ -618,7 +618,7 @@ def union1d(ar1, ar2):\n     >>> reduce(np.union1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\n     array([1, 2, 3, 4, 6])\n     \"\"\"\n-    return unique(np.concatenate((ar1, ar2)))\n+    return unique(np.concatenate((ar1, ar2), axis=None))\n \n def setdiff1d(ar1, ar2, assume_unique=False):\n     \"\"\""
    },
    {
        "commit_id": "7d2c9d1b32a2d76d28453705e6f8b589d7e273d7",
        "commit_message": "Merge pull request #10342 from anaskhan96/union1d-fix\n\nBUG: arrays not being flattened in `union1d`",
        "commit_url": "https://github.com/numpy/numpy/commit/7d2c9d1b32a2d76d28453705e6f8b589d7e273d7",
        "buggy_code": "return unique(ma.concatenate((ar1, ar2)))",
        "fixed_code": "return unique(ma.concatenate((ar1, ar2), axis=None))",
        "patch": "@@ -1209,7 +1209,7 @@ def union1d(ar1, ar2):\n     numpy.union1d : Equivalent function for ndarrays.\n \n     \"\"\"\n-    return unique(ma.concatenate((ar1, ar2)))\n+    return unique(ma.concatenate((ar1, ar2), axis=None))\n \n \n def setdiff1d(ar1, ar2, assume_unique=False):"
    },
    {
        "commit_id": "142184914b3de87dc7f49b8787d4f39ce67f7d1e",
        "commit_message": "Merge pull request #10427 from milo0/master\n\nDOC: Fix typo in docs for argpartition",
        "commit_url": "https://github.com/numpy/numpy/commit/142184914b3de87dc7f49b8787d4f39ce67f7d1e",
        "buggy_code": "it. The order all elements in the partitions is undefined. If",
        "fixed_code": "it. The order of all elements in the partitions is undefined. If",
        "patch": "@@ -596,7 +596,7 @@ def partition(a, kth, axis=-1, kind='introselect', order=None):\n         Element index to partition by. The k-th value of the element\n         will be in its final sorted position and all smaller elements\n         will be moved before it and all equal or greater elements behind\n-        it. The order all elements in the partitions is undefined. If\n+        it. The order of all elements in the partitions is undefined. If\n         provided with a sequence of k-th it will partition all elements\n         indexed by k-th  of them into their sorted position at once.\n     axis : int or None, optional"
    },
    {
        "commit_id": "858a6230f07ef7bf3a10becc36663976adeda8e8",
        "commit_message": "DOC: Fix typo in docs for argpartition",
        "commit_url": "https://github.com/numpy/numpy/commit/858a6230f07ef7bf3a10becc36663976adeda8e8",
        "buggy_code": "it. The order all elements in the partitions is undefined. If",
        "fixed_code": "it. The order of all elements in the partitions is undefined. If",
        "patch": "@@ -596,7 +596,7 @@ def partition(a, kth, axis=-1, kind='introselect', order=None):\n         Element index to partition by. The k-th value of the element\n         will be in its final sorted position and all smaller elements\n         will be moved before it and all equal or greater elements behind\n-        it. The order all elements in the partitions is undefined. If\n+        it. The order of all elements in the partitions is undefined. If\n         provided with a sequence of k-th it will partition all elements\n         indexed by k-th  of them into their sorted position at once.\n     axis : int or None, optional"
    },
    {
        "commit_id": "47c5f3ba5634868f04d176285858e403cdd8c0cd",
        "commit_message": "Merge pull request #10362 from charris/fix-download-url\n\nMAINT: Update download URL in setup.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/47c5f3ba5634868f04d176285858e403cdd8c0cd",
        "buggy_code": "download_url = \"http://sourceforge.net/projects/numpy/files/NumPy/\",",
        "fixed_code": "download_url = \"https://pypi.python.org/pypi/numpy\",",
        "patch": "@@ -352,7 +352,7 @@ def setup_package():\n         long_description = \"\\n\".join(DOCLINES[2:]),\n         url = \"http://www.numpy.org\",\n         author = \"Travis E. Oliphant et al.\",\n-        download_url = \"http://sourceforge.net/projects/numpy/files/NumPy/\",\n+        download_url = \"https://pypi.python.org/pypi/numpy\",\n         license = 'BSD',\n         classifiers=[_f for _f in CLASSIFIERS.split('\\n') if _f],\n         platforms = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"],"
    },
    {
        "commit_id": "abb17d31e0f92f9e291a1a5b4f70742940287af8",
        "commit_message": "BUG: concatenation using axis=None in union1d",
        "commit_url": "https://github.com/numpy/numpy/commit/abb17d31e0f92f9e291a1a5b4f70742940287af8",
        "buggy_code": "return unique(np.concatenate((ar1.flatten(), ar2.flatten())))",
        "fixed_code": "return unique(np.concatenate((ar1, ar2), axis=None))",
        "patch": "@@ -614,7 +614,7 @@ def union1d(ar1, ar2):\n     >>> reduce(np.union1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\n     array([1, 2, 3, 4, 6])\n     \"\"\"\n-    return unique(np.concatenate((ar1.flatten(), ar2.flatten())))\n+    return unique(np.concatenate((ar1, ar2), axis=None))\n \n def setdiff1d(ar1, ar2, assume_unique=False):\n     \"\"\""
    },
    {
        "commit_id": "abb17d31e0f92f9e291a1a5b4f70742940287af8",
        "commit_message": "BUG: concatenation using axis=None in union1d",
        "commit_url": "https://github.com/numpy/numpy/commit/abb17d31e0f92f9e291a1a5b4f70742940287af8",
        "buggy_code": "return unique(ma.concatenate((ar1.flatten(), ar2.flatten())))",
        "fixed_code": "return unique(ma.concatenate((ar1, ar2), axis=None))",
        "patch": "@@ -1209,7 +1209,7 @@ def union1d(ar1, ar2):\n     numpy.union1d : Equivalent function for ndarrays.\n \n     \"\"\"\n-    return unique(ma.concatenate((ar1.flatten(), ar2.flatten())))\n+    return unique(ma.concatenate((ar1, ar2), axis=None))\n \n \n def setdiff1d(ar1, ar2, assume_unique=False):"
    },
    {
        "commit_id": "45df7011edaeb263a231003c1efcb5ebb902a349",
        "commit_message": "BUG: fixing flattening of arrays in `union1d` in arraysetops.py",
        "commit_url": "https://github.com/numpy/numpy/commit/45df7011edaeb263a231003c1efcb5ebb902a349",
        "buggy_code": "return unique(np.concatenate((ar1, ar2)))",
        "fixed_code": "return unique(np.concatenate((ar1.flatten(), ar2.flatten())))",
        "patch": "@@ -614,7 +614,7 @@ def union1d(ar1, ar2):\n     >>> reduce(np.union1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\n     array([1, 2, 3, 4, 6])\n     \"\"\"\n-    return unique(np.concatenate((ar1, ar2)))\n+    return unique(np.concatenate((ar1.flatten(), ar2.flatten())))\n \n def setdiff1d(ar1, ar2, assume_unique=False):\n     \"\"\""
    },
    {
        "commit_id": "63462697992fd8ebd608ba617c811d9b3d703a91",
        "commit_message": "BUG: arrays not being flattened in `union1d`",
        "commit_url": "https://github.com/numpy/numpy/commit/63462697992fd8ebd608ba617c811d9b3d703a91",
        "buggy_code": "return unique(ma.concatenate((ar1, ar2)))",
        "fixed_code": "return unique(ma.concatenate((ar1.flatten(), ar2.flatten())))",
        "patch": "@@ -1209,7 +1209,7 @@ def union1d(ar1, ar2):\n     numpy.union1d : Equivalent function for ndarrays.\n \n     \"\"\"\n-    return unique(ma.concatenate((ar1, ar2)))\n+    return unique(ma.concatenate((ar1.flatten(), ar2.flatten())))\n \n \n def setdiff1d(ar1, ar2, assume_unique=False):"
    },
    {
        "commit_id": "eb2cfc1d91d34b24eae0b8fff0b6cd3a8496a37b",
        "commit_message": "DOC: typo fix in numpy.linalg.det docstring. (#10333)",
        "commit_url": "https://github.com/numpy/numpy/commit/eb2cfc1d91d34b24eae0b8fff0b6cd3a8496a37b",
        "buggy_code": "slogdet : Another way to representing the determinant, more suitable",
        "fixed_code": "slogdet : Another way to represent the determinant, more suitable",
        "patch": "@@ -1835,7 +1835,7 @@ def det(a):\n \n     See Also\n     --------\n-    slogdet : Another way to representing the determinant, more suitable\n+    slogdet : Another way to represent the determinant, more suitable\n       for large matrices where underflow/overflow may occur.\n \n     Notes"
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "Array of of the same shape as `x`.",
        "fixed_code": "Array of the same shape as `x`.",
        "patch": "@@ -297,7 +297,7 @@ def add_newdoc(place, name, doc):\n     Returns\n     -------\n     out : ndarray\n-        Array of of the same shape as `x`.\n+        Array of the same shape as `x`.\n \n     Notes\n     -----"
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "dictionay, no declaration will be used.",
        "fixed_code": "dictionary, no declaration will be used.",
        "patch": "@@ -359,7 +359,7 @@ def check_funcs_once(self, funcs,\n         decl : dict\n             for every (key, value), the declaration in the value will be\n             used for function in key. If a function is not in the\n-            dictionay, no declaration will be used.\n+            dictionary, no declaration will be used.\n         call : dict\n             for every item (f, value), if the value is True, a call will be\n             done to the function f."
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "A typical implementation would convert any inputs or ouputs that are",
        "fixed_code": "A typical implementation would convert any inputs or outputs that are",
        "patch": "@@ -441,7 +441,7 @@ def __array_ufunc__(ufunc, method, *inputs, **kwargs):\n       function. This includes any ``out`` arguments, which are always\n       contained in a tuple.\n \n-A typical implementation would convert any inputs or ouputs that are\n+A typical implementation would convert any inputs or outputs that are\n instances of one's own class, pass everything on to a superclass using\n ``super()``, and finally return the results after possible\n back-conversion. An example, taken from the test case"
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "the 'odd' style, the extented part of the array is created by",
        "fixed_code": "the 'odd' style, the extended part of the array is created by",
        "patch": "@@ -1186,7 +1186,7 @@ def pad(array, pad_width, mode, **kwargs):\n     reflect_type : {'even', 'odd'}, optional\n         Used in 'reflect', and 'symmetric'.  The 'even' style is the\n         default with an unaltered reflection around the edge value.  For\n-        the 'odd' style, the extented part of the array is created by\n+        the 'odd' style, the extended part of the array is created by\n         subtracting the reflected values from two times the edge value.\n \n     Returns"
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "return +res  # convet to array-scalar if needed",
        "fixed_code": "return +res  # convert to array-scalar if needed",
        "patch": "@@ -215,7 +215,7 @@ def iscomplex(x):\n     if issubclass(ax.dtype.type, _nx.complexfloating):\n         return ax.imag != 0\n     res = zeros(ax.shape, bool)\n-    return +res  # convet to array-scalar if needed\n+    return +res  # convert to array-scalar if needed\n \n def isreal(x):\n     \"\"\""
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "A list of of objects that matched the search is displayed,",
        "fixed_code": "A list of objects that matched the search is displayed,",
        "patch": "@@ -707,7 +707,7 @@ def lookfor(what, module=None, import_modules=True, regenerate=False,\n     \"\"\"\n     Do a keyword search on docstrings.\n \n-    A list of of objects that matched the search is displayed,\n+    A list of objects that matched the search is displayed,\n     sorted by relevance. All given keywords need to be found in the\n     docstring for it to be returned as a result, but the order does\n     not matter."
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "raise TypeError(\"Only length-1 arrays can be conveted \"",
        "fixed_code": "raise TypeError(\"Only length-1 arrays can be converted \"",
        "patch": "@@ -4285,7 +4285,7 @@ def __long__(self):\n         Convert to long.\n         \"\"\"\n         if self.size > 1:\n-            raise TypeError(\"Only length-1 arrays can be conveted \"\n+            raise TypeError(\"Only length-1 arrays can be converted \"\n                             \"to Python scalars\")\n         elif self._mask:\n             raise MaskError('Cannot convert masked element to a Python long.')"
    },
    {
        "commit_id": "2bacec9ecb0fc665117a22027b73812509a99f56",
        "commit_message": "Merge pull request #10327 from luzpaz/more-misc-typos\n\nMAINT: Fix misc. typos",
        "commit_url": "https://github.com/numpy/numpy/commit/2bacec9ecb0fc665117a22027b73812509a99f56",
        "buggy_code": "- `polyvalfromroots` -- evalute a polynomial at given points from roots.",
        "fixed_code": "- `polyvalfromroots` -- evaluate a polynomial at given points from roots.",
        "patch": "@@ -36,7 +36,7 @@\n --------------\n - `polyfromroots` -- create a polynomial with specified roots.\n - `polyroots` -- find the roots of a polynomial.\n-- `polyvalfromroots` -- evalute a polynomial at given points from roots.\n+- `polyvalfromroots` -- evaluate a polynomial at given points from roots.\n - `polyvander` -- Vandermonde-like matrix for powers.\n - `polyvander2d` -- Vandermonde-like matrix for 2D power series.\n - `polyvander3d` -- Vandermonde-like matrix for 3D power series."
    },
    {
        "commit_id": "5f281116066493ead7f16e3e6dcd7bedbba48b46",
        "commit_message": "Merge pull request #10226 from xoviat/system-info-location\n\nBUG: distutils: use correct top-level package name",
        "commit_url": "https://github.com/numpy/numpy/commit/5f281116066493ead7f16e3e6dcd7bedbba48b46",
        "buggy_code": "extra_dll_dir = os.path.join(os.path.dirname(__file__), 'extra-dll')",
        "fixed_code": "extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')",
        "patch": "@@ -2290,7 +2290,7 @@ def generate_config_py(target):\n     # For gfortran+msvc combination, extra shared libraries may exist\n     f.write(\"\"\"\n import os\n-extra_dll_dir = os.path.join(os.path.dirname(__file__), 'extra-dll')\n+extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')\n if os.path.isdir(extra_dll_dir):\n     os.environ[\"PATH\"] += os.pathsep + extra_dll_dir\n \"\"\")"
    },
    {
        "commit_id": "d45cf0b261b4a563f44fa238d34bd55f051f315f",
        "commit_message": "Merge pull request #10268 from eric-wieser/fix-gh-7864\n\nBUG: Fix misleading error when coercing to array",
        "commit_url": "https://github.com/numpy/numpy/commit/d45cf0b261b4a563f44fa238d34bd55f051f315f",
        "buggy_code": "if not np.all(np.isfinite([first_edge, last_edge])):",
        "fixed_code": "if not (np.isfinite(first_edge) and np.isfinite(last_edge)):",
        "patch": "@@ -228,7 +228,7 @@ def _get_outer_edges(a, range):\n     if first_edge > last_edge:\n         raise ValueError(\n             'max must be larger than min in range parameter.')\n-    if not np.all(np.isfinite([first_edge, last_edge])):\n+    if not (np.isfinite(first_edge) and np.isfinite(last_edge)):\n         raise ValueError(\n             'range parameter must be finite.')\n     if first_edge == last_edge:"
    },
    {
        "commit_id": "473a6f067267e752cbfd2c163e95a0387ccb06b5",
        "commit_message": "BUG: distutils: use correct top-level package name\n\nHere, we align the extra-dll name to the one\nthat auditwheel uses, and we handle the case where\n1) there is more than one root package and\n2) the root package name is different\nthan the distribution name",
        "commit_url": "https://github.com/numpy/numpy/commit/473a6f067267e752cbfd2c163e95a0387ccb06b5",
        "buggy_code": "extra_dll_dir = os.path.join(os.path.dirname(__file__), 'extra-dll')",
        "fixed_code": "extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')",
        "patch": "@@ -2290,7 +2290,7 @@ def generate_config_py(target):\n     # For gfortran+msvc combination, extra shared libraries may exist\n     f.write(\"\"\"\n import os\n-extra_dll_dir = os.path.join(os.path.dirname(__file__), 'extra-dll')\n+extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')\n if os.path.isdir(extra_dll_dir):\n     os.environ[\"PATH\"] += os.pathsep + extra_dll_dir\n \"\"\")"
    },
    {
        "commit_id": "99f605c4545597e9a3bdf66f97b98da30f78ae33",
        "commit_message": "BUG: Fix misleading error when coercing to array\n\nCloses gh-7864",
        "commit_url": "https://github.com/numpy/numpy/commit/99f605c4545597e9a3bdf66f97b98da30f78ae33",
        "buggy_code": "if not np.all(np.isfinite([first_edge, last_edge])):",
        "fixed_code": "if not (np.isfinite(first_edge) and np.isfinite(last_edge)):",
        "patch": "@@ -228,7 +228,7 @@ def _get_outer_edges(a, range):\n     if first_edge > last_edge:\n         raise ValueError(\n             'max must be larger than min in range parameter.')\n-    if not np.all(np.isfinite([first_edge, last_edge])):\n+    if not (np.isfinite(first_edge) and np.isfinite(last_edge)):\n         raise ValueError(\n             'range parameter must be finite.')\n     if first_edge == last_edge:"
    },
    {
        "commit_id": "5aa4a21a2fe6ec172868e5b54fcf688fb2afeed6",
        "commit_message": "Merge pull request #10259 from acbellini/acbellini-patch-1\n\nBUG: Make sure einsum default value of `optimize` is True.",
        "commit_url": "https://github.com/numpy/numpy/commit/5aa4a21a2fe6ec172868e5b54fcf688fb2afeed6",
        "buggy_code": "optimize_arg = kwargs.pop('optimize', False)",
        "fixed_code": "optimize_arg = kwargs.pop('optimize', True)",
        "patch": "@@ -1057,7 +1057,7 @@ def einsum(*operands, **kwargs):\n     \"\"\"\n \n     # Grab non-einsum kwargs\n-    optimize_arg = kwargs.pop('optimize', False)\n+    optimize_arg = kwargs.pop('optimize', True)\n \n     # If no optimization, run pure einsum\n     if optimize_arg is False:"
    },
    {
        "commit_id": "a859aced66428b0c4ecae4a343dd1d75daef6c65",
        "commit_message": "Issue #10258 - Change default value of `optimize` arg\n\nAs per issue #10258, the default value of the `optimize` arg is made consistent with the documentation, making it `True` by default",
        "commit_url": "https://github.com/numpy/numpy/commit/a859aced66428b0c4ecae4a343dd1d75daef6c65",
        "buggy_code": "optimize_arg = kwargs.pop('optimize', False)",
        "fixed_code": "optimize_arg = kwargs.pop('optimize', True)",
        "patch": "@@ -1057,7 +1057,7 @@ def einsum(*operands, **kwargs):\n     \"\"\"\n \n     # Grab non-einsum kwargs\n-    optimize_arg = kwargs.pop('optimize', False)\n+    optimize_arg = kwargs.pop('optimize', True)\n \n     # If no optimization, run pure einsum\n     if optimize_arg is False:"
    },
    {
        "commit_id": "2767934122b0782ba898dd1573778a1fb743c7f2",
        "commit_message": "Merge pull request #10247 from tyrinwu/ENH-fix-typo\n\nMAINT: fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/2767934122b0782ba898dd1573778a1fb743c7f2",
        "buggy_code": "1-D array of integer freguency weights; the number of times each",
        "fixed_code": "1-D array of integer frequency weights; the number of times each",
        "patch": "@@ -2942,7 +2942,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n \n         .. versionadded:: 1.5\n     fweights : array_like, int, optional\n-        1-D array of integer freguency weights; the number of times each\n+        1-D array of integer frequency weights; the number of times each\n         observation vector should be repeated.\n \n         .. versionadded:: 1.10"
    },
    {
        "commit_id": "3fd9d03ef5e56990150d8974223f201e7ba3cc68",
        "commit_message": "ENH: fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/3fd9d03ef5e56990150d8974223f201e7ba3cc68",
        "buggy_code": "1-D array of integer freguency weights; the number of times each",
        "fixed_code": "1-D array of integer frequency weights; the number of times each",
        "patch": "@@ -2942,7 +2942,7 @@ def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,\n \n         .. versionadded:: 1.5\n     fweights : array_like, int, optional\n-        1-D array of integer freguency weights; the number of times each\n+        1-D array of integer frequency weights; the number of times each\n         observation vector should be repeated.\n \n         .. versionadded:: 1.10"
    },
    {
        "commit_id": "d233e1f4c176de8b1bf1365aac48caa10610a402",
        "commit_message": "Merge pull request #10216 from eric-wieser/deprecate-pickle-aliases\n\nBUG: Fix broken format string picked up by LGTM.com",
        "commit_url": "https://github.com/numpy/numpy/commit/d233e1f4c176de8b1bf1365aac48caa10610a402",
        "buggy_code": ".format(method),",
        "fixed_code": ".format(method=method),",
        "patch": "@@ -7864,7 +7864,7 @@ def _pickle_warn(method):\n     # NumPy 1.15.0, 2017-12-10\n     warnings.warn(\n         \"np.ma.{method} is deprecated, use pickle.{method} instead\"\n-            .format(method),\n+            .format(method=method),\n         DeprecationWarning,\n         stacklevel=3)\n "
    },
    {
        "commit_id": "3096c505990c972fa505f843e5420f6f02744400",
        "commit_message": "BUG: Fix broken format string picked up by LGTM.com\n\nFixes regression I introduced in gh-10192",
        "commit_url": "https://github.com/numpy/numpy/commit/3096c505990c972fa505f843e5420f6f02744400",
        "buggy_code": ".format(method),",
        "fixed_code": ".format(method=method),",
        "patch": "@@ -7864,7 +7864,7 @@ def _pickle_warn(method):\n     # NumPy 1.15.0, 2017-12-10\n     warnings.warn(\n         \"np.ma.{method} is deprecated, use pickle.{method} instead\"\n-            .format(method),\n+            .format(method=method),\n         DeprecationWarning,\n         stacklevel=3)\n "
    },
    {
        "commit_id": "963c704b3e8b03e48a3b10998af5c19a4c03cabc",
        "commit_message": "Merge pull request #10212 from luzpaz/minor-typos\n\nDOC: fix minor typos",
        "commit_url": "https://github.com/numpy/numpy/commit/963c704b3e8b03e48a3b10998af5c19a4c03cabc",
        "buggy_code": "for i in range(len(dim)):  # solve dim for dependecies",
        "fixed_code": "for i in range(len(dim)):  # solve dim for dependencies",
        "patch": "@@ -333,7 +333,7 @@ def getarrdims(a, var, verbose=0):\n         ret['dims'] = ','.join(dim)\n         ret['rank'] = repr(len(dim))\n         ret['rank*[-1]'] = repr(len(dim) * [-1])[1:-1]\n-        for i in range(len(dim)):  # solve dim for dependecies\n+        for i in range(len(dim)):  # solve dim for dependencies\n             v = []\n             if dim[i] in depargs:\n                 v = [dim[i]]"
    },
    {
        "commit_id": "de100beb4b53833f817d4ba9c6d940e4cff96d43",
        "commit_message": "DOC: fix minor typos",
        "commit_url": "https://github.com/numpy/numpy/commit/de100beb4b53833f817d4ba9c6d940e4cff96d43",
        "buggy_code": "for i in range(len(dim)):  # solve dim for dependecies",
        "fixed_code": "for i in range(len(dim)):  # solve dim for dependencies",
        "patch": "@@ -333,7 +333,7 @@ def getarrdims(a, var, verbose=0):\n         ret['dims'] = ','.join(dim)\n         ret['rank'] = repr(len(dim))\n         ret['rank*[-1]'] = repr(len(dim) * [-1])[1:-1]\n-        for i in range(len(dim)):  # solve dim for dependecies\n+        for i in range(len(dim)):  # solve dim for dependencies\n             v = []\n             if dim[i] in depargs:\n                 v = [dim[i]]"
    },
    {
        "commit_id": "8032cf4762008155fca610fb61092e6c9ecae98b",
        "commit_message": "Merge pull request #10203 from charris/fix-numpy-version\n\nMAINT: Update development branch version to 1.15.0.",
        "commit_url": "https://github.com/numpy/numpy/commit/8032cf4762008155fca610fb61092e6c9ecae98b",
        "buggy_code": "MINOR               = 14",
        "fixed_code": "MINOR               = 15",
        "patch": "@@ -62,7 +62,7 @@\n \"\"\"\n \n MAJOR               = 1\n-MINOR               = 14\n+MINOR               = 15\n MICRO               = 0\n ISRELEASED          = False\n VERSION             = '%d.%d.%d' % (MAJOR, MINOR, MICRO)"
    },
    {
        "commit_id": "75fa09dfa5f15377f4b10a0167b4c2bb4495b156",
        "commit_message": "Merge pull request #10052 from charris/fix-legacy-mode-check\n\nBUG: Fix legacy printing mode check.",
        "commit_url": "https://github.com/numpy/numpy/commit/75fa09dfa5f15377f4b10a0167b4c2bb4495b156",
        "buggy_code": "if _format_options['legacy'] and dtype.type == bool_:",
        "fixed_code": "if _format_options['legacy'] == '1.13' and dtype.type == bool_:",
        "patch": "@@ -1170,7 +1170,7 @@ def dtype_is_implied(dtype):\n     array([1, 2, 3], dtype=np.int8)\n     \"\"\"\n     dtype = np.dtype(dtype)\n-    if _format_options['legacy'] and dtype.type == bool_:\n+    if _format_options['legacy'] == '1.13' and dtype.type == bool_:\n         return False\n     return dtype.type in _typelessdata\n "
    },
    {
        "commit_id": "239783ffb705cdb8e0ed283f69fc05752e93e19b",
        "commit_message": "BUG: Fix legacy printing mode check.",
        "commit_url": "https://github.com/numpy/numpy/commit/239783ffb705cdb8e0ed283f69fc05752e93e19b",
        "buggy_code": "if _format_options['legacy'] and dtype.type == bool_:",
        "fixed_code": "if _format_options['legacy'] == '1.13' and dtype.type == bool_:",
        "patch": "@@ -1170,7 +1170,7 @@ def dtype_is_implied(dtype):\n     array([1, 2, 3], dtype=np.int8)\n     \"\"\"\n     dtype = np.dtype(dtype)\n-    if _format_options['legacy'] and dtype.type == bool_:\n+    if _format_options['legacy'] == '1.13' and dtype.type == bool_:\n         return False\n     return dtype.type in _typelessdata\n "
    },
    {
        "commit_id": "2890b9471a91828933c0ace42a7e012bf69b32eb",
        "commit_message": "Merge pull request #9966 from ahaldane/dragon4_scalarstr_fix\n\nBUG: str(np.float) should print with the same number of digits as python str(float)",
        "commit_url": "https://github.com/numpy/numpy/commit/2890b9471a91828933c0ace42a7e012bf69b32eb",
        "buggy_code": "expected = \"finfo(resolution=0.000001, min=-3.4028235e+38,\" + \\",
        "fixed_code": "expected = \"finfo(resolution=1e-06, min=-3.4028235e+38,\" + \\",
        "patch": "@@ -80,7 +80,7 @@ def test_iinfo_repr(self):\n         assert_equal(repr(np.iinfo(np.int16)), expected)\n \n     def test_finfo_repr(self):\n-        expected = \"finfo(resolution=0.000001, min=-3.4028235e+38,\" + \\\n+        expected = \"finfo(resolution=1e-06, min=-3.4028235e+38,\" + \\\n                    \" max=3.4028235e+38, dtype=float32)\"\n         assert_equal(repr(np.finfo(np.float32)), expected)\n "
    },
    {
        "commit_id": "3402dcf9b4acd32e66a9b8a02ec34a0e02052a5d",
        "commit_message": "STY: Fix PEP8 vertical alignment violation.",
        "commit_url": "https://github.com/numpy/numpy/commit/3402dcf9b4acd32e66a9b8a02ec34a0e02052a5d",
        "buggy_code": "x       = b_out[:n,:]",
        "fixed_code": "x = b_out[:n,:]",
        "patch": "@@ -2046,7 +2046,7 @@ def lstsq(a, b, rcond=\"warn\"):\n     b_out = bstar.T\n \n     # b_out contains both the solution and the components of the residuals\n-    x       = b_out[:n,:]\n+    x = b_out[:n,:]\n     r_parts = b_out[n:,:]\n     if isComplexType(t):\n         resids = sum(abs(r_parts)**2, axis=-2)"
    },
    {
        "commit_id": "6f83089e9a308bea4fd5346cbfe9c55c1590a23c",
        "commit_message": "DOC: Fix incorrect shape in documentation",
        "commit_url": "https://github.com/numpy/numpy/commit/6f83089e9a308bea4fd5346cbfe9c55c1590a23c",
        "buggy_code": "residuals : {(), (1,), (K,)} ndarray",
        "fixed_code": "residuals : {(1,), (K,), (0,)} ndarray",
        "patch": "@@ -1915,7 +1915,7 @@ def lstsq(a, b, rcond=\"warn\"):\n     x : {(N,), (N, K)} ndarray\n         Least-squares solution. If `b` is two-dimensional,\n         the solutions are in the `K` columns of `x`.\n-    residuals : {(), (1,), (K,)} ndarray\n+    residuals : {(1,), (K,), (0,)} ndarray\n         Sums of residuals; squared Euclidean 2-norm for each column in\n         ``b - a*x``.\n         If the rank of `a` is < N or M <= N, this is an empty array."
    },
    {
        "commit_id": "1368cbb696ae27b849eed67b4fd31c550a55dad5",
        "commit_message": "DEP, ENH: deprecate UPDATEIFCOPY (except for nditer) and replace with WRITEBACKIFCOPY (#9639)\n\n* ENH: add API to resolve UPDATEONCOPY outside dealloc, test and use\r\n\r\n* BUG: Fix usage of keyword \"from\" as argument name for \"can_cast\".\r\n\r\nAlso removed inconsistency between the second argument name\r\nbetween documentation (\"totype\") and code (\"to\").\r\n\r\n* UPDATEIFCOPY -> WRITEBACKIFCOPY, documentation\r\n\r\n* fixes for review\r\n\r\n* review2, fix new test\r\n\r\n* fix new test for using self.assert_deprecated\r\n\r\n* change deprecation logic as per review\r\n\r\n* new logic exposed places where PyArray_ResolveWritebackIfCopy not called\r\n\r\n* deprecate PyArray_XDECREF_ERR in favor of PyArray_DiscardWritebackIfCopy\r\n\r\n* code review changes\r\n\r\n* clean up merge cruft\r\n\r\n* fix from review\r\n\r\n* fixes from review\r\n\r\n* extend the release note",
        "commit_url": "https://github.com/numpy/numpy/commit/1368cbb696ae27b849eed67b4fd31c550a55dad5",
        "buggy_code": "'UPDATEIFCOPY', 'BEHAVED', 'BEHAVED_RO',",
        "fixed_code": "'WRITEBACKIFCOPY', 'UPDATEIFCOPY', 'BEHAVED', 'BEHAVED_RO',",
        "patch": "@@ -51,7 +51,7 @@ def flags2names(flags):\n     info = []\n     for flagname in ['CONTIGUOUS', 'FORTRAN', 'OWNDATA', 'ENSURECOPY',\n                      'ENSUREARRAY', 'ALIGNED', 'NOTSWAPPED', 'WRITEABLE',\n-                     'UPDATEIFCOPY', 'BEHAVED', 'BEHAVED_RO',\n+                     'WRITEBACKIFCOPY', 'UPDATEIFCOPY', 'BEHAVED', 'BEHAVED_RO',\n                      'CARRAY', 'FARRAY'\n                      ]:\n         if abs(flags) & getattr(wrap, flagname, 0):"
    },
    {
        "commit_id": "8b9195bb4e717eeaf74de5b1389f7b8ef7956350",
        "commit_message": "Merge pull request #9950 from eric-wieser/dtype-index-TypeError\n\nBUG: Passing an incorrect type to dtype.__getitem__ should raise TypeError",
        "commit_url": "https://github.com/numpy/numpy/commit/8b9195bb4e717eeaf74de5b1389f7b8ef7956350",
        "buggy_code": "assert_raises(ValueError, dt.__getitem__, b'a')",
        "fixed_code": "assert_raises(TypeError, dt.__getitem__, b'a')",
        "patch": "@@ -4606,7 +4606,7 @@ def test_bytes_fields(self):\n             assert_raises(TypeError, np.dtype, [(('b', b'a'), int)])\n \n             dt = np.dtype([((b'a', 'b'), int)])\n-            assert_raises(ValueError, dt.__getitem__, b'a')\n+            assert_raises(TypeError, dt.__getitem__, b'a')\n \n             x = np.array([(1,), (2,), (3,)], dtype=dt)\n             assert_raises(IndexError, x.__getitem__, b'a')"
    },
    {
        "commit_id": "8b9195bb4e717eeaf74de5b1389f7b8ef7956350",
        "commit_message": "Merge pull request #9950 from eric-wieser/dtype-index-TypeError\n\nBUG: Passing an incorrect type to dtype.__getitem__ should raise TypeError",
        "commit_url": "https://github.com/numpy/numpy/commit/8b9195bb4e717eeaf74de5b1389f7b8ef7956350",
        "buggy_code": "assert_raises(ValueError, dt.__getitem__, 0.0)",
        "fixed_code": "assert_raises(TypeError, dt.__getitem__, 0.0)",
        "patch": "@@ -1352,7 +1352,7 @@ def test_dtype_keyerrors_(self):\n         dt = np.dtype([('f1', np.uint)])\n         assert_raises(KeyError, dt.__getitem__, \"f2\")\n         assert_raises(IndexError, dt.__getitem__, 1)\n-        assert_raises(ValueError, dt.__getitem__, 0.0)\n+        assert_raises(TypeError, dt.__getitem__, 0.0)\n \n     def test_lexsort_buffer_length(self):\n         # Ticket #1217, don't segfault."
    },
    {
        "commit_id": "2bc15496aa2d1717aeb0d2be3c882eb1982215f8",
        "commit_message": "BUG: Passing an incorrect type to dtype.__getitem__ should raise TypeError\n\nAlso allows any object implementing __index__ to be passed to\ndtype.__getitem__",
        "commit_url": "https://github.com/numpy/numpy/commit/2bc15496aa2d1717aeb0d2be3c882eb1982215f8",
        "buggy_code": "assert_raises(ValueError, dt.__getitem__, b'a')",
        "fixed_code": "assert_raises(TypeError, dt.__getitem__, b'a')",
        "patch": "@@ -4606,7 +4606,7 @@ def test_bytes_fields(self):\n             assert_raises(TypeError, np.dtype, [(('b', b'a'), int)])\n \n             dt = np.dtype([((b'a', 'b'), int)])\n-            assert_raises(ValueError, dt.__getitem__, b'a')\n+            assert_raises(TypeError, dt.__getitem__, b'a')\n \n             x = np.array([(1,), (2,), (3,)], dtype=dt)\n             assert_raises(IndexError, x.__getitem__, b'a')"
    },
    {
        "commit_id": "2bc15496aa2d1717aeb0d2be3c882eb1982215f8",
        "commit_message": "BUG: Passing an incorrect type to dtype.__getitem__ should raise TypeError\n\nAlso allows any object implementing __index__ to be passed to\ndtype.__getitem__",
        "commit_url": "https://github.com/numpy/numpy/commit/2bc15496aa2d1717aeb0d2be3c882eb1982215f8",
        "buggy_code": "assert_raises(ValueError, dt.__getitem__, 0.0)",
        "fixed_code": "assert_raises(TypeError, dt.__getitem__, 0.0)",
        "patch": "@@ -1352,7 +1352,7 @@ def test_dtype_keyerrors_(self):\n         dt = np.dtype([('f1', np.uint)])\n         assert_raises(KeyError, dt.__getitem__, \"f2\")\n         assert_raises(IndexError, dt.__getitem__, 1)\n-        assert_raises(ValueError, dt.__getitem__, 0.0)\n+        assert_raises(TypeError, dt.__getitem__, 0.0)\n \n     def test_lexsort_buffer_length(self):\n         # Ticket #1217, don't segfault."
    },
    {
        "commit_id": "c73335920c300bf09a48226e0d590ba0e8eac654",
        "commit_message": "Merge pull request #9945 from StevenMaude/operation-plural-in-glossary\n\nDOC: fix operation plural in along axis glossary",
        "commit_url": "https://github.com/numpy/numpy/commit/c73335920c300bf09a48226e0d590ba0e8eac654",
        "buggy_code": "Many operation can take place along one of these axes.  For example,",
        "fixed_code": "Many operations can take place along one of these axes.  For example,",
        "patch": "@@ -11,7 +11,7 @@\n        vertically downwards across rows (axis 0), and the second running\n        horizontally across columns (axis 1).\n \n-       Many operation can take place along one of these axes.  For example,\n+       Many operations can take place along one of these axes.  For example,\n        we can sum each row of an array, in which case we operate along\n        columns, or axis 1::\n "
    },
    {
        "commit_id": "3d3ec00c34b80ee899cd7c8a6492986d39735bc4",
        "commit_message": "DOC: fix operation plural in along axis glossary\n\nCorrect \"Many operation can...\" to \"Many operations can...\"",
        "commit_url": "https://github.com/numpy/numpy/commit/3d3ec00c34b80ee899cd7c8a6492986d39735bc4",
        "buggy_code": "Many operation can take place along one of these axes.  For example,",
        "fixed_code": "Many operations can take place along one of these axes.  For example,",
        "patch": "@@ -11,7 +11,7 @@\n        vertically downwards across rows (axis 0), and the second running\n        horizontally across columns (axis 1).\n \n-       Many operation can take place along one of these axes.  For example,\n+       Many operations can take place along one of these axes.  For example,\n        we can sum each row of an array, in which case we operate along\n        columns, or axis 1::\n "
    },
    {
        "commit_id": "288cbb33e4a50e165a3076e9d720f39d5d076ce8",
        "commit_message": "Merge pull request #9904 from equaeghe/patch-1\n\nMAINT: Make warnings for nanmin and nanmax consistent",
        "commit_url": "https://github.com/numpy/numpy/commit/288cbb33e4a50e165a3076e9d720f39d5d076ce8",
        "buggy_code": "warnings.warn(\"All-NaN axis encountered\", RuntimeWarning, stacklevel=2)",
        "fixed_code": "warnings.warn(\"All-NaN slice encountered\", RuntimeWarning, stacklevel=2)",
        "patch": "@@ -279,7 +279,7 @@ def nanmin(a, axis=None, out=None, keepdims=np._NoValue):\n         # which do not implement isnan (gh-9009), or fmin correctly (gh-8975)\n         res = np.fmin.reduce(a, axis=axis, out=out, **kwargs)\n         if np.isnan(res).any():\n-            warnings.warn(\"All-NaN axis encountered\", RuntimeWarning, stacklevel=2)\n+            warnings.warn(\"All-NaN slice encountered\", RuntimeWarning, stacklevel=2)\n     else:\n         # Slow, but safe for subclasses of ndarray\n         a, mask = _replace_nan(a, +np.inf)"
    },
    {
        "commit_id": "4712875840b5413a47bd8dcbed9bedeaefe829cd",
        "commit_message": "MAINT/BUG: Remove special-casing for 0d arrays, now that indexing with a single boolean is ok\n\nAlso fix the test added in gh-4792, which didn't make sense, but passed anyway",
        "commit_url": "https://github.com/numpy/numpy/commit/4712875840b5413a47bd8dcbed9bedeaefe829cd",
        "buggy_code": "y = piecewise(x, [[True], [False]], [1, 0])",
        "fixed_code": "y = piecewise(x, [True, False], [1, 0])",
        "patch": "@@ -2538,7 +2538,7 @@ def test_0d(self):\n         assert_(y == 0)\n \n         x = 5\n-        y = piecewise(x, [[True], [False]], [1, 0])\n+        y = piecewise(x, [True, False], [1, 0])\n         assert_(y.ndim == 0)\n         assert_(y == 1)\n "
    },
    {
        "commit_id": "ce65f115c409a4a8089ace496e15bbfca566070b",
        "commit_message": "Merge pull request #9881 from eric-wieser/fix-count_nonzero-axis\n\nBUG: count_nonzero treats empty axis tuples strangely",
        "commit_url": "https://github.com/numpy/numpy/commit/ce65f115c409a4a8089ace496e15bbfca566070b",
        "buggy_code": "if axis is None or (isinstance(axis, tuple) and axis == ()):",
        "fixed_code": "if axis is None:",
        "patch": "@@ -406,7 +406,7 @@ def count_nonzero(a, axis=None):\n     array([2, 3])\n \n     \"\"\"\n-    if axis is None or (isinstance(axis, tuple) and axis == ()):\n+    if axis is None:\n         return multiarray.count_nonzero(a)\n \n     a = asanyarray(a)"
    },
    {
        "commit_id": "3856a73ec59d9dcf8252a2d38b43191eacacbd2e",
        "commit_message": "BUG: count_nonzero treats empty axis tuples strangely\n\nFixes #9728\n\nThis bug was introduced with the `axis` keyword in #7177, as a misguided optimization.",
        "commit_url": "https://github.com/numpy/numpy/commit/3856a73ec59d9dcf8252a2d38b43191eacacbd2e",
        "buggy_code": "if axis is None or (isinstance(axis, tuple) and axis == ()):",
        "fixed_code": "if axis is None:",
        "patch": "@@ -406,7 +406,7 @@ def count_nonzero(a, axis=None):\n     array([2, 3])\n \n     \"\"\"\n-    if axis is None or (isinstance(axis, tuple) and axis == ()):\n+    if axis is None:\n         return multiarray.count_nonzero(a)\n \n     a = asanyarray(a)"
    },
    {
        "commit_id": "3ed10bdd42d2c8393c89114a0cd60a807ddd51b3",
        "commit_message": "BUG: Raise TypeError instead of ValueError for ufunc isnat if operand is not of type datetime or timedelta\nTST: Edited test_datetime to expect a TypeError instead of a ValueError for isnat if a wrong type is passed as an argument\nDOC: Added change of ufunc isnat's exception handling to release notes",
        "commit_url": "https://github.com/numpy/numpy/commit/3ed10bdd42d2c8393c89114a0cd60a807ddd51b3",
        "buggy_code": "assert_raises(ValueError, np.isnat, np.zeros(10, t))",
        "fixed_code": "assert_raises(TypeError, np.isnat, np.zeros(10, t))",
        "patch": "@@ -1963,7 +1963,7 @@ def test_isnat_error(self):\n         for t in np.typecodes[\"All\"]:\n             if t in np.typecodes[\"Datetime\"]:\n                 continue\n-            assert_raises(ValueError, np.isnat, np.zeros(10, t))\n+            assert_raises(TypeError, np.isnat, np.zeros(10, t))\n \n \n class TestDateTimeData(object):"
    },
    {
        "commit_id": "df2b5cc749f809276612418256b8875d54d2778f",
        "commit_message": "Merge pull request #9779 from eric-wieser/ma-trace\n\nBUG: np.ma.trace gives the wrong result on ND arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/df2b5cc749f809276612418256b8875d54d2778f",
        "buggy_code": "return D.astype(dtype).filled(0).sum(axis=None, out=out)",
        "fixed_code": "return D.astype(dtype).filled(0).sum(axis=-1, out=out)",
        "patch": "@@ -4819,7 +4819,7 @@ def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):\n             return result.astype(dtype)\n         else:\n             D = self.diagonal(offset=offset, axis1=axis1, axis2=axis2)\n-            return D.astype(dtype).filled(0).sum(axis=None, out=out)\n+            return D.astype(dtype).filled(0).sum(axis=-1, out=out)\n     trace.__doc__ = ndarray.trace.__doc__\n \n     def dot(self, b, out=None, strict=False):"
    },
    {
        "commit_id": "f01d1a6a5c381a4406d92db2993bf01b8e849b8c",
        "commit_message": "BUG: np.ma.trace gives the wrong result on ND arrays\n\nFixes #5560",
        "commit_url": "https://github.com/numpy/numpy/commit/f01d1a6a5c381a4406d92db2993bf01b8e849b8c",
        "buggy_code": "return D.astype(dtype).filled(0).sum(axis=None, out=out)",
        "fixed_code": "return D.astype(dtype).filled(0).sum(axis=-1, out=out)",
        "patch": "@@ -4819,7 +4819,7 @@ def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):\n             return result.astype(dtype)\n         else:\n             D = self.diagonal(offset=offset, axis1=axis1, axis2=axis2)\n-            return D.astype(dtype).filled(0).sum(axis=None, out=out)\n+            return D.astype(dtype).filled(0).sum(axis=-1, out=out)\n     trace.__doc__ = ndarray.trace.__doc__\n \n     def dot(self, b, out=None, strict=False):"
    },
    {
        "commit_id": "bac743beff16d596363e0f7ad4570a7a6bfe7fe5",
        "commit_message": "Merge pull request #9294 from b-carter/fix_histogram_monotonicity_check\n\nBUG: Fixes histogram monotonicity check for unsigned bin values",
        "commit_url": "https://github.com/numpy/numpy/commit/bac743beff16d596363e0f7ad4570a7a6bfe7fe5",
        "buggy_code": "if (np.diff(bins) < 0).any():",
        "fixed_code": "if np.any(bins[:-1] > bins[1:]):",
        "patch": "@@ -782,7 +782,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n         bins = bin_edges\n     else:\n         bins = asarray(bins)\n-        if (np.diff(bins) < 0).any():\n+        if np.any(bins[:-1] > bins[1:]):\n             raise ValueError(\n                 'bins must increase monotonically.')\n "
    },
    {
        "commit_id": "fa54e448d759fb0265c8ef95caae4fd97233ce9f",
        "commit_message": "DOX: Fix mistaken word in nanprod docstring (#9703)",
        "commit_url": "https://github.com/numpy/numpy/commit/fa54e448d759fb0265c8ef95caae4fd97233ce9f",
        "buggy_code": "Array containing numbers whose sum is desired. If `a` is not an",
        "fixed_code": "Array containing numbers whose product is desired. If `a` is not an",
        "patch": "@@ -594,7 +594,7 @@ def nanprod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue):\n     Parameters\n     ----------\n     a : array_like\n-        Array containing numbers whose sum is desired. If `a` is not an\n+        Array containing numbers whose product is desired. If `a` is not an\n         array, a conversion is attempted.\n     axis : int, optional\n         Axis along which the product is computed. The default is to compute"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -1024,7 +1024,7 @@ def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.\n     Why is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`.  Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a`- perhaps not what one would have first thought.\n \n     Also note that, in general, the result of integrating a C-series needs"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -782,7 +782,7 @@ def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.\n     Why is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`.  Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a` - perhaps not what one would have first thought.\n \n     Also note that, in general, the result of integrating a C-series needs"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -781,7 +781,7 @@ def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.\n     Why is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`.  Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a` - perhaps not what one would have first thought.\n \n     Also note that, in general, the result of integrating a C-series needs"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -782,7 +782,7 @@ def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.\n     Why is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`.  Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a` - perhaps not what one would have first thought.\n \n     Also note that, in general, the result of integrating a C-series needs"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -822,7 +822,7 @@ def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.\n     Why is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`.  Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a` - perhaps not what one would have first thought.\n \n     Also note that, in general, the result of integrating a C-series needs"
    },
    {
        "commit_id": "15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "commit_message": "DOC: Fix inline \"math\" directives [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/15a3174d02b319e303698c377ffcc9fbc0d4c231",
        "buggy_code": ".. math::`dx = du/a`, so one will need to set `scl` equal to",
        "fixed_code": ":math:`dx = du/a`, so one will need to set `scl` equal to",
        "patch": "@@ -619,7 +619,7 @@ def polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n     Note that the result of each integration is *multiplied* by `scl`.  Why\n     is this important to note?  Say one is making a linear change of\n     variable :math:`u = ax + b` in an integral relative to `x`. Then\n-    .. math::`dx = du/a`, so one will need to set `scl` equal to\n+    :math:`dx = du/a`, so one will need to set `scl` equal to\n     :math:`1/a` - perhaps not what one would have first thought.\n \n     Examples"
    },
    {
        "commit_id": "84fdfb3c958bcff8c97aa17ab276ce7388fe7d48",
        "commit_message": "TST: util: fix test_error_message\n\nuse the correct replace() order",
        "commit_url": "https://github.com/numpy/numpy/commit/84fdfb3c958bcff8c97aa17ab276ce7388fe7d48",
        "buggy_code": "msg2 = msg.replace(\"shapes (2,), (1, 2)\", \"shapes (2L,), (1L, 2L)\")",
        "fixed_code": "msg2 = msg.replace(\"shapes (2L,), (1L, 2L)\", \"shapes (2,), (1, 2)\")",
        "patch": "@@ -268,7 +268,7 @@ def test_error_message(self):\n             self._assert_func(np.array([1, 2]), np.matrix([1, 2]))\n         except AssertionError as e:\n             msg = str(e)\n-            msg2 = msg.replace(\"shapes (2,), (1, 2)\", \"shapes (2L,), (1L, 2L)\")\n+            msg2 = msg.replace(\"shapes (2L,), (1L, 2L)\", \"shapes (2,), (1, 2)\")\n             msg_reference = \"\\nArrays are not equal\\n\\n\"\n                 \"(shapes (2,), (1, 2) mismatch)\\n\"\n                 \" x: array([1, 2])\\n\""
    },
    {
        "commit_id": "917652ab0ebc7dfcba5b87902829658fff754730",
        "commit_message": "TST: fix failures:\n\n1. fail tests related to DLL load failure as they were previously untested.\n2. fix have_compiler to return false on old compilers\n3. xfail some tests that were not working on old Python versions.",
        "commit_url": "https://github.com/numpy/numpy/commit/917652ab0ebc7dfcba5b87902829658fff754730",
        "buggy_code": "except DistutilsError:",
        "fixed_code": "except (DistutilsError, ValueError):",
        "patch": "@@ -68,7 +68,7 @@ def have_compiler():\n         try:\n             if not compiler.initialized:\n                 compiler.initialize()  # MSVC is different\n-        except DistutilsError:\n+        except (DistutilsError, ValueError):\n             return False\n         cmd = [compiler.cc]\n     try:"
    },
    {
        "commit_id": "d6d72787c079079cc8fcb7a1bb1142ed647d7884",
        "commit_message": "Merge pull request #9638 from juliantaylor/nonzero-dtype\n\nBUG: ensure consistent result dtype of count_nonzero",
        "commit_url": "https://github.com/numpy/numpy/commit/d6d72787c079079cc8fcb7a1bb1142ed647d7884",
        "buggy_code": "return counts",
        "fixed_code": "return counts.astype(np.intp, copy=False)",
        "patch": "@@ -444,7 +444,7 @@ def count_nonzero(a, axis=None):\n     counts = np.apply_along_axis(multiarray.count_nonzero, axis[0], a)\n \n     if axis.size == 1:\n-        return counts\n+        return counts.astype(np.intp, copy=False)\n     else:\n         # for subsequent axis numbers, that number decreases\n         # by one in this new 'counts' array if it was larger"
    },
    {
        "commit_id": "09257ce4dba8abf375c0d37278e842bd5dccda2d",
        "commit_message": "BUG: ensure consistent result dtype of count_nonzero\n\nThe slowpath using apply_along_axis for size 1 axis did not ensure that\nthe dtype is intp like all other paths. This caused inconsistent dtypes\non windows where the default integer type is int32.\nCloses gh-9468",
        "commit_url": "https://github.com/numpy/numpy/commit/09257ce4dba8abf375c0d37278e842bd5dccda2d",
        "buggy_code": "return counts",
        "fixed_code": "return counts.astype(np.intp, copy=False)",
        "patch": "@@ -445,7 +445,7 @@ def count_nonzero(a, axis=None):\n     counts = np.apply_along_axis(multiarray.count_nonzero, axis[0], a)\n \n     if axis.size == 1:\n-        return counts\n+        return counts.astype(np.intp, copy=False)\n     else:\n         # for subsequent axis numbers, that number decreases\n         # by one in this new 'counts' array if it was larger"
    },
    {
        "commit_id": "3c887aa5242857ef92870d2988de7c899c6415be",
        "commit_message": "Merge pull request #9581 from MSeifert04/doc_fix_link\n\nDOC: Fix link in numpy.ndarray.copy method (missing backticks)",
        "commit_url": "https://github.com/numpy/numpy/commit/3c887aa5242857ef92870d2988de7c899c6415be",
        "buggy_code": "as possible. (Note that this function and :func:numpy.copy are very",
        "fixed_code": "as possible. (Note that this function and :func:`numpy.copy` are very",
        "patch": "@@ -3418,7 +3418,7 @@ def luf(lamdaexpr, *args, **kwargs):\n         Controls the memory layout of the copy. 'C' means C-order,\n         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n         'C' otherwise. 'K' means match the layout of `a` as closely\n-        as possible. (Note that this function and :func:numpy.copy are very\n+        as possible. (Note that this function and :func:`numpy.copy` are very\n         similar, but have different default values for their order=\n         arguments.)\n "
    },
    {
        "commit_id": "e7c8e62bdc915360653e79c63f3a0b6128dc020f",
        "commit_message": "DOC: Fix link in numpy.ndarray.copy method (missing backticks)\n\n[skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/e7c8e62bdc915360653e79c63f3a0b6128dc020f",
        "buggy_code": "as possible. (Note that this function and :func:numpy.copy are very",
        "fixed_code": "as possible. (Note that this function and :func:`numpy.copy` are very",
        "patch": "@@ -3418,7 +3418,7 @@ def luf(lamdaexpr, *args, **kwargs):\n         Controls the memory layout of the copy. 'C' means C-order,\n         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n         'C' otherwise. 'K' means match the layout of `a` as closely\n-        as possible. (Note that this function and :func:numpy.copy are very\n+        as possible. (Note that this function and :func:`numpy.copy` are very\n         similar, but have different default values for their order=\n         arguments.)\n "
    },
    {
        "commit_id": "663094532de48e131793faaa0ba06eb7c051ab47",
        "commit_message": "Merge pull request #9564 from nolta/fix-cpuinfo-getoutput\n\nBUG: fix distutils/cpuinfo.py:getoutput()",
        "commit_url": "https://github.com/numpy/numpy/commit/663094532de48e131793faaa0ba06eb7c051ab47",
        "buggy_code": "return False, output",
        "fixed_code": "return False, \"\"",
        "patch": "@@ -35,7 +35,7 @@ def getoutput(cmd, successful_status=(0,), stacklevel=1):\n     except EnvironmentError:\n         e = get_exception()\n         warnings.warn(str(e), UserWarning, stacklevel=stacklevel)\n-        return False, output\n+        return False, \"\"\n     if os.WIFEXITED(status) and os.WEXITSTATUS(status) in successful_status:\n         return True, output\n     return False, output"
    },
    {
        "commit_id": "a343a78a19d2b44dff753062acf54304e34dd0a6",
        "commit_message": "BUG: fix distutils/cpuinfo.py:getoutput()\n\nIf getstatusoutput() throws an exception, getoutput() tries to catch it,\nbut then crashes with:\n\n  UnboundLocalError: local variable 'output' referenced before assignment\n\nbecause it tries to return the non-existent result of getstatusoutput().",
        "commit_url": "https://github.com/numpy/numpy/commit/a343a78a19d2b44dff753062acf54304e34dd0a6",
        "buggy_code": "return False, output",
        "fixed_code": "return False, \"\"",
        "patch": "@@ -35,7 +35,7 @@ def getoutput(cmd, successful_status=(0,), stacklevel=1):\n     except EnvironmentError:\n         e = get_exception()\n         warnings.warn(str(e), UserWarning, stacklevel=stacklevel)\n-        return False, output\n+        return False, \"\"\n     if os.WIFEXITED(status) and os.WEXITSTATUS(status) in successful_status:\n         return True, output\n     return False, output"
    },
    {
        "commit_id": "d79482d607e9a6338c27fbff27ccfde8879980b8",
        "commit_message": "Merge pull request #9554 from rgommers/f2py-mingw32-issue\n\nBUG: fix regression in 1.13.x in distutils.mingw32ccompiler.",
        "commit_url": "https://github.com/numpy/numpy/commit/d79482d607e9a6338c27fbff27ccfde8879980b8",
        "buggy_code": "lib_dirs = os.path.join(stem, folder)",
        "fixed_code": "lib_dirs.append(os.path.join(stem, folder))",
        "patch": "@@ -265,7 +265,7 @@ def find_python_dll():\n     lib_dirs = []\n     for stem in stems:\n         for folder in sub_dirs:\n-            lib_dirs = os.path.join(stem, folder)\n+            lib_dirs.append(os.path.join(stem, folder))\n \n     # add system directory as well\n     if 'SYSTEMROOT' in os.environ:"
    },
    {
        "commit_id": "7a05f44ece3f1dee518462bb2c4d09dbe83f9498",
        "commit_message": "BUG: fix regression in 1.13.x in distutils.mingw32ccompiler.\n\nIssue was introduced in gh-8454.\n\nThanks to @jennirinker for pointing out the issue and fix.  Closes gh-9553.",
        "commit_url": "https://github.com/numpy/numpy/commit/7a05f44ece3f1dee518462bb2c4d09dbe83f9498",
        "buggy_code": "lib_dirs = os.path.join(stem, folder)",
        "fixed_code": "lib_dirs.append(os.path.join(stem, folder))",
        "patch": "@@ -265,7 +265,7 @@ def find_python_dll():\n     lib_dirs = []\n     for stem in stems:\n         for folder in sub_dirs:\n-            lib_dirs = os.path.join(stem, folder)\n+            lib_dirs.append(os.path.join(stem, folder))\n \n     # add system directory as well\n     if 'SYSTEMROOT' in os.environ:"
    },
    {
        "commit_id": "1fea066606027e496667707809d616359514a815",
        "commit_message": "Merge pull request #9543 from dhermes/fix-note-on-quad-prec\n\nDOC: Adding backslash between double-backtick and s.",
        "commit_url": "https://github.com/numpy/numpy/commit/1fea066606027e496667707809d616359514a815",
        "buggy_code": "``long double``s; in particular, the 128-bit IEEE quad precision",
        "fixed_code": "``long double``\\s; in particular, the 128-bit IEEE quad precision",
        "patch": "@@ -158,7 +158,7 @@\n numpy provides with ``np.finfo(np.longdouble)``.\n \n NumPy does not provide a dtype with more precision than C\n-``long double``s; in particular, the 128-bit IEEE quad precision\n+``long double``\\s; in particular, the 128-bit IEEE quad precision\n data type (FORTRAN's ``REAL*16``\\) is not available.\n \n For efficient memory alignment, ``np.longdouble`` is usually stored"
    },
    {
        "commit_id": "f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "commit_message": "Merge pull request #9505 from eric-wieser/fix-issubdtype\n\nBUG: issubdtype is inconsistent on types and dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "buggy_code": "if _nx.issubdtype(dtype, complex):",
        "fixed_code": "if _nx.issubdtype(dtype, _nx.complexfloating):",
        "patch": "@@ -339,7 +339,7 @@ def geomspace(start, stop, num=50, endpoint=True, dtype=None):\n     # complex and another is negative and log would produce NaN otherwise\n     start = start + (stop - stop)\n     stop = stop + (start - start)\n-    if _nx.issubdtype(dtype, complex):\n+    if _nx.issubdtype(dtype, _nx.complexfloating):\n         start = start + 0j\n         stop = stop + 0j\n "
    },
    {
        "commit_id": "f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "commit_message": "Merge pull request #9505 from eric-wieser/fix-issubdtype\n\nBUG: issubdtype is inconsistent on types and dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "buggy_code": "(complex, _bytes_to_complex, nx.nan + 0j),",
        "fixed_code": "(nx.complexfloating, _bytes_to_complex, nx.nan + 0j),",
        "patch": "@@ -527,7 +527,7 @@ class StringConverter(object):\n         _mapper.append((nx.int64, int, -1))\n \n     _mapper.extend([(nx.floating, float, nx.nan),\n-                    (complex, _bytes_to_complex, nx.nan + 0j),\n+                    (nx.complexfloating, _bytes_to_complex, nx.nan + 0j),\n                     (nx.longdouble, nx.longdouble, nx.nan),\n                     (nx.string_, bytes, b'???')])\n "
    },
    {
        "commit_id": "f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "commit_message": "Merge pull request #9505 from eric-wieser/fix-issubdtype\n\nBUG: issubdtype is inconsistent on types and dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "buggy_code": "assert_(np.issubdtype(a.dtype, int))",
        "fixed_code": "assert_(np.issubdtype(a.dtype, np.integer))",
        "patch": "@@ -243,7 +243,7 @@ def test_shape_and_dtype(self):\n             for k, (a, sz) in enumerate(zip(arrays, sizes)):\n                 assert_equal(a.shape[k], sz)\n                 assert_(all(sh == 1 for j, sh in enumerate(a.shape) if j != k))\n-                assert_(np.issubdtype(a.dtype, int))\n+                assert_(np.issubdtype(a.dtype, np.integer))\n \n     def test_bool(self):\n         bool_a = [True, False, True, True]"
    },
    {
        "commit_id": "f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "commit_message": "Merge pull request #9505 from eric-wieser/fix-issubdtype\n\nBUG: issubdtype is inconsistent on types and dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "buggy_code": "assert_(np.issubdtype(a.dtype, float))",
        "fixed_code": "assert_(np.issubdtype(a.dtype, np.floating))",
        "patch": "@@ -420,7 +420,7 @@ class TestArrayConversion(object):\n     def test_asfarray(self):\n         a = asfarray(np.array([1, 2, 3]))\n         assert_equal(a.__class__, np.ndarray)\n-        assert_(np.issubdtype(a.dtype, float))\n+        assert_(np.issubdtype(a.dtype, np.floating))\n \n if __name__ == \"__main__\":\n     run_module_suite()"
    },
    {
        "commit_id": "f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "commit_message": "Merge pull request #9505 from eric-wieser/fix-issubdtype\n\nBUG: issubdtype is inconsistent on types and dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/f307cec3962926558b6387ebb4ab8d3f4ea3aa34",
        "buggy_code": "if not issubdtype(type(n), int):",
        "fixed_code": "if not issubdtype(type(n), N.integer):",
        "patch": "@@ -137,7 +137,7 @@ def matrix_power(M, n):\n     M = asanyarray(M)\n     if M.ndim != 2 or M.shape[0] != M.shape[1]:\n         raise ValueError(\"input must be a square array\")\n-    if not issubdtype(type(n), int):\n+    if not issubdtype(type(n), N.integer):\n         raise TypeError(\"exponent must be an integer\")\n \n     from numpy.linalg import inv"
    },
    {
        "commit_id": "6a119c982463097aebc8d004fc731b424721a650",
        "commit_message": "BUG: Be explicit about allowing all integer types in matrix exponentiation\n\nFixes gh-9506, unsigned exponentiation",
        "commit_url": "https://github.com/numpy/numpy/commit/6a119c982463097aebc8d004fc731b424721a650",
        "buggy_code": "if not issubdtype(type(n), int):",
        "fixed_code": "if not issubdtype(type(n), N.integer):",
        "patch": "@@ -137,7 +137,7 @@ def matrix_power(M, n):\n     M = asanyarray(M)\n     if M.ndim != 2 or M.shape[0] != M.shape[1]:\n         raise ValueError(\"input must be a square array\")\n-    if not issubdtype(type(n), int):\n+    if not issubdtype(type(n), N.integer):\n         raise TypeError(\"exponent must be an integer\")\n \n     from numpy.linalg import inv"
    },
    {
        "commit_id": "6af95ab2b05cb794efc11f438c30dece4967952a",
        "commit_message": "Merge pull request #9498 from shoyer/moveaxis-version\n\nDOC: fix versionadded in docstring for moveaxis",
        "commit_url": "https://github.com/numpy/numpy/commit/6af95ab2b05cb794efc11f438c30dece4967952a",
        "buggy_code": ".. versionadded::1.11.0",
        "fixed_code": ".. versionadded:: 1.11.0",
        "patch": "@@ -1551,7 +1551,7 @@ def moveaxis(a, source, destination):\n \n     Other axes remain in their original order.\n \n-    .. versionadded::1.11.0\n+    .. versionadded:: 1.11.0\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "622fde5cb586dbcf101aceda882a7b98d91f7e1b",
        "commit_message": "DOC: fix versionadded in docstring for moveaxis",
        "commit_url": "https://github.com/numpy/numpy/commit/622fde5cb586dbcf101aceda882a7b98d91f7e1b",
        "buggy_code": ".. versionadded::1.11.0",
        "fixed_code": ".. versionadded:: 1.11.0",
        "patch": "@@ -1551,7 +1551,7 @@ def moveaxis(a, source, destination):\n \n     Other axes remain in their original order.\n \n-    .. versionadded::1.11.0\n+    .. versionadded:: 1.11.0\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "8a511c68fada693bfa7283c313bf1de99ad90a6e",
        "commit_message": "BLD: remove -xhost flag from IntelFCompiler.  Closes gh-9042.\n\nNote that this was discussed extensively in gh-7287, but removing\nthis -xhost flag was missed in the PR that closed that issue.",
        "commit_url": "https://github.com/numpy/numpy/commit/8a511c68fada693bfa7283c313bf1de99ad90a6e",
        "buggy_code": "return ['-xhost -fp-model strict -O1 -{}'.format(mpopt)]",
        "fixed_code": "return ['-fp-model strict -O1 -{}'.format(mpopt)]",
        "patch": "@@ -58,7 +58,7 @@ def get_flags(self):\n     def get_flags_opt(self):  # Scipy test failures with -O2\n         v = self.get_version()\n         mpopt = 'openmp' if v and v < '15' else 'qopenmp'\n-        return ['-xhost -fp-model strict -O1 -{}'.format(mpopt)]\n+        return ['-fp-model strict -O1 -{}'.format(mpopt)]\n \n     def get_flags_arch(self):\n         return []"
    },
    {
        "commit_id": "0058b9efd75772a83e3bd497dac080757b83a36c",
        "commit_message": "DOC: Fix incorrect default for where\n\nNone would be cast to False, which is the opposite of the intended default!",
        "commit_url": "https://github.com/numpy/numpy/commit/0058b9efd75772a83e3bd497dac080757b83a36c",
        "buggy_code": "copyto(dst, src, casting='same_kind', where=None)",
        "fixed_code": "copyto(dst, src, casting='same_kind', where=True)",
        "patch": "@@ -3991,7 +3991,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n add_newdoc('numpy.core.multiarray', 'copyto',\n     \"\"\"\n-    copyto(dst, src, casting='same_kind', where=None)\n+    copyto(dst, src, casting='same_kind', where=True)\n \n     Copies values from one array to another, broadcasting as necessary.\n "
    },
    {
        "commit_id": "575a48e0da892d447a4d884f024df82c567e6f3f",
        "commit_message": "BUG: float16 is promoted to float64 by gradient\n\nThis isn't the case for `diff`",
        "commit_url": "https://github.com/numpy/numpy/commit/575a48e0da892d447a4d884f024df82c567e6f3f",
        "buggy_code": "if otype not in ['f', 'd', 'F', 'D', 'm', 'M']:",
        "fixed_code": "if otype not in ['f', 'd', 'F', 'D', 'm', 'M', 'e']:",
        "patch": "@@ -1715,7 +1715,7 @@ def gradient(f, *varargs, **kwargs):\n     slice4 = [slice(None)]*N\n \n     otype = f.dtype.char\n-    if otype not in ['f', 'd', 'F', 'D', 'm', 'M']:\n+    if otype not in ['f', 'd', 'F', 'D', 'm', 'M', 'e']:\n         otype = 'd'\n \n     # Difference of datetime64 elements results in timedelta64"
    },
    {
        "commit_id": "f696935e1b62daf2901f64abc243d195530b7a7b",
        "commit_message": "BUG: Fix error in fromstring function from numpy.core.records (#9369)\n\nBUG: fix error in fromstring function from numpy.core.records\r\n\r\nthe shape was computer using true division and\r\nndarray expects a tuple of integers as shape parameter",
        "commit_url": "https://github.com/numpy/numpy/commit/f696935e1b62daf2901f64abc243d195530b7a7b",
        "buggy_code": "shape = (len(datastring) - offset) / itemsize",
        "fixed_code": "shape = (len(datastring) - offset) // itemsize",
        "patch": "@@ -704,7 +704,7 @@ def fromstring(datastring, dtype=None, shape=None, offset=0, formats=None,\n \n     itemsize = descr.itemsize\n     if (shape is None or shape == 0 or shape == -1):\n-        shape = (len(datastring) - offset) / itemsize\n+        shape = (len(datastring) - offset) // itemsize\n \n     _array = recarray(shape, descr, buf=datastring, offset=offset)\n     return _array"
    },
    {
        "commit_id": "61f8500cbb7c08ff3e838825d8f8bed349326579",
        "commit_message": "Merge pull request #9346 from eric-wieser/masked-fillvalue-void\n\nBUG: void masked fillvalue cannot be cast to void in python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/61f8500cbb7c08ff3e838825d8f8bed349326579",
        "buggy_code": "'V': '???',",
        "fixed_code": "'V': b'???',",
        "patch": "@@ -186,7 +186,7 @@ class MaskError(MAError):\n                   'O': '?',\n                   'S': b'N/A',\n                   'u': 999999,\n-                  'V': '???',\n+                  'V': b'???',\n                   'U': u'N/A'\n                   }\n "
    },
    {
        "commit_id": "73f1dfe0605197e8a93e14ffc4426aad239cac62",
        "commit_message": "BUG: void masked fillvalue cannot be cast to void in python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/73f1dfe0605197e8a93e14ffc4426aad239cac62",
        "buggy_code": "'V': '???',",
        "fixed_code": "'V': b'???',",
        "patch": "@@ -186,7 +186,7 @@ class MaskError(MAError):\n                   'O': '?',\n                   'S': b'N/A',\n                   'u': 999999,\n-                  'V': '???',\n+                  'V': b'???',\n                   'U': u'N/A'\n                   }\n "
    },
    {
        "commit_id": "87c1b1f56af5fe2796cb78dd9bc76e92cb2e1f93",
        "commit_message": "BUG: flatten_descr returns string not dtype for scalar dtype",
        "commit_url": "https://github.com/numpy/numpy/commit/87c1b1f56af5fe2796cb78dd9bc76e92cb2e1f93",
        "buggy_code": "return ndtype.descr",
        "fixed_code": "return (('', ndtype),)",
        "patch": "@@ -182,7 +182,7 @@ def flatten_descr(ndtype):\n     \"\"\"\n     names = ndtype.names\n     if names is None:\n-        return ndtype.descr\n+        return (('', ndtype),)\n     else:\n         descr = []\n         for field in names:"
    },
    {
        "commit_id": "c6533b6c386dc0f4009e5f3c5c545dde4d1b48a4",
        "commit_message": "MAINT: Fix alerts from http://lgtm.com (#9292)\n\n* make exception raising 2/3 compatible\r\n* remove unnecesary else statement after while loop without break clause\r\n* ensure file is always enclosed even in the event of an exception\r\n* ensure list comprehension variable does not override enclosing loop variable",
        "commit_url": "https://github.com/numpy/numpy/commit/c6533b6c386dc0f4009e5f3c5c545dde4d1b48a4",
        "buggy_code": "vals = [vals[i] for i in usecols]",
        "fixed_code": "vals = [vals[j] for j in usecols]",
        "patch": "@@ -1014,7 +1014,7 @@ def split_line(line):\n             if len(vals) == 0:\n                 continue\n             if usecols:\n-                vals = [vals[i] for i in usecols]\n+                vals = [vals[j] for j in usecols]\n             if len(vals) != N:\n                 line_num = i + skiprows + 1\n                 raise ValueError(\"Wrong number of columns at line %d\""
    },
    {
        "commit_id": "ea7fac99e65037699eefe97b714808f7c73bf147",
        "commit_message": "BUG: fixes unsigned bins monotonicity check, see #9222",
        "commit_url": "https://github.com/numpy/numpy/commit/ea7fac99e65037699eefe97b714808f7c73bf147",
        "buggy_code": "if (np.diff(bins) < 0).any():",
        "fixed_code": "if not np.all(bins[1:] > bins[:-1]):",
        "patch": "@@ -782,7 +782,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n         bins = bin_edges\n     else:\n         bins = asarray(bins)\n-        if (np.diff(bins) < 0).any():\n+        if not np.all(bins[1:] > bins[:-1]):\n             raise ValueError(\n                 'bins must increase monotonically.')\n "
    },
    {
        "commit_id": "1490ccde8215bc6f4720266259672e34ebcda98f",
        "commit_message": "Merge pull request #9247 from bobeldering/f2py-badname-common\n\nBUG: fix missing keyword rename for common block to numpy.f2py",
        "commit_url": "https://github.com/numpy/numpy/commit/1490ccde8215bc6f4720266259672e34ebcda98f",
        "buggy_code": "n = m.group('name').strip()",
        "fixed_code": "n = rmbadname1(m.group('name').strip())",
        "patch": "@@ -2013,7 +2013,7 @@ def analyzecommon(block):\n                 if m.group('dims'):\n                     dims = [x.strip()\n                             for x in markoutercomma(m.group('dims')).split('@,@')]\n-                n = m.group('name').strip()\n+                n = rmbadname1(m.group('name').strip())\n                 if n in block['vars']:\n                     if 'attrspec' in block['vars'][n]:\n                         block['vars'][n]['attrspec'].append("
    },
    {
        "commit_id": "dc063adb3d515971e492ffdd163bb07a9529b54a",
        "commit_message": "BUG: fix missing keyword rename for common block to numpy.f2py\n\nA missing call to rmbadname1 in analyzecommon caused a look up of\ncommon block variables with a name in the badnames list to fail\nand the fall back of defaultimplicitrules to be used.\nSee ticket 9228.",
        "commit_url": "https://github.com/numpy/numpy/commit/dc063adb3d515971e492ffdd163bb07a9529b54a",
        "buggy_code": "n = m.group('name').strip()",
        "fixed_code": "n = rmbadname1(m.group('name').strip())",
        "patch": "@@ -2013,7 +2013,7 @@ def analyzecommon(block):\n                 if m.group('dims'):\n                     dims = [x.strip()\n                             for x in markoutercomma(m.group('dims')).split('@,@')]\n-                n = m.group('name').strip()\n+                n = rmbadname1(m.group('name').strip())\n                 if n in block['vars']:\n                     if 'attrspec' in block['vars'][n]:\n                         block['vars'][n]['attrspec'].append("
    },
    {
        "commit_id": "7cfec2403486456b52b525eccf7541e1562d9ab3",
        "commit_message": "Merge pull request #9238 from rgommers/docbuild-master\n\nDOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/7cfec2403486456b52b525eccf7541e1562d9ab3",
        "buggy_code": ">>> np.sum(hist*np.diff(bin_edges))",
        "fixed_code": ">>> np.sum(hist * np.diff(bin_edges))",
        "patch": "@@ -627,7 +627,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n     array([ 0.5,  0. ,  0.5,  0. ,  0. ,  0.5,  0. ,  0.5,  0. ,  0.5])\n     >>> hist.sum()\n     2.4999999999999996\n-    >>> np.sum(hist*np.diff(bin_edges))\n+    >>> np.sum(hist * np.diff(bin_edges))\n     1.0\n \n     .. versionadded:: 1.11.0"
    },
    {
        "commit_id": "7cfec2403486456b52b525eccf7541e1562d9ab3",
        "commit_message": "Merge pull request #9238 from rgommers/docbuild-master\n\nDOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/7cfec2403486456b52b525eccf7541e1562d9ab3",
        "buggy_code": ":math:`A_{10x100}, B_{100x5}, C_{5x50}$`.",
        "fixed_code": ":math:`A_{10x100}, B_{100x5}, C_{5x50}`.",
        "patch": "@@ -2327,7 +2327,7 @@ def cost(A, B):\n             return A.shape[0] * A.shape[1] * B.shape[1]\n \n     Let's assume we have three matrices\n-    :math:`A_{10x100}, B_{100x5}, C_{5x50}$`.\n+    :math:`A_{10x100}, B_{100x5}, C_{5x50}`.\n \n     The costs for the two different parenthesizations are as follows::\n "
    },
    {
        "commit_id": "7cfec2403486456b52b525eccf7541e1562d9ab3",
        "commit_message": "Merge pull request #9238 from rgommers/docbuild-master\n\nDOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/7cfec2403486456b52b525eccf7541e1562d9ab3",
        "buggy_code": "`ndarray`s.",
        "fixed_code": "ndarrays.",
        "patch": "@@ -1155,7 +1155,7 @@ def bmat(obj, ldict=None, gdict=None):\n     --------\n     block :\n         A generalization of this function for N-d arrays, that returns normal\n-        `ndarray`s.\n+        ndarrays.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "commit_message": "DOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "buggy_code": ">>> np.sum(hist*np.diff(bin_edges))",
        "fixed_code": ">>> np.sum(hist * np.diff(bin_edges))",
        "patch": "@@ -627,7 +627,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n     array([ 0.5,  0. ,  0.5,  0. ,  0. ,  0.5,  0. ,  0.5,  0. ,  0.5])\n     >>> hist.sum()\n     2.4999999999999996\n-    >>> np.sum(hist*np.diff(bin_edges))\n+    >>> np.sum(hist * np.diff(bin_edges))\n     1.0\n \n     .. versionadded:: 1.11.0"
    },
    {
        "commit_id": "34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "commit_message": "DOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "buggy_code": ":math:`A_{10x100}, B_{100x5}, C_{5x50}$`.",
        "fixed_code": ":math:`A_{10x100}, B_{100x5}, C_{5x50}`.",
        "patch": "@@ -2327,7 +2327,7 @@ def cost(A, B):\n             return A.shape[0] * A.shape[1] * B.shape[1]\n \n     Let's assume we have three matrices\n-    :math:`A_{10x100}, B_{100x5}, C_{5x50}$`.\n+    :math:`A_{10x100}, B_{100x5}, C_{5x50}`.\n \n     The costs for the two different parenthesizations are as follows::\n "
    },
    {
        "commit_id": "34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "commit_message": "DOC: BLD: fix lots of Sphinx warnings/errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/34075a54e7aa10e80d41ef33ec7102292ecff0d5",
        "buggy_code": "`ndarray`s.",
        "fixed_code": "ndarrays.",
        "patch": "@@ -1155,7 +1155,7 @@ def bmat(obj, ldict=None, gdict=None):\n     --------\n     block :\n         A generalization of this function for N-d arrays, that returns normal\n-        `ndarray`s.\n+        ndarrays.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -75,7 +75,7 @@ def load_cache():\n         f = open(CACHE_FILE, 'rb')\n         try:\n             cache = pickle.load(f)\n-        except:\n+        except Exception:\n             cache = {}\n         finally:\n             f.close()"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -272,7 +272,7 @@ def find_functions(filename, tag='API'):\n                     state = SCANNING\n                 else:\n                     function_args.append(line)\n-        except:\n+        except Exception:\n             print(filename, lineno + 1)\n             raise\n     fo.close()"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -187,7 +187,7 @@ def check_complex(config, mathlibs):\n         if os.uname()[0] == \"Interix\":\n             warnings.warn(\"Disabling broken complex support. See #1365\", stacklevel=2)\n             return priv, pub\n-    except:\n+    except Exception:\n         # os.uname not available on all platforms. blanket except ugly but safe\n         pass\n "
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -59,7 +59,7 @@ def iterate():\n \n     try:\n         yield iterate()\n-    except:\n+    except Exception:\n         import traceback\n         msg = \"At: %r\\n%s\" % (repr(value[0]),\n                               traceback.format_exc())"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -6355,7 +6355,7 @@ def test_flat_element_deletion():\n         del it[1:2]\n     except TypeError:\n         pass\n-    except:\n+    except Exception:\n         raise AssertionError\n \n "
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -2641,7 +2641,7 @@ def test_iter_element_deletion():\n         del it[1:2]\n     except TypeError:\n         pass\n-    except:\n+    except Exception:\n         raise AssertionError\n \n def test_iter_allocated_array_dtypes():"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1807,7 +1807,7 @@ def test_ticket_1770(self):\n             a['f2'] = 1\n         except ValueError:\n             pass\n-        except:\n+        except Exception:\n             raise AssertionError\n \n     def test_ticket_1608(self):"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -283,7 +283,7 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n         if num is None:\n             try:\n                 flags = [x.strip().upper() for x in flags]\n-            except:\n+            except Exception:\n                 raise TypeError(\"invalid flags specification\")\n             num = _num_fromflags(flags)\n     try:"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -417,7 +417,7 @@ def CCompiler_show_customization(self):\n             log.info(\"compiler '%s' is set to %s\" % (attrname, attr))\n     try:\n         self.get_version()\n-    except:\n+    except Exception:\n         pass\n     if log._global_log.threshold<2:\n         print('*'*80)"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -441,7 +441,7 @@ def get_output(self, body, headers=None, include_dirs=None,\n                 src, obj, exe = self._link(body, headers, include_dirs,\n                                            libraries, library_dirs, lang)\n                 grabber.restore()\n-            except:\n+            except Exception:\n                 output = grabber.data\n                 grabber.restore()\n                 raise"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1782,7 +1782,7 @@ def check_embedded_lapack(self, info):\n         # Add the additional \"extra\" arguments\n         try:\n             extra_args = info['extra_link_args']\n-        except:\n+        except Exception:\n             extra_args = []\n         try:\n             with open(src, 'wt') as f:"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -4531,7 +4531,7 @@ def add_newdoc(place, obj, doc):\n         elif isinstance(doc, list):\n             for val in doc:\n                 add_docstring(getattr(new, val[0]), val[1].strip())\n-    except:\n+    except Exception:\n         pass\n \n "
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -299,7 +299,7 @@ def __getitem__(self, key):\n                         if len(vec) == 3:\n                             trans1d = int(vec[2])\n                         continue\n-                    except:\n+                    except Exception:\n                         raise ValueError(\"unknown special directive\")\n                 try:\n                     axis = int(item)"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -424,7 +424,7 @@ def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,\n                                  \"non-pickled data\")\n             try:\n                 return pickle.load(fid, **pickle_kwargs)\n-            except:\n+            except Exception:\n                 raise IOError(\n                     \"Failed to interpret file %s as a pickle\" % repr(file))\n     finally:"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -811,7 +811,7 @@ def test_large_file_support():\n         # avoid actually writing 5GB\n         import subprocess as sp\n         sp.check_call([\"truncate\", \"-s\", \"5368709120\", tf_name])\n-    except:\n+    except Exception:\n         raise SkipTest(\"Could not create 5GB large file\")\n     # write a small array to the end\n     with open(tf_name, \"wb\") as f:"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1067,7 +1067,7 @@ def test_keywords_no_func_code(self):\n         import random\n         try:\n             vectorize(random.randrange)  # Should succeed\n-        except:\n+        except Exception:\n             raise AssertionError()\n \n     def test_keywords2_ticket_2100(self):"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -2177,7 +2177,7 @@ def norm(x, ord=None, axis=None, keepdims=False):\n     elif not isinstance(axis, tuple):\n         try:\n             axis = int(axis)\n-        except:\n+        except Exception:\n             raise TypeError(\"'axis' must be None, an integer or a tuple of integers\")\n         axis = (axis,)\n "
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1550,7 +1550,7 @@ def test_xerbla_override():\n             np.linalg.lapack_lite.xerbla()\n         except ValueError:\n             pass\n-        except:\n+        except Exception:\n             os._exit(os.EX_CONFIG)\n \n         try:"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -778,7 +778,7 @@ def replace_masked(s):\n     # not necessary for scalar True/False masks\n     try:\n         np.copyto(low.mask, high.mask, where=odd)\n-    except:\n+    except Exception:\n         pass\n \n     if np.issubdtype(asorted.dtype, np.inexact):"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -737,7 +737,7 @@ def test_axis_argument_errors(self):\n                 for axis, over in args:\n                     try:\n                         np.ma.median(x, axis=axis, overwrite_input=over)\n-                    except:\n+                    except Exception:\n                         raise AssertionError(msg % (mask, ndmin, axis, over))\n \n                 # Invalid axis values should raise exception"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -295,7 +295,7 @@ def __getitem__(self, index):\n             # Determine when we should have a column array\n             try:\n                 n = len(index)\n-            except:\n+            except Exception:\n                 n = 0\n             if n > 1 and isscalar(index[1]):\n                 out.shape = (sh, 1)"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -182,7 +182,7 @@ def as_series(alist, trim=True):\n     else:\n         try:\n             dtype = np.common_type(*arrays)\n-        except:\n+        except Exception:\n             raise ValueError(\"Coefficient arrays have no common type\")\n         ret = [np.array(a, copy=1, dtype=dtype) for a in arrays]\n     return ret"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -87,7 +87,7 @@ def test_f2py():\n                 assert_equal(stdout.strip(), b'2')\n                 success = True\n                 break\n-            except:\n+            except Exception:\n                 pass\n         msg = \"Warning: neither %s nor %s nor %s found in path\" % f2py_cmds\n         assert_(success, msg)"
    },
    {
        "commit_id": "e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "commit_message": "Merge pull request #9215 from eric-wieser/bare-except\n\nBUG: Avoid bare except clauses",
        "commit_url": "https://github.com/numpy/numpy/commit/e5e2cf89d01d7b09631977482b11df79e8131c6d",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -477,7 +477,7 @@ def _create_dmg(pyver, src_dir, volname=None):\n def dmg(options):\n     try:\n         pyver = options.dmg.python_version\n-    except:\n+    except Exception:\n         pyver = DEFAULT_PYTHON\n     idirs = options.installers.installersdir\n "
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -75,7 +75,7 @@ def load_cache():\n         f = open(CACHE_FILE, 'rb')\n         try:\n             cache = pickle.load(f)\n-        except:\n+        except Exception:\n             cache = {}\n         finally:\n             f.close()"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -272,7 +272,7 @@ def find_functions(filename, tag='API'):\n                     state = SCANNING\n                 else:\n                     function_args.append(line)\n-        except:\n+        except Exception:\n             print(filename, lineno + 1)\n             raise\n     fo.close()"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -187,7 +187,7 @@ def check_complex(config, mathlibs):\n         if os.uname()[0] == \"Interix\":\n             warnings.warn(\"Disabling broken complex support. See #1365\", stacklevel=2)\n             return priv, pub\n-    except:\n+    except Exception:\n         # os.uname not available on all platforms. blanket except ugly but safe\n         pass\n "
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -59,7 +59,7 @@ def iterate():\n \n     try:\n         yield iterate()\n-    except:\n+    except Exception:\n         import traceback\n         msg = \"At: %r\\n%s\" % (repr(value[0]),\n                               traceback.format_exc())"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -6355,7 +6355,7 @@ def test_flat_element_deletion():\n         del it[1:2]\n     except TypeError:\n         pass\n-    except:\n+    except Exception:\n         raise AssertionError\n \n "
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -2641,7 +2641,7 @@ def test_iter_element_deletion():\n         del it[1:2]\n     except TypeError:\n         pass\n-    except:\n+    except Exception:\n         raise AssertionError\n \n def test_iter_allocated_array_dtypes():"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1807,7 +1807,7 @@ def test_ticket_1770(self):\n             a['f2'] = 1\n         except ValueError:\n             pass\n-        except:\n+        except Exception:\n             raise AssertionError\n \n     def test_ticket_1608(self):"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -283,7 +283,7 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n         if num is None:\n             try:\n                 flags = [x.strip().upper() for x in flags]\n-            except:\n+            except Exception:\n                 raise TypeError(\"invalid flags specification\")\n             num = _num_fromflags(flags)\n     try:"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -417,7 +417,7 @@ def CCompiler_show_customization(self):\n             log.info(\"compiler '%s' is set to %s\" % (attrname, attr))\n     try:\n         self.get_version()\n-    except:\n+    except Exception:\n         pass\n     if log._global_log.threshold<2:\n         print('*'*80)"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -441,7 +441,7 @@ def get_output(self, body, headers=None, include_dirs=None,\n                 src, obj, exe = self._link(body, headers, include_dirs,\n                                            libraries, library_dirs, lang)\n                 grabber.restore()\n-            except:\n+            except Exception:\n                 output = grabber.data\n                 grabber.restore()\n                 raise"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1782,7 +1782,7 @@ def check_embedded_lapack(self, info):\n         # Add the additional \"extra\" arguments\n         try:\n             extra_args = info['extra_link_args']\n-        except:\n+        except Exception:\n             extra_args = []\n         try:\n             with open(src, 'wt') as f:"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -4531,7 +4531,7 @@ def add_newdoc(place, obj, doc):\n         elif isinstance(doc, list):\n             for val in doc:\n                 add_docstring(getattr(new, val[0]), val[1].strip())\n-    except:\n+    except Exception:\n         pass\n \n "
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -299,7 +299,7 @@ def __getitem__(self, key):\n                         if len(vec) == 3:\n                             trans1d = int(vec[2])\n                         continue\n-                    except:\n+                    except Exception:\n                         raise ValueError(\"unknown special directive\")\n                 try:\n                     axis = int(item)"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -424,7 +424,7 @@ def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,\n                                  \"non-pickled data\")\n             try:\n                 return pickle.load(fid, **pickle_kwargs)\n-            except:\n+            except Exception:\n                 raise IOError(\n                     \"Failed to interpret file %s as a pickle\" % repr(file))\n     finally:"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -811,7 +811,7 @@ def test_large_file_support():\n         # avoid actually writing 5GB\n         import subprocess as sp\n         sp.check_call([\"truncate\", \"-s\", \"5368709120\", tf_name])\n-    except:\n+    except Exception:\n         raise SkipTest(\"Could not create 5GB large file\")\n     # write a small array to the end\n     with open(tf_name, \"wb\") as f:"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1067,7 +1067,7 @@ def test_keywords_no_func_code(self):\n         import random\n         try:\n             vectorize(random.randrange)  # Should succeed\n-        except:\n+        except Exception:\n             raise AssertionError()\n \n     def test_keywords2_ticket_2100(self):"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -2177,7 +2177,7 @@ def norm(x, ord=None, axis=None, keepdims=False):\n     elif not isinstance(axis, tuple):\n         try:\n             axis = int(axis)\n-        except:\n+        except Exception:\n             raise TypeError(\"'axis' must be None, an integer or a tuple of integers\")\n         axis = (axis,)\n "
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -1550,7 +1550,7 @@ def test_xerbla_override():\n             np.linalg.lapack_lite.xerbla()\n         except ValueError:\n             pass\n-        except:\n+        except Exception:\n             os._exit(os.EX_CONFIG)\n \n         try:"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -778,7 +778,7 @@ def replace_masked(s):\n     # not necessary for scalar True/False masks\n     try:\n         np.copyto(low.mask, high.mask, where=odd)\n-    except:\n+    except Exception:\n         pass\n \n     if np.issubdtype(asorted.dtype, np.inexact):"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -737,7 +737,7 @@ def test_axis_argument_errors(self):\n                 for axis, over in args:\n                     try:\n                         np.ma.median(x, axis=axis, overwrite_input=over)\n-                    except:\n+                    except Exception:\n                         raise AssertionError(msg % (mask, ndmin, axis, over))\n \n                 # Invalid axis values should raise exception"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -295,7 +295,7 @@ def __getitem__(self, index):\n             # Determine when we should have a column array\n             try:\n                 n = len(index)\n-            except:\n+            except Exception:\n                 n = 0\n             if n > 1 and isscalar(index[1]):\n                 out.shape = (sh, 1)"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -182,7 +182,7 @@ def as_series(alist, trim=True):\n     else:\n         try:\n             dtype = np.common_type(*arrays)\n-        except:\n+        except Exception:\n             raise ValueError(\"Coefficient arrays have no common type\")\n         ret = [np.array(a, copy=1, dtype=dtype) for a in arrays]\n     return ret"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -87,7 +87,7 @@ def test_f2py():\n                 assert_equal(stdout.strip(), b'2')\n                 success = True\n                 break\n-            except:\n+            except Exception:\n                 pass\n         msg = \"Warning: neither %s nor %s nor %s found in path\" % f2py_cmds\n         assert_(success, msg)"
    },
    {
        "commit_id": "1608e53072b035bd40de7a202e75354f0e802120",
        "commit_message": "BUG: KeyboardInterrupt is swallowed all over the place\n\nBare except is very rarely the right thing",
        "commit_url": "https://github.com/numpy/numpy/commit/1608e53072b035bd40de7a202e75354f0e802120",
        "buggy_code": "except:",
        "fixed_code": "except Exception:",
        "patch": "@@ -477,7 +477,7 @@ def _create_dmg(pyver, src_dir, volname=None):\n def dmg(options):\n     try:\n         pyver = options.dmg.python_version\n-    except:\n+    except Exception:\n         pyver = DEFAULT_PYTHON\n     idirs = options.installers.installersdir\n "
    },
    {
        "commit_id": "1ec9ad692e38654b70b77d92b74e841d7255e109",
        "commit_message": "Merge pull request #9106 from mhvk/array_ufunc_reduce_out_tuple\n\nBUG: Array ufunc reduce out tuple",
        "commit_url": "https://github.com/numpy/numpy/commit/1ec9ad692e38654b70b77d92b74e841d7255e109",
        "buggy_code": "assert_raises(TypeError, np.modf, dummy, out=(a,))",
        "fixed_code": "assert_raises(ValueError, np.modf, dummy, out=(a,))",
        "patch": "@@ -3040,7 +3040,7 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kw):\n             warnings.filterwarnings('always', '', DeprecationWarning)\n             assert_equal(np.modf(dummy, out=a), (0,))\n             assert_(w[0].category is DeprecationWarning)\n-        assert_raises(TypeError, np.modf, dummy, out=(a,))\n+        assert_raises(ValueError, np.modf, dummy, out=(a,))\n \n         # 2 inputs, 1 output\n         assert_equal(np.add(a, dummy), 0)"
    },
    {
        "commit_id": "18bac353f667da6969716b60f3d3315ffd0b7aaa",
        "commit_message": "BUG: ufunc.reduce,accumulate,reduceat cannot deal with out tuple.",
        "commit_url": "https://github.com/numpy/numpy/commit/18bac353f667da6969716b60f3d3315ffd0b7aaa",
        "buggy_code": "assert_raises(TypeError, np.modf, dummy, out=(a,))",
        "fixed_code": "assert_raises(ValueError, np.modf, dummy, out=(a,))",
        "patch": "@@ -3107,7 +3107,7 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kw):\n             warnings.filterwarnings('always', '', DeprecationWarning)\n             assert_equal(np.modf(dummy, out=a), (0,))\n             assert_(w[0].category is DeprecationWarning)\n-        assert_raises(TypeError, np.modf, dummy, out=(a,))\n+        assert_raises(ValueError, np.modf, dummy, out=(a,))\n \n         # 2 inputs, 1 output\n         assert_equal(np.add(a, dummy), 0)"
    },
    {
        "commit_id": "33ce0baeae071cfbe32cb0f7680a4ec9dd7f379e",
        "commit_message": "Merge pull request #9099 from charris/forwardport-9097\n\nTST: fix test_basic failure on Windows",
        "commit_url": "https://github.com/numpy/numpy/commit/33ce0baeae071cfbe32cb0f7680a4ec9dd7f379e",
        "buggy_code": "s, o = exec_command.exec_command('echo path=%path%')",
        "fixed_code": "s, o = exec_command.exec_command('cmd /C echo path=%path%')",
        "patch": "@@ -99,7 +99,7 @@ def setUp(self):\n         self.pyexe = get_pythonexe()\n \n     def check_nt(self, **kws):\n-        s, o = exec_command.exec_command('echo path=%path%')\n+        s, o = exec_command.exec_command('cmd /C echo path=%path%')\n         self.assertEqual(s, 0)\n         self.assertNotEqual(o, '')\n "
    },
    {
        "commit_id": "1a3d04754e46e9d38f8fe0b10139907799fda918",
        "commit_message": "TST: fix test_basic failure on Windows\n\nEcho is a command in the Windows command interpreter",
        "commit_url": "https://github.com/numpy/numpy/commit/1a3d04754e46e9d38f8fe0b10139907799fda918",
        "buggy_code": "s, o = exec_command.exec_command('echo path=%path%')",
        "fixed_code": "s, o = exec_command.exec_command('cmd /C echo path=%path%')",
        "patch": "@@ -99,7 +99,7 @@ def setUp(self):\n         self.pyexe = get_pythonexe()\n \n     def check_nt(self, **kws):\n-        s, o = exec_command.exec_command('echo path=%path%')\n+        s, o = exec_command.exec_command('cmd /C echo path=%path%')\n         self.assertEqual(s, 0)\n         self.assertNotEqual(o, '')\n "
    },
    {
        "commit_id": "14ff219a13e194c5e7995218fea3c7648eb1c875",
        "commit_message": "Merge pull request #9087 from eric-wieser/fix-ufunc-resolution\n\nBUG: __array_ufunc__ should always be looked up on the type, never the instance",
        "commit_url": "https://github.com/numpy/numpy/commit/14ff219a13e194c5e7995218fea3c7648eb1c875",
        "buggy_code": "def array_ufunc_errmsg_formatter(ufunc, method, *inputs, **kwargs):",
        "fixed_code": "def array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs):",
        "patch": "@@ -688,7 +688,7 @@ def __init__(self, axis, ndim=None, msg_prefix=None):\n         super(AxisError, self).__init__(msg)\n \n \n-def array_ufunc_errmsg_formatter(ufunc, method, *inputs, **kwargs):\n+def array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs):\n     \"\"\" Format the error message for when __array_ufunc__ gives up. \"\"\"\n     args_string = ', '.join(['{!r}'.format(arg) for arg in inputs] +\n                             ['{}={!r}'.format(k, v)"
    },
    {
        "commit_id": "5bf2a79f939bf46fa76b127c7fa09db0e235475b",
        "commit_message": "BUG:  Fix inconsistent lookup of __array_ufunc__.\n\nPreviously, we would check if the attribute existed on the class, yet use it from the instance.\n\nThis also cuts 3 lookups of `__array_ufunc__` down to one.",
        "commit_url": "https://github.com/numpy/numpy/commit/5bf2a79f939bf46fa76b127c7fa09db0e235475b",
        "buggy_code": "def array_ufunc_errmsg_formatter(ufunc, method, *inputs, **kwargs):",
        "fixed_code": "def array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs):",
        "patch": "@@ -688,7 +688,7 @@ def __init__(self, axis, ndim=None, msg_prefix=None):\n         super(AxisError, self).__init__(msg)\n \n \n-def array_ufunc_errmsg_formatter(ufunc, method, *inputs, **kwargs):\n+def array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs):\n     \"\"\" Format the error message for when __array_ufunc__ gives up. \"\"\"\n     args_string = ', '.join(['{!r}'.format(arg) for arg in inputs] +\n                             ['{}={!r}'.format(k, v)"
    },
    {
        "commit_id": "b2006cb2a7fe508bca8aa7039352731634869334",
        "commit_message": "BUG: np.r_['r',...] crashes on scalars",
        "commit_url": "https://github.com/numpy/numpy/commit/b2006cb2a7fe508bca8aa7039352731634869334",
        "buggy_code": "scalars.append(k)",
        "fixed_code": "scalars.append(len(objs))",
        "patch": "@@ -308,7 +308,7 @@ def __getitem__(self, key):\n                     raise ValueError(\"unknown special directive\")\n             elif type(item) in ScalarType:\n                 newobj = array(item, ndmin=ndmin)\n-                scalars.append(k)\n+                scalars.append(len(objs))\n                 scalar = True\n                 scalartypes.append(newobj.dtype)\n             else:"
    },
    {
        "commit_id": "d6069fb19107300e59ba57093cb87e44fa39599f",
        "commit_message": "BUG: np.r_['rc'] is treated as np.r_['r'], not an error",
        "commit_url": "https://github.com/numpy/numpy/commit/d6069fb19107300e59ba57093cb87e44fa39599f",
        "buggy_code": "if item in 'rc':",
        "fixed_code": "if item in ('r', 'c'):",
        "patch": "@@ -288,7 +288,7 @@ def __getitem__(self, key):\n                 if k != 0:\n                     raise ValueError(\"special directives must be the \"\n                             \"first entry.\")\n-                if item in 'rc':\n+                if item in ('r', 'c'):\n                     matrix = True\n                     col = (item == 'c')\n                     continue"
    },
    {
        "commit_id": "d21cecf4526fc463a063d058d92987633250f06c",
        "commit_message": "Merge pull request #8895 from eric-wieser/fix-exec_command-error\n\nBUG: return values of exec_command were swapped",
        "commit_url": "https://github.com/numpy/numpy/commit/d21cecf4526fc463a063d058d92987633250f06c",
        "buggy_code": "return '', 127",
        "fixed_code": "return 127, ''",
        "patch": "@@ -252,7 +252,7 @@ def _exec_command(command, use_shell=None, use_tee = None, **env):\n                                 universal_newlines=True)\n     except EnvironmentError:\n         # Return 127, as os.spawn*() and /bin/sh do\n-        return '', 127\n+        return 127, ''\n     text, err = proc.communicate()\n     # Another historical oddity\n     if text[-1:] == '\\n':"
    },
    {
        "commit_id": "6cbc31f97de921904275fb7388e0808c41bcc800",
        "commit_message": "BUG: return values of exec_command were swapped\n\nThis caused a nonsensical failure on my windows machine",
        "commit_url": "https://github.com/numpy/numpy/commit/6cbc31f97de921904275fb7388e0808c41bcc800",
        "buggy_code": "return '', 127",
        "fixed_code": "return 127, ''",
        "patch": "@@ -252,7 +252,7 @@ def _exec_command(command, use_shell=None, use_tee = None, **env):\n                                 universal_newlines=True)\n     except EnvironmentError:\n         # Return 127, as os.spawn*() and /bin/sh do\n-        return '', 127\n+        return 127, ''\n     text, err = proc.communicate()\n     # Another historical oddity\n     if text[-1:] == '\\n':"
    },
    {
        "commit_id": "db2f5089fc5442ea8fca49188e2750a6c39b5664",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/numpy/numpy/commit/db2f5089fc5442ea8fca49188e2750a6c39b5664",
        "buggy_code": "assert_raises(ValueError, np.uniform, x, x)",
        "fixed_code": "assert_raises(ValueError, np.random.uniform, x, x)",
        "patch": "@@ -834,7 +834,7 @@ def __float__(self):\n                 raise ValueError\n \n         x = np.array(1.0).view(ThrowableType)\n-        assert_raises(ValueError, np.uniform, x, x)\n+        assert_raises(ValueError, np.random.uniform, x, x)\n \n     def test_vonmises(self):\n         np.random.seed(self.seed)"
    },
    {
        "commit_id": "d5f9cb0e2b207d469ae9596eb9097cde4a198911",
        "commit_message": "BUG: Fix runtests to not assume os.pathsep is :",
        "commit_url": "https://github.com/numpy/numpy/commit/d5f9cb0e2b207d469ae9596eb9097cde4a198911",
        "buggy_code": "os.environ['PYTHONPATH'] = site_dir + ':' + site_dir_noarch",
        "fixed_code": "os.environ['PYTHONPATH'] = site_dir + os.pathsep + site_dir_noarch",
        "patch": "@@ -142,7 +142,7 @@ def main(argv):\n         site_dir, site_dir_noarch = build_project(args)\n         sys.path.insert(0, site_dir)\n         sys.path.insert(0, site_dir_noarch)\n-        os.environ['PYTHONPATH'] = site_dir + ':' + site_dir_noarch\n+        os.environ['PYTHONPATH'] = site_dir + os.pathsep + site_dir_noarch\n \n     extra_argv = args.args[:]\n     if extra_argv and extra_argv[0] == '--':"
    },
    {
        "commit_id": "cd01f01e9238bf3d4d42613d804e06d35b94b48f",
        "commit_message": "MAINT: Remove manual error message",
        "commit_url": "https://github.com/numpy/numpy/commit/cd01f01e9238bf3d4d42613d804e06d35b94b48f",
        "buggy_code": "raise np.AxisError(\"'axis' entry is out of bounds\")",
        "fixed_code": "raise np.AxisError(axis=axis, ndim=self.ndim)",
        "patch": "@@ -4362,7 +4362,7 @@ def count(self, axis=None, keepdims=np._NoValue):\n \n             if self.shape is ():\n                 if axis not in (None, 0):\n-                    raise np.AxisError(\"'axis' entry is out of bounds\")\n+                    raise np.AxisError(axis=axis, ndim=self.ndim)\n                 return 1\n             elif axis is None:\n                 if kwargs.get('keepdims', False):"
    },
    {
        "commit_id": "fd6962f528d203026555f57bd6be730ef7e36959",
        "commit_message": "ENH: Add patch files to allow LAPACK 3.2.2 to be f2c'd\n\nThis doesn't yet actually generate the files, since they would cause the diff to balloon",
        "commit_url": "https://github.com/numpy/numpy/commit/fd6962f528d203026555f57bd6be730ef7e36959",
        "buggy_code": "keep_ftnlen = (Str('ilaenv_') | Str('s_rnge')) + Str('(')",
        "fixed_code": "keep_ftnlen = (Str('ilaenv_') | Str('iparmq_') | Str('s_rnge')) + Str('(')",
        "patch": "@@ -70,7 +70,7 @@ def endArgs(self, text):\n                       \"i_len\", \"do_fio\", \"do_lio\") + iofun\n \n     # Routines to not scrub the ftnlen argument from\n-    keep_ftnlen = (Str('ilaenv_') | Str('s_rnge')) + Str('(')\n+    keep_ftnlen = (Str('ilaenv_') | Str('iparmq_') | Str('s_rnge')) + Str('(')\n \n     lexicon = Lexicon([\n         (iofunctions,                           TEXT),"
    },
    {
        "commit_id": "a2c4d3230d58a5c4569ab2c7f13bdf9499b71dd4",
        "commit_message": "Merge pull request #8801 from ZZhaoTireless/fix/hstack-error-msg\n\nBUG: fix the error msg of empty hstack input",
        "commit_url": "https://github.com/numpy/numpy/commit/a2c4d3230d58a5c4569ab2c7f13bdf9499b71dd4",
        "buggy_code": "if arrs[0].ndim == 1:",
        "fixed_code": "if arrs and arrs[0].ndim == 1:",
        "patch": "@@ -283,7 +283,7 @@ def hstack(tup):\n     \"\"\"\n     arrs = [atleast_1d(_m) for _m in tup]\n     # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"\n-    if arrs[0].ndim == 1:\n+    if arrs and arrs[0].ndim == 1:\n         return _nx.concatenate(arrs, 0)\n     else:\n         return _nx.concatenate(arrs, 1)"
    },
    {
        "commit_id": "1273caf16cda1bfce8c1686876162c206bcf9867",
        "commit_message": "BUG: fix the error msg of empty hstack input",
        "commit_url": "https://github.com/numpy/numpy/commit/1273caf16cda1bfce8c1686876162c206bcf9867",
        "buggy_code": "if arrs[0].ndim == 1:",
        "fixed_code": "if arrs and arrs[0].ndim == 1:",
        "patch": "@@ -283,7 +283,7 @@ def hstack(tup):\n     \"\"\"\n     arrs = [atleast_1d(_m) for _m in tup]\n     # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"\n-    if arrs[0].ndim == 1:\n+    if arrs and arrs[0].ndim == 1:\n         return _nx.concatenate(arrs, 0)\n     else:\n         return _nx.concatenate(arrs, 1)"
    },
    {
        "commit_id": "0ea21d1092c9154d72d50b04ba2c8025704c679f",
        "commit_message": "BUG: Prevent modification of coefficients\n\n`poly.coeffs = 1` has always failed with a strong exception guarantee.\nHowever, `poly.coeffs += 1` would both change the state and fail.\n\nNow both fail without affecting the value.",
        "commit_url": "https://github.com/numpy/numpy/commit/0ea21d1092c9154d72d50b04ba2c8025704c679f",
        "buggy_code": "return self._coeffs",
        "fixed_code": "return self._coeffs.copy()",
        "patch": "@@ -1041,7 +1041,7 @@ class poly1d(object):\n     @property\n     def coeffs(self):\n         \"\"\" The polynomial coefficients \"\"\"\n-        return self._coeffs\n+        return self._coeffs.copy()\n \n     @property\n     def variable(self):"
    },
    {
        "commit_id": "b1d232c55392018094a4623f70c5571b586d28b8",
        "commit_message": "Merge pull request #8759 from rkern/fix/git-home\n\nBUG: Add HOME to the git environment.",
        "commit_url": "https://github.com/numpy/numpy/commit/b1d232c55392018094a4623f70c5571b586d28b8",
        "buggy_code": "for k in ['SYSTEMROOT', 'PATH']:",
        "fixed_code": "for k in ['SYSTEMROOT', 'PATH', 'HOME']:",
        "patch": "@@ -73,7 +73,7 @@ def git_version():\n     def _minimal_ext_cmd(cmd):\n         # construct minimal environment\n         env = {}\n-        for k in ['SYSTEMROOT', 'PATH']:\n+        for k in ['SYSTEMROOT', 'PATH', 'HOME']:\n             v = os.environ.get(k)\n             if v is not None:\n                 env[k] = v"
    },
    {
        "commit_id": "c0be9958addee72f09c3e471ed3c68d822fca894",
        "commit_message": "BUG: Add HOME to the git environment.\n\ngit config files can contain ~ expansions that require $HOME to be defined.\nSome installations of git have these in the global defaults now.",
        "commit_url": "https://github.com/numpy/numpy/commit/c0be9958addee72f09c3e471ed3c68d822fca894",
        "buggy_code": "for k in ['SYSTEMROOT', 'PATH']:",
        "fixed_code": "for k in ['SYSTEMROOT', 'PATH', 'HOME']:",
        "patch": "@@ -73,7 +73,7 @@ def git_version():\n     def _minimal_ext_cmd(cmd):\n         # construct minimal environment\n         env = {}\n-        for k in ['SYSTEMROOT', 'PATH']:\n+        for k in ['SYSTEMROOT', 'PATH', 'HOME']:\n             v = os.environ.get(k)\n             if v is not None:\n                 env[k] = v"
    },
    {
        "commit_id": "485b099cd4b82d65dc38cb2b28c7119f003c76c4",
        "commit_message": "Merge pull request #8750 from warut-vijit/master\n\nBUG: Fix np.average for object arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/485b099cd4b82d65dc38cb2b28c7119f003c76c4",
        "buggy_code": "if (scl == 0.0).any():",
        "fixed_code": "if np.any(scl == 0.0):",
        "patch": "@@ -1135,7 +1135,7 @@ def average(a, axis=None, weights=None, returned=False):\n             wgt = wgt.swapaxes(-1, axis)\n \n         scl = wgt.sum(axis=axis, dtype=result_dtype)\n-        if (scl == 0.0).any():\n+        if np.any(scl == 0.0):\n             raise ZeroDivisionError(\n                 \"Weights sum to zero, can't be normalized\")\n "
    },
    {
        "commit_id": "1588ae39ffb51ea916f03510671aab711fdfb568",
        "commit_message": "BUG: Fix np.average with object array weights\n\nFixes #8696",
        "commit_url": "https://github.com/numpy/numpy/commit/1588ae39ffb51ea916f03510671aab711fdfb568",
        "buggy_code": "if (scl == 0.0).any():",
        "fixed_code": "if np.any(scl == 0.0):",
        "patch": "@@ -1135,7 +1135,7 @@ def average(a, axis=None, weights=None, returned=False):\n             wgt = wgt.swapaxes(-1, axis)\n \n         scl = wgt.sum(axis=axis, dtype=result_dtype)\n-        if (scl == 0.0).any():\n+        if np.any(scl == 0.0):\n             raise ZeroDivisionError(\n                 \"Weights sum to zero, can't be normalized\")\n "
    },
    {
        "commit_id": "a674115b1f154f3e9c1d0c1554345703064c8581",
        "commit_message": "MAINT: Prefer to load functions from lapack/install if possible\n\nPreviously, the dlamch function was a manually-edited file, precluding\nautogeneration. We fix this by putting the manual edits in a patch file, and\nthen generating f2c_config.c from install/*.f, which includes dlamch.\n\nWhile these functions exist in more than once place in lapack 3.0.0, they only\nexist in lapack/install in newer versions. A side effect of this is that some\nfunctions have been pulled out of `f2c_blas.c` and `f2c_s_lapack.c` into this\nnew file.\n\nThe edits in the patch were introduced in cadbb5f2ec84cb774023bbe8cbe6f39a93e837d7,\nfor a reason that is lost to time.",
        "commit_url": "https://github.com/numpy/numpy/commit/a674115b1f154f3e9c1d0c1554345703064c8581",
        "buggy_code": "os.path.join(src_dir, 'dlamch.c'),",
        "fixed_code": "os.path.join(src_dir, 'f2c_config.c'),",
        "patch": "@@ -21,8 +21,8 @@ def configuration(parent_package='', top_path=None):\n         os.path.join(src_dir, 'f2c_s_lapack.c'),\n         os.path.join(src_dir, 'f2c_lapack.c'),\n         os.path.join(src_dir, 'f2c_blas.c'),\n+        os.path.join(src_dir, 'f2c_config.c'),\n         os.path.join(src_dir, 'f2c.c'),\n-        os.path.join(src_dir, 'dlamch.c'),\n     ]\n     all_sources = config.paths(lapack_lite_src)\n "
    },
    {
        "commit_id": "1717114bee6693049e6db973e48a50d3879dbb8d",
        "commit_message": "Merge pull request #8694 from juliantaylor/mac-build\n\nBUG: missing comma disabled some header checks",
        "commit_url": "https://github.com/numpy/numpy/commit/1717114bee6693049e6db973e48a50d3879dbb8d",
        "buggy_code": "\"xlocale.h\"  # see GH#8367",
        "fixed_code": "\"xlocale.h\",  # see GH#8367",
        "patch": "@@ -116,7 +116,7 @@ def check_api_version(apiversion, codegen_dir):\n                 \"xmmintrin.h\",  # SSE\n                 \"emmintrin.h\",  # SSE2\n                 \"features.h\",  # for glibc version linux\n-                \"xlocale.h\"  # see GH#8367\n+                \"xlocale.h\",  # see GH#8367\n                 \"dlfcn.h\", # dladdr\n ]\n "
    },
    {
        "commit_id": "270927fd883dcc335634c16b55075b1028af2fed",
        "commit_message": "BUG: missing comma disabled some header checks\n\ncloses gh-8693",
        "commit_url": "https://github.com/numpy/numpy/commit/270927fd883dcc335634c16b55075b1028af2fed",
        "buggy_code": "\"xlocale.h\"  # see GH#8367",
        "fixed_code": "\"xlocale.h\",  # see GH#8367",
        "patch": "@@ -116,7 +116,7 @@ def check_api_version(apiversion, codegen_dir):\n                 \"xmmintrin.h\",  # SSE\n                 \"emmintrin.h\",  # SSE2\n                 \"features.h\",  # for glibc version linux\n-                \"xlocale.h\"  # see GH#8367\n+                \"xlocale.h\",  # see GH#8367\n                 \"dlfcn.h\", # dladdr\n ]\n "
    },
    {
        "commit_id": "d7d3e212ce1ff176c718485aed889c77a48ef88f",
        "commit_message": "MAINT: Fix use of Python 2.6 deprecated escape sequences.\n\nCloses #8687.",
        "commit_url": "https://github.com/numpy/numpy/commit/d7d3e212ce1ff176c718485aed889c77a48ef88f",
        "buggy_code": "VERRE = re.compile('(^0x[\\da-f]{8})\\s*=\\s*([\\da-f]{32})')",
        "fixed_code": "VERRE = re.compile(r'(^0x[\\da-f]{8})\\s*=\\s*([\\da-f]{32})')",
        "patch": "@@ -469,7 +469,7 @@ def fullapi_hash(api_dicts):\n \n # To parse strings like 'hex = checksum' where hex is e.g. 0x1234567F and\n # checksum a 128 bits md5 checksum (hex format as well)\n-VERRE = re.compile('(^0x[\\da-f]{8})\\s*=\\s*([\\da-f]{32})')\n+VERRE = re.compile(r'(^0x[\\da-f]{8})\\s*=\\s*([\\da-f]{32})')\n \n def get_versions_hash():\n     d = []"
    },
    {
        "commit_id": "cd2446cbf34ffd48f19255b9c9751c2f18c52c6b",
        "commit_message": "BUG: re-enable test with duplicate name\n\ntest_longdouble had two tests called test_fromstring_foreign, so the\nsecond was overwriting the first.  Rename the first so test gets run.",
        "commit_url": "https://github.com/numpy/numpy/commit/cd2446cbf34ffd48f19255b9c9751c2f18c52c6b",
        "buggy_code": "def test_fromstring_foreign():",
        "fixed_code": "def test_fromstring_foreign_repr():",
        "patch": "@@ -52,7 +52,7 @@ def test_bytes():\n \n \n @in_foreign_locale\n-def test_fromstring_foreign():\n+def test_fromstring_foreign_repr():\n     f = 1.234\n     a = np.fromstring(repr(f), dtype=float, sep=\" \")\n     assert_equal(a[0], f)"
    },
    {
        "commit_id": "b8769a21cddc2ded3c140dd0f6b1d744caadacd1",
        "commit_message": "Merge pull request #8594 from eric-wieser/MaskedArray.__setitem__\n\nBUG: Fix MaskedArray.__setitem__",
        "commit_url": "https://github.com/numpy/numpy/commit/b8769a21cddc2ded3c140dd0f6b1d744caadacd1",
        "buggy_code": "dval = value",
        "fixed_code": "dval = getattr(value, '_data', value)",
        "patch": "@@ -3266,7 +3266,7 @@ def __setitem__(self, indx, value):\n             return\n \n         # Get the _data part of the new value\n-        dval = value\n+        dval = getattr(value, '_data', value)\n         # Get the _mask part of the new value\n         mval = getmask(value)\n         if nbfields and mval is nomask:"
    },
    {
        "commit_id": "10bf55e6548e970481baf7b333aeab20743e5b3b",
        "commit_message": "BUG: Fix #8510, making MaskedArray.__setitem__ work",
        "commit_url": "https://github.com/numpy/numpy/commit/10bf55e6548e970481baf7b333aeab20743e5b3b",
        "buggy_code": "dval = value",
        "fixed_code": "dval = getattr(value, '_data', value)",
        "patch": "@@ -3264,7 +3264,7 @@ def __setitem__(self, indx, value):\n             return\n \n         # Get the _data part of the new value\n-        dval = value\n+        dval = getattr(value, '_data', value)\n         # Get the _mask part of the new value\n         mval = getattr(value, '_mask', nomask)\n         if nbfields and mval is nomask:"
    },
    {
        "commit_id": "9106adfba085e93bf066d47e2da47b47839c8e08",
        "commit_message": "Merge pull request #8617 from eric-wieser/fix-8561\n\nBUG: Copy meshgrid after broadcasting",
        "commit_url": "https://github.com/numpy/numpy/commit/9106adfba085e93bf066d47e2da47b47839c8e08",
        "buggy_code": "raise ValueError('must provide at least one argument')",
        "fixed_code": "return ()",
        "patch": "@@ -179,7 +179,7 @@ def _broadcast_shape(*args):\n     supplied arrays against each other.\n     \"\"\"\n     if not args:\n-        raise ValueError('must provide at least one argument')\n+        return ()\n     # use the old-iterator because np.nditer does not handle size 0 arrays\n     # consistently\n     b = np.broadcast(*args[:32])"
    },
    {
        "commit_id": "9106adfba085e93bf066d47e2da47b47839c8e08",
        "commit_message": "Merge pull request #8617 from eric-wieser/fix-8561\n\nBUG: Copy meshgrid after broadcasting",
        "commit_url": "https://github.com/numpy/numpy/commit/9106adfba085e93bf066d47e2da47b47839c8e08",
        "buggy_code": "assert_raises(ValueError, _broadcast_shape)",
        "fixed_code": "assert_equal(_broadcast_shape(), ())",
        "patch": "@@ -266,7 +266,7 @@ def test_broadcast_to_raises():\n \n def test_broadcast_shape():\n     # broadcast_shape is already exercized indirectly by broadcast_arrays\n-    assert_raises(ValueError, _broadcast_shape)\n+    assert_equal(_broadcast_shape(), ())\n     assert_equal(_broadcast_shape([1, 2]), (2,))\n     assert_equal(_broadcast_shape(np.ones((1, 1))), (1, 1))\n     assert_equal(_broadcast_shape(np.ones((1, 1)), np.ones((3, 4))), (3, 4))"
    },
    {
        "commit_id": "d9b26f804117ebc1f591dff33d06ce2339af9339",
        "commit_message": "BUG: The broadcast shape of no things should be (), not ValueError",
        "commit_url": "https://github.com/numpy/numpy/commit/d9b26f804117ebc1f591dff33d06ce2339af9339",
        "buggy_code": "raise ValueError('must provide at least one argument')",
        "fixed_code": "return ()",
        "patch": "@@ -179,7 +179,7 @@ def _broadcast_shape(*args):\n     supplied arrays against each other.\n     \"\"\"\n     if not args:\n-        raise ValueError('must provide at least one argument')\n+        return ()\n     # use the old-iterator because np.nditer does not handle size 0 arrays\n     # consistently\n     b = np.broadcast(*args[:32])"
    },
    {
        "commit_id": "d9b26f804117ebc1f591dff33d06ce2339af9339",
        "commit_message": "BUG: The broadcast shape of no things should be (), not ValueError",
        "commit_url": "https://github.com/numpy/numpy/commit/d9b26f804117ebc1f591dff33d06ce2339af9339",
        "buggy_code": "assert_raises(ValueError, _broadcast_shape)",
        "fixed_code": "assert_equal(_broadcast_shape(), ())",
        "patch": "@@ -266,7 +266,7 @@ def test_broadcast_to_raises():\n \n def test_broadcast_shape():\n     # broadcast_shape is already exercized indirectly by broadcast_arrays\n-    assert_raises(ValueError, _broadcast_shape)\n+    assert_equal(_broadcast_shape(), ())\n     assert_equal(_broadcast_shape([1, 2]), (2,))\n     assert_equal(_broadcast_shape(np.ones((1, 1))), (1, 1))\n     assert_equal(_broadcast_shape(np.ones((1, 1)), np.ones((3, 4))), (3, 4))"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = T_i(x) * T_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),",
        "patch": "@@ -1472,7 +1472,7 @@ def chebvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = T_i(x) * T_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = H_i(x) * H_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),",
        "patch": "@@ -1243,7 +1243,7 @@ def hermvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = H_i(x) * H_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = He_i(x) * He_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),",
        "patch": "@@ -1240,7 +1240,7 @@ def hermevander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = He_i(x) * He_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),",
        "patch": "@@ -1242,7 +1242,7 @@ def lagvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),",
        "patch": "@@ -1273,7 +1273,7 @@ def legvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "commit_message": "Merge pull request #8555 from pezcore/8554-polyvander2d-doc-bug\n\nFixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/2aa36e94e9f683afdf9ec015c41f94be3bd4b38a",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = x^i * y^j,",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,",
        "patch": "@@ -1161,7 +1161,7 @@ def polyvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = x^i * y^j,\n+    .. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the powers of"
    },
    {
        "commit_id": "9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "commit_message": "Applied same fix as 1695458be to remaining 5 polynomial types\n\n- Fixes documentation of polynomial types `*vander2d()` methods to give the\n  correct last index of the pseudo-Vandermonde matrix returned expressed in\n  terms of x and y.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = T_i(x) * T_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),",
        "patch": "@@ -1472,7 +1472,7 @@ def chebvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = T_i(x) * T_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "commit_message": "Applied same fix as 1695458be to remaining 5 polynomial types\n\n- Fixes documentation of polynomial types `*vander2d()` methods to give the\n  correct last index of the pseudo-Vandermonde matrix returned expressed in\n  terms of x and y.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = H_i(x) * H_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),",
        "patch": "@@ -1243,7 +1243,7 @@ def hermvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = H_i(x) * H_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "commit_message": "Applied same fix as 1695458be to remaining 5 polynomial types\n\n- Fixes documentation of polynomial types `*vander2d()` methods to give the\n  correct last index of the pseudo-Vandermonde matrix returned expressed in\n  terms of x and y.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = He_i(x) * He_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),",
        "patch": "@@ -1240,7 +1240,7 @@ def hermevander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = He_i(x) * He_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "commit_message": "Applied same fix as 1695458be to remaining 5 polynomial types\n\n- Fixes documentation of polynomial types `*vander2d()` methods to give the\n  correct last index of the pseudo-Vandermonde matrix returned expressed in\n  terms of x and y.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),",
        "patch": "@@ -1242,7 +1242,7 @@ def lagvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "commit_message": "Applied same fix as 1695458be to remaining 5 polynomial types\n\n- Fixes documentation of polynomial types `*vander2d()` methods to give the\n  correct last index of the pseudo-Vandermonde matrix returned expressed in\n  terms of x and y.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bd836ac8020d79e4355909797a6b9e0bef5283c",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),",
        "patch": "@@ -1273,7 +1273,7 @@ def legvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = L_i(x) * L_j(y),\n+    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the degrees of"
    },
    {
        "commit_id": "1695458be97d0b1eb6257b5e2f21381427ba8211",
        "commit_message": "Fixing docstring error in polyvander2d",
        "commit_url": "https://github.com/numpy/numpy/commit/1695458be97d0b1eb6257b5e2f21381427ba8211",
        "buggy_code": ".. math:: V[..., deg[1]*i + j] = x^i * y^j,",
        "fixed_code": ".. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,",
        "patch": "@@ -1161,7 +1161,7 @@ def polyvander2d(x, y, deg):\n     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n     points `(x, y)`. The pseudo-Vandermonde matrix is defined by\n \n-    .. math:: V[..., deg[1]*i + j] = x^i * y^j,\n+    .. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,\n \n     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of\n     `V` index the points `(x, y)` and the last index encodes the powers of"
    },
    {
        "commit_id": "42c7c31667d82157372698cb94cdd32163552738",
        "commit_message": "Merge pull request #8542 from drlvk/patch-1\n\nMAINT: typo in histogram docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/42c7c31667d82157372698cb94cdd32163552738",
        "buggy_code": ">>> plt.hist(a, bins='auto')  # plt.hist passes it's arguments to np.histogram",
        "fixed_code": ">>> plt.hist(a, bins='auto')  # plt.hist passes its arguments to np.histogram",
        "patch": "@@ -638,7 +638,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n     >>> rng = np.random.RandomState(10)  # deterministic random data\n     >>> a = np.hstack((rng.normal(size=1000),\n     ...                rng.normal(loc=5, scale=2, size=1000)))\n-    >>> plt.hist(a, bins='auto')  # plt.hist passes it's arguments to np.histogram\n+    >>> plt.hist(a, bins='auto')  # plt.hist passes its arguments to np.histogram\n     >>> plt.title(\"Histogram with 'auto' bins\")\n     >>> plt.show()\n "
    },
    {
        "commit_id": "b1b67d65503b46f7da04785656b145ee82cc0157",
        "commit_message": "BUG: Fix apply_along_axis() for when func1d() returns a non-ndarray (#8426)\n\n* BUG: Closes issue #8419\r\n\r\nFixes issue in apply_along_axis() where func1d() returns a non ndarray\r\n\r\n* BUG: Fix apply_along_axis() when func1d() returns a non-ndarray\r\n\r\nCloses issue #8419. Fixes issue in apply_along_axis() where\r\nfunc1d() returns a non ndarray by calling asanyarray() on\r\nresult. This commit fixes a too long line in the test case.",
        "commit_url": "https://github.com/numpy/numpy/commit/b1b67d65503b46f7da04785656b145ee82cc0157",
        "buggy_code": "res = func1d(arr[tuple(i.tolist())], *args, **kwargs)",
        "fixed_code": "res = asanyarray(func1d(arr[tuple(i.tolist())], *args, **kwargs))",
        "patch": "@@ -127,7 +127,7 @@ def apply_along_axis(func1d, axis, arr, *args, **kwargs):\n                 ind[n] = 0\n                 n -= 1\n             i.put(indlist, ind)\n-            res = func1d(arr[tuple(i.tolist())], *args, **kwargs)\n+            res = asanyarray(func1d(arr[tuple(i.tolist())], *args, **kwargs))\n             outarr[tuple(i.tolist())] = res\n             k += 1\n         if res.shape == ():"
    },
    {
        "commit_id": "21a5142c0c5f85487f8de1bba45b0bf75fe8ecbf",
        "commit_message": "TST: Prevent non-square testcases being hidden by square ones (fix typo)",
        "commit_url": "https://github.com/numpy/numpy/commit/21a5142c0c5f85487f8de1bba45b0bf75fe8ecbf",
        "buggy_code": "def test_sq_cases(self):",
        "fixed_code": "def test_nonsq_cases(self):",
        "patch": "@@ -334,7 +334,7 @@ def test_sq_cases(self):\n \n class LinalgNonsquareTestCase(object):\n \n-    def test_sq_cases(self):\n+    def test_nonsq_cases(self):\n         _check_cases(self.do, NONSQUARE_CASES)\n \n "
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "\\*args : Arguments",
        "fixed_code": "\\\\*args : Arguments",
        "patch": "@@ -3722,7 +3722,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n     Parameters\n     ----------\n-    \\*args : Arguments\n+    \\\\*args : Arguments\n         If one argument: a scalar, only used in case `a` is of size 1.\n         If two arguments: the last argument is the value to be set\n         and must be a scalar, the first argument specifies a single array"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "TARGET_R = re.compile(\"Target: ([a-zA-Z0-9_\\-]*)\")",
        "fixed_code": "TARGET_R = re.compile(r\"Target: ([a-zA-Z0-9_\\-]*)\")",
        "patch": "@@ -15,7 +15,7 @@\n \n compilers = ['GnuFCompiler', 'Gnu95FCompiler']\n \n-TARGET_R = re.compile(\"Target: ([a-zA-Z0-9_\\-]*)\")\n+TARGET_R = re.compile(r\"Target: ([a-zA-Z0-9_\\-]*)\")\n \n # XXX: handle cross compilation\n def is_win64():"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "m = re.search('xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)",
        "fixed_code": "m = re.search(r'xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)",
        "patch": "@@ -36,7 +36,7 @@ def get_version(self,*args,**kwds):\n             xlf = find_executable('xlf')\n             if os.path.exists(xlf) and os.path.exists(lslpp):\n                 s, o = exec_command(lslpp + ' -Lc xlfcmp')\n-                m = re.search('xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)\n+                m = re.search(r'xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)\n                 if m: version = m.group('version')\n \n         xlf_dir = '/etc/opt/ibmcmp/xlf'"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "version_match = simple_version_match(start='Intel\\(R\\).*?64,')",
        "fixed_code": "version_match = simple_version_match(start=r'Intel\\(R\\).*?64,')",
        "patch": "@@ -202,7 +202,7 @@ class IntelEM64VisualFCompiler(IntelVisualFCompiler):\n     compiler_type = 'intelvem'\n     description = 'Intel Visual Fortran Compiler for 64-bit apps'\n \n-    version_match = simple_version_match(start='Intel\\(R\\).*?64,')\n+    version_match = simple_version_match(start=r'Intel\\(R\\).*?64,')\n \n     def get_flags_arch(self):\n         return ['']"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "result = re.search('(\\d+\\.\\d+)', out_string)",
        "fixed_code": "result = re.search(r'(\\d+\\.\\d+)', out_string)",
        "patch": "@@ -76,7 +76,7 @@ def __init__ (self,\n                                  stdout=subprocess.PIPE)\n             out_string = p.stdout.read()\n             p.stdout.close()\n-            result = re.search('(\\d+\\.\\d+)', out_string)\n+            result = re.search(r'(\\d+\\.\\d+)', out_string)\n             if result:\n                 self.gcc_version = StrictVersion(result.group(1))\n "
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "__svn_version__.py for string variables version, __version\\__, and",
        "fixed_code": "__svn_version__.py for string variables version, __version__, and",
        "patch": "@@ -1901,7 +1901,7 @@ def get_version(self, version_file=None, version_variable=None):\n         -----\n         This method scans files named\n         __version__.py, <packagename>_version.py, version.py, and\n-        __svn_version__.py for string variables version, __version\\__, and\n+        __svn_version__.py for string variables version, __version__, and\n         <packagename>_version, until a version number is found.\n         \"\"\"\n         version = getattr(self, 'version', None)"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "defaultdeletechars = set(\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")",
        "fixed_code": "defaultdeletechars = set(r\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")",
        "patch": "@@ -300,7 +300,7 @@ class NameValidator(object):\n     \"\"\"\n     #\n     defaultexcludelist = ['return', 'file', 'print']\n-    defaultdeletechars = set(\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")\n+    defaultdeletechars = set(r\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")\n     #\n \n     def __init__(self, excludelist=None, deletechars=None,"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": ".. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)",
        "fixed_code": ".. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)",
        "patch": "@@ -1045,7 +1045,7 @@ def leggrid2d(x, y, c):\n \n     This function returns the values:\n \n-    .. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n+    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n \n     where the points `(a, b)` consist of all pairs formed by taking\n     `a` from `x` and `b` from `y`. The resulting points form a grid with"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": ".. math:: p(x) = \\prod_{n=1}^{N} (x - r_n)",
        "fixed_code": ".. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)",
        "patch": "@@ -787,7 +787,7 @@ def polyvalfromroots(x, r, tensor=True):\n \n     If `r` is of length `N`, this function returns the value\n \n-    .. math:: p(x) = \\prod_{n=1}^{N} (x - r_n)\n+    .. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)\n \n     The parameter `x` is converted to an array only if it is a tuple or a\n     list, otherwise it is treated as a scalar. In either case, either `x`"
    },
    {
        "commit_id": "eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "commit_message": "Merge pull request #8382 from charris/fix-python-3.6-compat\n\nDEP: Fix escaped string characters deprecated in Python 3.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8d76e0832369d7195f949fa34e6c064a9f57ae",
        "buggy_code": "module=\"nose\\.\")",
        "fixed_code": "module=r\"nose\\.\")",
        "patch": "@@ -432,7 +432,7 @@ def test(self, label='fast', verbose=1, extra_argv=None,\n             #       be implemented).\n             warnings.filterwarnings(\"ignore\", message=\".*getargspec.*\",\n                                     category=DeprecationWarning,\n-                                    module=\"nose\\.\")\n+                                    module=r\"nose\\.\")\n \n             from .noseclasses import NumpyTestProgram\n "
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "\\*args : Arguments",
        "fixed_code": "\\\\*args : Arguments",
        "patch": "@@ -3722,7 +3722,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n     Parameters\n     ----------\n-    \\*args : Arguments\n+    \\\\*args : Arguments\n         If one argument: a scalar, only used in case `a` is of size 1.\n         If two arguments: the last argument is the value to be set\n         and must be a scalar, the first argument specifies a single array"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "TARGET_R = re.compile(\"Target: ([a-zA-Z0-9_\\-]*)\")",
        "fixed_code": "TARGET_R = re.compile(r\"Target: ([a-zA-Z0-9_\\-]*)\")",
        "patch": "@@ -15,7 +15,7 @@\n \n compilers = ['GnuFCompiler', 'Gnu95FCompiler']\n \n-TARGET_R = re.compile(\"Target: ([a-zA-Z0-9_\\-]*)\")\n+TARGET_R = re.compile(r\"Target: ([a-zA-Z0-9_\\-]*)\")\n \n # XXX: handle cross compilation\n def is_win64():"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "m = re.search('xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)",
        "fixed_code": "m = re.search(r'xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)",
        "patch": "@@ -36,7 +36,7 @@ def get_version(self,*args,**kwds):\n             xlf = find_executable('xlf')\n             if os.path.exists(xlf) and os.path.exists(lslpp):\n                 s, o = exec_command(lslpp + ' -Lc xlfcmp')\n-                m = re.search('xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)\n+                m = re.search(r'xlfcmp:(?P<version>\\d+([.]\\d+)+)', o)\n                 if m: version = m.group('version')\n \n         xlf_dir = '/etc/opt/ibmcmp/xlf'"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "version_match = simple_version_match(start='Intel\\(R\\).*?64,')",
        "fixed_code": "version_match = simple_version_match(start=r'Intel\\(R\\).*?64,')",
        "patch": "@@ -202,7 +202,7 @@ class IntelEM64VisualFCompiler(IntelVisualFCompiler):\n     compiler_type = 'intelvem'\n     description = 'Intel Visual Fortran Compiler for 64-bit apps'\n \n-    version_match = simple_version_match(start='Intel\\(R\\).*?64,')\n+    version_match = simple_version_match(start=r'Intel\\(R\\).*?64,')\n \n     def get_flags_arch(self):\n         return ['']"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "result = re.search('(\\d+\\.\\d+)', out_string)",
        "fixed_code": "result = re.search(r'(\\d+\\.\\d+)', out_string)",
        "patch": "@@ -76,7 +76,7 @@ def __init__ (self,\n                                  stdout=subprocess.PIPE)\n             out_string = p.stdout.read()\n             p.stdout.close()\n-            result = re.search('(\\d+\\.\\d+)', out_string)\n+            result = re.search(r'(\\d+\\.\\d+)', out_string)\n             if result:\n                 self.gcc_version = StrictVersion(result.group(1))\n "
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "__svn_version__.py for string variables version, __version\\__, and",
        "fixed_code": "__svn_version__.py for string variables version, __version__, and",
        "patch": "@@ -1901,7 +1901,7 @@ def get_version(self, version_file=None, version_variable=None):\n         -----\n         This method scans files named\n         __version__.py, <packagename>_version.py, version.py, and\n-        __svn_version__.py for string variables version, __version\\__, and\n+        __svn_version__.py for string variables version, __version__, and\n         <packagename>_version, until a version number is found.\n         \"\"\"\n         version = getattr(self, 'version', None)"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "defaultdeletechars = set(\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")",
        "fixed_code": "defaultdeletechars = set(r\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")",
        "patch": "@@ -300,7 +300,7 @@ class NameValidator(object):\n     \"\"\"\n     #\n     defaultexcludelist = ['return', 'file', 'print']\n-    defaultdeletechars = set(\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")\n+    defaultdeletechars = set(r\"\"\"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<\"\"\")\n     #\n \n     def __init__(self, excludelist=None, deletechars=None,"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": ".. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)",
        "fixed_code": ".. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)",
        "patch": "@@ -1045,7 +1045,7 @@ def leggrid2d(x, y, c):\n \n     This function returns the values:\n \n-    .. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n+    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n \n     where the points `(a, b)` consist of all pairs formed by taking\n     `a` from `x` and `b` from `y`. The resulting points form a grid with"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": ".. math:: p(x) = \\prod_{n=1}^{N} (x - r_n)",
        "fixed_code": ".. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)",
        "patch": "@@ -787,7 +787,7 @@ def polyvalfromroots(x, r, tensor=True):\n \n     If `r` is of length `N`, this function returns the value\n \n-    .. math:: p(x) = \\prod_{n=1}^{N} (x - r_n)\n+    .. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)\n \n     The parameter `x` is converted to an array only if it is a tuple or a\n     list, otherwise it is treated as a scalar. In either case, either `x`"
    },
    {
        "commit_id": "ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "commit_message": "DEP: Fix escaped string characters deprecated in Python 3.6.\n\nIn Python 3.6 a number of escape sequences that were previously accepted\n-- for instance \"\\(\" that was translated to \"\\\\(\" -- are deprecated. To\nretain the previous behavior either raw strings must be used or the\nbackslash must be properly escaped itself.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec0e04694278ef9ea83537d308b07fc27c1b5f85",
        "buggy_code": "module=\"nose\\.\")",
        "fixed_code": "module=r\"nose\\.\")",
        "patch": "@@ -432,7 +432,7 @@ def test(self, label='fast', verbose=1, extra_argv=None,\n             #       be implemented).\n             warnings.filterwarnings(\"ignore\", message=\".*getargspec.*\",\n                                     category=DeprecationWarning,\n-                                    module=\"nose\\.\")\n+                                    module=r\"nose\\.\")\n \n             from .noseclasses import NumpyTestProgram\n "
    },
    {
        "commit_id": "aab7993af0f6f3b9ac0d76952933b19163d65496",
        "commit_message": "Merge pull request #8364 from juliantaylor/masked-median-nan\n\nBUG: handle unmasked NaN in ma.median like normal median",
        "commit_url": "https://github.com/numpy/numpy/commit/aab7993af0f6f3b9ac0d76952933b19163d65496",
        "buggy_code": "if a.shape[axis] < 400:",
        "fixed_code": "if a.shape[axis] < 1000:",
        "patch": "@@ -869,7 +869,7 @@ def _nanmedian(a, axis=None, out=None, overwrite_input=False):\n     else:\n         # for small medians use sort + indexing which is still faster than\n         # apply_along_axis\n-        if a.shape[axis] < 400:\n+        if a.shape[axis] < 1000:\n             return _nanmedian_small(a, axis, out, overwrite_input)\n         result = np.apply_along_axis(_nanmedian1d, axis, a, overwrite_input)\n         if out is not None:"
    },
    {
        "commit_id": "f55516951b77baa475a3e712f5f7cb831fb90c0a",
        "commit_message": "Merge pull request #8366 from juliantaylor/nanperc-scalar\n\nBUG: fix nanpercentile not returning scalar with axis argument",
        "commit_url": "https://github.com/numpy/numpy/commit/f55516951b77baa475a3e712f5f7cb831fb90c0a",
        "buggy_code": "if axis is None:",
        "fixed_code": "if axis is None or a.ndim == 1:",
        "patch": "@@ -1134,7 +1134,7 @@ def _nanpercentile(a, q, axis=None, out=None, overwrite_input=False,\n     See nanpercentile for parameter usage\n \n     \"\"\"\n-    if axis is None:\n+    if axis is None or a.ndim == 1:\n         part = a.ravel()\n         result = _nanpercentile1d(part, q, overwrite_input, interpolation)\n     else:"
    },
    {
        "commit_id": "ba6fdacd434a70496cfc61240e34045b6a6550a7",
        "commit_message": "BUG: fix nanpercentile not returning scalar with axis argument\n\nCloses gh-8220",
        "commit_url": "https://github.com/numpy/numpy/commit/ba6fdacd434a70496cfc61240e34045b6a6550a7",
        "buggy_code": "if axis is None:",
        "fixed_code": "if axis is None or a.ndim == 1:",
        "patch": "@@ -1134,7 +1134,7 @@ def _nanpercentile(a, q, axis=None, out=None, overwrite_input=False,\n     See nanpercentile for parameter usage\n \n     \"\"\"\n-    if axis is None:\n+    if axis is None or a.ndim == 1:\n         part = a.ravel()\n         result = _nanpercentile1d(part, q, overwrite_input, interpolation)\n     else:"
    },
    {
        "commit_id": "fc03618c2e1c70a6839e0d3e39888d5ba2d73651",
        "commit_message": "Merge pull request #8337 from J-Sand/test_api_fix\n\nBUG: fix test_api test that fails intermittently in python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/fc03618c2e1c70a6839e0d3e39888d5ba2d73651",
        "buggy_code": "assert_equal(str(np.array(o).data), str(a.data))",
        "fixed_code": "assert_equal(bytes(np.array(o).data), bytes(a.data))",
        "patch": "@@ -106,7 +106,7 @@ def test_array_array():\n              dict(__array_struct__=a.__array_struct__))\n     ## wasn't what I expected... is np.array(o) supposed to equal a ?\n     ## instead we get a array([...], dtype=\">V18\")\n-    assert_equal(str(np.array(o).data), str(a.data))\n+    assert_equal(bytes(np.array(o).data), bytes(a.data))\n \n     # test array\n     o = type(\"o\", (object,),"
    },
    {
        "commit_id": "f7147d84f5df65b7359ab362c5ba3a715265938c",
        "commit_message": "BUG: fix test_api test that fails intermittently in python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/f7147d84f5df65b7359ab362c5ba3a715265938c",
        "buggy_code": "assert_equal(str(np.array(o).data), str(a.data))",
        "fixed_code": "assert_equal(bytes(np.array(o).data), bytes(a.data))",
        "patch": "@@ -106,7 +106,7 @@ def test_array_array():\n              dict(__array_struct__=a.__array_struct__))\n     ## wasn't what I expected... is np.array(o) supposed to equal a ?\n     ## instead we get a array([...], dtype=\">V18\")\n-    assert_equal(str(np.array(o).data), str(a.data))\n+    assert_equal(bytes(np.array(o).data), bytes(a.data))\n \n     # test array\n     o = type(\"o\", (object,),"
    },
    {
        "commit_id": "f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "commit_message": "ENH: Deprecation warnings for `/` integer division when running python -3\n\nWhen python is invoked with switch -3, it emits waring \"classic int division\"\nfor strict integer divisions. The same behavior is now implemented to numpy\nwith this fix",
        "commit_url": "https://github.com/numpy/numpy/commit/f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "buggy_code": "'PyUFunc_DivisionTypeResolver',",
        "fixed_code": "'PyUFunc_MixedDivisionTypeResolver',",
        "patch": "@@ -292,7 +292,7 @@ def english_upper(s):\n 'divide':\n     Ufunc(2, 1, None, # One is only a unit to the right, not the left\n           docstrings.get('numpy.core.umath.divide'),\n-          'PyUFunc_DivisionTypeResolver',\n+          'PyUFunc_MixedDivisionTypeResolver',\n           TD(intfltcmplx),\n           [TypeDescription('m', FullTypeDescr, 'mq', 'm'),\n            TypeDescription('m', FullTypeDescr, 'md', 'm'),"
    },
    {
        "commit_id": "f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "commit_message": "ENH: Deprecation warnings for `/` integer division when running python -3\n\nWhen python is invoked with switch -3, it emits waring \"classic int division\"\nfor strict integer divisions. The same behavior is now implemented to numpy\nwith this fix",
        "commit_url": "https://github.com/numpy/numpy/commit/f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "buggy_code": "if dt != np.int32 or sys.version_info.major < 3:",
        "fixed_code": "if dt != np.int32 or (sys.version_info.major < 3 and not sys.py3kwarning):",
        "patch": "@@ -83,7 +83,7 @@ def test_blocked(self):\n                 assert_almost_equal(np.square(inp2),\n                                     np.multiply(inp2, inp2),  err_msg=msg)\n                 # skip true divide for ints\n-                if dt != np.int32 or sys.version_info.major < 3:\n+                if dt != np.int32 or (sys.version_info.major < 3 and not sys.py3kwarning):\n                     assert_almost_equal(np.reciprocal(inp2),\n                                         np.divide(1, inp2),  err_msg=msg)\n "
    },
    {
        "commit_id": "f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "commit_message": "ENH: Deprecation warnings for `/` integer division when running python -3\n\nWhen python is invoked with switch -3, it emits waring \"classic int division\"\nfor strict integer divisions. The same behavior is now implemented to numpy\nwith this fix",
        "commit_url": "https://github.com/numpy/numpy/commit/f685f1a83de2d8fc1e0f48167a204248b6656a63",
        "buggy_code": "x = np.arange(5)",
        "fixed_code": "x = np.arange(5, dtype='float')",
        "patch": "@@ -176,7 +176,7 @@ class TestSubclassing(TestCase):\n     # Test suite for masked subclasses of ndarray.\n \n     def setUp(self):\n-        x = np.arange(5)\n+        x = np.arange(5, dtype='float')\n         mx = mmatrix(x, mask=[0, 1, 0, 0, 0])\n         self.data = (x, mx)\n "
    },
    {
        "commit_id": "4083ea6617aff898868643cefdd828225ebecbad",
        "commit_message": "Merge pull request #8216 from gfyoung/doc-improvements\n\nDOC: Patch doc errors for atleast_nd and frombuffer",
        "commit_url": "https://github.com/numpy/numpy/commit/4083ea6617aff898868643cefdd828225ebecbad",
        "buggy_code": "Start reading the buffer from this offset; default: 0.",
        "fixed_code": "Start reading the buffer from this offset (in bytes); default: 0.",
        "patch": "@@ -1126,7 +1126,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     count : int, optional\n         Number of items to read. ``-1`` means all data in the buffer.\n     offset : int, optional\n-        Start reading the buffer from this offset; default: 0.\n+        Start reading the buffer from this offset (in bytes); default: 0.\n \n     Notes\n     -----"
    },
    {
        "commit_id": "baef1f2291abfcdaedec12d7b5afa230fe1d3db5",
        "commit_message": "DOC: Patch doc errors for atleast_nd and frombuffer\n\nCloses gh-8214.\nCloses gh-8215.",
        "commit_url": "https://github.com/numpy/numpy/commit/baef1f2291abfcdaedec12d7b5afa230fe1d3db5",
        "buggy_code": "Start reading the buffer from this offset; default: 0.",
        "fixed_code": "Start reading the buffer from this offset (in bytes); default: 0.",
        "patch": "@@ -1126,7 +1126,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     count : int, optional\n         Number of items to read. ``-1`` means all data in the buffer.\n     offset : int, optional\n-        Start reading the buffer from this offset; default: 0.\n+        Start reading the buffer from this offset (in bytes); default: 0.\n \n     Notes\n     -----"
    },
    {
        "commit_id": "9bafab42c5d5b11023ef33622be425fc54584d6f",
        "commit_message": "Merge pull request #8168 from wrwrwr/genfromtxt-spelling\n\nDOC: Minor spelling fix in genfromtxt() docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bafab42c5d5b11023ef33622be425fc54584d6f",
        "buggy_code": "extension is `.gz` or `.bz2`, the file is first decompressed. Mote",
        "fixed_code": "extension is `.gz` or `.bz2`, the file is first decompressed. Note",
        "patch": "@@ -1329,7 +1329,7 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,\n     ----------\n     fname : file, str, pathlib.Path, list of str, generator\n         File, filename, list, or generator to read.  If the filename\n-        extension is `.gz` or `.bz2`, the file is first decompressed. Mote\n+        extension is `.gz` or `.bz2`, the file is first decompressed. Note\n         that generators must return byte strings in Python 3k.  The strings\n         in a list or produced by a generator are treated as lines.\n     dtype : dtype, optional"
    },
    {
        "commit_id": "d720d62a0bdc8813511d58e81fd6d781458be8cd",
        "commit_message": "DOC: Minor spelling fix in genfromtxt() docstring.\n\nCloses #8166.",
        "commit_url": "https://github.com/numpy/numpy/commit/d720d62a0bdc8813511d58e81fd6d781458be8cd",
        "buggy_code": "extension is `.gz` or `.bz2`, the file is first decompressed. Mote",
        "fixed_code": "extension is `.gz` or `.bz2`, the file is first decompressed. Note",
        "patch": "@@ -1329,7 +1329,7 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,\n     ----------\n     fname : file, str, pathlib.Path, list of str, generator\n         File, filename, list, or generator to read.  If the filename\n-        extension is `.gz` or `.bz2`, the file is first decompressed. Mote\n+        extension is `.gz` or `.bz2`, the file is first decompressed. Note\n         that generators must return byte strings in Python 3k.  The strings\n         in a list or produced by a generator are treated as lines.\n     dtype : dtype, optional"
    },
    {
        "commit_id": "e5d7653f8456c66ccb005eb50a139b1a9b044b3f",
        "commit_message": "Merge pull request #8148 from jjhelmus/npy_load_fix\n\nBUG: import full module path in npy_load_module",
        "commit_url": "https://github.com/numpy/numpy/commit/e5d7653f8456c66ccb005eb50a139b1a9b044b3f",
        "buggy_code": "import importlib",
        "fixed_code": "import importlib.machinery",
        "patch": "@@ -118,7 +118,7 @@ def npy_load_module(name, fn, info=None):\n         mod : module\n \n         \"\"\"\n-        import importlib\n+        import importlib.machinery\n         return importlib.machinery.SourceFileLoader(name, fn).load_module()\n else:\n     def npy_load_module(name, fn, info=None):"
    },
    {
        "commit_id": "5d0ce36e5be134bb5ead03cab1edeaa60fa355aa",
        "commit_message": "BUG: import full module path in npy_load_module\n\nUse the full module path when importing importlib.machinery for use in the\nnpy_load_module function. Just importing importlib is not sufficient in certain\ncases, for example Python 3.4.\n\ncloses #8147",
        "commit_url": "https://github.com/numpy/numpy/commit/5d0ce36e5be134bb5ead03cab1edeaa60fa355aa",
        "buggy_code": "import importlib",
        "fixed_code": "import importlib.machinery",
        "patch": "@@ -118,7 +118,7 @@ def npy_load_module(name, fn, info=None):\n         mod : module\n \n         \"\"\"\n-        import importlib\n+        import importlib.machinery\n         return importlib.machinery.SourceFileLoader(name, fn).load_module()\n else:\n     def npy_load_module(name, fn, info=None):"
    },
    {
        "commit_id": "ecf11a6710a354db52dfb5fe073ee1ce6e15bd3e",
        "commit_message": "Fix to meshgrid allows passing array sub-classes",
        "commit_url": "https://github.com/numpy/numpy/commit/ecf11a6710a354db52dfb5fe073ee1ce6e15bd3e",
        "buggy_code": "output = np.broadcast_arrays(*output)",
        "fixed_code": "output = np.broadcast_arrays(*output, subok=True)",
        "patch": "@@ -3463,7 +3463,7 @@ def meshgrid(*xi, **kwargs):\n \n     if not sparse and len(output) > 0:\n         # Return the full N-D matrix (not only the 1-D vector)\n-        output = np.broadcast_arrays(*output)\n+        output = np.broadcast_arrays(*output, subok=True)\n \n     return output\n "
    },
    {
        "commit_id": "36f88442209e74f0fcb63ec2aa3868b63f7dafb4",
        "commit_message": "BUG: financial.pmt modifies input #8055\n\nfinancial.pmt masked rate array in place, changing rate array.\nChanged to mask to a new array, preserving the original rate array.",
        "commit_url": "https://github.com/numpy/numpy/commit/36f88442209e74f0fcb63ec2aa3868b63f7dafb4",
        "buggy_code": "'http://somethingaboutorange.com/mrl/projects/nose' %",
        "fixed_code": "'http://nose.readthedocs.io' %",
        "patch": "@@ -64,7 +64,7 @@ def import_nose():\n \n     if not nose_is_good:\n         msg = ('Need nose >= %d.%d.%d for tests - see '\n-               'http://somethingaboutorange.com/mrl/projects/nose' %\n+               'http://nose.readthedocs.io' %\n                minimum_nose_version)\n         raise ImportError(msg)\n "
    },
    {
        "commit_id": "2de3dc4aa67f8842172d355b25889bf1c537de9c",
        "commit_message": "Merge pull request #8084 from stuartarchibald/wip/np_lib_poly_roots_doc_fix\n\nDOC: Fix erroneous return type description for np.roots.",
        "commit_url": "https://github.com/numpy/numpy/commit/2de3dc4aa67f8842172d355b25889bf1c537de9c",
        "buggy_code": "An array containing the complex roots of the polynomial.",
        "fixed_code": "An array containing the roots of the polynomial.",
        "patch": "@@ -167,7 +167,7 @@ def roots(p):\n     Returns\n     -------\n     out : ndarray\n-        An array containing the complex roots of the polynomial.\n+        An array containing the roots of the polynomial.\n \n     Raises\n     ------"
    },
    {
        "commit_id": "8478ba7e9d12272e70931878c83127cb7290d9c6",
        "commit_message": "DOC: Fix erroneous return type description for np.roots.\n\nnp.roots() does not always return complex roots, the\nroots of a polynomial depend its coefficients and\ntherefore may be in the real or complex domain.\n\ne.g.\n```\n>>> (np.roots([1,2,3])).dtype\ndtype('complex128')\n>>> (np.roots([1,2,])).dtype\ndtype('float64')\n```",
        "commit_url": "https://github.com/numpy/numpy/commit/8478ba7e9d12272e70931878c83127cb7290d9c6",
        "buggy_code": "An array containing the complex roots of the polynomial.",
        "fixed_code": "An array containing the roots of the polynomial.",
        "patch": "@@ -167,7 +167,7 @@ def roots(p):\n     Returns\n     -------\n     out : ndarray\n-        An array containing the complex roots of the polynomial.\n+        An array containing the roots of the polynomial.\n \n     Raises\n     ------"
    },
    {
        "commit_id": "ade91ea2f28284668fbf78971538ac4827d653b8",
        "commit_message": "Merge pull request #8081 from naveenarun/fix-nose-urls\n\nUpdate outdated Nose URL to nose.readthedocs.io",
        "commit_url": "https://github.com/numpy/numpy/commit/ade91ea2f28284668fbf78971538ac4827d653b8",
        "buggy_code": "'http://somethingaboutorange.com/mrl/projects/nose' %",
        "fixed_code": "'http://nose.readthedocs.io' %",
        "patch": "@@ -64,7 +64,7 @@ def import_nose():\n \n     if not nose_is_good:\n         msg = ('Need nose >= %d.%d.%d for tests - see '\n-               'http://somethingaboutorange.com/mrl/projects/nose' %\n+               'http://nose.readthedocs.io' %\n                minimum_nose_version)\n         raise ImportError(msg)\n "
    },
    {
        "commit_id": "04a9eac54dff8f74d6433b25c3cb722ccd98b077",
        "commit_message": "Merge pull request #8075 from ysshah/patch-1\n\nDOC: Fix description of isinf in nan_to_num",
        "commit_url": "https://github.com/numpy/numpy/commit/04a9eac54dff8f74d6433b25c3cb722ccd98b077",
        "buggy_code": "isinf : Shows which elements are negative or negative infinity.",
        "fixed_code": "isinf : Shows which elements are positive or negative infinity.",
        "patch": "@@ -342,7 +342,7 @@ def nan_to_num(x):\n \n     See Also\n     --------\n-    isinf : Shows which elements are negative or negative infinity.\n+    isinf : Shows which elements are positive or negative infinity.\n     isneginf : Shows which elements are negative infinity.\n     isposinf : Shows which elements are positive infinity.\n     isnan : Shows which elements are Not a Number (NaN)."
    },
    {
        "commit_id": "86e87cb1e56108ce6b5e1faeb2469cbee804e22e",
        "commit_message": "DOC: Fix description of isinf in nan_to_num\n\nMinor fix: Change isinf description in \"See Also\" section of nan_to_num documentation to POSITIVE or negative infinity. Must have been a typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/86e87cb1e56108ce6b5e1faeb2469cbee804e22e",
        "buggy_code": "isinf : Shows which elements are negative or negative infinity.",
        "fixed_code": "isinf : Shows which elements are positive or negative infinity.",
        "patch": "@@ -342,7 +342,7 @@ def nan_to_num(x):\n \n     See Also\n     --------\n-    isinf : Shows which elements are negative or negative infinity.\n+    isinf : Shows which elements are positive or negative infinity.\n     isneginf : Shows which elements are negative infinity.\n     isposinf : Shows which elements are positive infinity.\n     isnan : Shows which elements are Not a Number (NaN)."
    },
    {
        "commit_id": "8dff1ca9dbed87b08390c5697e3f3391a746b43b",
        "commit_message": "Merge pull request #8061 from KhaledTo/issue#8055\n\nBUG : financial.pmt modifies input (issue #8055)",
        "commit_url": "https://github.com/numpy/numpy/commit/8dff1ca9dbed87b08390c5697e3f3391a746b43b",
        "buggy_code": "(rate, nper, pv, fv, when) = map(np.asarray, [rate, nper, pv, fv, when])",
        "fixed_code": "(rate, nper, pv, fv, when) = map(np.array, [rate, nper, pv, fv, when])",
        "patch": "@@ -207,7 +207,7 @@ def pmt(rate, nper, pv, fv=0, when='end'):\n \n     \"\"\"\n     when = _convert_when(when)\n-    (rate, nper, pv, fv, when) = map(np.asarray, [rate, nper, pv, fv, when])\n+    (rate, nper, pv, fv, when) = map(np.array, [rate, nper, pv, fv, when])\n     temp = (1 + rate)**nper\n     mask = (rate == 0.0)\n     np.copyto(rate, 1.0, where=mask)"
    },
    {
        "commit_id": "7c8043e19f5b35df153e8a5057f6f1db92b43dde",
        "commit_message": "BUG : financial.pmt modifies input (issue #8055)",
        "commit_url": "https://github.com/numpy/numpy/commit/7c8043e19f5b35df153e8a5057f6f1db92b43dde",
        "buggy_code": "(rate, nper, pv, fv, when) = map(np.asarray, [rate, nper, pv, fv, when])",
        "fixed_code": "(rate, nper, pv, fv, when) = map(np.array, [rate, nper, pv, fv, when])",
        "patch": "@@ -207,7 +207,7 @@ def pmt(rate, nper, pv, fv=0, when='end'):\n \n     \"\"\"\n     when = _convert_when(when)\n-    (rate, nper, pv, fv, when) = map(np.asarray, [rate, nper, pv, fv, when])\n+    (rate, nper, pv, fv, when) = map(np.array, [rate, nper, pv, fv, when])\n     temp = (1 + rate)**nper\n     mask = (rate == 0.0)\n     np.copyto(rate, 1.0, where=mask)"
    },
    {
        "commit_id": "1b22317ca16e14070400eedc714ae97e022b747d",
        "commit_message": "Update add_newdocs.py (#8040)\n\nDOC: Fix bad partition example.",
        "commit_url": "https://github.com/numpy/numpy/commit/1b22317ca16e14070400eedc714ae97e022b747d",
        "buggy_code": ">>> a.partition(a, 3)",
        "fixed_code": ">>> a.partition(3)",
        "patch": "@@ -4445,7 +4445,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     Examples\n     --------\n     >>> a = np.array([3, 4, 2, 1])\n-    >>> a.partition(a, 3)\n+    >>> a.partition(3)\n     >>> a\n     array([2, 1, 3, 4])\n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy C-API",
        "fixed_code": "NumPy C-API",
        "patch": "@@ -151,7 +151,7 @@\n \n c_api_header = \"\"\"\n ===========\n-Numpy C-API\n+NumPy C-API\n ===========\n \"\"\"\n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy Ufunc C-API",
        "fixed_code": "NumPy Ufunc C-API",
        "patch": "@@ -204,7 +204,7 @@ def do_generate_api(targets, sources):\n     fid = open(doc_file, 'w')\n     fid.write('''\n =================\n-Numpy Ufunc C-API\n+NumPy Ufunc C-API\n =================\n ''')\n     for func in ufunc_api_list:"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "on disk, without reading the entire file into memory.  Numpy's",
        "fixed_code": "on disk, without reading the entire file into memory.  NumPy's",
        "patch": "@@ -21,7 +21,7 @@ class memmap(ndarray):\n     \"\"\"Create a memory-map to an array stored in a *binary* file on disk.\n \n     Memory-mapped files are used for accessing small segments of large files\n-    on disk, without reading the entire file into memory.  Numpy's\n+    on disk, without reading the entire file into memory.  NumPy's\n     memmap's are array-like objects.  This differs from Python's ``mmap``\n     module, which uses file-like objects.\n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy supplies the load_library function as a convenience.",
        "fixed_code": "NumPy supplies the load_library function as a convenience.",
        "patch": "@@ -95,7 +95,7 @@ def load_library(libname, loader_path):\n \n         But there are cross-platform considerations, such as library file extensions,\n         plus the fact Windows will just load the first library it finds with that name.  \n-        Numpy supplies the load_library function as a convenience.\n+        NumPy supplies the load_library function as a convenience.\n \n         Parameters\n         ----------"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "language uses it. New Numpy arrays are by default in row-major order.",
        "fixed_code": "language uses it. New NumPy arrays are by default in row-major order.",
        "patch": "@@ -305,7 +305,7 @@\n            [1, 2, 3, 4, 5, 6]\n \n        Row-major order is also known as the C order, as the C programming\n-       language uses it. New Numpy arrays are by default in row-major order.\n+       language uses it. New NumPy arrays are by default in row-major order.\n \n    self\n        Often seen in method signatures, ``self`` refers to the instance"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "input array (or arrays) and on no other array elements. Numpy comes with a",
        "fixed_code": "input array (or arrays) and on no other array elements. NumPy comes with a",
        "patch": "@@ -6,7 +6,7 @@\n Ufuncs are, generally speaking, mathematical functions or operations that are\n applied element-by-element to the contents of an array. That is, the result\n in each output array element only depends on the value in the corresponding\n-input array (or arrays) and on no other array elements. Numpy comes with a\n+input array (or arrays) and on no other array elements. NumPy comes with a\n large suite of ufuncs, and scipy extends that suite substantially. The simplest\n example is the addition operator: ::\n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy.",
        "fixed_code": "NumPy.",
        "patch": "@@ -5,7 +5,7 @@\n for FFTs, linear algebra, and special functions. This module allows\n developers to transparently support these accelerated functions when\n scipy is available but still support users who have only installed\n-Numpy.\n+NumPy.\n \n .. _Scipy : http://www.scipy.org\n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic",
        "fixed_code": "NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic",
        "patch": "@@ -350,7 +350,7 @@ def nan_to_num(x):\n \n     Notes\n     -----\n-    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n+    NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n     (IEEE 754). This means that Not a Number is not equivalent to infinity.\n \n "
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "Numpy 1.8 and the old option 'full' was made an alias of 'reduced'.  In",
        "fixed_code": "NumPy 1.8 and the old option 'full' was made an alias of 'reduced'.  In",
        "patch": "@@ -677,7 +677,7 @@ def qr(a, mode='reduced'):\n     `a` is of type `matrix`, all the return values will be matrices too.\n \n     New 'reduced', 'complete', and 'raw' options for mode were added in\n-    Numpy 1.8 and the old option 'full' was made an alias of 'reduced'.  In\n+    NumPy 1.8 and the old option 'full' was made an alias of 'reduced'.  In\n     addition the options 'full' and 'economic' were deprecated.  Because\n     'full' was the previous default and 'reduced' is the new default,\n     backward compatibility can be maintained by letting `mode` default."
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -742,7 +742,7 @@ def fit(cls, x, y, deg, domain=None, rcond=None, full=False, w=None,\n         deg : int or 1-D array_like\n             Degree(s) of the fitting polynomials. If `deg` is a single integer\n             all terms up to and including the `deg`'th term are included in the\n-            fit. For Numpy versions >= 1.11 a list of integers specifying the\n+            fit. For NumPy versions >= 1.11 a list of integers specifying the\n             degrees of the terms to include may be used instead.\n         domain : {None, [beg, end], []}, optional\n             Domain to use for the returned series. If ``None``,"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1620,7 +1620,7 @@ def chebfit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit. Singular values smaller than"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1391,7 +1391,7 @@ def hermfit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit. Singular values smaller than"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1388,7 +1388,7 @@ def hermefit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit. Singular values smaller than"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1390,7 +1390,7 @@ def lagfit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit. Singular values smaller than"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1421,7 +1421,7 @@ def legfit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit. Singular values smaller than"
    },
    {
        "commit_id": "2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "commit_message": "DOC: change Numpy to NumPy in dosctrings and comments\n\nThe strings in error messages were left untouched",
        "commit_url": "https://github.com/numpy/numpy/commit/2a55233b81a6ea18a57d1dd4f7bc5fff9f2fb681",
        "buggy_code": "fit. For Numpy versions >= 1.11 a list of integers specifying the",
        "fixed_code": "fit. For NumPy versions >= 1.11 a list of integers specifying the",
        "patch": "@@ -1309,7 +1309,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None):\n     deg : int or 1-D array_like\n         Degree(s) of the fitting polynomials. If `deg` is a single integer\n         all terms up to and including the `deg`'th term are included in the\n-        fit. For Numpy versions >= 1.11 a list of integers specifying the\n+        fit. For NumPy versions >= 1.11 a list of integers specifying the\n         degrees of the terms to include may be used instead.\n     rcond : float, optional\n         Relative condition number of the fit.  Singular values smaller"
    },
    {
        "commit_id": "adc155e12648256eea754d1d53e8322e3ac19549",
        "commit_message": "Merge pull request #8014 from seberg/issue-8013\n\nBUG: Fix fid.close() to use os.close(fid)",
        "commit_url": "https://github.com/numpy/numpy/commit/adc155e12648256eea754d1d53e8322e3ac19549",
        "buggy_code": "fid.close()",
        "fixed_code": "os.close(fid)",
        "patch": "@@ -364,7 +364,7 @@ def _can_target(cmd, arch):\n     \"\"\"Return true if the architecture supports the -arch flag\"\"\"\n     newcmd = cmd[:]\n     fid, filename = tempfile.mkstemp(suffix=\".f\")\n-    fid.close()\n+    os.close(fid)\n     try:\n         d = os.path.dirname(filename)\n         output = os.path.splitext(filename)[0] + \".o\""
    },
    {
        "commit_id": "f46278b11d5e1a62e52c30002d25bb2f3766f592",
        "commit_message": "BUG: Fix fid.close() to use os.close(fid)\n\nThe error snuk in with some other file closing fixes and found by\nWarren Weckesser.\n\nCloses gh-8013",
        "commit_url": "https://github.com/numpy/numpy/commit/f46278b11d5e1a62e52c30002d25bb2f3766f592",
        "buggy_code": "fid.close()",
        "fixed_code": "os.close(fid)",
        "patch": "@@ -364,7 +364,7 @@ def _can_target(cmd, arch):\n     \"\"\"Return true if the architecture supports the -arch flag\"\"\"\n     newcmd = cmd[:]\n     fid, filename = tempfile.mkstemp(suffix=\".f\")\n-    fid.close()\n+    os.close(fid)\n     try:\n         d = os.path.dirname(filename)\n         output = os.path.splitext(filename)[0] + \".o\""
    },
    {
        "commit_id": "c1ddf841f6a48248b946a990ae750505b8b91686",
        "commit_message": "ENH: Remove warning ignoring from nanfuncs\n\nComment mentions a speedup, but it seems unsure why it should\nbe there. Instead use an error state in divide_by_count.\nSome extra complex warnings had to be ignored (but those seemed correct)",
        "commit_url": "https://github.com/numpy/numpy/commit/c1ddf841f6a48248b946a990ae750505b8b91686",
        "buggy_code": "assert_array_max_ulp, assert_array_almost_equal, assert_raises",
        "fixed_code": "assert_array_max_ulp, assert_array_almost_equal, assert_raises,",
        "patch": "@@ -5,7 +5,7 @@\n \n from numpy.testing import (\n     TestCase, run_module_suite, assert_equal, assert_array_equal,\n-    assert_array_max_ulp, assert_array_almost_equal, assert_raises\n+    assert_array_max_ulp, assert_array_almost_equal, assert_raises,\n     )\n \n from numpy import ("
    },
    {
        "commit_id": "f12412d41a76821ade845a48076ff5ba5e1a12f8",
        "commit_message": "Merge pull request #7823 from madphysicist/ma-bugs\n\nBUG: Fixed masked array behavior for scalar inputs to np.ma.atleast_*d",
        "commit_url": "https://github.com/numpy/numpy/commit/f12412d41a76821ade845a48076ff5ba5e1a12f8",
        "buggy_code": ">>> np.atleast_3d(x).base is x",
        "fixed_code": ">>> np.atleast_3d(x).base is x.base  # x is a reshape, so not base itself",
        "patch": "@@ -146,7 +146,7 @@ def atleast_3d(*arys):\n     >>> x = np.arange(12.0).reshape(4,3)\n     >>> np.atleast_3d(x).shape\n     (4, 3, 1)\n-    >>> np.atleast_3d(x).base is x\n+    >>> np.atleast_3d(x).base is x.base  # x is a reshape, so not base itself\n     True\n \n     >>> for arr in np.atleast_3d([1, 2], [[1, 2]], [[[1, 2]]]):"
    },
    {
        "commit_id": "6d04b385a6ed2c4a39904f762450b0b07486ae8e",
        "commit_message": "Merge pull request #7976 from madphysicist/patch-1\n\nDOC: Fixed documented dimension of return value",
        "commit_url": "https://github.com/numpy/numpy/commit/6d04b385a6ed2c4a39904f762450b0b07486ae8e",
        "buggy_code": "p : ndarray, shape (M,) or (M, K)",
        "fixed_code": "p : ndarray, shape (deg + 1,) or (deg + 1, K)",
        "patch": "@@ -431,7 +431,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n \n     Returns\n     -------\n-    p : ndarray, shape (M,) or (M, K)\n+    p : ndarray, shape (deg + 1,) or (deg + 1, K)\n         Polynomial coefficients, highest power first.  If `y` was 2-D, the\n         coefficients for `k`-th data set are in ``p[:,k]``.\n "
    },
    {
        "commit_id": "54b68dda8b29e3745b6b0da5f1d6a2b53f29e291",
        "commit_message": "BUG: Fixed masked array behavior for scalar inputs to np.ma.atleast_*d",
        "commit_url": "https://github.com/numpy/numpy/commit/54b68dda8b29e3745b6b0da5f1d6a2b53f29e291",
        "buggy_code": ">>> np.atleast_3d(x).base is x",
        "fixed_code": ">>> np.atleast_3d(x).base is x.base  # x is a reshape, so not base itself",
        "patch": "@@ -146,7 +146,7 @@ def atleast_3d(*arys):\n     >>> x = np.arange(12.0).reshape(4,3)\n     >>> np.atleast_3d(x).shape\n     (4, 3, 1)\n-    >>> np.atleast_3d(x).base is x\n+    >>> np.atleast_3d(x).base is x.base  # x is a reshape, so not base itself\n     True\n \n     >>> for arr in np.atleast_3d([1, 2], [[1, 2]], [[[1, 2]]]):"
    },
    {
        "commit_id": "e1f191c46f2eebd6cb892a4bfe14d9dd43a06c4e",
        "commit_message": "Merge pull request #7925 from vallsv/fix-msvccompile-gen-lib-option\n\nMAINT: Monkey-patch _msvccompile.gen_lib_option like any other compilators",
        "commit_url": "https://github.com/numpy/numpy/commit/e1f191c46f2eebd6cb892a4bfe14d9dd43a06c4e",
        "buggy_code": "for _cc in ['msvc9', 'msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:",
        "fixed_code": "for _cc in ['msvc9', 'msvc', '_msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:",
        "patch": "@@ -617,7 +617,7 @@ def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):\n # Also fix up the various compiler modules, which do\n # from distutils.ccompiler import gen_lib_options\n # Don't bother with mwerks, as we don't support Classic Mac.\n-for _cc in ['msvc9', 'msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:\n+for _cc in ['msvc9', 'msvc', '_msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:\n     _m = sys.modules.get('distutils.' + _cc + 'compiler')\n     if _m is not None:\n         setattr(_m, 'gen_lib_options', gen_lib_options)"
    },
    {
        "commit_id": "c14a462fafb92be8c17d5e180f7c2ed986f2eef2",
        "commit_message": "Monkey-patch _msvccompile.gen_lib_option like any other compilators\n\n`setuptools` is now using `_msvccompile` instead of `msvccompile9`.\r\n\r\nnumpy is monkey-patching symmetrically `gen_lib_options` and `spawn` function for all compilators. But `_msvccompile.gen_lib_options` was not monkey-patched while `_msvccompile.spawn` is already monkey-patched throug the super class `ccompiler.spawn`.\r\n\r\nThis patch only symmetrically patch `_msvccompile` to prevent param file quoting.",
        "commit_url": "https://github.com/numpy/numpy/commit/c14a462fafb92be8c17d5e180f7c2ed986f2eef2",
        "buggy_code": "for _cc in ['msvc9', 'msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:",
        "fixed_code": "for _cc in ['msvc9', 'msvc', '_msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:",
        "patch": "@@ -617,7 +617,7 @@ def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):\n # Also fix up the various compiler modules, which do\n # from distutils.ccompiler import gen_lib_options\n # Don't bother with mwerks, as we don't support Classic Mac.\n-for _cc in ['msvc9', 'msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:\n+for _cc in ['msvc9', 'msvc', '_msvc', 'bcpp', 'cygwinc', 'emxc', 'unixc']:\n     _m = sys.modules.get('distutils.' + _cc + 'compiler')\n     if _m is not None:\n         setattr(_m, 'gen_lib_options', gen_lib_options)"
    },
    {
        "commit_id": "ee42d25974471f5873ff05ad13519405a5a5b49d",
        "commit_message": "BUG: modified ndim condition to use masked_array",
        "commit_url": "https://github.com/numpy/numpy/commit/ee42d25974471f5873ff05ad13519405a5a5b49d",
        "buggy_code": "if isinstance(m, np.ndarray) and 2 <= m.ndim:",
        "fixed_code": "if isinstance(m, np.ndarray) and 1 <= m.ndim:",
        "patch": "@@ -630,7 +630,7 @@ def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):\n         m = np.median(getdata(a, subok=True), axis=axis,\n                       out=out, overwrite_input=overwrite_input,\n                       keepdims=keepdims)\n-        if isinstance(m, np.ndarray) and 2 <= m.ndim:\n+        if isinstance(m, np.ndarray) and 1 <= m.ndim:\n             return masked_array(m, copy=False)\n         else:\n             return m"
    },
    {
        "commit_id": "bc744c52bb36a598aabee5eaffc0b7729feaa040",
        "commit_message": "Merge pull request #7879 from dunneff/patch-1\n\nDOC: fix typo in documentation of loadtxt (closes #7878)",
        "commit_url": "https://github.com/numpy/numpy/commit/bc744c52bb36a598aabee5eaffc0b7729feaa040",
        "buggy_code": "third column the same way as `usecols = (3,)`` would.",
        "fixed_code": "fourth column the same way as `usecols = (3,)`` would.",
        "patch": "@@ -751,7 +751,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n \n         Also when a single column has to be read it is possible to use\n         an integer instead of a tuple. E.g ``usecols = 3`` reads the\n-        third column the same way as `usecols = (3,)`` would.\n+        fourth column the same way as `usecols = (3,)`` would.\n \n     unpack : bool, optional\n         If True, the returned array is transposed, so that arguments may be"
    },
    {
        "commit_id": "7d25864a56bb8fb53face5cf1ad0721795e03a02",
        "commit_message": "DOC: fix typo in documentation of loadtxt (closes #7878)",
        "commit_url": "https://github.com/numpy/numpy/commit/7d25864a56bb8fb53face5cf1ad0721795e03a02",
        "buggy_code": "third column the same way as `usecols = (3,)`` would.",
        "fixed_code": "fourth column the same way as `usecols = (3,)`` would.",
        "patch": "@@ -751,7 +751,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n \n         Also when a single column has to be read it is possible to use\n         an integer instead of a tuple. E.g ``usecols = 3`` reads the\n-        third column the same way as `usecols = (3,)`` would.\n+        fourth column the same way as `usecols = (3,)`` would.\n \n     unpack : bool, optional\n         If True, the returned array is transposed, so that arguments may be"
    },
    {
        "commit_id": "3a94389f5c76a8ea45f160582681aaa3e7eef0e1",
        "commit_message": "Merge pull request #7842 from stefanv/versionadded_typos\n\nFix versionadded tags",
        "commit_url": "https://github.com/numpy/numpy/commit/3a94389f5c76a8ea45f160582681aaa3e7eef0e1",
        "buggy_code": ".. versionadded:: 1.6.0.",
        "fixed_code": ".. versionadded:: 1.6.0",
        "patch": "@@ -1666,7 +1666,7 @@ def slogdet(a):\n     Broadcasting rules apply, see the `numpy.linalg` documentation for\n     details.\n \n-    .. versionadded:: 1.6.0.\n+    .. versionadded:: 1.6.0\n \n     The determinant is computed via LU factorization using the LAPACK\n     routine z/dgetrf."
    },
    {
        "commit_id": "209889c55989ae5cfde6d48503761af33b84e128",
        "commit_message": "Fix versionadded tags",
        "commit_url": "https://github.com/numpy/numpy/commit/209889c55989ae5cfde6d48503761af33b84e128",
        "buggy_code": ".. versionadded:: 1.6.0.",
        "fixed_code": ".. versionadded:: 1.6.0",
        "patch": "@@ -1666,7 +1666,7 @@ def slogdet(a):\n     Broadcasting rules apply, see the `numpy.linalg` documentation for\n     details.\n \n-    .. versionadded:: 1.6.0.\n+    .. versionadded:: 1.6.0\n \n     The determinant is computed via LU factorization using the LAPACK\n     routine z/dgetrf."
    },
    {
        "commit_id": "8ff38bc0b8cd98fd63fbdcc7035852e2ff2e20d2",
        "commit_message": "Merge pull request #7807 from madphysicist/patch-1\n\nDOC: Misplaced parens in formula",
        "commit_url": "https://github.com/numpy/numpy/commit/8ff38bc0b8cd98fd63fbdcc7035852e2ff2e20d2",
        "buggy_code": "\\log_{2}(1 + \\frac{|g_1|}{\\sigma_{g_1})}",
        "fixed_code": "\\log_{2}(1 + \\frac{|g_1|}{\\sigma_{g_1}})",
        "patch": "@@ -592,7 +592,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n \n     'Doane'\n         .. math:: n_h = 1 + \\log_{2}(n) +\n-                        \\log_{2}(1 + \\frac{|g_1|}{\\sigma_{g_1})}\n+                        \\log_{2}(1 + \\frac{|g_1|}{\\sigma_{g_1}})\n \n             g_1 = mean[(\\frac{x - \\mu}{\\sigma})^3]\n "
    },
    {
        "commit_id": "b2d4951f858881c5dd06968330ce36d87b9c609b",
        "commit_message": "Merge pull request #7773 from pooya/patch-1\n\nDOC: Remove a redundant the",
        "commit_url": "https://github.com/numpy/numpy/commit/b2d4951f858881c5dd06968330ce36d87b9c609b",
        "buggy_code": "the methods and attributes of an array.",
        "fixed_code": "methods and attributes of an array.",
        "patch": "@@ -2442,7 +2442,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     a low-level method (`ndarray(...)`) for instantiating an array.\n \n     For more information, refer to the `numpy` module and examine the\n-    the methods and attributes of an array.\n+    methods and attributes of an array.\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "a348cc7aed675e97dd60b7f145ede7916b0c1f42",
        "commit_message": "Merge pull request #7766 from Tiksagol/Tiksagol-patch-1\n\nfix an English typo",
        "commit_url": "https://github.com/numpy/numpy/commit/a348cc7aed675e97dd60b7f145ede7916b0c1f42",
        "buggy_code": "asttribute for a shared-library function.   It constructs a numpy",
        "fixed_code": "attribute for a shared-library function.   It constructs a numpy",
        "patch": "@@ -178,7 +178,7 @@ class _ndptr(_ndptr_base):\n \n     def _check_retval_(self):\n         \"\"\"This method is called when this class is used as the .restype\n-        asttribute for a shared-library function.   It constructs a numpy\n+        attribute for a shared-library function.   It constructs a numpy\n         array from a void pointer.\"\"\"\n         return array(self)\n "
    },
    {
        "commit_id": "af4ad9f368ac14a2745a7440b8ed8b25b6286245",
        "commit_message": "fix an English typo",
        "commit_url": "https://github.com/numpy/numpy/commit/af4ad9f368ac14a2745a7440b8ed8b25b6286245",
        "buggy_code": "asttribute for a shared-library function.   It constructs a numpy",
        "fixed_code": "attribute for a shared-library function.   It constructs a numpy",
        "patch": "@@ -178,7 +178,7 @@ class _ndptr(_ndptr_base):\n \n     def _check_retval_(self):\n         \"\"\"This method is called when this class is used as the .restype\n-        asttribute for a shared-library function.   It constructs a numpy\n+        attribute for a shared-library function.   It constructs a numpy\n         array from a void pointer.\"\"\"\n         return array(self)\n "
    },
    {
        "commit_id": "690a5ed78bca568b6e1dce54678273b225db6c8a",
        "commit_message": "Merge pull request #7729 from bertrand-l/savetext_doc_typo\n\nDOC: fix typo in savetxt docstring (closes #7620)",
        "commit_url": "https://github.com/numpy/numpy/commit/690a5ed78bca568b6e1dce54678273b225db6c8a",
        "buggy_code": "`' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns",
        "fixed_code": "`' %.4e %+.4ej %.4e %+.4ej %.4e %+.4ej'` for 3 columns",
        "patch": "@@ -1041,7 +1041,7 @@ def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='',\n             a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted\n                 like `' (%s+%sj)' % (fmt, fmt)`\n             b) a full string specifying every real and imaginary part, e.g.\n-                `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns\n+                `' %.4e %+.4ej %.4e %+.4ej %.4e %+.4ej'` for 3 columns\n             c) a list of specifiers, one per column - in this case, the real\n                 and imaginary part must have separate specifiers,\n                 e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns"
    },
    {
        "commit_id": "1aaf99a31835beacd49ced62a7d02120e6942522",
        "commit_message": "DOC: fix typo in savetxt docstring (closes #7620)",
        "commit_url": "https://github.com/numpy/numpy/commit/1aaf99a31835beacd49ced62a7d02120e6942522",
        "buggy_code": "`' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns",
        "fixed_code": "`' %.4e %+.4ej %.4e %+.4ej %.4e %+.4ej'` for 3 columns",
        "patch": "@@ -1041,7 +1041,7 @@ def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='',\n             a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted\n                 like `' (%s+%sj)' % (fmt, fmt)`\n             b) a full string specifying every real and imaginary part, e.g.\n-                `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns\n+                `' %.4e %+.4ej %.4e %+.4ej %.4e %+.4ej'` for 3 columns\n             c) a list of specifiers, one per column - in this case, the real\n                 and imaginary part must have separate specifiers,\n                 e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns"
    },
    {
        "commit_id": "945c308e96fb815729e8f8aeb0ad6b39b8bdf84a",
        "commit_message": "Merge pull request #6430 from embray/issue-473\n\nFix issues with zero-width string fields",
        "commit_url": "https://github.com/numpy/numpy/commit/945c308e96fb815729e8f8aeb0ad6b39b8bdf84a",
        "buggy_code": "if self.dtype.type is not record:",
        "fixed_code": "if self.dtype.type is not record and self.dtype.fields:",
        "patch": "@@ -424,7 +424,7 @@ def __new__(subtype, shape, dtype=None, buf=None, offset=0, strides=None,\n         return self\n \n     def __array_finalize__(self, obj):\n-        if self.dtype.type is not record:\n+        if self.dtype.type is not record and self.dtype.fields:\n             # if self.dtype is not np.record, invoke __setattr__ which will\n             # convert it to a record if it is a void dtype.\n             self.dtype = self.dtype"
    },
    {
        "commit_id": "0bf907ac5ed0d3c3917cd55d0511633ea8feb8f3",
        "commit_message": "BUG: Fix numerous bugs related to zero-width string arrays (#473, #1901, #2196, #2585, #4955)\n\nPyArray_NewFromDescr normally does not allow zero-width string dtypes (or rather, it automatically converts them to 1-width strings).  This affects any code that uses PyArray_NewFromDescr, which is a lot.  So we extend PyArray_NewFromDescr_int to allow disabling this functionality in a couple narrow cases where it's appropriate--one is when extracting a field from a structured array that has a zero-width string dtype (which, intentionally or not, has been allowed).  The other, which is related, is returning a view of an array that has a zero-width string dtype.  This shouldn't otherwise break or change any existing behavior.\n\nRemove roadblocks to creating structured dtypes with zero-width fields using dict-based constructors (this was possible by other means such as the list-based constructor--with the previous fix in particular it should not be necessary to block this anymore).\n\nAdds tests based on the tests cases given in the issues this is fixing.\n\nFix a bug with array to zero-width array assignment revealed by the tests.  I am slightly concerned that the blunt-force check for this in raw_array_assign_array may be masking a bug somewhere else though.",
        "commit_url": "https://github.com/numpy/numpy/commit/0bf907ac5ed0d3c3917cd55d0511633ea8feb8f3",
        "buggy_code": "if self.dtype.type is not record:",
        "fixed_code": "if self.dtype.type is not record and self.dtype.fields:",
        "patch": "@@ -424,7 +424,7 @@ def __new__(subtype, shape, dtype=None, buf=None, offset=0, strides=None,\n         return self\n \n     def __array_finalize__(self, obj):\n-        if self.dtype.type is not record:\n+        if self.dtype.type is not record and self.dtype.fields:\n             # if self.dtype is not np.record, invoke __setattr__ which will\n             # convert it to a record if it is a void dtype.\n             self.dtype = self.dtype"
    },
    {
        "commit_id": "a0e778177e17347f0bdf309ea2fb29e2dc3e0bf4",
        "commit_message": "do not check the module.__dict__ type explicity\nThis patch is for Pyston compatibility. In Pyston, the type of module.__dict__\nis attrwrapper, which is a dict like type. The test in here is not really care\nfor particular type, but instead cares for particular behaviour. So change the\nexpilit type check to a interface check. This check can also get passed in CPython and PyPy",
        "commit_url": "https://github.com/numpy/numpy/commit/a0e778177e17347f0bdf309ea2fb29e2dc3e0bf4",
        "buggy_code": "assert_(isinstance(builtins, dict))",
        "fixed_code": "assert_(hasattr(builtins, 'get'))",
        "patch": "@@ -64,7 +64,7 @@ def test_array_array():\n                      np.ones((), dtype=U5))\n \n     builtins = getattr(__builtins__, '__dict__', __builtins__)\n-    assert_(isinstance(builtins, dict))\n+    assert_(hasattr(builtins, 'get'))\n \n     # test buffer\n     _buffer = builtins.get(\"buffer\")"
    },
    {
        "commit_id": "e209a18b0121fca361e6cb186076c61de4b50f3a",
        "commit_message": "Merge pull request #7626 from endolith/patch-1\n\nDOC: RST definition list fixes",
        "commit_url": "https://github.com/numpy/numpy/commit/e209a18b0121fca361e6cb186076c61de4b50f3a",
        "buggy_code": "axis: integer",
        "fixed_code": "axis : integer",
        "patch": "@@ -57,7 +57,7 @@ def flip(m, axis):\n     ----------\n     m : array_like\n         Input array.\n-    axis: integer\n+    axis : integer\n         Axis in array, which entries are reversed.\n \n "
    },
    {
        "commit_id": "e209a18b0121fca361e6cb186076c61de4b50f3a",
        "commit_message": "Merge pull request #7626 from endolith/patch-1\n\nDOC: RST definition list fixes",
        "commit_url": "https://github.com/numpy/numpy/commit/e209a18b0121fca361e6cb186076c61de4b50f3a",
        "buggy_code": "residuals, rank, singular_values, rcond :",
        "fixed_code": "residuals, rank, singular_values, rcond",
        "patch": "@@ -439,7 +439,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n         Polynomial coefficients, highest power first.  If `y` was 2-D, the\n         coefficients for `k`-th data set are in ``p[:,k]``.\n \n-    residuals, rank, singular_values, rcond :\n+    residuals, rank, singular_values, rcond\n         Present only if `full` = True.  Residuals of the least-squares fit,\n         the effective rank of the scaled Vandermonde coefficient matrix,\n         its singular values, and the specified value of `rcond`. For more"
    },
    {
        "commit_id": "eb8913d1a39e09b739a6e9449dc841a52ecbac37",
        "commit_message": "DOC: Fix some incorrect RST definition lists",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8913d1a39e09b739a6e9449dc841a52ecbac37",
        "buggy_code": "axis: integer",
        "fixed_code": "axis : integer",
        "patch": "@@ -57,7 +57,7 @@ def flip(m, axis):\n     ----------\n     m : array_like\n         Input array.\n-    axis: integer\n+    axis : integer\n         Axis in array, which entries are reversed.\n \n "
    },
    {
        "commit_id": "eb8913d1a39e09b739a6e9449dc841a52ecbac37",
        "commit_message": "DOC: Fix some incorrect RST definition lists",
        "commit_url": "https://github.com/numpy/numpy/commit/eb8913d1a39e09b739a6e9449dc841a52ecbac37",
        "buggy_code": "residuals, rank, singular_values, rcond :",
        "fixed_code": "residuals, rank, singular_values, rcond",
        "patch": "@@ -439,7 +439,7 @@ def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n         Polynomial coefficients, highest power first.  If `y` was 2-D, the\n         coefficients for `k`-th data set are in ``p[:,k]``.\n \n-    residuals, rank, singular_values, rcond :\n+    residuals, rank, singular_values, rcond\n         Present only if `full` = True.  Residuals of the least-squares fit,\n         the effective rank of the scaled Vandermonde coefficient matrix,\n         its singular values, and the specified value of `rcond`. For more"
    },
    {
        "commit_id": "1b6bc8b2aa14bd228388568a95e6014578de77ad",
        "commit_message": "Merge pull request #7609 from eric-wieser/patch-4\n\nBUG: Fix TypeError when raising TypeError",
        "commit_url": "https://github.com/numpy/numpy/commit/1b6bc8b2aa14bd228388568a95e6014578de77ad",
        "buggy_code": "'argument {}'.format(kwargs.pop()))",
        "fixed_code": "'argument {!r}'.format(kwargs.keys()[0]))",
        "patch": "@@ -244,7 +244,7 @@ def broadcast_arrays(*args, **kwargs):\n     subok = kwargs.pop('subok', False)\n     if kwargs:\n         raise TypeError('broadcast_arrays() got an unexpected keyword '\n-                        'argument {}'.format(kwargs.pop()))\n+                        'argument {!r}'.format(kwargs.keys()[0]))\n     args = [np.array(_m, copy=False, subok=subok) for _m in args]\n \n     shape = _broadcast_shape(*args)"
    },
    {
        "commit_id": "da668fc74653e5caae9f741461c4d20f9df6e5c1",
        "commit_message": "BUG: Cast size to int64 when loading from archive\n\nPrevents overflow errors for large arrays on systems\nwhere the default int type is int32.",
        "commit_url": "https://github.com/numpy/numpy/commit/da668fc74653e5caae9f741461c4d20f9df6e5c1",
        "buggy_code": "count = numpy.multiply.reduce(shape)",
        "fixed_code": "count = numpy.multiply.reduce(shape, dtype=numpy.int64)",
        "patch": "@@ -623,7 +623,7 @@ def read_array(fp, allow_pickle=True, pickle_kwargs=None):\n     if len(shape) == 0:\n         count = 1\n     else:\n-        count = numpy.multiply.reduce(shape)\n+        count = numpy.multiply.reduce(shape, dtype=numpy.int64)\n \n     # Now read the actual data.\n     if dtype.hasobject:"
    },
    {
        "commit_id": "8894b81b166f6b0c200dde77a70fb360e95b0f7c",
        "commit_message": "BUG: Fix TypeError when raising TypeError\n\nFixes \"TypeError: pop expected at least 1 arguments, got 0\"",
        "commit_url": "https://github.com/numpy/numpy/commit/8894b81b166f6b0c200dde77a70fb360e95b0f7c",
        "buggy_code": "'argument {}'.format(kwargs.pop()))",
        "fixed_code": "'argument {!r}'.format(kwargs.keys()[0]))",
        "patch": "@@ -244,7 +244,7 @@ def broadcast_arrays(*args, **kwargs):\n     subok = kwargs.pop('subok', False)\n     if kwargs:\n         raise TypeError('broadcast_arrays() got an unexpected keyword '\n-                        'argument {}'.format(kwargs.pop()))\n+                        'argument {!r}'.format(kwargs.keys()[0]))\n     args = [np.array(_m, copy=False, subok=subok) for _m in args]\n \n     shape = _broadcast_shape(*args)"
    },
    {
        "commit_id": "104501e39e4a68d98ff96bf3a4eae8f17e632609",
        "commit_message": "Merge pull request #7522 from splendido/patch-1\n\nFixed iteration over additional bad commands",
        "commit_url": "https://github.com/numpy/numpy/commit/104501e39e4a68d98ff96bf3a4eae8f17e632609",
        "buggy_code": "for commands in ('upload_docs', 'easy_install', 'bdist', 'bdist_dumb',",
        "fixed_code": "for command in ('upload_docs', 'easy_install', 'bdist', 'bdist_dumb',",
        "patch": "@@ -317,7 +317,7 @@ def parse_setuppy_commands():\n         flake8=\"`setup.py flake8` is not supported, use flake8 standalone\",\n         )\n     bad_commands['nosetests'] = bad_commands['test']\n-    for commands in ('upload_docs', 'easy_install', 'bdist', 'bdist_dumb',\n+    for command in ('upload_docs', 'easy_install', 'bdist', 'bdist_dumb',\n                      'register', 'check', 'install_data', 'install_headers',\n                      'install_lib', 'install_scripts', ):\n         bad_commands[command] = \"`setup.py %s` is not supported\" % command"
    },
    {
        "commit_id": "bcbed877f42ed6e9b01b2125134db4b6395f1d9d",
        "commit_message": "BUG: Add bytes to numpy.sctypes in Python 3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bcbed877f42ed6e9b01b2125134db4b6395f1d9d",
        "buggy_code": "'others':[bool, object, str, unicode, void]}",
        "fixed_code": "'others':[bool, object, bytes, unicode, void]}",
        "patch": "@@ -438,7 +438,7 @@ def _construct_char_code_lookup():\n            'uint':[],\n            'float':[],\n            'complex':[],\n-           'others':[bool, object, str, unicode, void]}\n+           'others':[bool, object, bytes, unicode, void]}\n \n def _add_array_type(typename, bits):\n     try:"
    },
    {
        "commit_id": "9fba2cb5ebddd4790be60801aa0aa62027fbfd02",
        "commit_message": "Faster real_if_close.\n\nBecause of the complexity of `allclose`, `real_if_close(t)` used to be\n~2.5-3x slower than, say, `t + t`.  This patch makes it approximately as\nfast.",
        "commit_url": "https://github.com/numpy/numpy/commit/9fba2cb5ebddd4790be60801aa0aa62027fbfd02",
        "buggy_code": "if _nx.allclose(a.imag, 0, atol=tol):",
        "fixed_code": "if _nx.all(_nx.absolute(a.imag) < tol):",
        "patch": "@@ -424,7 +424,7 @@ def real_if_close(a,tol=100):\n         from numpy.core import getlimits\n         f = getlimits.finfo(a.dtype.type)\n         tol = f.eps * tol\n-    if _nx.allclose(a.imag, 0, atol=tol):\n+    if _nx.all(_nx.absolute(a.imag) < tol):\n         a = a.real\n     return a\n "
    },
    {
        "commit_id": "fdfc4807cbe2de71f74053c45ae0de383332c4e1",
        "commit_message": "Merge pull request #7423 from madphysicist/hist-range\n\nBUG: Ongoing fixes to PR#7416",
        "commit_url": "https://github.com/numpy/numpy/commit/fdfc4807cbe2de71f74053c45ae0de383332c4e1",
        "buggy_code": "return x.ptp() / np.ceil(np.log2(x.size) + 1.0)",
        "fixed_code": "return x.ptp() / (np.log2(x.size) + 1.0)",
        "patch": "@@ -187,7 +187,7 @@ def _hist_bin_sturges(x):\n     -------\n     h : An estimate of the optimal bin width for the given data.\n     \"\"\"\n-    return x.ptp() / np.ceil(np.log2(x.size) + 1.0)\n+    return x.ptp() / (np.log2(x.size) + 1.0)\n \n \n def _hist_bin_rice(x):"
    },
    {
        "commit_id": "fdfc4807cbe2de71f74053c45ae0de383332c4e1",
        "commit_message": "Merge pull request #7423 from madphysicist/hist-range\n\nBUG: Ongoing fixes to PR#7416",
        "commit_url": "https://github.com/numpy/numpy/commit/fdfc4807cbe2de71f74053c45ae0de383332c4e1",
        "buggy_code": "5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 28, 'auto': 33}}",
        "fixed_code": "5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 27, 'auto': 33}}",
        "patch": "@@ -1512,7 +1512,7 @@ def test_simple_range(self):\n         # some basic sanity checking, with some fixed data. Checking for the correct number of bins\n         basic_test = {50:   {'fd': 8,  'scott': 8,  'rice': 15, 'sturges': 14, 'auto': 14},\n                       500:  {'fd': 15, 'scott': 16, 'rice': 32, 'sturges': 20, 'auto': 20},\n-                      5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 28, 'auto': 33}}\n+                      5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 27, 'auto': 33}}\n \n         for testlen, expectedResults in basic_test.items():\n             # create some sort of non uniform data to test with (3 peak uniform mixture)"
    },
    {
        "commit_id": "434c4ecbe010c0bacf7f93cdf761ca015eeae3fb",
        "commit_message": "BUG: Ongoing fixes to PR#7416\n\nRemoved superfluous `ceil` call in automated bin width estimator.\nUpdated tests to reflect modified estimator.",
        "commit_url": "https://github.com/numpy/numpy/commit/434c4ecbe010c0bacf7f93cdf761ca015eeae3fb",
        "buggy_code": "return x.ptp() / np.ceil(np.log2(x.size) + 1.0)",
        "fixed_code": "return x.ptp() / (np.log2(x.size) + 1.0)",
        "patch": "@@ -187,7 +187,7 @@ def _hist_bin_sturges(x):\n     -------\n     h : An estimate of the optimal bin width for the given data.\n     \"\"\"\n-    return x.ptp() / np.ceil(np.log2(x.size) + 1.0)\n+    return x.ptp() / (np.log2(x.size) + 1.0)\n \n \n def _hist_bin_rice(x):"
    },
    {
        "commit_id": "434c4ecbe010c0bacf7f93cdf761ca015eeae3fb",
        "commit_message": "BUG: Ongoing fixes to PR#7416\n\nRemoved superfluous `ceil` call in automated bin width estimator.\nUpdated tests to reflect modified estimator.",
        "commit_url": "https://github.com/numpy/numpy/commit/434c4ecbe010c0bacf7f93cdf761ca015eeae3fb",
        "buggy_code": "5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 28, 'auto': 33}}",
        "fixed_code": "5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 27, 'auto': 33}}",
        "patch": "@@ -1512,7 +1512,7 @@ def test_simple_range(self):\n         # some basic sanity checking, with some fixed data. Checking for the correct number of bins\n         basic_test = {50:   {'fd': 8,  'scott': 8,  'rice': 15, 'sturges': 14, 'auto': 14},\n                       500:  {'fd': 15, 'scott': 16, 'rice': 32, 'sturges': 20, 'auto': 20},\n-                      5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 28, 'auto': 33}}\n+                      5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 27, 'auto': 33}}\n \n         for testlen, expectedResults in basic_test.items():\n             # create some sort of non uniform data to test with (3 peak uniform mixture)"
    },
    {
        "commit_id": "e034b86d1f40af6e15a829d093232febd4a708c3",
        "commit_message": "Merge pull request #7418 from jtpio/hermefit-typo-fix\n\nDOC: Minor typo fix, hermefik -> hermefit.",
        "commit_url": "https://github.com/numpy/numpy/commit/e034b86d1f40af6e15a829d093232febd4a708c3",
        "buggy_code": ">>> from numpy.polynomial.hermite_e import hermefik, hermeval",
        "fixed_code": ">>> from numpy.polynomial.hermite_e import hermefit, hermeval",
        "patch": "@@ -1478,7 +1478,7 @@ def hermefit(x, y, deg, rcond=None, full=False, w=None):\n \n     Examples\n     --------\n-    >>> from numpy.polynomial.hermite_e import hermefik, hermeval\n+    >>> from numpy.polynomial.hermite_e import hermefit, hermeval\n     >>> x = np.linspace(-10, 10)\n     >>> err = np.random.randn(len(x))/10\n     >>> y = hermeval(x, [1, 2, 3]) + err"
    },
    {
        "commit_id": "7ab13f537e80f564f3974463877f54c152616d76",
        "commit_message": "DOC: Minor typo fix, hermefik -> hermefit.",
        "commit_url": "https://github.com/numpy/numpy/commit/7ab13f537e80f564f3974463877f54c152616d76",
        "buggy_code": ">>> from numpy.polynomial.hermite_e import hermefik, hermeval",
        "fixed_code": ">>> from numpy.polynomial.hermite_e import hermefit, hermeval",
        "patch": "@@ -1478,7 +1478,7 @@ def hermefit(x, y, deg, rcond=None, full=False, w=None):\n \n     Examples\n     --------\n-    >>> from numpy.polynomial.hermite_e import hermefik, hermeval\n+    >>> from numpy.polynomial.hermite_e import hermefit, hermeval\n     >>> x = np.linspace(-10, 10)\n     >>> err = np.random.randn(len(x))/10\n     >>> y = hermeval(x, [1, 2, 3]) + err"
    },
    {
        "commit_id": "196c3377df3ce1999247556e76c69420e54a3afd",
        "commit_message": "Merge pull request #7398 from samuelstjean/patch-1\n\nDOC: fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/196c3377df3ce1999247556e76c69420e54a3afd",
        "buggy_code": "\"\"\"Returns the shape of the ararys that would result from broadcasting the",
        "fixed_code": "\"\"\"Returns the shape of the arrays that would result from broadcasting the",
        "patch": "@@ -175,7 +175,7 @@ def broadcast_to(array, shape, subok=False):\n \n \n def _broadcast_shape(*args):\n-    \"\"\"Returns the shape of the ararys that would result from broadcasting the\n+    \"\"\"Returns the shape of the arrays that would result from broadcasting the\n     supplied arrays against each other.\n     \"\"\"\n     if not args:"
    },
    {
        "commit_id": "d46d7beec5dd9f0f1bf5728451a38c0655751053",
        "commit_message": "DOC: fix typo\n\nFound this while reading a docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/d46d7beec5dd9f0f1bf5728451a38c0655751053",
        "buggy_code": "\"\"\"Returns the shape of the ararys that would result from broadcasting the",
        "fixed_code": "\"\"\"Returns the shape of the arrays that would result from broadcasting the",
        "patch": "@@ -175,7 +175,7 @@ def broadcast_to(array, shape, subok=False):\n \n \n def _broadcast_shape(*args):\n-    \"\"\"Returns the shape of the ararys that would result from broadcasting the\n+    \"\"\"Returns the shape of the arrays that would result from broadcasting the\n     supplied arrays against each other.\n     \"\"\"\n     if not args:"
    },
    {
        "commit_id": "df3ed28a6d8410e383f79d8ecb670722b8f5c5c9",
        "commit_message": "BUG: Give bitwise_xor an identity.\n\nThe identity for bitwise_xor is zero.",
        "commit_url": "https://github.com/numpy/numpy/commit/df3ed28a6d8410e383f79d8ecb670722b8f5c5c9",
        "buggy_code": "Ufunc(2, 1, None,",
        "fixed_code": "Ufunc(2, 1, Zero,",
        "patch": "@@ -507,7 +507,7 @@ def english_upper(s):\n           TD(O, f='PyNumber_Or'),\n           ),\n 'bitwise_xor':\n-    Ufunc(2, 1, None,\n+    Ufunc(2, 1, Zero,\n           docstrings.get('numpy.core.umath.bitwise_xor'),\n           None,\n           TD(bints),"
    },
    {
        "commit_id": "3fdf3270e6f47e65d8a8b4d995fc21f9b64650ee",
        "commit_message": "BUG: np.irr should return NaN if there are no real solutions",
        "commit_url": "https://github.com/numpy/numpy/commit/3fdf3270e6f47e65d8a8b4d995fc21f9b64650ee",
        "buggy_code": "if res.size == 0:",
        "fixed_code": "if not mask.any():",
        "patch": "@@ -651,7 +651,7 @@ def irr(values):\n     \"\"\"\n     res = np.roots(values[::-1])\n     mask = (res.imag == 0) & (res.real > 0)\n-    if res.size == 0:\n+    if not mask.any():\n         return np.nan\n     res = res[mask].real\n     # NPV(rate) = 0 can have more than one solution so we return"
    },
    {
        "commit_id": "e90e254a916610d2576fa5c2e1627b1d8d530d20",
        "commit_message": "Merge pull request #7358 from chiffa/master\n\nBUG: pull request related to the issue #7353",
        "commit_url": "https://github.com/numpy/numpy/commit/e90e254a916610d2576fa5c2e1627b1d8d530d20",
        "buggy_code": "arr = shape",
        "fixed_code": "pass",
        "patch": "@@ -1052,7 +1052,7 @@ def _normalize_shape(ndarray, shape, cast_to_int=True):\n             arr = arr.repeat(2, axis=1)\n         elif arr.shape[0] == ndims:\n             # Input correctly formatted, pass it on as `arr`\n-            arr = shape\n+            pass\n         else:\n             fmt = \"Unable to create correctly shaped tuple from %s\"\n             raise ValueError(fmt % (shape,))"
    },
    {
        "commit_id": "3db32cb133e858e48596de29f5693633a7b4dcc4",
        "commit_message": "BUG: constant padding expected wrong type in constant_values\n\nConstant padding on 4 sides of a 2d array expected a numpy ndarray, and not a ndarray like (tuple, list, ...)\nDetailed description is in the issue  #7353",
        "commit_url": "https://github.com/numpy/numpy/commit/3db32cb133e858e48596de29f5693633a7b4dcc4",
        "buggy_code": "arr = shape",
        "fixed_code": "pass",
        "patch": "@@ -1052,7 +1052,7 @@ def _normalize_shape(ndarray, shape, cast_to_int=True):\n             arr = arr.repeat(2, axis=1)\n         elif arr.shape[0] == ndims:\n             # Input correctly formatted, pass it on as `arr`\n-            arr = shape\n+            pass\n         else:\n             fmt = \"Unable to create correctly shaped tuple from %s\"\n             raise ValueError(fmt % (shape,))"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "significanly contributes to numpy import times. Importing this copy has almost",
        "fixed_code": "significantly contributes to numpy import times. Importing this copy has almost",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"Subset of inspect module from upstream python\n \n We use this instead of upstream because upstream inspect is slow to import, and\n-significanly contributes to numpy import times. Importing this copy has almost\n+significantly contributes to numpy import times. Importing this copy has almost\n no overhead.\n \n \"\"\""
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "\"\"\"Substitute any occurence of @foo@ by d['foo'] from source file into",
        "fixed_code": "\"\"\"Substitute any occurrence of @foo@ by d['foo'] from source file into",
        "patch": "@@ -24,7 +24,7 @@\n from numpy.distutils.conv_template import process_file as process_c_file\n \n def subst_vars(target, source, d):\n-    \"\"\"Substitute any occurence of @foo@ by d['foo'] from source file into\n+    \"\"\"Substitute any occurrence of @foo@ by d['foo'] from source file into\n     target.\"\"\"\n     var = re.compile('@([a-zA-Z_]+)@')\n     fs = open(source, 'r')"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "available sections are fftw, atlas, and x11. Appropiate defaults are",
        "fixed_code": "available sections are fftw, atlas, and x11. Appropriate defaults are",
        "patch": "@@ -72,7 +72,7 @@\n The first one found is used to get system configuration options The\n format is that used by ConfigParser (i.e., Windows .INI style). The\n section ALL has options that are the default for each section. The\n-available sections are fftw, atlas, and x11. Appropiate defaults are\n+available sections are fftw, atlas, and x11. Appropriate defaults are\n used if nothing is specified.\n \n The order of finding the locations of resources is the following:"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "interprets the undelying data as being in a different byte order.",
        "fixed_code": "interprets the underlying data as being in a different byte order.",
        "patch": "@@ -78,7 +78,7 @@\n underlying memory it is looking at:\n \n * Change the byte-ordering information in the array dtype so that it\n-  interprets the undelying data as being in a different byte order.\n+  interprets the underlying data as being in a different byte order.\n   This is the role of ``arr.newbyteorder()``\n * Change the byte-ordering of the underlying data, leaving the dtype\n   interpretation as it was.  This is what ``arr.byteswap()`` does."
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "It is often used in combintion with ``enumerate``::",
        "fixed_code": "It is often used in combination with ``enumerate``::",
        "patch": "@@ -182,7 +182,7 @@\n          >>> [item**2 for item in x]\n          [1, 4, 9]\n \n-       It is often used in combintion with ``enumerate``::\n+       It is often used in combination with ``enumerate``::\n          >>> keys = ['a','b','c']\n          >>> for n, k in enumerate(keys):\n          ...     print(\"Key %d: %s\" % (n, k))"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "The arguments that ``__array_finalize__`` recieves differ for the three",
        "fixed_code": "The arguments that ``__array_finalize__`` receives differ for the three",
        "patch": "@@ -231,7 +231,7 @@ class other than the class in which it is defined, the ``__init__``\n * For view casting and new-from-template, the equivalent of\n   ``ndarray.__new__(MySubClass,...`` is called, at the C level.\n \n-The arguments that ``__array_finalize__`` recieves differ for the three\n+The arguments that ``__array_finalize__`` receives differ for the three\n methods of instance creation above.\n \n The following code allows us to look at the call sequences and arguments:"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": "\"\"\"Replace dlamch_ calls with appropiate macros\"\"\"",
        "fixed_code": "\"\"\"Replace dlamch_ calls with appropriate macros\"\"\"",
        "patch": "@@ -223,7 +223,7 @@ def OutOfHeader(line):\n     return lines.getValue()\n \n def replaceDlamch(source):\n-    \"\"\"Replace dlamch_ calls with appropiate macros\"\"\"\n+    \"\"\"Replace dlamch_ calls with appropriate macros\"\"\"\n     def repl(m):\n         s = m.group(1)\n         return dict(E='EPSILON', P='PRECISION', S='SAFEMINIMUM',"
    },
    {
        "commit_id": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "commit_message": "Merge pull request #7344 from dongjoon-hyun/fix_typos\n\nDOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/c303c9b77afbc7fe6f4049683c3ccaabdebe7be3",
        "buggy_code": ">>> q # one of the three quarternion units not equal to 1",
        "fixed_code": ">>> q # one of the three quaternion units not equal to 1",
        "patch": "@@ -156,7 +156,7 @@ def matrix_power(M, n):\n     >>> q = np.zeros((4, 4))\n     >>> q[0:2, 0:2] = -i\n     >>> q[2:4, 2:4] = i\n-    >>> q # one of the three quarternion units not equal to 1\n+    >>> q # one of the three quaternion units not equal to 1\n     array([[ 0., -1.,  0.,  0.],\n            [ 1.,  0.,  0.,  0.],\n            [ 0.,  0.,  0.,  1.],"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "significanly contributes to numpy import times. Importing this copy has almost",
        "fixed_code": "significantly contributes to numpy import times. Importing this copy has almost",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"Subset of inspect module from upstream python\n \n We use this instead of upstream because upstream inspect is slow to import, and\n-significanly contributes to numpy import times. Importing this copy has almost\n+significantly contributes to numpy import times. Importing this copy has almost\n no overhead.\n \n \"\"\""
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "\"\"\"Substitute any occurence of @foo@ by d['foo'] from source file into",
        "fixed_code": "\"\"\"Substitute any occurrence of @foo@ by d['foo'] from source file into",
        "patch": "@@ -24,7 +24,7 @@\n from numpy.distutils.conv_template import process_file as process_c_file\n \n def subst_vars(target, source, d):\n-    \"\"\"Substitute any occurence of @foo@ by d['foo'] from source file into\n+    \"\"\"Substitute any occurrence of @foo@ by d['foo'] from source file into\n     target.\"\"\"\n     var = re.compile('@([a-zA-Z_]+)@')\n     fs = open(source, 'r')"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "available sections are fftw, atlas, and x11. Appropiate defaults are",
        "fixed_code": "available sections are fftw, atlas, and x11. Appropriate defaults are",
        "patch": "@@ -72,7 +72,7 @@\n The first one found is used to get system configuration options The\n format is that used by ConfigParser (i.e., Windows .INI style). The\n section ALL has options that are the default for each section. The\n-available sections are fftw, atlas, and x11. Appropiate defaults are\n+available sections are fftw, atlas, and x11. Appropriate defaults are\n used if nothing is specified.\n \n The order of finding the locations of resources is the following:"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "interprets the undelying data as being in a different byte order.",
        "fixed_code": "interprets the underlying data as being in a different byte order.",
        "patch": "@@ -78,7 +78,7 @@\n underlying memory it is looking at:\n \n * Change the byte-ordering information in the array dtype so that it\n-  interprets the undelying data as being in a different byte order.\n+  interprets the underlying data as being in a different byte order.\n   This is the role of ``arr.newbyteorder()``\n * Change the byte-ordering of the underlying data, leaving the dtype\n   interpretation as it was.  This is what ``arr.byteswap()`` does."
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "It is often used in combintion with ``enumerate``::",
        "fixed_code": "It is often used in combination with ``enumerate``::",
        "patch": "@@ -182,7 +182,7 @@\n          >>> [item**2 for item in x]\n          [1, 4, 9]\n \n-       It is often used in combintion with ``enumerate``::\n+       It is often used in combination with ``enumerate``::\n          >>> keys = ['a','b','c']\n          >>> for n, k in enumerate(keys):\n          ...     print(\"Key %d: %s\" % (n, k))"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "The arguments that ``__array_finalize__`` recieves differ for the three",
        "fixed_code": "The arguments that ``__array_finalize__`` receives differ for the three",
        "patch": "@@ -231,7 +231,7 @@ class other than the class in which it is defined, the ``__init__``\n * For view casting and new-from-template, the equivalent of\n   ``ndarray.__new__(MySubClass,...`` is called, at the C level.\n \n-The arguments that ``__array_finalize__`` recieves differ for the three\n+The arguments that ``__array_finalize__`` receives differ for the three\n methods of instance creation above.\n \n The following code allows us to look at the call sequences and arguments:"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": "\"\"\"Replace dlamch_ calls with appropiate macros\"\"\"",
        "fixed_code": "\"\"\"Replace dlamch_ calls with appropriate macros\"\"\"",
        "patch": "@@ -223,7 +223,7 @@ def OutOfHeader(line):\n     return lines.getValue()\n \n def replaceDlamch(source):\n-    \"\"\"Replace dlamch_ calls with appropiate macros\"\"\"\n+    \"\"\"Replace dlamch_ calls with appropriate macros\"\"\"\n     def repl(m):\n         s = m.group(1)\n         return dict(E='EPSILON', P='PRECISION', S='SAFEMINIMUM',"
    },
    {
        "commit_id": "2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "commit_message": "DOC: Fix more typos in docs and comments.",
        "commit_url": "https://github.com/numpy/numpy/commit/2556b9ff1ae621e311053bd5f2b34edb86a8cb68",
        "buggy_code": ">>> q # one of the three quarternion units not equal to 1",
        "fixed_code": ">>> q # one of the three quaternion units not equal to 1",
        "patch": "@@ -156,7 +156,7 @@ def matrix_power(M, n):\n     >>> q = np.zeros((4, 4))\n     >>> q[0:2, 0:2] = -i\n     >>> q[2:4, 2:4] = i\n-    >>> q # one of the three quarternion units not equal to 1\n+    >>> q # one of the three quaternion units not equal to 1\n     array([[ 0., -1.,  0.,  0.],\n            [ 1.,  0.,  0.,  0.],\n            [ 0.,  0.,  0.,  1.],"
    },
    {
        "commit_id": "ade47293e641e64299de45172898ba03e907cb8d",
        "commit_message": "Merge pull request #7311 from udiboy1209/ndpointer_cache\n\n[PATCH] Make _pointer_type_cache functional",
        "commit_url": "https://github.com/numpy/numpy/commit/ade47293e641e64299de45172898ba03e907cb8d",
        "buggy_code": "_pointer_type_cache[dtype] = klass",
        "fixed_code": "_pointer_type_cache[(dtype, shape, ndim, num)] = klass",
        "patch": "@@ -315,7 +315,7 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n                   \"_shape_\" : shape,\n                   \"_ndim_\" : ndim,\n                   \"_flags_\" : num})\n-    _pointer_type_cache[dtype] = klass\n+    _pointer_type_cache[(dtype, shape, ndim, num)] = klass\n     return klass\n \n if ctypes is not None:"
    },
    {
        "commit_id": "141d3a954b955b7f0821574e03b693ec4078640b",
        "commit_message": "[PATCH] Make _pointer_type_cache functional\n\nFix #2303\nCache queries wont miss because the whole tuple is cached as key\nand not just dtype\nAdapted from patch submitted by Colin Hogben",
        "commit_url": "https://github.com/numpy/numpy/commit/141d3a954b955b7f0821574e03b693ec4078640b",
        "buggy_code": "_pointer_type_cache[dtype] = klass",
        "fixed_code": "_pointer_type_cache[(dtype, shape, ndim, num)] = klass",
        "patch": "@@ -315,7 +315,7 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n                   \"_shape_\" : shape,\n                   \"_ndim_\" : ndim,\n                   \"_flags_\" : num})\n-    _pointer_type_cache[dtype] = klass\n+    _pointer_type_cache[(dtype, shape, ndim, num)] = klass\n     return klass\n \n if ctypes is not None:"
    },
    {
        "commit_id": "2f8068c5d566d4e0566018fbbdd41d1f6901000b",
        "commit_message": "Merge pull request #7257 from dongjoon-hyun/fix_mismatched_variable_names_in_docstring\n\nDOC: Fix mismatched variable names in docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/2f8068c5d566d4e0566018fbbdd41d1f6901000b",
        "buggy_code": "libraru_dirs : seq",
        "fixed_code": "library_dirs : seq",
        "patch": "@@ -354,7 +354,7 @@ def check_funcs_once(self, funcs,\n             list of header paths\n         libraries : seq\n             list of libraries to link the code snippet to\n-        libraru_dirs : seq\n+        library_dirs : seq\n             list of library paths\n         decl : dict\n             for every (key, value), the declaration in the value will be"
    },
    {
        "commit_id": "aefc290e8f2232dbad8b6df10e4df81421a1a2b2",
        "commit_message": "DOC: Fix mismatched variable names in docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/aefc290e8f2232dbad8b6df10e4df81421a1a2b2",
        "buggy_code": "libraru_dirs : seq",
        "fixed_code": "library_dirs : seq",
        "patch": "@@ -354,7 +354,7 @@ def check_funcs_once(self, funcs,\n             list of header paths\n         libraries : seq\n             list of libraries to link the code snippet to\n-        libraru_dirs : seq\n+        library_dirs : seq\n             list of library paths\n         decl : dict\n             for every (key, value), the declaration in the value will be"
    },
    {
        "commit_id": "ea9775606c8303a3fd65fdf21a4a02846cef971e",
        "commit_message": "Merge pull request #7129 from madphysicist/percentile-midpoint-interpolation\n\nBUG: Fixed 'midpoint' interpolation of np.percentile in odd cases.",
        "commit_url": "https://github.com/numpy/numpy/commit/ea9775606c8303a3fd65fdf21a4a02846cef971e",
        "buggy_code": "indices = floor(indices) + 0.5",
        "fixed_code": "indices = 0.5 * (floor(indices) + ceil(indices))",
        "patch": "@@ -3543,7 +3543,7 @@ def _percentile(a, q, axis=None, out=None,\n     elif interpolation == 'higher':\n         indices = ceil(indices).astype(intp)\n     elif interpolation == 'midpoint':\n-        indices = floor(indices) + 0.5\n+        indices = 0.5 * (floor(indices) + ceil(indices))\n     elif interpolation == 'nearest':\n         indices = around(indices).astype(intp)\n     elif interpolation == 'linear':"
    },
    {
        "commit_id": "9ec694b69a231a8de43032711c657d253edbed9d",
        "commit_message": "BUG: Fixed 'midpoint' interpolation of np.percentile in odd cases.\n\n'midpoint' must return the same as 'higher' and 'lower' when the two\nare the same, not 'lower' + 0.5 as it was doing.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ec694b69a231a8de43032711c657d253edbed9d",
        "buggy_code": "indices = floor(indices) + 0.5",
        "fixed_code": "indices = 0.5 * (floor(indices) + ceil(indices))",
        "patch": "@@ -3541,7 +3541,7 @@ def _percentile(a, q, axis=None, out=None,\n     elif interpolation == 'higher':\n         indices = ceil(indices).astype(intp)\n     elif interpolation == 'midpoint':\n-        indices = floor(indices) + 0.5\n+        indices = 0.5 * (floor(indices) + ceil(indices))\n     elif interpolation == 'nearest':\n         indices = around(indices).astype(intp)\n     elif interpolation == 'linear':"
    },
    {
        "commit_id": "cacdfd3a65c57516a35293ce976cdb5b47dd7f0e",
        "commit_message": "Merge pull request #7119 from gfyoung/mingw_patch\n\nBUG: Fixed mingw.lib error",
        "commit_url": "https://github.com/numpy/numpy/commit/cacdfd3a65c57516a35293ce976cdb5b47dd7f0e",
        "buggy_code": "path = os.path.join(root, target, \"lib\")",
        "fixed_code": "path = os.path.join(root, \"lib\")",
        "patch": "@@ -313,7 +313,7 @@ def get_library_dirs(self):\n                 if target:\n                     d = os.path.normpath(self.get_libgcc_dir())\n                     root = os.path.join(d, *((os.pardir,)*4))\n-                    path = os.path.join(root, target, \"lib\")\n+                    path = os.path.join(root, \"lib\")\n                     mingwdir = os.path.normpath(path)\n                     if os.path.exists(os.path.join(mingwdir, \"libmingwex.a\")):\n                         opt.append(mingwdir)"
    },
    {
        "commit_id": "3bc8ed46d0fc142efb24ddc6b444332793476819",
        "commit_message": "Merge pull request #7152 from bertrand-l/fix/unicode-kwarg-breaks-pad\n\nBUG: mode kwargs passed as unicode to np.pad raises an exception",
        "commit_url": "https://github.com/numpy/numpy/commit/3bc8ed46d0fc142efb24ddc6b444332793476819",
        "buggy_code": "if isinstance(mode, str):",
        "fixed_code": "if isinstance(mode, np.compat.basestring):",
        "patch": "@@ -1337,7 +1337,7 @@ def pad(array, pad_width, mode, **kwargs):\n         'reflect_type': 'even',\n         }\n \n-    if isinstance(mode, str):\n+    if isinstance(mode, np.compat.basestring):\n         # Make sure have allowed kwargs appropriate for mode\n         for key in kwargs:\n             if key not in allowedkwargs[mode]:"
    },
    {
        "commit_id": "32ae04a43ccd7a3413deb1711796280f8fa69ba0",
        "commit_message": "BUG: mode kwargs passed as unicode to np.pad raises an exception\n\nisinstance(mode, str) is False in python2.7 when mode is of unicode\ntype, and mode is then mistakenly assumed to be a callable. See #7112",
        "commit_url": "https://github.com/numpy/numpy/commit/32ae04a43ccd7a3413deb1711796280f8fa69ba0",
        "buggy_code": "if isinstance(mode, str):",
        "fixed_code": "if isinstance(mode, np.compat.basestring):",
        "patch": "@@ -1337,7 +1337,7 @@ def pad(array, pad_width, mode, **kwargs):\n         'reflect_type': 'even',\n         }\n \n-    if isinstance(mode, str):\n+    if isinstance(mode, np.compat.basestring):\n         # Make sure have allowed kwargs appropriate for mode\n         for key in kwargs:\n             if key not in allowedkwargs[mode]:"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "-   empty                      - Return an unitialized array",
        "fixed_code": "-   empty                      - Return an uninitialized array",
        "patch": "@@ -4,7 +4,7 @@\n \n -   array                      - NumPy Array construction\n -   zeros                      - Return an array of all zeros\n--   empty                      - Return an unitialized array\n+-   empty                      - Return an uninitialized array\n -   shape                      - Return shape of sequence or array\n -   rank                       - Return number of dimensions\n -   size                       - Return number of elements in entire array or a"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "Succesfully tested on:",
        "fixed_code": "Successfully tested on:",
        "patch": "@@ -21,7 +21,7 @@\n \n Requires: Python 2.x\n \n-Succesfully tested on:\n+Successfully tested on:\n \n ========  ============  =================================================\n os.name   sys.platform  comments"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "The number of comma-separeted words in '<..>' will determine the number of",
        "fixed_code": "The number of comma-separated words in '<..>' will determine the number of",
        "patch": "@@ -11,7 +11,7 @@\n   All function and subroutine blocks in a source file with names that\n   contain '<..>' will be replicated according to the rules in '<..>'.\n \n-  The number of comma-separeted words in '<..>' will determine the number of\n+  The number of comma-separated words in '<..>' will determine the number of\n   replicates.\n \n   '<..>' may have two different forms, named and short. For example,"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "Note the the array has not changed in memory:",
        "fixed_code": "Note the array has not changed in memory:",
        "patch": "@@ -108,7 +108,7 @@\n >>> fixed_end_dtype_arr[0]\n 1\n \n-Note the the array has not changed in memory:\n+Note the array has not changed in memory:\n \n >>> fixed_end_dtype_arr.tobytes() == big_end_str\n True"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "New views into arrays mean the the object reference counts for the data buffer",
        "fixed_code": "New views into arrays mean the object reference counts for the data buffer",
        "patch": "@@ -49,7 +49,7 @@\n use of the .copy() method if one really wants to make a new and independent\n copy of the data buffer.\n \n-New views into arrays mean the the object reference counts for the data buffer\n+New views into arrays mean the object reference counts for the data buffer\n increase. Simply doing away with the original array object will not remove the\n data buffer if other views of it still exist.\n "
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "outmess('Succesfully applied user defined changes from .f2py_f2cmap\\n')",
        "fixed_code": "outmess('Successfully applied user defined changes from .f2py_f2cmap\\n')",
        "patch": "@@ -211,7 +211,7 @@\n                 else:\n                     errmess(\"\\tIgnoring map {'%s':{'%s':'%s'}}: '%s' must be in %s\\n\" % (\n                         k, k1, d[k][k1], d[k][k1], list(c2py_map.keys())))\n-        outmess('Succesfully applied user defined changes from .f2py_f2cmap\\n')\n+        outmess('Successfully applied user defined changes from .f2py_f2cmap\\n')\n     except Exception as msg:\n         errmess(\n             'Failed to apply user defined changes from .f2py_f2cmap: %s. Skipping.\\n' % (msg))"
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "reset=1   --- final check if mismatch of blocks occured",
        "fixed_code": "reset=1   --- final check if mismatch of blocks occurred",
        "patch": "@@ -635,7 +635,7 @@ def crackline(line, reset=0):\n     \"\"\"\n     reset=-1  --- initialize\n     reset=0   --- crack the line\n-    reset=1   --- final check if mismatch of blocks occured\n+    reset=1   --- final check if mismatch of blocks occurred\n \n     Cracked data is saved in grouplist[0].\n     \"\"\""
    },
    {
        "commit_id": "e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "commit_message": "Auto merge of #7134 - dongjoon-hyun:fix_typos_in_code_comments, r=njsmith\n\nMAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/e2805398f9a63b825f4a2aab22e9f169ff65aae9",
        "buggy_code": "Return (maximum - minimum) along the the given dimension",
        "fixed_code": "Return (maximum - minimum) along the given dimension",
        "patch": "@@ -5583,7 +5583,7 @@ def max(self, axis=None, out=None, fill_value=None):\n \n     def ptp(self, axis=None, out=None, fill_value=None):\n         \"\"\"\n-        Return (maximum - minimum) along the the given dimension\n+        Return (maximum - minimum) along the given dimension\n         (i.e. peak-to-peak value).\n \n         Parameters"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "-   empty                      - Return an unitialized array",
        "fixed_code": "-   empty                      - Return an uninitialized array",
        "patch": "@@ -4,7 +4,7 @@\n \n -   array                      - NumPy Array construction\n -   zeros                      - Return an array of all zeros\n--   empty                      - Return an unitialized array\n+-   empty                      - Return an uninitialized array\n -   shape                      - Return shape of sequence or array\n -   rank                       - Return number of dimensions\n -   size                       - Return number of elements in entire array or a"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "Succesfully tested on:",
        "fixed_code": "Successfully tested on:",
        "patch": "@@ -21,7 +21,7 @@\n \n Requires: Python 2.x\n \n-Succesfully tested on:\n+Successfully tested on:\n \n ========  ============  =================================================\n os.name   sys.platform  comments"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "The number of comma-separeted words in '<..>' will determine the number of",
        "fixed_code": "The number of comma-separated words in '<..>' will determine the number of",
        "patch": "@@ -11,7 +11,7 @@\n   All function and subroutine blocks in a source file with names that\n   contain '<..>' will be replicated according to the rules in '<..>'.\n \n-  The number of comma-separeted words in '<..>' will determine the number of\n+  The number of comma-separated words in '<..>' will determine the number of\n   replicates.\n \n   '<..>' may have two different forms, named and short. For example,"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "Note the the array has not changed in memory:",
        "fixed_code": "Note the array has not changed in memory:",
        "patch": "@@ -108,7 +108,7 @@\n >>> fixed_end_dtype_arr[0]\n 1\n \n-Note the the array has not changed in memory:\n+Note the array has not changed in memory:\n \n >>> fixed_end_dtype_arr.tobytes() == big_end_str\n True"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "New views into arrays mean the the object reference counts for the data buffer",
        "fixed_code": "New views into arrays mean the object reference counts for the data buffer",
        "patch": "@@ -49,7 +49,7 @@\n use of the .copy() method if one really wants to make a new and independent\n copy of the data buffer.\n \n-New views into arrays mean the the object reference counts for the data buffer\n+New views into arrays mean the object reference counts for the data buffer\n increase. Simply doing away with the original array object will not remove the\n data buffer if other views of it still exist.\n "
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "outmess('Succesfully applied user defined changes from .f2py_f2cmap\\n')",
        "fixed_code": "outmess('Successfully applied user defined changes from .f2py_f2cmap\\n')",
        "patch": "@@ -211,7 +211,7 @@\n                 else:\n                     errmess(\"\\tIgnoring map {'%s':{'%s':'%s'}}: '%s' must be in %s\\n\" % (\n                         k, k1, d[k][k1], d[k][k1], list(c2py_map.keys())))\n-        outmess('Succesfully applied user defined changes from .f2py_f2cmap\\n')\n+        outmess('Successfully applied user defined changes from .f2py_f2cmap\\n')\n     except Exception as msg:\n         errmess(\n             'Failed to apply user defined changes from .f2py_f2cmap: %s. Skipping.\\n' % (msg))"
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "reset=1   --- final check if mismatch of blocks occured",
        "fixed_code": "reset=1   --- final check if mismatch of blocks occurred",
        "patch": "@@ -635,7 +635,7 @@ def crackline(line, reset=0):\n     \"\"\"\n     reset=-1  --- initialize\n     reset=0   --- crack the line\n-    reset=1   --- final check if mismatch of blocks occured\n+    reset=1   --- final check if mismatch of blocks occurred\n \n     Cracked data is saved in grouplist[0].\n     \"\"\""
    },
    {
        "commit_id": "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "commit_message": "MAINT: Fix some typos in a code string and comments",
        "commit_url": "https://github.com/numpy/numpy/commit/73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
        "buggy_code": "Return (maximum - minimum) along the the given dimension",
        "fixed_code": "Return (maximum - minimum) along the given dimension",
        "patch": "@@ -5583,7 +5583,7 @@ def max(self, axis=None, out=None, fill_value=None):\n \n     def ptp(self, axis=None, out=None, fill_value=None):\n         \"\"\"\n-        Return (maximum - minimum) along the the given dimension\n+        Return (maximum - minimum) along the given dimension\n         (i.e. peak-to-peak value).\n \n         Parameters"
    },
    {
        "commit_id": "2b34f4bf652189e0415d5bf48ef7aa3294302871",
        "commit_message": "Merge pull request #7131 from charris/fix-setuptools-sdist\n\nFix setuptools sdist",
        "commit_url": "https://github.com/numpy/numpy/commit/2b34f4bf652189e0415d5bf48ef7aa3294302871",
        "buggy_code": "from setuptools.command.sdist import sdist",
        "fixed_code": "from distutils.command.sdist import sdist",
        "patch": "@@ -188,7 +188,7 @@ def check_submodules():\n             raise ValueError('Submodule not clean: %s' % line)\n \n \n-from setuptools.command.sdist import sdist\n+from distutils.command.sdist import sdist\n class sdist_checked(sdist):\n     \"\"\" check submodules on sdist to prevent incomplete tarballs \"\"\"\n     def run(self):"
    },
    {
        "commit_id": "6770f985b3663338d023dd707d43a6a53f530668",
        "commit_message": "BLD/BUG: revert usage of setuptools when building an sdist.\n\nThis was seriously broken.  Setuptools does unwanted 'smart' things and\nignores MANIFEST.in.  Closes gh-7127.",
        "commit_url": "https://github.com/numpy/numpy/commit/6770f985b3663338d023dd707d43a6a53f530668",
        "buggy_code": "from setuptools.command.sdist import sdist",
        "fixed_code": "from distutils.command.sdist import sdist",
        "patch": "@@ -188,7 +188,7 @@ def check_submodules():\n             raise ValueError('Submodule not clean: %s' % line)\n \n \n-from setuptools.command.sdist import sdist\n+from distutils.command.sdist import sdist\n class sdist_checked(sdist):\n     \"\"\" check submodules on sdist to prevent incomplete tarballs \"\"\"\n     def run(self):"
    },
    {
        "commit_id": "bce84bb6fbfc7d26b209fb38247b64f7faeb739f",
        "commit_message": "BUG: Fixed mingw.lib error\n\nCloses gh-647.",
        "commit_url": "https://github.com/numpy/numpy/commit/bce84bb6fbfc7d26b209fb38247b64f7faeb739f",
        "buggy_code": "path = os.path.join(root, target, \"lib\")",
        "fixed_code": "path = os.path.join(root, \"lib\")",
        "patch": "@@ -313,7 +313,7 @@ def get_library_dirs(self):\n                 if target:\n                     d = os.path.normpath(self.get_libgcc_dir())\n                     root = os.path.join(d, *((os.pardir,)*4))\n-                    path = os.path.join(root, target, \"lib\")\n+                    path = os.path.join(root, \"lib\")\n                     mingwdir = os.path.normpath(path)\n                     if os.path.exists(os.path.join(mingwdir, \"libmingwex.a\")):\n                         opt.append(mingwdir)"
    },
    {
        "commit_id": "43c6a89128347928c5fe26f67ba2a0a022f00822",
        "commit_message": "BUG: Make sure that the `ord=0` case returns a float.",
        "commit_url": "https://github.com/numpy/numpy/commit/43c6a89128347928c5fe26f67ba2a0a022f00822",
        "buggy_code": "return (x != 0).sum(axis=axis, keepdims=keepdims)",
        "fixed_code": "return (x != 0).astype(float).sum(axis=axis, keepdims=keepdims)",
        "patch": "@@ -2150,7 +2150,7 @@ def norm(x, ord=None, axis=None, keepdims=False):\n             return abs(x).min(axis=axis, keepdims=keepdims)\n         elif ord == 0:\n             # Zero norm\n-            return (x != 0).sum(axis=axis, keepdims=keepdims)\n+            return (x != 0).astype(float).sum(axis=axis, keepdims=keepdims)\n         elif ord == 1:\n             # special case for speedup\n             return add.reduce(abs(x), axis=axis, keepdims=keepdims)"
    },
    {
        "commit_id": "947be0f72a47590719e89cf23a6a5972a0cc5f24",
        "commit_message": "Merge pull request #7053 from tushar-rishav/ifft_RAM_requirements\n\nBUG: Should fix astype cast bug in numpy.fft module",
        "commit_url": "https://github.com/numpy/numpy/commit/947be0f72a47590719e89cf23a6a5972a0cc5f24",
        "buggy_code": "a = asarray(a).astype(complex)",
        "fixed_code": "a = asarray(a).astype(complex, copy=False)",
        "patch": "@@ -183,7 +183,7 @@ def fft(a, n=None, axis=-1, norm=None):\n \n     \"\"\"\n \n-    a = asarray(a).astype(complex)\n+    a = asarray(a).astype(complex, copy=False)\n     if n is None:\n         n = a.shape[axis]\n     output = _raw_fft(a, n, axis, fftpack.cffti, fftpack.cfftf, _fft_cache)"
    },
    {
        "commit_id": "d426ed91b41293f75c90e1795b72c017e8d435ef",
        "commit_message": "BUG:Should fix astype cast bug in numpy.fft module\nCloses #6693",
        "commit_url": "https://github.com/numpy/numpy/commit/d426ed91b41293f75c90e1795b72c017e8d435ef",
        "buggy_code": "a = asarray(a).astype(complex)",
        "fixed_code": "a = asarray(a).astype(complex, copy=False)",
        "patch": "@@ -183,7 +183,7 @@ def fft(a, n=None, axis=-1, norm=None):\n \n     \"\"\"\n \n-    a = asarray(a).astype(complex)\n+    a = asarray(a).astype(complex, copy=False)\n     if n is None:\n         n = a.shape[axis]\n     output = _raw_fft(a, n, axis, fftpack.cffti, fftpack.cfftf, _fft_cache)"
    },
    {
        "commit_id": "9872212bdfb3bb81f66840bb3914dc56896beba7",
        "commit_message": "Merge pull request #7049 from andyfaff/isclosetst\n\nTST: np.isclose, correct error msg on test",
        "commit_url": "https://github.com/numpy/numpy/commit/9872212bdfb3bb81f66840bb3914dc56896beba7",
        "buggy_code": "assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg % (x, y))",
        "fixed_code": "assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg2 % (x, y))",
        "patch": "@@ -1591,7 +1591,7 @@ def tst_isclose_allclose(self, x, y):\n         msg = \"isclose.all() and allclose aren't same for %s and %s\"\n         msg2 = \"isclose and allclose aren't same for %s and %s\"\n         if np.isscalar(x) and np.isscalar(y):\n-            assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg % (x, y))\n+            assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg2 % (x, y))\n         else:\n             assert_array_equal(np.isclose(x, y).all(), np.allclose(x, y), msg % (x, y))\n "
    },
    {
        "commit_id": "7f0d97c2b6b1cf5001dc7af88f029adf01b14eff",
        "commit_message": "TST: np.isclose, correct error msg on test",
        "commit_url": "https://github.com/numpy/numpy/commit/7f0d97c2b6b1cf5001dc7af88f029adf01b14eff",
        "buggy_code": "assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg % (x, y))",
        "fixed_code": "assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg2 % (x, y))",
        "patch": "@@ -1591,7 +1591,7 @@ def tst_isclose_allclose(self, x, y):\n         msg = \"isclose.all() and allclose aren't same for %s and %s\"\n         msg2 = \"isclose and allclose aren't same for %s and %s\"\n         if np.isscalar(x) and np.isscalar(y):\n-            assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg % (x, y))\n+            assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg2 % (x, y))\n         else:\n             assert_array_equal(np.isclose(x, y).all(), np.allclose(x, y), msg % (x, y))\n "
    },
    {
        "commit_id": "e0cb3f79936656d6d2f48cbad46a3a9f2bad5ae1",
        "commit_message": "Revert \"Merge pull request #7001 from shoyer/NaT-comparison\"\n\nThis reverts commit 7141f40b58ed1e7071cde78ab7bc8ab37e9c5983,\nreversing changes made to 8fa6e3bef26a6d4a2c92f2824129aa4409be2590.\n\nThe original broke some pandas tests. The current plan to get this\nin is\n\n* reversion\n* issue FutureWarning in 1.11 and 1.12\n* make the change in 1.13.",
        "commit_url": "https://github.com/numpy/numpy/commit/e0cb3f79936656d6d2f48cbad46a3a9f2bad5ae1",
        "buggy_code": "assert_equal(average(ott, axis=1).mask[0], True)",
        "fixed_code": "assert_equal(average(ott, axis=1).mask[0], [True])",
        "patch": "@@ -154,7 +154,7 @@ def test_testAverage1(self):\n         ott = ott.reshape(2, 2)\n         ott[:, 1] = masked\n         assert_equal(average(ott, axis=0), [2.0, 0.0])\n-        assert_equal(average(ott, axis=1).mask[0], True)\n+        assert_equal(average(ott, axis=1).mask[0], [True])\n         assert_equal([2., 0.], average(ott, axis=0))\n         result, wts = average(ott, axis=0, returned=1)\n         assert_equal(wts, [1., 0.])"
    },
    {
        "commit_id": "a97f3a672637af604d830477ed41f5431a600c04",
        "commit_message": "Merge pull request #7015 from njsmith/fix-1.10-messages\n\nDOC: Clean up/fix several references to the \"future\" 1.10 release",
        "commit_url": "https://github.com/numpy/numpy/commit/a97f3a672637af604d830477ed41f5431a600c04",
        "buggy_code": "NumPy 1.10 the read-only restriction will be removed.",
        "fixed_code": "a future version the read-only restriction will be removed.",
        "patch": "@@ -3466,7 +3466,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n     Return specified diagonals. In NumPy 1.9 the returned array is a\n     read-only view instead of a copy as in previous NumPy versions.  In\n-    NumPy 1.10 the read-only restriction will be removed.\n+    a future version the read-only restriction will be removed.\n \n     Refer to :func:`numpy.diagonal` for full documentation.\n "
    },
    {
        "commit_id": "c0f6c3744ff6a54d4e9be5a98aa2d4253f537f49",
        "commit_message": "DOC: Clean up/fix several references to the \"future\" 1.10 release\n\nFixes gh-7010",
        "commit_url": "https://github.com/numpy/numpy/commit/c0f6c3744ff6a54d4e9be5a98aa2d4253f537f49",
        "buggy_code": "NumPy 1.10 the read-only restriction will be removed.",
        "fixed_code": "a future version the read-only restriction will be removed.",
        "patch": "@@ -3466,7 +3466,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n     Return specified diagonals. In NumPy 1.9 the returned array is a\n     read-only view instead of a copy as in previous NumPy versions.  In\n-    NumPy 1.10 the read-only restriction will be removed.\n+    a future version the read-only restriction will be removed.\n \n     Refer to :func:`numpy.diagonal` for full documentation.\n "
    },
    {
        "commit_id": "7f08bb7004fb435a88a4f977c359d789cc5c2ac1",
        "commit_message": "Merge pull request #7005 from juliantaylor/get_path_warn\n\nBUG: skip invalid path distutils warning for empty strings",
        "commit_url": "https://github.com/numpy/numpy/commit/7f08bb7004fb435a88a4f977c359d789cc5c2ac1",
        "buggy_code": "if not os.path.isdir(d):",
        "fixed_code": "if len(d) > 0 and not os.path.isdir(d):",
        "patch": "@@ -629,7 +629,7 @@ def get_paths(self, section, key):\n         dirs.extend(default_dirs)\n         ret = []\n         for d in dirs:\n-            if not os.path.isdir(d):\n+            if len(d) > 0 and not os.path.isdir(d):\n                 warnings.warn('Specified path %s is invalid.' % d)\n                 continue\n "
    },
    {
        "commit_id": "df70490874e33e1fad18720f5c74fb5e319c9e06",
        "commit_message": "BUG: skip invalid path distutils warning for empty strings\n\nempty strings are the default for the new rpath,\nextra_compile_args and extra_link_args sections",
        "commit_url": "https://github.com/numpy/numpy/commit/df70490874e33e1fad18720f5c74fb5e319c9e06",
        "buggy_code": "if not os.path.isdir(d):",
        "fixed_code": "if len(d) > 0 and not os.path.isdir(d):",
        "patch": "@@ -629,7 +629,7 @@ def get_paths(self, section, key):\n         dirs.extend(default_dirs)\n         ret = []\n         for d in dirs:\n-            if not os.path.isdir(d):\n+            if len(d) > 0 and not os.path.isdir(d):\n                 warnings.warn('Specified path %s is invalid.' % d)\n                 continue\n "
    },
    {
        "commit_id": "6f1da5f8f5db99e7ca8397d925c8d2a013a305e0",
        "commit_message": "DOC: fix typos in trapz()\n\n[ci skip]",
        "commit_url": "https://github.com/numpy/numpy/commit/6f1da5f8f5db99e7ca8397d925c8d2a013a305e0",
        "buggy_code": "If `x` is None, spacing given by `dx` is assumed. Default is 1.",
        "fixed_code": "If `dx` is None, spacing given by `x` is assumed. Default is 1.",
        "patch": "@@ -3648,7 +3648,7 @@ def trapz(y, x=None, dx=1.0, axis=-1):\n     x : array_like, optional\n         If `x` is None, then spacing between all `y` elements is `dx`.\n     dx : scalar, optional\n-        If `x` is None, spacing given by `dx` is assumed. Default is 1.\n+        If `dx` is None, spacing given by `x` is assumed. Default is 1.\n     axis : int, optional\n         Specify the axis.\n "
    },
    {
        "commit_id": "7fd1eb44c3b73f233073ac260311316c0f9d0675",
        "commit_message": "Merge pull request #6978 from kpsychas/patch-1\n\nBLD: fix build error for mingw32 compiler on Windows",
        "commit_url": "https://github.com/numpy/numpy/commit/7fd1eb44c3b73f233073ac260311316c0f9d0675",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (AttributeError, ValueError):",
        "patch": "@@ -192,7 +192,7 @@ def check_long_double_representation(cmd):\n     if sys.platform == \"win32\" and not mingw32():\n         try:\n             cmd.compiler.compile_options.remove(\"/GL\")\n-        except ValueError:\n+        except (AttributeError, ValueError):\n             pass\n \n     # We need to use _compile because we need the object filename"
    },
    {
        "commit_id": "f54ed5d5ebaada0a214076977cc6c11484edd099",
        "commit_message": "fix for windows\n\nRelated Issue http://stackoverflow.com/questions/33886558/numpy-installation-error-mingw32ccompiler-instance-has-no-attribute-compile-o",
        "commit_url": "https://github.com/numpy/numpy/commit/f54ed5d5ebaada0a214076977cc6c11484edd099",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (AttributeError, ValueError):",
        "patch": "@@ -192,7 +192,7 @@ def check_long_double_representation(cmd):\n     if sys.platform == \"win32\" and not mingw32():\n         try:\n             cmd.compiler.compile_options.remove(\"/GL\")\n-        except ValueError:\n+        except (AttributeError, ValueError):\n             pass\n \n     # We need to use _compile because we need the object filename"
    },
    {
        "commit_id": "22c84f5ea585645b458b1ed0ca31d739cf3085c6",
        "commit_message": "Merge pull request #6916 from charris/fix-test_f2py\n\nBUG: Fix test_f2py so it runs correctly in runtests.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/22c84f5ea585645b458b1ed0ca31d739cf3085c6",
        "buggy_code": "except OSError:",
        "fixed_code": "except:",
        "patch": "@@ -77,6 +77,6 @@ def test_f2py():\n                 assert_equal(stdout.strip(), asbytes('2'))\n                 success = True\n                 break\n-            except OSError:\n+            except:\n                 pass\n         assert_(success, \"Warning: neither %s nor %s found in path\" % f2py_cmds)"
    },
    {
        "commit_id": "6a871df50947c4ebda79a966fba09b5336e1e061",
        "commit_message": "BUG: Fix test_f2py so it runs correctly in runtests.py.\n\nThe loop checking for command line versions can terminate early as the\nerrors are not always of OSError type. In particular, runtests.py may\nonly store the command with the python version and the check for that is\nnot executed, leading to a test failure.",
        "commit_url": "https://github.com/numpy/numpy/commit/6a871df50947c4ebda79a966fba09b5336e1e061",
        "buggy_code": "except OSError:",
        "fixed_code": "except:",
        "patch": "@@ -77,6 +77,6 @@ def test_f2py():\n                 assert_equal(stdout.strip(), asbytes('2'))\n                 success = True\n                 break\n-            except OSError:\n+            except:\n                 pass\n         assert_(success, \"Warning: neither %s nor %s found in path\" % f2py_cmds)"
    },
    {
        "commit_id": "4e669d99fdb0456502a33e56c92de66a25385a50",
        "commit_message": "Merge pull request #6915 from rgommers/doc-nose-dependency\n\nDOC: update min nose version in import error message",
        "commit_url": "https://github.com/numpy/numpy/commit/4e669d99fdb0456502a33e56c92de66a25385a50",
        "buggy_code": "minimum_nose_version = (0, 10, 0)",
        "fixed_code": "minimum_nose_version = (1, 0, 0)",
        "patch": "@@ -57,7 +57,7 @@ def import_nose():\n     \"\"\" Import nose only when needed.\n     \"\"\"\n     fine_nose = True\n-    minimum_nose_version = (0, 10, 0)\n+    minimum_nose_version = (1, 0, 0)\n     try:\n         import nose\n     except ImportError:"
    },
    {
        "commit_id": "f68cadd7b1c4f5c4d4d94acce63f86d279925a7a",
        "commit_message": "DOC: update min nose version in import error message, and add note to README\n\nAddresses comment in gh-4074.",
        "commit_url": "https://github.com/numpy/numpy/commit/f68cadd7b1c4f5c4d4d94acce63f86d279925a7a",
        "buggy_code": "minimum_nose_version = (0, 10, 0)",
        "fixed_code": "minimum_nose_version = (1, 0, 0)",
        "patch": "@@ -57,7 +57,7 @@ def import_nose():\n     \"\"\" Import nose only when needed.\n     \"\"\"\n     fine_nose = True\n-    minimum_nose_version = (0, 10, 0)\n+    minimum_nose_version = (1, 0, 0)\n     try:\n         import nose\n     except ImportError:"
    },
    {
        "commit_id": "b057b7a22e6d9a290d607971cd5365ce75872d03",
        "commit_message": "Merge pull request #6901 from njsmith/test-warning-defaults\n\n[FIX] fix NoseTester's raise_warning default",
        "commit_url": "https://github.com/numpy/numpy/commit/b057b7a22e6d9a290d607971cd5365ce75872d03",
        "buggy_code": "test = Tester().test",
        "fixed_code": "test = nosetester._numpy_tester().test",
        "patch": "@@ -12,4 +12,4 @@\n from . import decorators as dec\n from .nosetester import run_module_suite, NoseTester as Tester\n from .utils import *\n-test = Tester().test\n+test = nosetester._numpy_tester().test"
    },
    {
        "commit_id": "17ec49de1e0c482398f54b165c4ccc6cdcf43ac2",
        "commit_message": "Merge pull request #6879 from dabidan/patch-2\n\ntypo corrrected.",
        "commit_url": "https://github.com/numpy/numpy/commit/17ec49de1e0c482398f54b165c4ccc6cdcf43ac2",
        "buggy_code": ">>> y = x['foo']",
        "fixed_code": ">>> y = x['bar']",
        "patch": "@@ -27,7 +27,7 @@\n Conveniently, one can access any field of the array by indexing using the\n string that names that field. ::\n \n- >>> y = x['foo']\n+ >>> y = x['bar']\n  >>> y\n  array([ 2.,  3.], dtype=float32)\n  >>> y[:] = 2*y"
    },
    {
        "commit_id": "dcdc9dea7863685cc04ddb89c6da6e466cab3ed3",
        "commit_message": "Merge pull request #6813 from charris/fix-ma-print-test\n\nTST,BUG: Make test_mvoid_multidim_print work for 32 bit systems.",
        "commit_url": "https://github.com/numpy/numpy/commit/dcdc9dea7863685cc04ddb89c6da6e466cab3ed3",
        "buggy_code": "dtype = [('a', '<i8', (3,))])",
        "fixed_code": "dtype = [('a', '<i4', (3,))])",
        "patch": "@@ -756,7 +756,7 @@ def test_mvoid_multidim_print(self):\n         t_ma = masked_array(data = [([1, 2, 3],)],\n                             mask = [([False, True, False],)],\n                             fill_value = ([999999, 999999, 999999],),\n-                            dtype = [('a', '<i8', (3,))])\n+                            dtype = [('a', '<i4', (3,))])\n         assert_(str(t_ma[0]) == \"([1, --, 3],)\")\n         assert_(repr(t_ma[0]) == \"([1, --, 3],)\")\n "
    },
    {
        "commit_id": "192bff5ea1b37359c45e4e54c4b14b402e368663",
        "commit_message": "TST,BUG: Make test_mvoid_multidim_print work for 32 bit systems.\n\nThe test currently uses an `<i8` type which is converted to a Python\nlong integer when running on a 32 bit system with Python 2. That changes\nthe string printed by appending `L` to the printed integer value and\nresults in a failed test.",
        "commit_url": "https://github.com/numpy/numpy/commit/192bff5ea1b37359c45e4e54c4b14b402e368663",
        "buggy_code": "dtype = [('a', '<i8', (3,))])",
        "fixed_code": "dtype = [('a', '<i4', (3,))])",
        "patch": "@@ -756,7 +756,7 @@ def test_mvoid_multidim_print(self):\n         t_ma = masked_array(data = [([1, 2, 3],)],\n                             mask = [([False, True, False],)],\n                             fill_value = ([999999, 999999, 999999],),\n-                            dtype = [('a', '<i8', (3,))])\n+                            dtype = [('a', '<i4', (3,))])\n         assert_(str(t_ma[0]) == \"([1, --, 3],)\")\n         assert_(repr(t_ma[0]) == \"([1, --, 3],)\")\n "
    },
    {
        "commit_id": "9424d3616d8c80b7f0b4dcf31ff3c335db76c0fa",
        "commit_message": "Merge pull request #6808 from charris/fix-assert-in-tests\n\nMAINT: Replace assert with assert_(...) in some tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/9424d3616d8c80b7f0b4dcf31ff3c335db76c0fa",
        "buggy_code": "assert not l",
        "fixed_code": "assert_(not l)",
        "patch": "@@ -277,7 +277,7 @@ def test_array_richcompare_legacy_weirdness(self):\n                         with warnings.catch_warnings() as l:\n                             warnings.filterwarnings(\"always\")\n                             assert_raises(TypeError, f, arg1, arg2)\n-                            assert not l\n+                            assert_(not l)\n                     else:\n                         # py2\n                         assert_warns(DeprecationWarning, f, arg1, arg2)"
    },
    {
        "commit_id": "d69d51c0d26fef3f8914aaa3d9af21348fe7a043",
        "commit_message": "Merge pull request #6761 from gerritholl/structured_nested_masked_array_maskfill\n\nBUG/TST: Fix #6760 by correctly describing mask on nested subdtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/d69d51c0d26fef3f8914aaa3d9af21348fe7a043",
        "buggy_code": "mdescr[0] = newtype",
        "fixed_code": "mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)",
        "patch": "@@ -1248,7 +1248,7 @@ def _recursive_make_descr(datatype, newtype=bool_):\n     # Is this some kind of composite a la (np.float,2)\n     elif datatype.subdtype:\n         mdescr = list(datatype.subdtype)\n-        mdescr[0] = newtype\n+        mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)\n         return tuple(mdescr)\n     else:\n         return newtype"
    },
    {
        "commit_id": "c8a09822c707f320d8c8ac242a8628de690a5899",
        "commit_message": "BUG/TST: Fix #6760 by correctly describing mask on nested subdtypes\n\nFix #6760.  In ma.core._recursive_make_descr, consider the case where a\nsubdtype does itself have named fields.  This ensures the correct mask for\nan array like `ma.zeros(2, dtype([(\"A\", \"(2,2)i1,(2,2)i1\", (2,2))]))`.",
        "commit_url": "https://github.com/numpy/numpy/commit/c8a09822c707f320d8c8ac242a8628de690a5899",
        "buggy_code": "mdescr[0] = newtype",
        "fixed_code": "mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)",
        "patch": "@@ -1248,7 +1248,7 @@ def _recursive_make_descr(datatype, newtype=bool_):\n     # Is this some kind of composite a la (np.float,2)\n     elif datatype.subdtype:\n         mdescr = list(datatype.subdtype)\n-        mdescr[0] = newtype\n+        mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)\n         return tuple(mdescr)\n     else:\n         return newtype"
    },
    {
        "commit_id": "1a097894a6da019a1bc728f96eb40b33a584d05d",
        "commit_message": "Merge pull request #6758 from seberg/resize-empty\n\nBUG: resizing empty array with complex dtype failed",
        "commit_url": "https://github.com/numpy/numpy/commit/1a097894a6da019a1bc728f96eb40b33a584d05d",
        "buggy_code": "return mu.zeros(new_shape, a.dtype.char)",
        "fixed_code": "return mu.zeros(new_shape, a.dtype)",
        "patch": "@@ -1134,7 +1134,7 @@ def resize(a, new_shape):\n     a = ravel(a)\n     Na = len(a)\n     if not Na:\n-        return mu.zeros(new_shape, a.dtype.char)\n+        return mu.zeros(new_shape, a.dtype)\n     total_size = um.multiply.reduce(new_shape)\n     n_copies = int(total_size / Na)\n     extra = total_size % Na"
    },
    {
        "commit_id": "927e8809cb566722b1bd0b15dca9f030f3cd29b9",
        "commit_message": "BUG: resizing empty array with complex dtype failed\n\nThis is because the dtype was passed into the new array as a\nchar, and many dtypes do not have a valid char representation.\n\nCloses gh-6740",
        "commit_url": "https://github.com/numpy/numpy/commit/927e8809cb566722b1bd0b15dca9f030f3cd29b9",
        "buggy_code": "return mu.zeros(new_shape, a.dtype.char)",
        "fixed_code": "return mu.zeros(new_shape, a.dtype)",
        "patch": "@@ -1134,7 +1134,7 @@ def resize(a, new_shape):\n     a = ravel(a)\n     Na = len(a)\n     if not Na:\n-        return mu.zeros(new_shape, a.dtype.char)\n+        return mu.zeros(new_shape, a.dtype)\n     total_size = um.multiply.reduce(new_shape)\n     n_copies = int(total_size / Na)\n     extra = total_size % Na"
    },
    {
        "commit_id": "433e6691113c4656cd939f94da4a837ed08e59a4",
        "commit_message": "Merge pull request #6733 from gerritholl/structured_multidim_masked_array_strrep\n\nBUG/TST: Fix for #6729",
        "commit_url": "https://github.com/numpy/numpy/commit/433e6691113c4656cd939f94da4a837ed08e59a4",
        "buggy_code": "if m.shape == ():",
        "fixed_code": "if m.shape == () and m.itemsize==len(m.dtype):",
        "patch": "@@ -3695,7 +3695,7 @@ def __str__(self):\n             if m is nomask:\n                 res = self._data\n             else:\n-                if m.shape == ():\n+                if m.shape == () and m.itemsize==len(m.dtype):\n                     if m.dtype.names:\n                         m = m.view((bool, len(m.dtype)))\n                         if m.any():"
    },
    {
        "commit_id": "d07e20ea2718c2d460a203f6775aef6cea8ba520",
        "commit_message": "BUG/TST: Fix for #6729\n\nFix representation of a structured masked array with dimension zero.\nThe effect of representing a masked array with dimension zero is now\nsimilar to respresenting an mvoid.  This commit fixes #6729.",
        "commit_url": "https://github.com/numpy/numpy/commit/d07e20ea2718c2d460a203f6775aef6cea8ba520",
        "buggy_code": "if m.shape == ():",
        "fixed_code": "if m.shape == () and m.itemsize==len(m.dtype):",
        "patch": "@@ -3695,7 +3695,7 @@ def __str__(self):\n             if m is nomask:\n                 res = self._data\n             else:\n-                if m.shape == ():\n+                if m.shape == () and m.itemsize==len(m.dtype):\n                     if m.dtype.names:\n                         m = m.view((bool, len(m.dtype)))\n                         if m.any():"
    },
    {
        "commit_id": "bf28b4432183126c21f0fa80852c335e9c1ed7c1",
        "commit_message": "Merge pull request #6527 from ethankruse/6462fix\n\nPotential fix for #6462",
        "commit_url": "https://github.com/numpy/numpy/commit/bf28b4432183126c21f0fa80852c335e9c1ed7c1",
        "buggy_code": "if np.issubdtype(a.dtype, np.inexact):",
        "fixed_code": "if np.issubdtype(a.dtype, np.inexact) and sz > 0:",
        "patch": "@@ -3339,7 +3339,7 @@ def _median(a, axis=None, out=None, overwrite_input=False):\n         indexer[axis] = slice(index-1, index+1)\n \n     # Check if the array contains any nan's\n-    if np.issubdtype(a.dtype, np.inexact):\n+    if np.issubdtype(a.dtype, np.inexact) and sz > 0:\n         # warn and return nans like mean would\n         rout = mean(part[indexer], axis=axis, out=out)\n         part = np.rollaxis(part, axis, part.ndim)"
    },
    {
        "commit_id": "5caf4c932e43c47d73fad761e3257bb0d4551cc2",
        "commit_message": "BUG: Make median work for empty arrays (issue #6462)\n\nnp.median([]) returns NaN. Fixes bug/regression that raised an IndexError.\nAdded tests to ensure continued support of empty arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/5caf4c932e43c47d73fad761e3257bb0d4551cc2",
        "buggy_code": "if np.issubdtype(a.dtype, np.inexact):",
        "fixed_code": "if np.issubdtype(a.dtype, np.inexact) and sz > 0:",
        "patch": "@@ -3339,7 +3339,7 @@ def _median(a, axis=None, out=None, overwrite_input=False):\n         indexer[axis] = slice(index-1, index+1)\n \n     # Check if the array contains any nan's\n-    if np.issubdtype(a.dtype, np.inexact):\n+    if np.issubdtype(a.dtype, np.inexact) and sz > 0:\n         # warn and return nans like mean would\n         rout = mean(part[indexer], axis=axis, out=out)\n         part = np.rollaxis(part, axis, part.ndim)"
    },
    {
        "commit_id": "626eb3748d067ea6e4c4dd308252bfad97df186f",
        "commit_message": "Merge pull request #6526 from dsanders11/patch-1\n\nFix use of __doc__ in setup.py for -OO mode",
        "commit_url": "https://github.com/numpy/numpy/commit/626eb3748d067ea6e4c4dd308252bfad97df186f",
        "buggy_code": "DOCLINES = __doc__.split(\"\\n\")",
        "fixed_code": "DOCLINES = (__doc__ or '').split(\"\\n\")",
        "patch": "@@ -15,7 +15,7 @@\n \"\"\"\n from __future__ import division, print_function\n \n-DOCLINES = __doc__.split(\"\\n\")\n+DOCLINES = (__doc__ or '').split(\"\\n\")\n \n import os\n import sys"
    },
    {
        "commit_id": "25203e6e8b47b3bf08304273815d6a4b900778f3",
        "commit_message": "MAINT: Restore test fix that was reverted.\n\nUse assert_array_almost_equal instead of assert_array_equal when\ncomparing against python.math functions.",
        "commit_url": "https://github.com/numpy/numpy/commit/25203e6e8b47b3bf08304273815d6a4b900778f3",
        "buggy_code": "assert_array_equal(r1, r2)",
        "fixed_code": "assert_array_almost_equal(r1, r2)",
        "patch": "@@ -732,7 +732,7 @@ def test_ufunc(self):\n         args = np.array([0, 0.5 * np.pi, np.pi, 1.5 * np.pi, 2 * np.pi])\n         r1 = f(args)\n         r2 = np.cos(args)\n-        assert_array_equal(r1, r2)\n+        assert_array_almost_equal(r1, r2)\n \n     def test_keywords(self):\n "
    },
    {
        "commit_id": "922442fe0251df29b3494a2aa93a0d3f18155481",
        "commit_message": "Fix use of __doc__ in setup.py for -OO mode",
        "commit_url": "https://github.com/numpy/numpy/commit/922442fe0251df29b3494a2aa93a0d3f18155481",
        "buggy_code": "DOCLINES = __doc__.split(\"\\n\")",
        "fixed_code": "DOCLINES = (__doc__ or '').split(\"\\n\")",
        "patch": "@@ -15,7 +15,7 @@\n \"\"\"\n from __future__ import division, print_function\n \n-DOCLINES = __doc__.split(\"\\n\")\n+DOCLINES = (__doc__ or '').split(\"\\n\")\n \n import os\n import sys"
    },
    {
        "commit_id": "ddb41af04b64198c873de8bd50f1b57bd8c34fff",
        "commit_message": "Merge pull request #6480 from samuelstjean/patch-1\n\nFixed a typo in np.inner doc",
        "commit_url": "https://github.com/numpy/numpy/commit/ddb41af04b64198c873de8bd50f1b57bd8c34fff",
        "buggy_code": "If `a` and `b` are nonscalar, their last dimensions of must match.",
        "fixed_code": "If `a` and `b` are nonscalar, their last dimensions must match.",
        "patch": "@@ -1228,7 +1228,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     Parameters\n     ----------\n     a, b : array_like\n-        If `a` and `b` are nonscalar, their last dimensions of must match.\n+        If `a` and `b` are nonscalar, their last dimensions must match.\n \n     Returns\n     -------"
    },
    {
        "commit_id": "42b407182b71e46ebdd9f48bf79f2db509a2b1a9",
        "commit_message": "Merge pull request #6441 from cgohlke/patch-2\n\nBLD: do not build exclusively for SSE4.2 processors",
        "commit_url": "https://github.com/numpy/numpy/commit/42b407182b71e46ebdd9f48bf79f2db509a2b1a9",
        "buggy_code": "return ['/QxSSE4.2']",
        "fixed_code": "return ['/QaxSSE4.2']",
        "patch": "@@ -205,7 +205,7 @@ class IntelEM64VisualFCompiler(IntelVisualFCompiler):\n     version_match = simple_version_match(start='Intel\\(R\\).*?64,')\n \n     def get_flags_arch(self):\n-        return ['/QxSSE4.2']\n+        return ['/QaxSSE4.2']\n \n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "42b407182b71e46ebdd9f48bf79f2db509a2b1a9",
        "commit_message": "Merge pull request #6441 from cgohlke/patch-2\n\nBLD: do not build exclusively for SSE4.2 processors",
        "commit_url": "https://github.com/numpy/numpy/commit/42b407182b71e46ebdd9f48bf79f2db509a2b1a9",
        "buggy_code": "'/Qstd=c99', '/QxSSE4.2']",
        "fixed_code": "'/Qstd=c99', '/QaxSSE4.2']",
        "patch": "@@ -78,7 +78,7 @@ def initialize(self, plat_name=None):\n             self.lib = self.find_exe('xilib')\n             self.linker = self.find_exe('xilink')\n             self.compile_options = ['/nologo', '/O3', '/MD', '/W3',\n-                                    '/Qstd=c99', '/QxSSE4.2']\n+                                    '/Qstd=c99', '/QaxSSE4.2']\n             self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3',\n                                           '/Qstd=c99', '/Z7', '/D_DEBUG']\n "
    },
    {
        "commit_id": "2f2fce9897e8dc3f4204119fcbcd88037c91d60d",
        "commit_message": "Merge pull request #6421 from charris/forwardport-gh-6417\n\nDOC: fix var. reference in percentile docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/2f2fce9897e8dc3f4204119fcbcd88037c91d60d",
        "buggy_code": "the result will broadcast correctly against the original `arr`.",
        "fixed_code": "the result will broadcast correctly against the original array `a`.",
        "patch": "@@ -3411,7 +3411,7 @@ def percentile(a, q, axis=None, out=None,\n     keepdims : bool, optional\n         If this is set to True, the axes which are reduced are left\n         in the result as dimensions with size one. With this option,\n-        the result will broadcast correctly against the original `arr`.\n+        the result will broadcast correctly against the original array `a`.\n \n         .. versionadded:: 1.9.0\n "
    },
    {
        "commit_id": "84187c8232aa9dc89eb5ca4ca3e34319c9006ae9",
        "commit_message": "DOC: fix var. reference in percentile docstring\n\nThe argument for the original input array is named `a`\nbut in the docstring it was at some point referred to as `arr`.\n\n[skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/84187c8232aa9dc89eb5ca4ca3e34319c9006ae9",
        "buggy_code": "the result will broadcast correctly against the original `arr`.",
        "fixed_code": "the result will broadcast correctly against the original array `a`.",
        "patch": "@@ -3411,7 +3411,7 @@ def percentile(a, q, axis=None, out=None,\n     keepdims : bool, optional\n         If this is set to True, the axes which are reduced are left\n         in the result as dimensions with size one. With this option,\n-        the result will broadcast correctly against the original `arr`.\n+        the result will broadcast correctly against the original array `a`.\n \n         .. versionadded:: 1.9.0\n "
    },
    {
        "commit_id": "4cf06b83c78c4295b4c0f4b892dc3cd1bfd6eb61",
        "commit_message": "Merge pull request #6413 from charris/bug-multiarray-test\n\nBUG: Fix missing np prefix in test_multiarray.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/4cf06b83c78c4295b4c0f4b892dc3cd1bfd6eb61",
        "buggy_code": "class OutClass(ndarray):",
        "fixed_code": "class OutClass(np.ndarray):",
        "patch": "@@ -2559,7 +2559,7 @@ def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw):\n \n     def test_out_override(self):\n         # regression test for github bug 4753\n-        class OutClass(ndarray):\n+        class OutClass(np.ndarray):\n             def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw):\n                 if 'out' in kw:\n                     tmp_kw = kw.copy()"
    },
    {
        "commit_id": "84dc0cb469c47187fd11ba030e2c661cbece9c53",
        "commit_message": "BUG: Fix missing np prefix in test_multiarray.py.\n\nBug introduced in 68e61c2f.",
        "commit_url": "https://github.com/numpy/numpy/commit/84dc0cb469c47187fd11ba030e2c661cbece9c53",
        "buggy_code": "class OutClass(ndarray):",
        "fixed_code": "class OutClass(np.ndarray):",
        "patch": "@@ -2559,7 +2559,7 @@ def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw):\n \n     def test_out_override(self):\n         # regression test for github bug 4753\n-        class OutClass(ndarray):\n+        class OutClass(np.ndarray):\n             def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw):\n                 if 'out' in kw:\n                     tmp_kw = kw.copy()"
    },
    {
        "commit_id": "c8ca8abd5cd1793a1f9b8ff94b8421bca554551d",
        "commit_message": "Merge pull request #6407 from eulerreich/patch-1\n\ntypo",
        "commit_url": "https://github.com/numpy/numpy/commit/c8ca8abd5cd1793a1f9b8ff94b8421bca554551d",
        "buggy_code": "provides a way compute such summations. The best way to understand this",
        "fixed_code": "provides a way to compute such summations. The best way to understand this",
        "patch": "@@ -2108,7 +2108,7 @@ def luf(lamdaexpr, *args, **kwargs):\n \n     Using the Einstein summation convention, many common multi-dimensional\n     array operations can be represented in a simple fashion.  This function\n-    provides a way compute such summations. The best way to understand this\n+    provides a way to compute such summations. The best way to understand this\n     function is to try the examples below, which show how many common NumPy\n     functions can be implemented as calls to `einsum`.\n "
    },
    {
        "commit_id": "ea289ee45dffa85d2fde07685eb3334816d8af7c",
        "commit_message": "Merge pull request #6371 from seberg/pr-5771\n\nBUG: Make sure warning for array split is always applied",
        "commit_url": "https://github.com/numpy/numpy/commit/ea289ee45dffa85d2fde07685eb3334816d8af7c",
        "buggy_code": "if sub_arys[-1].size == 0 and sub_arys[-1].ndim != 1:",
        "fixed_code": "if any(arr.size == 0 and arr.ndim != 1 for arr in sub_arys):",
        "patch": "@@ -424,7 +424,7 @@ def array_split(ary, indices_or_sections, axis=0):\n     # This \"kludge\" was introduced here to replace arrays shaped (0, 10)\n     # or similar with an array shaped (0,).\n     # There seems no need for this, so give a FutureWarning to remove later.\n-    if sub_arys[-1].size == 0 and sub_arys[-1].ndim != 1:\n+    if any(arr.size == 0 and arr.ndim != 1 for arr in sub_arys):\n         warnings.warn(\"in the future np.array_split will retain the shape of \"\n                       \"arrays with a zero size, instead of replacing them by \"\n                       \"`array([])`, which always has a shape of (0,).\","
    },
    {
        "commit_id": "efd18a5455ea2b21eb0e3bd9ca9fab0d08e09526",
        "commit_message": "BUG: Expanded warning conditions for array_split\n\nZero arrays can also occur with any of the partitions sub_arys[i]\ninduced by array_split, not just the final partition sub_arys[-1].\n\nModified by seberg.\nCloses gh-5771",
        "commit_url": "https://github.com/numpy/numpy/commit/efd18a5455ea2b21eb0e3bd9ca9fab0d08e09526",
        "buggy_code": "if sub_arys[-1].size == 0 and sub_arys[-1].ndim != 1:",
        "fixed_code": "if any(arr.size == 0 and arr.ndim != 1 for arr in sub_arys):",
        "patch": "@@ -423,7 +423,7 @@ def array_split(ary, indices_or_sections, axis=0):\n     # This \"kludge\" was introduced here to replace arrays shaped (0, 10)\n     # or similar with an array shaped (0,).\n     # There seems no need for this, so give a FutureWarning to remove later.\n-    if sub_arys[-1].size == 0 and sub_arys[-1].ndim != 1:\n+    if any(arr.size == 0 and arr.ndim != 1 for arr in sub_arys):\n         warnings.warn(\"in the future np.array_split will retain the shape of \"\n                       \"arrays with a zero size, instead of replacing them by \"\n                       \"`array([])`, which always has a shape of (0,).\","
    },
    {
        "commit_id": "1bf73fa0119fc4ed9ab771d01e1cee5e9fd36c76",
        "commit_message": "Merge pull request #6347 from charris/fix-sdist-missing-files\n\nFix a couple of distribution problems",
        "commit_url": "https://github.com/numpy/numpy/commit/1bf73fa0119fc4ed9ab771d01e1cee5e9fd36c76",
        "buggy_code": "FULLVERSION += '.dev-' + GIT_REVISION[:7]",
        "fixed_code": "FULLVERSION += '.dev0+' + GIT_REVISION[:7]",
        "patch": "@@ -89,7 +89,7 @@\n         GIT_REVISION = \"Unknown\"\n \n     if not setup_py.ISRELEASED:\n-        FULLVERSION += '.dev-' + GIT_REVISION[:7]\n+        FULLVERSION += '.dev0+' + GIT_REVISION[:7]\n finally:\n     sys.path.pop(0)\n "
    },
    {
        "commit_id": "fe857457d4f3fa268495cb962521769bd4ce1da0",
        "commit_message": "BUG: PEP440 compliant versioning for development releases.\n\nThe pavement script was not using the new '.dev0+' GIT_REVISION[:7]\nsuffix for development releases.",
        "commit_url": "https://github.com/numpy/numpy/commit/fe857457d4f3fa268495cb962521769bd4ce1da0",
        "buggy_code": "FULLVERSION += '.dev-' + GIT_REVISION[:7]",
        "fixed_code": "FULLVERSION += '.dev0+' + GIT_REVISION[:7]",
        "patch": "@@ -89,7 +89,7 @@\n         GIT_REVISION = \"Unknown\"\n \n     if not setup_py.ISRELEASED:\n-        FULLVERSION += '.dev-' + GIT_REVISION[:7]\n+        FULLVERSION += '.dev0+' + GIT_REVISION[:7]\n finally:\n     sys.path.pop(0)\n "
    },
    {
        "commit_id": "72753bbdf8736a13f1cb60c25cf8683608f46e29",
        "commit_message": "MSVCCompiler overwrite 'lib' and 'include' environment variables. This\nbehavior affect at least python 3.5 and SciPy build and build failed.\nDuring initialization <python>.distutils.MSVCCompiler replace Intel\nenvironment('include' and 'lib' paths). This fix decorate 'initialize'\nfunction in MSVCCompiler and extend 'lib' and 'include' environment\nvariables. Changed compilation keys: generate optimized code\nspecialized for Intel processors with SSE4.2 support.",
        "commit_url": "https://github.com/numpy/numpy/commit/72753bbdf8736a13f1cb60c25cf8683608f46e29",
        "buggy_code": "from distutils.msvccompiler import MSVCCompiler",
        "fixed_code": "from numpy.distutils.msvccompiler import MSVCCompiler",
        "patch": "@@ -74,7 +74,7 @@ class CompaqVisualFCompiler(FCompiler):\n     fc_exe = 'DF'\n \n     if sys.platform=='win32':\n-        from distutils.msvccompiler import MSVCCompiler\n+        from numpy.distutils.msvccompiler import MSVCCompiler\n \n         try:\n             m = MSVCCompiler()"
    },
    {
        "commit_id": "5d6a9f0030e8d1a63e43783c2b5b54cde93bc5d0",
        "commit_message": "Merge pull request #6199 from aarchiba/longdouble_scanf\n\nBUG 4381 Longdouble from string without precision loss",
        "commit_url": "https://github.com/numpy/numpy/commit/5d6a9f0030e8d1a63e43783c2b5b54cde93bc5d0",
        "buggy_code": "\"strtoll\", \"strtoull\", \"cbrt\"]",
        "fixed_code": "\"strtoll\", \"strtoull\", \"cbrt\", \"strtold_l\",]",
        "patch": "@@ -104,7 +104,7 @@ def check_api_version(apiversion, codegen_dir):\n OPTIONAL_STDFUNCS = [\"expm1\", \"log1p\", \"acosh\", \"asinh\", \"atanh\",\n         \"rint\", \"trunc\", \"exp2\", \"log2\", \"hypot\", \"atan2\", \"pow\",\n         \"copysign\", \"nextafter\", \"ftello\", \"fseeko\",\n-        \"strtoll\", \"strtoull\", \"cbrt\"]\n+        \"strtoll\", \"strtoull\", \"cbrt\", \"strtold_l\",]\n \n \n OPTIONAL_HEADERS = ["
    },
    {
        "commit_id": "6cbd724f75f25cdaa7cf68fd9743064b77fbf787",
        "commit_message": "BUG: fix #4381: precision loss on string -> longdouble conversion\n\nAvoid going through python floats when converting string to\nlongdouble. This makes it dramatically easier to produce\nfull-precision long double numbers. Fixed are the constructor\n(np.longdouble(\"1.01\")), np.fromfile, np.fromstring, np.loadtxt,\nand np.genfromtxt (and functions based on it). Also fixed is\nprecision loss when using np.tofile.\n\nThis also fixes #1481, poor handling of bad data in fromfile\nand fromstring.\n\nIf the function strtod_l is not available, almost none of this\nwill work, and many tests will fail.",
        "commit_url": "https://github.com/numpy/numpy/commit/6cbd724f75f25cdaa7cf68fd9743064b77fbf787",
        "buggy_code": "\"strtoll\", \"strtoull\", \"cbrt\"]",
        "fixed_code": "\"strtoll\", \"strtoull\", \"cbrt\", \"strtold_l\",]",
        "patch": "@@ -104,7 +104,7 @@ def check_api_version(apiversion, codegen_dir):\n OPTIONAL_STDFUNCS = [\"expm1\", \"log1p\", \"acosh\", \"asinh\", \"atanh\",\n         \"rint\", \"trunc\", \"exp2\", \"log2\", \"hypot\", \"atan2\", \"pow\",\n         \"copysign\", \"nextafter\", \"ftello\", \"fseeko\",\n-        \"strtoll\", \"strtoull\", \"cbrt\"]\n+        \"strtoll\", \"strtoull\", \"cbrt\", \"strtold_l\",]\n \n \n OPTIONAL_HEADERS = ["
    },
    {
        "commit_id": "653a3655a302651b3634e385e515ca11d373f0ff",
        "commit_message": "Merge pull request #6169 from rgommers/intel-build\n\nBLD: fix various issues for Intel Fortran and GFortran",
        "commit_url": "https://github.com/numpy/numpy/commit/653a3655a302651b3634e385e515ca11d373f0ff",
        "buggy_code": "opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2'",
        "fixed_code": "opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2 '",
        "patch": "@@ -215,7 +215,7 @@ def get_flags_opt(self):\n                 # use -mincoming-stack-boundary=2\n                 # due to the change to 16 byte stack alignment since GCC 4.6\n                 # but 32 bit Windows ABI defines 4 bytes stack alignment\n-                opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2'\n+                opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2 '\n                        '-mincoming-stack-boundary=2']\n             else:\n                 opt = ['-O2 -march=x86-64 -DMS_WIN64 -mtune=generic -msse2']"
    },
    {
        "commit_id": "653a3655a302651b3634e385e515ca11d373f0ff",
        "commit_message": "Merge pull request #6169 from rgommers/intel-build\n\nBLD: fix various issues for Intel Fortran and GFortran",
        "commit_url": "https://github.com/numpy/numpy/commit/653a3655a302651b3634e385e515ca11d373f0ff",
        "buggy_code": "return [\"/arch:IA-32\", \"/QaxSSE3\"]",
        "fixed_code": "return [\"/arch:IA32\", \"/QaxSSE3\"]",
        "patch": "@@ -173,7 +173,7 @@ def get_flags_opt(self):\n         return ['/O1']  # Scipy test failures with /O2\n \n     def get_flags_arch(self):\n-        return [\"/arch:IA-32\", \"/QaxSSE3\"]\n+        return [\"/arch:IA32\", \"/QaxSSE3\"]\n \n     def runtime_library_dir_option(self, dir):\n         raise NotImplementedError"
    },
    {
        "commit_id": "0b39babb0171f6783a5bcd2b9a4f425a75371f4a",
        "commit_message": "BUG: fix typo which fused two compile flags on Windows for GFortran.\n\nReported in gh-6095.",
        "commit_url": "https://github.com/numpy/numpy/commit/0b39babb0171f6783a5bcd2b9a4f425a75371f4a",
        "buggy_code": "opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2'",
        "fixed_code": "opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2 '",
        "patch": "@@ -215,7 +215,7 @@ def get_flags_opt(self):\n                 # use -mincoming-stack-boundary=2\n                 # due to the change to 16 byte stack alignment since GCC 4.6\n                 # but 32 bit Windows ABI defines 4 bytes stack alignment\n-                opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2'\n+                opt = ['-O2 -march=core2 -mtune=generic -mfpmath=sse -msse2 '\n                        '-mincoming-stack-boundary=2']\n             else:\n                 opt = ['-O2 -march=x86-64 -DMS_WIN64 -mtune=generic -msse2']"
    },
    {
        "commit_id": "1a576e0bcc3106c0a9585c996961f3ce9211496b",
        "commit_message": "BUG: fix 32-bit arch flag for Intel Fortran compiler.\n\nSee https://software.intel.com/en-us/node/524904.  Reported in gh-6095.",
        "commit_url": "https://github.com/numpy/numpy/commit/1a576e0bcc3106c0a9585c996961f3ce9211496b",
        "buggy_code": "return [\"/arch:IA-32\", \"/QaxSSE3\"]",
        "fixed_code": "return [\"/arch:IA32\", \"/QaxSSE3\"]",
        "patch": "@@ -173,7 +173,7 @@ def get_flags_opt(self):\n         return ['/O1']  # Scipy test failures with /O2\n \n     def get_flags_arch(self):\n-        return [\"/arch:IA-32\", \"/QaxSSE3\"]\n+        return [\"/arch:IA32\", \"/QaxSSE3\"]\n \n     def runtime_library_dir_option(self, dir):\n         raise NotImplementedError"
    },
    {
        "commit_id": "4ea71a665599a8b9738508732e0babd35e119450",
        "commit_message": "Merge pull request #6216 from samuelstjean/patch-1\n\nfixed typo",
        "commit_url": "https://github.com/numpy/numpy/commit/4ea71a665599a8b9738508732e0babd35e119450",
        "buggy_code": "array are satisfied (see description for `copy` input paramter), `arr_t`",
        "fixed_code": "array are satisfied (see description for `copy` input parameter), `arr_t`",
        "patch": "@@ -3242,7 +3242,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     -------\n     arr_t : ndarray\n         Unless `copy` is False and the other conditions for returning the input\n-        array are satisfied (see description for `copy` input paramter), `arr_t`\n+        array are satisfied (see description for `copy` input parameter), `arr_t`\n         is a new array of the same shape as the input array, with dtype, order\n         given by `dtype`, `order`.\n "
    },
    {
        "commit_id": "64863aad38a94cbac91ac3ad0cc4cece9a89dcb5",
        "commit_message": "Merge pull request #6185 from piannucci/patch-1\n\nBLD: distutils shouldn't warn unless compiler_cxx is empty",
        "commit_url": "https://github.com/numpy/numpy/commit/64863aad38a94cbac91ac3ad0cc4cece9a89dcb5",
        "buggy_code": "else:",
        "fixed_code": "elif not self.compiler_cxx:",
        "patch": "@@ -385,7 +385,7 @@ def CCompiler_customize(self, dist, need_cxx=0):\n                     a, b = 'cc', 'c++'\n                 self.compiler_cxx = [self.compiler[0].replace(a, b)]\\\n                                     + self.compiler[1:]\n-        else:\n+        elif not self.compiler_cxx:\n             if hasattr(self, 'compiler'):\n                 log.warn(\"#### %s #######\" % (self.compiler,))\n             log.warn('Missing compiler_cxx fix for '+self.__class__.__name__)"
    },
    {
        "commit_id": "a0f3a1ca6ceada489462bcf46dad1a1538f2dfca",
        "commit_message": "Distutils doesn't warn unless compiler_cxx is empty\n\nWarns on OS X with MacPorts Python because it doesn't recognize clang.  There isn't actually a problem, though, as distutils.sysconfig has done its job just fine.  Proposed fix.",
        "commit_url": "https://github.com/numpy/numpy/commit/a0f3a1ca6ceada489462bcf46dad1a1538f2dfca",
        "buggy_code": "else:",
        "fixed_code": "elif not self.compiler_cxx:",
        "patch": "@@ -385,7 +385,7 @@ def CCompiler_customize(self, dist, need_cxx=0):\n                     a, b = 'cc', 'c++'\n                 self.compiler_cxx = [self.compiler[0].replace(a, b)]\\\n                                     + self.compiler[1:]\n-        else:\n+        elif not self.compiler_cxx:\n             if hasattr(self, 'compiler'):\n                 log.warn(\"#### %s #######\" % (self.compiler,))\n             log.warn('Missing compiler_cxx fix for '+self.__class__.__name__)"
    },
    {
        "commit_id": "e4d4b45d26813899c66e112365896aabbb7b19fa",
        "commit_message": "Merge pull request #6174 from anntzer/fft-normalization-docs\n\nFix #2128 once again.",
        "commit_url": "https://github.com/numpy/numpy/commit/e4d4b45d26813899c66e112365896aabbb7b19fa",
        "buggy_code": "fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the mean of",
        "fixed_code": "fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the sum of",
        "patch": "@@ -91,7 +91,7 @@\n is the sampling interval.\n \n The values in the result follow so-called \"standard\" order: If ``A =\n-fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the mean of\n+fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the sum of\n the signal), which is always purely real for real inputs. Then ``A[1:n/2]``\n contains the positive-frequency terms, and ``A[n/2+1:]`` contains the\n negative-frequency terms, in order of decreasingly negative frequency."
    },
    {
        "commit_id": "d25e681b41fe841d758e85308b1fe29529c5b602",
        "commit_message": "Fix #2128 once again.\n\nNot sure why the error was still in the docs.",
        "commit_url": "https://github.com/numpy/numpy/commit/d25e681b41fe841d758e85308b1fe29529c5b602",
        "buggy_code": "fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the mean of",
        "fixed_code": "fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the sum of",
        "patch": "@@ -91,7 +91,7 @@\n is the sampling interval.\n \n The values in the result follow so-called \"standard\" order: If ``A =\n-fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the mean of\n+fft(a, n)``, then ``A[0]`` contains the zero-frequency term (the sum of\n the signal), which is always purely real for real inputs. Then ``A[1:n/2]``\n contains the positive-frequency terms, and ``A[n/2+1:]`` contains the\n negative-frequency terms, in order of decreasingly negative frequency."
    },
    {
        "commit_id": "2ce50d23bce43610a04eaee752fb116d46076187",
        "commit_message": "BLD: some fixes for Intel compilers.\n\n- Fix an incorrect import\n- Enable C99 complex support (Qstd=c99)\n- Don't use MSVC complex types for Intel compilers\n\nThanks to Intel for this patch (contact: Yolanda Chen).",
        "commit_url": "https://github.com/numpy/numpy/commit/2ce50d23bce43610a04eaee752fb116d46076187",
        "buggy_code": "if self.compiler.compiler_type=='msvc':",
        "fixed_code": "if self.compiler.compiler_type in ('msvc', 'intelw', 'intelemw'):",
        "patch": "@@ -420,7 +420,7 @@ def build_extension(self, ext):\n \n         linker = self.compiler.link_shared_object\n         # Always use system linker when using MSVC compiler.\n-        if self.compiler.compiler_type=='msvc':\n+        if self.compiler.compiler_type in ('msvc', 'intelw', 'intelemw'):\n             # expand libraries with fcompiler libraries as we are\n             # not using fcompiler linker\n             self._libs_with_msvc_and_fortran(fcompiler, libraries, library_dirs)"
    },
    {
        "commit_id": "4ec0b91a6308b29979935bec1e6ee30417af9eb2",
        "commit_message": "Merge pull request #6137 from cgohlke/patch-1\n\nTST: fix OverflowError on win-amd64",
        "commit_url": "https://github.com/numpy/numpy/commit/4ec0b91a6308b29979935bec1e6ee30417af9eb2",
        "buggy_code": "if is_64bits:",
        "fixed_code": "if is_64bits and sys.platform != 'win32':",
        "patch": "@@ -27,7 +27,7 @@ def test_hypergeometric_range(self):\n             (2**20 - 2, 2**20 - 2, 2**20 - 2),  # Check for 32-bit systems\n         ]\n         is_64bits = sys.maxsize > 2**32\n-        if is_64bits:\n+        if is_64bits and sys.platform != 'win32':\n             args.append((2**40 - 2, 2**40 - 2, 2**40 - 2)) # Check for 64-bit systems\n         for arg in args:\n             assert_(np.random.hypergeometric(*arg) > 0)"
    },
    {
        "commit_id": "58d41159f4c070fd9e43048d15ce176f2a619871",
        "commit_message": "TST: fix OverflowError on win-amd64",
        "commit_url": "https://github.com/numpy/numpy/commit/58d41159f4c070fd9e43048d15ce176f2a619871",
        "buggy_code": "if is_64bits:",
        "fixed_code": "if is_64bits and sys.platform != 'win32':",
        "patch": "@@ -27,7 +27,7 @@ def test_hypergeometric_range(self):\n             (2**20 - 2, 2**20 - 2, 2**20 - 2),  # Check for 32-bit systems\n         ]\n         is_64bits = sys.maxsize > 2**32\n-        if is_64bits:\n+        if is_64bits and sys.platform != 'win32':\n             args.append((2**40 - 2, 2**40 - 2, 2**40 - 2)) # Check for 64-bit systems\n         for arg in args:\n             assert_(np.random.hypergeometric(*arg) > 0)"
    },
    {
        "commit_id": "3fc27e873c9164bc6772d913a78ffe33a5c1665b",
        "commit_message": "Merge pull request #6092 from ahaldane/raise_warnings_fix\n\nMAINT: fix raise_warnings in np.test in py3",
        "commit_url": "https://github.com/numpy/numpy/commit/3fc27e873c9164bc6772d913a78ffe33a5c1665b",
        "buggy_code": "if raise_warnings in _warn_opts.keys():",
        "fixed_code": "if isinstance(raise_warnings, basestring):",
        "patch": "@@ -401,7 +401,7 @@ def test(self, label='fast', verbose=1, extra_argv=None,\n \n         _warn_opts = dict(develop=(DeprecationWarning, RuntimeWarning),\n                           release=())\n-        if raise_warnings in _warn_opts.keys():\n+        if isinstance(raise_warnings, basestring):\n             raise_warnings = _warn_opts[raise_warnings]\n \n         with warnings.catch_warnings():"
    },
    {
        "commit_id": "038a309d559c265fb04d03d1b3142ca735f42f2d",
        "commit_message": "Merge pull request #6117 from charris/fix-star-imports-f2py\n\nFix star imports f2py",
        "commit_url": "https://github.com/numpy/numpy/commit/038a309d559c265fb04d03d1b3142ca735f42f2d",
        "buggy_code": "array( 54, dtype=self.type.dtype), repr((obj, a.arr)))",
        "fixed_code": "array(54, dtype=self.type.dtype), repr((obj, a.arr)))",
        "patch": "@@ -571,7 +571,7 @@ def test_inplace_from_casttype(self):\n             assert_(obj[1][2] == a.arr[1][2], repr((obj, a.arr)))\n             a.arr[1][2] = 54\n             assert_(obj[1][2] == a.arr[1][2] ==\n-                    array( 54, dtype=self.type.dtype), repr((obj, a.arr)))\n+                    array(54, dtype=self.type.dtype), repr((obj, a.arr)))\n             assert_(a.arr is obj)\n             assert_(obj.flags['FORTRAN'])  # obj attributes changed inplace!\n             assert_(not obj.flags['CONTIGUOUS'])"
    },
    {
        "commit_id": "a92c4a108bd9b2b14f306534ad3105ed76485572",
        "commit_message": "Merge pull request #6126 from astrofrog/fix-histogram-regression\n\nBUG: fixed regression in np.histogram which caused input floating-point values to be modified",
        "commit_url": "https://github.com/numpy/numpy/commit/a92c4a108bd9b2b14f306534ad3105ed76485572",
        "buggy_code": "tmp_a = np.array(tmp_a, dtype=float, copy=False)",
        "fixed_code": "tmp_a = tmp_a.astype(float)",
        "patch": "@@ -232,7 +232,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n                 tmp_a = tmp_a[keep]\n                 if tmp_w is not None:\n                     tmp_w = tmp_w[keep]\n-            tmp_a = np.array(tmp_a, dtype=float, copy=False)\n+            tmp_a = tmp_a.astype(float)\n             tmp_a -= mn\n             tmp_a *= norm\n "
    },
    {
        "commit_id": "ede15881846af7aa6058c89359b9f9190201bfb5",
        "commit_message": "MAINT: fix raise_warnings in np.test in py3\n\nIn python3 np.test would raise an error if raise_warnings is a list\nsince dict.keys() now returns a dict_keys instance. Eg,\n\n    np.test('full', raise_warnings=[FutureWarning])",
        "commit_url": "https://github.com/numpy/numpy/commit/ede15881846af7aa6058c89359b9f9190201bfb5",
        "buggy_code": "if raise_warnings in _warn_opts.keys():",
        "fixed_code": "if isinstance(raise_warnings, basestring):",
        "patch": "@@ -401,7 +401,7 @@ def test(self, label='fast', verbose=1, extra_argv=None,\n \n         _warn_opts = dict(develop=(DeprecationWarning, RuntimeWarning),\n                           release=())\n-        if raise_warnings in _warn_opts.keys():\n+        if isinstance(raise_warnings, basestring):\n             raise_warnings = _warn_opts[raise_warnings]\n \n         with warnings.catch_warnings():"
    },
    {
        "commit_id": "c49821c55b45574cd7d5300ddd4a83f12fcaa7e0",
        "commit_message": "BUG: fixed regression in np.histogram which caused input floating-point values to be modified",
        "commit_url": "https://github.com/numpy/numpy/commit/c49821c55b45574cd7d5300ddd4a83f12fcaa7e0",
        "buggy_code": "tmp_a = np.array(tmp_a, dtype=float, copy=False)",
        "fixed_code": "tmp_a = tmp_a.astype(float)",
        "patch": "@@ -232,7 +232,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,\n                 tmp_a = tmp_a[keep]\n                 if tmp_w is not None:\n                     tmp_w = tmp_w[keep]\n-            tmp_a = np.array(tmp_a, dtype=float, copy=False)\n+            tmp_a = tmp_a.astype(float)\n             tmp_a -= mn\n             tmp_a *= norm\n "
    },
    {
        "commit_id": "9d26d689f07a988dcb55b9b5e0ce6a0c7af71f91",
        "commit_message": "Merge pull request #6052 from insertinterestingnamehere/lib_fix\n\nBUG: Fix handling of dependencies between libraries",
        "commit_url": "https://github.com/numpy/numpy/commit/9d26d689f07a988dcb55b9b5e0ce6a0c7af71f91",
        "buggy_code": "clib_libraries.extend(binfo[1].get('libraries', []))",
        "fixed_code": "clib_libraries.extend(binfo.get('libraries', []))",
        "patch": "@@ -290,6 +290,6 @@ def build_a_library(self, build_info, lib_name, libraries):\n         clib_libraries = build_info.get('libraries', [])\n         for lname, binfo in libraries:\n             if lname in clib_libraries:\n-                clib_libraries.extend(binfo[1].get('libraries', []))\n+                clib_libraries.extend(binfo.get('libraries', []))\n         if clib_libraries:\n             build_info['libraries'] = clib_libraries"
    },
    {
        "commit_id": "a8e9a05b52c5b13c1a5a6709e1e2bf7522cd1654",
        "commit_message": "BUG: Allow libraries to be used as dependencies for other libraries when\ncompiling with numpy.distutils. For example, something like this will now\nwork as a configuration function:\n\ndef configuration():\n    config = Configuration()\n    config.add_library('mylib1', sources=['mylib1.f'])\n    config.add_library('mylib2', sources=['mylib2.f'], libraries=['mylib1'])\n    config.add_extension('pymodule', sources=['pymodule.c'],\n                         libraries=['mylib2'])\n    return config\n\nArbitrary handling of dependencies between libraries is still not\nsupported, but this should make some basic cases work properly.",
        "commit_url": "https://github.com/numpy/numpy/commit/a8e9a05b52c5b13c1a5a6709e1e2bf7522cd1654",
        "buggy_code": "clib_libraries.extend(binfo[1].get('libraries', []))",
        "fixed_code": "clib_libraries.extend(binfo.get('libraries', []))",
        "patch": "@@ -290,6 +290,6 @@ def build_a_library(self, build_info, lib_name, libraries):\n         clib_libraries = build_info.get('libraries', [])\n         for lname, binfo in libraries:\n             if lname in clib_libraries:\n-                clib_libraries.extend(binfo[1].get('libraries', []))\n+                clib_libraries.extend(binfo.get('libraries', []))\n         if clib_libraries:\n             build_info['libraries'] = clib_libraries"
    },
    {
        "commit_id": "bf0c2d169de75bb2d9349e4f95ad322c20ed63bc",
        "commit_message": "Merge pull request #6064 from githubmlai/funatscipy\n\nBUG: made view of new array to fix ix_ bug",
        "commit_url": "https://github.com/numpy/numpy/commit/bf0c2d169de75bb2d9349e4f95ad322c20ed63bc",
        "buggy_code": "new.shape = (1,)*k + (new.size,) + (1,)*(nd-k-1)",
        "fixed_code": "new = new.reshape((1,)*k + (new.size,) + (1,)*(nd-k-1))",
        "patch": "@@ -80,7 +80,7 @@ def ix_(*args):\n             new = new.astype(_nx.intp)\n         if issubdtype(new.dtype, _nx.bool_):\n             new, = new.nonzero()\n-        new.shape = (1,)*k + (new.size,) + (1,)*(nd-k-1)\n+        new = new.reshape((1,)*k + (new.size,) + (1,)*(nd-k-1))\n         out.append(new)\n     return tuple(out)\n "
    },
    {
        "commit_id": "2be00c3fe6f6d84d4449b1cb26452642b48c0661",
        "commit_message": "BUG: made view of new array to fix ix_ bug\n\ncloses gh-6062\n\ndone with help of Sebastian Berg! =)",
        "commit_url": "https://github.com/numpy/numpy/commit/2be00c3fe6f6d84d4449b1cb26452642b48c0661",
        "buggy_code": "new.shape = (1,)*k + (new.size,) + (1,)*(nd-k-1)",
        "fixed_code": "new = new.reshape((1,)*k + (new.size,) + (1,)*(nd-k-1))",
        "patch": "@@ -80,7 +80,7 @@ def ix_(*args):\n             new = new.astype(_nx.intp)\n         if issubdtype(new.dtype, _nx.bool_):\n             new, = new.nonzero()\n-        new.shape = (1,)*k + (new.size,) + (1,)*(nd-k-1)\n+        new = new.reshape((1,)*k + (new.size,) + (1,)*(nd-k-1))\n         out.append(new)\n     return tuple(out)\n "
    },
    {
        "commit_id": "7fa8ab6ac29c1dccf34dae5c53211ace67620ed7",
        "commit_message": "MAINT: Fix some pyflakes warnings in numpy/core/*.py\n\nThese fixes are not agressive as some of the code is complicated\nand it is better to be careful.\n\nThe files numeric.py and numerictypes.py are not easily analysed\nand the latter is self modifying. Pyflakes generates a number of\ninvalid warnings for those files.",
        "commit_url": "https://github.com/numpy/numpy/commit/7fa8ab6ac29c1dccf34dae5c53211ace67620ed7",
        "buggy_code": "from .numeric import array, result_type, NaN",
        "fixed_code": "from .numeric import result_type, NaN",
        "patch": "@@ -3,7 +3,7 @@\n __all__ = ['logspace', 'linspace']\n \n from . import numeric as _nx\n-from .numeric import array, result_type, NaN\n+from .numeric import result_type, NaN\n \n \n def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None):"
    },
    {
        "commit_id": "7fa8ab6ac29c1dccf34dae5c53211ace67620ed7",
        "commit_message": "MAINT: Fix some pyflakes warnings in numpy/core/*.py\n\nThese fixes are not agressive as some of the code is complicated\nand it is better to be careful.\n\nThe files numeric.py and numerictypes.py are not easily analysed\nand the latter is self modifying. Pyflakes generates a number of\ninvalid warnings for those files.",
        "commit_url": "https://github.com/numpy/numpy/commit/7fa8ab6ac29c1dccf34dae5c53211ace67620ed7",
        "buggy_code": "from .numeric import array, asanyarray, newaxis",
        "fixed_code": "from .numeric import asanyarray, newaxis",
        "patch": "@@ -4,7 +4,7 @@\n            'stack']\n \n from . import numeric as _nx\n-from .numeric import array, asanyarray, newaxis\n+from .numeric import asanyarray, newaxis\n \n def atleast_1d(*arys):\n     \"\"\""
    },
    {
        "commit_id": "f5e9adbbf87903e42d03bb3dd5f86b70a89e930c",
        "commit_message": "DOC: Fix docstring warnings in documetation generation.\n\nMost of these fixes involve putting blank lines around\n\n.. versionadded:: x.x.x\n\nand\n\n.. deprecated:: x.x.x\n\nSome of the examples were also fixed.",
        "commit_url": "https://github.com/numpy/numpy/commit/f5e9adbbf87903e42d03bb3dd5f86b70a89e930c",
        "buggy_code": "(e.g. `str.endswith`) and infix operators (e.g. +, *, %)",
        "fixed_code": "(e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)",
        "patch": "@@ -2652,7 +2652,7 @@ class adds the following functionality:\n          end when comparing values\n \n       3) vectorized string operations are provided as methods\n-         (e.g. `str.endswith`) and infix operators (e.g. +, *, %)\n+         (e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)\n \n     Parameters\n     ----------"
    },
    {
        "commit_id": "1e3ab40493fadb5daa67c8a55c5360fd934cca7b",
        "commit_message": "MAINT: move the special case for void comparison before the regular case\n\nThe ndarray richcompare function has special case code for handling\nvoid dtypes (esp. structured dtypes), since there are no ufuncs for\nthis. Previously, we would attempt to call the relevant\nufunc (e.g. np.equal), and then when this failed (as signaled by the\nufunc returning NotImplemented), we would fall back on the special\ncase code. This commit moves the special case code to before the\nregular code, so that it no longer requires ufuncs to return\nNotImplemented.\n\nTechnically, it is possible to define ufunc loops for void dtypes\nusing PyUFunc_RegisterLoopForDescr, so technically I think this commit\nchanges behaviour: if someone had registered a ufunc loop for one of\nthese operations, then previously it might have been found and\npre-empted the special case fallback code; now, we use the\nspecial-case code without even checking for any ufunc. But the only\npossible use of this functionality would have been if someone wanted\nto redefine what == or != meant for a particular structured dtype --\nlike, they decided that equality for 2-tuples of float32's should be\ndifferent from the obvious thing. This does not seem like an important\ncapability to preserve.\n\nThere were also several cases here where on error, an array comparison\nwould return a scalar instead of raising. This is supposedly\ndeprecated, but there were call paths that did this that had no\ndeprecation warning. I added those warnings.",
        "commit_url": "https://github.com/numpy/numpy/commit/1e3ab40493fadb5daa67c8a55c5360fd934cca7b",
        "buggy_code": "\"this will raise the error in the future.\"",
        "fixed_code": "\"this will raise an error in the future.\"",
        "patch": "@@ -383,7 +383,7 @@ class TestComparisonDeprecations(_DeprecationTestCase):\n     \"\"\"\n \n     message = \"elementwise comparison failed; \" \\\n-              \"this will raise the error in the future.\"\n+              \"this will raise an error in the future.\"\n \n     def test_normal_types(self):\n         for op in (operator.eq, operator.ne):"
    },
    {
        "commit_id": "a79d9d35c1b1582e5e0b8487f5dd414d15944f2c",
        "commit_message": "Merge pull request #5893 from stefanv/hann\n\nDOC: Fix spelling of Von Hann's surname",
        "commit_url": "https://github.com/numpy/numpy/commit/a79d9d35c1b1582e5e0b8487f5dd414d15944f2c",
        "buggy_code": "The Hanning was named for Julius van Hann, an Austrian meteorologist.",
        "fixed_code": "The Hanning was named for Julius von Hann, an Austrian meteorologist.",
        "patch": "@@ -2320,7 +2320,7 @@ def hanning(M):\n     .. math::  w(n) = 0.5 - 0.5cos\\\\left(\\\\frac{2\\\\pi{n}}{M-1}\\\\right)\n                \\\\qquad 0 \\\\leq n \\\\leq M-1\n \n-    The Hanning was named for Julius van Hann, an Austrian meteorologist.\n+    The Hanning was named for Julius von Hann, an Austrian meteorologist.\n     It is also known as the Cosine Bell. Some authors prefer that it be\n     called a Hann window, to help avoid confusion with the very similar\n     Hamming window."
    },
    {
        "commit_id": "7897da783e93c43711cf7d5b555674fefba4d16e",
        "commit_message": "DOC: Fix spelling of Von Hann's surname",
        "commit_url": "https://github.com/numpy/numpy/commit/7897da783e93c43711cf7d5b555674fefba4d16e",
        "buggy_code": "The Hanning was named for Julius van Hann, an Austrian meteorologist.",
        "fixed_code": "The Hanning was named for Julius von Hann, an Austrian meteorologist.",
        "patch": "@@ -2248,7 +2248,7 @@ def hanning(M):\n     .. math::  w(n) = 0.5 - 0.5cos\\\\left(\\\\frac{2\\\\pi{n}}{M-1}\\\\right)\n                \\\\qquad 0 \\\\leq n \\\\leq M-1\n \n-    The Hanning was named for Julius van Hann, an Austrian meteorologist.\n+    The Hanning was named for Julius von Hann, an Austrian meteorologist.\n     It is also known as the Cosine Bell. Some authors prefer that it be\n     called a Hann window, to help avoid confusion with the very similar\n     Hamming window."
    },
    {
        "commit_id": "56e9bd5b5a2fe56621c4cb02ad20e9b6e9c9ee9e",
        "commit_message": "Merge pull request #5848 from rgommers/fix-intelcompiler\n\nBUG: distutils: fix a typo in 64-bit Intel compiler for Windows support.",
        "commit_url": "https://github.com/numpy/numpy/commit/56e9bd5b5a2fe56621c4cb02ad20e9b6e9c9ee9e",
        "buggy_code": "compiler_class['intelemw'] = ('intelem64tccompiler', 'IntelEM64TCCompilerW',",
        "fixed_code": "compiler_class['intelemw'] = ('intelccompiler', 'IntelEM64TCCompilerW',",
        "patch": "@@ -532,7 +532,7 @@ def CCompiler_cxx_compiler(self):\n                              \"Intel C Compiler for 64-bit applications\")\n compiler_class['intelw'] = ('intelccompiler', 'IntelCCompilerW',\n                             \"Intel C Compiler for 32-bit applications on Windows\")\n-compiler_class['intelemw'] = ('intelem64tccompiler', 'IntelEM64TCCompilerW',\n+compiler_class['intelemw'] = ('intelccompiler', 'IntelEM64TCCompilerW',\n                               \"Intel C Compiler for 64-bit applications on Windows\")\n compiler_class['pathcc'] = ('pathccompiler', 'PathScaleCCompiler',\n                             \"PathScale Compiler for SiCortex-based applications\")"
    },
    {
        "commit_id": "0c9967bf21a98bb47a64b4f06238f6958e618478",
        "commit_message": "BUG: distutils: fix a typo in 64-bit Intel compiler for Windows support.\n\nSnuck in in gh-5694.",
        "commit_url": "https://github.com/numpy/numpy/commit/0c9967bf21a98bb47a64b4f06238f6958e618478",
        "buggy_code": "compiler_class['intelemw'] = ('intelem64tccompiler', 'IntelEM64TCCompilerW',",
        "fixed_code": "compiler_class['intelemw'] = ('intelccompiler', 'IntelEM64TCCompilerW',",
        "patch": "@@ -532,7 +532,7 @@ def CCompiler_cxx_compiler(self):\n                              \"Intel C Compiler for 64-bit applications\")\n compiler_class['intelw'] = ('intelccompiler', 'IntelCCompilerW',\n                             \"Intel C Compiler for 32-bit applications on Windows\")\n-compiler_class['intelemw'] = ('intelem64tccompiler', 'IntelEM64TCCompilerW',\n+compiler_class['intelemw'] = ('intelccompiler', 'IntelEM64TCCompilerW',\n                               \"Intel C Compiler for 64-bit applications on Windows\")\n compiler_class['pathcc'] = ('pathccompiler', 'PathScaleCCompiler',\n                             \"PathScale Compiler for SiCortex-based applications\")"
    },
    {
        "commit_id": "a29c296f0bf306a8824705567cbb4271f383f0ea",
        "commit_message": "Merge pull request #5838 from matthew-brett/master\n\nBUG: revert use of !python for bdist_mpkg scripts",
        "commit_url": "https://github.com/numpy/numpy/commit/a29c296f0bf306a8824705567cbb4271f383f0ea",
        "buggy_code": "if set(('bdist_wheel', 'bdist_egg', 'bdist_mpkg', 'bdist_wininst',",
        "fixed_code": "if set(('bdist_wheel', 'bdist_egg', 'bdist_wininst',",
        "patch": "@@ -37,7 +37,7 @@ def _get_f2py_shebang():\n     should be ``#!python`` rather than ``#!`` followed by the contents of\n     ``sys.executable``.\n     \"\"\"\n-    if set(('bdist_wheel', 'bdist_egg', 'bdist_mpkg', 'bdist_wininst',\n+    if set(('bdist_wheel', 'bdist_egg', 'bdist_wininst',\n             'bdist_rpm')).intersection(sys.argv):\n         return '#!python'\n     return '#!' + sys.executable"
    },
    {
        "commit_id": "2bc2676c8c2f750b61444560c9f7661cb0c15c6a",
        "commit_message": "BUG: revert use of !python for bdist_mpkg scripts\n\nbdist_mpkg is a very crude install method that will assume the path to\nPython, so we should not use the `#!python` form when installing scripts\nin bdist_mpkg.",
        "commit_url": "https://github.com/numpy/numpy/commit/2bc2676c8c2f750b61444560c9f7661cb0c15c6a",
        "buggy_code": "if set(('bdist_wheel', 'bdist_egg', 'bdist_mpkg', 'bdist_wininst',",
        "fixed_code": "if set(('bdist_wheel', 'bdist_egg', 'bdist_wininst',",
        "patch": "@@ -37,7 +37,7 @@ def _get_f2py_shebang():\n     should be ``#!python`` rather than ``#!`` followed by the contents of\n     ``sys.executable``.\n     \"\"\"\n-    if set(('bdist_wheel', 'bdist_egg', 'bdist_mpkg', 'bdist_wininst',\n+    if set(('bdist_wheel', 'bdist_egg', 'bdist_wininst',\n             'bdist_rpm')).intersection(sys.argv):\n         return '#!python'\n     return '#!' + sys.executable"
    },
    {
        "commit_id": "4679ff2380c01f18ea8cfd2d89838ba53f6381de",
        "commit_message": "Merge pull request #5724 from ContinuumIO/numpy-bug-5719\n\nBUG: Fix segfault with custom dtypes",
        "commit_url": "https://github.com/numpy/numpy/commit/4679ff2380c01f18ea8cfd2d89838ba53f6381de",
        "buggy_code": "from numpy.core.test_rational import *",
        "fixed_code": "from numpy.core.test_rational import rational, test_add, test_add_rationals",
        "patch": "@@ -7,7 +7,7 @@\n import numpy.core.umath_tests as umt\n import numpy.core.operand_flag_tests as opflag_tests\n from numpy.compat import asbytes\n-from numpy.core.test_rational import *\n+from numpy.core.test_rational import rational, test_add, test_add_rationals\n \n \n class TestUfuncKwargs(TestCase):"
    },
    {
        "commit_id": "b3a087ca99506cf7d0b6f88c130efb8718d9d926",
        "commit_message": "Merge pull request #5644 from rgommers/fix-gfortran-version-check\n\nBLD: fix gfortran version check, and make distutils.test() work",
        "commit_url": "https://github.com/numpy/numpy/commit/b3a087ca99506cf7d0b6f88c130efb8718d9d926",
        "buggy_code": "import __config__",
        "fixed_code": "from . import __config__",
        "patch": "@@ -13,7 +13,7 @@\n     from .npy_pkg_config import *\n \n     try:\n-        import __config__\n+        from . import __config__\n         _INSTALLED = True\n     except ImportError:\n         _INSTALLED = False"
    },
    {
        "commit_id": "82a8c8304010948e28d3da2c91582bc88de17cb9",
        "commit_message": "BUG: fix import in distutils/__init__.py under Python 2.x\n\nWithout this fix, _INSTALLED is False and distutils.test() is not available.",
        "commit_url": "https://github.com/numpy/numpy/commit/82a8c8304010948e28d3da2c91582bc88de17cb9",
        "buggy_code": "import __config__",
        "fixed_code": "from . import __config__",
        "patch": "@@ -13,7 +13,7 @@\n     from .npy_pkg_config import *\n \n     try:\n-        import __config__\n+        from . import __config__\n         _INSTALLED = True\n     except ImportError:\n         _INSTALLED = False"
    },
    {
        "commit_id": "4065adbcc4e9d320f41b78922a906f16c6add7cc",
        "commit_message": "Merge pull request #5576 from levitsky/master\n\nMAINT: Fix an error in fmax docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/4065adbcc4e9d320f41b78922a906f16c6add7cc",
        "buggy_code": "The minimum of `x1` and `x2`, element-wise.  Returns scalar if",
        "fixed_code": "The maximum of `x1` and `x2`, element-wise.  Returns scalar if",
        "patch": "@@ -2310,7 +2310,7 @@ def add_newdoc(place, name, doc):\n     Returns\n     -------\n     y : ndarray or scalar\n-        The minimum of `x1` and `x2`, element-wise.  Returns scalar if\n+        The maximum of `x1` and `x2`, element-wise.  Returns scalar if\n         both  `x1` and `x2` are scalars.\n \n     See Also"
    },
    {
        "commit_id": "6acf2969b5b35551dc3363881f4067c18052777a",
        "commit_message": "Fix an error in fmax docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/6acf2969b5b35551dc3363881f4067c18052777a",
        "buggy_code": "The minimum of `x1` and `x2`, element-wise.  Returns scalar if",
        "fixed_code": "The maximum of `x1` and `x2`, element-wise.  Returns scalar if",
        "patch": "@@ -2310,7 +2310,7 @@ def add_newdoc(place, name, doc):\n     Returns\n     -------\n     y : ndarray or scalar\n-        The minimum of `x1` and `x2`, element-wise.  Returns scalar if\n+        The maximum of `x1` and `x2`, element-wise.  Returns scalar if\n         both  `x1` and `x2` are scalars.\n \n     See Also"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -382,4 +382,4 @@ def testView(self):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -156,4 +156,4 @@ def testView(self):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -170,4 +170,4 @@ def __init__(self, methodName=\"runTest\"):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -359,4 +359,4 @@ def __init__(self, methodName=\"runTest\"):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -385,4 +385,4 @@ def __init__(self, methodName=\"runTest\"):\n     print \"NumPy version\", np.__version__\n     print\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -399,4 +399,4 @@ def __init__(self, methodName=\"runTest\"):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "commit_message": "Correct exit code if number of errors % 256 == 0\n\nFor example, we had 256 errors (etc.) our process will exit with a\nsuccessful error code which is incorrect and/or misleading.\n\nSigned-off-by: Chris Lamb <chris@chris-lamb.co.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/9d77ba829ef8f20b0f1741d271ce1c05ef4022e8",
        "buggy_code": "sys.exit(len(result.errors) + len(result.failures))",
        "fixed_code": "sys.exit(bool(result.errors + result.failures))",
        "patch": "@@ -378,4 +378,4 @@ def __init__(self, methodName=\"runTest\"):\n     print(\"NumPy version\", np.__version__)\n     print()\n     result = unittest.TextTestRunner(verbosity=2).run(suite)\n-    sys.exit(len(result.errors) + len(result.failures))\n+    sys.exit(bool(result.errors + result.failures))"
    },
    {
        "commit_id": "3fdce81aff78bffab58717f69dfaff93dffcb0bc",
        "commit_message": "Merge pull request #5540 from sandrotosi/master\n\nDOC: Fix 'dimensions' typo in numpy.kron() help message",
        "commit_url": "https://github.com/numpy/numpy/commit/3fdce81aff78bffab58717f69dfaff93dffcb0bc",
        "buggy_code": "The function assumes that the number of dimenensions of `a` and `b`",
        "fixed_code": "The function assumes that the number of dimensions of `a` and `b`",
        "patch": "@@ -711,7 +711,7 @@ def kron(a, b):\n \n     Notes\n     -----\n-    The function assumes that the number of dimenensions of `a` and `b`\n+    The function assumes that the number of dimensions of `a` and `b`\n     are the same, if necessary prepending the smallest with ones.\n     If `a.shape = (r0,r1,..,rN)` and `b.shape = (s0,s1,...,sN)`,\n     the Kronecker product has shape `(r0*s0, r1*s1, ..., rN*SN)`."
    },
    {
        "commit_id": "0a338f7d8ac8bda597c4ff06068b3b2f3b20ddda",
        "commit_message": "Fix 'dimensions' typo in numpy.kron() help message\n\nThis bug was reported in Debian as: http://bugs.debian.org/777172 .",
        "commit_url": "https://github.com/numpy/numpy/commit/0a338f7d8ac8bda597c4ff06068b3b2f3b20ddda",
        "buggy_code": "The function assumes that the number of dimenensions of `a` and `b`",
        "fixed_code": "The function assumes that the number of dimensions of `a` and `b`",
        "patch": "@@ -711,7 +711,7 @@ def kron(a, b):\n \n     Notes\n     -----\n-    The function assumes that the number of dimenensions of `a` and `b`\n+    The function assumes that the number of dimensions of `a` and `b`\n     are the same, if necessary prepending the smallest with ones.\n     If `a.shape = (r0,r1,..,rN)` and `b.shape = (s0,s1,...,sN)`,\n     the Kronecker product has shape `(r0*s0, r1*s1, ..., rN*SN)`."
    },
    {
        "commit_id": "ea5202880e2e1876d9baa2a65e7987c99be0459b",
        "commit_message": "Merge pull request #5523 from ahaldane/recarray_fixrepr\n\nBUG: recarray __repr__ gives inaccurate representation",
        "commit_url": "https://github.com/numpy/numpy/commit/ea5202880e2e1876d9baa2a65e7987c99be0459b",
        "buggy_code": ">>> arr_records = arr.view(dtype(np.record, arr.dtype))",
        "fixed_code": ">>> arr_records = arr.view(dtype((np.record, arr.dtype)))",
        "patch": "@@ -292,7 +292,7 @@\n To use the np.record dtype only, convert the dtype using the (base_class,\n dtype) form described in numpy.dtype.  This type of view is rarely used. ::\n \n- >>> arr_records = arr.view(dtype(np.record, arr.dtype))\n+ >>> arr_records = arr.view(dtype((np.record, arr.dtype)))\n \n In documentation, the term 'structured array' will refer to objects of type\n np.ndarray with structured dtype, 'record array' will refer to structured"
    },
    {
        "commit_id": "73a74e9e9515ad76d652e998fc1e88074e8cd820",
        "commit_message": "BUG: recarray __repr__ gives inaccurate representation\n\nIn https://github.com/numpy/numpy/pull/5483, I solved the problem that a\n\"recarray\" and a \"record array\" (nomenclature defined in\nhttps://github.com/numpy/numpy/pull/5482) looked identical by making\nsure that a type's subclass was listed in the repr. However, recarrays\nare still represented using the function 'rec.array' even though this\nfunction technically creates record arrays, not recarrays.\n\nSo I have updated recarray.__repr__.\n\nSetup:\n\n    >>> a = np.array([(1,'ABC'), (2, \"DEF\")], dtype=[('foo', int), ('bar', 'S4')])\n    >>> recordarr = np.rec.array(a)\n    >>> recarr = a.view(np.recarray)\n\nBehavior after https://github.com/numpy/numpy/pull/5483:\n\n    >>> recordarr\n    rec.array([(1, 'ABC'), (2, 'DEF')],\n          dtype=(numpy.record, [('foo', '<i8'), ('bar', 'S4')]))\n    >>> recarr\n    rec.array([(1, 'ABC'), (2, 'DEF')],\n          dtype=[('foo', '<i8'), ('bar', 'S4')])\n\nNew Behavior:\n\n    >>> recordarr\n    rec.array([(1, 'ABC'), (2, 'DEF')],\n          dtype=[('foo', '<i8'), ('bar', '|S4')])\n    >>> recarr\n    array([(1, 'ABC'), (2, 'DEF')],\n          dtype=[('foo', '<i8'), ('bar', 'S4')]).view(numpy.recarray)",
        "commit_url": "https://github.com/numpy/numpy/commit/73a74e9e9515ad76d652e998fc1e88074e8cd820",
        "buggy_code": ">>> arr_records = arr.view(dtype(np.record, arr.dtype))",
        "fixed_code": ">>> arr_records = arr.view(dtype((np.record, arr.dtype)))",
        "patch": "@@ -292,7 +292,7 @@\n To use the np.record dtype only, convert the dtype using the (base_class,\n dtype) form described in numpy.dtype.  This type of view is rarely used. ::\n \n- >>> arr_records = arr.view(dtype(np.record, arr.dtype))\n+ >>> arr_records = arr.view(dtype((np.record, arr.dtype)))\n \n In documentation, the term 'structured array' will refer to objects of type\n np.ndarray with structured dtype, 'record array' will refer to structured"
    },
    {
        "commit_id": "add0881d31abd32e48e68fbdb904723bc7014838",
        "commit_message": "Merge pull request #5498 from abdulmuneer/master\n\nDOC: Fixing help documentation error in numpy.zeros. Fixes #5497",
        "commit_url": "https://github.com/numpy/numpy/commit/add0881d31abd32e48e68fbdb904723bc7014838",
        "buggy_code": ">>> np.zeros((5,), dtype=numpy.int)",
        "fixed_code": ">>> np.zeros((5,), dtype=np.int)",
        "patch": "@@ -885,7 +885,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     >>> np.zeros(5)\n     array([ 0.,  0.,  0.,  0.,  0.])\n \n-    >>> np.zeros((5,), dtype=numpy.int)\n+    >>> np.zeros((5,), dtype=np.int)\n     array([0, 0, 0, 0, 0])\n \n     >>> np.zeros((2, 1))"
    },
    {
        "commit_id": "76e6aa6bbb063992368aca4a622bb2ba31526fc8",
        "commit_message": "DOC: Fixing help documentation error in numpy.zeros. Fixes #5497 [skip ci]",
        "commit_url": "https://github.com/numpy/numpy/commit/76e6aa6bbb063992368aca4a622bb2ba31526fc8",
        "buggy_code": ">>> np.zeros((5,), dtype=numpy.int)",
        "fixed_code": ">>> np.zeros((5,), dtype=np.int)",
        "patch": "@@ -885,7 +885,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     >>> np.zeros(5)\n     array([ 0.,  0.,  0.,  0.,  0.])\n \n-    >>> np.zeros((5,), dtype=numpy.int)\n+    >>> np.zeros((5,), dtype=np.int)\n     array([0, 0, 0, 0, 0])\n \n     >>> np.zeros((2, 1))"
    },
    {
        "commit_id": "bef3f08e778470ea23abbd27e5d4ef3064aa00ef",
        "commit_message": "Merge pull request #5442 from tdihp/patch-1\n\nFix typo in slogdet doc",
        "commit_url": "https://github.com/numpy/numpy/commit/bef3f08e778470ea23abbd27e5d4ef3064aa00ef",
        "buggy_code": "If an array has a very small or very large determinant, than a call to",
        "fixed_code": "If an array has a very small or very large determinant, then a call to",
        "patch": "@@ -1600,7 +1600,7 @@ def slogdet(a):\n     \"\"\"\n     Compute the sign and (natural) logarithm of the determinant of an array.\n \n-    If an array has a very small or very large determinant, than a call to\n+    If an array has a very small or very large determinant, then a call to\n     `det` may overflow or underflow. This routine is more robust against such\n     issues, because it computes the logarithm of the determinant rather than\n     the determinant itself."
    },
    {
        "commit_id": "22a9c89e0c20ed1314b771579b129d91416d8823",
        "commit_message": "Fix typo in slogdet doc\n\nfix typo in slogdet docstring\r\n\r\n\"than\" -> \"then\"",
        "commit_url": "https://github.com/numpy/numpy/commit/22a9c89e0c20ed1314b771579b129d91416d8823",
        "buggy_code": "If an array has a very small or very large determinant, than a call to",
        "fixed_code": "If an array has a very small or very large determinant, then a call to",
        "patch": "@@ -1600,7 +1600,7 @@ def slogdet(a):\n     \"\"\"\n     Compute the sign and (natural) logarithm of the determinant of an array.\n \n-    If an array has a very small or very large determinant, than a call to\n+    If an array has a very small or very large determinant, then a call to\n     `det` may overflow or underflow. This routine is more robust against such\n     issues, because it computes the logarithm of the determinant rather than\n     the determinant itself."
    },
    {
        "commit_id": "aaf5429e327c098ccf25ac4ab901348ff662847b",
        "commit_message": "Merge pull request #5432 from jrjohansson/polynomial-docstring-updates\n\nMinor docstring fix",
        "commit_url": "https://github.com/numpy/numpy/commit/aaf5429e327c098ccf25ac4ab901348ff662847b",
        "buggy_code": "Laguerre coefficients in order of increasing degree, i.e,",
        "fixed_code": "Hermite coefficients in order of increasing degree, i.e,",
        "patch": "@@ -1799,7 +1799,7 @@ class Hermite(ABCPolyBase):\n     Parameters\n     ----------\n     coef : array_like\n-        Laguerre coefficients in order of increasing degree, i.e,\n+        Hermite coefficients in order of increasing degree, i.e,\n         ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped"
    },
    {
        "commit_id": "aaf5429e327c098ccf25ac4ab901348ff662847b",
        "commit_message": "Merge pull request #5432 from jrjohansson/polynomial-docstring-updates\n\nMinor docstring fix",
        "commit_url": "https://github.com/numpy/numpy/commit/aaf5429e327c098ccf25ac4ab901348ff662847b",
        "buggy_code": "Laguerre coefficients in order of increasing degree, i.e,",
        "fixed_code": "HermiteE coefficients in order of increasing degree, i.e,",
        "patch": "@@ -1796,7 +1796,7 @@ class HermiteE(ABCPolyBase):\n     Parameters\n     ----------\n     coef : array_like\n-        Laguerre coefficients in order of increasing degree, i.e,\n+        HermiteE coefficients in order of increasing degree, i.e,\n         ``(1, 2, 3)`` gives ``1*He_0(x) + 2*He_1(X) + 3*He_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped"
    },
    {
        "commit_id": "04bf8c92fd920675bc765fadc62f4d7ff6ede9b4",
        "commit_message": "Minor docstring fix",
        "commit_url": "https://github.com/numpy/numpy/commit/04bf8c92fd920675bc765fadc62f4d7ff6ede9b4",
        "buggy_code": "Laguerre coefficients in order of increasing degree, i.e,",
        "fixed_code": "Hermite coefficients in order of increasing degree, i.e,",
        "patch": "@@ -1799,7 +1799,7 @@ class Hermite(ABCPolyBase):\n     Parameters\n     ----------\n     coef : array_like\n-        Laguerre coefficients in order of increasing degree, i.e,\n+        Hermite coefficients in order of increasing degree, i.e,\n         ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped"
    },
    {
        "commit_id": "04bf8c92fd920675bc765fadc62f4d7ff6ede9b4",
        "commit_message": "Minor docstring fix",
        "commit_url": "https://github.com/numpy/numpy/commit/04bf8c92fd920675bc765fadc62f4d7ff6ede9b4",
        "buggy_code": "Laguerre coefficients in order of increasing degree, i.e,",
        "fixed_code": "HermiteE coefficients in order of increasing degree, i.e,",
        "patch": "@@ -1796,7 +1796,7 @@ class HermiteE(ABCPolyBase):\n     Parameters\n     ----------\n     coef : array_like\n-        Laguerre coefficients in order of increasing degree, i.e,\n+        HermiteE coefficients in order of increasing degree, i.e,\n         ``(1, 2, 3)`` gives ``1*He_0(x) + 2*He_1(X) + 3*He_2(x)``.\n     domain : (2,) array_like, optional\n         Domain to use. The interval ``[domain[0], domain[1]]`` is mapped"
    },
    {
        "commit_id": "1f6084a48b3a8a3b417573ac8aaf6932e585ccd0",
        "commit_message": "Merge pull request #5403 from Juanlu001/patch-1\n\nRemove NotImplementedError for MinGW-w64",
        "commit_url": "https://github.com/numpy/numpy/commit/1f6084a48b3a8a3b417573ac8aaf6932e585ccd0",
        "buggy_code": "raise NotImplementedError(\"Only MS compiler supported with gfortran on win64\")",
        "fixed_code": "pass",
        "patch": "@@ -335,7 +335,7 @@ def get_libraries(self):\n                 if c_compiler and c_compiler.compiler_type == \"msvc\":\n                     return []\n                 else:\n-                    raise NotImplementedError(\"Only MS compiler supported with gfortran on win64\")\n+                    pass\n         return opt\n \n     def get_target(self):"
    },
    {
        "commit_id": "2be7ec4d0a65102b0d68cf75d6d877aecd71a524",
        "commit_message": "Merge pull request #5374 from lebigot/patch-1\n\nDOC: Fixed incorrect assert_array_almost_equal_nulp documentation",
        "commit_url": "https://github.com/numpy/numpy/commit/2be7ec4d0a65102b0d68cf75d6d877aecd71a524",
        "buggy_code": "abs(x - y) <= nulps * spacing(max(abs(x), abs(y)))",
        "fixed_code": "abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))",
        "patch": "@@ -1331,7 +1331,7 @@ def assert_array_almost_equal_nulp(x, y, nulp=1):\n     -----\n     An assertion is raised if the following condition is not met::\n \n-        abs(x - y) <= nulps * spacing(max(abs(x), abs(y)))\n+        abs(x - y) <= nulps * spacing(maximum(abs(x), abs(y)))\n \n     Examples\n     --------"
    },
    {
        "commit_id": "819b3a8a019469774a5343afd87ec71ec696bf80",
        "commit_message": "BUG: Closes #2015: diag returns ndarray\n\nIf x is a matrix, np.diag(x) and np.diagonal(x) now return matrices\ninstead of arrays.  Both of these cause x.diagonal() to be called.\nThat means they return row vectors (just like x.flatten(), x.ravel(),\nx.cumprod(), etc.)",
        "commit_url": "https://github.com/numpy/numpy/commit/819b3a8a019469774a5343afd87ec71ec696bf80",
        "buggy_code": "return asarray(a).diagonal(offset, axis1, axis2)",
        "fixed_code": "return asanyarray(a).diagonal(offset, axis1, axis2)",
        "patch": "@@ -1268,7 +1268,7 @@ def diagonal(a, offset=0, axis1=0, axis2=1):\n            [5, 7]])\n \n     \"\"\"\n-    return asarray(a).diagonal(offset, axis1, axis2)\n+    return asanyarray(a).diagonal(offset, axis1, axis2)\n \n \n def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):"
    },
    {
        "commit_id": "819b3a8a019469774a5343afd87ec71ec696bf80",
        "commit_message": "BUG: Closes #2015: diag returns ndarray\n\nIf x is a matrix, np.diag(x) and np.diagonal(x) now return matrices\ninstead of arrays.  Both of these cause x.diagonal() to be called.\nThat means they return row vectors (just like x.flatten(), x.ravel(),\nx.cumprod(), etc.)",
        "commit_url": "https://github.com/numpy/numpy/commit/819b3a8a019469774a5343afd87ec71ec696bf80",
        "buggy_code": "v = asarray(v)",
        "fixed_code": "v = asanyarray(v)",
        "patch": "@@ -293,7 +293,7 @@ def diag(v, k=0):\n            [0, 0, 8]])\n \n     \"\"\"\n-    v = asarray(v)\n+    v = asanyarray(v)\n     s = v.shape\n     if len(s) == 1:\n         n = s[0]+abs(k)"
    },
    {
        "commit_id": "545d485751b3b2c1f68e36dbc4ea64ca50876a59",
        "commit_message": "Merge pull request #5349 from bobpoekert/patch-1\n\nChange pronoun in doc string from \"his\" to gender-neutral \"their\"",
        "commit_url": "https://github.com/numpy/numpy/commit/545d485751b3b2c1f68e36dbc4ea64ca50876a59",
        "buggy_code": "able to create a solution in his preferred programming language to",
        "fixed_code": "able to create a solution in their preferred programming language to",
        "patch": "@@ -35,7 +35,7 @@\n \n - Is straightforward to reverse engineer. Datasets often live longer than\n   the programs that created them. A competent developer should be\n-  able to create a solution in his preferred programming language to\n+  able to create a solution in their preferred programming language to\n   read most ``.npy`` files that he has been given without much\n   documentation.\n "
    },
    {
        "commit_id": "23ee379e86434518bc33ccd9e711a86188914de0",
        "commit_message": "Merge pull request #5238 from yuvallanger/patch-1\n\nReplacing list with generator compherension",
        "commit_url": "https://github.com/numpy/numpy/commit/23ee379e86434518bc33ccd9e711a86188914de0",
        "buggy_code": "maxlen = max([len(name) for name in names])",
        "fixed_code": "maxlen = max(len(name) for name in names)",
        "patch": "@@ -268,7 +268,7 @@ def pprint(self):\n         \"\"\"Pretty-print all fields.\"\"\"\n         # pretty-print all fields\n         names = self.dtype.names\n-        maxlen = max([len(name) for name in names])\n+        maxlen = max(len(name) for name in names)\n         rows = []\n         fmt = '%% %ds: %%s' % maxlen\n         for name in names:"
    },
    {
        "commit_id": "df9db6ed5f9c9e315993f4efed5dba613e6cd84c",
        "commit_message": "Merge pull request #5206 from WarrenWeckesser/typo\n\nMAINT: Fix typo in the 'issubclass' docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/df9db6ed5f9c9e315993f4efed5dba613e6cd84c",
        "buggy_code": "except that it returns False instead of raising a TypeError is one",
        "fixed_code": "except that it returns False instead of raising a TypeError if one",
        "patch": "@@ -670,7 +670,7 @@ def issubclass_(arg1, arg2):\n     Determine if a class is a subclass of a second class.\n \n     `issubclass_` is equivalent to the Python built-in ``issubclass``,\n-    except that it returns False instead of raising a TypeError is one\n+    except that it returns False instead of raising a TypeError if one\n     of the arguments is not a class.\n \n     Parameters"
    },
    {
        "commit_id": "6114f1c963ad011d276701967864f339e8e45ae0",
        "commit_message": "MAINT: Fix typo in the 'issubclass' docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/6114f1c963ad011d276701967864f339e8e45ae0",
        "buggy_code": "except that it returns False instead of raising a TypeError is one",
        "fixed_code": "except that it returns False instead of raising a TypeError if one",
        "patch": "@@ -670,7 +670,7 @@ def issubclass_(arg1, arg2):\n     Determine if a class is a subclass of a second class.\n \n     `issubclass_` is equivalent to the Python built-in ``issubclass``,\n-    except that it returns False instead of raising a TypeError is one\n+    except that it returns False instead of raising a TypeError if one\n     of the arguments is not a class.\n \n     Parameters"
    },
    {
        "commit_id": "e6e2bb0f4a225559eff23089d84a57c0f2862221",
        "commit_message": "Merge pull request #5160 from bdkearns/master\n\nfix intention of loop in test_copyto_permut",
        "commit_url": "https://github.com/numpy/numpy/commit/e6e2bb0f4a225559eff23089d84a57c0f2862221",
        "buggy_code": "imask[mask != 0] = 0xFF",
        "fixed_code": "imask[mask != 0] = c",
        "patch": "@@ -377,7 +377,7 @@ def test_copyto_permut():\n             r = np.zeros(power)\n             mask = np.array(l)\n             imask = np.array(l).view(np.uint8)\n-            imask[mask != 0] = 0xFF\n+            imask[mask != 0] = c\n             np.copyto(r, d, where=mask)\n             assert_array_equal(r == 1, l)\n             assert_equal(r.sum(), sum(l))"
    },
    {
        "commit_id": "ee7ca7d14cc073453b00d73102046515ea1b077c",
        "commit_message": "fix intention of loop in test_copyto_permut",
        "commit_url": "https://github.com/numpy/numpy/commit/ee7ca7d14cc073453b00d73102046515ea1b077c",
        "buggy_code": "imask[mask != 0] = 0xFF",
        "fixed_code": "imask[mask != 0] = c",
        "patch": "@@ -377,7 +377,7 @@ def test_copyto_permut():\n             r = np.zeros(power)\n             mask = np.array(l)\n             imask = np.array(l).view(np.uint8)\n-            imask[mask != 0] = 0xFF\n+            imask[mask != 0] = c\n             np.copyto(r, d, where=mask)\n             assert_array_equal(r == 1, l)\n             assert_equal(r.sum(), sum(l))"
    },
    {
        "commit_id": "fc5d32af378dcb86ec05fd0a2b63c5bdaef37cc8",
        "commit_message": "Merge pull request #5099 from perimosocordiae/patch-1\n\nBUG: np.unique with chararray + inverse_index",
        "commit_url": "https://github.com/numpy/numpy/commit/fc5d32af378dcb86ec05fd0a2b63c5bdaef37cc8",
        "buggy_code": "inv_idx = np.empty_like(ar, dtype=np.intp)",
        "fixed_code": "inv_idx = np.empty(ar.shape, dtype=np.intp)",
        "patch": "@@ -204,7 +204,7 @@ def unique(ar, return_index=False, return_inverse=False, return_counts=False):\n             ret += (perm[flag],)\n         if return_inverse:\n             iflag = np.cumsum(flag) - 1\n-            inv_idx = np.empty_like(ar, dtype=np.intp)\n+            inv_idx = np.empty(ar.shape, dtype=np.intp)\n             inv_idx[perm] = iflag\n             ret += (inv_idx,)\n         if return_counts:"
    },
    {
        "commit_id": "7efd5cf4cc6cd45f6114fdbc3fbfd619ddf03deb",
        "commit_message": "BUG: np.unique with chararray + inverse_index\n\nThe call to `empty_like` was trying to use the `chararray` subclass,\nwhich doesn't support the `np.intp` dtype.",
        "commit_url": "https://github.com/numpy/numpy/commit/7efd5cf4cc6cd45f6114fdbc3fbfd619ddf03deb",
        "buggy_code": "inv_idx = np.empty_like(ar, dtype=np.intp)",
        "fixed_code": "inv_idx = np.empty(ar.shape, dtype=np.intp)",
        "patch": "@@ -204,7 +204,7 @@ def unique(ar, return_index=False, return_inverse=False, return_counts=False):\n             ret += (perm[flag],)\n         if return_inverse:\n             iflag = np.cumsum(flag) - 1\n-            inv_idx = np.empty_like(ar, dtype=np.intp)\n+            inv_idx = np.empty(ar.shape, dtype=np.intp)\n             inv_idx[perm] = iflag\n             ret += (inv_idx,)\n         if return_counts:"
    },
    {
        "commit_id": "f137171136bd8ea244dcd9dc73278f6201f24dd6",
        "commit_message": "Merge pull request #5053 from Gabriel-p/typo-percentile\n\nDOC: fix typo in np.percentile docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/f137171136bd8ea244dcd9dc73278f6201f24dd6",
        "buggy_code": "as the minimum if ``q=0``and the same as the maximum if ``q=100``.",
        "fixed_code": "as the minimum if ``q=0`` and the same as the maximum if ``q=100``.",
        "patch": "@@ -3003,7 +3003,7 @@ def percentile(a, q, axis=None, out=None,\n     nearest neighbors as well as the `interpolation` parameter will\n     determine the percentile if the normalized ranking does not match q\n     exactly. This function is the same as the median if ``q=50``, the same\n-    as the minimum if ``q=0``and the same as the maximum if ``q=100``.\n+    as the minimum if ``q=0`` and the same as the maximum if ``q=100``.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "078af947372fac6a83d95d1ed6fd0585b05f86fd",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/numpy/numpy/commit/078af947372fac6a83d95d1ed6fd0585b05f86fd",
        "buggy_code": "as the minimum if ``q=0``and the same as the maximum if ``q=100``.",
        "fixed_code": "as the minimum if ``q=0`` and the same as the maximum if ``q=100``.",
        "patch": "@@ -3003,7 +3003,7 @@ def percentile(a, q, axis=None, out=None,\n     nearest neighbors as well as the `interpolation` parameter will\n     determine the percentile if the normalized ranking does not match q\n     exactly. This function is the same as the median if ``q=50``, the same\n-    as the minimum if ``q=0``and the same as the maximum if ``q=100``.\n+    as the minimum if ``q=0`` and the same as the maximum if ``q=100``.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "77703de7a14c66dcba6ee89bdd7b084ba70f056c",
        "commit_message": "Merge pull request #5048 from juliantaylor/subclass-test-fix\n\nBUG: fix array_almost_equal for array subclasses",
        "commit_url": "https://github.com/numpy/numpy/commit/77703de7a14c66dcba6ee89bdd7b084ba70f056c",
        "buggy_code": "y = array(y, dtype=dtype, copy=False)",
        "fixed_code": "y = array(y, dtype=dtype, copy=False, subok=True)",
        "patch": "@@ -829,7 +829,7 @@ def compare(x, y):\n         # make sure y is an inexact type to avoid abs(MIN_INT); will cause\n         # casting of x later.\n         dtype = result_type(y, 1.)\n-        y = array(y, dtype=dtype, copy=False)\n+        y = array(y, dtype=dtype, copy=False, subok=True)\n         z = abs(x-y)\n \n         if not issubdtype(z.dtype, number):"
    },
    {
        "commit_id": "dfc567790badcc87822a39f5c35f0dd78b8c1599",
        "commit_message": "BUG: fix array_almost_equal for array subclasses\n\nintroduced in gh-4105/ab04e1ae0e8eca717bc7e42f3b0a60c9ff764289",
        "commit_url": "https://github.com/numpy/numpy/commit/dfc567790badcc87822a39f5c35f0dd78b8c1599",
        "buggy_code": "y = array(y, dtype=dtype, copy=False)",
        "fixed_code": "y = array(y, dtype=dtype, copy=False, subok=True)",
        "patch": "@@ -823,7 +823,7 @@ def compare(x, y):\n         # make sure y is an inexact type to avoid abs(MIN_INT); will cause\n         # casting of x later.\n         dtype = result_type(y, 1.)\n-        y = array(y, dtype=dtype, copy=False)\n+        y = array(y, dtype=dtype, copy=False, subok=True)\n         z = abs(x-y)\n \n         if not issubdtype(z.dtype, number):"
    },
    {
        "commit_id": "4a501a066061ae957b6ccfd752f503da6a5e3337",
        "commit_message": "Merge pull request #5025 from pp-mo/assert_allclose_percent\n\nBUG: fix percentage reporting when testing.assert_allclose fails.",
        "commit_url": "https://github.com/numpy/numpy/commit/4a501a066061ae957b6ccfd752f503da6a5e3337",
        "buggy_code": "return np.allclose(x, y, rtol=rtol, atol=atol)",
        "fixed_code": "return np.core.numeric._allclose_points(x, y, rtol=rtol, atol=atol)",
        "patch": "@@ -1289,7 +1289,7 @@ def assert_allclose(actual, desired, rtol=1e-7, atol=0,\n     \"\"\"\n     import numpy as np\n     def compare(x, y):\n-        return np.allclose(x, y, rtol=rtol, atol=atol)\n+        return np.core.numeric._allclose_points(x, y, rtol=rtol, atol=atol)\n \n     actual, desired = np.asanyarray(actual), np.asanyarray(desired)\n     header = 'Not equal to tolerance rtol=%g, atol=%g' % (rtol, atol)"
    },
    {
        "commit_id": "4097ec3ec10c41d399518867f4bebb0a53ee8a5c",
        "commit_message": "BUG: fix percentage reporting when testing.assert_allclose fails.",
        "commit_url": "https://github.com/numpy/numpy/commit/4097ec3ec10c41d399518867f4bebb0a53ee8a5c",
        "buggy_code": "return np.allclose(x, y, rtol=rtol, atol=atol)",
        "fixed_code": "return np.core.numeric._allclose_points(x, y, rtol=rtol, atol=atol)",
        "patch": "@@ -1289,7 +1289,7 @@ def assert_allclose(actual, desired, rtol=1e-7, atol=0,\n     \"\"\"\n     import numpy as np\n     def compare(x, y):\n-        return np.allclose(x, y, rtol=rtol, atol=atol)\n+        return np.core.numeric._allclose_points(x, y, rtol=rtol, atol=atol)\n \n     actual, desired = np.asanyarray(actual), np.asanyarray(desired)\n     header = 'Not equal to tolerance rtol=%g, atol=%g' % (rtol, atol)"
    },
    {
        "commit_id": "14e4cc3aa8bc6e01d6494860c7de6bf9ec0ab86b",
        "commit_message": "Merge pull request #4989 from juliantaylor/percentile-fix\n\nBUG: don't overwrite input percentile arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/14e4cc3aa8bc6e01d6494860c7de6bf9ec0ab86b",
        "buggy_code": "q = asarray(q, dtype=np.float64)",
        "fixed_code": "q = array(q, dtype=np.float64, copy=True)",
        "patch": "@@ -3036,7 +3036,7 @@ def percentile(a, q, axis=None, out=None,\n     array([ 3.5])\n \n     \"\"\"\n-    q = asarray(q, dtype=np.float64)\n+    q = array(q, dtype=np.float64, copy=True)\n     r, k = _ureduce(a, func=_percentile, q=q, axis=axis, out=out,\n                     overwrite_input=overwrite_input,\n                     interpolation=interpolation)"
    },
    {
        "commit_id": "040d0408f4cdb0a472e654acd68c8e1c3fbd84f7",
        "commit_message": "BUG: don't overwrite input percentile arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/040d0408f4cdb0a472e654acd68c8e1c3fbd84f7",
        "buggy_code": "q = asarray(q, dtype=np.float64)",
        "fixed_code": "q = array(q, dtype=np.float64, copy=True)",
        "patch": "@@ -3031,7 +3031,7 @@ def percentile(a, q, axis=None, out=None,\n     array([ 3.5])\n \n     \"\"\"\n-    q = asarray(q, dtype=np.float64)\n+    q = array(q, dtype=np.float64, copy=True)\n     r, k = _ureduce(a, func=_percentile, q=q, axis=axis, out=out,\n                     overwrite_input=overwrite_input,\n                     interpolation=interpolation)"
    },
    {
        "commit_id": "5ce8e067508ff1fed04b454b1559355aaaea7891",
        "commit_message": "Merge pull request #4941 from charris/fix-numpy-compat-_inspect\n\nFix numpy compat  _inspect",
        "commit_url": "https://github.com/numpy/numpy/commit/5ce8e067508ff1fed04b454b1559355aaaea7891",
        "buggy_code": "from numpy.distutils.core      import setup",
        "fixed_code": "from numpy.distutils.core import setup",
        "patch": "@@ -8,5 +8,5 @@ def configuration(parent_package='',top_path=None):\n     return config\n \n if __name__ == '__main__':\n-    from numpy.distutils.core      import setup\n+    from numpy.distutils.core import setup\n     setup(configuration=configuration)"
    },
    {
        "commit_id": "5ce8e067508ff1fed04b454b1559355aaaea7891",
        "commit_message": "Merge pull request #4941 from charris/fix-numpy-compat-_inspect\n\nFix numpy compat  _inspect",
        "commit_url": "https://github.com/numpy/numpy/commit/5ce8e067508ff1fed04b454b1559355aaaea7891",
        "buggy_code": "from numpy.testing import TestCase, assert_",
        "fixed_code": "from numpy.testing import assert_",
        "patch": "@@ -1,7 +1,7 @@\n from os.path import join\n \n from numpy.compat import isfileobj\n-from numpy.testing import TestCase, assert_\n+from numpy.testing import assert_\n from numpy.testing.utils import tempdir\n \n "
    },
    {
        "commit_id": "e65c9aabc4705ffe7767aaa411380248c642b251",
        "commit_message": "Merge pull request #4938 from charris/fix-docstring-typo\n\nDOC: Fix typo in _iotools.py docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/e65c9aabc4705ffe7767aaa411380248c642b251",
        "buggy_code": "Rind the best converter for a given string, and return the result.",
        "fixed_code": "Find the best converter for a given string, and return the result.",
        "patch": "@@ -687,7 +687,7 @@ def __call__(self, value):\n \n     def upgrade(self, value):\n         \"\"\"\n-        Rind the best converter for a given string, and return the result.\n+        Find the best converter for a given string, and return the result.\n \n         The supplied string `value` is converted by testing different\n         converters in order. First the `func` method of the"
    },
    {
        "commit_id": "3eb219fd97200282b6aed9fe760e843d4916bc06",
        "commit_message": "BUG: Fix bugs in unused code paths.\n\nThe `getargspec` needed to import the disassembler to support parsing\ntuple arguments. Since numpy never uses those, the corresponding code\nis deleted and an TypeError raised if such arguments are encountered.\n\nAlso fix the unused formatargs function so it does not require the\nstring module.",
        "commit_url": "https://github.com/numpy/numpy/commit/3eb219fd97200282b6aed9fe760e843d4916bc06",
        "buggy_code": "from numpy.testing import TestCase, assert_",
        "fixed_code": "from numpy.testing import assert_",
        "patch": "@@ -1,7 +1,7 @@\n from os.path import join\n \n from numpy.compat import isfileobj\n-from numpy.testing import TestCase, assert_\n+from numpy.testing import assert_\n from numpy.testing.utils import tempdir\n \n "
    },
    {
        "commit_id": "34698b64f90b985396f123f3659edc7a95d232ee",
        "commit_message": "DOC: Fix typo in _iotools.py docstring.\n\nThe error is in the StringConverter.upgrade docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/34698b64f90b985396f123f3659edc7a95d232ee",
        "buggy_code": "Rind the best converter for a given string, and return the result.",
        "fixed_code": "Find the best converter for a given string, and return the result.",
        "patch": "@@ -687,7 +687,7 @@ def __call__(self, value):\n \n     def upgrade(self, value):\n         \"\"\"\n-        Rind the best converter for a given string, and return the result.\n+        Find the best converter for a given string, and return the result.\n \n         The supplied string `value` is converted by testing different\n         converters in order. First the `func` method of the"
    },
    {
        "commit_id": "b2955ede452b8ca2aae5d0b035cd19c8a3b12480",
        "commit_message": "MAINT: Fix problems noted by pyflakes in numpy/lib/tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/b2955ede452b8ca2aae5d0b035cd19c8a3b12480",
        "buggy_code": "from numpy.compat import asbytes, asbytes_nested",
        "fixed_code": "from numpy.compat import asbytes_nested",
        "patch": "@@ -15,7 +15,7 @@\n     )\n \n import numpy as np\n-from numpy.compat import asbytes, asbytes_nested\n+from numpy.compat import asbytes_nested\n \n \n def get_mat(n):"
    },
    {
        "commit_id": "2243feef3ca8fb8c511b71b26d6bf6114e44c069",
        "commit_message": "BUG: Fix typo in hermite_e.py.\n\nThe hermepow function was incorrectly listed in __all__ as hermpow.",
        "commit_url": "https://github.com/numpy/numpy/commit/2243feef3ca8fb8c511b71b26d6bf6114e44c069",
        "buggy_code": "'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv', 'hermpow',",
        "fixed_code": "'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv', 'hermepow',",
        "patch": "@@ -67,7 +67,7 @@\n from ._polybase import ABCPolyBase\n \n __all__ = ['hermezero', 'hermeone', 'hermex', 'hermedomain', 'hermeline',\n-    'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv', 'hermpow',\n+    'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv', 'hermepow',\n     'hermeval',\n     'hermeder', 'hermeint', 'herme2poly', 'poly2herme', 'hermefromroots',\n     'hermevander', 'hermefit', 'hermetrim', 'hermeroots', 'HermiteE',"
    },
    {
        "commit_id": "88cf0e4f6d722b12f2d57e3acb6452d6a015cc93",
        "commit_message": "DOC: fix return shape of tensorinv doc",
        "commit_url": "https://github.com/numpy/numpy/commit/88cf0e4f6d722b12f2d57e3acb6452d6a015cc93",
        "buggy_code": "`a`'s tensordot inverse, shape ``a.shape[:ind] + a.shape[ind:]``.",
        "fixed_code": "`a`'s tensordot inverse, shape ``a.shape[ind:] + a.shape[:ind]``.",
        "patch": "@@ -404,7 +404,7 @@ def tensorinv(a, ind=2):\n     Returns\n     -------\n     b : ndarray\n-        `a`'s tensordot inverse, shape ``a.shape[:ind] + a.shape[ind:]``.\n+        `a`'s tensordot inverse, shape ``a.shape[ind:] + a.shape[:ind]``.\n \n     Raises\n     ------"
    },
    {
        "commit_id": "4e3a24bb57909d9fb678c1a16e3baf414202f229",
        "commit_message": "Merge pull request #4828 from ogrisel/fix-isfileobj-py3\n\nFIX isfileobj accepts write-mode files under PY3",
        "commit_url": "https://github.com/numpy/numpy/commit/4e3a24bb57909d9fb678c1a16e3baf414202f229",
        "buggy_code": "return isinstance(f, (io.FileIO, io.BufferedReader))",
        "fixed_code": "return isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter))",
        "patch": "@@ -36,7 +36,7 @@ def asstr(s):\n         return str(s)\n \n     def isfileobj(f):\n-        return isinstance(f, (io.FileIO, io.BufferedReader))\n+        return isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter))\n \n     def open_latin1(filename, mode='r'):\n         return open(filename, mode=mode, encoding='iso-8859-1')"
    },
    {
        "commit_id": "6efd8493f8b491557a34dbbc176565b759f89b52",
        "commit_message": "FIX isfileobj accepts write-mode files under PY3",
        "commit_url": "https://github.com/numpy/numpy/commit/6efd8493f8b491557a34dbbc176565b759f89b52",
        "buggy_code": "return isinstance(f, (io.FileIO, io.BufferedReader))",
        "fixed_code": "return isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter))",
        "patch": "@@ -36,7 +36,7 @@ def asstr(s):\n         return str(s)\n \n     def isfileobj(f):\n-        return isinstance(f, (io.FileIO, io.BufferedReader))\n+        return isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter))\n \n     def open_latin1(filename, mode='r'):\n         return open(filename, mode=mode, encoding='iso-8859-1')"
    },
    {
        "commit_id": "b1c69df01b673cc086065112da6780d8548a0dfa",
        "commit_message": "Merge pull request #4764 from KillaW0lf04/master\n\nFix minor error in \"squeeze\" docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/b1c69df01b673cc086065112da6780d8548a0dfa",
        "buggy_code": "The input array, but with with all or a subset of the",
        "fixed_code": "The input array, but with all or a subset of the",
        "patch": "@@ -1090,7 +1090,7 @@ def squeeze(a, axis=None):\n     Returns\n     -------\n     squeezed : ndarray\n-        The input array, but with with all or a subset of the\n+        The input array, but with all or a subset of the\n         dimensions of length 1 removed. This is always `a` itself\n         or a view into `a`.\n "
    },
    {
        "commit_id": "016b21186b87c68a0aa09cca939187f6f29d1900",
        "commit_message": "Fix minor error in \"squeeze\" docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/016b21186b87c68a0aa09cca939187f6f29d1900",
        "buggy_code": "The input array, but with with all or a subset of the",
        "fixed_code": "The input array, but with all or a subset of the",
        "patch": "@@ -1090,7 +1090,7 @@ def squeeze(a, axis=None):\n     Returns\n     -------\n     squeezed : ndarray\n-        The input array, but with with all or a subset of the\n+        The input array, but with all or a subset of the\n         dimensions of length 1 removed. This is always `a` itself\n         or a view into `a`.\n "
    },
    {
        "commit_id": "d6c94322d759d4e7d0d8c4a1bc3f6ea95e155d57",
        "commit_message": "Merge pull request #4762 from juliantaylor/hist-test\n\nTST: fix random failing histogram test",
        "commit_url": "https://github.com/numpy/numpy/commit/d6c94322d759d4e7d0d8c4a1bc3f6ea95e155d57",
        "buggy_code": "r = rand(100)+1.",
        "fixed_code": "r = rand(100) + 1. + 1e6 # histogramdd rounds by decimal=6",
        "patch": "@@ -254,7 +254,7 @@ def test_norm(self):\n         assert_array_almost_equal(H, answer, 3)\n \n     def test_all_outliers(self):\n-        r = rand(100)+1.\n+        r = rand(100) + 1. + 1e6 # histogramdd rounds by decimal=6\n         H, xed, yed = histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))\n         assert_array_equal(H, 0)\n "
    },
    {
        "commit_id": "40bebbaca156c6eb18ded4d02782bf7e177376f4",
        "commit_message": "TST: fix random failing histogram test\n\nhistogramdd rounds by decimal=6 so the random numbers may not be\noutliers if they are below 1. + 1e6",
        "commit_url": "https://github.com/numpy/numpy/commit/40bebbaca156c6eb18ded4d02782bf7e177376f4",
        "buggy_code": "r = rand(100)+1.",
        "fixed_code": "r = rand(100) + 1. + 1e6 # histogramdd rounds by decimal=6",
        "patch": "@@ -254,7 +254,7 @@ def test_norm(self):\n         assert_array_almost_equal(H, answer, 3)\n \n     def test_all_outliers(self):\n-        r = rand(100)+1.\n+        r = rand(100) + 1. + 1e6 # histogramdd rounds by decimal=6\n         H, xed, yed = histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))\n         assert_array_equal(H, 0)\n "
    },
    {
        "commit_id": "59d3bbbe34faa91b7361682441a8b8d1c05553c6",
        "commit_message": "Merge pull request #4684 from perimosocordiae/patch-1\n\nBUG: argwhere is not equivalent to transpose(nonzero(...)))",
        "commit_url": "https://github.com/numpy/numpy/commit/59d3bbbe34faa91b7361682441a8b8d1c05553c6",
        "buggy_code": "return transpose(asanyarray(a).nonzero())",
        "fixed_code": "return transpose(nonzero(a))",
        "patch": "@@ -767,7 +767,7 @@ def argwhere(a):\n            [1, 2]])\n \n     \"\"\"\n-    return transpose(asanyarray(a).nonzero())\n+    return transpose(nonzero(a))\n \n def flatnonzero(a):\n     \"\"\""
    },
    {
        "commit_id": "7bab95753832051c9425fea613c6dc06a863afba",
        "commit_message": "Merge pull request #4644 from crbates/patch-1\n\nUpdate __init__.py",
        "commit_url": "https://github.com/numpy/numpy/commit/7bab95753832051c9425fea613c6dc06a863afba",
        "buggy_code": "your python intepreter from there.\"\"\"",
        "fixed_code": "your python interpreter from there.\"\"\"",
        "patch": "@@ -156,7 +156,7 @@ class VisibleDeprecationWarning(UserWarning):\n     except ImportError:\n         msg = \"\"\"Error importing numpy: you should not try to import numpy from\n         its source directory; please exit the numpy source tree, and relaunch\n-        your python intepreter from there.\"\"\"\n+        your python interpreter from there.\"\"\"\n         raise ImportError(msg)\n     from .version import git_revision as __git_revision__\n     from .version import version as __version__"
    },
    {
        "commit_id": "a8536d5e57ffca95057e74d5d23955b7414847a7",
        "commit_message": "Merge pull request #4639 from diego898/fix-doc-example\n\nFixing the `poly2herm` example import line",
        "commit_url": "https://github.com/numpy/numpy/commit/a8536d5e57ffca95057e74d5d23955b7414847a7",
        "buggy_code": ">>> from numpy.polynomial.hermite_e import poly2herme",
        "fixed_code": ">>> from numpy.polynomial.hermite import poly2herm",
        "patch": "@@ -110,7 +110,7 @@ def poly2herm(pol) :\n \n     Examples\n     --------\n-    >>> from numpy.polynomial.hermite_e import poly2herme\n+    >>> from numpy.polynomial.hermite import poly2herm\n     >>> poly2herm(np.arange(4))\n     array([ 1.   ,  2.75 ,  0.5  ,  0.375])\n "
    },
    {
        "commit_id": "f4a7cf902afabc737cd99657b46f6d73e3b8da06",
        "commit_message": "BLD: remove \"-Wl,-framework,Python\" from linker flags for Intel compiler.\n\nThe \"-Wl,-undefined,dynamic_lookup\" flag is enough to make things work\nwith OS X bundles.  On the mailing list an issue was reported with\nAnaconda (non-framework build) where f2py was picking up the system framework\nPython instead of the Anaconda one.\n\nThanks to Robert Kern for explaining how to fix this.",
        "commit_url": "https://github.com/numpy/numpy/commit/f4a7cf902afabc737cd99657b46f6d73e3b8da06",
        "buggy_code": "opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup', '-Wl,-framework,Python']",
        "fixed_code": "opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup']",
        "patch": "@@ -68,7 +68,7 @@ def get_flags_linker_so(self):\n                 opt.remove('-shared')\n             except ValueError:\n                 idx = 0\n-            opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup', '-Wl,-framework,Python']\n+            opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup']\n         return opt\n \n class IntelItaniumFCompiler(IntelFCompiler):"
    },
    {
        "commit_id": "f3209357c4f0ad570a04ea922e62ee7feadfc034",
        "commit_message": "Merge pull request #4602 from cgohlke/patch-2\n\nBUG: ifort has issues with optimization flag /O2",
        "commit_url": "https://github.com/numpy/numpy/commit/f3209357c4f0ad570a04ea922e62ee7feadfc034",
        "buggy_code": "return ['/O2']",
        "fixed_code": "return ['/O1']  # Scipy test failures with /O2",
        "patch": "@@ -162,7 +162,7 @@ def get_flags_debug(self):\n         return ['/4Yb', '/d2']\n \n     def get_flags_opt(self):\n-        return ['/O2']\n+        return ['/O1']  # Scipy test failures with /O2\n \n     def get_flags_arch(self):\n         return [\"/arch:IA-32\", \"/QaxSSE3\"]"
    },
    {
        "commit_id": "f97d5ca773946ed7ca5ac149f656274765007eb8",
        "commit_message": "BUG: ifort has issues with optimization flag /O2\n\nFixes scipy test failures.",
        "commit_url": "https://github.com/numpy/numpy/commit/f97d5ca773946ed7ca5ac149f656274765007eb8",
        "buggy_code": "return ['/O2']",
        "fixed_code": "return ['/O1']  # Scipy test failures with /O2",
        "patch": "@@ -162,7 +162,7 @@ def get_flags_debug(self):\n         return ['/4Yb', '/d2']\n \n     def get_flags_opt(self):\n-        return ['/O2']\n+        return ['/O1']  # Scipy test failures with /O2\n \n     def get_flags_arch(self):\n         return [\"/arch:IA-32\", \"/QaxSSE3\"]"
    },
    {
        "commit_id": "fc5d3750da073fcf0bcaf4654917e7338c76b2bd",
        "commit_message": "Merge pull request #4549 from juliantaylor/datetime-test-fix\n\nTST: increase test time to avoid negative times on UTC conversion",
        "commit_url": "https://github.com/numpy/numpy/commit/fc5d3750da073fcf0bcaf4654917e7338c76b2bd",
        "buggy_code": "numpy.datetime64(\"1970-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")",
        "fixed_code": "numpy.datetime64(\"1971-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")",
        "patch": "@@ -595,7 +595,7 @@ def test_dtype_promotion(self):\n     def test_cast_overflow(self):\n         # gh-4486\n         def cast():\n-            numpy.datetime64(\"1970-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")\n+            numpy.datetime64(\"1971-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")\n         assert_raises(OverflowError, cast)\n         def cast2():\n             numpy.datetime64(\"2014\").astype(\"<M8[fs]\")"
    },
    {
        "commit_id": "60f2f518857d1bac221947fc2cde2709b10a9a1b",
        "commit_message": "TST: increase test time to avoid negative times on UTC conversion\n\nfixes the test on windows where mingw _mktemp64 will return an error\ninstead of a negative time.",
        "commit_url": "https://github.com/numpy/numpy/commit/60f2f518857d1bac221947fc2cde2709b10a9a1b",
        "buggy_code": "numpy.datetime64(\"1970-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")",
        "fixed_code": "numpy.datetime64(\"1971-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")",
        "patch": "@@ -595,7 +595,7 @@ def test_dtype_promotion(self):\n     def test_cast_overflow(self):\n         # gh-4486\n         def cast():\n-            numpy.datetime64(\"1970-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")\n+            numpy.datetime64(\"1971-01-01 00:00:00.000000000000000\").astype(\"<M8[D]\")\n         assert_raises(OverflowError, cast)\n         def cast2():\n             numpy.datetime64(\"2014\").astype(\"<M8[fs]\")"
    },
    {
        "commit_id": "e67765b235f7539adcde0ea047726ee35dae9cdf",
        "commit_message": "Merge pull request #4515 from ogrisel/undefined-asarray\n\nFIX: missing asarray import in numpy.libs.utils",
        "commit_url": "https://github.com/numpy/numpy/commit/e67765b235f7539adcde0ea047726ee35dae9cdf",
        "buggy_code": "from numpy.core import product, ndarray, ufunc",
        "fixed_code": "from numpy.core import product, ndarray, ufunc, asarray",
        "patch": "@@ -6,7 +6,7 @@\n import re\n \n from numpy.core.numerictypes import issubclass_, issubsctype, issubdtype\n-from numpy.core import product, ndarray, ufunc\n+from numpy.core import product, ndarray, ufunc, asarray\n \n __all__ = [\n     'issubclass_', 'issubsctype', 'issubdtype', 'deprecate',"
    },
    {
        "commit_id": "741e5c77f9a9df06716a685b91668c01ef95ebcd",
        "commit_message": "FIX: missing asarray import in numpy.libs.utils",
        "commit_url": "https://github.com/numpy/numpy/commit/741e5c77f9a9df06716a685b91668c01ef95ebcd",
        "buggy_code": "from numpy.core import product, ndarray, ufunc",
        "fixed_code": "from numpy.core import product, ndarray, ufunc, asarray",
        "patch": "@@ -6,7 +6,7 @@\n import re\n \n from numpy.core.numerictypes import issubclass_, issubsctype, issubdtype\n-from numpy.core import product, ndarray, ufunc\n+from numpy.core import product, ndarray, ufunc, asarray\n \n __all__ = [\n     'issubclass_', 'issubsctype', 'issubdtype', 'deprecate',"
    },
    {
        "commit_id": "646f54e42ae0d3a1ba8851f4437756414ea9acca",
        "commit_message": "Merge pull request #4498 from meltingwax/meltingwax/2092\n\nDOC: specify that 2d array must be non-empty in np.poly error message.",
        "commit_url": "https://github.com/numpy/numpy/commit/646f54e42ae0d3a1ba8851f4437756414ea9acca",
        "buggy_code": "raise ValueError(\"input must be 1d or square 2d array.\")",
        "fixed_code": "raise ValueError(\"input must be 1d or non-empty square 2d array.\")",
        "patch": "@@ -127,7 +127,7 @@ def poly(seq_of_zeros):\n     elif len(sh) == 1:\n         pass\n     else:\n-        raise ValueError(\"input must be 1d or square 2d array.\")\n+        raise ValueError(\"input must be 1d or non-empty square 2d array.\")\n \n     if len(seq_of_zeros) == 0:\n         return 1.0"
    },
    {
        "commit_id": "f8942f520c1193169a72aa4126eba9b583b92f26",
        "commit_message": "DOC: specify that 2d array must be non-empty in np.poly error message.\n\nFixes #2092. Changes message passed to ValueError.",
        "commit_url": "https://github.com/numpy/numpy/commit/f8942f520c1193169a72aa4126eba9b583b92f26",
        "buggy_code": "raise ValueError(\"input must be 1d or square 2d array.\")",
        "fixed_code": "raise ValueError(\"input must be 1d or non-empty square 2d array.\")",
        "patch": "@@ -127,7 +127,7 @@ def poly(seq_of_zeros):\n     elif len(sh) == 1:\n         pass\n     else:\n-        raise ValueError(\"input must be 1d or square 2d array.\")\n+        raise ValueError(\"input must be 1d or non-empty square 2d array.\")\n \n     if len(seq_of_zeros) == 0:\n         return 1.0"
    },
    {
        "commit_id": "30b24450537ae4805c281b29e2aec6674c8880e6",
        "commit_message": "Merge pull request #4437 from abalkin/issue-4436\n\nBUG: Masked array filled method ignores fill value",
        "commit_url": "https://github.com/numpy/numpy/commit/30b24450537ae4805c281b29e2aec6674c8880e6",
        "buggy_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):",
        "fixed_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):",
        "patch": "@@ -416,7 +416,7 @@ def _check_fill_value(fill_value, ndtype):\n             fill_value = np.array(_recursive_set_fill_value(fill_value, descr),\n                                   dtype=ndtype)\n     else:\n-        if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):\n+        if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):\n             fill_value = default_fill_value(ndtype)\n         else:\n             # In case we want to convert 1e+20 to int..."
    },
    {
        "commit_id": "787fbff92bef3940dc8e10ca657cc983f8cdbbb9",
        "commit_message": "BUG: Masked array filled method ignores fill value\n\nWhen string fill value is passed to the filled method of\na masked array with object ('O') dtype, it is ignored and\nmasked elements are filled with '?' instead.\n\nFixes #4436",
        "commit_url": "https://github.com/numpy/numpy/commit/787fbff92bef3940dc8e10ca657cc983f8cdbbb9",
        "buggy_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):",
        "fixed_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):",
        "patch": "@@ -416,7 +416,7 @@ def _check_fill_value(fill_value, ndtype):\n             fill_value = np.array(_recursive_set_fill_value(fill_value, descr),\n                                   dtype=ndtype)\n     else:\n-        if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):\n+        if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):\n             fill_value = default_fill_value(ndtype)\n         else:\n             # In case we want to convert 1e+20 to int..."
    },
    {
        "commit_id": "0013ffb1c438846e83497b2b343e20f9531c27ae",
        "commit_message": "Merge pull request #4420 from jnothman/patch-3\n\nDOC apply correct documentation to np.ma.argmin",
        "commit_url": "https://github.com/numpy/numpy/commit/0013ffb1c438846e83497b2b343e20f9531c27ae",
        "buggy_code": "argmin.__doc__ = MaskedArray.argmax.__doc__",
        "fixed_code": "argmax.__doc__ = MaskedArray.argmax.__doc__",
        "patch": "@@ -6156,7 +6156,7 @@ def argmax(a, axis=None, fill_value=None):\n             pass\n     d = filled(a, fill_value)\n     return d.argmax(axis=axis)\n-argmin.__doc__ = MaskedArray.argmax.__doc__\n+argmax.__doc__ = MaskedArray.argmax.__doc__\n \n def sort(a, axis= -1, kind='quicksort', order=None, endwith=True, fill_value=None):\n     \"Function version of the eponymous method.\""
    },
    {
        "commit_id": "87a9d5cba6caa7870de7b4dd195368d2fc39d38f",
        "commit_message": "Merge pull request #3984 from ContinuumIO/promote_types_fix\n\nFix promote_types for strings and numbers",
        "commit_url": "https://github.com/numpy/numpy/commit/87a9d5cba6caa7870de7b4dd195368d2fc39d38f",
        "buggy_code": "d = array(['0', '1', '2', '3',",
        "fixed_code": "d = array(['0.0', '1.0', '2.0', '3.0',",
        "patch": "@@ -183,7 +183,7 @@ def test_concatenate_axis_None():\n     assert_equal(r.size, a.size + len(b))\n     assert_equal(r.dtype, a.dtype)\n     r = np.concatenate((a, b, c), axis=None)\n-    d = array(['0', '1', '2', '3',\n+    d = array(['0.0', '1.0', '2.0', '3.0',\n                '0', '1', '2', 'x'])\n     assert_array_equal(r, d)\n "
    },
    {
        "commit_id": "1f9d4d2613d7c8bccf7e16720e8d0fa87e74e34a",
        "commit_message": "BUG: Fix promote_types, can_cast, as astype issues\n\n- promote_types does not return correct string size for integer and string arguments. Fix so that integer and string types are promoted to string type that is long enough to hold integer type safely cast to string.\n- can_cast incorrectly returns True for certain integer and string types. Fix so that can_cast only returns True if string type is long enough to hold integer type safely cast to string.\n- calling astype to convert integer to string should fail if string type is not long enough to hold integer converted to string and casting argument is set to \"safe\".",
        "commit_url": "https://github.com/numpy/numpy/commit/1f9d4d2613d7c8bccf7e16720e8d0fa87e74e34a",
        "buggy_code": "d = array(['0', '1', '2', '3',",
        "fixed_code": "d = array(['0.0', '1.0', '2.0', '3.0',",
        "patch": "@@ -183,7 +183,7 @@ def test_concatenate_axis_None():\n     assert_equal(r.size, a.size + len(b))\n     assert_equal(r.dtype, a.dtype)\n     r = np.concatenate((a, b, c), axis=None)\n-    d = array(['0', '1', '2', '3',\n+    d = array(['0.0', '1.0', '2.0', '3.0',\n                '0', '1', '2', 'x'])\n     assert_array_equal(r, d)\n "
    },
    {
        "commit_id": "d2fd1af156ac095156d3fbf833392b644e61c226",
        "commit_message": "Merge pull request #4288 from nh2/fix-seterr-examples\n\nMistake in seterr docs?",
        "commit_url": "https://github.com/numpy/numpy/commit/d2fd1af156ac095156d3fbf833392b644e61c226",
        "buggy_code": ">>> np.seterr(all='ignore')  # reset to default",
        "fixed_code": ">>> np.seterr(**old_settings)  # reset to default",
        "patch": "@@ -2409,7 +2409,7 @@ def seterr(all=None, divide=None, over=None, under=None, invalid=None):\n     >>> np.seterr(over='raise')\n     {'over': 'ignore', 'divide': 'ignore', 'invalid': 'ignore',\n      'under': 'ignore'}\n-    >>> np.seterr(all='ignore')  # reset to default\n+    >>> np.seterr(**old_settings)  # reset to default\n     {'over': 'raise', 'divide': 'ignore', 'invalid': 'ignore', 'under': 'ignore'}\n \n     >>> np.int16(32000) * np.int16(3)"
    },
    {
        "commit_id": "d54b6784501de8aef405794f20cf1f4b3941c68f",
        "commit_message": "Merge pull request #4305 from charris/fix-gh-4256\n\nBUG: #4256: f2py, PyString_FromStringAndSize is undefined in Python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/d54b6784501de8aef405794f20cf1f4b3941c68f",
        "buggy_code": "cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyString_FromStringAndSize((char *)v, len))'",
        "fixed_code": "cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyUString_FromStringAndSize((char *)v, len))'",
        "patch": "@@ -312,7 +312,7 @@\n needs['pyobj_from_string1']=['string']\n cppmacros['pyobj_from_string1']='#define pyobj_from_string1(v) (PyString_FromString((char *)v))'\n needs['pyobj_from_string1size']=['string']\n-cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyString_FromStringAndSize((char *)v, len))'\n+cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyUString_FromStringAndSize((char *)v, len))'\n needs['TRYPYARRAYTEMPLATE']=['PRINTPYOBJERR']\n cppmacros['TRYPYARRAYTEMPLATE']=\"\"\"\\\n /* New SciPy */"
    },
    {
        "commit_id": "5803ec43faf46d5117ddddfc7026f098ea5b3b89",
        "commit_message": "Fix seterr example for resetting to old settings",
        "commit_url": "https://github.com/numpy/numpy/commit/5803ec43faf46d5117ddddfc7026f098ea5b3b89",
        "buggy_code": ">>> np.seterr(all='ignore')  # reset to default",
        "fixed_code": ">>> np.seterr(**old_settings)  # reset to default",
        "patch": "@@ -2409,7 +2409,7 @@ def seterr(all=None, divide=None, over=None, under=None, invalid=None):\n     >>> np.seterr(over='raise')\n     {'over': 'ignore', 'divide': 'ignore', 'invalid': 'ignore',\n      'under': 'ignore'}\n-    >>> np.seterr(all='ignore')  # reset to default\n+    >>> np.seterr(**old_settings)  # reset to default\n     {'over': 'raise', 'divide': 'ignore', 'invalid': 'ignore', 'under': 'ignore'}\n \n     >>> np.int16(32000) * np.int16(3)"
    },
    {
        "commit_id": "ddcb49e5f779a9e42356914b9ec4162b722d4ab0",
        "commit_message": "BUG: #4256: f2py, PyString_FromStringAndSize is undefined in Python3.\n\nUse PyUString_FromStringAndSize defined in npy_3kcompat instead. Not\nusing bytes may cause some problems, but strings seem like a better\nchoice. As modules generated with current f2py error out, this\nparticular use is not common and we are free to choose.\n\nCloses #4256.",
        "commit_url": "https://github.com/numpy/numpy/commit/ddcb49e5f779a9e42356914b9ec4162b722d4ab0",
        "buggy_code": "cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyString_FromStringAndSize((char *)v, len))'",
        "fixed_code": "cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyUString_FromStringAndSize((char *)v, len))'",
        "patch": "@@ -312,7 +312,7 @@\n needs['pyobj_from_string1']=['string']\n cppmacros['pyobj_from_string1']='#define pyobj_from_string1(v) (PyString_FromString((char *)v))'\n needs['pyobj_from_string1size']=['string']\n-cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyString_FromStringAndSize((char *)v, len))'\n+cppmacros['pyobj_from_string1size']='#define pyobj_from_string1size(v,len) (PyUString_FromStringAndSize((char *)v, len))'\n needs['TRYPYARRAYTEMPLATE']=['PRINTPYOBJERR']\n cppmacros['TRYPYARRAYTEMPLATE']=\"\"\"\\\n /* New SciPy */"
    },
    {
        "commit_id": "68ae04741f73953ef5680cb80fbb3dde5f160c90",
        "commit_message": "Merge pull request #4300 from charris/fix-gh-636\n\nBUG: Fix typo in f2py/cfuncs.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/68ae04741f73953ef5680cb80fbb3dde5f160c90",
        "buggy_code": "typedefs['insinged_long_long']=\"\"\"\\",
        "fixed_code": "typedefs['unsigned_long_long']=\"\"\"\\",
        "patch": "@@ -75,7 +75,7 @@\n typedef unsigned long long unsigned_long_long;\n #endif\n \"\"\"\n-typedefs['insinged_long_long']=\"\"\"\\\n+typedefs['unsigned_long_long']=\"\"\"\\\n #ifdef _WIN32\n typedef __uint64 long_long;\n #else"
    },
    {
        "commit_id": "1f2f6b67e4e0dd77ab0fbb8f40df7553b912c42b",
        "commit_message": "BUG: Fix typo in f2py/cfuncs.py.\n\nReplace \"insinged_long_long\" by \"unsigned_long_long\". Patch due to trac\nuser pepijndevos.\n\nCloses #636.",
        "commit_url": "https://github.com/numpy/numpy/commit/1f2f6b67e4e0dd77ab0fbb8f40df7553b912c42b",
        "buggy_code": "typedefs['insinged_long_long']=\"\"\"\\",
        "fixed_code": "typedefs['unsigned_long_long']=\"\"\"\\",
        "patch": "@@ -75,7 +75,7 @@\n typedef unsigned long long unsigned_long_long;\n #endif\n \"\"\"\n-typedefs['insinged_long_long']=\"\"\"\\\n+typedefs['unsigned_long_long']=\"\"\"\\\n #ifdef _WIN32\n typedef __uint64 long_long;\n #else"
    },
    {
        "commit_id": "31967d2bdd83ab84ffd15d63767c6bec7aec3e79",
        "commit_message": "Merge pull request #4290 from ceball/dsplit_errmsg\n\nDOC: Fix typo in a dsplit() error message.",
        "commit_url": "https://github.com/numpy/numpy/commit/31967d2bdd83ab84ffd15d63767c6bec7aec3e79",
        "buggy_code": "raise ValueError('vsplit only works on arrays of 3 or more dimensions')",
        "fixed_code": "raise ValueError('dsplit only works on arrays of 3 or more dimensions')",
        "patch": "@@ -638,7 +638,7 @@ def dsplit(ary, indices_or_sections):\n \n     \"\"\"\n     if len(_nx.shape(ary)) < 3:\n-        raise ValueError('vsplit only works on arrays of 3 or more dimensions')\n+        raise ValueError('dsplit only works on arrays of 3 or more dimensions')\n     return split(ary, indices_or_sections, 2)\n \n def get_array_prepare(*args):"
    },
    {
        "commit_id": "f02ed1a95cab2f9d4d002abf0bc4d76df89548a7",
        "commit_message": "DOC: Fix typo in a dsplit() error message.",
        "commit_url": "https://github.com/numpy/numpy/commit/f02ed1a95cab2f9d4d002abf0bc4d76df89548a7",
        "buggy_code": "raise ValueError('vsplit only works on arrays of 3 or more dimensions')",
        "fixed_code": "raise ValueError('dsplit only works on arrays of 3 or more dimensions')",
        "patch": "@@ -638,7 +638,7 @@ def dsplit(ary, indices_or_sections):\n \n     \"\"\"\n     if len(_nx.shape(ary)) < 3:\n-        raise ValueError('vsplit only works on arrays of 3 or more dimensions')\n+        raise ValueError('dsplit only works on arrays of 3 or more dimensions')\n     return split(ary, indices_or_sections, 2)\n \n def get_array_prepare(*args):"
    },
    {
        "commit_id": "bd5894b29b897f16da8a3d64e0df94e93d6b2d4a",
        "commit_message": "Merge pull request #4274 from arunpersaud/ap/rfft-doc-fix-typo\n\nDOC: fixed small type in rfft notes",
        "commit_url": "https://github.com/numpy/numpy/commit/bd5894b29b897f16da8a3d64e0df94e93d6b2d4a",
        "buggy_code": "axis of the output is therefore ``n//2+1``.",
        "fixed_code": "axis of the output is therefore ``n//2 + 1``.",
        "patch": "@@ -296,7 +296,7 @@ def rfft(a, n=None, axis=-1):\n     conjugates of the corresponding positive-frequency terms, and the\n     negative-frequency terms are therefore redundant.  This function does not\n     compute the negative frequency terms, and the length of the transformed\n-    axis of the output is therefore ``n//2+1``.\n+    axis of the output is therefore ``n//2 + 1``.\n \n     When ``A = rfft(a)`` and fs is the sampling frequency, ``A[0]`` contains\n     the zero-frequency term 0*fs, which is real due to Hermitian symmetry."
    },
    {
        "commit_id": "df66018e576dfbf25a82e7f4399350bae57eef5c",
        "commit_message": "Merge pull request #4271 from juliantaylor/big-file-test-fix\n\nTST: fix test_io.TestSavezLoad",
        "commit_url": "https://github.com/numpy/numpy/commit/df66018e576dfbf25a82e7f4399350bae57eef5c",
        "buggy_code": "tmp = open(os.path.join(tmpdir, \"file.npz\"), \"w\")",
        "fixed_code": "tmp = os.path.join(tmpdir, \"file.npz\")",
        "patch": "@@ -187,7 +187,7 @@ def test_big_arrays(self):\n         L = (1 << 31) + 100000\n         a = np.empty(L, dtype=np.uint8)\n         with tempdir() as tmpdir:\n-            tmp = open(os.path.join(tmpdir, \"file.npz\"), \"w\")\n+            tmp = os.path.join(tmpdir, \"file.npz\")\n             np.savez(tmp, a=a)\n             del a\n             npfile = np.load(tmp)"
    },
    {
        "commit_id": "8225401e7b1a4ddeac6dcb53ffbf7a35535b3b94",
        "commit_message": "DOC: fixed small whitespace error in rfft notes",
        "commit_url": "https://github.com/numpy/numpy/commit/8225401e7b1a4ddeac6dcb53ffbf7a35535b3b94",
        "buggy_code": "axis of the output is therefore ``n//2+1``.",
        "fixed_code": "axis of the output is therefore ``n//2 + 1``.",
        "patch": "@@ -296,7 +296,7 @@ def rfft(a, n=None, axis=-1):\n     conjugates of the corresponding positive-frequency terms, and the\n     negative-frequency terms are therefore redundant.  This function does not\n     compute the negative frequency terms, and the length of the transformed\n-    axis of the output is therefore ``n//2+1``.\n+    axis of the output is therefore ``n//2 + 1``.\n \n     When ``A = rfft(a)`` and fs is the sampling frequency, ``A[0]`` contains\n     the zero-frequency term 0*fs, which is real due to Hermitian symmetry."
    },
    {
        "commit_id": "524b9eaa33ec67e34eb31a208e02bb934f778096",
        "commit_message": "TST: fix test_io.TestSavezLoad",
        "commit_url": "https://github.com/numpy/numpy/commit/524b9eaa33ec67e34eb31a208e02bb934f778096",
        "buggy_code": "tmp = open(os.path.join(tmpdir, \"file.npz\"), \"w\")",
        "fixed_code": "tmp = os.path.join(tmpdir, \"file.npz\")",
        "patch": "@@ -187,7 +187,7 @@ def test_big_arrays(self):\n         L = (1 << 31) + 100000\n         a = np.empty(L, dtype=np.uint8)\n         with tempdir() as tmpdir:\n-            tmp = open(os.path.join(tmpdir, \"file.npz\"), \"w\")\n+            tmp = os.path.join(tmpdir, \"file.npz\")\n             np.savez(tmp, a=a)\n             del a\n             npfile = np.load(tmp)"
    },
    {
        "commit_id": "fe615783daf2763496fc827e2377d9baaefcda26",
        "commit_message": "WIP,TST: Fix tests to match new behaviour",
        "commit_url": "https://github.com/numpy/numpy/commit/fe615783daf2763496fc827e2377d9baaefcda26",
        "buggy_code": "self.assertRaises(ValueError, self._bad_call)",
        "fixed_code": "self.assertRaises(IndexError, self._bad_call)",
        "patch": "@@ -365,7 +365,7 @@ def setUp(self):\n     def _bad_call(self):\n         return self.ary['f0', 'f1']\n     def test_no_tuple(self):\n-        self.assertRaises(ValueError, self._bad_call)\n+        self.assertRaises(IndexError, self._bad_call)\n     def test_return(self):\n         res = self.ary[['f0', 'f2']].tolist()\n         assert_(res == [(1, 3), (5, 7)])"
    },
    {
        "commit_id": "ff7d5f990fb6184b6b116f444cf2c0d0cf099463",
        "commit_message": "Merge pull request #4173 from leaz/patch-2\n\nAdd '.FOR' to src_extensions",
        "commit_url": "https://github.com/numpy/numpy/commit/ff7d5f990fb6184b6b116f444cf2c0d0cf099463",
        "buggy_code": "src_extensions = ['.for', '.ftn', '.f77', '.f', '.f90', '.f95', '.F', '.F90']",
        "fixed_code": "src_extensions = ['.for', '.ftn', '.f77', '.f', '.f90', '.f95', '.F', '.F90', '.FOR']",
        "patch": "@@ -196,7 +196,7 @@ class FCompiler(CCompiler):\n \n     pic_flags = []           # Flags to create position-independent code\n \n-    src_extensions = ['.for', '.ftn', '.f77', '.f', '.f90', '.f95', '.F', '.F90']\n+    src_extensions = ['.for', '.ftn', '.f77', '.f', '.f90', '.f95', '.F', '.F90', '.FOR']\n     obj_extension = \".o\"\n \n     shared_lib_extension = get_shared_lib_extension()"
    },
    {
        "commit_id": "b91d3f456040a39a37cc1281ba499cb4316d15ec",
        "commit_message": "Merge pull request #4163 from juliantaylor/complex-norm-fix\n\nBUG: fix complex norm of higher order",
        "commit_url": "https://github.com/numpy/numpy/commit/b91d3f456040a39a37cc1281ba499cb4316d15ec",
        "buggy_code": "absx = asfarray(x)",
        "fixed_code": "absx = x if isComplexType(x.dtype.type) else asfarray(x)",
        "patch": "@@ -2088,7 +2088,7 @@ def norm(x, ord=None, axis=None):\n                 # because it will downcast to float64.\n                 absx = abs(x)\n             else:\n-                absx = asfarray(x)\n+                absx = x if isComplexType(x.dtype.type) else asfarray(x)\n                 if absx.dtype is x.dtype:\n                     absx = abs(absx)\n                 else:"
    },
    {
        "commit_id": "bd6d287dd73c483654cfb10f4cfab4dcc7548dd2",
        "commit_message": "BUG: fix complex norm of higher order\n\nasfarray truncates the complex part, so it must be avoided for complex\ntypes.\nCloses gh-4156.",
        "commit_url": "https://github.com/numpy/numpy/commit/bd6d287dd73c483654cfb10f4cfab4dcc7548dd2",
        "buggy_code": "absx = asfarray(x)",
        "fixed_code": "absx = x if isComplexType(x.dtype.type) else asfarray(x)",
        "patch": "@@ -2088,7 +2088,7 @@ def norm(x, ord=None, axis=None):\n                 # because it will downcast to float64.\n                 absx = abs(x)\n             else:\n-                absx = asfarray(x)\n+                absx = x if isComplexType(x.dtype.type) else asfarray(x)\n                 if absx.dtype is x.dtype:\n                     absx = abs(absx)\n                 else:"
    },
    {
        "commit_id": "61998c22df08e7ec0938bedef931ac824cfb634a",
        "commit_message": "Merge pull request #4141 from rgommers/py34-fixes\n\nFix a few issues that show up with python 3.4b1",
        "commit_url": "https://github.com/numpy/numpy/commit/61998c22df08e7ec0938bedef931ac824cfb634a",
        "buggy_code": "assert_equal((h * diff(b)).sum(), 1)",
        "fixed_code": "assert_almost_equal((h * diff(b)).sum(), 1, decimal=15)",
        "patch": "@@ -972,7 +972,7 @@ def test_outliers(self):\n \n         # Normalization\n         h, b = histogram(a, range=[1, 9], normed=True)\n-        assert_equal((h * diff(b)).sum(), 1)\n+        assert_almost_equal((h * diff(b)).sum(), 1, decimal=15)\n \n         # Weights\n         w = np.arange(10) + .5"
    },
    {
        "commit_id": "9e836c2c5cc0911269ac692a25fc4ec42273354b",
        "commit_message": "TST: fix test failure due to comparing floats with assert_equal.\n\nObserved on 32-bit linux with python 3.4b1",
        "commit_url": "https://github.com/numpy/numpy/commit/9e836c2c5cc0911269ac692a25fc4ec42273354b",
        "buggy_code": "assert_equal((h * diff(b)).sum(), 1)",
        "fixed_code": "assert_almost_equal((h * diff(b)).sum(), 1, decimal=15)",
        "patch": "@@ -972,7 +972,7 @@ def test_outliers(self):\n \n         # Normalization\n         h, b = histogram(a, range=[1, 9], normed=True)\n-        assert_equal((h * diff(b)).sum(), 1)\n+        assert_almost_equal((h * diff(b)).sum(), 1, decimal=15)\n \n         # Weights\n         w = np.arange(10) + .5"
    },
    {
        "commit_id": "faf4131f6b264477e4047257440eebdf27c2f767",
        "commit_message": "BUG: Fixes Python3 compatibility",
        "commit_url": "https://github.com/numpy/numpy/commit/faf4131f6b264477e4047257440eebdf27c2f767",
        "buggy_code": "extra_data = ''",
        "fixed_code": "extra_data = bytes()",
        "patch": "@@ -476,7 +476,7 @@ def read_array(fp):\n             max_read_count = BUFFER_SIZE // min(BUFFER_SIZE, dtype.itemsize)\n \n             array = numpy.empty(count, dtype=dtype)\n-            extra_data = ''\n+            extra_data = bytes()\n             i = 0\n             while i < count: \n                 read_count = min(max_read_count, count - i)"
    },
    {
        "commit_id": "d05518cdd5efb7ecf3cccf9b3815bd663d96eb56",
        "commit_message": "Merge pull request #4111 from chrisdembia/patch-1\n\nCorrect typo in interp() docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/d05518cdd5efb7ecf3cccf9b3815bd663d96eb56",
        "buggy_code": "Value to return for `x > xp[-1]`, defaults is `fp[-1]`.",
        "fixed_code": "Value to return for `x > xp[-1]`, default is `fp[-1]`.",
        "patch": "@@ -1085,7 +1085,7 @@ def interp(x, xp, fp, left=None, right=None):\n         Value to return for `x < xp[0]`, default is `fp[0]`.\n \n     right : float, optional\n-        Value to return for `x > xp[-1]`, defaults is `fp[-1]`.\n+        Value to return for `x > xp[-1]`, default is `fp[-1]`.\n \n     Returns\n     -------"
    },
    {
        "commit_id": "5da472239a2fb958e410304a6e34b8da50580dab",
        "commit_message": "Merge pull request #4089 from seberg/issue-3494\n\nBUG: Fix negative axis insert (issue 3494)",
        "commit_url": "https://github.com/numpy/numpy/commit/5da472239a2fb958e410304a6e34b8da50580dab",
        "buggy_code": "values = np.rollaxis(values, 0, axis + 1)",
        "fixed_code": "values = np.rollaxis(values, 0, (axis % values.ndim) + 1)",
        "patch": "@@ -3607,7 +3607,7 @@ def insert(arr, obj, values, axis=None):\n             # broadcasting is very different here, since a[:,0,:] = ... behaves\n             # very different from a[:,[0],:] = ...! This changes values so that\n             # it works likes the second case. (here a[:,0:1,:])\n-            values = np.rollaxis(values, 0, axis + 1)\n+            values = np.rollaxis(values, 0, (axis % values.ndim) + 1)\n         numnew = values.shape[axis]\n         newshape[axis] += numnew\n         new = empty(newshape, arr.dtype, arr.flags.fnc)"
    },
    {
        "commit_id": "50fad03b2ab81d9518e95138f2425ecd82740be3",
        "commit_message": "BUG: Fix np.insert with negative axis.\n\nIn some cases a negative axis argument to np.insert would result\nin wrong behaviour due to np.rollaxis, add modulo operation to\navoid this (an error is still raised due to arr.shape[axis]).\n\nCloses gh-3494",
        "commit_url": "https://github.com/numpy/numpy/commit/50fad03b2ab81d9518e95138f2425ecd82740be3",
        "buggy_code": "values = np.rollaxis(values, 0, axis + 1)",
        "fixed_code": "values = np.rollaxis(values, 0, (axis % values.ndim) + 1)",
        "patch": "@@ -3607,7 +3607,7 @@ def insert(arr, obj, values, axis=None):\n             # broadcasting is very different here, since a[:,0,:] = ... behaves\n             # very different from a[:,[0],:] = ...! This changes values so that\n             # it works likes the second case. (here a[:,0:1,:])\n-            values = np.rollaxis(values, 0, axis + 1)\n+            values = np.rollaxis(values, 0, (axis % values.ndim) + 1)\n         numnew = values.shape[axis]\n         newshape[axis] += numnew\n         new = empty(newshape, arr.dtype, arr.flags.fnc)"
    },
    {
        "commit_id": "6eb4a4318bddd6105e91f962dec4a5590f524d02",
        "commit_message": "Merge pull request #4056 from herr-biber/master\n\nFix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/6eb4a4318bddd6105e91f962dec4a5590f524d02",
        "buggy_code": "pcolormesh can displaying exact bin edges:",
        "fixed_code": "pcolormesh can display exact bin edges:",
        "patch": "@@ -654,7 +654,7 @@ def histogram2d(x, y, bins=10, range=None, normed=False, weights=None):\n     >>> im = plt.imshow(H, interpolation='nearest', origin='low',\n                         extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]])\n \n-    pcolormesh can displaying exact bin edges:\n+    pcolormesh can display exact bin edges:\n \n     >>> ax = fig.add_subplot(132)\n     >>> ax.set_title('pcolormesh:\\nexact bin edges')"
    },
    {
        "commit_id": "b4b5ad21de6e3be3e537c72727f88d40e65d221e",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/b4b5ad21de6e3be3e537c72727f88d40e65d221e",
        "buggy_code": "pcolormesh can displaying exact bin edges:",
        "fixed_code": "pcolormesh can display exact bin edges:",
        "patch": "@@ -654,7 +654,7 @@ def histogram2d(x, y, bins=10, range=None, normed=False, weights=None):\n     >>> im = plt.imshow(H, interpolation='nearest', origin='low',\n                         extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]])\n \n-    pcolormesh can displaying exact bin edges:\n+    pcolormesh can display exact bin edges:\n \n     >>> ax = fig.add_subplot(132)\n     >>> ax.set_title('pcolormesh:\\nexact bin edges')"
    },
    {
        "commit_id": "896863aff98a156b2fe0fca85fa9279ae8f15aec",
        "commit_message": "Merge pull request #4027 from halfaleague/chunk-read-bug\n\nChunked reading fails when dtype.itemsize is larger than buffer size.",
        "commit_url": "https://github.com/numpy/numpy/commit/896863aff98a156b2fe0fca85fa9279ae8f15aec",
        "buggy_code": "max_read_count = BUFFER_SIZE // dtype.itemsize",
        "fixed_code": "max_read_count = BUFFER_SIZE // min(BUFFER_SIZE, dtype.itemsize)",
        "patch": "@@ -464,7 +464,7 @@ def read_array(fp):\n             # non-chunked case count < max_read_count, so only one read is\n             # performed.\n \n-            max_read_count = BUFFER_SIZE // dtype.itemsize\n+            max_read_count = BUFFER_SIZE // min(BUFFER_SIZE, dtype.itemsize)\n \n             array = numpy.empty(count, dtype=dtype)\n "
    },
    {
        "commit_id": "83eb3ac0658d5e71d9860f8b1e37f285ec19c692",
        "commit_message": "BUG: Fix chunked reading of strings longer than BUFFERSIZE\n\nThis fix correctly calculates the number of BUFFER_SIZE chunks to read.\nThis fix takes into account dtype sizes that could be larger\nthan the BUFFER_SIZE, like a long string.\nSee #4027",
        "commit_url": "https://github.com/numpy/numpy/commit/83eb3ac0658d5e71d9860f8b1e37f285ec19c692",
        "buggy_code": "long_str_arr = np.empty(10, dtype='S279291')",
        "fixed_code": "long_str_arr = np.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE+1)))",
        "patch": "@@ -429,7 +429,7 @@ def test_roundtrip():\n         yield assert_array_equal, arr, arr2\n \n def test_long_str():\n-    long_str_arr = np.empty(10, dtype='S279291')\n+    long_str_arr = np.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE+1)))\n     long_str_arr2 = roundtrip(long_str_arr)\n \n @dec.slow"
    },
    {
        "commit_id": "8988715e1aea7b10b230115aecae029cf6e80d66",
        "commit_message": "Merge pull request #3971 from ochoadavid/patch-1\n\nBUG: changed string.lowercase to string.ascii_lowercase",
        "commit_url": "https://github.com/numpy/numpy/commit/8988715e1aea7b10b230115aecae029cf6e80d66",
        "buggy_code": "if c not in string.lowercase+string.digits: c='_'",
        "fixed_code": "if c not in string.ascii_lowercase+string.digits: c='_'",
        "patch": "@@ -2402,7 +2402,7 @@ def expr2name(a, block, args=[]):\n         na='e_'\n         for c in a:\n             c = c.lower()\n-            if c not in string.lowercase+string.digits: c='_'\n+            if c not in string.ascii_lowercase+string.digits: c='_'\n             na=na+c\n         if na[-1]=='_': na=na+'e'\n         else: na=na+'_e'"
    },
    {
        "commit_id": "a1dad5dcfe075681128638cae47c5ae26045cb41",
        "commit_message": "ENH: merge UFUNC_ERR_DEFAULT2 variable into UFUNC_ERR_DEFAULT\n\nIt seems it was added as a precaution to avoid breaking the rather\ncomplicated ufunc code. It effectively disabled the skipping of the\ndictionary lookup for the default values for the common case and leading\nto hardly tested code in third party libraries like pandas which set the\nerror state to numpys old default (ignore all).\nThe skipping improves scalar performance by 2.5-5%.",
        "commit_url": "https://github.com/numpy/numpy/commit/a1dad5dcfe075681128638cae47c5ae26045cb41",
        "buggy_code": "defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT2, None]",
        "fixed_code": "defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT, None]",
        "patch": "@@ -2741,7 +2741,7 @@ def __exit__(self, *exc_info):\n \n \n def _setdef():\n-    defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT2, None]\n+    defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT, None]\n     umath.seterrobj(defval)\n \n # set the default values"
    },
    {
        "commit_id": "6a7830b143945c40b2893d02ea09951cd8c60598",
        "commit_message": "Merge pull request #3880 from pv/linalg-stride-fix\n\nFix bugs in umath_linalg + add more tests + remove unused code",
        "commit_url": "https://github.com/numpy/numpy/commit/6a7830b143945c40b2893d02ea09951cd8c60598",
        "buggy_code": "return w.astype(result_t)",
        "fixed_code": "return w.astype(_realType(result_t))",
        "patch": "@@ -965,7 +965,7 @@ def eigvalsh(a, UPLO='L'):\n     t, result_t = _commonType(a)\n     signature = 'D->d' if isComplexType(t) else 'd->d'\n     w = gufunc(a, signature=signature, extobj=extobj)\n-    return w.astype(result_t)\n+    return w.astype(_realType(result_t))\n \n def _convertarray(a):\n     t, result_t = _commonType(a)"
    },
    {
        "commit_id": "bbfe9a475a962fd90022fd654829b652c6679ce9",
        "commit_message": "BUG: linalg: fix eigvalsh return type (always real-valued)",
        "commit_url": "https://github.com/numpy/numpy/commit/bbfe9a475a962fd90022fd654829b652c6679ce9",
        "buggy_code": "return w.astype(result_t)",
        "fixed_code": "return w.astype(_realType(result_t))",
        "patch": "@@ -965,7 +965,7 @@ def eigvalsh(a, UPLO='L'):\n     t, result_t = _commonType(a)\n     signature = 'D->d' if isComplexType(t) else 'd->d'\n     w = gufunc(a, signature=signature, extobj=extobj)\n-    return w.astype(result_t)\n+    return w.astype(_realType(result_t))\n \n def _convertarray(a):\n     t, result_t = _commonType(a)"
    },
    {
        "commit_id": "f665c617065ba59b1c517b8dd44080c83dbfd5bd",
        "commit_message": "Merge pull request #3851 from juliantaylor/median-subclass\n\nBUG: preserve ndarray subclasses in median",
        "commit_url": "https://github.com/numpy/numpy/commit/f665c617065ba59b1c517b8dd44080c83dbfd5bd",
        "buggy_code": "a = np.asarray(a)",
        "fixed_code": "a = np.asanyarray(a)",
        "patch": "@@ -2764,7 +2764,7 @@ def median(a, axis=None, out=None, overwrite_input=False):\n     >>> assert not np.all(a==b)\n \n     \"\"\"\n-    a = np.asarray(a)\n+    a = np.asanyarray(a)\n     if axis is not None and axis >= a.ndim:\n         raise IndexError(\n             \"axis %d out of bounds (%d)\" % (axis, a.ndim))"
    },
    {
        "commit_id": "e6f0c9023d9a57a83d83684c2f63ad924038be69",
        "commit_message": "BUG: preserve ndarray subclasses in median\n\ncloses gh-3846",
        "commit_url": "https://github.com/numpy/numpy/commit/e6f0c9023d9a57a83d83684c2f63ad924038be69",
        "buggy_code": "a = np.asarray(a)",
        "fixed_code": "a = np.asanyarray(a)",
        "patch": "@@ -2764,7 +2764,7 @@ def median(a, axis=None, out=None, overwrite_input=False):\n     >>> assert not np.all(a==b)\n \n     \"\"\"\n-    a = np.asarray(a)\n+    a = np.asanyarray(a)\n     if axis is not None and axis >= a.ndim:\n         raise IndexError(\n             \"axis %d out of bounds (%d)\" % (axis, a.ndim))"
    },
    {
        "commit_id": "4b3384973d4f84aa546a80e412d00231ba618fa1",
        "commit_message": "Fix DeprecationWarning on python 3.3",
        "commit_url": "https://github.com/numpy/numpy/commit/4b3384973d4f84aa546a80e412d00231ba618fa1",
        "buggy_code": "a = np.arange(10, dtype='u8')",
        "fixed_code": "a = np.arange(10, dtype='i8')",
        "patch": "@@ -968,7 +968,7 @@ def test_inplace_fancy_indexing(self):\n         assert_raises(IndexError, np.add.at, a, [], 1)\n \n         # Test mixed dtypes\n-        a = np.arange(10, dtype='u8')\n+        a = np.arange(10, dtype='i8')\n         np.power.at(a, [1,2,3,2], 3.5)\n         assert_equal(a, [0, 1, 4414, 46, 4, 5, 6, 7, 8, 9])\n "
    },
    {
        "commit_id": "d62f11d7e149bf8406974093e5254200471d2745",
        "commit_message": "Merge pull request #3612 from jnothman/patch-1\n\nDOC fix legacy a.size() -> a.size in np.ravel docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/d62f11d7e149bf8406974093e5254200471d2745",
        "buggy_code": "Output of the same dtype as `a`, and of shape ``(a.size(),)``.",
        "fixed_code": "Output of the same dtype as `a`, and of shape ``(a.size,)``.",
        "patch": "@@ -1303,7 +1303,7 @@ def ravel(a, order='C'):\n     Returns\n     -------\n     1d_array : ndarray\n-        Output of the same dtype as `a`, and of shape ``(a.size(),)``.\n+        Output of the same dtype as `a`, and of shape ``(a.size,)``.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "320a0ca4e7983ed7a9cc12f18af5ff075cd4d26d",
        "commit_message": "DOC fix legacy a.size() -> a.size in np.ravel docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/320a0ca4e7983ed7a9cc12f18af5ff075cd4d26d",
        "buggy_code": "Output of the same dtype as `a`, and of shape ``(a.size(),)``.",
        "fixed_code": "Output of the same dtype as `a`, and of shape ``(a.size,)``.",
        "patch": "@@ -1303,7 +1303,7 @@ def ravel(a, order='C'):\n     Returns\n     -------\n     1d_array : ndarray\n-        Output of the same dtype as `a`, and of shape ``(a.size(),)``.\n+        Output of the same dtype as `a`, and of shape ``(a.size,)``.\n \n     See Also\n     --------"
    },
    {
        "commit_id": "a0ef063d2f14e1bc3f92e63930b357a8aaf412a8",
        "commit_message": "Merge pull request #3568 from mspacek/patch-1\n\nFix doc typo",
        "commit_url": "https://github.com/numpy/numpy/commit/a0ef063d2f14e1bc3f92e63930b357a8aaf412a8",
        "buggy_code": "able create a solution in his preferred programming language to",
        "fixed_code": "able to create a solution in his preferred programming language to",
        "patch": "@@ -35,7 +35,7 @@\n \n - Is straightforward to reverse engineer. Datasets often live longer than\n   the programs that created them. A competent developer should be\n-  able create a solution in his preferred programming language to\n+  able to create a solution in his preferred programming language to\n   read most ``.npy`` files that he has been given without much\n   documentation.\n "
    },
    {
        "commit_id": "bf87e26cb049de0b4d5b4e0b45adc7bbb3ec263b",
        "commit_message": "Merge pull request #3572 from pv/fix-runtests\n\nMAINT: runtests: make it work on Fedora",
        "commit_url": "https://github.com/numpy/numpy/commit/bf87e26cb049de0b4d5b4e0b45adc7bbb3ec263b",
        "buggy_code": "site_dir = get_python_lib(prefix=dst_dir)",
        "fixed_code": "site_dir = get_python_lib(prefix=dst_dir, plat_specific=True)",
        "patch": "@@ -189,7 +189,7 @@ def build_project(args):\n         sys.exit(1)\n \n     from distutils.sysconfig import get_python_lib\n-    site_dir = get_python_lib(prefix=dst_dir)\n+    site_dir = get_python_lib(prefix=dst_dir, plat_specific=True)\n \n     return site_dir\n "
    },
    {
        "commit_id": "4ea064b1d028d8ecd1b4353f22409e1714ec75dc",
        "commit_message": "Fix doc typo",
        "commit_url": "https://github.com/numpy/numpy/commit/4ea064b1d028d8ecd1b4353f22409e1714ec75dc",
        "buggy_code": "able create a solution in his preferred programming language to",
        "fixed_code": "able to create a solution in his preferred programming language to",
        "patch": "@@ -35,7 +35,7 @@\n \n - Is straightforward to reverse engineer. Datasets often live longer than\n   the programs that created them. A competent developer should be\n-  able create a solution in his preferred programming language to\n+  able to create a solution in his preferred programming language to\n   read most ``.npy`` files that he has been given without much\n   documentation.\n "
    },
    {
        "commit_id": "cb6fe848bf1a6a046fd473b72b1350ea40c8644e",
        "commit_message": "BUG: Fix bug in np.insert when axis=-1",
        "commit_url": "https://github.com/numpy/numpy/commit/cb6fe848bf1a6a046fd473b72b1350ea40c8644e",
        "buggy_code": "values = np.rollaxis(values, 0, axis+1)",
        "fixed_code": "values = np.rollaxis(values, 0, axis % ndim + 1)",
        "patch": "@@ -3742,7 +3742,7 @@ def insert(arr, obj, values, axis=None):\n             # broadcasting is very different here, since a[:,0,:] = ... behaves\n             # very different from a[:,[0],:] = ...! This changes values so that\n             # it works likes the second case. (here a[:,0:1,:])\n-            values = np.rollaxis(values, 0, axis+1)\n+            values = np.rollaxis(values, 0, axis % ndim + 1)\n         numnew = values.shape[axis]\n         newshape[axis] += numnew\n         new = empty(newshape, arr.dtype, arr.flags.fnc)"
    },
    {
        "commit_id": "196398fadb7fe402a67ccea0bc1546b36d066440",
        "commit_message": "Merge pull request #3527 from dmuellner/master\n\nFix for the NumPy C-API deprecation mechanism.",
        "commit_url": "https://github.com/numpy/numpy/commit/196398fadb7fe402a67ccea0bc1546b36d066440",
        "buggy_code": "join('include', 'numpy', 'npy_deprecated_api.h'),",
        "fixed_code": "join('include', 'numpy', 'npy_1_7_deprecated_api.h'),",
        "patch": "@@ -766,7 +766,7 @@ def generate_multiarray_templated_sources(ext, build_dir):\n             join('include', 'numpy', 'npy_cpu.h'),\n             join('include', 'numpy', 'numpyconfig.h'),\n             join('include', 'numpy', 'ndarraytypes.h'),\n-            join('include', 'numpy', 'npy_deprecated_api.h'),\n+            join('include', 'numpy', 'npy_1_7_deprecated_api.h'),\n             join('include', 'numpy', '_numpyconfig.h.in'),\n             ]\n "
    },
    {
        "commit_id": "c6ce294f6feeebcdf67b238564c770387be933a5",
        "commit_message": "BUG: Allow to pad arrays by zero entries.\n\nnp.pad will now accept a pad_width containing zeros. The functionality\nwas already implemented, but validation of input was too strict.",
        "commit_url": "https://github.com/numpy/numpy/commit/c6ce294f6feeebcdf67b238564c770387be933a5",
        "buggy_code": "chk = [1 if x > 0 else -1 for x in chk]",
        "fixed_code": "chk = [1 if x >= 0 else -1 for x in chk]",
        "patch": "@@ -1079,7 +1079,7 @@ def _validate_lengths(narray, number_elements):\n     normshp = _normalize_shape(narray, number_elements)\n     for i in normshp:\n         chk = [1 if x is None else x for x in i]\n-        chk = [1 if x > 0 else -1 for x in chk]\n+        chk = [1 if x >= 0 else -1 for x in chk]\n         if (chk[0] < 0) or (chk[1] < 0):\n             fmt = \"%s cannot contain negative values.\"\n             raise ValueError(fmt % (number_elements,))"
    },
    {
        "commit_id": "f2bec652c1a3137db0e0904312fcb9fe773350ec",
        "commit_message": "BUG: Remove xrange that slipped into test_numeric.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/f2bec652c1a3137db0e0904312fcb9fe773350ec",
        "buggy_code": "for e in xrange(n):",
        "fixed_code": "for e in range(n):",
        "patch": "@@ -626,7 +626,7 @@ def load_data(self, n, eindex):\n         \"\"\"Utility method for the issue 2592 tests.\n \n         Raise an exception at the desired index in the iterator.\"\"\"\n-        for e in xrange(n):\n+        for e in range(n):\n             if e == eindex:\n                 raise NIterError('error at index %s' % eindex)\n             yield e"
    },
    {
        "commit_id": "6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "commit_message": "Merge pull request #3460 from charris/fix-polynomial-companion-matrices\n\nBUG: Campanion Matrix was scalar, not matrix for degree 1.",
        "commit_url": "https://github.com/numpy/numpy/commit/6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1795,7 +1795,7 @@ def chebcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "commit_message": "Merge pull request #3460 from charris/fix-polynomial-companion-matrices\n\nBUG: Campanion Matrix was scalar, not matrix for degree 1.",
        "commit_url": "https://github.com/numpy/numpy/commit/6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "buggy_code": "return np.array(-.5*c[0]/c[1])",
        "fixed_code": "return np.array([[-.5*c[0]/c[1]]])",
        "patch": "@@ -1573,7 +1573,7 @@ def hermcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-.5*c[0]/c[1])\n+        return np.array([[-.5*c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "commit_message": "Merge pull request #3460 from charris/fix-polynomial-companion-matrices\n\nBUG: Campanion Matrix was scalar, not matrix for degree 1.",
        "commit_url": "https://github.com/numpy/numpy/commit/6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1570,7 +1570,7 @@ def hermecompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "commit_message": "Merge pull request #3460 from charris/fix-polynomial-companion-matrices\n\nBUG: Campanion Matrix was scalar, not matrix for degree 1.",
        "commit_url": "https://github.com/numpy/numpy/commit/6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "buggy_code": "return np.array(1 + c[0]/c[1])",
        "fixed_code": "return np.array([[1 + c[0]/c[1]]])",
        "patch": "@@ -1571,7 +1571,7 @@ def lagcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(1 + c[0]/c[1])\n+        return np.array([[1 + c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "commit_message": "Merge pull request #3460 from charris/fix-polynomial-companion-matrices\n\nBUG: Campanion Matrix was scalar, not matrix for degree 1.",
        "commit_url": "https://github.com/numpy/numpy/commit/6dd20ff5fa5b937b86fa4a1404ceeabafceaa589",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1596,7 +1596,7 @@ def legcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "commit_message": "BUG: Campanion Matrix was scalar, not matrix for degree 1.\n\nThe companion matrices returned by the various polynomial types was\na scalar in the degree one case instead of a 2-D array. Fix that and\nadd a test to check for that result.\n\nCloses #3459.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1795,7 +1795,7 @@ def chebcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "commit_message": "BUG: Campanion Matrix was scalar, not matrix for degree 1.\n\nThe companion matrices returned by the various polynomial types was\na scalar in the degree one case instead of a 2-D array. Fix that and\nadd a test to check for that result.\n\nCloses #3459.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "buggy_code": "return np.array(-.5*c[0]/c[1])",
        "fixed_code": "return np.array([[-.5*c[0]/c[1]]])",
        "patch": "@@ -1573,7 +1573,7 @@ def hermcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-.5*c[0]/c[1])\n+        return np.array([[-.5*c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "commit_message": "BUG: Campanion Matrix was scalar, not matrix for degree 1.\n\nThe companion matrices returned by the various polynomial types was\na scalar in the degree one case instead of a 2-D array. Fix that and\nadd a test to check for that result.\n\nCloses #3459.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1570,7 +1570,7 @@ def hermecompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "commit_message": "BUG: Campanion Matrix was scalar, not matrix for degree 1.\n\nThe companion matrices returned by the various polynomial types was\na scalar in the degree one case instead of a 2-D array. Fix that and\nadd a test to check for that result.\n\nCloses #3459.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "buggy_code": "return np.array(1 + c[0]/c[1])",
        "fixed_code": "return np.array([[1 + c[0]/c[1]]])",
        "patch": "@@ -1571,7 +1571,7 @@ def lagcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(1 + c[0]/c[1])\n+        return np.array([[1 + c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "commit_message": "BUG: Campanion Matrix was scalar, not matrix for degree 1.\n\nThe companion matrices returned by the various polynomial types was\na scalar in the degree one case instead of a 2-D array. Fix that and\nadd a test to check for that result.\n\nCloses #3459.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e06a261e8ea6b08002de8e9933fd43e5465df9",
        "buggy_code": "return np.array(-c[0]/c[1])",
        "fixed_code": "return np.array([[-c[0]/c[1]]])",
        "patch": "@@ -1596,7 +1596,7 @@ def legcompanion(c):\n     if len(c) < 2:\n         raise ValueError('Series must have maximum degree of at least 1.')\n     if len(c) == 2:\n-        return np.array(-c[0]/c[1])\n+        return np.array([[-c[0]/c[1]]])\n \n     n = len(c) - 1\n     mat = np.zeros((n, n), dtype=c.dtype)"
    },
    {
        "commit_id": "b5fd4296a21a7d580774996207d822200b893524",
        "commit_message": "Merge pull request #3403 from juliantaylor/test-multi-dec\n\nTST: fix some function name conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/b5fd4296a21a7d580774996207d822200b893524",
        "buggy_code": "def test_assign_mask(self):",
        "fixed_code": "def test_assign_mask2(self):",
        "patch": "@@ -1207,7 +1207,7 @@ def test_assign_mask(self):\n         x[m] = 5\n         assert_array_equal(x, array([1,5,3,4]))\n \n-    def test_assign_mask(self):\n+    def test_assign_mask2(self):\n         xorig = array([[1,2,3,4],[5,6,7,8]])\n         m = array([0,1],bool)\n         m2 = array([[0,1],[1,0]],bool)"
    },
    {
        "commit_id": "b5fd4296a21a7d580774996207d822200b893524",
        "commit_message": "Merge pull request #3403 from juliantaylor/test-multi-dec\n\nTST: fix some function name conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/b5fd4296a21a7d580774996207d822200b893524",
        "buggy_code": "def test_nan_outputs(self):",
        "fixed_code": "def test_nan_outputs2(self):",
        "patch": "@@ -348,7 +348,7 @@ def test_nan_outputs(self):\n         assert_hypot_isnan(np.nan, np.nan)\n         assert_hypot_isnan(np.nan, 1)\n \n-    def test_nan_outputs(self):\n+    def test_nan_outputs2(self):\n         assert_hypot_isinf(np.nan, np.inf)\n         assert_hypot_isinf(np.inf, np.nan)\n         assert_hypot_isinf(np.inf, 0)"
    },
    {
        "commit_id": "b5fd4296a21a7d580774996207d822200b893524",
        "commit_message": "Merge pull request #3403 from juliantaylor/test-multi-dec\n\nTST: fix some function name conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/b5fd4296a21a7d580774996207d822200b893524",
        "buggy_code": "def test_testMinMax(self):",
        "fixed_code": "def test_testMinMax2(self):",
        "patch": "@@ -423,7 +423,7 @@ def test_testOddFeatures(self):\n         z = where(c, 1, masked)\n         assert_(eq(z, [99, 1, 1, 99, 99, 99]))\n \n-    def test_testMinMax(self):\n+    def test_testMinMax2(self):\n         \"Test of minumum, maximum.\"\n         assert_(eq(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3]))\n         assert_(eq(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9]))"
    },
    {
        "commit_id": "b5fd4296a21a7d580774996207d822200b893524",
        "commit_message": "Merge pull request #3403 from juliantaylor/test-multi-dec\n\nTST: fix some function name conflicts",
        "commit_url": "https://github.com/numpy/numpy/commit/b5fd4296a21a7d580774996207d822200b893524",
        "buggy_code": "def test_masked_binary_operations(self):",
        "fixed_code": "def test_masked_binary_operations2(self):",
        "patch": "@@ -116,7 +116,7 @@ def test_masked_binary_operations(self):\n         self.assertTrue(isinstance(hypot(mx,mx), mmatrix))\n         self.assertTrue(isinstance(hypot(mx,x), mmatrix))\n \n-    def test_masked_binary_operations(self):\n+    def test_masked_binary_operations2(self):\n         \"Tests domained_masked_binary_operation\"\n         (x, mx) = self.data\n         xmx = masked_array(mx.data.__array__(), mask=mx.mask)"
    },
    {
        "commit_id": "37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "commit_message": "TST: fix some function name conflicts\n\nenables a few extra tests",
        "commit_url": "https://github.com/numpy/numpy/commit/37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "buggy_code": "def test_assign_mask(self):",
        "fixed_code": "def test_assign_mask2(self):",
        "patch": "@@ -1207,7 +1207,7 @@ def test_assign_mask(self):\n         x[m] = 5\n         assert_array_equal(x, array([1,5,3,4]))\n \n-    def test_assign_mask(self):\n+    def test_assign_mask2(self):\n         xorig = array([[1,2,3,4],[5,6,7,8]])\n         m = array([0,1],bool)\n         m2 = array([[0,1],[1,0]],bool)"
    },
    {
        "commit_id": "37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "commit_message": "TST: fix some function name conflicts\n\nenables a few extra tests",
        "commit_url": "https://github.com/numpy/numpy/commit/37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "buggy_code": "def test_nan_outputs(self):",
        "fixed_code": "def test_nan_outputs2(self):",
        "patch": "@@ -348,7 +348,7 @@ def test_nan_outputs(self):\n         assert_hypot_isnan(np.nan, np.nan)\n         assert_hypot_isnan(np.nan, 1)\n \n-    def test_nan_outputs(self):\n+    def test_nan_outputs2(self):\n         assert_hypot_isinf(np.nan, np.inf)\n         assert_hypot_isinf(np.inf, np.nan)\n         assert_hypot_isinf(np.inf, 0)"
    },
    {
        "commit_id": "37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "commit_message": "TST: fix some function name conflicts\n\nenables a few extra tests",
        "commit_url": "https://github.com/numpy/numpy/commit/37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "buggy_code": "def test_testMinMax(self):",
        "fixed_code": "def test_testMinMax2(self):",
        "patch": "@@ -423,7 +423,7 @@ def test_testOddFeatures(self):\n         z = where(c, 1, masked)\n         assert_(eq(z, [99, 1, 1, 99, 99, 99]))\n \n-    def test_testMinMax(self):\n+    def test_testMinMax2(self):\n         \"Test of minumum, maximum.\"\n         assert_(eq(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3]))\n         assert_(eq(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9]))"
    },
    {
        "commit_id": "37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "commit_message": "TST: fix some function name conflicts\n\nenables a few extra tests",
        "commit_url": "https://github.com/numpy/numpy/commit/37723a58124e0013c6f80b28a452b8ce7eb921fa",
        "buggy_code": "def test_masked_binary_operations(self):",
        "fixed_code": "def test_masked_binary_operations2(self):",
        "patch": "@@ -116,7 +116,7 @@ def test_masked_binary_operations(self):\n         self.assertTrue(isinstance(hypot(mx,mx), mmatrix))\n         self.assertTrue(isinstance(hypot(mx,x), mmatrix))\n \n-    def test_masked_binary_operations(self):\n+    def test_masked_binary_operations2(self):\n         \"Tests domained_masked_binary_operation\"\n         (x, mx) = self.data\n         xmx = masked_array(mx.data.__array__(), mask=mx.mask)"
    },
    {
        "commit_id": "41f6a89fe6a0201c3575446ed4140b52f51f64b2",
        "commit_message": "Merge pull request #3402 from argriffing/patch-3\n\ntypo",
        "commit_url": "https://github.com/numpy/numpy/commit/41f6a89fe6a0201c3575446ed4140b52f51f64b2",
        "buggy_code": "\"\"\"Compute the exteme singular values of the 2-D matrices in `x`.",
        "fixed_code": "\"\"\"Compute the extreme singular values of the 2-D matrices in `x`.",
        "patch": "@@ -1867,7 +1867,7 @@ def lstsq(a, b, rcond=-1):\n \n \n def _multi_svd_norm(x, row_axis, col_axis, op):\n-    \"\"\"Compute the exteme singular values of the 2-D matrices in `x`.\n+    \"\"\"Compute the extreme singular values of the 2-D matrices in `x`.\n \n     This is a private utility function used by numpy.linalg.norm().\n "
    },
    {
        "commit_id": "d3a7c893439c31ef287daf817dbd0cbe9c5ac16b",
        "commit_message": "BUG: Handle a version string from a custom-built mingw64.\n\nThe custom build compiler \"GNU Fortran (rubenvb-4.8.0) 4.8.0\" was\nincorrectly parsed as version '-4.8.0' and the flag \"-mno-cygwin\" was\nadded to the compilation.\n\nSee http://cens.ioc.ee/pipermail/f2py-users/2010-October/002092.html.",
        "commit_url": "https://github.com/numpy/numpy/commit/d3a7c893439c31ef287daf817dbd0cbe9c5ac16b",
        "buggy_code": "m = re.match(r'GNU Fortran.*?([0-9-.]+)', version_string)",
        "fixed_code": "m = re.match(r'GNU Fortran.*?\\-?([0-9-.]+)', version_string)",
        "patch": "@@ -41,7 +41,7 @@ def gnu_version_match(self, version_string):\n         m = re.match(r'GNU Fortran\\s+95.*?([0-9-.]+)', version_string)\n         if m:\n             return ('gfortran', m.group(1))\n-        m = re.match(r'GNU Fortran.*?([0-9-.]+)', version_string)\n+        m = re.match(r'GNU Fortran.*?\\-?([0-9-.]+)', version_string)\n         if m:\n             v = m.group(1)\n             if v.startswith('0') or v.startswith('2') or v.startswith('3'):"
    },
    {
        "commit_id": "e50475a64050bdea104d39ad2c487e847fe4b031",
        "commit_message": "BUG: The npv function in financial.py was incorrectly implemented.\n\nCorrect the implementation of the npv function, its documentation, and\nthe mirr function that depends on it. The test_financial.py is also\ncorrected to take into account those modifications\n\nThe npv function behavior was contrary to what the documentation stated\nas it summed indexes 1 to M instead of 0 to M-1. The mirr function used\na corrective factor to get the correct result in spite of that error so\nthat factor is removed.\n\nCloses #649",
        "commit_url": "https://github.com/numpy/numpy/commit/e50475a64050bdea104d39ad2c487e847fe4b031",
        "buggy_code": "117.04, 2)",
        "fixed_code": "122.89, 2)",
        "patch": "@@ -41,7 +41,7 @@ def test_nper2(self):\n \n     def test_npv(self):\n         assert_almost_equal(np.npv(0.05,[-15000,1500,2500,3500,4500,6000]),\n-                            117.04, 2)\n+                            122.89, 2)\n \n     def test_mirr(self):\n         val = [-4500,-800,800,800,600,600,800,800,700,3000]"
    },
    {
        "commit_id": "5808c8a3f67fd03de0a5b5c2c95613a230b6b3c1",
        "commit_message": "Merge pull request #3296 from pv/fix-sphinxext\n\nBUG: sphinxext: fix sphinx extensions broken recently",
        "commit_url": "https://github.com/numpy/numpy/commit/5808c8a3f67fd03de0a5b5c2c95613a230b6b3c1",
        "buggy_code": "import re, inspect, textwrap, pydoc",
        "fixed_code": "import sys, re, inspect, textwrap, pydoc",
        "patch": "@@ -1,6 +1,6 @@\n from __future__ import division, absolute_import, print_function\n \n-import re, inspect, textwrap, pydoc\n+import sys, re, inspect, textwrap, pydoc\n import sphinx\n import collections\n from .docscrape import NumpyDocString, FunctionDoc, ClassDoc"
    },
    {
        "commit_id": "54524cdce7806e50813688b95c89b039a32f0a7c",
        "commit_message": "BUG: sphinxext: fix sphinx extensions broken recently",
        "commit_url": "https://github.com/numpy/numpy/commit/54524cdce7806e50813688b95c89b039a32f0a7c",
        "buggy_code": "import re, inspect, textwrap, pydoc",
        "fixed_code": "import sys, re, inspect, textwrap, pydoc",
        "patch": "@@ -1,6 +1,6 @@\n from __future__ import division, absolute_import, print_function\n \n-import re, inspect, textwrap, pydoc\n+import sys, re, inspect, textwrap, pydoc\n import sphinx\n import collections\n from .docscrape import NumpyDocString, FunctionDoc, ClassDoc"
    },
    {
        "commit_id": "c92d924dd3dfa9eb97f65848e04ec9391709bc09",
        "commit_message": "MAINT: Remove unneeded version checks.\n\nNow that only Python versions 2.6-2.7 and 3.2-3.3 are supported\nsome version checks are no longer needed. This patch removes them\nso as to clean up the code.",
        "commit_url": "https://github.com/numpy/numpy/commit/c92d924dd3dfa9eb97f65848e04ec9391709bc09",
        "buggy_code": "@dec.skipif(sys.version_info[0] > 2)",
        "fixed_code": "@dec.skipif(sys.version_info[0] >= 3)",
        "patch": "@@ -440,7 +440,7 @@ def test_complex_dtype_repr(self):\n         assert_equal(repr(dt),\n                     \"dtype([('a', '<M8[D]'), ('b', '<m8[us]')])\")\n \n-    @dec.skipif(sys.version_info[0] > 2)\n+    @dec.skipif(sys.version_info[0] >= 3)\n     def test_dtype_str_with_long_in_shape(self):\n         # Pull request #376\n         dt = np.dtype('(1L,)i4')"
    },
    {
        "commit_id": "211154eb336f5314b33e2486fa79953c90be8a11",
        "commit_message": "BUG: Fix typo in docscrape_sphinx.py import.",
        "commit_url": "https://github.com/numpy/numpy/commit/211154eb336f5314b33e2486fa79953c90be8a11",
        "buggy_code": "import re, inspect, textwrap, pydoc, aya",
        "fixed_code": "import re, inspect, textwrap, pydoc",
        "patch": "@@ -1,6 +1,6 @@\n from __future__ import division, absolute_import, print_function\n \n-import re, inspect, textwrap, pydoc, aya\n+import re, inspect, textwrap, pydoc\n import sphinx\n import collections\n from .docscrape import NumpyDocString, FunctionDoc, ClassDoc"
    },
    {
        "commit_id": "f1b20f92f8a959359d01de5cf05f3d6babe8e145",
        "commit_message": "Merge pull request #3229 from jdkloe/master\n\nFix for issue 3192",
        "commit_url": "https://github.com/numpy/numpy/commit/f1b20f92f8a959359d01de5cf05f3d6babe8e145",
        "buggy_code": "exec('c = isintent_%s(var)' % intent)",
        "fixed_code": "c = eval('isintent_%s(var)' % intent)",
        "patch": "@@ -2611,7 +2611,7 @@ def true_intent_list(var):\n     ret = []\n     for intent in lst:\n         try:\n-            exec('c = isintent_%s(var)' % intent)\n+            c = eval('isintent_%s(var)' % intent)\n         except NameError:\n             c = 0\n         if c:"
    },
    {
        "commit_id": "e7db8c0f5ef7a302e05be767ebe9cfa81d953a6d",
        "commit_message": "BUG: Repair tests\n\nOops..",
        "commit_url": "https://github.com/numpy/numpy/commit/e7db8c0f5ef7a302e05be767ebe9cfa81d953a6d",
        "buggy_code": "assert_equal(a[b[1], [4, 5, 6])",
        "fixed_code": "assert_equal(a[b[1]], [[4, 5, 6]])",
        "patch": "@@ -107,7 +107,7 @@ def test_boolean_indexing_twodim(self):\n                       [False,  True, False],\n                       [ True, False,  True]])\n         assert_equal(a[b], [1, 3, 5, 7, 9])\n-        assert_equal(a[b[1], [4, 5, 6])\n+        assert_equal(a[b[1]], [[4, 5, 6]])\n         assert_equal(a[b[0]], a[b[2]])\n \n         # boolean assignment"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "return join(map(lambda o, c=convert, j=join: strseq(o, c, j), object))",
        "fixed_code": "return join([strseq(_o, convert, join) for _o in object])",
        "patch": "@@ -152,7 +152,7 @@ def joinseq(seq):\n def strseq(object, convert, join=joinseq):\n     \"\"\"Recursively walk a sequence, stringifying each element.\"\"\"\n     if type(object) in [types.ListType, types.TupleType]:\n-        return join(map(lambda o, c=convert, j=join: strseq(o, c, j), object))\n+        return join([strseq(_o, convert, join) for _o in object])\n     else:\n         return convert(object)\n "
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "_all_chars = map(chr, list(range(256)))",
        "fixed_code": "_all_chars = [chr(_m) for _m in range(256)]",
        "patch": "@@ -116,7 +116,7 @@ class long(int):\n # \"import string\" is costly to import!\n # Construct the translation tables directly\n #   \"A\" = chr(65), \"a\" = chr(97)\n-_all_chars = map(chr, list(range(256)))\n+_all_chars = [chr(_m) for _m in range(256)]\n _ascii_upper = _all_chars[65:65+26]\n _ascii_lower = _all_chars[97:97+26]\n LOWER_TABLE=\"\".join(_all_chars[:65] + _ascii_lower + _all_chars[65+26:])"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "if saveout and (0 not in map(lambda x,y:x==y,saveout,outneeds[n])) \\",
        "fixed_code": "if saveout and (0 not in map(lambda x,y:x==y, saveout, outneeds[n])) \\",
        "patch": "@@ -1212,7 +1212,7 @@ def get_needs():\n                 else:\n                     out.append(outneeds[n][0])\n                     del outneeds[n][0]\n-            if saveout and (0 not in map(lambda x,y:x==y,saveout,outneeds[n])) \\\n+            if saveout and (0 not in map(lambda x,y:x==y, saveout, outneeds[n])) \\\n                    and outneeds[n] != []:\n                 print(n,saveout)\n                 errmess('get_needs: no progress in sorting needs, probably circular dependence, skipping.\\n')"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "inames1_tps = ','.join(map(lambda s:'char *'+s,inames1))",
        "fixed_code": "inames1_tps = ','.join(['char *'+s for s in inames1])",
        "patch": "@@ -96,7 +96,7 @@ def dadd(line,s=doc): s[0] = '%s\\n%s'%(s[0],line)\n             cadd('\\t{\\\"%s\\\",%s,{{%s}},%s},'%(n,dm['rank'],dms,at))\n         cadd('\\t{NULL}\\n};')\n         inames1 = rmbadname(inames)\n-        inames1_tps = ','.join(map(lambda s:'char *'+s,inames1))\n+        inames1_tps = ','.join(['char *'+s for s in inames1])\n         cadd('static void f2py_setup_%s(%s) {'%(name,inames1_tps))\n         cadd('\\tint i_f2py=0;')\n         for n in inames1:"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "fadd(' allocate(d(%s))\\n'%(','.join(map(lambda i:'s(%s)'%i,dms))))",
        "fixed_code": "fadd(' allocate(d(%s))\\n'%(','.join(['s(%s)'%i for i in dms])))",
        "patch": "@@ -158,7 +158,7 @@ def iadd(line,s=ihooks): s[0] = '%s\\n%s'%(s[0],line)\n                 fadd('integer flag\\n')\n                 fhooks[0]=fhooks[0]+fgetdims1\n                 dms = eval('range(1,%s+1)'%(dm['rank']))\n-                fadd(' allocate(d(%s))\\n'%(','.join(map(lambda i:'s(%s)'%i,dms))))\n+                fadd(' allocate(d(%s))\\n'%(','.join(['s(%s)'%i for i in dms])))\n                 fhooks[0]=fhooks[0]+use_fgetdims2\n                 fadd('end subroutine %s'%(fargs[-1]))\n             else:"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "seqarrays = map(np.asanyarray, seqarrays)",
        "fixed_code": "seqarrays = [np.asanyarray(_m) for _m in seqarrays]",
        "patch": "@@ -401,7 +401,7 @@ def merge_arrays(seqarrays,\n             seqarrays = (seqarrays,)\n     else:\n         # Make sure we have arrays in the input sequence\n-        seqarrays = map(np.asanyarray, seqarrays)\n+        seqarrays = [np.asanyarray(_m) for _m in seqarrays]\n     # Find the sizes of the inputs and their maximum\n     sizes = tuple(a.size for a in seqarrays)\n     maxlength = max(sizes)"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "return _nx.concatenate(map(atleast_3d,tup),2)",
        "fixed_code": "return _nx.concatenate([atleast_3d(_m) for _m in tup], 2)",
        "patch": "@@ -345,7 +345,7 @@ def dstack(tup):\n            [[3, 4]]])\n \n     \"\"\"\n-    return _nx.concatenate(map(atleast_3d,tup),2)\n+    return _nx.concatenate([atleast_3d(_m) for _m in tup], 2)\n \n def _replace_zero_by_x_arrays(sub_arys):\n     for i in range(len(sub_arys)):"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "newrow.extend(map(_eval,temp))",
        "fixed_code": "newrow.extend(map(_eval, temp))",
        "patch": "@@ -45,7 +45,7 @@ def _convert_from_string(data):\n         newrow = []\n         for col in trow:\n             temp = col.split()\n-            newrow.extend(map(_eval,temp))\n+            newrow.extend(map(_eval, temp))\n         if count == 0:\n             Ncols = len(newrow)\n         elif len(newrow) != Ncols:"
    },
    {
        "commit_id": "a6164794a63215e23fa28432d9acec4727c68d02",
        "commit_message": "2to3: Apply `map` fixer.\n\nIn Python 3 `map` is an iterator while in Python 2 it returns a list.\nThe simple fix applied by the fixer is to inclose all instances of map\nwith `list(...)`. This is not needed in all cases, and even where\nappropriate list comprehensions may be preferred for their clarity.\nConsequently, this patch attempts to use list comprehensions where it\nmakes sense.\n\nWhen the mapped function has two arguments there is another problem that\ncan arise. In Python 3 map stops execution when the shortest argument\nlist is exhausted, while in Python 2 it stops when the longest argument\nlist is exhausted. Consequently the two argument case might need special\ncare. However, we have been running Python3 converted versions of numpy\nsince 1.5 without problems, so it is probably not something that affects\nus.\n\nCloses #3068",
        "commit_url": "https://github.com/numpy/numpy/commit/a6164794a63215e23fa28432d9acec4727c68d02",
        "buggy_code": "newrow.extend(map(_eval,temp))",
        "fixed_code": "newrow.extend(map(_eval, temp))",
        "patch": "@@ -40,7 +40,7 @@ def _convert_from_string(data):\n         newrow = []\n         for col in trow:\n             temp = col.split()\n-            newrow.extend(map(_eval,temp))\n+            newrow.extend(map(_eval, temp))\n         if count == 0:\n             Ncols = len(newrow)\n         elif len(newrow) != Ncols:"
    },
    {
        "commit_id": "6339930ff42f52259e898b18eb6e9dd7d1be4f86",
        "commit_message": "MAINT: Fixup more dictionary fixer fixes.\n\nMost of these are places where an iterator will work as well as a\nlist, but two fix places where `iterkeys` was introduced which is\na bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/6339930ff42f52259e898b18eb6e9dd7d1be4f86",
        "buggy_code": "return sorted(list(d.items()), key=lambda x_y: (x_y[1], x_y[0]))",
        "fixed_code": "return sorted(d.items(), key=lambda x_y: (x_y[1], x_y[0]))",
        "patch": "@@ -448,7 +448,7 @@ def fullapi_hash(api_dicts):\n         def sorted_by_values(d):\n             \"\"\"Sort a dictionary by its values. Assume the dictionary items is of\n             the form func_name -> order\"\"\"\n-            return sorted(list(d.items()), key=lambda x_y: (x_y[1], x_y[0]))\n+            return sorted(d.items(), key=lambda x_y: (x_y[1], x_y[0]))\n         for name, index in sorted_by_values(d):\n             a.extend(name)\n             a.extend(str(index))"
    },
    {
        "commit_id": "6339930ff42f52259e898b18eb6e9dd7d1be4f86",
        "commit_message": "MAINT: Fixup more dictionary fixer fixes.\n\nMost of these are places where an iterator will work as well as a\nlist, but two fix places where `iterkeys` was introduced which is\na bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/6339930ff42f52259e898b18eb6e9dd7d1be4f86",
        "buggy_code": "ScalarType.extend(list(_sctype2char_dict.keys()))",
        "fixed_code": "ScalarType.extend(_sctype2char_dict.keys())",
        "patch": "@@ -863,7 +863,7 @@ def sctype2char(sctype):\n     # Py3K\n     ScalarType = [int, float, complex, long, bool, bytes, str, memoryview]\n \n-ScalarType.extend(list(_sctype2char_dict.keys()))\n+ScalarType.extend(_sctype2char_dict.keys())\n ScalarType = tuple(ScalarType)\n for key in _sctype2char_dict.keys():\n     cast[key] = lambda x, k=key : array(x, copy=False).astype(k)"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for name, locations in documented.iteritems():",
        "fixed_code": "for name, locations in documented.items():",
        "patch": "@@ -74,7 +74,7 @@ def main():\n \n     # report\n     in_sections = {}\n-    for name, locations in documented.iteritems():\n+    for name, locations in documented.items():\n         for (filename, section, keyword, toctree) in locations:\n             in_sections.setdefault((filename, section, keyword), []).append(name)\n "
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "(valid_filemodes + mode_equivalents.keys()))",
        "fixed_code": "(valid_filemodes + list(mode_equivalents.keys())))",
        "patch": "@@ -201,7 +201,7 @@ def __new__(subtype, filename, dtype=uint8, mode='r+', offset=0,\n         except KeyError:\n             if mode not in valid_filemodes:\n                 raise ValueError(\"mode must be one of %s\" %\n-                                 (valid_filemodes + mode_equivalents.keys()))\n+                                 (valid_filemodes + list(mode_equivalents.keys())))\n \n         if hasattr(filename,'read'):\n             fid = filename"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for arr_type, prec in dtypes_prec.iteritems():",
        "fixed_code": "for arr_type, prec in dtypes_prec.items():",
        "patch": "@@ -105,7 +105,7 @@ def test_dot_array_order():\n     dtypes_prec = {np.float64: 7, np.float32: 5}\n     np.random.seed(7)\n \n-    for arr_type, prec in dtypes_prec.iteritems():\n+    for arr_type, prec in dtypes_prec.items():\n         for a_order in orders:\n             a = np.asarray(np.random.randn(a_dim, a_dim),\n                 dtype=arr_type, order=a_order)"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "self.packages = build_src.py_modules_dict.keys ()",
        "fixed_code": "self.packages = list(build_src.py_modules_dict.keys ())",
        "patch": "@@ -8,7 +8,7 @@ class build_py(old_build_py):\n     def run(self):\n         build_src = self.get_finalized_command('build_src')\n         if build_src.py_modules_dict and self.packages is None:\n-            self.packages = build_src.py_modules_dict.keys ()\n+            self.packages = list(build_src.py_modules_dict.keys ())\n         old_build_py.run(self)\n \n     def find_package_modules(self, package, package_dir):"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "allkeys = adict.keys()",
        "fixed_code": "allkeys = list(adict.keys())",
        "patch": "@@ -303,7 +303,7 @@ def unique_key(adict):\n     # currently it works by appending together n of the letters of the\n     #   current keys and increasing n until a unique key is found\n     # -- not particularly quick\n-    allkeys = adict.keys()\n+    allkeys = list(adict.keys())\n     done = False\n     n = 1\n     while not done:"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "oldenv = _preserve_environment( env.keys() )",
        "fixed_code": "oldenv = _preserve_environment( list(env.keys()) )",
        "patch": "@@ -195,7 +195,7 @@ def exec_command( command,\n     else:\n         log.debug('Retaining cwd: %s' % oldcwd)\n \n-    oldenv = _preserve_environment( env.keys() )\n+    oldenv = _preserve_environment( list(env.keys()) )\n     _update_environment( **env )\n \n     try:"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "allkeys = adict.keys()",
        "fixed_code": "allkeys = list(adict.keys())",
        "patch": "@@ -111,7 +111,7 @@ def conv(astr):\n \n def unique_key(adict):\n     \"\"\" Obtain a unique key given a dictionary.\"\"\"\n-    allkeys = adict.keys()\n+    allkeys = list(adict.keys())\n     done = False\n     n = 1\n     while not done:"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for name, c in _gdict_.iteritems():",
        "fixed_code": "for name, c in _gdict_.items():",
        "patch": "@@ -2140,7 +2140,7 @@ def show_all(argv=None):\n         show_only.append(n)\n     show_all = not show_only\n     _gdict_ = globals().copy()\n-    for name, c in _gdict_.iteritems():\n+    for name, c in _gdict_.items():\n         if not inspect.isclass(c):\n             continue\n         if not issubclass(c, system_info) or c is system_info:"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for k in 2*d.keys():",
        "fixed_code": "for k in 2*list(d.keys()):",
        "patch": "@@ -613,7 +613,7 @@ def replace(str,d,defaultsep=''):\n         return map(lambda d,f=replace,sep=defaultsep,s=str:f(s,d,sep),d)\n     if type(str)==types.ListType:\n         return map(lambda s,f=replace,sep=defaultsep,d=d:f(s,d,sep),str)\n-    for k in 2*d.keys():\n+    for k in 2*list(d.keys()):\n         if k=='separatorsfor':\n             continue\n         if 'separatorsfor' in d and k in d['separatorsfor']:"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "allowed_keys = fcompiler.fcompiler_class.keys()",
        "fixed_code": "allowed_keys = list(fcompiler.fcompiler_class.keys())",
        "patch": "@@ -469,7 +469,7 @@ def run_compile():\n             if s[:len(v)]==v:\n                 from numpy.distutils import fcompiler\n                 fcompiler.load_all_fcompiler_classes()\n-                allowed_keys = fcompiler.fcompiler_class.keys()\n+                allowed_keys = list(fcompiler.fcompiler_class.keys())\n                 nv = ov = s[len(v):].lower()\n                 if ov not in allowed_keys:\n                     vmap = {} # XXX"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "return self._file_openers.keys()",
        "fixed_code": "return list(self._file_openers.keys())",
        "patch": "@@ -104,7 +104,7 @@ def keys(self):\n \n         \"\"\"\n         self._load()\n-        return self._file_openers.keys()\n+        return list(self._file_openers.keys())\n     def __getitem__(self, key):\n         self._load()\n         return self._file_openers[key]"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "(modefunc.keys(),))",
        "fixed_code": "(list(modefunc.keys()),))",
        "patch": "@@ -754,7 +754,7 @@ def pad(array, pad_width, mode=None, **kwargs):\n                 kwargs[i] = _normalize_shape(narray, kwargs[i])\n     elif mode == None:\n         raise ValueError('Keyword \"mode\" must be a function or one of %s.' %\n-                          (modefunc.keys(),))\n+                          (list(modefunc.keys()),))\n     else:\n         # User supplied function, I hope\n         function = mode"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "keys = d.keys()",
        "fixed_code": "keys = list(d.keys())",
        "patch": "@@ -344,7 +344,7 @@ def read_array_header_1_0(fp):\n     if not isinstance(d, dict):\n         msg = \"Header is not a dictionary: %r\"\n         raise ValueError(msg % d)\n-    keys = d.keys()\n+    keys = list(d.keys())\n     keys.sort()\n     if keys != ['descr', 'fortran_order', 'shape']:\n         msg = \"Header does not contain the correct keys: %r\""
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for (k, v) in (defaults or {}).iteritems():",
        "fixed_code": "for (k, v) in (defaults or {}).items():",
        "patch": "@@ -317,7 +317,7 @@ def _fix_defaults(output, defaults=None):\n     \"\"\"\n     names = output.dtype.names\n     (data, mask, fill_value) = (output.data, output.mask, output.fill_value)\n-    for (k, v) in (defaults or {}).iteritems():\n+    for (k, v) in (defaults or {}).items():\n         if k in names:\n             fill_value[k] = v\n             data[k][mask[k]] = v"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for name, (docstring, kind, index) in cache.iteritems():",
        "fixed_code": "for name, (docstring, kind, index) in cache.items():",
        "patch": "@@ -755,7 +755,7 @@ def lookfor(what, module=None, import_modules=True, regenerate=False,\n     whats = str(what).lower().split()\n     if not whats: return\n \n-    for name, (docstring, kind, index) in cache.iteritems():\n+    for name, (docstring, kind, index) in cache.items():\n         if kind in ('module', 'object'):\n             # don't show modules or objects\n             continue"
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "for (k, v) in self.__dict__.iteritems():",
        "fixed_code": "for (k, v) in self.__dict__.items():",
        "patch": "@@ -5536,7 +5536,7 @@ def __deepcopy__(self, memo=None):\n         if memo is None:\n             memo = {}\n         memo[id(self)] = copied\n-        for (k, v) in self.__dict__.iteritems():\n+        for (k, v) in self.__dict__.items():\n             copied.__dict__[k] = deepcopy(v, memo)\n         return copied\n "
    },
    {
        "commit_id": "aab46a78cefe9fbd46104496ffad17667784a3f5",
        "commit_message": "2to3: apply `dict` fixer.\n\nIn Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are\niterators. This causes problems when a list is needed so the 2to3 fixer\nexplicitly constructs a list when is finds on of those functions.\nHowever, that is usually not necessary, so a lot of the work here has\nbeen cleaning up those places where the fix is not needed. The big\nexception to that is the `numpy/f2py/crackfortran.py` file. The code\nthere makes extensive use of loops that modify the contents of the\ndictionary being looped through, which raises an error. That together\nwith the obscurity of the code in that file made it safest to let the\n`dict` fixer do its worst.\n\nCloses #3050.",
        "commit_url": "https://github.com/numpy/numpy/commit/aab46a78cefe9fbd46104496ffad17667784a3f5",
        "buggy_code": "paths = self.files.keys()",
        "fixed_code": "paths = list(self.files.keys())",
        "patch": "@@ -110,7 +110,7 @@ def write_html(self, root):\n \n         fd = open(os.path.join(root, 'index.html'), 'w')\n         fd.write(\"<html>\")\n-        paths = self.files.keys()\n+        paths = list(self.files.keys())\n         paths.sort()\n         for path in paths:\n             fd.write('<p><a href=\"%s.html\">%s</a></p>' %"
    },
    {
        "commit_id": "b995d00e2e54bc6ff97f21bd179d1fc4dc3c92cb",
        "commit_message": "BUG: Rebased tools/py3tool.py was missing `,` in list.",
        "commit_url": "https://github.com/numpy/numpy/commit/b995d00e2e54bc6ff97f21bd179d1fc4dc3c92cb",
        "buggy_code": "'xreadlines'",
        "fixed_code": "'xreadlines',",
        "patch": "@@ -79,7 +79,7 @@\n     'apply',\n     'input',\n     'raw_input',\n-    'xreadlines'\n+    'xreadlines',\n     'xrange'\n ]\n "
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for j in xrange(1, len(spec)):",
        "fixed_code": "for j in range(1, len(spec)):",
        "patch": "@@ -414,7 +414,7 @@ def get_dummy_name():\n         itemsize = 1\n         if spec[0].isdigit():\n             j = 1\n-            for j in xrange(1, len(spec)):\n+            for j in range(1, len(spec)):\n                 if not spec[j].isdigit():\n                     break\n             itemsize = int(spec[:j])"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "axis = tuple(xrange(arr.ndim))",
        "fixed_code": "axis = tuple(range(arr.ndim))",
        "patch": "@@ -35,7 +35,7 @@ def _all(a, axis=None, dtype=None, out=None, keepdims=False):\n \n def _count_reduce_items(arr, axis):\n     if axis is None:\n-        axis = tuple(xrange(arr.ndim))\n+        axis = tuple(range(arr.ndim))\n     if not isinstance(axis, tuple):\n         axis = (axis,)\n     items = 1"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "SCANNING, STATE_DOC, STATE_RETTYPE, STATE_NAME, STATE_ARGS = range(5)",
        "fixed_code": "SCANNING, STATE_DOC, STATE_RETTYPE, STATE_NAME, STATE_ARGS = list(range(5))",
        "patch": "@@ -203,7 +203,7 @@ def find_functions(filename, tag='API'):\n     function_name = None\n     function_args = []\n     doclist = []\n-    SCANNING, STATE_DOC, STATE_RETTYPE, STATE_NAME, STATE_ARGS = range(5)\n+    SCANNING, STATE_DOC, STATE_RETTYPE, STATE_NAME, STATE_ARGS = list(range(5))\n     state = SCANNING\n     tagcomment = '/*' + tag\n     for lineno, line in enumerate(fo):"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "_all_chars = map(chr, range(256))",
        "fixed_code": "_all_chars = map(chr, list(range(256)))",
        "patch": "@@ -112,7 +112,7 @@ class long(int):\n # \"import string\" is costly to import!\n # Construct the translation tables directly\n #   \"A\" = chr(65), \"a\" = chr(97)\n-_all_chars = map(chr, range(256))\n+_all_chars = map(chr, list(range(256)))\n _ascii_upper = _all_chars[65:65+26]\n _ascii_lower = _all_chars[97:97+26]\n LOWER_TABLE=\"\".join(_all_chars[:65] + _ascii_lower + _all_chars[65+26:])"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for i in xrange(12):",
        "fixed_code": "for i in range(12):",
        "patch": "@@ -49,7 +49,7 @@ def test_dot_3args():\n     v = np.random.random_sample((16, 32))\n \n     r = np.empty((1024, 32))\n-    for i in xrange(12):\n+    for i in range(12):\n         np.dot(f,v,r)\n     assert_equal(sys.getrefcount(r), 2)\n     r2 = np.dot(f,v,out=None)"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "objects = [object() for i in xrange(10)]",
        "fixed_code": "objects = [object() for i in range(10)]",
        "patch": "@@ -47,7 +47,7 @@ def test_simple(self):\n \n \n     def test_refcounting(self):\n-        objects = [object() for i in xrange(10)]\n+        objects = [object() for i in range(10)]\n         for mode in ('raise', 'clip', 'wrap'):\n             a = np.array(objects)\n             b = np.array([2, 2, 4, 5, 3, 5])"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for i in xrange(ndims):",
        "fixed_code": "for i in range(ndims):",
        "patch": "@@ -45,7 +45,7 @@ def _indices(ndims):\n     # no itertools.product available in Py2.4\n \n     res = [[]]\n-    for i in xrange(ndims):\n+    for i in range(ndims):\n         newres = []\n         for elem in ind:\n             for others in res:"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for x in xrange(24):",
        "fixed_code": "for x in range(24):",
        "patch": "@@ -520,7 +520,7 @@ def test_can_cast(self):\n \n class TestFromiter(TestCase):\n     def makegen(self):\n-        for x in xrange(24):\n+        for x in range(24):\n             yield x**2\n \n     def test_types(self):"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "b = range(3)",
        "fixed_code": "b = list(range(3))",
        "patch": "@@ -151,7 +151,7 @@ def test_2D_array2(self):\n \n def test_concatenate_axis_None():\n     a = np.arange(4, dtype=np.float64).reshape((2,2))\n-    b = range(3)\n+    b = list(range(3))\n     c = ['x']\n     r = np.concatenate((a, a), axis=None)\n     assert_equal(r.dtype, a.dtype)"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for i in xrange(n):",
        "fixed_code": "for i in range(n):",
        "patch": "@@ -449,7 +449,7 @@ def permute_n(n):\n             ret = ()\n             base = permute_n(n-1)\n             for perm in base:\n-                for i in xrange(n):\n+                for i in range(n):\n                     new = perm + [n-1]\n                     new[n-1] = new[i]\n                     new[i] = n-1"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "rl = range(len(pattern_list)-1); rl.reverse()",
        "fixed_code": "rl = list(range(len(pattern_list)-1)); rl.reverse()",
        "patch": "@@ -1047,7 +1047,7 @@ def add_data_dir(self,data_path):\n                 pattern_list = allpath(d).split(os.sep)\n                 pattern_list.reverse()\n                 # /a/*//b/ -> /a/*/b\n-                rl = range(len(pattern_list)-1); rl.reverse()\n+                rl = list(range(len(pattern_list)-1)); rl.reverse()\n                 for i in rl:\n                     if not pattern_list[i]:\n                         del pattern_list[i]"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "spacedigits=[' ']+map(str,range(10))",
        "fixed_code": "spacedigits=[' ']+map(str,list(range(10)))",
        "patch": "@@ -292,7 +292,7 @@ def readfortrancode(ffile,dowithline=show,istop=1):\n     mline_mark = re.compile(r\".*?'''\")\n     if istop: dowithline('',-1)\n     ll,l1='',''\n-    spacedigits=[' ']+map(str,range(10))\n+    spacedigits=[' ']+map(str,list(range(10)))\n     filepositiontext=''\n     fin=fileinput.FileInput(ffile)\n     while 1:"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for j in xrange(5403, 9999999):",
        "fixed_code": "for j in range(5403, 9999999):",
        "patch": "@@ -58,7 +58,7 @@ def get_module_dir():\n def get_temp_module_name():\n     # Assume single-threaded, and the module dir usable only by this thread\n     d = get_module_dir()\n-    for j in xrange(5403, 9999999):\n+    for j in range(5403, 9999999):\n         name = \"_test_ext_module_%d\" % j\n         fn = os.path.join(d, name)\n         if name not in sys.modules and not os.path.isfile(fn+'.py'):"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "rank = range(len(narray.shape))",
        "fixed_code": "rank = list(range(len(narray.shape)))",
        "patch": "@@ -760,7 +760,7 @@ def pad(array, pad_width, mode=None, **kwargs):\n         function = mode\n \n     # Create a new padded array\n-    rank = range(len(narray.shape))\n+    rank = list(range(len(narray.shape)))\n     total_dim_increase = [np.sum(pad_width[i]) for i in rank]\n     offset_slices = [slice(pad_width[i][0],\n                            pad_width[i][0] + narray.shape[i])"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "defaxes = range(ndmin)",
        "fixed_code": "defaxes = list(range(ndmin))",
        "patch": "@@ -307,7 +307,7 @@ def __getitem__(self,key):\n                         k2 = ndmin-tempobj.ndim\n                         if (trans1d < 0):\n                             trans1d += k2 + 1\n-                        defaxes = range(ndmin)\n+                        defaxes = list(range(ndmin))\n                         k1 = trans1d\n                         axes = defaxes[:k1] + defaxes[k2:] + \\\n                                defaxes[k1:k2]"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "Z[range(5), range(5), range(5)] = 1.",
        "fixed_code": "Z[list(range(5)), list(range(5)), list(range(5))] = 1.",
        "patch": "@@ -887,7 +887,7 @@ def test_simple(self):\n         assert_array_equal(H, answer)\n \n         Z = np.zeros((5, 5, 5))\n-        Z[range(5), range(5), range(5)] = 1.\n+        Z[list(range(5)), list(range(5)), list(range(5))] = 1.\n         H, edges = histogramdd([np.arange(5), np.arange(5), np.arange(5)], 5)\n         assert_array_equal(H, Z)\n "
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for j in xrange(3)]",
        "fixed_code": "for j in range(3)]",
        "patch": "@@ -160,7 +160,7 @@ def writer(error_list):\n \n         errors = []\n         threads = [threading.Thread(target=writer, args=(errors,))\n-                   for j in xrange(3)]\n+                   for j in range(3)]\n         for t in threads:\n             t.start()\n         for t in threads:"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "H,xedges,yedges = histogram2d(range(10),range(10))",
        "fixed_code": "H,xedges,yedges = histogram2d(list(range(10)),list(range(10)))",
        "patch": "@@ -191,7 +191,7 @@ def test_simple(self):\n         assert_array_equal(H.T, answer)\n         H = histogram2d(x, y, xedges)[0]\n         assert_array_equal(H.T, answer)\n-        H,xedges,yedges = histogram2d(range(10),range(10))\n+        H,xedges,yedges = histogram2d(list(range(10)),list(range(10)))\n         assert_array_equal(H, eye(10,10))\n         assert_array_equal(xedges, np.linspace(0,9,11))\n         assert_array_equal(yedges, np.linspace(0,9,11))"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "allaxes = range(0, an)",
        "fixed_code": "allaxes = list(range(0, an))",
        "patch": "@@ -226,7 +226,7 @@ def tensorsolve(a, b, axes=None):\n     an = a.ndim\n \n     if axes is not None:\n-        allaxes = range(0, an)\n+        allaxes = list(range(0, an))\n         for k in axes:\n             allaxes.remove(k)\n             allaxes.insert(an, k)"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "axes = range(1, axis+1) + [0,] + range(axis+1, n)",
        "fixed_code": "axes = list(range(1, axis+1)) + [0,] + list(range(axis+1, n))",
        "patch": "@@ -11,7 +11,7 @@ def _move_axis_to_0(a, axis):\n     n = len(a.shape)\n     if axis < 0:\n         axis += n\n-    axes = range(1, axis+1) + [0,] + range(axis+1, n)\n+    axes = list(range(1, axis+1)) + [0,] + list(range(axis+1, n))\n     return transpose(a, axes)\n \n # Add these"
    },
    {
        "commit_id": "91aa03f4a1065319e85c6ee90306971c301fd58c",
        "commit_message": "2to3: Replace xrange by range and use list(range(...)) where needed\n\nIn python3 range is an iterator and `xrange` has been removed. This has\ntwo consequence for code:\n\n    1) Where a list is needed `list(range(...))` must be used.\n    2) `xrange` must be replaced by `range`\n\nBoth of these changes also work in python2 and this patch makes both.\n\nThere are three places fixed that do not need it, but I left them in\nso that the result would be `xrange` clean.\n\nCloses #3092",
        "commit_url": "https://github.com/numpy/numpy/commit/91aa03f4a1065319e85c6ee90306971c301fd58c",
        "buggy_code": "for i in xrange(100):",
        "fixed_code": "for i in range(100):",
        "patch": "@@ -378,7 +378,7 @@ class TestArrayAlmostEqualNulp(unittest.TestCase):\n     @dec.knownfailureif(True, \"Github issue #347\")\n     def test_simple(self):\n         np.random.seed(12345)\n-        for i in xrange(100):\n+        for i in range(100):\n             dev = np.random.randn(10)\n             x = np.ones(10)\n             y = x + dev * np.finfo(np.float64).eps"
    },
    {
        "commit_id": "df813e52675cf873d4b82347b53ed8eda5c6cc06",
        "commit_message": "TST: open the TemporaryFile in ASCII mode\n\nThis should fix gh-3165.\n\nConflicts:\n\tnumpy/distutils/tests/test_exec_command.py",
        "commit_url": "https://github.com/numpy/numpy/commit/df813e52675cf873d4b82347b53ed8eda5c6cc06",
        "buggy_code": "with redirect_stdout(TemporaryFile()):",
        "fixed_code": "with redirect_stdout(TemporaryFile(mode='w+')):",
        "patch": "@@ -69,7 +69,7 @@ def test_exec_command_stdout():\n \n def test_exec_command_stderr():\n     # Test posix version:\n-    with redirect_stdout(TemporaryFile()):\n+    with redirect_stdout(TemporaryFile(mode='w+')):\n         with redirect_stderr(StringIO.StringIO()):\n             exec_command.exec_command(\"cd '.'\")\n "
    },
    {
        "commit_id": "bbcfcf6ad3cbb1cbdc348161ee44f729d41c09d1",
        "commit_message": "Merge pull request #3123 from maxalbert/master\n\nTypo fix in FFT docs",
        "commit_url": "https://github.com/numpy/numpy/commit/bbcfcf6ad3cbb1cbdc348161ee44f729d41c09d1",
        "buggy_code": "\\\\qquad n = 0,\\\\ldots,n-1.",
        "fixed_code": "\\\\qquad m = 0,\\\\ldots,n-1.",
        "patch": "@@ -113,7 +113,7 @@\n \n .. math::\n    a_m = \\\\frac{1}{n}\\\\sum_{k=0}^{n-1}A_k\\\\exp\\\\left\\\\{2\\\\pi i{mk\\\\over n}\\\\right\\\\}\n-   \\\\qquad n = 0,\\\\ldots,n-1.\n+   \\\\qquad m = 0,\\\\ldots,n-1.\n \n It differs from the forward transform by the sign of the exponential\n argument and the normalization by :math:`1/n`."
    },
    {
        "commit_id": "c3fedb3434f43e05adb0af822b2ed3a807f7382e",
        "commit_message": "DOC: Fix typo in fft docs (the indexing variable is 'm', not 'n').",
        "commit_url": "https://github.com/numpy/numpy/commit/c3fedb3434f43e05adb0af822b2ed3a807f7382e",
        "buggy_code": "\\\\qquad n = 0,\\\\ldots,n-1.",
        "fixed_code": "\\\\qquad m = 0,\\\\ldots,n-1.",
        "patch": "@@ -113,7 +113,7 @@\n \n .. math::\n    a_m = \\\\frac{1}{n}\\\\sum_{k=0}^{n-1}A_k\\\\exp\\\\left\\\\{2\\\\pi i{mk\\\\over n}\\\\right\\\\}\n-   \\\\qquad n = 0,\\\\ldots,n-1.\n+   \\\\qquad m = 0,\\\\ldots,n-1.\n \n It differs from the forward transform by the sign of the exponential\n argument and the normalization by :math:`1/n`."
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in fid.readlines():",
        "fixed_code": "for line in fid:",
        "patch": "@@ -465,7 +465,7 @@ def get_versions_hash():\n     file = os.path.join(os.path.dirname(__file__), 'cversions.txt')\n     fid = open(file, 'r')\n     try:\n-        for line in fid.readlines():\n+        for line in fid:\n             m = VERRE.match(line)\n             if m:\n                 d.append((int(m.group(1), 16), m.group(2)))"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in target_f.readlines():",
        "fixed_code": "for line in target_f:",
        "patch": "@@ -484,7 +484,7 @@ def generate_config_h(ext, build_dir):\n         else:\n             mathlibs = []\n             target_f = open(target)\n-            for line in target_f.readlines():\n+            for line in target_f:\n                 s = '#define MATHLIB'\n                 if line.startswith(s):\n                     value = line[len(s):].strip()"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for l in f.readlines():",
        "fixed_code": "for l in f:",
        "patch": "@@ -64,7 +64,7 @@ def run(self):\n             f = open(self.record,'r')\n             lines = []\n             need_rewrite = False\n-            for l in f.readlines():\n+            for l in f:\n                 l = l.rstrip()\n                 if ' ' in l:\n                     need_rewrite = True"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in fid.readlines():",
        "fixed_code": "for line in fid:",
        "patch": "@@ -271,7 +271,7 @@ def resolve_includes(source):\n     d = os.path.dirname(source)\n     fid = open(source)\n     lines = []\n-    for line in fid.readlines():\n+    for line in fid:\n         m = include_src_re.match(line)\n         if m:\n             fn = m.group('name')"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in f.readlines():",
        "fixed_code": "for line in f:",
        "patch": "@@ -971,7 +971,7 @@ def get_f77flags(src):\n     flags = {}\n     f = open_latin1(src,'r')\n     i = 0\n-    for line in f.readlines():\n+    for line in f:\n         i += 1\n         if i>20: break\n         m = _f77flags_re.match(line)"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in fi.readlines():",
        "fixed_code": "for line in fi:",
        "patch": "@@ -76,7 +76,7 @@ def get_flags_linker_so(self):\n             log.info('Creating '+new_cfg)\n             fi = open(xlf_cfg,'r')\n             crt1_match = re.compile(r'\\s*crt\\s*[=]\\s*(?P<path>.*)/crt1.o').match\n-            for line in fi.readlines():\n+            for line in fi:\n                 m = crt1_match(line)\n                 if m:\n                     fo.write('crt = %s/bundle1.o\\n' % (m.group('path')))"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for line in fid.readlines():",
        "fixed_code": "for line in fid:",
        "patch": "@@ -209,7 +209,7 @@ def resolve_includes(source):\n     d = os.path.dirname(source)\n     fid = open(source)\n     lines = []\n-    for line in fid.readlines():\n+    for line in fid:\n         m = include_src_re.match(line)\n         if m:\n             fn = m.group('name')"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "for d in open(ld_so_conf, 'r').readlines():",
        "fixed_code": "for d in open(ld_so_conf, 'r'):",
        "patch": "@@ -904,7 +904,7 @@ def get_mkl_rootdir(self):\n         paths = os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)\n         ld_so_conf = '/etc/ld.so.conf'\n         if os.path.isfile(ld_so_conf):\n-            for d in open(ld_so_conf, 'r').readlines():\n+            for d in open(ld_so_conf, 'r'):\n                 d = d.strip()\n                 if d:\n                     paths.append(d)"
    },
    {
        "commit_id": "e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "commit_message": "Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines\n\n2to3: Remove xreadlines and replace f.readlines() by f where valid.",
        "commit_url": "https://github.com/numpy/numpy/commit/e108e1c43466cfa34eb2ef7899c2188b0dbbb5de",
        "buggy_code": "inst = [floupi(i) for i in o.readlines()]",
        "fixed_code": "inst = [floupi(i) for i in o]",
        "patch": "@@ -100,7 +100,7 @@ def floupi(line):\n         else:\n             inst = line3[0]\n         return inst\n-    inst = [floupi(i) for i in o.readlines()]\n+    inst = [floupi(i) for i in o]\n     return inst\n \n def has_set(seq, asm_set):"
    },
    {
        "commit_id": "36e979c465150b1846f37f1811b86f63f9d1e085",
        "commit_message": "2to3: apply `execfile` fixer results.\n\nThe execfile command is gone in Python 3. The fix is to read the file,\nthen compile and exec the result.",
        "commit_url": "https://github.com/numpy/numpy/commit/36e979c465150b1846f37f1811b86f63f9d1e085",
        "buggy_code": "execfile('setup.py')",
        "fixed_code": "exec(compile(open('setup.py').read(), 'setup.py', 'exec'))",
        "patch": "@@ -21,4 +21,4 @@\n     setupfile = imp.load_source('setupfile', 'setup.py')\n     setupfile.setup_package()\n else:\n-    execfile('setup.py')\n+    exec(compile(open('setup.py').read(), 'setup.py', 'exec'))"
    },
    {
        "commit_id": "b2ed8f73901c7020e0551515d543b5138e11964a",
        "commit_message": "Merge pull request #2996 from andreas-h/patch-1\n\nUpdate numpy/lib/function_base.py",
        "commit_url": "https://github.com/numpy/numpy/commit/b2ed8f73901c7020e0551515d543b5138e11964a",
        "buggy_code": ">>> np.percentile(a, 0.5, axis=0)",
        "fixed_code": ">>> np.percentile(a, 50, axis=0)",
        "patch": "@@ -3053,7 +3053,7 @@ def percentile(a, q, axis=None, out=None, overwrite_input=False):\n            [ 3,  2,  1]])\n     >>> np.percentile(a, 50)\n     3.5\n-    >>> np.percentile(a, 0.5, axis=0)\n+    >>> np.percentile(a, 50, axis=0)\n     array([ 6.5,  4.5,  2.5])\n     >>> np.percentile(a, 50, axis=1)\n     array([ 7.,  2.])"
    },
    {
        "commit_id": "c5478ef2a402e21b5d9f9533fcb8e6f055b45a35",
        "commit_message": "Update numpy/lib/function_base.py\n\nfix percentile docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/c5478ef2a402e21b5d9f9533fcb8e6f055b45a35",
        "buggy_code": ">>> np.percentile(a, 0.5, axis=0)",
        "fixed_code": ">>> np.percentile(a, 50, axis=0)",
        "patch": "@@ -3053,7 +3053,7 @@ def percentile(a, q, axis=None, out=None, overwrite_input=False):\n            [ 3,  2,  1]])\n     >>> np.percentile(a, 50)\n     3.5\n-    >>> np.percentile(a, 0.5, axis=0)\n+    >>> np.percentile(a, 50, axis=0)\n     array([ 6.5,  4.5,  2.5])\n     >>> np.percentile(a, 50, axis=1)\n     array([ 7.,  2.])"
    },
    {
        "commit_id": "a3bc1467dee14dd4726a83af2fb1a4cb89cbf53b",
        "commit_message": "BUG: numpydoc: check that it works with sub-classes",
        "commit_url": "https://github.com/numpy/numpy/commit/a3bc1467dee14dd4726a83af2fb1a4cb89cbf53b",
        "buggy_code": "and callable(func))]",
        "fixed_code": "and callable(func) and not isinstance(func, type))]",
        "patch": "@@ -511,7 +511,7 @@ def methods(self):\n         return [name for name,func in inspect.getmembers(self._cls)\n                 if ((not name.startswith('_')\n                      or name in self.extra_public_methods)\n-                    and callable(func))]\n+                    and callable(func) and not isinstance(func, type))]\n \n     @property\n     def properties(self):"
    },
    {
        "commit_id": "cedba8efabdcbbeb338a0683cf91b755ab5f9e5c",
        "commit_message": "BUG: numpydoc/linkcode: do not detect linkcode config changes\n\nSince the linkcode_resolve is a function, it triggers configuration\nchange on each rebuild, resulting to full rebuild always. It's better\nto make it not do that.",
        "commit_url": "https://github.com/numpy/numpy/commit/cedba8efabdcbbeb338a0683cf91b755ab5f9e5c",
        "buggy_code": "app.add_config_value('linkcode_resolve', None, 'env')",
        "fixed_code": "app.add_config_value('linkcode_resolve', None, '')",
        "patch": "@@ -76,4 +76,4 @@ def doctree_read(app, doctree):\n \n def setup(app):\n     app.connect('doctree-read', doctree_read)\n-    app.add_config_value('linkcode_resolve', None, 'env')\n+    app.add_config_value('linkcode_resolve', None, '')"
    },
    {
        "commit_id": "109f4265566d39553fb830099b7c745ad70adf46",
        "commit_message": "Merge pull request #2910 from rutsky/doctest_svd_typo\n\nFix typo in SVD usage example",
        "commit_url": "https://github.com/numpy/numpy/commit/109f4265566d39553fb830099b7c745ad70adf46",
        "buggy_code": "((9, 6), (6, 6), (6,))",
        "fixed_code": "((9, 9), (6, 6), (6,))",
        "patch": "@@ -1253,7 +1253,7 @@ def svd(a, full_matrices=1, compute_uv=1):\n \n     >>> U, s, V = np.linalg.svd(a, full_matrices=True)\n     >>> U.shape, V.shape, s.shape\n-    ((9, 6), (6, 6), (6,))\n+    ((9, 9), (6, 6), (6,))\n     >>> S = np.zeros((9, 6), dtype=complex)\n     >>> S[:6, :6] = np.diag(s)\n     >>> np.allclose(a, np.dot(U, np.dot(S, V)))"
    },
    {
        "commit_id": "75bef12aeb994065cf716841d7fd65c09b3062bc",
        "commit_message": "Fix typo in SVD usage example",
        "commit_url": "https://github.com/numpy/numpy/commit/75bef12aeb994065cf716841d7fd65c09b3062bc",
        "buggy_code": "((9, 6), (6, 6), (6,))",
        "fixed_code": "((9, 9), (6, 6), (6,))",
        "patch": "@@ -1253,7 +1253,7 @@ def svd(a, full_matrices=1, compute_uv=1):\n \n     >>> U, s, V = np.linalg.svd(a, full_matrices=True)\n     >>> U.shape, V.shape, s.shape\n-    ((9, 6), (6, 6), (6,))\n+    ((9, 9), (6, 6), (6,))\n     >>> S = np.zeros((9, 6), dtype=complex)\n     >>> S[:6, :6] = np.diag(s)\n     >>> np.allclose(a, np.dot(U, np.dot(S, V)))"
    },
    {
        "commit_id": "a66b412fa853b3b556329c23d80f092d45962282",
        "commit_message": "Merge pull request #2908 from argriffing/patch-1\n\nUpdate numpy/core/code_generators/ufunc_docstrings.py",
        "commit_url": "https://github.com/numpy/numpy/commit/a66b412fa853b3b556329c23d80f092d45962282",
        "buggy_code": "exp : calculate x**p.",
        "fixed_code": "power",
        "patch": "@@ -1099,7 +1099,7 @@ def add_newdoc(place, name, doc):\n \n     See Also\n     --------\n-    exp : calculate x**p.\n+    power\n \n     Notes\n     -----"
    },
    {
        "commit_id": "d1a055b0cd5ad82106901a274d58563df4cd5070",
        "commit_message": "Fix 0-d ndincr to have correct return value.",
        "commit_url": "https://github.com/numpy/numpy/commit/d1a055b0cd5ad82106901a274d58563df4cd5070",
        "buggy_code": "return self.next()",
        "fixed_code": "self.next()",
        "patch": "@@ -542,7 +542,7 @@ def __init__(self):\n                 def __iter__(self):\n                     return self\n                 def ndincr(self):\n-                    return self.next()\n+                    self.next()\n                 def next(self):\n                     if self._N > 0:\n                         self._N -= 1"
    },
    {
        "commit_id": "dd146b6929f79fd6af27528dd4370eaebd5c57a6",
        "commit_message": "Fix the test for numpy.ndindex()",
        "commit_url": "https://github.com/numpy/numpy/commit/dd146b6929f79fd6af27528dd4370eaebd5c57a6",
        "buggy_code": "assert_equal(x, [(0,)])",
        "fixed_code": "assert_equal(x, [()])",
        "patch": "@@ -244,7 +244,7 @@ def test_ndindex():\n \n     # Make sure size argument is optional\n     x = list(np.ndindex())\n-    assert_equal(x, [(0,)])\n+    assert_equal(x, [()])\n \n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "cce1c45afa3d821c5ca313f06b2481e55c98a238",
        "commit_message": "Merge pull request #2879 from rgommers/issue-413-arm-failures\n\nFix ARM failures (gh-413)",
        "commit_url": "https://github.com/numpy/numpy/commit/cce1c45afa3d821c5ca313f06b2481e55c98a238",
        "buggy_code": "ya = np.array(x, dtype=np.complex)",
        "fixed_code": "@dec.skipif(platform.machine() == \"armv5tel\", \"See gh-413.\")",
        "patch": "@@ -151,6 +151,7 @@ def test_simple(self):\n             assert_almost_equal(y[i], y_r[i])\n \n     @platform_skip\n+    @dec.skipif(platform.machine() == \"armv5tel\", \"See gh-413.\")\n     def test_special_values(self):\n         xl = []\n         yl = []\n@@ -477,7 +478,6 @@ def g(a, b):\n             return np.abs(np.complex(a, b))\n \n         xa = np.array(x, dtype=np.complex)\n-        ya = np.array(x, dtype=np.complex)\n         for i in range(len(xa)):\n             ref = g(x[i], y[i])\n             yield check_real_value, f, x[i], y[i], ref"
    },
    {
        "commit_id": "ac749afb940857b74158ce60ff780db12ed5e558",
        "commit_message": "Fix typo in module-level comment.",
        "commit_url": "https://github.com/numpy/numpy/commit/ac749afb940857b74158ce60ff780db12ed5e558",
        "buggy_code": "\"Tests related to deprecation warnings. Also a convenient place",
        "fixed_code": "Tests related to deprecation warnings. Also a convenient place",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-\"Tests related to deprecation warnings. Also a convenient place\n+Tests related to deprecation warnings. Also a convenient place\n to document how deprecations should eventually be turned into errors.\n \"\"\"\n import numpy as np"
    },
    {
        "commit_id": "749e5c1c47a12530018839edf8358457d74224ad",
        "commit_message": "DOC: Fix length mistake in docstring (rfft length is n//2+1, not n)",
        "commit_url": "https://github.com/numpy/numpy/commit/749e5c1c47a12530018839edf8358457d74224ad",
        "buggy_code": "The array of length `n`, containing the sample frequencies.",
        "fixed_code": "The array of length `n//2+1`, containing the sample frequencies.",
        "patch": "@@ -189,7 +189,7 @@ def rfftfreq(n, d=1.0):\n     Returns\n     -------\n     out : ndarray\n-        The array of length `n`, containing the sample frequencies.\n+        The array of length `n//2+1`, containing the sample frequencies.\n \n     Examples\n     --------"
    },
    {
        "commit_id": "1065cc5f9565fd28b6b31c1d6c8004335298e21c",
        "commit_message": "Merge pull request #2767 from charris/fix-buglets\n\nMaint: fix buglets",
        "commit_url": "https://github.com/numpy/numpy/commit/1065cc5f9565fd28b6b31c1d6c8004335298e21c",
        "buggy_code": "from numpy.testing import assert_array_equal, assert_",
        "fixed_code": "from numpy.testing import assert_array_equal, assert_, run_module_suite",
        "patch": "@@ -1,6 +1,6 @@\n import numpy as np\n import numpy.matlib\n-from numpy.testing import assert_array_equal, assert_\n+from numpy.testing import assert_array_equal, assert_, run_module_suite\n \n def test_empty():\n     x = np.matlib.empty((2,))"
    },
    {
        "commit_id": "e33dbfcc42f2d241f10866e0cb8c08a5922fedc8",
        "commit_message": "BUG: Import run_module_suite in test_matlib.py\n\nThis is needed so test_matlib.py can be run by python.",
        "commit_url": "https://github.com/numpy/numpy/commit/e33dbfcc42f2d241f10866e0cb8c08a5922fedc8",
        "buggy_code": "from numpy.testing import assert_array_equal, assert_",
        "fixed_code": "from numpy.testing import assert_array_equal, assert_, run_module_suite",
        "patch": "@@ -1,6 +1,6 @@\n import numpy as np\n import numpy.matlib\n-from numpy.testing import assert_array_equal, assert_\n+from numpy.testing import assert_array_equal, assert_, run_module_suite\n \n def test_empty():\n     x = np.matlib.empty((2,))"
    },
    {
        "commit_id": "dadf5b992802edc6d286b2ea3fd8e446759ad998",
        "commit_message": "Minor fix to fill_view test",
        "commit_url": "https://github.com/numpy/numpy/commit/dadf5b992802edc6d286b2ea3fd8e446759ad998",
        "buggy_code": "y = x.view(np.int32)",
        "fixed_code": "y = x.view(dtype=np.int32)",
        "patch": "@@ -1593,7 +1593,7 @@ def test_fillvalue_in_view(self):\n         # cast the fill_value, e.g. if taking an int64 view of an int32 array,\n         # in other cases, this cannot be done (e.g. int32 view of an int64\n         # array with a large fill_value).\n-        y = x.view(np.int32)\n+        y = x.view(dtype=np.int32)\n         assert_(y.fill_value == 999999)\n \n #------------------------------------------------------------------------------"
    },
    {
        "commit_id": "20224ea62ed42a3ebc0795f62b78309ff9ab1a8a",
        "commit_message": "Merge pull request #2733 from astrofrog/fix-fill-value-python3\n\nFix setting of fill_value for string columns in Python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/20224ea62ed42a3ebc0795f62b78309ff9ab1a8a",
        "buggy_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SV'):",
        "fixed_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):",
        "patch": "@@ -414,7 +414,7 @@ def _check_fill_value(fill_value, ndtype):\n             fill_value = np.array(_recursive_set_fill_value(fill_value, descr),\n                                   dtype=ndtype)\n     else:\n-        if isinstance(fill_value, basestring) and (ndtype.char not in 'SV'):\n+        if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):\n             fill_value = default_fill_value(ndtype)\n         else:\n             # In case we want to convert 1e+20 to int..."
    },
    {
        "commit_id": "3418ffc228a8eaa414f66879301b228d4fc029e8",
        "commit_message": "Merge pull request #2744 from stefanv/setup_etal\n\nPKG: Fix minor typo in setup.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/3418ffc228a8eaa414f66879301b228d4fc029e8",
        "buggy_code": "AUTHOR              = \"Travis E. Oliphant, et.al.\"",
        "fixed_code": "AUTHOR              = \"Travis E. Oliphant et al.\"",
        "patch": "@@ -51,7 +51,7 @@\n DOWNLOAD_URL        = \"http://sourceforge.net/projects/numpy/files/NumPy/\"\n LICENSE             = 'BSD'\n CLASSIFIERS         = filter(None, CLASSIFIERS.split('\\n'))\n-AUTHOR              = \"Travis E. Oliphant, et.al.\"\n+AUTHOR              = \"Travis E. Oliphant et al.\"\n AUTHOR_EMAIL        = \"oliphant@enthought.com\"\n PLATFORMS           = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"]\n MAJOR               = 1"
    },
    {
        "commit_id": "ddbb4bd5cd3ce1b0a48b0a0d1e4a78d02eb99f98",
        "commit_message": "PKG: Fix minor typo in setup.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/ddbb4bd5cd3ce1b0a48b0a0d1e4a78d02eb99f98",
        "buggy_code": "AUTHOR              = \"Travis E. Oliphant, et.al.\"",
        "fixed_code": "AUTHOR              = \"Travis E. Oliphant et al.\"",
        "patch": "@@ -51,7 +51,7 @@\n DOWNLOAD_URL        = \"http://sourceforge.net/projects/numpy/files/NumPy/\"\n LICENSE             = 'BSD'\n CLASSIFIERS         = filter(None, CLASSIFIERS.split('\\n'))\n-AUTHOR              = \"Travis E. Oliphant, et.al.\"\n+AUTHOR              = \"Travis E. Oliphant et al.\"\n AUTHOR_EMAIL        = \"oliphant@enthought.com\"\n PLATFORMS           = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"]\n MAJOR               = 1"
    },
    {
        "commit_id": "4171e5093ff85391458da09342f32dec25822496",
        "commit_message": "Fix setting of fill_value for string columns in Python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/4171e5093ff85391458da09342f32dec25822496",
        "buggy_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SV'):",
        "fixed_code": "if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):",
        "patch": "@@ -414,7 +414,7 @@ def _check_fill_value(fill_value, ndtype):\n             fill_value = np.array(_recursive_set_fill_value(fill_value, descr),\n                                   dtype=ndtype)\n     else:\n-        if isinstance(fill_value, basestring) and (ndtype.char not in 'SV'):\n+        if isinstance(fill_value, basestring) and (ndtype.char not in 'SVU'):\n             fill_value = default_fill_value(ndtype)\n         else:\n             # In case we want to convert 1e+20 to int..."
    },
    {
        "commit_id": "926c5adbf74ee5e9b51fcc8fc8ffc0aa6ee309bc",
        "commit_message": "Merge PR 377: expose Mapiter in the numpy API.\n\n* PR-377:\n  inplace passes tests\n  fixed tests\n  added initial mapiter tests\n  eliminated oned and fancy arguments to MapIterArray\n  changed error handling for clarity\n  removed expsure of mapiter type\n  changed the name of _swap_axes\n  gave MapIter an API",
        "commit_url": "https://github.com/numpy/numpy/commit/926c5adbf74ee5e9b51fcc8fc8ffc0aa6ee309bc",
        "buggy_code": "C_API_VERSION = 0x00000007",
        "fixed_code": "C_API_VERSION = 0x00000008",
        "patch": "@@ -29,7 +29,7 @@\n # without breaking binary compatibility.  In this case, only the C_API_VERSION\n # (*not* C_ABI_VERSION) would be increased.  Whenever binary compatibility is\n # broken, both C_API_VERSION and C_ABI_VERSION should be increased.\n-C_API_VERSION = 0x00000007\n+C_API_VERSION = 0x00000008\n \n class MismatchCAPIWarning(Warning):\n     pass"
    },
    {
        "commit_id": "43f1d5c6ae33fb23b494a2039b303aab3e0e8186",
        "commit_message": "Merge pull request #459 from jseabold/fix-unicode-repr-object\n\nFix unicode repr object",
        "commit_url": "https://github.com/numpy/numpy/commit/43f1d5c6ae33fb23b494a2039b303aab3e0e8186",
        "buggy_code": "format_function = formatdict['str']",
        "fixed_code": "format_function = formatdict['numpystr']",
        "patch": "@@ -308,7 +308,7 @@ def _array2string(a, max_line_width, precision, suppress_small, separator=' ',\n         elif issubclass(dtypeobj, _nt.datetime64):\n             format_function = formatdict['datetime']\n         else:\n-            format_function = formatdict['str']\n+            format_function = formatdict['numpystr']\n \n     # skip over \"[\"\n     next_line_prefix = \" \""
    },
    {
        "commit_id": "8e0a542830e336a036ab9ca64a7ccf87d1953c40",
        "commit_message": "BUG: Use numpystr for arrayprint fallback instead of str",
        "commit_url": "https://github.com/numpy/numpy/commit/8e0a542830e336a036ab9ca64a7ccf87d1953c40",
        "buggy_code": "format_function = formatdict['str']",
        "fixed_code": "format_function = formatdict['numpystr']",
        "patch": "@@ -308,7 +308,7 @@ def _array2string(a, max_line_width, precision, suppress_small, separator=' ',\n         elif issubclass(dtypeobj, _nt.datetime64):\n             format_function = formatdict['datetime']\n         else:\n-            format_function = formatdict['str']\n+            format_function = formatdict['numpystr']\n \n     # skip over \"[\"\n     next_line_prefix = \" \""
    },
    {
        "commit_id": "c8ed8baac1921be53d31d014760f9b278d4b9c2e",
        "commit_message": "Merge pull request #365 from bfroehle/static_f2py_size\n\nBUG: Exported f2py_size symbol prevents linking multiple f2py modules.",
        "commit_url": "https://github.com/numpy/numpy/commit/c8ed8baac1921be53d31d014760f9b278d4b9c2e",
        "buggy_code": "int f2py_size(PyArrayObject* var, ...)",
        "fixed_code": "static int f2py_size(PyArrayObject* var, ...)",
        "patch": "@@ -260,7 +260,7 @@\n \"\"\"\n needs['f2py_size']=['stdarg.h']\n cfuncs['f2py_size']=\"\"\"\\\n-int f2py_size(PyArrayObject* var, ...)\n+static int f2py_size(PyArrayObject* var, ...)\n {\n   npy_int sz = 0;\n   npy_int dim;"
    },
    {
        "commit_id": "4475eadaa879cdc82f5331abc22ab47b99e6b040",
        "commit_message": "BUG: change FutureWarning to DeprecationWarning\n\nUse of PyErr_WarnEx causing failure for Python 2.4.",
        "commit_url": "https://github.com/numpy/numpy/commit/4475eadaa879cdc82f5331abc22ab47b99e6b040",
        "buggy_code": "warnings.simplefilter('ignore', FutureWarning)",
        "fixed_code": "warnings.simplefilter('ignore', DeprecationWarning)",
        "patch": "@@ -212,7 +212,7 @@ def test_concatenate_sloppy0():\n     r4 = list(range(4))\n     r3 = list(range(3))\n     assert_array_equal(concatenate((r4, r3), 0), r4 + r3)\n-    warnings.simplefilter('ignore', FutureWarning)\n+    warnings.simplefilter('ignore', DeprecationWarning)\n     try:\n         assert_array_equal(concatenate((r4, r3), -10), r4 + r3)\n         assert_array_equal(concatenate((r4, r3), 10), r4 + r3)"
    },
    {
        "commit_id": "4c73e7c5b2953d338a91ab912d3077c09acadaed",
        "commit_message": "Merge pull request #423 from adamlwgriffiths/master\n\nFix typo in documentation (101 instead of 10).",
        "commit_url": "https://github.com/numpy/numpy/commit/4c73e7c5b2953d338a91ab912d3077c09acadaed",
        "buggy_code": ">>> x = np.linspace(-10, 10, 101)",
        "fixed_code": ">>> x = np.linspace(-10, 10, 10)",
        "patch": "@@ -46,7 +46,7 @@ def add_newdoc(place, name, doc):\n \n     >>> import matplotlib.pyplot as plt\n \n-    >>> x = np.linspace(-10, 10, 101)\n+    >>> x = np.linspace(-10, 10, 10)\n     >>> plt.plot(x, np.absolute(x))\n     >>> plt.show()\n "
    },
    {
        "commit_id": "0f1d2d929a0f7babb6d4471e987be1da34e06e34",
        "commit_message": "Fix typo in documentation (101 instead of 10).\n\nExamples demonstrate using an array with (-10, 0, 10),\nbut this specific example has a typo that lists the\nlast number as 101.\nThis is reflected in the diagrams having axis labeled\nfrom -10:+10.",
        "commit_url": "https://github.com/numpy/numpy/commit/0f1d2d929a0f7babb6d4471e987be1da34e06e34",
        "buggy_code": ">>> x = np.linspace(-10, 10, 101)",
        "fixed_code": ">>> x = np.linspace(-10, 10, 10)",
        "patch": "@@ -46,7 +46,7 @@ def add_newdoc(place, name, doc):\n \n     >>> import matplotlib.pyplot as plt\n \n-    >>> x = np.linspace(-10, 10, 101)\n+    >>> x = np.linspace(-10, 10, 10)\n     >>> plt.plot(x, np.absolute(x))\n     >>> plt.show()\n "
    },
    {
        "commit_id": "96525749fbecc6695f0dfbf2a7b00ec0105a1078",
        "commit_message": "Merge pull request #376 from cgohlke/patch-2\n\nAllow long numbers in numpy.rec.array formats string",
        "commit_url": "https://github.com/numpy/numpy/commit/96525749fbecc6695f0dfbf2a7b00ec0105a1078",
        "buggy_code": "r'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'",
        "fixed_code": "r'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'",
        "patch": "@@ -133,7 +133,7 @@ def _reconstruct(subtype, shape, dtype):\n \n format_re = re.compile(asbytes(\n                            r'(?P<order1>[<>|=]?)'\n-                           r'(?P<repeats> *[(]?[ ,0-9]*[)]? *)'\n+                           r'(?P<repeats> *[(]?[ ,0-9L]*[)]? *)'\n                            r'(?P<order2>[<>|=]?)'\n                            r'(?P<dtype>[A-Za-z0-9.]*(?:\\[[a-zA-Z0-9,.]+\\])?)'))\n sep_re = re.compile(asbytes(r'\\s*,\\s*'))"
    },
    {
        "commit_id": "e0457eb3e0bb146411dc9471127329c560155bb7",
        "commit_message": "BUG: Exported f2py_size symbol prevents linking multiple f2py modules.",
        "commit_url": "https://github.com/numpy/numpy/commit/e0457eb3e0bb146411dc9471127329c560155bb7",
        "buggy_code": "int f2py_size(PyArrayObject* var, ...)",
        "fixed_code": "static int f2py_size(PyArrayObject* var, ...)",
        "patch": "@@ -260,7 +260,7 @@\n \"\"\"\n needs['f2py_size']=['stdarg.h']\n cfuncs['f2py_size']=\"\"\"\\\n-int f2py_size(PyArrayObject* var, ...)\n+static int f2py_size(PyArrayObject* var, ...)\n {\n   npy_int sz = 0;\n   npy_int dim;"
    },
    {
        "commit_id": "a419a3036aa8202d00eb6e857c79d66adc56bed0",
        "commit_message": "Merge branch 'master' of https://github.com/numpy/numpy into patch-2",
        "commit_url": "https://github.com/numpy/numpy/commit/a419a3036aa8202d00eb6e857c79d66adc56bed0",
        "buggy_code": "work as it used to, but a DeprecationWarning will be issued.",
        "fixed_code": "work as it used to, but a FutureWarning will be issued.",
        "patch": "@@ -937,7 +937,7 @@ def diagonal(a, offset=0, axis1=0, axis2=1):\n \n     In NumPy 1.7, it continues to return a copy of the diagonal, but depending\n     on this fact is deprecated. Writing to the resulting array continues to\n-    work as it used to, but a DeprecationWarning will be issued.\n+    work as it used to, but a FutureWarning will be issued.\n \n     In NumPy 1.8, it will switch to returning a read-only view on the original\n     array. Attempting to write to the resulting array will produce an error."
    },
    {
        "commit_id": "a419a3036aa8202d00eb6e857c79d66adc56bed0",
        "commit_message": "Merge branch 'master' of https://github.com/numpy/numpy into patch-2",
        "commit_url": "https://github.com/numpy/numpy/commit/a419a3036aa8202d00eb6e857c79d66adc56bed0",
        "buggy_code": "raise KnownFailureTest, msg",
        "fixed_code": "raise KnownFailureTest(msg)",
        "patch": "@@ -210,7 +210,7 @@ def knownfail_decorator(f):\n         from noseclasses import KnownFailureTest\n         def knownfailer(*args, **kwargs):\n             if fail_val():\n-                raise KnownFailureTest, msg\n+                raise KnownFailureTest(msg)\n             else:\n                 return f(*args, **kwargs)\n         return nose.tools.make_decorator(f)(knownfailer)"
    },
    {
        "commit_id": "1fa15b0708f62096f0301d3c2fe4442db1ec145d",
        "commit_message": "BUG: '-framework Python' is not needed and can interfere.",
        "commit_url": "https://github.com/numpy/numpy/commit/1fa15b0708f62096f0301d3c2fe4442db1ec145d",
        "buggy_code": "opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup', '-Wl,-framework,Python']",
        "fixed_code": "opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup']",
        "patch": "@@ -111,7 +111,7 @@ def get_flags_linker_so(self):\n                 opt.remove('-shared')\n             except ValueError:\n                 idx = 0\n-            opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup', '-Wl,-framework,Python']\n+            opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup']\n         return opt\n \n class IntelItaniumFCompiler(IntelFCompiler):"
    },
    {
        "commit_id": "51616c9265155f75e536ba19c32f9f91337243af",
        "commit_message": "Rename PyArray_RequireWriteable to PyArray_FailUnlessWriteable\n\nAlso clean up its API slightly so that the caller passes in a name\ndescribing the array being checked which is used to generate an error\nmessage, rather than writing an error message from scratch.",
        "commit_url": "https://github.com/numpy/numpy/commit/51616c9265155f75e536ba19c32f9f91337243af",
        "buggy_code": "'PyArray_RequireWriteable':             307,",
        "fixed_code": "'PyArray_FailUnlessWriteable':          307,",
        "patch": "@@ -344,7 +344,7 @@\n     'NpyNA_FromDTypeAndPayload':            304,\n     'PyArray_AllowNAConverter':             305,\n     'PyArray_OutputAllowNAConverter':       306,\n-    'PyArray_RequireWriteable':             307,\n+    'PyArray_FailUnlessWriteable':          307,\n     'PyArray_SetUpdateIfCopyBase':          308,\n }\n "
    },
    {
        "commit_id": "bfaaefe52fd5ad3cb5d0a1c75061d9866716babe",
        "commit_message": "BUG: fix running tests with coverage=True.\n\nThe --cover-inclusive argument means that coverage.py tries to include every\nsingle .py file in the source tree in the coverage report. This leads to test\nerrors, because it tries to import files like setupscons.py (which will of\ncourse directly fail for anyone not having numscons installed).",
        "commit_url": "https://github.com/numpy/numpy/commit/bfaaefe52fd5ad3cb5d0a1c75061d9866716babe",
        "buggy_code": "'--cover-tests', '--cover-inclusive', '--cover-erase']",
        "fixed_code": "'--cover-tests', '--cover-erase']",
        "patch": "@@ -239,7 +239,7 @@ def prepare_test_args(self, label='fast', verbose=1, extra_argv=None,\n         # our way of doing coverage\n         if coverage:\n             argv+=['--cover-package=%s' % self.package_name, '--with-coverage',\n-                   '--cover-tests', '--cover-inclusive', '--cover-erase']\n+                   '--cover-tests', '--cover-erase']\n         # construct list of plugins\n         import nose.plugins.builtin\n         from noseclasses import KnownFailure, Unplugger"
    },
    {
        "commit_id": "084eed79b7064d6e351281a75d0f0baecc6d851a",
        "commit_message": "Merge pull request #272 from mwiebe/datetime64_compare\n\nBUG: umath: greater_equal ufunc was using the wrong type resolver",
        "commit_url": "https://github.com/numpy/numpy/commit/084eed79b7064d6e351281a75d0f0baecc6d851a",
        "buggy_code": "None,",
        "fixed_code": "'PyUFunc_SimpleBinaryComparisonTypeResolver',",
        "patch": "@@ -387,7 +387,7 @@ def english_upper(s):\n 'greater_equal' :\n     Ufunc(2, 1, None,\n           docstrings.get('numpy.core.umath.greater_equal'),\n-          None,\n+          'PyUFunc_SimpleBinaryComparisonTypeResolver',\n           TD(all, out='?'),\n           ),\n 'less' :"
    },
    {
        "commit_id": "6c95a007ad8f661e6ab0185a16e6782c7ba158d5",
        "commit_message": "BUG: umath: greater_equal ufunc was using the wrong type resolver, failed with datetime64\n\nThis bug was found by running the pandas master against numpy master.",
        "commit_url": "https://github.com/numpy/numpy/commit/6c95a007ad8f661e6ab0185a16e6782c7ba158d5",
        "buggy_code": "None,",
        "fixed_code": "'PyUFunc_SimpleBinaryComparisonTypeResolver',",
        "patch": "@@ -387,7 +387,7 @@ def english_upper(s):\n 'greater_equal' :\n     Ufunc(2, 1, None,\n           docstrings.get('numpy.core.umath.greater_equal'),\n-          None,\n+          'PyUFunc_SimpleBinaryComparisonTypeResolver',\n           TD(all, out='?'),\n           ),\n 'less' :"
    },
    {
        "commit_id": "4872caccb9a4f5d11e46072159f282337e09c70e",
        "commit_message": "BLD: fix build error on Windows with MSVC9. Thanks to Christoph Gohlke.",
        "commit_url": "https://github.com/numpy/numpy/commit/4872caccb9a4f5d11e46072159f282337e09c70e",
        "buggy_code": "fid = open(filename, 'r')",
        "fixed_code": "fid = open(filename, 'rb')",
        "patch": "@@ -176,7 +176,7 @@ def pyod(filename):\n     def _pyod2():\n         out = []\n \n-        fid = open(filename, 'r')\n+        fid = open(filename, 'rb')\n         try:\n             yo = [int(oct(int(binascii.b2a_hex(o), 16))) for o in fid.read()]\n             for i in range(0, len(yo), 16):"
    },
    {
        "commit_id": "b6b5ba1387d754a595838bab4dbdd80f61e0d63e",
        "commit_message": "BUG: fix regression for indexing chararrays with empty list. Closes #1948.",
        "commit_url": "https://github.com/numpy/numpy/commit/b6b5ba1387d754a595838bab4dbdd80f61e0d63e",
        "buggy_code": "if issubclass(val.dtype.type, character):",
        "fixed_code": "if issubclass(val.dtype.type, character) and not _len(val) == 0:",
        "patch": "@@ -1881,7 +1881,7 @@ def __array_finalize__(self, obj):\n \n     def __getitem__(self, obj):\n         val = ndarray.__getitem__(self, obj)\n-        if issubclass(val.dtype.type, character):\n+        if issubclass(val.dtype.type, character) and not _len(val) == 0:\n             temp = val.rstrip()\n             if _len(temp) == 0:\n                 val = ''"
    },
    {
        "commit_id": "8e8a4ca90319e28d21c6ba32d7249c47ad014025",
        "commit_message": "BUG: Fix missing np prefix in test_function_base.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/8e8a4ca90319e28d21c6ba32d7249c47ad014025",
        "buggy_code": "assert_(all(digitize(x, bins, True) != 10))",
        "fixed_code": "assert_(np.all(digitize(x, bins, True) != 10))",
        "patch": "@@ -450,7 +450,7 @@ def test_right_open_reverse(self):\n     def test_right_open_random(self):\n         x = rand(10)\n         bins = np.linspace(x.min(), x.max(), 10)\n-        assert_(all(digitize(x, bins, True) != 10))\n+        assert_(np.all(digitize(x, bins, True) != 10))\n \n \n class TestUnwrap(TestCase):"
    },
    {
        "commit_id": "88a02920daf0b408086106439c53bd488e73af29",
        "commit_message": "BUG: Fix bug in irfftn.",
        "commit_url": "https://github.com/numpy/numpy/commit/88a02920daf0b408086106439c53bd488e73af29",
        "buggy_code": "s[axes[-1]] = (s[axes[-1]] - 1) * 2",
        "fixed_code": "s[-1] = (a.shape[axes[-1]] - 1) * 2",
        "patch": "@@ -511,7 +511,7 @@ def _cook_nd_args(a, s=None, axes=None, invreal=0):\n     if len(s) != len(axes):\n         raise ValueError(\"Shape and axes have different lengths.\")\n     if invreal and shapeless:\n-        s[axes[-1]] = (s[axes[-1]] - 1) * 2\n+        s[-1] = (a.shape[axes[-1]] - 1) * 2\n     return s, axes\n \n "
    },
    {
        "commit_id": "0abb5edeade4405464850d54ba8ae7cd9535bdfb",
        "commit_message": "BUG: fix some Python 2.4 compatibility issues.",
        "commit_url": "https://github.com/numpy/numpy/commit/0abb5edeade4405464850d54ba8ae7cd9535bdfb",
        "buggy_code": "class _FilterInvalids():",
        "fixed_code": "class _FilterInvalids:",
        "patch": "@@ -5,7 +5,7 @@\n import numpy as np\n \n \n-class _FilterInvalids():\n+class _FilterInvalids:\n     def setUp(self):\n         self.olderr = np.seterr(invalid='ignore')\n "
    },
    {
        "commit_id": "955f471ed5034f772fa1eb1a86429a79e53ff541",
        "commit_message": "TST: filter RuntimeWarnings for invalids from some more test files.\n\nThis should fix the test errors seen on both MinGW and MSVC9 related to this.",
        "commit_url": "https://github.com/numpy/numpy/commit/955f471ed5034f772fa1eb1a86429a79e53ff541",
        "buggy_code": "np.seterr(**olderr)",
        "fixed_code": "np.seterr(**self.olderr)",
        "patch": "@@ -10,7 +10,7 @@ def setUp(self):\n         self.olderr = np.seterr(invalid='ignore')\n \n     def tearDown(self):\n-        np.seterr(**olderr)\n+        np.seterr(**self.olderr)\n \n \n class TestDivision(TestCase):"
    },
    {
        "commit_id": "27befc81755b2d78ad7c9b4892e679996d9eb482",
        "commit_message": "Merge pull request #193 from mwiebe/O8_O4_depr_fix\n\nDEP: Fix up handling of the O4/O8 deprecation",
        "commit_url": "https://github.com/numpy/numpy/commit/27befc81755b2d78ad7c9b4892e679996d9eb482",
        "buggy_code": "a = array([{'a':1}, {'b':2}])",
        "fixed_code": "a = np.array([{'a':1}, {'b':2}])",
        "patch": "@@ -827,7 +827,7 @@ def test_version0_float32(self):\n \n     def test_version0_object(self):\n         s = '\\x80\\x02cnumpy.core._internal\\n_reconstruct\\nq\\x01cnumpy\\nndarray\\nq\\x02K\\x00\\x85U\\x01b\\x87Rq\\x03(K\\x02\\x85cnumpy\\ndtype\\nq\\x04U\\x02O8K\\x00K\\x01\\x87Rq\\x05(U\\x01|NNJ\\xff\\xff\\xff\\xffJ\\xff\\xff\\xff\\xfftb\\x89]q\\x06(}q\\x07U\\x01aK\\x01s}q\\x08U\\x01bK\\x02setb.'\n-        a = array([{'a':1}, {'b':2}])\n+        a = np.array([{'a':1}, {'b':2}])\n         p = self._loads(asbytes(s))\n         assert_equal(a, p)\n "
    },
    {
        "commit_id": "1d90743cc4d7b697b8c96a2f3369410779968a0f",
        "commit_message": "DEP: Fix up handling of the O4/O8 deprecation\n\nFirst issue was that the deprecation warning was still\nbeing raised even when an error was being raised (like for 'O3').\n\nSecond issue was that unpickling of legacy pickles which have 'O8'\nor 'O4' should not raise the deprecation warning. To handle this\nrequired introduction of a global variable, which has been named\nand commented to make it clear this was a necessary evil for this\nspecific case, not a standard NumPy practice.",
        "commit_url": "https://github.com/numpy/numpy/commit/1d90743cc4d7b697b8c96a2f3369410779968a0f",
        "buggy_code": "a = array([{'a':1}, {'b':2}])",
        "fixed_code": "a = np.array([{'a':1}, {'b':2}])",
        "patch": "@@ -827,7 +827,7 @@ def test_version0_float32(self):\n \n     def test_version0_object(self):\n         s = '\\x80\\x02cnumpy.core._internal\\n_reconstruct\\nq\\x01cnumpy\\nndarray\\nq\\x02K\\x00\\x85U\\x01b\\x87Rq\\x03(K\\x02\\x85cnumpy\\ndtype\\nq\\x04U\\x02O8K\\x00K\\x01\\x87Rq\\x05(U\\x01|NNJ\\xff\\xff\\xff\\xffJ\\xff\\xff\\xff\\xfftb\\x89]q\\x06(}q\\x07U\\x01aK\\x01s}q\\x08U\\x01bK\\x02setb.'\n-        a = array([{'a':1}, {'b':2}])\n+        a = np.array([{'a':1}, {'b':2}])\n         p = self._loads(asbytes(s))\n         assert_equal(a, p)\n "
    },
    {
        "commit_id": "5b59ae23cb435c6d8ecb3d81d7c98aa5aa00d7c0",
        "commit_message": "Merge branch 'replace-old-defines'\n\n* replace-old-defines:\n  DOC: clarify numpy version for removal, document sed script better.\n  STY: Fix up the 2.0 (1.7) release notes.\n  DEP: Deprecate the old_defines.h header and the macros therein.\n  UPDATE: Replace macros in old_defines.h by new.\n  DOC: numpybook - Replace macro names in old_defines.h with new.\n  DOC: Replace references to macros in old_defines with new.\n  STY: Replace more found macros in old_defines.h with new.\n  ENH: Add sed script that replaces macros in old_defines.h.\n  STY: f2py - replace macros in old_defines.h with new.\n  STY: linalg - replace macros in old_defines.h with new.\n  STY: fft - replace macros in old_defines.h with new.\n  STY: lib/src - replace macros in old_defines.h with new.\n  STY: core/src - replace macros in old_defines.h with new versions.",
        "commit_url": "https://github.com/numpy/numpy/commit/5b59ae23cb435c6d8ecb3d81d7c98aa5aa00d7c0",
        "buggy_code": "siglist.append('PyArray_%s' % (english_upper(chartoname[x]),))",
        "fixed_code": "siglist.append('NPY_%s' % (english_upper(chartoname[x]),))",
        "patch": "@@ -884,7 +884,7 @@ def make_arrays(funcdict):\n                 funclist.append('%s_%s' % (tname, name))\n \n             for x in t.in_ + t.out:\n-                siglist.append('PyArray_%s' % (english_upper(chartoname[x]),))\n+                siglist.append('NPY_%s' % (english_upper(chartoname[x]),))\n \n             k += 1\n "
    },
    {
        "commit_id": "5b59ae23cb435c6d8ecb3d81d7c98aa5aa00d7c0",
        "commit_message": "Merge branch 'replace-old-defines'\n\n* replace-old-defines:\n  DOC: clarify numpy version for removal, document sed script better.\n  STY: Fix up the 2.0 (1.7) release notes.\n  DEP: Deprecate the old_defines.h header and the macros therein.\n  UPDATE: Replace macros in old_defines.h by new.\n  DOC: numpybook - Replace macro names in old_defines.h with new.\n  DOC: Replace references to macros in old_defines with new.\n  STY: Replace more found macros in old_defines.h with new.\n  ENH: Add sed script that replaces macros in old_defines.h.\n  STY: f2py - replace macros in old_defines.h with new.\n  STY: linalg - replace macros in old_defines.h with new.\n  STY: fft - replace macros in old_defines.h with new.\n  STY: lib/src - replace macros in old_defines.h with new.\n  STY: core/src - replace macros in old_defines.h with new versions.",
        "commit_url": "https://github.com/numpy/numpy/commit/5b59ae23cb435c6d8ecb3d81d7c98aa5aa00d7c0",
        "buggy_code": "self.type_num = getattr(wrap,'PyArray_'+self.NAME)",
        "fixed_code": "self.type_num = getattr(wrap,'NPY_'+self.NAME)",
        "patch": "@@ -129,7 +129,7 @@ def __new__(cls,name):\n \n     def _init(self,name):\n         self.NAME = name.upper()\n-        self.type_num = getattr(wrap,'PyArray_'+self.NAME)\n+        self.type_num = getattr(wrap,'NPY_'+self.NAME)\n         assert_equal(self.type_num,typeinfo[self.NAME][1])\n         self.dtype = typeinfo[self.NAME][-1]\n         self.elsize = typeinfo[self.NAME][2] / 8"
    },
    {
        "commit_id": "48d6edb89112bf00eaaa55f4b7d284b68a9ab84f",
        "commit_message": "BUG: fix incorrect exception handling in arrayprint.  Closes ticket 2038.",
        "commit_url": "https://github.com/numpy/numpy/commit/48d6edb89112bf00eaaa55f4b7d284b68a9ab84f",
        "buggy_code": "except TypeError, NotImplementedError:",
        "fixed_code": "except (TypeError, NotImplementedError):",
        "patch": "@@ -657,7 +657,7 @@ def __init__(self, data):\n             max_str_len = max(len(str(maximum.reduce(data, skipna=True))),\n                               len(str(minimum.reduce(data, skipna=True))))\n             self.format = '%' + str(max_str_len) + 'd'\n-        except TypeError, NotImplementedError:\n+        except (TypeError, NotImplementedError):\n             # if reduce(data) fails, this instance will not be called, just\n             # instantiated in formatdict.\n             pass"
    },
    {
        "commit_id": "0402e1c6a5cc5693a1f021446f20baebe9073890",
        "commit_message": "DOC: Fix cut and paste error, derivative <- integral.",
        "commit_url": "https://github.com/numpy/numpy/commit/0402e1c6a5cc5693a1f021446f20baebe9073890",
        "buggy_code": "Axis over which the derivative is taken. (Default: 0).",
        "fixed_code": "Axis over which the integral is taken. (Default: 0).",
        "patch": "@@ -991,7 +991,7 @@ def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n         Following each integration the result is *multiplied* by `scl`\n         before the integration constant is added. (Default: 1)\n     axis : int, optional\n-        Axis over which the derivative is taken. (Default: 0).\n+        Axis over which the integral is taken. (Default: 0).\n \n         .. versionadded:: 1.7.0\n "
    },
    {
        "commit_id": "0402e1c6a5cc5693a1f021446f20baebe9073890",
        "commit_message": "DOC: Fix cut and paste error, derivative <- integral.",
        "commit_url": "https://github.com/numpy/numpy/commit/0402e1c6a5cc5693a1f021446f20baebe9073890",
        "buggy_code": "Axis over which the derivative is taken. (Default: 0).",
        "fixed_code": "Axis over which the integral is taken. (Default: 0).",
        "patch": "@@ -752,7 +752,7 @@ def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n         Following each integration the result is *multiplied* by `scl`\n         before the integration constant is added. (Default: 1)\n     axis : int, optional\n-        Axis over which the derivative is taken. (Default: 0).\n+        Axis over which the integral is taken. (Default: 0).\n \n         .. versionadded:: 1.7.0\n "
    },
    {
        "commit_id": "0402e1c6a5cc5693a1f021446f20baebe9073890",
        "commit_message": "DOC: Fix cut and paste error, derivative <- integral.",
        "commit_url": "https://github.com/numpy/numpy/commit/0402e1c6a5cc5693a1f021446f20baebe9073890",
        "buggy_code": "Axis over which the derivative is taken. (Default: 0).",
        "fixed_code": "Axis over which the integral is taken. (Default: 0).",
        "patch": "@@ -750,7 +750,7 @@ def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n         Following each integration the result is *multiplied* by `scl`\n         before the integration constant is added. (Default: 1)\n     axis : int, optional\n-        Axis over which the derivative is taken. (Default: 0).\n+        Axis over which the integral is taken. (Default: 0).\n \n         .. versionadded:: 1.7.0\n "
    },
    {
        "commit_id": "0402e1c6a5cc5693a1f021446f20baebe9073890",
        "commit_message": "DOC: Fix cut and paste error, derivative <- integral.",
        "commit_url": "https://github.com/numpy/numpy/commit/0402e1c6a5cc5693a1f021446f20baebe9073890",
        "buggy_code": "Axis over which the derivative is taken. (Default: 0).",
        "fixed_code": "Axis over which the integral is taken. (Default: 0).",
        "patch": "@@ -751,7 +751,7 @@ def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n         Following each integration the result is *multiplied* by `scl`\n         before the integration constant is added. (Default: 1)\n     axis : int, optional\n-        Axis over which the derivative is taken. (Default: 0).\n+        Axis over which the integral is taken. (Default: 0).\n \n         .. versionadded:: 1.7.0\n "
    },
    {
        "commit_id": "26195cfe921818d97776c83f4c84286ae79bf1de",
        "commit_message": "FIX: Add release notes, use inverse cdf method for non-uniform\nsampling with replacement, change searchsorted to use side='right',\nand regenerate mtrand.c.",
        "commit_url": "https://github.com/numpy/numpy/commit/26195cfe921818d97776c83f4c84286ae79bf1de",
        "buggy_code": "desired = np.array([1, 0, 3, 0])",
        "fixed_code": "desired = np.array([1, 1, 2, 2])",
        "patch": "@@ -125,7 +125,7 @@ def test_choice_uniform_replace(self):\n     def test_choice_nonuniform_replace(self):\n         np.random.seed(self.seed)\n         actual = np.random.choice(4, 4, p=[0.4, 0.4, 0.1, 0.1])\n-        desired = np.array([1, 0, 3, 0])\n+        desired = np.array([1, 1, 2, 2])\n         np.testing.assert_array_equal(actual, desired)\n \n     def test_choice_uniform_noreplace(self):"
    },
    {
        "commit_id": "67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "commit_message": "FIX: Changed named to choice, reverted other changes.",
        "commit_url": "https://github.com/numpy/numpy/commit/67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "buggy_code": "rand = np.random.random_sample",
        "fixed_code": "rand = np.random.random",
        "patch": "@@ -14,7 +14,7 @@ def test_fft_n(self):\n \n class TestFFT1D(TestCase):\n     def test_basic(self):\n-        rand = np.random.random_sample\n+        rand = np.random.random\n         x = rand(30) + 1j*rand(30)\n         assert_array_almost_equal(fft1(x), np.fft.fft(x))\n "
    },
    {
        "commit_id": "67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "commit_message": "FIX: Changed named to choice, reverted other changes.",
        "commit_url": "https://github.com/numpy/numpy/commit/67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "buggy_code": "x = np.random.random_sample((4, 4))",
        "fixed_code": "x = np.random.random((4, 4))",
        "patch": "@@ -193,7 +193,7 @@ def test_diag_indices():\n                    [0, 1]]]) )\n \n def test_diag_indices_from():\n-    x = np.random.random_sample((4, 4))\n+    x = np.random.random((4, 4))\n     r, c = diag_indices_from(x)\n     assert_array_equal(r, np.arange(4))\n     assert_array_equal(c, np.arange(4))"
    },
    {
        "commit_id": "67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "commit_message": "FIX: Changed named to choice, reverted other changes.",
        "commit_url": "https://github.com/numpy/numpy/commit/67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "buggy_code": "a = np.random.random_sample((5, 5))",
        "fixed_code": "a = np.random.random((5, 5))",
        "patch": "@@ -1406,7 +1406,7 @@ def count():\n \n \n def test_gzip_load():\n-    a = np.random.random_sample((5, 5))\n+    a = np.random.random((5, 5))\n \n     s = StringIO()\n     f = gzip.GzipFile(fileobj=s, mode=\"w\")"
    },
    {
        "commit_id": "67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "commit_message": "FIX: Changed named to choice, reverted other changes.",
        "commit_url": "https://github.com/numpy/numpy/commit/67f24e8f2e12d9f5b8510ffd0769b13f18f5636a",
        "buggy_code": "x = np.random.random_sample((3,3))",
        "fixed_code": "x = np.random.random((3,3))",
        "patch": "@@ -12,7 +12,7 @@ def test_poly1d(self,level=rlevel):\n \n     def test_cov_parameters(self,level=rlevel):\n         \"\"\"Ticket #91\"\"\"\n-        x = np.random.random_sample((3,3))\n+        x = np.random.random((3,3))\n         y = x.copy()\n         np.cov(x, rowvar=1)\n         np.cov(y, rowvar=0)"
    },
    {
        "commit_id": "98ccad69e870ac35c20f0130586c70448d315134",
        "commit_message": "Merge pull request #149 from 87/ref-fix\n\nBugfix in PyArray_SetBaseObject",
        "commit_url": "https://github.com/numpy/numpy/commit/98ccad69e870ac35c20f0130586c70448d315134",
        "buggy_code": "assert_(c.base is b_view)",
        "fixed_code": "assert_(c.base is b_view.base)",
        "patch": "@@ -481,7 +481,7 @@ def test_array_maskna_array_function_1D():\n \n     # Should produce a view with an owned mask with 'ownmaskna=True'\n     c = np.array(b_view, copy=False, ownmaskna=True)\n-    assert_(c.base is b_view)\n+    assert_(c.base is b_view.base)\n     assert_(c.flags.ownmaskna)\n     assert_(not (c is b_view))\n "
    },
    {
        "commit_id": "e411631e136bcdf53ef421102d8cb989beaacf08",
        "commit_message": "BUG: PyArray_SetBaseObject didn't set proper base when collapsing views",
        "commit_url": "https://github.com/numpy/numpy/commit/e411631e136bcdf53ef421102d8cb989beaacf08",
        "buggy_code": "assert_(c.base is b_view)",
        "fixed_code": "assert_(c.base is b_view.base)",
        "patch": "@@ -481,7 +481,7 @@ def test_array_maskna_array_function_1D():\n \n     # Should produce a view with an owned mask with 'ownmaskna=True'\n     c = np.array(b_view, copy=False, ownmaskna=True)\n-    assert_(c.base is b_view)\n+    assert_(c.base is b_view.base)\n     assert_(c.flags.ownmaskna)\n     assert_(not (c is b_view))\n "
    },
    {
        "commit_id": "ade350ec3e5d4bb5f13a57791759204ecb66b987",
        "commit_message": "BUG: repr: Make NA line up in the float array repr like inf and nan",
        "commit_url": "https://github.com/numpy/numpy/commit/ade350ec3e5d4bb5f13a57791759204ecb66b987",
        "buggy_code": "return str(x).replace('NA', _na_str, 1)",
        "fixed_code": "return self.special_fmt % (str(x).replace('NA', _na_str, 1),)",
        "patch": "@@ -610,7 +610,7 @@ def __call__(self, x, strip_zeros=True):\n         err = _nc.seterr(invalid='ignore')\n         try:\n             if isna(x):\n-                return str(x).replace('NA', _na_str, 1)\n+                return self.special_fmt % (str(x).replace('NA', _na_str, 1),)\n             elif isnan(x):\n                 if self.sign:\n                     return self.special_fmt % ('+' + _nan_str,)"
    },
    {
        "commit_id": "79f0dd9179fb7639547aac6d975a21648fe52c45",
        "commit_message": "BUG: missingdata: Negative strides bug in USE_MASKNA nditer mode",
        "commit_url": "https://github.com/numpy/numpy/commit/79f0dd9179fb7639547aac6d975a21648fe52c45",
        "buggy_code": "b[mask] = [8,np.NA]",
        "fixed_code": "b[mask] = np.array([8,np.NA], maskna=True)",
        "patch": "@@ -512,7 +512,7 @@ def test_array_maskna_view_array_assignment_1D():\n     # Assigning a list with NA to a boolean index should unmask non-NA values\n     b[...] = np.NA\n     mask = np.array([0,1,1,0,0], dtype='?')\n-    b[mask] = [8,np.NA]\n+    b[mask] = np.array([8,np.NA], maskna=True)\n     assert_equal(a, [8,8,7,12,1])\n     assert_equal(np.isna(b), [1,0,1,1,1])\n "
    },
    {
        "commit_id": "a6e869b70b09df9381d341ed0d2b18f88d8fe3d6",
        "commit_message": "BUG: ma: Fix a bug in numpy.ma hardmasks, exposed by the boolean indexing rewrite",
        "commit_url": "https://github.com/numpy/numpy/commit/a6e869b70b09df9381d341ed0d2b18f88d8fe3d6",
        "buggy_code": "dindx[~mindx] = dval",
        "fixed_code": "np.copyto(dindx, dval, where=~mindx)",
        "patch": "@@ -3040,7 +3040,7 @@ def __setitem__(self, indx, value):\n             mindx = mask_or(_mask[indx], mval, copy=True)\n             dindx = self._data[indx]\n             if dindx.size > 1:\n-                dindx[~mindx] = dval\n+                np.copyto(dindx, dval, where=~mindx)\n             elif mindx is nomask:\n                 dindx = dval\n             ndarray.__setitem__(_data, indx, dindx)"
    },
    {
        "commit_id": "ff803430057f9d714099cb7e1d66ba2b6b24bf24",
        "commit_message": "STY: Fix 'copy' 'copyto' typo and remove some trailing whitespace.",
        "commit_url": "https://github.com/numpy/numpy/commit/ff803430057f9d714099cb7e1d66ba2b6b24bf24",
        "buggy_code": "``np.copy(a, values, where=mask)`` to achieve this functionality.",
        "fixed_code": "``np.copyto(a, values, where=mask)`` to achieve this functionality.",
        "patch": "@@ -3731,7 +3731,7 @@ def luf(lamdaexpr, *args, **kwargs):\n     putmask(a, mask, values)\n \n     This function is deprecated as of NumPy 1.7. Use the function\n-    ``np.copy(a, values, where=mask)`` to achieve this functionality.\n+    ``np.copyto(a, values, where=mask)`` to achieve this functionality.\n \n     Changes elements of an array based on conditional and input values.\n "
    },
    {
        "commit_id": "5e4a4075a8476a6c6d46481f33a4c873f545d4c7",
        "commit_message": "BUG:py3k: fix error with recarry. Patch by C. Gohlke. Closes #1843.",
        "commit_url": "https://github.com/numpy/numpy/commit/5e4a4075a8476a6c6d46481f33a4c873f545d4c7",
        "buggy_code": "return isinstance(f, io.FileIO)",
        "fixed_code": "return isinstance(f, (io.FileIO, io.BufferedReader))",
        "patch": "@@ -23,7 +23,7 @@ def asstr(s):\n             return s\n         return s.decode('latin1')\n     def isfileobj(f):\n-        return isinstance(f, io.FileIO)\n+        return isinstance(f, (io.FileIO, io.BufferedReader))\n     def open_latin1(filename, mode='r'):\n         return open(filename, mode=mode, encoding='iso-8859-1')\n     strchar = 'U'"
    },
    {
        "commit_id": "f4ba3edfe94b7990a79bff03a73369b584e9a72e",
        "commit_message": "ENH: Rename _sortmodule.c.src and move it into a new sorting directory.\nFix the build to deal with the new name and location.",
        "commit_url": "https://github.com/numpy/numpy/commit/f4ba3edfe94b7990a79bff03a73369b584e9a72e",
        "buggy_code": "sources=[join('src','_sortmodule.c.src'),",
        "fixed_code": "sources=[join('src','sorting','sortmodule.c.src'),",
        "patch": "@@ -668,7 +668,7 @@ def generate_umath_c(ext,build_dir):\n         config.add_data_dir('include/numpy/fenv')\n \n     config.add_extension('_sort',\n-                         sources=[join('src','_sortmodule.c.src'),\n+                         sources=[join('src','sorting','sortmodule.c.src'),\n                                   generate_config_h,\n                                   generate_numpyconfig_h,\n                                   generate_numpy_api,"
    },
    {
        "commit_id": "e9f4e7592ae24e220bfcd0489b4bb25b9c2fc8e7",
        "commit_message": "BUG: Py3k: some of the string type-related failures in numpy/core/tests\n\nMW: I've removed the asbytes part and changed 'S5' to 'S0' from\n    Derek's original commit.",
        "commit_url": "https://github.com/numpy/numpy/commit/e9f4e7592ae24e220bfcd0489b4bb25b9c2fc8e7",
        "buggy_code": "assert_(np.array2string(x, formatter={'int':lambda x: hex(x)}) == \\",
        "fixed_code": "assert_equal(np.array2string(x, formatter={'int':lambda x: hex(x)}), \\",
        "patch": "@@ -82,7 +82,7 @@ def _format_function(x):\n                 \"[. o O]\")\n         assert_(np.array2string(x, formatter={'all':lambda x: \"%.4f\" % x}) == \\\n                 \"[0.0000 1.0000 2.0000]\")\n-        assert_(np.array2string(x, formatter={'int':lambda x: hex(x)}) == \\\n+        assert_equal(np.array2string(x, formatter={'int':lambda x: hex(x)}), \\\n                 \"[0x0L 0x1L 0x2L]\")\n \n         x = np.arange(3.)"
    },
    {
        "commit_id": "e9f4e7592ae24e220bfcd0489b4bb25b9c2fc8e7",
        "commit_message": "BUG: Py3k: some of the string type-related failures in numpy/core/tests\n\nMW: I've removed the asbytes part and changed 'S5' to 'S0' from\n    Derek's original commit.",
        "commit_url": "https://github.com/numpy/numpy/commit/e9f4e7592ae24e220bfcd0489b4bb25b9c2fc8e7",
        "buggy_code": "b = a.astype('str')",
        "fixed_code": "b = a.astype(np.dtype('S0'))",
        "patch": "@@ -1545,7 +1545,7 @@ def test_string_astype(self):\n         s3 = asbytes('other')\n         a = np.array([[s1],[s2],[s3]])\n         assert_equal(a.dtype, np.dtype('S5'))\n-        b = a.astype('str')\n+        b = a.astype(np.dtype('S0'))\n         assert_equal(b.dtype, np.dtype('S5'))\n \n     def test_ticket_1756(self):"
    },
    {
        "commit_id": "de719936cf64df1a8f1096fb7f3a2be720906da4",
        "commit_message": "ENH: datetime: Remove TimeInteger, partially fix up datetime array printing\n\nThe TimeInteger seemed like the wrong abstraction to me. Timedelta\nis reasonable as an integer, and in fact if NumPy supported arbitrary\nunit metadata, Timedelta could be removed and that mechanism used\ninstead. Datetime, however, doesn't represent an integer. Datetime\nhas no zero (barring big bang, God's creation, or some other choice...),\nsomething which integers definitely have.",
        "commit_url": "https://github.com/numpy/numpy/commit/de719936cf64df1a8f1096fb7f3a2be720906da4",
        "buggy_code": "typename=arr.dtype.name",
        "fixed_code": "typename=\"'%s'\" % arr.dtype.name",
        "patch": "@@ -1332,7 +1332,7 @@ def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):\n     if typeless and arr.size:\n         return cName + \"(%s)\" % lst\n     else:\n-        typename=arr.dtype.name\n+        typename=\"'%s'\" % arr.dtype.name\n         lf = ''\n         if issubclass(arr.dtype.type, flexible):\n             if arr.dtype.names:"
    },
    {
        "commit_id": "de719936cf64df1a8f1096fb7f3a2be720906da4",
        "commit_message": "ENH: datetime: Remove TimeInteger, partially fix up datetime array printing\n\nThe TimeInteger seemed like the wrong abstraction to me. Timedelta\nis reasonable as an integer, and in fact if NumPy supported arbitrary\nunit metadata, Timedelta could be removed and that mechanism used\ninstead. Datetime, however, doesn't represent an integer. Datetime\nhas no zero (barring big bang, God's creation, or some other choice...),\nsomething which integers definitely have.",
        "commit_url": "https://github.com/numpy/numpy/commit/de719936cf64df1a8f1096fb7f3a2be720906da4",
        "buggy_code": "and not issubclass(x, np.timeinteger))]",
        "fixed_code": "and not issubclass(x, np.timedelta_))]",
        "patch": "@@ -1317,7 +1317,7 @@ def test_fromstring_crash(self):\n     def test_ticket_1539(self):\n         dtypes = [x for x in np.typeDict.values()\n                   if (issubclass(x, np.number)\n-                      and not issubclass(x, np.timeinteger))]\n+                      and not issubclass(x, np.timedelta_))]\n         a = np.array([], dtypes[0])\n         failures = []\n         for x in dtypes:"
    },
    {
        "commit_id": "9fb892241a0e7d23ab317e41fd77882e4a254c1f",
        "commit_message": "BUG: Fix buffered reduction case in nditer (ticket #1834)",
        "commit_url": "https://github.com/numpy/numpy/commit/9fb892241a0e7d23ab317e41fd77882e4a254c1f",
        "buggy_code": "assert_equal(it2.operands[2].sum(), a.size)",
        "fixed_code": "assert_equal(it2.operands[1].sum(), a.size)",
        "patch": "@@ -2236,7 +2236,7 @@ def test_iter_reduction():\n     for x in it2:\n         x[1][...] += x[0]\n     assert_equal(it1.operands[1], it2.operands[1])\n-    assert_equal(it2.operands[2].sum(), a.size)\n+    assert_equal(it2.operands[1].sum(), a.size)\n \n def test_iter_buffering_reduction():\n     # Test doing buffered reductions with the iterator"
    },
    {
        "commit_id": "f7eda58cb3e603219c5faf628810a7e980ae01ea",
        "commit_message": "TST: fix test for too large array, raises ValueError, not MemoryError.\n\nCloses #1811.",
        "commit_url": "https://github.com/numpy/numpy/commit/f7eda58cb3e603219c5faf628810a7e980ae01ea",
        "buggy_code": "assert_raises(MemoryError, np.zeros, [2**30]*2, np.int8)",
        "fixed_code": "assert_raises(ValueError, np.zeros, [2**30]*2, np.int8)",
        "patch": "@@ -1155,7 +1155,7 @@ def test_array_too_big(self):\n         \"\"\"Ticket #1080.\"\"\"\n         assert_raises(ValueError, np.zeros, [1023]*10, np.int8)\n         assert_raises(ValueError, np.zeros, [26244]*5, np.int8)\n-        assert_raises(MemoryError, np.zeros, [2**30]*2, np.int8)\n+        assert_raises(ValueError, np.zeros, [2**30]*2, np.int8)\n \n     def test_dtype_keyerrors_(self):\n         \"\"\"Ticket #1106.\"\"\""
    },
    {
        "commit_id": "fd2630366581049af6c9acc4b41315363b47b55a",
        "commit_message": "STY: Fix up some remaining old-style exceptions.\nI think that is the end of it.",
        "commit_url": "https://github.com/numpy/numpy/commit/fd2630366581049af6c9acc4b41315363b47b55a",
        "buggy_code": "raise ValueError, repr(dtype)",
        "fixed_code": "raise ValueError(repr(dtype))",
        "patch": "@@ -140,7 +140,7 @@ def _init(self, dtype):\n             fmt = '%12.5e'\n             precname = 'half'\n         else:\n-            raise ValueError, repr(dtype)\n+            raise ValueError(repr(dtype))\n \n         machar = MachAr(lambda v:array([v], dtype),\n                         lambda v:_frz(v.astype(itype))[0],"
    },
    {
        "commit_id": "cff9ccb8340d7f4efcd721e1fd9ce36be27e337d",
        "commit_message": "BUG: Workaround for the fact the Python 2.4 doesn't accept 'Ub' as a file\nmode, but does accept 'rbU'. Note that with either of these modes Python 3\nfails to split files with '\\r' line endings on linux. This is either a bug\nin Python 3 or something that requires more extensive modifications to\ngenfromtxt. Because genfromtxt now accepts generators it should be possible\nto write a generator that opens files in text mode and encodes the lines\nas byte streams, and this should provide a workaround.",
        "commit_url": "https://github.com/numpy/numpy/commit/cff9ccb8340d7f4efcd721e1fd9ce36be27e337d",
        "buggy_code": "fhd = iter(np.lib._datasource.open(fname, 'Ub'))",
        "fixed_code": "fhd = iter(np.lib._datasource.open(fname, 'rbU'))",
        "patch": "@@ -1232,7 +1232,7 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,\n     own_fhd = False\n     try:\n         if isinstance(fname, basestring):\n-            fhd = iter(np.lib._datasource.open(fname, 'Ub'))\n+            fhd = iter(np.lib._datasource.open(fname, 'rbU'))\n             own_fhd = True\n         else:\n             fhd = iter(fname)"
    },
    {
        "commit_id": "b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "commit_message": "BUG: Python 2.4 doesn't accept the construction class foo():",
        "commit_url": "https://github.com/numpy/numpy/commit/b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "buggy_code": "class TestAllclose():",
        "fixed_code": "class TestAllclose:",
        "patch": "@@ -1039,7 +1039,7 @@ def test_clip_func_takes_out(self):\n         self.assertTrue(a2 is a)\n \n \n-class TestAllclose():\n+class TestAllclose:\n     rtol = 1e-5\n     atol = 1e-8\n "
    },
    {
        "commit_id": "b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "commit_message": "BUG: Python 2.4 doesn't accept the construction class foo():",
        "commit_url": "https://github.com/numpy/numpy/commit/b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "buggy_code": "class TestRepr():",
        "fixed_code": "class TestRepr:",
        "patch": "@@ -103,7 +103,7 @@ def test_int_from_long(self):\n #            assert_equal( val, val2 )\n \n \n-class TestRepr():\n+class TestRepr:\n     def _test_type_repr(self, t):\n         finfo=np.finfo(t)\n         last_fraction_bit_idx = finfo.nexp + finfo.nmant"
    },
    {
        "commit_id": "b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "commit_message": "BUG: Python 2.4 doesn't accept the construction class foo():",
        "commit_url": "https://github.com/numpy/numpy/commit/b48b2d5d73dbeef466d6c0a8b41d65d844d7b264",
        "buggy_code": "class TestMatrixPower():",
        "fixed_code": "class TestMatrixPower:",
        "patch": "@@ -240,7 +240,7 @@ def do(self, a, b):\n         assert imply(isinstance(b, matrix), isinstance(x, matrix))\n         assert imply(isinstance(b, matrix), isinstance(residuals, matrix))\n \n-class TestMatrixPower():\n+class TestMatrixPower:\n     R90 = array([[0,1],[-1,0]])\n     Arb22 = array([[4,-7],[-2,10]])\n     noninv = array([[1,0],[0,0]])"
    },
    {
        "commit_id": "9445a3d284c5cbc756fee1e6c313a114e937ddea",
        "commit_message": "BUG: Fix strings for Python 3k.",
        "commit_url": "https://github.com/numpy/numpy/commit/9445a3d284c5cbc756fee1e6c313a114e937ddea",
        "buggy_code": "assert_array_equal(a, np.array(['M', 'F']))",
        "fixed_code": "assert_array_equal(a, np.array([asbytes('M'), asbytes('F')]))",
        "patch": "@@ -464,7 +464,7 @@ def test_structure_unpack(self):\n         assert_(a.dtype.str == '|S1')\n         assert_(b.dtype.str == '<i4')\n         assert_(c.dtype.str == '<f4')\n-        assert_array_equal(a, np.array(['M', 'F']))\n+        assert_array_equal(a, np.array([asbytes('M'), asbytes('F')]))\n         assert_array_equal(b, np.array([21, 35]))\n         assert_array_equal(c, np.array([ 72.,  58.]))\n "
    },
    {
        "commit_id": "d51f8d8ca48f51892a55cc41360625bdf9884997",
        "commit_message": "BUG: Fix integer division for python 3k.",
        "commit_url": "https://github.com/numpy/numpy/commit/d51f8d8ca48f51892a55cc41360625bdf9884997",
        "buggy_code": "min /= -1",
        "fixed_code": "min //= -1",
        "patch": "@@ -1269,7 +1269,7 @@ def test_signed_integer_division_overflow(self):\n         \"\"\"Ticket #1317.\"\"\"\n         def test_type(t):\n             min = np.array([np.iinfo(t).min])\n-            min /= -1\n+            min //= -1\n \n         old_err = np.seterr(divide=\"ignore\")\n         try:"
    },
    {
        "commit_id": "354d7a311ef9a6dfd4695147c644ff0294c8c4ee",
        "commit_message": "BUG: open genfromtxt file as binary; add test for filename use",
        "commit_url": "https://github.com/numpy/numpy/commit/354d7a311ef9a6dfd4695147c644ff0294c8c4ee",
        "buggy_code": "fhd = np.lib._datasource.open(fname, 'U')",
        "fixed_code": "fhd = np.lib._datasource.open(fname, 'Ub')",
        "patch": "@@ -1202,7 +1202,7 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,\n     # Initialize the filehandle, the LineSplitter and the NameValidator\n     own_fhd = False\n     if isinstance(fname, basestring):\n-        fhd = np.lib._datasource.open(fname, 'U')\n+        fhd = np.lib._datasource.open(fname, 'Ub')\n         own_fhd = True\n     elif not hasattr(fname, 'read'):\n         raise TypeError(\"The input should be a string or a filehandle. \"\\"
    },
    {
        "commit_id": "1ad0311a1d3d4b30c844cf2170d9a910b0e5c5ee",
        "commit_message": "BUG: make correlate/convolve work also with unicode mode arg. Closes #1705.",
        "commit_url": "https://github.com/numpy/numpy/commit/1ad0311a1d3d4b30c844cf2170d9a910b0e5c5ee",
        "buggy_code": "if isinstance(mode, type(\"\")):",
        "fixed_code": "if isinstance(mode, basestring):",
        "patch": "@@ -587,7 +587,7 @@ def flatnonzero(a):\n                         'f' : 2}\n \n def _mode_from_name(mode):\n-    if isinstance(mode, type(\"\")):\n+    if isinstance(mode, basestring):\n         return _mode_from_name_dict[mode.lower()[0]]\n     return mode\n "
    },
    {
        "commit_id": "4d43ec5be7aae33b058ab2f05fc811fc47bb7cb9",
        "commit_message": "BUG: fix f2py bug in generating interfaces for assumed shape support.",
        "commit_url": "https://github.com/numpy/numpy/commit/4d43ec5be7aae33b058ab2f05fc811fc47bb7cb9",
        "buggy_code": "vardef='%s %s'%(vardef,','.join(attr))",
        "fixed_code": "vardef='%s, %s'%(vardef,','.join(attr))",
        "patch": "@@ -2698,7 +2698,7 @@ def vars2fortran(block,vars,args,tab='', as_interface=False):\n                 if l not in ['external']:\n                     attr.append(l)\n             if attr:\n-                vardef='%s %s'%(vardef,','.join(attr))\n+                vardef='%s, %s'%(vardef,','.join(attr))\n                 c=','\n         if 'dimension' in vars[a]:\n #             if not isintent_c(vars[a]):"
    },
    {
        "commit_id": "225f28c7cffc2ec4914cf34b9abf6c121cb990a8",
        "commit_message": "BUG: f2py fix to scan literal strings with ! character, fixes ticket #1228",
        "commit_url": "https://github.com/numpy/numpy/commit/225f28c7cffc2ec4914cf34b9abf6c121cb990a8",
        "buggy_code": "commentline=re.compile(r'(?P<line>([^\"]*\"[^\"]*\"[^\"!]*|[^\\']*\\'[^\\']*\\'[^\\'!]*|[^!]*))!{1}(?P<rest>.*)')",
        "fixed_code": "commentline=re.compile(r'(?P<line>([^\"]*[\"][^\"]*[\"][^\"!]*|[^\\']*\\'[^\\']*\\'[^\\'!]*|[^!\\'\"]*))!{1}(?P<rest>.*)')",
        "patch": "@@ -283,7 +283,7 @@ def readfortrancode(ffile,dowithline=show,istop=1):\n     cont=0\n     finalline=''\n     ll=''\n-    commentline=re.compile(r'(?P<line>([^\"]*\"[^\"]*\"[^\"!]*|[^\\']*\\'[^\\']*\\'[^\\'!]*|[^!]*))!{1}(?P<rest>.*)')\n+    commentline=re.compile(r'(?P<line>([^\"]*[\"][^\"]*[\"][^\"!]*|[^\\']*\\'[^\\']*\\'[^\\'!]*|[^!\\'\"]*))!{1}(?P<rest>.*)')\n     includeline=re.compile(r'\\s*include\\s*(\\'|\")(?P<name>[^\\'\"]*)(\\'|\")',re.I)\n     cont1=re.compile(r'(?P<line>.*)&\\s*\\Z')\n     cont2=re.compile(r'(\\s*&|)(?P<line>.*)')"
    },
    {
        "commit_id": "fb486c6a40fee977314b5a0326aab94ed52851e6",
        "commit_message": "BUG: distutils: change compile flag on AIX from -O5 to -O3. See #1261.",
        "commit_url": "https://github.com/numpy/numpy/commit/fb486c6a40fee977314b5a0326aab94ed52851e6",
        "buggy_code": "return ['-O5']",
        "fixed_code": "return ['-O3']",
        "patch": "@@ -86,7 +86,7 @@ def get_flags_linker_so(self):\n         return opt\n \n     def get_flags_opt(self):\n-        return ['-O5']\n+        return ['-O3']\n \n if __name__ == '__main__':\n     log.set_verbosity(2)"
    },
    {
        "commit_id": "c2e4c9c034a3446de643fb4f8e96d21249abb7b9",
        "commit_message": "BUG: Fix valueerror typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/c2e4c9c034a3446de643fb4f8e96d21249abb7b9",
        "buggy_code": "raise valueerror, \"expected deg >= 0\"",
        "fixed_code": "raise ValueError, \"expected deg >= 0\"",
        "patch": "@@ -1025,7 +1025,7 @@ def hermefit(x, y, deg, rcond=None, full=False, w=None):\n \n     # check arguments.\n     if deg < 0 :\n-        raise valueerror, \"expected deg >= 0\"\n+        raise ValueError, \"expected deg >= 0\"\n     if x.ndim != 1:\n         raise TypeError, \"expected 1D vector for x\"\n     if x.size == 0:"
    },
    {
        "commit_id": "f43223479f917e404e724e6a3df27aa701e6d6bf",
        "commit_message": "BUG: did not intend to change default tolerances in assert_allclose. Revert.",
        "commit_url": "https://github.com/numpy/numpy/commit/f43223479f917e404e724e6a3df27aa701e6d6bf",
        "buggy_code": "def assert_allclose(actual, desired, rtol=1e-5, atol=1e-8,",
        "fixed_code": "def assert_allclose(actual, desired, rtol=1e-7, atol=0,",
        "patch": "@@ -1110,7 +1110,7 @@ def _assert_valid_refcount(op):\n \n     assert(sys.getrefcount(i) >= rc)\n \n-def assert_allclose(actual, desired, rtol=1e-5, atol=1e-8,\n+def assert_allclose(actual, desired, rtol=1e-7, atol=0,\n                     err_msg='', verbose=True):\n     \"\"\"\n     Raise an assertion if two objects are not equal up to desired tolerance."
    },
    {
        "commit_id": "677d349c22dd5538dd4bb962df11814f23a46b35",
        "commit_message": "BUG: Fix string in test for python 3k.",
        "commit_url": "https://github.com/numpy/numpy/commit/677d349c22dd5538dd4bb962df11814f23a46b35",
        "buggy_code": "s = '12345'",
        "fixed_code": "s = asbytes('12345')",
        "patch": "@@ -1547,7 +1547,7 @@ def test_string_astype(self):\n \n     def test_string_astype(self):\n         \"\"\"Ticket #1756 \"\"\"\n-        s = '12345'\n+        s = asbytes('12345')\n         a = np.array([s]*5)\n         for i in range(1,6):\n             a1 = np.array(a, \"|S%d\"%i)"
    },
    {
        "commit_id": "81fbb517544bdae0af202de2be7f4af34e29e509",
        "commit_message": "Fix bug in constructing use statement with only.",
        "commit_url": "https://github.com/numpy/numpy/commit/81fbb517544bdae0af202de2be7f4af34e29e509",
        "buggy_code": "ret='%s,only:'%(ret)",
        "fixed_code": "ret='%s only:'%(ret)",
        "patch": "@@ -2547,7 +2547,7 @@ def use2fortran(use,tab=''):\n             if ret and ret[-1]==',': ret=ret[:-1]\n             continue\n         if 'only' in use[m] and use[m]['only']:\n-            ret='%s,only:'%(ret)\n+            ret='%s only:'%(ret)\n         if 'map' in use[m] and use[m]['map']:\n             c=' '\n             for k in use[m]['map'].keys():"
    },
    {
        "commit_id": "543dbea2bd80d6abd9538a89450651e39196ed6b",
        "commit_message": "BUG: Fix python3k import problem.",
        "commit_url": "https://github.com/numpy/numpy/commit/543dbea2bd80d6abd9538a89450651e39196ed6b",
        "buggy_code": "from _compiled_base import ravel_coords, unravel_index",
        "fixed_code": "from numpy.lib._compiled_base import ravel_coords, unravel_index",
        "patch": "@@ -17,7 +17,7 @@\n import function_base\n import numpy.matrixlib as matrix\n from function_base import diff\n-from _compiled_base import ravel_coords, unravel_index\n+from numpy.lib._compiled_base import ravel_coords, unravel_index\n makemat = matrix.matrix\n \n def ix_(*args):"
    },
    {
        "commit_id": "a7ffc7acbbdcaa6ab596b638b27210c01ef259eb",
        "commit_message": "BLD: Fix scons and setup.py build\n\nMoving lowlevel_strided_loops.h to private needed a setup.py update.\n\nAdded the rest of the needed files in the scons configuration.",
        "commit_url": "https://github.com/numpy/numpy/commit/a7ffc7acbbdcaa6ab596b638b27210c01ef259eb",
        "buggy_code": "join('src', 'multiarray', 'lowlevel_strided_loops.h')]",
        "fixed_code": "join('src', 'private', 'lowlevel_strided_loops.h')]",
        "patch": "@@ -739,7 +739,7 @@ def get_mathlib_info(*args):\n             join('src', 'multiarray', 'shape.h'),\n             join('src', 'multiarray', 'ucsnarrow.h'),\n             join('src', 'multiarray', 'usertypes.h'),\n-            join('src', 'multiarray', 'lowlevel_strided_loops.h')]\n+            join('src', 'private', 'lowlevel_strided_loops.h')]\n \n     multiarray_src = [join('src', 'multiarray', 'multiarraymodule.c'),\n         join('src', 'multiarray', 'hashdescr.c'),"
    },
    {
        "commit_id": "670d081cbe2bdb4e51e892bd3b696d50969d40d7",
        "commit_message": "BUG: Fix exception syntax to conform to python 2.4.",
        "commit_url": "https://github.com/numpy/numpy/commit/670d081cbe2bdb4e51e892bd3b696d50969d40d7",
        "buggy_code": "except ValueError as e:",
        "fixed_code": "except ValueError, e:",
        "patch": "@@ -616,7 +616,7 @@ def isnumber(x):\n                                 names=('x', 'y'))\n             if not cond :\n                 raise AssertionError(msg)\n-    except ValueError as e:\n+    except ValueError, e:\n         header = 'error during assertion:\\n%s\\n\\n%s' % (e, header)\n         msg = build_err_msg([x, y], err_msg, verbose=verbose, header=header,\n                             names=('x', 'y'))"
    },
    {
        "commit_id": "8435696e7ee3bc03cb85decc9323cd2d0487a5f8",
        "commit_message": "BUG: Ticket 1395, make find_common_type recognize booleans.",
        "commit_url": "https://github.com/numpy/numpy/commit/8435696e7ee3bc03cb85decc9323cd2d0487a5f8",
        "buggy_code": "__test_types = typecodes['AllInteger'][:-2]+typecodes['AllFloat']+'O'",
        "fixed_code": "__test_types = '?'+typecodes['AllInteger'][:-2]+typecodes['AllFloat']+'O'",
        "patch": "@@ -853,7 +853,7 @@ def sctype2char(sctype):\n # O -> Python object\n _kind_list = ['b', 'u', 'i', 'f', 'c', 'S', 'U', 'V', 'O', 'M', 'm']\n \n-__test_types = typecodes['AllInteger'][:-2]+typecodes['AllFloat']+'O'\n+__test_types = '?'+typecodes['AllInteger'][:-2]+typecodes['AllFloat']+'O'\n __len_test_types = len(__test_types)\n \n # Keep incrementing until a common type both can be coerced to"
    },
    {
        "commit_id": "6aacc2d373c961865c43f139acbf15d9cb823c04",
        "commit_message": "BUG: Try fix for python 2.4, use list instead of tuple.",
        "commit_url": "https://github.com/numpy/numpy/commit/6aacc2d373c961865c43f139acbf15d9cb823c04",
        "buggy_code": "names = dtype.names",
        "fixed_code": "names = list(dtype.names)",
        "patch": "@@ -1269,7 +1269,7 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,\n         elif (names is not None) and (len(names) > nbcols):\n             names = [names[_] for _ in usecols]\n     elif (names is not None) and (dtype is not None):\n-        names = dtype.names\n+        names = list(dtype.names)\n \n \n     # Process the missing values ..............................."
    },
    {
        "commit_id": "6d49edca12de7951244c6ed050872c3c40a97add",
        "commit_message": "BUG: Py3: ensure version.py imports are translated appropriately",
        "commit_url": "https://github.com/numpy/numpy/commit/6d49edca12de7951244c6ed050872c3c40a97add",
        "buggy_code": "'mtrand', '_dotblas']:",
        "fixed_code": "'mtrand', '_dotblas', 'version']:",
        "patch": "@@ -157,7 +157,7 @@ def custom_mangling(filename):\n         for mod in ['multiarray', 'scalarmath', 'umath', '_sort',\n                     '_compiled_base', 'core', 'lib', 'testing', 'fft',\n                     'polynomial', 'random', 'ma', 'linalg', 'compat',\n-                    'mtrand', '_dotblas']:\n+                    'mtrand', '_dotblas', 'version']:\n             text = re.sub(r'^(\\s*)import %s' % mod,\n                           r'\\1from . import %s' % mod,\n                           text, flags=re.M)"
    },
    {
        "commit_id": "d1a184c1a112ffbaa553915c043c2b6851e4fc91",
        "commit_message": "BUG: setup.py: make git_version() work on Python 3",
        "commit_url": "https://github.com/numpy/numpy/commit/d1a184c1a112ffbaa553915c043c2b6851e4fc91",
        "buggy_code": "GIT_REVISION = out.strip()",
        "fixed_code": "GIT_REVISION = out.strip().decode('ascii')",
        "patch": "@@ -77,7 +77,7 @@ def _minimal_ext_cmd(cmd):\n \n     try:\n         out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])\n-        GIT_REVISION = out.strip()\n+        GIT_REVISION = out.strip().decode('ascii')\n     except OSError:\n         GIT_REVISION = \"Unknown\"\n "
    },
    {
        "commit_id": "fad376ead11b8e0f3101d37b62b0c8d5ba40af72",
        "commit_message": "Fix bug #1656",
        "commit_url": "https://github.com/numpy/numpy/commit/fad376ead11b8e0f3101d37b62b0c8d5ba40af72",
        "buggy_code": "line = line.split(self.comments)[0]",
        "fixed_code": "line = line.split(self.comments)[0].strip(asbytes(\"\\r\\n\"))",
        "patch": "@@ -209,7 +209,7 @@ def _delimited_splitter(self, line):\n         return line.split(self.delimiter)\n     #\n     def _fixedwidth_splitter(self, line):\n-        line = line.split(self.comments)[0]\n+        line = line.split(self.comments)[0].strip(asbytes(\"\\r\\n\"))\n         if not line:\n             return []\n         fixed = self.delimiter"
    },
    {
        "commit_id": "12e936a7f793df5b76b639382c7b302c3153c2b3",
        "commit_message": "DOC: BUG: fix bug in example of np.spacing. Closes #1659.",
        "commit_url": "https://github.com/numpy/numpy/commit/12e936a7f793df5b76b639382c7b302c3153c2b3",
        "buggy_code": ">>> np.spacing(1, 2) == np.finfo(np.float64).eps",
        "fixed_code": ">>> np.spacing(1) == np.finfo(np.float64).eps",
        "patch": "@@ -2912,7 +2912,7 @@ def add_newdoc(place, name, doc):\n \n     Examples\n     --------\n-    >>> np.spacing(1, 2) == np.finfo(np.float64).eps\n+    >>> np.spacing(1) == np.finfo(np.float64).eps\n     True\n \n     \"\"\")"
    },
    {
        "commit_id": "50479e9a6f6d07e92fa2f16dbb8abfadf83c332d",
        "commit_message": "FIX: And add missing \\n for error message.",
        "commit_url": "https://github.com/numpy/numpy/commit/50479e9a6f6d07e92fa2f16dbb8abfadf83c332d",
        "buggy_code": "sys.stderr.write(\"Unknown mode: \" + repr(mode))",
        "fixed_code": "sys.stderr.write(\"Unknown mode: \" + repr(mode) + \"\\n\")",
        "patch": "@@ -72,7 +72,7 @@ def generate_f2py_py(build_dir):\n elif mode==\"2e-numpy\":\n     from numpy.f2py import main\n else:\n-    sys.stderr.write(\"Unknown mode: \" + repr(mode))\n+    sys.stderr.write(\"Unknown mode: \" + repr(mode) + \"\\n\")\n     sys.exit(1)\n main()\n '''%(os.path.basename(sys.executable)))"
    },
    {
        "commit_id": "8f6114b11efc2a01fe1158a444aeb788ddea6b01",
        "commit_message": "BUG: Fix previous fix to numpy/g2py/setup.py.",
        "commit_url": "https://github.com/numpy/numpy/commit/8f6114b11efc2a01fe1158a444aeb788ddea6b01",
        "buggy_code": "sys.stderr.write(\"Unknown mode: '%s'\\n\" % mode)",
        "fixed_code": "sys.stderr.write(\"Unknown mode: \" + repr(mode))",
        "patch": "@@ -72,7 +72,7 @@ def generate_f2py_py(build_dir):\n elif mode==\"2e-numpy\":\n     from numpy.f2py import main\n else:\n-    sys.stderr.write(\"Unknown mode: '%s'\\n\" % mode)\n+    sys.stderr.write(\"Unknown mode: \" + repr(mode))\n     sys.exit(1)\n main()\n '''%(os.path.basename(sys.executable)))"
    },
    {
        "commit_id": "3843e86ee3862103364b6aae2a0af8bd4ebdc986",
        "commit_message": "BUG: core: fix _dotblas usage on Py3 (fixes #1609)",
        "commit_url": "https://github.com/numpy/numpy/commit/3843e86ee3862103364b6aae2a0af8bd4ebdc986",
        "buggy_code": "'mtrand']:",
        "fixed_code": "'mtrand', '_dotblas']:",
        "patch": "@@ -157,7 +157,7 @@ def custom_mangling(filename):\n         for mod in ['multiarray', 'scalarmath', 'umath', '_sort',\n                     '_compiled_base', 'core', 'lib', 'testing', 'fft',\n                     'polynomial', 'random', 'ma', 'linalg', 'compat',\n-                    'mtrand']:\n+                    'mtrand', '_dotblas']:\n             text = re.sub(r'^(\\s*)import %s' % mod,\n                           r'\\1from . import %s' % mod,\n                           text, flags=re.M)"
    },
    {
        "commit_id": "2b1f27613a28461a3898466dc6386b23a95f5ec5",
        "commit_message": "BUG: distutils: use // in a binary search (fixes #1604 on Python 3)",
        "commit_url": "https://github.com/numpy/numpy/commit/2b1f27613a28461a3898466dc6386b23a95f5ec5",
        "buggy_code": "mid = (high - low) / 2 + low",
        "fixed_code": "mid = (high - low) // 2 + low",
        "patch": "@@ -271,7 +271,7 @@ def check_type_size(self, type_name, headers=None, include_dirs=None, library_di\n         high = mid\n         # Binary search:\n         while low != high:\n-            mid = (high - low) / 2 + low\n+            mid = (high - low) // 2 + low\n             try:\n                 self._compile(body % {'type': type_name, 'size': mid},\n                         headers, include_dirs, 'c')"
    },
    {
        "commit_id": "3743430ec92b16aadb7d0cac4515db07a15ac635",
        "commit_message": "Fixed bug in histogram for non-uniform bin widths and normed=True.",
        "commit_url": "https://github.com/numpy/numpy/commit/3743430ec92b16aadb7d0cac4515db07a15ac635",
        "buggy_code": "return n/(n*db).sum(), bins",
        "fixed_code": "return n/db/n.sum(), bins",
        "patch": "@@ -191,7 +191,7 @@ def histogram(a, bins=10, range=None, normed=False, weights=None):\n \n     if normed:\n         db = array(np.diff(bins), float)\n-        return n/(n*db).sum(), bins\n+        return n/db/n.sum(), bins\n     else:\n         return n, bins\n "
    },
    {
        "commit_id": "8626a75b380484378c4b242ef02db8cdcb66f9fe",
        "commit_message": "BUG: core/3K: use bytes.maketrans instead of the deprecated string.maketrans (fixes #1571)",
        "commit_url": "https://github.com/numpy/numpy/commit/8626a75b380484378c4b242ef02db8cdcb66f9fe",
        "buggy_code": "UPPER_TABLE = string.maketrans(bytes(string.ascii_lowercase, \"ascii\"),",
        "fixed_code": "UPPER_TABLE = bytes.maketrans(bytes(string.ascii_lowercase, \"ascii\"),",
        "patch": "@@ -113,7 +113,7 @@ def __init__(self, nin, nout, identity, docstring,\n if sys.version_info[0] < 3:\n     UPPER_TABLE = string.maketrans(string.ascii_lowercase, string.ascii_uppercase)\n else:\n-    UPPER_TABLE = string.maketrans(bytes(string.ascii_lowercase, \"ascii\"), \n+    UPPER_TABLE = bytes.maketrans(bytes(string.ascii_lowercase, \"ascii\"), \n             bytes(string.ascii_uppercase, \"ascii\"))\n \n def english_upper(s):"
    },
    {
        "commit_id": "64f654fc6bcfc3f94c1ffa501873af3584c3b1c2",
        "commit_message": "BUG: fix base_repr for py3k. strings can not be indexed with floats anymore.",
        "commit_url": "https://github.com/numpy/numpy/commit/64f654fc6bcfc3f94c1ffa501873af3584c3b1c2",
        "buggy_code": "num /= base",
        "fixed_code": "num //= base",
        "patch": "@@ -1798,7 +1798,7 @@ def base_repr(number, base=2, padding=0):\n     res = []\n     while num:\n         res.append(digits[num % base])\n-        num /= base\n+        num //= base\n     if padding:\n         res.append('0' * padding)\n     if number < 0:"
    },
    {
        "commit_id": "fa0842ffa749a00d0573f7ab803db450b9d1c7c7",
        "commit_message": "f2py: fixed issue 1533 (scanning pyf files will report lines that do not match known patterns).",
        "commit_url": "https://github.com/numpy/numpy/commit/fa0842ffa749a00d0573f7ab803db450b9d1c7c7",
        "buggy_code": "if verbose>1:",
        "fixed_code": "if verbose>1 or (verbose==1 and currentfilename.lower().endswith('.pyf')):",
        "patch": "@@ -589,7 +589,7 @@ def crackline(line,reset=0):\n                         return\n                     analyzeline(m,'callfun',line)\n                     return\n-        if verbose>1:\n+        if verbose>1 or (verbose==1 and currentfilename.lower().endswith('.pyf')):\n             previous_context = None\n             outmess('crackline:%d: No pattern for line\\n'%(groupcounter))\n         return"
    },
    {
        "commit_id": "8a4fb936484cf0ba8b5e76706dc9b52b535549af",
        "commit_message": "3K: f2py: catch a misc import error",
        "commit_url": "https://github.com/numpy/numpy/commit/8a4fb936484cf0ba8b5e76706dc9b52b535549af",
        "buggy_code": "except ImportError:",
        "fixed_code": "except (ImportError, ValueError):",
        "patch": "@@ -4,5 +4,5 @@\n     from __svn_version__ import version\n     version_info = (major, version)\n     version = '%s_%s' % version_info\n-except ImportError:\n+except (ImportError, ValueError):\n     version = str(major)"
    },
    {
        "commit_id": "4bee2b42b48374dd5824e94c033327136bd6e35c",
        "commit_message": "BUG: core: finfo.tiny, resolution, and epsneg should be scalars (#1538)",
        "commit_url": "https://github.com/numpy/numpy/commit/4bee2b42b48374dd5824e94c033327136bd6e35c",
        "buggy_code": "setattr(self,word,getattr(machar, word).squeeze())",
        "fixed_code": "setattr(self,word,getattr(machar, word).flat[0])",
        "patch": "@@ -145,7 +145,7 @@ def _init(self, dtype):\n                      'machep']:\n             setattr(self,word,getattr(machar, word))\n         for word in ['tiny','resolution','epsneg']:\n-            setattr(self,word,getattr(machar, word).squeeze())\n+            setattr(self,word,getattr(machar, word).flat[0])\n         self.max = machar.huge.flat[0]\n         self.min = -self.max\n         self.eps = machar.eps.flat[0]"
    },
    {
        "commit_id": "6f20d1e7650fbb3ad61855ca5d85dff0aafe2f72",
        "commit_message": "BUG: core: use PyCapsule objects only on Python >= 3.0, stay with PyCObjects on Python 2.x",
        "commit_url": "https://github.com/numpy/numpy/commit/6f20d1e7650fbb3ad61855ca5d85dff0aafe2f72",
        "buggy_code": "if sys.version_info[:2] >= (2,7):",
        "fixed_code": "if sys.version_info[:2] >= (3, 0):",
        "patch": "@@ -620,7 +620,7 @@ class DATETIMEMETA(ctypes.Structure):\n                     ('events', ctypes.c_int)]\n \n     import sys\n-    if sys.version_info[:2] >= (2,7):\n+    if sys.version_info[:2] >= (3, 0):\n         func = ctypes.pythonapi.PyCapsule_GetPointer\n         func.argtypes = [ctypes.py_object, ctypes.c_char_p]\n         func.restype = ctypes.c_void_p"
    },
    {
        "commit_id": "b1c994b77d851e49a1c62248b09aeaea5645fbdf",
        "commit_message": "Fix missing rowvar in cov call in corrcoeff.",
        "commit_url": "https://github.com/numpy/numpy/commit/b1c994b77d851e49a1c62248b09aeaea5645fbdf",
        "buggy_code": "c = cov(x, y, bias=bias, ddof=ddof)",
        "fixed_code": "c = cov(x, y, rowvar, bias, ddof)",
        "patch": "@@ -1974,7 +1974,7 @@ def corrcoef(x, y=None, rowvar=1, bias=0, ddof=None):\n     cov : Covariance matrix\n \n     \"\"\"\n-    c = cov(x, y, bias=bias, ddof=ddof)\n+    c = cov(x, y, rowvar, bias, ddof)\n     try:\n         d = diag(c)\n     except ValueError: # scalar covariance"
    },
    {
        "commit_id": "cb3fb06b904dbdd71cf4a1bfd9c7e4b32332c7b9",
        "commit_message": "BUG: Fix failed detection of unsigned integers in _nanop. Fixes ticket #1300.",
        "commit_url": "https://github.com/numpy/numpy/commit/cb3fb06b904dbdd71cf4a1bfd9c7e4b32332c7b9",
        "buggy_code": "if not np.issubdtype(y.dtype, int):",
        "fixed_code": "if not np.issubdtype(y.dtype, np.integer):",
        "patch": "@@ -1298,7 +1298,7 @@ def _nanop(op, fill, a, axis=None):\n     mask = isnan(a)\n \n     # We only need to take care of NaN's in floating point arrays\n-    if not np.issubdtype(y.dtype, int):\n+    if not np.issubdtype(y.dtype, np.integer):\n         # y[mask] = fill\n         # We can't use fancy indexing here as it'll mess w/ MaskedArrays\n         # Instead, let's fill the array directly..."
    },
    {
        "commit_id": "5ab03fb56e40dd5ec20535297d1c2602e8ad17a1",
        "commit_message": "BUG: typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/5ab03fb56e40dd5ec20535297d1c2602e8ad17a1",
        "buggy_code": "\"Cannot compiler 'Python.h'. Perhaps you need to \"\\",
        "fixed_code": "\"Cannot compile 'Python.h'. Perhaps you need to \"\\",
        "patch": "@@ -252,7 +252,7 @@ def check_types(config_cmd, ext, build_dir):\n     result = config_cmd.check_header('Python.h')\n     if not result:\n         raise SystemError(\n-                \"Cannot compiler 'Python.h'. Perhaps you need to \"\\\n+                \"Cannot compile 'Python.h'. Perhaps you need to \"\\\n                 \"install python-dev|python-devel.\")\n \n     # Check basic types sizes"
    },
    {
        "commit_id": "b022b9c5d2e49d1d2ab07be0fe4549342ab88c1e",
        "commit_message": "BUG: compat: fix a bug in open_latin1",
        "commit_url": "https://github.com/numpy/numpy/commit/b022b9c5d2e49d1d2ab07be0fe4549342ab88c1e",
        "buggy_code": "return open(f, mode=mode, encoding='iso-8859-1')",
        "fixed_code": "return open(filename, mode=mode, encoding='iso-8859-1')",
        "patch": "@@ -25,7 +25,7 @@ def asstr(s):\n     def isfileobj(f):\n         return isinstance(f, io.FileIO)\n     def open_latin1(filename, mode='r'):\n-        return open(f, mode=mode, encoding='iso-8859-1')\n+        return open(filename, mode=mode, encoding='iso-8859-1')\n     strchar = 'U'\n else:\n     bytes = str"
    },
    {
        "commit_id": "75f99ab7dcc846c58a088a9233fb9af28aef0b4a",
        "commit_message": "BUG: lib: make loadtxt work on Py3 when fh returns unicode (fixes #1479)",
        "commit_url": "https://github.com/numpy/numpy/commit/75f99ab7dcc846c58a088a9233fb9af28aef0b4a",
        "buggy_code": "line = line.split(comments)[0].strip()",
        "fixed_code": "line = asbytes(line).split(comments)[0].strip()",
        "patch": "@@ -608,7 +608,7 @@ def flatten_dtype(dt):\n \n     def split_line(line):\n         \"\"\"Chop off comments, strip, and split at delimiter.\"\"\"\n-        line = line.split(comments)[0].strip()\n+        line = asbytes(line).split(comments)[0].strip()\n         if line:\n             return line.split(delimiter)\n         else:"
    },
    {
        "commit_id": "e670f5f69143dac918c6d36649180e2ea1f597a4",
        "commit_message": "BUG: The builtin file function goes away in python 3k, use open instead.",
        "commit_url": "https://github.com/numpy/numpy/commit/e670f5f69143dac918c6d36649180e2ea1f597a4",
        "buggy_code": "fh = file(fname, 'U')",
        "fixed_code": "fh = open(fname, 'U')",
        "patch": "@@ -584,7 +584,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n             import bz2\n             fh = bz2.BZ2File(fname)\n         else:\n-            fh = file(fname, 'U')\n+            fh = open(fname, 'U')\n     elif hasattr(fname, 'readline'):\n         fh = fname\n     else:"
    },
    {
        "commit_id": "bc656ee7cb00a6c4ad0d43f1cdd36bf8c9a026ed",
        "commit_message": "ENH, BUG: PyCObject will be deprecated in python 2.7. So use the NpyCapsule\ncompatibility functions in npy_3kcompat.h to replace the current calls.\nThis gets rid of a number of version checks and is easier to maintain.\nFix bug that was present in the ufunc _loop1d_list_free destructor in\nthe python3k case.",
        "commit_url": "https://github.com/numpy/numpy/commit/bc656ee7cb00a6c4ad0d43f1cdd36bf8c9a026ed",
        "buggy_code": "if sys.version_info[:2] >= (3,1):",
        "fixed_code": "if sys.version_info[:2] >= (2,7):",
        "patch": "@@ -620,7 +620,7 @@ class DATETIMEMETA(ctypes.Structure):\n                     ('events', ctypes.c_int)]\n \n     import sys\n-    if sys.version_info[:2] >= (3,1):\n+    if sys.version_info[:2] >= (2,7):\n         func = ctypes.pythonapi.PyCapsule_GetPointer\n         func.argtypes = [ctypes.py_object, ctypes.c_char_p]\n         func.restype = ctypes.c_void_p"
    },
    {
        "commit_id": "82d8d97ac30e20f9ae605df228bee43d89ef72a2",
        "commit_message": "BUG: loadtxt should handle universal newlines.",
        "commit_url": "https://github.com/numpy/numpy/commit/82d8d97ac30e20f9ae605df228bee43d89ef72a2",
        "buggy_code": "fh = file(fname)",
        "fixed_code": "fh = file(fname, 'U')",
        "patch": "@@ -584,7 +584,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None,\n             import bz2\n             fh = bz2.BZ2File(fname)\n         else:\n-            fh = file(fname)\n+            fh = file(fname, 'U')\n     elif hasattr(fname, 'readline'):\n         fh = fname\n     else:"
    },
    {
        "commit_id": "26d51fb2bf1ae6bb0f2c5f164647ee4a572b8d10",
        "commit_message": "correct a bug in fix() that was introduced in r8293",
        "commit_url": "https://github.com/numpy/numpy/commit/26d51fb2bf1ae6bb0f2c5f164647ee4a572b8d10",
        "buggy_code": "y = y1",
        "fixed_code": "y = nx.asanyarray(y1)",
        "patch": "@@ -44,7 +44,7 @@ def fix(x, y=None):\n     y1 = nx.floor(x)\n     y2 = nx.ceil(x)\n     if y is None:\n-        y = y1\n+        y = nx.asanyarray(y1)\n     y[...] = nx.where(x >= 0, y1, y2)\n     return y\n "
    },
    {
        "commit_id": "b9ae90617de1b65dabe43ebc6effe29d4634abc9",
        "commit_message": "BUG: Need to use os.path.abspath on file handle name also.",
        "commit_url": "https://github.com/numpy/numpy/commit/b9ae90617de1b65dabe43ebc6effe29d4634abc9",
        "buggy_code": "self.filename = filename.name",
        "fixed_code": "self.filename = os.path.abspath(filename.name)",
        "patch": "@@ -237,7 +237,7 @@ def __new__(subtype, filename, dtype=uint8, mode='r+', offset=0,\n         if isinstance(filename, basestring):\n             self.filename = os.path.abspath(filename)\n         elif hasattr(filename, \"name\"):\n-            self.filename = filename.name\n+            self.filename = os.path.abspath(filename.name)\n \n         return self\n "
    },
    {
        "commit_id": "9475b973951f322945a518f1cab62f2a4d21fbc1",
        "commit_message": "BUG: fix div by zero handling in nper.",
        "commit_url": "https://github.com/numpy/numpy/commit/9475b973951f322945a518f1cab62f2a4d21fbc1",
        "buggy_code": "def test_nper(self):",
        "fixed_code": "def test_nper2(self):",
        "patch": "@@ -27,7 +27,7 @@ def test_nper(self):\n         assert_almost_equal(np.nper(0.075,-2000,0,100000.),\n                             21.54, 2)\n \n-    def test_nper(self):\n+    def test_nper2(self):\n         assert_almost_equal(np.nper(0.0,-2000,0,100000.),\n                             50.0, 1)\n "
    },
    {
        "commit_id": "ced34d27a8eef42e0f963afa4989e2383fc3ca77",
        "commit_message": "BUG: fix kaiser for M=1.",
        "commit_url": "https://github.com/numpy/numpy/commit/ced34d27a8eef42e0f963afa4989e2383fc3ca77",
        "buggy_code": "assert isnan(kaiser(1, 1.0))",
        "fixed_code": "assert isfinite(kaiser(1, 1.0))",
        "patch": "@@ -778,7 +778,7 @@ def test_simple(self):\n class TestKaiser(TestCase):\n     def test_simple(self):\n         assert_almost_equal(kaiser(0, 1.0), array([]))\n-        assert isnan(kaiser(1, 1.0))\n+        assert isfinite(kaiser(1, 1.0))\n         assert_almost_equal(kaiser(2, 1.0), array([ 0.78984831, 0.78984831]))\n         assert_almost_equal(kaiser(5, 1.0),\n                             array([ 0.78984831, 0.94503323, 1.        ,"
    },
    {
        "commit_id": "81140fe52e67f15614a735420c3fe0f592e17ab4",
        "commit_message": "BUG: lib: fix #1435, np.gradient should use zeros_like\n\nThanks to Ryan May for the patch.",
        "commit_url": "https://github.com/numpy/numpy/commit/81140fe52e67f15614a735420c3fe0f592e17ab4",
        "buggy_code": "out = zeros(f.shape, f.dtype.char)",
        "fixed_code": "out = np.zeros_like(f).astype(otype)",
        "patch": "@@ -808,7 +808,7 @@ def gradient(f, *varargs):\n \n     for axis in range(N):\n         # select out appropriate parts for this dimension\n-        out = zeros(f.shape, f.dtype.char)\n+        out = np.zeros_like(f).astype(otype)\n         slice1[axis] = slice(1, -1)\n         slice2[axis] = slice(2, None)\n         slice3[axis] = slice(None, -2)"
    },
    {
        "commit_id": "66cbc792058bb9881b6c64f98de53a80df09f45a",
        "commit_message": "DOC - fix doc error",
        "commit_url": "https://github.com/numpy/numpy/commit/66cbc792058bb9881b6c64f98de53a80df09f45a",
        "buggy_code": "Return the indices for the lower-triangle of an (n, n) array.",
        "fixed_code": "Return the indices for the upper-triangle of an (n, n) array.",
        "patch": "@@ -851,7 +851,7 @@ def triu_indices(n,k=0):\n \n def triu_indices_from(arr,k=0):\n     \"\"\"\n-    Return the indices for the lower-triangle of an (n, n) array.\n+    Return the indices for the upper-triangle of an (n, n) array.\n \n     See `triu_indices` for full details.\n "
    },
    {
        "commit_id": "3bc5ce3e5bfe8599f81a9970a61b5e401629514c",
        "commit_message": "DEP: Fix one more deprecated unittest function.",
        "commit_url": "https://github.com/numpy/numpy/commit/3bc5ce3e5bfe8599f81a9970a61b5e401629514c",
        "buggy_code": "self.failIf(len(deps) > 1,",
        "fixed_code": "self.assertFalse(len(deps) > 1,",
        "patch": "@@ -44,7 +44,7 @@ def test_lapack(self):\n         f = FindDependenciesLdd()\n         deps = f.grep_dependencies(lapack_lite.__file__,\n                                    asbytes_nested(['libg2c', 'libgfortran']))\n-        self.failIf(len(deps) > 1,\n+        self.assertFalse(len(deps) > 1,\n \"\"\"Both g77 and gfortran runtimes linked in lapack_lite ! This is likely to\n cause random crashes and wrong results. See numpy INSTALL.txt for more\n information.\"\"\")"
    },
    {
        "commit_id": "6c990fbdd58e969d179e3d721d85c9f0ea3a6005",
        "commit_message": "3K: linalg: fix integer division issue and tests",
        "commit_url": "https://github.com/numpy/numpy/commit/6c990fbdd58e969d179e3d721d85c9f0ea3a6005",
        "buggy_code": "for i in range(len(ind)/2):",
        "fixed_code": "for i in range(len(ind)//2):",
        "patch": "@@ -1046,7 +1046,7 @@ def eig(a):\n             w = wr+1j*wi\n             v = array(vr, w.dtype)\n             ind = flatnonzero(wi != 0.0)      # indices of complex e-vals\n-            for i in range(len(ind)/2):\n+            for i in range(len(ind)//2):\n                 v[ind[2*i]] = vr[ind[2*i]] + 1j*vr[ind[2*i+1]]\n                 v[ind[2*i+1]] = vr[ind[2*i]] - 1j*vr[ind[2*i+1]]\n             result_t = _complexType(result_t)"
    },
    {
        "commit_id": "e8a7df65457531e986a65483ffe79c98c7e811a8",
        "commit_message": "3K: BUG: fix unravel_index integer division",
        "commit_url": "https://github.com/numpy/numpy/commit/e8a7df65457531e986a65483ffe79c98c7e811a8",
        "buggy_code": "return tuple(x/dim_prod % dims)",
        "fixed_code": "return tuple(x//dim_prod % dims)",
        "patch": "@@ -78,7 +78,7 @@ def unravel_index(x,dims):\n     # [dcb,dc,d,1]\n     dim_prod = _nx.cumprod([1] + list(dims)[:0:-1])[::-1]\n     # Indices become [x/dcb % a, x/dc % b, x/d % c, x/1 % d]\n-    return tuple(x/dim_prod % dims)\n+    return tuple(x//dim_prod % dims)\n \n def ix_(*args):\n     \"\"\""
    },
    {
        "commit_id": "69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "commit_message": "DEP: Fix more files for unittest deprecated functions. It isn't clear why these\ntests didn't issue deprecation warnings. Are they being run?",
        "commit_url": "https://github.com/numpy/numpy/commit/69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "buggy_code": "self.failUnlessRaises(ValueError, self._bad_call)",
        "fixed_code": "self.assertRaises(ValueError, self._bad_call)",
        "patch": "@@ -360,7 +360,7 @@ def setUp(self):\n     def _bad_call(self):\n         return self.ary['f0','f1']\n     def test_no_tuple(self):\n-        self.failUnlessRaises(ValueError, self._bad_call)\n+        self.assertRaises(ValueError, self._bad_call)\n     def test_return(self):\n         res = self.ary[['f0','f2']].tolist()\n         assert(res == [(1,3), (5,7)])        "
    },
    {
        "commit_id": "69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "commit_message": "DEP: Fix more files for unittest deprecated functions. It isn't clear why these\ntests didn't issue deprecation warnings. Are they being run?",
        "commit_url": "https://github.com/numpy/numpy/commit/69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "buggy_code": "self.failUnlessRaises(AttributeError, assign_invalid_column, a)",
        "fixed_code": "self.assertRaises(AttributeError, assign_invalid_column, a)",
        "patch": "@@ -129,7 +129,7 @@ def test_invalid_assignment(self):\n         a = self.data\n         def assign_invalid_column(x):\n             x[0].col5 = 1\n-        self.failUnlessRaises(AttributeError, assign_invalid_column, a)\n+        self.assertRaises(AttributeError, assign_invalid_column, a)\n \n \n def test_find_duplicate():"
    },
    {
        "commit_id": "69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "commit_message": "DEP: Fix more files for unittest deprecated functions. It isn't clear why these\ntests didn't issue deprecation warnings. Are they being run?",
        "commit_url": "https://github.com/numpy/numpy/commit/69f7f4c7e3ca4af2ae79921895efa1c2a6b11c41",
        "buggy_code": "self.failUnlessRaises(ValueError,np.fft.fft,[1,2,3],0)",
        "fixed_code": "self.assertRaises(ValueError,np.fft.fft,[1,2,3],0)",
        "patch": "@@ -9,7 +9,7 @@ def fft1(x):\n \n class TestFFTShift(TestCase):\n     def test_fft_n(self):\n-        self.failUnlessRaises(ValueError,np.fft.fft,[1,2,3],0)\n+        self.assertRaises(ValueError,np.fft.fft,[1,2,3],0)\n \n \n class TestFFT1D(TestCase):"
    },
    {
        "commit_id": "051165fb4557b67a1f50e81ad8cfb99efeeb0641",
        "commit_message": "DEP: Fix deprecation warnings in Python 3.1. The warnings come from the unittest\nmodule. The fix should be good for Python >= 2.4 and used the following sed script:\n\ns/\\<failUnless\\>/assertTrue/g\ns/\\<failIf\\>/assertFalse/g\ns/\\<failUnlessEqual\\>/assertEqual/g\ns/\\<failUnlessRaises\\>/assertRaises/g",
        "commit_url": "https://github.com/numpy/numpy/commit/051165fb4557b67a1f50e81ad8cfb99efeeb0641",
        "buggy_code": "self.failUnlessRaises(ValueError,mul)",
        "fixed_code": "self.assertRaises(ValueError,mul)",
        "patch": "@@ -23,7 +23,7 @@ def test_matrix_multiply_by_1d_vector(self, level=rlevel) :\n         def mul() :\n             np.mat(np.eye(2))*np.ones(2)\n \n-        self.failUnlessRaises(ValueError,mul)\n+        self.assertRaises(ValueError,mul)\n \n     def test_matrix_std_argmax(self,level=rlevel):\n         \"\"\"Ticket #83\"\"\""
    },
    {
        "commit_id": "7140adaf8535295436b75afa3f47234ee978acaa",
        "commit_message": "BUG: lib: ensure 'bytes' is imported in io.py",
        "commit_url": "https://github.com/numpy/numpy/commit/7140adaf8535295436b75afa3f47234ee978acaa",
        "buggy_code": "from numpy.compat import asbytes, asstr, asbytes_nested",
        "fixed_code": "from numpy.compat import asbytes, asstr, asbytes_nested, bytes",
        "patch": "@@ -24,7 +24,7 @@\n                      _is_string_like, has_nested_fields, flatten_dtype, \\\n                      easy_dtype, _bytes_to_name\n \n-from numpy.compat import asbytes, asstr, asbytes_nested\n+from numpy.compat import asbytes, asstr, asbytes_nested, bytes\n \n if sys.version_info[0] >= 3:\n     import io"
    },
    {
        "commit_id": "46cbb50b560c8a75d674f43d49b2462f5296aaa0",
        "commit_message": "BUG: Import warnings module in polynomial modules.",
        "commit_url": "https://github.com/numpy/numpy/commit/46cbb50b560c8a75d674f43d49b2462f5296aaa0",
        "buggy_code": "from polyutils import RankWarning, PolyError, PolyDomainError",
        "fixed_code": "import warnings",
        "patch": "@@ -69,8 +69,8 @@\n import numpy as np\n import numpy.linalg as la\n import polyutils as pu\n+import warnings\n from polytemplate import polytemplate\n-from polyutils import RankWarning, PolyError, PolyDomainError\n \n chebtrim = pu.trimcoef\n "
    },
    {
        "commit_id": "29efc30b7b2290abf7c6d4d5eeddd5a97502098a",
        "commit_message": "Fix #1367 (round 2)",
        "commit_url": "https://github.com/numpy/numpy/commit/29efc30b7b2290abf7c6d4d5eeddd5a97502098a",
        "buggy_code": "except AttributeError:",
        "fixed_code": "except (AttributeError, TypeError):",
        "patch": "@@ -2875,7 +2875,7 @@ def view(self, dtype=None, type=None):\n             # Try to reset the shape of the mask (if we don't have a void)\n             try:\n                 output._mask.shape = output.shape\n-            except AttributeError:\n+            except (AttributeError, TypeError):\n                 pass\n         # Make sure to reset the _fill_value if needed\n         if getattr(output, '_fill_value', None):"
    },
    {
        "commit_id": "f45d580284a5cbb96277733ced149c4e7b7d3244",
        "commit_message": "Fix #1367",
        "commit_url": "https://github.com/numpy/numpy/commit/f45d580284a5cbb96277733ced149c4e7b7d3244",
        "buggy_code": "except AttributeError:",
        "fixed_code": "except (TypeError, AttributeError):",
        "patch": "@@ -2786,7 +2786,7 @@ def __array_finalize__(self, obj):\n                 self._mask.shape = self.shape\n             except ValueError:\n                 self._mask = nomask\n-            except AttributeError:\n+            except (TypeError, AttributeError):\n                 # When _mask.shape is not writable (because it's a void)\n                 pass\n         # Finalize the fill_value for structured arrays"
    },
    {
        "commit_id": "18c907f73b760346855351c88562aaf4edf0013f",
        "commit_message": "BUG: Apply patch to fix ticket #1326.",
        "commit_url": "https://github.com/numpy/numpy/commit/18c907f73b760346855351c88562aaf4edf0013f",
        "buggy_code": "x = np.array([1,2,3], dtype=np.int32)",
        "fixed_code": "x = np.array([1,2,3], dtype=np.dtype('<i4'))",
        "patch": "@@ -1251,7 +1251,7 @@ def test_buffer_hashlib(self):\n         except ImportError:\n             from md5 import new as md5\n \n-        x = np.array([1,2,3], dtype=np.int32)\n+        x = np.array([1,2,3], dtype=np.dtype('<i4'))\n         assert_equal(md5(x).hexdigest(), '2a1dd1e1e59d0a384c26951e316cd7e6')\n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "3e5a12cb388e5d9a0b8dba3d1ebf4c55bf419272",
        "commit_message": "BUG: fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/3e5a12cb388e5d9a0b8dba3d1ebf4c55bf419272",
        "buggy_code": "raise NotImplementerError(\"_nulp not implemented for complex array\")",
        "fixed_code": "raise NotImplementedError(\"_nulp not implemented for complex array\")",
        "patch": "@@ -1152,7 +1152,7 @@ def nulp_diff(x, y, dtype=None):\n \n     t = np.common_type(x, y)\n     if np.iscomplexobj(x) or np.iscomplexobj(y):\n-        raise NotImplementerError(\"_nulp not implemented for complex array\")\n+        raise NotImplementedError(\"_nulp not implemented for complex array\")\n \n     x = np.array(x, dtype=t)\n     y = np.array(y, dtype=t)"
    },
    {
        "commit_id": "8bde1a547157653ea83889fbcd3c481c02b6491e",
        "commit_message": "BUG: fix escaping of pkgdir on windows.",
        "commit_url": "https://github.com/numpy/numpy/commit/8bde1a547157653ea83889fbcd3c481c02b6491e",
        "buggy_code": "vars[\"pkgdir\"] = os.path.dirname(mod.__file__)",
        "fixed_code": "vars[\"pkgdir\"] = _escape_backslash(os.path.dirname(mod.__file__))",
        "patch": "@@ -329,7 +329,7 @@ def _read_config(f):\n                              (pkgname, meta[\"name\"]))\n \n         mod = sys.modules[pkgname]\n-        vars[\"pkgdir\"] = os.path.dirname(mod.__file__)\n+        vars[\"pkgdir\"] = _escape_backslash(os.path.dirname(mod.__file__))\n             \n     return LibraryInfo(name=meta[\"name\"], description=meta[\"description\"],\n             version=meta[\"version\"], sections=sections, vars=VariableSet(vars))"
    },
    {
        "commit_id": "bfdb22a137e7ed2a8061b38f7da734f8e60101b0",
        "commit_message": "BUG: fix #1273: npy-pkg-info files did not work for eggs.\n\nWe use the pkgdir variable which is automatically translate at runtime.",
        "commit_url": "https://github.com/numpy/numpy/commit/bfdb22a137e7ed2a8061b38f7da734f8e60101b0",
        "buggy_code": "subst_dict = dict([(\"sep\", os.path.sep)])",
        "fixed_code": "subst_dict = dict([(\"sep\", os.path.sep), (\"pkgname\", \"numpy.core\")])",
        "patch": "@@ -655,7 +655,7 @@ def generate_umath_c(ext,build_dir):\n     # explicitly add an extension which has generate_config_h and\n     # generate_numpyconfig_h as sources *before* adding npymath.\n \n-    subst_dict = dict([(\"sep\", os.path.sep)])\n+    subst_dict = dict([(\"sep\", os.path.sep), (\"pkgname\", \"numpy.core\")])\n     def get_mathlib_info(*args):\n         # Another ugly hack: the mathlib info is known once build_src is run,\n         # but we cannot use add_installed_pkg_config here either, so we only"
    },
    {
        "commit_id": "73173cd85eae72e4a22b7b465ea74be0dacd8bc6",
        "commit_message": "BUG: fix test_buffer_hashlib for 64-bit systems",
        "commit_url": "https://github.com/numpy/numpy/commit/73173cd85eae72e4a22b7b465ea74be0dacd8bc6",
        "buggy_code": "x = np.array([1,2,3])",
        "fixed_code": "x = np.array([1,2,3], dtype=np.int32)",
        "patch": "@@ -1242,7 +1242,7 @@ def test_buffer_hashlib(self):\n         except ImportError:\n             from md5 import new as md5\n \n-        x = np.array([1,2,3])\n+        x = np.array([1,2,3], dtype=np.int32)\n         assert_equal(md5(x).hexdigest(), '2a1dd1e1e59d0a384c26951e316cd7e6')\n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "3edf9a278f17df21b81015645a4894347b22a7f3",
        "commit_message": "BUG: fix comparison between tuple and int in test_numerictypes.py",
        "commit_url": "https://github.com/numpy/numpy/commit/3edf9a278f17df21b81015645a4894347b22a7f3",
        "buggy_code": "if len(item) > 2 and item[2] > 1:",
        "fixed_code": "if len(item) > 2 and np.prod(item[2]) > 1:",
        "patch": "@@ -77,7 +77,7 @@ def normalize_descr(descr):\n                     dtype = \"|\" + dtype\n                 else:\n                     dtype = byteorder + dtype\n-            if len(item) > 2 and item[2] > 1:\n+            if len(item) > 2 and np.prod(item[2]) > 1:\n                 nitem = (item[0], dtype, item[2])\n             else:\n                 nitem = (item[0], dtype)"
    },
    {
        "commit_id": "532404706ed8ed66f2db28a56a14386d8f97e080",
        "commit_message": "3K: fix test_complex_inf_nan",
        "commit_url": "https://github.com/numpy/numpy/commit/532404706ed8ed66f2db28a56a14386d8f97e080",
        "buggy_code": "if sys.version_info[0] >= 2 and sys.version_info[1] >= 6:",
        "fixed_code": "if sys.version_info >= (2, 6):",
        "patch": "@@ -87,7 +87,7 @@ def test_complex_types():\n \n def test_complex_inf_nan():\n     \"\"\"Check inf/nan formatting of complex types.\"\"\"\n-    if sys.version_info[0] >= 2 and sys.version_info[1] >= 6:\n+    if sys.version_info >= (2, 6):\n         TESTS = {\n             complex(np.inf, 0): \"(inf+0j)\",\n             complex(0, np.inf): \"inf*j\","
    },
    {
        "commit_id": "fc5393fd0959afef44baf7c8b690d16157b351a7",
        "commit_message": "3K: core: fix a few Name and SyntaxErrors in tests",
        "commit_url": "https://github.com/numpy/numpy/commit/fc5393fd0959afef44baf7c8b690d16157b351a7",
        "buggy_code": "print args",
        "fixed_code": "print(args)",
        "patch": "@@ -43,7 +43,7 @@ def test_divide(self):\n \n     def test_errcall(self):\n         def foo(*args):\n-            print args\n+            print(args)\n         olderrcall = geterrcall()\n         with errstate(call=foo):\n             assert(geterrcall() is foo), 'call is not foo'"
    },
    {
        "commit_id": "6603acb88bd9ebf3dbcdd0f85f555cfc6f952228",
        "commit_message": "Fix version comparison when version is None.",
        "commit_url": "https://github.com/numpy/numpy/commit/6603acb88bd9ebf3dbcdd0f85f555cfc6f952228",
        "buggy_code": "if version < '5.1':",
        "fixed_code": "if version and version < '5.1':",
        "patch": "@@ -27,7 +27,7 @@ def get_flags_opt(self):\n         return ['-O4']\n     def get_flags_arch(self):\n         version = self.get_version()\n-        if version < '5.1':\n+        if version and version < '5.1':\n             return ['-target=native']\n         else:\n             return ['']"
    },
    {
        "commit_id": "b1b6e581144db477b9e8780b0f22f27f7eaddfa4",
        "commit_message": "Fix print statements in numpy.distutils.environment",
        "commit_url": "https://github.com/numpy/numpy/commit/b1b6e581144db477b9e8780b0f22f27f7eaddfa4",
        "buggy_code": "print 'This is the wrong setup.py file to run'",
        "fixed_code": "print('This is the wrong setup.py file to run')",
        "patch": "@@ -24,4 +24,4 @@ def configuration(parent_package='',top_path=None):\n     return config\n \n if __name__ == '__main__':\n-    print 'This is the wrong setup.py file to run'\n+    print('This is the wrong setup.py file to run')"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -154,4 +154,4 @@ def get_flags_opt(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='absoft')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -41,4 +41,4 @@ def get_flags_debug(self):\n     log.set_verbosity(2)\n     compiler = G95FCompiler()\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -40,4 +40,4 @@ def get_version(self, force=0, ok_status=[256,0,1]):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='hpux')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -92,4 +92,4 @@ def get_flags_opt(self):\n     log.set_verbosity(2)\n     compiler = IBMFCompiler()\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -245,4 +245,4 @@ class IntelItaniumVisualFCompiler(IntelVisualFCompiler):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='intel')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -44,4 +44,4 @@ def get_libraries(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='lahey')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -53,4 +53,4 @@ def get_flags_arch_f90(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='mips')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -40,4 +40,4 @@ def get_flags_debug(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='nag')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -27,4 +27,4 @@ def find_executables(self):\n     log.set_verbosity(2)\n     compiler = NoneFCompiler()\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -38,4 +38,4 @@ def get_flags_debug(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='pg')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -47,4 +47,4 @@ def get_libraries(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='sun')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "commit_message": "Fix print statements in fcompiler for python3.",
        "commit_url": "https://github.com/numpy/numpy/commit/bee85b21cb5a7263d09e9ea58081c1c4cac55089",
        "buggy_code": "print compiler.get_version()",
        "fixed_code": "print(compiler.get_version())",
        "patch": "@@ -51,4 +51,4 @@ def get_flags_arch(self):\n     from numpy.distutils.fcompiler import new_fcompiler\n     compiler = new_fcompiler(compiler='vast')\n     compiler.customize()\n-    print compiler.get_version()\n+    print(compiler.get_version())"
    },
    {
        "commit_id": "b3f8643a8929d6a75bfcbdf06791e3d3a116a338",
        "commit_message": "Fix print/repr/raise python3 incompatibilities in system_info and build_ext command.",
        "commit_url": "https://github.com/numpy/numpy/commit/b3f8643a8929d6a75bfcbdf06791e3d3a116a338",
        "buggy_code": "raise self.notfounderror,self.notfounderror.__doc__",
        "fixed_code": "raise self.notfounderror(self.notfounderror.__doc__)",
        "patch": "@@ -451,7 +451,7 @@ def get_info(self,notfound_action=0):\n                     if notfound_action==1:\n                         warnings.warn(self.notfounderror.__doc__)\n                     elif notfound_action==2:\n-                        raise self.notfounderror,self.notfounderror.__doc__\n+                        raise self.notfounderror(self.notfounderror.__doc__)\n                     else:\n                         raise ValueError(repr(notfound_action))\n "
    },
    {
        "commit_id": "b3f63a20ca2fcf46f8c83e77b1b399ab4d8d24b3",
        "commit_message": "Port the fix for #1299 to the trunk and change trunk version to 1.5",
        "commit_url": "https://github.com/numpy/numpy/commit/b3f63a20ca2fcf46f8c83e77b1b399ab4d8d24b3",
        "buggy_code": "MINOR               = 4",
        "fixed_code": "MINOR               = 5",
        "patch": "@@ -49,7 +49,7 @@\n AUTHOR_EMAIL        = \"oliphant@enthought.com\"\n PLATFORMS           = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"]\n MAJOR               = 1\n-MINOR               = 4\n+MINOR               = 5 \n MICRO               = 0\n ISRELEASED          = False\n VERSION             = '%d.%d.%d' % (MAJOR, MINOR, MICRO)"
    },
    {
        "commit_id": "f9d1cd5265b013042b5909adf92ca5ea168aaee3",
        "commit_message": "Fix documentation of array.",
        "commit_url": "https://github.com/numpy/numpy/commit/f9d1cd5265b013042b5909adf92ca5ea168aaee3",
        "buggy_code": "array(object, dtype=None, copy=True, order=None, subok=False, ndmin=True)",
        "fixed_code": "array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)",
        "patch": "@@ -293,7 +293,7 @@\n \n add_newdoc('numpy.core.multiarray', 'array',\n     \"\"\"\n-    array(object, dtype=None, copy=True, order=None, subok=False, ndmin=True)\n+    array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)\n \n     Create an array.\n "
    },
    {
        "commit_id": "17e51af8e7e1b13f3ec19a8a25c40c85667265e9",
        "commit_message": "BUG: (#1221) special case mac os x in numpyconfig.h\n\nUniversal builds break the configure stage: we have to harcode the\narch-specific values in the case of mac os x, as we have only one configuration\nstage per compile, but several arch per compile with the braindead -arch\nmachinery.\n\nWe rename the old numpyconfig.h to a private header, and numpyconfig.h itself\npost-fix the values in the case of mac os x.",
        "commit_url": "https://github.com/numpy/numpy/commit/17e51af8e7e1b13f3ec19a8a25c40c85667265e9",
        "buggy_code": "target = join(build_dir,header_dir,'numpyconfig.h')",
        "fixed_code": "target = join(build_dir,header_dir,'_numpyconfig.h')",
        "patch": "@@ -466,7 +466,7 @@ def generate_config_h(ext, build_dir):\n \n     def generate_numpyconfig_h(ext, build_dir):\n         \"\"\"Depends on config.h: generate_config_h has to be called before !\"\"\"\n-        target = join(build_dir,header_dir,'numpyconfig.h')\n+        target = join(build_dir,header_dir,'_numpyconfig.h')\n         d = os.path.dirname(target)\n         if not os.path.exists(d):\n             os.makedirs(d)"
    },
    {
        "commit_id": "58f72773ff316469a47b702d387bf9dbd0270c78",
        "commit_message": "BUG: forgot to update the C_API_VERSION as well.",
        "commit_url": "https://github.com/numpy/numpy/commit/58f72773ff316469a47b702d387bf9dbd0270c78",
        "buggy_code": "C_API_VERSION = 0x00000003",
        "fixed_code": "C_API_VERSION = 0x00000004",
        "patch": "@@ -29,7 +29,7 @@\n # without breaking binary compatibility.  In this case, only the C_API_VERSION\n # (*not* C_ABI_VERSION) would be increased.  Whenever binary compatibility is\n # broken, both C_API_VERSION and C_ABI_VERSION should be increased.\n-C_API_VERSION = 0x00000003\n+C_API_VERSION = 0x00000004\n \n class MismatchCAPIWarning(Warning):\n     pass"
    },
    {
        "commit_id": "a6e1cbed30568e4ca277f93838901c9d63e3a2e5",
        "commit_message": "BUG: check for IEEE754 macro on python >= 2.6.",
        "commit_url": "https://github.com/numpy/numpy/commit/a6e1cbed30568e4ca277f93838901c9d63e3a2e5",
        "buggy_code": "if sys.version_info[:2] >= (2, 7):",
        "fixed_code": "if sys.version_info[:2] >= (2, 6):",
        "patch": "@@ -200,7 +200,7 @@ def check_ieee_macros(config):\n     # functions we test. We remove every function tested by python's\n     # autoconf, hoping their own test are correct\n     _macros = [\"isnan\", \"isinf\", \"signbit\", \"isfinite\"]\n-    if sys.version_info[:2] >= (2, 7):\n+    if sys.version_info[:2] >= (2, 6):\n         for f in _macros:\n             st = config.check_decl(fname2def(\"decl_%s\" % f),\n                     headers=[\"Python.h\", \"math.h\"])"
    },
    {
        "commit_id": "c96d201e94a1bd791356f5729af6b57092333414",
        "commit_message": "BUG: typo for quad long double defines in distutils build.",
        "commit_url": "https://github.com/numpy/numpy/commit/c96d201e94a1bd791356f5729af6b57092333414",
        "buggy_code": "'IEEE_QUAD_16B_LE', 'IEEE_QUAD_16B_BE',",
        "fixed_code": "'IEEE_QUAD_LE', 'IEEE_QUAD_BE',",
        "patch": "@@ -418,7 +418,7 @@ def generate_config_h(ext, build_dir):\n                 rep = check_long_double_representation(config_cmd)\n                 if rep in ['INTEL_EXTENDED_12_BYTES_LE',\n                            'INTEL_EXTENDED_16_BYTES_LE',\n-                           'IEEE_QUAD_16B_LE', 'IEEE_QUAD_16B_BE',\n+                           'IEEE_QUAD_LE', 'IEEE_QUAD_BE',\n                            'IEEE_DOUBLE_LE', 'IEEE_DOUBLE_BE']:\n                     moredefs.append(('HAVE_LDOUBLE_%s' % rep, 1))\n                 else:"
    },
    {
        "commit_id": "32501b397070ed37298668341e93b96c55197bad",
        "commit_message": "DOC: fix nextafter docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/32501b397070ed37298668341e93b96c55197bad",
        "buggy_code": ">>> np.nextrepresentable(1, 2) == np.finfo(np.float64).eps",
        "fixed_code": ">>> np.nextrepresentable(1, 2) - 1 == np.finfo(np.float64).eps",
        "patch": "@@ -2807,7 +2807,7 @@ def add_newdoc(place, name, doc):\n \n     Examples\n     --------\n-    >>> np.nextrepresentable(1, 2) == np.finfo(np.float64).eps\n+    >>> np.nextrepresentable(1, 2) - 1 == np.finfo(np.float64).eps\n     True\n     \"\"\")\n "
    },
    {
        "commit_id": "3d36bf277fd19e3db66bdd0201338a3db6dddc77",
        "commit_message": "Disable 7712 patch.",
        "commit_url": "https://github.com/numpy/numpy/commit/3d36bf277fd19e3db66bdd0201338a3db6dddc77",
        "buggy_code": "if index is None:",
        "fixed_code": "if index is None or 1: # disable 7712 patch",
        "patch": "@@ -640,7 +640,7 @@ def modsign2map(m):\n \n def cb_sign2map(a,var,index=None):\n     ret={'varname':a}\n-    if index is None:\n+    if index is None or 1: # disable 7712 patch\n         ret['varname_i'] = ret['varname']\n     else:\n         ret['varname_i'] = ret['varname'] + '_' + str(index)"
    },
    {
        "commit_id": "a5ebfbbea01dafe360578c5c22da9a84c8f1319e",
        "commit_message": "BUG Fix ticket #1285. Problem located by cgranade.",
        "commit_url": "https://github.com/numpy/numpy/commit/a5ebfbbea01dafe360578c5c22da9a84c8f1319e",
        "buggy_code": "\\t\\t\\t(*v) = *((npy_longdouble *)PyArray_DATA(obj))",
        "fixed_code": "\\t\\t\\t(*v) = *((npy_longdouble *)PyArray_DATA(obj));",
        "patch": "@@ -767,7 +767,7 @@\n \\t\\t\\treturn 1;\n \\t\\t}\n \\t\\telse if (PyArray_Check(obj) && PyArray_TYPE(obj)==PyArray_LONGDOUBLE) {\n-\\t\\t\\t(*v) = *((npy_longdouble *)PyArray_DATA(obj))\n+\\t\\t\\t(*v) = *((npy_longdouble *)PyArray_DATA(obj));\n \\t\\t\\treturn 1;\n \\t\\t}\n \\t}"
    },
    {
        "commit_id": "74bca4fa9262d365eda8f59932c0d5bc86582f4b",
        "commit_message": "Fix assert_array_equal_spec for complex types.",
        "commit_url": "https://github.com/numpy/numpy/commit/74bca4fa9262d365eda8f59932c0d5bc86582f4b",
        "buggy_code": "if not _are_equal(xr, xi) and _are_equal(yr, yi):",
        "fixed_code": "if not (_are_equal(xr, yr) and _are_equal(xi, yi)):",
        "patch": "@@ -47,7 +47,7 @@ def assert_equal_spec(x, y):\n         xi = np.imag(x)\n         yi = np.imag(y)\n \n-        if not _are_equal(xr, xi) and _are_equal(yr, yi):\n+        if not (_are_equal(xr, yr) and _are_equal(xi, yi)):\n             raise AssertionError(\"Items are not equal:\\n\" \\\n                                  \"ACTUAL: %s\\n\" \\\n                                  \"DESIRED: %s\\n\" % (str(x), str(y)))"
    },
    {
        "commit_id": "c0479b232319d70696387a6444900b0c03030926",
        "commit_message": "Apply fix for sun compilation from beffa. Closes ticket #1248.",
        "commit_url": "https://github.com/numpy/numpy/commit/c0479b232319d70696387a6444900b0c03030926",
        "buggy_code": "opt.extend(['fsu','sunmath','mvec','f77compat'])",
        "fixed_code": "opt.extend(['fsu','sunmath','mvec'])",
        "patch": "@@ -38,7 +38,7 @@ def get_arch(self):\n         return ['-xtarget=generic']\n     def get_libraries(self):\n         opt = []\n-        opt.extend(['fsu','sunmath','mvec','f77compat'])\n+        opt.extend(['fsu','sunmath','mvec'])\n         return opt\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "ef0441c420b6d9118791a137392d46f38e5c2122",
        "commit_message": "BUG: one test for nextafter was wrong.",
        "commit_url": "https://github.com/numpy/numpy/commit/ef0441c420b6d9118791a137392d46f38e5c2122",
        "buggy_code": "assert one - np.nextafter(one, zero) == -eps",
        "fixed_code": "assert np.nextafter(one, zero) - one < 0",
        "patch": "@@ -830,7 +830,7 @@ def test_nextafter():\n         zero = t(0)\n         eps = np.finfo(t).eps\n         assert np.nextafter(one, two) - one == eps\n-        assert one - np.nextafter(one, zero) == -eps\n+        assert np.nextafter(one, zero) - one < 0\n         assert np.isnan(np.nextafter(np.nan, one))\n         assert np.isnan(np.nextafter(one, np.nan))\n         assert np.nextafter(one, one) == one"
    },
    {
        "commit_id": "8e5018c863a45a243973e98a42675ac32f008f7b",
        "commit_message": "ENH: fix spelling error in array_api_gen_bld COMSTR builder.",
        "commit_url": "https://github.com/numpy/numpy/commit/8e5018c863a45a243973e98a42675ac32f008f7b",
        "buggy_code": "array_api_gen_bld = Builder(action = Action(do_generate_numpy_api, '$ARRAPIGENCOMSTR'),",
        "fixed_code": "array_api_gen_bld = Builder(action = Action(do_generate_numpy_api, '$ARRAYPIGENCOMSTR'),",
        "patch": "@@ -235,7 +235,7 @@ def CheckInline(context):\n         context.Result(0)\n     return inline\n \n-array_api_gen_bld = Builder(action = Action(do_generate_numpy_api, '$ARRAPIGENCOMSTR'),\n+array_api_gen_bld = Builder(action = Action(do_generate_numpy_api, '$ARRAYPIGENCOMSTR'),\n                             emitter = generate_api_emitter)\n \n "
    },
    {
        "commit_id": "5dc5c73739995adfa7b38fc1abbf8241874a6145",
        "commit_message": "BUG: pkg_paths was wrongly set when using --package-list for numscons build.",
        "commit_url": "https://github.com/numpy/numpy/commit/5dc5c73739995adfa7b38fc1abbf8241874a6145",
        "buggy_code": "pkg_paths = [self.pkg_names[i] for i in id]",
        "fixed_code": "pkg_paths = [self.pkg_paths[i] for i in id]",
        "patch": "@@ -556,7 +556,7 @@ def run(self):\n             pre_hooks = [self.pre_hooks[i] for i in id]\n             post_hooks = [self.post_hooks[i] for i in id]\n             pkg_names = [self.pkg_names[i] for i in id]\n-            pkg_paths = [self.pkg_names[i] for i in id]\n+            pkg_paths = [self.pkg_paths[i] for i in id]\n         else:\n             sconscripts = self.sconscripts\n             pre_hooks = self.pre_hooks"
    },
    {
        "commit_id": "1857cf27034c639a27044308c39211a811678054",
        "commit_message": "Fix coercion of unicode object to chararray",
        "commit_url": "https://github.com/numpy/numpy/commit/1857cf27034c639a27044308c39211a811678054",
        "buggy_code": "obj = unicode(obj)",
        "fixed_code": "obj = _unicode(obj)",
        "patch": "@@ -2450,7 +2450,7 @@ class adds the following functionality:\n                         ucs4 = numpy.array(ucs2, 'u4')\n                         obj = ucs4.data\n             else:\n-                obj = unicode(obj)\n+                obj = _unicode(obj)\n         else:\n             # Let the default Unicode -> string encoding (if any) take\n             # precedence."
    },
    {
        "commit_id": "656acfda1bd89ad45bd1db384b52b4adb6769c40",
        "commit_message": "BUG: non ascii character in docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/656acfda1bd89ad45bd1db384b52b4adb6769c40",
        "buggy_code": "tab size of 8 characters is assumed. This doesn\u2019t understand other",
        "fixed_code": "tab size of 8 characters is assumed. This doesn't understand other",
        "patch": "@@ -561,7 +561,7 @@ def expandtabs(a, tabsize=8):\n     replaced by one or more spaces, depending on the current column\n     and the given `tabsize`. The column number is reset to zero after\n     each newline occurring in the string. If `tabsize` is not given, a\n-    tab size of 8 characters is assumed. This doesn\u2019t understand other\n+    tab size of 8 characters is assumed. This doesn't understand other\n     non-printing characters or escape sequences.\n \n     Parameters"
    },
    {
        "commit_id": "68e62cc96b01f756ddb845d4215d3d48686d9d67",
        "commit_message": "Fix ticket #1243. Patch from gnutino.",
        "commit_url": "https://github.com/numpy/numpy/commit/68e62cc96b01f756ddb845d4215d3d48686d9d67",
        "buggy_code": "bytestr = str(var.itemsize*product(var.shape))",
        "fixed_code": "bytestr = str(var.nbytes)",
        "patch": "@@ -293,7 +293,7 @@ def who(vardict=None):\n                 namestr = name\n                 original=1\n             shapestr = \" x \".join(map(str, var.shape))\n-            bytestr = str(var.itemsize*product(var.shape))\n+            bytestr = str(var.nbytes)\n             sta.append([namestr, shapestr, bytestr, var.dtype.name,\n                         original])\n "
    },
    {
        "commit_id": "9af578fae9b87fd15415dc641180cd0e4976bbef",
        "commit_message": "Fix remaining references to numpy.core.defmatrix",
        "commit_url": "https://github.com/numpy/numpy/commit/9af578fae9b87fd15415dc641180cd0e4976bbef",
        "buggy_code": "<class 'numpy.core.defmatrix.matrix'>",
        "fixed_code": "<class 'numpy.matrixlib.defmatrix.matrix'>",
        "patch": "@@ -2749,7 +2749,7 @@\n     >>> y\n     matrix([[513]], dtype=int16)\n     >>> print type(y)\n-    <class 'numpy.core.defmatrix.matrix'>\n+    <class 'numpy.matrixlib.defmatrix.matrix'>\n \n     Creating a view on a structured array so it can be used in calculations\n "
    },
    {
        "commit_id": "9af578fae9b87fd15415dc641180cd0e4976bbef",
        "commit_message": "Fix remaining references to numpy.core.defmatrix",
        "commit_url": "https://github.com/numpy/numpy/commit/9af578fae9b87fd15415dc641180cd0e4976bbef",
        "buggy_code": "from numpy.core.defmatrix import matrix, asmatrix",
        "fixed_code": "from numpy.matrixlib.defmatrix import matrix, asmatrix",
        "patch": "@@ -1,5 +1,5 @@\n import numpy as np\n-from numpy.core.defmatrix import matrix, asmatrix\n+from numpy.matrixlib.defmatrix import matrix, asmatrix\n # need * as we're copying the numpy namespace\n from numpy import *\n "
    },
    {
        "commit_id": "aba728e79bc77e39787e2a0cf9d9eae4dc2f8690",
        "commit_message": "Make true divide return doubles.\nMake true divide return nan/infs instead of raise zero divide error.",
        "commit_url": "https://github.com/numpy/numpy/commit/aba728e79bc77e39787e2a0cf9d9eae4dc2f8690",
        "buggy_code": "TD('bBhH', out='f'),",
        "fixed_code": "TD('bBhH', out='d'),",
        "patch": "@@ -255,7 +255,7 @@ def english_upper(s):\n 'true_divide' :\n     Ufunc(2, 1, One,\n           docstrings.get('numpy.core.umath.true_divide'),\n-          TD('bBhH', out='f'),\n+          TD('bBhH', out='d'),\n           TD('iIlLqQ', out='d'),\n           TD(flts+cmplx),\n           TD(O, f='PyNumber_TrueDivide'),"
    },
    {
        "commit_id": "aa24bc54459a5d31e732d0013ac5ff33fc2c240a",
        "commit_message": "BUG: fix npy_pkg_config_path variable escaping on windows.\n\nWhen dealing with path on windows, the backshlashes need to be escaped: quick\nreplace to avoid trouble when dealing with variables.",
        "commit_url": "https://github.com/numpy/numpy/commit/aa24bc54459a5d31e732d0013ac5ff33fc2c240a",
        "buggy_code": "vars[name] = value",
        "fixed_code": "vars[name] = value.replace(\"\\\\\", \"\\\\\\\\\")",
        "patch": "@@ -182,7 +182,7 @@ def parse_config(filename, dirs=None):\n     vars = {}\n     if config.has_section('variables'):\n         for name, value in config.items(\"variables\"):\n-            vars[name] = value\n+            vars[name] = value.replace(\"\\\\\", \"\\\\\\\\\")\n \n     # Parse \"normal\" sections\n     secs = [s for s in config.sections() if not s in ['meta', 'variables']]"
    },
    {
        "commit_id": "0abf640f4a8f0f48fe2fcd1e43bbe7b4eabbc9cf",
        "commit_message": "fix a minor mistake in the previous commit",
        "commit_url": "https://github.com/numpy/numpy/commit/0abf640f4a8f0f48fe2fcd1e43bbe7b4eabbc9cf",
        "buggy_code": "``__array_prepare__`` and ``__array_wrap__`` for ufuncs",
        "fixed_code": "``__array_wrap__`` for ufuncs",
        "patch": "@@ -420,7 +420,7 @@ def __array_finalize__(self, obj):\n \n .. _array-wrap:\n \n-``__array_prepare__`` and ``__array_wrap__`` for ufuncs\n+``__array_wrap__`` for ufuncs\n -------------------------------------------------------\n \n ``__array_wrap__`` gets called at the end of numpy ufuncs and other numpy"
    },
    {
        "commit_id": "0a786652b3824a239503ddd4a5392263d73c3376",
        "commit_message": "* fixed np.ma.average on integersw/ mask (bug #1188)",
        "commit_url": "https://github.com/numpy/numpy/commit/0a786652b3824a239503ddd4a5392263d73c3376",
        "buggy_code": "d = umath.add.reduce((-mask).ravel().astype(int))",
        "fixed_code": "d = float(umath.add.reduce((~mask).ravel()))",
        "patch": "@@ -413,7 +413,7 @@ def average(a, axis=None, weights=None, returned=False):\n         else:\n             if weights is None:\n                 n = a.filled(0).sum(axis=None)\n-                d = umath.add.reduce((-mask).ravel().astype(int))\n+                d = float(umath.add.reduce((~mask).ravel()))\n             else:\n                 w = array(filled(weights, 0.0), float, mask=mask).ravel()\n                 n = add.reduce(a.ravel() * w)"
    },
    {
        "commit_id": "b9b85f81702ebeaed6b39eff40d12fe2b05a2a27",
        "commit_message": "Fix typo in install_clib fix.",
        "commit_url": "https://github.com/numpy/numpy/commit/b9b85f81702ebeaed6b39eff40d12fe2b05a2a27",
        "buggy_code": "compiler = build_clib.compiler",
        "fixed_code": "compiler = build_clib_cmd.compiler",
        "patch": "@@ -24,7 +24,7 @@ def run (self):\n             compiler = new_compiler(compiler=None)\n             compiler.customize(self.distribution)\n         else:\n-            compiler = build_clib.compiler\n+            compiler = build_clib_cmd.compiler\n \n         for l in self.distribution.installed_libraries:\n             target_dir = os.path.join(self.install_dir, l.target_dir)"
    },
    {
        "commit_id": "36456699517e7867b5e0b13f40622b319ad3f084",
        "commit_message": "Fix add_installed_library so that install_dir is actually relatively to the current package.",
        "commit_url": "https://github.com/numpy/numpy/commit/36456699517e7867b5e0b13f40622b319ad3f084",
        "buggy_code": "install_dir='numpy/core/lib')",
        "fixed_code": "install_dir='lib')",
        "patch": "@@ -596,7 +596,7 @@ def get_mathlib_info(*args):\n \n     config.add_installed_library('npymath',\n             sources=[join('src', 'npymath', 'npy_math.c.src'), get_mathlib_info],\n-            install_dir='numpy/core/lib')\n+            install_dir='lib')\n     config.add_npy_pkg_config(\"npymath.ini.in\", \"lib/npy-pkg-config\",\n             subst_dict)\n     config.add_npy_pkg_config(\"mlib.ini.in\", \"lib/npy-pkg-config\","
    },
    {
        "commit_id": "36456699517e7867b5e0b13f40622b319ad3f084",
        "commit_message": "Fix add_installed_library so that install_dir is actually relatively to the current package.",
        "commit_url": "https://github.com/numpy/numpy/commit/36456699517e7867b5e0b13f40622b319ad3f084",
        "buggy_code": "config.add_scons_installed_library('npymath', 'numpy/core/lib')",
        "fixed_code": "config.add_scons_installed_library('npymath', 'lib')",
        "patch": "@@ -91,7 +91,7 @@ def add_generated_files(*args, **kw):\n     config.add_sconscript('SConstruct',\n                           post_hook = add_generated_files,\n                           source_files = source_files)\n-    config.add_scons_installed_library('npymath', 'numpy/core/lib')\n+    config.add_scons_installed_library('npymath', 'lib')\n \n     config.add_data_files('include/numpy/*.h')\n     config.add_include_dirs('src')"
    },
    {
        "commit_id": "0407363fe009c004da0e2c2bbbaa421cb64e160d",
        "commit_message": "Fix typo in add_library.",
        "commit_url": "https://github.com/numpy/numpy/commit/0407363fe009c004da0e2c2bbbaa421cb64e160d",
        "buggy_code": "self._add_library(name, sources, install_dir, build_info)",
        "fixed_code": "self._add_library(name, sources, None, build_info)",
        "patch": "@@ -1179,7 +1179,7 @@ def add_library(self,name,sources,**build_info):\n           f2py_options\n           language\n         \"\"\"\n-        self._add_library(name, sources, install_dir, build_info)\n+        self._add_library(name, sources, None, build_info)\n \n         dist = self.get_distribution()\n         if dist is not None:"
    },
    {
        "commit_id": "3ab762705a35ad7ba9a726a4a80abeb741e4f8a3",
        "commit_message": "Look for already declared configure checks macros in python 2.5.\n\nPython 2.5 already declared HAVE_HYPOT and other similar math funcs, so\nlook for those declaration to avoid redeclaring those macros ourselves.\nShould fix some build warnings.",
        "commit_url": "https://github.com/numpy/numpy/commit/3ab762705a35ad7ba9a726a4a80abeb741e4f8a3",
        "buggy_code": "if sys.version_info[:2] >= (2, 6):",
        "fixed_code": "if sys.version_info[:2] >= (2, 5):",
        "patch": "@@ -142,7 +142,7 @@ def check_funcs(funcs_name):\n     # config.h in the public namespace, so we have a clash for the common\n     # functions we test. We remove every function tested by python's\n     # autoconf, hoping their own test are correct\n-    if sys.version_info[:2] >= (2, 6):\n+    if sys.version_info[:2] >= (2, 5):\n         for f in OPTIONAL_STDFUNCS_MAYBE:\n             if config.check_decl(fname2def(f),\n                         headers=[\"Python.h\", \"math.h\"]):"
    },
    {
        "commit_id": "3ab762705a35ad7ba9a726a4a80abeb741e4f8a3",
        "commit_message": "Look for already declared configure checks macros in python 2.5.\n\nPython 2.5 already declared HAVE_HYPOT and other similar math funcs, so\nlook for those declaration to avoid redeclaring those macros ourselves.\nShould fix some build warnings.",
        "commit_url": "https://github.com/numpy/numpy/commit/3ab762705a35ad7ba9a726a4a80abeb741e4f8a3",
        "buggy_code": "OPTIONAL_STDFUNCS_MAYBE = [\"expm1\", \"log1p\", \"acosh\", \"atanh\", \"asinh\"]",
        "fixed_code": "OPTIONAL_STDFUNCS_MAYBE = [\"expm1\", \"log1p\", \"acosh\", \"atanh\", \"asinh\", \"hypot\"]",
        "patch": "@@ -90,7 +90,7 @@ def check_api_version(apiversion, codegen_dir):\n         \"rint\", \"trunc\", \"exp2\", \"log2\", \"copysign\", \"hypot\", \"atan2\", \"pow\"]\n \n # Subset of OPTIONAL_STDFUNCS which may alreay have HAVE_* defined by Python.h\n-OPTIONAL_STDFUNCS_MAYBE = [\"expm1\", \"log1p\", \"acosh\", \"atanh\", \"asinh\"]\n+OPTIONAL_STDFUNCS_MAYBE = [\"expm1\", \"log1p\", \"acosh\", \"atanh\", \"asinh\", \"hypot\"]\n \n # C99 functions: float and long double versions\n C99_FUNCS = [\"sin\", \"cos\", \"tan\", \"sinh\", \"cosh\", \"tanh\", \"fabs\", \"floor\","
    },
    {
        "commit_id": "1319b2ca9c0a7491e5143f2608f444c2b1b7e346",
        "commit_message": "Fix to setdiff1d (and masked version) + tests (#1133, by N.C.)",
        "commit_url": "https://github.com/numpy/numpy/commit/1319b2ca9c0a7491e5143f2608f444c2b1b7e346",
        "buggy_code": "a = np.array( [6, 5, 4, 7, 1, 2] )",
        "fixed_code": "a = np.array( [6, 5, 4, 7, 1, 2, 7, 4] )",
        "patch": "@@ -210,7 +210,7 @@ def test_union1d( self ):\n         assert_array_equal([], union1d([],[]))\n \n     def test_setdiff1d( self ):\n-        a = np.array( [6, 5, 4, 7, 1, 2] )\n+        a = np.array( [6, 5, 4, 7, 1, 2, 7, 4] )\n         b = np.array( [2, 4, 3, 3, 2, 1, 5] )\n \n         ec = np.array( [6, 7] )"
    },
    {
        "commit_id": "1319b2ca9c0a7491e5143f2608f444c2b1b7e346",
        "commit_message": "Fix to setdiff1d (and masked version) + tests (#1133, by N.C.)",
        "commit_url": "https://github.com/numpy/numpy/commit/1319b2ca9c0a7491e5143f2608f444c2b1b7e346",
        "buggy_code": "a = array([6, 5, 4, 7, 1, 2, 1], mask=[0, 0, 0, 0, 0, 0, 1])",
        "fixed_code": "a = array([6, 5, 4, 7, 7, 1, 2, 1], mask=[0, 0, 0, 0, 0, 0, 0, 1])",
        "patch": "@@ -771,7 +771,7 @@ def test_union1d( self ):\n \n     def test_setdiff1d( self ):\n         \"Test setdiff1d\"\n-        a = array([6, 5, 4, 7, 1, 2, 1], mask=[0, 0, 0, 0, 0, 0, 1])\n+        a = array([6, 5, 4, 7, 7, 1, 2, 1], mask=[0, 0, 0, 0, 0, 0, 0, 1])\n         b = array([2, 4, 3, 3, 2, 1, 5])\n         test = setdiff1d(a, b)\n         assert_equal(test, array([6, 7, -1], mask=[0, 0, 1]))"
    },
    {
        "commit_id": "8ea0648357ae54483f9eed69b55b418b80acdb1f",
        "commit_message": "Fix argwhere for masked arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/8ea0648357ae54483f9eed69b55b418b80acdb1f",
        "buggy_code": "return transpose(asarray(a).nonzero())",
        "fixed_code": "return transpose(asanyarray(a).nonzero())",
        "patch": "@@ -535,7 +535,7 @@ def argwhere(a):\n            [1, 2]])\n \n     \"\"\"\n-    return transpose(asarray(a).nonzero())\n+    return transpose(asanyarray(a).nonzero())\n \n def flatnonzero(a):\n     \"\"\""
    },
    {
        "commit_id": "99df3daf134808115b458d90c4c6fa676a02e6f2",
        "commit_message": "Fix twodim tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/99df3daf134808115b458d90c4c6fa676a02e6f2",
        "buggy_code": "array([ 1,  5,  6,  9, 10, 11, 13, 14, 15, 16]) )",
        "fixed_code": "array([1, 2,  3,  4,  6, 7, 8, 11, 12, 16]))",
        "patch": "@@ -248,7 +248,7 @@ def test_triu_indices():\n \n     # Both for indexing:\n     yield (assert_array_equal, a[iu1],\n-           array([ 1,  5,  6,  9, 10, 11, 13, 14, 15, 16]) )\n+           array([1, 2,  3,  4,  6, 7, 8, 11, 12, 16]))\n \n     # And for assigning values:\n     a[iu1] = -1"
    },
    {
        "commit_id": "9397ecd192974fa623492a677d7b2fb2d715c137",
        "commit_message": "Fix argwhere to work with lists, add tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/9397ecd192974fa623492a677d7b2fb2d715c137",
        "buggy_code": "return asarray(a.nonzero()).T",
        "fixed_code": "return transpose(asarray(a).nonzero())",
        "patch": "@@ -535,7 +535,7 @@ def argwhere(a):\n            [1, 2]])\n \n     \"\"\"\n-    return asarray(a.nonzero()).T\n+    return transpose(asarray(a).nonzero())\n \n def flatnonzero(a):\n     \"\"\""
    },
    {
        "commit_id": "447de9dd5a146b8c008f1f401eb53ce8bd67461f",
        "commit_message": "BUG: update version_match for recent version of ifort for IA-64 (#1145).",
        "commit_url": "https://github.com/numpy/numpy/commit/447de9dd5a146b8c008f1f401eb53ce8bd67461f",
        "buggy_code": "version_match = intel_version_match('Itanium')",
        "fixed_code": "version_match = intel_version_match('Itanium|IA-64')",
        "patch": "@@ -122,7 +122,7 @@ class IntelItaniumFCompiler(IntelFCompiler):\n     compiler_aliases = ()\n     description = 'Intel Fortran Compiler for Itanium apps'\n \n-    version_match = intel_version_match('Itanium')\n+    version_match = intel_version_match('Itanium|IA-64')\n \n #Intel(R) Fortran Itanium(R) Compiler for Itanium(R)-based applications\n #Version 9.1\ufffd \ufffd Build 20060928 Package ID: l_fc_c_9.1.039"
    },
    {
        "commit_id": "988678cf6d0eb8459588e1067dd3a91468cbaa2d",
        "commit_message": "Fix installation of numarray headers on Windows.",
        "commit_url": "https://github.com/numpy/numpy/commit/988678cf6d0eb8459588e1067dd3a91468cbaa2d",
        "buggy_code": "config.add_data_files('numpy/')",
        "fixed_code": "config.add_data_files('numpy/*')",
        "patch": "@@ -4,7 +4,7 @@ def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('numarray',parent_package,top_path)\n \n-    config.add_data_files('numpy/')\n+    config.add_data_files('numpy/*')\n \n     config.add_extension('_capi',\n                          sources=['_capi.c'],"
    },
    {
        "commit_id": "0d50ca603a40b8a015e686f5f49619b01088b09d",
        "commit_message": "Fix errors in examples in docstrings",
        "commit_url": "https://github.com/numpy/numpy/commit/0d50ca603a40b8a015e686f5f49619b01088b09d",
        "buggy_code": ">>> from numpy import zeros, exp",
        "fixed_code": ">>> from numpy import zeros, exp, pi",
        "patch": "@@ -685,7 +685,7 @@ def ifftn(a, s=None, axes=None):\n            [ 0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])\n \n-    >>> from numpy import zeros, exp\n+    >>> from numpy import zeros, exp, pi\n     >>> from numpy.random import uniform\n     >>> from numpy.fft import ifftn\n     >>> import matplotlib.pyplot as plt"
    },
    {
        "commit_id": "1b8679f1d35728ccb290419ed04fd1a5b2e72c28",
        "commit_message": "sphinxext: fix python2.4 compatibility",
        "commit_url": "https://github.com/numpy/numpy/commit/1b8679f1d35728ccb290419ed04fd1a5b2e72c28",
        "buggy_code": "except exceptions.BaseException, err:",
        "fixed_code": "except (Exception, SystemExit), err:",
        "patch": "@@ -406,7 +406,7 @@ def run_code(code, code_path):\n             ns = {}\n             exec setup.config.plot_pre_code in ns\n             exec code in ns\n-        except exceptions.BaseException, err:\n+        except (Exception, SystemExit), err:\n             raise PlotError(traceback.format_exc())\n     finally:\n         os.chdir(pwd)"
    },
    {
        "commit_id": "1cf7e661bced0b4ea3ea2e4fa1a4d08dc271e83c",
        "commit_message": "docstring: fix bug in blackman docstring",
        "commit_url": "https://github.com/numpy/numpy/commit/1cf7e661bced0b4ea3ea2e4fa1a4d08dc271e83c",
        "buggy_code": ">>> plt.title(\"Frequency response of Bartlett window\")",
        "fixed_code": ">>> plt.title(\"Frequency response of Blackman window\")",
        "patch": "@@ -2187,7 +2187,7 @@ def bartlett(M):\n     >>> response = 20*log10(mag)\n     >>> response = clip(response,-100,100)\n     >>> plt.plot(freq, response)\n-    >>> plt.title(\"Frequency response of Bartlett window\")\n+    >>> plt.title(\"Frequency response of Blackman window\")\n     >>> plt.ylabel(\"Magnitude [dB]\")\n     >>> plt.xlabel(\"Normalized frequency [cycles per sample]\")\n     >>> plt.axis('tight')"
    },
    {
        "commit_id": "fef030ee54c9b2bf4ad510766038fa288dce6014",
        "commit_message": "Fix error message when API incompatibily is detected.",
        "commit_url": "https://github.com/numpy/numpy/commit/fef030ee54c9b2bf4ad510766038fa288dce6014",
        "buggy_code": "\"version %%x of the C-API but this version of is %%x\", \\",
        "fixed_code": "\"API version %%x but this version of numpy is %%x\", \\",
        "patch": "@@ -99,7 +99,7 @@\n   }\n   if (NPY_FEATURE_VERSION > PyArray_GetNDArrayCFeatureVersion()) {\n     PyErr_Format(PyExc_RuntimeError, \"module compiled against \"\\\n-        \"version %%x of the C-API but this version of is %%x\", \\\n+        \"API version %%x but this version of numpy is %%x\", \\\n         (int) NPY_FEATURE_VERSION, (int) PyArray_GetNDArrayCFeatureVersion());\n     return -1;\n   }"
    },
    {
        "commit_id": "217bea8c917e0a8aa986a96f559555ff32fcb919",
        "commit_message": "Make error message for ABI mismatch clearer at import time.",
        "commit_url": "https://github.com/numpy/numpy/commit/217bea8c917e0a8aa986a96f559555ff32fcb919",
        "buggy_code": "\"version %%x of C-API but this version of numpy is %%x\", \\",
        "fixed_code": "\"ABI version %%x of C-API but this version of numpy is %%x\", \\",
        "patch": "@@ -93,7 +93,7 @@\n   /* Perform runtime check of C API version */\n   if (NPY_VERSION != PyArray_GetNDArrayCVersion()) {\n     PyErr_Format(PyExc_RuntimeError, \"module compiled against \"\\\n-        \"version %%x of C-API but this version of numpy is %%x\", \\\n+        \"ABI version %%x of C-API but this version of numpy is %%x\", \\\n         (int) NPY_VERSION, (int) PyArray_GetNDArrayCVersion());\n     return -1;\n   }"
    },
    {
        "commit_id": "d003bc4204d855168110959f2983a52b8b729b27",
        "commit_message": "Fix mathlib check.",
        "commit_url": "https://github.com/numpy/numpy/commit/d003bc4204d855168110959f2983a52b8b729b27",
        "buggy_code": "if config_cmd.check_func(\"exp\", libraries=libs, decl=True):",
        "fixed_code": "if config_cmd.check_func(\"exp\", libraries=libs, decl=True, call=True):",
        "patch": "@@ -254,7 +254,7 @@ def check_mathlib(config_cmd):\n     if mathlib:\n         mathlibs_choices.insert(0,mathlib.split(','))\n     for libs in mathlibs_choices:\n-        if config_cmd.check_func(\"exp\", libraries=libs, decl=True):\n+        if config_cmd.check_func(\"exp\", libraries=libs, decl=True, call=True):\n             mathlibs = libs\n             break\n     else:"
    },
    {
        "commit_id": "7f5efe309720501fbfa2cca886e47cb97e72f35b",
        "commit_message": "Fix typo in multiarray sources.",
        "commit_url": "https://github.com/numpy/numpy/commit/7f5efe309720501fbfa2cca886e47cb97e72f35b",
        "buggy_code": "join('src', 'multiarray', 'refecount.c'),",
        "fixed_code": "join('src', 'multiarray', 'refcount.c'),",
        "patch": "@@ -598,7 +598,7 @@ def generate_umath_c(ext,build_dir):\n         join('src', 'multiarray', 'common.c'),\n         join('src', 'multiarray', 'usertypes.c'),\n         join('src', 'multiarray', 'scalarapi.c'),\n-        join('src', 'multiarray', 'refecount.c'),\n+        join('src', 'multiarray', 'refcount.c'),\n         join('src', 'multiarray', 'arraytypes.c.src'),\n         join('src', 'multiarray', 'scalartypes.c.src')]\n "
    },
    {
        "commit_id": "081d0ce44412700387b951d0f7384e379e57ccc1",
        "commit_message": "Fix global variable declarations.",
        "commit_url": "https://github.com/numpy/numpy/commit/081d0ce44412700387b951d0f7384e379e57ccc1",
        "buggy_code": "NPY_NO_EXPORT PyTypeObject PyUFunc_Type;",
        "fixed_code": "extern NPY_NO_EXPORT PyTypeObject PyUFunc_Type;",
        "patch": "@@ -4,7 +4,7 @@\n h_template = r\"\"\"\n #ifdef _UMATHMODULE\n \n-NPY_NO_EXPORT PyTypeObject PyUFunc_Type;\n+extern NPY_NO_EXPORT PyTypeObject PyUFunc_Type;\n \n %s\n "
    },
    {
        "commit_id": "85eb59a8b2625296310bb8628177792cc506a509",
        "commit_message": "Simplify regression test and make error message for oversized array more\ninformative.",
        "commit_url": "https://github.com/numpy/numpy/commit/85eb59a8b2625296310bb8628177792cc506a509",
        "buggy_code": "assert_raises(ValueError,np.zeros,[1048576, 1048576, 1048576, 1048576])",
        "fixed_code": "assert_raises(ValueError,np.zeros,[2**10]*10)",
        "patch": "@@ -1284,7 +1284,7 @@ def test_fromiter_bytes(self):\n \n     def test_array_too_big(self):\n         \"\"\"Ticket #1080.\"\"\"\n-        assert_raises(ValueError,np.zeros,[1048576, 1048576, 1048576, 1048576])\n+        assert_raises(ValueError,np.zeros,[2**10]*10)\n \n if __name__ == \"__main__\":\n     run_module_suite()"
    },
    {
        "commit_id": "942b09dec6f5859bc8f058b638fada06c1de3322",
        "commit_message": "Fix missing 'n' in test.",
        "commit_url": "https://github.com/numpy/numpy/commit/942b09dec6f5859bc8f058b638fada06c1de3322",
        "buggy_code": "assert_raises(ValueError,zeros,[1048576, 1048576, 1048576, 1048576])",
        "fixed_code": "assert_raises(ValueError,np.zeros,[1048576, 1048576, 1048576, 1048576])",
        "patch": "@@ -1284,7 +1284,7 @@ def test_fromiter_bytes(self):\n \n     def test_array_too_big(self):\n         \"\"\"Ticket #1080.\"\"\"\n-        assert_raises(ValueError,zeros,[1048576, 1048576, 1048576, 1048576])\n+        assert_raises(ValueError,np.zeros,[1048576, 1048576, 1048576, 1048576])\n \n if __name__ == \"__main__\":\n     run_module_suite()"
    },
    {
        "commit_id": "1287312c87ec63d1c050d8786605260230e743dd",
        "commit_message": "Fix spelling.",
        "commit_url": "https://github.com/numpy/numpy/commit/1287312c87ec63d1c050d8786605260230e743dd",
        "buggy_code": "assert_raises(excecption_class, callable, *args, **kwargs)",
        "fixed_code": "assert_raises(exception_class, callable, *args, **kwargs)",
        "patch": "@@ -679,7 +679,7 @@ def raises(*args,**kwargs):\n \n def assert_raises(*args,**kwargs):\n     \"\"\"\n-    assert_raises(excecption_class, callable, *args, **kwargs)\n+    assert_raises(exception_class, callable, *args, **kwargs)\n \n     Fail unless an exception of class exception_class is thrown\n     by callable when invoked with arguments args and keyword"
    },
    {
        "commit_id": "d7f1ae929c99c71dee6a7a950937608ddbe92fce",
        "commit_message": "Fix another docstring formatting",
        "commit_url": "https://github.com/numpy/numpy/commit/d7f1ae929c99c71dee6a7a950937608ddbe92fce",
        "buggy_code": "---------",
        "fixed_code": "----------",
        "patch": "@@ -50,7 +50,7 @@ def skipif(skip_condition, msg=None):\n     ''' Make function raise SkipTest exception if skip_condition is true\n \n     Parameters\n-    ---------\n+    ----------\n     skip_condition : bool or callable.\n         Flag to determine whether to skip test.  If the condition is a\n         callable, it is used at runtime to dynamically make the decision.  This"
    },
    {
        "commit_id": "e89b62aaaacebe1ba23bcbb6f84bea20c0f12be2",
        "commit_message": "Fix docstring formatting (blocks doc build)",
        "commit_url": "https://github.com/numpy/numpy/commit/e89b62aaaacebe1ba23bcbb6f84bea20c0f12be2",
        "buggy_code": "---------",
        "fixed_code": "----------",
        "patch": "@@ -125,7 +125,7 @@ def knownfailureif(fail_condition, msg=None):\n     ''' Make function raise KnownFailureTest exception if fail_condition is true\n \n     Parameters\n-    ---------\n+    ----------\n     fail_condition : bool or callable.\n         Flag to determine whether to mark test as known failure (True)\n         or not (False).  If the condition is a callable, it is used at"
    },
    {
        "commit_id": "b4be5ddb4467ee212359418ed2684ef7edf46ba8",
        "commit_message": "Fix eigenvalue tests, the eigenvalues needed sorting.\nFix test_nanmin_alnan_on_axis, use assert_array_equal.",
        "commit_url": "https://github.com/numpy/numpy/commit/b4be5ddb4467ee212359418ed2684ef7edf46ba8",
        "buggy_code": "assert_equal(isnan(nanmin([[nan]*2]*3, axis=1)),",
        "fixed_code": "assert_array_equal(isnan(nanmin([[nan]*2]*3, axis=1)),",
        "patch": "@@ -755,7 +755,7 @@ def test_nanmax(self):\n                                    [ 0.91084584,  0.84386844,  0.37068164]]))\n \n     def test_nanmin_allnan_on_axis(self):\n-        assert_equal(isnan(nanmin([[nan]*2]*3, axis=1)),\n+        assert_array_equal(isnan(nanmin([[nan]*2]*3, axis=1)),\n                      [True, True, True])\n \n "
    },
    {
        "commit_id": "a70c4833629dcacddcdca118f45fc95e3dd4739d",
        "commit_message": "Fix spelling mistake in version module gen.",
        "commit_url": "https://github.com/numpy/numpy/commit/a70c4833629dcacddcdca118f45fc95e3dd4739d",
        "buggy_code": "Short_version='%(version)s'",
        "fixed_code": "short_version='%(version)s'",
        "patch": "@@ -86,7 +86,7 @@ def svn_version():\n def write_version_py(filename='numpy/version.py'):\n     cnt = \"\"\"\n # THIS FILE IS GENERATED FROM NUMPY SETUP.PY\n-Short_version='%(version)s'\n+short_version='%(version)s'\n version='%(version)s'\n release=%(isrelease)s\n "
    },
    {
        "commit_id": "21cbf24e0b66c5c7c2d5ee894254c89dda3390c6",
        "commit_message": "Change complex version of sign to return nan for nan input. Fix test to\nreflect this new behavior.",
        "commit_url": "https://github.com/numpy/numpy/commit/21cbf24e0b66c5c7c2d5ee894254c89dda3390c6",
        "buggy_code": "want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, 0+0j])",
        "fixed_code": "want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, np.nan])",
        "patch": "@@ -1176,7 +1176,7 @@ def test_sign_for_complex_nan(self, level=rlevel):\n         \"\"\"Ticket 794.\"\"\"\n         C = np.array([-np.inf, -2+1j, 0, 2-1j, np.inf, np.nan])\n         have = np.sign(C)\n-        want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, 0+0j])\n+        want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, np.nan])\n         assert_equal(have, want)\n \n     def test_for_equal_names(self, level=rlevel):"
    },
    {
        "commit_id": "670a4e77a729c31b02116724b053df009ed7274b",
        "commit_message": "Fix a test failure due to changes in the sign ufunc.",
        "commit_url": "https://github.com/numpy/numpy/commit/670a4e77a729c31b02116724b053df009ed7274b",
        "buggy_code": "array([ 1., -1.,  0.,  0.,  1., -1.])",
        "fixed_code": "array([  1.,  -1.,  NaN,   0.,   1.,  -1.])",
        "patch": "@@ -23,7 +23,7 @@\n array([False,  True, False, False, False, False], dtype=bool)\n >>> olderr = nx.seterr(invalid='ignore')\n >>> nx.sign(a)\n-array([ 1., -1.,  0.,  0.,  1., -1.])\n+array([  1.,  -1.,  NaN,   0.,   1.,  -1.])\n >>> olderr = nx.seterr(**olderr)\n \n Same thing with an output array:"
    },
    {
        "commit_id": "1be8c3588e0bf28bdc26f3c12ec71d754ecc0625",
        "commit_message": "test_umath: remove unnecessary test from #1008 test set\n\nApparently, on VS2008, arctanh (either the real or complex one) has\nsome cancellation error near x=1. This is a separate issue from #1008,\nand so shouldn't be tested by its tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/1be8c3588e0bf28bdc26f3c12ec71d754ecc0625",
        "buggy_code": "x_basic = np.logspace(dtype(-3.).real, -1e-8, 10)",
        "fixed_code": "x_basic = np.logspace(dtype(-3.).real, 0, 10, endpoint=False)",
        "patch": "@@ -493,7 +493,7 @@ def check(x, rtol):\n \n         x_series = np.logspace(np.log10(info.tiny/eps).real, -3, 200,\n                                endpoint=False)\n-        x_basic = np.logspace(dtype(-3.).real, -1e-8, 10)\n+        x_basic = np.logspace(dtype(-3.).real, 0, 10, endpoint=False)\n \n         check(x_series, 2*eps)\n         check(x_basic, 2*eps/1e-3)"
    },
    {
        "commit_id": "0588cb85b3c5037365432aab213d82b79a4bd25b",
        "commit_message": "Fix import issue.",
        "commit_url": "https://github.com/numpy/numpy/commit/0588cb85b3c5037365432aab213d82b79a4bd25b",
        "buggy_code": "from tempfile import mkstemp",
        "fixed_code": "from tempfile import mkstemp, NamedTemporaryFile",
        "patch": "@@ -6,7 +6,7 @@\n import gzip\n import os\n \n-from tempfile import mkstemp\n+from tempfile import mkstemp, NamedTemporaryFile\n import sys, time\n from datetime import datetime\n "
    },
    {
        "commit_id": "9673a837b92f6af7dd71968bce3387df0fc69bc9",
        "commit_message": "Fix type in test_wrap_with_iterable.",
        "commit_url": "https://github.com/numpy/numpy/commit/9673a837b92f6af7dd71968bce3387df0fc69bc9",
        "buggy_code": "__array_priority = 10",
        "fixed_code": "__array_priority__ = 10",
        "patch": "@@ -243,7 +243,7 @@ def __array_wrap__(self, arr, context):\n     def test_wrap_with_iterable(self):\n         # test fix for bug #1026:\n         class with_wrap(np.ndarray):\n-            __array_priority = 10\n+            __array_priority__ = 10\n             def __new__(cls):\n                 return np.asarray(1).view(cls).copy()\n             def __array_wrap__(self, arr, context):"
    },
    {
        "commit_id": "7170d0a8b85ee38da227c2db26f470750b6e1509",
        "commit_message": "Python 3000 fixes for 2to3 [patch by James Watson].",
        "commit_url": "https://github.com/numpy/numpy/commit/7170d0a8b85ee38da227c2db26f470750b6e1509",
        "buggy_code": "raise 'Internal Shape Error'",
        "fixed_code": "raise RuntimeError('Internal Shape Error')",
        "patch": "@@ -546,7 +546,7 @@ def histogramdd(sample, bins=10, range=None, normed=False, weights=None):\n         hist /= s\n \n     if (hist.shape != nbin-2).any():\n-        raise 'Internal Shape Error'\n+        raise RuntimeError('Internal Shape Error')\n     return hist, edges\n \n "
    },
    {
        "commit_id": "7170d0a8b85ee38da227c2db26f470750b6e1509",
        "commit_message": "Python 3000 fixes for 2to3 [patch by James Watson].",
        "commit_url": "https://github.com/numpy/numpy/commit/7170d0a8b85ee38da227c2db26f470750b6e1509",
        "buggy_code": "if 'BLAS' in filename",
        "fixed_code": "if 'BLAS' in filename:",
        "patch": "@@ -141,7 +141,7 @@ def resolveAllDependencies(self):\n class LapackLibrary(FortranLibrary):\n     def _newFortranRoutine(self, rname, filename):\n         routine = FortranLibrary._newFortranRoutine(self, rname, filename)\n-        if 'BLAS' in filename\n+        if 'BLAS' in filename:\n             routine.type = 'blas'\n         elif rname.startswith('z'):\n             routine.type = 'zlapack'"
    },
    {
        "commit_id": "1bc5c715d0efd64cc287b08d4e1b2b59bcddc896",
        "commit_message": "Merged revisions 6463-6466,6469,6472-6475 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6463 | pierregm | 2009-02-24 02:33:11 +0900 (Tue, 24 Feb 2009) | 1 line\n  \n  * MaskedArray.__setstate__ : fixed for structured array\n........\n  r6464 | charris | 2009-02-24 04:02:43 +0900 (Tue, 24 Feb 2009) | 4 lines\n  \n  Coding style cleanups. Start on arraytypes.inc.src.\n  I'm a bit hesitant to commit this as tests are lacking\n  for the functionality, but I want the changes\n  somewhere central.\n........\n  r6465 | matthew.brett@gmail.com | 2009-02-25 05:53:10 +0900 (Wed, 25 Feb 2009) | 1 line\n  \n  Added docstring for isbuiltin\n........\n  r6466 | oliphant | 2009-02-25 14:15:47 +0900 (Wed, 25 Feb 2009) | 1 line\n  \n  Fix void-scalar element access when data-type contains titles (meta-data).\n........\n  r6469 | oliphant | 2009-02-25 22:45:30 +0900 (Wed, 25 Feb 2009) | 1 line\n  \n  Add Error checking.\n........\n  r6472 | charris | 2009-02-26 01:51:29 +0900 (Thu, 26 Feb 2009) | 1 line\n  \n  Fix coding style. Fix test_void_scalar_with_titles.\n........\n  r6473 | cdavid | 2009-02-26 03:27:19 +0900 (Thu, 26 Feb 2009) | 1 line\n  \n  Trap another kind of exception for MSVC9 in compaq fcompiler.\n........\n  r6474 | cdavid | 2009-02-26 03:56:15 +0900 (Thu, 26 Feb 2009) | 1 line\n  \n  Mark mingw-w64 crashing tests as known failures.\n........\n  r6475 | cdavid | 2009-02-26 04:04:59 +0900 (Thu, 26 Feb 2009) | 1 line\n  \n  Tag more mingw-w64 failures as such.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/1bc5c715d0efd64cc287b08d4e1b2b59bcddc896",
        "buggy_code": "self._mask.__setstate__((shp, np.dtype(bool), isf, msk))",
        "fixed_code": "self._mask.__setstate__((shp, make_mask_descr(typ), isf, msk))",
        "patch": "@@ -3846,7 +3846,7 @@ def __setstate__(self, state):\n         \"\"\"\n         (ver, shp, typ, isf, raw, msk, flv) = state\n         ndarray.__setstate__(self, (shp, typ, isf, raw))\n-        self._mask.__setstate__((shp, np.dtype(bool), isf, msk))\n+        self._mask.__setstate__((shp, make_mask_descr(typ), isf, msk))\n         self.fill_value = flv\n     #\n     def __reduce__(self):"
    },
    {
        "commit_id": "b76c3e8f269322f7720814af2593363f1afd83cf",
        "commit_message": "Fix coding style. Fix test_void_scalar_with_titles.",
        "commit_url": "https://github.com/numpy/numpy/commit/b76c3e8f269322f7720814af2593363f1afd83cf",
        "buggy_code": "arr = array(data, dtype=dtype1)",
        "fixed_code": "arr = np.array(data, dtype=dtype1)",
        "patch": "@@ -1224,7 +1224,7 @@ def test_void_scalar_with_titles(self, level=rlevel):\n         \"\"\"No ticket\"\"\"\n         data = [('john', 4), ('mary', 5)]\n         dtype1 = [(('source:yy', 'name'), 'O'), (('source:xx', 'id'), int)]\n-        arr = array(data, dtype=dtype1)\n+        arr = np.array(data, dtype=dtype1)\n         assert arr[0][0] == 'john'\n         assert arr[0][1] == 4\n "
    },
    {
        "commit_id": "caa8cfd81da01727027671ec978a53295c49c3b8",
        "commit_message": "Merged revisions 6453-6459 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6453 | cdavid | 2009-02-22 18:15:26 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Fix wrong merge for manifest version.\n........\n  r6454 | stefan | 2009-02-22 22:45:15 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Add GzipFile wrapper to support the \"whence\" keyword in GzipFile.seek.\n........\n  r6455 | stefan | 2009-02-22 22:47:14 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Whitespace cleanup.\n........\n  r6456 | stefan | 2009-02-22 22:48:21 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Add test for Gzip loader.\n........\n  r6457 | stefan | 2009-02-23 07:10:30 +0900 (Mon, 23 Feb 2009) | 1 line\n  \n  Allow subclasses of arrays in testing.\n........\n  r6458 | charris | 2009-02-23 07:36:18 +0900 (Mon, 23 Feb 2009) | 1 line\n  \n  Coding style cleanups. This finishes umath_ufunc_object.inc.\n........\n  r6459 | cdavid | 2009-02-24 01:14:55 +0900 (Tue, 24 Feb 2009) | 1 line\n  \n  Add custom code for FPU error handling on windows x64 with mingw compilers (mingw-w64).\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/caa8cfd81da01727027671ec978a53295c49c3b8",
        "buggy_code": "if msver >= 9:",
        "fixed_code": "if msver >= 8:",
        "patch": "@@ -456,7 +456,7 @@ def rc_name(config):\n def generate_manifest(config):\n     msver = get_build_msvc_version()\n     if msver is not None:\n-        if msver >= 9:\n+        if msver >= 8:\n             check_embedded_msvcr_match_linked(msver)\n             ma = int(msver)\n             mi = int((msver - ma) * 10)"
    },
    {
        "commit_id": "cb7133004d86bec7686d625a6f898913ca5f4380",
        "commit_message": "Fix wrong merge for manifest version.",
        "commit_url": "https://github.com/numpy/numpy/commit/cb7133004d86bec7686d625a6f898913ca5f4380",
        "buggy_code": "if msver >= 9:",
        "fixed_code": "if msver >= 8:",
        "patch": "@@ -456,7 +456,7 @@ def rc_name(config):\n def generate_manifest(config):\n     msver = get_build_msvc_version()\n     if msver is not None:\n-        if msver >= 9:\n+        if msver >= 8:\n             check_embedded_msvcr_match_linked(msver)\n             ma = int(msver)\n             mi = int((msver - ma) * 10)"
    },
    {
        "commit_id": "87dea6495553f70e890534fa8b3663c9eab74ae0",
        "commit_message": "Merged revisions 6451 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6451 | cdavid | 2009-02-22 18:12:04 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Fix typo in MSVC runtime info for mingw.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/87dea6495553f70e890534fa8b3663c9eab74ae0",
        "buggy_code": "_MSVCRVER_TO_FULLVER['90'] = \"8.0.50727.42\"",
        "fixed_code": "_MSVCRVER_TO_FULLVER['80'] = \"8.0.50727.42\"",
        "patch": "@@ -365,7 +365,7 @@ def _build_import_library_x86():\n             _MSVCRVER_TO_FULLVER['90'] = \"9.0.21022.8\"\n         # I took one version in my SxS directory: no idea if it is the good\n         # one, and we can't retrieve it from python\n-        _MSVCRVER_TO_FULLVER['90'] = \"8.0.50727.42\"\n+        _MSVCRVER_TO_FULLVER['80'] = \"8.0.50727.42\"\n     except ImportError:\n         # If we are here, means python was not built with MSVC. Not sure what to do\n         # in that case: manifest building will fail, but it should not be used in"
    },
    {
        "commit_id": "16f3279fa7aee9b4f3c8562e7f160f1259a50497",
        "commit_message": "Fix typo in MSVC runtime info for mingw.",
        "commit_url": "https://github.com/numpy/numpy/commit/16f3279fa7aee9b4f3c8562e7f160f1259a50497",
        "buggy_code": "_MSVCRVER_TO_FULLVER['90'] = \"8.0.50727.42\"",
        "fixed_code": "_MSVCRVER_TO_FULLVER['80'] = \"8.0.50727.42\"",
        "patch": "@@ -365,7 +365,7 @@ def _build_import_library_x86():\n             _MSVCRVER_TO_FULLVER['90'] = \"9.0.21022.8\"\n         # I took one version in my SxS directory: no idea if it is the good\n         # one, and we can't retrieve it from python\n-        _MSVCRVER_TO_FULLVER['90'] = \"8.0.50727.42\"\n+        _MSVCRVER_TO_FULLVER['80'] = \"8.0.50727.42\"\n     except ImportError:\n         # If we are here, means python was not built with MSVC. Not sure what to do\n         # in that case: manifest building will fail, but it should not be used in"
    },
    {
        "commit_id": "919eef58a3fdf0c2d45ae717d5b793c6d3c11cbb",
        "commit_message": "Merged revisions 6398-6400,6410,6421-6424,6426-6428,6431,6433,6441-6442 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Tag known failure on win32.\n................\n  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Fix tests using strptime to be Python 2.4 compatible.\n................\n  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Unhelpful message for compaq fortran compiler.\n................\n  r6426 | charris | 2009-02-21 07:28:05 +0900 (Sat, 21 Feb 2009) | 2 lines\n  \n  Change indentation of switch statements.\n................\n  r6427 | charris | 2009-02-21 13:21:50 +0900 (Sat, 21 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6428 | cdavid | 2009-02-21 13:35:57 +0900 (Sat, 21 Feb 2009) | 3 lines\n  \n  Removed merge tracking for \"svnmerge\" for \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n................\n  r6431 | charris | 2009-02-21 13:41:17 +0900 (Sat, 21 Feb 2009) | 1 line\n  \n  Remove terminating \";\" from macro to fix ticket #918.\n................\n  r6433 | cdavid | 2009-02-21 14:38:29 +0900 (Sat, 21 Feb 2009) | 3 lines\n  \n  Removed merge tracking for \"svnmerge\" for \n  http://svn.scipy.org/svn/numpy/branches/visualstudio_manifest\n................\n  r6441 | cdavid | 2009-02-22 02:25:09 +0900 (Sun, 22 Feb 2009) | 105 lines\n  \n  Merged revisions 6153-6173,6176-6178,6184 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64\n  \n  ........\n    r6153 | cdavid | 2008-12-19 17:06:06 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to find python dll on windows.\n  ........\n    r6154 | cdavid | 2008-12-19 17:28:49 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix typo when getting system32 location.\n  ........\n    r6155 | cdavid | 2008-12-19 17:37:19 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to get a dump of private headers from dll.\n  ........\n    r6156 | cdavid | 2008-12-19 17:41:39 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to generate a .def file from a dll.\n  ........\n    r6157 | cdavid | 2008-12-19 17:43:56 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Forgot to add the regex for the generate_def function.\n  ........\n    r6158 | cdavid | 2008-12-19 17:53:49 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix .def file generation.\n  ........\n    r6159 | cdavid | 2008-12-19 17:56:54 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a warning if no symbols found in the dll (if stripped, for example).\n  ........\n    r6160 | cdavid | 2008-12-19 18:02:24 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Refactor build_import_library to take into account multi arch.\n  ........\n    r6161 | cdavid | 2008-12-19 18:10:03 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.\n  ........\n    r6162 | cdavid | 2008-12-19 18:18:08 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Show arch in the log when building import library.\n  ........\n    r6163 | cdavid | 2008-12-19 18:22:18 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix missing out filename.\n  ........\n    r6164 | cdavid | 2008-12-19 18:32:46 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Actually build the import library for mingw on amd64.\n  ........\n    r6165 | cdavid | 2008-12-19 18:46:30 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.\n  ........\n    r6166 | cdavid | 2008-12-19 18:48:01 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Trailing spaces.\n  ........\n    r6167 | cdavid | 2008-12-19 18:55:16 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add MS_WIN64 macro when built on amd64 + mingw.\n  ........\n    r6168 | cdavid | 2008-12-19 18:57:06 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Forgot to import get_build_architecture.\n  ........\n    r6169 | cdavid | 2008-12-19 18:57:52 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Use a tuple when defining the MS_WIN64 macro.\n  ........\n    r6170 | cdavid | 2008-12-19 19:05:03 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix macro def.\n  ........\n    r6171 | cdavid | 2008-12-19 19:21:54 +0900 (Fri, 19 Dec 2008) | 2 lines\n    \n    Do not use g++ for linking on amd64.\n  ........\n    r6172 | cdavid | 2008-12-19 19:25:18 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    do not regenerate the import library if already there.\n  ........\n    r6173 | cdavid | 2008-12-19 19:28:39 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add one full msvcrt version for 80 (for manifest generation).\n  ........\n    r6176 | cdavid | 2008-12-21 02:31:48 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Remove optimization flags for now, to speed up builds.\n  ........\n    r6177 | cdavid | 2008-12-21 02:32:11 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Add MS_WIN64 for every compile command.\n  ........\n    r6178 | cdavid | 2008-12-21 02:32:33 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.\n  ........\n    r6184 | cdavid | 2008-12-21 16:46:28 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Hardcode size of long double, because it is broken with mingw.\n  ........\n................\n  r6442 | cdavid | 2009-02-22 02:36:15 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Re-enable real check for long double size.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/919eef58a3fdf0c2d45ae717d5b793c6d3c11cbb",
        "buggy_code": "get_numpy_include_dirs, is_sequence",
        "fixed_code": "get_numpy_include_dirs, is_sequence, get_build_architecture",
        "patch": "@@ -16,7 +16,7 @@\n from numpy.distutils.system_info import combine_paths\n from numpy.distutils.misc_util import filter_sources, has_f_sources, \\\n      has_cxx_sources, get_ext_source_files, \\\n-     get_numpy_include_dirs, is_sequence\n+     get_numpy_include_dirs, is_sequence, get_build_architecture\n from numpy.distutils.command.config_compiler import show_fortran_compilers\n \n try:"
    },
    {
        "commit_id": "919eef58a3fdf0c2d45ae717d5b793c6d3c11cbb",
        "commit_message": "Merged revisions 6398-6400,6410,6421-6424,6426-6428,6431,6433,6441-6442 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Tag known failure on win32.\n................\n  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Fix tests using strptime to be Python 2.4 compatible.\n................\n  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Unhelpful message for compaq fortran compiler.\n................\n  r6426 | charris | 2009-02-21 07:28:05 +0900 (Sat, 21 Feb 2009) | 2 lines\n  \n  Change indentation of switch statements.\n................\n  r6427 | charris | 2009-02-21 13:21:50 +0900 (Sat, 21 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6428 | cdavid | 2009-02-21 13:35:57 +0900 (Sat, 21 Feb 2009) | 3 lines\n  \n  Removed merge tracking for \"svnmerge\" for \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n................\n  r6431 | charris | 2009-02-21 13:41:17 +0900 (Sat, 21 Feb 2009) | 1 line\n  \n  Remove terminating \";\" from macro to fix ticket #918.\n................\n  r6433 | cdavid | 2009-02-21 14:38:29 +0900 (Sat, 21 Feb 2009) | 3 lines\n  \n  Removed merge tracking for \"svnmerge\" for \n  http://svn.scipy.org/svn/numpy/branches/visualstudio_manifest\n................\n  r6441 | cdavid | 2009-02-22 02:25:09 +0900 (Sun, 22 Feb 2009) | 105 lines\n  \n  Merged revisions 6153-6173,6176-6178,6184 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64\n  \n  ........\n    r6153 | cdavid | 2008-12-19 17:06:06 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to find python dll on windows.\n  ........\n    r6154 | cdavid | 2008-12-19 17:28:49 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix typo when getting system32 location.\n  ........\n    r6155 | cdavid | 2008-12-19 17:37:19 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to get a dump of private headers from dll.\n  ........\n    r6156 | cdavid | 2008-12-19 17:41:39 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a function to generate a .def file from a dll.\n  ........\n    r6157 | cdavid | 2008-12-19 17:43:56 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Forgot to add the regex for the generate_def function.\n  ........\n    r6158 | cdavid | 2008-12-19 17:53:49 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix .def file generation.\n  ........\n    r6159 | cdavid | 2008-12-19 17:56:54 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add a warning if no symbols found in the dll (if stripped, for example).\n  ........\n    r6160 | cdavid | 2008-12-19 18:02:24 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Refactor build_import_library to take into account multi arch.\n  ........\n    r6161 | cdavid | 2008-12-19 18:10:03 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.\n  ........\n    r6162 | cdavid | 2008-12-19 18:18:08 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Show arch in the log when building import library.\n  ........\n    r6163 | cdavid | 2008-12-19 18:22:18 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix missing out filename.\n  ........\n    r6164 | cdavid | 2008-12-19 18:32:46 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Actually build the import library for mingw on amd64.\n  ........\n    r6165 | cdavid | 2008-12-19 18:46:30 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.\n  ........\n    r6166 | cdavid | 2008-12-19 18:48:01 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Trailing spaces.\n  ........\n    r6167 | cdavid | 2008-12-19 18:55:16 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add MS_WIN64 macro when built on amd64 + mingw.\n  ........\n    r6168 | cdavid | 2008-12-19 18:57:06 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Forgot to import get_build_architecture.\n  ........\n    r6169 | cdavid | 2008-12-19 18:57:52 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Use a tuple when defining the MS_WIN64 macro.\n  ........\n    r6170 | cdavid | 2008-12-19 19:05:03 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Fix macro def.\n  ........\n    r6171 | cdavid | 2008-12-19 19:21:54 +0900 (Fri, 19 Dec 2008) | 2 lines\n    \n    Do not use g++ for linking on amd64.\n  ........\n    r6172 | cdavid | 2008-12-19 19:25:18 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    do not regenerate the import library if already there.\n  ........\n    r6173 | cdavid | 2008-12-19 19:28:39 +0900 (Fri, 19 Dec 2008) | 1 line\n    \n    Add one full msvcrt version for 80 (for manifest generation).\n  ........\n    r6176 | cdavid | 2008-12-21 02:31:48 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Remove optimization flags for now, to speed up builds.\n  ........\n    r6177 | cdavid | 2008-12-21 02:32:11 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Add MS_WIN64 for every compile command.\n  ........\n    r6178 | cdavid | 2008-12-21 02:32:33 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.\n  ........\n    r6184 | cdavid | 2008-12-21 16:46:28 +0900 (Sun, 21 Dec 2008) | 1 line\n    \n    Hardcode size of long double, because it is broken with mingw.\n  ........\n................\n  r6442 | cdavid | 2009-02-22 02:36:15 +0900 (Sun, 22 Feb 2009) | 1 line\n  \n  Re-enable real check for long double size.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/919eef58a3fdf0c2d45ae717d5b793c6d3c11cbb",
        "buggy_code": "print 'Ignoring \"%s\" (one should fix me in fcompiler/compaq.py)' % (msg)",
        "fixed_code": "pass",
        "patch": "@@ -79,7 +79,7 @@ class CompaqVisualFCompiler(FCompiler):\n             m.initialize()\n             ar_exe = m.lib\n         except DistutilsPlatformError, msg:\n-            print 'Ignoring \"%s\" (one should fix me in fcompiler/compaq.py)' % (msg)\n+\t\t\tpass\n         except AttributeError, msg:\n             if '_MSVCCompiler__root' in str(msg):\n                 print 'Ignoring \"%s\" (I think it is msvccompiler.py bug)' % (msg)"
    },
    {
        "commit_id": "b4d0366abcec1ea1c2a1946167d1b9873f372a51",
        "commit_message": "Merged revisions 6153-6173,6176-6178,6184 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64\n\n........\n  r6153 | cdavid | 2008-12-19 17:06:06 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add a function to find python dll on windows.\n........\n  r6154 | cdavid | 2008-12-19 17:28:49 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Fix typo when getting system32 location.\n........\n  r6155 | cdavid | 2008-12-19 17:37:19 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add a function to get a dump of private headers from dll.\n........\n  r6156 | cdavid | 2008-12-19 17:41:39 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add a function to generate a .def file from a dll.\n........\n  r6157 | cdavid | 2008-12-19 17:43:56 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Forgot to add the regex for the generate_def function.\n........\n  r6158 | cdavid | 2008-12-19 17:53:49 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Fix .def file generation.\n........\n  r6159 | cdavid | 2008-12-19 17:56:54 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add a warning if no symbols found in the dll (if stripped, for example).\n........\n  r6160 | cdavid | 2008-12-19 18:02:24 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Refactor build_import_library to take into account multi arch.\n........\n  r6161 | cdavid | 2008-12-19 18:10:03 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.\n........\n  r6162 | cdavid | 2008-12-19 18:18:08 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Show arch in the log when building import library.\n........\n  r6163 | cdavid | 2008-12-19 18:22:18 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Fix missing out filename.\n........\n  r6164 | cdavid | 2008-12-19 18:32:46 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Actually build the import library for mingw on amd64.\n........\n  r6165 | cdavid | 2008-12-19 18:46:30 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.\n........\n  r6166 | cdavid | 2008-12-19 18:48:01 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Trailing spaces.\n........\n  r6167 | cdavid | 2008-12-19 18:55:16 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add MS_WIN64 macro when built on amd64 + mingw.\n........\n  r6168 | cdavid | 2008-12-19 18:57:06 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Forgot to import get_build_architecture.\n........\n  r6169 | cdavid | 2008-12-19 18:57:52 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Use a tuple when defining the MS_WIN64 macro.\n........\n  r6170 | cdavid | 2008-12-19 19:05:03 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Fix macro def.\n........\n  r6171 | cdavid | 2008-12-19 19:21:54 +0900 (Fri, 19 Dec 2008) | 2 lines\n  \n  Do not use g++ for linking on amd64.\n........\n  r6172 | cdavid | 2008-12-19 19:25:18 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  do not regenerate the import library if already there.\n........\n  r6173 | cdavid | 2008-12-19 19:28:39 +0900 (Fri, 19 Dec 2008) | 1 line\n  \n  Add one full msvcrt version for 80 (for manifest generation).\n........\n  r6176 | cdavid | 2008-12-21 02:31:48 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Remove optimization flags for now, to speed up builds.\n........\n  r6177 | cdavid | 2008-12-21 02:32:11 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Add MS_WIN64 for every compile command.\n........\n  r6178 | cdavid | 2008-12-21 02:32:33 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.\n........\n  r6184 | cdavid | 2008-12-21 16:46:28 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Hardcode size of long double, because it is broken with mingw.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/b4d0366abcec1ea1c2a1946167d1b9873f372a51",
        "buggy_code": "get_numpy_include_dirs, is_sequence",
        "fixed_code": "get_numpy_include_dirs, is_sequence, get_build_architecture",
        "patch": "@@ -16,7 +16,7 @@\n from numpy.distutils.system_info import combine_paths\n from numpy.distutils.misc_util import filter_sources, has_f_sources, \\\n      has_cxx_sources, get_ext_source_files, \\\n-     get_numpy_include_dirs, is_sequence\n+     get_numpy_include_dirs, is_sequence, get_build_architecture\n from numpy.distutils.command.config_compiler import show_fortran_compilers\n \n try:"
    },
    {
        "commit_id": "da364a18e447c334dfa2ca5083b08e1b6a7c0d10",
        "commit_message": "Merged revisions 6185-6187,6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368,6370-6373,6398-6400,6410,6421-6424 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6185 | cdavid | 2008-12-22 01:19:14 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Add doc sources so that sdist tarball contains them.\n................\n  r6186 | pierregm | 2008-12-22 19:01:51 +0900 (Mon, 22 Dec 2008) | 4 lines\n  \n  testutils:\n  assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function.\n  core:\n  * Try not to touch the data in unary/binary ufuncs, (including inplace)\n................\n  r6187 | pearu | 2008-12-22 19:05:00 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Fix a bug.\n................\n  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix typos in the comments for manifest.\n................\n  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.\n................\n  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix issue 964: f2py python 2.6, 2.6.1 support.\n................\n  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines\n  \n  testutils:\n  * assert_equal : use assert_equal_array on records\n  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.\n  * assert_equal_array : use operator.__eq__ instead of ma.equal\n  * assert_equal_less: use operator.__less__ instead of ma.less\n  \n  core:\n  * Fixed _check_fill_value for nested flexible types\n  * Add a ndtype option to _make_mask_descr\n  * Fixed mask_or for nested flexible types\n  * Fixed the printing of masked arrays w/ flexible types.\n................\n  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Update to handle numscons 0.10.0 and above.\n................\n  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.\n................\n  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not test for functions already tested by python configure script.\n................\n  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.\n................\n  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix some typo/syntax errors when converting dict access to a function in manifest generation.\n................\n  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.\n................\n  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Improve the error message when initializing compiler failed.\n................\n  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Try to initialize the msvc compiler before the general code to detect the error early.\n................\n  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.\n................\n  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix manifest generation.\n................\n  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).\n................\n  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Do not define the union for runtime endianness detection if we don't check endianness.\n................\n  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Start working on formatting failure on 2.6: copy how python does complex formatting.\n................\n  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix formatting for purely imaginary complex numbers.\n................\n  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  More work on formatting float.\n................\n  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Finish formatting fixes for float scalar arrays.\n................\n  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.\n................\n  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include config.h before our C99 math compat layer.\n................\n  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Fix formatting.\n................\n  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not define FMTR and FMTI macros, as those are already defined on some platforms.\n................\n  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  More formatting fixes.\n................\n  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Remove undef of removed macro.\n................\n  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.\n................\n  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Try ugly hack to circumvent long double brokenness with mingw.\n................\n  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Use ugly hack for mingw long double pb with complex format function as well.\n................\n  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.\n................\n  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.\n................\n  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines\n  \n  Merged revisions 6233-6234 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Use parametric tests for format tests so that it is clearer which type is failing.\n  ........\n    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.\n  ........\n................\n  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add nan/inf tests for formatting.\n................\n  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add test for real float types locale independance.\n................\n  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Clearer error messages for formatting failures.\n................\n  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add tests for print of float types.\n................\n  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add print tests for complex types.\n................\n  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix test for print: forgot to make sure the value is a float before comparing it.\n................\n  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines\n  \n  Merged revisions 6247-6249 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).\n  ........\n    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Refactor a bit redirected output print test.\n  ........\n    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Fix test for single precision print.\n  ........\n................\n  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.\n................\n  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo in test.\n................\n  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.\n................\n  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Hardcode reference for inf/nan-involved values.\n................\n  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix more formatting tests on win32.\n................\n  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix some more redirected output print tests.\n................\n  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  More fixes for print tests.\n................\n  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.\n................\n  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Do not use dict for reference: hashing on scalar arrays does not work as I expected.\n................\n  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line\n  \n  Fix #951: make tests to clean temp files properly\n................\n  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  ran reindent\n................\n  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines\n  \n  Remove the following deprecated items from numpy.testing:\n  \n  - ParametricTestCase \n  - The following arguments from numpy.testing.Tester.test(): level, \n  verbosity, \n    all, sys_argv, testcase_pattern\n  - Path manipulation functions: set_package_path, set_local_path, \n  restore_path\n  - NumpyTestCase, NumpyTest\n  \n  Also separated testing parameter setup from NoseTester.test into \n  NoseTester.prepare_test_args for use in a utility script for valgrind \n  testing (see NumPy ticket #784).\n................\n  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  add default include dir for Fedora/Red Hat (see SciPy ticket 817)\n................\n  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not import md5 on python >= 2.6; use hashlib instead.\n................\n  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not use popen* but subprocess.Popen instead.\n................\n  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.\n................\n  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines\n  \n  * adapted default_fill_value for flexible datatype\n  * fixed max/minimum_fill_value for flexible datatype\n................\n  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Credit more developers.\n................\n  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  *moved the printing templates out of MaskedArray.__repr__\n................\n  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Use new-style classes with multiple-inheritance to address bug in IronPython.\n................\n  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line\n  \n  * Bugfix #961\n................\n  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  * Fixed iadd/isub/imul when the base array has no mask but the other array does\n................\n  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines\n  \n  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias\n  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can?\\226?\\128?\\153t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)\n  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)\n................\n  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.\n................\n  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix python 2.4 issue.\n................\n  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.\n................\n  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Revert buggy test fix for locale independecce.\n................\n  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  * Add __eq__ and __ne__ for support of flexible arrays.\n  * Fixed .filled for nested structures\n................\n  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  * Remove a debugging print statement.\n................\n  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  Updated license file\n................\n  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Tag formatting unit tests as known failures.\n................\n  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  should be more reliable way to determine what bit platform\n................\n  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  better default library paths for 64bit arch\n................\n  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  simplification suggested by stefan\n................\n  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  switch the order [lib,lib64] --> [lib64,lib] \n................\n  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  removed unneeded import\n................\n  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  can't use append an int to a string\n................\n  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  * Added flatten_structured_arrays\n  * Fixed _get_recordarray for nested structures\n................\n  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line\n  \n  * Add flatten_structured_array to the namespace\n................\n  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines\n  \n  numpy.ma.core:\n  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray\n  * docstrings update\n  \n  numpy.ma.extras:\n  * docstring updates\n  \n  docs/reference\n  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic\n................\n  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines\n  \n  Docstring: remove old floating point arithmetic, parallel\n  execution and postponed import references.\n................\n  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix printing of limits.\n................\n  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix finfo to work on all instances, not just NumPy scalars.\n................\n  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line\n  \n  * fixed _arraymethod.__call__ for structured arrays\n................\n  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines\n  \n  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.\n  \n  Additional tests included.\n................\n  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines\n  \n  * renamed FlatIter to MaskedIterator\n  * added __getitem__ to MaskedIterator\n................\n  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * replace np.asarray by np.asanyarray in unique1d\n................\n  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d\n  * use np.atleast1d instead of ma.atleast1d\n................\n  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines\n  \n  * lib     : introduced _iotools\n  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.\n................\n  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * genfromtxt : if names is True, accept a line starting with a comment character as header.\n................\n  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * added recfunctions, a collection of utilities to manipulate structured arrays.\n................\n  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines\n  \n  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?\n  * fixed an machine-dependent issue on argsort ?\n................\n  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line\n  \n  Fix compilation error on 2.4.\n................\n  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines\n  \n  * _iotools.StringConverter :\n      - add a _checked attribute to indicate whether the converter has been upgraded or not.\n      - switched the default value for bool to False\n  * io.genfromtxt:\n      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)\n................\n  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line\n  \n  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False\n................\n  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line\n  \n  New docstrings for byteorder and newbyteorder()\n................\n  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines\n  \n  * Added a 'autoconvert' option to stack_arrays.\n  * Fixed 'stack_arrays' to work with fields with titles.\n................\n  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line\n  \n  * Make sure that StringConverter.update sets the type to object if it can't define it.\n................\n  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  * test__iotools : prevent test_upgrademapper if dateutil is not installed\n  * MaskedArray.__rmul__ : switch to multiply(self, other)\n................\n  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line\n  \n  test_upgrademapper : got rid of the dateutil import\n................\n  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.\n  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.\n................\n  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines\n  \n  Issue #957:\n  - Fix problems with test decorators when used on test generators.  \n  - The skip/fail arguments for skipif and knownfailureif can now be \n    either a bool or a callable that returns a bool.\n  - Added tests for the test decorators. \n................\n  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc/numpydoc: work better together with Sphinx's  config option\n................\n  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc: Move maskedarray docs upward in TOC\n................\n  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Avoid re-creating the sequence when there is only one field in the regular expression.\n................\n  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Removed an unneccessary return statement in a unit test.\n................\n  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.\n................\n  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix another bug, see last commit.\n................\n  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines\n  \n  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data\n  MaskedIterator : fixed to allow .flat on masked matrices\n................\n  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line\n................\n  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix #955: fix errobj leak in scalarmath floating point error handling\n................\n  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  * prevent modifications to the mask to be back-propagated w/ __array_wrap__\n................\n  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix hyphen (patch from debian package).\n................\n  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line\n  \n  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)\n................\n  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line\n  \n  Add multiple-field access by making a copy of the array and filling with the selected fields.\n................\n  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines\n  \n  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian\n  Granger].\n................\n  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line\n  \n  Merge fix_float_format branch into the trunk.\n................\n  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Fix typo in multiarray tests.\n................\n  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Remove leftover in TestIO.\n................\n  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c\n................\n  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.\n................\n  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move (un)packbits docstrings to add_newdocs.py. Fix typos.\n................\n  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Document constants in numpy.doc.constants\n................\n  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.\n................\n  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  * genfromtxt : fixed case when using explicit converters and explicit dtype.\n................\n  r6370 | ptvirtan | 2009-02-16 00:44:47 +0900 (Mon, 16 Feb 2009) | 1 line\n  \n  sphinxext: clean up plot directive, and merge some features from matplotlib\n................\n  r6371 | charris | 2009-02-18 06:19:10 +0900 (Wed, 18 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6372 | cdavid | 2009-02-18 14:06:57 +0900 (Wed, 18 Feb 2009) | 1 line\n  \n  Fix some const issues in NumPyOs_ascii_strtod.\n................\n  r6373 | charris | 2009-02-18 14:36:35 +0900 (Wed, 18 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Tag known failure on win32.\n................\n  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Fix tests using strptime to be Python 2.4 compatible.\n................\n  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Unhelpful message for compaq fortran compiler.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/da364a18e447c334dfa2ca5083b08e1b6a7c0d10",
        "buggy_code": "doc = get_doc_object(obj, what)",
        "fixed_code": "doc = get_doc_object(obj, what, \"\\n\".join(lines))",
        "patch": "@@ -28,7 +28,7 @@ def mangle_docstrings(app, what, name, obj, options, lines,\n                               re.I|re.S)\n         lines[:] = title_re.sub('', \"\\n\".join(lines)).split(\"\\n\")\n     else:\n-        doc = get_doc_object(obj, what)\n+        doc = get_doc_object(obj, what, \"\\n\".join(lines))\n         lines[:] = str(doc).split(\"\\n\")\n \n     if app.config.numpydoc_edit_link and hasattr(obj, '__name__') and \\"
    },
    {
        "commit_id": "da364a18e447c334dfa2ca5083b08e1b6a7c0d10",
        "commit_message": "Merged revisions 6185-6187,6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368,6370-6373,6398-6400,6410,6421-6424 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6185 | cdavid | 2008-12-22 01:19:14 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Add doc sources so that sdist tarball contains them.\n................\n  r6186 | pierregm | 2008-12-22 19:01:51 +0900 (Mon, 22 Dec 2008) | 4 lines\n  \n  testutils:\n  assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function.\n  core:\n  * Try not to touch the data in unary/binary ufuncs, (including inplace)\n................\n  r6187 | pearu | 2008-12-22 19:05:00 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Fix a bug.\n................\n  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix typos in the comments for manifest.\n................\n  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.\n................\n  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix issue 964: f2py python 2.6, 2.6.1 support.\n................\n  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines\n  \n  testutils:\n  * assert_equal : use assert_equal_array on records\n  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.\n  * assert_equal_array : use operator.__eq__ instead of ma.equal\n  * assert_equal_less: use operator.__less__ instead of ma.less\n  \n  core:\n  * Fixed _check_fill_value for nested flexible types\n  * Add a ndtype option to _make_mask_descr\n  * Fixed mask_or for nested flexible types\n  * Fixed the printing of masked arrays w/ flexible types.\n................\n  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Update to handle numscons 0.10.0 and above.\n................\n  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.\n................\n  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not test for functions already tested by python configure script.\n................\n  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.\n................\n  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix some typo/syntax errors when converting dict access to a function in manifest generation.\n................\n  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.\n................\n  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Improve the error message when initializing compiler failed.\n................\n  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Try to initialize the msvc compiler before the general code to detect the error early.\n................\n  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.\n................\n  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix manifest generation.\n................\n  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).\n................\n  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Do not define the union for runtime endianness detection if we don't check endianness.\n................\n  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Start working on formatting failure on 2.6: copy how python does complex formatting.\n................\n  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix formatting for purely imaginary complex numbers.\n................\n  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  More work on formatting float.\n................\n  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Finish formatting fixes for float scalar arrays.\n................\n  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.\n................\n  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include config.h before our C99 math compat layer.\n................\n  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Fix formatting.\n................\n  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not define FMTR and FMTI macros, as those are already defined on some platforms.\n................\n  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  More formatting fixes.\n................\n  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Remove undef of removed macro.\n................\n  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.\n................\n  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Try ugly hack to circumvent long double brokenness with mingw.\n................\n  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Use ugly hack for mingw long double pb with complex format function as well.\n................\n  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.\n................\n  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.\n................\n  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines\n  \n  Merged revisions 6233-6234 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Use parametric tests for format tests so that it is clearer which type is failing.\n  ........\n    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.\n  ........\n................\n  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add nan/inf tests for formatting.\n................\n  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add test for real float types locale independance.\n................\n  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Clearer error messages for formatting failures.\n................\n  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add tests for print of float types.\n................\n  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add print tests for complex types.\n................\n  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix test for print: forgot to make sure the value is a float before comparing it.\n................\n  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines\n  \n  Merged revisions 6247-6249 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).\n  ........\n    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Refactor a bit redirected output print test.\n  ........\n    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Fix test for single precision print.\n  ........\n................\n  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.\n................\n  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo in test.\n................\n  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.\n................\n  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Hardcode reference for inf/nan-involved values.\n................\n  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix more formatting tests on win32.\n................\n  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix some more redirected output print tests.\n................\n  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  More fixes for print tests.\n................\n  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.\n................\n  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Do not use dict for reference: hashing on scalar arrays does not work as I expected.\n................\n  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line\n  \n  Fix #951: make tests to clean temp files properly\n................\n  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  ran reindent\n................\n  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines\n  \n  Remove the following deprecated items from numpy.testing:\n  \n  - ParametricTestCase \n  - The following arguments from numpy.testing.Tester.test(): level, \n  verbosity, \n    all, sys_argv, testcase_pattern\n  - Path manipulation functions: set_package_path, set_local_path, \n  restore_path\n  - NumpyTestCase, NumpyTest\n  \n  Also separated testing parameter setup from NoseTester.test into \n  NoseTester.prepare_test_args for use in a utility script for valgrind \n  testing (see NumPy ticket #784).\n................\n  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  add default include dir for Fedora/Red Hat (see SciPy ticket 817)\n................\n  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not import md5 on python >= 2.6; use hashlib instead.\n................\n  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not use popen* but subprocess.Popen instead.\n................\n  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.\n................\n  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines\n  \n  * adapted default_fill_value for flexible datatype\n  * fixed max/minimum_fill_value for flexible datatype\n................\n  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Credit more developers.\n................\n  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  *moved the printing templates out of MaskedArray.__repr__\n................\n  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Use new-style classes with multiple-inheritance to address bug in IronPython.\n................\n  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line\n  \n  * Bugfix #961\n................\n  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  * Fixed iadd/isub/imul when the base array has no mask but the other array does\n................\n  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines\n  \n  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias\n  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can?\\226?\\128?\\153t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)\n  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)\n................\n  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.\n................\n  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix python 2.4 issue.\n................\n  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.\n................\n  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Revert buggy test fix for locale independecce.\n................\n  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  * Add __eq__ and __ne__ for support of flexible arrays.\n  * Fixed .filled for nested structures\n................\n  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  * Remove a debugging print statement.\n................\n  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  Updated license file\n................\n  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Tag formatting unit tests as known failures.\n................\n  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  should be more reliable way to determine what bit platform\n................\n  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  better default library paths for 64bit arch\n................\n  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  simplification suggested by stefan\n................\n  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  switch the order [lib,lib64] --> [lib64,lib] \n................\n  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  removed unneeded import\n................\n  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  can't use append an int to a string\n................\n  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  * Added flatten_structured_arrays\n  * Fixed _get_recordarray for nested structures\n................\n  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line\n  \n  * Add flatten_structured_array to the namespace\n................\n  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines\n  \n  numpy.ma.core:\n  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray\n  * docstrings update\n  \n  numpy.ma.extras:\n  * docstring updates\n  \n  docs/reference\n  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic\n................\n  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines\n  \n  Docstring: remove old floating point arithmetic, parallel\n  execution and postponed import references.\n................\n  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix printing of limits.\n................\n  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix finfo to work on all instances, not just NumPy scalars.\n................\n  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line\n  \n  * fixed _arraymethod.__call__ for structured arrays\n................\n  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines\n  \n  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.\n  \n  Additional tests included.\n................\n  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines\n  \n  * renamed FlatIter to MaskedIterator\n  * added __getitem__ to MaskedIterator\n................\n  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * replace np.asarray by np.asanyarray in unique1d\n................\n  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d\n  * use np.atleast1d instead of ma.atleast1d\n................\n  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines\n  \n  * lib     : introduced _iotools\n  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.\n................\n  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * genfromtxt : if names is True, accept a line starting with a comment character as header.\n................\n  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * added recfunctions, a collection of utilities to manipulate structured arrays.\n................\n  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines\n  \n  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?\n  * fixed an machine-dependent issue on argsort ?\n................\n  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line\n  \n  Fix compilation error on 2.4.\n................\n  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines\n  \n  * _iotools.StringConverter :\n      - add a _checked attribute to indicate whether the converter has been upgraded or not.\n      - switched the default value for bool to False\n  * io.genfromtxt:\n      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)\n................\n  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line\n  \n  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False\n................\n  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line\n  \n  New docstrings for byteorder and newbyteorder()\n................\n  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines\n  \n  * Added a 'autoconvert' option to stack_arrays.\n  * Fixed 'stack_arrays' to work with fields with titles.\n................\n  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line\n  \n  * Make sure that StringConverter.update sets the type to object if it can't define it.\n................\n  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  * test__iotools : prevent test_upgrademapper if dateutil is not installed\n  * MaskedArray.__rmul__ : switch to multiply(self, other)\n................\n  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line\n  \n  test_upgrademapper : got rid of the dateutil import\n................\n  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.\n  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.\n................\n  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines\n  \n  Issue #957:\n  - Fix problems with test decorators when used on test generators.  \n  - The skip/fail arguments for skipif and knownfailureif can now be \n    either a bool or a callable that returns a bool.\n  - Added tests for the test decorators. \n................\n  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc/numpydoc: work better together with Sphinx's  config option\n................\n  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc: Move maskedarray docs upward in TOC\n................\n  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Avoid re-creating the sequence when there is only one field in the regular expression.\n................\n  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Removed an unneccessary return statement in a unit test.\n................\n  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.\n................\n  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix another bug, see last commit.\n................\n  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines\n  \n  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data\n  MaskedIterator : fixed to allow .flat on masked matrices\n................\n  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line\n................\n  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix #955: fix errobj leak in scalarmath floating point error handling\n................\n  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  * prevent modifications to the mask to be back-propagated w/ __array_wrap__\n................\n  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix hyphen (patch from debian package).\n................\n  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line\n  \n  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)\n................\n  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line\n  \n  Add multiple-field access by making a copy of the array and filling with the selected fields.\n................\n  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines\n  \n  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian\n  Granger].\n................\n  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line\n  \n  Merge fix_float_format branch into the trunk.\n................\n  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Fix typo in multiarray tests.\n................\n  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Remove leftover in TestIO.\n................\n  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c\n................\n  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.\n................\n  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move (un)packbits docstrings to add_newdocs.py. Fix typos.\n................\n  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Document constants in numpy.doc.constants\n................\n  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.\n................\n  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  * genfromtxt : fixed case when using explicit converters and explicit dtype.\n................\n  r6370 | ptvirtan | 2009-02-16 00:44:47 +0900 (Mon, 16 Feb 2009) | 1 line\n  \n  sphinxext: clean up plot directive, and merge some features from matplotlib\n................\n  r6371 | charris | 2009-02-18 06:19:10 +0900 (Wed, 18 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6372 | cdavid | 2009-02-18 14:06:57 +0900 (Wed, 18 Feb 2009) | 1 line\n  \n  Fix some const issues in NumPyOs_ascii_strtod.\n................\n  r6373 | charris | 2009-02-18 14:36:35 +0900 (Wed, 18 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line\n  \n  Tag known failure on win32.\n................\n  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Fix tests using strptime to be Python 2.4 compatible.\n................\n  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines\n  \n  Coding style cleanups.\n................\n  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Coding style cleanups.\n................\n  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line\n  \n  Unhelpful message for compaq fortran compiler.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/da364a18e447c334dfa2ca5083b08e1b6a7c0d10",
        "buggy_code": "class HermitianTestCase:",
        "fixed_code": "class HermitianTestCase(object):",
        "patch": "@@ -202,7 +202,7 @@ def test_square(self):\n         assert_equal(matrix_power(A,2),A)\n \n \n-class HermitianTestCase:\n+class HermitianTestCase(object):\n     def test_single(self):\n         a = array([[1.,2.], [2.,1.]], dtype=single)\n         self.do(a)"
    },
    {
        "commit_id": "97b881949bcebca55ec3f69f4744d7461a28fe33",
        "commit_message": "Fix umath generator to use npymath funcs instead of straight libc ones.",
        "commit_url": "https://github.com/numpy/numpy/commit/97b881949bcebca55ec3f69f4744d7461a28fe33",
        "buggy_code": "_fdata_map = dict(f='%sf', d='%s', g='%sl',",
        "fixed_code": "_fdata_map = dict(f='npy_%sf', d='npy_%s', g='npy_%sl',",
        "patch": "@@ -37,7 +37,7 @@ def finish_signature(self, nin, nout):\n             self.out = self.type * nout\n         assert len(self.out) == nout\n \n-_fdata_map = dict(f='%sf', d='%s', g='%sl',\n+_fdata_map = dict(f='npy_%sf', d='npy_%s', g='npy_%sl',\n                   F='nc_%sf', D='nc_%s', G='nc_%sl')\n def build_func_data(types, f):\n     func_data = []"
    },
    {
        "commit_id": "fb4035fa27d02fcb8c9fce9141fe8bfd3c1859ec",
        "commit_message": "Merged revisions 6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix typos in the comments for manifest.\n................\n  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.\n................\n  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix issue 964: f2py python 2.6, 2.6.1 support.\n................\n  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines\n  \n  testutils:\n  * assert_equal : use assert_equal_array on records\n  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.\n  * assert_equal_array : use operator.__eq__ instead of ma.equal\n  * assert_equal_less: use operator.__less__ instead of ma.less\n  \n  core:\n  * Fixed _check_fill_value for nested flexible types\n  * Add a ndtype option to _make_mask_descr\n  * Fixed mask_or for nested flexible types\n  * Fixed the printing of masked arrays w/ flexible types.\n................\n  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Update to handle numscons 0.10.0 and above.\n................\n  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.\n................\n  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not test for functions already tested by python configure script.\n................\n  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.\n................\n  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix some typo/syntax errors when converting dict access to a function in manifest generation.\n................\n  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.\n................\n  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Improve the error message when initializing compiler failed.\n................\n  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Try to initialize the msvc compiler before the general code to detect the error early.\n................\n  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.\n................\n  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix manifest generation.\n................\n  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).\n................\n  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Do not define the union for runtime endianness detection if we don't check endianness.\n................\n  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Start working on formatting failure on 2.6: copy how python does complex formatting.\n................\n  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix formatting for purely imaginary complex numbers.\n................\n  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  More work on formatting float.\n................\n  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Finish formatting fixes for float scalar arrays.\n................\n  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.\n................\n  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include config.h before our C99 math compat layer.\n................\n  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Fix formatting.\n................\n  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not define FMTR and FMTI macros, as those are already defined on some platforms.\n................\n  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  More formatting fixes.\n................\n  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Remove undef of removed macro.\n................\n  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.\n................\n  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Try ugly hack to circumvent long double brokenness with mingw.\n................\n  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Use ugly hack for mingw long double pb with complex format function as well.\n................\n  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.\n................\n  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.\n................\n  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines\n  \n  Merged revisions 6233-6234 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Use parametric tests for format tests so that it is clearer which type is failing.\n  ........\n    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.\n  ........\n................\n  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add nan/inf tests for formatting.\n................\n  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add test for real float types locale independance.\n................\n  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Clearer error messages for formatting failures.\n................\n  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add tests for print of float types.\n................\n  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add print tests for complex types.\n................\n  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix test for print: forgot to make sure the value is a float before comparing it.\n................\n  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines\n  \n  Merged revisions 6247-6249 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).\n  ........\n    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Refactor a bit redirected output print test.\n  ........\n    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Fix test for single precision print.\n  ........\n................\n  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.\n................\n  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo in test.\n................\n  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.\n................\n  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Hardcode reference for inf/nan-involved values.\n................\n  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix more formatting tests on win32.\n................\n  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix some more redirected output print tests.\n................\n  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  More fixes for print tests.\n................\n  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.\n................\n  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Do not use dict for reference: hashing on scalar arrays does not work as I expected.\n................\n  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line\n  \n  Fix #951: make tests to clean temp files properly\n................\n  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  ran reindent\n................\n  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines\n  \n  Remove the following deprecated items from numpy.testing:\n  \n  - ParametricTestCase \n  - The following arguments from numpy.testing.Tester.test(): level, \n  verbosity, \n    all, sys_argv, testcase_pattern\n  - Path manipulation functions: set_package_path, set_local_path, \n  restore_path\n  - NumpyTestCase, NumpyTest\n  \n  Also separated testing parameter setup from NoseTester.test into \n  NoseTester.prepare_test_args for use in a utility script for valgrind \n  testing (see NumPy ticket #784).\n................\n  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  add default include dir for Fedora/Red Hat (see SciPy ticket 817)\n................\n  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not import md5 on python >= 2.6; use hashlib instead.\n................\n  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not use popen* but subprocess.Popen instead.\n................\n  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.\n................\n  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines\n  \n  * adapted default_fill_value for flexible datatype\n  * fixed max/minimum_fill_value for flexible datatype\n................\n  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Credit more developers.\n................\n  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  *moved the printing templates out of MaskedArray.__repr__\n................\n  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Use new-style classes with multiple-inheritance to address bug in IronPython.\n................\n  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line\n  \n  * Bugfix #961\n................\n  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  * Fixed iadd/isub/imul when the base array has no mask but the other array does\n................\n  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines\n  \n  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias\n  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can\u2019t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)\n  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)\n................\n  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.\n................\n  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix python 2.4 issue.\n................\n  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.\n................\n  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Revert buggy test fix for locale independecce.\n................\n  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  * Add __eq__ and __ne__ for support of flexible arrays.\n  * Fixed .filled for nested structures\n................\n  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  * Remove a debugging print statement.\n................\n  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  Updated license file\n................\n  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Tag formatting unit tests as known failures.\n................\n  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  should be more reliable way to determine what bit platform\n................\n  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  better default library paths for 64bit arch\n................\n  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  simplification suggested by stefan\n................\n  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  switch the order [lib,lib64] --> [lib64,lib] \n................\n  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  removed unneeded import\n................\n  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  can't use append an int to a string\n................\n  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  * Added flatten_structured_arrays\n  * Fixed _get_recordarray for nested structures\n................\n  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line\n  \n  * Add flatten_structured_array to the namespace\n................\n  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines\n  \n  numpy.ma.core:\n  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray\n  * docstrings update\n  \n  numpy.ma.extras:\n  * docstring updates\n  \n  docs/reference\n  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic\n................\n  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines\n  \n  Docstring: remove old floating point arithmetic, parallel\n  execution and postponed import references.\n................\n  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix printing of limits.\n................\n  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix finfo to work on all instances, not just NumPy scalars.\n................\n  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line\n  \n  * fixed _arraymethod.__call__ for structured arrays\n................\n  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines\n  \n  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.\n  \n  Additional tests included.\n................\n  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines\n  \n  * renamed FlatIter to MaskedIterator\n  * added __getitem__ to MaskedIterator\n................\n  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * replace np.asarray by np.asanyarray in unique1d\n................\n  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d\n  * use np.atleast1d instead of ma.atleast1d\n................\n  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines\n  \n  * lib     : introduced _iotools\n  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.\n................\n  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * genfromtxt : if names is True, accept a line starting with a comment character as header.\n................\n  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * added recfunctions, a collection of utilities to manipulate structured arrays.\n................\n  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines\n  \n  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?\n  * fixed an machine-dependent issue on argsort ?\n................\n  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line\n  \n  Fix compilation error on 2.4.\n................\n  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines\n  \n  * _iotools.StringConverter :\n      - add a _checked attribute to indicate whether the converter has been upgraded or not.\n      - switched the default value for bool to False\n  * io.genfromtxt:\n      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)\n................\n  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line\n  \n  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False\n................\n  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line\n  \n  New docstrings for byteorder and newbyteorder()\n................\n  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines\n  \n  * Added a 'autoconvert' option to stack_arrays.\n  * Fixed 'stack_arrays' to work with fields with titles.\n................\n  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line\n  \n  * Make sure that StringConverter.update sets the type to object if it can't define it.\n................\n  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  * test__iotools : prevent test_upgrademapper if dateutil is not installed\n  * MaskedArray.__rmul__ : switch to multiply(self, other)\n................\n  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line\n  \n  test_upgrademapper : got rid of the dateutil import\n................\n  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.\n  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.\n................\n  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines\n  \n  Issue #957:\n  - Fix problems with test decorators when used on test generators.  \n  - The skip/fail arguments for skipif and knownfailureif can now be \n    either a bool or a callable that returns a bool.\n  - Added tests for the test decorators. \n................\n  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc/numpydoc: work better together with Sphinx's  config option\n................\n  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc: Move maskedarray docs upward in TOC\n................\n  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Avoid re-creating the sequence when there is only one field in the regular expression.\n................\n  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Removed an unneccessary return statement in a unit test.\n................\n  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.\n................\n  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix another bug, see last commit.\n................\n  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines\n  \n  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data\n  MaskedIterator : fixed to allow .flat on masked matrices\n................\n  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line\n................\n  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix #955: fix errobj leak in scalarmath floating point error handling\n................\n  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  * prevent modifications to the mask to be back-propagated w/ __array_wrap__\n................\n  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix hyphen (patch from debian package).\n................\n  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line\n  \n  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)\n................\n  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line\n  \n  Add multiple-field access by making a copy of the array and filling with the selected fields.\n................\n  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines\n  \n  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian\n  Granger].\n................\n  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line\n  \n  Merge fix_float_format branch into the trunk.\n................\n  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Fix typo in multiarray tests.\n................\n  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Remove leftover in TestIO.\n................\n  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c\n................\n  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.\n................\n  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move (un)packbits docstrings to add_newdocs.py. Fix typos.\n................\n  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Document constants in numpy.doc.constants\n................\n  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.\n................\n  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  * genfromtxt : fixed case when using explicit converters and explicit dtype.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/fb4035fa27d02fcb8c9fce9141fe8bfd3c1859ec",
        "buggy_code": "doc = get_doc_object(obj, what)",
        "fixed_code": "doc = get_doc_object(obj, what, \"\\n\".join(lines))",
        "patch": "@@ -28,7 +28,7 @@ def mangle_docstrings(app, what, name, obj, options, lines,\n                               re.I|re.S)\n         lines[:] = title_re.sub('', \"\\n\".join(lines)).split(\"\\n\")\n     else:\n-        doc = get_doc_object(obj, what)\n+        doc = get_doc_object(obj, what, \"\\n\".join(lines))\n         lines[:] = str(doc).split(\"\\n\")\n \n     if app.config.numpydoc_edit_link and hasattr(obj, '__name__') and \\"
    },
    {
        "commit_id": "fb4035fa27d02fcb8c9fce9141fe8bfd3c1859ec",
        "commit_message": "Merged revisions 6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n................\n  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix typos in the comments for manifest.\n................\n  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.\n................\n  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line\n  \n  Fix issue 964: f2py python 2.6, 2.6.1 support.\n................\n  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines\n  \n  testutils:\n  * assert_equal : use assert_equal_array on records\n  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.\n  * assert_equal_array : use operator.__eq__ instead of ma.equal\n  * assert_equal_less: use operator.__less__ instead of ma.less\n  \n  core:\n  * Fixed _check_fill_value for nested flexible types\n  * Add a ndtype option to _make_mask_descr\n  * Fixed mask_or for nested flexible types\n  * Fixed the printing of masked arrays w/ flexible types.\n................\n  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Update to handle numscons 0.10.0 and above.\n................\n  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.\n................\n  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line\n  \n  Do not test for functions already tested by python configure script.\n................\n  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.\n................\n  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix some typo/syntax errors when converting dict access to a function in manifest generation.\n................\n  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.\n................\n  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Improve the error message when initializing compiler failed.\n................\n  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Try to initialize the msvc compiler before the general code to detect the error early.\n................\n  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.\n................\n  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix manifest generation.\n................\n  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).\n................\n  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Do not define the union for runtime endianness detection if we don't check endianness.\n................\n  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Start working on formatting failure on 2.6: copy how python does complex formatting.\n................\n  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Fix formatting for purely imaginary complex numbers.\n................\n  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  More work on formatting float.\n................\n  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line\n  \n  Finish formatting fixes for float scalar arrays.\n................\n  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.\n................\n  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Include config.h before our C99 math compat layer.\n................\n  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Fix formatting.\n................\n  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not define FMTR and FMTI macros, as those are already defined on some platforms.\n................\n  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  More formatting fixes.\n................\n  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Remove undef of removed macro.\n................\n  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.\n................\n  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Try ugly hack to circumvent long double brokenness with mingw.\n................\n  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Use ugly hack for mingw long double pb with complex format function as well.\n................\n  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.\n................\n  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line\n  \n  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.\n................\n  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines\n  \n  Merged revisions 6233-6234 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Use parametric tests for format tests so that it is clearer which type is failing.\n  ........\n    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line\n    \n    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.\n  ........\n................\n  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add nan/inf tests for formatting.\n................\n  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Add test for real float types locale independance.\n................\n  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line\n  \n  Clearer error messages for formatting failures.\n................\n  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add tests for print of float types.\n................\n  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Add print tests for complex types.\n................\n  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix test for print: forgot to make sure the value is a float before comparing it.\n................\n  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines\n  \n  Merged revisions 6247-6249 via svnmerge from \n  http://svn.scipy.org/svn/numpy/branches/fix_float_format\n  \n  ........\n    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).\n  ........\n    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Refactor a bit redirected output print test.\n  ........\n    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line\n    \n    Fix test for single precision print.\n  ........\n................\n  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.\n................\n  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo in test.\n................\n  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.\n................\n  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Hardcode reference for inf/nan-involved values.\n................\n  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix more formatting tests on win32.\n................\n  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix some more redirected output print tests.\n................\n  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  More fixes for print tests.\n................\n  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n................\n  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.\n................\n  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Do not use dict for reference: hashing on scalar arrays does not work as I expected.\n................\n  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line\n  \n  Fix #951: make tests to clean temp files properly\n................\n  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  ran reindent\n................\n  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines\n  \n  Remove the following deprecated items from numpy.testing:\n  \n  - ParametricTestCase \n  - The following arguments from numpy.testing.Tester.test(): level, \n  verbosity, \n    all, sys_argv, testcase_pattern\n  - Path manipulation functions: set_package_path, set_local_path, \n  restore_path\n  - NumpyTestCase, NumpyTest\n  \n  Also separated testing parameter setup from NoseTester.test into \n  NoseTester.prepare_test_args for use in a utility script for valgrind \n  testing (see NumPy ticket #784).\n................\n  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines\n  \n  add default include dir for Fedora/Red Hat (see SciPy ticket 817)\n................\n  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not import md5 on python >= 2.6; use hashlib instead.\n................\n  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Do not use popen* but subprocess.Popen instead.\n................\n  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line\n  \n  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.\n................\n  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines\n  \n  * adapted default_fill_value for flexible datatype\n  * fixed max/minimum_fill_value for flexible datatype\n................\n  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Credit more developers.\n................\n  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  *moved the printing templates out of MaskedArray.__repr__\n................\n  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line\n  \n  Use new-style classes with multiple-inheritance to address bug in IronPython.\n................\n  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line\n  \n  * Bugfix #961\n................\n  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  * Fixed iadd/isub/imul when the base array has no mask but the other array does\n................\n  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines\n  \n  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias\n  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can\u2019t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)\n  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)\n................\n  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line\n  \n  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.\n................\n  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix python 2.4 issue.\n................\n  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.\n................\n  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Revert buggy test fix for locale independecce.\n................\n  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  * Add __eq__ and __ne__ for support of flexible arrays.\n  * Fixed .filled for nested structures\n................\n  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  * Remove a debugging print statement.\n................\n  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  Updated license file\n................\n  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line\n  \n  Tag formatting unit tests as known failures.\n................\n  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  should be more reliable way to determine what bit platform\n................\n  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  better default library paths for 64bit arch\n................\n  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  simplification suggested by stefan\n................\n  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  switch the order [lib,lib64] --> [lib64,lib] \n................\n  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines\n  \n  removed unneeded import\n................\n  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  can't use append an int to a string\n................\n  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines\n  \n  * Added flatten_structured_arrays\n  * Fixed _get_recordarray for nested structures\n................\n  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line\n  \n  * Add flatten_structured_array to the namespace\n................\n  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines\n  \n  numpy.ma.core:\n  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray\n  * docstrings update\n  \n  numpy.ma.extras:\n  * docstring updates\n  \n  docs/reference\n  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic\n................\n  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines\n  \n  Docstring: remove old floating point arithmetic, parallel\n  execution and postponed import references.\n................\n  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix printing of limits.\n................\n  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line\n  \n  Fix finfo to work on all instances, not just NumPy scalars.\n................\n  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line\n  \n  * fixed _arraymethod.__call__ for structured arrays\n................\n  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines\n  \n  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.\n  \n  Additional tests included.\n................\n  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines\n  \n  * renamed FlatIter to MaskedIterator\n  * added __getitem__ to MaskedIterator\n................\n  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * replace np.asarray by np.asanyarray in unique1d\n................\n  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines\n  \n  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d\n  * use np.atleast1d instead of ma.atleast1d\n................\n  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines\n  \n  * lib     : introduced _iotools\n  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.\n................\n  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * genfromtxt : if names is True, accept a line starting with a comment character as header.\n................\n  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line\n  \n  * added recfunctions, a collection of utilities to manipulate structured arrays.\n................\n  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines\n  \n  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?\n  * fixed an machine-dependent issue on argsort ?\n................\n  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line\n  \n  Fix compilation error on 2.4.\n................\n  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines\n  \n  * _iotools.StringConverter :\n      - add a _checked attribute to indicate whether the converter has been upgraded or not.\n      - switched the default value for bool to False\n  * io.genfromtxt:\n      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)\n................\n  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line\n  \n  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False\n................\n  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line\n  \n  New docstrings for byteorder and newbyteorder()\n................\n  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines\n  \n  * Added a 'autoconvert' option to stack_arrays.\n  * Fixed 'stack_arrays' to work with fields with titles.\n................\n  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line\n  \n  * Make sure that StringConverter.update sets the type to object if it can't define it.\n................\n  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  * test__iotools : prevent test_upgrademapper if dateutil is not installed\n  * MaskedArray.__rmul__ : switch to multiply(self, other)\n................\n  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line\n  \n  test_upgrademapper : got rid of the dateutil import\n................\n  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines\n  \n  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.\n  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.\n................\n  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines\n  \n  Issue #957:\n  - Fix problems with test decorators when used on test generators.  \n  - The skip/fail arguments for skipif and knownfailureif can now be \n    either a bool or a callable that returns a bool.\n  - Added tests for the test decorators. \n................\n  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc/numpydoc: work better together with Sphinx's  config option\n................\n  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  doc: Move maskedarray docs upward in TOC\n................\n  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Avoid re-creating the sequence when there is only one field in the regular expression.\n................\n  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Removed an unneccessary return statement in a unit test.\n................\n  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.\n................\n  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line\n  \n  Fix another bug, see last commit.\n................\n  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines\n  \n  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data\n  MaskedIterator : fixed to allow .flat on masked matrices\n................\n  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line\n................\n  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix #955: fix errobj leak in scalarmath floating point error handling\n................\n  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  * prevent modifications to the mask to be back-propagated w/ __array_wrap__\n................\n  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line\n  \n  Fix hyphen (patch from debian package).\n................\n  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line\n  \n  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)\n................\n  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line\n  \n  Add multiple-field access by making a copy of the array and filling with the selected fields.\n................\n  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines\n  \n  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian\n  Granger].\n................\n  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line\n  \n  Merge fix_float_format branch into the trunk.\n................\n  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Fix typo in multiarray tests.\n................\n  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Remove leftover in TestIO.\n................\n  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c\n................\n  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.\n................\n  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move (un)packbits docstrings to add_newdocs.py. Fix typos.\n................\n  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Document constants in numpy.doc.constants\n................\n  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.\n................\n  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line\n  \n  * genfromtxt : fixed case when using explicit converters and explicit dtype.\n................",
        "commit_url": "https://github.com/numpy/numpy/commit/fb4035fa27d02fcb8c9fce9141fe8bfd3c1859ec",
        "buggy_code": "class HermitianTestCase:",
        "fixed_code": "class HermitianTestCase(object):",
        "patch": "@@ -202,7 +202,7 @@ def test_square(self):\n         assert_equal(matrix_power(A,2),A)\n \n \n-class HermitianTestCase:\n+class HermitianTestCase(object):\n     def test_single(self):\n         a = array([[1.,2.], [2.,1.]], dtype=single)\n         self.do(a)"
    },
    {
        "commit_id": "99f428eeb52ce65e79defff4306aebc601ee1c42",
        "commit_message": "Revert buggy test fix for locale independecce.",
        "commit_url": "https://github.com/numpy/numpy/commit/99f428eeb52ce65e79defff4306aebc601ee1c42",
        "buggy_code": "assert_equal(locale.format(\"%f\",tp(1.2)), locale.format(\"%f\",float(1.2)),",
        "fixed_code": "assert_equal(str(tp(1.2)), str(float(1.2)),",
        "patch": "@@ -154,7 +154,7 @@ def _test_locale_independance(tp):\n         else:\n             locale.setlocale(locale.LC_NUMERIC, 'FRENCH')\n \n-        assert_equal(locale.format(\"%f\",tp(1.2)), locale.format(\"%f\",float(1.2)),\n+        assert_equal(str(tp(1.2)), str(float(1.2)),\n                      err_msg='Failed locale test for type %s' % tp)\n     finally:\n         locale.setlocale(locale.LC_NUMERIC, locale=curloc)"
    },
    {
        "commit_id": "a5ca79d91f5ded5bee86407605e3f2004af3e6a6",
        "commit_message": "Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.",
        "commit_url": "https://github.com/numpy/numpy/commit/a5ca79d91f5ded5bee86407605e3f2004af3e6a6",
        "buggy_code": "assert_equal(str(tp(1.2)), str(float(1.2)),",
        "fixed_code": "assert_equal(locale.format(\"%f\",tp(1.2)), locale.format(\"%f\",float(1.2)),",
        "patch": "@@ -154,7 +154,7 @@ def _test_locale_independance(tp):\n         else:\n             locale.setlocale(locale.LC_NUMERIC, 'FRENCH')\n \n-        assert_equal(str(tp(1.2)), str(float(1.2)),\n+        assert_equal(locale.format(\"%f\",tp(1.2)), locale.format(\"%f\",float(1.2)),\n                      err_msg='Failed locale test for type %s' % tp)\n     finally:\n         locale.setlocale(locale.LC_NUMERIC, locale=curloc)"
    },
    {
        "commit_id": "4ec7a628f9e35a1dfcc5ab2a3c89f15006f6353d",
        "commit_message": "Use new-style classes with multiple-inheritance to address bug in IronPython.",
        "commit_url": "https://github.com/numpy/numpy/commit/4ec7a628f9e35a1dfcc5ab2a3c89f15006f6353d",
        "buggy_code": "class RoundtripTest:",
        "fixed_code": "class RoundtripTest(object):",
        "patch": "@@ -8,7 +8,7 @@\n \n MAJVER, MINVER = sys.version_info[:2]\n \n-class RoundtripTest:\n+class RoundtripTest(object):\n     def roundtrip(self, save_func, *args, **kwargs):\n         \"\"\"\n         save_func : callable"
    },
    {
        "commit_id": "4ec7a628f9e35a1dfcc5ab2a3c89f15006f6353d",
        "commit_message": "Use new-style classes with multiple-inheritance to address bug in IronPython.",
        "commit_url": "https://github.com/numpy/numpy/commit/4ec7a628f9e35a1dfcc5ab2a3c89f15006f6353d",
        "buggy_code": "class HermitianTestCase:",
        "fixed_code": "class HermitianTestCase(object):",
        "patch": "@@ -202,7 +202,7 @@ def test_square(self):\n         assert_equal(matrix_power(A,2),A)\n \n \n-class HermitianTestCase:\n+class HermitianTestCase(object):\n     def test_single(self):\n         a = array([[1.,2.], [2.,1.]], dtype=single)\n         self.do(a)"
    },
    {
        "commit_id": "778d33648daeda86be016c1c6a490a2fb5387b1d",
        "commit_message": "Merged revisions 6266 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/778d33648daeda86be016c1c6a490a2fb5387b1d",
        "buggy_code": "np.cdouble(-np.inf, 1): '(-inf+1j)'",
        "fixed_code": "np.cdouble(-np.inf, 1): '(-inf+1j)',",
        "patch": "@@ -11,7 +11,7 @@\n         np.complex64(-np.inf, 1): '(-inf+1j)',\n         np.cdouble(np.inf, 1): '(inf+1j)',\n         np.cdouble(np.nan, 1): '(nan+1j)',\n-        np.cdouble(-np.inf, 1): '(-inf+1j)'\n+        np.cdouble(-np.inf, 1): '(-inf+1j)',\n         np.clongdouble(np.inf, 1): '(inf+1j)',\n         np.clongdouble(np.nan, 1): '(nan+1j)',\n         np.clongdouble(-np.inf, 1): '(-inf+1j)'"
    },
    {
        "commit_id": "e0114e352ce3637ed1a6702c96da6a8441000a3a",
        "commit_message": "Merged revisions 6265 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/e0114e352ce3637ed1a6702c96da6a8441000a3a",
        "buggy_code": "np.complex64(-np.inf, 1): '(-inf+1j)'",
        "fixed_code": "np.complex64(-np.inf, 1): '(-inf+1j)',",
        "patch": "@@ -8,7 +8,7 @@\n _REF = {np.inf: 'inf', -np.inf: '-inf', np.nan: 'nan',\n         np.complex64(np.inf, 1): '(inf+1j)',\n         np.complex64(np.nan, 1): '(nan+1j)',\n-        np.complex64(-np.inf, 1): '(-inf+1j)'\n+        np.complex64(-np.inf, 1): '(-inf+1j)',\n         np.cdouble(np.inf, 1): '(inf+1j)',\n         np.cdouble(np.nan, 1): '(nan+1j)',\n         np.cdouble(-np.inf, 1): '(-inf+1j)'"
    },
    {
        "commit_id": "858e4e923d08524f7339e53a713978f038cc0b2f",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/858e4e923d08524f7339e53a713978f038cc0b2f",
        "buggy_code": "np.cdouble(-np.inf, 1): '(-inf+1j)'",
        "fixed_code": "np.cdouble(-np.inf, 1): '(-inf+1j)',",
        "patch": "@@ -11,7 +11,7 @@\n         np.complex64(-np.inf, 1): '(-inf+1j)',\n         np.cdouble(np.inf, 1): '(inf+1j)',\n         np.cdouble(np.nan, 1): '(nan+1j)',\n-        np.cdouble(-np.inf, 1): '(-inf+1j)'\n+        np.cdouble(-np.inf, 1): '(-inf+1j)',\n         np.clongdouble(np.inf, 1): '(inf+1j)',\n         np.clongdouble(np.nan, 1): '(nan+1j)',\n         np.clongdouble(-np.inf, 1): '(-inf+1j)'"
    },
    {
        "commit_id": "45b829bd7f13a859f3b3b13b4e4feba4fa2dd624",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/45b829bd7f13a859f3b3b13b4e4feba4fa2dd624",
        "buggy_code": "np.complex64(-np.inf, 1): '(-inf+1j)'",
        "fixed_code": "np.complex64(-np.inf, 1): '(-inf+1j)',",
        "patch": "@@ -8,7 +8,7 @@\n _REF = {np.inf: 'inf', -np.inf: '-inf', np.nan: 'nan',\n         np.complex64(np.inf, 1): '(inf+1j)',\n         np.complex64(np.nan, 1): '(nan+1j)',\n-        np.complex64(-np.inf, 1): '(-inf+1j)'\n+        np.complex64(-np.inf, 1): '(-inf+1j)',\n         np.cdouble(np.inf, 1): '(inf+1j)',\n         np.cdouble(np.nan, 1): '(nan+1j)',\n         np.cdouble(-np.inf, 1): '(-inf+1j)'"
    },
    {
        "commit_id": "04cc210a41ada5ef3165cc3915ca5107e4c37e99",
        "commit_message": "Merged revisions 6253 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line\n  \n  Fix typo in test.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/04cc210a41ada5ef3165cc3915ca5107e4c37e99",
        "buggy_code": "for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]",
        "fixed_code": "for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]:",
        "patch": "@@ -88,7 +88,7 @@ def _test_redirected_print(x, tp):\n                  err_msg='print failed for type%s' % tp)\n \n def check_float_type_print(tp):\n-    for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]\n+    for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]:\n         _test_redirected_print(float(x), tp)\n \n     if tp(1e10).itemsize > 4:"
    },
    {
        "commit_id": "90ebbb8e4e37c2d6562735a5192d3116de2621ac",
        "commit_message": "Fix typo in test.",
        "commit_url": "https://github.com/numpy/numpy/commit/90ebbb8e4e37c2d6562735a5192d3116de2621ac",
        "buggy_code": "for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]",
        "fixed_code": "for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]:",
        "patch": "@@ -88,7 +88,7 @@ def _test_redirected_print(x, tp):\n                  err_msg='print failed for type%s' % tp)\n \n def check_float_type_print(tp):\n-    for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]\n+    for x in [0, 1,-1, 1e20, np.inf, -np.inf, np.nan]:\n         _test_redirected_print(float(x), tp)\n \n     if tp(1e10).itemsize > 4:"
    },
    {
        "commit_id": "d10d5631368f97af5babd503371a862eaecce8d6",
        "commit_message": "Merged revisions 6108,6110,6112-6127,6129-6134,6136-6138,6140-6149,6174-6175,6179-6182,6185-6187 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6108 | pierregm | 2008-11-26 11:13:57 +0900 (Wed, 26 Nov 2008) | 3 lines\n  \n  * added ma.diag\n  * added copy, cumprod, cumsum, harden_mask, prod, round, soften_mask, squeeze to the namespace\n  * TEMPORARILY fixed a pb of compatibility with python 2.6 (involvingin(np.nan))\n........\n  r6110 | pierregm | 2008-11-27 13:29:43 +0900 (Thu, 27 Nov 2008) | 5 lines\n  \n  * Added get_object_signature to fix missing signatures\n  * Fixed .getdoc from _arraymethod, _frommethod, _convert2ma, _fromnxfunction\n  * Fixed the docstrings of .trace, .mean, .argsort, .sort\n  * Suppressed duplicated conjugate, ptp, round, expand_dims, apply_along_axis, compress_rowcols, mask_rowcols, vander, polyfit\n........\n  r6112 | pierregm | 2008-11-27 15:56:12 +0900 (Thu, 27 Nov 2008) | 1 line\n  \n  Doc update\n........\n  r6113 | jarrod.millman | 2008-11-27 19:58:51 +0900 (Thu, 27 Nov 2008) | 2 lines\n  \n  add release notes for 1.3\n........\n  r6114 | ptvirtan | 2008-11-28 05:26:04 +0900 (Fri, 28 Nov 2008) | 1 line\n  \n  doc: include release notes to Sphinx build\n........\n  r6115 | charris | 2008-11-28 12:52:16 +0900 (Fri, 28 Nov 2008) | 2 lines\n  \n  Make numpy version of atanh more robust.\n  Numpy log1p still needs a major overhaul.\n........\n  r6116 | charris | 2008-11-28 14:34:33 +0900 (Fri, 28 Nov 2008) | 5 lines\n  \n  Add preliminary docstrings for:\n  log2, exp2, logaddexp, logaddexp2, rad2deg, deg2rad.\n  \n  The complete docstring for fmin and fmax are on the web but\n  haven't yet been merged.\n........\n  r6117 | cdavid | 2008-11-29 01:47:34 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Fix typo in core scons script.\n........\n  r6118 | cdavid | 2008-11-29 01:50:08 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Anoter typo on core scons script.\n........\n  r6119 | stefan | 2008-11-29 21:07:07 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Add memory map support to `load` [patch by Gael Varoquaux].  Closes #954.\n........\n  r6120 | stefan | 2008-11-29 21:07:54 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Add test for load's mmap_mode.\n........\n  r6121 | stefan | 2008-11-29 21:08:29 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Opening a memmap requires a filename.  Raise an error otherwise.\n........\n  r6122 | stefan | 2008-11-29 21:09:07 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Reformat spacing in io tests.\n........\n  r6123 | stefan | 2008-11-29 23:53:44 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Identify file object using 'readline', rather than 'seek'.\n........\n  r6124 | stefan | 2008-11-29 23:54:29 +0900 (Sat, 29 Nov 2008) | 1 line\n  \n  Add bz2 support to loadtxt [patch by Ryan May].\n........\n  r6125 | ptvirtan | 2008-11-30 23:44:38 +0900 (Sun, 30 Nov 2008) | 1 line\n  \n  Move Sphinx extensions under Numpy's SVN trunk\n........\n  r6126 | ptvirtan | 2008-12-01 00:08:38 +0900 (Mon, 01 Dec 2008) | 1 line\n  \n  Rename core/.../docstrings.py to ufunc_docstrings.py\n........\n  r6127 | pierregm | 2008-12-01 18:45:51 +0900 (Mon, 01 Dec 2008) | 1 line\n  \n  Fixed make_mask_descr for nested dtypes\n........\n  r6129 | pierregm | 2008-12-02 02:56:58 +0900 (Tue, 02 Dec 2008) | 2 lines\n  \n  * added flatten_mask to collapse masks w/ (nested) flexible types.\n  * fixed __getitem__ on arrays w/ nested dtype\n........\n  r6130 | pierregm | 2008-12-02 11:40:22 +0900 (Tue, 02 Dec 2008) | 3 lines\n  \n  * Fixed MaskedArray for nested dtype w/ input mask\n  * Fixed masked_all for nested dtype\n  * Fixed masked_all_like for nested dtype\n........\n  r6131 | pierregm | 2008-12-02 17:50:11 +0900 (Tue, 02 Dec 2008) | 1 line\n  \n  * Fixed make_mask_descr for dtype w/ composite names, like [(('A','B'), float)]\n........\n  r6132 | pierregm | 2008-12-03 03:42:12 +0900 (Wed, 03 Dec 2008) | 1 line\n  \n  * Cleaned up make_mask_descr \n........\n  r6133 | ptvirtan | 2008-12-04 06:52:36 +0900 (Thu, 04 Dec 2008) | 1 line\n  \n  Refactor plot:: directive somewhat\n........\n  r6134 | ptvirtan | 2008-12-04 07:15:51 +0900 (Thu, 04 Dec 2008) | 1 line\n  \n  sphinxext: fix a small bug in plot directive\n........\n  r6136 | cdavid | 2008-12-04 12:21:51 +0900 (Thu, 04 Dec 2008) | 1 line\n  \n  Add /arch option to superpack installer to override detected arch.\n........\n  r6137 | ptvirtan | 2008-12-05 08:06:29 +0900 (Fri, 05 Dec 2008) | 1 line\n  \n  sphinxext: support autosummary:: directives in automodule docstrings\n........\n  r6138 | pierregm | 2008-12-06 05:40:44 +0900 (Sat, 06 Dec 2008) | 2 lines\n  \n  * Added MaskError\n  * If a bool or int ndarray is given as the explicit output of var/min/max, an exception is raised if the function should have output np.nan\n........\n  r6140 | ptvirtan | 2008-12-14 01:18:04 +0900 (Sun, 14 Dec 2008) | 1 line\n  \n  Get lstsq and eigvals from numpy.linalg, not from numpy.dual. Addresses Scipy ticket #800\n........\n  r6141 | ptvirtan | 2008-12-14 06:02:05 +0900 (Sun, 14 Dec 2008) | 12 lines\n  \n  docs: fix minor issues, support htmlhelp.\n  \n  - Don't use :members: in automodule; it generates too much\n    and not very useful output\n  \n  - Fix edit links and summarize.py\n  \n  - Add better htmlhelp build target\n  \n  - Add upload target\n  \n  - Fix permissions on make dist\n........\n  r6142 | jarrod.millman | 2008-12-14 19:32:51 +0900 (Sun, 14 Dec 2008) | 2 lines\n  \n  wordsmithing\n........\n  r6143 | jarrod.millman | 2008-12-16 20:21:52 +0900 (Tue, 16 Dec 2008) | 2 lines\n  \n  added missing THANKS for Alan's testing work this summer\n........\n  r6144 | cdavid | 2008-12-17 03:04:24 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  BUG: Do not harcode fortran runtime when copying it on windows. Should fix #969.\n........\n  r6145 | cdavid | 2008-12-17 03:26:13 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  Add a function to get configured target for gfortran.\n........\n  r6146 | cdavid | 2008-12-17 03:32:41 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  Fix get_target.\n........\n  r6147 | cdavid | 2008-12-17 03:41:32 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  Add target specific lib dir for gfortran on windows when msvc is the C compiler.\n........\n  r6148 | cdavid | 2008-12-17 03:48:37 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  Fix overriding of library_dirs.\n........\n  r6149 | cdavid | 2008-12-17 03:53:25 +0900 (Wed, 17 Dec 2008) | 1 line\n  \n  Add mingw32 and mingwex libraries as runtime libraries for extensions which use fortran and are built with gfortran+MS compiler.\n........\n  r6174 | ptvirtan | 2008-12-20 02:58:57 +0900 (Sat, 20 Dec 2008) | 1 line\n  \n  docs: put CHM files in a zip\n........\n  r6175 | ptvirtan | 2008-12-20 22:40:30 +0900 (Sat, 20 Dec 2008) | 1 line\n  \n  test_umath: don't check against cmath on branch cuts, since the behavior of our functions varies across platforms on them\n........\n  r6179 | cdavid | 2008-12-21 15:02:29 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not declare missing functions to avoid mismatch with potentially conflicting, undetected ones\n........\n  r6180 | cdavid | 2008-12-21 15:02:44 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Update comments in umath.\n........\n  r6181 | cdavid | 2008-12-21 15:03:05 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not set function to macro in umath anymore.\n........\n  r6182 | cdavid | 2008-12-21 15:03:19 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not define math func as static: better to have a link error when we have a config problem than having two functions with the same name.\n........\n  r6185 | cdavid | 2008-12-22 01:19:14 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Add doc sources so that sdist tarball contains them.\n........\n  r6186 | pierregm | 2008-12-22 19:01:51 +0900 (Mon, 22 Dec 2008) | 4 lines\n  \n  testutils:\n  assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function.\n  core:\n  * Try not to touch the data in unary/binary ufuncs, (including inplace)\n........\n  r6187 | pearu | 2008-12-22 19:05:00 +0900 (Mon, 22 Dec 2008) | 1 line\n  \n  Fix a bug.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/d10d5631368f97af5babd503371a862eaecce8d6",
        "buggy_code": "points = [-2, 2j, 2, -2j, -1-1j, -1+1j, +1-1j, +1+1j]",
        "fixed_code": "points = [-1-1j, -1+1j, +1-1j, +1+1j]",
        "patch": "@@ -404,7 +404,7 @@ def test_against_cmath(self):\n         if sys.version_info < (2,5,3):\n             broken_cmath_asinh = True\n \n-        points = [-2, 2j, 2, -2j, -1-1j, -1+1j, +1-1j, +1+1j]\n+        points = [-1-1j, -1+1j, +1-1j, +1+1j]\n         name_map = {'arcsin': 'asin', 'arccos': 'acos', 'arctan': 'atan',\n                     'arcsinh': 'asinh', 'arccosh': 'acosh', 'arctanh': 'atanh'}\n         atol = 4*np.finfo(np.complex).eps"
    },
    {
        "commit_id": "44c808f02c55d6a18eaf2cc9ed2e3956e2ac5611",
        "commit_message": "Merged revisions 6174-6175,6179-6182 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r6174 | ptvirtan | 2008-12-20 02:58:57 +0900 (Sat, 20 Dec 2008) | 1 line\n  \n  docs: put CHM files in a zip\n........\n  r6175 | ptvirtan | 2008-12-20 22:40:30 +0900 (Sat, 20 Dec 2008) | 1 line\n  \n  test_umath: don't check against cmath on branch cuts, since the behavior of our functions varies across platforms on them\n........\n  r6179 | cdavid | 2008-12-21 15:02:29 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not declare missing functions to avoid mismatch with potentially conflicting, undetected ones\n........\n  r6180 | cdavid | 2008-12-21 15:02:44 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Update comments in umath.\n........\n  r6181 | cdavid | 2008-12-21 15:03:05 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not set function to macro in umath anymore.\n........\n  r6182 | cdavid | 2008-12-21 15:03:19 +0900 (Sun, 21 Dec 2008) | 1 line\n  \n  Do not define math func as static: better to have a link error when we have a config problem than having two functions with the same name.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/44c808f02c55d6a18eaf2cc9ed2e3956e2ac5611",
        "buggy_code": "points = [-2, 2j, 2, -2j, -1-1j, -1+1j, +1-1j, +1+1j]",
        "fixed_code": "points = [-1-1j, -1+1j, +1-1j, +1+1j]",
        "patch": "@@ -404,7 +404,7 @@ def test_against_cmath(self):\n         if sys.version_info < (2,5,3):\n             broken_cmath_asinh = True\n \n-        points = [-2, 2j, 2, -2j, -1-1j, -1+1j, +1-1j, +1+1j]\n+        points = [-1-1j, -1+1j, +1-1j, +1+1j]\n         name_map = {'arcsin': 'asin', 'arccos': 'acos', 'arctan': 'atan',\n                     'arcsinh': 'asinh', 'arccosh': 'acosh', 'arctanh': 'atanh'}\n         atol = 4*np.finfo(np.complex).eps"
    },
    {
        "commit_id": "45d2c14ee19a23866ef44d4befe9058593c4e15d",
        "commit_message": "Fix macro def.",
        "commit_url": "https://github.com/numpy/numpy/commit/45d2c14ee19a23866ef44d4befe9058593c4e15d",
        "buggy_code": "macros.append(('MS_WIN64',))",
        "fixed_code": "macros.append(('MS_WIN64', None))",
        "patch": "@@ -284,7 +284,7 @@ def build_extension(self, ext):\n         # Py_ModuleInit4_64, etc... So we add it here\n         if self.compiler.compiler_type == 'mingw32' and \\\n            get_build_architecture() == 'AMD64':\n-               macros.append(('MS_WIN64',))\n+               macros.append(('MS_WIN64', None))\n \n         # Set Fortran/C++ compilers for compilation and linking.\n         if ext.language=='f90':"
    },
    {
        "commit_id": "df2acae5a4bcbc4c76ebbeefcfb07f59c9ee2914",
        "commit_message": "Fix typo when getting system32 location.",
        "commit_url": "https://github.com/numpy/numpy/commit/df2acae5a4bcbc4c76ebbeefcfb07f59c9ee2914",
        "buggy_code": "lib_dirs.append(os.path.join(os.environ['SYSTEM_ROOT'], 'system32'))",
        "fixed_code": "lib_dirs.append(os.path.join(os.environ['SYSTEMROOT'], 'system32'))",
        "patch": "@@ -201,7 +201,7 @@ def find_python_dll():\n     lib_dirs = []\n     lib_dirs.append(os.path.join(sys.prefix, 'lib'))\n     try:\n-        lib_dirs.append(os.path.join(os.environ['SYSTEM_ROOT'], 'system32'))\n+        lib_dirs.append(os.path.join(os.environ['SYSTEMROOT'], 'system32'))\n     except KeyError:\n         pass\n "
    },
    {
        "commit_id": "eb1f98d5137ab32de9e1c4201dd0a3d0aadf9b6e",
        "commit_message": "Fix overriding of library_dirs.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb1f98d5137ab32de9e1c4201dd0a3d0aadf9b6e",
        "buggy_code": "opt = GnuFCompiler.get_libraries(self)",
        "fixed_code": "opt = GnuFCompiler.get_library_dirs(self)",
        "patch": "@@ -271,7 +271,7 @@ def get_flags_linker_so(self):\n         return self._add_arches_for_universal_build(flags)\n \n     def get_library_dirs(self):\n-        opt = GnuFCompiler.get_libraries(self)\n+        opt = GnuFCompiler.get_library_dirs(self)\n \tif sys.platform == 'win32':\n \t    c_compiler = self.c_compiler\n \t    if c_compiler and c_compiler.compiler_type == \"msvc\":"
    },
    {
        "commit_id": "0c502d1fbbe52bebe164963dccb41b9cd18ae038",
        "commit_message": "Fix get_target.",
        "commit_url": "https://github.com/numpy/numpy/commit/0c502d1fbbe52bebe164963dccb41b9cd18ae038",
        "buggy_code": "print m.group(1)",
        "fixed_code": "return m.group(1)",
        "patch": "@@ -283,7 +283,7 @@ def get_target(self):\n         if not status:\n \t    m = TARGET_R.search(output)\n \t    if m:\n-\t        print m.group(1)\t\n+\t        return m.group(1)\t\n         return \"\"\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "f91aedb05477b881587ce6f465f3172c85d0c55d",
        "commit_message": "sphinxext: fix a small bug in plot directive",
        "commit_url": "https://github.com/numpy/numpy/commit/f91aedb05477b881587ce6f465f3172c85d0c55d",
        "buggy_code": "app.add_directive('plot', plot_directive, True, (1, 0, False),",
        "fixed_code": "app.add_directive('plot', plot_directive, True, (0, 1, False),",
        "patch": "@@ -81,7 +81,7 @@ def setup(app):\n     app.add_config_value('plot_rcparams', sane_rcparameters, True)\n     app.add_config_value('plot_include_source', False, True)\n \n-    app.add_directive('plot', plot_directive, True, (1, 0, False),\n+    app.add_directive('plot', plot_directive, True, (0, 1, False),\n                       **plot_directive_options)\n \n sane_rcparameters = {"
    },
    {
        "commit_id": "d1cc65d824e701e47a48a35f26655ca6706307d8",
        "commit_message": "* added ddof to np.matrix.var (bug fix #861)",
        "commit_url": "https://github.com/numpy/numpy/commit/d1cc65d824e701e47a48a35f26655ca6706307d8",
        "buggy_code": "return N.ndarray.var(self, axis, dtype, out)._align(axis)",
        "fixed_code": "return N.ndarray.var(self, axis, dtype, out, ddof)._align(axis)",
        "patch": "@@ -480,7 +480,7 @@ def var(self, axis=None, dtype=None, out=None, ddof=0):\n         is taken before squaring, so that the result is always real\n         and nonnegative.\n         \"\"\"\n-        return N.ndarray.var(self, axis, dtype, out)._align(axis)\n+        return N.ndarray.var(self, axis, dtype, out, ddof)._align(axis)\n \n     def prod(self, axis=None, dtype=None, out=None):\n         return N.ndarray.prod(self, axis, dtype, out)._align(axis)"
    },
    {
        "commit_id": "e39cb02e227e168f8b3b55c455820c47e2d6c4c1",
        "commit_message": "Fix ambiguous assert.",
        "commit_url": "https://github.com/numpy/numpy/commit/e39cb02e227e168f8b3b55c455820c47e2d6c4c1",
        "buggy_code": "assert(c.readlines(),",
        "fixed_code": "assert(c.readlines() ==",
        "patch": "@@ -65,7 +65,7 @@ def test_array(self):\n         c = StringIO.StringIO()\n         np.savetxt(c, a)\n         c.seek(0)\n-        assert(c.readlines(),\n+        assert(c.readlines() ==\n                ['1.000000000000000000e+00 2.000000000000000000e+00\\n',\n                 '3.000000000000000000e+00 4.000000000000000000e+00\\n'])\n "
    },
    {
        "commit_id": "968fa253e9d497db0001c6ee84198893cbce5c46",
        "commit_message": "Fix spelling.",
        "commit_url": "https://github.com/numpy/numpy/commit/968fa253e9d497db0001c6ee84198893cbce5c46",
        "buggy_code": "\"Dyscrepancy between linked msvcr \" \\",
        "fixed_code": "\"Discrepancy between linked msvcr \" \\",
        "patch": "@@ -304,7 +304,7 @@ def check_embedded_msvcr_match_linked(msver):\n         maj = int(msvcv[5:6])\n         if not maj == int(msver):\n             raise ValueError, \\\n-                  \"Dyscrepancy between linked msvcr \" \\\n+                  \"Discrepancy between linked msvcr \" \\\n                   \"(%d) and the one about to be embedded \" \\\n                   \"(%d)\" % (int(msver), maj)\n "
    },
    {
        "commit_id": "67ba879a2e62e381c5f285beecdc4bcc69b6daff",
        "commit_message": "Fix configtest and manifest_name.",
        "commit_url": "https://github.com/numpy/numpy/commit/67ba879a2e62e381c5f285beecdc4bcc69b6daff",
        "buggy_code": "check_embedded_msvcr_match_linked, manifest_name, rc_name",
        "fixed_code": "check_embedded_msvcr_match_linked, manifest_name, rc_name, manifest_rc",
        "patch": "@@ -13,7 +13,7 @@\n from distutils.msvccompiler import get_build_version as get_build_msvc_version\n from numpy.distutils.exec_command import exec_command\n from numpy.distutils.mingw32ccompiler import msvc_manifest_xml, \\\n-     check_embedded_msvcr_match_linked, manifest_name, rc_name\n+     check_embedded_msvcr_match_linked, manifest_name, rc_name, manifest_rc\n \n LANG_EXT['f77'] = '.f'\n LANG_EXT['f90'] = '.f90'"
    },
    {
        "commit_id": "3d3ac93dac507fd0b5dd72aae06235e61e4d12fb",
        "commit_message": "Add log2 and exp2.\nFix scimath to use log2.\nComplex versions of these functions need to be added.\nMPL also defines log2 with slightly different properties.\nFor instance, it returns an integer value for log2(2).",
        "commit_url": "https://github.com/numpy/numpy/commit/3d3ac93dac507fd0b5dd72aae06235e61e4d12fb",
        "buggy_code": "return nx.log(x)/_ln2",
        "fixed_code": "return nx.log2(x)",
        "patch": "@@ -328,7 +328,7 @@ def log2(x):\n     array([ 2.+4.5324j,  3.+4.5324j,  3.+0.j    ])\n     \"\"\"\n     x = _fix_real_lt_zero(x)\n-    return nx.log(x)/_ln2\n+    return nx.log2(x)\n \n def power(x, p):\n     \"\"\"Return x**p."
    },
    {
        "commit_id": "db67966deec2965c5ba1aea865ed1690be901bed",
        "commit_message": "Fix typo (g3f->3gf).",
        "commit_url": "https://github.com/numpy/numpy/commit/db67966deec2965c5ba1aea865ed1690be901bed",
        "buggy_code": "exts.append('.so.g3f')",
        "fixed_code": "exts.append('.so.3gf')",
        "patch": "@@ -521,7 +521,7 @@ def library_extensions(self):\n         # Debian and Ubuntu added a g3f suffix to shared library to deal with\n         # g77 -> gfortran ABI transition\n         if sys.platform[:5] == 'linux':\n-            exts.append('.so.g3f')\n+            exts.append('.so.3gf')\n         return exts\n \n     def check_libs(self,lib_dir,libs,opt_libs =[]):"
    },
    {
        "commit_id": "50d1e8edc57b51a42cd82c9ef74a8e799ed36801",
        "commit_message": "Merged revisions 5882-5911 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5886 | charris | 2008-10-02 03:05:29 +0900 (Thu, 02 Oct 2008) | 4 lines\n  \n  Make some error messages more informative.\n  Improve error handling.\n  Make continuation lines work.\n........\n  r5887 | charris | 2008-10-02 03:06:04 +0900 (Thu, 02 Oct 2008) | 2 lines\n  \n  Small cleanup to clarify repeated string.\n........\n  r5888 | charris | 2008-10-02 03:08:41 +0900 (Thu, 02 Oct 2008) | 6 lines\n  \n  Cleanup ufunc loops.\n  At this point loops are separated into variable kinds, so there is a fair amount\n  of duplication. I will probably merge loops that look the same in a later\n  commit. There are no changes to current behavior of loops, this will also be\n  changed in later work to deal with nans and such.\n........\n  r5889 | oliphant | 2008-10-03 05:27:17 +0900 (Fri, 03 Oct 2008) | 1 line\n  \n  Fix problem with subclasses of object arrays.\n........\n  r5896 | cdavid | 2008-10-03 15:50:32 +0900 (Fri, 03 Oct 2008) | 1 line\n  \n  Update the minimum version for numscons: had to change to cope with Chuck changes to conv_template.py.\n........\n  r5897 | cdavid | 2008-10-03 15:51:03 +0900 (Fri, 03 Oct 2008) | 1 line\n  \n  Update doall script: take the python version to build binaries from the command line instead of global variable.\n........\n  r5906 | oliphant | 2008-10-04 00:55:52 +0900 (Sat, 04 Oct 2008) | 1 line\n  \n  Fix ticket #925\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/50d1e8edc57b51a42cd82c9ef74a8e799ed36801",
        "buggy_code": "minver = \"0.9.1\"",
        "fixed_code": "minver = \"0.9.3\"",
        "patch": "@@ -360,7 +360,7 @@ def run(self):\n                                    \"this package \" % str(e))\n \n             try:\n-                minver = \"0.9.1\"\n+                minver = \"0.9.3\"\n                 from numscons import get_version\n                 if get_version() < minver:\n                     raise ValueError()"
    },
    {
        "commit_id": "99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "commit_message": "Merged revisions 5812-5843 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Standardize NumPy import as \"import numpy as np\".\n........\n  r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines\n  \n  Rewrapped __all__ definition to conform to PEP8.\n  Standardize NumPy import as \"import numpy as np\".\n  Removed unused imports.\n  Fixed undefined reference to ndarray (should be np.ndarray).\n  Fixed undefined references to exp (should be math.exp).\n........\n  r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Fixed undefined reference to \"getpackage\" (from nose.util).\n........\n  r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line\n  \n  MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.\n........\n  r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines\n  \n  Added documentation for doctests and using the skipif and knownfailureif decorators.\n  Fixed indentation on the last sample snippet in the \"__init__.py and setup.py\" \n  section.\n........\n  r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Rewrapped __all__ to conform with PEP8.\n  Removed unused imports.\n........\n  r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Removed unused/redundant imports.\n  PEP8 conformance (only one import per line).\n........\n  r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed redundant import.\n........\n  r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  median : fixed a bug in _median1D (there shouldn't have been an axis)\n........\n  r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines\n  \n  ReSTified an URL\n........\n  r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.\n........\n  r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.\n........\n  r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines\n  \n  core:\n  * add dtype to the repr of masked arrays w/ flexible type\n  * prevent __getitem__ to return masked on flexible-type masked array\n  * make sure __str__ returns something sensible for flexible dtype w/ masked fields\n  * simplify the count method\n  \n  mrecords:\n  * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "buggy_code": "from numpy.core.numeric import asarray, ScalarType, array, dtype",
        "fixed_code": "from numpy.core.numeric import asarray, ScalarType, array",
        "patch": "@@ -7,7 +7,7 @@\n \n import sys\n import numpy.core.numeric as _nx\n-from numpy.core.numeric import asarray, ScalarType, array, dtype\n+from numpy.core.numeric import asarray, ScalarType, array\n from numpy.core.numerictypes import find_common_type\n import math\n "
    },
    {
        "commit_id": "99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "commit_message": "Merged revisions 5812-5843 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Standardize NumPy import as \"import numpy as np\".\n........\n  r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines\n  \n  Rewrapped __all__ definition to conform to PEP8.\n  Standardize NumPy import as \"import numpy as np\".\n  Removed unused imports.\n  Fixed undefined reference to ndarray (should be np.ndarray).\n  Fixed undefined references to exp (should be math.exp).\n........\n  r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Fixed undefined reference to \"getpackage\" (from nose.util).\n........\n  r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line\n  \n  MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.\n........\n  r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines\n  \n  Added documentation for doctests and using the skipif and knownfailureif decorators.\n  Fixed indentation on the last sample snippet in the \"__init__.py and setup.py\" \n  section.\n........\n  r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Rewrapped __all__ to conform with PEP8.\n  Removed unused imports.\n........\n  r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Removed unused/redundant imports.\n  PEP8 conformance (only one import per line).\n........\n  r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed redundant import.\n........\n  r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  median : fixed a bug in _median1D (there shouldn't have been an axis)\n........\n  r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines\n  \n  ReSTified an URL\n........\n  r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.\n........\n  r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.\n........\n  r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines\n  \n  core:\n  * add dtype to the repr of masked arrays w/ flexible type\n  * prevent __getitem__ to return masked on flexible-type masked array\n  * make sure __str__ returns something sensible for flexible dtype w/ masked fields\n  * simplify the count method\n  \n  mrecords:\n  * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "buggy_code": "zeros, arange, greater_equal, multiply, ones, asarray",
        "fixed_code": "zeros, greater_equal, multiply, ones, asarray",
        "patch": "@@ -6,7 +6,7 @@\n            'tril','vander','histogram2d']\n \n from numpy.core.numeric import asanyarray, equal, subtract, arange, \\\n-     zeros, arange, greater_equal, multiply, ones, asarray\n+     zeros, greater_equal, multiply, ones, asarray\n \n def fliplr(m):\n     \"\"\""
    },
    {
        "commit_id": "99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "commit_message": "Merged revisions 5812-5843 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Standardize NumPy import as \"import numpy as np\".\n........\n  r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines\n  \n  Rewrapped __all__ definition to conform to PEP8.\n  Standardize NumPy import as \"import numpy as np\".\n  Removed unused imports.\n  Fixed undefined reference to ndarray (should be np.ndarray).\n  Fixed undefined references to exp (should be math.exp).\n........\n  r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Fixed undefined reference to \"getpackage\" (from nose.util).\n........\n  r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line\n  \n  MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.\n........\n  r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines\n  \n  Added documentation for doctests and using the skipif and knownfailureif decorators.\n  Fixed indentation on the last sample snippet in the \"__init__.py and setup.py\" \n  section.\n........\n  r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Rewrapped __all__ to conform with PEP8.\n  Removed unused imports.\n........\n  r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Removed unused/redundant imports.\n  PEP8 conformance (only one import per line).\n........\n  r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed redundant import.\n........\n  r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  median : fixed a bug in _median1D (there shouldn't have been an axis)\n........\n  r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines\n  \n  ReSTified an URL\n........\n  r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.\n........\n  r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.\n........\n  r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines\n  \n  core:\n  * add dtype to the repr of masked arrays w/ flexible type\n  * prevent __getitem__ to return masked on flexible-type masked array\n  * make sure __str__ returns something sensible for flexible dtype w/ masked fields\n  * simplify the count method\n  \n  mrecords:\n  * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "buggy_code": "counts = filled(count(data, axis),0)",
        "fixed_code": "counts = filled(count(data),0)",
        "patch": "@@ -415,7 +415,7 @@ def median(a, axis=None, out=None, overwrite_input=False):\n \n     \"\"\"\n     def _median1D(data):\n-        counts = filled(count(data, axis),0)\n+        counts = filled(count(data),0)\n         (idx, rmd) = divmod(counts, 2)\n         if rmd:\n             choice = slice(idx, idx+1)"
    },
    {
        "commit_id": "99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "commit_message": "Merged revisions 5812-5843 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Standardize NumPy import as \"import numpy as np\".\n........\n  r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines\n  \n  Rewrapped __all__ definition to conform to PEP8.\n  Standardize NumPy import as \"import numpy as np\".\n  Removed unused imports.\n  Fixed undefined reference to ndarray (should be np.ndarray).\n  Fixed undefined references to exp (should be math.exp).\n........\n  r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines\n  \n  Removed unused imports.\n  Fixed undefined reference to \"getpackage\" (from nose.util).\n........\n  r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line\n  \n  MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.\n........\n  r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines\n  \n  Added documentation for doctests and using the skipif and knownfailureif decorators.\n  Fixed indentation on the last sample snippet in the \"__init__.py and setup.py\" \n  section.\n........\n  r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Rewrapped __all__ to conform with PEP8.\n  Removed unused imports.\n........\n  r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines\n  \n  Removed unused/redundant imports.\n  PEP8 conformance (only one import per line).\n........\n  r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines\n  \n  Removed redundant import.\n........\n  r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  median : fixed a bug in _median1D (there shouldn't have been an axis)\n........\n  r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines\n  \n  ReSTified an URL\n........\n  r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.\n........\n  r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line\n  \n  * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.\n........\n  r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines\n  \n  core:\n  * add dtype to the repr of masked arrays w/ flexible type\n  * prevent __getitem__ to return masked on flexible-type masked array\n  * make sure __str__ returns something sensible for flexible dtype w/ masked fields\n  * simplify the count method\n  \n  mrecords:\n  * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/99c765d3be1b7ce73e2a7def0f99af6ae7d6a522",
        "buggy_code": "from numpy.core.numeric import array, correlate",
        "fixed_code": "from numpy.core.numeric import array",
        "patch": "@@ -12,7 +12,7 @@\n \n import numpy.core.multiarray as multiarray\n import numpy.core.umath as um\n-from numpy.core.numeric import array, correlate\n+from numpy.core.numeric import array\n import functions\n import sys\n "
    },
    {
        "commit_id": "0c4ca0c46de9b2c2d598a07cbee20a68a6cebb47",
        "commit_message": "median : fixed a bug in _median1D (there shouldn't have been an axis)",
        "commit_url": "https://github.com/numpy/numpy/commit/0c4ca0c46de9b2c2d598a07cbee20a68a6cebb47",
        "buggy_code": "counts = filled(count(data, axis),0)",
        "fixed_code": "counts = filled(count(data),0)",
        "patch": "@@ -415,7 +415,7 @@ def median(a, axis=None, out=None, overwrite_input=False):\n \n     \"\"\"\n     def _median1D(data):\n-        counts = filled(count(data, axis),0)\n+        counts = filled(count(data),0)\n         (idx, rmd) = divmod(counts, 2)\n         if rmd:\n             choice = slice(idx, idx+1)"
    },
    {
        "commit_id": "0282bcdf737998fcde04e2101f9e44dcf8450888",
        "commit_message": "Merged revisions 5762-5811 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5768 | ptvirtan | 2008-09-05 03:04:35 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Ufunc docstrings: show the 'out' arguments in a more standard way\n........\n  r5769 | alan.mcintyre | 2008-09-05 03:23:48 +0900 (Fri, 05 Sep 2008) | 4 lines\n  \n  Replaced numpy.testing.decorators.skipknownfailure with knownfailureif, \n  which allows flagging tests as known failures rather than skips.\n  Updated test_umath to use knownfailureif.\n........\n  r5770 | alan.mcintyre | 2008-09-05 06:13:29 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Renamed classes to conform to PEP 8.\n........\n  r5771 | alan.mcintyre | 2008-09-05 07:06:01 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Fix link to example.py.\n........\n  r5772 | alan.mcintyre | 2008-09-05 10:20:09 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Remove debugging code.\n........\n  r5788 | dhuard | 2008-09-05 22:58:00 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Applied patch from R. May fixing ticket #905 (loadtxt). Fixed other bug occurring when both usecols and converters are provided. Added related regression tests.\n........\n  r5789 | oliphant | 2008-09-05 23:06:02 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Add final date-time proposal.\n........\n  r5791 | pierregm | 2008-09-06 08:38:44 +0900 (Sat, 06 Sep 2008) | 1 line\n  \n  * fixed deepcopy of masked arrays (bug #906)\n........\n  r5793 | cdavid | 2008-09-07 16:16:28 +0900 (Sun, 07 Sep 2008) | 8 lines\n  \n  scons command: fix one more issue related to build dir.\n  \n  The distutils installation directory relative to the scons build directory was\n  not always computed right. The relative position on the fs does not depend on\n  the source directory (in out-of-place builds), but on the package *name*\n  translated to a directly only.\n........\n  r5796 | pearu | 2008-09-09 19:55:30 +0900 (Tue, 09 Sep 2008) | 1 line\n  \n  Fix typo.\n........\n  r5797 | stefan | 2008-09-09 22:38:34 +0900 (Tue, 09 Sep 2008) | 2 lines\n  \n  FIX: Loadtxt raises on empty input (closes #908).\n........\n  r5799 | alan.mcintyre | 2008-09-10 02:48:47 +0900 (Wed, 10 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5800 | pierregm | 2008-09-10 03:25:15 +0900 (Wed, 10 Sep 2008) | 1 line\n  \n  * make sure that minimum & maximum actually return a MaskedArray\n........\n  r5803 | pierregm | 2008-09-12 04:54:31 +0900 (Fri, 12 Sep 2008) | 1 line\n  \n  * fixed view for MaskedArrays w/ flexible dtype\n........\n  r5804 | jarrod.millman | 2008-09-13 04:20:26 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  FIX: broken links\n........\n  r5805 | jarrod.millman | 2008-09-13 04:23:20 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  FIX: broken links\n........\n  r5806 | alan.mcintyre | 2008-09-13 11:53:53 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  Fix failing doctests.\n........\n  r5807 | alan.mcintyre | 2008-09-13 11:56:33 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  Remove unused imports.\n........\n  r5808 | alan.mcintyre | 2008-09-13 12:40:57 +0900 (Sat, 13 Sep 2008) | 7 lines\n  \n  Removed unused/duplicate imports.\n  Removed repeated members of __all__.\n  Fixed reference to undefined \"out\" in functions.py:take function.\n  Fixed references to undefined \"N\" in functions.py.\n  Rewrapped lines to conform to PEP8.\n  Fixed references to undefined FPE_* constants (from numpy) in util.py.\n........\n  r5809 | cdavid | 2008-09-13 15:03:30 +0900 (Sat, 13 Sep 2008) | 6 lines\n  \n  Fix cygwin compilation\n  \n  Recent version of binutils (2.18.50) do not accept 4 bytes operand for some\n  opcodes like fnstsw (which always expected a 2 bytes operand). Replace the type\n  of the argument from unsigned 2 bytes to unsigned 4 bytes unsigned integer.\n........\n  r5810 | cdavid | 2008-09-13 15:27:46 +0900 (Sat, 13 Sep 2008) | 1 line\n  \n  Tag ctypes load library tests as known failures on cygwin.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/0282bcdf737998fcde04e2101f9e44dcf8450888",
        "buggy_code": "if r: l=l+r('line')",
        "fixed_code": "if r: l=l+r.group('line')",
        "patch": "@@ -327,7 +327,7 @@ def readfortrancode(ffile,dowithline=show,istop=1):\n                 if rl[:4].lower()=='f2py': # f2py directive\n                     l = l + 4*' '\n                     r=commentline.match(rl[4:])\n-                    if r: l=l+r('line')\n+                    if r: l=l+r.group('line')\n                     else: l = l + rl[4:]\n         if l.strip()=='': # Skip empty line\n             cont=0"
    },
    {
        "commit_id": "0282bcdf737998fcde04e2101f9e44dcf8450888",
        "commit_message": "Merged revisions 5762-5811 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5768 | ptvirtan | 2008-09-05 03:04:35 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Ufunc docstrings: show the 'out' arguments in a more standard way\n........\n  r5769 | alan.mcintyre | 2008-09-05 03:23:48 +0900 (Fri, 05 Sep 2008) | 4 lines\n  \n  Replaced numpy.testing.decorators.skipknownfailure with knownfailureif, \n  which allows flagging tests as known failures rather than skips.\n  Updated test_umath to use knownfailureif.\n........\n  r5770 | alan.mcintyre | 2008-09-05 06:13:29 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Renamed classes to conform to PEP 8.\n........\n  r5771 | alan.mcintyre | 2008-09-05 07:06:01 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Fix link to example.py.\n........\n  r5772 | alan.mcintyre | 2008-09-05 10:20:09 +0900 (Fri, 05 Sep 2008) | 2 lines\n  \n  Remove debugging code.\n........\n  r5788 | dhuard | 2008-09-05 22:58:00 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Applied patch from R. May fixing ticket #905 (loadtxt). Fixed other bug occurring when both usecols and converters are provided. Added related regression tests.\n........\n  r5789 | oliphant | 2008-09-05 23:06:02 +0900 (Fri, 05 Sep 2008) | 1 line\n  \n  Add final date-time proposal.\n........\n  r5791 | pierregm | 2008-09-06 08:38:44 +0900 (Sat, 06 Sep 2008) | 1 line\n  \n  * fixed deepcopy of masked arrays (bug #906)\n........\n  r5793 | cdavid | 2008-09-07 16:16:28 +0900 (Sun, 07 Sep 2008) | 8 lines\n  \n  scons command: fix one more issue related to build dir.\n  \n  The distutils installation directory relative to the scons build directory was\n  not always computed right. The relative position on the fs does not depend on\n  the source directory (in out-of-place builds), but on the package *name*\n  translated to a directly only.\n........\n  r5796 | pearu | 2008-09-09 19:55:30 +0900 (Tue, 09 Sep 2008) | 1 line\n  \n  Fix typo.\n........\n  r5797 | stefan | 2008-09-09 22:38:34 +0900 (Tue, 09 Sep 2008) | 2 lines\n  \n  FIX: Loadtxt raises on empty input (closes #908).\n........\n  r5799 | alan.mcintyre | 2008-09-10 02:48:47 +0900 (Wed, 10 Sep 2008) | 2 lines\n  \n  Removed unused imports.\n........\n  r5800 | pierregm | 2008-09-10 03:25:15 +0900 (Wed, 10 Sep 2008) | 1 line\n  \n  * make sure that minimum & maximum actually return a MaskedArray\n........\n  r5803 | pierregm | 2008-09-12 04:54:31 +0900 (Fri, 12 Sep 2008) | 1 line\n  \n  * fixed view for MaskedArrays w/ flexible dtype\n........\n  r5804 | jarrod.millman | 2008-09-13 04:20:26 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  FIX: broken links\n........\n  r5805 | jarrod.millman | 2008-09-13 04:23:20 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  FIX: broken links\n........\n  r5806 | alan.mcintyre | 2008-09-13 11:53:53 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  Fix failing doctests.\n........\n  r5807 | alan.mcintyre | 2008-09-13 11:56:33 +0900 (Sat, 13 Sep 2008) | 2 lines\n  \n  Remove unused imports.\n........\n  r5808 | alan.mcintyre | 2008-09-13 12:40:57 +0900 (Sat, 13 Sep 2008) | 7 lines\n  \n  Removed unused/duplicate imports.\n  Removed repeated members of __all__.\n  Fixed reference to undefined \"out\" in functions.py:take function.\n  Fixed references to undefined \"N\" in functions.py.\n  Rewrapped lines to conform to PEP8.\n  Fixed references to undefined FPE_* constants (from numpy) in util.py.\n........\n  r5809 | cdavid | 2008-09-13 15:03:30 +0900 (Sat, 13 Sep 2008) | 6 lines\n  \n  Fix cygwin compilation\n  \n  Recent version of binutils (2.18.50) do not accept 4 bytes operand for some\n  opcodes like fnstsw (which always expected a 2 bytes operand). Replace the type\n  of the argument from unsigned 2 bytes to unsigned 4 bytes unsigned integer.\n........\n  r5810 | cdavid | 2008-09-13 15:27:46 +0900 (Sat, 13 Sep 2008) | 1 line\n  \n  Tag ctypes load library tests as known failures on cygwin.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/0282bcdf737998fcde04e2101f9e44dcf8450888",
        "buggy_code": "import types, time",
        "fixed_code": "import types",
        "patch": "@@ -1,5 +1,5 @@\n import numpy\n-import types, time\n+import types\n from numpy.ma import *\n from numpy.core.numerictypes import float32\n from numpy.ma.core import umath"
    },
    {
        "commit_id": "b01bf6ffea880fc28daaa6877e2d4653aeab3d7f",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/b01bf6ffea880fc28daaa6877e2d4653aeab3d7f",
        "buggy_code": "if r: l=l+r('line')",
        "fixed_code": "if r: l=l+r.group('line')",
        "patch": "@@ -327,7 +327,7 @@ def readfortrancode(ffile,dowithline=show,istop=1):\n                 if rl[:4].lower()=='f2py': # f2py directive\n                     l = l + 4*' '\n                     r=commentline.match(rl[4:])\n-                    if r: l=l+r('line')\n+                    if r: l=l+r.group('line')\n                     else: l = l + rl[4:]\n         if l.strip()=='': # Skip empty line\n             cont=0"
    },
    {
        "commit_id": "7f5cf316337fc199b86d463f054ba97e1dd3ffed",
        "commit_message": "Merged revisions 5738-5761 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5739 | cdavid | 2008-09-01 21:50:46 +0900 (Mon, 01 Sep 2008) | 1 line\n  \n  Disable memmap test which crashes nose tests on cygwin.\n........\n  r5740 | cdavid | 2008-09-01 22:07:30 +0900 (Mon, 01 Sep 2008) | 2 lines\n  \n  Fix unused variable warning in object_arrtype_new.\n........\n  r5741 | cdavid | 2008-09-02 15:59:43 +0900 (Tue, 02 Sep 2008) | 5 lines\n  \n  Fix regression test #771 on 64 bits architecture.\n  \n  The test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes\n  per item.\n........\n  r5742 | jarrod.millman | 2008-09-03 05:13:17 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  pulling out testing docs from distutils docs\n........\n  r5743 | jarrod.millman | 2008-09-03 05:32:38 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  reindenting prior to release\n........\n  r5745 | jarrod.millman | 2008-09-03 08:52:37 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  trunk is open for 1.3 development\n........\n  r5748 | alan.mcintyre | 2008-09-03 14:10:39 +0900 (Wed, 03 Sep 2008) | 3 lines\n  \n  Fix __init__.py boilerplate example in DISTUTILS.txt, and moved content from \n  SciPy wiki entry on testing guidelines to TESTS.txt.\n........\n  r5749 | alan.mcintyre | 2008-09-03 15:11:28 +0900 (Wed, 03 Sep 2008) | 3 lines\n  \n  Updated TESTS.txt to actually be ReST.\n  Capitalization nitpickery in DISTUTILS.txt: 'Scipy' -> 'SciPy'\n........\n  r5750 | alan.mcintyre | 2008-09-03 16:49:59 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  Added section discussing using subclassing to create similar tests.\n........\n  r5751 | pierregm | 2008-09-04 01:48:52 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  docstring update\n........\n  r5752 | cdavid | 2008-09-04 01:54:37 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Start a nep for warn-free numpy build.\n........\n  r5753 | cdavid | 2008-09-04 22:31:24 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Update the warnfix nep.\n........\n  r5754 | cdavid | 2008-09-04 22:36:53 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Start a nep for cleaning the math configuration.\n........\n  r5755 | cdavid | 2008-09-04 22:49:01 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Update clean math config nep.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/7f5cf316337fc199b86d463f054ba97e1dd3ffed",
        "buggy_code": "assert_equal(b.strides, (12, 4))",
        "fixed_code": "assert_equal(b.strides, (3 * b.itemsize, b.itemsize))",
        "patch": "@@ -847,7 +847,7 @@ def test_copy_detection_corner_case2(self, level=rlevel):\n         \"\"\"Ticket #771: strides are not set correctly when reshaping 0-sized\n         arrays\"\"\"\n         b = np.indices((0,3,4)).T.reshape(-1,3)\n-        assert_equal(b.strides, (12, 4))\n+        assert_equal(b.strides, (3 * b.itemsize, b.itemsize))\n \n     def test_object_array_refcounting(self, level=rlevel):\n         \"\"\"Ticket #633\"\"\""
    },
    {
        "commit_id": "7f5cf316337fc199b86d463f054ba97e1dd3ffed",
        "commit_message": "Merged revisions 5738-5761 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk\n\n........\n  r5739 | cdavid | 2008-09-01 21:50:46 +0900 (Mon, 01 Sep 2008) | 1 line\n  \n  Disable memmap test which crashes nose tests on cygwin.\n........\n  r5740 | cdavid | 2008-09-01 22:07:30 +0900 (Mon, 01 Sep 2008) | 2 lines\n  \n  Fix unused variable warning in object_arrtype_new.\n........\n  r5741 | cdavid | 2008-09-02 15:59:43 +0900 (Tue, 02 Sep 2008) | 5 lines\n  \n  Fix regression test #771 on 64 bits architecture.\n  \n  The test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes\n  per item.\n........\n  r5742 | jarrod.millman | 2008-09-03 05:13:17 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  pulling out testing docs from distutils docs\n........\n  r5743 | jarrod.millman | 2008-09-03 05:32:38 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  reindenting prior to release\n........\n  r5745 | jarrod.millman | 2008-09-03 08:52:37 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  trunk is open for 1.3 development\n........\n  r5748 | alan.mcintyre | 2008-09-03 14:10:39 +0900 (Wed, 03 Sep 2008) | 3 lines\n  \n  Fix __init__.py boilerplate example in DISTUTILS.txt, and moved content from \n  SciPy wiki entry on testing guidelines to TESTS.txt.\n........\n  r5749 | alan.mcintyre | 2008-09-03 15:11:28 +0900 (Wed, 03 Sep 2008) | 3 lines\n  \n  Updated TESTS.txt to actually be ReST.\n  Capitalization nitpickery in DISTUTILS.txt: 'Scipy' -> 'SciPy'\n........\n  r5750 | alan.mcintyre | 2008-09-03 16:49:59 +0900 (Wed, 03 Sep 2008) | 2 lines\n  \n  Added section discussing using subclassing to create similar tests.\n........\n  r5751 | pierregm | 2008-09-04 01:48:52 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  docstring update\n........\n  r5752 | cdavid | 2008-09-04 01:54:37 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Start a nep for warn-free numpy build.\n........\n  r5753 | cdavid | 2008-09-04 22:31:24 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Update the warnfix nep.\n........\n  r5754 | cdavid | 2008-09-04 22:36:53 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Start a nep for cleaning the math configuration.\n........\n  r5755 | cdavid | 2008-09-04 22:49:01 +0900 (Thu, 04 Sep 2008) | 1 line\n  \n  Update clean math config nep.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/7f5cf316337fc199b86d463f054ba97e1dd3ffed",
        "buggy_code": "version='1.2.0'",
        "fixed_code": "version='1.3.0'",
        "patch": "@@ -1,4 +1,4 @@\n-version='1.2.0'\n+version='1.3.0'\n release=False\n \n if not release:"
    },
    {
        "commit_id": "87d85a0dbd8ec019a233ed921cd7cd2d9e6234c4",
        "commit_message": "Fix regression test #771 on 64 bits architecture.\n\nThe test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes\nper item.",
        "commit_url": "https://github.com/numpy/numpy/commit/87d85a0dbd8ec019a233ed921cd7cd2d9e6234c4",
        "buggy_code": "assert_equal(b.strides, (12, 4))",
        "fixed_code": "assert_equal(b.strides, (3 * b.itemsize, b.itemsize))",
        "patch": "@@ -847,7 +847,7 @@ def test_copy_detection_corner_case2(self, level=rlevel):\n         \"\"\"Ticket #771: strides are not set correctly when reshaping 0-sized\n         arrays\"\"\"\n         b = np.indices((0,3,4)).T.reshape(-1,3)\n-        assert_equal(b.strides, (12, 4))\n+        assert_equal(b.strides, (3 * b.itemsize, b.itemsize))\n \n     def test_object_array_refcounting(self, level=rlevel):\n         \"\"\"Ticket #633\"\"\""
    },
    {
        "commit_id": "ec588c7896b70bf07a1b2ee00977ef4bc177729e",
        "commit_message": "Fix regression test for #771.",
        "commit_url": "https://github.com/numpy/numpy/commit/ec588c7896b70bf07a1b2ee00977ef4bc177729e",
        "buggy_code": "assert_equal(b.strides, (24, 4))",
        "fixed_code": "assert_equal(b.strides, (12, 4))",
        "patch": "@@ -847,7 +847,7 @@ def test_copy_detection_corner_case2(self, level=rlevel):\n         \"\"\"Ticket #771: strides are not set correctly when reshaping 0-sized\n         arrays\"\"\"\n         b = np.indices((0,3,4)).T.reshape(-1,3)\n-        assert_equal(b.strides, (24, 4))\n+        assert_equal(b.strides, (12, 4))\n \n     def test_object_array_refcounting(self, level=rlevel):\n         \"\"\"Ticket #633\"\"\""
    },
    {
        "commit_id": "7d8826633219e26bf1f8e2ba07f014c52a1ceb83",
        "commit_message": "Fix the test and fix the arrtype_new code for scalars a little bit.",
        "commit_url": "https://github.com/numpy/numpy/commit/7d8826633219e26bf1f8e2ba07f014c52a1ceb83",
        "buggy_code": "assert d.type == object",
        "fixed_code": "assert d.dtype == object",
        "patch": "@@ -1196,7 +1196,7 @@ def test_for_object_scalar_creation(self, level=rlevel):\n         assert type(b2) is float\n         assert type(c) is np.ndarray\n         assert c.dtype == object\n-        assert d.type == object\n+        assert d.dtype == object\n \n if __name__ == \"__main__\":\n     run_module_suite()"
    },
    {
        "commit_id": "3dcec2dd2de5f41ca913aff8e0c6d9dd56caa952",
        "commit_message": "Fix debug mode with fortran compiler: the tuple for debug was too big, with an extra None (#539)",
        "commit_url": "https://github.com/numpy/numpy/commit/3dcec2dd2de5f41ca913aff8e0c6d9dd56caa952",
        "buggy_code": "debug = ('flags.debug', 'FDEBUG', 'fdebug', None, flaglist),",
        "fixed_code": "debug = ('flags.debug', 'FDEBUG', 'fdebug', flaglist),",
        "patch": "@@ -129,7 +129,7 @@ class FCompiler(CCompiler):\n         arch = ('flags.arch', 'FARCH', 'arch', flaglist),\n         arch_f77 = ('flags.arch_f77', None, None, flaglist),\n         arch_f90 = ('flags.arch_f90', None, None, flaglist),\n-        debug = ('flags.debug', 'FDEBUG', 'fdebug', None, flaglist),\n+        debug = ('flags.debug', 'FDEBUG', 'fdebug', flaglist),\n         debug_f77 = ('flags.debug_f77', None, None, flaglist),\n         debug_f90 = ('flags.debug_f90', None, None, flaglist),\n         flags = ('self.get_flags', 'FFLAGS', 'fflags', flaglist),"
    },
    {
        "commit_id": "11a69c23a29916f0d0721108e34d758e72d56b41",
        "commit_message": "Fix typo in build script for win32.",
        "commit_url": "https://github.com/numpy/numpy/commit/11a69c23a29916f0d0721108e34d758e72d56b41",
        "buggy_code": "\"2.4\" : \"C:\\python24\\python2.4.exe\",",
        "fixed_code": "\"2.4\" : \"C:\\python24\\python24.exe\",",
        "patch": "@@ -13,7 +13,7 @@\n from os.path import join as pjoin, split as psplit, dirname\n \n PYEXECS = {\"2.5\" : \"C:\\python25\\python.exe\",\n-        \"2.4\" : \"C:\\python24\\python2.4.exe\",\n+        \"2.4\" : \"C:\\python24\\python24.exe\",\n         \"2.3\" : \"C:\\python23\\python23.exe\"}\n \n _SSE3_CFG = r\"\"\"[atlas]"
    },
    {
        "commit_id": "1ab04d3ed8d4597922055396a9ba17f00bfc86ad",
        "commit_message": "Fix doctest command continuation line.",
        "commit_url": "https://github.com/numpy/numpy/commit/1ab04d3ed8d4597922055396a9ba17f00bfc86ad",
        "buggy_code": "'formats': ('S1','i4', 'f4')})",
        "fixed_code": "...                'formats': ('S1','i4', 'f4')})",
        "patch": "@@ -270,7 +270,7 @@ def loadtxt(fname, dtype=float, comments='#', delimiter=None, converters=None,\n       >>> X = loadtxt('test.dat')  # data in two columns\n       >>> x,y,z = load('somefile.dat', usecols=(3,5,7), unpack=True)\n       >>> r = np.loadtxt('record.dat', dtype={'names':('gender','age','weight'),\n-                'formats': ('S1','i4', 'f4')})\n+      ...                'formats': ('S1','i4', 'f4')})\n \n     SeeAlso: scipy.io.loadmat to read and write matfiles.\n     \"\"\""
    },
    {
        "commit_id": "2ba50c217e3cae6b5470a28601a27ba1cbb0ab84",
        "commit_message": "Make regression test work for reverted NaN fix.",
        "commit_url": "https://github.com/numpy/numpy/commit/2ba50c217e3cae6b5470a28601a27ba1cbb0ab84",
        "buggy_code": "want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, np.nan+0j])",
        "fixed_code": "want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, 0+0j])",
        "patch": "@@ -1167,7 +1167,7 @@ def check_sign_for_complex_nan(self, level=rlevel):\n         \"\"\"Ticket 794.\"\"\"\n         C = np.array([-np.inf, -2+1j, 0, 2-1j, np.inf, np.nan])\n         have = np.sign(C)\n-        want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, np.nan+0j])\n+        want = np.array([-1+0j, -1+0j, 0+0j, 1+0j, 1+0j, 0+0j])\n         assert_equal(have, want)\n \n "
    },
    {
        "commit_id": "da3677060f54b6ac39db93728b4e9948adeeae6c",
        "commit_message": "BUG: Allow longs as well as ints to satisfy Win64.",
        "commit_url": "https://github.com/numpy/numpy/commit/da3677060f54b6ac39db93728b4e9948adeeae6c",
        "buggy_code": "not numpy.all([isinstance(x, int) for x in d['shape']])):",
        "fixed_code": "not numpy.all([isinstance(x, (int,long)) for x in d['shape']])):",
        "patch": "@@ -244,7 +244,7 @@ def read_array_header_1_0(fp):\n \n     # Sanity-check the values.\n     if (not isinstance(d['shape'], tuple) or\n-        not numpy.all([isinstance(x, int) for x in d['shape']])):\n+        not numpy.all([isinstance(x, (int,long)) for x in d['shape']])):\n         msg = \"shape is not valid: %r\"\n         raise ValueError(msg % (d['shape'],))\n     if not isinstance(d['fortran_order'], bool):"
    },
    {
        "commit_id": "4bc3f39680039a89832eba8bcffc5a2b30176da5",
        "commit_message": "FOR BUILDBOT: More unsavory workarounds for Sparc64. Change back when we've fixed the actual bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/4bc3f39680039a89832eba8bcffc5a2b30176da5",
        "buggy_code": "ndtype = [('i',int), ('s','|S3'), ('f',float)]",
        "fixed_code": "ndtype = [('i',int), ('s','|S8'), ('f',float)]",
        "patch": "@@ -937,7 +937,7 @@ def test_fillvalue(self):\n     def test_fillvalue_exotic_dtype(self):\n         \"Tests yet more exotic flexible dtypes\"\n         _check_fill_value = np.ma.core._check_fill_value\n-        ndtype = [('i',int), ('s','|S3'), ('f',float)]\n+        ndtype = [('i',int), ('s','|S8'), ('f',float)]\n         control = np.array((default_fill_value(0),\n                             default_fill_value('0'),\n                             default_fill_value(0.),),"
    },
    {
        "commit_id": "4bc3f39680039a89832eba8bcffc5a2b30176da5",
        "commit_message": "FOR BUILDBOT: More unsavory workarounds for Sparc64. Change back when we've fixed the actual bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/4bc3f39680039a89832eba8bcffc5a2b30176da5",
        "buggy_code": "easy = mrecarray(1, dtype=[('i',int), ('s','|S3'), ('f',float)])",
        "fixed_code": "easy = mrecarray(1, dtype=[('i',int), ('s','|S8'), ('f',float)])",
        "patch": "@@ -327,7 +327,7 @@ def test_withnames(self):\n     #\n     def test_exotic_formats(self):\n         \"Test that 'exotic' formats are processed properly\"\n-        easy = mrecarray(1, dtype=[('i',int), ('s','|S3'), ('f',float)])\n+        easy = mrecarray(1, dtype=[('i',int), ('s','|S8'), ('f',float)])\n         easy[0] = masked\n         assert_equal(easy.filled(1).item(), (1,'1',1.))\n         #"
    },
    {
        "commit_id": "89bdcf9a990f5aa44b9830ae366f3c02f7b5bd7a",
        "commit_message": "Fix distutils issue on AIX with aix compilers.",
        "commit_url": "https://github.com/numpy/numpy/commit/89bdcf9a990f5aa44b9830ae366f3c02f7b5bd7a",
        "buggy_code": "cxx.linker_so = [cxx.linker_so[0]] + cxx.compiler_cxx[0] \\",
        "fixed_code": "cxx.linker_so = [cxx.linker_so[0], cxx.compiler_cxx[0]] \\",
        "patch": "@@ -299,7 +299,7 @@ def CCompiler_cxx_compiler(self):\n     cxx.compiler_so = [cxx.compiler_cxx[0]] + cxx.compiler_so[1:]\n     if sys.platform.startswith('aix') and 'ld_so_aix' in cxx.linker_so[0]:\n         # AIX needs the ld_so_aix script included with Python\n-        cxx.linker_so = [cxx.linker_so[0]] + cxx.compiler_cxx[0] \\\n+        cxx.linker_so = [cxx.linker_so[0], cxx.compiler_cxx[0]] \\\n                         + cxx.linker_so[2:]\n     else:\n         cxx.linker_so = [cxx.compiler_cxx[0]] + cxx.linker_so[1:]"
    },
    {
        "commit_id": "0c817a5d51c2c16db9df5c015ff846002d991d74",
        "commit_message": "BUG: Correctly stub out urllib2.urlopen() for tests given the refactoring of the local imports.",
        "commit_url": "https://github.com/numpy/numpy/commit/0c817a5d51c2c16db9df5c015ff846002d991d74",
        "buggy_code": "from urllib2 import URLError",
        "fixed_code": "from urllib2 import urlopen, URLError",
        "patch": "@@ -341,7 +341,7 @@ def exists(self, path):\n         \"\"\"\n         # We import this here because importing urllib2 is slow and\n         # a significant fraction of numpy's total import time.\n-        from urllib2 import URLError\n+        from urllib2 import urlopen, URLError\n \n         # Test local path\n         if os.path.exists(path):"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from testing.pkgtester import Tester",
        "fixed_code": "from testing import Tester",
        "patch": "@@ -95,7 +95,7 @@ def pkgload(*packages, **options):\n \n     pkgload.__doc__ = PackageLoader.__call__.__doc__\n \n-    from testing.pkgtester import Tester\n+    from testing import Tester\n     test = Tester().test\n     bench = Tester().bench\n "
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -31,6 +31,6 @@\n __all__ += char.__all__\n \n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -260,4 +260,4 @@ def test_list_indexing(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -54,4 +54,4 @@ def foo(*args):\n \"\"\"\r\n \r\n if __name__ == \"__main__\":\r\n-    nose.run(argv=['', __file__])\r\n+    run_module_suite()\r"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -893,4 +893,4 @@ def __array_finalize__(self, obj):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -1154,4 +1154,4 @@ def test_char_array_creation(self, level=rlevel):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -113,4 +113,4 @@ def test_float_repr(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -234,4 +234,4 @@ def test_all_ufunc(self) :\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -222,4 +222,4 @@ def test_attributes(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -320,5 +320,5 @@ class test_byteorder_1009_ucs4(byteorder_values, TestCase):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()\n     "
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -15,6 +15,6 @@\n     _INSTALLED = False\n \n if _INSTALLED:\n-    from numpy.testing.pkgtester import Tester\n+    from numpy.testing import Tester\n     test = Tester().test\n     bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -10,4 +10,4 @@ def test_fib(self):\n         assert_array_equal(fib2.fib(6),[0,1,1,2,3,5])\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -10,4 +10,4 @@ def test_foo_free(self):\n         assert_equal(foo.foo_free.bar13(),13)\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -10,4 +10,4 @@ def test_fib(self):\n         assert_array_equal(fib3.fib(6),[0,1,1,2,3,5])\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -10,4 +10,4 @@ def test_simple(self, level=1):\n         l = primes(10)\n         assert_equal(l, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -15,4 +15,4 @@ def test_cvar(self):\n         assert_equal(example.cvar.My_variable,5.0)\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -14,4 +14,4 @@ def test_zoo(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -49,4 +49,4 @@ def test_not_gfortran(self):\n \n \n if __name__ == '__main__':\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -58,4 +58,4 @@ def test_gpaths(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -2098,4 +2098,4 @@ def test_simple(self):\n     print '-----'\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -494,4 +494,4 @@ def test_implicit(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -71,4 +71,4 @@ def test_foo2_simple(self, level=1):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -58,4 +58,4 @@ def test_foo_simple(self, level=1):\n         foo()\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -55,4 +55,4 @@ def test_foo2_simple(self, level=1):\n         assert_equal(r,4)\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -530,4 +530,4 @@ def _check_foo_string0(self, level=1):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -527,4 +527,4 @@ def test_foo_string0(self, level=1):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -513,4 +513,4 @@ class test_%s_gen(unittest.TestCase,\n ''' % (t,t,t)\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -4,6 +4,6 @@\n from fftpack import *\n from helper import *\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -23,4 +23,4 @@ def test_basic(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -42,4 +42,4 @@ def test_definition(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -34,7 +34,7 @@\n __all__ += io.__all__\n __all__ += financial.__all__\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench\n "
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -172,4 +172,4 @@ def test_manyways( self ):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -37,4 +37,4 @@ def test():\n     doctest.testmod()\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -509,4 +509,4 @@ def test_read_version_1_0_bad_magic():\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -624,4 +624,4 @@ def test_0d(self):\n         assert y == 0\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -52,4 +52,4 @@ def test_unsigned_max(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -198,4 +198,4 @@ def test_record_3(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -28,4 +28,4 @@ def test_underlow(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -446,4 +446,4 @@ def compare_results(res,desired):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -278,4 +278,4 @@ def test_asfarray(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -3,6 +3,6 @@\n \n from linalg import *\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().test"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -205,4 +205,4 @@ def test_square(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -56,4 +56,4 @@ def test_svd_build(self, level = rlevel):\n \n \n if __name__ == '__main__':\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -21,6 +21,6 @@\n __all__ += core.__all__\n __all__ += extras.__all__\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -2147,4 +2147,4 @@ def test_mask_element(self):\n ###############################################################################\n #------------------------------------------------------------------------------\n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -385,4 +385,4 @@ def test_polyfit(self):\n ###############################################################################\n #------------------------------------------------------------------------------\n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -429,4 +429,4 @@ def test_addfield(self):\n ###############################################################################\n #------------------------------------------------------------------------------\n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -866,4 +866,4 @@ def eqmask(m1, m2):\n #testinplace.test_name = 'Inplace operations'\n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -154,7 +154,7 @@ def test_subclasspreservation(self):\n \n ################################################################################\n if __name__ == '__main__':\n-    nose.run(argv=['', __file__])\n+    run_module_suite()\n \n     if 0:\n         x = array(arange(5), mask=[0]+[1]*4)"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -25,6 +25,6 @@\n del ufuncs\n del compat\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -40,6 +40,6 @@ def _move_axis_to_0(a, axis):\n del ufuncs\n del misc\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -83,4 +83,4 @@ def test_oldtypes(self, level=1):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "from numpy.testing.pkgtester import Tester",
        "fixed_code": "from numpy.testing import Tester",
        "patch": "@@ -13,6 +13,6 @@ def __RandomState_ctor():\n     \"\"\"\n     return RandomState()\n \n-from numpy.testing.pkgtester import Tester\n+from numpy.testing import Tester\n test = Tester().test\n bench = Tester().bench"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -62,4 +62,4 @@ def test_backwards_compatibility(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -163,4 +163,4 @@ def test_catch_no_raise(self):\n \n \n if __name__ == '__main__':\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "commit_message": "Restore old test framework classes.\nAdded numpy.testing.run_module_suite to simplify \"if __name__ == '__main__'\" boilerplate code in test \nmodules.\nRemoved numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424.\nAllow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments \nare seen).\nnumpy.*.test() returns a test result object as before.\nFixed typo in distutils doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/af7f89ea35ae9dbf38682d3215a20cc13ab0890c",
        "buggy_code": "nose.run(argv=['', __file__])",
        "fixed_code": "run_module_suite()",
        "patch": "@@ -85,4 +85,4 @@ def test_flags(self):\n \n \n if __name__ == \"__main__\":\n-    nose.run(argv=['', __file__])\n+    run_module_suite()"
    },
    {
        "commit_id": "ae31c236681a2f2c652bd63c4e568f35085248c5",
        "commit_message": "Fix ticket #789 again.",
        "commit_url": "https://github.com/numpy/numpy/commit/ae31c236681a2f2c652bd63c4e568f35085248c5",
        "buggy_code": "except ValueError:",
        "fixed_code": "except TypeError:",
        "patch": "@@ -1050,7 +1050,7 @@ def check_compress_small_type(self, level=rlevel):\n             raise AssertionError(\"compress with an out which cannot be \" \\\n                                  \"safely casted should not return \"\\\n                                  \"successfully\")\n-        except ValueError:\n+        except TypeError:\n             pass\n \n         "
    },
    {
        "commit_id": "87fddf4db1ea174df3428685baeb30586a30541b",
        "commit_message": "Fix typo when passing bootstrapping option to scons.",
        "commit_url": "https://github.com/numpy/numpy/commit/87fddf4db1ea174df3428685baeb30586a30541b",
        "buggy_code": "cmd.append('boostrapping=%d' % bootstrap)",
        "fixed_code": "cmd.append('bootstrapping=%d' % bootstrap)",
        "patch": "@@ -380,7 +380,7 @@ def run(self):\n                 elif int(self.silent) == 3:\n                     cmd.append('-s')\n             cmd.append('silent=%d' % int(self.silent))\n-            cmd.append('boostrapping=%d' % bootstrap)\n+            cmd.append('bootstrapping=%d' % bootstrap)\n             cmdstr = ' '.join(cmd)\n             if int(self.silent) < 1:\n                 log.info(\"Executing scons command (pkg is %s): %s \", pkg_name, cmdstr)"
    },
    {
        "commit_id": "89f1a4e66ffaefe0ce7fe969df55821d7b853ba9",
        "commit_message": "Fix math in Bartlett docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/89f1a4e66ffaefe0ce7fe969df55821d7b853ba9",
        "buggy_code": ".. math:: w(n) = \\frac{2}{M-1} (\\frac{M-1}{2} - |n - \\frac{M-1}{2}|)",
        "fixed_code": ".. math:: w(n) = \\\\frac{2}{M-1} (\\\\frac{M-1}{2} - |n - \\\\frac{M-1}{2}|)",
        "patch": "@@ -1226,7 +1226,7 @@ def bartlett(M):\n     -----\n     The Bartlett window is defined as\n \n-    .. math:: w(n) = \\frac{2}{M-1} (\\frac{M-1}{2} - |n - \\frac{M-1}{2}|)\n+    .. math:: w(n) = \\\\frac{2}{M-1} (\\\\frac{M-1}{2} - |n - \\\\frac{M-1}{2}|)\n \n     Most references to the Bartlett window come from the signal\n     processing literature, where it is used as one of many windowing"
    },
    {
        "commit_id": "f83cffb4d354e1d0b9fed801f36be967bae8b1fe",
        "commit_message": "get_build_architecture is not available in python 2.4 and older, so use numpy.distutils one. This should fix undiscovered/not reported bug of building numpy with python 2.4 on windows systems.",
        "commit_url": "https://github.com/numpy/numpy/commit/f83cffb4d354e1d0b9fed801f36be967bae8b1fe",
        "buggy_code": "from distutils.msvccompiler import get_build_architecture",
        "fixed_code": "from numpy.distutils.misc_util import get_build_architecture",
        "patch": "@@ -115,7 +115,7 @@ def check_func(func_name):\n                 moredefs.append('__NPY_PRIVATE_NO_SIGNAL')\n \n             if sys.platform=='win32' or os.name=='nt':\n-                from distutils.msvccompiler import get_build_architecture\n+                from numpy.distutils.misc_util import get_build_architecture\n                 a = get_build_architecture()\n                 print 'BUILD_ARCHITECTURE: %r, os.name=%r, sys.platform=%r' % (a, os.name, sys.platform)\n                 if a == 'AMD64':"
    },
    {
        "commit_id": "04fb428606f1af32f2de28c1c2afe2dadf9e7747",
        "commit_message": "Fix the unit tests and eliminate the dimensionality reduction assumption for non base-class arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/04fb428606f1af32f2de28c1c2afe2dadf9e7747",
        "buggy_code": "assert_equal(x.ndim, 1)",
        "fixed_code": "assert_equal(x.ndim, 2)",
        "patch": "@@ -187,7 +187,7 @@ def setUp(self):\n     def check_dimesions(self):\n         a = self.a\n         x = a[0]\n-        assert_equal(x.ndim, 1)\n+        assert_equal(x.ndim, 2)\n \n     def check_array_from_matrix_list(self):\n         a = self.a"
    },
    {
        "commit_id": "06c0d0e97c7781cc81be38c1d3124890822b303f",
        "commit_message": "Fix test of lstsqr to work with matrix tests.\nFix lstsq",
        "commit_url": "https://github.com/numpy/numpy/commit/06c0d0e97c7781cc81be38c1d3124890822b303f",
        "buggy_code": "assert_almost_equal(sv, s)",
        "fixed_code": "assert_almost_equal(sv, sv.__array_wrap__(s))",
        "patch": "@@ -144,7 +144,7 @@ def do(self, a, b):\n         x, residuals, rank, sv = linalg.lstsq(a, b)\n         assert_almost_equal(b, dot(a, x))\n         assert_equal(rank, asarray(a).shape[0])\n-        assert_almost_equal(sv, s)\n+        assert_almost_equal(sv, sv.__array_wrap__(s))\n         assert imply(isinstance(b, matrix), isinstance(x, matrix))\n         assert imply(isinstance(b, matrix), isinstance(residuals, matrix))\n         assert imply(isinstance(b, matrix), isinstance(sv, matrix))"
    },
    {
        "commit_id": "db8970d31304fe06bdef3abed9e95d8f67d2729f",
        "commit_message": "Fix bug in parsing initexpr in 'INTEGER, PARAMETER :: ny = nx + 2'",
        "commit_url": "https://github.com/numpy/numpy/commit/db8970d31304fe06bdef3abed9e95d8f67d2729f",
        "buggy_code": "((expr[i+1] in \"()[]{}= \") or (expr[i-1] in \"()[]{}= \")): continue",
        "fixed_code": "((expr[i+1] in \"()[]{}=+-/* \") or (expr[i-1] in \"()[]{}=+-/* \")): continue",
        "patch": "@@ -1202,7 +1202,7 @@ def removespaces(expr):\n     expr2=expr[0]\n     for i in range(1,len(expr)-1):\n         if expr[i]==' ' and \\\n-           ((expr[i+1] in \"()[]{}= \") or (expr[i-1] in \"()[]{}= \")): continue\n+           ((expr[i+1] in \"()[]{}=+-/* \") or (expr[i-1] in \"()[]{}=+-/* \")): continue\n         expr2=expr2+expr[i]\n     expr2=expr2+expr[-1]\n     return expr2"
    },
    {
        "commit_id": "032390044e1d990da1b571b9a8f150464e479d67",
        "commit_message": "Fix a long-standing typo preventing the build of scipy.stats.mvn. Sorry Stefan, no unittest; the original code is not amenable to unittests without a large refactoring.",
        "commit_url": "https://github.com/numpy/numpy/commit/032390044e1d990da1b571b9a8f150464e479d67",
        "buggy_code": "args=rmbadname([x.strip() for x in markoutercomma(args).strip('@,@')])",
        "fixed_code": "args=rmbadname([x.strip() for x in markoutercomma(args).split('@,@')])",
        "patch": "@@ -864,7 +864,7 @@ def analyzeline(m,case,line):\n         name,args,result=_resolvenameargspattern(m.group('after'))\n         if name is not None:\n             if args:\n-                args=rmbadname([x.strip() for x in markoutercomma(args).strip('@,@')])\n+                args=rmbadname([x.strip() for x in markoutercomma(args).split('@,@')])\n             else: args=[]\n             assert result is None,`result`\n             groupcache[groupcounter]['entry'][name] = args"
    },
    {
        "commit_id": "338ae1945ab337d49c816660f0afb4398d721caf",
        "commit_message": "Fixing compile error from MSVC.",
        "commit_url": "https://github.com/numpy/numpy/commit/338ae1945ab337d49c816660f0afb4398d721caf",
        "buggy_code": "lapack_info = get_info('lapack_opt',0)",
        "fixed_code": "lapack_info = get_info('lapack_opt',0) # and {}",
        "patch": "@@ -7,7 +7,7 @@ def configuration(parent_package='',top_path=None):\n     config.add_data_dir('tests')\n \n     # Configure lapack_lite\n-    lapack_info = get_info('lapack_opt',0)\n+    lapack_info = get_info('lapack_opt',0) # and {}\n     def get_lapack_lite_sources(ext, build_dir):\n         if not lapack_info:\n             print \"### Warning:  Using unoptimized lapack ###\""
    },
    {
        "commit_id": "d396f126cc9ac2f215c1363a8f8650d6c4e6c161",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/d396f126cc9ac2f215c1363a8f8650d6c4e6c161",
        "buggy_code": "return new_take(a, indices, axis=0)",
        "fixed_code": "return new_take(a, indices, axis)",
        "patch": "@@ -2264,6 +2264,6 @@ def average(a, axis=0, weights=None, returned=0):\n     return new_average(a, axis, weights, returned)\n \n def take(a, indices, axis=0):\n-    return new_take(a, indices, axis=0)\n+    return new_take(a, indices, axis)\n \n "
    },
    {
        "commit_id": "1b8a670793e06d3450bacc499fad5f074a95c8e7",
        "commit_message": "added 1D tests for loadtxt and savetxt. Fixed a bug",
        "commit_url": "https://github.com/numpy/numpy/commit/1b8a670793e06d3450bacc499fad5f074a95c8e7",
        "buggy_code": "if len(X.shape)==1 and not hasattr(X.dtype, 'names'):",
        "fixed_code": "if len(X.shape)==1 and X.dtype.names is None:",
        "patch": "@@ -353,7 +353,7 @@ def savetxt(fname, X, fmt='%.18e',delimiter=' '):\n \n     X = np.asarray(X)\n     origShape = None\n-    if len(X.shape)==1 and not hasattr(X.dtype, 'names'):\n+    if len(X.shape)==1 and X.dtype.names is None:\n         origShape = X.shape\n         X.shape = len(X), 1\n     for row in X:"
    },
    {
        "commit_id": "02ea9dd3d3a8f019dd15b103f5da4a870dc98158",
        "commit_message": "Fix ticket #676: flattening in Fortran order for ndim > 2",
        "commit_url": "https://github.com/numpy/numpy/commit/02ea9dd3d3a8f019dd15b103f5da4a870dc98158",
        "buggy_code": "if issubdtype(t, np.integer):",
        "fixed_code": "if np.issubdtype(t, np.integer):",
        "patch": "@@ -48,7 +48,7 @@ def check_large_types(self):\n             a = t(51)\n             b = a ** 4\n             msg = \"error with %r: got %r\" % (t,b)\n-            if issubdtype(t, np.integer):\n+            if np.issubdtype(t, np.integer):\n                 assert b == 6765201, msg\n             else:\n                 assert_almost_equal(b, 6765201, err_msg=msg)"
    },
    {
        "commit_id": "53cf422a4647cbd97ef7118a22bf963295fd0ad0",
        "commit_message": "Fix typo from last checkin.",
        "commit_url": "https://github.com/numpy/numpy/commit/53cf422a4647cbd97ef7118a22bf963295fd0ad0",
        "buggy_code": "shape = [int(x) for x in ln[1:])",
        "fixed_code": "shape = [int(x) for x in ln[1:]]",
        "patch": "@@ -81,7 +81,7 @@ def _LoadArray(fp):\n     typecode = ln[0][0]\n     endian = ln[0][1]\n     itemsize = int(ln[0][2:])\n-    shape = [int(x) for x in ln[1:])\n+    shape = [int(x) for x in ln[1:]]\n     sz = itemsize\n     for val in shape:\n         sz *= val"
    },
    {
        "commit_id": "a70012ade70ba9912061ad2bac3e2a8196c72823",
        "commit_message": "Fix order of arguments to test.",
        "commit_url": "https://github.com/numpy/numpy/commit/a70012ade70ba9912061ad2bac3e2a8196c72823",
        "buggy_code": "if not (val == 0 and val2 < 1e-100):",
        "fixed_code": "if not (val2 == 0 and val < 1e-100):",
        "patch": "@@ -105,7 +105,7 @@ def check_float_repr(self):\n                     # through a Python float, which will lose\n                     # precision\n                     continue\n-                if not (val == 0 and val2 < 1e-100):\n+                if not (val2 == 0 and val < 1e-100):\n                     assert_equal(val, val2)\n \n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "c9e6f3025b235055336cb5a05c170128e0ec9a91",
        "commit_message": "Fix typo (bug #704).",
        "commit_url": "https://github.com/numpy/numpy/commit/c9e6f3025b235055336cb5a05c170128e0ec9a91",
        "buggy_code": "if self.compiler is not None:",
        "fixed_code": "if self.fcompiler is not None:",
        "patch": "@@ -79,7 +79,7 @@ def run(self):\n                                            force=self.force,\n                                            requiref90='f90' in languages,\n                                            c_compiler=self.compiler)\n-            if self.compiler is not None:\n+            if self.fcompiler is not None:\n                 self.fcompiler.customize(self.distribution)\n \n                 libraries = self.libraries"
    },
    {
        "commit_id": "4f9812e079bf6331f99b6ba2b18836ad7b707636",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/4f9812e079bf6331f99b6ba2b18836ad7b707636",
        "buggy_code": "np.long('0x' + 'f'*i_width,16)",
        "fixed_code": "long('0x' + 'f'*i_width,16)",
        "patch": "@@ -194,7 +194,7 @@ def check_mem_digitize(self,level=rlevel):\n     def check_intp(self,level=rlevel):\n         \"\"\"Ticket #99\"\"\"\n         i_width = np.int_(0).nbytes*2 - 1\n-        np.long('0x' + 'f'*i_width,16)\n+        long('0x' + 'f'*i_width,16)\n         self.failUnlessRaises(OverflowError,np.intp,'0x' + 'f'*(i_width+1),16)\n         self.failUnlessRaises(ValueError,np.intp,'0x1',32)\n         assert_equal(255,np.long('0xFF',16))"
    },
    {
        "commit_id": "cde8f10cce8762758792a1181287eea55fb14b61",
        "commit_message": "Fix another occurrence of intp in the regression tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/cde8f10cce8762758792a1181287eea55fb14b61",
        "buggy_code": "np.intp('0x' + 'f'*i_width,16)",
        "fixed_code": "np.long('0x' + 'f'*i_width,16)",
        "patch": "@@ -194,7 +194,7 @@ def check_mem_digitize(self,level=rlevel):\n     def check_intp(self,level=rlevel):\n         \"\"\"Ticket #99\"\"\"\n         i_width = np.int_(0).nbytes*2 - 1\n-        np.intp('0x' + 'f'*i_width,16)\n+        np.long('0x' + 'f'*i_width,16)\n         self.failUnlessRaises(OverflowError,np.intp,'0x' + 'f'*(i_width+1),16)\n         self.failUnlessRaises(ValueError,np.intp,'0x1',32)\n         assert_equal(255,np.long('0xFF',16))"
    },
    {
        "commit_id": "d1eeb416dc067c0dda65a2904c8942ee2a20b381",
        "commit_message": "BUG: Python 2.3 compatibility. We cannot use generator expressions in numpy.",
        "commit_url": "https://github.com/numpy/numpy/commit/d1eeb416dc067c0dda65a2904c8942ee2a20b381",
        "buggy_code": "tmp = numpy.fromiter((g[1] for g in group), int_)",
        "fixed_code": "tmp = numpy.array([g[1] for g in group], int_)",
        "patch": "@@ -756,7 +756,7 @@ def flatnotmasked_contiguous(a):\n         return None\n     result = []\n     for k, group in groupby(enumerate(unmasked), lambda (i,x):i-x):\n-        tmp = numpy.fromiter((g[1] for g in group), int_)\n+        tmp = numpy.array([g[1] for g in group], int_)\n #        result.append((tmp.size, tuple(tmp[[0,-1]])))\n         result.append( slice(tmp[0],tmp[-1]) )\n     result.sort()"
    },
    {
        "commit_id": "1cc67dd9c8a9c65e511b6a363915688378ba7938",
        "commit_message": "Fix bug reported by Debian package maintainer.",
        "commit_url": "https://github.com/numpy/numpy/commit/1cc67dd9c8a9c65e511b6a363915688378ba7938",
        "buggy_code": "ni = ash[axis]",
        "fixed_code": "ni = len(ash)",
        "patch": "@@ -375,7 +375,7 @@ def average(a, axis=None, weights=None, returned=False):\n                 n = add.reduce(a*w, axis)\n                 d = add.reduce(w, axis)\n             elif wsh == (ash[axis],):\n-                ni = ash[axis]\n+                ni = len(ash)\n                 r = [newaxis]*ni\n                 r[axis] = slice(None, None, 1)\n                 w1 = eval(\"w[\"+repr(tuple(r))+\"]*ones(ash, float)\")"
    },
    {
        "commit_id": "90543a643b80acd8fcb3a1288a7defef6c541352",
        "commit_message": "Fix missing mean for median calculation, missing dtype from defmatrix mean signature",
        "commit_url": "https://github.com/numpy/numpy/commit/90543a643b80acd8fcb3a1288a7defef6c541352",
        "buggy_code": "from numpy.core.fromnumeric import ravel, nonzero, choose, sort",
        "fixed_code": "from numpy.core.fromnumeric import ravel, nonzero, choose, sort, mean",
        "patch": "@@ -20,7 +20,7 @@\n      integer, isscalar\n from numpy.core.umath import pi, multiply, add, arctan2,  \\\n      frompyfunc, isnan, cos, less_equal, sqrt, sin, mod, exp, log10\n-from numpy.core.fromnumeric import ravel, nonzero, choose, sort\n+from numpy.core.fromnumeric import ravel, nonzero, choose, sort, mean\n from numpy.core.numerictypes import typecodes\n from numpy.lib.shape_base import atleast_1d, atleast_2d\n from numpy.lib.twodim_base import diag"
    },
    {
        "commit_id": "2b608e1965ec4effbcf0e69fc1108339acf7f9c9",
        "commit_message": "Fix, uncomment import in median doctest",
        "commit_url": "https://github.com/numpy/numpy/commit/2b608e1965ec4effbcf0e69fc1108339acf7f9c9",
        "buggy_code": ">>> # import numpy median as median",
        "fixed_code": ">>> from numpy import median",
        "patch": "@@ -1245,7 +1245,7 @@ def median(a, axis=0, out=None, overwrite_input=False):\n     Examples\n     --------\n     >>> import numpy as np\n-    >>> # import numpy median as median\n+    >>> from numpy import median\n     >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n     >>> a\n     array([[10,  7,  4],"
    },
    {
        "commit_id": "6068062d38539263adf4b32f010123e5cc3a5697",
        "commit_message": "Fix concatenator usage (patch by Pierre).\nChange N to np in regression test.",
        "commit_url": "https://github.com/numpy/numpy/commit/6068062d38539263adf4b32f010123e5cc3a5697",
        "buggy_code": "x = N.ma.array(1,mask=[1])",
        "fixed_code": "x = np.ma.array(1,mask=[1])",
        "patch": "@@ -110,7 +110,7 @@ def check_bool(self,level=rlevel):\n \n     def check_masked_array(self,level=rlevel):\n         \"\"\"Ticket #61\"\"\"\n-        x = N.ma.array(1,mask=[1])\n+        x = np.ma.array(1,mask=[1])\n \n     def check_mem_masked_where(self,level=rlevel):\n         \"\"\"Ticket #62\"\"\""
    },
    {
        "commit_id": "4fc786ed80c5b26c8457f8f65bdf58ad67c64b8e",
        "commit_message": "Fix benchmarks.  Remove remaining imports of maskedarray.",
        "commit_url": "https://github.com/numpy/numpy/commit/4fc786ed80c5b26c8457f8f65bdf58ad67c64b8e",
        "buggy_code": "from maskedarray.testutils import assert_equal, assert_almost_equal",
        "fixed_code": "from numpy.ma.testutils import assert_equal, assert_almost_equal",
        "patch": "@@ -2920,7 +2920,7 @@ def loads(strg):\n ###############################################################################\n \n if __name__ == '__main__':\n-    from maskedarray.testutils import assert_equal, assert_almost_equal\n+    from numpy.ma.testutils import assert_equal, assert_almost_equal\n \n     # Small arrays ..................................\n     xs = numpy.random.uniform(-1,1,6).reshape(2,3)"
    },
    {
        "commit_id": "4fc786ed80c5b26c8457f8f65bdf58ad67c64b8e",
        "commit_message": "Fix benchmarks.  Remove remaining imports of maskedarray.",
        "commit_url": "https://github.com/numpy/numpy/commit/4fc786ed80c5b26c8457f8f65bdf58ad67c64b8e",
        "buggy_code": "from maskedarray.testutils import assert_equal",
        "fixed_code": "from numpy.ma.testutils import assert_equal",
        "patch": "@@ -714,7 +714,7 @@ def notmasked_contiguous(a, axis=None):\n if __name__ == '__main__':\n     #\n     import numpy as N\n-    from maskedarray.testutils import assert_equal\n+    from numpy.ma.testutils import assert_equal\n     if 1:\n         b = ones(5)\n         m = [1,0,0,0,0]"
    },
    {
        "commit_id": "703e8d6323b19cbfeb96772c1e35f1cd68629336",
        "commit_message": "Move ma to numpy root.  Fix unit tests.  Remove references to numpy.core.ma.",
        "commit_url": "https://github.com/numpy/numpy/commit/703e8d6323b19cbfeb96772c1e35f1cd68629336",
        "buggy_code": "from numpy import bool_, complex_, float_, int_, object_, str_",
        "fixed_code": "from numpy.core import bool_, complex_, float_, int_, object_, str_",
        "patch": "@@ -65,7 +65,7 @@\n import operator\n #\n import numpy\n-from numpy import bool_, complex_, float_, int_, object_, str_\n+from numpy.core import bool_, complex_, float_, int_, object_, str_\n \n import numpy.core.umath as umath\n import numpy.core.fromnumeric  as fromnumeric"
    },
    {
        "commit_id": "703e8d6323b19cbfeb96772c1e35f1cd68629336",
        "commit_message": "Move ma to numpy root.  Fix unit tests.  Remove references to numpy.core.ma.",
        "commit_url": "https://github.com/numpy/numpy/commit/703e8d6323b19cbfeb96772c1e35f1cd68629336",
        "buggy_code": "config = Configuration('maskedarray',parent_package,top_path)",
        "fixed_code": "config = Configuration('ma',parent_package,top_path)",
        "patch": "@@ -8,7 +8,7 @@\n \n def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n-    config = Configuration('maskedarray',parent_package,top_path)\n+    config = Configuration('ma',parent_package,top_path)\n     config.add_data_dir('tests')\n     return config\n "
    },
    {
        "commit_id": "89fa0fd46c1f422af824484e19ac62fe0492842f",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/89fa0fd46c1f422af824484e19ac62fe0492842f",
        "buggy_code": "if word not in words and word not in vars:",
        "fixed_code": "if word not in words and word in vars:",
        "patch": "@@ -1876,7 +1876,7 @@ def _get_depend_dict(name, vars, deps):\n \n         if '=' in vars[name] and not isstring(vars[name]):\n             for word in word_pattern.findall(vars[name]['=']):\n-                if word not in words and word not in vars:\n+                if word not in words and word in vars:\n                     words.append(word)\n         for word in words[:]:\n             for w in deps.get(word,[]) \\"
    },
    {
        "commit_id": "a81039b7ec0834840468937a00317d85a3515eb8",
        "commit_message": "Fix get_mathlib when path argument is None",
        "commit_url": "https://github.com/numpy/numpy/commit/a81039b7ec0834840468937a00317d85a3515eb8",
        "buggy_code": "path = get_numpy_include_dirs()[0]",
        "fixed_code": "path = os.path.join(get_numpy_include_dirs()[0], 'numpy')",
        "patch": "@@ -115,7 +115,7 @@ def get_mathlibs(path=None):\n     \"\"\"Return the MATHLIB line from config.h\n     \"\"\"\n     if path is None:\n-        path = get_numpy_include_dirs()[0]\n+        path = os.path.join(get_numpy_include_dirs()[0], 'numpy')\n     config_file = os.path.join(path,'config.h')\n     fid = open(config_file)\n     mathlibs = []"
    },
    {
        "commit_id": "1f0d060bdf6a5cd18d6f301c22cff0f0d482eed4",
        "commit_message": "Fix ticket #599",
        "commit_url": "https://github.com/numpy/numpy/commit/1f0d060bdf6a5cd18d6f301c22cff0f0d482eed4",
        "buggy_code": "if wrap and isinstance(result, mu.ndarray):",
        "fixed_code": "if wrap:",
        "patch": "@@ -35,7 +35,7 @@ def _wrapit(obj, method, *args, **kwds):\n     except AttributeError:\n         wrap = None\n     result = getattr(asarray(obj),method)(*args, **kwds)\n-    if wrap and isinstance(result, mu.ndarray):\n+    if wrap:\n         if not isinstance(result, mu.ndarray):\n             result = asarray(result)\n         result = wrap(result)"
    },
    {
        "commit_id": "8095de4f7da6f50b129f76a9e261abe8ebc37b9a",
        "commit_message": "Fix Ticket #588: problem with negative striding and fast blas implementation of dot",
        "commit_url": "https://github.com/numpy/numpy/commit/8095de4f7da6f50b129f76a9e261abe8ebc37b9a",
        "buggy_code": "'copy', 'iterable', #'base_repr', 'binary_repr',",
        "fixed_code": "'copy', 'iterable',",
        "patch": "@@ -1,7 +1,7 @@\n __docformat__ = \"restructuredtext en\"\n __all__ = ['logspace', 'linspace',\n            'select', 'piecewise', 'trim_zeros',\n-           'copy', 'iterable', #'base_repr', 'binary_repr',\n+           'copy', 'iterable', \n            'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp',\n            'unique', 'extract', 'place', 'nansum', 'nanmax', 'nanargmax',\n            'nanargmin', 'nanmin', 'vectorize', 'asarray_chkfinite', 'average',"
    },
    {
        "commit_id": "c5a845f12829895fe4c3e8f47cd34d5bd40ff14a",
        "commit_message": "fixing link error: added debug message, 2.",
        "commit_url": "https://github.com/numpy/numpy/commit/c5a845f12829895fe4c3e8f47cd34d5bd40ff14a",
        "buggy_code": "print 'DEBUG:',lib_opts, library_dirs, runtime_library_dirs",
        "fixed_code": "log.info('DEBUG:'+`lib_opts, library_dirs, runtime_library_dirs`)",
        "patch": "@@ -381,7 +381,7 @@ def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):\n             lib_opts.extend(list(i))\n         else:\n             lib_opts.append(i)\n-    print 'DEBUG:',lib_opts, library_dirs, runtime_library_dirs\n+    log.info('DEBUG:'+`lib_opts, library_dirs, runtime_library_dirs`)\n     return lib_opts\n ccompiler.gen_lib_options = gen_lib_options\n "
    },
    {
        "commit_id": "907294e4f4a8265418a3bd54912163f66a945c21",
        "commit_message": "Fix missing import.",
        "commit_url": "https://github.com/numpy/numpy/commit/907294e4f4a8265418a3bd54912163f66a945c21",
        "buggy_code": "a = arange(3, dtype='>f')",
        "fixed_code": "a = N.arange(3, dtype='>f')",
        "patch": "@@ -699,7 +699,7 @@ def check_string_mergesort(self, level=rlevel):\n \n     def check_argmax_byteorder(self, level=rlevel):\n         \"\"\"Ticket #546\"\"\"\n-        a = arange(3, dtype='>f')\n+        a = N.arange(3, dtype='>f')\n         assert a[a.argmax()] == a.max()\n \n     def check_numeric_random(self, level=rlevel):"
    },
    {
        "commit_id": "907a90f4c28fe811d878abe66ae375a757c9ece3",
        "commit_message": "Fix an incorrect usage of log.set_verbosity(INFO) causing log always to be at DEBUG level, INFO is for set_threshold.",
        "commit_url": "https://github.com/numpy/numpy/commit/907a90f4c28fe811d878abe66ae375a757c9ece3",
        "buggy_code": "execute_in - before command `cd execute_in` and after `cd -`.",
        "fixed_code": "execute_in - before run command `cd execute_in` and after `cd -`.",
        "patch": "@@ -196,7 +196,7 @@ def exec_command( command,\n     The following special keyword arguments can be used:\n       use_shell - execute `sh -c command`\n       use_tee   - pipe the output of command through tee\n-      execute_in - before command `cd execute_in` and after `cd -`.\n+      execute_in - before run command `cd execute_in` and after `cd -`.\n \n     On NT, DOS systems the returned status is correct for external commands.\n     Wild cards will not work for non-posix systems or when use_shell=0."
    },
    {
        "commit_id": "b6406a5cf255bc49891d893d155af6d106b015a8",
        "commit_message": "Fix asfarray to return an array instead of a matrix.",
        "commit_url": "https://github.com/numpy/numpy/commit/b6406a5cf255bc49891d893d155af6d106b015a8",
        "buggy_code": "return asanyarray(a,dtype=dtype)",
        "fixed_code": "return asarray(a,dtype=dtype)",
        "patch": "@@ -46,7 +46,7 @@ def asfarray(a, dtype=_nx.float_):\n     dtype = _nx.obj2sctype(dtype)\n     if not issubclass(dtype, _nx.inexact):\n         dtype = _nx.float_\n-    return asanyarray(a,dtype=dtype)\n+    return asarray(a,dtype=dtype)\n \n def real(val):\n     \"\"\"Return the real part of val."
    },
    {
        "commit_id": "704e0d08c96570d3bd9bc53fe7684477d58a2048",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/704e0d08c96570d3bd9bc53fe7684477d58a2048",
        "buggy_code": "print target.read()",
        "fixed_code": "print target_f.read()",
        "patch": "@@ -139,7 +139,7 @@ def check_func(func_name):\n \n         print 'File:',target\n         target_f = open(target)\n-        print target.read()\n+        print target_f.read()\n         target_f.close()\n         print 'EOF'\n "
    },
    {
        "commit_id": "458af7568be86ad48caa92cec67fc6ea7d93db04",
        "commit_message": "Fix type error on setting os.environ item.",
        "commit_url": "https://github.com/numpy/numpy/commit/458af7568be86ad48caa92cec67fc6ea7d93db04",
        "buggy_code": "os.environ['DISTUTILS_USE_SDK']=1",
        "fixed_code": "os.environ['DISTUTILS_USE_SDK']='1'",
        "patch": "@@ -327,7 +327,7 @@ def msvc_on_amd64():\n     if os.environ.has_key('DISTUTILS_USE_SDK'):\n         return\n     # try to avoid _MSVCCompiler__root attribute error\n-    os.environ['DISTUTILS_USE_SDK']=1\n+    os.environ['DISTUTILS_USE_SDK']='1'\n     return\n \n msvc_on_amd64()"
    },
    {
        "commit_id": "eb12ad4a3656aafe1260e0a981bd5c0dc136de0c",
        "commit_message": "Fix polygon division. Closes ticket #553.",
        "commit_url": "https://github.com/numpy/numpy/commit/eb12ad4a3656aafe1260e0a981bd5c0dc136de0c",
        "buggy_code": "q = NX.zeros((m-n+1,), float)",
        "fixed_code": "q = NX.zeros((max(m-n+1,1),), float)",
        "patch": "@@ -400,7 +400,7 @@ def polydiv(u, v):\n     m = len(u) - 1\n     n = len(v) - 1\n     scale = 1. / v[0]\n-    q = NX.zeros((m-n+1,), float)\n+    q = NX.zeros((max(m-n+1,1),), float)\n     r = u.copy()\n     for k in range(0, m-n+1):\n         d = scale * r[k]"
    },
    {
        "commit_id": "00f72c962db4a4cb152bdd548dedac916ed582cd",
        "commit_message": "Fix new typo added to arrayprint.py in r3877",
        "commit_url": "https://github.com/numpy/numpy/commit/00f72c962db4a4cb152bdd548dedac916ed582cd",
        "buggy_code": "len(str(mininum.reduce(data))))",
        "fixed_code": "len(str(minimum.reduce(data))))",
        "patch": "@@ -150,7 +150,7 @@ def _array2string(a, max_line_width, precision, suppress_small, separator=' ',\n             format_function = _boolFormatter\n         elif issubclass(dtypeobj, _nt.integer):\n             max_str_len = max(len(str(maximum.reduce(data))),\n-                              len(str(mininum.reduce(data))))\n+                              len(str(minimum.reduce(data))))\n             format = '%' + str(max_str_len) + 'd'\n             format_function = lambda x: _formatInteger(x, format)\n         elif issubclass(dtypeobj, _nt.floating):"
    },
    {
        "commit_id": "4c49c1891382a2320ab8c3dcfce0e80487906cff",
        "commit_message": "Small fix for numpy.info(), which was unconditionally broken",
        "commit_url": "https://github.com/numpy/numpy/commit/4c49c1891382a2320ab8c3dcfce0e80487906cff",
        "buggy_code": "print >> output, \"data pointer: %s%s\" % (hex(obj.ctypes._as_parameter_), extra)",
        "fixed_code": "print >> output, \"data pointer: %s%s\" % (hex(obj.ctypes._as_parameter_.value), extra)",
        "patch": "@@ -376,7 +376,7 @@ def info(obj, output=sys.stdout, numpy=0):\n     else:\n         extra = \"\"\n         tic = \"\"\n-    print >> output, \"data pointer: %s%s\" % (hex(obj.ctypes._as_parameter_), extra)\n+    print >> output, \"data pointer: %s%s\" % (hex(obj.ctypes._as_parameter_.value), extra)\n     print >> output, \"byteorder: \",\n     endian = obj.dtype.byteorder\n     if endian in ['|','=']:"
    },
    {
        "commit_id": "827bc405c59d98251055ea93e0a6392925d713a6",
        "commit_message": "Fix build breakage.",
        "commit_url": "https://github.com/numpy/numpy/commit/827bc405c59d98251055ea93e0a6392925d713a6",
        "buggy_code": "return CCompiler.get_version(force=force, ok_status=ok_status)",
        "fixed_code": "return CCompiler.get_version(self, force=force, ok_status=ok_status)",
        "patch": "@@ -405,7 +405,7 @@ def get_library_dirs(self):\n \n     def get_version(self, force=False, ok_status=[0]):\n         assert self._is_customised\n-        return CCompiler.get_version(force=force, ok_status=ok_status)\n+        return CCompiler.get_version(self, force=force, ok_status=ok_status)\n \n     ############################################################\n "
    },
    {
        "commit_id": "635a9fbf1cc87531888eaf50d09bb559e4ad2dfa",
        "commit_message": "Better version handling in fcompiler\n * Remove FCompiler.get_version_cmd, FCompiler.get_flags_version,\n   FCompiler.get_linker_so_cmd, and FCompiler.get_linker_exe_cmd;\n   subclasses should do this in FCompiler.update_executables()\n * FCompiler attributes .compiler_f77, .version_cmd, etc., are now\n   properties that read from the .executables dictionary.\n * Update intel.py and absoft.py for above\n * Add extra asserts for defensive programming. Most of our problems\n   here seem to come from bad values being generated, and the error not\n   being caught until later.\n     * must call FCompiler.customize() before FCompiler.get_version();\n       command/build_ext.py and command/config.py updated\n     * verify that commands make sense earlier -- must be None or\n       lists of strings\n\nAlso,\n * add IA-32 as another pattern to search for in 32-bit Intel\n   compiler version.\n * minor formatting\n * add debugging helpers to environment.py:EnvironmentConfig class",
        "commit_url": "https://github.com/numpy/numpy/commit/635a9fbf1cc87531888eaf50d09bb559e4ad2dfa",
        "buggy_code": "'linker_exe'   : [None,\"-Wall\"]",
        "fixed_code": "'linker_exe'   : [None, \"-Wall\"]",
        "patch": "@@ -297,7 +297,7 @@ def version_match(self, version_string):\n         'linker_so'    : [\"<F90>\", \"-Wall\"],\n         'archiver'     : [\"ar\", \"-cr\"],\n         'ranlib'       : [\"ranlib\"],\n-        'linker_exe'   : [None,\"-Wall\"]\n+        'linker_exe'   : [None, \"-Wall\"]\n         }\n \n     # use -mno-cygwin flag for g77 when Python is not Cygwin-Python"
    },
    {
        "commit_id": "9c81f9cc0517031add7f31eddb489743e9324233",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/9c81f9cc0517031add7f31eddb489743e9324233",
        "buggy_code": "return not (s == '0' or s.lower() == 'False')",
        "fixed_code": "return not (s == '0' or s.lower() == 'false')",
        "patch": "@@ -42,7 +42,7 @@ def flaglist(s):\n \n def str2bool(s):\n     if is_string(s):\n-        return not (s == '0' or s.lower() == 'False')\n+        return not (s == '0' or s.lower() == 'false')\n     return bool(s)\n \n class FCompiler(CCompiler):"
    },
    {
        "commit_id": "47478cba842b48c43846d7f343261154b7f16b66",
        "commit_message": "Fix issues with undetected Fortran compilers.",
        "commit_url": "https://github.com/numpy/numpy/commit/47478cba842b48c43846d7f343261154b7f16b66",
        "buggy_code": "if not version_cmd or not version_cmd[0]:",
        "fixed_code": "if not version_cmd or not version_cmd[0] or None in version_cmd:",
        "patch": "@@ -259,7 +259,7 @@ def CCompiler_get_version(self, force=0, ok_status=[0]):\n         version_cmd = self.version_cmd\n     except AttributeError:\n         return None\n-    if not version_cmd or not version_cmd[0]:\n+    if not version_cmd or not version_cmd[0] or None in version_cmd:\n         return None\n     cmd = ' '.join(version_cmd)\n     try:"
    },
    {
        "commit_id": "47478cba842b48c43846d7f343261154b7f16b66",
        "commit_message": "Fix issues with undetected Fortran compilers.",
        "commit_url": "https://github.com/numpy/numpy/commit/47478cba842b48c43846d7f343261154b7f16b66",
        "buggy_code": "if self.fcompiler is not None:",
        "fixed_code": "if self.fcompiler is not None and self.fcompiler.get_version():",
        "patch": "@@ -28,7 +28,7 @@ def _check_compiler (self):\n         if not isinstance(self.fcompiler, FCompiler):\n             self.fcompiler = new_fcompiler(compiler=self.fcompiler,\n                                            dry_run=self.dry_run, force=1)\n-            if self.fcompiler is not None:\n+            if self.fcompiler is not None and self.fcompiler.get_version():\n                 self.fcompiler.customize(self.distribution)\n                 self.fcompiler.customize_cmd(self)\n                 self.fcompiler.show_customization()"
    },
    {
        "commit_id": "00a35871d1af7aee6c329b6341e79d592e234272",
        "commit_message": "Fix some problems with data-files not being added in top-level and extra version information added to the name of development distributions.",
        "commit_url": "https://github.com/numpy/numpy/commit/00a35871d1af7aee6c329b6341e79d592e234272",
        "buggy_code": "local_path = self.local_path,",
        "fixed_code": "local_path = self.path_in_package,",
        "patch": "@@ -1041,7 +1041,7 @@ def paths(self,*paths,**kws):\n         \"\"\"\n         include_non_existing = kws.get('include_non_existing',True)\n         return gpaths(paths,\n-                      local_path = self.local_path,\n+                      local_path = self.path_in_package,\n                       include_non_existing=include_non_existing)\n \n     def _fix_paths_dict(self,kw):"
    },
    {
        "commit_id": "57ccbf2ceac4a401afc9dae735f3a1739e5a0edb",
        "commit_message": "Fix docstring typo for vstack()",
        "commit_url": "https://github.com/numpy/numpy/commit/57ccbf2ceac4a401afc9dae735f3a1739e5a0edb",
        "buggy_code": "Take a sequence of arrays and stack them veritcally",
        "fixed_code": "Take a sequence of arrays and stack them vertically",
        "patch": "@@ -184,7 +184,7 @@ def vstack(tup):\n     \"\"\" Stack arrays in sequence vertically (row wise)\n \n         Description:\n-            Take a sequence of arrays and stack them veritcally\n+            Take a sequence of arrays and stack them vertically\n             to make a single array.  All arrays in the sequence\n             must have the same shape along all but the first axis.\n             vstack will rebuild arrays divided by vsplit."
    },
    {
        "commit_id": "b93a94b5e15d229e253353289c571c7a3142a642",
        "commit_message": "[distutils-rework] fix getting ar flags",
        "commit_url": "https://github.com/numpy/numpy/commit/b93a94b5e15d229e253353289c571c7a3142a642",
        "buggy_code": "arflags = to_list(self.flag_vars.arflags)",
        "fixed_code": "arflags = to_list(self.flag_vars.ar)",
        "patch": "@@ -454,7 +454,7 @@ def get_flags(tag, flags):\n \n         ar = self.command_vars.archiver\n         if ar:\n-            arflags = to_list(self.flag_vars.arflags)\n+            arflags = to_list(self.flag_vars.ar)\n             self.set_executables(archiver=[ar]+arflags)\n \n         ranlib = self.command_vars.ranlib"
    },
    {
        "commit_id": "ba1beffdaf55be34e8152e5faef0ba81ef35e57f",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/ba1beffdaf55be34e8152e5faef0ba81ef35e57f",
        "buggy_code": "if dir.startswith('/usr/lib'):",
        "fixed_code": "if d.startswith('/usr/lib'):",
        "patch": "@@ -65,7 +65,7 @@ def _link (self, body,\n                     for d in self.fcompiler.library_dirs or []:\n                         # correct path when compiling in Cygwin but with normal Win\n                         # Python\n-                        if dir.startswith('/usr/lib'):\n+                        if d.startswith('/usr/lib'):\n                             s,o = exec_command(['cygpath', '-w', d], use_tee=False)\n                             if not s: d = o\n                     f_lib_dirs.append(d)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -12,4 +12,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == '__main__':\n     from numpy.distutils.core      import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -8,4 +8,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -13,4 +13,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -44,4 +44,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -9,4 +9,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -11,4 +11,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "commit_message": "Merged revisions 3732-3768 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines\n  \n  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py\n........\n  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Clean up setup() calls.\n........\n  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.\n........\n  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line\n  \n  Raise exception when pyrex is required.\n........\n  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)\n........\n  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line\n  \n  Workaround Python distutils bug sf 1718574.\n........\n  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines\n  \n  #520: don't add arch-specific flags when linking with Intel Fortran\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/4c657edb70dd3a3f810faf1a9b0b5f7049a046cd",
        "buggy_code": "setup(**configuration(top_path='').todict())",
        "fixed_code": "setup(configuration=configuration)",
        "patch": "@@ -15,4 +15,4 @@ def configuration(parent_package='',top_path=None):\n \n if __name__ == \"__main__\":\n     from numpy.distutils.core import setup\n-    setup(**configuration(top_path='').todict())\n+    setup(configuration=configuration)"
    },
    {
        "commit_id": "6a0074dcc1ad9e71085f10520e926eccc74052e8",
        "commit_message": "Fix f2py command line doc.",
        "commit_url": "https://github.com/numpy/numpy/commit/6a0074dcc1ad9e71085f10520e926eccc74052e8",
        "buggy_code": "--3g-numpy       Use numpy.f2py.lib tool, the 3rd generation of F2PY,",
        "fixed_code": "--g3-numpy       Use numpy.f2py.lib tool, the 3rd generation of F2PY,",
        "patch": "@@ -64,7 +64,7 @@\n \n Options:\n \n-  --3g-numpy       Use numpy.f2py.lib tool, the 3rd generation of F2PY,\n+  --g3-numpy       Use numpy.f2py.lib tool, the 3rd generation of F2PY,\n                    with NumPy support.\n   --2d-numpy       Use numpy.f2py tool with NumPy support. [DEFAULT]\n   --2d-numeric     Use f2py2e tool with Numeric support."
    },
    {
        "commit_id": "9bcf5d809bfe0f23fdf6b26765b338b188f1befb",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bcf5d809bfe0f23fdf6b26765b338b188f1befb",
        "buggy_code": "dict_append(libraries = ['pthread'])",
        "fixed_code": "dict_append(info, libraries=['pthread'])",
        "patch": "@@ -816,7 +816,7 @@ def calc_info(self):\n         if sys.platform == 'win32':\n             pass # win32 has no pthread library\n         else:\n-            dict_append(libraries = ['pthread'])\n+            dict_append(info, libraries=['pthread'])\n         self.set_info(**info)\n \n class lapack_mkl_info(mkl_info):"
    },
    {
        "commit_id": "5eefd7aa5faaa9efb58ae92158d6364616b58f2b",
        "commit_message": "Add regression test.  Fix order of arguments in test_multiarray.",
        "commit_url": "https://github.com/numpy/numpy/commit/5eefd7aa5faaa9efb58ae92158d6364616b58f2b",
        "buggy_code": "assert_equal(byteorder,x.dtype.byteorder)",
        "fixed_code": "assert_equal(x.dtype.byteorder,byteorder)",
        "patch": "@@ -380,7 +380,7 @@ def _clip_type(self,type_group,array_max,\n                     byteorder = '='\n \n                 if x.dtype.byteorder == '|': byteorder = '|'\n-                assert_equal(byteorder,x.dtype.byteorder)\n+                assert_equal(x.dtype.byteorder,byteorder)\n                 self._check_range(x,expected_min,expected_max)\n         return x\n "
    },
    {
        "commit_id": "98ab993945def2a5ad44e3f8d5d65c57c449ba28",
        "commit_message": "fixed a typecode Float->float issue in average.\n\nThis is not pretty code it seems overly complicated, and it has an \"eval\"\nstatement in it where it builds a string and evaluates it.  I can't imagine\nthis is the best approach to this -- but I also am not going to spend the\ntime to examine it right now.",
        "commit_url": "https://github.com/numpy/numpy/commit/98ab993945def2a5ad44e3f8d5d65c57c449ba28",
        "buggy_code": "w1 = eval(\"w[\"+repr(tuple(r))+\"]*ones(ash, Float)\")",
        "fixed_code": "w1 = eval(\"w[\"+repr(tuple(r))+\"]*ones(ash, float)\")",
        "patch": "@@ -306,7 +306,7 @@ def average(a, axis=None, weights=None, returned=False):\n                 ni = ash[axis]\n                 r = [newaxis]*ni\n                 r[axis] = slice(None, None, 1)\n-                w1 = eval(\"w[\"+repr(tuple(r))+\"]*ones(ash, Float)\")\n+                w1 = eval(\"w[\"+repr(tuple(r))+\"]*ones(ash, float)\")\n                 n = add.reduce(a*w1, axis)\n                 d = add.reduce(w1, axis)\n             else:"
    },
    {
        "commit_id": "85eeb4732ea7e49c01db4f7981ee07c8fc1c90c3",
        "commit_message": "fix bug with test_suite being called incorrectly",
        "commit_url": "https://github.com/numpy/numpy/commit/85eeb4732ea7e49c01db4f7981ee07c8fc1c90c3",
        "buggy_code": "suite_list.extend(test_module.test_suite(level)._tests)",
        "fixed_code": "suite_list.extend(test_module.test_suite._tests)",
        "patch": "@@ -398,7 +398,7 @@ def _get_suite_list(self, test_module, level, module_name='__main__',\n         mstr = self._module_str\n         suite_list = []\n         if hasattr(test_module,'test_suite'):\n-            suite_list.extend(test_module.test_suite(level)._tests)\n+            suite_list.extend(test_module.test_suite._tests)\n         for name in dir(test_module):\n             obj = getattr(test_module, name)\n             if type(obj) is not type(unittest.TestCase) \\"
    },
    {
        "commit_id": "6481ff29ec06bce69814dc91dc310442029f0370",
        "commit_message": "Fix searchsorted docstring. Closes #457.",
        "commit_url": "https://github.com/numpy/numpy/commit/6481ff29ec06bce69814dc91dc310442029f0370",
        "buggy_code": "array of indices with the same shape as a.",
        "fixed_code": "array of indices with the same shape as v.",
        "patch": "@@ -339,7 +339,7 @@ def searchsorted(a, v, side='left'):\n         side -- {'left', 'right'}, default('left').\n \n     Returns:\n-        array of indices with the same shape as a.\n+        array of indices with the same shape as v.\n \n     The array to be searched must be 1-D and is assumed to be sorted in\n     ascending order."
    },
    {
        "commit_id": "9bcf9ef90b0893a157e5d69478b9a9566b966249",
        "commit_message": "Fix doctests.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bcf9ef90b0893a157e5d69478b9a9566b966249",
        "buggy_code": ">>> x = array([1e-16,1,2,3])",
        "fixed_code": ">>> x = N.array([1e-16,1,2,3])",
        "patch": "@@ -245,7 +245,7 @@ def array2string(a, max_line_width = None, precision = None,\n     Examples\n     --------\n \n-    >>> x = array([1e-16,1,2,3])\n+    >>> x = N.array([1e-16,1,2,3])\n     >>> print array2string(x,precision=2,separator=',',suppress_small=True)\n     [ 0., 1., 2., 3.]\n "
    },
    {
        "commit_id": "9bcf9ef90b0893a157e5d69478b9a9566b966249",
        "commit_message": "Fix doctests.",
        "commit_url": "https://github.com/numpy/numpy/commit/9bcf9ef90b0893a157e5d69478b9a9566b966249",
        "buggy_code": "array([1., 3., 1., 5., 6.])",
        "fixed_code": "array([ 1.,  3.,  1.,  5.,  6.])",
        "patch": "@@ -56,7 +56,7 @@ def poly(seq_of_zeros):\n         \n         >>> b = roots([1,3,1,5,6])\n         >>> poly(b)\n-        array([1., 3., 1., 5., 6.])\n+        array([ 1.,  3.,  1.,  5.,  6.])\n         \n     \"\"\"\n     seq_of_zeros = atleast_1d(seq_of_zeros)"
    },
    {
        "commit_id": "b860a39925a5e0a49d54fa363ccdf6113dfef12d",
        "commit_message": "Fix docstrings for loading with DocFileSuite.",
        "commit_url": "https://github.com/numpy/numpy/commit/b860a39925a5e0a49d54fa363ccdf6113dfef12d",
        "buggy_code": "from multiarray import typeinfo, ndarray, array, empty, dtype",
        "fixed_code": "from numpy.core.multiarray import typeinfo, ndarray, array, empty, dtype",
        "patch": "@@ -80,7 +80,7 @@\n            'ScalarType', 'obj2sctype', 'cast', 'nbytes', 'sctype2char',\n            'maximum_sctype', 'issctype', 'typecodes']\n \n-from multiarray import typeinfo, ndarray, array, empty, dtype\n+from numpy.core.multiarray import typeinfo, ndarray, array, empty, dtype\n import types as _types\n \n # we don't export these for import *, but we do want them accessible"
    },
    {
        "commit_id": "a9a155c0aa11b0f843732a571f345dc1da4ff96e",
        "commit_message": "Fix nan_to_num on complex arrays. Fixes ticket #443",
        "commit_url": "https://github.com/numpy/numpy/commit/a9a155c0aa11b0f843732a571f345dc1da4ff96e",
        "buggy_code": "y = nan_to_num(x.real) + 1j * nan_to_num(x.imag)",
        "fixed_code": "return nan_to_num(x.real) + 1j * nan_to_num(x.imag)",
        "patch": "@@ -117,7 +117,7 @@ def nan_to_num(x):\n     except AttributeError:\n         t = obj2sctype(type(x))\n     if issubclass(t, _nx.complexfloating):\n-        y = nan_to_num(x.real) + 1j * nan_to_num(x.imag)\n+        return nan_to_num(x.real) + 1j * nan_to_num(x.imag)\n     else:\n         try:\n             y = x.copy()"
    },
    {
        "commit_id": "d7c5a1ec074074f94f929c0c3c77beb827e7eb05",
        "commit_message": "Fix the regression test to not use 2.4's sorted function.",
        "commit_url": "https://github.com/numpy/numpy/commit/d7c5a1ec074074f94f929c0c3c77beb827e7eb05",
        "buggy_code": "assert_equal(sorted(b),a)",
        "fixed_code": "assert_equal(N.sort(b, axis=0),a)",
        "patch": "@@ -586,7 +586,7 @@ def check_random_shuffle(self, level=rlevel):\n         a = N.arange(5).reshape((5,1))\n         b = a.copy()\n         N.random.shuffle(b)\n-        assert_equal(sorted(b),a)\n+        assert_equal(N.sort(b, axis=0),a)\n \n     def check_refcount_vectorize(self, level=rlevel):\n         \"\"\"Ticket #378\"\"\""
    },
    {
        "commit_id": "099247b5d7a88339d0e159c434905cf69540cc85",
        "commit_message": "Fix docstring typo as per #397",
        "commit_url": "https://github.com/numpy/numpy/commit/099247b5d7a88339d0e159c434905cf69540cc85",
        "buggy_code": "argument is TRUE, byteswap in-place and return a reference to self.",
        "fixed_code": "argument is True, byteswap in-place and return a reference to self.",
        "patch": "@@ -701,7 +701,7 @@\n     \"\"\"a.byteswap(False) -> View or copy. Swap the bytes in the array.\n \n     Swap the bytes in the array.  Return the byteswapped array.  If the first\n-    argument is TRUE, byteswap in-place and return a reference to self.\n+    argument is True, byteswap in-place and return a reference to self.\n \n     \"\"\"))\n "
    },
    {
        "commit_id": "9ec50769a3fc1ca2a2cb220631d3c549da05ad9a",
        "commit_message": "[distutils-rework] Fix up how the Fortran compiler is chosen and used.\nconfig_fc sets up an object referencing the compiler, which the other commands\n(build_clib, build_ext) use. This object keeps track of whether we need\nan F90 compiler at any point.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ec50769a3fc1ca2a2cb220631d3c549da05ad9a",
        "buggy_code": "show_fcompilers({})",
        "fixed_code": "show_fcompilers()",
        "patch": "@@ -20,7 +20,7 @@ def show_environ(*args):\n \n def show_fortran_compilers(*args):\n     from fcompiler import show_fcompilers\n-    show_fcompilers({})\n+    show_fcompilers()\n \n def show_compilers(*args):\n     from distutils.ccompiler import show_compilers"
    },
    {
        "commit_id": "32789fd7d5fdce563c37363a3dd1192aafdc0a9e",
        "commit_message": "Fix typo in oldnumeric and add Rick White's improvement to histogram for large arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/32789fd7d5fdce563c37363a3dd1192aafdc0a9e",
        "buggy_code": "return x.byteswap(TRUE)",
        "fixed_code": "return x.byteswap(True)",
        "patch": "@@ -56,7 +56,7 @@ def array_constructor(shape, typecode, thestr, Endian=LittleEndian):\n         x = mu.fromstring(thestr, typecode)\n     x.shape = shape\n     if LittleEndian != Endian:\n-        return x.byteswap(TRUE)\n+        return x.byteswap(True)\n     else:\n         return x\n "
    },
    {
        "commit_id": "e776ee6c1518c91bcb58c72ae1ad4b0c973caca7",
        "commit_message": "[distutils-rework] Merged revisions 2922,2924-3484 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\nBiggest problem in merging was appropiately choosing a f90 compiler in\nbuild_clib and build_ext.\n\n........\n  r2979 | cookedm | 2006-08-08 17:16:05 -0400 (Tue, 08 Aug 2006) | 1 line\n  \n  fix #234: IntelVisualFCompiler is broken\n........\n  r3014 | stefan | 2006-08-14 06:05:22 -0400 (Mon, 14 Aug 2006) | 2 lines\n  \n  Ignore *.pyc files [for Albert Strasheim].\n........\n  r3061 | oliphant | 2006-08-24 16:07:59 -0400 (Thu, 24 Aug 2006) | 1 line\n  \n  update g95 version pattern\n........\n  r3138 | rkern | 2006-09-08 12:56:50 -0400 (Fri, 08 Sep 2006) | 1 line\n  \n  Fix #198\n........\n  r3164 | oliphant | 2006-09-15 17:06:47 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Fix subversion number getting for 1.4 clients.  Also works for pre 1.4 clients.\n........\n  r3165 | oliphant | 2006-09-15 17:13:09 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Fix when svnversion is not present.\n........\n  r3166 | oliphant | 2006-09-15 17:18:33 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Small code re-org in _get_svn_revision\n........\n  r3228 | cookedm | 2006-09-28 07:23:18 -0400 (Thu, 28 Sep 2006) | 1 line\n  \n  For the MKL library, define the macro SCIPY_MKL_H\n........\n  r3240 | rkern | 2006-10-02 12:41:47 -0400 (Mon, 02 Oct 2006) | 1 line\n  \n  Add .dylib as a valid OS X shared library extension.\n........\n  r3290 | pearu | 2006-10-08 05:30:17 -0400 (Sun, 08 Oct 2006) | 1 line\n  \n  numpy.distutils: use language flag or source file extension to select default f77 or f90 compiler.\n........\n  r3291 | pearu | 2006-10-08 05:38:12 -0400 (Sun, 08 Oct 2006) | 1 line\n  \n  numpy.distutils: fixed bug.\n........\n  r3302 | pearu | 2006-10-10 16:27:23 -0400 (Tue, 10 Oct 2006) | 1 line\n  \n  Improved is_free_format.\n........\n  r3371 | pearu | 2006-10-19 18:03:23 -0400 (Thu, 19 Oct 2006) | 1 line\n  \n  Add Intel Itanium compiler 9.x support (needs testing).\n........\n  r3372 | oliphant | 2006-10-19 18:55:23 -0400 (Thu, 19 Oct 2006) | 1 line\n  \n  Fix missing comment characters in intel.py.  Check for None in .reshape and .resize\n........\n  r3430 | stefan | 2006-11-04 16:19:03 -0500 (Sat, 04 Nov 2006) | 2 lines\n  \n  Fix typo.\n........\n  r3450 | pearu | 2006-11-19 15:56:57 -0500 (Sun, 19 Nov 2006) | 1 line\n  \n  Skip interactive mode when using script_args argument.\n........\n  r3467 | oliphant | 2006-12-01 23:34:25 -0500 (Fri, 01 Dec 2006) | 1 line\n  \n  Try updating version command for NAG compiler.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/e776ee6c1518c91bcb58c72ae1ad4b0c973caca7",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (AttributeError, ValueError):",
        "patch": "@@ -198,7 +198,7 @@ def CCompiler_customize(self, dist, need_cxx=0):\n         # 'CCSHARED', 'LDSHARED', 'SO')\n         try:\n             self.compiler_so.remove('-Wstrict-prototypes')\n-        except ValueError:\n+        except (AttributeError, ValueError):\n             pass\n         \n         if hasattr(self,'compiler') and self.compiler[0].find('cc')>=0:"
    },
    {
        "commit_id": "e776ee6c1518c91bcb58c72ae1ad4b0c973caca7",
        "commit_message": "[distutils-rework] Merged revisions 2922,2924-3484 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\nBiggest problem in merging was appropiately choosing a f90 compiler in\nbuild_clib and build_ext.\n\n........\n  r2979 | cookedm | 2006-08-08 17:16:05 -0400 (Tue, 08 Aug 2006) | 1 line\n  \n  fix #234: IntelVisualFCompiler is broken\n........\n  r3014 | stefan | 2006-08-14 06:05:22 -0400 (Mon, 14 Aug 2006) | 2 lines\n  \n  Ignore *.pyc files [for Albert Strasheim].\n........\n  r3061 | oliphant | 2006-08-24 16:07:59 -0400 (Thu, 24 Aug 2006) | 1 line\n  \n  update g95 version pattern\n........\n  r3138 | rkern | 2006-09-08 12:56:50 -0400 (Fri, 08 Sep 2006) | 1 line\n  \n  Fix #198\n........\n  r3164 | oliphant | 2006-09-15 17:06:47 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Fix subversion number getting for 1.4 clients.  Also works for pre 1.4 clients.\n........\n  r3165 | oliphant | 2006-09-15 17:13:09 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Fix when svnversion is not present.\n........\n  r3166 | oliphant | 2006-09-15 17:18:33 -0400 (Fri, 15 Sep 2006) | 1 line\n  \n  Small code re-org in _get_svn_revision\n........\n  r3228 | cookedm | 2006-09-28 07:23:18 -0400 (Thu, 28 Sep 2006) | 1 line\n  \n  For the MKL library, define the macro SCIPY_MKL_H\n........\n  r3240 | rkern | 2006-10-02 12:41:47 -0400 (Mon, 02 Oct 2006) | 1 line\n  \n  Add .dylib as a valid OS X shared library extension.\n........\n  r3290 | pearu | 2006-10-08 05:30:17 -0400 (Sun, 08 Oct 2006) | 1 line\n  \n  numpy.distutils: use language flag or source file extension to select default f77 or f90 compiler.\n........\n  r3291 | pearu | 2006-10-08 05:38:12 -0400 (Sun, 08 Oct 2006) | 1 line\n  \n  numpy.distutils: fixed bug.\n........\n  r3302 | pearu | 2006-10-10 16:27:23 -0400 (Tue, 10 Oct 2006) | 1 line\n  \n  Improved is_free_format.\n........\n  r3371 | pearu | 2006-10-19 18:03:23 -0400 (Thu, 19 Oct 2006) | 1 line\n  \n  Add Intel Itanium compiler 9.x support (needs testing).\n........\n  r3372 | oliphant | 2006-10-19 18:55:23 -0400 (Thu, 19 Oct 2006) | 1 line\n  \n  Fix missing comment characters in intel.py.  Check for None in .reshape and .resize\n........\n  r3430 | stefan | 2006-11-04 16:19:03 -0500 (Sat, 04 Nov 2006) | 2 lines\n  \n  Fix typo.\n........\n  r3450 | pearu | 2006-11-19 15:56:57 -0500 (Sun, 19 Nov 2006) | 1 line\n  \n  Skip interactive mode when using script_args argument.\n........\n  r3467 | oliphant | 2006-12-01 23:34:25 -0500 (Fri, 01 Dec 2006) | 1 line\n  \n  Try updating version command for NAG compiler.\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/e776ee6c1518c91bcb58c72ae1ad4b0c973caca7",
        "buggy_code": "if len(sys.argv)<=1:",
        "fixed_code": "if len(sys.argv)<=1 and not attr.get('script_args',[]):",
        "patch": "@@ -117,7 +117,7 @@ def get_distribution(always=False):\n \n def setup(**attr):\n \n-    if len(sys.argv)<=1:\n+    if len(sys.argv)<=1 and not attr.get('script_args',[]):\n         from interactive import interactive_sys_argv\n         import atexit\n         atexit.register(_exit_interactive_session)"
    },
    {
        "commit_id": "6d8631d90dc03603ce7c0482ccdb16bf3a88d4d3",
        "commit_message": "Fix shuffle and chararray printing for empty strings.",
        "commit_url": "https://github.com/numpy/numpy/commit/6d8631d90dc03603ce7c0482ccdb16bf3a88d4d3",
        "buggy_code": "val = val[0]",
        "fixed_code": "val = ''",
        "patch": "@@ -47,7 +47,7 @@ def __getitem__(self, obj):\n         if isinstance(val, (string_, unicode_)):\n             temp = val.rstrip()\n             if len(temp) == 0:\n-                val = val[0]\n+                val = ''\n             else:\n                 val = temp\n         return val"
    },
    {
        "commit_id": "bdb5ec1887d060620ab611c70dbbe4b788cae14a",
        "commit_message": "Fix early return in polysub.",
        "commit_url": "https://github.com/numpy/numpy/commit/bdb5ec1887d060620ab611c70dbbe4b788cae14a",
        "buggy_code": "return a1 - a2",
        "fixed_code": "val = a1 - a2",
        "patch": "@@ -367,7 +367,7 @@ def polysub(a1, a2):\n     a2 = atleast_1d(a2)\n     diff = len(a2) - len(a1)\n     if diff == 0:\n-        return a1 - a2\n+        val = a1 - a2\n     elif diff > 0:\n         zr = NX.zeros(diff, a1.dtype)\n         val = NX.concatenate((zr, a1)) - a2"
    },
    {
        "commit_id": "f11c32a592360e6def1c9e338a436ad869598833",
        "commit_message": "Fix early return in polyadd.",
        "commit_url": "https://github.com/numpy/numpy/commit/f11c32a592360e6def1c9e338a436ad869598833",
        "buggy_code": "return a1 + a2",
        "fixed_code": "val = a1 + a2",
        "patch": "@@ -348,7 +348,7 @@ def polyadd(a1, a2):\n     a2 = atleast_1d(a2)\n     diff = len(a2) - len(a1)\n     if diff == 0:\n-        return a1 + a2\n+        val = a1 + a2\n     elif diff > 0:\n         zr = NX.zeros(diff, a1.dtype)\n         val = NX.concatenate((zr, a1)) + a2"
    },
    {
        "commit_id": "9f036ecd5ae67db2af4d486199f2b64c73670acb",
        "commit_message": "Fix startswith operation on character arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/9f036ecd5ae67db2af4d486199f2b64c73670acb",
        "buggy_code": "if chk.dtype is object_ and chk.item() is None:",
        "fixed_code": "if not chk or (chk.dtype is object_ and chk.item() is None):",
        "patch": "@@ -151,7 +151,7 @@ def _typedmethod(self, name, myiter, dtype):\n         for k, val in enumerate(myiter):\n             newval = []\n             for chk in val[1:]:\n-                if chk.dtype is object_ and chk.item() is None:\n+                if not chk or (chk.dtype is object_ and chk.item() is None):\n                     break\n                 newval.append(chk)\n             this_str = val[0].rstrip('\\x00')"
    },
    {
        "commit_id": "c2b5203c09cac644dae7ec02c6011f337c856636",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/c2b5203c09cac644dae7ec02c6011f337c856636",
        "buggy_code": "if not lib.startswtih('msvcr'):",
        "fixed_code": "if not lib.startswith('msvcr'):",
        "patch": "@@ -357,7 +357,7 @@ def _libs_with_msvc_and_fortran(self, c_libraries, c_library_dirs):\n         # make g77-compiled static libs available to MSVC\n         lib_added = False\n         for lib in self.fcompiler.libraries:\n-            if not lib.startswtih('msvcr'):\n+            if not lib.startswith('msvcr'):\n                 c_libraries.append(lib)\n                 p = combine_paths(f_lib_dirs, 'lib' + lib + '.a')\n                 if p:"
    },
    {
        "commit_id": "3347ff8d540b2cd5461cb5d2718873f570e9cf8b",
        "commit_message": "Add warning for ctypes < 1.0.1 and fix test and add C_CONTIGUOUS and F_CONTIGUOUS to multiarray._flagdict",
        "commit_url": "https://github.com/numpy/numpy/commit/3347ff8d540b2cd5461cb5d2718873f570e9cf8b",
        "buggy_code": "'getA', 'item', 'nonzero', 'put', 'putmask', 'resize',",
        "fixed_code": "'getA', 'getA1', 'item', 'nonzero', 'put', 'putmask', 'resize',",
        "patch": "@@ -145,7 +145,7 @@ def check_instance_methods(self):\n             }\n         excluded_methods = [\n             'argmin', 'choose', 'dump', 'dumps', 'fill', 'getfield',\n-            'getA', 'item', 'nonzero', 'put', 'putmask', 'resize',\n+            'getA', 'getA1', 'item', 'nonzero', 'put', 'putmask', 'resize',\n             'searchsorted', 'setflags', 'setfield', 'sort', 'take',\n             'tofile', 'tolist', 'tostring', 'all', 'any', 'sum',\n             'argmax', 'argmin', 'min', 'max', 'mean', 'var', 'ptp',"
    },
    {
        "commit_id": "0330812bca3a97a2b808964e32d5ae81b466441c",
        "commit_message": "Fix segfault in .imag for real array scalars.  Be specific about infix multiplication.",
        "commit_url": "https://github.com/numpy/numpy/commit/0330812bca3a97a2b808964e32d5ae81b466441c",
        "buggy_code": "return a * b",
        "fixed_code": "return _nx.multiply(a,b)",
        "patch": "@@ -552,7 +552,7 @@ def kron(a,b):\n     a = array(a,copy=False,subok=True,ndmin=b.ndim)\n     ndb, nda = b.ndim, a.ndim\n     if (nda == 0 or ndb == 0):\n-        return a * b\n+        return _nx.multiply(a,b)\n     as = a.shape\n     bs = b.shape\n     if not a.flags.contiguous:"
    },
    {
        "commit_id": "ba6b099b3d4b97fe933e0ebf5f18ca29f8111855",
        "commit_message": "Fix typo in tile.",
        "commit_url": "https://github.com/numpy/numpy/commit/ba6b099b3d4b97fe933e0ebf5f18ca29f8111855",
        "buggy_code": "\"\"\"Repeat an array the number of times given in the integer tuple, tup.",
        "fixed_code": "\"\"\"Repeat an array the number of times given in the integer tuple, reps.",
        "patch": "@@ -564,7 +564,7 @@ def kron(a,b):\n     return result\n \n def tile(A, reps):\n-    \"\"\"Repeat an array the number of times given in the integer tuple, tup.\n+    \"\"\"Repeat an array the number of times given in the integer tuple, reps.\n \n     If reps has length d, the result will have dimension of max(d, A.ndim).\n     If reps is scalar it is treated as a 1-tuple."
    },
    {
        "commit_id": "310966efbfb7641a0ee91ef79b3a21c2be2c32c6",
        "commit_message": "Fix ticket #320",
        "commit_url": "https://github.com/numpy/numpy/commit/310966efbfb7641a0ee91ef79b3a21c2be2c32c6",
        "buggy_code": "raise ValueError, \"array-shape mismatch in array\", k",
        "fixed_code": "raise ValueError, \"array-shape mismatch in array %d\" % k",
        "patch": "@@ -306,7 +306,7 @@ def fromarrays(arrayList, dtype=None, shape=None, formats=None,\n     for k, obj in enumerate(arrayList):\n         nn = len(descr[k].shape)\n         if obj.shape[nn:] != shape:\n-            raise ValueError, \"array-shape mismatch in array\", k\n+            raise ValueError, \"array-shape mismatch in array %d\" % k\n         \n     _array = recarray(shape, descr)\n "
    },
    {
        "commit_id": "99fab64c94c45f326cc34e9cc4f02b5bfb46d706",
        "commit_message": "Fix #317 typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/99fab64c94c45f326cc34e9cc4f02b5bfb46d706",
        "buggy_code": "if dtype is not None and (new.dtype != dtype):",
        "fixed_code": "if dtype is not None and (obj.dtype != dtype):",
        "patch": "@@ -514,7 +514,7 @@ def array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None,\n \n     elif isinstance(obj, recarray):\n         copied = 0\n-        if dtype is not None and (new.dtype != dtype):\n+        if dtype is not None and (obj.dtype != dtype):\n             new = obj.astype(dtype)\n             copied = 1\n         else:"
    },
    {
        "commit_id": "ac93e95702a9047b774b4cdd1838c9e1b1f70739",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/ac93e95702a9047b774b4cdd1838c9e1b1f70739",
        "buggy_code": "_names = dtype.names",
        "fixed_code": "_names = descr.names",
        "patch": "@@ -291,7 +291,7 @@ def fromarrays(arrayList, dtype=None, shape=None, formats=None,\n \n     if dtype is not None:\n         descr = sb.dtype(dtype)\n-        _names = dtype.names\n+        _names = descr.names\n     else:\n         parsed = format_parser(formats, names, titles, aligned, byteorder)\n         _names = parsed._names"
    },
    {
        "commit_id": "6c52e6fc05f89f13871b79074ea8891c11092d35",
        "commit_message": "Fix setting unicode/string arrays with 0-d arrays of type unicode and/or string.",
        "commit_url": "https://github.com/numpy/numpy/commit/6c52e6fc05f89f13871b79074ea8891c11092d35",
        "buggy_code": "self.failUnlessRaises(TypeError, assign, a, (), '')",
        "fixed_code": "self.failUnlessRaises(ValueError, assign, a, (), '')",
        "patch": "@@ -166,7 +166,7 @@ def assign(x, i, v):\n             x[i] = v\n         self.failUnlessRaises(IndexError, assign, a, 0, 42)\n         self.failUnlessRaises(IndexError, assign, b, 0, '')\n-        self.failUnlessRaises(TypeError, assign, a, (), '')\n+        self.failUnlessRaises(ValueError, assign, a, (), '')\n \n     def check_newaxis(self):\n         a,b = self.d"
    },
    {
        "commit_id": "d0d5a9218ecb31041e9e20807ff2f4ccca0bbbfb",
        "commit_message": "Fix ticket #289 plus improve the way array data-types print and arrays represent themselves.",
        "commit_url": "https://github.com/numpy/numpy/commit/d0d5a9218ecb31041e9e20807ff2f4ccca0bbbfb",
        "buggy_code": "return cName + \"(%s, %sdtype=%s)\" % (lst, lf, typename)",
        "fixed_code": "return cName + \"(%s, %sdtype='%s')\" % (lst, lf, typename)",
        "patch": "@@ -427,7 +427,7 @@ def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):\n         if issubclass(arr.dtype.type, flexible):\n             typename = str(arr.dtype)\n             lf = '\\n'+' '*len(\"array(\")\n-        return cName + \"(%s, %sdtype=%s)\" % (lst, lf, typename)\n+        return cName + \"(%s, %sdtype='%s')\" % (lst, lf, typename)\n \n def array_str(a, max_line_width=None, precision=None, suppress_small=None):\n     return array2string(a, max_line_width, precision, suppress_small, ' ', \"\", str)"
    },
    {
        "commit_id": "6d9195dfd53fc827171f2de571c2d4049c36c610",
        "commit_message": "Fix for #291",
        "commit_url": "https://github.com/numpy/numpy/commit/6d9195dfd53fc827171f2de571c2d4049c36c610",
        "buggy_code": "a = asarray(a)",
        "fixed_code": "a = asanyarray(a)",
        "patch": "@@ -530,7 +530,7 @@ def dsplit(ary,indices_or_sections):\n def repmat(a, m, n):\n     \"\"\"Repeat a 0-d to 2-d array mxn times\n     \"\"\"\n-    a = asarray(a)\n+    a = asanyarray(a)\n     ndim = a.ndim\n     if ndim == 0:\n         origrows, origcols = (1,1)"
    },
    {
        "commit_id": "3e47b2420c722cbb61250d816424617603cbc718",
        "commit_message": "Fix problem with alter_code1.py",
        "commit_url": "https://github.com/numpy/numpy/commit/3e47b2420c722cbb61250d816424617603cbc718",
        "buggy_code": "fstr = re.sub(r'(import [^,]+,\\s*)(%s)' % name,",
        "fixed_code": "fstr = re.sub(r'(import\\s+[^,\\n\\r]+,\\s*)(%s)' % name,",
        "patch": "@@ -69,7 +69,7 @@ def changeimports(fstr, name, newname):\n     if ('.' in name):\n         name_ = name.replace('.','_')\n \n-    fstr = re.sub(r'(import [^,]+,\\s*)(%s)' % name,\n+    fstr = re.sub(r'(import\\s+[^,\\n\\r]+,\\s*)(%s)' % name,\n                   \"\\\\1%s as %s\" % (newname, name), fstr)\n     fstr = fstr.replace(importasstr, 'import %s as ' % newname)\n     fstr = fstr.replace(importstr, 'import %s as %s' % (newname,name_))"
    },
    {
        "commit_id": "3e47b2420c722cbb61250d816424617603cbc718",
        "commit_message": "Fix problem with alter_code1.py",
        "commit_url": "https://github.com/numpy/numpy/commit/3e47b2420c722cbb61250d816424617603cbc718",
        "buggy_code": "fstr = re.sub(r'(import [^,]+,\\s*)(%s)' % name,",
        "fixed_code": "fstr = re.sub(r'(import\\s+[^,\\n\\r]+,\\s*)(%s)' % name,",
        "patch": "@@ -77,7 +77,7 @@ def changeimports(fstr, name, newname):\n     fromstr = 'from %s import ' % name\n     fromall=0\n \n-    fstr = re.sub(r'(import [^,]+,\\s*)(%s)' % name,\n+    fstr = re.sub(r'(import\\s+[^,\\n\\r]+,\\s*)(%s)' % name,\n                   \"\\\\1%s as %s\" % (newname, name), fstr)\n     fstr = fstr.replace(importasstr, 'import %s as ' % newname)\n     fstr = fstr.replace(importstr, 'import %s as %s' % (newname,name))"
    },
    {
        "commit_id": "371f8c6a1df8b2d244afd50d03e492d79a1372fe",
        "commit_message": "Add ediff1d support for empty arrays.\nFix ediff1d for to_begin or to_end = 0.\nAllow insert to operate on empty arrays.",
        "commit_url": "https://github.com/numpy/numpy/commit/371f8c6a1df8b2d244afd50d03e492d79a1372fe",
        "buggy_code": "if (obj < 0 or obj >=N):",
        "fixed_code": "if (obj < 0 or obj > N or (obj == N and N != 0)):",
        "patch": "@@ -1286,7 +1286,7 @@ def insert(arr, obj, values, axis=None):\n     newshape = list(arr.shape)\n     if isinstance(obj, (int, long, integer)):\n         if (obj < 0): obj += N\n-        if (obj < 0 or obj >=N):\n+        if (obj < 0 or obj > N or (obj == N and N != 0)):\n             raise ValueError, \"index (%d) out of range (0<=index<=%d) \"\\\n                   \"in dimension %d\" % (obj, N, axis)\n         newshape[axis] += 1;"
    },
    {
        "commit_id": "123663789912181b190cd2fa87ea10316c75219b",
        "commit_message": "Fix when svnversion is not present.",
        "commit_url": "https://github.com/numpy/numpy/commit/123663789912181b190cd2fa87ea10316c75219b",
        "buggy_code": "m = re.search(r'(?P<revision>\\d+)', sout.read())",
        "fixed_code": "m = re.match(r'(?P<revision>\\d+)', sout.read())",
        "patch": "@@ -1204,7 +1204,7 @@ def _get_svn_revision(self,path):\n         revision = None\n         try:\n             sin, sout = os.popen4('svnversion')\n-            m = re.search(r'(?P<revision>\\d+)', sout.read())\n+            m = re.match(r'(?P<revision>\\d+)', sout.read())\n             if m:\n                 revision = int(m.group('revision'))\n                 return revision"
    },
    {
        "commit_id": "d6ce2d7dc3a62b45272779d771c86338cf4f2c56",
        "commit_message": "Fix up r_ so you can specify the minimum number of dimensions to force arrays to and allow alteration of the concatenation axis and whether or not to transpose 1d arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/d6ce2d7dc3a62b45272779d771c86338cf4f2c56",
        "buggy_code": "def  histogramnd(sample, bins=10, range=None, normed=False):",
        "fixed_code": "def histogramnd(sample, bins=10, range=None, normed=False):",
        "patch": "@@ -103,7 +103,7 @@ def histogram(a, bins=10, range=None, normed=False):\n     else:\n         return n, bins\n \n-def  histogramnd(sample, bins=10, range=None, normed=False):\n+def histogramnd(sample, bins=10, range=None, normed=False):\n     \"\"\"histogramnd(sample, bins = 10, range = None, normed = False) -> H, edges\n     \n     Return the N-dimensional histogram computed from sample."
    },
    {
        "commit_id": "d6ce2d7dc3a62b45272779d771c86338cf4f2c56",
        "commit_message": "Fix up r_ so you can specify the minimum number of dimensions to force arrays to and allow alteration of the concatenation axis and whether or not to transpose 1d arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/d6ce2d7dc3a62b45272779d771c86338cf4f2c56",
        "buggy_code": "d = r_[b,c,'1']  # append columns",
        "fixed_code": "d = r_['1',b,c]  # append columns",
        "patch": "@@ -39,7 +39,7 @@ def check_1d(self):\n     def check_2d(self):\n         b = rand(5,5)\n         c = rand(5,5)\n-        d = r_[b,c,'1']  # append columns\n+        d = r_['1',b,c]  # append columns\n         assert(d.shape == (5,10))\n         assert_array_equal(d[:,:5],b)\n         assert_array_equal(d[:,5:],c)"
    },
    {
        "commit_id": "aa27298288961201372528c1391bc73348f4efb8",
        "commit_message": "Fix random.poisson(0) to return 0 (#229)",
        "commit_url": "https://github.com/numpy/numpy/commit/aa27298288961201372528c1391bc73348f4efb8",
        "buggy_code": "'prod', 'std', 'ctypes'",
        "fixed_code": "'prod', 'std', 'ctypes', 'itemset'",
        "patch": "@@ -149,7 +149,7 @@ def check_instance_methods(self):\n             'searchsorted', 'setflags', 'setfield', 'sort', 'take',\n             'tofile', 'tolist', 'tostring', 'all', 'any', 'sum',\n             'argmax', 'argmin', 'min', 'max', 'mean', 'var', 'ptp',\n-            'prod', 'std', 'ctypes'\n+            'prod', 'std', 'ctypes', 'itemset'\n             ]\n         for attrib in dir(a):\n             if attrib.startswith('_') or attrib in excluded_methods:"
    },
    {
        "commit_id": "9109c6af6b5adba53ac5fd9161dbfa2e04c52a04",
        "commit_message": "Fix #198",
        "commit_url": "https://github.com/numpy/numpy/commit/9109c6af6b5adba53ac5fd9161dbfa2e04c52a04",
        "buggy_code": "except ValueError:",
        "fixed_code": "except (AttributeError, ValueError):",
        "patch": "@@ -198,7 +198,7 @@ def CCompiler_customize(self, dist, need_cxx=0):\n         # 'CCSHARED', 'LDSHARED', 'SO')\n         try:\n             self.compiler_so.remove('-Wstrict-prototypes')\n-        except ValueError:\n+        except (AttributeError, ValueError):\n             pass\n         \n         if hasattr(self,'compiler') and self.compiler[0].find('cc')>=0:"
    },
    {
        "commit_id": "2b6af2c5e95497ba9f7ea23eb9aef9f3bfc22aa2",
        "commit_message": "Add c_intp to ctypeslib.  Add converttree to alter_code functions.  Fix ctypeslib when ctypes is not available.",
        "commit_url": "https://github.com/numpy/numpy/commit/2b6af2c5e95497ba9f7ea23eb9aef9f3bfc22aa2",
        "buggy_code": "__all__ = ['convertfile', 'convertall']",
        "fixed_code": "__all__ = ['convertfile', 'convertall', 'converttree']",
        "patch": "@@ -52,7 +52,7 @@\n    - .setimaginary() --> .imag\n    \n \"\"\"\n-__all__ = ['convertfile', 'convertall']\n+__all__ = ['convertfile', 'convertall', 'converttree']\n \n import sys\n import os"
    },
    {
        "commit_id": "33a5ed76adf630b4ad0f90d02a1dc73d6f086ef8",
        "commit_message": "Fix rounding of integers with decimal < 0",
        "commit_url": "https://github.com/numpy/numpy/commit/33a5ed76adf630b4ad0f90d02a1dc73d6f086ef8",
        "buggy_code": "TD(flts, f='rint'),",
        "fixed_code": "TD(inexact, f='rint'),",
        "patch": "@@ -432,7 +432,7 @@ def __init__(self, nin, nout, identity, docstring,\n 'rint' :\n     Ufunc(1, 1, None,\n           'round x elementwise to the nearest integer, round halfway cases away from zero',\n-          TD(flts, f='rint'),\n+          TD(inexact, f='rint'),\n           TD(M, f='rint'),\n           ),\n 'arctan2' :"
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "return alltrue(s.flatten(),axis=0)",
        "fixed_code": "return alltrue(s.flatten())",
        "patch": "@@ -222,7 +222,7 @@ def arr_equal(self,arr1,arr2):\n         if arr1.shape != arr2.shape:\n             return False\n         s = arr1==arr2\n-        return alltrue(s.flatten(),axis=0)\n+        return alltrue(s.flatten())\n \n     def __str__(self):\n         return str(self.arr)"
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "s = take(a.shape, axes,axis=0)",
        "fixed_code": "s = take(a.shape, axes)",
        "patch": "@@ -200,7 +200,7 @@ def _cook_nd_args(a, s=None, axes=None, invreal=0):\n         if axes == None:\n             s = list(a.shape)\n         else:\n-            s = take(a.shape, axes,axis=0)\n+            s = take(a.shape, axes)\n     else:\n         shapeless = 0\n     s = list(s)"
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "assert numpy.alltrue( b == c)",
        "fixed_code": "assert numpy.alltrue( b == c )",
        "patch": "@@ -179,7 +179,7 @@ def test_unique1d_speed( plot_results = False ):\n         dt1s.append( dt1 )\n         dt2s.append( dt2 )\n \n-        assert numpy.alltrue( b == c)\n+        assert numpy.alltrue( b == c )\n \n \n     print nItems"
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "bytestr = str(var.itemsize*product(var.shape,axis=0))",
        "fixed_code": "bytestr = str(var.itemsize*product(var.shape))",
        "patch": "@@ -126,7 +126,7 @@ def who(vardict=None):\n                 namestr = name\n                 original=1\n             shapestr = \" x \".join(map(str, var.shape))\n-            bytestr = str(var.itemsize*product(var.shape,axis=0))\n+            bytestr = str(var.itemsize*product(var.shape))\n             sta.append([namestr, shapestr, bytestr, var.dtype.name,\n                         original])\n "
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "resids = array([sum((ravel(bstar)[n:])**2,axis=0)], dtype=result_t)",
        "fixed_code": "resids = array([sum((ravel(bstar)[n:])**2)], dtype=result_t)",
        "patch": "@@ -661,7 +661,7 @@ def lstsq(a, b, rcond=1.e-10):\n     if one_eq:\n         x = array(ravel(bstar)[:n], dtype=result_t, copy=True)\n         if results['rank']==n and m>n:\n-            resids = array([sum((ravel(bstar)[n:])**2,axis=0)], dtype=result_t)\n+            resids = array([sum((ravel(bstar)[n:])**2)], dtype=result_t)\n     else:\n         x = array(transpose(bstar)[:n,:], dtype=result_t, copy=True)\n         if results['rank']==n and m>n:"
    },
    {
        "commit_id": "63326185c04be2795a7a33028d427e9c8c31c900",
        "commit_message": "Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product",
        "commit_url": "https://github.com/numpy/numpy/commit/63326185c04be2795a7a33028d427e9c8c31c900",
        "buggy_code": "The probability of event len(prob) is 1.-Numeric.sum(prob,axis=0).",
        "fixed_code": "The probability of event len(prob) is 1.-Numeric.sum(prob).",
        "patch": "@@ -166,7 +166,7 @@ def multinomial(trials, probs, shape=[]):\n            trials is the number of trials in each multinomial distribution.\n            probs is a one dimensional array. There are len(prob)+1 events.\n            prob[i] is the probability of the i-th event, 0<=i<len(prob).\n-           The probability of event len(prob) is 1.-Numeric.sum(prob,axis=0).\n+           The probability of event len(prob) is 1.-Numeric.sum(prob).\n \n        The first form returns a single 1-D array containing one multinomially\n            distributed vector."
    },
    {
        "commit_id": "19a94794c106aef993bb2af6a7ea11950e362d0d",
        "commit_message": "Fix problem with randn in matlib.  Acutally add min, max, round, abs to the numpy name-space without over-writing builtins on from numpy import *",
        "commit_url": "https://github.com/numpy/numpy/commit/19a94794c106aef993bb2af6a7ea11950e362d0d",
        "buggy_code": "return asmatrix(N.random.rand(*args))",
        "fixed_code": "return asmatrix(N.random.randn(*args))",
        "patch": "@@ -46,6 +46,6 @@ def rand(*args):\n def randn(*args):\n     if isinstance(args[0], tuple):\n        args = args[0]\n-    return asmatrix(N.random.rand(*args))\n+    return asmatrix(N.random.randn(*args))\n \n     "
    },
    {
        "commit_id": "527937eb3df319c23a9ccfe26558739acec14e8c",
        "commit_message": "Fix sundry errors.",
        "commit_url": "https://github.com/numpy/numpy/commit/527937eb3df319c23a9ccfe26558739acec14e8c",
        "buggy_code": "u__all__ = ['logspace', 'linspace',",
        "fixed_code": "__all__ = ['logspace', 'linspace',",
        "patch": "@@ -1,4 +1,4 @@\n-u__all__ = ['logspace', 'linspace',\n+__all__ = ['logspace', 'linspace',\n            'select', 'piecewise', 'trim_zeros',\n            'copy', 'iterable', #'base_repr', 'binary_repr',\n            'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp',"
    },
    {
        "commit_id": "28e44d3bbe831956a10064de2b76298316dc7cf5",
        "commit_message": "Fix a problem with __all__ not being copied in oldnumeric.",
        "commit_url": "https://github.com/numpy/numpy/commit/28e44d3bbe831956a10064de2b76298316dc7cf5",
        "buggy_code": "__all__ = nold.__all__",
        "fixed_code": "__all__ = nold.__all__[:]",
        "patch": "@@ -4,6 +4,6 @@\n from numpy.lib.user_array import container as UserArray\n \n import numpy.oldnumeric as nold\n-__all__ = nold.__all__\n+__all__ = nold.__all__[:]\n __all__ += ['UserArray']\n del nold"
    },
    {
        "commit_id": "7a9ac3e5546a5d21487fe8569cfe56ecd1c86d7c",
        "commit_message": "Fix silly version number",
        "commit_url": "https://github.com/numpy/numpy/commit/7a9ac3e5546a5d21487fe8569cfe56ecd1c86d7c",
        "buggy_code": "version='1.0b4444'",
        "fixed_code": "version='1.0b4'",
        "patch": "@@ -1,4 +1,4 @@\n-version='1.0b4444'\n+version='1.0b4'\n release=False\n \n if not release:"
    },
    {
        "commit_id": "44b8093162207cf82143b58d9cdf5a2af7ed0731",
        "commit_message": "Fix ticket #252",
        "commit_url": "https://github.com/numpy/numpy/commit/44b8093162207cf82143b58d9cdf5a2af7ed0731",
        "buggy_code": "fstr = func2_re[name].sub('\\\\1B\\\\2',fstr)",
        "fixed_code": "fstr = func_re[name].sub('\\\\1B\\\\2',fstr)",
        "patch": "@@ -64,7 +64,7 @@\n \n def fixtypechars(fstr):\n     for name in _func2 + _func4 + _meth1:\n-        fstr = func2_re[name].sub('\\\\1B\\\\2',fstr)\n+        fstr = func_re[name].sub('\\\\1B\\\\2',fstr)\n     for char in _chars.keys():\n         fstr = meth_re[char].sub('\\\\1%s\\\\2'%_chars[char], fstr)\n     return fstr"
    },
    {
        "commit_id": "a764a203bbe4b26c25457f86ae902e248998bda6",
        "commit_message": "Fix mismatch between tp_name and pickle name so that pickles of scalar types will work.",
        "commit_url": "https://github.com/numpy/numpy/commit/a764a203bbe4b26c25457f86ae902e248998bda6",
        "buggy_code": "typename=arr.dtype.type.__name__[:-6]",
        "fixed_code": "typename=arr.dtype.name",
        "patch": "@@ -328,7 +328,7 @@ def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):\n     if typeless and arr.size:\n         return cName + \"(%s)\" % lst\n     else:\n-        typename=arr.dtype.type.__name__[:-6]\n+        typename=arr.dtype.name\n         lf = ''\n         if issubclass(arr.dtype.type, flexible):\n             typename = str(arr.dtype)"
    },
    {
        "commit_id": "9b0c090eaa73c7646dbc163cf2ff85a59e2109dc",
        "commit_message": "Fix error in oldnumeric.empty",
        "commit_url": "https://github.com/numpy/numpy/commit/9b0c090eaa73c7646dbc163cf2ff85a59e2109dc",
        "buggy_code": "return mu.empty(shape, dtype, order)",
        "fixed_code": "return mu.empty(shape, dtype)",
        "patch": "@@ -69,7 +69,7 @@ def identity(n,typecode='l', dtype=None):\n \n def empty(shape, typecode='l', dtype=None):\n     dtype = convtypecode(typecode, dtype)    \n-    return mu.empty(shape, dtype, order)\n+    return mu.empty(shape, dtype)\n \n def array(sequence, typecode=None, copy=1, savespace=0, dtype=None):\n     dtype = convtypecode2(typecode, dtype)"
    },
    {
        "commit_id": "f77587b2cd9091a99a31bb0d5f99c57cc077aa8e",
        "commit_message": "Fix Python 2.5 compatibility to work with new b3 release",
        "commit_url": "https://github.com/numpy/numpy/commit/f77587b2cd9091a99a31bb0d5f99c57cc077aa8e",
        "buggy_code": "__all__ = ['fromfile', 'fromstr', 'convertfile', 'convertall']",
        "fixed_code": "__all__ = ['convertfile', 'convertall']",
        "patch": "@@ -52,7 +52,7 @@\n    - .setimaginary() --> .imag\n    \n \"\"\"\n-__all__ = ['fromfile', 'fromstr', 'convertfile', 'convertall']\n+__all__ = ['convertfile', 'convertall']\n \n import sys\n import os"
    },
    {
        "commit_id": "f77587b2cd9091a99a31bb0d5f99c57cc077aa8e",
        "commit_message": "Fix Python 2.5 compatibility to work with new b3 release",
        "commit_url": "https://github.com/numpy/numpy/commit/f77587b2cd9091a99a31bb0d5f99c57cc077aa8e",
        "buggy_code": "__all__ = ['fromfile', 'fromstr', 'convertfile', 'convertall']",
        "fixed_code": "__all__ = ['convertfile', 'convertall']",
        "patch": "@@ -28,7 +28,7 @@\n  * Converts uses of type(...) is <type>\n    isinstance(..., <type>)\n \"\"\"\n-__all__ = ['fromfile', 'fromstr', 'convertfile', 'convertall']\n+__all__ = ['convertfile', 'convertall']\n \n import sys\n import os"
    },
    {
        "commit_id": "5e385c922b18cb35fc02f244bc59e9cdf96e9f6c",
        "commit_message": "Fix import problem",
        "commit_url": "https://github.com/numpy/numpy/commit/5e385c922b18cb35fc02f244bc59e9cdf96e9f6c",
        "buggy_code": "from numpy import dot as matrixmultiply, dot, vdot, ravel",
        "fixed_code": "from numpy import dot as matrixmultiply, dot, vdot, ravel, concatenate",
        "patch": "@@ -37,7 +37,7 @@\n __all__ += ['vdot', 'dot', 'matrixmultiply', 'ravel', 'indices',\n             'arange', 'concatenate']\n \n-from numpy import dot as matrixmultiply, dot, vdot, ravel\n+from numpy import dot as matrixmultiply, dot, vdot, ravel, concatenate\n \n def array(sequence=None, typecode=None, copy=1, savespace=0,\n           type=None, shape=None, dtype=None):"
    },
    {
        "commit_id": "3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "commit_message": "Fix uses of nonzero and add flatnonzero",
        "commit_url": "https://github.com/numpy/numpy/commit/3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "buggy_code": "i = numpy.nonzero(m)",
        "fixed_code": "i = numpy.nonzero(m)[0]",
        "patch": "@@ -306,7 +306,7 @@ def check_testPut(self):\n     def check_testMaPut(self):\n         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d\n         m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]\n-        i = numpy.nonzero(m)\n+        i = numpy.nonzero(m)[0]\n         putmask(xm, m, z)\n         assert take(xm, i) == z\n         put(ym, i, zm)"
    },
    {
        "commit_id": "3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "commit_message": "Fix uses of nonzero and add flatnonzero",
        "commit_url": "https://github.com/numpy/numpy/commit/3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "buggy_code": "non_zero = NX.nonzero(NX.ravel(p))",
        "fixed_code": "non_zero = NX.nonzero(NX.ravel(p))[0]",
        "patch": "@@ -90,7 +90,7 @@ def roots(p):\n         raise ValueError,\"Input must be a rank-1 array.\"\n \n     # find non-zero array entries\n-    non_zero = NX.nonzero(NX.ravel(p))\n+    non_zero = NX.nonzero(NX.ravel(p))[0]\n \n     # find the number of trailing zeros -- this is the number of roots at 0.\n     trailing_zeros = len(p) - non_zero[-1] - 1"
    },
    {
        "commit_id": "3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "commit_message": "Fix uses of nonzero and add flatnonzero",
        "commit_url": "https://github.com/numpy/numpy/commit/3457ac34f84f502de194ad825c0db4cb0d56dc82",
        "buggy_code": "ind = nonzero(wi != 0.0)        # indices of complex e-vals",
        "fixed_code": "ind = nonzero(wi != 0.0)[0]      # indices of complex e-vals",
        "patch": "@@ -313,7 +313,7 @@ def eig(a):\n         else:\n             w = wr+1j*wi\n             v = array(vr, w.dtype)\n-            ind = nonzero(wi != 0.0)        # indices of complex e-vals\n+            ind = nonzero(wi != 0.0)[0]      # indices of complex e-vals\n             for i in range(len(ind)/2):\n                 v[ind[2*i]] = vr[ind[2*i]] + 1j*vr[ind[2*i+1]]\n                 v[ind[2*i+1]] = vr[ind[2*i]] - 1j*vr[ind[2*i+1]]"
    },
    {
        "commit_id": "bb74b1f9346911c0d92b00732b3719d51746bd7d",
        "commit_message": "[distutils-revamp] Merged revisions 2923 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n{{{\n........\n  r2923 | cookedm | 2006-07-29 10:14:08 -0400 (Sat, 29 Jul 2006) | 2 lines\n  \n  Fix bugs in gnu and vast fcompilers (should fix #214)\n........\n}}}",
        "commit_url": "https://github.com/numpy/numpy/commit/bb74b1f9346911c0d92b00732b3719d51746bd7d",
        "buggy_code": "'-print-libgcc-file-name',",
        "fixed_code": "['-print-libgcc-file-name'],",
        "patch": "@@ -86,7 +86,7 @@ def get_flags_linker_so(self):\n \n     def get_libgcc_dir(self):\n         status, output = exec_command(self.compiler_f77 +\n-                                      '-print-libgcc-file-name',\n+                                      ['-print-libgcc-file-name'],\n                                       use_tee=0)\n         if not status:\n             return os.path.dirname(output)"
    },
    {
        "commit_id": "bb74b1f9346911c0d92b00732b3719d51746bd7d",
        "commit_message": "[distutils-revamp] Merged revisions 2923 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n{{{\n........\n  r2923 | cookedm | 2006-07-29 10:14:08 -0400 (Sat, 29 Jul 2006) | 2 lines\n  \n  Fix bugs in gnu and vast fcompilers (should fix #214)\n........\n}}}",
        "commit_url": "https://github.com/numpy/numpy/commit/bb74b1f9346911c0d92b00732b3719d51746bd7d",
        "buggy_code": "gnu.customize()",
        "fixed_code": "gnu.customize(None)",
        "patch": "@@ -35,7 +35,7 @@ def get_version_cmd(self):\n     def get_flags_arch(self):\n         vast_version = self.get_version()\n         gnu = GnuFCompiler()\n-        gnu.customize()\n+        gnu.customize(None)\n         self.version = gnu.get_version()\n         opt = GnuFCompiler.get_flags_arch(self)\n         self.version = vast_version"
    },
    {
        "commit_id": "3b49529e9114acd86afb0379218f8ab20c6d3955",
        "commit_message": "Fix bugs in gnu and vast fcompilers (should fix #214)",
        "commit_url": "https://github.com/numpy/numpy/commit/3b49529e9114acd86afb0379218f8ab20c6d3955",
        "buggy_code": "'-print-libgcc-file-name',",
        "fixed_code": "['-print-libgcc-file-name'],",
        "patch": "@@ -86,7 +86,7 @@ def get_flags_linker_so(self):\n \n     def get_libgcc_dir(self):\n         status, output = exec_command(self.compiler_f77 +\n-                                      '-print-libgcc-file-name',\n+                                      ['-print-libgcc-file-name'],\n                                       use_tee=0)\n         if not status:\n             return os.path.dirname(output)"
    },
    {
        "commit_id": "3b49529e9114acd86afb0379218f8ab20c6d3955",
        "commit_message": "Fix bugs in gnu and vast fcompilers (should fix #214)",
        "commit_url": "https://github.com/numpy/numpy/commit/3b49529e9114acd86afb0379218f8ab20c6d3955",
        "buggy_code": "gnu.customize()",
        "fixed_code": "gnu.customize(None)",
        "patch": "@@ -35,7 +35,7 @@ def get_version_cmd(self):\n     def get_flags_arch(self):\n         vast_version = self.get_version()\n         gnu = GnuFCompiler()\n-        gnu.customize()\n+        gnu.customize(None)\n         self.version = gnu.get_version()\n         opt = GnuFCompiler.get_flags_arch(self)\n         self.version = vast_version"
    },
    {
        "commit_id": "d48ab365b5023f251238404bbd6f40649e344c83",
        "commit_message": "[distutils-revamp] Merged revisions 2758-2921 via svnmerge from \nhttp://svn.scipy.org/svn/numpy/trunk/numpy/distutils\n\n........\n  r2813 | cookedm | 2006-07-12 22:48:24 -0400 (Wed, 12 Jul 2006) | 2 lines\n  \n  Fix use of os.WEXITSTATUS and friends: only use if they exist\n........\n  r2824 | cookedm | 2006-07-17 00:31:04 -0400 (Mon, 17 Jul 2006) | 1 line\n  \n  fix arch flags for ifort on machines in em64t mode\n........\n  r2825 | cookedm | 2006-07-17 19:43:21 -0400 (Mon, 17 Jul 2006) | 2 lines\n  \n  Replace ScipyTestCase with NumpyTestCase\n........\n  r2916 | oliphant | 2006-07-27 23:59:59 -0400 (Thu, 27 Jul 2006) | 1 line\n  \n  Add NPY_MAXARGS to arrayobject.h for Multi-iterator object.  Don't fail if get_atlas_version can't execute the code.\n........\n  r2917 | oliphant | 2006-07-28 00:08:05 -0400 (Fri, 28 Jul 2006) | 1 line\n  \n  Typo\n........\n  r2919 | cookedm | 2006-07-28 16:02:07 -0400 (Fri, 28 Jul 2006) | 2 lines\n  \n  Fix #114: Problems with building with MSVC and GCC under Cygwin\n........",
        "commit_url": "https://github.com/numpy/numpy/commit/d48ab365b5023f251238404bbd6f40649e344c83",
        "buggy_code": "distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O2'",
        "fixed_code": "distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O0'",
        "patch": "@@ -18,7 +18,7 @@\n _old_init_posix = distutils.sysconfig._init_posix\n def _new_init_posix():\n     _old_init_posix()\n-    distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O2'\n+    distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O0'\n #distutils.sysconfig._init_posix = _new_init_posix\n \n # Using customized CCompiler.spawn."
    },
    {
        "commit_id": "b8783285fe67338ef11ba0a40d80ce62172d8ba1",
        "commit_message": "Fix #114: Problems with building with MSVC and GCC under Cygwin",
        "commit_url": "https://github.com/numpy/numpy/commit/b8783285fe67338ef11ba0a40d80ce62172d8ba1",
        "buggy_code": "distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O2'",
        "fixed_code": "distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O0'",
        "patch": "@@ -18,7 +18,7 @@\n _old_init_posix = distutils.sysconfig._init_posix\n def _new_init_posix():\n     _old_init_posix()\n-    distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O2'\n+    distutils.sysconfig._config_vars['OPT'] = '-Wall -g -O0'\n #distutils.sysconfig._init_posix = _new_init_posix\n \n # Using customized CCompiler.spawn."
    },
    {
        "commit_id": "5508e33853b909315b0cc4f12e4daba5f2e767a6",
        "commit_message": "Fix unnecessary use of NULL in scalar_value and remove tabs.",
        "commit_url": "https://github.com/numpy/numpy/commit/5508e33853b909315b0cc4f12e4daba5f2e767a6",
        "buggy_code": "If dtype.char is not None and",
        "fixed_code": "If dtype is not None and",
        "patch": "@@ -512,7 +512,7 @@ class MaskedArray (object):\n            then the candidate data is data.data and the\n            mask used is data.mask. If data is a numeric array,\n            it is used as the candidate raw data.\n-           If dtype.char is not None and\n+           If dtype is not None and\n            is != data.dtype.char then a data copy is required.\n            Otherwise, the candidate is used.\n "
    },
    {
        "commit_id": "0adda1b2ab591010396559c1da5c062797b7775a",
        "commit_message": "Fix ticket #202",
        "commit_url": "https://github.com/numpy/numpy/commit/0adda1b2ab591010396559c1da5c062797b7775a",
        "buggy_code": "obj.dtype = dtype",
        "fixed_code": "obj = obj.view(dtype)",
        "patch": "@@ -498,7 +498,7 @@ def array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None,\n \n     elif isinstance(obj, sb.ndarray):\n         if dtype is not None and (obj.dtype != dtype):\n-            obj.dtype = dtype\n+            obj = obj.view(dtype)\n         res = obj.view(recarray)\n         if issubclass(res.dtype.type, nt.void):\n             res.dtype = sb.dtype((record, res.dtype))"
    },
    {
        "commit_id": "4eea418ebf33e4d78fd10b6db7d5daadc0bd359d",
        "commit_message": "Update check for no-threading and change wording of error.",
        "commit_url": "https://github.com/numpy/numpy/commit/4eea418ebf33e4d78fd10b6db7d5daadc0bd359d",
        "buggy_code": "if sys.version[:3] < '2.4':",
        "fixed_code": "if sys.version[:5] < '2.4.2':",
        "patch": "@@ -42,7 +42,7 @@ def generate_config_h(ext, build_dir):\n                 #  ufunc code.  NPY_ALLOW_C_API and friends\n                 #  cause the segfault. So, we disable threading\n                 #  for now. \n-            if sys.version[:3] < '2.4':\n+            if sys.version[:5] < '2.4.2':\n                 nosmp = 1\n             else:\n                 # Perhaps a fancier check is in order here."
    },
    {
        "commit_id": "f9a971eeef6761cedc6e48cb1dcf7af3f7966925",
        "commit_message": "Fix ticket #203 [for Andrew Straw].",
        "commit_url": "https://github.com/numpy/numpy/commit/f9a971eeef6761cedc6e48cb1dcf7af3f7966925",
        "buggy_code": "__all__ = N.__all__",
        "fixed_code": "__all__ = N.__all__[:] # copy numpy namespace",
        "patch": "@@ -5,7 +5,7 @@\n \n __version__ = N.__version__\n \n-__all__ = N.__all__\n+__all__ = N.__all__[:] # copy numpy namespace\n __all__ += ['rand', 'randn']\n \n def empty(shape, dtype=None, order='C'):"
    },
    {
        "commit_id": "ee4083f770439ec67e71b45fea68a8369aee57ce",
        "commit_message": "Fixed a memory-leak in EnsureArray.  Added __array_priority__ to array scalars.  Added bug-fixes part of david huard's histogramdd ticket.",
        "commit_url": "https://github.com/numpy/numpy/commit/ee4083f770439ec67e71b45fea68a8369aee57ce",
        "buggy_code": "H = np.histogram2d(x,y, (xedges, yedges))[0]",
        "fixed_code": "H = np.histogram2d(x, y, (xedges, yedges))[0]",
        "patch": "@@ -138,7 +138,7 @@ def check_simple(self):\n         y = array([ 0.09233859,  0.18626021,  0.34556073,  0.39676747,  0.53881673])\n         xedges = np.linspace(0,1,10)\n         yedges = np.linspace(0,1,10)\n-        H = np.histogram2d(x,y, (xedges, yedges))[0]\n+        H = np.histogram2d(x, y, (xedges, yedges))[0]\n         answer = np.array([[0, 0, 0, 1, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 1, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],"
    },
    {
        "commit_id": "ba41f2f5d864551b4462a9f53e8f23f626b11105",
        "commit_message": "Fix sub-classing of matrices..",
        "commit_url": "https://github.com/numpy/numpy/commit/ba41f2f5d864551b4462a9f53e8f23f626b11105",
        "buggy_code": "new = data.view(matrix)",
        "fixed_code": "new = data.view(subtype)",
        "patch": "@@ -68,7 +68,7 @@ def __new__(subtype, data, dtype=None, copy=True):\n                 intype = data.dtype\n             else:\n                 intype = N.dtype(dtype)\n-            new = data.view(matrix)\n+            new = data.view(subtype)\n             if intype != data.dtype:\n                 return new.astype(intype)\n             if copy: return new.copy()"
    },
    {
        "commit_id": "eefce918a50343132053487c8f0359340cc6ca8a",
        "commit_message": "Fix ticket #175",
        "commit_url": "https://github.com/numpy/numpy/commit/eefce918a50343132053487c8f0359340cc6ca8a",
        "buggy_code": "md = make_mask(umath.less_equal (fa, 0), flag=1)",
        "fixed_code": "md = make_mask(umath.less(fa, 0), flag=1)",
        "patch": "@@ -1585,7 +1585,7 @@ def power (a, b, third=None):\n     fb = filled(b, 1)\n     if fb.dtype.char in typecodes[\"Integer\"]:\n         return masked_array(umath.power(fa, fb), m)\n-    md = make_mask(umath.less_equal (fa, 0), flag=1)\n+    md = make_mask(umath.less(fa, 0), flag=1)\n     m = mask_or(m, md)\n     if m is nomask:\n         return masked_array(umath.power(fa, fb))"
    },
    {
        "commit_id": "3acb430d1422a16f9bf705fb31cef2c53b3ba9b0",
        "commit_message": "Fix to example.",
        "commit_url": "https://github.com/numpy/numpy/commit/3acb430d1422a16f9bf705fb31cef2c53b3ba9b0",
        "buggy_code": "t3 = timeit.Timer(code, 'import numarray.mlab as N; a=N.random.rand(%d,%d)' % (N,N))",
        "fixed_code": "t3 = timeit.Timer(code, 'import numarray.mlab as N; a=N.rand(%d,%d)' % (N,N))",
        "patch": "@@ -29,7 +29,7 @@\n \"\"\" % (N,N,N,N)\n t1 = timeit.Timer(code, 'import numpy as N; a = N.random.rand(%d,%d)' % (N,N))\n t2 = timeit.Timer(code, 'import MLab as N; a=N.rand(%d,%d)' % (N,N))\n-t3 = timeit.Timer(code, 'import numarray.mlab as N; a=N.random.rand(%d,%d)' % (N,N))\n+t3 = timeit.Timer(code, 'import numarray.mlab as N; a=N.rand(%d,%d)' % (N,N))\n t4 = timeit.Timer(code2, 'import numpy as N; a = N.random.rand(%d,%d)' % (N,N))\n t5 = timeit.Timer(code3, setup3)\n t6 = timeit.Timer(\"res = a + a.transpose()\",\"import numpy as N; a=N.random.rand(%d,%d)\" % (N,N))"
    },
    {
        "commit_id": "af40b197e5af26afe09ebc1b9392993fa8a62270",
        "commit_message": "fix bug in eig with complex solutions",
        "commit_url": "https://github.com/numpy/numpy/commit/af40b197e5af26afe09ebc1b9392993fa8a62270",
        "buggy_code": "v = array(vr,Complex)",
        "fixed_code": "v = array(vr, w.dtype)",
        "patch": "@@ -278,7 +278,7 @@ def eig(a):\n             v = vr\n         else:\n             w = wr+1j*wi\n-            v = array(vr,Complex)\n+            v = array(vr, w.dtype)\n             ind = nonzero(\n                           equal(\n                               equal(wi,0.0) # true for real e-vals"
    },
    {
        "commit_id": "3e05403c03182b51d8fecd8b478b44bc7b1f65d9",
        "commit_message": "Fix docstrings.",
        "commit_url": "https://github.com/numpy/numpy/commit/3e05403c03182b51d8fecd8b478b44bc7b1f65d9",
        "buggy_code": "along the given axis, so that take(a,result,axis) is the sorted array.",
        "fixed_code": "along the given axis.",
        "patch": "@@ -134,7 +134,7 @@ def sort(a, axis=-1):\n \n def argsort(a, axis=-1):\n     \"\"\"argsort(a,axis=-1) return the indices into a of the sorted array\n-    along the given axis, so that take(a,result,axis) is the sorted array.\n+    along the given axis.\n     \"\"\"\n     try:\n         argsort = a.argsort"
    },
    {
        "commit_id": "d1b492038476e0da520c97549e39c9284ae64e18",
        "commit_message": "Fix f2py to use new names",
        "commit_url": "https://github.com/numpy/numpy/commit/d1b492038476e0da520c97549e39c9284ae64e18",
        "buggy_code": "'decl':'\\tintp #varname#_Dims[#rank#] = {#rank*[-1]#};',",
        "fixed_code": "'decl':'\\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',",
        "patch": "@@ -349,7 +349,7 @@\n     },\n # Array ...\n     {\n-    'decl':'\\tintp #varname#_Dims[#rank#] = {#rank*[-1]#};',\n+    'decl':'\\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',\n     'setdims':'\\t#cbsetdims#;',\n     '_check':isarray,\n     '_depend':''"
    },
    {
        "commit_id": "8904c7ab8d3e5fb1233e80586c5a4c6b7df4a14b",
        "commit_message": "Fix numeric.indices on 64-bit platforms.",
        "commit_url": "https://github.com/numpy/numpy/commit/8904c7ab8d3e5fb1233e80586c5a4c6b7df4a14b",
        "buggy_code": "return array(lst)",
        "fixed_code": "return array(lst, dtype)",
        "patch": "@@ -334,7 +334,7 @@ def indices(dimensions, dtype=int):\n     lst = []\n     for i in range(len(dimensions)):\n         lst.append( add.accumulate(tmp, i, )-1 )\n-    return array(lst)\n+    return array(lst, dtype)\n \n def fromfunction(function, dimensions, **kwargs):\n     \"\"\"fromfunction(function, dimensions) returns an array constructed by"
    },
    {
        "commit_id": "216f071ab060a6f08c22666aea33f7095f079d1e",
        "commit_message": "Fix UserArray.",
        "commit_url": "https://github.com/numpy/numpy/commit/216f071ab060a6f08c22666aea33f7095f079d1e",
        "buggy_code": "self.array = array(data, dtype, copy)",
        "fixed_code": "self.array = array(data, dtype, copy=copy)",
        "patch": "@@ -11,7 +11,7 @@\n \n class UserArray(object):\n     def __init__(self, data, dtype=None, copy=True):\n-        self.array = array(data, dtype, copy)\n+        self.array = array(data, dtype, copy=copy)\n \n     def __repr__(self):\n         if len(self.shape) > 0:"
    },
    {
        "commit_id": "485f171d57748773f8f8d162e89cb668cfc55c11",
        "commit_message": "Fix buffered reduce, accumulate, and reduceat.",
        "commit_url": "https://github.com/numpy/numpy/commit/485f171d57748773f8f8d162e89cb668cfc55c11",
        "buggy_code": "fortran_int = int32",
        "fixed_code": "fortran_int = intc",
        "patch": "@@ -19,7 +19,7 @@\n from numpy.lib import *\n import lapack_lite\n \n-fortran_int = int32\n+fortran_int = intc\n \n # Error object\n class LinAlgError(Exception):"
    },
    {
        "commit_id": "9ad24c52f3dd0cb3bfdc524214aad1c6e31e70cc",
        "commit_message": "Fix up failing tests.",
        "commit_url": "https://github.com/numpy/numpy/commit/9ad24c52f3dd0cb3bfdc524214aad1c6e31e70cc",
        "buggy_code": "'prod', 'std'",
        "fixed_code": "'prod', 'std', 'ctypes'",
        "patch": "@@ -149,7 +149,7 @@ def check_instance_methods(self):\n             'searchsorted', 'setflags', 'setfield', 'sort', 'take',\n             'tofile', 'tolist', 'tostring', 'all', 'any', 'sum',\n             'argmax', 'argmin', 'min', 'max', 'mean', 'var', 'ptp',\n-            'prod', 'std'\n+            'prod', 'std', 'ctypes'\n             ]\n         for attrib in dir(a):\n             if attrib.startswith('_') or attrib in excluded_methods:"
    },
    {
        "commit_id": "b75bb07b82bacfe324ee631e7218b45f281a65e7",
        "commit_message": "from Neilen Marais: make numpy.testing compatible with the nosetest package with a trivial patch",
        "commit_url": "https://github.com/numpy/numpy/commit/b75bb07b82bacfe324ee631e7218b45f281a65e7",
        "buggy_code": "test, errstr = result.errors[-1]",
        "fixed_code": "test, errstr = result.errors[-1][:2]",
        "patch": "@@ -139,7 +139,7 @@ def __call__(self, result=None):\n         result.stream = _dummy_stream(save_stream)\n         unittest.TestCase.__call__(self, result)\n         if nof_errors != len(result.errors):\n-            test, errstr = result.errors[-1]\n+            test, errstr = result.errors[-1][:2]\n             if isinstance(errstr, tuple):\n                 errstr = str(errstr[0])\n             elif isinstance(errstr, str):"
    },
    {
        "commit_id": "b29b5900de7389529d369f35a5f9629e8463c275",
        "commit_message": "\nFix reference-count problem in z **= 1 and more numarray compatiblity fixes.",
        "commit_url": "https://github.com/numpy/numpy/commit/b29b5900de7389529d369f35a5f9629e8463c275",
        "buggy_code": "config.add_data_files('include/numarray/*.h')",
        "fixed_code": "config.add_data_files('numpy_numarray')",
        "patch": "@@ -5,7 +5,7 @@ def configuration(parent_package='',top_path=None):\n     from numpy.distutils.misc_util import Configuration\n     config = Configuration('numarray',parent_package,top_path)\n \n-    config.add_data_files('include/numarray/*.h')\n+    config.add_data_files('numpy_numarray')\n \n     # Configure fftpack_lite\n     config.add_extension('_capi',"
    },
    {
        "commit_id": "aa2c1141f3782ac063f78380bead0be3a066c5cd",
        "commit_message": "Fix bad syntax in generated __config__.py files.",
        "commit_url": "https://github.com/numpy/numpy/commit/aa2c1141f3782ac063f78380bead0be3a066c5cd",
        "buggy_code": "f.write('\\ndef get_info(name): g=globals(); return g.get(name,g.get(name+\"_info\",{}))\\n')",
        "fixed_code": "f.write('\\ndef get_info(name):\\n    g=globals()\\n    return g.get(name,g.get(name+\"_info\",{}))\\n')",
        "patch": "@@ -1385,7 +1385,7 @@ def generate_config_py(target):\n     f.write('__all__ = [\"get_info\",\"show\"]\\n\\n')\n     for k, i in system_info.saved_results.items():\n         f.write('%s=%r\\n' % (k, i))\n-    f.write('\\ndef get_info(name): g=globals(); return g.get(name,g.get(name+\"_info\",{}))\\n')\n+    f.write('\\ndef get_info(name):\\n    g=globals()\\n    return g.get(name,g.get(name+\"_info\",{}))\\n')\n     f.write('''\n def show():\n     for name,info_dict in globals().items():"
    },
    {
        "commit_id": "4cd71bf7016873c4f75d3206c516cf8505eda31d",
        "commit_message": "Fix bug in _myunincmp.",
        "commit_url": "https://github.com/numpy/numpy/commit/4cd71bf7016873c4f75d3206c516cf8505eda31d",
        "buggy_code": "('Name', 'U8'),  # Try out 'U8' when interpretation of Unicode strings is more clear",
        "fixed_code": "('Name', 'U8'),",
        "patch": "@@ -50,7 +50,7 @@\n         ('z2', 'b1')]),\n     ('color', 'S2'),\n     ('info', [\n-        ('Name', 'U8'),  # Try out 'U8' when interpretation of Unicode strings is more clear\n+        ('Name', 'U8'),  \n         ('Value', 'c16')]),\n     ('y', 'f8', (2, 2)),\n     ('z', 'u1')]"
    },
    {
        "commit_id": "bc5dc0aeeca04450fd4c6b44da55dc812e5a3f94",
        "commit_message": "Fix-up imports a bit.",
        "commit_url": "https://github.com/numpy/numpy/commit/bc5dc0aeeca04450fd4c6b44da55dc812e5a3f94",
        "buggy_code": "from numpy.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\",
        "fixed_code": "from numpy.core.fromnumeric import cumsum, ptp, mean, std, prod, cumprod, \\",
        "patch": "@@ -6,7 +6,7 @@\n from numpy.core.fromnumeric import amax as max, amin as min\n from function_base import msort, median, trapz, diff, cov, corrcoef, \\\n      kaiser, blackman, bartlett, hanning, hamming, sinc, angle\n-from numpy.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\\n+from numpy.core.fromnumeric import cumsum, ptp, mean, std, prod, cumprod, \\\n      squeeze\n from polynomial import roots\n "
    },
    {
        "commit_id": "6408d0d38af09323b9192d0185f8435060e4e93a",
        "commit_message": "Fix-up oldnumeric module",
        "commit_url": "https://github.com/numpy/numpy/commit/6408d0d38af09323b9192d0185f8435060e4e93a",
        "buggy_code": "from numpy.core.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\",
        "fixed_code": "from numpy.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\",
        "patch": "@@ -6,7 +6,7 @@\n from numpy.core.fromnumeric import amax as max, amin as min\n from function_base import msort, median, trapz, diff, cov, corrcoef, \\\n      kaiser, blackman, bartlett, hanning, hamming, sinc, angle\n-from numpy.core.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\\n+from numpy.oldnumeric import cumsum, ptp, mean, std, prod, cumprod, \\\n      squeeze\n from polynomial import roots\n "
    },
    {
        "commit_id": "e0bd761dc33d9716be220d6481756aa982599132",
        "commit_message": "Fix typo in system_info (at 6am 'libray' looks like 'library')",
        "commit_url": "https://github.com/numpy/numpy/commit/e0bd761dc33d9716be220d6481756aa982599132",
        "buggy_code": "libray_dirs=config.get('library_dirs', []),",
        "fixed_code": "library_dirs=config.get('library_dirs', []),",
        "patch": "@@ -1082,7 +1082,7 @@ def get_atlas_version(**config):\n     c = cmd_config(Distribution())\n     s, o = c.get_output(atlas_version_c_text,\n                         libraries=config.get('libraries', []),\n-                        libray_dirs=config.get('library_dirs', []),\n+                        library_dirs=config.get('library_dirs', []),\n                        )\n \n     atlas_version = None"
    },
    {
        "commit_id": "8f7d59f607e418a5b9e09295a0c87aff5d0f2b1c",
        "commit_message": "Fix unravel_index docstring.",
        "commit_url": "https://github.com/numpy/numpy/commit/8f7d59f607e418a5b9e09295a0c87aff5d0f2b1c",
        "buggy_code": "idx = unravel_index(p)",
        "fixed_code": "idx = unravel_index(p,x.shape)",
        "patch": "@@ -24,7 +24,7 @@ def unravel_index(x,dims):\n \n     Example usage:\n       p = x.argmax()\n-      idx = unravel_index(p)\n+      idx = unravel_index(p,x.shape)\n       x[idx] == x.max()\n \n     Note:  x.flat[p] == x.max()"
    },
    {
        "commit_id": "8cfbbe13d9a2c94529e2d2c06a8e154d9892c8c4",
        "commit_message": "Fix for using NAG Fortran 95, due to James Graham <jg307@cam.ac.uk>",
        "commit_url": "https://github.com/numpy/numpy/commit/8cfbbe13d9a2c94529e2d2c06a8e154d9892c8c4",
        "buggy_code": "return [\"-Wl,shared\"]",
        "fixed_code": "return [\"-Wl,-shared\"]",
        "patch": "@@ -22,7 +22,7 @@ class NAGFCompiler(FCompiler):\n     def get_flags_linker_so(self):\n         if sys.platform=='darwin':\n             return ['-unsharedf95','-Wl,-bundle,-flat_namespace,-undefined,suppress']\n-        return [\"-Wl,shared\"]\n+        return [\"-Wl,-shared\"]\n     def get_flags_opt(self):\n         return ['-O4']\n     def get_flags_arch(self):"
    },
    {
        "commit_id": "b686a426271d7654bbca0c5365369414c2283109",
        "commit_message": "Fix for linspace (#118) was incomplete; good now.",
        "commit_url": "https://github.com/numpy/numpy/commit/b686a426271d7654bbca0c5365369414c2283109",
        "buggy_code": "return array([])",
        "fixed_code": "return array([], float)",
        "patch": "@@ -35,7 +35,7 @@ def linspace(start, stop, num=50, endpoint=True, retstep=False):\n     \"\"\"\n     num = int(num)\n     if num <= 0:\n-        return array([])\n+        return array([], float)\n     if endpoint:\n         if num == 1:\n             return array([float(start)])"
    },
    {
        "commit_id": "a1445160dea079dd0e1c82fcda7729d3809b13d7",
        "commit_message": "#118: linspace should always return floats\nPatch from stefan; fix special case which could return an array of one int.",
        "commit_url": "https://github.com/numpy/numpy/commit/a1445160dea079dd0e1c82fcda7729d3809b13d7",
        "buggy_code": "return array([start])",
        "fixed_code": "return array([float(start)])",
        "patch": "@@ -38,7 +38,7 @@ def linspace(start, stop, num=50, endpoint=True, retstep=False):\n         return array([])\n     if endpoint:\n         if num == 1:\n-            return array([start])\n+            return array([float(start)])\n         step = (stop-start)/float((num-1))\n     else:\n         step = (stop-start)/float(num)"
    },
    {
        "commit_id": "30581a54d96448422cc550143e2b6fb860ef5c45",
        "commit_message": "fix: `emath` instead of `nmath`",
        "commit_url": "https://github.com/numpy/numpy/commit/30581a54d96448422cc550143e2b6fb860ef5c45",
        "buggy_code": "__all__ = ['nmath','math']",
        "fixed_code": "__all__ = ['emath','math']",
        "patch": "@@ -18,7 +18,7 @@\n from arraysetops import *\n import math\n \n-__all__ = ['nmath','math']\n+__all__ = ['emath','math']\n __all__ += type_check.__all__\n __all__ += index_tricks.__all__\n __all__ += function_base.__all__"
    },
    {
        "commit_id": "61b04184c82083570a3ad019bb34391c0f6db1ae",
        "commit_message": "Fix splitting a pattern on win32.",
        "commit_url": "https://github.com/numpy/numpy/commit/61b04184c82083570a3ad019bb34391c0f6db1ae",
        "buggy_code": "pattern_list = d.split(os.sep)",
        "fixed_code": "pattern_list = abspath(d).split(os.sep)",
        "patch": "@@ -780,7 +780,7 @@ def add_data_dir(self,data_path):\n         paths = self.paths(data_path, include_non_existing=False)\n         if is_glob_pattern(data_path):\n             if is_glob_pattern(d):\n-                pattern_list = d.split(os.sep)\n+                pattern_list = abspath(d).split(os.sep)\n                 pattern_list.reverse()\n                 # /a/*//b/ -> /a/*/b\n                 rl = range(len(pattern_list)-1); rl.reverse()"
    },
    {
        "commit_id": "51a6c983cedeceee316a5d7b2e99f6ebca65b518",
        "commit_message": "Fix build_src inplace build for library sources.",
        "commit_url": "https://github.com/numpy/numpy/commit/51a6c983cedeceee316a5d7b2e99f6ebca65b518",
        "buggy_code": "if self.inplace:",
        "fixed_code": "if self.inplace and not is_sequence(extension):",
        "patch": "@@ -247,7 +247,7 @@ def generate_sources(self, sources, extension):\n                 func_sources.append(source)\n         if not func_sources:\n             return new_sources\n-        if self.inplace:\n+        if self.inplace and not is_sequence(extension):\n             build_dir = self.ext_target_dir\n         else:\n             if is_sequence(extension):"
    },
    {
        "commit_id": "787e44fdc052f858679175850515259433e48ed5",
        "commit_message": "fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/787e44fdc052f858679175850515259433e48ed5",
        "buggy_code": "return object.__getattr__(self, attr)",
        "fixed_code": "return object.__getattribute__(self, attr)",
        "patch": "@@ -192,7 +192,7 @@ def __setattr__(self,attr,value):\n     # Only called after other approaches fail.\n     def __getattr__(self,attr):\n         if (attr == 'array'):\n-            return object.__getattr__(self, attr)\n+            return object.__getattribute__(self, attr)\n         return self.array.__getattribute__(attr)\n \n #############################################################"
    },
    {
        "commit_id": "8a20ec0dd37e84c24bda059c6d76d56790c47c53",
        "commit_message": "Fix the test for Ticket #59",
        "commit_url": "https://github.com/numpy/numpy/commit/8a20ec0dd37e84c24bda059c6d76d56790c47c53",
        "buggy_code": "x = ones((1,1))",
        "fixed_code": "x = ones((1,1,1))",
        "patch": "@@ -253,7 +253,7 @@ def check_tuple(self):\n         x = ones((1,1)) \n         x[:,(0,)] = 2.0 \n         assert_array_equal(x, array([[2.0]])) \n-        x = ones((1,1)) \n+        x = ones((1,1,1)) \n         x[:,:,(0,)] = 2.0 \n         assert_array_equal(x, array([[[2.0]]])) \n "
    },
    {
        "commit_id": "8680d6f6df88d32e07a25c441fa29ac7a1095919",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/numpy/numpy/commit/8680d6f6df88d32e07a25c441fa29ac7a1095919",
        "buggy_code": "if callable(file):",
        "fixed_code": "if callable(filepat):",
        "patch": "@@ -865,7 +865,7 @@ def add_data_files(self,*files):\n             raise TypeError,`type(files)`\n \n         if d is None:\n-            if callable(file):\n+            if callable(filepat):\n                 d = ''\n             elif os.path.isabs(filepat):\n                 d = ''"
    },
    {
        "commit_id": "5bce29536aa3b0238a728c3fd46c8edc73d3a84f",
        "commit_message": "Fix-up _wrapit",
        "commit_url": "https://github.com/numpy/numpy/commit/5bce29536aa3b0238a728c3fd46c8edc73d3a84f",
        "buggy_code": "add_newdoc('numpy.core','dtypedescr',",
        "fixed_code": "add_newdoc('numpy.core','dtype',",
        "patch": "@@ -1,7 +1,7 @@\n \n from lib import add_newdoc\n \n-add_newdoc('numpy.core','dtypedescr',\n+add_newdoc('numpy.core','dtype',\n            [('fields', \"Fields of the data-typedescr if any.\"),\n             ('alignment', \"Needed alignment for this data-type\"),\n             ('byteorder',"
    },
    {
        "commit_id": "7c4be14e609cea05db330e39fbf79926afe16c2e",
        "commit_message": "Fix up asanyarray usage",
        "commit_url": "https://github.com/numpy/numpy/commit/7c4be14e609cea05db330e39fbf79926afe16c2e",
        "buggy_code": "a = asanyarray(a, copy=True)",
        "fixed_code": "a = asanyarray(a).copy()",
        "patch": "@@ -257,7 +257,7 @@ def transpose(a, axes=None):\n def sort(a, axis=-1):\n     \"\"\"sort(a,axis=-1) returns array with elements sorted along given axis.\n     \"\"\"\n-    a = asanyarray(a, copy=True)\n+    a = asanyarray(a).copy()\n     a.sort(axis)\n     return a\n "
    },
    {
        "commit_id": "0818507117b55a7f0e95dfc3cbe9f6ed1354aad9",
        "commit_message": "Fix cov and corrcoef in numpy",
        "commit_url": "https://github.com/numpy/numpy/commit/0818507117b55a7f0e95dfc3cbe9f6ed1354aad9",
        "buggy_code": "X -= X.mean(axis=axis)[tup]",
        "fixed_code": "X -= X.mean(axis=1-axis)[tup]",
        "patch": "@@ -653,7 +653,7 @@ def cov(m,y=None, rowvar=1, bias=0):\n         y = asarray(y,ndmin=2)\n         X = concatenate((X,y),axis)\n \n-    X -= X.mean(axis=axis)[tup]\n+    X -= X.mean(axis=1-axis)[tup]\n     if rowvar:\n         N = X.shape[1]\n     else:"
    },
    {
        "commit_id": "abe1567d970117ed9a3634c10c843da2e3399f60",
        "commit_message": "Fix-up name-spaces.",
        "commit_url": "https://github.com/numpy/numpy/commit/abe1567d970117ed9a3634c10c843da2e3399f60",
        "buggy_code": "return len(atleast_1d(a))",
        "fixed_code": "return len(array(a,ndmin=1))",
        "patch": "@@ -514,7 +514,7 @@ def alen(a):\n     try:\n         return len(a)\n     except TypeError:\n-        return len(atleast_1d(a))\n+        return len(array(a,ndmin=1))\n \n def prod(a, axis=0, dtype=None):\n     \"\"\"Return the product of the elements along the given axis"
    },
    {
        "commit_id": "24cd77be0d56b1a98424d4f31aa58b506c4598e0",
        "commit_message": "fix imports so that all tests pass",
        "commit_url": "https://github.com/numpy/numpy/commit/24cd77be0d56b1a98424d4f31aa58b506c4598e0",
        "buggy_code": "import numpy.linalg as linalg",
        "fixed_code": "import linalg",
        "patch": "@@ -16,7 +16,7 @@\n            ]\n \n from numpy.core import transpose\n-import numpy.linalg as linalg\n+import linalg\n \n # Error object\n class LinAlgError(Exception):"
    },
    {
        "commit_id": "ee8e27ad4facd8123858f3b046f6bba78fea7c89",
        "commit_message": "Fix 2.3 compatibility on windows.",
        "commit_url": "https://github.com/numpy/numpy/commit/ee8e27ad4facd8123858f3b046f6bba78fea7c89",
        "buggy_code": "if os.name=='nt':",
        "fixed_code": "if os.name=='nt' and sys.version[:3] > '2.3':",
        "patch": "@@ -64,7 +64,7 @@ def memusage():\n         \"\"\" Return memory usage of running python. [Not implemented]\"\"\"\n         return\n \n-if os.name=='nt':\n+if os.name=='nt' and sys.version[:3] > '2.3':\n     # Code stolen from enthought/debug/memusage.py\n     import win32pdh\n     # from win32pdhutil, part of the win32all package"
    },
    {
        "commit_id": "67940c3d69c51bae3561695693020ced3d9d470a",
        "commit_message": "Fix up oldnumeric.py functions to return intput class where possible.  Allow complex-valued arrays in PyArray_Round. Add backward-compatible support for Python2.5 ssize_t changes.",
        "commit_url": "https://github.com/numpy/numpy/commit/67940c3d69c51bae3561695693020ced3d9d470a",
        "buggy_code": "return array(a, dtype, copy=False, fortran=fortran, subok=1, ndmin=ndmin)",
        "fixed_code": "return array(a, dtype, copy=copy, fortran=fortran, subok=1, ndmin=ndmin)",
        "patch": "@@ -76,7 +76,7 @@ def asarray(a, dtype=None, fortran=False, ndmin=0):\n def asanyarray(a, dtype=None, copy=False, fortran=False, ndmin=0):\n     \"\"\"will pass subclasses through...\n     \"\"\"\n-    return array(a, dtype, copy=False, fortran=fortran, subok=1, ndmin=ndmin)\n+    return array(a, dtype, copy=copy, fortran=fortran, subok=1, ndmin=ndmin)\n \n def isfortran(a):\n     return a.flags['FNC']"
    },
    {
        "commit_id": "704204550661e497888ac879e292cb69a55bbd8c",
        "commit_message": "Fix f2py to handle character arrays in common blocks",
        "commit_url": "https://github.com/numpy/numpy/commit/704204550661e497888ac879e292cb69a55bbd8c",
        "buggy_code": "iadd('\\tPyDict_SetItemString(d, \\\"%s\\\", PyFortranObject_New(f2py_%s_def,f2py_init_%s));'%(name,name,name))",
        "fixed_code": "iadd('\\tF2PyDict_SetItemString(d, \\\"%s\\\", PyFortranObject_New(f2py_%s_def,f2py_init_%s));'%(name,name,name))",
        "patch": "@@ -112,7 +112,7 @@ def dadd(line,s=doc): s[0] = '%s\\n%s'%(s[0],line)\n         cadd('\\t%s(f2pyinit%s,F2PYINIT%s)(f2py_setup_%s);'\\\n              %(F_FUNC,lower_name,string.upper(name),name))\n         cadd('}\\n')\n-        iadd('\\tPyDict_SetItemString(d, \\\"%s\\\", PyFortranObject_New(f2py_%s_def,f2py_init_%s));'%(name,name,name))\n+        iadd('\\tF2PyDict_SetItemString(d, \\\"%s\\\", PyFortranObject_New(f2py_%s_def,f2py_init_%s));'%(name,name,name))\n         tname = string.replace(name,'_','\\\\_')\n         dadd('\\\\subsection{Common block \\\\texttt{%s}}\\n'%(tname))\n         dadd('\\\\begin{description}')"
    },
    {
        "commit_id": "07a9750e934ad45f086b73b9f9f114ea4b2fcdd1",
        "commit_message": "Fix an issue with string/unicode arrays created from scalars.",
        "commit_url": "https://github.com/numpy/numpy/commit/07a9750e934ad45f086b73b9f9f114ea4b2fcdd1",
        "buggy_code": "_unicodesize = array('u','U').itemsize",
        "fixed_code": "_unicodesize = array('u','U1').itemsize",
        "patch": "@@ -368,7 +368,7 @@ def sctype2char(sctype):\n     cast[key] = lambda x, k=key : array(x, copy=False).astype(k)\n \n \n-_unicodesize = array('u','U').itemsize\n+_unicodesize = array('u','U1').itemsize\n \n # Create the typestring lookup dictionary\n _typestr = _typedict()"
    },
    {
        "commit_id": "6627d4e993df8033d5e078f24d84cb028ba09d0c",
        "commit_message": "Fix-up error in piecewise.",
        "commit_url": "https://github.com/numpy/numpy/commit/6627d4e993df8033d5e078f24d84cb028ba09d0c",
        "buggy_code": "totlist |= condlist",
        "fixed_code": "totlist |= condlist[k]",
        "patch": "@@ -209,7 +209,7 @@ def piecewise(x, condlist, funclist, *args, **kw):\n     if n == n2-1:  # compute the \"otherwise\" condition.\n         totlist = condlist[0]\n         for k in range(1, n):\n-            totlist |= condlist\n+            totlist |= condlist[k]\n         condlist.append(~totlist)\n         n += 1\n     if (n != n2):"
    },
    {
        "commit_id": "f30e6c284e6430068c8301206c7e811f5127141b",
        "commit_message": "1) Fix scimath functions to take and return vectors.\n2) Fix old bug in PyArray_CastTo when multiple copies made.\n3) Fix reference counting bugs.",
        "commit_url": "https://github.com/numpy/numpy/commit/f30e6c284e6430068c8301206c7e811f5127141b",
        "buggy_code": "return asscalar(x)",
        "fixed_code": "return x",
        "patch": "@@ -27,7 +27,7 @@ def _fix_real_lt_zero(x):\n     x = asarray(x)\n     if any(isreal(x) & (x<0)):\n         x = _tocomplex(x)\n-    return asscalar(x)\n+    return x\n \n def _fix_real_abs_gt_1(x):\n     x = asarray(x)"
    },
    {
        "commit_id": "8913a2b030b2ecbf76d19e32dd38f8e56b8ffd32",
        "commit_message": "Fixed intent(c) statement bug when only spaces follow.",
        "commit_url": "https://github.com/numpy/numpy/commit/8913a2b030b2ecbf76d19e32dd38f8e56b8ffd32",
        "buggy_code": "ll=m.group('after')",
        "fixed_code": "ll=m.group('after').strip()",
        "patch": "@@ -863,7 +863,7 @@ def analyzeline(m,case,line):\n             previous_context = ('variable',last_name,groupcounter)\n     elif case in ['dimension','intent','optional','required','external','public','private','intrisic']:\n         edecl=groupcache[groupcounter]['vars']\n-        ll=m.group('after')\n+        ll=m.group('after').strip()\n         i=string.find(ll,'::')\n         if i<0 and case=='intent':\n             i=string.find(markouterparen(ll),'@)@')-2"
    },
    {
        "commit_id": "4072234146d63644ed0e658f685a5575ca051d9d",
        "commit_message": "Fix a few more improper uses of .dtype attribute.",
        "commit_url": "https://github.com/numpy/numpy/commit/4072234146d63644ed0e658f685a5575ca051d9d",
        "buggy_code": "if issubclass(a.dtype, complexfloating):",
        "fixed_code": "if issubclass(a.dtype.type, complexfloating):",
        "patch": "@@ -208,7 +208,7 @@ def Heigenvalues(a, UPLO='L'):\n     return w\n \n def _convertarray(a):\n-    if issubclass(a.dtype, complexfloating):\n+    if issubclass(a.dtype.type, complexfloating):\n         if a.dtype.char == 'D':\n             a = _fastCT(a)\n         else:"
    },
    {
        "commit_id": "f3a4e8ff8d76dbadd59d4d4e2efc359d3b2db091",
        "commit_message": "Fix str representation for rank-0 arrays",
        "commit_url": "https://github.com/numpy/numpy/commit/f3a4e8ff8d76dbadd59d4d4e2efc359d3b2db091",
        "buggy_code": "return array2string(a, max_line_width, precision, suppress_small, ' ', \"\")",
        "fixed_code": "return array2string(a, max_line_width, precision, suppress_small, ' ', \"\", str)",
        "patch": "@@ -241,7 +241,7 @@ def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):\n         return cName + \"(%s, dtype=%s)\" % (lst, typename)\n \n def array_str(a, max_line_width=None, precision=None, suppress_small=None):\n-    return array2string(a, max_line_width, precision, suppress_small, ' ', \"\")\n+    return array2string(a, max_line_width, precision, suppress_small, ' ', \"\", str)\n \n set_string_function = multiarray.set_string_function\n set_string_function(array_str, 0)"
    },
    {
        "commit_id": "36d71451129490dcaa88f903f5090f42fd42d073",
        "commit_message": "Fixed small error.",
        "commit_url": "https://github.com/numpy/numpy/commit/36d71451129490dcaa88f903f5090f42fd42d073",
        "buggy_code": "if obj.dtypechar in 'SU':",
        "fixed_code": "if obj.dtype in [sb.string, sb.unicode_]:",
        "patch": "@@ -175,7 +175,7 @@ def __getattribute__(self, attr):\n         # normal array\n         if obj.dtypedescr.fields:\n             return obj\n-        if obj.dtypechar in 'SU':\n+        if obj.dtype in [sb.string, sb.unicode_]:\n             return obj.view(chararray)\n         return obj.view(sb.ndarray)\n             "
    },
    {
        "commit_id": "5f5c4b92573a060d20cf9bbf70db00d45cda7268",
        "commit_message": "Included locals info to error on negep.",
        "commit_url": "https://github.com/numpy/numpy/commit/5f5c4b92573a060d20cf9bbf70db00d45cda7268",
        "buggy_code": "\"for 'negep'\"",
        "fixed_code": "\"for 'negep', locals() -> %s\" % (locals())",
        "patch": "@@ -126,7 +126,7 @@ def __init__(self, float_conv=float,int_conv=int,\n \t    # Prevent infinite loop on PPC with gcc 4.0:\n \t    if negep < 0:\n                 raise RuntimeError, \"could not determine machine tolerance \" \\\n-\t\t                    \"for 'negep'\"\n+\t\t                    \"for 'negep', locals() -> %s\" % (locals())\n         negep = -negep\n         epsneg = a\n "
    },
    {
        "commit_id": "543811b1592d63a57e17b62661b9ed2b33978498",
        "commit_message": "Fixed namespace issue.",
        "commit_url": "https://github.com/numpy/numpy/commit/543811b1592d63a57e17b62661b9ed2b33978498",
        "buggy_code": "__all__ = ['char','rec','memmap']",
        "fixed_code": "__all__ = ['char','rec','memmap','ma']",
        "patch": "@@ -17,7 +17,7 @@\n from memmap import *\n del nt\n \n-__all__ = ['char','rec','memmap']\n+__all__ = ['char','rec','memmap','ma']\n __all__ += numeric.__all__\n __all__ += oldnumeric.__all__\n __all__ += defmatrix.__all__"
    },
    {
        "commit_id": "c8b5a7e9e0d39c225ac3e590d83ebf869d9c1235",
        "commit_message": "Fixed error in setflags and added a few unit tests for test_multiarray",
        "commit_url": "https://github.com/numpy/numpy/commit/c8b5a7e9e0d39c225ac3e590d83ebf869d9c1235",
        "buggy_code": "version='0.9.2'",
        "fixed_code": "version='0.9.3'",
        "patch": "@@ -1,4 +1,4 @@\n-version='0.9.2'\n+version='0.9.3'\n \n import os\n svn_version_file = os.path.join(os.path.dirname(__file__),"
    },
    {
        "commit_id": "8c293949830d75c9e43740ba9b98d8bc6d587a76",
        "commit_message": "Applied Darren Dale patch about detecting libdjbfft.so",
        "commit_url": "https://github.com/numpy/numpy/commit/8c293949830d75c9e43740ba9b98d8bc6d587a76",
        "buggy_code": "p = self.combine_paths (d,['libdjbfft.a'])",
        "fixed_code": "p = self.combine_paths (d,['libdjbfft.a','libdjbfft'+so_ext])",
        "patch": "@@ -611,7 +611,7 @@ def calc_info(self):\n             if p:\n                 info = {'extra_objects':p}\n                 break\n-            p = self.combine_paths (d,['libdjbfft.a'])\n+            p = self.combine_paths (d,['libdjbfft.a','libdjbfft'+so_ext])\n             if p:\n                 info = {'libraries':['djbfft'],'library_dirs':[d]}\n                 break"
    },
    {
        "commit_id": "c5b355719e9ee893362d8c6fa8f12fc32f3dc2b4",
        "commit_message": "Fixed name issue.",
        "commit_url": "https://github.com/numpy/numpy/commit/c5b355719e9ee893362d8c6fa8f12fc32f3dc2b4",
        "buggy_code": "numpy_distutils_version = 'N/A'",
        "fixed_code": "numpy_version = 'N/A'",
        "patch": "@@ -38,7 +38,7 @@\n try:\n     from numpy import __version__ as numpy_version\n except ImportError:\n-    numpy_distutils_version = 'N/A'\n+    numpy_version = 'N/A'\n \n __usage__ = \"\"\"\\\n Usage:"
    },
    {
        "commit_id": "2cf3888ac82b0f16536ca31eeffb9a24433119ea",
        "commit_message": "Fixed bug in ma.py and added fast quicksorts.",
        "commit_url": "https://github.com/numpy/numpy/commit/2cf3888ac82b0f16536ca31eeffb9a24433119ea",
        "buggy_code": "if umath.sometrue(oldnumeric.ravel(self._mask)):",
        "fixed_code": "if oldnumeric.sometrue(oldnumeric.ravel(self._mask)):",
        "patch": "@@ -610,7 +610,7 @@ def __init__(self, data, dtype=None, copy=True, fortran=False,\n     def __array__ (self, t = None):\n         \"Special hook for numeric. Converts to numeric if possible.\"\n         if self._mask is not None:\n-            if umath.sometrue(oldnumeric.ravel(self._mask)):\n+            if oldnumeric.sometrue(oldnumeric.ravel(self._mask)):\n                 raise MAError, \\\n                 \"\"\"Cannot automatically convert masked array to numeric because data\n                    is masked in one or more locations."
    },
    {
        "commit_id": "b5dbca15fc13e9714e57d24bb4a6e67fdeaacd2d",
        "commit_message": "quick fix for fromrecords unittest",
        "commit_url": "https://github.com/numpy/numpy/commit/b5dbca15fc13e9714e57d24bb4a6e67fdeaacd2d",
        "buggy_code": "assert_equal(r[0],(456, 'dbe', 1.2))",
        "fixed_code": "assert_equal(r[0].toscalar(),(456, 'dbe', 1.2))",
        "patch": "@@ -10,7 +10,7 @@\n class test_fromrecords(ScipyTestCase):\n     def check_fromrecords(self):\n         r = rec.fromrecords([[456,'dbe',1.2],[2,'de',1.3]],names='col1,col2,col3')\n-        assert_equal(r[0],(456, 'dbe', 1.2))\n+        assert_equal(r[0].toscalar(),(456, 'dbe', 1.2))\n \n del sys.path[0]\n if __name__ == \"__main__\":"
    },
    {
        "commit_id": "18d66b268247f539c8147a922a145f3c50499ba6",
        "commit_message": "Fix-up dealing with arbitrary objects as type-descriptors.",
        "commit_url": "https://github.com/numpy/numpy/commit/18d66b268247f539c8147a922a145f3c50499ba6",
        "buggy_code": "descr = dtypedescr(formats, aligned)",
        "fixed_code": "descr = sb.dtypedescr(formats, aligned)",
        "patch": "@@ -263,7 +263,7 @@ def __new__(subtype, shape, formats, names=None, titles=None,\n                    not isinstance(formats, list):\n                     raise ValueError, \"Can only deal with alignment\"\\\n                           \"for list and dictionary type-descriptors.\"\n-            descr = dtypedescr(formats, aligned)\n+            descr = sb.dtypedescr(formats, aligned)\n         \n         if buf is None:\n             self = sb.ndarray.__new__(subtype, shape, (record, descr))"
    },
    {
        "commit_id": "f49bd3ec96c15f04406f185a5ad123b897ebe6de",
        "commit_message": "One more error in cfuncs and remove Py_NotImplmented from fields.",
        "commit_url": "https://github.com/numpy/numpy/commit/f49bd3ec96c15f04406f185a5ad123b897ebe6de",
        "buggy_code": "\\t\\t\\t*len = (arr->itemsize)*PyArray_SIZE(arr);",
        "fixed_code": "\\t\\t\\t*len = (arr->descr->elsize)*PyArray_SIZE(arr);",
        "patch": "@@ -578,7 +578,7 @@\n \\t\\t\\tgoto capi_fail;\n \\t\\t}\n \\t\\tif (*len == -1)\n-\\t\\t\\t*len = (arr->itemsize)*PyArray_SIZE(arr);\n+\\t\\t\\t*len = (arr->descr->elsize)*PyArray_SIZE(arr);\n \\t\\tSTRINGMALLOC(*str,*len);\n \\t\\tSTRINGCOPYN(*str,arr->data,*len);\n \\t\\treturn 1;"
    },
    {
        "commit_id": "88c06a9dadff289c870549299019d8378358cec0",
        "commit_message": "Finished pass 1 of fixtype changes. Now, fix compile errors...",
        "commit_url": "https://github.com/numpy/numpy/commit/88c06a9dadff289c870549299019d8378358cec0",
        "buggy_code": "\"AsCArray\",'PyObject **, void *ptr, intp *, int, int, int','int'),",
        "fixed_code": "\"AsCArray\",'PyObject **, void *ptr, intp *, int, PyArray_Descr *','int'),",
        "patch": "@@ -403,7 +403,7 @@\n \n     (r\"\"\"Simulat a C-array\n     \"\"\",\n-     \"AsCArray\",'PyObject **, void *ptr, intp *, int, int, int','int'),\n+     \"AsCArray\",'PyObject **, void *ptr, intp *, int, PyArray_Descr *','int'),\n \n     (r\"\"\"Convert to a 1D C-array\n     \"\"\","
    },
    {
        "commit_id": "1add63fa4c2e4b1af420d79aadee9525b074c688",
        "commit_message": "Fixed bug in test_matrix.py",
        "commit_url": "https://github.com/numpy/numpy/commit/1add63fa4c2e4b1af420d79aadee9525b074c688",
        "buggy_code": "assert all(array(conjugate(transpose(B)), mB.H))",
        "fixed_code": "assert all(array(conjugate(transpose(B)) == mB.H))",
        "patch": "@@ -42,7 +42,7 @@ def test_basic(self):\n         mB = matrix(B)\n         assert allclose(linalg.inv(B), mB.I)\n         assert all(array(transpose(B) == mB.T))\n-        assert all(array(conjugate(transpose(B)), mB.H))\n+        assert all(array(conjugate(transpose(B)) == mB.H))\n \n class test_algebra(ScipyTestCase):\n     def test_basic(self):"
    },
    {
        "commit_id": "7cdbfb9a31f09f80db2d9071bd86f0fd7783a811",
        "commit_message": " r707@803636f3:  kern | 2005-10-31 13:19:55 -0800\n Fix put() typo",
        "commit_url": "https://github.com/numpy/numpy/commit/7cdbfb9a31f09f80db2d9071bd86f0fd7783a811",
        "buggy_code": "return a.put(a, ind, v.astype(a.dtype))",
        "fixed_code": "return a.put(ind, v.astype(a.dtype))",
        "patch": "@@ -162,7 +162,7 @@ def put (a, ind, v):\n     \"\"\"\n     a = array(a,copy=False)\n     v = array(v,copy=False)\n-    return a.put(a, ind, v.astype(a.dtype))\n+    return a.put(ind, v.astype(a.dtype))\n \n def putmask (a, mask, v):\n     \"\"\"putmask(a, mask, v) results in a = v for all places mask is true."
    },
    {
        "commit_id": "8386582770a3fc9f9b315fd54a5047228b736cb4",
        "commit_message": "Fixed get_lib_source_files bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/8386582770a3fc9f9b315fd54a5047228b736cb4",
        "buggy_code": "depends = build_info.get('depends',[])",
        "fixed_code": "depends = lib[1].get('depends',[])",
        "patch": "@@ -224,7 +224,7 @@ def get_lib_source_files(lib):\n     sources = filter(lambda s:type(s) is types.StringType,sources)\n     filenames.extend(sources)\n     filenames.extend(get_dependencies(sources))\n-    depends = build_info.get('depends',[])\n+    depends = lib[1].get('depends',[])\n     for d in depends:\n         if is_local_src_dir(d):\n             os.path.walk(d,_gsf_visit_func,filenames)"
    },
    {
        "commit_id": "80a598c2820e332e26f758206eaa71133b6b84c1",
        "commit_message": "Fixed assert_approx_equal(0,0) failure bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/80a598c2820e332e26f758206eaa71133b6b84c1",
        "buggy_code": "scale = pow(10,math.floor(math.log10(0.5*(abs(desired)+abs(actual)))))",
        "fixed_code": "scale = float(pow(10,math.floor(math.log10(0.5*(abs(desired)+abs(actual))))))",
        "patch": "@@ -659,7 +659,7 @@ def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=1):\n     msg += err_msg\n     actual, desired = map(float, (actual, desired))\n     # Normalized the numbers to be in range (-10.0,10.0)\n-    scale = pow(10,math.floor(math.log10(0.5*(abs(desired)+abs(actual)))))\n+    scale = float(pow(10,math.floor(math.log10(0.5*(abs(desired)+abs(actual))))))\n     try:\n         sc_desired = desired/scale\n     except ZeroDivisionError:"
    },
    {
        "commit_id": "14bdbe98ab230e8252333a185aebc27b3024810d",
        "commit_message": "EJS: Patch to use proper True and False values rather than 1 and 0.  This allows stricter\ntype checking when we expect a boolean value to prevent the user shooting himself in\nthe foot.  Example:\n    >>> a = zeros(1,2,3)\nused to succeed, creating an array of shape (1,), dtype 2, and fortran=True,\nwhich was probably not intended.  It now raises a TypeError.  [The user probably\nwants something else, like zeros((1,2,3)).]",
        "commit_url": "https://github.com/numpy/numpy/commit/14bdbe98ab230e8252333a185aebc27b3024810d",
        "buggy_code": "def __new__(self, data, dtype=None, copy=1):",
        "fixed_code": "def __new__(self, data, dtype=None, copy=True):",
        "patch": "@@ -47,7 +47,7 @@ def _convert_from_string(data):\n \n class matrix(N.ndarray):\n     __array_priority__ = 10.0\n-    def __new__(self, data, dtype=None, copy=1):\n+    def __new__(self, data, dtype=None, copy=True):\n         if isinstance(data, matrix):\n             dtype2 = data.dtype\n             if (dtype is None):"
    },
    {
        "commit_id": "14bdbe98ab230e8252333a185aebc27b3024810d",
        "commit_message": "EJS: Patch to use proper True and False values rather than 1 and 0.  This allows stricter\ntype checking when we expect a boolean value to prevent the user shooting himself in\nthe foot.  Example:\n    >>> a = zeros(1,2,3)\nused to succeed, creating an array of shape (1,), dtype 2, and fortran=True,\nwhich was probably not intended.  It now raises a TypeError.  [The user probably\nwants something else, like zeros((1,2,3)).]",
        "commit_url": "https://github.com/numpy/numpy/commit/14bdbe98ab230e8252333a185aebc27b3024810d",
        "buggy_code": "cast[key] = lambda x, k=key : array(x,copy=0).astype(k)",
        "fixed_code": "cast[key] = lambda x, k=key : array(x,copy=False).astype(k)",
        "patch": "@@ -338,7 +338,7 @@ def __getitem__(self, obj):\n               _types.StringType, _types.UnicodeType, _types.BufferType]\n ScalarType.extend(_dtype2char_dict.keys())\n for key in _dtype2char_dict.keys():\n-    cast[key] = lambda x, k=key : array(x,copy=0).astype(k)\n+    cast[key] = lambda x, k=key : array(x,copy=False).astype(k)\n \n del key\n "
    },
    {
        "commit_id": "14bdbe98ab230e8252333a185aebc27b3024810d",
        "commit_message": "EJS: Patch to use proper True and False values rather than 1 and 0.  This allows stricter\ntype checking when we expect a boolean value to prevent the user shooting himself in\nthe foot.  Example:\n    >>> a = zeros(1,2,3)\nused to succeed, creating an array of shape (1,), dtype 2, and fortran=True,\nwhich was probably not intended.  It now raises a TypeError.  [The user probably\nwants something else, like zeros((1,2,3)).]",
        "commit_url": "https://github.com/numpy/numpy/commit/14bdbe98ab230e8252333a185aebc27b3024810d",
        "buggy_code": "def __init__(self, formats, aligned=0):",
        "fixed_code": "def __init__(self, formats, aligned=False):",
        "patch": "@@ -56,7 +56,7 @@ def _split(input):\n \n \n class format_parser:\n-    def __init__(self, formats, aligned=0):\n+    def __init__(self, formats, aligned=False):\n         self._parseFormats(formats, aligned)\n \n     def _parseFormats(self, formats, aligned=0):"
    },
    {
        "commit_id": "e3ba6c65315e036990a8c28fd8dd5a072c7dc635",
        "commit_message": "Fix buglet in set_numeric_ops",
        "commit_url": "https://github.com/numpy/numpy/commit/e3ba6c65315e036990a8c28fd8dd5a072c7dc635",
        "buggy_code": "version='0.4.2'",
        "fixed_code": "version='0.4.3'",
        "patch": "@@ -1,4 +1,4 @@\n-version='0.4.2'\n+version='0.4.3'\n \n try:\n     import base.__svn_version__  as svn"
    },
    {
        "commit_id": "0864a3ef716c2bc873bacb0c531ae84e66424523",
        "commit_message": "Fixed bug.",
        "commit_url": "https://github.com/numpy/numpy/commit/0864a3ef716c2bc873bacb0c531ae84e66424523",
        "buggy_code": "if not l:",
        "fixed_code": "if l:",
        "patch": "@@ -31,7 +31,7 @@ def get_version(self,*args,**kwds):\n             l.sort()\n             l.reverse()\n             l = [d for d in l if os.path.isfile(os.path.join(xlf_dir,d,'xlf.cfg'))]\n-            if not l:\n+            if l:\n                 from distutils.version import LooseVersion\n                 self.version = version = LooseVersion(l[0])\n         return version"
    },
    {
        "commit_id": "7aad76ae379cef2f3f12115fc080832af474dfc0",
        "commit_message": "Applied patch by Brent Leback from the PG.",
        "commit_url": "https://github.com/numpy/numpy/commit/7aad76ae379cef2f3f12115fc080832af474dfc0",
        "buggy_code": "'linker_so'    : [\"pgf90\",\"-shared\"],",
        "fixed_code": "'linker_so'    : [\"pgf90\",\"-shared\",\"-fpic\"],",
        "patch": "@@ -17,7 +17,7 @@ class PGroupFCompiler(FCompiler):\n         'compiler_f77' : [\"pgf77\"],\n         'compiler_fix' : [\"pgf90\", \"-Mfixed\"],\n         'compiler_f90' : [\"pgf90\"],\n-        'linker_so'    : [\"pgf90\",\"-shared\"],\n+        'linker_so'    : [\"pgf90\",\"-shared\",\"-fpic\"],\n         'archiver'     : [\"ar\", \"-cr\"],\n         'ranlib'       : [\"ranlib\"]\n         }"
    },
    {
        "commit_id": "bbc46872ab69ba9334580288c1f86788007ad424",
        "commit_message": "Pearu's ATLAS detection fix for Python built in debug mode.  In debug\nmode there's extra ref count output which was screwing things up.",
        "commit_url": "https://github.com/numpy/numpy/commit/bbc46872ab69ba9334580288c1f86788007ad424",
        "buggy_code": "m = re.match(r'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)',o)",
        "fixed_code": "m = re.search(r'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)',o)",
        "patch": "@@ -903,7 +903,7 @@ def atlas_version_c(extension, build_dir,magic=magic):\n     s,o = exec_command(cmd,execute_in=os.path.dirname(target),use_tee=0)\n     atlas_version = None\n     if not s:\n-        m = re.match(r'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)',o)\n+        m = re.search(r'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)',o)\n         if m:\n             atlas_version = m.group('version')\n     if atlas_version is None:"
    },
    {
        "commit_id": "01ac8b980da771f89f273229bf089d977fc2ae78",
        "commit_message": "Minor fix.",
        "commit_url": "https://github.com/numpy/numpy/commit/01ac8b980da771f89f273229bf089d977fc2ae78",
        "buggy_code": "target_dir = os.path.dirname(target_file)",
        "fixed_code": "target_dir = os.path.dirname(target_file) or '.'",
        "patch": "@@ -263,7 +263,7 @@ def f2py_sources(self, sources, extension):\n                    ' more:'+`f2py_sources`\n             source = f2py_sources[0]\n             target_file = f2py_targets[source]\n-            target_dir = os.path.dirname(target_file)\n+            target_dir = os.path.dirname(target_file) or '.'\n             depends = [source] + extension.depends\n             if (self.force or newer_group(depends, target_file,'newer')) \\\n                    and not skip_f2py:"
    },
    {
        "commit_id": "2c408050c127c8155b36ac61e0e3d0e095dd1f1e",
        "commit_message": "BUG: Add missing right parenthesis.",
        "commit_url": "https://github.com/numpy/numpy/commit/2c408050c127c8155b36ac61e0e3d0e095dd1f1e",
        "buggy_code": "i.set_compiler(self.compiler",
        "fixed_code": "i.set_compiler(self.compiler)",
        "patch": "@@ -212,7 +212,7 @@ def build_information(self):\n             info.append(func.customize)\n         #redundant, but easiest place to make sure compiler is set\n         for i in info:\n-            i.set_compiler(self.compiler\n+            i.set_compiler(self.compiler)\n         return info\n         \n     def get_headers(self):"
    },
    {
        "commit_id": "d6fd1be000987221bf1c2f246cb8c9f716a3931f",
        "commit_message": "Applied patch from scipy issue 189.",
        "commit_url": "https://github.com/numpy/numpy/commit/d6fd1be000987221bf1c2f246cb8c9f716a3931f",
        "buggy_code": "elif cpu.is_PentiumIV():",
        "fixed_code": "elif cpu.is_PentiumIV() or cpu.is_XEON():",
        "patch": "@@ -54,7 +54,7 @@ def get_flags_arch(self):\n             opt.append('-tpp6')\n         elif cpu.is_Pentium():\n             opt.append('-tpp5')\n-        elif cpu.is_PentiumIV():\n+        elif cpu.is_PentiumIV() or cpu.is_XEON():\n             opt.extend(['-tpp7','-xW'])\n         if cpu.has_mmx():\n             opt.append('-xM')"
    },
    {
        "commit_id": "301b2cdf4516bf1bd3dc607a7a9cfba0dcdbc625",
        "commit_message": "Typo in error message fixed.",
        "commit_url": "https://github.com/numpy/numpy/commit/301b2cdf4516bf1bd3dc607a7a9cfba0dcdbc625",
        "buggy_code": "' items (call build_src before built_ext).' % (ext.name)",
        "fixed_code": "' items (call build_src before build_ext).' % (ext.name)",
        "patch": "@@ -43,7 +43,7 @@ def run(self):\n         for ext in self.extensions:\n             if not misc_util.all_strings(ext.sources):\n                 raise TypeError,'Extension \"%s\" sources contains unresolved'\\\n-                      ' items (call build_src before built_ext).' % (ext.name)\n+                      ' items (call build_src before build_ext).' % (ext.name)\n \n         if self.distribution.has_c_libraries():\n             build_clib = self.get_finalized_command('build_clib')"
    },
    {
        "commit_id": "f88e09e8bac6322d7f79f527b737fea12f74f1e1",
        "commit_message": "Ignore lines starting with tab as it contains no info whether Fortran source code is in fix or free format.",
        "commit_url": "https://github.com/numpy/numpy/commit/f88e09e8bac6322d7f79f527b737fea12f74f1e1",
        "buggy_code": "if _free_f90_start(line[:5]) or line[-2:-1]=='&':",
        "fixed_code": "if (line[0]!='\\t' and _free_f90_start(line[:5])) or line[-2:-1]=='&':",
        "patch": "@@ -796,7 +796,7 @@ def is_free_format(file):\n     while n>0 and line:\n         if line[0]!='!':\n             n -= 1\n-            if _free_f90_start(line[:5]) or line[-2:-1]=='&':\n+            if (line[0]!='\\t' and _free_f90_start(line[:5])) or line[-2:-1]=='&':\n                 result = 1\n                 break\n         line = f.readline()"
    },
    {
        "commit_id": "3dce5df3514532bb09ad97d68b1d1bcf92c1b315",
        "commit_message": "Fix executing system_info.py when scipy_distutils is not installed",
        "commit_url": "https://github.com/numpy/numpy/commit/3dce5df3514532bb09ad97d68b1d1bcf92c1b315",
        "buggy_code": "from scipy_distutils.core import Extension, setup",
        "fixed_code": "from core import Extension, setup",
        "patch": "@@ -757,7 +757,7 @@ def calc_info(self):\n '''\n \n def get_atlas_version(**config):\n-    from scipy_distutils.core import Extension, setup\n+    from core import Extension, setup\n     magic = hex(hash(`config`))\n     def atlas_version_c(extension, build_dir,macig=magic):\n         source = os.path.join(build_dir,'atlas_version_%s.c' % (magic))"
    },
    {
        "commit_id": "23dc54f27a74764ed0ae9e5619f37d35006b7c91",
        "commit_message": "Using NOCOLOR env.var to workaround cygncurses bug under cygwin.",
        "commit_url": "https://github.com/numpy/numpy/commit/23dc54f27a74764ed0ae9e5619f37d35006b7c91",
        "buggy_code": "configs.append(mod.configuration())",
        "fixed_code": "configs.append(mod.configuration(parent_path=local_path))",
        "patch": "@@ -33,7 +33,7 @@ def setup_package():\n             sys.path.insert(0,os.path.join(local_path,n))\n             try:\n                 mod = __import__('setup_'+n)\n-                configs.append(mod.configuration())\n+                configs.append(mod.configuration(parent_path=local_path))\n                 mod = __import__(n+'_version')\n                 versions.append(mod)\n             finally:"
    },
    {
        "commit_id": "623575fa2dd7fdc0e53fa023ef5528b64ce28e11",
        "commit_message": "Fix some functions to work with scalars.  Fix typo in gnufcompiler.",
        "commit_url": "https://github.com/numpy/numpy/commit/623575fa2dd7fdc0e53fa023ef5528b64ce28e11",
        "buggy_code": "elif self.get_version() >= '3.1.1'",
        "fixed_code": "elif self.get_version() >= '3.1.1' \\",
        "patch": "@@ -123,7 +123,7 @@ def get_flags_arch(self):\n             else:\n                 march_flag = 0\n         # Note: gcc 3.2 on win32 has breakage with -march specified\n-        elif self.get_version() >= '3.1.1' \n+        elif self.get_version() >= '3.1.1' \\\n             and not sys.platform=='win32': # gcc >= 3.1.1\n             if cpu.is_AthlonK6():\n                 opt.append('-march=k6')"
    },
    {
        "commit_id": "f5b889b010ef1c5c5b3f3ab44068219c24cde8f7",
        "commit_message": "Applied Brett's patch to fix phantom g (g++) when using mingw",
        "commit_url": "https://github.com/numpy/numpy/commit/f5b889b010ef1c5c5b3f3ab44068219c24cde8f7",
        "buggy_code": "self.compiler_cxx = 'g++'",
        "fixed_code": "self.compiler_cxx = ['g++']",
        "patch": "@@ -93,7 +93,7 @@ def __init__ (self,\n                                      linker_so='g++ -shared')\n             # added for python2.3 support\n             # we can't pass it through set_executables because pre 2.2 would fail\n-            self.compiler_cxx = 'g++'\n+            self.compiler_cxx = ['g++']\n             \n             # Maybe we should also append -mthreads, but then the finished\n             # dlls need another dll (mingwm10.dll see Mingw32 docs)"
    },
    {
        "commit_id": "714a0aaa3311e5af057f32a805f131fef3f3bd55",
        "commit_message": "Fix (scoreboard) building on win32",
        "commit_url": "https://github.com/numpy/numpy/commit/714a0aaa3311e5af057f32a805f131fef3f3bd55",
        "buggy_code": "cmd = 'ranlib %s/lib%s.a' % (self.build_clib,lib_name)",
        "fixed_code": "cmd = 'ranlib '+os.path.join(self.build_clib,'lib%s.a' % lib_name)",
        "patch": "@@ -255,7 +255,7 @@ def build_libraries (self, libraries):\n                                             output_dir=self.build_clib,\n                                             debug=self.debug)\n             #XXX: ranlib may not be available on non-GNU platforms.\n-            cmd = 'ranlib %s/lib%s.a' % (self.build_clib,lib_name)\n+            cmd = 'ranlib '+os.path.join(self.build_clib,'lib%s.a' % lib_name)\n             log.debug(cmd)\n             failure = os.system(cmd)\n             if failure:"
    },
    {
        "commit_id": "965c4ba6338659de155ab472cd84a462399f0466",
        "commit_message": "Fixed bug when base is '/'",
        "commit_url": "https://github.com/numpy/numpy/commit/965c4ba6338659de155ab472cd84a462399f0466",
        "buggy_code": "results = [string.replace(file,base,'') for file in files]",
        "fixed_code": "results = [file[len(base):] for file in files]",
        "patch": "@@ -125,7 +125,7 @@ def remove_common_base(files):\n     base = find_common_base(abs_files)\n     # will leave files with local path unaffected\n     # and maintains original file order\n-    results = [string.replace(file,base,'') for file in files]\n+    results = [file[len(base):] for file in files]\n     return results\n \n def find_common_base(files):"
    },
    {
        "commit_id": "117a6697980cd9cc355de6b9783fe9668bd3c816",
        "commit_message": "Fixed missing function in function_base.py.  Added entropy calculations to probability distributions.  Fixed error in F distribution ppf function.",
        "commit_url": "https://github.com/numpy/numpy/commit/117a6697980cd9cc355de6b9783fe9668bd3c816",
        "buggy_code": "from shape_base import squeeze",
        "fixed_code": "from shape_base import squeeze, atleast_1d",
        "patch": "@@ -3,7 +3,7 @@\n import Numeric\n from Numeric import ravel, asarray, nonzero, array, choose, ones, zeros, sometrue, alltrue\n from type_check import ScalarType\n-from shape_base import squeeze\n+from shape_base import squeeze, atleast_1d\n from fastumath import PINF as inf\n from fastumath import *\n import _compiled_base"
    },
    {
        "commit_id": "197ff2202f843135f860001433dd3eb1c4ddc5f4",
        "commit_message": "Fixed ppimport bug",
        "commit_url": "https://github.com/numpy/numpy/commit/197ff2202f843135f860001433dd3eb1c4ddc5f4",
        "buggy_code": "switches = ' /nologo /nodebug /MD /WX '\\",
        "fixed_code": "switches = ' /nologo /MD /WX '\\",
        "patch": "@@ -1536,7 +1536,7 @@ def __init__(self, fc=None, f90c=None, verbose=0):\n             from distutils.msvccompiler import MSVCCompiler\n             self.lib_ar = '\"%s\" /OUT:' % (MSVCCompiler().lib)\n \n-        switches = ' /nologo /nodebug /MD /WX '\\\n+        switches = ' /nologo /MD /WX '\\\n                    ' /iface=(cref,nomixed_str_len_arg) /names:lowercase '\\\n                    ' /assume:underscore /threads '\n         #switches += ' /libs:dll /threads '"
    },
    {
        "commit_id": "772b74eec5bf8fca3c76959c4afc96a97632d7c4",
        "commit_message": "Introduced SourceFilter. Clean ups and minor bug fixes",
        "commit_url": "https://github.com/numpy/numpy/commit/772b74eec5bf8fca3c76959c4afc96a97632d7c4",
        "buggy_code": "def configuration(parent_package=''):",
        "fixed_code": "def configuration(parent_package='',parent_path=None):",
        "patch": "@@ -3,7 +3,7 @@\n import os\n from scipy_distutils.misc_util import default_config_dict\n \n-def configuration(parent_package=''):\n+def configuration(parent_package='',parent_path=None):\n     package = 'scipy_test'\n     config = default_config_dict(package,parent_package)\n     return config"
    },
    {
        "commit_id": "fd7e7390daf601013d724ba2e4a526deeff0145a",
        "commit_message": "Fixed curious 'TypeError: an integer is required' in fftpack tests (bug report: Arnd Baecker)",
        "commit_url": "https://github.com/numpy/numpy/commit/fd7e7390daf601013d724ba2e4a526deeff0145a",
        "buggy_code": "exec code in locs,globs",
        "fixed_code": "exec code in globs,locs",
        "patch": "@@ -96,7 +96,7 @@ def measure(self,code_str,times=1):\n         elapsed = jiffies()\n         while i<times:\n             i += 1\n-            exec code in locs,globs\n+            exec code in globs,locs\n         elapsed = jiffies() - elapsed\n         return 0.01*elapsed\n "
    },
    {
        "commit_id": "e95e42e5e2e4027ed03a32ecb066521e5997f4ba",
        "commit_message": "Moved code in swigptr.c into a python string, swigptr.swigptr_code.  This makes it where the code doesn't have to be read out of a file in the directory path and makes it easier on py2exe like programs that bundle code into an exe file. [see bug 37]\n\nI think weave will still not work in bundled applications because it referes to a lot of other external files in the scxx directory and blitz directories.  Still, these are not read during import, so they at least don't cause the scipy import to fail.\n\nWe should look for a way to make weave work from py2exe binaries in the future.",
        "commit_url": "https://github.com/numpy/numpy/commit/e95e42e5e2e4027ed03a32ecb066521e5997f4ba",
        "buggy_code": "def check_5point_avg_2d_complex_float(self):",
        "fixed_code": "def _check_5point_avg_2d_complex_float(self):",
        "patch": "@@ -153,7 +153,7 @@ def check_5point_avg_2d_double(self):\n         expr = \"result[1:-1,1:-1] = (b[1:-1,1:-1] + b[2:,1:-1] + b[:-2,1:-1]\" \\\n                                   \"+ b[1:-1,2:] + b[1:-1,:-2]) / 5.\"\n         self.generic_2d(expr,Float64)\n-    def check_5point_avg_2d_complex_float(self):\n+    def _check_5point_avg_2d_complex_float(self):\n         \"\"\" Note: THIS TEST is KNOWN TO FAIL ON GCC 3.x.  It will not adversely affect 99.99 percent of weave \n             \n             result[1:-1,1:-1] = (b[1:-1,1:-1] + b[2:,1:-1] + b[:-2,1:-1]"
    },
    {
        "commit_id": "e95e42e5e2e4027ed03a32ecb066521e5997f4ba",
        "commit_message": "Moved code in swigptr.c into a python string, swigptr.swigptr_code.  This makes it where the code doesn't have to be read out of a file in the directory path and makes it easier on py2exe like programs that bundle code into an exe file. [see bug 37]\n\nI think weave will still not work in bundled applications because it referes to a lot of other external files in the scxx directory and blitz directories.  Still, these are not read during import, so they at least don't cause the scipy import to fail.\n\nWe should look for a way to make weave work from py2exe binaries in the future.",
        "commit_url": "https://github.com/numpy/numpy/commit/e95e42e5e2e4027ed03a32ecb066521e5997f4ba",
        "buggy_code": "if gcc_exists() and sys.platform == 'win32':",
        "fixed_code": "if gcc_exists() and msvc_exists() and sys.platform == 'win32':",
        "patch": "@@ -697,7 +697,7 @@ def test_suite(level=1):\n             suites.append( makeSuite(test_unix_float_converter,'check_'))    \n             suites.append( makeSuite(test_unix_complex_converter,'check_'))        \n         # run gcc tests also on windows\n-        if gcc_exists() and sys.platform == 'win32':         \n+        if gcc_exists() and msvc_exists() and sys.platform == 'win32':         \n             suites.append( makeSuite(test_gcc_file_converter,'check_'))\n             suites.append( makeSuite(test_gcc_instance_converter,'check_'))\n             suites.append( makeSuite(test_gcc_callable_converter,'check_'))"
    },
    {
        "commit_id": "d3a1627631042af2fe74620f5688d9ba99ce87cf",
        "commit_message": "major rewrite of weave.\n\n0.\nThe underlying library code is significantly re-factored and simpler. There used to be a xxx_spec.py and xxx_info.py file for every group of type conversion classes.  The spec file held the python code that handled the conversion and the info file had most of the C code templates that were generated.  This proved pretty confusing in practice, so the two files have mostly been merged into the spec file.\n\nAlso, there was quite a bit of code duplication running around.  The re-factoring was able to trim the standard conversion code base (excluding blitz and accelerate stuff) by about 40%.  This should be a huge maintainability and extensibility win.\n\n1.\nWith multiple months of using Numeric arrays, I've found some of weave's \"magic variable\" names unwieldy and want to change them.  The following are the old declarations for an array x of Float32 type:\n\n        PyArrayObject* x = convert_to_numpy(...);\n        float* x_data = (float*) x->data;\n        int*   _Nx = x->dimensions;\n        int*   _Sx = x->strides;\n        int    _Dx = x->nd;\n\nThe new declaration looks like this:\n\n        PyArrayObject* x_array = convert_to_numpy(...);\n        float* x = (float*) x->data;\n        int*   Nx = x->dimensions;\n        int*   Sx = x->strides;\n        int    Dx = x->nd;\n\nThis is obviously not backward compatible, and will break some code (including a lot of mine).  It also makes inline() code more readable and natural to write.\n\n2.\nI've switched from CXX to Gordon McMillan's SCXX for list, tuples, and dictionaries.  I like CXX pretty well, but its use of advanced C++ (templates, etc.) caused some portability problems.  The SCXX library is similar to CXX but doesn't use templates at all.  This, like (1) is not an\nAPI compatible change and requires repairing existing code.\n\nI have also thought about boost python, but it also makes heavy use of templates.  Moving to SCXX gets rid of almost all template usage for the standard type converters which should help portability.  std::complex and std::string from the STL are the only templates left.  Of course blitz still uses templates in a major way so weave.blitz will continue to be hard on compilers.\n\nI've actually considered scrapping the C++ classes for list, tuples, and\ndictionaries, and just fall back to the standard Python C API because the classes are waaay slower than the raw API in many cases.  They are also more convenient and less error prone in many cases, so I've decided to stick with them.  The PyObject variable will always be made available for variable \"x\" under the name \"py_x\" for more speedy operations.  You'll definitely want to use these for anything that needs to be speedy.\n\n3.\nstrings are converted to std::string now.  I found this to be the most useful type in for strings in my code.  Py::String was used previously.\n\n4.\nThere are a number of reference count \"errors\" in some of the less tested conversion codes such as instance, module, etc.  I've cleaned most of these up.  I put errors in quotes here because I'm actually not positive that objects passed into \"inline\" really need reference counting applied to them.  The dictionaries passed in by inline() hold references to these objects so it doesn't seem that they could ever be garbage collected inadvertently.  Variables used by ext_tools, though, definitely need the reference counting done.  I don't think this is a major cost in speed, so it probably isn't worth getting rid of the ref count code.\n\n5.\nUnicode objects are now supported.  This was necessary to support rendering Unicode strings in the freetype wrappers for Chaco.\n\n6.\nblitz++ was upgraded to the latest CVS.  It compiles about twice as fast as the old blitz and looks like it supports a large number of compilers (though only gcc 2.95.3 is tested).  Compile times now take about 9 seconds on my 850 MHz PIII laptop.",
        "commit_url": "https://github.com/numpy/numpy/commit/d3a1627631042af2fe74620f5688d9ba99ce87cf",
        "buggy_code": "slice_vars['end'] = '_N%s[%d]%s-1' % (slice_vars['var'],position,end)",
        "fixed_code": "slice_vars['end'] = 'N%s[%d]%s-1' % (slice_vars['var'],position,end)",
        "patch": "@@ -62,7 +62,7 @@ def build_slice_atom(slice_vars, position):\n             #of slice for positive indices.\n             slice_vars['end'] = end + '-1'\n         if end[0] == '-':\n-            slice_vars['end'] = '_N%s[%d]%s-1' % (slice_vars['var'],position,end)\n+            slice_vars['end'] = 'N%s[%d]%s-1' % (slice_vars['var'],position,end)\n         \n         if slice_vars['step'] == '_stp':\n             # this if/then isn't strictly necessary, it'll"
    },
    {
        "commit_id": "19cf0563affa96f821e0ec02af68996dd34ef0a6",
        "commit_message": "fixed import from utility -> type_check error",
        "commit_url": "https://github.com/numpy/numpy/commit/19cf0563affa96f821e0ec02af68996dd34ef0a6",
        "buggy_code": "from utility import toFloat32, toFloat64",
        "fixed_code": "from type_check import toFloat32, toFloat64",
        "patch": "@@ -7,7 +7,7 @@\n \"\"\"\n \n import Numeric\n-from utility import toFloat32, toFloat64\n+from type_check import toFloat32, toFloat64\n \n __all__ = ['epsilon','tiny','float_epsilon','float_tiny','float_min',\n            'float_max','float_precision','float_resolution',"
    },
    {
        "commit_id": "19ad2a8e5a712a12f5eb1bfcd347e978eb303058",
        "commit_message": "Fixed bug in scipy_distutils -- extra_linker_arguments was the incorrect variable in system_info.  Also, changed library_path at the top of atlas_info to None so that the list would be searched.",
        "commit_url": "https://github.com/numpy/numpy/commit/19ad2a8e5a712a12f5eb1bfcd347e978eb303058",
        "buggy_code": "library_path = ['/home/peterson/opt/lib/atlas']",
        "fixed_code": "library_path = None",
        "patch": "@@ -1,7 +1,7 @@\n import sys, os\n from misc_util import get_path\n \n-library_path = ['/home/peterson/opt/lib/atlas']\n+library_path = None \n \n def get_atlas_info():\n     if sys.platform  == 'win32':"
    },
    {
        "commit_id": "19ad2a8e5a712a12f5eb1bfcd347e978eb303058",
        "commit_message": "Fixed bug in scipy_distutils -- extra_linker_arguments was the incorrect variable in system_info.  Also, changed library_path at the top of atlas_info to None so that the list would be searched.",
        "commit_url": "https://github.com/numpy/numpy/commit/19ad2a8e5a712a12f5eb1bfcd347e978eb303058",
        "buggy_code": "info['extra_linker_arguments'] = [shared_libs[0]]",
        "fixed_code": "info['extra_link_args'] = [shared_libs[0]]",
        "patch": "@@ -56,7 +56,7 @@ def calc_info(self, prefix):\n             else:\n                 shared_libs = combine_paths(lib_dir,'libX11.so*')\n                 if not shared_libs: return\n-                info['extra_linker_arguments'] = [shared_libs[0]]\n+                info['extra_link_args'] = [shared_libs[0]]\n             info['include_dirs'] = [inc_dir]\n             self.info = info\n             return 1"
    },
    {
        "commit_id": "64ffff9d53d2c26f0b7c014fb0152ccfc6568c34",
        "commit_message": "Fixed bug in build_ext.py",
        "commit_url": "https://github.com/numpy/numpy/commit/64ffff9d53d2c26f0b7c014fb0152ccfc6568c34",
        "buggy_code": "if lib_dir not in self.compiler.libraries_dirs:",
        "fixed_code": "if lib_dir not in self.compiler.library_dirs:",
        "patch": "@@ -71,7 +71,7 @@ def build_extension(self, ext):\n                 #self.compiler.libraries = self.compiler.libraries + l\n                 lib_dirs = build_flib.get_fcompiler_library_dirs()\n                 for lib_dir in lib_dirs:\n-                    if lib_dir not in self.compiler.libraries_dirs:\n+                    if lib_dir not in self.compiler.library_dirs:\n                         self.compiler.libraries.append(lib_dir)\n                 #self.compiler.library_dirs = self.compiler.library_dirs + l\n                 "
    },
    {
        "commit_id": "227c397f7f597f58dc068e98021d4805b667e642",
        "commit_message": "several issues with tuple,dict,and list conversions were solved.  Also, NameError is now caught and checked for ConversionError in inline_tools.  This can be an issue when something like inline(\"\",['a']) is called and then inline(\"\",['b']) is called.  It hadn't occured to me that the names had to be the same from call to call, but I guess they do or we get a recompile.",
        "commit_url": "https://github.com/numpy/numpy/commit/227c397f7f597f58dc068e98021d4805b667e642",
        "buggy_code": "sprintf(msg,\"variable '%s' not found in local or global scope.\",var_name);",
        "fixed_code": "sprintf(msg,\"Conversion Error: variable '%s' not found in local or global scope.\",var_name);",
        "patch": "@@ -3,7 +3,7 @@\n void handle_variable_not_found(char*  var_name)\n {\n     char msg[500];\n-    sprintf(msg,\"variable '%s' not found in local or global scope.\",var_name);\n+    sprintf(msg,\"Conversion Error: variable '%s' not found in local or global scope.\",var_name);\n     throw_error(PyExc_NameError,msg);\n }\n PyObject* get_variable(char* name,PyObject* locals, PyObject* globals)"
    },
    {
        "commit_id": "29583b16259c83099ea35467ea864f5e4a02c8b1",
        "commit_message": "fixed error introduced in last change",
        "commit_url": "https://github.com/numpy/numpy/commit/29583b16259c83099ea35467ea864f5e4a02c8b1",
        "buggy_code": "blitz_tools.blitz(expr,arg_dict,{},verbose) #,",
        "fixed_code": "blitz_tools.blitz(expr,arg_dict,{},verbose=0) #,",
        "patch": "@@ -81,7 +81,7 @@ def generic_test(self,expr,arg_dict,type,size,mod_location):\n         t1 = time.time()\n         old_env = os.environ.get('PYTHONCOMPILED','')\n         os.environ['PYTHONCOMPILED'] = mod_location\n-        blitz_tools.blitz(expr,arg_dict,{},verbose) #,\n+        blitz_tools.blitz(expr,arg_dict,{},verbose=0) #,\n                           #extra_compile_args = ['-O3','-malign-double','-funroll-loops'])\n         os.environ['PYTHONCOMPILED'] = old_env\n         t2 = time.time()"
    },
    {
        "commit_id": "a0bf2b3a3ee73b05e2266b9d18de6257ea21366c",
        "commit_message": "error in variable name",
        "commit_url": "https://github.com/numpy/numpy/commit/a0bf2b3a3ee73b05e2266b9d18de6257ea21366c",
        "buggy_code": "void throw_error(PyObject* py_obj, const char* msg)",
        "fixed_code": "void throw_error(PyObject* exc, const char* msg)",
        "patch": "@@ -47,7 +47,7 @@\n     return \"unkown type\";\n }\n \n-void throw_error(PyObject* py_obj, const char* msg)\n+void throw_error(PyObject* exc, const char* msg)\n {\n   PyErr_SetString(exc, msg);\n   throw 1;"
    },
    {
        "commit_id": "68b8d1007e6b92f3fb4c218196a384c86039598d",
        "commit_message": "silly error of using == instead of =",
        "commit_url": "https://github.com/numpy/numpy/commit/68b8d1007e6b92f3fb4c218196a384c86039598d",
        "buggy_code": "dumb == 1",
        "fixed_code": "dumb = 1",
        "patch": "@@ -40,7 +40,7 @@\n     dumb = 0\n except ImportError:\n     import dumb_shelve as shelve\n-    dumb == 1\n+    dumb = 1\n \n #For testing...\n #import dumb_shelve as shelve"
    },
    {
        "commit_id": "3d616a2b426aaaf63b43b95e1fce05ba6bfc984d",
        "commit_message": "* conversion_to_int and py_to_int now both throw TypeError, but conversion_to_in\nt prefixes the msg with \"Conversion Error:\" so that conversion errors can be dif\nferentiated from errors thrown in the user's code.",
        "commit_url": "https://github.com/numpy/numpy/commit/3d616a2b426aaaf63b43b95e1fce05ba6bfc984d",
        "buggy_code": "handle_conversion_error_type(py_obj,\"file\", name);",
        "fixed_code": "handle_conversion_error(py_obj,\"file\", name);",
        "patch": "@@ -75,7 +75,7 @@\n FILE* convert_to_file(PyObject* py_obj, char* name)\n {\n     if (!py_obj || !PyFile_Check(py_obj))\n-        handle_conversion_error_type(py_obj,\"file\", name);\n+        handle_conversion_error(py_obj,\"file\", name);\n \n     // Cleanup code should call DECREF\n     Py_INCREF(py_obj);"
    },
    {
        "commit_id": "7ff49e76f9d0035b9d2241177e75b28fc300a2b4",
        "commit_message": "Added an import pickle to fix a bug in catalog.add_function_persistent.",
        "commit_url": "https://github.com/numpy/numpy/commit/7ff49e76f9d0035b9d2241177e75b28fc300a2b4",
        "buggy_code": "import shelve",
        "fixed_code": "import shelve, pickle",
        "patch": "@@ -32,7 +32,7 @@\n \"\"\"       \n \n import os,sys,string\n-import shelve\n+import shelve, pickle\n \n def getmodule(object):\n     \"\"\" Discover the name of the module where object was defined."
    },
    {
        "commit_id": "46862d2ee913ad05e4bb12c0a0b701c3b17f447c",
        "commit_message": "fixed error found by Prabhu getmodule.  except now catches KeyErrors as well as TypeErrors",
        "commit_url": "https://github.com/numpy/numpy/commit/46862d2ee913ad05e4bb12c0a0b701c3b17f447c",
        "buggy_code": "except TypeError:",
        "fixed_code": "except (TypeError, KeyError):",
        "patch": "@@ -57,7 +57,7 @@ def getmodule(object):\n                     if string.find('(built-in)',str(mod)) is -1:\n                         break\n                     \n-            except TypeError:\n+            except (TypeError, KeyError):\n                 pass        \n     return value\n "
    },
    {
        "commit_id": "a603ba140acaf24a365343c9c9b48904745e4386",
        "commit_message": "changed tempdir to gettempdir(). fixed bug introduced in latest testing frenzy",
        "commit_url": "https://github.com/numpy/numpy/commit/a603ba140acaf24a365343c9c9b48904745e4386",
        "buggy_code": "returned by temfile.tempdir().  Functions closer to the front are of",
        "fixed_code": "returned by temfile.gettempdir().  Functions closer to the front are of",
        "patch": "@@ -218,7 +218,7 @@ class catalog:\n         fragment.  A default directory is also searched for catalog functions. \n         On unix, the default directory is usually '~/.pythonxx_compiled' where \n         xx is the version of Python used. On windows, it is the directory \n-        returned by temfile.tempdir().  Functions closer to the front are of \n+        returned by temfile.gettempdir().  Functions closer to the front are of \n         the variable list are guaranteed to be closer to the front of the \n         function list so that they will be called first.  See \n         get_cataloged_functions() for more info on how the search order is "
    }
]