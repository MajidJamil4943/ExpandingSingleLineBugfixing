[
    {
        "commit_id": "e3710bc84a40dea2d7b0a1a99f390dbb6994fb43",
        "commit_message": "chronos: Run build_cache_local.sh on cloud build (#12962)\n\nAlso make some changes:\r\n\r\n1. Support coverage builds by parameterising the sanitizer.\r\n\r\n2. Build a total of 2 images: \r\n-\r\nus-central1-docker.pkg.dev/oss-fuzz/oss-fuzz-gen/${_PROJECT}-ofg-cached-${_SANITIZER}\r\n-\r\nus-central1-docker.pkg.dev/oss-fuzz/oss-fuzz-gen/${_PROJECT}-ofg-ccache-${_SANITIZER}\r\n\r\nThe \"cached\" image will be different depending on whether replay worked\r\nor not. The \"ccache\" image will always use ccache.\r\n\r\n3. Fix an incorrect exception path in bash_parser.py",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e3710bc84a40dea2d7b0a1a99f390dbb6994fb43",
        "buggy_code": "except bashlex.error.ParsingError:",
        "fixed_code": "except bashlex.errors.ParsingError:",
        "patch": "@@ -196,7 +196,7 @@ def parse_script(bash_script, all_scripts) -> str:\n     build_script = f.read()\n   try:\n     parts = bashlex.parse(build_script)\n-  except bashlex.error.ParsingError:\n+  except bashlex.errors.ParsingError:\n     return ''\n   for part in parts:\n     new_script += handle_node(part, all_scripts, build_script)"
    },
    {
        "commit_id": "5c8b34e4369e7dbe9afe905c9edf6309066cb6a4",
        "commit_message": "infra: trial build: fix missing f-string (#12913)\n\nSigned-off-by: David Korczynski <david@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/5c8b34e4369e7dbe9afe905c9edf6309066cb6a4",
        "buggy_code": "'{len(wait_builds)}, {wait_builds}')",
        "fixed_code": "f'{len(wait_builds)}, {wait_builds}')",
        "patch": "@@ -287,7 +287,7 @@ def wait_on_builds(build_ids, credentials, cloud_project, end_time):  # pylint:\n     # Update status every hour.\n     if current_time >= next_check_time:\n       logging.info(f'[{current_time}] Remaining builds: '\n-                   '{len(wait_builds)}, {wait_builds}')\n+                   f'{len(wait_builds)}, {wait_builds}')\n       next_check_time += datetime.timedelta(hours=1)\n \n     # Warn users and write a summary if build is about to end."
    },
    {
        "commit_id": "e35ff32a8cb9b1c7a649e9b25610c60813376556",
        "commit_message": "Apache poi various smaller changes (#12725)\n\n* Update JDK 8 and 11 to latest patch-levels\n* Add temporary work around for invalid dependency on log4j-bom\nintroduced via recent XmlBeans\n* Fix presubmit-checks for Apache POI\n* Print out which file fails checks in presubmit.py to aid in finding\nthe culprit",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e35ff32a8cb9b1c7a649e9b25610c60813376556",
        "buggy_code": "'failures.')",
        "fixed_code": "'failures in file %s.' % str(path))",
        "patch": "@@ -262,7 +262,7 @@ def _check_one_apt_update(path):\n     if 'RUN apt install' in dockerfile or 'RUN apt-get install' in dockerfile:\n       print('Please add an \"apt-get update\" before \"apt-get install\". '\n             'Otherwise, a cached and outdated RUN layer may lead to install '\n-            'failures.')\n+            'failures in file %s.' % str(path))\n       return False\n \n   return True"
    },
    {
        "commit_id": "2cc80a4e526830f48fbfbb12174bb5720a073e93",
        "commit_message": "[PySecSan] Fix a bug in Regex DoS detector due to typo (#12735)\n\nTo detect Regex DoS, PySecSan installs pre_hook and post_hook of\r\nre.pattern.findall.\r\nHowever, due to typo, it installs `hook_pre_exec_re_pattern_findall` as\r\npre_hook and post_hook.\r\nThis leads to failure of detecting Regex DoS bugs.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/2cc80a4e526830f48fbfbb12174bb5720a073e93",
        "buggy_code": "hook_pre_exec_re_pattern_findall))",
        "fixed_code": "hook_post_exec_re_pattern_findall))",
        "patch": "@@ -72,7 +72,7 @@ def hook_post_exec_re_compile(retval, pattern, flags=None):\n   sanlib.sanitizer_log('Inside of post compile hook', sanlib.LOG_DEBUG)\n   wrapper_object = sanlib.create_object_wrapper(\n       findall=(hook_pre_exec_re_pattern_findall,\n-               hook_pre_exec_re_pattern_findall))\n+               hook_post_exec_re_pattern_findall))\n   hooked_object = wrapper_object(retval)\n   return hooked_object\n "
    },
    {
        "commit_id": "93b417ed1dd2b888bc9fa5d6642fe366291294fc",
        "commit_message": "[infra] Upgrade Python to 3.10.14 in base-builder & base-runner Images (#12027)\n\n> [!NOTE]  \r\n> I was looking for somewhere to get feedback from maintainers about\r\nthis approach to the Python 3.10 upgrade before attempting it, but the\r\ndiscussion surrounding a Python upgrade has been rather fragmented\r\nacross many issues, PRs, and comment chains.\r\n>\r\n> For that reason, I felt it would be easier to propose with a working\r\nexample and dedicated PR.\r\n\r\n\r\n#### Fixes:\r\n- #11419\r\n- #9638\r\n\r\n#### Supersedes:\r\n- #9532\r\n- #11420\r\n\r\n\r\n## Changes\r\n\r\nThe changes introduced here upgrade Python from 3.8 to 3.10.14 inside\r\nthe base-builder and base-runner images.\r\n\r\n### Base Image Changes\r\n\r\n| Image | Before Changes | After Changes |\r\n\r\n|----------------|------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| **base-builder** | Compiled Python 3.8 from source using official\r\nrelease servers at https://www.python.org/ftp/python/. | Compiles Python\r\n3.10.14 (the latest 3.10 release) from source using official release\r\nservers at https://www.python.org/ftp/python/. |\r\n| **base-runner** | Installed Python 3.8 from the default apt repository\r\nprovided by the Ubuntu 20.04 image. | Uses a multi-stage build to copy\r\nthe Python 3.10.14 interpreter compiled by the base-builder image,\r\nensuring version sync and saving build time by re-using a pre-built\r\nversion. |\r\n\r\n\r\n## Known Impact on Projects\r\n\r\n### 3.9 Workarounds That Can Be Removed\r\n\r\n| Project    | Fix Link |\r\n|------------|----------|\r\n| dask |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/417bbf566e3ffd962e09a50903282233b3676b69\r\n|\r\n| docutils |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/e4c21ffbd8baa83d97d7dd0e1f8e3e7adeae43d1\r\n|\r\n| dovecot |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/7ab3ab6e2604396f99398a1236ff6ddb91b04430\r\n|\r\n| nbclassic |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/5509b4e221ecad6136b353780daf1ceb3f457f53\r\n|\r\n| pandas |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/0642a7afa96d193439cc9ebd7659a0fccc7e5c1b\r\n|\r\n| pybind11 |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/a5bbdb3dfbddd7f37dd7737cb57bb39c9ec5cc5f\r\n|\r\n| pyodbc |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/afa2b5edc96d581329fe0405d463b026abbea3ad\r\n|\r\n| qpid-proton|\r\nhttps://github.com/DaveLak/oss-fuzz/commit/f5bf75628649fea5696fd8e95e1e698092ea4e74\r\n|\r\n\r\n### Anticipated Build Failures\r\n\r\n#### Preexisting Failures \r\n\r\n##### Fix is Prepared\r\n\r\n| Project               | Fix Link |\r\n|-----------------------|----------|\r\n| airflow |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/60a03686280b63e88773ef9b25cd191ab8e959d0\r\n|\r\n| ipython |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/21ac68e9ba44e063d04b3df394330f6490081bcb\r\n|\r\n| networkx |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/fc2f8c5481262849b586ebb8afdfdf3e6672f44f\r\n|\r\n| numpy |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/9383c876dccad016f169d43a948c5bdc45b2894d\r\n|\r\n| tensorflow-addons |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/eed2bea1190abd51f3c621ccc923fecb6585a67c\r\n|\r\n| django (coverage build)|\r\nhttps://github.com/DaveLak/oss-fuzz/commit/c724d61eae52e309726dc0d90f22bdbbecee04e7\r\n|\r\n| proto-plus-python |\r\nhttps://github.com/DaveLak/oss-fuzz/commit/37d973ee8726c33678da37fb41e48d264418f097\r\n|\r\n| dnspython | The upgraded pip version in the base-builder fixes the\r\ncurrently failing build. |\r\n\r\n##### Fix Requires Upstream Changes\r\n\r\n| Project | Issue |\r\n|---------|-------|\r\n| pyvex | Currently failing on python 3.9 because `archinfo` dependency\r\nrequires >=3.10. Fails after the 3.10 upgrade because [the upstream\r\nbuild script needs `python3.9` replaced with\r\n`python3`](https://github.com/angr/pyvex/blob/f94c95636a3800c5bbd781ecf1e3fb0c0d9feec4/fuzzing/build.sh#L19-L23).\r\n|\r\n\r\n##### Requires More Investigation\r\n\r\n| Project            | Issue |\r\n|--------------------|-------|\r\n| matplotlib | Upgrading Python & Pyinstaller does resolve the build\r\nissues, but an error in the fuzz harness is exposed and must be resolved\r\nfor check_build to pass. The exception: `TypeError: Parser.non_math()\r\ntakes 2 positional arguments but 4 were given\" in \"File \"fuzz_plt.py\",\r\nline 43, in TestOneInput`. |\r\n| scipy | Upgrading Python & Pyinstaller does resolve the build issues,\r\nbut an error in the build step causes the build to fail. The error seems\r\nrelated to the linking: \"/usr/bin/ld: /usr/bin/ld: DWARF error: invalid\r\nor unhandled FORM value: 0x25\". When `export LDFLAGS=\"-fuse-ld=lld\"` is\r\nset, the error becomes: \"`ld.lld: error: undefined symbol:\r\n__asan_report_store4`\". |\r\n| pandas (Introspector only)| [This workaround in `build.sh` is the\r\nissue](https://github.com/google/oss-fuzz/blob/1515519a665756d8a50a6c46abac8b431e5462ef/projects/pandas/build.sh#L22-L32).\r\n|\r\n| pycrypto | Failing with error: \"`SystemError: PY_SSIZE_T_CLEAN macro\r\nmust be defined for '#' formats`\". Seems like the issue described\r\n[here](https://stackoverflow.com/a/71019907). Pycrypto is deprecated and\r\nthis is unlikely to be fixed upstream. |\r\n\r\n\r\n## Possible Future Improvements\r\n\r\nUsing the base-builder image in a multi-stage build to copy the pre-\r\ncompiled Python into base-runner is effective, but feels like a\r\nworkaround that may be introducing tech debt. A cleaner approach would\r\nbe to extract the Python compilation into a discrete base image similar\r\nto how `base-clang` works, and use that as the multi-stage builder in\r\nimages that need it.\r\n\r\n### Fuzz Introspector Caveat\r\n\r\nFuzz Introspector currently uses Python 3.9. While an upgrade to 3.10 is\r\nnot expected to introduce any new issues, it was not tested on these\r\nchanges and may require additional work.\r\n\r\n---\r\n\r\n## Motivation\r\n\r\n- Python [3.8 is reaching end of life in October\r\n2024](https://devguide.python.org/versions/).\r\n- The [Scientific Python Community already encourages dropping 3.8\r\nsupport](https://scientific-python.org/specs/spec-0000/).\r\n- This is evident when looking at which projects have resorted to\r\nupgrading to newer Pythons using ad-hoc workarounds (see `numpy`,\r\n`scipy`, `pandas`, etc.)\r\n- It is likely that more Python projects will begin dropping support for\r\n3.8, further increasing the number of broken builds and ad-hoc\r\nworkarounds.\r\n- Code coverage does not work on Python projects that use Python 3.10+\r\nsyntax.\r\n- Previous attempts at upgrading Python have stalled (see\r\nhttps://github.com/google/clusterfuzz/issues/3290#issuecomment-1699573706\r\n& the issues linked under \"Supersedes\" above.)\r\n- In recognition of the fact that OSS-Fuzz maintainers are stretched\r\nthin, I thought I'd give it a shot.\r\n\r\n---------\r\n\r\nCo-authored-by: Oliver Chang <oliverchang@users.noreply.github.com>\r\nCo-authored-by: Andrew Murray <radarhere@users.noreply.github.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/93b417ed1dd2b888bc9fa5d6642fe366291294fc",
        "buggy_code": "def hook_pre_exec_eval(cmd):",
        "fixed_code": "def hook_pre_exec_eval(cmd, *args, **kwargs):",
        "patch": "@@ -98,7 +98,7 @@ def hook_pre_exec_os_system(cmd):\n                             'Command injection')\n \n \n-def hook_pre_exec_eval(cmd):\n+def hook_pre_exec_eval(cmd, *args, **kwargs):\n   \"\"\"Hook for eval. Experimental atm.\"\"\"\n   res = check_code_injection_match(cmd, check_unquoted=True)\n   if res is not None:"
    },
    {
        "commit_id": "d288d1bc52a8c9c40c93277f306a19b7c042a92a",
        "commit_message": "Fix typo (#12624)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/d288d1bc52a8c9c40c93277f306a19b7c042a92a",
        "buggy_code": "return build_lib.run_build(''",
        "fixed_code": "return build_lib.run_build('',",
        "patch": "@@ -76,7 +76,7 @@ def run_build(steps, images, tags=None, build_version=MAJOR_TAG):\n           'machineType': 'E2_HIGHCPU_32'\n       },\n   }\n-  return build_lib.run_build(''\n+  return build_lib.run_build('',\n                              steps,\n                              credentials,\n                              BASE_PROJECT,"
    },
    {
        "commit_id": "16f697c70bd6dd612d47472c63f91876a64f6e32",
        "commit_message": "typing_extensions: Fix \"isinsance\" typo (#12554)\n\nFixes this error during coverage builds:\r\n\r\n```\r\n === Uncaught Python exception: ===\r\nNameError: name 'isinsance' is not defined\r\nTraceback (most recent call last):\r\n  File \"fuzz_typing_extensions.py\", line 65, in TestOneInput\r\nNameError: name 'isinsance' is not defined\r\n```\r\n\r\nCo-authored-by: Vitor Guidi <vitorguidi@gmail.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/16f697c70bd6dd612d47472c63f91876a64f6e32",
        "buggy_code": "if isinstance(d1, dict) and isinsance(d2, dict):",
        "fixed_code": "if isinstance(d1, dict) and isinstance(d2, dict):",
        "patch": "@@ -51,7 +51,7 @@ def TestOneInput(data):\n   except:\n     d1 = None\n     d2 = None\n-  if isinstance(d1, dict) and isinsance(d2, dict):\n+  if isinstance(d1, dict) and isinstance(d2, dict):\n     if d1 != d2:\n       assert TypedDict('D1', d1) != TypedDict('D2', d2)\n     else:"
    },
    {
        "commit_id": "7b1dd0663be77dd2e4d802bab864e35abbd86058",
        "commit_message": "llvm: fix coverage build (#11403)\n\nSigned-off-by: David Korczynski <david@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/7b1dd0663be77dd2e4d802bab864e35abbd86058",
        "buggy_code": "if \"build\" in line and \"AMDGPUBaseInfo.cpp.o\" in line:",
        "fixed_code": "if \"build\" in line and (\"AMDGPUBaseInfo.cpp.o\" in line or \"AMDGPUMCCodeEmitter.cpp.o\" in line):",
        "patch": "@@ -30,7 +30,7 @@\n       patch_flag = False\n \n   # Find the AMDGPUBaseInfo.cpp.o build\n-  if \"build\" in line and \"AMDGPUBaseInfo.cpp.o\" in line:\n+  if \"build\" in line and (\"AMDGPUBaseInfo.cpp.o\" in line or \"AMDGPUMCCodeEmitter.cpp.o\" in line):\n     # Find the next flag\n     patch_flag = True\n   new_content += line + \"\\n\""
    },
    {
        "commit_id": "3a1ea8db8fa0a1254a7ce3bc4cb943e8bc44e0ea",
        "commit_message": "yarl: fix build (#11248)\n\nSigned-off-by: David Korczynski <david@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/3a1ea8db8fa0a1254a7ce3bc4cb943e8bc44e0ea",
        "buggy_code": "atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)",
        "fixed_code": "atheris.Setup(sys.argv, TestOneInput)",
        "patch": "@@ -26,7 +26,7 @@ def TestOneInput(data):\n \n def main():\n   atheris.instrument_all()\n-  atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)\n+  atheris.Setup(sys.argv, TestOneInput)\n   atheris.Fuzz()\n \n "
    },
    {
        "commit_id": "eec2bc7927708dde42456023e614a1d729bd2082",
        "commit_message": "Cloud-custodian: Fix fuzzer (#11203)\n\nThis PR fixes the fuzz_gcp_filters_validate_process fuzzer for the\r\nfollowing issues.\r\n\r\n- https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63412\r\n- https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63821\r\n- https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63904\r\n\r\n---------\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/eec2bc7927708dde42456023e614a1d729bd2082",
        "buggy_code": "if \"Filter requires resource expression\" not in str(e):",
        "fixed_code": "if \"Filter requires resource expression\" not in str(e) and \"No GCP Project ID\" not in str(e):",
        "patch": "@@ -83,7 +83,7 @@ def TestOneInput(data):\n         FilterValidationError):\n         pass\n     except ValueError as e:\n-        if \"Filter requires resource expression\" not in str(e):\n+        if \"Filter requires resource expression\" not in str(e) and \"No GCP Project ID\" not in str(e):\n             raise e\n     except (KeyError, TypeError):\n         pass"
    },
    {
        "commit_id": "0463aa2ee7938c145227200a004a6f3ec6aead1e",
        "commit_message": "httpcore: fix build (#10588)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0463aa2ee7938c145227200a004a6f3ec6aead1e",
        "buggy_code": "from httpcore.backends.mock import MockStream",
        "fixed_code": "from httpcore._backends.mock import MockStream",
        "patch": "@@ -16,7 +16,7 @@\n import atheris\n \n import httpcore\n-from httpcore.backends.mock import MockStream\n+from httpcore._backends.mock import MockStream\n \n \n def TestOneInput(data):"
    },
    {
        "commit_id": "1647294b82919ec24d1f6b1684ad114fd209d7b4",
        "commit_message": "Add main_repo and language to new project doc, and links to field explanations. Fix workflow reference to repo_url. (#10553)\n\nThe PR Helper workflow complains if a new project doesn't include a\r\nmain_repo, so I've added that to the accepting new projects page.\r\n\r\nI also added links from there to the specific fields in the new project\r\nguide.\r\n\r\nI also changed a reference in the workflow output to refer to the yaml\r\nfield name visible to submitters, rather than to the internal python\r\nname for the same field which doesn't match.\r\n\r\n---------\r\n\r\nSigned-off-by: Clarence \"Sparr\" Risher <clrnc@amazon.com>\r\nCo-authored-by: Holly Gong <39108850+hogo6002@users.noreply.github.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/1647294b82919ec24d1f6b1684ad114fd209d7b4",
        "buggy_code": "'but the `repo_url` is missing. '",
        "fixed_code": "'but the `main_repo` is missing. '",
        "patch": "@@ -96,7 +96,7 @@ def main():\n       repo_url = new_project.get('main_repo')\n       if repo_url is None:\n         message += (f'{pr_author} is integrating a new project, '\n-                    'but the `repo_url` is missing. '\n+                    'but the `main_repo` is missing. '\n                     'The criticality score cannot be computed.<br/>')\n       else:\n         message += (f'{pr_author} is integrating a new project:<br/>'"
    },
    {
        "commit_id": "7df76f3127fb5959bf7dfc21414eab61fe425949",
        "commit_message": "paramiko: fix build (#10451)\n\nSigned-off-by: David Korczynski <david@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/7df76f3127fb5959bf7dfc21414eab61fe425949",
        "buggy_code": "from loop import LoopSocket",
        "fixed_code": "from _loop import LoopSocket",
        "patch": "@@ -34,7 +34,7 @@\n else:\n     raise Exception(\"Could not extract path needed to import loop.py\")\n sys.path.append(app_path)\n-from loop import LoopSocket\n+from _loop import LoopSocket\n \n def TestOneInput(data):\n     fdp = atheris.FuzzedDataProvider(data)"
    },
    {
        "commit_id": "d1d4d55a9180756a504b2babcef83a4dabbbe1b6",
        "commit_message": "[cifuzz] Try to fix copy (#10228)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/d1d4d55a9180756a504b2babcef83a4dabbbe1b6",
        "buggy_code": "return shutil.copytree(self.repo, self.sarif)",
        "fixed_code": "return shutil.copytree(self.repo, self.sarif, symlinks=True)",
        "patch": "@@ -95,4 +95,4 @@ def sarif(self):\n \n   def make_repo_for_sarif(self):\n     \"\"\"Copies the repo over for the sarif upload GitHub action.\"\"\"\n-    return shutil.copytree(self.repo, self.sarif)\n+    return shutil.copytree(self.repo, self.sarif, symlinks=True)"
    },
    {
        "commit_id": "19c583627f19b83b510bb0bc156b5bfb113b60da",
        "commit_message": "[cifuzz] Fix sarif upload (#10217)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/19c583627f19b83b510bb0bc156b5bfb113b60da",
        "buggy_code": "crash_type = crash_type.split(' ')[0].lower()",
        "fixed_code": "crash_type = crash_type.replace('\\n', ' ').split(' ')[0].lower()",
        "patch": "@@ -181,7 +181,7 @@ def get_error_source_info(crash_info):\n def get_rule_index(crash_type):\n   \"\"\"Returns the rule index describe the rule that |crash_type| ran afoul of.\"\"\"\n   # Don't include \"READ\" or \"WRITE\" or number of bytes.\n-  crash_type = crash_type.split(' ')[0].lower()\n+  crash_type = crash_type.replace('\\n', ' ').split(' ')[0].lower()\n   logging.info('crash_type: %s.', crash_type)\n   for idx, rule in enumerate(SARIF_RULES):\n     if rule['id'] == crash_type:"
    },
    {
        "commit_id": "2575e2cb192afd60c4e27c9fc149b60c403cd281",
        "commit_message": "Fix the Mutagen fuzzer (#10150)\n\nMutagen isn't able to write to the BytesIO it's operating on, so we need\r\nto pass it something to write into.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/2575e2cb192afd60c4e27c9fc149b60c403cd281",
        "buggy_code": "f.delete()",
        "fixed_code": "f.delete(out)",
        "patch": "@@ -30,9 +30,9 @@ def TestOneInput(data: bytes) -> int:\n         f.tags.pprint()\n       if f.info:\n         f.info.pprint()\n-      f.delete()\n \n       out = io.BytesIO()\n+      f.delete(out)\n       f.save(out)\n       mutagen.File(out)\n   except mutagen.MutagenError:"
    },
    {
        "commit_id": "6809bfb9bcda7f8367b39de1bd8b99074d40429f",
        "commit_message": "Updating calling of urllib3 pool manager (#10051)\n\nWe're having the issue where the introspector isn't able to see renamed\r\nimports (e.g. `from .poolmanager import PoolManager, ProxyManager,\r\nproxy_from_url`).\r\n\r\nI've called `urllib3.poolmanager.PoolManager` instead of\r\n`urllib3.PoolManager` which has included the `PoolManager` coverage in\r\nthe analysis.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/6809bfb9bcda7f8367b39de1bd8b99074d40429f",
        "buggy_code": "urllib_pool = urllib3.PoolManager(timeout=timeout)",
        "fixed_code": "urllib_pool = urllib3.poolmanager.PoolManager(timeout=timeout)",
        "patch": "@@ -80,7 +80,7 @@ def TestOneInput(input_bytes):\n     global GLOBAL_RESPONSE_MESSAGE, GLOBAL_RESPONSE_CODE, GLOBAL_CONTENT_ENCODING, PORT\n \n     timeout = urllib3.util.Timeout(connect=1.0, read=1.0)\n-    urllib_pool = urllib3.PoolManager(timeout=timeout)\n+    urllib_pool = urllib3.poolmanager.PoolManager(timeout=timeout)\n \n     # Try and get an open port to run our test web server\n     for attempt in range(10):"
    },
    {
        "commit_id": "2c8504418f9dc4f7e49d7301cdbedd0aecc5e974",
        "commit_message": "openapi-schema-validator: fix typo (#9881)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/2c8504418f9dc4f7e49d7301cdbedd0aecc5e974",
        "buggy_code": "if not isinstance(fuzz_schema, dict) or not isinstance(",
        "fixed_code": "if not isinstance(fuzz_dict_schema, dict) or not isinstance(",
        "patch": "@@ -27,7 +27,7 @@ def TestOneInput(data):\n     fuzz_dict_instance = json.loads(fdp.ConsumeUnicodeNoSurrogates(fdp.ConsumeIntInRange(0, 2048)))\n   except:\n     return\n-  if not isinstance(fuzz_schema, dict) or not isinstance(\n+  if not isinstance(fuzz_dict_schema, dict) or not isinstance(\n       fuzz_dict_instance, dict):\n     return\n "
    },
    {
        "commit_id": "482fabbe40a4ee1576667602d7609ef906331b0e",
        "commit_message": "pymysql: fix build (#9825)\n\nSigned-off-by: David Korczynski <david@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/482fabbe40a4ee1576667602d7609ef906331b0e",
        "buggy_code": "from pymysql import connections",
        "fixed_code": "from pymysql import connections, constants",
        "patch": "@@ -21,7 +21,7 @@\n \n import configparser\n import pymysql\n-from pymysql import connections\n+from pymysql import connections, constants\n \n \n fuzzed_input = b\"\""
    },
    {
        "commit_id": "fded1948e133f37b7777e48892c3d496b6974718",
        "commit_message": "paramiko: fix fuzzer (#9502)\n\nFixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=55341",
        "commit_url": "https://github.com/google/oss-fuzz/commit/fded1948e133f37b7777e48892c3d496b6974718",
        "buggy_code": "from paramiko.common import byte_chr, zero_byte, asbytes",
        "fixed_code": "from paramiko.common import byte_chr, zero_byte",
        "patch": "@@ -24,7 +24,7 @@\n from cryptography.hazmat.primitives.ciphers import algorithms, Cipher, modes\n \n from paramiko import Message, Packetizer\n-from paramiko.common import byte_chr, zero_byte, asbytes\n+from paramiko.common import byte_chr, zero_byte\n \n # Extract path of fuzzer so we can include loop.py\n if getattr(sys, 'frozen', False):"
    },
    {
        "commit_id": "0f3a505e5cf9d12475892312a9edcef4bcd4cd68",
        "commit_message": "Fix up bc-java-wycheproof and enable build (#8983)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0f3a505e5cf9d12475892312a9edcef4bcd4cd68",
        "buggy_code": "testcase = os.path.join(args.output_dir, 'testcase')",
        "fixed_code": "testcase = os.path.join(args.output_dir, 'fuzz-0')",
        "patch": "@@ -40,7 +40,7 @@ def main():\n   args = get_args()\n   if not os.path.exists(args.output_dir):\n     os.mkdir(args.output_dir)\n-  testcase = os.path.join(args.output_dir, 'testcase')\n+  testcase = os.path.join(args.output_dir, 'fuzz-0')\n   with open(testcase, 'w') as file_handle:\n     file_handle.write(' ')\n   return 0"
    },
    {
        "commit_id": "b23acb4d4266ab6552560f2766390b0478c12f40",
        "commit_message": "pyca-cryptography: Fix issue 48484 integer overflow (#8592)\n\nFix error handling or other false-positive bugs reported for projects\r\nissues.\r\n- 48484 (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48484)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b23acb4d4266ab6552560f2766390b0478c12f40",
        "buggy_code": "key_size=fdp.ConsumeInt(15)",
        "fixed_code": "key_size=fdp.ConsumeInt(4)",
        "patch": "@@ -26,7 +26,7 @@ def TestInput(input_bytes):\n     try:\n         parameters = dh.generate_parameters(\n             generator=(2 if fdp.ConsumeBool() else 5), \n-            key_size=fdp.ConsumeInt(15)\n+            key_size=fdp.ConsumeInt(4)\n         )\n     except ValueError as e:\n         if \"DH key_size must be at least 512 bits\" not in str(e):"
    },
    {
        "commit_id": "360b484fa0f026c0dea44c62897519c6c99127cc",
        "commit_message": "kafka Fix missing error handling for null byte checking in issue 51491 51493 (#8595)\n\nFix error handling or other false-positive bugs reported for projects\r\nissues.\r\n- 51491 (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51491) \r\n- 51493 (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51493)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/360b484fa0f026c0dea44c62897519c6c99127cc",
        "buggy_code": "lambda part: TopicPartition(fdp.ConsumeString(10), part),",
        "fixed_code": "lambda part: TopicPartition(fdp.ConsumeString(10).replace('\\x00', ''), part),",
        "patch": "@@ -50,7 +50,7 @@ def dummy_callback(err, partitions):\n \n         partitions = list(\n             map(\n-                lambda part: TopicPartition(fdp.ConsumeString(10), part),\n+                lambda part: TopicPartition(fdp.ConsumeString(10).replace('\\x00', ''), part),\n                 range(0, 100, 3)\n             )\n         )"
    },
    {
        "commit_id": "1ab5e408e5253db7058c5050a7ee15216c078698",
        "commit_message": "[trial builds] Support forks (#8519)\n\nFix https://github.com/google/oss-fuzz/issues/8273",
        "commit_url": "https://github.com/google/oss-fuzz/commit/1ab5e408e5253db7058c5050a7ee15216c078698",
        "buggy_code": "config = build_project.Config(False, False, None, False, False)",
        "fixed_code": "config = build_project.Config(upload=False)",
        "patch": "@@ -67,7 +67,7 @@ def test_get_coverage_build_steps(self, mock_url, mock_corpora_steps,\n     with open(expected_build_steps_file_path) as expected_build_steps_file:\n       expected_coverage_build_steps = json.load(expected_build_steps_file)\n \n-    config = build_project.Config(False, False, None, False, False)\n+    config = build_project.Config(upload=False)\n     project_yaml, dockerfile = build_project.get_project_data(\n         test_utils.PROJECT)\n     build_steps = build_and_run_coverage.get_build_steps("
    },
    {
        "commit_id": "1ab5e408e5253db7058c5050a7ee15216c078698",
        "commit_message": "[trial builds] Support forks (#8519)\n\nFix https://github.com/google/oss-fuzz/issues/8273",
        "commit_url": "https://github.com/google/oss-fuzz/commit/1ab5e408e5253db7058c5050a7ee15216c078698",
        "buggy_code": "return build_project.Config(False, None, None, False, True)",
        "fixed_code": "return build_project.Config()",
        "patch": "@@ -61,7 +61,7 @@ def get_project_data(project_name):\n \n def get_empty_config():\n   \"\"\"Returns an empty build config.\"\"\"\n-  return build_project.Config(False, None, None, False, True)\n+  return build_project.Config()\n \n \n def get_build_steps(project_name, image_project, base_images_project):"
    },
    {
        "commit_id": "22488896f61e218f296106e4591e6ee762e06ac6",
        "commit_message": "Centipede integration (#8046)\n\n* Add Centipede as a fuzzer\r\n\r\n* Specify dictionary param of Centipede\r\n\r\n* Update docs\r\n\r\n* Mark Centipede as experimental\r\n\r\n* More accurate description\r\n\r\n* Remove garbage\r\n\r\n* Simplify code\r\n\r\n* Move mkdir to dockerfile\r\n\r\n* Add the weak.c trick\r\n\r\n* Install deps with Centipede's script & uninstall new deps\r\n\r\n* Fix doc\r\n\r\n* Reuse libweak_sancov_stubs.so\r\n\r\n* Reorganise flags\r\n\r\n* format\r\n\r\n* Consistent file type\r\n\r\n* Reuse the weak references defined in Centipede\r\n\r\n* Replace the shared library of weak symbols with a static one\r\n\r\n* Correct the place to call mkdir\r\n\r\n* Allow 2G of SHM for Centipede\r\n\r\n* Create dirs in run_fuzzer\r\n\r\n* Keep Centipede up-to-date\r\n\r\n* Avoid duplicating Centipede's binary\r\n\r\n* The params of Centipede and their explanations\r\n\r\n* The engine info of centipede\r\n\r\n* Save the target binary (with san) in a subdir of the project\r\n\r\n* Set the target (with san) dir in check_build\r\n\r\n* Create the target (with san) first to avoid side-effects\r\n\r\n* Fic clone\r\n\r\n* Fix format\r\n\r\n* Add periods\r\n\r\n* Fix comments\r\n\r\n* Fix dirs\r\n\r\n* Fix parameters\r\n\r\n* Adding Centipede as a fuzzing engine for Scarecrow\r\n\r\n* Add CI support\r\n\r\n* Represent sanitizer with a variable\r\n\r\n* Remove the unnecessary definition of FUZZER_OUT\r\n\r\n* Reorganise binary directories\r\n\r\n* format\r\n\r\n* A minor note\r\n\r\n* Present issues with dirs that alread exist\r\n\r\n* Use os.path.join to join path\r\n\r\n* Make a function to get the out/ in check build\r\n\r\n* Reusing existing flags in .bazel\r\n\r\n* Avoid hardcoding sanitizer, set rss_limit_mb=4096, leave address_space_limit_mb disabled\r\n\r\n* Better ways to add bazel build options\r\n\r\n* A better way to add bazel flags\r\n\r\n* Remove redundant --bazelrc\r\n\r\n* Better Cohesion\r\n\r\n* Avoid code duplication\r\n\r\n* Simplify code\r\n\r\n* Exit on crash",
        "commit_url": "https://github.com/google/oss-fuzz/commit/22488896f61e218f296106e4591e6ee762e06ac6",
        "buggy_code": "ENGINES = ['libfuzzer', 'afl', 'honggfuzz', 'none', 'wycheproof']",
        "fixed_code": "ENGINES = ['libfuzzer', 'afl', 'honggfuzz', 'centipede', 'none', 'wycheproof']",
        "patch": "@@ -45,4 +45,4 @@\n     'hwaddress',\n ]\n ARCHITECTURES = ['i386', 'x86_64', 'aarch64']\n-ENGINES = ['libfuzzer', 'afl', 'honggfuzz', 'none', 'wycheproof']\n+ENGINES = ['libfuzzer', 'afl', 'honggfuzz', 'centipede', 'none', 'wycheproof']"
    },
    {
        "commit_id": "5675ec6958b74ebba5612b72dfe919c59e92d1df",
        "commit_message": "Rename execSan to SystemSan. (#8369)\n\n* Rename execSan to SystemSan.\r\n\r\nAll of the bug detectors we've built (or plan to build) relate to system\r\nstate.\r\n\r\n* fix documentation\r\n\r\n* fix more documentation",
        "commit_url": "https://github.com/google/oss-fuzz/commit/5675ec6958b74ebba5612b72dfe919c59e92d1df",
        "buggy_code": "but serves as a PoC to show that execSan works for Python.\"\"\"",
        "fixed_code": "but serves as a PoC to show that SystemSan works for Python.\"\"\"",
        "patch": "@@ -44,7 +44,7 @@ def exploit_target(env_value, env_name):\n   `parse_env_variables`:\n   https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.utilities.argparse.html  # pylint: disable=line-too-long\n   It might not be the most realistic example,\n-  but serves as a PoC to show that execSan works for Python.\"\"\"\n+  but serves as a PoC to show that SystemSan works for Python.\"\"\"\n   os.environb[env_name.encode()] = env_value\n   parse_env_variables(Trainer, template=env_name)\n "
    },
    {
        "commit_id": "f6c3e1862bf5408f84c8a082b3d70307ad1049c3",
        "commit_message": "Pydateutil v2 (#8306)\n\n* dateutil: fix hypothesis fuzz target\r\n\r\n* dateutil: allows overflow error exception\r\n\r\n* fixup",
        "commit_url": "https://github.com/google/oss-fuzz/commit/f6c3e1862bf5408f84c8a082b3d70307ad1049c3",
        "buggy_code": "except dateutil.parser.ParserError:",
        "fixed_code": "except (dateutil.parser.ParserError, OverflowError):",
        "patch": "@@ -25,7 +25,7 @@ def TestOneInput(input_bytes):\n   data = fdp.ConsumeUnicode(atheris.ALL_REMAINING)\n   try:\n     dateutil.parser.parse(data)\n-  except dateutil.parser.ParserError:\n+  except (dateutil.parser.ParserError, OverflowError):\n     pass\n \n def main():"
    },
    {
        "commit_id": "d50556b75893e89c2536c9aa937e5f6e5d1ea2ee",
        "commit_message": "[NFC] Fix build URL (#8039)\n\nFix build URL",
        "commit_url": "https://github.com/google/oss-fuzz/commit/d50556b75893e89c2536c9aa937e5f6e5d1ea2ee",
        "buggy_code": "return (f'https://console.cloud.google.com/cloud-build/builds/{build_id}'",
        "fixed_code": "return (f'https://console.cloud.google.com/cloud-build/builds;region=us-central1/{build_id}'",
        "patch": "@@ -396,7 +396,7 @@ def get_logs_url(build_id, project_id='oss-fuzz-base'):\n \n def get_gcb_url(build_id, cloud_project='oss-fuzz'):\n   \"\"\"Returns url where logs are displayed for the build.\"\"\"\n-  return (f'https://console.cloud.google.com/cloud-build/builds/{build_id}'\n+  return (f'https://console.cloud.google.com/cloud-build/builds;region=us-central1/{build_id}'\n           f'?project={cloud_project}')\n \n "
    },
    {
        "commit_id": "bddcf3a5cdeab6e71ee266eaecc2ca8f592ec6bf",
        "commit_message": "msal: nit (#7961)\n\nFix typo in code",
        "commit_url": "https://github.com/google/oss-fuzz/commit/bddcf3a5cdeab6e71ee266eaecc2ca8f592ec6bf",
        "buggy_code": "return MinimalResponse(fdp = self.fdp)",
        "fixed_code": "return FuzzResponse(fdp = self.fdp)",
        "patch": "@@ -37,7 +37,7 @@ def post(self, url, params=None, data=None, headers=None, **kwargs):\n         return FuzzResponse(fdp = self.fdp)\n \n     def get(self, url, params=None, headers=None, **kwargs):\n-        return MinimalResponse(fdp = self.fdp)\n+        return FuzzResponse(fdp = self.fdp)\n \n     def close(self):\n         self.session.close()"
    },
    {
        "commit_id": "5eb8a0b23851dcefd780b7298dd7ad3d1fefc2dd",
        "commit_message": "Fix build infra exception. (#7585)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/5eb8a0b23851dcefd780b7298dd7ad3d1fefc2dd",
        "buggy_code": "return build_project.Config(False, None, None, False)",
        "fixed_code": "return build_project.Config(False, None, None, False, True)",
        "patch": "@@ -59,7 +59,7 @@ def get_project_data(project_name):\n \n def get_empty_config():\n   \"\"\"Returns an empty build config.\"\"\"\n-  return build_project.Config(False, None, None, False)\n+  return build_project.Config(False, None, None, False, True)\n \n \n def get_build_steps(project_name, image_project, base_images_project):"
    },
    {
        "commit_id": "0dc7b5ef91e62605116dc607a8f0e51258f38a53",
        "commit_message": "Set introspector build to run at 8PM ET (#7539)\n\n* Set introspector build to run at 8PM ET\r\n\r\n* Fix test failure",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0dc7b5ef91e62605116dc607a8f0e51258f38a53",
        "buggy_code": "INTROSPECTOR_SCHEDULE = '0 10 * * *'",
        "fixed_code": "INTROSPECTOR_SCHEDULE = '0 0 * * *'",
        "patch": "@@ -35,7 +35,7 @@\n DEFAULT_BUILDS_PER_DAY = 1\n MAX_BUILDS_PER_DAY = 4\n COVERAGE_SCHEDULE = '0 6 * * *'\n-INTROSPECTOR_SCHEDULE = '0 10 * * *'\n+INTROSPECTOR_SCHEDULE = '0 0 * * *'\n FUZZING_BUILD_TOPIC = 'request-build'\n COVERAGE_BUILD_TOPIC = 'request-coverage-build'\n INTROSPECTOR_BUILD_TOPIC = 'request-introspector-build'"
    },
    {
        "commit_id": "1abbd8bf089660da96367b0370855f99e3aa2df6",
        "commit_message": "Revert \"Fix run_fuzzers_test::CoverageReportIntegrationTest. (#7325)\" (#7466)\n\nThis reverts commit 9553ab10d770ef7aeba47829e3e7dbd71dc6af6c.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/1abbd8bf089660da96367b0370855f99e3aa2df6",
        "buggy_code": "self.github_api_http_headers = github_api.get_http_auth_headers()",
        "fixed_code": "self.github_api_http_headers = github_api.get_http_auth_headers(config)",
        "patch": "@@ -63,7 +63,7 @@ class GithubActionsFilestore(filestore.BaseFilestore):\n \n   def __init__(self, config):\n     super().__init__(config)\n-    self.github_api_http_headers = github_api.get_http_auth_headers()\n+    self.github_api_http_headers = github_api.get_http_auth_headers(config)\n \n   def _get_artifact_name(self, name):\n     \"\"\"Returns |name| prefixed with |self.ARITFACT_PREFIX| if it isn't already"
    },
    {
        "commit_id": "9553ab10d770ef7aeba47829e3e7dbd71dc6af6c",
        "commit_message": "Fix run_fuzzers_test::CoverageReportIntegrationTest. (#7325)\n\nFixes #7324.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/9553ab10d770ef7aeba47829e3e7dbd71dc6af6c",
        "buggy_code": "self.github_api_http_headers = github_api.get_http_auth_headers(config)",
        "fixed_code": "self.github_api_http_headers = github_api.get_http_auth_headers()",
        "patch": "@@ -63,7 +63,7 @@ class GithubActionsFilestore(filestore.BaseFilestore):\n \n   def __init__(self, config):\n     super().__init__(config)\n-    self.github_api_http_headers = github_api.get_http_auth_headers(config)\n+    self.github_api_http_headers = github_api.get_http_auth_headers()\n \n   def _get_artifact_name(self, name):\n     \"\"\"Returns |name| prefixed with |self.ARITFACT_PREFIX| if it isn't already"
    },
    {
        "commit_id": "fb6e9fdfef569b9be569e40a6c4a63dd0da72b2c",
        "commit_message": "Fuzz introspector build fixes. (#7211)\n\n- Point `compile` to the right `fuzz-introspector` location (since it's no longer checked out in $SRC).\r\n- Rename build tag to \"introspector\" to be more consistent with other\r\n  tags.\r\n- Fix bad merge in deploy.sh script.\r\n- Add introspector setup to project sync.\r\n- Enable more logging for project sync cron.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/fb6e9fdfef569b9be569e40a6c4a63dd0da72b2c",
        "buggy_code": "INTROSPECTOR_BUILD_TYPE = 'fuzz_introspector'",
        "fixed_code": "INTROSPECTOR_BUILD_TYPE = 'introspector'",
        "patch": "@@ -34,7 +34,7 @@\n PLATFORM = 'linux'\n \n COVERAGE_BUILD_TYPE = 'coverage'\n-INTROSPECTOR_BUILD_TYPE = 'fuzz_introspector'\n+INTROSPECTOR_BUILD_TYPE = 'introspector'\n \n # This is needed for ClusterFuzz to pick up the most recent reports data.\n "
    },
    {
        "commit_id": "176e32b9c0a17b41cc2610c26ac4af3d3da74916",
        "commit_message": "fix Dockerfile COPY command (#6757)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/176e32b9c0a17b41cc2610c26ac4af3d3da74916",
        "buggy_code": "RUN COPY . $SRC/%(project_name)s",
        "fixed_code": "COPY . $SRC/%(project_name)s",
        "patch": "@@ -49,7 +49,7 @@\n EXTERNAL_DOCKER_TEMPLATE = \"\"\"\\\n FROM gcr.io/oss-fuzz-base/%(base_builder)s:v1\n RUN apt-get update && apt-get install -y make autoconf automake libtool\n-RUN COPY . $SRC/%(project_name)s\n+COPY . $SRC/%(project_name)s\n WORKDIR %(project_name)s\n COPY .clusterfuzzlite/build.sh $SRC/\n \"\"\""
    },
    {
        "commit_id": "4ce563f882b41c658621a9a57737aeb8ff849510",
        "commit_message": "Fix diffing on non-GitHub and improve config (#6707)\n\nFix diffing on non-GitHub and improve config\r\n\r\n1. Remove obsolete comments.\r\n2. Remove unused function get_pr_ref\r\n3. Correct comment on git_sha\r\n4. Rename commit_sha to git_sha\r\n5. Make base_commit, pr_ref, and base_ref non-github specific and move to\r\nCiEnvironment.\r\n6. Hoist get_diff_base to base class to allow diffing\r\n7. Fix downloading coverage on non-Github.\r\n8. Add TODO so that we don't assume github actions is run on github.com\r\n(enterprise users)\r\n9. Rename repo_url to git_url.\r\n10. Add missing git_url method base class.\r\n11. Clarify what git_url, git_sha and pr_ref are for and leave TODOs about how\r\nwe can eliminate them.\r\n12. Fix typos.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/4ce563f882b41c658621a9a57737aeb8ff849510",
        "buggy_code": "commit_sha='0b95fe1039ed7c38fea1f97078316bfc1030c523',",
        "fixed_code": "git_sha='0b95fe1039ed7c38fea1f97078316bfc1030c523',",
        "patch": "@@ -335,7 +335,7 @@ def test_coverage_report(self, _):\n           oss_fuzz_project_name=EXAMPLE_PROJECT,\n           project_repo_name='oss-fuzz',\n           workspace=temp_dir,\n-          commit_sha='0b95fe1039ed7c38fea1f97078316bfc1030c523',\n+          git_sha='0b95fe1039ed7c38fea1f97078316bfc1030c523',\n           base_commit='da0746452433dc18bae699e355a9821285d863c8',\n           sanitizer=self.SANITIZER,\n           is_github=True,"
    },
    {
        "commit_id": "b2fa3547b235be1fceaa6629f2d68b4d91faecb8",
        "commit_message": "[clusterfuzzlite] Fixes for gsutil (#6683)\n\n1 Fix usage of gsutil tool.\r\n2 Get rid of run_fuzzers_mode and change to mode. Fixes: #6677\r\n3 Install requirements before copying source code to make iterative development of cifuzz code faster.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b2fa3547b235be1fceaa6629f2d68b4d91faecb8",
        "buggy_code": "self.deployment = _create_deployment(run_fuzzers_mode='batch',",
        "fixed_code": "self.deployment = _create_deployment(mode='batch',",
        "patch": "@@ -130,7 +130,7 @@ class ClusterFuzzLiteTest(fake_filesystem_unittest.TestCase):\n \n   def setUp(self):\n     self.setUpPyfakefs()\n-    self.deployment = _create_deployment(run_fuzzers_mode='batch',\n+    self.deployment = _create_deployment(mode='batch',\n                                          oss_fuzz_project_name='',\n                                          cloud_bucket='gs://bucket',\n                                          is_github=True)"
    },
    {
        "commit_id": "b77a55b9b4daa43aeae50b7219b0280c93784f14",
        "commit_message": "[ClusterFuzzLite] Support GCB and gsutil/gcs as filestore. (#6629)\n\n* add gsutil filestore\r\n\r\n* lint\r\n\r\n* Fix\r\n\r\n* Add build image script\r\n\r\n* get gcb fuzzing working\r\n\r\n* fmt and fix config_utils_test\r\n\r\n* Check that crashes are uploaded\r\n\r\n* Add no_filestore\r\n\r\n* fix test\r\n\r\n* fix tests\r\n\r\n* fix\r\n\r\n* Print crash URL\r\n\r\n* Fix\r\n\r\n* fix\r\n\r\n* fmt\r\n\r\n* lnt\r\n\r\n* fix\r\n\r\n* fmt",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b77a55b9b4daa43aeae50b7219b0280c93784f14",
        "buggy_code": "def download_coverage(self, dst_directory):",
        "fixed_code": "def download_coverage(self, name, dst_directory):",
        "patch": "@@ -49,6 +49,6 @@ def download_build(self, name, dst_directory):\n     \"\"\"Downloads the build with |name| to |dst_directory|.\"\"\"\n     raise NotImplementedError('Child class must implement method.')\n \n-  def download_coverage(self, dst_directory):\n+  def download_coverage(self, name, dst_directory):\n     \"\"\"Downloads the latest project coverage report.\"\"\"\n     raise NotImplementedError('Child class must implement method.')"
    },
    {
        "commit_id": "d178de5e008adbf176f661b6d05ae0ece10712ee",
        "commit_message": "CFLite: Fix corpus pruning for git store. (#6434)\n\nFixes #6376.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/d178de5e008adbf176f661b6d05ae0ece10712ee",
        "buggy_code": "def upload_corpus(self, name, directory):",
        "fixed_code": "def upload_corpus(self, name, directory, replace=False):",
        "patch": "@@ -29,7 +29,7 @@ def upload_crashes(self, name, directory):\n     \"\"\"Uploads the crashes at |directory| to |name|.\"\"\"\n     raise NotImplementedError('Child class must implement method.')\n \n-  def upload_corpus(self, name, directory):\n+  def upload_corpus(self, name, directory, replace=False):\n     \"\"\"Uploads the corpus at |directory| to |name|.\"\"\"\n     raise NotImplementedError('Child class must implement method.')\n "
    },
    {
        "commit_id": "7386a0106029e57bc4a04beb2fdcf904cdb13672",
        "commit_message": "[cifuzz][nfc] Switch log info to log error (#6178)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/7386a0106029e57bc4a04beb2fdcf904cdb13672",
        "buggy_code": "logging.info('Build check failed.')",
        "fixed_code": "logging.error('Build check failed.')",
        "patch": "@@ -209,7 +209,7 @@ def check_fuzzer_build(config):\n   if retcode == 0:\n     logging.info('Build check passed.')\n     return True\n-  logging.info('Build check failed.')\n+  logging.error('Build check failed.')\n   return False\n \n "
    },
    {
        "commit_id": "3bd4c2d3ac3f114d98551aa4aa5fb06acb21c16a",
        "commit_message": "[cifuzz] Fix last commit pushed to master",
        "commit_url": "https://github.com/google/oss-fuzz/commit/3bd4c2d3ac3f114d98551aa4aa5fb06acb21c16a",
        "buggy_code": "_raw_upload_directory(name, directory)",
        "fixed_code": "_raw_upload_directory(name, temp_dir)",
        "patch": "@@ -65,7 +65,7 @@ def upload_directory(self, name, directory):  # pylint: disable=no-self-use\n     with tempfile.TemporaryDirectory() as temp_dir:\n       archive_path = os.path.join(temp_dir, name + '.tar')\n       tar_directory(directory, archive_path)\n-      _raw_upload_directory(name, directory)\n+      _raw_upload_directory(name, temp_dir)\n \n   def download_corpus(self, name, dst_directory):  # pylint: disable=unused-argument,no-self-use\n     \"\"\"Downloads the corpus located at |name| to |dst_directory|.\"\"\""
    },
    {
        "commit_id": "c67d5b8626bed93cf237c9086476e819685b69f7",
        "commit_message": "[CIFuzz] Fix build uploading. (#6096)\n\nPreviously, the downloaded build was uploaded instead of the new build.\r\nThis regression was introduced when the big workspace change was made.\r\nAlso, add more logging.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c67d5b8626bed93cf237c9086476e819685b69f7",
        "buggy_code": "logging.debug('listing artifact')",
        "fixed_code": "logging.debug('Listing artifacts.')",
        "patch": "@@ -75,7 +75,7 @@ def download_corpus(self, name, dst_directory):  # pylint: disable=unused-argume\n \n   def _find_artifact(self, name):\n     \"\"\"Finds an artifact using the GitHub API and returns it.\"\"\"\n-    logging.debug('listing artifact')\n+    logging.debug('Listing artifacts.')\n     artifacts = self._list_artifacts()\n     artifact = github_api.find_artifact(name, artifacts)\n     logging.debug('Artifact: %s.', artifact)"
    },
    {
        "commit_id": "c67d5b8626bed93cf237c9086476e819685b69f7",
        "commit_message": "[CIFuzz] Fix build uploading. (#6096)\n\nPreviously, the downloaded build was uploaded instead of the new build.\r\nThis regression was introduced when the big workspace change was made.\r\nAlso, add more logging.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c67d5b8626bed93cf237c9086476e819685b69f7",
        "buggy_code": "'The crash doesn\\'t reproduce on previous build. '",
        "fixed_code": "'The crash is not reproducible on previous build. '",
        "patch": "@@ -195,7 +195,7 @@ def test_new_reproducible_crash(self, mocked_info, _):\n       self.test_target.out_dir = tmp_dir\n       self.assertTrue(self.test_target.is_crash_reportable(self.testcase_path))\n     mocked_info.assert_called_with(\n-        'The crash doesn\\'t reproduce on previous build. '\n+        'The crash is not reproducible on previous build. '\n         'Code change (pr/commit) introduced crash.')\n \n   # yapf: disable"
    },
    {
        "commit_id": "fdb9c9a0fd7ff2ee77c1589dd28a16ffc6daff81",
        "commit_message": "Fix typo (#6087)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/fdb9c9a0fd7ff2ee77c1589dd28a16ffc6daff81",
        "buggy_code": "name = self.get_artifact_name(name)",
        "fixed_code": "name = self._get_artifact_name(name)",
        "patch": "@@ -59,7 +59,7 @@ def _get_artifact_name(self, name):\n \n   def upload_directory(self, name, directory):  # pylint: disable=no-self-use\n     \"\"\"Uploads |directory| as artifact with |name|.\"\"\"\n-    name = self.get_artifact_name(name)\n+    name = self._get_artifact_name(name)\n     with tempfile.TemporaryDirectory() as temp_dir:\n       archive_path = os.path.join(temp_dir, name + '.tar')\n       tar_directory(directory, archive_path)"
    },
    {
        "commit_id": "13a076b275217d3ced1d205ada2288c67eb37663",
        "commit_message": "Reduce build status workers to see if quota issue resolve.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/13a076b275217d3ced1d205ada2288c67eb37663",
        "buggy_code": "with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:",
        "fixed_code": "with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:",
        "patch": "@@ -175,7 +175,7 @@ def process_project(project_build):\n     print('Processing project', project['name'])\n     return project\n \n-  with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:\n+  with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n     futures = []\n     for project_build in BuildsHistory.query(\n         BuildsHistory.build_tag == build_tag).order('project'):"
    },
    {
        "commit_id": "c779501392015fc515425a631d13239e5b20335f",
        "commit_message": "[CIFuzz] Implement filestore based on github artifacts (#5943)\n\nImplement filestore based on github actions' artifacts feature.\r\nThis uses the github api and the github actions API.\r\nAlso fix imports in github_actions_toolkit library that were broken by move to third_party directory.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c779501392015fc515425a631d13239e5b20335f",
        "buggy_code": "from github_actions_toolkit.artifact import utils",
        "fixed_code": "from third_party.github_actions_toolkit.artifact import utils",
        "patch": "@@ -2,7 +2,7 @@\n import logging\n import os\n \n-from github_actions_toolkit.artifact import utils\n+from third_party.github_actions_toolkit.artifact import utils\n \n \n class UploadSpecification:  # pylint: disable=too-few-public-methods"
    },
    {
        "commit_id": "c779501392015fc515425a631d13239e5b20335f",
        "commit_message": "[CIFuzz] Implement filestore based on github artifacts (#5943)\n\nImplement filestore based on github actions' artifacts feature.\r\nThis uses the github api and the github actions API.\r\nAlso fix imports in github_actions_toolkit library that were broken by move to third_party directory.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c779501392015fc515425a631d13239e5b20335f",
        "buggy_code": "from github_actions_toolkit.artifact import config_variables",
        "fixed_code": "from third_party.github_actions_toolkit.artifact import config_variables",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"Utility module. Based on utils.ts.\"\"\"\n import logging\n \n-from github_actions_toolkit.artifact import config_variables\n+from third_party.github_actions_toolkit.artifact import config_variables\n \n MAX_API_ATTEMPTS = 5\n SLEEP_TIME = 1"
    },
    {
        "commit_id": "aed20a9b626928c5d8b146ba1652d8a97b967fd2",
        "commit_message": "ci: Fix get_changed_files_output (#5944)\n\n* ci: Fix get_changed_files_output\r\n\r\n* Update project_tests.yml\r\n\r\n* ci: Fix presubmit checks\r\n\r\n* ci: Use fetch-depth:0 instead of --unshallow",
        "commit_url": "https://github.com/google/oss-fuzz/commit/aed20a9b626928c5d8b146ba1652d8a97b967fd2",
        "buggy_code": "['git', 'merge-base', 'FETCH_HEAD', 'origin/HEAD']).strip().decode()",
        "fixed_code": "['git', 'merge-base', 'HEAD', 'origin/HEAD']).strip().decode()",
        "patch": "@@ -38,7 +38,7 @@\n def get_changed_files_output():\n   \"\"\"Returns the output of a git command that discovers changed files.\"\"\"\n   branch_commit_hash = subprocess.check_output(\n-      ['git', 'merge-base', 'FETCH_HEAD', 'origin/HEAD']).strip().decode()\n+      ['git', 'merge-base', 'HEAD', 'origin/HEAD']).strip().decode()\n \n   return subprocess.check_output(\n       ['git', 'diff', '--name-only', branch_commit_hash + '..']).decode()"
    },
    {
        "commit_id": "aed20a9b626928c5d8b146ba1652d8a97b967fd2",
        "commit_message": "ci: Fix get_changed_files_output (#5944)\n\n* ci: Fix get_changed_files_output\r\n\r\n* Update project_tests.yml\r\n\r\n* ci: Fix presubmit checks\r\n\r\n* ci: Use fetch-depth:0 instead of --unshallow",
        "commit_url": "https://github.com/google/oss-fuzz/commit/aed20a9b626928c5d8b146ba1652d8a97b967fd2",
        "buggy_code": "['git', 'merge-base', 'FETCH_HEAD', 'origin/HEAD']).strip().decode()",
        "fixed_code": "['git', 'merge-base', 'HEAD', 'origin/HEAD']).strip().decode()",
        "patch": "@@ -346,7 +346,7 @@ def yapf(paths, validate=True):\n def get_changed_files():\n   \"\"\"Return a list of absolute paths of files changed in this git branch.\"\"\"\n   branch_commit_hash = subprocess.check_output(\n-      ['git', 'merge-base', 'FETCH_HEAD', 'origin/HEAD']).strip().decode()\n+      ['git', 'merge-base', 'HEAD', 'origin/HEAD']).strip().decode()\n \n   diff_commands = [\n       # Return list of modified files in the commits on this branch."
    },
    {
        "commit_id": "624a294bff3d66e002b2a33052244e0aa79b3952",
        "commit_message": "[CIFuzz] Allow run_fuzzers to use a preexisting corpus. (#5928)\n\n* [CIFuzz] Allow run_fuzzers to use a preexisting corpus.\r\n\r\nAlso improve comment in cifuzz-base/Dockerfile.\r\n\r\n* improve comment\r\n\r\n* Fix run_fuzzers\r\nAdd --cache option to helper.py's build_image command which\r\nuses the docker image cache when building and use this in\r\nci/build.py.\r\nChange build_image_impl's argument no_cache to cache for clarity.\r\nEliminate default argument cache in build_fuzzers_impl since no users\r\nuse it.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/624a294bff3d66e002b2a33052244e0aa79b3952",
        "buggy_code": "execute_helper_command(['build_image', image, '--no-pull'])",
        "fixed_code": "execute_helper_command(['build_image', image, '--no-pull', '--cache'])",
        "patch": "@@ -217,7 +217,7 @@ def build_base_images():\n   ]\n   for image in images:\n     try:\n-      execute_helper_command(['build_image', image, '--no-pull'])\n+      execute_helper_command(['build_image', image, '--no-pull', '--cache'])\n     except subprocess.CalledProcessError:\n       return 1\n "
    },
    {
        "commit_id": "ffe4f892b11b55a9548ea875189737e4a72aa159",
        "commit_message": "[helper] Fix build_image --pull and refactor (#5642)\n\nFix behavior of build_image --pull (Fixes #5640)\r\n\r\nAlso refactor helper.py:\r\n\r\n1. Change behavior of functions so that most return True on success and False on failure.\r\n2. Only main will return 1 on failure and 0 on success now. Previous behavior was very error prone.\r\n3. Rename _get_output_dir to _get_out_dir.\r\n4. Make function docstrings use descriptive tense.\r\n5. Make helper.py print help when no argument is specified.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/ffe4f892b11b55a9548ea875189737e4a72aa159",
        "buggy_code": "runner=docker_run,",
        "fixed_code": "run_function=docker_run,",
        "patch": "@@ -146,7 +146,7 @@ def docker_run(args):\n                                                 fuzz_target,\n                                                 False, [], [],\n                                                 test_case_path,\n-                                                runner=docker_run,\n+                                                run_function=docker_run,\n                                                 err_result=(None, None, None))\n   if return_code is None:\n     return None"
    },
    {
        "commit_id": "ffe4f892b11b55a9548ea875189737e4a72aa159",
        "commit_message": "[helper] Fix build_image --pull and refactor (#5642)\n\nFix behavior of build_image --pull (Fixes #5640)\r\n\r\nAlso refactor helper.py:\r\n\r\n1. Change behavior of functions so that most return True on success and False on failure.\r\n2. Only main will return 1 on failure and 0 on success now. Previous behavior was very error prone.\r\n3. Rename _get_output_dir to _get_out_dir.\r\n4. Make function docstrings use descriptive tense.\r\n5. Make helper.py print help when no argument is specified.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/ffe4f892b11b55a9548ea875189737e4a72aa159",
        "buggy_code": "@mock.patch('helper.docker_run')",
        "fixed_code": "@mock.patch('helper.docker_run', return_value=False)  # We want to quit early.",
        "patch": "@@ -79,7 +79,7 @@ class BuildFuzzersTest(unittest.TestCase):\n               return_value=('example.com', '/path'))\n   @mock.patch('repo_manager._clone', return_value=None)\n   @mock.patch('continuous_integration.checkout_specified_commit')\n-  @mock.patch('helper.docker_run')\n+  @mock.patch('helper.docker_run', return_value=False)  # We want to quit early.\n   def test_cifuzz_env_var(self, mocked_docker_run, _, __, ___):\n     \"\"\"Tests that the CIFUZZ env var is set.\"\"\"\n "
    },
    {
        "commit_id": "c8ca07752f3bfe53343c0ac11494b4c8e199398b",
        "commit_message": "[CIFuzz][coverage] Fix bug in getting coverage reports (#5284)\n\nAlso add tests.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c8ca07752f3bfe53343c0ac11494b4c8e199398b",
        "buggy_code": "if not latest_cov_info is None:",
        "fixed_code": "if latest_cov_info is None:",
        "patch": "@@ -115,7 +115,7 @@ def _get_latest_cov_report_info(project_name):\n                                           LATEST_REPORT_INFO_PATH,\n                                           project_name + '.json')\n   latest_cov_info = get_json_from_url(latest_report_info_url)\n-  if not latest_cov_info is None:\n+  if latest_cov_info is None:\n     logging.error('Could not get the coverage report json from url: %s.',\n                   latest_report_info_url)\n     return None"
    },
    {
        "commit_id": "b3e30e517011bb5228c3421a8f1d46a4a824417b",
        "commit_message": "Fix lint function and add pylint directive",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b3e30e517011bb5228c3421a8f1d46a4a824417b",
        "buggy_code": "def lint():",
        "fixed_code": "def lint(_=None):",
        "patch": "@@ -292,7 +292,7 @@ def is_nonfuzzer_python(path):\n   return os.path.splitext(path)[1] == '.py' and '/projects/' not in path\n \n \n-def lint():\n+def lint(_=None):\n   \"\"\"Run python's linter on infra. Return False if it fails linting.\"\"\"\n \n   command = ['python3', '-m', 'pylint', '-j', '0', 'infra']"
    },
    {
        "commit_id": "e01883df1ee350304f03671822b8db6320dfa51c",
        "commit_message": "[CIFuzz] Fix typo in disabled test (#4871)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e01883df1ee350304f03671822b8db6320dfa51c",
        "buggy_code": "test_repo_manager = repo_manager.clone_and_get_manager(",
        "fixed_code": "test_repo_manager = repo_manager.clone_repo_and_get_manager(",
        "patch": "@@ -50,7 +50,7 @@ def test_build_fuzzers_from_commit(self):\n       host_src_dir = build_specified_commit.copy_src_from_docker(\n           test_case.project_name, tmp_dir)\n \n-      test_repo_manager = repo_manager.clone_and_get_manager(\n+      test_repo_manager = repo_manager.clone_repo_and_get_manager(\n           test_case.git_url, host_src_dir, test_case.oss_repo_name)\n       build_data = build_specified_commit.BuildData(\n           sanitizer='address',"
    },
    {
        "commit_id": "e06d7f0412cfe0c8a15822a7346c413a595f2fd9",
        "commit_message": "Fix incorrect calculation with gcs path for backup corpus. (#4863)\n\nFixes https://github.com/google/oss-fuzz/issues/4857",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e06d7f0412cfe0c8a15822a7346c413a595f2fd9",
        "buggy_code": "if not fuzz_target.startswith(project_name):",
        "fixed_code": "if not fuzz_target.startswith(project_name + '_'):",
        "patch": "@@ -664,7 +664,7 @@ def _get_latest_corpus(project_name, fuzz_target, base_corpus_dir):\n   if not os.path.exists(corpus_dir):\n     os.makedirs(corpus_dir)\n \n-  if not fuzz_target.startswith(project_name):\n+  if not fuzz_target.startswith(project_name + '_'):\n     fuzz_target = '%s_%s' % (project_name, fuzz_target)\n \n   corpus_backup_url = CORPUS_BACKUP_URL_FORMAT.format(project_name=project_name,"
    },
    {
        "commit_id": "64b223a8e9962a7e12053802b67c2764eeb36cf2",
        "commit_message": "Fix pillow with new atheris changes. (#4826)\n\n* Fix pillow with new atheris changes.\r\n\r\n* Fix pillow in ubsan.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/64b223a8e9962a7e12053802b67c2764eeb36cf2",
        "buggy_code": "import atheris",
        "fixed_code": "import atheris_no_libfuzzer as atheris",
        "patch": "@@ -14,7 +14,7 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-import atheris\n+import atheris_no_libfuzzer as atheris\n import sys\n import os\n import io"
    },
    {
        "commit_id": "0dd7aaca327b68c0cb69fdc10092b6290ba797b6",
        "commit_message": "Fix atheris integration. (#4824)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0dd7aaca327b68c0cb69fdc10092b6290ba797b6",
        "buggy_code": "import atheris",
        "fixed_code": "import atheris_no_libfuzzer as atheris",
        "patch": "@@ -37,7 +37,7 @@\n misinterpreting them is not.\n \"\"\"\n \n-import atheris\n+import atheris_no_libfuzzer as atheris\n import json\n import ujson\n import sys"
    },
    {
        "commit_id": "0dd7aaca327b68c0cb69fdc10092b6290ba797b6",
        "commit_message": "Fix atheris integration. (#4824)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0dd7aaca327b68c0cb69fdc10092b6290ba797b6",
        "buggy_code": "import atheris",
        "fixed_code": "import atheris_no_libfuzzer as atheris",
        "patch": "@@ -29,7 +29,7 @@\n \"\"\"\n \n import sys\n-import atheris\n+import atheris_no_libfuzzer as atheris\n import ujson\n \n "
    },
    {
        "commit_id": "ed633664eca54774cadbee539a7e6336dd2d7aa0",
        "commit_message": "fix",
        "commit_url": "https://github.com/google/oss-fuzz/commit/ed633664eca54774cadbee539a7e6336dd2d7aa0",
        "buggy_code": "utils.binary_print(b'Fuzzer %s, detected error: %s.' %",
        "fixed_code": "utils.binary_print(b'Fuzzer %s, detected error: %s' %",
        "patch": "@@ -430,7 +430,7 @@ def run_fuzzers(  # pylint: disable=too-many-arguments,too-many-locals\n     if not testcase or not stacktrace:\n       logging.info('Fuzzer %s, finished running.', target.target_name)\n     else:\n-      utils.binary_print(b'Fuzzer %s, detected error: %s.' %\n+      utils.binary_print(b'Fuzzer %s, detected error: %s' %\n                          (target.target_name.encode(), stacktrace))\n       shutil.move(testcase, os.path.join(artifacts_dir, 'test_case'))\n       parse_fuzzer_output(stacktrace, artifacts_dir)"
    },
    {
        "commit_id": "8f4d1b237d55eeb6a098719f3602f89bd032b2b3",
        "commit_message": "Fix msan build breakage. (#4787)\n\nRegression from\r\nhttps://github.com/google/oss-fuzz/pull/4694",
        "commit_url": "https://github.com/google/oss-fuzz/commit/8f4d1b237d55eeb6a098719f3602f89bd032b2b3",
        "buggy_code": "wrapper_utils.InstallWrapper(",
        "fixed_code": "wrapper_utils.install_wrapper(",
        "patch": "@@ -35,6 +35,6 @@ def pre_build(self, _source_directory, _env, custom_bin_dir):  # pylint: disable\n                   '/usr/bin/nm \"$@\" | grep -E -v \"U (__msan|memset)\"\\n'\n                   'exit ${PIPESTATUS[0]}\\n')\n \n-    wrapper_utils.InstallWrapper(\n+    wrapper_utils.install_wrapper(\n         custom_bin_dir, 'nm', nm_wrapper,\n         [wrapper_utils.dpkg_host_architecture() + '-nm'])"
    },
    {
        "commit_id": "b1c77d1fa2f905a41a5062f98c874d030c4abdb1",
        "commit_message": "[test_all] Fix issue where CIFuzz may use an empty string for ALLOWED_BROKEN_TARGETS_PERCENTAGE (#4778)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b1c77d1fa2f905a41a5062f98c874d030c4abdb1",
        "buggy_code": "return int(os.getenv('ALLOWED_BROKEN_TARGETS_PERCENTAGE', '10'))",
        "fixed_code": "return int(os.getenv('ALLOWED_BROKEN_TARGETS_PERCENTAGE') or '10')",
        "patch": "@@ -187,7 +187,7 @@ def get_allowed_broken_targets_percentage():\n   \"\"\"Returns the value of the environment value\n   'ALLOWED_BROKEN_TARGETS_PERCENTAGE' as an int or returns a reasonable\n   default.\"\"\"\n-  return int(os.getenv('ALLOWED_BROKEN_TARGETS_PERCENTAGE', '10'))\n+  return int(os.getenv('ALLOWED_BROKEN_TARGETS_PERCENTAGE') or '10')\n \n \n def main():"
    },
    {
        "commit_id": "c8d2319aa8cb3ae8f3eaa6a7e6ddf95e364d5fe5",
        "commit_message": "[test_all] Rewrite in Python (#4769)\n\nRewrite test_all in python.\r\nBash is quite annoying to write and test.\r\nOne issue with bash is it is even worse than Python for parallelism (which may be causing #4707).\r\nRewrite test_all in python and optimize base-runner/Dockerfile for fast development.\r\nAlso, combine some docker layers.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c8d2319aa8cb3ae8f3eaa6a7e6ddf95e364d5fe5",
        "buggy_code": "command.extend(['-t', 'gcr.io/oss-fuzz-base/base-runner', 'test_all'])",
        "fixed_code": "command.extend(['-t', 'gcr.io/oss-fuzz-base/base-runner', 'test_all.py'])",
        "patch": "@@ -314,7 +314,7 @@ def check_fuzzer_build(out_dir, sanitizer='address'):\n     command += ['-e', 'OUT=' + out_dir, '--volumes-from', container]\n   else:\n     command += ['-v', '%s:/out' % out_dir]\n-  command.extend(['-t', 'gcr.io/oss-fuzz-base/base-runner', 'test_all'])\n+  command.extend(['-t', 'gcr.io/oss-fuzz-base/base-runner', 'test_all.py'])\n   exit_code = helper.docker_run(command)\n   if exit_code:\n     logging.error('Check fuzzer build failed.')"
    },
    {
        "commit_id": "e7921e7795327cf0b9a79c92b0ccd44547f1b168",
        "commit_message": "Python fuzzing fixes - disable leak checking, remove flags in atheris. (#4681)\n\n* Python fuzzing fixes - disable leak checking, remove flags in atheris.\r\n\r\n* Fix flags printing.\r\n\r\n* Dont export, use directly.\r\n\r\n* Try unset.\r\n\r\n* Unset flags when python was built.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e7921e7795327cf0b9a79c92b0ccd44547f1b168",
        "buggy_code": "./ujson_fuzzer.py -detect_leaks=0",
        "fixed_code": "./json_differential_fuzzer.py -detect_leaks=0",
        "patch": "@@ -21,7 +21,7 @@\n As an example:\n     LD_PRELOAD=\"/usr/lib/llvm-9/lib/clang/9.0.1/lib/linux/libclang_rt.asan-x86_64.so\n     $(python3 -c \"import atheris; print(atheris.path())\")\" python3\n-    ./ujson_fuzzer.py -detect_leaks=0\n+    ./json_differential_fuzzer.py -detect_leaks=0\n \n This fuzzer has found a bug with inconsistent handling of integers with\n too-high magnitude. uJSON sometimes refuses to process numbers that are too far"
    },
    {
        "commit_id": "ade417ba20fb52e1340a1ee06e7272fc664fbed8",
        "commit_message": "Fix typo in project_sync.py (#4296)\n\n* Fix typo in project_sync.py\r\n\r\n* line length\r\n\r\n* format",
        "commit_url": "https://github.com/google/oss-fuzz/commit/ade417ba20fb52e1340a1ee06e7272fc664fbed8",
        "buggy_code": "cloud_scheduler_client.update(job, update_mask)",
        "fixed_code": "cloud_scheduler_client.update_job(job, update_mask)",
        "patch": "@@ -88,7 +88,7 @@ def update_scheduler(cloud_scheduler_client, project, schedule):\n   }\n \n   update_mask = {'schedule': schedule}\n-  cloud_scheduler_client.update(job, update_mask)\n+  cloud_scheduler_client.update_job(job, update_mask)\n \n \n # pylint: disable=too-many-branches"
    },
    {
        "commit_id": "47b57ca1dd494addeedffa4d1152c7a76ab406b0",
        "commit_message": "Fix a typo from previous MSan function addition. (#4241)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/47b57ca1dd494addeedffa4d1152c7a76ab406b0",
        "buggy_code": "build_info = cloudbuild.projects().builds().create(project_id=BASE_PROJECT,",
        "fixed_code": "build_info = cloudbuild.projects().builds().create(projectId=BASE_PROJECT,",
        "patch": "@@ -42,7 +42,7 @@ def run_build(steps, images):\n                      'v1',\n                      credentials=credentials,\n                      cache_discovery=False)\n-  build_info = cloudbuild.projects().builds().create(project_id=BASE_PROJECT,\n+  build_info = cloudbuild.projects().builds().create(projectId=BASE_PROJECT,\n                                                      body=build_body).execute()\n   build_id = build_info['metadata']['build']['id']\n   logging.info('Build ID: %s', build_id)"
    },
    {
        "commit_id": "ccb5821f518467eafff813f1de25d1d17fc87b36",
        "commit_message": "Fix build status update. (#4224)\n\nCheck for valid statuses rather than only excluding the WORKING status.\r\nThere are other failure statuses that need to be accounted for (e.g.\r\nEXPIRED).",
        "commit_url": "https://github.com/google/oss-fuzz/commit/ccb5821f518467eafff813f1de25d1d17fc87b36",
        "buggy_code": "if project_build['status'] == 'WORKING':",
        "fixed_code": "if project_build['status'] not in ('SUCCESS', 'FAILURE', 'TIMEOUT'):",
        "patch": "@@ -46,7 +46,7 @@ def get_last_build(build_ids):\n   for build_id in reversed(build_ids):\n     project_build = cloudbuild.projects().builds().get(projectId=image_project,\n                                                        id=build_id).execute()\n-    if project_build['status'] == 'WORKING':\n+    if project_build['status'] not in ('SUCCESS', 'FAILURE', 'TIMEOUT'):\n       continue\n \n     if not builds_status.upload_log(build_id):"
    },
    {
        "commit_id": "7bb74407dc037fdc2cd373e29eff729c74ab784b",
        "commit_message": "Fix an Python 3 exception in build_project.py. (#4210)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/7bb74407dc037fdc2cd373e29eff729c74ab784b",
        "buggy_code": "for key in sanitizer.iterkeys():",
        "fixed_code": "for key in sanitizer.keys():",
        "patch": "@@ -98,7 +98,7 @@ def get_sanitizers(project_yaml):\n     if isinstance(sanitizer, six.string_types):\n       processed_sanitizers.append(sanitizer)\n     elif isinstance(sanitizer, dict):\n-      for key in sanitizer.iterkeys():\n+      for key in sanitizer.keys():\n         processed_sanitizers.append(key)\n \n   return processed_sanitizers"
    },
    {
        "commit_id": "4e2a7c07e578d7b68605b2b7e21707217cbe8ced",
        "commit_message": "Many build infra fixes. (#4209)\n\n- Remove base image project argument from deploy.sh. Deploy all\r\n  functions to the main oss-fuzz image.\r\n- Reduce max instances of functions to 1 to avoid rate limiting issues.\r\n- Fix missing ndb context initialization in request_build.py\r\n- Fix incorrect tags in BuildHistory entities. \"-\" was doubled.\r\n- Fix base build deployment with incorrect schedule variable.\r\n- Add scripts for requesting builds locally.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/4e2a7c07e578d7b68605b2b7e21707217cbe8ced",
        "buggy_code": "build_tag_suffix = ndb.StringProperty()",
        "fixed_code": "build_tag = ndb.StringProperty()",
        "patch": "@@ -36,6 +36,6 @@ class GithubCreds(ndb.Model):\n # pylint: disable=too-few-public-methods\n class BuildsHistory(ndb.Model):\n   \"\"\"Container for build history of projects.\"\"\"\n-  build_tag_suffix = ndb.StringProperty()\n+  build_tag = ndb.StringProperty()\n   project = ndb.StringProperty()\n   build_ids = ndb.StringProperty(repeated=True)"
    },
    {
        "commit_id": "6f02735d0cef2caab2eb61c559d0ec59022961c6",
        "commit_message": "[CIFuzz] Dynamic fuzzer scheduling (#3453)\n\nAllocates time for fuzzers based on amount of fuzzing time left. This is beneficial when a fuzzer fails early in its allotted time because of a reproducible OSS-Fuzz bug. It will then give the remaining portion of its allotted time to the following fuzzers.",
        "commit_url": "https://github.com/google/oss-fuzz/commit/6f02735d0cef2caab2eb61c559d0ec59022961c6",
        "buggy_code": "run_success, bug_found = cifuzz.run_fuzzers(100, 'not/a/valid/path',",
        "fixed_code": "run_success, bug_found = cifuzz.run_fuzzers(10, 'not/a/valid/path',",
        "patch": "@@ -197,7 +197,7 @@ def test_invalid_fuzz_seconds(self):\n \n   def test_invalid_out_dir(self):\n     \"\"\"Tests run_fuzzers with an invalid out directory.\"\"\"\n-    run_success, bug_found = cifuzz.run_fuzzers(100, 'not/a/valid/path',\n+    run_success, bug_found = cifuzz.run_fuzzers(10, 'not/a/valid/path',\n                                                 EXAMPLE_PROJECT)\n     self.assertFalse(run_success)\n     self.assertFalse(bug_found)"
    },
    {
        "commit_id": "e661c8c4a863c625ee96207144cc48ae8919650e",
        "commit_message": "[CIFuzz] log bug fix (#3407)\n\n* Fixing log bug\r\n\r\n* Fixing log bug",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e661c8c4a863c625ee96207144cc48ae8919650e",
        "buggy_code": "logging.error('No test case found in stack trace.', file=sys.stderr)",
        "fixed_code": "logging.error('No test case found in stack trace. %s.', sys.stderr)",
        "patch": "@@ -93,7 +93,7 @@ def fuzz(self):\n     err_str = err.decode('ascii')\n     test_case = self.get_test_case(err_str)\n     if not test_case:\n-      logging.error('No test case found in stack trace.', file=sys.stderr)\n+      logging.error('No test case found in stack trace. %s.', sys.stderr)\n       return None, None\n     if self.is_reproducible(test_case):\n       return test_case, err_str"
    },
    {
        "commit_id": "52e640af345a6484c37091cbadc6f1aff677d423",
        "commit_message": "[CIFuzz] Fix .strip bug.  (#3349)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/52e640af345a6484c37091cbadc6f1aff677d423",
        "buggy_code": "self.repo_name = os.path.basename(self.repo_url).strip('.git')",
        "fixed_code": "self.repo_name = os.path.basename(self.repo_url).replace('.git', '')",
        "patch": "@@ -50,7 +50,7 @@ def __init__(self, repo_url, base_dir, repo_name=None):\n     if repo_name:\n       self.repo_name = repo_name\n     else:\n-      self.repo_name = os.path.basename(self.repo_url).strip('.git')\n+      self.repo_name = os.path.basename(self.repo_url).replace('.git', '')\n     self.repo_dir = os.path.join(self.base_dir, self.repo_name)\n     self._clone()\n "
    },
    {
        "commit_id": "83d951bd1d3e08bb4920bc581682e04109bc57d4",
        "commit_message": "[CIFuzz] Prevent action from failing option  (#3315)\n\n* Adding opt to workflow to prevent failures\r\n\r\n* fclose bug\r\n\r\n* Undoing double negitive\r\n\r\n* Undoing double negitive\r\n\r\n* Undoing double negitive\r\n\r\n* Syntax and formatting\r\n\r\n* Olivers comments\r\n\r\n* Presubmit fix\r\n\r\n* Trying boolean argument\r\n\r\n* cleaning\r\n\r\n* cleaning fuzz disassembles\r\n\r\n* Maxs comments pt.2\r\n\r\n* Updating dry_run parse\r\n\r\n* Comments added\r\n\r\n* Formatting\r\n\r\n* Olivers comments",
        "commit_url": "https://github.com/google/oss-fuzz/commit/83d951bd1d3e08bb4920bc581682e04109bc57d4",
        "buggy_code": "pr_ref='refs/pull/3310/merge'))",
        "fixed_code": "pr_ref='refs/pull/1757/merge'))",
        "patch": "@@ -55,7 +55,7 @@ def test_valid_pull_request(self):\n           cifuzz.build_fuzzers(EXAMPLE_PROJECT,\n                                'oss-fuzz',\n                                tmp_dir,\n-                               pr_ref='refs/pull/3310/merge'))\n+                               pr_ref='refs/pull/1757/merge'))\n       self.assertTrue(os.path.exists(os.path.join(out_path, 'do_stuff_fuzzer')))\n \n   def test_invalid_pull_request(self):"
    },
    {
        "commit_id": "db6b6e7fd224eb70083f89692d6fad170733bee3",
        "commit_message": "[infra] helper: fix regression introducing attribute error when reproducing crashes (#3246)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/db6b6e7fd224eb70083f89692d6fad170733bee3",
        "buggy_code": "args.env_to_add, args.fuzzer_args, args.testcase_path)",
        "fixed_code": "args.e, args.fuzzer_args, args.testcase_path)",
        "patch": "@@ -762,7 +762,7 @@ def run_fuzzer(args):\n def reproduce(args):\n   \"\"\"Reproduce a specific test case from a specific project.\"\"\"\n   return reproduce_impl(args.project_name, args.fuzzer_name, args.valgrind,\n-                        args.env_to_add, args.fuzzer_args, args.testcase_path)\n+                        args.e, args.fuzzer_args, args.testcase_path)\n \n \n def reproduce_impl(  # pylint: disable=too-many-arguments"
    },
    {
        "commit_id": "cca04a14f4030bd0c8bbc47973c5d8ab63f42259",
        "commit_message": "[infra] Fix env variable in the helper.py repoduce command (#3230)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/cca04a14f4030bd0c8bbc47973c5d8ab63f42259",
        "buggy_code": "return reproduce_impl(args.project_name, args.fuzzer_name, args.valgrind, args.env_to_add,",
        "fixed_code": "return reproduce_impl(args.project_name, args.fuzzer_name, args.valgrind, args.e,",
        "patch": "@@ -744,7 +744,7 @@ def run_fuzzer(args):\n \n def reproduce(args):\n   \"\"\"Reproduce a specific test case from a specific project.\"\"\"\n-  return reproduce_impl(args.project_name, args.fuzzer_name, args.valgrind, args.env_to_add,\n+  return reproduce_impl(args.project_name, args.fuzzer_name, args.valgrind, args.e,\n                         args.fuzzer_args, args.testcase_path)\n \n "
    },
    {
        "commit_id": "e4a484aabe8ca9f3b654612edfdd6114e7235692",
        "commit_message": "coverage: docs and infra/helper.py fix. (#1126)\n\nWhile trying to get a coverage report for a new project (Envoy),\r\nbuilding with the coverage sanitizer seemed necessary to get the\r\ncoverage files dumped.\r\n\r\nSigned-off-by: Harvey Tuch <htuch@google.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/e4a484aabe8ca9f3b654612edfdd6114e7235692",
        "buggy_code": "choices=['address', 'memory', 'undefined'])",
        "fixed_code": "choices=['address', 'memory', 'undefined', 'coverage'])",
        "patch": "@@ -183,7 +183,7 @@ def _add_engine_args(parser):\n def _add_sanitizer_args(parser):\n   \"\"\"Add common sanitizer args.\"\"\"\n   parser.add_argument('--sanitizer', default='address',\n-                      choices=['address', 'memory', 'undefined'])\n+                      choices=['address', 'memory', 'undefined', 'coverage'])\n \n \n def _add_environment_args(parser):"
    },
    {
        "commit_id": "64e1595666f1792fd11b4df0d931e746474aaf9e",
        "commit_message": "msan_builder: fix typo",
        "commit_url": "https://github.com/google/oss-fuzz/commit/64e1595666f1792fd11b4df0d931e746474aaf9e",
        "buggy_code": "def AddNoAsmArg(origconfig_path):",
        "fixed_code": "def AddNoAsmArg(config_path):",
        "patch": "@@ -21,7 +21,7 @@\n import package\n \n \n-def AddNoAsmArg(origconfig_path):\n+def AddNoAsmArg(config_path):\n   \"\"\"Add --no-asm to config scripts.\"\"\"\n   shutil.move(config_path, config_path + '.real')\n   with open(config_path, 'w') as f:"
    },
    {
        "commit_id": "a99a336eccc63095de6b3d3f4a168b1d8c9c520c",
        "commit_message": "[infra] fix typo",
        "commit_url": "https://github.com/google/oss-fuzz/commit/a99a336eccc63095de6b3d3f4a168b1d8c9c520c",
        "buggy_code": "for base_image in BASE_IMAGES:",
        "fixed_code": "for base_image in images:",
        "patch": "@@ -31,7 +31,7 @@ def get_steps(images):\n       'name': 'gcr.io/cloud-builders/git',\n   }]\n \n-  for base_image in BASE_IMAGES:\n+  for base_image in images:\n     steps.append({\n         'args': [\n             'build',"
    },
    {
        "commit_id": "3798742fa7ac275c5687122da245793c4765cccb",
        "commit_message": "[infra] Fix builds query",
        "commit_url": "https://github.com/google/oss-fuzz/commit/3798742fa7ac275c5687122da245793c4765cccb",
        "buggy_code": "'results.images.name=\"gcr.io/oss-fuzz/{0}\"'.format(project))",
        "fixed_code": "'images=\"gcr.io/oss-fuzz/{0}\"'.format(project))",
        "patch": "@@ -119,7 +119,7 @@ def main():\n   for project in scan_project_names(projects_dir):\n     print project\n     query_filter = ('(status=\"SUCCESS\" OR status=\"FAILURE\") AND ' +\n-                    'results.images.name=\"gcr.io/oss-fuzz/{0}\"'.format(project))\n+                    'images=\"gcr.io/oss-fuzz/{0}\"'.format(project))\n     try:\n       response = cloudbuild.projects().builds().list(\n           projectId='oss-fuzz',"
    },
    {
        "commit_id": "0f66138ef41a14f60aed5655a808d7c66084a6c4",
        "commit_message": "fix param name (#516)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0f66138ef41a14f60aed5655a808d7c66084a6c4",
        "buggy_code": "def reproduce(run_args):",
        "fixed_code": "def reproduce(args):",
        "patch": "@@ -334,7 +334,7 @@ def coverage(args):\n   docker_run(run_args)\n \n \n-def reproduce(run_args):\n+def reproduce(args):\n   \"\"\"Reproduces a testcase in the container.\"\"\"\n   if not _check_project_exists(args.project_name):\n     return 1"
    },
    {
        "commit_id": "435e03555d99cea597ae510c3bbca29d6265f27b",
        "commit_message": "[infra] helper: Actually fix base image name",
        "commit_url": "https://github.com/google/oss-fuzz/commit/435e03555d99cea597ae510c3bbca29d6265f27b",
        "buggy_code": "build_args += ['-t', 'gcr.io/%s/%s' % (image_name, image_project), dockerfile_dir ]",
        "fixed_code": "build_args += ['-t', 'gcr.io/%s/%s' % (image_project, image_name), dockerfile_dir ]",
        "patch": "@@ -147,7 +147,7 @@ def _build_image(image_name):\n   build_args = []\n   if not GLOBAL_ARGS.nopull:\n       build_args += ['--pull']\n-  build_args += ['-t', 'gcr.io/%s/%s' % (image_name, image_project), dockerfile_dir ]\n+  build_args += ['-t', 'gcr.io/%s/%s' % (image_project, image_name), dockerfile_dir ]\n \n   command = [ 'docker', 'build' ] + build_args\n   print('Running:', _get_command_string(command))"
    },
    {
        "commit_id": "0b75ba81bdfea0c8e5d56213b05b4c453148eea9",
        "commit_message": "Fix Dockerfile template (fixes #476)",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0b75ba81bdfea0c8e5d56213b05b4c453148eea9",
        "buggy_code": "COPY build.sh $src/",
        "fixed_code": "COPY build.sh $SRC/",
        "patch": "@@ -41,7 +41,7 @@\n RUN apt-get install -y make autoconf automake libtool\n RUN git clone --depth 1 <git_url> %(project_name)s     # or use other version control\n WORKDIR %(project_name)s\n-COPY build.sh $src/\n+COPY build.sh $SRC/\n \"\"\"\n \n BUILD_TEMPLATE = \"\"\"\\"
    },
    {
        "commit_id": "0976833b18d8a86897a6ec41573d01b98ae07c9a",
        "commit_message": "",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0976833b18d8a86897a6ec41573d01b98ae07c9a",
        "buggy_code": "'images=\"gcr.io/clusterfuzz-external/oss-fuzz/{0}\"'.format(project))",
        "fixed_code": "'images=\"gcr.io/oss-fuzz/{0}\"'.format(project))",
        "patch": "@@ -92,7 +92,7 @@ def main():\n   for project in scan_project_na[infra] Fix builds status to filter on correct image tag.mes(projects_dir):\n     print project\n     query_filter = ('(status=\"SUCCESS\" OR status=\"FAILURE\") AND ' +\n-        'images=\"gcr.io/clusterfuzz-external/oss-fuzz/{0}\"'.format(project))\n+        'images=\"gcr.io/oss-fuzz/{0}\"'.format(project))\n     response = cloudbuild.projects().builds().list(\n         projectId='clusterfuzz-external',\n         filter=query_filter).execute()"
    },
    {
        "commit_id": "3d220f2588c2141d860df1128cea7bd41f7a4530",
        "commit_message": "[infra] renaming images: base->base-image, base-libfuzzer->base-builder\n\nContinue publishing base-libfuzzer until images a built and\nderived images migrated.\n\nIssue #142",
        "commit_url": "https://github.com/google/oss-fuzz/commit/3d220f2588c2141d860df1128cea7bd41f7a4530",
        "buggy_code": "FROM ossfuzz/base-libfuzzer",
        "fixed_code": "FROM ossfuzz/base-builder",
        "patch": "@@ -36,7 +36,7 @@\n #\n ################################################################################\n \n-FROM ossfuzz/base-libfuzzer\n+FROM ossfuzz/base-builder\n MAINTAINER your@email.com\n RUN apt-get install -y make autoconf automake libtool\n RUN git clone --depth 1 <git_url> %(project_name)s     # or use other version control"
    }
]