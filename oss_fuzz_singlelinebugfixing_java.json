[
    {
        "commit_id": "619fb24fa0777acad2e63344f883a3ea40392790",
        "commit_message": "unirest-java: Fix build (#13035)\n\nThis PR fixes the build and fuzzer for unirest-java following the update\nin the upstream project.\n\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/619fb24fa0777acad2e63344f883a3ea40392790",
        "buggy_code": "import kong.unirest.jackson.JacksonEngine;",
        "fixed_code": "import kong.unirest.modules.jackson.JacksonEngine;",
        "patch": "@@ -16,7 +16,7 @@\n import com.code_intelligence.jazzer.api.FuzzedDataProvider;\n import kong.unirest.core.json.JsonEngine;\n import kong.unirest.core.json.JSONException;\n-import kong.unirest.jackson.JacksonEngine;\n+import kong.unirest.modules.jackson.JacksonEngine;\n \n // Generated with https://github.com/ossf/fuzz-introspector/tree/main/tools/auto-fuzz\n // Minor modifications to beautify code and ensure exception is caught."
    },
    {
        "commit_id": "c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "commit_message": "jackson-dataformats-binary: Fix looping condition (#11376)\n\nIn Java, modulo operations are done with absolute value first, then the\r\nnegative sign will be added to the modulo result if either of the left\r\nor right operands is negative. Thus if the choice is negative, the\r\nmodulo result will always be negative and it automatically goes to the\r\ndefault branch for all the fuzzers. This makes the choice very unbalance\r\nand there are less than half chances to execute the other 18 branches.\r\nThis PR fixes the bias problem by taking the absolute value of the\r\ninteger choice before the modulo operation to ensure the result must be\r\n0~18 inclusively.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "buggy_code": "switch (choice % 19) {",
        "fixed_code": "switch (Math.abs(choice) % 19) {",
        "patch": "@@ -55,7 +55,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n \n       // Fuzz methods of AvroParser\n       for (Integer choice : choices) {\n-        switch (choice % 19) {\n+        switch (Math.abs(choice) % 19) {\n           case 1:\n             parser.currentName();\n             break;"
    },
    {
        "commit_id": "c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "commit_message": "jackson-dataformats-binary: Fix looping condition (#11376)\n\nIn Java, modulo operations are done with absolute value first, then the\r\nnegative sign will be added to the modulo result if either of the left\r\nor right operands is negative. Thus if the choice is negative, the\r\nmodulo result will always be negative and it automatically goes to the\r\ndefault branch for all the fuzzers. This makes the choice very unbalance\r\nand there are less than half chances to execute the other 18 branches.\r\nThis PR fixes the bias problem by taking the absolute value of the\r\ninteger choice before the modulo operation to ensure the result must be\r\n0~18 inclusively.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "buggy_code": "switch (choice % 19) {",
        "fixed_code": "switch (Math.abs(choice) % 19) {",
        "patch": "@@ -48,7 +48,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n \n       // Fuzz methods of CBORParser\n       for (Integer choice : choices) {\n-        switch (choice % 19) {\n+        switch (Math.abs(choice) % 19) {\n           case 1:\n             parser.currentName();\n             break;"
    },
    {
        "commit_id": "c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "commit_message": "jackson-dataformats-binary: Fix looping condition (#11376)\n\nIn Java, modulo operations are done with absolute value first, then the\r\nnegative sign will be added to the modulo result if either of the left\r\nor right operands is negative. Thus if the choice is negative, the\r\nmodulo result will always be negative and it automatically goes to the\r\ndefault branch for all the fuzzers. This makes the choice very unbalance\r\nand there are less than half chances to execute the other 18 branches.\r\nThis PR fixes the bias problem by taking the absolute value of the\r\ninteger choice before the modulo operation to ensure the result must be\r\n0~18 inclusively.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "buggy_code": "switch (choice % 19) {",
        "fixed_code": "switch (Math.abs(choice) % 19) {",
        "patch": "@@ -59,7 +59,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n \n       // Fuzz methods of IonParser\n       for (Integer choice : choices) {\n-        switch (choice % 19) {\n+        switch (Math.abs(choice) % 19) {\n           case 1:\n             parser.currentName();\n             break;"
    },
    {
        "commit_id": "c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "commit_message": "jackson-dataformats-binary: Fix looping condition (#11376)\n\nIn Java, modulo operations are done with absolute value first, then the\r\nnegative sign will be added to the modulo result if either of the left\r\nor right operands is negative. Thus if the choice is negative, the\r\nmodulo result will always be negative and it automatically goes to the\r\ndefault branch for all the fuzzers. This makes the choice very unbalance\r\nand there are less than half chances to execute the other 18 branches.\r\nThis PR fixes the bias problem by taking the absolute value of the\r\ninteger choice before the modulo operation to ensure the result must be\r\n0~18 inclusively.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "buggy_code": "switch (choice % 19) {",
        "fixed_code": "switch (Math.abs(choice) % 19) {",
        "patch": "@@ -38,7 +38,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n \n       // Fuzz methods of ProtobufParser\n       for (Integer choice : choices) {\n-        switch (choice % 19) {\n+        switch (Math.abs(choice) % 19) {\n           case 1:\n             parser.currentName();\n             break;"
    },
    {
        "commit_id": "c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "commit_message": "jackson-dataformats-binary: Fix looping condition (#11376)\n\nIn Java, modulo operations are done with absolute value first, then the\r\nnegative sign will be added to the modulo result if either of the left\r\nor right operands is negative. Thus if the choice is negative, the\r\nmodulo result will always be negative and it automatically goes to the\r\ndefault branch for all the fuzzers. This makes the choice very unbalance\r\nand there are less than half chances to execute the other 18 branches.\r\nThis PR fixes the bias problem by taking the absolute value of the\r\ninteger choice before the modulo operation to ensure the result must be\r\n0~18 inclusively.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c5acc02f0595fe6da9b77fcb93509522f39d8aaf",
        "buggy_code": "switch (choice % 19) {",
        "fixed_code": "switch (Math.abs(choice) % 19) {",
        "patch": "@@ -48,7 +48,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n \n       // Fuzz methods of SmileParser\n       for (Integer choice : choices) {\n-        switch (choice % 19) {\n+        switch (Math.abs(choice) % 19) {\n           case 1:\n             parser.currentName();\n             break;"
    },
    {
        "commit_id": "b7c6f9aa3f10170c349372ca7158c3aac9dad783",
        "commit_message": "apache-commons-codec: Catch new IllegalArgumentException (#11360)\n\nIn https://issues.apache.org/jira/browse/CODEC-314, we push a fix\r\nupstream to capture an unexpected IndexOutOfBoundException. The new\r\nlogic will wrap the unexpected IndexOutOfBoundException and throw an\r\nIllegalArgumentException instead. This PR fixes the original fuzzer to\r\ncapture the new IllegalArgumentException to meet the new logic. This PR\r\nshould close\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64362.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/b7c6f9aa3f10170c349372ca7158c3aac9dad783",
        "buggy_code": "} catch (EncoderException | DecoderException e) {",
        "fixed_code": "} catch (EncoderException | DecoderException | IllegalArgumentException e) {",
        "patch": "@@ -86,7 +86,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       if (strDecoder != null) {\n         strDecoder.decode(data.consumeRemainingAsString());\n       }\n-    } catch (EncoderException | DecoderException e) {\n+    } catch (EncoderException | DecoderException | IllegalArgumentException e) {\n       // Known exception\n     }\n   }"
    },
    {
        "commit_id": "c4da194e68075479d1919bd1940d368657e07c2b",
        "commit_message": "apache-commons-lang: fix fuzzers (#11272)\n\nThe methods in Conversion class have mentioned that NullPointerException\r\nand IndexOutOfBoundsException will be thrown in some\r\n[cases](https://github.com/arthurscchan/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/Conversion.java#L965-L979)\r\nand it is not handled by the fuzzer. This PR fixes that by capturing\r\nknown NullPointerException and IndexOutOfBoundsException which is well\r\ndocumented. This solve\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64484 and\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64485.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/c4da194e68075479d1919bd1940d368657e07c2b",
        "buggy_code": "} catch (IllegalArgumentException e) {",
        "fixed_code": "} catch (IllegalArgumentException | NullPointerException | IndexOutOfBoundsException e) {",
        "patch": "@@ -72,7 +72,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n           Conversion.hexToShort(data.consumeRemainingAsString(), 0, (short) 0, 0, remaining);\n           break;\n       }\n-    } catch (IllegalArgumentException e) {\n+    } catch (IllegalArgumentException | NullPointerException | IndexOutOfBoundsException e) {\n       // Known exception\n     }\n   }"
    },
    {
        "commit_id": "6d0ce88fbaf18a31b150bca6104349ba4ec75f98",
        "commit_message": "apache-commons-codec: Catch expected IllegalArgumentException (#11271)\n\nThis PR adds an additional catch for an expected\r\nIllegalArgumentException thrown from the\r\n[Soundex](https://github.com/apache/commons-codec/blob/5bbb66994f8e6d04509cbd297c6bf5dc77d328bb/src/main/java/org/apache/commons/codec/language/Soundex.java#L287)\r\nclass. This fixes a false positive issue reported in\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64513.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/6d0ce88fbaf18a31b150bca6104349ba4ec75f98",
        "buggy_code": "} catch (EncoderException e) {",
        "fixed_code": "} catch (EncoderException | IllegalArgumentException e) {",
        "patch": "@@ -79,7 +79,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       if (strEncoder != null) {\n         strEncoder.encode(data.consumeRemainingAsString());\n       }\n-    } catch (EncoderException e) {\n+    } catch (EncoderException | IllegalArgumentException e) {\n       // Known exception\n     }\n   }"
    },
    {
        "commit_id": "05c5736806fde90cbeb48681c3a2412933e9bdf9",
        "commit_message": "Fix issues for multiple projects (#10971)\n\nPrevious Jazzer version only instrument code under the same package as\r\nthe fuzz test, this PR adds `--instrumentation_includes` to several\r\nprojects.\r\n\r\nAlso fix build failures in jdom and jsqlparser, fix fuzzing blocker in\r\nqdox and avro, delete not needed file in apache-cxf",
        "commit_url": "https://github.com/google/oss-fuzz/commit/05c5736806fde90cbeb48681c3a2412933e9bdf9",
        "buggy_code": "} catch (AvroRuntimeException | UnsupportedOperationException | ClassCastException | IllegalArgumentException e) {",
        "fixed_code": "} catch (AvroRuntimeException | UnsupportedOperationException | ClassCastException | IllegalArgumentException | NullPointerException e) {",
        "patch": "@@ -105,7 +105,7 @@ void myFuzzTest(FuzzedDataProvider data) {\n             deserializer.deserialize(result);\n             deserializer.close();\n         } catch (IOException e) {\n-        } catch (AvroRuntimeException | UnsupportedOperationException | ClassCastException | IllegalArgumentException e) {\n+        } catch (AvroRuntimeException | UnsupportedOperationException | ClassCastException | IllegalArgumentException | NullPointerException e) {\n             // Need to catch to find more interesting findings.\n         }\n     }"
    },
    {
        "commit_id": "05c5736806fde90cbeb48681c3a2412933e9bdf9",
        "commit_message": "Fix issues for multiple projects (#10971)\n\nPrevious Jazzer version only instrument code under the same package as\r\nthe fuzz test, this PR adds `--instrumentation_includes` to several\r\nprojects.\r\n\r\nAlso fix build failures in jdom and jsqlparser, fix fuzzing blocker in\r\nqdox and avro, delete not needed file in apache-cxf",
        "commit_url": "https://github.com/google/oss-fuzz/commit/05c5736806fde90cbeb48681c3a2412933e9bdf9",
        "buggy_code": "} catch (ParseException | ArrayIndexOutOfBoundsException | NullPointerException | EmptyStackException e) {",
        "fixed_code": "} catch (ParseException | ArrayIndexOutOfBoundsException | NullPointerException | EmptyStackException | Error e) {",
        "patch": "@@ -36,7 +36,7 @@ void myFuzzTest(FuzzedDataProvider data) {\n             src.getPackage();\n             src.getImports();\n             src.getClasses();\n-        } catch (ParseException | ArrayIndexOutOfBoundsException | NullPointerException | EmptyStackException e) {\n+        } catch (ParseException | ArrayIndexOutOfBoundsException | NullPointerException | EmptyStackException | Error e) {\n             // Need to catch in order to find more interesting bugs.\n         }\n     }"
    },
    {
        "commit_id": "757194b6bc82a08dab81cc61d9335c9ee39e1a67",
        "commit_message": "apache-poi: Add some more expected exceptions (#10825)\n\nAnother round of oss-fuzz runs showed two more Exceptions which are\r\nexpected with some input.\r\n\r\nThis should fix\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=61293 and\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=61302",
        "commit_url": "https://github.com/google/oss-fuzz/commit/757194b6bc82a08dab81cc61d9335c9ee39e1a67",
        "buggy_code": "ArrayIndexOutOfBoundsException e) {",
        "fixed_code": "IndexOutOfBoundsException e) {",
        "patch": "@@ -37,7 +37,7 @@ public static void fuzzerTestOneInput(byte[] input) {\n \t\t} catch (IOException | OpenXML4JException | SAXException |\n \t\t\t\t POIXMLException | RecordFormatException |\n \t\t\t\tIllegalStateException | IllegalArgumentException |\n-\t\t\t\tArrayIndexOutOfBoundsException e) {\n+\t\t\t\tIndexOutOfBoundsException e) {\n \t\t\t// expected here\n \t\t}\n \t}"
    },
    {
        "commit_id": "27a40582e3d0177c8849754dbe331754caeb7d59",
        "commit_message": "Fix coverage build failure for multiple Java projects (#10766)\n\nFix coverage build failure for:\r\n\r\njava-jwt\r\nion-java\r\ng-http-java-client\r\njose4j\r\napache-commons-text\r\njsqlparser\r\ntablesaw\r\nzt-zip\r\njson-flattener\r\nopencsv\r\ncalcite\r\nmvel\r\nspring-amqp\r\nunivocity-parsers\r\nasync-http-client\r\npdfbox\r\nitext7\r\npresto",
        "commit_url": "https://github.com/google/oss-fuzz/commit/27a40582e3d0177c8849754dbe331754caeb7d59",
        "buggy_code": "} catch (SQLException e) {",
        "fixed_code": "} catch (Exception e) {",
        "patch": "@@ -71,7 +71,7 @@ static void cleanUp() {\n         try {\n             connection.close();\n             calciteConnection.close();\n-        } catch (SQLException e) {\n+        } catch (Exception e) {\n         }\n     }\n "
    },
    {
        "commit_id": "27a40582e3d0177c8849754dbe331754caeb7d59",
        "commit_message": "Fix coverage build failure for multiple Java projects (#10766)\n\nFix coverage build failure for:\r\n\r\njava-jwt\r\nion-java\r\ng-http-java-client\r\njose4j\r\napache-commons-text\r\njsqlparser\r\ntablesaw\r\nzt-zip\r\njson-flattener\r\nopencsv\r\ncalcite\r\nmvel\r\nspring-amqp\r\nunivocity-parsers\r\nasync-http-client\r\npdfbox\r\nitext7\r\npresto",
        "commit_url": "https://github.com/google/oss-fuzz/commit/27a40582e3d0177c8849754dbe331754caeb7d59",
        "buggy_code": "} catch (IOException | NullPointerException | IllegalStateException | IllegalArgumentException | IonException | AssertionError e) {",
        "fixed_code": "} catch (IOException | NullPointerException | IllegalStateException | IllegalArgumentException | ArrayIndexOutOfBoundsException | IonException | AssertionError e) {",
        "patch": "@@ -36,7 +36,7 @@ void myFuzzTest(FuzzedDataProvider data) {\n                                 .build(data.consumeRemainingAsString());\n             read(reader);\n             reader.close();\n-        } catch (IOException | NullPointerException | IllegalStateException | IllegalArgumentException | IonException | AssertionError e) {\n+        } catch (IOException | NullPointerException | IllegalStateException | IllegalArgumentException | ArrayIndexOutOfBoundsException | IonException | AssertionError e) {\n             // Need to be caught to get more interesting findings.\n         }\n     }"
    },
    {
        "commit_id": "27a40582e3d0177c8849754dbe331754caeb7d59",
        "commit_message": "Fix coverage build failure for multiple Java projects (#10766)\n\nFix coverage build failure for:\r\n\r\njava-jwt\r\nion-java\r\ng-http-java-client\r\njose4j\r\napache-commons-text\r\njsqlparser\r\ntablesaw\r\nzt-zip\r\njson-flattener\r\nopencsv\r\ncalcite\r\nmvel\r\nspring-amqp\r\nunivocity-parsers\r\nasync-http-client\r\npdfbox\r\nitext7\r\npresto",
        "commit_url": "https://github.com/google/oss-fuzz/commit/27a40582e3d0177c8849754dbe331754caeb7d59",
        "buggy_code": "} catch (JWTDecodeException | AlgorithmMismatchException e) {",
        "fixed_code": "} catch (JWTDecodeException | AlgorithmMismatchException | NullPointerException e) {",
        "patch": "@@ -37,7 +37,7 @@ void myFuzzTest(FuzzedDataProvider data) {\n             DecodedJWT jwt = JWT.require(data.pickValue(algorithms))\n                     .build()\n                     .verify(decodedJWT);\n-        } catch (JWTDecodeException | AlgorithmMismatchException e) {\n+        } catch (JWTDecodeException | AlgorithmMismatchException | NullPointerException e) {\n         }\n     }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "081abd306e67395a02390e5dc16dafb2a62a0a20",
        "commit_message": "rdf4j: Fix exception handling for ParserFuzzer (#10796)\n\nIn\r\nhttps://github.com/eclipse/rdf4j/blob/main/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/BaseDeclProcessor.java#L73,\r\nthe method throws an IllegalArgumentException when the input does not\r\nfulfil some of the conditions which could happen when we fuzz the\r\nproject. This PR fixes the fuzzer by capturing the exception.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/081abd306e67395a02390e5dc16dafb2a62a0a20",
        "buggy_code": "} catch (MalformedQueryException e1) {",
        "fixed_code": "} catch (MalformedQueryException | IllegalArgumentException e1) {",
        "patch": "@@ -28,7 +28,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       SPARQLParser obj = new SPARQLParser();\n       obj.parseQuery(\n           data.consumeString(data.remainingBytes() / 2), data.consumeRemainingAsString());\n-    } catch (MalformedQueryException e1) {\n+    } catch (MalformedQueryException | IllegalArgumentException e1) {\n     }\n   }\n }"
    },
    {
        "commit_id": "cce8e5a5f06f0c8157cfcb39b233dd1c80d396a7",
        "commit_message": "joni: Fix exception handling for fuzzer (#10788)\n\nFix exception handling for RegexMatcherFuzzer and AddrListFixFuzzer.\r\n\r\n---------\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/cce8e5a5f06f0c8157cfcb39b233dd1c80d396a7",
        "buggy_code": "} catch (SyntaxException | InternalException e) {",
        "fixed_code": "} catch (SyntaxException | InternalException | IllegalArgumentException e) {",
        "patch": "@@ -32,7 +32,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       Integer int2 = data.consumeInt();\n       Regex obj = new Regex(data.consumeString(data.remainingBytes() / 2));\n       obj.matcher(data.consumeRemainingAsBytes(), int1, int2);\n-    } catch (SyntaxException | InternalException e) {\n+    } catch (SyntaxException | InternalException | IllegalArgumentException e) {\n     }\n   }\n }"
    },
    {
        "commit_id": "6e9dea35ae13a64f44b9cfe028ae5e4febd49cbf",
        "commit_message": "graphql-java: Fix exception handling for fuzzer (#10782)\n\nFix exception handling for GraphqlFuzzer.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/6e9dea35ae13a64f44b9cfe028ae5e4febd49cbf",
        "buggy_code": "} catch (GraphQLException e) {",
        "fixed_code": "} catch (GraphQLException | ClassCastException e) {",
        "patch": "@@ -40,7 +40,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       }\n \n       GraphQL.newGraphQL(graphQLSchema).build().execute(data.consumeRemainingAsString());\n-    } catch (GraphQLException e) {\n+    } catch (GraphQLException | ClassCastException e) {\n       // Known exception\n     }\n   }"
    },
    {
        "commit_id": "5400dc181361661dc1657d73161a62d0ee5e2486",
        "commit_message": "ohc: Fix ohc fuzzer (#10781)\n\nFix exception handling of ohc fuzzer.\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "commit_url": "https://github.com/google/oss-fuzz/commit/5400dc181361661dc1657d73161a62d0ee5e2486",
        "buggy_code": "| InterruptedException | ExecutionException e) {",
        "fixed_code": "| InterruptedException | ExecutionException | IllegalStateException e) {",
        "patch": "@@ -108,7 +108,7 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       wbc.close();\n       ohCache.close();\n     } catch (IllegalArgumentException | UnsupportedOperationException | IOException\n-        | InterruptedException | ExecutionException e) {\n+        | InterruptedException | ExecutionException | IllegalStateException e) {\n       // Known exception\n     }\n   }"
    },
    {
        "commit_id": "0c9df2ec8b18174ae48c1d6e3eb88deba6f1de81",
        "commit_message": "gson: catch highest level exceptions (#6792)\n\n* gson: catch highest level exception\r\n\r\nThis should fix\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40795\r\n\r\nSigned-off-by: David Korczynski <david@adalogics.com>\r\n\r\n* gson: catch all exceptions. This should fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40787",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0c9df2ec8b18174ae48c1d6e3eb88deba6f1de81",
        "buggy_code": "} catch (JsonSyntaxException expected) { }",
        "fixed_code": "} catch (JsonParseException expected) { }",
        "patch": "@@ -22,6 +22,6 @@ public class FuzzParse {\n   public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n     try {\n       JsonParser.parseString(data.consumeRemainingAsString());\n-    } catch (JsonSyntaxException expected) { }\n+    } catch (JsonParseException expected) { }\n   }\n }"
    },
    {
        "commit_id": "0c9df2ec8b18174ae48c1d6e3eb88deba6f1de81",
        "commit_message": "gson: catch highest level exceptions (#6792)\n\n* gson: catch highest level exception\r\n\r\nThis should fix\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40795\r\n\r\nSigned-off-by: David Korczynski <david@adalogics.com>\r\n\r\n* gson: catch all exceptions. This should fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40787",
        "commit_url": "https://github.com/google/oss-fuzz/commit/0c9df2ec8b18174ae48c1d6e3eb88deba6f1de81",
        "buggy_code": "} catch (JsonSyntaxException | IOException expected) { }",
        "fixed_code": "} catch (JsonSyntaxException | IllegalStateException | NumberFormatException | IOException expected) { }",
        "patch": "@@ -30,6 +30,6 @@ public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n       while (reader.peek() != JsonToken.END_DOCUMENT) {\n         adapter.read(reader);\n       }\n-    } catch (JsonSyntaxException | IOException expected) { }\n+    } catch (JsonSyntaxException | IllegalStateException | NumberFormatException | IOException expected) { }\n   }\n }"
    }
]