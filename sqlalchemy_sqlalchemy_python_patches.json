[
    {
        "commit_id": "f2a9ecde29bb9d5daadd0626054ff8b54865c781",
        "commit_message": "chore: Fix typo of psycopg2 in comment (#12526)\n\nThis is the first example in the documentation of a particular connector, which mgith result in copy+pastes, resulting in an error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f2a9ecde29bb9d5daadd0626054ff8b54865c781",
        "buggy_code": "\"postgresql+pyscopg2://scott:tiger@hostname/dbname\",",
        "fixed_code": "\"postgresql+psycopg2://scott:tiger@hostname/dbname\",",
        "patch": "@@ -266,7 +266,7 @@ def use_identity(element, compiler, **kw):\n     from sqlalchemy import event\n \n     postgresql_engine = create_engine(\n-        \"postgresql+pyscopg2://scott:tiger@hostname/dbname\",\n+        \"postgresql+psycopg2://scott:tiger@hostname/dbname\",\n         # disable default reset-on-return scheme\n         pool_reset_on_return=None,\n     )"
    },
    {
        "commit_id": "ae221534846eb095e50fce99d641f794916bf917",
        "commit_message": "Merge \"ensure SQL expressions w/o bool pass through to correct typing error\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ae221534846eb095e50fce99d641f794916bf917",
        "buggy_code": "raise exc.ArgumentError(",
        "fixed_code": "raise orm_exc.MappedAnnotationError(",
        "patch": "@@ -1567,7 +1567,7 @@ def _extract_mappable_attributes(self) -> None:\n                                 is_dataclass,\n                             )\n                         except NameError as ne:\n-                            raise exc.ArgumentError(\n+                            raise orm_exc.MappedAnnotationError(\n                                 f\"Could not resolve all types within mapped \"\n                                 f'annotation: \"{annotation}\".  Ensure all '\n                                 f\"types are written correctly and are \""
    },
    {
        "commit_id": "b19a09812c2b0806cc063e42993216fc1ead6ed2",
        "commit_message": "ensure SQL expressions w/o bool pass through to correct typing error\n\nFixed regression which occurred as of 2.0.37 where the checked\n:class:`.ArgumentError` that's raised when an inappropriate type or object\nis used inside of a :class:`.Mapped` annotation would raise ``TypeError``\nwith \"boolean value of this clause is not defined\" if the object resolved\ninto a SQL expression in a boolean context, for programs where future\nannotations mode was not enabled.  This case is now handled explicitly and\na new error message has also been tailored for this case.  In addition, as\nthere are at least half a dozen distinct error scenarios for intepretation\nof the :class:`.Mapped` construct, these scenarios have all been unified\nunder a new subclass of :class:`.ArgumentError` called\n:class:`.MappedAnnotationError`, to provide some continuity between these\ndifferent scenarios, even though specific messaging remains distinct.\n\nFixes: #12329\nChange-Id: I0193e3479c84a48b364df8655f050e2e84151122",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b19a09812c2b0806cc063e42993216fc1ead6ed2",
        "buggy_code": "raise exc.ArgumentError(",
        "fixed_code": "raise orm_exc.MappedAnnotationError(",
        "patch": "@@ -1577,7 +1577,7 @@ def _extract_mappable_attributes(self) -> None:\n                                 is_dataclass,\n                             )\n                         except NameError as ne:\n-                            raise exc.ArgumentError(\n+                            raise orm_exc.MappedAnnotationError(\n                                 f\"Could not resolve all types within mapped \"\n                                 f'annotation: \"{annotation}\".  Ensure all '\n                                 f\"types are written correctly and are \""
    },
    {
        "commit_id": "1afb820427545e259397b98851a910d7379b2eb8",
        "commit_message": "expand paren rules for default rendering, sqlite/mysql\n\nExpanded the rules for when to apply parenthesis to a server default in DDL\nto suit the general case of a default string that contains non-word\ncharacters such as spaces or operators and is not a string literal.\n\nFixed issue in MySQL server default reflection where a default that has\nspaces would not be correctly reflected.  Additionally, expanded the rules\nfor when to apply parenthesis to a server default in DDL to suit the\ngeneral case of a default string that contains non-word characters such as\nspaces or operators and is not a string literal.\n\nFixes: #12425\nChange-Id: Ie40703dcd5fdc135025d676c01baba57ff3b71ad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1afb820427545e259397b98851a910d7379b2eb8",
        "buggy_code": "r\"(?:NULL|'(?:''|[^'])*'|[\\-\\w\\.\\(\\)]+\"",
        "fixed_code": "r\"(?:NULL|'(?:''|[^'])*'|\\(.+?\\)|[\\-\\w\\.\\(\\)]+\"",
        "patch": "@@ -451,7 +451,7 @@ def _prep_regexes(self):\n             r\"(?: +COLLATE +(?P<collate>[\\w_]+))?\"\n             r\"(?: +(?P<notnull>(?:NOT )?NULL))?\"\n             r\"(?: +DEFAULT +(?P<default>\"\n-            r\"(?:NULL|'(?:''|[^'])*'|[\\-\\w\\.\\(\\)]+\"\n+            r\"(?:NULL|'(?:''|[^'])*'|\\(.+?\\)|[\\-\\w\\.\\(\\)]+\"\n             r\"(?: +ON UPDATE [\\-\\w\\.\\(\\)]+)?)\"\n             r\"))?\"\n             r\"(?: +(?:GENERATED ALWAYS)? ?AS +(?P<generated>\\(\""
    },
    {
        "commit_id": "1afb820427545e259397b98851a910d7379b2eb8",
        "commit_message": "expand paren rules for default rendering, sqlite/mysql\n\nExpanded the rules for when to apply parenthesis to a server default in DDL\nto suit the general case of a default string that contains non-word\ncharacters such as spaces or operators and is not a string literal.\n\nFixed issue in MySQL server default reflection where a default that has\nspaces would not be correctly reflected.  Additionally, expanded the rules\nfor when to apply parenthesis to a server default in DDL to suit the\ngeneral case of a default string that contains non-word characters such as\nspaces or operators and is not a string literal.\n\nFixes: #12425\nChange-Id: Ie40703dcd5fdc135025d676c01baba57ff3b71ad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1afb820427545e259397b98851a910d7379b2eb8",
        "buggy_code": "\"time DATETIME DEFAULT (CURRENT_TIMESTAMP), \"",
        "fixed_code": "\"time DATETIME DEFAULT CURRENT_TIMESTAMP, \"",
        "patch": "@@ -450,7 +450,7 @@ def test_create_server_default_with_function_using(\n             self.assert_compile(\n                 schema.CreateTable(tbl),\n                 \"CREATE TABLE testtbl (\"\n-                \"time DATETIME DEFAULT (CURRENT_TIMESTAMP), \"\n+                \"time DATETIME DEFAULT CURRENT_TIMESTAMP, \"\n                 \"name VARCHAR(255) DEFAULT 'some str', \"\n                 \"description VARCHAR(255) DEFAULT (lower('hi')), \"\n                 \"data JSON DEFAULT (json_object()))\","
    },
    {
        "commit_id": "b23b6db14ac33a792520a5036af1ab02157b7df6",
        "commit_message": "Improve identity column reflection\n\nAdd SQL typing to reflection query used to retrieve a the structure\nof IDENTITY columns, adding explicit JSON typing to the query to suit\nunusual PostgreSQL driver configurations that don't support JSON natively.\n\nFixed issue affecting PostgreSQL 17.3 and greater where reflection of\ndomains with \"NOT NULL\" as part of their definition would include an\ninvalid constraint entry in the data returned by\n:meth:`_postgresql.PGInspector.get_domains` corresponding to an additional\n\"NOT NULL\" constraint that isn't a CHECK constraint; the existing\n``\"nullable\"`` entry in the dictionary already indicates if the domain\nincludes a \"not null\" constraint.   Note that such domains also cannot be\nreflected on PostgreSQL 17.0 through 17.2 due to a bug on the PostgreSQL\nside; if encountering errors in reflection of domains which include NOT\nNULL, upgrade to PostgreSQL server 17.3 or greater.\n\nFixes: #11751\nChange-Id: I8e69de51601dca3257186e38c6f699fbfd9014c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b23b6db14ac33a792520a5036af1ab02157b7df6",
        "buggy_code": "\"CREATE TABLE testtable (question integer, answer \" \"testdomain)\"",
        "fixed_code": "\"CREATE TABLE testtable (question integer, answer testdomain)\"",
        "patch": "@@ -432,7 +432,7 @@ def testdomain(self, connection, broken_nullable_domains):\n     @testing.fixture\n     def testtable(self, connection, testdomain):\n         connection.exec_driver_sql(\n-            \"CREATE TABLE testtable (question integer, answer \" \"testdomain)\"\n+            \"CREATE TABLE testtable (question integer, answer testdomain)\"\n         )\n         yield\n         connection.exec_driver_sql(\"DROP TABLE testtable\")"
    },
    {
        "commit_id": "4e4e631c1356e75ebc2c8ca5fe7b12d491c7ad12",
        "commit_message": "Merge \"syntax extensions (patch 1)\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4e4e631c1356e75ebc2c8ca5fe7b12d491c7ad12",
        "buggy_code": "dp_with_context_options = \"WC\"",
        "fixed_code": "dp_compile_state_funcs = \"WC\"",
        "patch": "@@ -218,7 +218,7 @@ class Case(ColumnElement[_T]):\n \n     dp_executable_options = \"EO\"\n \n-    dp_with_context_options = \"WC\"\n+    dp_compile_state_funcs = \"WC\"\n \n     dp_fromclause_ordered_set = \"CO\"\n     \"\"\"Visit an ordered set of :class:`_expression.FromClause` objects. \"\"\""
    },
    {
        "commit_id": "8be3b096a6c6adc3e51b0b23d02568c9e6728253",
        "commit_message": "syntax extensions (patch 1)\n\nAdded the ability to create custom SQL constructs that can define new\nclauses within SELECT, INSERT, UPDATE, and DELETE statements without\nneeding to modify the construction or compilation code of of\n:class:`.Select`, :class:`.Insert`, :class:`.Update`, or :class:`.Delete`\ndirectly.  Support for testing these constructs, including caching support,\nis present along with an example test suite.  The use case for these\nconstructs is expected to be third party dialects for NewSQL or other novel\nstyles of database that introduce new clauses to these statements.   A new\nexample suite is included which illustrates the ``QUALIFY`` SQL construct\nused by several NewSQL databases which includes a cachable implementation\nas well as a test suite.\n\nSince these extensions start to make it a bit crowded with how many\nkinds of \"options\" we have on statements, did some naming /\ndocumentation changes with existing constructs on Executable, in\nparticular to distinguish ExecutableOption from SyntaxExtension.\n\nFixes: #12195\nChange-Id: I4a44ee5bbc3d8b1b640837680c09d25b1b7077af",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8be3b096a6c6adc3e51b0b23d02568c9e6728253",
        "buggy_code": "dp_with_context_options = \"WC\"",
        "fixed_code": "dp_compile_state_funcs = \"WC\"",
        "patch": "@@ -218,7 +218,7 @@ class Case(ColumnElement[_T]):\n \n     dp_executable_options = \"EO\"\n \n-    dp_with_context_options = \"WC\"\n+    dp_compile_state_funcs = \"WC\"\n \n     dp_fromclause_ordered_set = \"CO\"\n     \"\"\"Visit an ordered set of :class:`_expression.FromClause` objects. \"\"\""
    },
    {
        "commit_id": "87c8d04d379a70aafb189f18801f0f375d99262b",
        "commit_message": "Fix 'polymorphic' typo in a few places (#12307)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/87c8d04d379a70aafb189f18801f0f375d99262b",
        "buggy_code": "class ExplicitWithPolymorhpicTest(",
        "fixed_code": "class ExplicitWithPolymorphicTest(",
        "patch": "@@ -1797,7 +1797,7 @@ class InheritedTest(_poly_fixtures._Polymorphic):\n     run_setup_mappers = \"once\"\n \n \n-class ExplicitWithPolymorhpicTest(\n+class ExplicitWithPolymorphicTest(\n     _poly_fixtures._PolymorphicUnions, AssertsCompiledSQL\n ):\n     __dialect__ = \"default\""
    },
    {
        "commit_id": "2f6ca6554ddd725849dd6b2d32bf495391087bec",
        "commit_message": "asyncpg: shield connection close in terminate to avoid connection leak\n\nAdded an additional ``shield()`` call within the connection terminate\nprocess of the asyncpg driver, to mitigate an issue where terminate would\nbe prevented from completing under the anyio concurrency library.\n\nFixes #12077\nCloses: #12076\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/12076\nPull-request-sha: 6ae261ea7668f4c850874666efec6fef658b08c0\n\nChange-Id: Iaec63d02b620201dc60ffdad76ba9d61d427cac1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2f6ca6554ddd725849dd6b2d32bf495391087bec",
        "buggy_code": "await_(self._connection.close(timeout=2))",
        "fixed_code": "await_(asyncio.shield(self._connection.close(timeout=2)))",
        "patch": "@@ -930,7 +930,7 @@ def terminate(self):\n             try:\n                 # try to gracefully close; see #10717\n                 # timeout added in asyncpg 0.14.0 December 2017\n-                await_(self._connection.close(timeout=2))\n+                await_(asyncio.shield(self._connection.close(timeout=2)))\n             except (\n                 asyncio.TimeoutError,\n                 asyncio.CancelledError,"
    },
    {
        "commit_id": "484d74a4c5bfe22be126e49c662b6cd6a3218eb7",
        "commit_message": "Fix MovedIn20Warning docstring (#12237)\n\nRemove reference of RemovedIn20Warning",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/484d74a4c5bfe22be126e49c662b6cd6a3218eb7",
        "buggy_code": "\"\"\"Subtype of RemovedIn20Warning to indicate an API that moved only.\"\"\"",
        "fixed_code": "\"\"\"Subtype of Base20DeprecationWarning to indicate an API that moved only.\"\"\"",
        "patch": "@@ -813,7 +813,7 @@ class LegacyAPIWarning(Base20DeprecationWarning):\n \n \n class MovedIn20Warning(Base20DeprecationWarning):\n-    \"\"\"Subtype of RemovedIn20Warning to indicate an API that moved only.\"\"\"\n+    \"\"\"Subtype of Base20DeprecationWarning to indicate an API that moved only.\"\"\"\n \n \n class SAPendingDeprecationWarning(PendingDeprecationWarning):"
    },
    {
        "commit_id": "83492ae3b446dbc6ffc36da720417731d975d69c",
        "commit_message": "fix typo on double doc\n\nChange-Id: Ia8cffddae5c5c14954d7fa6b2e11c2b78c6e5f59",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/83492ae3b446dbc6ffc36da720417731d975d69c",
        "buggy_code": "delivers a true 4-byte FP value.   The datatype may be combined with a",
        "fixed_code": "delivers a true 8-byte FP value.   The datatype may be combined with a",
        "patch": "@@ -114,7 +114,7 @@ class BINARY_DOUBLE(sqltypes.Double):\n     \"\"\"Implement the Oracle ``BINARY_DOUBLE`` datatype.\n \n     This datatype differs from the Oracle ``DOUBLE`` datatype in that it\n-    delivers a true 4-byte FP value.   The datatype may be combined with a\n+    delivers a true 8-byte FP value.   The datatype may be combined with a\n     generic :class:`.Double` datatype using :meth:`.TypeEngine.with_variant`.\n \n     .. seealso::"
    },
    {
        "commit_id": "4c063e7df42a6a33182df2f9a49208358a7c00ff",
        "commit_message": "fix typo in test docs\n\nChange-Id: I6d7b8b75b96c0096ea9de8e462895c006dcb8f7c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4c063e7df42a6a33182df2f9a49208358a7c00ff",
        "buggy_code": "\"\"\"Numeric scenarios where Oracle Databasee type info is 'broken',",
        "fixed_code": "\"\"\"Numeric scenarios where Oracle Database type info is 'broken',",
        "patch": "@@ -572,7 +572,7 @@ def _dont_test_numeric_nan_decimal(self, metadata, connection):\n         )\n \n     def test_numerics_broken_inspection(self, metadata, connection):\n-        \"\"\"Numeric scenarios where Oracle Databasee type info is 'broken',\n+        \"\"\"Numeric scenarios where Oracle Database type info is 'broken',\n         returning us precision, scale of the form (0, 0) or (0, -127).\n         We convert to Decimal and let int()/float() processors take over.\n "
    },
    {
        "commit_id": "5bbefc41b7b2695c95c9c93bcaabd8c4731e348e",
        "commit_message": "dont leak mutating bindparams list into AnalyzedFunction\n\nFixed issue in \"lambda SQL\" feature where the tracking of bound parameters\ncould be corrupted if the same lambda were evaluated across multiple\ncompile phases, including when using the same lambda across multiple engine\ninstances or with statement caching disabled.\n\nFixes: #12084\nChange-Id: I327aa93ce7feb2326a22113164bd834b96b6b889",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5bbefc41b7b2695c95c9c93bcaabd8c4731e348e",
        "buggy_code": "rec.closure_bindparams = bindparams",
        "fixed_code": "rec.closure_bindparams = list(bindparams)",
        "patch": "@@ -278,7 +278,7 @@ def _retrieve_tracker_rec(self, fn, apply_propagate_attrs, opts):\n                         rec = AnalyzedFunction(\n                             tracker, self, apply_propagate_attrs, fn\n                         )\n-                        rec.closure_bindparams = bindparams\n+                        rec.closure_bindparams = list(bindparams)\n                         lambda_cache[key] = rec\n                     else:\n                         rec = lambda_cache[key]"
    },
    {
        "commit_id": "855d03cc15ac30d458d8d2e501df5f324238f43e",
        "commit_message": "Update Oracle dialect doc, mostly to prefer python-oracledb\n\n### Description\n\nSmall updates for Oracle Database dialect documentation.\n\n- prefer python-oracledb over cx_Oracle\n- Prefer the product name 'Oracle Database' over the company name 'Oracle'\n- update links\n- modernize\n\nThis is a refresh of existing content.\n\nI decided the apparently now duplicated sections between cx_Oracle and python-oracledb were justified for clarity due to the inevitable differences.\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n\n**Have a nice day!**\n\nCloses: #12078\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/12078\nPull-request-sha: 7c4dcf94032af295a6836e9412a4367b716f2de5\n\nChange-Id: I3678976f5524ee164dc31b3122b224ae37060b71",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/855d03cc15ac30d458d8d2e501df5f324238f43e",
        "buggy_code": "\"\"\"Drop Oracle, SQL Server databases that are left over from a",
        "fixed_code": "\"\"\"Drop Oracle Database, SQL Server databases that are left over from a",
        "patch": "@@ -1,4 +1,4 @@\n-\"\"\"Drop Oracle, SQL Server databases that are left over from a\n+\"\"\"Drop Oracle Database, SQL Server databases that are left over from a\n multiprocessing test run.\n \n Currently the cx_Oracle driver seems to sometimes not release a"
    },
    {
        "commit_id": "ffebb07b304197997455ee0b5643c19eaf0d46e4",
        "commit_message": "lookup \"secondary\" directly, dont use eval()\n\nThe :paramref:`_orm.relationship.secondary` parameter no longer uses Python\n``eval()`` to evaluate the given string.   This parameter when passed a\nstring should resolve to a table name that's present in the local\n:class:`.MetaData` collection only, and never needs to be any kind of\nPython expression otherwise.  To use a real deferred callable based on a\nname that may not be locally present yet, use a lambda instead.\n\nFixes: #10564\nChange-Id: I9bb5a2ea17c7efac88df1470d109970cfb4c4874",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ffebb07b304197997455ee0b5643c19eaf0d46e4",
        "buggy_code": "secondary=\"join(B, C)\",",
        "fixed_code": "secondary=join(B, C),",
        "patch": "@@ -3755,7 +3755,7 @@ class A(Base):\n \n             d = relationship(\n                 \"D\",\n-                secondary=\"join(B, C)\",\n+                secondary=join(B, C),\n                 primaryjoin=\"A.b_id == B.id\",\n                 secondaryjoin=\"C.d_id == D.id\",\n                 uselist=False,"
    },
    {
        "commit_id": "5e16d25cc7c32e6cfaea44ceec5a2730d766952c",
        "commit_message": "Merge url query args to opts in mariadbconnector like mysqldb\n\nFixed issue in mariadbconnector dialect where query string arguments that\nweren't checked integer or boolean arguments would be ignored, such as\nstring arguments like ``unix_socket``, etc.  As part of this change, the\nargument parsing for particular elements such as ``client_flags``,\n``compress``, ``local_infile`` has been made more consistent across all\nMySQL / MariaDB dialect which accept each argument. Pull request courtesy\nTobias Alex-Petersen.\n\nFixes: #11870\nCloses: #11869\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11869\nPull-request-sha: 8fdcabc83b548e3fc19aa1625035d43ebc0e1875\n\nChange-Id: I3a11a0e65e118c94928027478409488b0d5e94f8",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5e16d25cc7c32e6cfaea44ceec5a2730d766952c",
        "buggy_code": "util.coerce_kw_type(opts, \"local_infile\", int)",
        "fixed_code": "util.coerce_kw_type(opts, \"local_infile\", bool)",
        "patch": "@@ -212,7 +212,7 @@ def create_connect_args(self, url, _translate_args=None):\n         util.coerce_kw_type(opts, \"read_timeout\", int)\n         util.coerce_kw_type(opts, \"write_timeout\", int)\n         util.coerce_kw_type(opts, \"client_flag\", int)\n-        util.coerce_kw_type(opts, \"local_infile\", int)\n+        util.coerce_kw_type(opts, \"local_infile\", bool)\n         # Note: using either of the below will cause all strings to be\n         # returned as Unicode, both in raw SQL operations and with column\n         # types like String and MSString."
    },
    {
        "commit_id": "1feecea3cbe7a7a081a75b9e3f8d36718c62d210",
        "commit_message": "Merge \"fix most broken links\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1feecea3cbe7a7a081a75b9e3f8d36718c62d210",
        "buggy_code": "`SQLSoup <https://sqlsoup.readthedocs.io/en/latest/>`_",
        "fixed_code": "`SQLSoup <https://pypi.org/project/sqlsoup/>`_",
        "patch": "@@ -11,7 +11,7 @@\n \n It is hoped that the :class:`.AutomapBase` system provides a quick\n and modernized solution to the problem that the very famous\n-`SQLSoup <https://sqlsoup.readthedocs.io/en/latest/>`_\n+`SQLSoup <https://pypi.org/project/sqlsoup/>`_\n also tries to solve, that of generating a quick and rudimentary object\n model from an existing database on the fly.  By addressing the issue strictly\n at the mapper configuration level, and integrating fully with existing"
    },
    {
        "commit_id": "9ea449bf41006e94273186a974d3a1b091a0552a",
        "commit_message": "deprecate joinedload, subqueryload with DML; use correct statement\n\nAn ORM exception is raised if :func:`_orm.joinedload` or\n:func:`_orm.subqueryload` are used as a top level option against a\nstatement that is not a SELECT statement, such as with an\n``insert().returning()``.   There are no JOINs in INSERT statements nor is\nthere a \"subquery\" that can be repurposed for subquery eager loading, and\nfor UPDATE/DELETE joinedload does not support these either, so it is never\nappropriate for this use to pass silently.\n\nFixed issue where using eager loaders such as :func:`_orm.selectinload`\nwith additional criteria in combination with ORM DML such as\n:func:`_sql.insert` with RETURNING would not correctly set up internal\ncontexts required for caching to work correctly, leading to incorrect\nresults.\n\nFixes: #11853\nFixes: #11855\nChange-Id: Ibbf46ba4f83e472441074c3257e23388e0fcec37",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9ea449bf41006e94273186a974d3a1b091a0552a",
        "buggy_code": "replacement_cache_key = context.query._generate_cache_key()",
        "fixed_code": "replacement_cache_key = context.user_passed_query._generate_cache_key()",
        "patch": "@@ -1081,7 +1081,7 @@ def _adjust_for_extra_criteria(self, context: QueryContext) -> Load:\n         else:\n             return self\n \n-        replacement_cache_key = context.query._generate_cache_key()\n+        replacement_cache_key = context.user_passed_query._generate_cache_key()\n \n         if replacement_cache_key is None:\n             return self"
    },
    {
        "commit_id": "e8dfefb97cd43bc03d202872b99931f61324fe80",
        "commit_message": "Fix the runtime issue related to the join operation in the association example (#11721)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e8dfefb97cd43bc03d202872b99931f61324fe80",
        "buggy_code": "q = session.query(Order).join(\"order_items\", \"item\")",
        "fixed_code": "q = session.query(Order).join(OrderItem).join(Item)",
        "patch": "@@ -105,7 +105,7 @@ def __init__(self, item, price=None):\n     )\n \n     # print customers who bought 'MySQL Crowbar' on sale\n-    q = session.query(Order).join(\"order_items\", \"item\")\n+    q = session.query(Order).join(OrderItem).join(Item)\n     q = q.filter(\n         and_(Item.description == \"MySQL Crowbar\", Item.price > OrderItem.price)\n     )"
    },
    {
        "commit_id": "6d0379f0565db1b6bf3aa7bead44d759407abadc",
        "commit_message": "fix typo in `elect.slice` docs\n\nChange-Id: I859b48e320a04cedc6084d067cb20b89ac5d76bb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d0379f0565db1b6bf3aa7bead44d759407abadc",
        "buggy_code": "stmt = select(User).order_by(User).id.slice(1, 3)",
        "fixed_code": "stmt = select(User).order_by(User.id).slice(1, 3)",
        "patch": "@@ -4165,7 +4165,7 @@ def slice(\n \n         For example, ::\n \n-            stmt = select(User).order_by(User).id.slice(1, 3)\n+            stmt = select(User).order_by(User.id).slice(1, 3)\n \n         renders as\n "
    },
    {
        "commit_id": "44be2ef4484345298825f547e21d2881cc4921a9",
        "commit_message": "Fix regular expression for `SQLiteDialect.get_check_constraints`\n\nFixed regression in SQLite reflection caused by :ticket:`11677` which\ninterfered with reflection for CHECK constraints that were followed\nby other kinds of constraints within the same table definition.   Pull\nrequest courtesy Harutaka Kawamura.\n\nFixes: #11832\nCloses: #11834\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11834\nPull-request-sha: a10fcef45ccfad6ebf17ec94fc48d0965f0d4123\n\nChange-Id: I50bcc7aa727f73be235895d154cd859f19adda09",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/44be2ef4484345298825f547e21d2881cc4921a9",
        "buggy_code": ",[\\s\\n]*(?=CONSTRAINT|CHECK)",
        "fixed_code": ",[\\s\\n]*(?=CONSTRAINT|CHECK|UNIQUE|FOREIGN|PRIMARY)",
        "patch": "@@ -2674,7 +2674,7 @@ def get_check_constraints(self, connection, table_name, schema=None, **kw):\n         # (1) Matches end of check constraint with trailing comma,\n         # optional whitespace (including newline), and the beginning\n         # of the next constraint (either named or unnamed).\n-        ,[\\s\\n]*(?=CONSTRAINT|CHECK)\n+        ,[\\s\\n]*(?=CONSTRAINT|CHECK|UNIQUE|FOREIGN|PRIMARY)\n         # OR operator, seperating (1) & (2)\n         |\n         # (2) Matches end parenthesis of table definition, seperated by"
    },
    {
        "commit_id": "f746fd78e303352d426a15c1f76ee835ce399d44",
        "commit_message": "re-process args for builtin generic types\n\nImprovements to the ORM annotated declarative type map lookup dealing with\ncomposed types such as ``dict[str, Any]`` linking to JSON (or others) with\nor without \"future annotations\" mode.\n\nThere's apparently a big incompatiblity in types from typing vs.\nPython builtins in the way they genericize.   The typing library makes\nit very difficult to distinguish between the two sets of types.  This\npatch is a bit slash and burn to work around all this.   These should\nlikely be reported as bugs in the Python standard library if they\naren't already.\n\nFixes: #11814\nChange-Id: I56a62701d5e883be04df7f45fd9429bb9c1c9a6f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f746fd78e303352d426a15c1f76ee835ce399d44",
        "buggy_code": "extracted_mapped_annotation: Union[Type[Any], str]",
        "fixed_code": "extracted_mapped_annotation: Union[_AnnotationScanType, str]",
        "patch": "@@ -431,7 +431,7 @@ def _setup_inheritance(self, mapper_kw: _MapperKwArgs) -> None:\n class _CollectedAnnotation(NamedTuple):\n     raw_annotation: _AnnotationScanType\n     mapped_container: Optional[Type[Mapped[Any]]]\n-    extracted_mapped_annotation: Union[Type[Any], str]\n+    extracted_mapped_annotation: Union[_AnnotationScanType, str]\n     is_dataclass: bool\n     attr_value: Any\n     originating_module: str"
    },
    {
        "commit_id": "2e12ce74b0a4b78bb9268da2b84fc5c52d4299b3",
        "commit_message": "Merge \"Fix memory leak on top-level _ModuleMarker.\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2e12ce74b0a4b78bb9268da2b84fc5c52d4299b3",
        "buggy_code": "eq_(len(clsregistry._registries), 1)",
        "fixed_code": "eq_(len(clsregistry._registries), 0)",
        "patch": "@@ -230,7 +230,7 @@ def test_dupe_classes_cleanout(self):\n             del f2\n             gc_collect()\n \n-            eq_(len(clsregistry._registries), 1)\n+            eq_(len(clsregistry._registries), 0)\n \n     def test_dupe_classes_name_race(self):\n         \"\"\"test the race condition that the class was garbage \""
    },
    {
        "commit_id": "4ae9e65e1d69100e585f783dfe8f2150388b49f4",
        "commit_message": "Fix memory leak on top-level _ModuleMarker.\n\nCorrectly cleanup the internal top-level module registry when no\ninner modules or classes are registered into it.\n\nFixes: #11788\nChange-Id: I489dd6394dd3f14458379368b8c8f18d5a0bb109",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4ae9e65e1d69100e585f783dfe8f2150388b49f4",
        "buggy_code": "eq_(len(clsregistry._registries), 1)",
        "fixed_code": "eq_(len(clsregistry._registries), 0)",
        "patch": "@@ -230,7 +230,7 @@ def test_dupe_classes_cleanout(self):\n             del f2\n             gc_collect()\n \n-            eq_(len(clsregistry._registries), 1)\n+            eq_(len(clsregistry._registries), 0)\n \n     def test_dupe_classes_name_race(self):\n         \"\"\"test the race condition that the class was garbage \""
    },
    {
        "commit_id": "21921a8a94452aed37766645f4d7785d33e6e70f",
        "commit_message": "fix most broken links\n\nThis was achieved by running Broken Link Checker\nhttps://github.com/stevenvachon/broken-link-checker\non the docs\n\nChange-Id: Ic415f9435b3c817e518fbbad46ac8fb9e8503d15",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/21921a8a94452aed37766645f4d7785d33e6e70f",
        "buggy_code": "`SQLSoup <https://sqlsoup.readthedocs.io/en/latest/>`_",
        "fixed_code": "`SQLSoup <https://pypi.org/project/sqlsoup/>`_",
        "patch": "@@ -11,7 +11,7 @@\n \n It is hoped that the :class:`.AutomapBase` system provides a quick\n and modernized solution to the problem that the very famous\n-`SQLSoup <https://sqlsoup.readthedocs.io/en/latest/>`_\n+`SQLSoup <https://pypi.org/project/sqlsoup/>`_\n also tries to solve, that of generating a quick and rudimentary object\n model from an existing database on the fly.  By addressing the issue strictly\n at the mapper configuration level, and integrating fully with existing"
    },
    {
        "commit_id": "89355b82f444e49e0613e4ba8423ffab33e77c38",
        "commit_message": "Fix docs link to Oracle Cloud Autonomous Databases (#11762)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/89355b82f444e49e0613e4ba8423ffab33e77c38",
        "buggy_code": "<https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connecting-to-autononmous-databases>`_.",
        "fixed_code": "<https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#autonomousdb>`_.",
        "patch": "@@ -62,7 +62,7 @@\n \n Users of Oracle Cloud should use this syntax and also configure the cloud\n wallet as shown in cx_Oracle documentation `Connecting to Autononmous Databases\n-<https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connecting-to-autononmous-databases>`_.\n+<https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#autonomousdb>`_.\n \n SID Connections\n ^^^^^^^^^^^^^^^"
    },
    {
        "commit_id": "63b45202848de0cb3cfd41de130000355cbb88ef",
        "commit_message": "omit mysql8 dupe key alias for INSERT..FROM SELECT\n\nFixed issue in MySQL dialect where using INSERT..FROM SELECT in combination\nwith ON DUPLICATE KEY UPDATE would erroneously render on MySQL 8 and above\nthe \"AS new\" clause, leading to syntax failures.  This clause is required\non MySQL 8 to follow the VALUES clause if use of the \"new\" alias is\npresent, however is not permitted to follow a FROM SELECT clause.\n\nFixes: #11731\nChange-Id: I254a3db4e9dccd9a76b11fdfe6e38a064ba0b5cf",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/63b45202848de0cb3cfd41de130000355cbb88ef",
        "buggy_code": "requires_mysql8_alias = (",
        "fixed_code": "requires_mysql8_alias = statement.select is None and (",
        "patch": "@@ -1349,7 +1349,7 @@ def visit_on_duplicate_key_update(self, on_duplicate, **kw):\n \n         clauses = []\n \n-        requires_mysql8_alias = (\n+        requires_mysql8_alias = statement.select is None and (\n             self.dialect._requires_alias_for_on_duplicate_key\n         )\n "
    },
    {
        "commit_id": "96f1172812f858fead45cdc7874abac76f45b339",
        "commit_message": "include nulls_first, nulls_last in order_by_label_element\n\nFixed bug where the :meth:`.Operators.nulls_first()` and\n:meth:`.Operators.nulls_last()` modifiers would not be treated the same way\nas :meth:`.Operators.desc()` and :meth:`.Operators.asc()` when determining\nif an ORDER BY should be against a label name already in the statement. All\nfour modifiers are now treated the same within ORDER BY.\n\nFixes: #11592\nChange-Id: I1de1aff679c56af1abfdfd07f9bcbc45ecc5a8cc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/96f1172812f858fead45cdc7874abac76f45b339",
        "buggy_code": "if self.modifier in (operators.desc_op, operators.asc_op):",
        "fixed_code": "if operators.is_order_by_modifier(self.modifier):",
        "patch": "@@ -3699,7 +3699,7 @@ def _create_bitwise_not(\n \n     @property\n     def _order_by_label_element(self) -> Optional[Label[Any]]:\n-        if self.modifier in (operators.desc_op, operators.asc_op):\n+        if operators.is_order_by_modifier(self.modifier):\n             return self.element._order_by_label_element\n         else:\n             return None"
    },
    {
        "commit_id": "7d8dfa10df3be8d138dd954708efca7d6ed0e503",
        "commit_message": "set type of type_of to be same as input argument\n\nFixes: #11371\n\nFixes the of_type method so that it does not return a class with unset generic.\nSee the original issue for a more detailed explanation.\n\nCloses: #11416\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11416\nPull-request-sha: ed8d0edebb6b84b9dcffcf24c52f113c37e7fedd\n\nChange-Id: I35637491d6d9c573825f6d13299712626dd521c5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7d8dfa10df3be8d138dd954708efca7d6ed0e503",
        "buggy_code": "def of_type(self, entity: _EntityType[Any]) -> QueryableAttribute[_T]:",
        "fixed_code": "def of_type(self, entity: _EntityType[_T]) -> QueryableAttribute[_T]:",
        "patch": "@@ -401,7 +401,7 @@ def adapt_to_entity(self, adapt_to_entity: AliasedInsp[Any]) -> Self:\n             parententity=adapt_to_entity,\n         )\n \n-    def of_type(self, entity: _EntityType[Any]) -> QueryableAttribute[_T]:\n+    def of_type(self, entity: _EntityType[_T]) -> QueryableAttribute[_T]:\n         return QueryableAttribute(\n             self.class_,\n             self.key,"
    },
    {
        "commit_id": "c43238252f96a1f9370d1bc7ff440897b751b2b8",
        "commit_message": "fix default label style doc\n\nChange-Id: I793f7b62c6c0b551ab1957cabcff685885b6e51c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c43238252f96a1f9370d1bc7ff440897b751b2b8",
        "buggy_code": ":attr:`_sql.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`.",
        "fixed_code": ":attr:`_sql.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`.",
        "patch": "@@ -3861,7 +3861,7 @@ def set_label_style(self, style: SelectLabelStyle) -> Self:\n         :attr:`_sql.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`,\n         :attr:`_sql.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`, and\n         :attr:`_sql.SelectLabelStyle.LABEL_STYLE_NONE`.   The default style is\n-        :attr:`_sql.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`.\n+        :attr:`_sql.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`.\n \n         In modern SQLAlchemy, there is not generally a need to change the\n         labeling style, as per-expression labels are more effectively used by"
    },
    {
        "commit_id": "e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "commit_message": "Correct 'Session.is_modified' method documentation\n\nCorrect 'Session.is_modified' method documentation.\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nCorrect documentation according to discussion: https://github.com/sqlalchemy/sqlalchemy/discussions/11481#discussioncomment-9759171\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #11501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11501\nPull-request-sha: 16e949af544b4a1a94ccc5660e164fd2bca8be78\n\nChange-Id: Ia8be0e3865190f0667de006c3006ecf646ef8422\n(cherry picked from commit 30492d665ed7edc474d151f0854ed4837dcafaed)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "buggy_code": "value to its previously committed value, if any.",
        "fixed_code": "value to its previously flushed or committed value, if any.",
        "patch": "@@ -868,7 +868,7 @@ def is_modified(\n \n         This method retrieves the history for each instrumented\n         attribute on the instance and performs a comparison of the current\n-        value to its previously committed value, if any.\n+        value to its previously flushed or committed value, if any.\n \n         It is in effect a more expensive and accurate\n         version of checking for the given instance in the"
    },
    {
        "commit_id": "e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "commit_message": "Correct 'Session.is_modified' method documentation\n\nCorrect 'Session.is_modified' method documentation.\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nCorrect documentation according to discussion: https://github.com/sqlalchemy/sqlalchemy/discussions/11481#discussioncomment-9759171\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #11501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11501\nPull-request-sha: 16e949af544b4a1a94ccc5660e164fd2bca8be78\n\nChange-Id: Ia8be0e3865190f0667de006c3006ecf646ef8422\n(cherry picked from commit 30492d665ed7edc474d151f0854ed4837dcafaed)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "buggy_code": "value to its previously committed value, if any.",
        "fixed_code": "value to its previously flushed or committed value, if any.",
        "patch": "@@ -1310,7 +1310,7 @@ def is_modified(\n \n         This method retrieves the history for each instrumented\n         attribute on the instance and performs a comparison of the current\n-        value to its previously committed value, if any.\n+        value to its previously flushed or committed value, if any.\n \n         It is in effect a more expensive and accurate\n         version of checking for the given instance in the"
    },
    {
        "commit_id": "e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "commit_message": "Correct 'Session.is_modified' method documentation\n\nCorrect 'Session.is_modified' method documentation.\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nCorrect documentation according to discussion: https://github.com/sqlalchemy/sqlalchemy/discussions/11481#discussioncomment-9759171\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #11501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11501\nPull-request-sha: 16e949af544b4a1a94ccc5660e164fd2bca8be78\n\nChange-Id: Ia8be0e3865190f0667de006c3006ecf646ef8422\n(cherry picked from commit 30492d665ed7edc474d151f0854ed4837dcafaed)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "buggy_code": "value to its previously committed value, if any.",
        "fixed_code": "value to its previously flushed or committed value, if any.",
        "patch": "@@ -1233,7 +1233,7 @@ def is_modified(\n \n         This method retrieves the history for each instrumented\n         attribute on the instance and performs a comparison of the current\n-        value to its previously committed value, if any.\n+        value to its previously flushed or committed value, if any.\n \n         It is in effect a more expensive and accurate\n         version of checking for the given instance in the"
    },
    {
        "commit_id": "e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "commit_message": "Correct 'Session.is_modified' method documentation\n\nCorrect 'Session.is_modified' method documentation.\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nCorrect documentation according to discussion: https://github.com/sqlalchemy/sqlalchemy/discussions/11481#discussioncomment-9759171\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #11501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11501\nPull-request-sha: 16e949af544b4a1a94ccc5660e164fd2bca8be78\n\nChange-Id: Ia8be0e3865190f0667de006c3006ecf646ef8422\n(cherry picked from commit 30492d665ed7edc474d151f0854ed4837dcafaed)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e532a2c2084b3acddc3ce4e837711d5b2f6b0702",
        "buggy_code": "value to its previously committed value, if any.",
        "fixed_code": "value to its previously flushed or committed value, if any.",
        "patch": "@@ -4778,7 +4778,7 @@ def is_modified(\n \n         This method retrieves the history for each instrumented\n         attribute on the instance and performs a comparison of the current\n-        value to its previously committed value, if any.\n+        value to its previously flushed or committed value, if any.\n \n         It is in effect a more expensive and accurate\n         version of checking for the given instance in the"
    },
    {
        "commit_id": "d1394d9e05db647a7d4b116306274c99794f1186",
        "commit_message": "add additional contextual path info when splicing eager joins\n\nFixed very old issue involving the :paramref:`_orm.joinedload.innerjoin`\nparameter where making use of this parameter mixed into a query that also\nincluded joined eager loads along a self-referential or other cyclical\nrelationship, along with complicating factors like inner joins added for\nsecondary tables and such, would have the chance of splicing a particular\ninner join to the wrong part of the query.  Additional state has been added\nto the internal method that does this splice to make a better decision as\nto where splicing should proceed.\n\nFixes: #11449\nChange-Id: Ie8f0e8d9bb7958baac33c7c2231e4afae15cf5b1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d1394d9e05db647a7d4b116306274c99794f1186",
        "buggy_code": "_right_memo=other._left_memo,",
        "fixed_code": "_right_memo=None,",
        "patch": "@@ -1945,7 +1945,7 @@ def _splice_into_center(self, other):\n             self.onclause,\n             isouter=self.isouter,\n             _left_memo=self._left_memo,\n-            _right_memo=other._left_memo,\n+            _right_memo=None,\n         )\n \n         return _ORMJoin("
    },
    {
        "commit_id": "124026d56dd3b5b26ddb895e0a2edcda8d60f33a",
        "commit_message": "expand entity_isa to include simple \"isa\" in poly case\n\nFixed issue where the :func:`_orm.selectinload` and\n:func:`_orm.subqueryload` loader options would fail to take effect when\nmade against an inherited subclass that itself included a subclass-specific\n:paramref:`_orm.Mapper.with_polymorphic` setting.\n\nFixes: #11446\nChange-Id: I2df3ebedbe4aa9da58af99d7729e5f3052ad6abc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/124026d56dd3b5b26ddb895e0a2edcda8d60f33a",
        "buggy_code": "return mapper in given.with_polymorphic_mappers",
        "fixed_code": "return mapper in given.with_polymorphic_mappers or given.isa(mapper)",
        "patch": "@@ -2156,7 +2156,7 @@ def _entity_isa(given: _InternalEntityType[Any], mapper: Mapper[Any]) -> bool:\n             mapper\n         )\n     elif given.with_polymorphic_mappers:\n-        return mapper in given.with_polymorphic_mappers\n+        return mapper in given.with_polymorphic_mappers or given.isa(mapper)\n     else:\n         return given.isa(mapper)\n "
    },
    {
        "commit_id": "ab6df37dad5cccbd0328e83ed55c7cfed91344cb",
        "commit_message": "Add overload for ColumnCollection.get(col, default)\n\n### Description\nFixes #11328 by adding an overload to ColumnCollection when a non-None default is provided.\n\n### Checklist\nThis pull request is:\n\n- [ ] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\nCloses: #11329\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/11329\nPull-request-sha: 32db849e0df1db357df79df3a0dc2263a755d04e\n\nChange-Id: I8bef91c423fb7048ec8d4a7c99f70f0b1588c37a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ab6df37dad5cccbd0328e83ed55c7cfed91344cb",
        "buggy_code": "column = self.column = supercls_mapper.local_table.c.get(  # type: ignore # noqa: E501",
        "fixed_code": "column = self.column = supercls_mapper.local_table.c.get(  # type: ignore[assignment] # noqa: E501",
        "patch": "@@ -689,7 +689,7 @@ def declarative_scan(\n             supercls_mapper = class_mapper(decl_scan.inherits, False)\n \n             colname = column.name if column.name is not None else key\n-            column = self.column = supercls_mapper.local_table.c.get(  # type: ignore # noqa: E501\n+            column = self.column = supercls_mapper.local_table.c.get(  # type: ignore[assignment] # noqa: E501\n                 colname, column\n             )\n "
    },
    {
        "commit_id": "f4a0ff730cc753d4d6f947959c6551fd10d7d699",
        "commit_message": "only consider column / relationship attrs for subclass IN\n\nFixed issue in  :func:`_orm.selectin_polymorhpic` loader option where\nattributes defined with :func:`_orm.composite` on a superclass would cause\nan internal exception on load.\n\nDefine the prop for :class:`.PropRegistry` as a\n:class:`.StrategizedProperty`; we dont make path registries for\ndescriptor props like synonyms, composites, etc.\n\nFixes: #11291\nChange-Id: I6f16844d2483dc86ab402b0b8b1f09561498aa1f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f4a0ff730cc753d4d6f947959c6551fd10d7d699",
        "buggy_code": "for prop in self.attrs:",
        "fixed_code": "for prop in self.column_attrs + self.relationships:",
        "patch": "@@ -3831,7 +3831,7 @@ def _subclass_load_via_in(self, entity, polymorphic_from):\n             classes_to_include.add(m)\n             m = m.inherits\n \n-        for prop in self.attrs:\n+        for prop in self.column_attrs + self.relationships:\n             # skip prop keys that are not instrumented on the mapped class.\n             # this is primarily the \"_sa_polymorphic_on\" property that gets\n             # created for an ad-hoc polymorphic_on SQL expression, issue #8704"
    },
    {
        "commit_id": "f0ed44e89ea83dc2f994105dcd0c471bcb54d608",
        "commit_message": "Fix typo in sqlalchemy.event.api (#11325)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f0ed44e89ea83dc2f994105dcd0c471bcb54d608",
        "buggy_code": "This function generally shares the same kwargs as :func:`.listens`.",
        "fixed_code": "This function generally shares the same kwargs as :func:`.listen`.",
        "patch": "@@ -132,7 +132,7 @@ def listens_for(\n     The :func:`.listens_for` decorator is part of the primary interface for the\n     SQLAlchemy event system, documented at :ref:`event_toplevel`.\n \n-    This function generally shares the same kwargs as :func:`.listens`.\n+    This function generally shares the same kwargs as :func:`.listen`.\n \n     e.g.::\n "
    },
    {
        "commit_id": "e15890b455b14542bb17cdb208e6d3b723799ed6",
        "commit_message": "Merge \"Fix typing to support mypy 1.10\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e15890b455b14542bb17cdb208e6d3b723799ed6",
        "buggy_code": "util.update_wrapper(self, fget)",
        "fixed_code": "util.update_wrapper(self, fget)  # type: ignore[arg-type]",
        "patch": "@@ -1096,7 +1096,7 @@ def value(self, value):\n         self.expr = _unwrap_classmethod(expr)\n         self.custom_comparator = _unwrap_classmethod(custom_comparator)\n         self.update_expr = _unwrap_classmethod(update_expr)\n-        util.update_wrapper(self, fget)\n+        util.update_wrapper(self, fget)  # type: ignore[arg-type]\n \n     @overload\n     def __get__(self, instance: Any, owner: Literal[None]) -> Self: ..."
    },
    {
        "commit_id": "e15890b455b14542bb17cdb208e6d3b723799ed6",
        "commit_message": "Merge \"Fix typing to support mypy 1.10\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e15890b455b14542bb17cdb208e6d3b723799ed6",
        "buggy_code": "def __call__(self, obj: Any) -> str: ...",
        "fixed_code": "def __call__(self, obj: Any, /) -> str: ...",
        "patch": "@@ -7292,7 +7292,7 @@ def visit_user_defined(self, type_, **kw):\n \n \n class _SchemaForObjectCallable(Protocol):\n-    def __call__(self, obj: Any) -> str: ...\n+    def __call__(self, obj: Any, /) -> str: ...\n \n \n class _BindNameForColProtocol(Protocol):"
    },
    {
        "commit_id": "e15890b455b14542bb17cdb208e6d3b723799ed6",
        "commit_message": "Merge \"Fix typing to support mypy 1.10\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e15890b455b14542bb17cdb208e6d3b723799ed6",
        "buggy_code": "return super_type",
        "fixed_code": "return super_type  # type: ignore[return-value]",
        "patch": "@@ -339,7 +339,7 @@ def flatten_newtype(type_: NewType) -> Type[Any]:\n     super_type = type_.__supertype__\n     while is_newtype(super_type):\n         super_type = super_type.__supertype__\n-    return super_type\n+    return super_type  # type: ignore[return-value]\n \n \n def is_fwd_ref("
    },
    {
        "commit_id": "859dda8f0b2874fcf7f080d15411336047b89a64",
        "commit_message": "Fix typing to support mypy 1.10\n\nChange-Id: I77c0a04331a99c7be77c174721431a5601475dc3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/859dda8f0b2874fcf7f080d15411336047b89a64",
        "buggy_code": "util.update_wrapper(self, fget)",
        "fixed_code": "util.update_wrapper(self, fget)  # type: ignore[arg-type]",
        "patch": "@@ -1096,7 +1096,7 @@ def value(self, value):\n         self.expr = _unwrap_classmethod(expr)\n         self.custom_comparator = _unwrap_classmethod(custom_comparator)\n         self.update_expr = _unwrap_classmethod(update_expr)\n-        util.update_wrapper(self, fget)\n+        util.update_wrapper(self, fget)  # type: ignore[arg-type]\n \n     @overload\n     def __get__(self, instance: Any, owner: Literal[None]) -> Self: ..."
    },
    {
        "commit_id": "859dda8f0b2874fcf7f080d15411336047b89a64",
        "commit_message": "Fix typing to support mypy 1.10\n\nChange-Id: I77c0a04331a99c7be77c174721431a5601475dc3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/859dda8f0b2874fcf7f080d15411336047b89a64",
        "buggy_code": "def __call__(self, obj: Any) -> str: ...",
        "fixed_code": "def __call__(self, obj: Any, /) -> str: ...",
        "patch": "@@ -7292,7 +7292,7 @@ def visit_user_defined(self, type_, **kw):\n \n \n class _SchemaForObjectCallable(Protocol):\n-    def __call__(self, obj: Any) -> str: ...\n+    def __call__(self, obj: Any, /) -> str: ...\n \n \n class _BindNameForColProtocol(Protocol):"
    },
    {
        "commit_id": "859dda8f0b2874fcf7f080d15411336047b89a64",
        "commit_message": "Fix typing to support mypy 1.10\n\nChange-Id: I77c0a04331a99c7be77c174721431a5601475dc3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/859dda8f0b2874fcf7f080d15411336047b89a64",
        "buggy_code": "return super_type",
        "fixed_code": "return super_type  # type: ignore[return-value]",
        "patch": "@@ -339,7 +339,7 @@ def flatten_newtype(type_: NewType) -> Type[Any]:\n     super_type = type_.__supertype__\n     while is_newtype(super_type):\n         super_type = super_type.__supertype__\n-    return super_type\n+    return super_type  # type: ignore[return-value]\n \n \n def is_fwd_ref("
    },
    {
        "commit_id": "af4df5e2a2405cfef3aa26bbb8f48e24d954a370",
        "commit_message": "fix usage of kwargs to execute in docs\n\nChange-Id: I033cba49ba6c12113643b88e48c5917f2b70a307",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/af4df5e2a2405cfef3aa26bbb8f48e24d954a370",
        "buggy_code": "conn.execute(table.insert(), data=null())",
        "fixed_code": "conn.execute(table.insert(), {\"data\": null()})",
        "patch": "@@ -155,7 +155,7 @@ def __init__(self, none_as_null=False, astext_type=None):\n          be used to persist a NULL value::\n \n              from sqlalchemy import null\n-             conn.execute(table.insert(), data=null())\n+             conn.execute(table.insert(), {\"data\": null()})\n \n          .. seealso::\n "
    },
    {
        "commit_id": "e4fa1745839c5a793b2ef2d04d9077f5be65f400",
        "commit_message": "Fixes: #10933 typing in ColumnExpressionArgument\n\n### Description\nFixes: #10933 typing in ColumnExpressionArgument\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10959\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10959\nPull-request-sha: 6fed2cf1d1ba78e9101a3608bd0cf70f2abb3232\n\nChange-Id: I43420add824881e7cc0ec93e3c8b9a04d33e30df",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e4fa1745839c5a793b2ef2d04d9077f5be65f400",
        "buggy_code": "fn: _LambdaType,",
        "fixed_code": "fn: _AnyLambdaType,",
        "patch": "@@ -437,7 +437,7 @@ class DeferredLambdaElement(LambdaElement):\n \n     def __init__(\n         self,\n-        fn: _LambdaType,\n+        fn: _AnyLambdaType,\n         role: Type[roles.SQLRole],\n         opts: Union[Type[LambdaOptions], LambdaOptions] = LambdaOptions,\n         lambda_args: Tuple[Any, ...] = (),"
    },
    {
        "commit_id": "8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "commit_message": "fix typos in docs\n\nChange-Id: Iaba3c5979af626055acb0068cc8aac0c7334b0e0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "buggy_code": "\"The :method:`.Result.tuples` method is deprecated, :class:`.Row` \"",
        "fixed_code": "\"The :meth:`.Result.tuples` method is deprecated, :class:`.Row` \"",
        "patch": "@@ -1232,7 +1232,7 @@ def t(self) -> TupleResult[Tuple[Unpack[_Ts]]]:\n \n     @deprecated(\n         \"2.1.0\",\n-        \"The :method:`.Result.tuples` method is deprecated, :class:`.Row` \"\n+        \"The :meth:`.Result.tuples` method is deprecated, :class:`.Row` \"\n         \"now behaves like a tuple and can unpack types directly.\",\n     )\n     def tuples(self) -> TupleResult[Tuple[Unpack[_Ts]]]:"
    },
    {
        "commit_id": "8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "commit_message": "fix typos in docs\n\nChange-Id: Iaba3c5979af626055acb0068cc8aac0c7334b0e0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "buggy_code": "\"The :method:`.AsyncResult.tuples` method is deprecated, \"",
        "fixed_code": "\"The :meth:`.AsyncResult.tuples` method is deprecated, \"",
        "patch": "@@ -130,7 +130,7 @@ def t(self) -> AsyncTupleResult[Tuple[Unpack[_Ts]]]:\n \n     @deprecated(\n         \"2.1.0\",\n-        \"The :method:`.AsyncResult.tuples` method is deprecated, \"\n+        \"The :meth:`.AsyncResult.tuples` method is deprecated, \"\n         \":class:`.Row` now behaves like a tuple and can unpack types \"\n         \"directly.\",\n     )"
    },
    {
        "commit_id": "8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "commit_message": "fix typos in docs\n\nChange-Id: Iaba3c5979af626055acb0068cc8aac0c7334b0e0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a171bb3391e916d19ddf853dc2f9f5e5756c16e",
        "buggy_code": "\"The :method:`.Query.tuples` method is deprecated, :class:`.Row` \"",
        "fixed_code": "\"The :meth:`.Query.tuples` method is deprecated, :class:`.Row` \"",
        "patch": "@@ -300,7 +300,7 @@ def _set_entities(\n \n     @deprecated(\n         \"2.1.0\",\n-        \"The :method:`.Query.tuples` method is deprecated, :class:`.Row` \"\n+        \"The :meth:`.Query.tuples` method is deprecated, :class:`.Row` \"\n         \"now behaves like a tuple and can unpack types directly.\",\n     )\n     def tuples(self: Query[_O]) -> Query[Tuple[_O]]:"
    },
    {
        "commit_id": "d75281a684c72eb76fceaf3973b9ec260ab6b612",
        "commit_message": "Merge \"Fix typing generics in PostgreSQL range types.\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d75281a684c72eb76fceaf3973b9ec260ab6b612",
        "buggy_code": "class _Psycopg2Range(ranges.AbstractRangeImpl):",
        "fixed_code": "class _Psycopg2Range(ranges.AbstractSingleRangeImpl):",
        "patch": "@@ -513,7 +513,7 @@ def result_processor(self, dialect, coltype):\n         return None\n \n \n-class _Psycopg2Range(ranges.AbstractRangeImpl):\n+class _Psycopg2Range(ranges.AbstractSingleRangeImpl):\n     _psycopg2_range_cls = \"none\"\n \n     def bind_processor(self, dialect):"
    },
    {
        "commit_id": "4006cb38e13ac471655f5f27102678ed8933ee60",
        "commit_message": "Fix typing generics in PostgreSQL range types.\n\nCorrectly type PostgreSQL RANGE and MULTIRANGE types as ``Range[T]``\nand ``Sequence[Range[T]]``.\nIntroduced utility sequence ``MultiRange`` to allow better\ninteroperability of MULTIRANGE types.\n\nFixes #9736\nCloses: #10625\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10625\nPull-request-sha: 2c17bc5f922a2bdb805a29e458184076ccc08055\n\nChange-Id: I4f91d0233b29fd8101e67bdd4cd0aa2524ab788a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4006cb38e13ac471655f5f27102678ed8933ee60",
        "buggy_code": "class _Psycopg2Range(ranges.AbstractRangeImpl):",
        "fixed_code": "class _Psycopg2Range(ranges.AbstractSingleRangeImpl):",
        "patch": "@@ -513,7 +513,7 @@ def result_processor(self, dialect, coltype):\n         return None\n \n \n-class _Psycopg2Range(ranges.AbstractRangeImpl):\n+class _Psycopg2Range(ranges.AbstractSingleRangeImpl):\n     _psycopg2_range_cls = \"none\"\n \n     def bind_processor(self, dialect):"
    },
    {
        "commit_id": "e7cda85d81038cf390a15b93d5276754a8cc2514",
        "commit_message": "Fix typo in a docstring (#10925)\n\n* Fix typo in a docstring\r\n\r\nIt's \"compiled_cache\" not \"query_cache\".\r\n\r\n* Update async engine as well",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7cda85d81038cf390a15b93d5276754a8cc2514",
        "buggy_code": ":paramref:`.Connection.execution_options.query_cache` parameter.",
        "fixed_code": ":paramref:`.Connection.execution_options.compiled_cache` parameter.",
        "patch": "@@ -2994,7 +2994,7 @@ def clear_compiled_cache(self) -> None:\n         This applies **only** to the built-in cache that is established\n         via the :paramref:`_engine.create_engine.query_cache_size` parameter.\n         It will not impact any dictionary caches that were passed via the\n-        :paramref:`.Connection.execution_options.query_cache` parameter.\n+        :paramref:`.Connection.execution_options.compiled_cache` parameter.\n \n         .. versionadded:: 1.4\n "
    },
    {
        "commit_id": "e7cda85d81038cf390a15b93d5276754a8cc2514",
        "commit_message": "Fix typo in a docstring (#10925)\n\n* Fix typo in a docstring\r\n\r\nIt's \"compiled_cache\" not \"query_cache\".\r\n\r\n* Update async engine as well",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7cda85d81038cf390a15b93d5276754a8cc2514",
        "buggy_code": ":paramref:`.Connection.execution_options.query_cache` parameter.",
        "fixed_code": ":paramref:`.Connection.execution_options.compiled_cache` parameter.",
        "patch": "@@ -1168,7 +1168,7 @@ def clear_compiled_cache(self) -> None:\n         This applies **only** to the built-in cache that is established\n         via the :paramref:`_engine.create_engine.query_cache_size` parameter.\n         It will not impact any dictionary caches that were passed via the\n-        :paramref:`.Connection.execution_options.query_cache` parameter.\n+        :paramref:`.Connection.execution_options.compiled_cache` parameter.\n \n         .. versionadded:: 1.4\n "
    },
    {
        "commit_id": "eff3aa8ad6bf74181280a85bf03d401126c65b01",
        "commit_message": "catch OSError (base of ConnectionError) and asyncpg errors for terminate\n\nFixed regression in the asyncpg dialect caused by :ticket:`10717` in\nrelease 2.0.24 where the change that now attempts to gracefully close the\nasyncpg connection before terminating would not fall back to\n``terminate()`` for other potential connection-related exceptions other\nthan a timeout error, not taking into account cases where the graceful\n``.close()`` attempt fails for other reasons such as connection errors.\n\nFixes: #10863\nChange-Id: If1791bce26803f92547cdf26fb641996c7f638fa",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/eff3aa8ad6bf74181280a85bf03d401126c65b01",
        "buggy_code": "except asyncio.TimeoutError:",
        "fixed_code": "except (asyncio.TimeoutError, OSError, self.dbapi.PostgresError):",
        "patch": "@@ -927,7 +927,7 @@ def terminate(self):\n                 # try to gracefully close; see #10717\n                 # timeout added in asyncpg 0.14.0 December 2017\n                 await_(self._connection.close(timeout=2))\n-            except asyncio.TimeoutError:\n+            except (asyncio.TimeoutError, OSError, self.dbapi.PostgresError):\n                 # in the case where we are recycling an old connection\n                 # that may have already been disconnected, close() will\n                 # fail with the above timeout.  in this case, terminate"
    },
    {
        "commit_id": "86f335c29e9f4d9a8e2b28dd75301f28f5f9f4f1",
        "commit_message": "fix(attribute_keyed_dict): using Any instead of TypeVar (#10746)\n\nCo-authored-by: Mehdi Gmira <mgmira@wiremind.io>",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/86f335c29e9f4d9a8e2b28dd75301f28f5f9f4f1",
        "buggy_code": ") -> Type[KeyFuncDict[_KT, _KT]]:",
        "fixed_code": ") -> Type[KeyFuncDict[Any, Any]]:",
        "patch": "@@ -231,7 +231,7 @@ def __reduce__(self) -> Tuple[Type[_AttrGetter], Tuple[str]]:\n \n def attribute_keyed_dict(\n     attr_name: str, *, ignore_unpopulated_attribute: bool = False\n-) -> Type[KeyFuncDict[_KT, _KT]]:\n+) -> Type[KeyFuncDict[Any, Any]]:\n     \"\"\"A dictionary-based collection type with attribute-based keying.\n \n     .. versionchanged:: 2.0 Renamed :data:`.attribute_mapped_collection` to"
    },
    {
        "commit_id": "7bc33ca55144d2716b175c733c0d6865572787aa",
        "commit_message": "fully update to flake8 6.1.0\n\nI updated flake8 in pre-commit a few days ago but forgot to do it in\ntox.\n\nthis flake seems to be picking inside of f-strings, which black does\nnot fix, so fix these manually.\n\nChange-Id: I9a641a99e280fbba9d893a6f1f051b5039d5d4eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bc33ca55144d2716b175c733c0d6865572787aa",
        "buggy_code": "f\"{index+1} reflected as None but no \"",
        "fixed_code": "f\"{index + 1} reflected as None but no \"",
        "patch": "@@ -1843,7 +1843,7 @@ def _reflect_indexes(\n                     if not expressions:\n                         util.warn(\n                             f\"Skipping {flavor} {name!r} because key \"\n-                            f\"{index+1} reflected as None but no \"\n+                            f\"{index + 1} reflected as None but no \"\n                             \"'expressions' were returned\"\n                         )\n                         break"
    },
    {
        "commit_id": "7bc33ca55144d2716b175c733c0d6865572787aa",
        "commit_message": "fully update to flake8 6.1.0\n\nI updated flake8 in pre-commit a few days ago but forgot to do it in\ntox.\n\nthis flake seems to be picking inside of f-strings, which black does\nnot fix, so fix these manually.\n\nChange-Id: I9a641a99e280fbba9d893a6f1f051b5039d5d4eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bc33ca55144d2716b175c733c0d6865572787aa",
        "buggy_code": "tname = f\"##foo{random.randint(1,1000000)}\"",
        "fixed_code": "tname = f\"##foo{random.randint(1, 1000000)}\"",
        "patch": "@@ -389,7 +389,7 @@ def test_global_temp_different_collation(\n     ):\n         \"\"\"test #8035\"\"\"\n \n-        tname = f\"##foo{random.randint(1,1000000)}\"\n+        tname = f\"##foo{random.randint(1, 1000000)}\"\n \n         with temp_db_alt_collation_fixture.connect() as conn:\n             conn.exec_driver_sql(f\"CREATE TABLE {tname} (id int primary key)\")"
    },
    {
        "commit_id": "7bc33ca55144d2716b175c733c0d6865572787aa",
        "commit_message": "fully update to flake8 6.1.0\n\nI updated flake8 in pre-commit a few days ago but forgot to do it in\ntox.\n\nthis flake seems to be picking inside of f-strings, which black does\nnot fix, so fix these manually.\n\nChange-Id: I9a641a99e280fbba9d893a6f1f051b5039d5d4eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bc33ca55144d2716b175c733c0d6865572787aa",
        "buggy_code": "col = f\"c{i+1}\"",
        "fixed_code": "col = f\"c{i + 1}\"",
        "patch": "@@ -1227,7 +1227,7 @@ def _run_test(self, metadata, connection, specs, attributes):\n             for attr in attributes:\n                 r_attr = getattr(reflected_type, attr)\n                 e_attr = getattr(expected_spec, attr)\n-                col = f\"c{i+1}\"\n+                col = f\"c{i + 1}\"\n                 eq_(\n                     r_attr,\n                     e_attr,"
    },
    {
        "commit_id": "7bc33ca55144d2716b175c733c0d6865572787aa",
        "commit_message": "fully update to flake8 6.1.0\n\nI updated flake8 in pre-commit a few days ago but forgot to do it in\ntox.\n\nthis flake seems to be picking inside of f-strings, which black does\nnot fix, so fix these manually.\n\nChange-Id: I9a641a99e280fbba9d893a6f1f051b5039d5d4eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bc33ca55144d2716b175c733c0d6865572787aa",
        "buggy_code": "f\"table_{table_num}_col_{i+1}\",",
        "fixed_code": "f\"table_{table_num}_col_{i + 1}\",",
        "patch": "@@ -38,7 +38,7 @@ def generate_table(meta: sa.MetaData, min_cols, max_cols, dialect_name):\n             args.append(sa.ForeignKey(f\"table_{target}.table_{target}_col_1\"))\n         cols.append(\n             sa.Column(\n-                f\"table_{table_num}_col_{i+1}\",\n+                f\"table_{table_num}_col_{i + 1}\",\n                 *args,\n                 primary_key=i == 0,\n                 comment=f\"primary key of table_{table_num}\""
    },
    {
        "commit_id": "87929a9c55163ebcd7edd031d222c7f115922842",
        "commit_message": "add local column to dependency rule error message\n\nImproved the error message produced when the unit of work process sets the\nvalue of a primary key column to NULL due to a related object with a\ndependency rule on that column being deleted, to include not just the\ndestination object and column name but also the source column from which\nthe NULL value is originating.  Pull request courtesy Jan Vollmer.\n\nFixes: #10668\nCloses: #10669\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10669\nPull-request-sha: d7f9952b81394d585e55dad6d6f355aaa54f599e\n\nChange-Id: I210317f8777ff07d9eec674b79f2140523af38d0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/87929a9c55163ebcd7edd031d222c7f115922842",
        "buggy_code": "\"Dependency rule tried to blank-out primary key \"",
        "fixed_code": "\"Dependency rule on column 't1.id' tried to blank-out primary key \"",
        "patch": "@@ -145,7 +145,7 @@ def test_clear_pk(self):\n         eq_(b1.obj().__dict__[\"id\"], 8)\n         assert_raises_message(\n             AssertionError,\n-            \"Dependency rule tried to blank-out primary key \"\n+            \"Dependency rule on column 't1.id' tried to blank-out primary key \"\n             \"column 't2.id' on instance '<B\",\n             sync.clear,\n             b1,"
    },
    {
        "commit_id": "55bf2bf971cda82c2e3f58e9c211c74c3a6394a8",
        "commit_message": "Update type annotation for DBAPI Cursor's executemany()\n\n### Description\nAs per https://groups.google.com/g/sqlalchemy/c/DkyffAgDmwM, fixes an issue with the DBAPI cursor's executemany() type signature.\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10644\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10644\nPull-request-sha: 0a1fe849b54e35cd5e417da79556dc94be3a0abc\n\nChange-Id: I3af344f052a2f306876a528c528b1bf9cc0bdaa6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/55bf2bf971cda82c2e3f58e9c211c74c3a6394a8",
        "buggy_code": "parameters: Sequence[_DBAPIMultiExecuteParams],",
        "fixed_code": "parameters: _DBAPIMultiExecuteParams,",
        "patch": "@@ -194,7 +194,7 @@ def execute(\n     def executemany(\n         self,\n         operation: Any,\n-        parameters: Sequence[_DBAPIMultiExecuteParams],\n+        parameters: _DBAPIMultiExecuteParams,\n     ) -> Any:\n         ...\n "
    },
    {
        "commit_id": "9b14d2078c314d74dfb3a147259cb9619bee3372",
        "commit_message": "Typing updates to fix errors found by mypy 1.7\n\nChange-Id: I02046a72df88a82c8bc6e40b41f9d5b0d01a163e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9b14d2078c314d74dfb3a147259cb9619bee3372",
        "buggy_code": "if not typing.TYPE_CHECKING and hasattr(ep, \"select\"):",
        "fixed_code": "if hasattr(ep, \"select\"):",
        "patch": "@@ -166,7 +166,7 @@ async def anext_(async_iterator, default=_NOT_PROVIDED):\n \n def importlib_metadata_get(group):\n     ep = importlib_metadata.entry_points()\n-    if not typing.TYPE_CHECKING and hasattr(ep, \"select\"):\n+    if hasattr(ep, \"select\"):\n         return ep.select(group=group)\n     else:\n         return ep.get(group, ())"
    },
    {
        "commit_id": "147f83489dd77f2432500c2096ebd3030bc19fe2",
        "commit_message": "Merge \"Fix identity column reflection failure\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/147f83489dd77f2432500c2096ebd3030bc19fe2",
        "buggy_code": "return cast(colexpr, Numeric)",
        "fixed_code": "return cast(colexpr, Numeric(38, 0))",
        "patch": "@@ -211,7 +211,7 @@ class NumericSqlVariant(TypeDecorator):\n     cache_ok = True\n \n     def column_expression(self, colexpr):\n-        return cast(colexpr, Numeric)\n+        return cast(colexpr, Numeric(38, 0))\n \n \n identity_columns = Table("
    },
    {
        "commit_id": "4c46ed6a9f6f93abd5abe5ba4b95c4c1e8f52a4c",
        "commit_message": "Fix identity column reflection failure\n\nFixes: #10504\n\nFix reflection failure for bigint identity column with\na large identity start value (more than 18 digits).\n\nChange-Id: I8a7ec114e4596b1710d789a4a4fb08013edd80ce",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4c46ed6a9f6f93abd5abe5ba4b95c4c1e8f52a4c",
        "buggy_code": "return cast(colexpr, Numeric)",
        "fixed_code": "return cast(colexpr, Numeric(38, 0))",
        "patch": "@@ -211,7 +211,7 @@ class NumericSqlVariant(TypeDecorator):\n     cache_ok = True\n \n     def column_expression(self, colexpr):\n-        return cast(colexpr, Numeric)\n+        return cast(colexpr, Numeric(38, 0))\n \n \n identity_columns = Table("
    },
    {
        "commit_id": "c94ec5f143691c99e3bbfa76945ac382f85bdd48",
        "commit_message": "Fix `get_one` return value description\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nThe `get_one()` method is described as raising an error if no row is found instead of returning `None` (as `get()` does). Also, the return type hint prohibits `None`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10473\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10473\nPull-request-sha: 1cd2c2a2df2c91a303e459c8f0c5dc950d8c7b39\n\nChange-Id: Iaf69b05d99f4ed0df922f34f27be0b46c1410f7e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c94ec5f143691c99e3bbfa76945ac382f85bdd48",
        "buggy_code": ":return: The object instance, or ``None``.",
        "fixed_code": ":return: The object instance.",
        "patch": "@@ -1099,7 +1099,7 @@ def get_one(\n \n         .. versionadded:: 2.0.22\n \n-        :return: The object instance, or ``None``.\n+        :return: The object instance.\n \n         .. seealso::\n "
    },
    {
        "commit_id": "c94ec5f143691c99e3bbfa76945ac382f85bdd48",
        "commit_message": "Fix `get_one` return value description\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nThe `get_one()` method is described as raising an error if no row is found instead of returning `None` (as `get()` does). Also, the return type hint prohibits `None`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10473\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10473\nPull-request-sha: 1cd2c2a2df2c91a303e459c8f0c5dc950d8c7b39\n\nChange-Id: Iaf69b05d99f4ed0df922f34f27be0b46c1410f7e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c94ec5f143691c99e3bbfa76945ac382f85bdd48",
        "buggy_code": ":return: The object instance, or ``None``.",
        "fixed_code": ":return: The object instance.",
        "patch": "@@ -3683,7 +3683,7 @@ def get_one(\n \n         .. versionadded:: 2.0.22\n \n-        :return: The object instance, or ``None``.\n+        :return: The object instance.\n \n         .. seealso::\n "
    },
    {
        "commit_id": "20c1b1b1ede5d66e38ca1c4ae4a708fc33245b1d",
        "commit_message": "dont enter do_executemany if implicit_returning is False\n\nFixed regression in recently revised \"insertmanyvalues\" feature (likely\nissue :ticket:`9618`) where the ORM would inadvertently attempt to\ninterpret a non-RETURNING result as one with RETURNING, in the case where\nthe ``implicit_returning=False`` parameter were applied to the mapped\n:class:`.Table`, indicating that \"insertmanyvalues\" cannot be used if the\nprimary key values are not provided.\n\nThis includes a refinement to insertmanyvalues where we consider\nreturn_defaults() with supplemental_cols to be the same as an explicit\nreturning(), since that's the purpose of this.  This saves us some\nextra exceptions that could be thrown per-dialect if implicit_returning\nwere set to False in some cases.\n\nFixed issue within some dialects where the dialect could incorrectly return\nan empty result set for an INSERT statement that does not actually return\nrows at all, due to artfacts from pre- or post-fetching the primary key of\nthe row or rows still being present.  Affected dialects included asyncpg,\nall mssql dialects.\n\nFixes: #10453\nChange-Id: Ie2e7e4f4cd9180558f9da315d21895347ec6d4f7",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/20c1b1b1ede5d66e38ca1c4ae4a708fc33245b1d",
        "buggy_code": "not hasvalue and len(records) > 1",
        "fixed_code": "table.implicit_returning and not hasvalue and len(records) > 1",
        "patch": "@@ -1082,7 +1082,7 @@ def _emit_insert_statements(\n             records = list(records)\n \n             if returning_is_required_anyway or (\n-                not hasvalue and len(records) > 1\n+                table.implicit_returning and not hasvalue and len(records) > 1\n             ):\n                 if (\n                     deterministic_results_reqd"
    },
    {
        "commit_id": "dddb87ac6eb6be08b667b5dae5b52d1087ba8057",
        "commit_message": "Merge \"Fix typo in Session.get_one() docs\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dddb87ac6eb6be08b667b5dae5b52d1087ba8057",
        "buggy_code": "..versionadded: 2.0.22",
        "fixed_code": ".. versionadded:: 2.0.22",
        "patch": "@@ -1097,7 +1097,7 @@ def get_one(\n         For a detailed documentation of the arguments see the\n         method :meth:`.Session.get`.\n \n-        ..versionadded: 2.0.22\n+        .. versionadded:: 2.0.22\n \n         :return: The object instance, or ``None``.\n "
    },
    {
        "commit_id": "dddb87ac6eb6be08b667b5dae5b52d1087ba8057",
        "commit_message": "Merge \"Fix typo in Session.get_one() docs\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dddb87ac6eb6be08b667b5dae5b52d1087ba8057",
        "buggy_code": "..versionadded: 2.0.22",
        "fixed_code": ".. versionadded:: 2.0.22",
        "patch": "@@ -3671,7 +3671,7 @@ def get_one(\n         For a detailed documentation of the arguments see the\n         method :meth:`.Session.get`.\n \n-        ..versionadded: 2.0.22\n+        .. versionadded:: 2.0.22\n \n         :return: The object instance, or ``None``.\n "
    },
    {
        "commit_id": "890fd0cd363a0c06b780e54751fae468a9926abe",
        "commit_message": "Fix typo in Session.get_one() docs\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\nA typo in the docstrings [here](https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session.get_one) shows the incorrectly formatted text:\n\n![Screenshot 2023-10-07 at 16 24 19](https://github.com/sqlalchemy/sqlalchemy/assets/12053937/95cbfbfa-dac3-465a-8e27-ec8e2a223117)\n\nThis pull request is:\n\n- [X] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10437\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10437\nPull-request-sha: 82ef25ecbc5b39487b5b55bedb43df9c2a57ae2e\n\nChange-Id: I4ae54733c4bd63239fc94a7fd2099bb3896718ca",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/890fd0cd363a0c06b780e54751fae468a9926abe",
        "buggy_code": "..versionadded: 2.0.22",
        "fixed_code": ".. versionadded:: 2.0.22",
        "patch": "@@ -1097,7 +1097,7 @@ def get_one(\n         For a detailed documentation of the arguments see the\n         method :meth:`.Session.get`.\n \n-        ..versionadded: 2.0.22\n+        .. versionadded:: 2.0.22\n \n         :return: The object instance, or ``None``.\n "
    },
    {
        "commit_id": "890fd0cd363a0c06b780e54751fae468a9926abe",
        "commit_message": "Fix typo in Session.get_one() docs\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\nA typo in the docstrings [here](https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session.get_one) shows the incorrectly formatted text:\n\n![Screenshot 2023-10-07 at 16 24 19](https://github.com/sqlalchemy/sqlalchemy/assets/12053937/95cbfbfa-dac3-465a-8e27-ec8e2a223117)\n\nThis pull request is:\n\n- [X] A documentation / typographical / small typing error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #10437\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10437\nPull-request-sha: 82ef25ecbc5b39487b5b55bedb43df9c2a57ae2e\n\nChange-Id: I4ae54733c4bd63239fc94a7fd2099bb3896718ca",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/890fd0cd363a0c06b780e54751fae468a9926abe",
        "buggy_code": "..versionadded: 2.0.22",
        "fixed_code": ".. versionadded:: 2.0.22",
        "patch": "@@ -3671,7 +3671,7 @@ def get_one(\n         For a detailed documentation of the arguments see the\n         method :meth:`.Session.get`.\n \n-        ..versionadded: 2.0.22\n+        .. versionadded:: 2.0.22\n \n         :return: The object instance, or ``None``.\n "
    },
    {
        "commit_id": "68784bd8b3915ae2c670ebbc1832312cd8009f8f",
        "commit_message": "invoke mariadb-connector .rowcount after all statements\n\nModified the mariadb-connector driver to pre-load the ``cursor.rowcount``\nvalue for all queries, to suit tools such as Pandas that hardcode to\ncalling :attr:`.Result.rowcount` in this way. SQLAlchemy normally pre-loads\n``cursor.rowcount`` only for UPDATE/DELETE statements and otherwise passes\nthrough to the DBAPI where it can return -1 if no value is available.\nHowever, mariadb-connector does not support invoking ``cursor.rowcount``\nafter the cursor itself is closed, raising an error instead.  Generic test\nsupport has been added to ensure all backends support the allowing\n:attr:`.Result.rowcount` to succceed (that is, returning an integer value\nwith -1 for \"not available\") after the result is closed.\n\nThis change also restores mariadb-connector to CI including\nas part of the \"dbdriver\" suite; in 366a5e3e2e503a20ef0334fbf9f we had\ntaken it out of the DBAPI main job.\n\nAdditional fixes for the mariadb-connector dialect to support UUID data\nvalues in the result in INSERT..RETURNING statements.\n\nAdded rounding to one remaining INSERT..RETURNING with floats test\nto allow mariadbconnector to pass (likely similar issue as the one with\nUUID but not worth making a new handler)\n\nFixes: #10396\nChange-Id: Ic11b1b5d0c41356863829d0eacbb812d401e8dd1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/68784bd8b3915ae2c670ebbc1832312cd8009f8f",
        "buggy_code": "DBAPI says, it does *not* return the",
        "fixed_code": "DBAPI says, it does *not* reliably return the",
        "patch": "@@ -1995,7 +1995,7 @@ def rowcount(self) -> int:\n            * :attr:`_engine.CursorResult.rowcount`\n              is *only* useful in conjunction\n              with an UPDATE or DELETE statement.  Contrary to what the Python\n-             DBAPI says, it does *not* return the\n+             DBAPI says, it does *not* reliably return the\n              number of rows available from the results of a SELECT statement\n              as DBAPIs cannot support this functionality when rows are\n              unbuffered."
    },
    {
        "commit_id": "68784bd8b3915ae2c670ebbc1832312cd8009f8f",
        "commit_message": "invoke mariadb-connector .rowcount after all statements\n\nModified the mariadb-connector driver to pre-load the ``cursor.rowcount``\nvalue for all queries, to suit tools such as Pandas that hardcode to\ncalling :attr:`.Result.rowcount` in this way. SQLAlchemy normally pre-loads\n``cursor.rowcount`` only for UPDATE/DELETE statements and otherwise passes\nthrough to the DBAPI where it can return -1 if no value is available.\nHowever, mariadb-connector does not support invoking ``cursor.rowcount``\nafter the cursor itself is closed, raising an error instead.  Generic test\nsupport has been added to ensure all backends support the allowing\n:attr:`.Result.rowcount` to succceed (that is, returning an integer value\nwith -1 for \"not available\") after the result is closed.\n\nThis change also restores mariadb-connector to CI including\nas part of the \"dbdriver\" suite; in 366a5e3e2e503a20ef0334fbf9f we had\ntaken it out of the DBAPI main job.\n\nAdditional fixes for the mariadb-connector dialect to support UUID data\nvalues in the result in INSERT..RETURNING statements.\n\nAdded rounding to one remaining INSERT..RETURNING with floats test\nto allow mariadbconnector to pass (likely similar issue as the one with\nUUID but not worth making a new handler)\n\nFixes: #10396\nChange-Id: Ic11b1b5d0c41356863829d0eacbb812d401e8dd1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/68784bd8b3915ae2c670ebbc1832312cd8009f8f",
        "buggy_code": "(Float(), 8.5514, False),",
        "fixed_code": "(Float(), 8.5514, True),",
        "patch": "@@ -394,7 +394,7 @@ def test_insertmanyvalues_returning(self, connection):\n             True,\n             testing.requires.float_or_double_precision_behaves_generically,\n         ),\n-        (Float(), 8.5514, False),\n+        (Float(), 8.5514, True),\n         (\n             Float(8),\n             8.5514,"
    },
    {
        "commit_id": "bb4fb3d477a968115716fdff4ce837cdde357353",
        "commit_message": "Fix Existing.select_from type definition\n\nFixed typing issue with :meth:`_sql.Existing.select_from` that\nprevented its use with ORM classes.\n\nFixes: #10337\nChange-Id: I4324c09054803f0b1ae7c4bde202cad0b55e1a4f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bb4fb3d477a968115716fdff4ce837cdde357353",
        "buggy_code": "def select_from(self, *froms: FromClause) -> Self:",
        "fixed_code": "def select_from(self, *froms: _FromClauseArgument) -> Self:",
        "patch": "@@ -6728,7 +6728,7 @@ def correlate_except(\n         )\n         return e\n \n-    def select_from(self, *froms: FromClause) -> Self:\n+    def select_from(self, *froms: _FromClauseArgument) -> Self:\n         \"\"\"Return a new :class:`_expression.Exists` construct,\n         applying the given\n         expression to the :meth:`_expression.Select.select_from`"
    },
    {
        "commit_id": "aed8ac5985c37eb6b7ced996cc0329ca31e4748d",
        "commit_message": "Fix async ORM example\n\nReverting change from b3216486 that causes error\n\nsqlalchemy.exc.MultipleResultsFound: Multiple rows were found when exactly one was required\n\nChange-Id: I9b249ff6e8e336f9c224e670359b4df99bc06092",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aed8ac5985c37eb6b7ced996cc0329ca31e4748d",
        "buggy_code": "a1 = result.one()",
        "fixed_code": "a1 = result.first()",
        "patch": "@@ -96,7 +96,7 @@ async def async_main():\n \n         result = await session.scalars(select(A).order_by(A.id))\n \n-        a1 = result.one()\n+        a1 = result.first()\n \n         a1.data = \"new data\"\n "
    },
    {
        "commit_id": "d1c6617a22d1cb1887245c9b5182ee289871483c",
        "commit_message": "automatically create proxy col for already-used col in values\n\nThe :class:`.Values` construct will now automatically create a proxy (i.e.\na copy) of a :class:`_sql.column` if the column were already associated\nwith an existing FROM clause.  This allows that an expression like\n``values_obj.c.colname`` will produce the correct FROM clause even in the\ncase that ``colname`` was passed as a :class:`_sql.column` that was already\nused with a previous :class:`.Values` or other table construct.\nOriginally this was considered to be a candidate for an error condition,\nhowever it's likely this pattern is already in widespread use so it's\nnow added to support.\n\n* adjust unrelated dml test recently added for update..returning *\n  case to not rely upon ordering\n\nFixes: #10280\nChange-Id: I6e60e5b7cb7abd6a7bbd4722970ebf025596ab9c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d1c6617a22d1cb1887245c9b5182ee289871483c",
        "buggy_code": "eq_(result.all(), [(2, \"jack\", 37), (4, \"jane\", 27)])",
        "fixed_code": "eq_(set(result), {(2, \"jack\", 37), (4, \"jane\", 27)})",
        "patch": "@@ -1114,7 +1114,7 @@ def test_update_returning_star(self):\n         )\n \n         result = sess.execute(stmt)\n-        eq_(result.all(), [(2, \"jack\", 37), (4, \"jane\", 27)])\n+        eq_(set(result), {(2, \"jack\", 37), (4, \"jane\", 27)})\n \n         eq_([john.age, jack.age, jill.age, jane.age], [25, 37, 29, 27])\n         eq_("
    },
    {
        "commit_id": "5f0c591c744ddf17cf5d886aec21e242eb58562f",
        "commit_message": "Merge \"Fix type hint of `key` on `Visitable.__class_getitem__()`\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f0c591c744ddf17cf5d886aec21e242eb58562f",
        "buggy_code": "def __class_getitem__(cls: Type[_T], key: str) -> Type[_T]:",
        "fixed_code": "def __class_getitem__(cls: Type[_T], key: Any) -> Type[_T]:",
        "patch": "@@ -1556,7 +1556,7 @@ class using subclassing, rather than return value of a function.\n \n         if hasattr(cls, \"__class_getitem__\"):\n \n-            def __class_getitem__(cls: Type[_T], key: str) -> Type[_T]:\n+            def __class_getitem__(cls: Type[_T], key: Any) -> Type[_T]:\n                 # allow generic classes in py3.9+\n                 return cls\n "
    },
    {
        "commit_id": "5f0c591c744ddf17cf5d886aec21e242eb58562f",
        "commit_message": "Merge \"Fix type hint of `key` on `Visitable.__class_getitem__()`\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f0c591c744ddf17cf5d886aec21e242eb58562f",
        "buggy_code": "def __class_getitem__(cls, key: str) -> Any:",
        "fixed_code": "def __class_getitem__(cls, key: Any) -> Any:",
        "patch": "@@ -146,7 +146,7 @@ def _compiler_dispatch(\n             cls._original_compiler_dispatch\n         ) = _compiler_dispatch\n \n-    def __class_getitem__(cls, key: str) -> Any:\n+    def __class_getitem__(cls, key: Any) -> Any:\n         # allow generic classes in py3.9+\n         return cls\n "
    },
    {
        "commit_id": "df126fe0d1799367572af6410b76850eebcd1100",
        "commit_message": "Fix type hint of `key` on `Visitable.__class_getitem__()`\n\nFixed the type annotation for ``__class_getitem__()`` as applied to the\n``Visitable`` class at the base of expression constructs to accept ``Any``\nfor a key, rather than ``str``, which helps with some IDEs such as PyCharm\nwhen attempting to write typing annotations for SQL constructs which\ninclude generic selectors.  Pull request courtesy Jordan Macdonald.\n\nFixes: #9878\nCloses: #9881\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/9881\nPull-request-sha: 5aefaaf1065d1f946137a8b2f5be0767856cf9b0\n\nChange-Id: I956e6d41142c50d870a142c3e99567a7ed2f7114",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/df126fe0d1799367572af6410b76850eebcd1100",
        "buggy_code": "def __class_getitem__(cls: Type[_T], key: str) -> Type[_T]:",
        "fixed_code": "def __class_getitem__(cls: Type[_T], key: Any) -> Type[_T]:",
        "patch": "@@ -1556,7 +1556,7 @@ class using subclassing, rather than return value of a function.\n \n         if hasattr(cls, \"__class_getitem__\"):\n \n-            def __class_getitem__(cls: Type[_T], key: str) -> Type[_T]:\n+            def __class_getitem__(cls: Type[_T], key: Any) -> Type[_T]:\n                 # allow generic classes in py3.9+\n                 return cls\n "
    },
    {
        "commit_id": "df126fe0d1799367572af6410b76850eebcd1100",
        "commit_message": "Fix type hint of `key` on `Visitable.__class_getitem__()`\n\nFixed the type annotation for ``__class_getitem__()`` as applied to the\n``Visitable`` class at the base of expression constructs to accept ``Any``\nfor a key, rather than ``str``, which helps with some IDEs such as PyCharm\nwhen attempting to write typing annotations for SQL constructs which\ninclude generic selectors.  Pull request courtesy Jordan Macdonald.\n\nFixes: #9878\nCloses: #9881\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/9881\nPull-request-sha: 5aefaaf1065d1f946137a8b2f5be0767856cf9b0\n\nChange-Id: I956e6d41142c50d870a142c3e99567a7ed2f7114",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/df126fe0d1799367572af6410b76850eebcd1100",
        "buggy_code": "def __class_getitem__(cls, key: str) -> Any:",
        "fixed_code": "def __class_getitem__(cls, key: Any) -> Any:",
        "patch": "@@ -146,7 +146,7 @@ def _compiler_dispatch(\n             cls._original_compiler_dispatch\n         ) = _compiler_dispatch\n \n-    def __class_getitem__(cls, key: str) -> Any:\n+    def __class_getitem__(cls, key: Any) -> Any:\n         # allow generic classes in py3.9+\n         return cls\n "
    },
    {
        "commit_id": "ab70853b5944437aaba240dbdd48e508963aee53",
        "commit_message": "Merge \"Fix rendering of order in sequences and identity columns.\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ab70853b5944437aaba240dbdd48e508963aee53",
        "buggy_code": "\"NOORDER NOCYCLE))\",",
        "fixed_code": "\"NOCYCLE NOORDER))\",",
        "patch": "@@ -1581,7 +1581,7 @@ def test_column_identity(self):\n             schema.CreateTable(t),\n             \"CREATE TABLE t (y INTEGER GENERATED ALWAYS AS IDENTITY \"\n             \"(INCREMENT BY 7 START WITH 4 NOMINVALUE NOMAXVALUE \"\n-            \"NOORDER NOCYCLE))\",\n+            \"NOCYCLE NOORDER))\",\n         )\n \n     def test_column_identity_no_generated(self):"
    },
    {
        "commit_id": "8cf73b322a320c16b574a4d3d5e93a9dd3648321",
        "commit_message": "Fix rendering of order in sequences and identity columns.\n\nFixes the rendering of the Oracle only ``order`` attribute in\nSequence and Identity that was passed also when rendering\nthe DDL in PostgreSQL.\n\nFixes: #10207\nChange-Id: I5b918eab38ba68fa10a213a79e2bd0cc48401a02",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8cf73b322a320c16b574a4d3d5e93a9dd3648321",
        "buggy_code": "\"NOORDER NOCYCLE))\",",
        "fixed_code": "\"NOCYCLE NOORDER))\",",
        "patch": "@@ -1581,7 +1581,7 @@ def test_column_identity(self):\n             schema.CreateTable(t),\n             \"CREATE TABLE t (y INTEGER GENERATED ALWAYS AS IDENTITY \"\n             \"(INCREMENT BY 7 START WITH 4 NOMINVALUE NOMAXVALUE \"\n-            \"NOORDER NOCYCLE))\",\n+            \"NOCYCLE NOORDER))\",\n         )\n \n     def test_column_identity_no_generated(self):"
    },
    {
        "commit_id": "e7b3afda52f3ece67a3ae46860c6fc5f59e9255a",
        "commit_message": "Merge \"Fix annotations\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7b3afda52f3ece67a3ae46860c6fc5f59e9255a",
        "buggy_code": "\"SQLCoreOperations\",",
        "fixed_code": "\"SQLCoreOperations[Any]\",",
        "patch": "@@ -234,7 +234,7 @@ def __call__(self, obj: _CE) -> _CE:\n     str,\n     _HasClauseElement,\n     roles.DMLColumnRole,\n-    \"SQLCoreOperations\",\n+    \"SQLCoreOperations[Any]\",\n ]\n \"\"\"A DML column expression.  This is a \"key\" inside of insert().values(),\n update().values(), and related."
    },
    {
        "commit_id": "0661cd99c4e06115d3dd8318a6bda5e2b41d11ae",
        "commit_message": "Fix annotations\n\nTyping improvements:\n\n* :class:`.CursorResult` is returned for some forms of\n:meth:`_orm.Session.execute` where DML without RETURNING is used\n* fixed type for :paramref:`_orm.Query.with_for_update.of` parameter within\n:meth:`_orm.Query.with_for_update`\n* improvements to ``_DMLColumnArgument`` type used by some DML methods to\npass column expressions\n* Add overload to :func:`_sql.literal` so that it is inferred that the\nreturn type is ``BindParameter[NullType]`` where\n:paramref:`_sql.literal.type_` param is None\n* Add overloads to :meth:`_sql.ColumnElement.op` so that the inferred\ntype when :paramref:`_sql.ColumnElement.op.return_type` is not provided\nis ``Callable[[Any], BinaryExpression[Any]]``\n* Add missing overload to :meth:`_sql.ColumnElement.__add__`\n\nPull request courtesy Mehdi Gmira.\n\nFixes: #9185\nCloses: #10108\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/10108\nPull-request-sha: 6017526c9cd1282025885cb002de1f984f64205b\n\nChange-Id: I77a2a199b7a8b137b405001bef8813cf2d327bca",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0661cd99c4e06115d3dd8318a6bda5e2b41d11ae",
        "buggy_code": "\"SQLCoreOperations\",",
        "fixed_code": "\"SQLCoreOperations[Any]\",",
        "patch": "@@ -234,7 +234,7 @@ def __call__(self, obj: _CE) -> _CE:\n     str,\n     _HasClauseElement,\n     roles.DMLColumnRole,\n-    \"SQLCoreOperations\",\n+    \"SQLCoreOperations[Any]\",\n ]\n \"\"\"A DML column expression.  This is a \"key\" inside of insert().values(),\n update().values(), and related."
    },
    {
        "commit_id": "d7ee73ff81ed69df43756240670bd98f3b1c3302",
        "commit_message": "ensure CITEXT is not cast as VARCHAR\n\nFixed issue where comparisons to the :class:`_postgresql.CITEXT` datatype\nwould cast the right side to ``VARCHAR``, leading to the right side not\nbeing interpreted as a ``CITEXT`` datatype, for the asyncpg, psycopg3 and\npg80000 dialects.   This led to the :class:`_postgresql.CITEXT` type being\nessentially unusable for practical use; this is now fixed and the test\nsuite has been corrected to properly assert that expressions are rendered\ncorrectly.\n\nFixes: #10096\nChange-Id: I49129e50261cf09942c0c339d581ce17a26d8181",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d7ee73ff81ed69df43756240670bd98f3b1c3302",
        "buggy_code": "if dbapi_type._type_affinity is sqltypes.String:",
        "fixed_code": "if dbapi_type._type_affinity is sqltypes.String and dbapi_type.length:",
        "patch": "@@ -1701,7 +1701,7 @@ def _assert_pg_ts_ext(self, element, **kw):\n         return f\"{element.name}{self.function_argspec(element, **kw)}\"\n \n     def render_bind_cast(self, type_, dbapi_type, sqltext):\n-        if dbapi_type._type_affinity is sqltypes.String:\n+        if dbapi_type._type_affinity is sqltypes.String and dbapi_type.length:\n             # use VARCHAR with no length for VARCHAR cast.\n             # see #9511\n             dbapi_type = sqltypes.STRINGTYPE"
    },
    {
        "commit_id": "d50885d0c9bb294573af1e067c1d33b21909ee41",
        "commit_message": "Merge \"fix ConnectArgsType tuple to be variable length\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d50885d0c9bb294573af1e067c1d33b21909ee41",
        "buggy_code": "return [[], opts]",
        "fixed_code": "return ([], opts)",
        "patch": "@@ -618,7 +618,7 @@ def create_connect_args(self, url):\n         # inherits the docstring from interfaces.Dialect.create_connect_args\n         opts = url.translate_connect_args()\n         opts.update(url.query)\n-        return [[], opts]\n+        return ([], opts)\n \n     def set_engine_execution_options(\n         self, engine: Engine, opts: Mapping[str, Any]"
    },
    {
        "commit_id": "67684d98f53acb51ca98054bedeaf67415769ddd",
        "commit_message": "fix ConnectArgsType tuple to be variable length\n\nFixes: #10038\nChange-Id: I391aae0c553c4ebcdd1d09fd9fd445f839fb9906",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/67684d98f53acb51ca98054bedeaf67415769ddd",
        "buggy_code": "return [[], opts]",
        "fixed_code": "return ([], opts)",
        "patch": "@@ -618,7 +618,7 @@ def create_connect_args(self, url):\n         # inherits the docstring from interfaces.Dialect.create_connect_args\n         opts = url.translate_connect_args()\n         opts.update(url.query)\n-        return [[], opts]\n+        return ([], opts)\n \n     def set_engine_execution_options(\n         self, engine: Engine, opts: Mapping[str, Any]"
    },
    {
        "commit_id": "d9acd6223299c118464d30abfa483e26a536239d",
        "commit_message": "Revert \"Fix type signature on create_connect_args\"\n\nthis was not supposed to be committed\n\nThis reverts commit 86078b8948e83e442c1bd4a7a501767ec775ec54.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d9acd6223299c118464d30abfa483e26a536239d",
        "buggy_code": "return ((), opts)",
        "fixed_code": "return [[], opts]",
        "patch": "@@ -618,7 +618,7 @@ def create_connect_args(self, url):\n         # inherits the docstring from interfaces.Dialect.create_connect_args\n         opts = url.translate_connect_args()\n         opts.update(url.query)\n-        return ((), opts)\n+        return [[], opts]\n \n     def set_engine_execution_options(\n         self, engine: Engine, opts: Mapping[str, Any]"
    },
    {
        "commit_id": "86078b8948e83e442c1bd4a7a501767ec775ec54",
        "commit_message": "Fix type signature on create_connect_args\nFixes: #10038",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/86078b8948e83e442c1bd4a7a501767ec775ec54",
        "buggy_code": "return [[], opts]",
        "fixed_code": "return ((), opts)",
        "patch": "@@ -618,7 +618,7 @@ def create_connect_args(self, url):\n         # inherits the docstring from interfaces.Dialect.create_connect_args\n         opts = url.translate_connect_args()\n         opts.update(url.query)\n-        return [[], opts]\n+        return ((), opts)\n \n     def set_engine_execution_options(\n         self, engine: Engine, opts: Mapping[str, Any]"
    },
    {
        "commit_id": "8d19d2e116e168d10b3f2fe546e6dc21861af9ff",
        "commit_message": "fix typo (#9996)\n\nonpudate -> onupdate when onupdate is None",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8d19d2e116e168d10b3f2fe546e6dc21861af9ff",
        "buggy_code": "self.onpudate = None",
        "fixed_code": "self.onupdate = None",
        "patch": "@@ -2123,7 +2123,7 @@ def __init__(\n             self.onupdate = onupdate\n             l_args.append(onupdate)\n         else:\n-            self.onpudate = None\n+            self.onupdate = None\n \n         if server_default is not None:\n             if isinstance(server_default, FetchedValue):"
    },
    {
        "commit_id": "ebd7f691172252e3666d336925dfff2626712cfe",
        "commit_message": "fix typo in validates docs (#9983)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ebd7f691172252e3666d336925dfff2626712cfe",
        "buggy_code": "``False `` for releases 2.0.0 through 2.0.15.  Its correct default",
        "fixed_code": "``False`` for releases 2.0.0 through 2.0.15.  Its correct default",
        "patch": "@@ -4349,7 +4349,7 @@ def validates(\n      attribute operation.\n \n      .. versionchanged:: 2.0.16 This paramter inadvertently defaulted to\n-        ``False `` for releases 2.0.0 through 2.0.15.  Its correct default\n+        ``False`` for releases 2.0.0 through 2.0.15.  Its correct default\n         of ``True`` is restored in 2.0.16.\n \n     .. seealso::"
    },
    {
        "commit_id": "108f5ec3feed145d371cbd1c54d55d6601bbd0f7",
        "commit_message": "improve support for declared_attr returning ORMDescriptor\n\nFixed issue in ORM Annotated Declarative which prevented a\n:class:`_orm.declared_attr` with or without\n:attr:`_orm.declared_attr.directive` from being used on a mixin which did\nnot return a :class:`.Mapped` datatype, and instead returned a supplemental\nORM datatype such as :class:`.AssociationProxy`.  The Declarative runtime\nwould erroneously try to interpret this annotation as needing to be\n:class:`.Mapped` and raise an error.\n\nFixed typing issue where using the :class:`.AssociationProxy` return type\nfrom a :class:`_orm.declared_attr` function was disallowed.\n\nFixes: #9957\nChange-Id: I797c5bbdb3d1e81a04ed21c6558ec349b970476f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/108f5ec3feed145d371cbd1c54d55d6601bbd0f7",
        "buggy_code": "def __get__(self, instance: Any, owner: Literal[None]) -> Self:",
        "fixed_code": "def __get__(self, instance: Literal[None], owner: Literal[None]) -> Self:",
        "patch": "@@ -399,7 +399,7 @@ def __init__(\n             self._attribute_options = _DEFAULT_ATTRIBUTE_OPTIONS\n \n     @overload\n-    def __get__(self, instance: Any, owner: Literal[None]) -> Self:\n+    def __get__(self, instance: Literal[None], owner: Literal[None]) -> Self:\n         ...\n \n     @overload"
    },
    {
        "commit_id": "59521abcc0676e936b31a523bd968fc157fef0c2",
        "commit_message": "add 3.12\n\nInitial fixes to test to accommodate py312\n\nHere we are pulling in a current fork of greenlet that works\nfor python 3.12.   It works though there is one issue with aiosqlite\nthat might be related.\n\na non-voting py312 job is added to gerrit / jenkins\n\nFixes: #9819\nChange-Id: I91a51dcbad2902f7c4c7cec88ebbf42c2417b512",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/59521abcc0676e936b31a523bd968fc157fef0c2",
        "buggy_code": "default=datetime.datetime.utcnow,",
        "fixed_code": "default=lambda: datetime.datetime.now(datetime.timezone.utc),",
        "patch": "@@ -113,7 +113,7 @@ def _history_mapper(local_mapper):\n             Column(\n                 \"changed\",\n                 DateTime,\n-                default=datetime.datetime.utcnow,\n+                default=lambda: datetime.datetime.now(datetime.timezone.utc),\n                 info=version_meta,\n             )\n         )"
    },
    {
        "commit_id": "59521abcc0676e936b31a523bd968fc157fef0c2",
        "commit_message": "add 3.12\n\nInitial fixes to test to accommodate py312\n\nHere we are pulling in a current fork of greenlet that works\nfor python 3.12.   It works though there is one issue with aiosqlite\nthat might be related.\n\na non-voting py312 job is added to gerrit / jenkins\n\nFixes: #9819\nChange-Id: I91a51dcbad2902f7c4c7cec88ebbf42c2417b512",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/59521abcc0676e936b31a523bd968fc157fef0c2",
        "buggy_code": "await self.gen.athrow(typ, value, traceback)",
        "fixed_code": "await util.athrow(self.gen, typ, value, traceback)",
        "patch": "@@ -184,7 +184,7 @@ async def __aexit__(\n                 # tell if we get the same exception back\n                 value = typ()\n             try:\n-                await self.gen.athrow(typ, value, traceback)\n+                await util.athrow(self.gen, typ, value, traceback)\n             except StopAsyncIteration as exc:\n                 # Suppress StopIteration *unless* it's the same exception that\n                 # was passed to throw().  This prevents a StopIteration"
    },
    {
        "commit_id": "59521abcc0676e936b31a523bd968fc157fef0c2",
        "commit_message": "add 3.12\n\nInitial fixes to test to accommodate py312\n\nHere we are pulling in a current fork of greenlet that works\nfor python 3.12.   It works though there is one issue with aiosqlite\nthat might be related.\n\na non-voting py312 job is added to gerrit / jenkins\n\nFixes: #9819\nChange-Id: I91a51dcbad2902f7c4c7cec88ebbf42c2417b512",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/59521abcc0676e936b31a523bd968fc157fef0c2",
        "buggy_code": "epoch = dt.datetime.utcfromtimestamp(0)",
        "fixed_code": "epoch = dt.datetime.fromtimestamp(0, dt.timezone.utc).replace(tzinfo=None)",
        "patch": "@@ -2049,7 +2049,7 @@ class Interval(Emulated, _AbstractInterval, TypeDecorator[dt.timedelta]):\n     \"\"\"\n \n     impl = DateTime\n-    epoch = dt.datetime.utcfromtimestamp(0)\n+    epoch = dt.datetime.fromtimestamp(0, dt.timezone.utc).replace(tzinfo=None)\n     cache_ok = True\n \n     def __init__("
    },
    {
        "commit_id": "8e297afa8ddd66d5d7317a1b965a8919adb8f1aa",
        "commit_message": "use internal declarative creator for DeclarativeBaseNoMeta\n\nFixed issue where :class:`.DeclarativeBaseNoMeta` declarative base class\nwould not function with non-mapped mixins or abstract classes, raising an\n``AttributeError`` instead.\n\nFixes: #9862\nChange-Id: I91cfe663530a2eb712004b9fb09d3f0cefcaeef5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8e297afa8ddd66d5d7317a1b965a8919adb8f1aa",
        "buggy_code": "cls._sa_registry.map_declaratively(cls)",
        "fixed_code": "_as_declarative(cls._sa_registry, cls, cls.__dict__)",
        "patch": "@@ -943,7 +943,7 @@ def __init_subclass__(cls) -> None:\n             _check_not_declarative(cls, DeclarativeBaseNoMeta)\n             _setup_declarative_base(cls)\n         else:\n-            cls._sa_registry.map_declaratively(cls)\n+            _as_declarative(cls._sa_registry, cls, cls.__dict__)\n \n \n def add_mapped_attribute("
    },
    {
        "commit_id": "ee6ab85e49e6c555c5b80dcd88a3c8de9885869e",
        "commit_message": "establish Uuid as emulated, pg.UUID as nativeforemulated\n\nRepaired the base :class:`.Uuid` datatype for the PostgreSQL dialect to\nmake proper use of the PG-specific ``UUID`` internal datatype when\n\"native_uuid\" is selected, so that PG driver behaviors are included. This\nissue became apparent due to the insertmanyvalues improvement made as part\nof :ticket:`9618`, where in a similar manner as that of :ticket:` 9739`\nwhere the asyncpg driver is very sensitive to datatype casts being present\nor not, the PostgreSQL driver-specific native ``UUID`` datatype must be\ninvoked when this generic type is used.\n\nalso consolidate imv tests for largebinary, uuid into\nsuite/test_insert.py\n\nFixes: #9808\nChange-Id: Ibadfaff86ddf7db37145b4d003ef4802bd6e8f26",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ee6ab85e49e6c555c5b80dcd88a3c8de9885869e",
        "buggy_code": "UUID: PGUuid,",
        "fixed_code": "sqltypes.Uuid: PGUuid,",
        "patch": "@@ -1598,7 +1598,7 @@ def update():\n     sqltypes.Enum: ENUM,\n     sqltypes.JSON.JSONPathType: _json.JSONPATH,\n     sqltypes.JSON: _json.JSON,\n-    UUID: PGUuid,\n+    sqltypes.Uuid: PGUuid,\n }\n \n "
    },
    {
        "commit_id": "ee6ab85e49e6c555c5b80dcd88a3c8de9885869e",
        "commit_message": "establish Uuid as emulated, pg.UUID as nativeforemulated\n\nRepaired the base :class:`.Uuid` datatype for the PostgreSQL dialect to\nmake proper use of the PG-specific ``UUID`` internal datatype when\n\"native_uuid\" is selected, so that PG driver behaviors are included. This\nissue became apparent due to the insertmanyvalues improvement made as part\nof :ticket:`9618`, where in a similar manner as that of :ticket:` 9739`\nwhere the asyncpg driver is very sensitive to datatype casts being present\nor not, the PostgreSQL driver-specific native ``UUID`` datatype must be\ninvoked when this generic type is used.\n\nalso consolidate imv tests for largebinary, uuid into\nsuite/test_insert.py\n\nFixes: #9808\nChange-Id: Ibadfaff86ddf7db37145b4d003ef4802bd6e8f26",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ee6ab85e49e6c555c5b80dcd88a3c8de9885869e",
        "buggy_code": "class ENUM(NamedType, sqltypes.NativeForEmulated, sqltypes.Enum):",
        "fixed_code": "class ENUM(NamedType, type_api.NativeForEmulated, sqltypes.Enum):",
        "patch": "@@ -162,7 +162,7 @@ def visit_enum(self, enum):\n             self.connection.execute(DropEnumType(enum))\n \n \n-class ENUM(NamedType, sqltypes.NativeForEmulated, sqltypes.Enum):\n+class ENUM(NamedType, type_api.NativeForEmulated, sqltypes.Enum):\n \n     \"\"\"PostgreSQL ENUM type.\n "
    },
    {
        "commit_id": "bce61160a9aec321ea0af4a59d4b83ff93a0429f",
        "commit_message": "Merge \"fix test suite warnings\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bce61160a9aec321ea0af4a59d4b83ff93a0429f",
        "buggy_code": "from sqlalchemy.ext.declarative import declarative_base",
        "fixed_code": "from sqlalchemy.orm import declarative_base",
        "patch": "@@ -13,9 +13,9 @@\n from sqlalchemy import join\n from sqlalchemy import select\n from sqlalchemy import String\n-from sqlalchemy.ext.declarative import declarative_base\n from sqlalchemy.orm import clear_mappers\n from sqlalchemy.orm import column_property\n+from sqlalchemy.orm import declarative_base\n from sqlalchemy.orm import DeclarativeBase\n from sqlalchemy.orm import deferred\n from sqlalchemy.orm import exc as orm_exc"
    },
    {
        "commit_id": "60b31198311eedfa3814e7098c94d3aa29338fdd",
        "commit_message": "fix test suite warnings\n\nfix a handful of warnings that were emitting but not raising,\nusually because they were inside an \"expect_warnings\" block.\n\nmodify \"expect_warnings\" to always use \"raise_on_any_unexpected\"\nbehavior; remove this parameter.\n\nFixed issue in semi-private ``await_only()`` and ``await_fallback()``\nconcurrency functions where the given awaitable would remain un-awaited if\nthe function threw a ``GreenletError``, which could cause \"was not awaited\"\nwarnings later on if the program continued. In this case, the given\nawaitable is now cancelled before the exception is thrown.\n\nChange-Id: I33668c5e8c670454a3d879e559096fb873b57244",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/60b31198311eedfa3814e7098c94d3aa29338fdd",
        "buggy_code": "from sqlalchemy.ext.declarative import declarative_base",
        "fixed_code": "from sqlalchemy.orm import declarative_base",
        "patch": "@@ -13,9 +13,9 @@\n from sqlalchemy import join\n from sqlalchemy import select\n from sqlalchemy import String\n-from sqlalchemy.ext.declarative import declarative_base\n from sqlalchemy.orm import clear_mappers\n from sqlalchemy.orm import column_property\n+from sqlalchemy.orm import declarative_base\n from sqlalchemy.orm import DeclarativeBase\n from sqlalchemy.orm import deferred\n from sqlalchemy.orm import exc as orm_exc"
    },
    {
        "commit_id": "4a62625d99470c8928422c4822df5234b93b6bb8",
        "commit_message": "implement FromLinter for UPDATE, DELETE statements\n\nImplemented the \"cartesian product warning\" for UPDATE and DELETE\nstatements, those which include multiple tables that are not correlated\ntogether in some way.\n\nFixed issue where :func:`_dml.update` construct that included multiple\ntables and no VALUES clause would raise with an internal error. Current\nbehavior for :class:`_dml.Update` with no values is to generate a SQL\nUPDATE statement with an empty \"set\" clause, so this has been made\nconsistent for this specific sub-case.\n\nFixes: #9721\nChange-Id: I556639811cc930d2e37532965d2ae751882af921",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4a62625d99470c8928422c4822df5234b93b6bb8",
        "buggy_code": "for c, param in stmt_parameter_tuples",
        "fixed_code": "for c, param in stmt_parameter_tuples or ()",
        "patch": "@@ -1344,7 +1344,7 @@ def _get_update_multitable_params(\n ):\n     normalized_params = {\n         coercions.expect(roles.DMLColumnRole, c): param\n-        for c, param in stmt_parameter_tuples\n+        for c, param in stmt_parameter_tuples or ()\n     }\n \n     include_table = compile_state.include_table_with_column_exprs"
    },
    {
        "commit_id": "a1a16a3509a286225ab28ba3a418e638b004f858",
        "commit_message": "Fix usage of `Annotated` in `DeclarativeBase` docstring (#9751)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a1a16a3509a286225ab28ba3a418e638b004f858",
        "buggy_code": "bigint = Annotated(int, \"bigint\")",
        "fixed_code": "bigint = Annotated[int, \"bigint\"]",
        "patch": "@@ -666,7 +666,7 @@ class Base(DeclarativeBase):\n         from sqlalchemy import String\n         from sqlalchemy.orm import DeclarativeBase\n \n-        bigint = Annotated(int, \"bigint\")\n+        bigint = Annotated[int, \"bigint\"]\n         my_metadata = MetaData()\n \n         class Base(DeclarativeBase):"
    },
    {
        "commit_id": "d9be22044d251c047b6306e767b2537c0ee12709",
        "commit_message": "adjust fwd_ref logic\n\nFixed issue where ORM Annotated Declarative would not resolve forward\nreferences correctly in all cases; in particular, when using\n``from __future__ import annotations`` in combination with Pydantic\ndataclasses.\n\nChange-Id: If643c9a4ac7e217d4cb3a7d09b96cfd49432c44e\nReferences: #9717",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d9be22044d251c047b6306e767b2537c0ee12709",
        "buggy_code": "if is_fwd_ref(annotation) and not annotation.__forward_evaluated__:",
        "fixed_code": "if is_fwd_ref(annotation):",
        "patch": "@@ -146,7 +146,7 @@ def de_stringify_annotation(\n \n     original_annotation = annotation\n \n-    if is_fwd_ref(annotation) and not annotation.__forward_evaluated__:\n+    if is_fwd_ref(annotation):\n         annotation = annotation.__forward_arg__\n \n     if isinstance(annotation, str):"
    },
    {
        "commit_id": "040e0d2560c17ff490b2b0bbe193c7658d3b4603",
        "commit_message": "Fixed bug in `URL.normalized_query`\n\nFixed a bug that prevented use of :attr:`_engine.URL.normalized_query` in\nSQLAlchemy v2.\n\nFixes: #9682\nChange-Id: I2704154af34f438b4cbb290602fc936c1184c074",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/040e0d2560c17ff490b2b0bbe193c7658d3b4603",
        "buggy_code": "@util.memoized_property",
        "fixed_code": "@property",
        "patch": "@@ -564,7 +564,7 @@ def difference_update_query(self, names: Iterable[str]) -> URL:\n             ),\n         )\n \n-    @util.memoized_property\n+    @property\n     def normalized_query(self) -> Mapping[str, Sequence[str]]:\n         \"\"\"Return the :attr:`_engine.URL.query` dictionary with values normalized\n         into sequences."
    },
    {
        "commit_id": "756501b65a9c88790c1947d7c39956bfc374b8e8",
        "commit_message": "improve return type for QueryableAttribute.and_()\n\nFixed typing issue where :meth:`_orm.PropComparator.and_` expressions would\nnot be correctly typed inside of loader options such as\n:func:`_orm.selectinload`.\n\nFixes: #9669\nChange-Id: I874cb22c004e0a24f2b7f530fda542de2c4c6d3b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/756501b65a9c88790c1947d7c39956bfc374b8e8",
        "buggy_code": ") -> interfaces.PropComparator[bool]:",
        "fixed_code": ") -> QueryableAttribute[bool]:",
        "patch": "@@ -405,7 +405,7 @@ def of_type(self, entity: _EntityType[Any]) -> QueryableAttribute[_T]:\n \n     def and_(\n         self, *clauses: _ColumnExpressionArgument[bool]\n-    ) -> interfaces.PropComparator[bool]:\n+    ) -> QueryableAttribute[bool]:\n         if TYPE_CHECKING:\n             assert isinstance(self.comparator, RelationshipProperty.Comparator)\n "
    },
    {
        "commit_id": "9fb2a2947e41ecd1597f8efe082de78e5374f98f",
        "commit_message": "Fix typo in the doc for `mapped_column` (#9612)\n\nI found an extremely and probably insignificant typo in the doc for `mapped_column` while actually trying to use and understand it for my project and have fixed it here.\r\n\r\nThe typo was for a \"for\" which was instead mentioned as \"or\".",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fb2a2947e41ecd1597f8efe082de78e5374f98f",
        "buggy_code": "and ``False`` or primary key columns.",
        "fixed_code": "and ``False`` for primary key columns.",
        "patch": "@@ -185,7 +185,7 @@ def mapped_column(\n      \"NOT NULL\". If omitted, the nullability is derived from the type\n      annotation based on whether or not ``typing.Optional`` is present.\n      ``nullable`` defaults to ``True`` otherwise for non-primary key columns,\n-     and ``False`` or primary key columns.\n+     and ``False`` for primary key columns.\n     :param primary_key: optional bool, indicates the :class:`_schema.Column`\n      would be part of the table's primary key or not.\n     :param deferred: Optional bool - this keyword argument is consumed by the"
    },
    {
        "commit_id": "0a0c7c73729152b7606509b6e750371106dfdd46",
        "commit_message": "implement content hashing for custom_op, not identity\n\nFixed critical SQL caching issue where use of the :meth:`_sql.Operators.op`\ncustom operator function would not produce an appropriate cache key,\nleading to reduce the effectiveness of the SQL cache.\n\nFixes: #9506\nChange-Id: I3eab1ddb5e09a811ad717161a59df0884cdf70ed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0a0c7c73729152b7606509b6e750371106dfdd46",
        "buggy_code": "return left is right",
        "fixed_code": "return left == right",
        "patch": "@@ -767,7 +767,7 @@ def visit_boolean(\n     def visit_operator(\n         self, attrname, left_parent, left, right_parent, right, **kw\n     ):\n-        return left is right\n+        return left == right\n \n     def visit_type(\n         self, attrname, left_parent, left, right_parent, right, **kw"
    },
    {
        "commit_id": "e7aabd54c4defe237cecfa80863f0d7fa5a48035",
        "commit_message": "Merge \"Fix regression when deserializing python rows into cython\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7aabd54c4defe237cecfa80863f0d7fa5a48035",
        "buggy_code": "for protocol in range(-2, pickle.HIGHEST_PROTOCOL):",
        "fixed_code": "for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):",
        "patch": "@@ -59,7 +59,7 @@ def picklers():\n \n     # yes, this thing needs this much testing\n     for pickle_ in picklers:\n-        for protocol in range(-2, pickle.HIGHEST_PROTOCOL):\n+        for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):\n             yield pickle_.loads, lambda d: pickle_.dumps(d, protocol)\n \n "
    },
    {
        "commit_id": "7f4df1625ef06cbfda5ca2db34984fd576506fff",
        "commit_message": "Merge \"repair broken lambda patch\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7f4df1625ef06cbfda5ca2db34984fd576506fff",
        "buggy_code": "__only_on__ = \"sqlite\"",
        "fixed_code": "__only_on__ = \"sqlite+pysqlite\"",
        "patch": "@@ -657,7 +657,7 @@ def _gen_relationship(*arg, **kw):\n \n \n class ConcurrentAutomapTest(fixtures.TestBase):\n-    __only_on__ = \"sqlite\"\n+    __only_on__ = \"sqlite+pysqlite\"\n \n     def _make_tables(self, e):\n         m = MetaData()"
    },
    {
        "commit_id": "2c9796b10c3e85450afdeedc4003607abda2f2db",
        "commit_message": "repair broken lambda patch\n\nin I4e0b627bfa187f1780dc68ec81b94db1c78f846a the 1.4 version has more\nchanges than the main version, which failed to get the entire change,\nyet the whole thing was merged.   Restore the missing mutex related\ncode to the main version.\n\nFixed regression where the fix for :ticket:`8098`, which was released in\nthe 1.4 series and provided a layer of concurrency-safe checks for the\nlambda SQL API, included additional fixes in the patch that failed to be\napplied to the main branch. These additional fixes have been applied.\n\nChange-Id: Id172e09c421dafa6ef1d40b383aa4371de343864\nReferences: #8098\nFixes: #9461",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2c9796b10c3e85450afdeedc4003607abda2f2db",
        "buggy_code": "__only_on__ = \"sqlite\"",
        "fixed_code": "__only_on__ = \"sqlite+pysqlite\"",
        "patch": "@@ -657,7 +657,7 @@ def _gen_relationship(*arg, **kw):\n \n \n class ConcurrentAutomapTest(fixtures.TestBase):\n-    __only_on__ = \"sqlite\"\n+    __only_on__ = \"sqlite+pysqlite\"\n \n     def _make_tables(self, e):\n         m = MetaData()"
    },
    {
        "commit_id": "fd9aa847920b9e4dff61ef7a5555c9fa6e362484",
        "commit_message": "Fix regression when deserializing python rows into cython\n\nFixed regression involving pickling of Python rows between the cython and\npure Python implementations of :class:`.Row`, which occurred as part of\nrefactoring code for version 2.0 with typing. A particular constant were\nturned into a string based ``Enum`` for the pure Python version of\n:class:`.Row` whereas the cython version continued to use an integer\nconstant, leading to deserialization failures.\n\nRegression occurred in a4bb502cf95ea3523e4d383c4377e50f402d7d52\n\nFixes: #9423\nChange-Id: Icbd85cacb2d589cef7c246de7064249926146f2e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fd9aa847920b9e4dff61ef7a5555c9fa6e362484",
        "buggy_code": "for protocol in range(-2, pickle.HIGHEST_PROTOCOL):",
        "fixed_code": "for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):",
        "patch": "@@ -59,7 +59,7 @@ def picklers():\n \n     # yes, this thing needs this much testing\n     for pickle_ in picklers:\n-        for protocol in range(-2, pickle.HIGHEST_PROTOCOL):\n+        for protocol in range(-2, pickle.HIGHEST_PROTOCOL + 1):\n             yield pickle_.loads, lambda d: pickle_.dumps(d, protocol)\n \n "
    },
    {
        "commit_id": "1504aa9f9f95964ee73030a76941b8169e04d5bc",
        "commit_message": "Use independent TypeVar for ColumnElement.cast\n\nFixed typing issue where :meth:`.ColumnElement.cast` did not allow a\n:class:`.TypeEngine` argument independent of the type of the\n:class:`.ColumnElement` itself, which is the purpose of\n:meth:`.ColumnElement.cast`.\n\nFixes: #9451\nChange-Id: I68119c6a9e8bf896715eea79be2b4f36b1c141de",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1504aa9f9f95964ee73030a76941b8169e04d5bc",
        "buggy_code": "def cast(self, type_: _TypeEngineArgument[_T]) -> Cast[_T]:",
        "fixed_code": "def cast(self, type_: _TypeEngineArgument[_OPT]) -> Cast[_OPT]:",
        "patch": "@@ -1635,7 +1635,7 @@ def _make_proxy(\n             co._is_clone_of = selectable._is_clone_of.columns.get(key)\n         return key, co\n \n-    def cast(self, type_: _TypeEngineArgument[_T]) -> Cast[_T]:\n+    def cast(self, type_: _TypeEngineArgument[_OPT]) -> Cast[_OPT]:\n         \"\"\"Produce a type cast, i.e. ``CAST(<expression> AS <type>)``.\n \n         This is a shortcut to the :func:`_expression.cast` function."
    },
    {
        "commit_id": "c76f5933735ab19f5e409d1dd25aafe0e4fa399b",
        "commit_message": "Merge \"fix with_polymorphic\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c76f5933735ab19f5e409d1dd25aafe0e4fa399b",
        "buggy_code": "base: Union[_O, Mapper[_O]],",
        "fixed_code": "base: Union[Type[_O], Mapper[_O]],",
        "patch": "@@ -2208,7 +2208,7 @@ class UnitPrice(Base):\n \n \n def with_polymorphic(\n-    base: Union[_O, Mapper[_O]],\n+    base: Union[Type[_O], Mapper[_O]],\n     classes: Union[Literal[\"*\"], Iterable[Type[Any]]],\n     selectable: Union[Literal[False, None], FromClause] = False,\n     flat: bool = False,"
    },
    {
        "commit_id": "c76f5933735ab19f5e409d1dd25aafe0e4fa399b",
        "commit_message": "Merge \"fix with_polymorphic\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c76f5933735ab19f5e409d1dd25aafe0e4fa399b",
        "buggy_code": "base: Union[_O, Mapper[_O]],",
        "fixed_code": "base: Union[Type[_O], Mapper[_O]],",
        "patch": "@@ -1053,7 +1053,7 @@ def _alias_factory(\n     @classmethod\n     def _with_polymorphic_factory(\n         cls,\n-        base: Union[_O, Mapper[_O]],\n+        base: Union[Type[_O], Mapper[_O]],\n         classes: Union[Literal[\"*\"], Iterable[_EntityType[Any]]],\n         selectable: Union[Literal[False, None], FromClause] = False,\n         flat: bool = False,"
    },
    {
        "commit_id": "097e1eacaaf43f728c552df9ebbfa0fb81c4b6c7",
        "commit_message": "fix with_polymorphic\n\nFixed typing issue where :func:`_orm.with_polymorphic` would not record the\nclass type correctly.\n\nFixes: #9340\nChange-Id: I535ad9aede9b60475231028adb8dc270e55738a4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/097e1eacaaf43f728c552df9ebbfa0fb81c4b6c7",
        "buggy_code": "base: Union[_O, Mapper[_O]],",
        "fixed_code": "base: Union[Type[_O], Mapper[_O]],",
        "patch": "@@ -2208,7 +2208,7 @@ class UnitPrice(Base):\n \n \n def with_polymorphic(\n-    base: Union[_O, Mapper[_O]],\n+    base: Union[Type[_O], Mapper[_O]],\n     classes: Union[Literal[\"*\"], Iterable[Type[Any]]],\n     selectable: Union[Literal[False, None], FromClause] = False,\n     flat: bool = False,"
    },
    {
        "commit_id": "097e1eacaaf43f728c552df9ebbfa0fb81c4b6c7",
        "commit_message": "fix with_polymorphic\n\nFixed typing issue where :func:`_orm.with_polymorphic` would not record the\nclass type correctly.\n\nFixes: #9340\nChange-Id: I535ad9aede9b60475231028adb8dc270e55738a4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/097e1eacaaf43f728c552df9ebbfa0fb81c4b6c7",
        "buggy_code": "base: Union[_O, Mapper[_O]],",
        "fixed_code": "base: Union[Type[_O], Mapper[_O]],",
        "patch": "@@ -994,7 +994,7 @@ def _alias_factory(\n     @classmethod\n     def _with_polymorphic_factory(\n         cls,\n-        base: Union[_O, Mapper[_O]],\n+        base: Union[Type[_O], Mapper[_O]],\n         classes: Union[Literal[\"*\"], Iterable[_EntityType[Any]]],\n         selectable: Union[Literal[False, None], FromClause] = False,\n         flat: bool = False,"
    },
    {
        "commit_id": "681055f9fb5230d344a67f47b0c60fc1a5804b3e",
        "commit_message": "apply a fixed locals w/ Mapped to all de-stringify\n\nContinued the fix for :ticket:`8853`, allowing the :class:`_orm.Mapped`\nname to be fully qualified regardless of whether or not\n``from __annotations__ import future`` were present. This issue first fixed\nin 2.0.0b3 confirmed that this case worked via the test suite, however the\ntest suite apparently was not testing the behavior for the name ``Mapped``\nnot being locally present at all; string resolution has been updated to\nensure the ``Mapped`` symbol is locatable as applies to how the ORM uses\nthese functions.\n\nFixes: #8853\nFixes: #9335\nChange-Id: Id82d09aee906165a4d77c7da6a0b4177dd675c10",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/681055f9fb5230d344a67f47b0c60fc1a5804b3e",
        "buggy_code": "from ..util.typing import de_stringify_annotation",
        "fixed_code": "from .util import de_stringify_annotation",
        "patch": "@@ -55,6 +55,7 @@\n from .util import _extract_mapped_subtype\n from .util import _is_mapped_annotation\n from .util import class_mapper\n+from .util import de_stringify_annotation\n from .. import event\n from .. import exc\n from .. import util\n@@ -64,7 +65,6 @@\n from ..sql.schema import Table\n from ..util import topological\n from ..util.typing import _AnnotationScanType\n-from ..util.typing import de_stringify_annotation\n from ..util.typing import is_fwd_ref\n from ..util.typing import is_literal\n from ..util.typing import Protocol"
    },
    {
        "commit_id": "681055f9fb5230d344a67f47b0c60fc1a5804b3e",
        "commit_message": "apply a fixed locals w/ Mapped to all de-stringify\n\nContinued the fix for :ticket:`8853`, allowing the :class:`_orm.Mapped`\nname to be fully qualified regardless of whether or not\n``from __annotations__ import future`` were present. This issue first fixed\nin 2.0.0b3 confirmed that this case worked via the test suite, however the\ntest suite apparently was not testing the behavior for the name ``Mapped``\nnot being locally present at all; string resolution has been updated to\nensure the ``Mapped`` symbol is locatable as applies to how the ORM uses\nthese functions.\n\nFixes: #8853\nFixes: #9335\nChange-Id: Id82d09aee906165a4d77c7da6a0b4177dd675c10",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/681055f9fb5230d344a67f47b0c60fc1a5804b3e",
        "buggy_code": "from ..util.typing import de_stringify_annotation",
        "fixed_code": "from .util import de_stringify_annotation",
        "patch": "@@ -44,6 +44,7 @@\n from .interfaces import MapperProperty\n from .interfaces import PropComparator\n from .util import _none_set\n+from .util import de_stringify_annotation\n from .. import event\n from .. import exc as sa_exc\n from .. import schema\n@@ -52,7 +53,6 @@\n from ..sql import expression\n from ..sql import operators\n from ..sql.elements import BindParameter\n-from ..util.typing import de_stringify_annotation\n from ..util.typing import is_fwd_ref\n from ..util.typing import is_pep593\n from ..util.typing import typing_get_args"
    },
    {
        "commit_id": "23f3d8da1b9a3dbe7a7e8c7788eec3dd8b5e0cd2",
        "commit_message": "Fix a syntax error in `AsyncConnection.stream_scalars()` example. (#9334)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/23f3d8da1b9a3dbe7a7e8c7788eec3dd8b5e0cd2",
        "buggy_code": "result = await conn.stream_scalars(stmt):",
        "fixed_code": "result = await conn.stream_scalars(stmt)",
        "patch": "@@ -718,7 +718,7 @@ async def stream_scalars(\n \n         E.g.::\n \n-            result = await conn.stream_scalars(stmt):\n+            result = await conn.stream_scalars(stmt)\n             async for scalar in result:\n                 print(f\"{scalar}\")\n "
    },
    {
        "commit_id": "b95b22d8c0f9f26e33e1912d8ee205319fc20362",
        "commit_message": "Fix docs for `case` expression to match new syntax (#9279)\n\n* Fix docs for `case` expression to match new syntax\r\n\r\nPreviously (before v1.4), the `whens` arg (when `value` is *not* used) used to be a list of\r\nconditions (a 2 item-tuple of condition + value). From v1.4, these are passed\r\nas positional args and the old syntax is not supported anymore.\r\n\r\n* Fix long lines",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b95b22d8c0f9f26e33e1912d8ee205319fc20362",
        "buggy_code": "return compiler.process(case([(arg1 > arg2, arg1)], else_=arg2), **kw)",
        "fixed_code": "return compiler.process(case((arg1 > arg2, arg1), else_=arg2), **kw)",
        "patch": "@@ -409,7 +409,7 @@ def default_greatest(element, compiler, **kw):\n     @compiles(greatest, 'oracle')\n     def case_greatest(element, compiler, **kw):\n         arg1, arg2 = list(element.clauses)\n-        return compiler.process(case([(arg1 > arg2, arg1)], else_=arg2), **kw)\n+        return compiler.process(case((arg1 > arg2, arg1), else_=arg2), **kw)\n \n Example usage::\n "
    },
    {
        "commit_id": "1a115e5ac91d18ef48f2a314d49973332130725a",
        "commit_message": "typing: fix hybrid property setter (#9269)\n\nFixes #9268",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a115e5ac91d18ef48f2a314d49973332130725a",
        "buggy_code": "def __call__(self, instance: Any, value: _T_con) -> None:",
        "fixed_code": "def __call__(s, self: Any, value: _T_con) -> None:",
        "patch": "@@ -764,7 +764,7 @@ def __call__(s, self: Any) -> _T_co:\n \n \n class _HybridSetterType(Protocol[_T_con]):\n-    def __call__(self, instance: Any, value: _T_con) -> None:\n+    def __call__(s, self: Any, value: _T_con) -> None:\n         ...\n \n "
    },
    {
        "commit_id": "b927d95d075c4cdf027f784e759c9904416fb73a",
        "commit_message": "check for superclasses of user defined init\n\nFixed regression caused by the fix for :ticket:`9171`, which itself was\nfixing a regression, involving the mechanics of ``__init__()`` on classes\nthat extend from :class:`_orm.DeclarativeBase`. The change made it such\nthat ``__init__()`` was applied to the user-defined base if there were no\n``__init__()`` method directly on the class. This has been adjusted so that\n``__init__()`` is applied only if no other class in the hierarchy of the\nuser-defined base has an ``__init__()`` method. This again allows\nuser-defined base classes based on :class:`_orm.DeclarativeBase` to include\nmixins that themselves include a custom ``__init__()`` method.\n\nFixes: #9249\nChange-Id: I78f32590ce9ffe245eccb4bd5bd7c884d4e015d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b927d95d075c4cdf027f784e759c9904416fb73a",
        "buggy_code": "if \"__init__\" not in cls.__dict__:",
        "fixed_code": "if getattr(cls, \"__init__\", object.__init__) is object.__init__:",
        "patch": "@@ -567,7 +567,7 @@ def _setup_declarative_base(cls: Type[Any]) -> None:\n     if \"metadata\" not in cls.__dict__:\n         cls.metadata = cls.registry.metadata  # type: ignore\n \n-    if \"__init__\" not in cls.__dict__:\n+    if getattr(cls, \"__init__\", object.__init__) is object.__init__:\n         cls.__init__ = cls.registry.constructor\n \n "
    },
    {
        "commit_id": "961f0762304db1db931d399e3b0b35cd99a4b21d",
        "commit_message": "Unify doc typing\n\n### Description\n<!-- Describe your changes in detail -->\n\nFixes #9168\n\nThis PR replaces common occurrences of [PEP 585](https://peps.python.org/pep-0585/) style type annotations with annotations compatible with older versions of Python.\n\nI searched for instances of the following supported types from the PEP and replaced with their legacy typing couterparts.\n\n* tuple # typing.Tuple\n* list # typing.List\n* dict # typing.Dict\n* set # typing.Set\n* frozenset # typing.FrozenSet\n* type # typing.Type\n\n```\ngrep -r \"list\\[.*\\]\" ./build --exclude-dir=\"./build/venv/*\" --exclude-dir=\"./build/output/*\" --exclude=\"changelog_[0-9]*\\.rst\"\n```\n\nI excluded changelog files from being altered, I think some of these could be changed if necessary but others are likely to require manual checking as the change may target the new typing style specifically.\n\nFor any examples that included imports, I tried to ensure that the correct typing imports were included and properly ordered.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\nCloses: #9198\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/9198\nPull-request-sha: 05ad4651b57c6275b29433e5e76e166344ba6c4c\n\nChange-Id: I41b93b3dee85f9fe00cfbb3d3eb011212795de29",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/961f0762304db1db931d399e3b0b35cd99a4b21d",
        "buggy_code": "def __mapper_args__(cls) -> dict[str, Any]:",
        "fixed_code": "def __mapper_args__(cls) -> Dict[str, Any]:",
        "patch": "@@ -380,7 +380,7 @@ class Employee(Base):\n             type: Mapped[str] = mapped_column(String(50))\n \n             @declared_attr.directive\n-            def __mapper_args__(cls) -> dict[str, Any]:\n+            def __mapper_args__(cls) -> Dict[str, Any]:\n                 if cls.__name__ == 'Employee':\n                     return {\n                             \"polymorphic_on\":cls.type,"
    },
    {
        "commit_id": "26c014e72d9ded83fc90d1577fb7b5c3ef3977f8",
        "commit_message": "apply of_type error message to load.options() as well\n\nImproved the error reporting when linking strategy options from a base\nclass to another attribute that's off a subclass, where ``of_type()``\nshould be used. Previously, when :meth:`.Load.options` is used, the message\nwould lack informative detail that ``of_type()`` should be used, which was\nnot the case when linking the options directly. The informative detail now\nemits even if :meth:`.Load.options` is used.\n\nFixes: #9182\nChange-Id: Ibc14923d0cbca9114316cb7db2b30f091dc28af8",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/26c014e72d9ded83fc90d1577fb7b5c3ef3977f8",
        "buggy_code": "r'ORM mapped attribute \"B.cs\" does not link from '",
        "fixed_code": "r'ORM mapped entity or attribute \"B.cs\" does not link from '",
        "patch": "@@ -182,7 +182,7 @@ def test_selectinload_w_joinedload_after_base_target_fails(\n \n         with expect_raises_message(\n             exc.ArgumentError,\n-            r'ORM mapped attribute \"B.cs\" does not link from '\n+            r'ORM mapped entity or attribute \"B.cs\" does not link from '\n             r'relationship \"A.partitioned_bs.of_type\\(aliased\\(B\\)\\)\"',\n         ):\n             if use_of_type:"
    },
    {
        "commit_id": "bcb5c850f2a5279bf7a97af6fbf99cc63dffd62f",
        "commit_message": "fix post-production typo for #9174\n\nmerged in cae662a6383d3ae8f3673c70c3118ea3a1a1606e with one\ntypo fix afterwards\n\nFixes: #9174\nChange-Id: I5a525da8a95f40c75da627fed49ce828bd498248",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bcb5c850f2a5279bf7a97af6fbf99cc63dffd62f",
        "buggy_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some",
        "fixed_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some",
        "patch": "@@ -3863,7 +3863,7 @@ def with_for_update(\n         :param of: SQL expression or list of SQL expression elements,\n          (typically :class:`_schema.Column` objects or a compatible expression,\n          for some backends may also be a table expression) which will render\n-         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some\n+         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some\n          MySQL versions and possibly others. May render as a table or as a\n          column depending on backend.\n "
    },
    {
        "commit_id": "e17a81107db99300abef404b33d075a0238c2290",
        "commit_message": "Revert \"fix post-production typo for #9174\"\n\nThis reverts commit 3b60c3f53eab8ee5896b3fde525bcf31d4233658.\n\nsome scratch code for isolation levels got pushed :(",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e17a81107db99300abef404b33d075a0238c2290",
        "buggy_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some",
        "fixed_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some",
        "patch": "@@ -3863,7 +3863,7 @@ def with_for_update(\n         :param of: SQL expression or list of SQL expression elements,\n          (typically :class:`_schema.Column` objects or a compatible expression,\n          for some backends may also be a table expression) which will render\n-         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some\n+         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some\n          MySQL versions and possibly others. May render as a table or as a\n          column depending on backend.\n "
    },
    {
        "commit_id": "3b60c3f53eab8ee5896b3fde525bcf31d4233658",
        "commit_message": "fix post-production typo for #9174\n\nmerged in cae662a6383d3ae8f3673c70c3118ea3a1a1606e with one\ntypo fix afterwards\n\nFixes: #9174\nChange-Id: I5a525da8a95f40c75da627fed49ce828bd498248",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3b60c3f53eab8ee5896b3fde525bcf31d4233658",
        "buggy_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some",
        "fixed_code": "into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some",
        "patch": "@@ -3863,7 +3863,7 @@ def with_for_update(\n         :param of: SQL expression or list of SQL expression elements,\n          (typically :class:`_schema.Column` objects or a compatible expression,\n          for some backends may also be a table expression) which will render\n-         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL Oracle, some\n+         into a ``FOR UPDATE OF`` clause; supported by PostgreSQL, Oracle, some\n          MySQL versions and possibly others. May render as a table or as a\n          column depending on backend.\n "
    },
    {
        "commit_id": "9c4267f2442145378922498ca735d96c8f4bca42",
        "commit_message": "Set correct type annotations for ColumnElement.cast\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\nFixes: #9156\n\n### Description\n<!-- Describe your changes in detail -->\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #9157\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/9157\nPull-request-sha: 321dac184ee0d317296a689d7c8e47bf1464bcce\n\nChange-Id: I99fe759a21de910f34bae3bb919e82cd08969e81",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9c4267f2442145378922498ca735d96c8f4bca42",
        "buggy_code": "def cast(self, type_: TypeEngine[_T]) -> Cast[_T]:",
        "fixed_code": "def cast(self, type_: _TypeEngineArgument[_T]) -> Cast[_T]:",
        "patch": "@@ -1641,7 +1641,7 @@ def _make_proxy(\n             co._is_clone_of = selectable._is_clone_of.columns.get(key)\n         return key, co\n \n-    def cast(self, type_: TypeEngine[_T]) -> Cast[_T]:\n+    def cast(self, type_: _TypeEngineArgument[_T]) -> Cast[_T]:\n         \"\"\"Produce a type cast, i.e. ``CAST(<expression> AS <type>)``.\n \n         This is a shortcut to the :func:`_expression.cast` function."
    },
    {
        "commit_id": "f129645b3f54af924ef37f0d092f17fc8a532fb3",
        "commit_message": "add Mapped to _ORMColCollectionElement\n\nFixed issue where using the :paramref:`_orm.relationship.remote_side`\nand similar parameters, passing an annotated declarative object typed as\n:class:`_orm.Mapped`, would not be accepted by the type checker.\n\nFixes: #9150\nChange-Id: I5770c17ee4ad8c54661354da9582ec3c4706ffcc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f129645b3f54af924ef37f0d092f17fc8a532fb3",
        "buggy_code": "ColumnClause[Any], _HasClauseElement, roles.DMLColumnRole",
        "fixed_code": "ColumnClause[Any], _HasClauseElement, roles.DMLColumnRole, \"Mapped[Any]\"",
        "patch": "@@ -175,7 +175,7 @@\n ORMBackrefArgument = Union[str, Tuple[str, Dict[str, Any]]]\n \n _ORMColCollectionElement = Union[\n-    ColumnClause[Any], _HasClauseElement, roles.DMLColumnRole\n+    ColumnClause[Any], _HasClauseElement, roles.DMLColumnRole, \"Mapped[Any]\"\n ]\n _ORMColCollectionArgument = Union[\n     str,"
    },
    {
        "commit_id": "50f9274955da9ea9346ddf91222eea155ee9fd14",
        "commit_message": "Merge \"fix incorrect use of testing.future()\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/50f9274955da9ea9346ddf91222eea155ee9fd14",
        "buggy_code": "@testing.future",
        "fixed_code": "@testing.future()",
        "patch": "@@ -2283,7 +2283,7 @@ def test_preserves_orphans_onelevel(self):\n         eq_(sess.query(T2).all(), [T2()])\n         eq_(sess.query(T3).all(), [T3()])\n \n-    @testing.future\n+    @testing.future()\n     def test_preserves_orphans_onelevel_postremove(self):\n         T2, T3, T1 = (self.classes.T2, self.classes.T3, self.classes.T1)\n "
    },
    {
        "commit_id": "50f9274955da9ea9346ddf91222eea155ee9fd14",
        "commit_message": "Merge \"fix incorrect use of testing.future()\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/50f9274955da9ea9346ddf91222eea155ee9fd14",
        "buggy_code": "@testing.future",
        "fixed_code": "@testing.future()",
        "patch": "@@ -7402,7 +7402,7 @@ def test_one_or_none(self):\n             .one_or_none,\n         )\n \n-    @testing.future\n+    @testing.future()\n     def test_getslice(self):\n         assert False\n "
    },
    {
        "commit_id": "74aabce5190449ba2af65c180ebe67fe444193fb",
        "commit_message": "fix incorrect use of testing.future()\n\nthis has been emitting a warning probably for a long\ntime\n\nChange-Id: I44a6766b5e92d14ce6bbb5a90ab52648f877afc2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/74aabce5190449ba2af65c180ebe67fe444193fb",
        "buggy_code": "@testing.future",
        "fixed_code": "@testing.future()",
        "patch": "@@ -2283,7 +2283,7 @@ def test_preserves_orphans_onelevel(self):\n         eq_(sess.query(T2).all(), [T2()])\n         eq_(sess.query(T3).all(), [T3()])\n \n-    @testing.future\n+    @testing.future()\n     def test_preserves_orphans_onelevel_postremove(self):\n         T2, T3, T1 = (self.classes.T2, self.classes.T3, self.classes.T1)\n "
    },
    {
        "commit_id": "74aabce5190449ba2af65c180ebe67fe444193fb",
        "commit_message": "fix incorrect use of testing.future()\n\nthis has been emitting a warning probably for a long\ntime\n\nChange-Id: I44a6766b5e92d14ce6bbb5a90ab52648f877afc2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/74aabce5190449ba2af65c180ebe67fe444193fb",
        "buggy_code": "@testing.future",
        "fixed_code": "@testing.future()",
        "patch": "@@ -7402,7 +7402,7 @@ def test_one_or_none(self):\n             .one_or_none,\n         )\n \n-    @testing.future\n+    @testing.future()\n     def test_getslice(self):\n         assert False\n "
    },
    {
        "commit_id": "d663f4d5bd3685eb8e074b3ec8d9a5c7baba3d32",
        "commit_message": "Result.__enter__ annotation\n\nFixed typing issue where the object type when using :class:`_engine.Result`\nas a context manager were not preserved, indicating :class:`_engine.Result`\nin all cases rather than the specific :class:`_engine.Result` sub-type.\nPull request courtesy Martin Bal\u00e1\u017e.\n\nFixes: #9136\nCloses: #9135\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/9135\nPull-request-sha: 97a9829db59db359fbb400ec0d913bdf8954f00a\n\nChange-Id: I60a7f89ba39bf0f9fc5e6e7bf09f642167fe476f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d663f4d5bd3685eb8e074b3ec8d9a5c7baba3d32",
        "buggy_code": "def __enter__(self) -> Result[_TP]:",
        "fixed_code": "def __enter__(self: SelfResult) -> SelfResult:",
        "patch": "@@ -929,7 +929,7 @@ class Result(_WithKeys, ResultInternal[Row[_TP]]):\n     def __init__(self, cursor_metadata: ResultMetaData):\n         self._metadata = cursor_metadata\n \n-    def __enter__(self) -> Result[_TP]:\n+    def __enter__(self: SelfResult) -> SelfResult:\n         return self\n \n     def __exit__(self, type_: Any, value: Any, traceback: Any) -> None:"
    },
    {
        "commit_id": "d1eeef5e67fa4632f88a894f0c5cf4445f04ba2b",
        "commit_message": "typing updates\n\nThe :meth:`_sql.ColumnOperators.in_` and\n:meth:`_sql.ColumnOperators.not_in_` are typed to include\n``Iterable[Any]`` rather than ``Sequence[Any]`` for more flexibility in\nargument type.\n\nThe :func:`_sql.or_` and :func:`_sql.and_` from a typing perspective\nrequire the first argument to be present, however these functions still\naccept zero arguments which will emit a deprecation warning at runtime.\nTyping is also added to support sending the fixed literal ``False`` for\n:func:`_sql.or_` and ``True`` for :func:`_sql.and_` as the first argument\nonly, however the documentation now indicates sending the\n:func:`_sql.false` and :func:`_sql.true` constructs in these cases as a\nmore explicit approach.\n\nFixed typing issue where iterating over a :class:`_orm.Query` object\nwas not correctly typed.\n\nFixes: #9122\nFixes: #9123\nFixes: #9125\nChange-Id: I500e3e1b826717b3dd49afa1e682c3c8279c9226",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d1eeef5e67fa4632f88a894f0c5cf4445f04ba2b",
        "buggy_code": "role: Union[Type[roles.JoinTargetRole], Type[roles.OnClauseRole]],",
        "fixed_code": "role: Type[roles.JoinTargetRole],",
        "patch": "@@ -311,7 +311,7 @@ def expect(\n \n @overload\n def expect(\n-    role: Union[Type[roles.JoinTargetRole], Type[roles.OnClauseRole]],\n+    role: Type[roles.JoinTargetRole],\n     element: _JoinTargetProtocol,\n     **kw: Any,\n ) -> _JoinTargetProtocol:"
    },
    {
        "commit_id": "5cc18bb80077e98418b4a8066c0bc628209f3ada",
        "commit_message": "expand out Index if passed to \"constraint\"\n\nFixed bug where the PostgreSQL\n:paramref:`_postgresql.OnConflictClause.constraint` parameter would accept\nan :class:`.Index` object, however would not expand this index out into its\nindividual index expressions, instead rendering its name in an ON CONFLICT\nON CONSTRAINT clause, which is not accepted by PostgreSQL; the \"constraint\nname\" form only accepts unique or exclude constraint names. The parameter\ncontinues to accept the index but now expands it out into its component\nexpressions for the render.\n\nFixes: #9023\nChange-Id: I6baf243e26bfe578bf3f193c162dd7a623b6ede9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5cc18bb80077e98418b4a8066c0bc628209f3ada",
        "buggy_code": "(schema.Index, schema.Constraint, ext.ExcludeConstraint),",
        "fixed_code": "(schema.Constraint, ext.ExcludeConstraint),",
        "patch": "@@ -213,7 +213,7 @@ def __init__(self, constraint=None, index_elements=None, index_where=None):\n         if constraint is not None:\n             if not isinstance(constraint, str) and isinstance(\n                 constraint,\n-                (schema.Index, schema.Constraint, ext.ExcludeConstraint),\n+                (schema.Constraint, ext.ExcludeConstraint),\n             ):\n                 constraint = getattr(constraint, \"name\") or constraint\n "
    },
    {
        "commit_id": "f2b36ede482403a1d7631dca4cf7151898472598",
        "commit_message": "remove __allow_unmapped__ requirement from dataclasses\n\nRemoved the requirement that the ``__allow_unmapped__`` attribute be used\non Declarative Dataclass Mapped class when non-``Mapped[]`` annotations are\ndetected; previously, an error message that was intended to support legacy\nORM typed mappings would be raised, which additionally did not mention\ncorrect patterns to use with Dataclasses specifically. This error message\nis now no longer raised if :meth:`_orm.registry.mapped_as_dataclass` or\n:class:`_orm.MappedAsDataclass` is used.\n\nFixes: #8973\nChange-Id: I887afcc2da83dd904444bcb97f31e695b9f8b443",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f2b36ede482403a1d7631dca4cf7151898472598",
        "buggy_code": ")",
        "fixed_code": ") or bool(self.dataclass_setup_arguments)",
        "patch": "@@ -516,7 +516,7 @@ def __init__(\n \n         self.allow_unmapped_annotations = getattr(\n             self.cls, \"__allow_unmapped__\", False\n-        )\n+        ) or bool(self.dataclass_setup_arguments)\n \n         self.is_dataclass_prior_to_mapping = cld = dataclasses.is_dataclass(\n             cls_"
    },
    {
        "commit_id": "44170aee47a021883c6244f702de2e4385a5cd1d",
        "commit_message": "look out for extras=None in freeze\n\nFixed issue where :meth:`_engine.Result.freeze` method would not work for\ntextual SQL using either :func:`_sql.text` or\n:meth:`_engine.Connection.exec_driver_sql`.\n\nFixes: #8963\nChange-Id: Ia131c6ac41a4adf32eb1bf1abf23930ef395f16c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/44170aee47a021883c6244f702de2e4385a5cd1d",
        "buggy_code": "(name,) + extras,",
        "fixed_code": "(name,) + (extras if extras else ()),",
        "patch": "@@ -241,7 +241,7 @@ def __init__(\n         if extra:\n             recs_names = [\n                 (\n-                    (name,) + extras,\n+                    (name,) + (extras if extras else ()),\n                     (index, name, extras),\n                 )\n                 for index, (name, extras) in enumerate(zip(self._keys, extra))"
    },
    {
        "commit_id": "3d8d366e1b5e2f0caa728a741dad5e467b67c7ac",
        "commit_message": "Oracle COLUMN_VALUE is a column name, not a keyword\n\nFixed issue in Oracle compiler where the syntax for\n:meth:`.FunctionElement.column_valued` was incorrect, rendering the name\n``COLUMN_VALUE`` without qualifying the source table correctly.\n\nFixes: #8945\nChange-Id: Ia04bbdc68168e78b67a74bb3834a63f5d5000627",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3d8d366e1b5e2f0caa728a741dad5e467b67c7ac",
        "buggy_code": "text = \"COLUMN_VALUE \" + text",
        "fixed_code": "text = text + \".COLUMN_VALUE\"",
        "patch": "@@ -859,7 +859,7 @@ def visit_function(self, func, **kw):\n \n     def visit_table_valued_column(self, element, **kw):\n         text = super().visit_table_valued_column(element, **kw)\n-        text = \"COLUMN_VALUE \" + text\n+        text = text + \".COLUMN_VALUE\"\n         return text\n \n     def default_from(self):"
    },
    {
        "commit_id": "78833af4e650d37e6257cfbb541e4db56e2a285f",
        "commit_message": "update for mypy 1.0 dev\n\nAs I need dmypy to work without facing [1], I am\nrunning the latest build of mypy which seems so far\nto finally not have that issue.\n\nupdate constructs that latest mypy is being more picky\nabout, including better typing for the _NONE_NAME\nsymbol used in constraints (porting those elements\nfrom the Enum patch at\nI15ac3daee770408b5795746f47c1bbd931b7d26d)\n\n[1] https://github.com/python/mypy/issues/12744\n\nChange-Id: Ib3f56787fa65ea9bb2e6a0bccc4d99f54c516dad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/78833af4e650d37e6257cfbb541e4db56e2a285f",
        "buggy_code": "manager = factory(class_)",
        "fixed_code": "manager = ClassManager(class_)",
        "patch": "@@ -621,7 +621,7 @@ def create_manager_for_cls(self, class_: Type[_O]) -> ClassManager[_O]:\n \n         if factory is None:\n             factory = ClassManager\n-            manager = factory(class_)\n+            manager = ClassManager(class_)\n         else:\n             assert manager is not None\n "
    },
    {
        "commit_id": "78833af4e650d37e6257cfbb541e4db56e2a285f",
        "commit_message": "update for mypy 1.0 dev\n\nAs I need dmypy to work without facing [1], I am\nrunning the latest build of mypy which seems so far\nto finally not have that issue.\n\nupdate constructs that latest mypy is being more picky\nabout, including better typing for the _NONE_NAME\nsymbol used in constraints (porting those elements\nfrom the Enum patch at\nI15ac3daee770408b5795746f47c1bbd931b7d26d)\n\n[1] https://github.com/python/mypy/issues/12744\n\nChange-Id: Ib3f56787fa65ea9bb2e6a0bccc4d99f54c516dad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/78833af4e650d37e6257cfbb541e4db56e2a285f",
        "buggy_code": "GenericAlias = type(List[_T])",
        "fixed_code": "GenericAlias = type(List[Any])",
        "patch": "@@ -1365,7 +1365,7 @@ def _inspect_mc(\n         return mapper\n \n \n-GenericAlias = type(List[_T])\n+GenericAlias = type(List[Any])\n \n \n @inspection._inspects(GenericAlias)"
    },
    {
        "commit_id": "78833af4e650d37e6257cfbb541e4db56e2a285f",
        "commit_message": "update for mypy 1.0 dev\n\nAs I need dmypy to work without facing [1], I am\nrunning the latest build of mypy which seems so far\nto finally not have that issue.\n\nupdate constructs that latest mypy is being more picky\nabout, including better typing for the _NONE_NAME\nsymbol used in constraints (porting those elements\nfrom the Enum patch at\nI15ac3daee770408b5795746f47c1bbd931b7d26d)\n\n[1] https://github.com/python/mypy/issues/12744\n\nChange-Id: Ib3f56787fa65ea9bb2e6a0bccc4d99f54c516dad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/78833af4e650d37e6257cfbb541e4db56e2a285f",
        "buggy_code": "from .elements import _NONE_NAME",
        "fixed_code": "from .base import _NONE_NAME",
        "patch": "@@ -16,7 +16,7 @@\n import re\n \n from . import events  # noqa\n-from .elements import _NONE_NAME\n+from .base import _NONE_NAME\n from .elements import conv as conv\n from .schema import CheckConstraint\n from .schema import Column"
    },
    {
        "commit_id": "78833af4e650d37e6257cfbb541e4db56e2a285f",
        "commit_message": "update for mypy 1.0 dev\n\nAs I need dmypy to work without facing [1], I am\nrunning the latest build of mypy which seems so far\nto finally not have that issue.\n\nupdate constructs that latest mypy is being more picky\nabout, including better typing for the _NONE_NAME\nsymbol used in constraints (porting those elements\nfrom the Enum patch at\nI15ac3daee770408b5795746f47c1bbd931b7d26d)\n\n[1] https://github.com/python/mypy/issues/12744\n\nChange-Id: Ib3f56787fa65ea9bb2e6a0bccc4d99f54c516dad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/78833af4e650d37e6257cfbb541e4db56e2a285f",
        "buggy_code": "from .elements import _NONE_NAME",
        "fixed_code": "from .base import _NONE_NAME",
        "patch": "@@ -37,10 +37,10 @@\n from . import operators\n from . import roles\n from . import type_api\n+from .base import _NONE_NAME\n from .base import NO_ARG\n from .base import SchemaEventTarget\n from .cache_key import HasCacheKey\n-from .elements import _NONE_NAME\n from .elements import quoted_name\n from .elements import Slice\n from .elements import TypeCoerce as type_coerce  # noqa"
    },
    {
        "commit_id": "78833af4e650d37e6257cfbb541e4db56e2a285f",
        "commit_message": "update for mypy 1.0 dev\n\nAs I need dmypy to work without facing [1], I am\nrunning the latest build of mypy which seems so far\nto finally not have that issue.\n\nupdate constructs that latest mypy is being more picky\nabout, including better typing for the _NONE_NAME\nsymbol used in constraints (porting those elements\nfrom the Enum patch at\nI15ac3daee770408b5795746f47c1bbd931b7d26d)\n\n[1] https://github.com/python/mypy/issues/12744\n\nChange-Id: Ib3f56787fa65ea9bb2e6a0bccc4d99f54c516dad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/78833af4e650d37e6257cfbb541e4db56e2a285f",
        "buggy_code": "from sqlalchemy.sql.elements import _NONE_NAME",
        "fixed_code": "from sqlalchemy.sql.base import _NONE_NAME",
        "patch": "@@ -44,7 +44,7 @@\n from sqlalchemy.schema import DropIndex\n from sqlalchemy.sql import naming\n from sqlalchemy.sql import operators\n-from sqlalchemy.sql.elements import _NONE_NAME\n+from sqlalchemy.sql.base import _NONE_NAME\n from sqlalchemy.sql.elements import literal_column\n from sqlalchemy.sql.schema import RETAIN_SCHEMA\n from sqlalchemy.testing import assert_raises"
    },
    {
        "commit_id": "df3bd8d29740e846d7faac842a6e2de16cf483f0",
        "commit_message": "add \"merge\" to viewonly cascades; propagate NO_RAISE when merging\n\nFixed bug where :meth:`_orm.Session.merge` would fail to preserve the\ncurrent loaded contents of relationship attributes that were indicated with\nthe :paramref:`_orm.relationship.viewonly` parameter, thus defeating\nstrategies that use :meth:`_orm.Session.merge` to pull fully loaded objects\nfrom caches and other similar techniques. In a related change, fixed issue\nwhere an object that contains a loaded relationship that was nonetheless\nconfigured as ``lazy='raise'`` on the mapping would fail when passed to\n:meth:`_orm.Session.merge`; checks for \"raise\" are now suspended within\nthe merge process assuming the :paramref:`_orm.Session.merge.load`\nparameter remains at its default of ``True``.\n\nOverall, this is a behavioral adjustment to a change introduced in the 1.4\nseries as of :ticket:`4994`, which took \"merge\" out of the set of cascades\napplied by default to \"viewonly\" relationships. As \"viewonly\" relationships\naren't persisted under any circumstances, allowing their contents to\ntransfer during \"merge\" does not impact the persistence behavior of the\ntarget object. This allows :meth:`_orm.Session.merge` to correctly suit one\nof its use cases, that of adding objects to a :class:`.Session` that were\nloaded elsewhere, often for the purposes of restoring from a cache.\n\nFixes: #8862\nChange-Id: I8731c7810460e6a71f8bf5e8ded59142b9b02956",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/df3bd8d29740e846d7faac842a6e2de16cf483f0",
        "buggy_code": "_viewonly_cascades = [\"expunge\", \"all\", \"none\", \"refresh-expire\"]",
        "fixed_code": "_viewonly_cascades = [\"expunge\", \"all\", \"none\", \"refresh-expire\", \"merge\"]",
        "patch": "@@ -136,7 +136,7 @@ class CascadeOptions(FrozenSet[str]):\n     )\n     _allowed_cascades = all_cascades\n \n-    _viewonly_cascades = [\"expunge\", \"all\", \"none\", \"refresh-expire\"]\n+    _viewonly_cascades = [\"expunge\", \"all\", \"none\", \"refresh-expire\", \"merge\"]\n \n     __slots__ = (\n         \"save_update\","
    },
    {
        "commit_id": "fbec926c4744aa97a48a011939354c8b8f8be566",
        "commit_message": "flake8 has very courteously referred us to another pyqca project and closed all comments, thank you!  I'll get on that right away\n\npyqca/flake8-import-order does not seem to have a release or a commit\nin the past two years, so while I have created an issue and PR [1] [2],\nfor now vendor our fork so we can get on with things.\n\nAlso fix one issue for flake8 6.0\n\n[1] https://github.com/PyCQA/flake8-import-order/issues/189\n[2] https://github.com/PyCQA/flake8-import-order/pull/190\n\nChange-Id: I53045f65b8716cceaf2104fccc1d26f80b398fef\nReferences: https://github.com/PyCQA/flake8/issues/1751",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fbec926c4744aa97a48a011939354c8b8f8be566",
        "buggy_code": "exprs: _typing_Sequence[Any]",
        "fixed_code": "exprs: _typing_Sequence[Any]  # noqa: F842",
        "patch": "@@ -4997,7 +4997,7 @@ def drop(self, bind: _CreateDropBind, checkfirst: bool = False) -> None:\n         bind._run_ddl_visitor(ddl.SchemaDropper, self, checkfirst=checkfirst)\n \n     def __repr__(self) -> str:\n-        exprs: _typing_Sequence[Any]\n+        exprs: _typing_Sequence[Any]  # noqa: F842\n \n         return \"Index(%s)\" % (\n             \", \".join("
    },
    {
        "commit_id": "93dc7ea1502c37793011b094447641361aff5aba",
        "commit_message": "don't invoke fromclause.c when creating an annotated\n\nThe ``aliased()`` constructor calls upon ``__clause_element__()``,\nwhich internally annotates a ``FromClause``, like a subquery.\nThis became expensive as ``AnnotatedFromClause`` has for\nmany years called upon ``element.c`` so that the full ``.c``\ncollection is transferred to the Annotated.\n\nTaking this out proved to be challenging. A straight remove\nseemed to not break any tests except for the one that\ntested the exact condition.  Nevertheless this seemed\n\"spooky\" so I instead moved the get of ``.c`` to be in a\nmemoized proxy method.   However, that then exposed\na recursion issue related to loader_criteria; so the\nsource of that behavior, which was an accidental behavioral\nartifact, is now made into an explcicit option that\nloader_criteria uses directly.\n\nThe accidental behavioral artifact in question is still\nkind of strange since I was not able to fully trace out\nhow it works, but the end result is that fixing the\nartifact to be \"correct\" causes loader_criteria, within\nthe particular test for #7491, creates a select/\nsubquery structure with a cycle in it, so compilation fails\nwith recursion overflow.\nThe \"solution\" is to cause the artifact to occur in this\ncase, which is that the ``AnnotatedFromClause`` will have a\ndifferent ``.c`` collection than its element, which is a\nsubquery.  It's not totally clear how a cycle is generated\nwhen this is not done.\n\nThis is commit one of two, which goes through\nsome hoops to make essentially a one-line change.\n\nThe next commit will rework ColumnCollection to optimize\nthe corresponding_column() method significantly.\n\nFixes: #8796\nChange-Id: Id58ae6554db62139462c11a8be7313a3677456ad",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/93dc7ea1502c37793011b094447641361aff5aba",
        "buggy_code": "from sqlalchemy.orm import mapper as _orm_mapper",
        "fixed_code": "from sqlalchemy.orm import mapperlib as _orm_mapper",
        "patch": "@@ -35,7 +35,7 @@\n     from sqlalchemy.orm import decl_base as _orm_decl_base\n     from sqlalchemy.orm import dependency as _orm_dependency\n     from sqlalchemy.orm import descriptor_props as _orm_descriptor_props\n-    from sqlalchemy.orm import mapper as _orm_mapper\n+    from sqlalchemy.orm import mapperlib as _orm_mapper\n     from sqlalchemy.orm import properties as _orm_properties\n     from sqlalchemy.orm import relationships as _orm_relationships\n     from sqlalchemy.orm import session as _orm_session"
    },
    {
        "commit_id": "604611e7e522269ee11b314fb6fb75873a465494",
        "commit_message": "repair --disable-asyncio parameter\n\nFixed issue where the ``--disable-asyncio`` parameter to the test suite\nwould fail to not actually run greenlet tests and would also not prevent\nthe suite from using a \"wrapping\" greenlet for the whole suite. This\nparameter now ensures that no greenlet or asyncio use will occur within the\nentire run when set.\n\nFixes: #8793\nChange-Id: I87b510846b2cc24413cd54e7b7136e91aad3c309",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/604611e7e522269ee11b314fb6fb75873a465494",
        "buggy_code": "@post",
        "fixed_code": "@pre",
        "patch": "@@ -392,7 +392,7 @@ def _init_symbols(options, file_config):\n     config._fixture_functions = _fixture_fn_class()\n \n \n-@post\n+@pre\n def _set_disable_asyncio(opt, file_config):\n     if opt.disable_asyncio:\n "
    },
    {
        "commit_id": "e3a8d198917f4246365e09fa975d55c64082cd2e",
        "commit_message": "work around Python 3.11 IntEnum issue; update FastIntFlag\n\nin [1], Python 3.11 seems to have changed the behavior of\nIntEnum.  We didn't notice this because we have our own\nworkaround class already, but typing did.   Ensure we remain\ncompatible with IntFlag.\n\nThis change also modifies FastIntFlag to no longer use\nglobal symbols; this is unnecessary as we assign FastIntFlag\nmembers explicitly.  Use of ``symbol()`` should probably\nbe phased out.\n\n[1] https://github.com/python/cpython/issues/99304\nFixes: #8783\n\nChange-Id: I8ae2e871ff1467ae5ca1f63e66b5dae45d4a6c93",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3a8d198917f4246365e09fa975d55c64082cd2e",
        "buggy_code": ") = tuple(ExecutemanyMode)",
        "fixed_code": ") = ExecutemanyMode.__members__.values()",
        "patch": "@@ -583,7 +583,7 @@ class ExecutemanyMode(FastIntFlag):\n (\n     EXECUTEMANY_VALUES,\n     EXECUTEMANY_VALUES_PLUS_BATCH,\n-) = tuple(ExecutemanyMode)\n+) = ExecutemanyMode.__members__.values()\n \n \n class PGDialect_psycopg2(_PGDialect_common_psycopg):"
    },
    {
        "commit_id": "e3a8d198917f4246365e09fa975d55c64082cd2e",
        "commit_message": "work around Python 3.11 IntEnum issue; update FastIntFlag\n\nin [1], Python 3.11 seems to have changed the behavior of\nIntEnum.  We didn't notice this because we have our own\nworkaround class already, but typing did.   Ensure we remain\ncompatible with IntFlag.\n\nThis change also modifies FastIntFlag to no longer use\nglobal symbols; this is unnecessary as we assign FastIntFlag\nmembers explicitly.  Use of ``symbol()`` should probably\nbe phased out.\n\n[1] https://github.com/python/cpython/issues/99304\nFixes: #8783\n\nChange-Id: I8ae2e871ff1467ae5ca1f63e66b5dae45d4a6c93",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3a8d198917f4246365e09fa975d55c64082cd2e",
        "buggy_code": ") = tuple(PassiveFlag)",
        "fixed_code": ") = PassiveFlag.__members__.values()",
        "patch": "@@ -188,7 +188,7 @@ class PassiveFlag(FastIntFlag):\n     PASSIVE_NO_FETCH,\n     PASSIVE_NO_FETCH_RELATED,\n     PASSIVE_ONLY_PERSISTENT,\n-) = tuple(PassiveFlag)\n+) = PassiveFlag.__members__.values()\n \n DEFAULT_MANAGER_ATTR = \"_sa_class_manager\"\n DEFAULT_STATE_ATTR = \"_sa_instance_state\""
    },
    {
        "commit_id": "7249fa4a51f20c6c62ba94241900600023662bdb",
        "commit_message": "fix event name\n\nChange-Id: I26af2326034be07f0ebc91dfbf31d00c40acf585\nReferences: #8717",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7249fa4a51f20c6c62ba94241900600023662bdb",
        "buggy_code": "def _reset_mssql(dbapi_connection, connection_record, reset_state):",
        "fixed_code": "def _reset_postgresql(dbapi_connection, connection_record, reset_state):",
        "patch": "@@ -277,7 +277,7 @@ def use_identity(element, compiler, **kw):\n \n \n     @event.listens_for(postgresql_engine, \"reset\")\n-    def _reset_mssql(dbapi_connection, connection_record, reset_state):\n+    def _reset_postgresql(dbapi_connection, connection_record, reset_state):\n         if not reset_state.terminate_only:\n             dbapi_connection.execute(\"CLOSE ALL\")\n             dbapi_connection.execute(\"RESET ALL\")"
    },
    {
        "commit_id": "b4261c45ab5861e86eb26cc08510fb114db0ec12",
        "commit_message": "ensure pool.reset event always called for reset\n\nAdded new parameter :paramref:`.PoolEvents.reset.reset_state` parameter to\nthe :meth:`.PoolEvents.reset` event, with deprecation logic in place that\nwill continue to accept event hooks using the previous set of arguments.\nThis indicates various state information about how the reset is taking\nplace and is used to allow custom reset schemes to take place with full\ncontext given.\n\nWithin this change a fix that's also backported to 1.4 is included which\nre-enables the :meth:`.PoolEvents.reset` event to continue to take place\nunder all circumstances, including when :class:`.Connection` has already\n\"reset\" the connection.\n\nThe two changes together allow custom reset schemes to be implemented using\nthe :meth:`.PoolEvents.reset` event, instead of the\n:meth:`.PoolEvents.checkin` event (which continues to function as it always\nhas).\n\nChange-Id: Ie17c4f55d02beb6f570b9de6b3044baffa7d6df6\nFixes: #8717",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4261c45ab5861e86eb26cc08510fb114db0ec12",
        "buggy_code": ":paramref:`_pool.Pool.reset_on_return`",
        "fixed_code": ":ref:`pool_reset_on_return`",
        "patch": "@@ -469,7 +469,7 @@ def create_engine(url: Union[str, \"_url.URL\"], **kwargs: Any) -> Engine:\n \n         .. seealso::\n \n-            :paramref:`_pool.Pool.reset_on_return`\n+            :ref:`pool_reset_on_return`\n \n     :param pool_timeout=30: number of seconds to wait before giving\n         up on getting a connection from the pool. This is only used"
    },
    {
        "commit_id": "257002227b811c85c7887236321d9965455889bc",
        "commit_message": "de-optionalize union types to support Optional for m2o\n\nFixed bug in new ORM typed declarative mappings where we did not include\nthe ability to use ``Optional[]`` in the type annotation for a many-to-one\nrelationship, even though this is common.\n\nFixes: #8668\nChange-Id: Idaf0846e49cc12095394b99ad6fe678735cf9242",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/257002227b811c85c7887236321d9965455889bc",
        "buggy_code": "user: Mapped[\"User\"] = relationship(",
        "fixed_code": "user: Mapped[Optional[\"User\"]] = relationship(",
        "patch": "@@ -321,7 +321,7 @@ class Address(MappedAsDataclass, decl_base):\n             id: Mapped[intpk] = mapped_column(init=False)\n             email_address: Mapped[str]\n             user_id: Mapped[user_fk] = mapped_column(init=False)\n-            user: Mapped[\"User\"] = relationship(\n+            user: Mapped[Optional[\"User\"]] = relationship(\n                 back_populates=\"addresses\", default=None\n             )\n "
    },
    {
        "commit_id": "f2056ca03f187abd0840093bb5409a449d0e18f6",
        "commit_message": "repair type qualify in _ServerDefaultType; other pyright tweaks\n\nas we haven't done full pylance / pyright strict typing internally,\nsome of the things pyright reports on specifically will leak\nout into user code, such as this mapped_column() issue.\nSo we will have to look more closely at pyright strict\nmode going forward for the release.\n\nFixed typing issue where pylance strict mode would report \"partially\nunknown\" datatype for the :func:`_orm.mapped_column` construct.\n\nAlso repaired a trailing comma and pyright complaining about overloads\nfor orm.composite.\n\nFixes: #8644\nChange-Id: Ia48dc5dbd56bbceeacee4f0daf9810bfdea3bee3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f2056ca03f187abd0840093bb5409a449d0e18f6",
        "buggy_code": "\"\"\"Symbol used internally to indicate an attribute had no callable.\"\"\",",
        "fixed_code": "\"\"\"Symbol used internally to indicate an attribute had no callable.\"\"\"",
        "patch": "@@ -77,7 +77,7 @@ class LoaderCallableStatus(Enum):\n     \"\"\"\n \n     ATTR_EMPTY = 3\n-    \"\"\"Symbol used internally to indicate an attribute had no callable.\"\"\",\n+    \"\"\"Symbol used internally to indicate an attribute had no callable.\"\"\"\n \n     NO_VALUE = 4\n     \"\"\"Symbol which may be placed as the 'previous' value of an attribute,"
    },
    {
        "commit_id": "f2056ca03f187abd0840093bb5409a449d0e18f6",
        "commit_message": "repair type qualify in _ServerDefaultType; other pyright tweaks\n\nas we haven't done full pylance / pyright strict typing internally,\nsome of the things pyright reports on specifically will leak\nout into user code, such as this mapped_column() issue.\nSo we will have to look more closely at pyright strict\nmode going forward for the release.\n\nFixed typing issue where pylance strict mode would report \"partially\nunknown\" datatype for the :func:`_orm.mapped_column` construct.\n\nAlso repaired a trailing comma and pyright complaining about overloads\nfor orm.composite.\n\nFixes: #8644\nChange-Id: Ia48dc5dbd56bbceeacee4f0daf9810bfdea3bee3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f2056ca03f187abd0840093bb5409a449d0e18f6",
        "buggy_code": "_ServerDefaultType = Union[\"FetchedValue\", str, TextClause, ColumnElement]",
        "fixed_code": "_ServerDefaultType = Union[\"FetchedValue\", str, TextClause, ColumnElement[Any]]",
        "patch": "@@ -105,7 +105,7 @@\n \n _T = TypeVar(\"_T\", bound=\"Any\")\n _SI = TypeVar(\"_SI\", bound=\"SchemaItem\")\n-_ServerDefaultType = Union[\"FetchedValue\", str, TextClause, ColumnElement]\n+_ServerDefaultType = Union[\"FetchedValue\", str, TextClause, ColumnElement[Any]]\n _TAB = TypeVar(\"_TAB\", bound=\"Table\")\n \n "
    },
    {
        "commit_id": "4580239b35642045c847c6faac8dd4fe304bb845",
        "commit_message": "implement autobegin=False option\n\nAdded new parameter :paramref:`_orm.Session.autobegin`, which when set to\n``False`` will prevent the :class:`_orm.Session` from beginning a\ntransaction implicitly. The :meth:`_orm.Session.begin` method must be\ncalled explicitly first in order to proceed with operations, otherwise an\nerror is raised whenever any operation would otherwise have begun\nautomatically. This option can be used to create a \"safe\"\n:class:`_orm.Session` that won't implicitly start new transactions.\n\nAs part of this change, also added a new status variable\n:class:`_orm.SessionTransaction.origin` which may be useful for event\nhandling code to be aware of the origin of a particular\n:class:`_orm.SessionTransaction`.\n\nFixes: #6928\nChange-Id: I246f895c4a475bff352216e5bc74b6a25e6a4ae7",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4580239b35642045c847c6faac8dd4fe304bb845",
        "buggy_code": "subtrans = s1.begin(_subtrans=True)",
        "fixed_code": "subtrans = s1._autobegin_t()._begin()",
        "patch": "@@ -2108,7 +2108,7 @@ def test_in_transaction_subtransactions(self):\n             eq_(s1.in_transaction(), True)\n             is_(s1.get_transaction(), trans)\n \n-            subtrans = s1.begin(_subtrans=True)\n+            subtrans = s1._autobegin_t()._begin()\n             is_(s1.get_transaction(), trans)\n             eq_(s1.in_transaction(), True)\n "
    },
    {
        "commit_id": "8c07c68c36815de6cb3aeeeb87a94824310cb551",
        "commit_message": "adjust for mypy 0.981\n\nnew release is out today, fix a very small number of new\nissues.\n\nChange-Id: I443c78f3384319d56deb2c9309118ffb750bbf41",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8c07c68c36815de6cb3aeeeb87a94824310cb551",
        "buggy_code": ") -> _T:",
        "fixed_code": ") -> Any:",
        "patch": "@@ -199,7 +199,7 @@ def __call__(\n         creator: _CreatorProtocol[Any],\n         value_attr: str,\n         parent: AssociationProxyInstance[Any],\n-    ) -> _T:\n+    ) -> Any:\n         ...\n \n "
    },
    {
        "commit_id": "a8029f5a7e3e376ec57f1614ab0294b717d53c05",
        "commit_message": "ORM bulk insert via execute\n\n* ORM Insert now includes \"bulk\" mode that will run\n  essentially the same process as session.bulk_insert_mappings;\n  interprets the given list of values as ORM attributes for\n  key names\n* ORM UPDATE has a similar feature, without RETURNING support,\n  for session.bulk_update_mappings\n* Added support for upserts to do RETURNING ORM objects as well\n* ORM UPDATE/DELETE with list of parameters + WHERE criteria\n  is a not implemented; use connection\n* ORM UPDATE/DELETE defaults to \"auto\" synchronize_session;\n  use fetch if RETURNING is present, evaluate if not, as\n  \"fetch\" is much more efficient (no expired object SELECT problem)\n  and less error prone if RETURNING is available\n  UPDATE: howver this is inefficient!   please continue to\n  use evaluate for simple cases, auto can move to fetch\n  if criteria not evaluable\n* \"Evaluate\" criteria will now not preemptively\n  unexpire and SELECT attributes that were individually\n  expired. Instead, if evaluation of the criteria indicates that\n  the necessary attrs were expired, we expire the object\n  completely (delete) or expire the SET attrs unconditionally\n  (update). This keeps the object in the same unloaded state\n  where it will refresh those attrs on the next pass, for\n  this generally unusual case.  (originally #5664)\n* Core change! update/delete rowcount comes from len(rows)\n  if RETURNING was used.  SQLite at least otherwise did not\n  support this.  adjusted test_rowcount accordingly\n* ORM DELETE with a list of parameters at all is also a not\n  implemented as this would imply \"bulk\", and there is no\n  bulk_delete_mappings (could be, but we dont have that)\n* ORM insert().values() with single or multi-values translates\n  key names based on ORM attribute names\n* ORM returning() implemented for insert, update, delete;\n  explcit returning clauses now interpret rows in an ORM\n  context, with support for qualifying loader options as well\n* session.bulk_insert_mappings() assigns polymorphic identity\n  if not set.\n* explicit RETURNING + synchronize_session='fetch' is now\n  supported with UPDATE and DELETE.\n* expanded return_defaults() to work with DELETE also.\n* added support for composite attributes to be present\n  in the dictionaries used by bulk_insert_mappings and\n  bulk_update_mappings, which is also the new ORM bulk\n  insert/update feature, that will expand the composite\n  values into their individual mapped attributes the way they'd\n  be on a mapped instance.\n* bulk UPDATE supports \"synchronize_session=evaluate\", is the\n  default.  this does not apply to session.bulk_update_mappings,\n  just the new version\n* both bulk UPDATE and bulk INSERT, the latter with or without\n  RETURNING, support *heterogenous* parameter sets.\n  session.bulk_insert/update_mappings did this, so this feature\n  is maintained.  now cursor result can be both horizontally\n  and vertically spliced :)\n\nThis is now a long story with a lot of options, which in\nitself is a problem to be able to document all of this\nin some way that makes sense.  raising exceptions for\nuse cases we haven't supported is pretty important here\ntoo, the tradition of letting unsupported things just not work\nis likely not a good idea at this point, though there\nare still many cases that aren't easily avoidable\n\nFixes: #8360\nFixes: #7864\nFixes: #7865\nChange-Id: Idf28379f8705e403a3c6a937f6a798a042ef2540",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a8029f5a7e3e376ec57f1614ab0294b717d53c05",
        "buggy_code": ":class:`.Insert` constructs as well as all ORM use no longer use the",
        "fixed_code": ":class:`_dml.Insert` constructs as well as all ORM use no longer use the",
        "patch": "@@ -301,7 +301,7 @@ def provide_token(dialect, conn_rec, cargs, cparams):\n    The SQL Server ``fast_executemany`` parameter may be used at the same time\n    as ``insertmanyvalues`` is enabled; however, the parameter will not be used\n    in as many cases as INSERT statements that are invoked using Core\n-   :class:`.Insert` constructs as well as all ORM use no longer use the\n+   :class:`_dml.Insert` constructs as well as all ORM use no longer use the\n    ``.executemany()`` DBAPI cursor method.\n \n The PyODBC driver includes support for a \"fast executemany\" mode of execution"
    },
    {
        "commit_id": "a8029f5a7e3e376ec57f1614ab0294b717d53c05",
        "commit_message": "ORM bulk insert via execute\n\n* ORM Insert now includes \"bulk\" mode that will run\n  essentially the same process as session.bulk_insert_mappings;\n  interprets the given list of values as ORM attributes for\n  key names\n* ORM UPDATE has a similar feature, without RETURNING support,\n  for session.bulk_update_mappings\n* Added support for upserts to do RETURNING ORM objects as well\n* ORM UPDATE/DELETE with list of parameters + WHERE criteria\n  is a not implemented; use connection\n* ORM UPDATE/DELETE defaults to \"auto\" synchronize_session;\n  use fetch if RETURNING is present, evaluate if not, as\n  \"fetch\" is much more efficient (no expired object SELECT problem)\n  and less error prone if RETURNING is available\n  UPDATE: howver this is inefficient!   please continue to\n  use evaluate for simple cases, auto can move to fetch\n  if criteria not evaluable\n* \"Evaluate\" criteria will now not preemptively\n  unexpire and SELECT attributes that were individually\n  expired. Instead, if evaluation of the criteria indicates that\n  the necessary attrs were expired, we expire the object\n  completely (delete) or expire the SET attrs unconditionally\n  (update). This keeps the object in the same unloaded state\n  where it will refresh those attrs on the next pass, for\n  this generally unusual case.  (originally #5664)\n* Core change! update/delete rowcount comes from len(rows)\n  if RETURNING was used.  SQLite at least otherwise did not\n  support this.  adjusted test_rowcount accordingly\n* ORM DELETE with a list of parameters at all is also a not\n  implemented as this would imply \"bulk\", and there is no\n  bulk_delete_mappings (could be, but we dont have that)\n* ORM insert().values() with single or multi-values translates\n  key names based on ORM attribute names\n* ORM returning() implemented for insert, update, delete;\n  explcit returning clauses now interpret rows in an ORM\n  context, with support for qualifying loader options as well\n* session.bulk_insert_mappings() assigns polymorphic identity\n  if not set.\n* explicit RETURNING + synchronize_session='fetch' is now\n  supported with UPDATE and DELETE.\n* expanded return_defaults() to work with DELETE also.\n* added support for composite attributes to be present\n  in the dictionaries used by bulk_insert_mappings and\n  bulk_update_mappings, which is also the new ORM bulk\n  insert/update feature, that will expand the composite\n  values into their individual mapped attributes the way they'd\n  be on a mapped instance.\n* bulk UPDATE supports \"synchronize_session=evaluate\", is the\n  default.  this does not apply to session.bulk_update_mappings,\n  just the new version\n* both bulk UPDATE and bulk INSERT, the latter with or without\n  RETURNING, support *heterogenous* parameter sets.\n  session.bulk_insert/update_mappings did this, so this feature\n  is maintained.  now cursor result can be both horizontally\n  and vertically spliced :)\n\nThis is now a long story with a lot of options, which in\nitself is a problem to be able to document all of this\nin some way that makes sense.  raising exceptions for\nuse cases we haven't supported is pretty important here\ntoo, the tradition of letting unsupported things just not work\nis likely not a good idea at this point, though there\nare still many cases that aren't easily avoidable\n\nFixes: #8360\nFixes: #7864\nFixes: #7865\nChange-Id: Idf28379f8705e403a3c6a937f6a798a042ef2540",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a8029f5a7e3e376ec57f1614ab0294b717d53c05",
        "buggy_code": "\"VALUES (:person_id, :data)\",",
        "fixed_code": "\"VALUES (:person_id, :data) RETURNING ball.id\",",
        "patch": "@@ -1125,7 +1125,7 @@ def test_post_update_o2m(self):\n                 [\n                     CompiledSQL(\n                         \"INSERT INTO ball (person_id, data) \"\n-                        \"VALUES (:person_id, :data)\",\n+                        \"VALUES (:person_id, :data) RETURNING ball.id\",\n                         [\n                             {\"person_id\": None, \"data\": \"some data\"},\n                             {\"person_id\": None, \"data\": \"some data\"},"
    },
    {
        "commit_id": "d3e0b8e750d864766148cdf1a658a601079eed46",
        "commit_message": "run update_subclass anytime we add new clslevel dispatch\n\nFixed event listening issue where event listeners added to a superclass\nwould be lost if a subclass were created which then had its own listeners\nassociated. The practical example is that of the :class:`.sessionmaker`\nclass created after events have been associated with the\n:class:`_orm.Session` class.\n\nFixes: #8467\nChange-Id: I9bdba8769147e30110a09900d4a577e833ac3af9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d3e0b8e750d864766148cdf1a658a601079eed46",
        "buggy_code": "def walk_subclasses(cls: type) -> Iterator[type]:",
        "fixed_code": "def walk_subclasses(cls: Type[_T]) -> Iterator[Type[_T]]:",
        "patch": "@@ -152,7 +152,7 @@ def __exit__(\n             raise value.with_traceback(traceback)\n \n \n-def walk_subclasses(cls: type) -> Iterator[type]:\n+def walk_subclasses(cls: Type[_T]) -> Iterator[Type[_T]]:\n     seen: Set[Any] = set()\n \n     stack = [cls]"
    },
    {
        "commit_id": "5fb63bc1423e75812a24e809d16731a3282c2a12",
        "commit_message": "Comments on (named) constraints\n\nAdds support for comments on named constraints, including `ForeignKeyConstraint`, `PrimaryKeyConstraint`, `CheckConstraint`, `UniqueConstraint`, solving the [Issue 5667](https://github.com/sqlalchemy/sqlalchemy/issues/5667).\n\nSupports only PostgreSQL backend.\n\n### Description\n\nFollowing the example of [Issue 1546](https://github.com/sqlalchemy/sqlalchemy/issues/1546), supports comments on constraints. Specifically, enables comments on _named_ ones \u2014 as I get it, PostgreSQL prohibits comments on unnamed constraints.\n\nEnables setting the comments for named constraints like this:\n```\nTable(\n   'example', metadata,\n   Column('id', Integer),\n   Column('data', sa.String(30)),\n   PrimaryKeyConstraint(\n       \"id\", name=\"id_pk\", comment=\"id_pk comment\"\n    ),\n   CheckConstraint('id < 100', name=\"cc1\", comment=\"Id value can't exceed 100\"),\n   UniqueConstraint(['data'], name=\"uc1\", comment=\"Must have unique data field\"),\n)\n```\n\nProvides the DDL representation for constraint comments and routines to create and drop them. Class `.Inspector` reflects constraint comments via methods like `get_check_constraints` .\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n- [ ] A short code fix\n- [x] A new feature implementation\n\t- Solves the issue 5667.\n\t- The commit message includes `Fixes: 5667`.\n\t- Includes tests based on comment reflection.\n\n**Have a nice day!**\n\nFixes: #5667\nCloses: #7742\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7742\nPull-request-sha: 42a5d3c3e9ccf9a9d5397fd007aeab0854f66130\n\nChange-Id: Ia60f578595afdbd6089541c9a00e37997ef78ad3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5fb63bc1423e75812a24e809d16731a3282c2a12",
        "buggy_code": "print(\"Running \", fn.__name__, \"...\", flush=True, end=\"\")",
        "fixed_code": "print(\"Running\", fn.__name__, \"...\", flush=True, end=\"\")",
        "patch": "@@ -100,7 +100,7 @@ def generate_meta(schema_name, table_number, min_cols, max_cols, dialect_name):\n def log(fn):\n     @wraps(fn)\n     def wrap(*a, **kw):\n-        print(\"Running \", fn.__name__, \"...\", flush=True, end=\"\")\n+        print(\"Running\", fn.__name__, \"...\", flush=True, end=\"\")\n         try:\n             r = fn(*a, **kw)\n         except NotImplementedError:"
    },
    {
        "commit_id": "db08a699489c9b0259579d7ff7fd6bf3496ca3a2",
        "commit_message": "rearchitect reflection for batched performance\n\nRearchitected the schema reflection API to allow some dialects to make use\nof high performing batch queries to reflect the schemas of many tables at\nonce using much fewer queries. The new performance features are targeted\nfirst at the PostgreSQL and Oracle backends, and may be applied to any\ndialect that makes use of SELECT queries against system catalog tables to\nreflect tables (currently this omits the MySQL and SQLite dialects which\ninstead make use of parsing the \"CREATE TABLE\" statement, however these\ndialects do not have a pre-existing performance issue with reflection. MS\nSQL Server is still a TODO).\n\nThe new API is backwards compatible with the previous system, and should\nrequire no changes to third party dialects to retain compatibility;\nthird party dialects can also opt into the new system by implementing\nbatched queries for schema reflection.\n\nAlong with this change is an updated reflection API that is fully\n:pep:`484` typed, features many new methods and some changes.\n\nFixes: #4379\nChange-Id: I897ec09843543aa7012bcdce758792ed3d415d08",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/db08a699489c9b0259579d7ff7fd6bf3496ca3a2",
        "buggy_code": "def _validate_dialect_kwargs(self, kwargs: Any) -> None:",
        "fixed_code": "def _validate_dialect_kwargs(self, kwargs: Dict[str, Any]) -> None:",
        "patch": "@@ -536,7 +536,7 @@ def dialect_options(self):\n             util.portable_instancemethod(self._kw_reg_for_dialect_cls)\n         )\n \n-    def _validate_dialect_kwargs(self, kwargs: Any) -> None:\n+    def _validate_dialect_kwargs(self, kwargs: Dict[str, Any]) -> None:\n         # validate remaining kwargs that they all specify DB prefixes\n \n         if not kwargs:"
    },
    {
        "commit_id": "93bc7ed534f12934528c0cbf5489417ddc025e40",
        "commit_message": "graceful degrade for FKs not reflectable\n\nFixed bugs involving the :paramref:`.Table.include_columns` and the\n:paramref:`.Table.resolve_fks` parameters on :class:`.Table`; these\nlittle-used parameters were apparently not working for columns that refer\nto foreign key constraints.\n\nIn the first case, not-included columns that refer to foreign keys would\nstill attempt to create a :class:`.ForeignKey` object, producing errors\nwhen attempting to resolve the columns for the foreign key constraint\nwithin reflection; foreign key constraints that refer to skipped columns\nare now omitted from the table reflection process in the same way as\noccurs for :class:`.Index` and :class:`.UniqueConstraint` objects with the\nsame conditions. No warning is produced however, as we likely want to\nremove the include_columns warnings for all constraints in 2.0.\n\nIn the latter case, the production of table aliases or subqueries would\nfail on an FK related table not found despite the presence of\n``resolve_fks=False``; the logic has been repaired so that if a related\ntable is not found, the :class:`.ForeignKey` object is still proxied to the\naliased table or subquery (these :class:`.ForeignKey` objects are normally\nused in the production of join conditions), but it is sent with a flag that\nit's not resolvable. The aliased table / subquery will then work normally,\nwith the exception that it cannot be used to generate a join condition\nautomatically, as the foreign key information is missing. This was already\nthe behavior for such foreign key constraints produced using non-reflection\nmethods, such as joining :class:`.Table` objects from different\n:class:`.MetaData` collections.\n\nFixes: #8100\nFixes: #8101\n\nChange-Id: Ifa37a91bd1f1785fca85ef163eec031660d9ea4d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/93bc7ed534f12934528c0cbf5489417ddc025e40",
        "buggy_code": "elif Join._can_join(f, s) or onclause is not None:",
        "fixed_code": "elif onclause is not None or Join._can_join(f, s):",
        "patch": "@@ -235,7 +235,7 @@ def find_left_clause_to_join_from(\n                 if set(f.c).union(s.c).issuperset(cols_in_onclause):\n                     idx.append(i)\n                     break\n-            elif Join._can_join(f, s) or onclause is not None:\n+            elif onclause is not None or Join._can_join(f, s):\n                 idx.append(i)\n                 break\n "
    },
    {
        "commit_id": "8131ef51ef2507238e9e9a32bc1cbec19dd3a600",
        "commit_message": "fix some typos (#8093)\n\nSigned-off-by: cuishuang <imcusg@gmail.com>",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8131ef51ef2507238e9e9a32bc1cbec19dd3a600",
        "buggy_code": "def test_mulitple_expressions(self):",
        "fixed_code": "def test_multiple_expressions(self):",
        "patch": "@@ -245,7 +245,7 @@ def test_in(self):\n             ],\n         )\n \n-    def test_mulitple_expressions(self):\n+    def test_multiple_expressions(self):\n         User = self.classes.User\n \n         evaluator = compiler.process(User.id > 5, User.name == \"ed\")"
    },
    {
        "commit_id": "8131ef51ef2507238e9e9a32bc1cbec19dd3a600",
        "commit_message": "fix some typos (#8093)\n\nSigned-off-by: cuishuang <imcusg@gmail.com>",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8131ef51ef2507238e9e9a32bc1cbec19dd3a600",
        "buggy_code": "def test_order_by_literal_col_quoting_one_explict_quote(self):",
        "fixed_code": "def test_order_by_literal_col_quoting_one_explicit_quote(self):",
        "patch": "@@ -1024,7 +1024,7 @@ def test_order_by_literal_col_quoting_two(self):\n             '\"SUM(ABC)_\"',\n         )\n \n-    def test_order_by_literal_col_quoting_one_explict_quote(self):\n+    def test_order_by_literal_col_quoting_one_explicit_quote(self):\n         col = literal_column(\"SUM(ABC)\").label(quoted_name(\"SUM(ABC)\", True))\n         tbl = table(\"my_table\")\n         query = select(col).select_from(tbl).order_by(col)"
    },
    {
        "commit_id": "335cdea7c72c279f8cf9de278ac96f7dda2bca15",
        "commit_message": "remove \"deannotate\" from column_property expression\n\nFixed issue where using a :func:`_orm.column_property` construct containing\na subquery against an already-mapped column attribute would not correctly\napply ORM-compilation behaviors to the subquery, including that the \"IN\"\nexpression added for a single-table inherits expression would fail to be\nincluded.\n\nThis fix involves a few tweaks in the ORM adaptation logic,\nincluding a missing \"parententity\" adaptation on the mapper\nside.  The specific mechanics here have a lot of moving parts\nso we will continue to add tests to assert these cases.  In\nparticular a more complete test for issue #2316 is added\nthat was relying upon the deannotate happening here.\n\nFixes: #8064\nChange-Id: Ia85dd12dcf6e7c002b30de4a27d7aa66cb3cd20e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/335cdea7c72c279f8cf9de278ac96f7dda2bca15",
        "buggy_code": "return not entity or entity.isa(self.mapper)",
        "fixed_code": "return not entity or entity.common_parent(self.mapper)",
        "patch": "@@ -475,7 +475,7 @@ def __init__(\n \n     def _include_fn(self, elem):\n         entity = elem._annotations.get(\"parentmapper\", None)\n-        return not entity or entity.isa(self.mapper)\n+        return not entity or entity.common_parent(self.mapper)\n \n \n class AliasedClass("
    },
    {
        "commit_id": "8ac7cb92b4972a08b8008b80b34989694510139f",
        "commit_message": "mssql login failure if password starts with \"{\"\n\nFix issue where a password with a leading \"{\" would\nresult in login failure.\n\nFixes: #8062\nChange-Id: If91c2c211937b5eac89b8d525c22a19b0a94c5c4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8ac7cb92b4972a08b8008b80b34989694510139f",
        "buggy_code": "if \";\" in str(token):",
        "fixed_code": "if \";\" in str(token) or str(token).startswith(\"{\"):",
        "patch": "@@ -77,7 +77,7 @@ def create_connect_args(self, url: URL) -> ConnectArgsType:\n         else:\n \n             def check_quote(token: str) -> str:\n-                if \";\" in str(token):\n+                if \";\" in str(token) or str(token).startswith(\"{\"):\n                     token = \"{%s}\" % token.replace(\"}\", \"}}\")\n                 return token\n "
    },
    {
        "commit_id": "5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "commit_message": "fix most sphinx warnings (1.4)\n\nstill can't figure out the warnings with some of the older\nchangelog files.\n\nthis cherry-picks the sphinx fixes from 1.4 and additionally\nfixes a small number of new issues in the 2.0 docs. However,\n2.0 has many more errors to fix, primarily from the removal\nof the legacy tutorials left behind a lot of labels that need\nto be re-linked to the new tutorial.\n\nFixes: #7946\nChange-Id: Id657ab23008eed0b133fed65b2f9ea75a626215c\n(cherry picked from commit 9b55a423459236ca8a2ced713c9e93999dd18922)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "buggy_code": "exclude_patterns = [\"build\", \"**/unreleased*/*\", \"*_include.rst\"]",
        "fixed_code": "exclude_patterns = [\"build\", \"**/unreleased*/*\", \"**/*_include.rst\"]",
        "patch": "@@ -109,7 +109,7 @@\n \n changelog_render_changeset = \"https://www.sqlalchemy.org/trac/changeset/%s\"\n \n-exclude_patterns = [\"build\", \"**/unreleased*/*\", \"*_include.rst\"]\n+exclude_patterns = [\"build\", \"**/unreleased*/*\", \"**/*_include.rst\"]\n \n autodoc_class_signature = \"separated\"\n autodoc_typehints_format = \"short\""
    },
    {
        "commit_id": "5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "commit_message": "fix most sphinx warnings (1.4)\n\nstill can't figure out the warnings with some of the older\nchangelog files.\n\nthis cherry-picks the sphinx fixes from 1.4 and additionally\nfixes a small number of new issues in the 2.0 docs. However,\n2.0 has many more errors to fix, primarily from the removal\nof the legacy tutorials left behind a lot of labels that need\nto be re-linked to the new tutorial.\n\nFixes: #7946\nChange-Id: Id657ab23008eed0b133fed65b2f9ea75a626215c\n(cherry picked from commit 9b55a423459236ca8a2ced713c9e93999dd18922)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "buggy_code": ":ref:`schema_table_reflection`.",
        "fixed_code": ":ref:`metadata_reflection_schemas`.",
        "patch": "@@ -285,7 +285,7 @@ def set_search_path(dbapi_connection, connection_record):\n     attribute set up.\n \n The PostgreSQL dialect can reflect tables from any schema, as outlined in\n-:ref:`schema_table_reflection`.\n+:ref:`metadata_reflection_schemas`.\n \n With regards to tables which these :class:`_schema.Table`\n objects refer to via foreign key constraint, a decision must be made as to how"
    },
    {
        "commit_id": "5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "commit_message": "fix most sphinx warnings (1.4)\n\nstill can't figure out the warnings with some of the older\nchangelog files.\n\nthis cherry-picks the sphinx fixes from 1.4 and additionally\nfixes a small number of new issues in the 2.0 docs. However,\n2.0 has many more errors to fix, primarily from the removal\nof the legacy tutorials left behind a lot of labels that need\nto be re-linked to the new tutorial.\n\nFixes: #7946\nChange-Id: Id657ab23008eed0b133fed65b2f9ea75a626215c\n(cherry picked from commit 9b55a423459236ca8a2ced713c9e93999dd18922)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "buggy_code": ":class:`.BaseCursorResult`, :class:`.CursorResult`.\"\"\"",
        "fixed_code": ":class:`.CursorResult`.\"\"\"",
        "patch": "@@ -7,7 +7,7 @@\n # mypy: allow-untyped-defs, allow-untyped-calls\n \n \"\"\"Define cursor-specific result set constructs including\n-:class:`.BaseCursorResult`, :class:`.CursorResult`.\"\"\"\n+:class:`.CursorResult`.\"\"\"\n \n \n from __future__ import annotations"
    },
    {
        "commit_id": "5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "commit_message": "fix most sphinx warnings (1.4)\n\nstill can't figure out the warnings with some of the older\nchangelog files.\n\nthis cherry-picks the sphinx fixes from 1.4 and additionally\nfixes a small number of new issues in the 2.0 docs. However,\n2.0 has many more errors to fix, primarily from the removal\nof the legacy tutorials left behind a lot of labels that need\nto be re-linked to the new tutorial.\n\nFixes: #7946\nChange-Id: Id657ab23008eed0b133fed65b2f9ea75a626215c\n(cherry picked from commit 9b55a423459236ca8a2ced713c9e93999dd18922)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5e88e6e89a2cf5b583670fa5d0b41881f895a711",
        "buggy_code": "``table2_columna`::",
        "fixed_code": "``table2_columna``::",
        "patch": "@@ -1078,7 +1078,7 @@ class SelectLabelStyle(Enum):\n \n     Below, all column names are given a label so that the two same-named\n     columns ``columna`` are disambiguated as ``table1_columna`` and\n-    ``table2_columna`::\n+    ``table2_columna``::\n \n         >>> from sqlalchemy import table, column, select, true, LABEL_STYLE_TABLENAME_PLUS_COL\n         >>> table1 = table(\"table1\", column(\"columna\"), column(\"columnb\"))"
    },
    {
        "commit_id": "927abc3b33f10464ed04db3d7a454faeb6e729f2",
        "commit_message": "render col name in on conflict set clause, not given key\n\nFixed bug where the PostgreSQL :meth:`_postgresql.Insert.on_conflict`\nmethod and the SQLite :meth:`_sqlite.Insert.on_conflict` method would both\nfail to correctly accommodate a column with a separate \".key\" when\nspecifying the column using its key name in the dictionary passed to\n``set_``, as well as if the :attr:`_sqlite.Insert.excluded` or\n:attr:`_postgresql.Insert.excluded` collection were used as the dictionary\ndirectly.\n\nFixes: #8014\nChange-Id: I67226aeedcb2c683e22405af64720cc1f990f274",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/927abc3b33f10464ed04db3d7a454faeb6e729f2",
        "buggy_code": "key_text = self.preparer.quote(col_key)",
        "fixed_code": "key_text = self.preparer.quote(c.name)",
        "patch": "@@ -2522,7 +2522,7 @@ def visit_on_conflict_do_update(self, on_conflict, **kw):\n                     value.type = c.type\n             value_text = self.process(value.self_group(), use_schema=False)\n \n-            key_text = self.preparer.quote(col_key)\n+            key_text = self.preparer.quote(c.name)\n             action_set_ops.append(\"%s = %s\" % (key_text, value_text))\n \n         # check for names that don't match columns"
    },
    {
        "commit_id": "927abc3b33f10464ed04db3d7a454faeb6e729f2",
        "commit_message": "render col name in on conflict set clause, not given key\n\nFixed bug where the PostgreSQL :meth:`_postgresql.Insert.on_conflict`\nmethod and the SQLite :meth:`_sqlite.Insert.on_conflict` method would both\nfail to correctly accommodate a column with a separate \".key\" when\nspecifying the column using its key name in the dictionary passed to\n``set_``, as well as if the :attr:`_sqlite.Insert.excluded` or\n:attr:`_postgresql.Insert.excluded` collection were used as the dictionary\ndirectly.\n\nFixes: #8014\nChange-Id: I67226aeedcb2c683e22405af64720cc1f990f274",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/927abc3b33f10464ed04db3d7a454faeb6e729f2",
        "buggy_code": "key_text = self.preparer.quote(col_key)",
        "fixed_code": "key_text = self.preparer.quote(c.name)",
        "patch": "@@ -1415,7 +1415,7 @@ def visit_on_conflict_do_update(self, on_conflict, **kw):\n                     value.type = c.type\n             value_text = self.process(value.self_group(), use_schema=False)\n \n-            key_text = self.preparer.quote(col_key)\n+            key_text = self.preparer.quote(c.name)\n             action_set_ops.append(\"%s = %s\" % (key_text, value_text))\n \n         # check for names that don't match columns"
    },
    {
        "commit_id": "257de6ebe15d3076e19f05f93c5b3c7fae25a4d3",
        "commit_message": "adjust log stacklevel for py3.11.0b1; enable greenlet\n\nFixed issue where support for logging \"stacklevel\" implemented in\n:ticket:`7612` required adjustment to work with recently released Python\n3.11.0b1, also repairs the unit tests which tested this feature.\n\nInstall greenlet from a py311 compat patch.\n\nre: the stacklevel thing, this is going to be very inconvenient\nif we have to keep hardcoding numbers everywhere for every\nnew python version\n\nChange-Id: I0c8f7293e98c0ca5cc544538284bfd1d3020cb1f\nReferences: https://github.com/python-greenlet/greenlet/issues/288\nFixes: #8019",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/257de6ebe15d3076e19f05f93c5b3c7fae25a4d3",
        "buggy_code": "return only_on(",
        "fixed_code": "return self.asyncio + only_on(",
        "patch": "@@ -1315,7 +1315,7 @@ def check_range_types(config):\n     def async_dialect(self):\n         \"\"\"dialect makes use of await_() to invoke operations on the DBAPI.\"\"\"\n \n-        return only_on(\n+        return self.asyncio + only_on(\n             LambdaPredicate(\n                 lambda config: config.db.dialect.is_async,\n                 \"Async dialect required\","
    },
    {
        "commit_id": "ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "commit_message": "pep484 ORM / SQL result support\n\nafter some experimentation it seems mypy is more amenable\nto the generic types being fully integrated rather than\nhaving separate spin-off types.   so key structures\nlike Result, Row, Select become generic.  For DML\nInsert, Update, Delete, these are spun into type-specific\nsubclasses ReturningInsert, ReturningUpdate, ReturningDelete,\nwhich is fine since the \"row-ness\" of these constructs\ndoesn't happen until returning() is called in any case.\n\na Tuple based model is then integrated so that these\nobjects can carry along information about their return\ntypes.  Overloads at the .execute() level carry through\nthe Tuple from the invoked object to the result.\n\nTo suit the issue of AliasedClass generating attributes\nthat are dynamic, experimented with a custom subclass\nAsAliased, but then just settled on having aliased()\nlie to the type checker and return `Type[_O]`, essentially.\nwill need some type-related accessors for with_polymorphic()\nalso.\n\nAdditionally, identified an issue in Update when used\n\"mysql style\" against a join(), it basically doesn't work\nif asked to UPDATE two tables on the same column name.\nadded an error message to the specific condition where\nit happens with a very non-specific error message that we\nhit a thing we can't do right now, suggest multi-table\nupdate as a possible cause.\n\nChange-Id: I5eff7eefe1d6166ee74160b2785c5e6a81fa8b95",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "buggy_code": "def _setup_result_proxy(self) -> CursorResult:",
        "fixed_code": "def _setup_result_proxy(self) -> CursorResult[Any]:",
        "patch": "@@ -2422,7 +2422,7 @@ def _set_input_sizes(self) -> None:\n     def _get_cache_stats(self) -> str:\n         raise NotImplementedError()\n \n-    def _setup_result_proxy(self) -> CursorResult:\n+    def _setup_result_proxy(self) -> CursorResult[Any]:\n         raise NotImplementedError()\n \n     def fire_sequence(self, seq: Sequence_SchemaItem, type_: Integer) -> int:"
    },
    {
        "commit_id": "ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "commit_message": "pep484 ORM / SQL result support\n\nafter some experimentation it seems mypy is more amenable\nto the generic types being fully integrated rather than\nhaving separate spin-off types.   so key structures\nlike Result, Row, Select become generic.  For DML\nInsert, Update, Delete, these are spun into type-specific\nsubclasses ReturningInsert, ReturningUpdate, ReturningDelete,\nwhich is fine since the \"row-ness\" of these constructs\ndoesn't happen until returning() is called in any case.\n\na Tuple based model is then integrated so that these\nobjects can carry along information about their return\ntypes.  Overloads at the .execute() level carry through\nthe Tuple from the invoked object to the result.\n\nTo suit the issue of AliasedClass generating attributes\nthat are dynamic, experimented with a custom subclass\nAsAliased, but then just settled on having aliased()\nlie to the type checker and return `Type[_O]`, essentially.\nwill need some type-related accessors for with_polymorphic()\nalso.\n\nAdditionally, identified an issue in Update when used\n\"mysql style\" against a join(), it basically doesn't work\nif asked to UPDATE two tables on the same column name.\nadded an error message to the specific condition where\nit happens with a very non-specific error message that we\nhit a thing we can't do right now, suggest multi-table\nupdate as a possible cause.\n\nChange-Id: I5eff7eefe1d6166ee74160b2785c5e6a81fa8b95",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "buggy_code": "from typing_extensions import NotRequired as NotRequired  # noqa",
        "fixed_code": "from typing_extensions import NotRequired as NotRequired",
        "patch": "@@ -14,7 +14,7 @@\n from typing import TypeVar\n from typing import Union\n \n-from typing_extensions import NotRequired as NotRequired  # noqa\n+from typing_extensions import NotRequired as NotRequired\n \n from . import compat\n "
    },
    {
        "commit_id": "ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "commit_message": "pep484 ORM / SQL result support\n\nafter some experimentation it seems mypy is more amenable\nto the generic types being fully integrated rather than\nhaving separate spin-off types.   so key structures\nlike Result, Row, Select become generic.  For DML\nInsert, Update, Delete, these are spun into type-specific\nsubclasses ReturningInsert, ReturningUpdate, ReturningDelete,\nwhich is fine since the \"row-ness\" of these constructs\ndoesn't happen until returning() is called in any case.\n\na Tuple based model is then integrated so that these\nobjects can carry along information about their return\ntypes.  Overloads at the .execute() level carry through\nthe Tuple from the invoked object to the result.\n\nTo suit the issue of AliasedClass generating attributes\nthat are dynamic, experimented with a custom subclass\nAsAliased, but then just settled on having aliased()\nlie to the type checker and return `Type[_O]`, essentially.\nwill need some type-related accessors for with_polymorphic()\nalso.\n\nAdditionally, identified an issue in Update when used\n\"mysql style\" against a join(), it basically doesn't work\nif asked to UPDATE two tables on the same column name.\nadded an error message to the specific condition where\nit happens with a very non-specific error message that we\nhit a thing we can't do right now, suggest multi-table\nupdate as a possible cause.\n\nChange-Id: I5eff7eefe1d6166ee74160b2785c5e6a81fa8b95",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "buggy_code": "\"Column expression or FROM clause expected, got \"",
        "fixed_code": "\"Column expression, FROM clause, or other .* expected, got \"",
        "patch": "@@ -492,7 +492,7 @@ def test_error_w_aliased_against_select(self):\n \n         assert_raises_message(\n             sa_exc.ArgumentError,\n-            \"Column expression or FROM clause expected, got \"\n+            \"Column expression, FROM clause, or other .* expected, got \"\n             \"<sqlalchemy.sql.selectable.Select .*> object resolved from \"\n             \"<AliasedClass .* User> object. To create a FROM clause from \"\n             \"a <class 'sqlalchemy.sql.selectable.Select'> object\","
    },
    {
        "commit_id": "ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "commit_message": "pep484 ORM / SQL result support\n\nafter some experimentation it seems mypy is more amenable\nto the generic types being fully integrated rather than\nhaving separate spin-off types.   so key structures\nlike Result, Row, Select become generic.  For DML\nInsert, Update, Delete, these are spun into type-specific\nsubclasses ReturningInsert, ReturningUpdate, ReturningDelete,\nwhich is fine since the \"row-ness\" of these constructs\ndoesn't happen until returning() is called in any case.\n\na Tuple based model is then integrated so that these\nobjects can carry along information about their return\ntypes.  Overloads at the .execute() level carry through\nthe Tuple from the invoked object to the result.\n\nTo suit the issue of AliasedClass generating attributes\nthat are dynamic, experimented with a custom subclass\nAsAliased, but then just settled on having aliased()\nlie to the type checker and return `Type[_O]`, essentially.\nwill need some type-related accessors for with_polymorphic()\nalso.\n\nAdditionally, identified an issue in Update when used\n\"mysql style\" against a join(), it basically doesn't work\nif asked to UPDATE two tables on the same column name.\nadded an error message to the specific condition where\nit happens with a very non-specific error message that we\nhit a thing we can't do right now, suggest multi-table\nupdate as a possible cause.\n\nChange-Id: I5eff7eefe1d6166ee74160b2785c5e6a81fa8b95",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ad11c482e2233f44e8747d4d5a2b17a995fff1fa",
        "buggy_code": "r\"Column expression or FROM clause expected, \"",
        "fixed_code": "r\"Column expression, FROM clause, or other columns clause .*\"",
        "patch": "@@ -61,7 +61,7 @@ class SelectTest(fixtures.TestBase, AssertsCompiledSQL):\n     def test_old_bracket_style_fail(self):\n         with expect_raises_message(\n             exc.ArgumentError,\n-            r\"Column expression or FROM clause expected, \"\n+            r\"Column expression, FROM clause, or other columns clause .*\"\n             r\".*Did you mean to say\",\n         ):\n             select([table1.c.myid])"
    },
    {
        "commit_id": "3deff88fe12adc470792f71da7b9c54a5438638f",
        "commit_message": "repair fetch_setting call in mysql pyodbc dialect\n\nFixed a regression in the untested MySQL PyODBC dialect caused by the fix\nfor :ticket:`7518` in version 1.4.32 where an argument was being propagated\nincorrectly upon first connect, leading to a ``TypeError``.\n\nFixes: #7871\nChange-Id: I37f8ca8e83cb352ee2a2336b52863858259b1d77",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3deff88fe12adc470792f71da7b9c54a5438638f",
        "buggy_code": "value = self._fetch_setting(\"character_set_client\")",
        "fixed_code": "value = self._fetch_setting(connection, \"character_set_client\")",
        "patch": "@@ -89,7 +89,7 @@ def _detect_charset(self, connection):\n         # If it's decided that issuing that sort of SQL leaves you SOL, then\n         # this can prefer the driver value.\n         try:\n-            value = self._fetch_setting(\"character_set_client\")\n+            value = self._fetch_setting(connection, \"character_set_client\")\n             if value:\n                 return value\n         except exc.DBAPIError:"
    },
    {
        "commit_id": "aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "commit_message": "pep-484: ORM public API, constructors\n\nfor the moment, abandoning using @overload with\nrelationship() and mapped_column().  The overloads\nare very difficult to get working at all, and\nthe overloads that were there all wouldn't pass on\nmypy.  various techniques of getting them to\n\"work\", meaning having right hand side dictate\nwhat's legal on the left, have mixed success\nand wont give consistent results; additionally,\nit's legal to have Optional / non-optional\nindependent of nullable in any case for columns.\nrelationship cases are less ambiguous but mypy\nwas not going along with things.\n\nwe have a comprehensive system of allowing\nleft side annotations to drive the right side,\nin the absense of explicit settings on the right.\nso type-centric SQLAlchemy will be left-side\ndriven just like dataclasses, and the various flags\nand switches on the right side will just not be\nneeded very much.\n\nin other matters, one surprise, forgot to remove string support\nfrom orm.join(A, B, \"somename\") or do deprecations\nfor it in 1.4.   This is a really not-directly-used\nstructure barely\nmentioned in the docs for many years, the example\nshows a relationship being used, not a string, so\nwe will just change it to raise the usual error here.\n\nChange-Id: Iefbbb8d34548b538023890ab8b7c9a5d9496ec6e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "buggy_code": "return decorated  # type: ignore[return-value]",
        "fixed_code": "return decorated  # type: ignore",
        "patch": "@@ -48,7 +48,7 @@ def decorated(fn, self, connection):  # type: ignore\n             connection.info[key] = val = fn(self, connection)\n             return val\n \n-    return decorated  # type: ignore[return-value]\n+    return decorated  # type: ignore\n \n \n class _TConsSubject(Protocol):"
    },
    {
        "commit_id": "aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "commit_message": "pep-484: ORM public API, constructors\n\nfor the moment, abandoning using @overload with\nrelationship() and mapped_column().  The overloads\nare very difficult to get working at all, and\nthe overloads that were there all wouldn't pass on\nmypy.  various techniques of getting them to\n\"work\", meaning having right hand side dictate\nwhat's legal on the left, have mixed success\nand wont give consistent results; additionally,\nit's legal to have Optional / non-optional\nindependent of nullable in any case for columns.\nrelationship cases are less ambiguous but mypy\nwas not going along with things.\n\nwe have a comprehensive system of allowing\nleft side annotations to drive the right side,\nin the absense of explicit settings on the right.\nso type-centric SQLAlchemy will be left-side\ndriven just like dataclasses, and the various flags\nand switches on the right side will just not be\nneeded very much.\n\nin other matters, one surprise, forgot to remove string support\nfrom orm.join(A, B, \"somename\") or do deprecations\nfor it in 1.4.   This is a really not-directly-used\nstructure barely\nmentioned in the docs for many years, the example\nshows a relationship being used, not a string, so\nwe will just change it to raise the usual error here.\n\nChange-Id: Iefbbb8d34548b538023890ab8b7c9a5d9496ec6e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "buggy_code": "def _global_attributes(self):",
        "fixed_code": "def _global_attributes(self) -> Dict[Any, Any]:",
        "patch": "@@ -1078,7 +1078,7 @@ def prefetch(self):\n         return list(self.insert_prefetch) + list(self.update_prefetch)\n \n     @util.memoized_property\n-    def _global_attributes(self):\n+    def _global_attributes(self) -> Dict[Any, Any]:\n         return {}\n \n     @util.memoized_instancemethod"
    },
    {
        "commit_id": "aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "commit_message": "pep-484: ORM public API, constructors\n\nfor the moment, abandoning using @overload with\nrelationship() and mapped_column().  The overloads\nare very difficult to get working at all, and\nthe overloads that were there all wouldn't pass on\nmypy.  various techniques of getting them to\n\"work\", meaning having right hand side dictate\nwhat's legal on the left, have mixed success\nand wont give consistent results; additionally,\nit's legal to have Optional / non-optional\nindependent of nullable in any case for columns.\nrelationship cases are less ambiguous but mypy\nwas not going along with things.\n\nwe have a comprehensive system of allowing\nleft side annotations to drive the right side,\nin the absense of explicit settings on the right.\nso type-centric SQLAlchemy will be left-side\ndriven just like dataclasses, and the various flags\nand switches on the right side will just not be\nneeded very much.\n\nin other matters, one surprise, forgot to remove string support\nfrom orm.join(A, B, \"somename\") or do deprecations\nfor it in 1.4.   This is a really not-directly-used\nstructure barely\nmentioned in the docs for many years, the example\nshows a relationship being used, not a string, so\nwe will just change it to raise the usual error here.\n\nChange-Id: Iefbbb8d34548b538023890ab8b7c9a5d9496ec6e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aeeff72e806420bf85e2e6723b1f941df38a3e1a",
        "buggy_code": "name = mapped_column(String, nullable=True)",
        "fixed_code": "name: Mapped[Optional[str]] = mapped_column(String, nullable=True)",
        "patch": "@@ -17,7 +17,7 @@ class User(Base):\n     __tablename__ = \"user\"\n \n     id = mapped_column(Integer, primary_key=True)\n-    name = mapped_column(String, nullable=True)\n+    name: Mapped[Optional[str]] = mapped_column(String, nullable=True)\n \n     addresses: Mapped[List[\"Address\"]] = relationship(\n         \"Address\", back_populates=\"user\""
    },
    {
        "commit_id": "44f55913267481165cd9dbfb6ebffa05a72424bd",
        "commit_message": "allow executemany values for ON CONFLICT DO NOTHING\n\nScaled back a fix made for :ticket:`6581` where \"executemany values\" mode\nfor psycopg2 were disabled for all \"ON CONFLICT\" styles of INSERT, to\nnot apply to the \"ON CONFLICT DO NOTHING\" clause, which does not include\nany parameters and is safe for \"executemany values\" mode.  \"ON CONFLICT\nDO UPDATE\" is still blocked from \"executemany values\" as there may\nbe additional parameters in the DO UPDATE clause that cannot be batched\n(which is the original issue fixed by :ticket:`6581`).\n\nFixes: #7880\nChange-Id: Id3e23a0c6699333409a50148fa8923cb8e564bdc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/44f55913267481165cd9dbfb6ebffa05a72424bd",
        "buggy_code": "and context.compiled.insert_single_values_expr",
        "fixed_code": "and context.compiled._is_safe_for_fast_insert_values_helper",
        "patch": "@@ -712,7 +712,7 @@ def do_executemany(self, cursor, statement, parameters, context=None):\n             self.executemany_mode & EXECUTEMANY_VALUES\n             and context\n             and context.isinsert\n-            and context.compiled.insert_single_values_expr\n+            and context.compiled._is_safe_for_fast_insert_values_helper\n         ):\n             executemany_values = (\n                 \"(%s)\" % context.compiled.insert_single_values_expr"
    },
    {
        "commit_id": "769fa67d842035dd852ab8b6a26ea3f110a51131",
        "commit_message": "pep-484: sqlalchemy.sql pass one\n\nsqlalchemy.sql will require many passes to get all\nmodules even gradually typed.  Will have to pick and\nchoose what modules can be strictly typed vs. which\ncan be gradual.\n\nin this patch, emphasis is on visitors.py, cache_key.py,\nannotations.py for strict typing, compiler.py is on gradual\ntyping but has much more structure, in particular where it\nconnects with the outside world.\n\nThe work within compiler.py also reached back out to\nengine/cursor.py , default.py quite a bit.\n\nReferences: #6810\nChange-Id: I6e8a29f6013fd216e43d45091bc193f8be0368fd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/769fa67d842035dd852ab8b6a26ea3f110a51131",
        "buggy_code": "from .traversals import InternalTraversal",
        "fixed_code": "from .visitors import InternalTraversal",
        "patch": "@@ -35,13 +35,13 @@\n from .elements import quoted_name\n from .elements import Slice\n from .elements import TypeCoerce as type_coerce  # noqa\n-from .traversals import InternalTraversal\n from .type_api import Emulated\n from .type_api import NativeForEmulated  # noqa\n from .type_api import to_instance\n from .type_api import TypeDecorator\n from .type_api import TypeEngine\n from .type_api import Variant  # noqa\n+from .visitors import InternalTraversal\n from .. import event\n from .. import exc\n from .. import inspection"
    },
    {
        "commit_id": "b9d231869d7e39decabdec12478e359c4dcb95ee",
        "commit_message": "Implement generic Double and related fixed types\n\nAdded :class:`.Double`, :class:`.DOUBLE`, :class:`.DOUBLE_PRECISION`\ndatatypes to the base ``sqlalchemy.`` module namespace, for explicit use of\ndouble/double precision as well as generic \"double\" datatypes. Use\n:class:`.Double` for generic support that will resolve to DOUBLE/DOUBLE\nPRECISION/FLOAT as needed for different backends.\n\nImplemented DDL and reflection support for ``FLOAT`` datatypes which\ninclude an explicit \"binary_precision\" value. Using the Oracle-specific\n:class:`_oracle.FLOAT` datatype, the new parameter\n:paramref:`_oracle.FLOAT.binary_precision` may be specified which will\nrender Oracle's precision for floating point types directly. This value is\ninterpreted during reflection. Upon reflecting back a ``FLOAT`` datatype,\nthe datatype returned is one of :class:`_types.DOUBLE_PRECISION` for a\n``FLOAT`` for a precision of 126 (this is also Oracle's default precision\nfor ``FLOAT``), :class:`_types.REAL` for a precision of 63, and\n:class:`_oracle.FLOAT` for a custom precision, as per Oracle documentation.\n\nAs part of this change, the generic :paramref:`_sqltypes.Float.precision`\nvalue is explicitly rejected when generating DDL for Oracle, as this\nprecision cannot be accurately converted to \"binary precision\"; instead, an\nerror message encourages the use of\n:meth:`_sqltypes.TypeEngine.with_variant` so that Oracle's specific form of\nprecision may be chosen exactly. This is a backwards-incompatible change in\nbehavior, as the previous \"precision\" value was silently ignored for\nOracle.\n\nFixes: #5465\nCloses: #7674\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7674\nPull-request-sha: 5c68419e5aee2e27bf21a8ac9eb5950d196c77e5\n\nChange-Id: I831f4af3ee3b23fde02e8f6393c83e23dd7cd34d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9d231869d7e39decabdec12478e359c4dcb95ee",
        "buggy_code": "class DOUBLE(_FloatType):",
        "fixed_code": "class DOUBLE(_FloatType, sqltypes.DOUBLE):",
        "patch": "@@ -152,7 +152,7 @@ def __init__(self, precision=None, scale=None, asdecimal=True, **kw):\n         )\n \n \n-class DOUBLE(_FloatType):\n+class DOUBLE(_FloatType, sqltypes.DOUBLE):\n     \"\"\"MySQL DOUBLE type.\"\"\"\n \n     __visit_name__ = \"DOUBLE\""
    },
    {
        "commit_id": "b9d231869d7e39decabdec12478e359c4dcb95ee",
        "commit_message": "Implement generic Double and related fixed types\n\nAdded :class:`.Double`, :class:`.DOUBLE`, :class:`.DOUBLE_PRECISION`\ndatatypes to the base ``sqlalchemy.`` module namespace, for explicit use of\ndouble/double precision as well as generic \"double\" datatypes. Use\n:class:`.Double` for generic support that will resolve to DOUBLE/DOUBLE\nPRECISION/FLOAT as needed for different backends.\n\nImplemented DDL and reflection support for ``FLOAT`` datatypes which\ninclude an explicit \"binary_precision\" value. Using the Oracle-specific\n:class:`_oracle.FLOAT` datatype, the new parameter\n:paramref:`_oracle.FLOAT.binary_precision` may be specified which will\nrender Oracle's precision for floating point types directly. This value is\ninterpreted during reflection. Upon reflecting back a ``FLOAT`` datatype,\nthe datatype returned is one of :class:`_types.DOUBLE_PRECISION` for a\n``FLOAT`` for a precision of 126 (this is also Oracle's default precision\nfor ``FLOAT``), :class:`_types.REAL` for a precision of 63, and\n:class:`_oracle.FLOAT` for a custom precision, as per Oracle documentation.\n\nAs part of this change, the generic :paramref:`_sqltypes.Float.precision`\nvalue is explicitly rejected when generating DDL for Oracle, as this\nprecision cannot be accurately converted to \"binary precision\"; instead, an\nerror message encourages the use of\n:meth:`_sqltypes.TypeEngine.with_variant` so that Oracle's specific form of\nprecision may be chosen exactly. This is a backwards-incompatible change in\nbehavior, as the previous \"precision\" value was silently ignored for\nOracle.\n\nFixes: #5465\nCloses: #7674\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7674\nPull-request-sha: 5c68419e5aee2e27bf21a8ac9eb5950d196c77e5\n\nChange-Id: I831f4af3ee3b23fde02e8f6393c83e23dd7cd34d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9d231869d7e39decabdec12478e359c4dcb95ee",
        "buggy_code": "\"DOUBLE\": sqltypes.FLOAT,",
        "fixed_code": "\"DOUBLE\": sqltypes.DOUBLE,",
        "patch": "@@ -1179,7 +1179,7 @@ def result_processor(self, dialect, coltype):\n     \"DATE_CHAR\": sqltypes.DATE,\n     \"DATETIME\": sqltypes.DATETIME,\n     \"DATETIME_CHAR\": sqltypes.DATETIME,\n-    \"DOUBLE\": sqltypes.FLOAT,\n+    \"DOUBLE\": sqltypes.DOUBLE,\n     \"DECIMAL\": sqltypes.DECIMAL,\n     \"FLOAT\": sqltypes.FLOAT,\n     \"INT\": sqltypes.INTEGER,"
    },
    {
        "commit_id": "0353a9db76db6a46fa63d99a1d05c5cac45ea460",
        "commit_message": "Fix invalid escape sequence in docs\n\nCurrent version of this code example will emit an\n\"invalid escape sequence\" DeprecationWarning\n\nChange-Id: Id753139b1661f78d6b3ba86b7ada181b693a562e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0353a9db76db6a46fa63d99a1d05c5cac45ea460",
        "buggy_code": "t = text(\"SELECT * FROM users WHERE name='\\:username'\")",
        "fixed_code": "t = text(r\"SELECT * FROM users WHERE name='\\:username'\")",
        "patch": "@@ -1403,7 +1403,7 @@ def text(text):\n     For SQL statements where a colon is required verbatim, as within\n     an inline string, use a backslash to escape::\n \n-        t = text(\"SELECT * FROM users WHERE name='\\:username'\")\n+        t = text(r\"SELECT * FROM users WHERE name='\\:username'\")\n \n     The :class:`_expression.TextClause`\n     construct includes methods which can"
    },
    {
        "commit_id": "d8f869aa7994db991c53d3cb008cbef34a1bfe49",
        "commit_message": "Fix signature for modified_json example (#7709)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d8f869aa7994db991c53d3cb008cbef34a1bfe49",
        "buggy_code": "def modified_json(instance):",
        "fixed_code": "def modified_json(instance, initiator):",
        "patch": "@@ -219,7 +219,7 @@ class MyDataClass(Base):\n         data = Column(MutableDict.as_mutable(JSONEncodedDict))\n \n     @event.listens_for(MyDataClass.data, \"modified\")\n-    def modified_json(instance):\n+    def modified_json(instance, initiator):\n         print(\"json value modified:\", instance.data)\n \n .. _mutable_composites:"
    },
    {
        "commit_id": "baa2220e44cc0254ed0302282a7205252f75a79c",
        "commit_message": "fix typo (#7747)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/baa2220e44cc0254ed0302282a7205252f75a79c",
        "buggy_code": "yielded out one row at at time or as many rows are requested. Each time",
        "fixed_code": "yielded out one row at a time or as many rows are requested. Each time",
        "patch": "@@ -756,7 +756,7 @@ def yield_per(self: SelfResult, num) -> SelfResult:\n         :meth:`_engine.Result.fetchone` that return one row at a time.   Data\n         from the underlying cursor or other data source will be buffered up to\n         this many rows in memory, and the buffered collection will then be\n-        yielded out one row at at time or as many rows are requested. Each time\n+        yielded out one row at a time or as many rows are requested. Each time\n         the buffer clears, it will be refreshed to this many rows or as many\n         rows remain if fewer remain.\n "
    },
    {
        "commit_id": "19f13584b07b03a6ee775c197e0e8cda681e9d5a",
        "commit_message": "disable pyright from pep 484\n\nnew version of pyright is suddenly emitting an\nerror that makes no sense for a particular line of code,\nbreaking builds.  As we already have mypy which is generally\nmore conservative in its checking, disable pyright from CI\nfor now until it changes its behaviors less often.\n\nChange-Id: I862de1b2c8a180df95c74c1c6dafa96d86c36ef1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/19f13584b07b03a6ee775c197e0e8cda681e9d5a",
        "buggy_code": "size_alert: Callable[[\"LRUCache[_KT, _VT]\"], None]",
        "fixed_code": "size_alert: Optional[Callable[[\"LRUCache[_KT, _VT]\"], None]]",
        "patch": "@@ -511,7 +511,7 @@ class LRUCache(typing.MutableMapping[_KT, _VT]):\n \n     capacity: int\n     threshold: float\n-    size_alert: Callable[[\"LRUCache[_KT, _VT]\"], None]\n+    size_alert: Optional[Callable[[\"LRUCache[_KT, _VT]\"], None]]\n \n     def __init__(self, capacity=100, threshold=0.5, size_alert=None):\n         self.capacity = capacity"
    },
    {
        "commit_id": "8370ac2bff7f2bb98673d5cc79af7a61632d8dde",
        "commit_message": "fix memusage test for 2.0\n\nalso drop 3.7, 3.8 from mypy GH action\n\nChange-Id: Ib273219edf88ad66f591e044f0984bd364b395f5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8370ac2bff7f2bb98673d5cc79af7a61632d8dde",
        "buggy_code": "metadata.drop_all()",
        "fixed_code": "metadata.drop_all(self.engine)",
        "patch": "@@ -538,7 +538,7 @@ def go():\n \n         go()\n \n-        metadata.drop_all()\n+        metadata.drop_all(self.engine)\n         del m1, m2\n         assert_no_mappers()\n "
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "isinstance(rel, relationships.RelationshipProperty)",
        "fixed_code": "isinstance(rel, relationships.Relationship)",
        "patch": "@@ -378,7 +378,7 @@ def prepare(cls, engine):\n                 metadata = mapper.class_.metadata\n                 for rel in mapper._props.values():\n                     if (\n-                        isinstance(rel, relationships.RelationshipProperty)\n+                        isinstance(rel, relationships.Relationship)\n                         and rel.secondary is not None\n                     ):\n                         if isinstance(rel.secondary, Table):"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "rvalue = util.expr_to_mapped_constructor(",
        "fixed_code": "rvalue = names.expr_to_mapped_constructor(",
        "patch": "@@ -337,7 +337,7 @@ class MyClass:\n     # <attr> : Mapped[<typ>] =\n     # _sa_Mapped._empty_constructor(lambda: <function body>)\n     # the function body is maintained so it gets type checked internally\n-    rvalue = util.expr_to_mapped_constructor(\n+    rvalue = names.expr_to_mapped_constructor(\n         LambdaExpr(stmt.func.arguments, stmt.func.body)\n     )\n "
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "@relationships.RelationshipProperty.strategy_for(lazy=\"dynamic\")",
        "fixed_code": "@relationships.Relationship.strategy_for(lazy=\"dynamic\")",
        "patch": "@@ -28,7 +28,7 @@\n \n \n @log.class_logger\n-@relationships.RelationshipProperty.strategy_for(lazy=\"dynamic\")\n+@relationships.Relationship.strategy_for(lazy=\"dynamic\")\n class DynaLoader(strategies.AbstractRelationshipLoader):\n     def init_class_attribute(self, mapper):\n         self.is_class_level = True"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "orm_util.with_polymorphic(",
        "fixed_code": "orm_util.AliasedInsp._with_polymorphic_factory(",
        "patch": "@@ -1808,7 +1808,7 @@ def _set_of_type_info(self, context, current_path):\n         assert pwpi\n         if not pwpi.is_aliased_class:\n             pwpi = inspect(\n-                orm_util.with_polymorphic(\n+                orm_util.AliasedInsp._with_polymorphic_factory(\n                     pwpi.mapper.base_mapper,\n                     pwpi.mapper,\n                     aliased=True,"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "r\"\\[_POSITION\\]\", lambda m: str(util.next(poscount)), self.string",
        "fixed_code": "r\"\\[_POSITION\\]\", lambda m: str(next(poscount)), self.string",
        "patch": "@@ -889,7 +889,7 @@ def _nested_result(self):\n     def _apply_numbered_params(self):\n         poscount = itertools.count(1)\n         self.string = re.sub(\n-            r\"\\[_POSITION\\]\", lambda m: str(util.next(poscount)), self.string\n+            r\"\\[_POSITION\\]\", lambda m: str(next(poscount)), self.string\n         )\n \n     @util.memoized_property"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "from .elements import conv",
        "fixed_code": "from .elements import conv as conv",
        "patch": "@@ -14,7 +14,7 @@\n \n from . import events  # noqa\n from .elements import _NONE_NAME\n-from .elements import conv\n+from .elements import conv as conv\n from .schema import CheckConstraint\n from .schema import Column\n from .schema import Constraint"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "from sqlalchemy.util import asyncio",
        "fixed_code": "import asyncio",
        "patch": "@@ -1,3 +1,4 @@\n+import asyncio\n import threading\n \n from sqlalchemy import exc\n@@ -7,7 +8,6 @@\n from sqlalchemy.testing import expect_raises_message\n from sqlalchemy.testing import fixtures\n from sqlalchemy.testing import is_true\n-from sqlalchemy.util import asyncio\n from sqlalchemy.util import await_fallback\n from sqlalchemy.util import await_only\n from sqlalchemy.util import greenlet_spawn"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "stmt = select(v1).where(Vertex.start.in_([Point(3, 4)]))",
        "fixed_code": "stmt = select(Vertex).where(Vertex.start.in_([Point(3, 4)]))",
        "patch": "@@ -52,7 +52,7 @@ class Vertex(Base):\n \n # I'm not even sure composites support this but it should work from a\n # typing perspective\n-stmt = select(v1).where(Vertex.start.in_([Point(3, 4)]))\n+stmt = select(Vertex).where(Vertex.start.in_([Point(3, 4)]))\n \n p1: Point = v1.start\n p2: Point = v1.end"
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "from sqlalchemy.orm.util import join",
        "fixed_code": "from sqlalchemy.orm import join",
        "patch": "@@ -231,7 +231,7 @@ def test_annotated_one(self):\n             serializer.loads(pickled_failing, users.metadata, None)\n \n     def test_orm_join(self):\n-        from sqlalchemy.orm.util import join\n+        from sqlalchemy.orm import join\n \n         j = join(User, Address, User.addresses)\n "
    },
    {
        "commit_id": "e545298e35ea9f126054b337e4b5ba01988b29f7",
        "commit_message": "establish mypy / typing approach for v2.0\n\nlarge patch to get ORM / typing efforts started.\nthis is to support adding new test cases to mypy,\nsupport dropping sqlalchemy2-stubs entirely from the\ntest suite, validate major ORM typing reorganization\nto eliminate the need for the mypy plugin.\n\n* New declarative approach which uses annotation\n  introspection, fixes: #7535\n* Mapped[] is now at the base of all ORM constructs\n  that find themselves in classes, to support direct\n  typing without plugins\n* Mypy plugin updated for new typing structures\n* Mypy test suite broken out into \"plugin\" tests vs.\n  \"plain\" tests, and enhanced to better support test\n  structures where we assert that various objects are\n  introspected by the type checker as we expect.\n  as we go forward with typing, we will\n  add new use cases to \"plain\" where we can assert that\n  types are introspected as we expect.\n* For typing support, users will be much more exposed to the\n  class names of things.  Add these all to \"sqlalchemy\" import\n  space.\n* Column(ForeignKey()) no longer needs to be `@declared_attr`\n  if the FK refers to a remote table\n* composite() attributes mapped to a dataclass no longer\n  need to implement a `__composite_values__()` method\n* with_variant() accepts multiple dialect names\n\nChange-Id: I22797c0be73a8fbbd2d6f5e0c0b7258b17fe145d\nFixes: #7535\nFixes: #7551\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e545298e35ea9f126054b337e4b5ba01988b29f7",
        "buggy_code": "from sqlalchemy.orm.util import with_polymorphic",
        "fixed_code": "from sqlalchemy.orm import with_polymorphic",
        "patch": "@@ -14,7 +14,7 @@\n from sqlalchemy.orm import joinedload\n from sqlalchemy.orm import polymorphic_union\n from sqlalchemy.orm import relationship\n-from sqlalchemy.orm.util import with_polymorphic\n+from sqlalchemy.orm import with_polymorphic\n from sqlalchemy.testing import assert_raises\n from sqlalchemy.testing import assert_raises_message\n from sqlalchemy.testing import eq_"
    },
    {
        "commit_id": "260ade78a70d51378de9e7b9456bfe6218859b6c",
        "commit_message": "Raise and re-catch NameError from _ModNS\n\nFixed issue where using a fully qualified path for the classname in\n:func:`_orm.relationship` that nonetheless contained an incorrect name for\npath tokens that were not the first token, would fail to raise an\ninformative error and would instead fail randomly at a later step.\n\nFixes: #7697\nChange-Id: I5e1a3aa4c2a6ea5b123be14666f589aec43f4b60",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/260ade78a70d51378de9e7b9456bfe6218859b6c",
        "buggy_code": "raise AttributeError(",
        "fixed_code": "raise NameError(",
        "patch": "@@ -257,7 +257,7 @@ def __getattr__(self, key):\n                 else:\n                     assert isinstance(value, _MultipleClassMarker)\n                     return value.attempt_get(self.__parent.path, key)\n-        raise AttributeError(\n+        raise NameError(\n             \"Module %r has no mapped classes \"\n             \"registered under the name %r\" % (self.__parent.name, key)\n         )"
    },
    {
        "commit_id": "14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "commit_message": "Merge \"Fix overlapping slots, base classes without slots\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "buggy_code": "__slots__ = (\"dbapi\", \"_connection\", \"_execute_mutex\")",
        "fixed_code": "__slots__ = (\"dbapi\", \"_execute_mutex\")",
        "patch": "@@ -179,7 +179,7 @@ def fetchall(self):\n \n class AsyncAdapt_aiomysql_connection(AdaptedConnection):\n     await_ = staticmethod(await_only)\n-    __slots__ = (\"dbapi\", \"_connection\", \"_execute_mutex\")\n+    __slots__ = (\"dbapi\", \"_execute_mutex\")\n \n     def __init__(self, dbapi, connection):\n         self.dbapi = dbapi"
    },
    {
        "commit_id": "14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "commit_message": "Merge \"Fix overlapping slots, base classes without slots\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "buggy_code": "__slots__ = (\"dbapi\", \"_connection\")",
        "fixed_code": "__slots__ = (\"dbapi\",)",
        "patch": "@@ -165,7 +165,7 @@ def fetchall(self):\n \n class AsyncAdapt_aiosqlite_connection(AdaptedConnection):\n     await_ = staticmethod(await_only)\n-    __slots__ = (\"dbapi\", \"_connection\")\n+    __slots__ = (\"dbapi\",)\n \n     def __init__(self, dbapi, connection):\n         self.dbapi = dbapi"
    },
    {
        "commit_id": "14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "commit_message": "Merge \"Fix overlapping slots, base classes without slots\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/14932736bcb21c91596a20ac5cad6d39bcf771d5",
        "buggy_code": "__slots__ = (\"connection\", \"is_active\", \"xid\", \"_is_prepared\")",
        "fixed_code": "__slots__ = (\"xid\", \"_is_prepared\")",
        "patch": "@@ -2257,7 +2257,7 @@ class TwoPhaseTransaction(RootTransaction):\n \n     \"\"\"\n \n-    __slots__ = (\"connection\", \"is_active\", \"xid\", \"_is_prepared\")\n+    __slots__ = (\"xid\", \"_is_prepared\")\n \n     def __init__(self, connection, xid):\n         self._is_prepared = False"
    },
    {
        "commit_id": "0409c88c297efa324218340b265a8d107d57deee",
        "commit_message": "Fix overlapping slots, base classes without slots\n\nSome `__slots__` were not in order.\n\nFixes #7527\n\n### Description\n\nI'm fixing two types of slots mistakes:\n- [x] remove overlapping slots (i.e. slots already defined on a base class)\n- [x] fix broken inheritance (i.e. slots class inheriting from a non-slots class)\n  - [x] slots added to base class `TransactionalContext`. It seemed to use two attributes, which I've added as slots.\n  - [x] empty slots removed from `ORMOption`. Its base class explicitly makes use of `__dict__` so empty slots don't add anything.\n  - [x] empty slots added to `PostLoader`. It doesn't appear to use any slots not already defined on its base classes.\n  - [x] empty slots added to `IterateMappersMixin`. It doesn't appear to use any slots not already defined on its subclasses.\n  - [x] empty slots added to `ImmutableContainer`. It doesn't use any fields.\n  - [x] empty slots added to `OperatorType`. It's a protocol.\n  - [x] empty slots added to `InternalTraversal`, `_HasTraversalDispatch`. They don't seem to use attributes on their own.\n\n### Checklist\n\nThis pull request is:\n\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n\n**Have a nice day!**\n\nCloses: #7589\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7589\nPull-request-sha: 70a9c4d46916b7c6907eb1d3ad4f7033ec964191\n\nChange-Id: I6c6e3e69c3c34d0f3bdda7f0684849834fdd1863",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0409c88c297efa324218340b265a8d107d57deee",
        "buggy_code": "__slots__ = (\"dbapi\", \"_connection\", \"_execute_mutex\")",
        "fixed_code": "__slots__ = (\"dbapi\", \"_execute_mutex\")",
        "patch": "@@ -179,7 +179,7 @@ def fetchall(self):\n \n class AsyncAdapt_aiomysql_connection(AdaptedConnection):\n     await_ = staticmethod(await_only)\n-    __slots__ = (\"dbapi\", \"_connection\", \"_execute_mutex\")\n+    __slots__ = (\"dbapi\", \"_execute_mutex\")\n \n     def __init__(self, dbapi, connection):\n         self.dbapi = dbapi"
    },
    {
        "commit_id": "0409c88c297efa324218340b265a8d107d57deee",
        "commit_message": "Fix overlapping slots, base classes without slots\n\nSome `__slots__` were not in order.\n\nFixes #7527\n\n### Description\n\nI'm fixing two types of slots mistakes:\n- [x] remove overlapping slots (i.e. slots already defined on a base class)\n- [x] fix broken inheritance (i.e. slots class inheriting from a non-slots class)\n  - [x] slots added to base class `TransactionalContext`. It seemed to use two attributes, which I've added as slots.\n  - [x] empty slots removed from `ORMOption`. Its base class explicitly makes use of `__dict__` so empty slots don't add anything.\n  - [x] empty slots added to `PostLoader`. It doesn't appear to use any slots not already defined on its base classes.\n  - [x] empty slots added to `IterateMappersMixin`. It doesn't appear to use any slots not already defined on its subclasses.\n  - [x] empty slots added to `ImmutableContainer`. It doesn't use any fields.\n  - [x] empty slots added to `OperatorType`. It's a protocol.\n  - [x] empty slots added to `InternalTraversal`, `_HasTraversalDispatch`. They don't seem to use attributes on their own.\n\n### Checklist\n\nThis pull request is:\n\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n\n**Have a nice day!**\n\nCloses: #7589\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7589\nPull-request-sha: 70a9c4d46916b7c6907eb1d3ad4f7033ec964191\n\nChange-Id: I6c6e3e69c3c34d0f3bdda7f0684849834fdd1863",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0409c88c297efa324218340b265a8d107d57deee",
        "buggy_code": "__slots__ = (\"dbapi\", \"_connection\")",
        "fixed_code": "__slots__ = (\"dbapi\",)",
        "patch": "@@ -165,7 +165,7 @@ def fetchall(self):\n \n class AsyncAdapt_aiosqlite_connection(AdaptedConnection):\n     await_ = staticmethod(await_only)\n-    __slots__ = (\"dbapi\", \"_connection\")\n+    __slots__ = (\"dbapi\",)\n \n     def __init__(self, dbapi, connection):\n         self.dbapi = dbapi"
    },
    {
        "commit_id": "0409c88c297efa324218340b265a8d107d57deee",
        "commit_message": "Fix overlapping slots, base classes without slots\n\nSome `__slots__` were not in order.\n\nFixes #7527\n\n### Description\n\nI'm fixing two types of slots mistakes:\n- [x] remove overlapping slots (i.e. slots already defined on a base class)\n- [x] fix broken inheritance (i.e. slots class inheriting from a non-slots class)\n  - [x] slots added to base class `TransactionalContext`. It seemed to use two attributes, which I've added as slots.\n  - [x] empty slots removed from `ORMOption`. Its base class explicitly makes use of `__dict__` so empty slots don't add anything.\n  - [x] empty slots added to `PostLoader`. It doesn't appear to use any slots not already defined on its base classes.\n  - [x] empty slots added to `IterateMappersMixin`. It doesn't appear to use any slots not already defined on its subclasses.\n  - [x] empty slots added to `ImmutableContainer`. It doesn't use any fields.\n  - [x] empty slots added to `OperatorType`. It's a protocol.\n  - [x] empty slots added to `InternalTraversal`, `_HasTraversalDispatch`. They don't seem to use attributes on their own.\n\n### Checklist\n\nThis pull request is:\n\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n\n**Have a nice day!**\n\nCloses: #7589\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7589\nPull-request-sha: 70a9c4d46916b7c6907eb1d3ad4f7033ec964191\n\nChange-Id: I6c6e3e69c3c34d0f3bdda7f0684849834fdd1863",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0409c88c297efa324218340b265a8d107d57deee",
        "buggy_code": "__slots__ = (\"connection\", \"is_active\", \"xid\", \"_is_prepared\")",
        "fixed_code": "__slots__ = (\"xid\", \"_is_prepared\")",
        "patch": "@@ -2257,7 +2257,7 @@ class TwoPhaseTransaction(RootTransaction):\n \n     \"\"\"\n \n-    __slots__ = (\"connection\", \"is_active\", \"xid\", \"_is_prepared\")\n+    __slots__ = (\"xid\", \"_is_prepared\")\n \n     def __init__(self, connection, xid):\n         self._is_prepared = False"
    },
    {
        "commit_id": "06f83c26ea3636eaec0b85fc9d733ab4bfb827ec",
        "commit_message": "track item schema names to identify name collisions w/ default schema\n\nAdded an additional lookup step to the compiler which will track all FROM\nclauses which are tables, that may have the same name shared in multiple\nschemas where one of the schemas is the implicit \"default\" schema; in this\ncase, the table name when referring to that name without a schema\nqualification will be rendered with an anonymous alias name at the compiler\nlevel in order to disambiguate the two (or more) names. The approach of\nschema-qualifying the normally unqualified name with the server-detected\n\"default schema name\" value was also considered, however this approach\ndoesn't apply to Oracle nor is it accepted by SQL Server, nor would it work\nwith multiple entries in the PostgreSQL search path. The name collision\nissue resolved here has been identified as affecting at least Oracle,\nPostgreSQL, SQL Server, MySQL and MariaDB.\n\nFixes: #7471\nChange-Id: Id65e7ca8c43fe8d95777084e8d5ec140ebcd784d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/06f83c26ea3636eaec0b85fc9d733ab4bfb827ec",
        "buggy_code": "__slots__ = (\"statement\",)",
        "fixed_code": "__slots__ = (\"statement\", \"_ambiguous_table_name_map\")",
        "patch": "@@ -499,7 +499,7 @@ class CompileState:\n \n     \"\"\"\n \n-    __slots__ = (\"statement\",)\n+    __slots__ = (\"statement\", \"_ambiguous_table_name_map\")\n \n     plugins = {}\n "
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from ..sql.traversals import HasCacheKey",
        "fixed_code": "from ..sql.cache_key import HasCacheKey",
        "patch": "@@ -37,7 +37,7 @@\n from ..sql import roles\n from ..sql import visitors\n from ..sql.base import ExecutableOption\n-from ..sql.traversals import HasCacheKey\n+from ..sql.cache_key import HasCacheKey\n \n \n __all__ = ("
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from ..sql.traversals import HasCacheKey",
        "fixed_code": "from ..sql.cache_key import HasCacheKey",
        "patch": "@@ -20,7 +20,7 @@\n from .. import inspection\n from .. import util\n from ..sql import visitors\n-from ..sql.traversals import HasCacheKey\n+from ..sql.cache_key import HasCacheKey\n \n log = logging.getLogger(__name__)\n "
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from .traversals import HasCacheKey",
        "fixed_code": "from .cache_key import HasCacheKey",
        "patch": "@@ -14,7 +14,7 @@\n from . import visitors\n from .base import ExecutableOption\n from .base import Options\n-from .traversals import HasCacheKey\n+from .cache_key import HasCacheKey\n from .visitors import Visitable\n from .. import exc\n from .. import inspection"
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "class TypeCompiler(metaclass=util.EnsureKWArgType):",
        "fixed_code": "class TypeCompiler(util.EnsureKWArg):",
        "patch": "@@ -503,7 +503,7 @@ def params(self):\n         return self.construct_params()\n \n \n-class TypeCompiler(metaclass=util.EnsureKWArgType):\n+class TypeCompiler(util.EnsureKWArg):\n     \"\"\"Produces DDL specification for TypeEngine objects.\"\"\"\n \n     ensure_kwarg = r\"visit_\\w+\""
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from .traversals import CacheKey",
        "fixed_code": "from .cache_key import CacheKey",
        "patch": "@@ -94,6 +94,7 @@\n from .base import _select_iterables\n from .base import ColumnCollection\n from .base import Executable\n+from .cache_key import CacheKey\n from .dml import Delete\n from .dml import Insert\n from .dml import Update\n@@ -173,7 +174,6 @@\n from .selectable import TextAsFrom\n from .selectable import TextualSelect\n from .selectable import Values\n-from .traversals import CacheKey\n from .visitors import Visitable\n from ..util.langhelpers import public_factory\n "
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from .traversals import HasCacheKey",
        "fixed_code": "from .cache_key import HasCacheKey",
        "patch": "@@ -22,11 +22,11 @@\n from . import type_api\n from .base import NO_ARG\n from .base import SchemaEventTarget\n+from .cache_key import HasCacheKey\n from .elements import _NONE_NAME\n from .elements import quoted_name\n from .elements import Slice\n from .elements import TypeCoerce as type_coerce  # noqa\n-from .traversals import HasCacheKey\n from .traversals import InternalTraversal\n from .type_api import Emulated\n from .type_api import NativeForEmulated  # noqa"
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from .traversals import HasCacheKey  # noqa",
        "fixed_code": "from .cache_key import HasCacheKey  # noqa",
        "patch": "@@ -22,6 +22,7 @@\n from .base import _expand_cloned\n from .base import _from_objects\n from .base import ColumnSet\n+from .cache_key import HasCacheKey  # noqa\n from .ddl import sort_tables  # noqa\n from .elements import _find_columns  # noqa\n from .elements import _label_reference\n@@ -41,7 +42,6 @@\n from .selectable import ScalarSelect\n from .selectable import SelectBase\n from .selectable import TableClause\n-from .traversals import HasCacheKey  # noqa\n from .. import exc\n from .. import util\n "
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from .langhelpers import EnsureKWArgType",
        "fixed_code": "from .langhelpers import EnsureKWArg",
        "patch": "@@ -98,7 +98,7 @@\n from .langhelpers import dictlike_iteritems\n from .langhelpers import duck_type_collection\n from .langhelpers import ellipses_string\n-from .langhelpers import EnsureKWArgType\n+from .langhelpers import EnsureKWArg\n from .langhelpers import format_argspec_init\n from .langhelpers import format_argspec_plus\n from .langhelpers import generic_repr"
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from sqlalchemy.sql.traversals import NO_CACHE",
        "fixed_code": "from sqlalchemy.sql.cache_key import NO_CACHE",
        "patch": "@@ -32,7 +32,7 @@\n from sqlalchemy.orm import sessionmaker\n from sqlalchemy.orm import subqueryload\n from sqlalchemy.orm import UserDefinedOption\n-from sqlalchemy.sql.traversals import NO_CACHE\n+from sqlalchemy.sql.cache_key import NO_CACHE\n from sqlalchemy.testing import assert_raises\n from sqlalchemy.testing import assert_raises_message\n from sqlalchemy.testing import AssertsCompiledSQL"
    },
    {
        "commit_id": "3a23e8ed29180e914883a263ec83373ecbd02efa",
        "commit_message": "remove internal use of metaclasses\n\nAll but one metaclass used internally can now\nbe replaced using __init_subclass__().  Within this\npatch we remove:\n\n* events._EventMeta\n* sql.visitors.TraversibleType\n* sql.visitors.InternalTraversibleType\n* testing.fixtures.FindFixture\n* testing.fixtures.FindFixtureDeclarative\n* langhelpers.EnsureKWArgType\n* sql.functions._GenericMeta\n* sql.type_api.VisitableCheckKWArg (was a mixture of TraversibleType\n  and EnsureKWArgType)\n\nThe remaining internal class is MetaOptions used by the\nsql.Options object which is in turn currently mostly for\nORM internal use, as this type implements class level overrides\nfor the ``+`` operator.\n\nFor declarative, removing DeclarativeMeta in place of\nan `__init_subclass__()` class would not be fully feasible as\nit would break backwards compatibility with applications that\nrefer to this class explicitly, but also DeclarativeMeta intercepts\nclass-level attribute set and delete operations which is a widely\nused pattern.   An option for declarative base to use\n`__init_subclass__()` should be provided but this is out of\nscope for this particular change.\n\nChange-Id: I8aa898c7ab59d887739037d34b1cbab36521ab78\nReferences: #6810",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3a23e8ed29180e914883a263ec83373ecbd02efa",
        "buggy_code": "from sqlalchemy.sql.traversals import HasCacheKey",
        "fixed_code": "from sqlalchemy.sql.cache_key import HasCacheKey",
        "patch": "@@ -18,7 +18,7 @@\n from sqlalchemy.sql import table\n from sqlalchemy.sql import util as sql_util\n from sqlalchemy.sql.base import ExecutableOption\n-from sqlalchemy.sql.traversals import HasCacheKey\n+from sqlalchemy.sql.cache_key import HasCacheKey\n from sqlalchemy.testing import assert_raises_message\n from sqlalchemy.testing import AssertsCompiledSQL\n from sqlalchemy.testing import eq_"
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "with the exeption of the \"fast executemany\" helpers.   The \"fast executemany\"",
        "fixed_code": "with the exception of the \"fast executemany\" helpers.   The \"fast executemany\"",
        "patch": "@@ -43,7 +43,7 @@\n     asyncio_engine = create_async_engine(\"postgresql+psycopg_async://scott:tiger@localhost/test\")\n \n The ``psycopg`` dialect has the same API features as that of ``psycopg2``,\n-with the exeption of the \"fast executemany\" helpers.   The \"fast executemany\"\n+with the exception of the \"fast executemany\" helpers.   The \"fast executemany\"\n helpers are expected to be generalized and ported to ``psycopg`` before the final\n release of SQLAlchemy 2.0, however.\n "
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "method, in constrast to other objects with this method, modifies",
        "fixed_code": "method, in contrast to other objects with this method, modifies",
        "patch": "@@ -187,7 +187,7 @@ def execution_options(self, **opt):\n         keeping the effect of such an option localized to a \"sub\" connection.\n \n         .. versionchanged:: 2.0  The :meth:`_engine.Connection.execution_options`\n-           method, in constrast to other objects with this method, modifies\n+           method, in contrast to other objects with this method, modifies\n            the connection in-place without creating copy of it.\n \n         As discussed elsewhere, the :meth:`_engine.Connection.execution_options`"
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "SQLAlchemy for all cases up through te 0.9 series.   Positional",
        "fixed_code": "SQLAlchemy for all cases up through the 0.9 series.   Positional",
        "patch": "@@ -348,7 +348,7 @@ def _merge_cursor_description(\n         as with textual non-ordered columns.\n \n         The name-matched system of merging is the same as that used by\n-        SQLAlchemy for all cases up through te 0.9 series.   Positional\n+        SQLAlchemy for all cases up through the 0.9 series.   Positional\n         matching for compiled SQL expressions was introduced in 1.0 as a\n         major performance feature, and positional matching for textual\n         :class:`_expression.TextualSelect` objects in 1.1."
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "for the :class:`._ConnectionFairy` implemenatation object, users familiar",
        "fixed_code": "for the :class:`._ConnectionFairy` implementation object, users familiar",
        "patch": "@@ -792,7 +792,7 @@ class PoolProxiedConnection:\n     pool.\n \n     :class:`.PoolProxiedConnection` is basically the public-facing interface\n-    for the :class:`._ConnectionFairy` implemenatation object, users familiar\n+    for the :class:`._ConnectionFairy` implementation object, users familiar\n     with :class:`._ConnectionFairy` can consider this object to be\n     equivalent.\n "
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "to provide custom column expresion behavior for the type.  This",
        "fixed_code": "to provide custom column expression behavior for the type.  This",
        "patch": "@@ -1784,7 +1784,7 @@ def column_expression(self, column):\n             in a result row subsequent to statement execution time.\n \n         Subclasses of :class:`_types.TypeDecorator` can override this method\n-        to provide custom column expresion behavior for the type.  This\n+        to provide custom column expression behavior for the type.  This\n         implementation will **replace** that of the underlying implementation\n         type.\n "
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "-- *and* cant give yourself a grant !",
        "fixed_code": "-- *and* can't give yourself a grant !",
        "patch": "@@ -74,7 +74,7 @@ def setup_test_class(cls):\n \n     -- can't make a ref from local schema to the\n     -- remote schema's table without this,\n-    -- *and* cant give yourself a grant !\n+    -- *and* can't give yourself a grant !\n     -- so we give it to public.  ideas welcome.\n     grant references on %(test_schema)s.parent to public;\n     grant references on %(test_schema)s.child to public;"
    },
    {
        "commit_id": "5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "commit_message": "Merge \"Fix various source comment/doc typos\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5681d4e4da8ee69d83e9c0103c171d413d4c183e",
        "buggy_code": "assert False, \"Unknonw dialect\"",
        "fixed_code": "assert False, \"Unknown dialect\"",
        "patch": "@@ -3412,7 +3412,7 @@ def __getattr__(self, _):\n \n             extras = psycopg_extras()\n         else:\n-            assert False, \"Unknonw dialect\"\n+            assert False, \"Unknown dialect\"\n         return extras\n \n     @classmethod"
    },
    {
        "commit_id": "21ee595ba9ef3e7abc8982fac7bf488c904cf9c9",
        "commit_message": "fix incorrect with_parent() example\n\nThe lead example for the with_parent() function\ndocstring was backwards, based on the standard User/Address\nmapping used in the documentation.\n\nFixes: #7540\nChange-Id: Iaff7dc6fdd0c323509231ae5f3122ed76a420915",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/21ee595ba9ef3e7abc8982fac7bf488c904cf9c9",
        "buggy_code": "stmt = select(Address).where(with_parent(some_user, Address.user))",
        "fixed_code": "stmt = select(Address).where(with_parent(some_user, User.addresses))",
        "patch": "@@ -1852,7 +1852,7 @@ def with_parent(instance, prop, from_entity=None):\n \n     E.g.::\n \n-        stmt = select(Address).where(with_parent(some_user, Address.user))\n+        stmt = select(Address).where(with_parent(some_user, User.addresses))\n \n \n     The SQL rendered is the same as that rendered when a lazy loader"
    },
    {
        "commit_id": "cd0b050ce07e7fe1b46ef8fa2b5aabba9f812e41",
        "commit_message": "Merge \"Fix AttributeError typo in setup.py that prevented fallback pure python build if the compilation fails\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cd0b050ce07e7fe1b46ef8fa2b5aabba9f812e41",
        "buggy_code": "exc.cause,",
        "fixed_code": "exc.__cause__,",
        "patch": "@@ -165,7 +165,7 @@ def run_setup(with_cext):\n             raise\n \n         status_msgs(\n-            exc.cause,\n+            exc.__cause__,\n             \"WARNING: The Cython extension could not be compiled, \"\n             \"speedups are not enabled.\",\n             \"Failure information, if any, is above.\","
    },
    {
        "commit_id": "c87a08ed8f383466f252c2054bd44b87102149b1",
        "commit_message": "Fix AttributeError typo in setup.py that prevented fallback\npure python build if the compilation fails\n\nFixes: #7539\nChange-Id: I4bf7905eb7a5337213ce922d005d2fffb8b9079c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c87a08ed8f383466f252c2054bd44b87102149b1",
        "buggy_code": "exc.cause,",
        "fixed_code": "exc.__cause__,",
        "patch": "@@ -165,7 +165,7 @@ def run_setup(with_cext):\n             raise\n \n         status_msgs(\n-            exc.cause,\n+            exc.__cause__,\n             \"WARNING: The Cython extension could not be compiled, \"\n             \"speedups are not enabled.\",\n             \"Failure information, if any, is above.\","
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "schema=local_mapper.local_table.schema",
        "fixed_code": "schema=local_mapper.local_table.schema,",
        "patch": "@@ -128,7 +128,7 @@ def _col_copy(col):\n             local_mapper.local_table.name + \"_history\",\n             local_mapper.local_table.metadata,\n             *cols,\n-            schema=local_mapper.local_table.schema\n+            schema=local_mapper.local_table.schema,\n         )\n     else:\n         # single table inheritance.  take any additional columns that may have"
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "]",
        "fixed_code": "],",
        "patch": "@@ -647,7 +647,7 @@ def _filter_exclusions(args):\n                     idx\n                     for idx, char in enumerate(id_)\n                     if char in (\"n\", \"r\", \"s\", \"a\")\n-                ]\n+                ],\n             )\n             fns = [\n                 (operator.itemgetter(idx), _combination_id_fns[char])"
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "conn.execute(select(literal_column(u\"m\u00e9il\")))",
        "fixed_code": "conn.execute(select(literal_column(\"m\u00e9il\")))",
        "patch": "@@ -70,7 +70,7 @@ def test_exception_with_non_ascii(self):\n                 # there's no way to make this happen with some drivers like\n                 # mysqlclient, pymysql.  this at least does produce a non-\n                 # ascii error message for cx_oracle, psycopg2\n-                conn.execute(select(literal_column(u\"m\u00e9il\")))\n+                conn.execute(select(literal_column(\"m\u00e9il\")))\n                 assert False\n             except exc.DBAPIError as err:\n                 err_str = str(err)"
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "argnames=\",\".join(keys)",
        "fixed_code": "argnames=\",\".join(keys),",
        "patch": "@@ -275,7 +275,7 @@ def flag_combinations(*combinations):\n             for d in combinations\n         ],\n         id_=\"i\" + (\"a\" * len(keys)),\n-        argnames=\",\".join(keys)\n+        argnames=\",\".join(keys),\n     )\n \n "
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "name=\"my_enum\"",
        "fixed_code": "name=\"my_enum\",",
        "patch": "@@ -120,7 +120,7 @@ async def async_setup(engine, enums):\n                 \"name\",\n                 ENUM(\n                     *(\"beans\", \"means\", \"keens\", \"faux\", \"beau\", \"flow\"),\n-                    name=\"my_enum\"\n+                    name=\"my_enum\",\n                 ),\n             ),\n         )"
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "argnames=\"t, idx_to_value\"",
        "fixed_code": "argnames=\"t, idx_to_value\",",
        "patch": "@@ -1294,7 +1294,7 @@ def combinations():\n                 (t, combination)\n                 for i, combination in zip(range(10), combinations())\n             ],\n-            argnames=\"t, idx_to_value\"\n+            argnames=\"t, idx_to_value\",\n         )\n \n     @random_update_order_parameters()"
    },
    {
        "commit_id": "146a349d81023805264f81643db50a5281da90da",
        "commit_message": "Update Black's target-version to py37\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nBlack's `target-version` was still set to `['py27', 'py36']`. Set it to `[py37]` instead.\n\nAlso update Black and other pre-commit hooks and re-format with Black.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7536\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7536\nPull-request-sha: b3aedf5570d7e0ba6c354e5989835260d0591b08\n\nChange-Id: I8be85636fd2c9449b07a8626050c8bd35bd119d5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/146a349d81023805264f81643db50a5281da90da",
        "buggy_code": "argnames=\"t, idx_to_value\"",
        "fixed_code": "argnames=\"t, idx_to_value\",",
        "patch": "@@ -829,7 +829,7 @@ def combinations():\n                 (t, combination)\n                 for i, combination in zip(range(10), combinations())\n             ],\n-            argnames=\"t, idx_to_value\"\n+            argnames=\"t, idx_to_value\",\n         )\n \n     @random_update_order_parameters()"
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "with the exeption of the \"fast executemany\" helpers.   The \"fast executemany\"",
        "fixed_code": "with the exception of the \"fast executemany\" helpers.   The \"fast executemany\"",
        "patch": "@@ -43,7 +43,7 @@\n     asyncio_engine = create_async_engine(\"postgresql+psycopg_async://scott:tiger@localhost/test\")\n \n The ``psycopg`` dialect has the same API features as that of ``psycopg2``,\n-with the exeption of the \"fast executemany\" helpers.   The \"fast executemany\"\n+with the exception of the \"fast executemany\" helpers.   The \"fast executemany\"\n helpers are expected to be generalized and ported to ``psycopg`` before the final\n release of SQLAlchemy 2.0, however.\n "
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "method, in constrast to other objects with this method, modifies",
        "fixed_code": "method, in contrast to other objects with this method, modifies",
        "patch": "@@ -187,7 +187,7 @@ def execution_options(self, **opt):\n         keeping the effect of such an option localized to a \"sub\" connection.\n \n         .. versionchanged:: 2.0  The :meth:`_engine.Connection.execution_options`\n-           method, in constrast to other objects with this method, modifies\n+           method, in contrast to other objects with this method, modifies\n            the connection in-place without creating copy of it.\n \n         As discussed elsewhere, the :meth:`_engine.Connection.execution_options`"
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "SQLAlchemy for all cases up through te 0.9 series.   Positional",
        "fixed_code": "SQLAlchemy for all cases up through the 0.9 series.   Positional",
        "patch": "@@ -331,7 +331,7 @@ def _merge_cursor_description(\n         as with textual non-ordered columns.\n \n         The name-matched system of merging is the same as that used by\n-        SQLAlchemy for all cases up through te 0.9 series.   Positional\n+        SQLAlchemy for all cases up through the 0.9 series.   Positional\n         matching for compiled SQL expressions was introduced in 1.0 as a\n         major performance feature, and positional matching for textual\n         :class:`_expression.TextualSelect` objects in 1.1."
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "for the :class:`._ConnectionFairy` implemenatation object, users familiar",
        "fixed_code": "for the :class:`._ConnectionFairy` implementation object, users familiar",
        "patch": "@@ -792,7 +792,7 @@ class PoolProxiedConnection:\n     pool.\n \n     :class:`.PoolProxiedConnection` is basically the public-facing interface\n-    for the :class:`._ConnectionFairy` implemenatation object, users familiar\n+    for the :class:`._ConnectionFairy` implementation object, users familiar\n     with :class:`._ConnectionFairy` can consider this object to be\n     equivalent.\n "
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "to provide custom column expresion behavior for the type.  This",
        "fixed_code": "to provide custom column expression behavior for the type.  This",
        "patch": "@@ -1742,7 +1742,7 @@ def column_expression(self, column):\n             in a result row subsequent to statement execution time.\n \n         Subclasses of :class:`_types.TypeDecorator` can override this method\n-        to provide custom column expresion behavior for the type.  This\n+        to provide custom column expression behavior for the type.  This\n         implementation will **replace** that of the underlying implementation\n         type.\n "
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "-- *and* cant give yourself a grant !",
        "fixed_code": "-- *and* can't give yourself a grant !",
        "patch": "@@ -74,7 +74,7 @@ def setup_test_class(cls):\n \n     -- can't make a ref from local schema to the\n     -- remote schema's table without this,\n-    -- *and* cant give yourself a grant !\n+    -- *and* can't give yourself a grant !\n     -- so we give it to public.  ideas welcome.\n     grant references on %(test_schema)s.parent to public;\n     grant references on %(test_schema)s.child to public;"
    },
    {
        "commit_id": "56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "commit_message": "Fix various source comment/doc typos\n\n### Description\nFound via `codespell -q 3 -L ba,crate,datas,froms,gord,hist,inh,nd,selectin,strat,ue`\nAlso added codespell to the pep8 tox env\n\n### Checklist\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n\nCloses: #7338\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7338\nPull-request-sha: 0deac2219396bc0eba7da53eb3a80932edbf2dd7\n\nChange-Id: Icd61db31c8dc655d4a39d8a304194804d08555fe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56256b6d132c0deae4368a7d0d04912df9a80fc0",
        "buggy_code": "assert False, \"Unknonw dialect\"",
        "fixed_code": "assert False, \"Unknown dialect\"",
        "patch": "@@ -3375,7 +3375,7 @@ def __getattr__(self, _):\n \n             extras = psycopg_extras()\n         else:\n-            assert False, \"Unknonw dialect\"\n+            assert False, \"Unknown dialect\"\n         return extras\n \n     @classmethod"
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "def %(name)s(%(args)s):",
        "fixed_code": "def %(name)s%(grouped_args)s:",
        "patch": "@@ -557,7 +557,7 @@ def decorate(fn, add_positional_parameters=()):\n         metadata.update(format_argspec_plus(spec, grouped=False))\n         code = (\n             \"\"\"\\\n-def %(name)s(%(args)s):\n+def %(name)s%(grouped_args)s:\n     return %(__target_fn)s(%(__orig_fn)s, %(apply_kw)s)\n \"\"\"\n             % metadata"
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "return annotation.__qualname__",
        "fixed_code": "return repr(annotation.__qualname__)",
        "patch": "@@ -165,7 +165,7 @@ def _formatannotation(annotation, base_module=None):\n         return repr(annotation).replace(\"typing.\", \"\")\n     if isinstance(annotation, type):\n         if annotation.__module__ in (\"builtins\", base_module):\n-            return annotation.__qualname__\n+            return repr(annotation.__qualname__)\n         return annotation.__module__ + \".\" + annotation.__qualname__\n     return repr(annotation)\n "
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "r\"Triggering mapper: 'mapped class User->users'. \"",
        "fixed_code": "r\"Triggering mapper: 'Mapper\\[User\\(users\\)\\]'. \"",
        "patch": "@@ -1190,7 +1190,7 @@ class User(Base):\n                 sa.exc.InvalidRequestError,\n                 \"^One or more mappers failed to initialize\"\n                 \" - can't proceed with initialization of other mappers. \"\n-                r\"Triggering mapper: 'mapped class User->users'. \"\n+                r\"Triggering mapper: 'Mapper\\[User\\(users\\)\\]'. \"\n                 \"Original exception was: When initializing.*\",\n                 configure_mappers,\n             )"
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "\"against joined entity mapped class B->b due to overlapping\"",
        "fixed_code": "r\"against joined entity Mapper\\[B\\(b\\)\\] due to overlapping\"",
        "patch": "@@ -2266,7 +2266,7 @@ def test_polymorphic_adaptation_auto(self):\n         s = fixture_session()\n         with testing.expect_warnings(\n             \"An alias is being generated automatically \"\n-            \"against joined entity mapped class B->b due to overlapping\"\n+            r\"against joined entity Mapper\\[B\\(b\\)\\] due to overlapping\"\n         ):\n             self.assert_compile(\n                 s.query(A).join(B).filter(B.x == \"test\"),"
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "r\"of relationship attribute AliasedClass_User.addresses\",",
        "fixed_code": "r\"of relationship attribute aliased\\(User\\).addresses\",",
        "patch": "@@ -347,7 +347,7 @@ def test_join_from_conflicting_left_side_mapper_vs_aliased(self):\n             # the display of the attribute here is not consistent vs.\n             # the straight aliased class, should improve this.\n             r\"explicit from clause .*User.* does not match left side .*\"\n-            r\"of relationship attribute AliasedClass_User.addresses\",\n+            r\"of relationship attribute aliased\\(User\\).addresses\",\n             stmt.compile,\n         )\n "
    },
    {
        "commit_id": "91501e06a17d873902114275d7149ba24973db6a",
        "commit_message": "factor out UnboundLoad and rearchitect strategy_options.py\n\nThe architecture of Load is mostly rewritten here.\n\nThe change includes removal of the \"pluggable\" aspect\nof the loader options, which would patch new methods onto\nLoad.  This has been replaced by normal methods that\nrespond normally to typing annotations.  As part of this\nchange, the bake_loaders() and unbake_loaders() options,\nwhich have no effect since 1.4 and were unlikely to be\nin any common use, have been removed.\n\nAdditionally, to support annotations for methods that\nmake use of @decorator, @generative etc., modified\nformat_argspec_plus to no longer return \"args\", instead\nreturns \"grouped_args\" which is always grouped and\nallows return annotations to format correctly.\n\nFixes: #6986\nChange-Id: I6117c642345cdde65a64389bba6057ddd5374427",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91501e06a17d873902114275d7149ba24973db6a",
        "buggy_code": "'Mapped attribute \"User.addresses\" does not apply to '",
        "fixed_code": "r\"Mapped class Mapper\\[User\\(users\\)\\] does not apply to \"",
        "patch": "@@ -882,7 +882,7 @@ def test_skip_options_that_dont_match(self, test_control_case, do_expire):\n             # for up front\n             with expect_raises_message(\n                 sa.exc.ArgumentError,\n-                'Mapped attribute \"User.addresses\" does not apply to '\n+                r\"Mapped class Mapper\\[User\\(users\\)\\] does not apply to \"\n                 \"any of the root entities in this query\",\n             ):\n                 row = sess.execute("
    },
    {
        "commit_id": "6d589ffbb5fe04a4ee606819e948974045f62b80",
        "commit_message": "consider truediv as truediv; support floordiv operator\n\nImplemented full support for \"truediv\" and \"floordiv\" using the\n\"/\" and \"//\" operators.  A \"truediv\" operation between two expressions\nusing :class:`_types.Integer` now considers the result to be\n:class:`_types.Numeric`, and the dialect-level compilation will cast\nthe right operand to a numeric type on a dialect-specific basis to ensure\ntruediv is achieved.  For floordiv, conversion is also added for those\ndatabases that don't already do floordiv by default (MySQL, Oracle) and\nthe ``FLOOR()`` function is rendered in this case, as well as for\ncases where the right operand is not an integer (needed for PostgreSQL,\nothers).\n\nThe change resolves issues both with inconsistent behavior of the\ndivision operator on different backends and also fixes an issue where\ninteger division on Oracle would fail to be able to fetch a result due\nto inappropriate outputtypehandlers.\n\nFixes: #4926\nChange-Id: Id54cc018c1fb7a49dd3ce1216d68d40f43fe2659",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d589ffbb5fe04a4ee606819e948974045f62b80",
        "buggy_code": "idx1 = Index(\"test_idx1\", 5 / (tbl.c.x + tbl.c.y))",
        "fixed_code": "idx1 = Index(\"test_idx1\", 5 // (tbl.c.x + tbl.c.y))",
        "patch": "@@ -779,7 +779,7 @@ def test_create_index_expr_gets_parens(self):\n         m = MetaData()\n         tbl = Table(\"testtbl\", m, Column(\"x\", Integer), Column(\"y\", Integer))\n \n-        idx1 = Index(\"test_idx1\", 5 / (tbl.c.x + tbl.c.y))\n+        idx1 = Index(\"test_idx1\", 5 // (tbl.c.x + tbl.c.y))\n         self.assert_compile(\n             schema.CreateIndex(idx1),\n             \"CREATE INDEX test_idx1 ON testtbl ((5 / (x + y)))\","
    },
    {
        "commit_id": "6d589ffbb5fe04a4ee606819e948974045f62b80",
        "commit_message": "consider truediv as truediv; support floordiv operator\n\nImplemented full support for \"truediv\" and \"floordiv\" using the\n\"/\" and \"//\" operators.  A \"truediv\" operation between two expressions\nusing :class:`_types.Integer` now considers the result to be\n:class:`_types.Numeric`, and the dialect-level compilation will cast\nthe right operand to a numeric type on a dialect-specific basis to ensure\ntruediv is achieved.  For floordiv, conversion is also added for those\ndatabases that don't already do floordiv by default (MySQL, Oracle) and\nthe ``FLOOR()`` function is rendered in this case, as well as for\ncases where the right operand is not an integer (needed for PostgreSQL,\nothers).\n\nThe change resolves issues both with inconsistent behavior of the\ndivision operator on different backends and also fixes an issue where\ninteger division on Oracle would fail to be able to fetch a result due\nto inappropriate outputtypehandlers.\n\nFixes: #4926\nChange-Id: Id54cc018c1fb7a49dd3ce1216d68d40f43fe2659",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d589ffbb5fe04a4ee606819e948974045f62b80",
        "buggy_code": "func.sum(regional_sales.c.total_sales) / 10",
        "fixed_code": "func.sum(regional_sales.c.total_sales) // 10",
        "patch": "@@ -55,7 +55,7 @@ def test_nonrecursive(self):\n             .where(\n                 regional_sales.c.total_sales\n                 > select(\n-                    func.sum(regional_sales.c.total_sales) / 10\n+                    func.sum(regional_sales.c.total_sales) // 10\n                 ).scalar_subquery()\n             )\n             .cte(\"top_regions\")"
    },
    {
        "commit_id": "aded8b11d9eccbd1f2b645a94338e34a3d234bc9",
        "commit_message": "use fully qualified, locatable names for all use of api.named_type()\n\nFixed mypy regression where the release of mypy 0.930 added additional\ninternal checks to the format of \"named types\", requiring that they be\nfully qualified and locatable. This broke the mypy plugin for SQLAlchemy,\nraising an assertion error, as there was use of symbols such as\n``__builtins__`` and other un-locatable or unqualified names that\npreviously had not raised any assertions.\n\nFixes: #7496\nChange-Id: I037680606a1d51158ef6503508ec76c5d5adc946",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aded8b11d9eccbd1f2b645a94338e34a3d234bc9",
        "buggy_code": "\"__sa_Mapped\", [left_hand_explicit_type]",
        "fixed_code": "names.NAMED_TYPE_SQLA_MAPPED, [left_hand_explicit_type]",
        "patch": "@@ -327,7 +327,7 @@ class MyClass:\n         )\n \n     left_node.node.type = api.named_type(\n-        \"__sa_Mapped\", [left_hand_explicit_type]\n+        names.NAMED_TYPE_SQLA_MAPPED, [left_hand_explicit_type]\n     )\n \n     # this will ignore the rvalue entirely"
    },
    {
        "commit_id": "267e9cbf6e3c165a4e953b49d979d7f4ddc533f9",
        "commit_message": "accommodate for \"clone\" of ColumnClause\n\nfor use with the ClauseElement.params() method,\naltered ColumnClause._clone() so that while the element\nstays immutable, if the column is associated with a subquery,\nit returns a new version of itself as corresponding to a\nclone of the subquery.  this allows processing functions\nto access the parameters in the subquery and produce a\ncopy of it.  The use case here is the expanded use of\n.params() within loader strategies that use\nHasCacheKey._apply_params_to_element().\n\nFixed issue in new \"loader criteria\" method\n:meth:`_orm.PropComparator.and_` where usage with a loader strategy like\n:func:`_orm.selectinload` against a column that was a member of the ``.c.``\ncollection of a subquery object, where the subquery would be dynamically\nadded to the FROM clause of the statement, would be subject to stale\nparameter values within the subquery in the SQL statement cache, as the\nprocess used by the loader strategy to replace the parameters at execution\ntime would fail to accommodate the subquery when received in this form.\n\nFixes: #7489\nChange-Id: Ibb3b6af140b8a62a2c8d05b2ac92e86ca3013c46",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/267e9cbf6e3c165a4e953b49d979d7f4ddc533f9",
        "buggy_code": "cloned[id(elem)] = newelem = elem._clone(**kw)",
        "fixed_code": "cloned[id(elem)] = newelem = elem._clone(clone=clone, **kw)",
        "patch": "@@ -774,7 +774,7 @@ def clone(elem, **kw):\n                         cloned[id(elem)] = newelem\n                         return newelem\n \n-                cloned[id(elem)] = newelem = elem._clone(**kw)\n+                cloned[id(elem)] = newelem = elem._clone(clone=clone, **kw)\n                 newelem._copy_internals(clone=clone, **kw)\n                 meth = visitors.get(newelem.__visit_name__, None)\n                 if meth:"
    },
    {
        "commit_id": "9fd1bb4e8bf8a21f8c20b4390a9e7d579556ffc0",
        "commit_message": "Fix typo in docstring",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fd1bb4e8bf8a21f8c20b4390a9e7d579556ffc0",
        "buggy_code": "An ``EXISTS`` clase can also be constructed from a :func:`_sql.select`",
        "fixed_code": "An ``EXISTS`` clause can also be constructed from a :func:`_sql.select`",
        "patch": "@@ -6490,7 +6490,7 @@ class Exists(UnaryExpression):\n \n     See :func:`_sql.exists` for a description of usage.\n \n-    An ``EXISTS`` clase can also be constructed from a :func:`_sql.select`\n+    An ``EXISTS`` clause can also be constructed from a :func:`_sql.select`\n     instance by calling :meth:`_sql.SelectBase.exists`.\n \n     \"\"\""
    },
    {
        "commit_id": "22deafe15289d2be55682e1632016004b02b62c0",
        "commit_message": "Warn when caching is disabled / document\n\nThis patch adds new warnings for all elements that\ndon't indicate their caching behavior, including user-defined\nClauseElement subclasses and third party dialects.\nit additionally adds new documentation to discuss an apparent\nperformance degradation in 1.4 when caching is disabled as a\nresult in the significant expense incurred by ORM\nlazy loaders, which in 1.3 used BakedQuery so were actually\ncached.\n\nAs a result of adding the warnings, a fair degree of\nlesser used SQL expression objects identified that they did not\ndefine caching behavior so would have been producing\n``[no key]``, including PostgreSQL constructs ``hstore``\nand ``array``.  These have been amended to use inherit\ncache where appropriate.  \"on conflict\" constructs in\nPostgreSQL, MySQL, SQLite still explicitly don't generate\na cache key at this time.\n\nThe change also adds a test for all constructs via\nassert_compile() to assert they will not generate cache\nwarnings.\n\nFixes: #7394\nChange-Id: I85958affbb99bfad0f5efa21bc8f2a95e7e46981",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/22deafe15289d2be55682e1632016004b02b62c0",
        "buggy_code": ".with_hint(\"XYZ\", \"mysql\"),",
        "fixed_code": ".with_hint(\"XYZ\", dialect_name=\"mysql\"),",
        "patch": "@@ -180,7 +180,7 @@ def test_update_exclude_hint(self):\n             t.update()\n             .where(t.c.somecolumn == \"q\")\n             .values(somecolumn=\"x\")\n-            .with_hint(\"XYZ\", \"mysql\"),\n+            .with_hint(\"XYZ\", dialect_name=\"mysql\"),\n             \"UPDATE sometable SET somecolumn=:somecolumn \"\n             \"WHERE sometable.somecolumn = :somecolumn_1\",\n         )"
    },
    {
        "commit_id": "22deafe15289d2be55682e1632016004b02b62c0",
        "commit_message": "Warn when caching is disabled / document\n\nThis patch adds new warnings for all elements that\ndon't indicate their caching behavior, including user-defined\nClauseElement subclasses and third party dialects.\nit additionally adds new documentation to discuss an apparent\nperformance degradation in 1.4 when caching is disabled as a\nresult in the significant expense incurred by ORM\nlazy loaders, which in 1.3 used BakedQuery so were actually\ncached.\n\nAs a result of adding the warnings, a fair degree of\nlesser used SQL expression objects identified that they did not\ndefine caching behavior so would have been producing\n``[no key]``, including PostgreSQL constructs ``hstore``\nand ``array``.  These have been amended to use inherit\ncache where appropriate.  \"on conflict\" constructs in\nPostgreSQL, MySQL, SQLite still explicitly don't generate\na cache key at this time.\n\nThe change also adds a test for all constructs via\nassert_compile() to assert they will not generate cache\nwarnings.\n\nFixes: #7394\nChange-Id: I85958affbb99bfad0f5efa21bc8f2a95e7e46981",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/22deafe15289d2be55682e1632016004b02b62c0",
        "buggy_code": "pass",
        "fixed_code": "inherit_cache = True",
        "patch": "@@ -2252,7 +2252,7 @@ class A(Base):\n             id = Column(Integer, primary_key=True)\n \n         class MySpecialColumn(Column):\n-            pass\n+            inherit_cache = True\n \n         class B(A):\n             __tablename__ = \"b\""
    },
    {
        "commit_id": "22deafe15289d2be55682e1632016004b02b62c0",
        "commit_message": "Warn when caching is disabled / document\n\nThis patch adds new warnings for all elements that\ndon't indicate their caching behavior, including user-defined\nClauseElement subclasses and third party dialects.\nit additionally adds new documentation to discuss an apparent\nperformance degradation in 1.4 when caching is disabled as a\nresult in the significant expense incurred by ORM\nlazy loaders, which in 1.3 used BakedQuery so were actually\ncached.\n\nAs a result of adding the warnings, a fair degree of\nlesser used SQL expression objects identified that they did not\ndefine caching behavior so would have been producing\n``[no key]``, including PostgreSQL constructs ``hstore``\nand ``array``.  These have been amended to use inherit\ncache where appropriate.  \"on conflict\" constructs in\nPostgreSQL, MySQL, SQLite still explicitly don't generate\na cache key at this time.\n\nThe change also adds a test for all constructs via\nassert_compile() to assert they will not generate cache\nwarnings.\n\nFixes: #7394\nChange-Id: I85958affbb99bfad0f5efa21bc8f2a95e7e46981",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/22deafe15289d2be55682e1632016004b02b62c0",
        "buggy_code": "\"Cacheable Core or ORM object expected, got\",",
        "fixed_code": "\"ExecutionOption Core or ORM object expected, got\",",
        "patch": "@@ -219,7 +219,7 @@ def test_lambdas_rejected_in_options(self, plain_fixture):\n \n         assert_raises_message(\n             exc.ArgumentError,\n-            \"Cacheable Core or ORM object expected, got\",\n+            \"ExecutionOption Core or ORM object expected, got\",\n             select(lambda: User).options,\n             lambda: subqueryload(User.addresses),\n         )"
    },
    {
        "commit_id": "cf95ea2eee2d99051e24b529a8b39ff3f1a494cb",
        "commit_message": "fix typo in exists documentation\n\nChange-Id: I44d8d6ee4816052a8dda64c00905b17b7ad8698e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cf95ea2eee2d99051e24b529a8b39ff3f1a494cb",
        "buggy_code": "An ``EXISTS`` clase can also be construed from a :func:`_sql.select`",
        "fixed_code": "An ``EXISTS`` clase can also be constructed from a :func:`_sql.select`",
        "patch": "@@ -6490,7 +6490,7 @@ class Exists(UnaryExpression):\n \n     See :func:`_sql.exists` for a description of usage.\n \n-    An ``EXISTS`` clase can also be construed from a :func:`_sql.select`\n+    An ``EXISTS`` clase can also be constructed from a :func:`_sql.select`\n     instance by calling :meth:`_sql.SelectBase.exists`.\n \n     \"\"\""
    },
    {
        "commit_id": "e8fb73cfb0c765c71e50e7bb0ec92d419076201d",
        "commit_message": "adapt pytest plugin to support pytest v7\n\nImplemented support for the test suite to run correctly under Pytest 7.\nPreviously, only Pytest 6.x was supported for Python 3, however the version\nwas not pinned on the upper bound in tox.ini. Pytest is not pinned in\ntox.ini to be lower than version 8 so that SQLAlchemy versions released\nwith the current codebase will be able to be tested under tox without\nchanges to the environment.   Much thanks to the Pytest developers for\ntheir help with this issue.\n\nChange-Id: I3b12166199be2b913ee16e78b3ebbff415654396",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e8fb73cfb0c765c71e50e7bb0ec92d419076201d",
        "buggy_code": "type=\"string\",",
        "fixed_code": "type=str,",
        "patch": "@@ -86,7 +86,7 @@ def setup_options(make_option):\n     make_option(\n         \"--dbdriver\",\n         action=\"append\",\n-        type=\"string\",\n+        type=str,\n         dest=\"dbdriver\",\n         help=\"Additional database drivers to include in tests.  \"\n         \"These are linked to the existing database URLs by the \""
    },
    {
        "commit_id": "e8fb73cfb0c765c71e50e7bb0ec92d419076201d",
        "commit_message": "adapt pytest plugin to support pytest v7\n\nImplemented support for the test suite to run correctly under Pytest 7.\nPreviously, only Pytest 6.x was supported for Python 3, however the version\nwas not pinned on the upper bound in tox.ini. Pytest is not pinned in\ntox.ini to be lower than version 8 so that SQLAlchemy versions released\nwith the current codebase will be able to be tested under tox without\nchanges to the environment.   Much thanks to the Pytest developers for\ntheir help with this issue.\n\nChange-Id: I3b12166199be2b913ee16e78b3ebbff415654396",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e8fb73cfb0c765c71e50e7bb0ec92d419076201d",
        "buggy_code": "from pytestplugin import *  # noqa",
        "fixed_code": "from sqla_pytestplugin import *  # noqa",
        "patch": "@@ -46,4 +46,4 @@\n     code = compile(f.read(), \"bootstrap.py\", \"exec\")\n     to_bootstrap = \"pytest\"\n     exec(code, globals(), locals())\n-    from pytestplugin import *  # noqa\n+    from sqla_pytestplugin import *  # noqa"
    },
    {
        "commit_id": "939de240d31a5441ad7380738d410a976d4ecc3a",
        "commit_message": "propose emulated setinputsizes embedded in the compiler\n\nAdd a new system so that PostgreSQL and other dialects have a\nreliable way to add casts to bound parameters in SQL statements,\nreplacing previous use of setinputsizes() for PG dialects.\n\nrationale:\n\n1. psycopg3 will be using the same SQLAlchemy-side \"setinputsizes\"\n   as asyncpg, so we will be seeing a lot more of this\n\n2. the full rendering that SQLAlchemy's compilation is performing\n   is in the engine log as well as error messages.   Without this,\n   we introduce three levels of SQL rendering, the compiler, the\n   hidden \"setinputsizes\" in SQLAlchemy, and then whatever the DBAPI\n   driver does.  With this new approach, users reporting bugs etc.\n   will be less confused that there are as many as two separate\n   layers of \"hidden rendering\"; SQLAlchemy's rendering is again\n   fully transparent\n\n3. calling upon a setinputsizes() method for every statement execution\n   is expensive.  this way, the work is done behind the caching layer\n\n4. for \"fast insertmany()\", I also want there to be a fast approach\n   towards setinputsizes.  As it was, we were going to be taking\n   a SQL INSERT with thousands of bound parameter placeholders and\n   running a whole second pass on it to apply typecasts.    this way,\n   we will at least be able to build the SQL string once without a huge\n   second pass over the whole string\n\n5. psycopg2 can use this same system for its ARRAY casts\n\n6. the general need for PostgreSQL to have lots of type casts\n   is now mostly in the base PostgreSQL dialect and works independently\n   of a DBAPI being present.   dependence on DBAPI symbols that aren't\n   complete / consistent / hashable is removed\n\nI was originally going to try to build this into bind_expression(),\nbut it was revealed this worked poorly with custom bind_expression()\nas well as empty sets.   the current impl also doesn't need to\nrun a second expression pass over the POSTCOMPILE sections, which\ncame out better than I originally thought it would.\n\nChange-Id: I363e6d593d059add7bcc6d1f6c3f91dd2e683c0c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/939de240d31a5441ad7380738d410a976d4ecc3a",
        "buggy_code": "return sa.cast(col, String(50))",
        "fixed_code": "return sa.cast(sa.type_coerce(col, Integer), String(50))",
        "patch": "@@ -1582,7 +1582,7 @@ def column_expression(self, col):\n             return sa.cast(col, Integer)\n \n         def bind_expression(self, col):\n-            return sa.cast(col, String(50))\n+            return sa.cast(sa.type_coerce(col, Integer), String(50))\n \n     @classmethod\n     def define_tables(cls, metadata):"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"WHERE some_table.x = [POSTCOMPILE_q]\",",
        "fixed_code": "\"WHERE some_table.x = __[POSTCOMPILE_q]\",",
        "patch": "@@ -884,7 +884,7 @@ def test_compile(self):\n         self.assert_compile(\n             stmt,\n             \"SELECT some_table.id FROM some_table \"\n-            \"WHERE some_table.x = [POSTCOMPILE_q]\",\n+            \"WHERE some_table.x = __[POSTCOMPILE_q]\",\n             {},\n         )\n "
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "eq_(str(compiled), \"(q, p) IN ([POSTCOMPILE_param_1])\")",
        "fixed_code": "eq_(str(compiled), \"(q, p) IN (__[POSTCOMPILE_param_1])\")",
        "patch": "@@ -1156,7 +1156,7 @@ def test_in_tuple(self):\n             .in_([(1, 2), (3, 4)])\n             .compile(dialect=sqlite.dialect())\n         )\n-        eq_(str(compiled), \"(q, p) IN ([POSTCOMPILE_param_1])\")\n+        eq_(str(compiled), \"(q, p) IN (__[POSTCOMPILE_param_1])\")\n         eq_(\n             compiled._literal_execute_expanding_parameter(\n                 \"param_1\","
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\":data_1 AND test.type IN ([POSTCOMPILE_type_1])\",",
        "fixed_code": "\":data_1 AND test.type IN (__[POSTCOMPILE_type_1])\",",
        "patch": "@@ -1639,7 +1639,7 @@ class Derived(Base):\n         self.assert_compile(\n             s.query(Derived.data_syn).filter(Derived.data_syn == \"foo\"),\n             \"SELECT test.data AS test_data FROM test WHERE test.data = \"\n-            \":data_1 AND test.type IN ([POSTCOMPILE_type_1])\",\n+            \":data_1 AND test.type IN (__[POSTCOMPILE_type_1])\",\n             dialect=\"default\",\n             checkparams={\"type_1\": [\"derived\"], \"data_1\": \"foo\"},\n         )"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"IN ([POSTCOMPILE_primary_keys])\",",
        "fixed_code": "\"IN (__[POSTCOMPILE_primary_keys])\",",
        "patch": "@@ -315,7 +315,7 @@ def test_selectinload(self):\n                 \"SELECT a_1.id AS a_1_id, b.id AS b_id FROM a AS a_1 \"\n                 \"JOIN (b JOIN d ON d.b_id = b.id JOIN c ON c.id = d.c_id) \"\n                 \"ON a_1.b_id = b.id WHERE a_1.id \"\n-                \"IN ([POSTCOMPILE_primary_keys])\",\n+                \"IN (__[POSTCOMPILE_primary_keys])\",\n                 [{\"primary_keys\": [1]}],\n             ),\n         )"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"FROM users WHERE users.id IN ([POSTCOMPILE_id_1])\",",
        "fixed_code": "\"FROM users WHERE users.id IN (__[POSTCOMPILE_id_1])\",",
        "patch": "@@ -1167,7 +1167,7 @@ def _test_load_only_propagate(self, use_load):\n         expected = [\n             (\n                 \"SELECT users.id AS users_id, users.name AS users_name \"\n-                \"FROM users WHERE users.id IN ([POSTCOMPILE_id_1])\",\n+                \"FROM users WHERE users.id IN (__[POSTCOMPILE_id_1])\",\n                 {\"id_1\": [7, 8]},\n             ),\n             ("
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"WHERE a_1.id IN ([POSTCOMPILE_primary_keys])\",",
        "fixed_code": "\"WHERE a_1.id IN (__[POSTCOMPILE_primary_keys])\",",
        "patch": "@@ -6513,7 +6513,7 @@ def test_eager_selectin(self):\n                 \"(SELECT a.id AS aid, b.id AS id FROM a JOIN b ON a.b_ids \"\n                 \"LIKE :id_1 || b.id || :param_1) AS anon_1 \"\n                 \"ON a_1.id = anon_1.aid JOIN b ON b.id = anon_1.id \"\n-                \"WHERE a_1.id IN ([POSTCOMPILE_primary_keys])\",\n+                \"WHERE a_1.id IN (__[POSTCOMPILE_primary_keys])\",\n                 params=[{\"id_1\": \"%\", \"param_1\": \"%\", \"primary_keys\": [2]}],\n             ),\n         )"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"(x NOT IN ([POSTCOMPILE_x_1]))\",",
        "fixed_code": "\"(x NOT IN (__[POSTCOMPILE_x_1]))\",",
        "patch": "@@ -1658,7 +1658,7 @@ def test_issue_5429_compile(self):\n \n         self.assert_compile(\n             column(\"x\").notin_([\"foo\", \"bar\"]),\n-            \"(x NOT IN ([POSTCOMPILE_x_1]))\",\n+            \"(x NOT IN (__[POSTCOMPILE_x_1]))\",\n         )\n \n     def test_issue_5429_operators(self):"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"table1.col1 IN ([POSTCOMPILE_col1_1])\",",
        "fixed_code": "\"table1.col1 IN (__[POSTCOMPILE_col1_1])\",",
        "patch": "@@ -2948,7 +2948,7 @@ def test_annotate_expressions(self):\n             (table1.c.col1 == 5, \"table1.col1 = :col1_1\"),\n             (\n                 table1.c.col1.in_([2, 3, 4]),\n-                \"table1.col1 IN ([POSTCOMPILE_col1_1])\",\n+                \"table1.col1 IN (__[POSTCOMPILE_col1_1])\",\n             ),\n         ]:\n             eq_(str(expr), expected)"
    },
    {
        "commit_id": "b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "commit_message": "change the POSTCOMPILE/ SCHEMA symbols to not conflict w mssql quoting\n\nAdjusted the compiler's generation of \"post compile\" symbols including\nthose used for \"expanding IN\" as well as for the \"schema translate map\" to\nnot be based directly on plain bracketed strings with underscores, as this\nconflicts directly with SQL Server's quoting format of also using brackets,\nwhich produces false matches when the compiler replaces \"post compile\" and\n\"schema translate\" symbols. The issue created easy to reproduce examples\nboth with the :meth:`.Inspector.get_schema_names` method when used in\nconjunction with the\n:paramref:`_engine.Connection.execution_options.schema_translate_map`\nfeature, as well in the unlikely case that a symbol overlapping with the\ninternal name \"POSTCOMPILE\" would be used with a feature like \"expanding\nin\".\n\nFixes: #7300\nChange-Id: I6255c850b140522a4aba95085216d0bca18ce230",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b919a0a85afd5066f9188b20ef06ee1b4af884a9",
        "buggy_code": "\"([POSTCOMPILE_y_1~~lower(~~REPL~~)~~])\",",
        "fixed_code": "\"(__[POSTCOMPILE_y_1~~lower(~~REPL~~)~~])\",",
        "patch": "@@ -191,7 +191,7 @@ def test_in_binds(self):\n             ),\n             \"SELECT test_table.x, lower(test_table.y) AS y FROM \"\n             \"test_table WHERE test_table.y IN \"\n-            \"([POSTCOMPILE_y_1~~lower(~~REPL~~)~~])\",\n+            \"(__[POSTCOMPILE_y_1~~lower(~~REPL~~)~~])\",\n             render_postcompile=False,\n         )\n "
    },
    {
        "commit_id": "6d4009c0cb2e9ae224e3013e872f0e2ee95ae14e",
        "commit_message": "Merge \"Fixed issue in visit_on_duplicate_key_update within a composed expression\" into main",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d4009c0cb2e9ae224e3013e872f0e2ee95ae14e",
        "buggy_code": "\"VALUES(\" + self.preparer.quote(column.name) + \")\"",
        "fixed_code": "\"VALUES(\" + self.preparer.quote(obj.name) + \")\"",
        "patch": "@@ -1302,7 +1302,7 @@ def replace(obj):\n                         and obj.table is on_duplicate.inserted_alias\n                     ):\n                         obj = literal_column(\n-                            \"VALUES(\" + self.preparer.quote(column.name) + \")\"\n+                            \"VALUES(\" + self.preparer.quote(obj.name) + \")\"\n                         )\n                         return obj\n                     else:"
    },
    {
        "commit_id": "5740a843ed805d0b066b1e56e8bf3c584c32cf6b",
        "commit_message": "Fixed issue in visit_on_duplicate_key_update within a composed expression\n\nFixed issue in MySQL :meth:`_mysql.Insert.on_duplicate_key_update` which\nwould render the wrong column name when an expression were used in a VALUES\nexpression. Pull request courtesy Cristian Sabaila.\n\nFixes: #7281\nCloses: #7285\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7285\nPull-request-sha: 3e6ad6f2fecc6ae36a10a5a34b5d3d393483edbb\n\nChange-Id: I83377c20eae6358fead9e7e361127938e538a71c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5740a843ed805d0b066b1e56e8bf3c584c32cf6b",
        "buggy_code": "\"VALUES(\" + self.preparer.quote(column.name) + \")\"",
        "fixed_code": "\"VALUES(\" + self.preparer.quote(obj.name) + \")\"",
        "patch": "@@ -1302,7 +1302,7 @@ def replace(obj):\n                         and obj.table is on_duplicate.inserted_alias\n                     ):\n                         obj = literal_column(\n-                            \"VALUES(\" + self.preparer.quote(column.name) + \")\"\n+                            \"VALUES(\" + self.preparer.quote(obj.name) + \")\"\n                         )\n                         return obj\n                     else:"
    },
    {
        "commit_id": "639cf972f15c8fbf77980b04fff8e5dbc82af7b6",
        "commit_message": "support bind expressions w/ expanding IN; apply to psycopg2\n\nFixed issue where \"expanding IN\" would fail to function correctly with\ndatatypes that use the :meth:`_types.TypeEngine.bind_expression` method,\nwhere the method would need to be applied to each element of the\nIN expression rather than the overall IN expression itself.\n\nFixed issue where IN expressions against a series of array elements, as can\nbe done with PostgreSQL, would fail to function correctly due to multiple\nissues within the \"expanding IN\" feature of SQLAlchemy Core that was\nstandardized in version 1.4.  The psycopg2 dialect now makes use of the\n:meth:`_types.TypeEngine.bind_expression` method with :class:`_types.ARRAY`\nto portably apply the correct casts to elements.  The asyncpg dialect was\nnot affected by this issue as it applies bind-level casts at the driver\nlevel rather than at the compiler level.\n\nas part of this commit the \"bind translate\" feature has been\nsimplified and also applies to the names in the POSTCOMPILE tag to\naccommodate for brackets.\n\nFixes: #7177\nChange-Id: I08c703adb0a9bd6f5aeee5de3ff6f03cccdccdc5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/639cf972f15c8fbf77980b04fff8e5dbc82af7b6",
        "buggy_code": "currently cx_oracle.",
        "fixed_code": "currently cx_oracle, asyncpg and pg8000.",
        "patch": "@@ -1584,7 +1584,7 @@ def _set_input_sizes(self):\n         from the bind parameter's ``TypeEngine`` objects.\n \n         This method only called by those dialects which require it,\n-        currently cx_oracle.\n+        currently cx_oracle, asyncpg and pg8000.\n \n         \"\"\"\n         if self.isddl or self.is_text:"
    },
    {
        "commit_id": "b7226379ac06c9a1a78e783deaa60c701b1b7e88",
        "commit_message": "fixes for usage of the null() and similar constants\n\nAdjusted the \"column disambiguation\" logic that's new in 1.4, where the\nsame expression repeated gets an \"extra anonymous\" label, so that the logic\nmore aggressively deduplicates those labels when the repeated element\nis the same Python expression object each time, as occurs in cases like\nwhen using \"singleton\" values like :func:`_sql.null`.  This is based on\nthe observation that at least some databases (e.g. MySQL, but not SQLite)\nwill raise an error if the same label is repeated inside of a subquery.\n\nRelated to :ticket:`7153`, fixed an issue where result column lookups\nwould fail for \"adapted\" SELECT statements that selected for\n\"constant\" value expressions most typically the NULL expression,\nas would occur in such places as joined eager loading in conjunction\nwith limit/offset.  This was overall a regression due to issue\n:ticket:`6259` which removed all \"adaption\" for constants like NULL,\n\"true\", and \"false\", but this broke the case where the same adaption\nlogic were used to match the constant to a labeled expression referring\nto the constant in a subquery.\n\nFixes: #7153\nFixes: #7154\nChange-Id: I43823343721b9e70524ea3f5e8f39dd543a3e92b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b7226379ac06c9a1a78e783deaa60c701b1b7e88",
        "buggy_code": "\"NULL AS anon__1\",",
        "fixed_code": "\"NULL AS anon__2\",",
        "patch": "@@ -265,7 +265,7 @@ def test_custom_names(self, legacy, use_subquery, set_column_key):\n         (\n             lambda s, User: (User.id,) + tuple([null()] * 3),\n             \"users.id AS users_id, NULL AS anon_1, NULL AS anon__1, \"\n-            \"NULL AS anon__1\",\n+            \"NULL AS anon__2\",\n             (7, None, None, None),\n         ),\n     )"
    },
    {
        "commit_id": "f3b7d60092b75e8ada62088488a1b1c861f70a49",
        "commit_message": "Merge \"fix(6435): support `MemberExpr` for enum column declaration\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f3b7d60092b75e8ada62088488a1b1c861f70a49",
        "buggy_code": "if isinstance(first_arg, NameExpr) and isinstance(",
        "fixed_code": "if isinstance(first_arg, RefExpr) and isinstance(",
        "patch": "@@ -521,7 +521,7 @@ def extract_python_type_from_typeengine(\n ) -> ProperType:\n     if node.fullname == \"sqlalchemy.sql.sqltypes.Enum\" and type_args:\n         first_arg = type_args[0]\n-        if isinstance(first_arg, NameExpr) and isinstance(\n+        if isinstance(first_arg, RefExpr) and isinstance(\n             first_arg.node, TypeInfo\n         ):\n             for base_ in first_arg.node.mro:"
    },
    {
        "commit_id": "5177f380c8be607c85fa23657f2e1cec0eabb24b",
        "commit_message": "Bugfix: MySQL  expression:  may be bindparam or other expression\n\nFixed issue in MySQL :func:`_mysql.match` construct where passing a clause\nexpression such as :func:`_sql.bindparam` or other SQL expression for the\n\"against\" parameter would fail. Pull request courtesy Anton Kovalevich.\n\nFixes: #7144\nCloses: #7145\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7145\nPull-request-sha: 3757ffa51a3ff5919278165aaf906c8d2f9940c0\n\nChange-Id: I7bb95f338afe3a17296a7b60e8c973f93b4f5e62",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5177f380c8be607c85fa23657f2e1cec0eabb24b",
        "buggy_code": "if not against:",
        "fixed_code": "if against is None:",
        "patch": "@@ -68,7 +68,7 @@ def __init__(self, *cols, **kw):\n \n         against = kw.pop(\"against\", None)\n \n-        if not against:\n+        if against is None:\n             raise exc.ArgumentError(\"against is required\")\n         against = coercions.expect(\n             roles.ExpressionElementRole,"
    },
    {
        "commit_id": "90d2f087c8c75289d8a8c819a9aebfcda5b98b96",
        "commit_message": "fix(6435): support `MemberExpr` for enum column declaration\n\nFixed issue in mypy plugin to improve upon some issues detecting ``Enum()``\nSQL types containing custom Python enumeration classes. Pull request\ncourtesy Hiroshi Ogawa.\n\nFixes: #6435\nCloses: #7048\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7048\nPull-request-sha: 59f5c89688792f6af3b07488d5cf97f8f2e964dc\n\nChange-Id: I05adbec74ceac1ecfdc5a242bfe7aa4b2eb805e4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/90d2f087c8c75289d8a8c819a9aebfcda5b98b96",
        "buggy_code": "if isinstance(first_arg, NameExpr) and isinstance(",
        "fixed_code": "if isinstance(first_arg, RefExpr) and isinstance(",
        "patch": "@@ -521,7 +521,7 @@ def extract_python_type_from_typeengine(\n ) -> ProperType:\n     if node.fullname == \"sqlalchemy.sql.sqltypes.Enum\" and type_args:\n         first_arg = type_args[0]\n-        if isinstance(first_arg, NameExpr) and isinstance(\n+        if isinstance(first_arg, RefExpr) and isinstance(\n             first_arg.node, TypeInfo\n         ):\n             for base_ in first_arg.node.mro:"
    },
    {
        "commit_id": "6ce0d644db60ce6ea89eb15a76e078c4fa1a9066",
        "commit_message": "warn or deprecate for auto-aliasing in joins\n\nAn extra layer of warning messages has been added to the functionality\nof :meth:`_orm.Query.join` and the ORM version of\n:meth:`_sql.Select.join`, where a few places where \"automatic aliasing\"\ncontinues to occur will now be called out as a pattern to avoid, mostly\nspecific to the area of joined table inheritance where classes that share\ncommon base tables are being joined together without using explicit aliases.\nOne case emits a legacy warning for a pattern that's not recommended,\nthe other case is fully deprecated.\n\nThe automatic aliasing within ORM join() which occurs for overlapping\nmapped tables does not work consistently with all APIs such as\n``contains_eager()``, and rather than continue to try to make these use\ncases work everywhere, replacing with a more user-explicit pattern\nis clearer, less prone to bugs and simplifies SQLAlchemy's internals\nfurther.\n\nThe warnings include links to the errors.rst page where each pattern is\ndemonstrated along with the recommended pattern to fix.\n\n* Improved the exception message generated when configuring a mapping with\n  joined table inheritance where the two tables either have no foreign key\n  relationships set up, or where they have multiple foreign key relationships\n  set up. The message is now ORM specific and includes context that the\n  :paramref:`_orm.Mapper.inherit_condition` parameter may be needed\n  particularly for the ambiguous foreign keys case.\n\n* Add explicit support in the _expect_warnings() assertion for nested\n  _expect_warnings calls\n\n* generalize the NoCache fixture, which we also need to catch warnings\n  during compilation consistently\n\n* generalize the __str__() method for the HasCode mixin so all warnings\n  and errors include the code link in their string\n\nFixes: #6974\nChange-Id: I84ed79ba2112c39eaab7973b6d6f46de7fa80842",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6ce0d644db60ce6ea89eb15a76e078c4fa1a9066",
        "buggy_code": "s = table2.select().subquery()",
        "fixed_code": "s = aliased(Bar, table2.select().subquery())",
        "patch": "@@ -1141,7 +1141,7 @@ class Bar(object):\n \n         @profile_memory()\n         def go():\n-            s = table2.select().subquery()\n+            s = aliased(Bar, table2.select().subquery())\n             sess = session()\n             sess.query(Foo).join(s, Foo.bars).all()\n             sess.rollback()"
    },
    {
        "commit_id": "fab1d515040bbe5bbc6b2a4009dcf80ae3a65976",
        "commit_message": "Fix typo introduced in #3086/I44c1a021a3e7ab7d66fea2d79a36cb2195a1969d\n\nThank you @lelit\n\nChange-Id: I98e8e0fca25d6de6c7fa6c8c0ee429e80b14c102",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fab1d515040bbe5bbc6b2a4009dcf80ae3a65976",
        "buggy_code": "This parameter can also accept complex compbinations of contextually",
        "fixed_code": "This parameter can also accept complex combinations of contextually",
        "patch": "@@ -1423,7 +1423,7 @@ def __init__(self, *args, **kwargs):\n             Strings and text() will be converted into a\n             :class:`.DefaultClause` object upon initialization.\n \n-            This parameter can also accept complex compbinations of contextually\n+            This parameter can also accept complex combinations of contextually\n             valid SQLAlchemy expressions or constructs::\n \n                 from sqlalchemy import create_engine"
    },
    {
        "commit_id": "b0260bd6706659ee01c33c41f4f7f4c9a8020512",
        "commit_message": "Relax the Python version check for `__class_getitem__` tests\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n`__class_getitem__` to support generics was introduced in Python 3.7.\nIn 3.9 some built-ins were made generic but the functionality\nfor user-defined classes has been there since 3.7.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7049\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7049\nPull-request-sha: 7bd16d416db010e7140313fe326861cc263b8864\n\nChange-Id: I4f45b9585d263636e613cc5c86e710fa31c7d283",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b0260bd6706659ee01c33c41f4f7f4c9a8020512",
        "buggy_code": "@requires.builtin_generics",
        "fixed_code": "@requires.generic_classes",
        "patch": "@@ -4,7 +4,7 @@\n \n \n class TestGenerics(fixtures.TestBase):\n-    @requires.builtin_generics\n+    @requires.generic_classes\n     def test_traversible_is_generic(self):\n         col = Column[int]\n         assert col is Column"
    },
    {
        "commit_id": "72a27c5d7c1a945deaded782e89754fce717951d",
        "commit_message": "test update_nowait - added support in MariaDB-10.3\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\nMariaDB supported NOWAIT in 10.3.\n\nref: https://mariadb.com/kb/en/wait-and-nowait/\n\nThis pull request is:\n\n- [X] very trivial test change\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #7009\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/7009\nPull-request-sha: 4fa750e3d34638be7e9583d849216f6d90ca88fc\n\nChange-Id: I4ee8cf2cf84daf7af3300e6f80671375232fcf02",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/72a27c5d7c1a945deaded782e89754fce717951d",
        "buggy_code": "[\"firebird\", \"mssql\", \"mysql\", \"mariadb\", \"sqlite\", \"sybase\"],",
        "fixed_code": "[\"firebird\", \"mssql\", \"mysql\", \"mariadb<10.3\", \"sqlite\", \"sybase\"],",
        "patch": "@@ -623,7 +623,7 @@ def table_value_constructor(self):\n     def update_nowait(self):\n         \"\"\"Target database must support SELECT...FOR UPDATE NOWAIT\"\"\"\n         return skip_if(\n-            [\"firebird\", \"mssql\", \"mysql\", \"mariadb\", \"sqlite\", \"sybase\"],\n+            [\"firebird\", \"mssql\", \"mysql\", \"mariadb<10.3\", \"sqlite\", \"sybase\"],\n             \"no FOR UPDATE NOWAIT support\",\n         )\n "
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "),  # doesnt load; used only for the save relationship",
        "fixed_code": "),  # doesn't load; used only for the save relationship",
        "patch": "@@ -132,7 +132,7 @@ def __init__(self, name, value):\n     properties={\n         \"children\": relationship(\n             _Node, lazy=None\n-        ),  # doesnt load; used only for the save relationship\n+        ),  # doesn't load; used only for the save relationship\n         \"attributes\": relationship(\n             _Attribute, lazy=\"joined\", cascade=\"all, delete-orphan\"\n         ),  # eagerly load attributes"
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "as the ability to see which row is the most \"current\" vesion.",
        "fixed_code": "as the ability to see which row is the most \"current\" version.",
        "patch": "@@ -3,7 +3,7 @@\n row is inserted with the new data, keeping the old row intact.\n \n This example adds a numerical version_id to the Versioned class as well\n-as the ability to see which row is the most \"current\" vesion.\n+as the ability to see which row is the most \"current\" version.\n \n \"\"\"\n from sqlalchemy import Boolean"
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "identifier delimeters splitting the schema into separate database",
        "fixed_code": "identifier delimiters splitting the schema into separate database",
        "patch": "@@ -514,7 +514,7 @@\n \n \n .. versionchanged:: 1.2 the SQL Server dialect now treats brackets as\n-   identifier delimeters splitting the schema into separate database\n+   identifier delimiters splitting the schema into separate database\n    and owner tokens, to allow dots within either name itself.\n \n .. _legacy_schema_rendering:"
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "\"UTF-8\" in cx_Oracle 8.0 so these parameters can be ommitted when using that",
        "fixed_code": "\"UTF-8\" in cx_Oracle 8.0 so these parameters can be omitted when using that",
        "patch": "@@ -108,7 +108,7 @@\n     )\n \n Note that the default value for ``encoding`` and ``nencoding`` was changed to\n-\"UTF-8\" in cx_Oracle 8.0 so these parameters can be ommitted when using that\n+\"UTF-8\" in cx_Oracle 8.0 so these parameters can be omitted when using that\n version, or later.\n \n Options consumed by the SQLAlchemy cx_Oracle dialect outside of the driver"
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "looks for these :class:`_orm.declared_attr` callables as it scans classe,",
        "fixed_code": "looks for these :class:`_orm.declared_attr` callables as it scans classes,",
        "patch": "@@ -126,7 +126,7 @@ class declared_attr(interfaces._MappedAttribute, property):\n     :class:`_orm.declared_attr` is typically applied as a decorator to a class\n     level method, turning the attribute into a scalar-like property that can be\n     invoked from the uninstantiated class. The Declarative mapping process\n-    looks for these :class:`_orm.declared_attr` callables as it scans classe,\n+    looks for these :class:`_orm.declared_attr` callables as it scans classes,\n     and assumes any attribute marked with :class:`_orm.declared_attr` will be a\n     callable that will produce an object specific to the Declarative mapping or\n     table configuration."
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "\"\"\"tell the result object that the SQL staement is textual, wants to match",
        "fixed_code": "\"\"\"tell the result object that the SQL statement is textual, wants to match",
        "patch": "@@ -610,7 +610,7 @@ class SQLCompiler(Compiled):\n     \"\"\"\n \n     _loose_column_name_matching = False\n-    \"\"\"tell the result object that the SQL staement is textual, wants to match\n+    \"\"\"tell the result object that the SQL statement is textual, wants to match\n     up to Column objects, and may be using the ._tq_label in the SELECT rather\n     than the base name.\n "
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "\"does not refer to a cachable SQL element, and also does not \"",
        "fixed_code": "\"does not refer to a cacheable SQL element, and also does not \"",
        "patch": "@@ -905,7 +905,7 @@ def _raise_for_uncacheable_closure_variable(\n         util.raise_(\n             exc.InvalidRequestError(\n                 \"Closure variable named '%s' inside of lambda callable %s \"\n-                \"does not refer to a cachable SQL element, and also does not \"\n+                \"does not refer to a cacheable SQL element, and also does not \"\n                 \"appear to be serving as a SQL literal bound value based on \"\n                 \"the default \"\n                 \"SQL expression returned by the function.   This variable \""
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": ":attr:`_sql.FromClause.columns` atttribute.",
        "fixed_code": ":attr:`_sql.FromClause.columns` attribute.",
        "patch": "@@ -809,7 +809,7 @@ def _reset_column_collection(self):\n         objects maintained by this :class:`_expression.FromClause`.\n \n         The :attr:`_sql.FromClause.c` attribute is an alias for the\n-        :attr:`_sql.FromClause.columns` atttribute.\n+        :attr:`_sql.FromClause.columns` attribute.\n \n         :return: a :class:`.ColumnCollection`\n "
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "\"CONSTRANT <name> FOREIGN KEY\" DDL.",
        "fixed_code": "\"CONSTRAINT <name> FOREIGN KEY\" DDL.",
        "patch": "@@ -500,7 +500,7 @@ def cross_schema_fk_reflection(self):\n     def foreign_key_constraint_name_reflection(self):\n         \"\"\"Target supports refleciton of FOREIGN KEY constraints and\n         will return the name of the constraint that was used in the\n-        \"CONSTRANT <name> FOREIGN KEY\" DDL.\n+        \"CONSTRAINT <name> FOREIGN KEY\" DDL.\n \n         MySQL prior to version 8 and MariaDB prior to version 10.5\n         don't support this."
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "\"\"\"Reflect the filter defintion on partial indexes\"\"\"",
        "fixed_code": "\"\"\"Reflect the filter definition on partial indexes\"\"\"",
        "patch": "@@ -997,7 +997,7 @@ def go():\n         )\n \n     def test_index_reflection_partial(self, metadata, connection):\n-        \"\"\"Reflect the filter defintion on partial indexes\"\"\"\n+        \"\"\"Reflect the filter definition on partial indexes\"\"\"\n \n         metadata = metadata\n "
    },
    {
        "commit_id": "3ea321ce22438c5b7450e027d087437474eb4498",
        "commit_message": "Fix various lib / test / examples typos (#7017)\n\n* fix: lib/sqlalchemy/sql/lambdas.py\r\n\r\n* fix: lib/sqlalchemy/sql/compiler.py\r\n\r\n* fix: lib/sqlalchemy/sql/selectable.py\r\n\r\n* fix: lib/sqlalchemy/orm/relationships.py\r\n\r\n* fix: lib/sqlalchemy/dialects/mssql/base.py\r\n\r\n* fix: lib/sql/test_compiler.py\r\n\r\n* fix: lib/sqlalchemy/testing/requirements.py\r\n\r\n* fix: lib/sqlalchemy/orm/path_registry.py\r\n\r\n* fix: lib/sqlalchemy/dialects/postgresql/psycopg2.py\r\n\r\n* fix: lib/sqlalchemy/cextension/immutabledict.c\r\n\r\n* fix: lib/sqlalchemy/cextension/resultproxy.c\r\n\r\n* fix: ./lib/sqlalchemy/dialects/oracle/cx_oracle.py\r\n\r\n* fix: examples/versioned_rows/versioned_rows_w_versionid.py\r\n\r\n* fix: examples/elementtree/optimized_al.py\r\n\r\n* fix: test/orm/test_attribute.py\r\n\r\n* fix: test/sql/test_compare.py\r\n\r\n* fix: test/sql/test_type_expression.py\r\n\r\n* fix: capitalization in test/dialect/mysql/test_compiler.py\r\n\r\n* fix: typos in test/dialect/postgresql/test_reflection.py\r\n\r\n* fix: typo in tox.ini comment\r\n\r\n* fix: typo in /lib/sqlalchemy/orm/decl_api.py\r\n\r\n* fix: typo in test/orm/test_update_delete.py\r\n\r\n* fix: self-induced typo\r\n\r\n* fix: typo in test/orm/test_query.py\r\n\r\n* fix: typos in test/dialect/mssql/test_types.py\r\n\r\n* fix: typo in test/sql/test_types.py",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea321ce22438c5b7450e027d087437474eb4498",
        "buggy_code": "within a particular class, not just the indvidual IA object",
        "fixed_code": "within a particular class, not just the individual IA object",
        "patch": "@@ -1285,7 +1285,7 @@ class Jack(object):\n     def test_symmetric_o2o_inheritance(self):\n         \"\"\"Test that backref 'initiator' catching goes against\n         a token that is global to all InstrumentedAttribute objects\n-        within a particular class, not just the indvidual IA object\n+        within a particular class, not just the individual IA object\n         since we use distinct objects in an inheritance scenario.\n \n         \"\"\""
    },
    {
        "commit_id": "6dbcb792eb60d4e084f0d1252882a0cbad4bc673",
        "commit_message": "Fix typo (#6994)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6dbcb792eb60d4e084f0d1252882a0cbad4bc673",
        "buggy_code": "extensions for optimizing \"executemany\"-stye queries.  See the referenced",
        "fixed_code": "extensions for optimizing \"executemany\"-style queries.  See the referenced",
        "patch": "@@ -50,7 +50,7 @@\n \n * ``executemany_mode``, ``executemany_batch_page_size``,\n   ``executemany_values_page_size``: Allows use of psycopg2\n-  extensions for optimizing \"executemany\"-stye queries.  See the referenced\n+  extensions for optimizing \"executemany\"-style queries.  See the referenced\n   section below for details.\n \n   .. seealso::"
    },
    {
        "commit_id": "f02349336fa4470dbb5ca8e4d16031b8aa86a74a",
        "commit_message": "Handle mappings passed to ``execution_options``.\n\nFixed a bug in :meth:`_asyncio.AsyncSession.execute` and\n:meth:`_asyncio.AsyncSession.stream` that required ``execution_options``\nto be an instance of ``immutabledict`` when defined. It now\ncorrectly accepts any mapping.\n\nFixes: #6943\nChange-Id: Ic09de480dc2da1b0bdce25acb60b8f01371971f9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f02349336fa4470dbb5ca8e4d16031b8aa86a74a",
        "buggy_code": "dict(_sa_orm_update_options=update_options)",
        "fixed_code": "{\"_sa_orm_update_options\": update_options}",
        "patch": "@@ -1833,7 +1833,7 @@ def orm_pre_session_exec(\n         return (\n             statement,\n             util.immutabledict(execution_options).union(\n-                dict(_sa_orm_update_options=update_options)\n+                {\"_sa_orm_update_options\": update_options}\n             ),\n         )\n "
    },
    {
        "commit_id": "f02349336fa4470dbb5ca8e4d16031b8aa86a74a",
        "commit_message": "Handle mappings passed to ``execution_options``.\n\nFixed a bug in :meth:`_asyncio.AsyncSession.execute` and\n:meth:`_asyncio.AsyncSession.stream` that required ``execution_options``\nto be an instance of ``immutabledict`` when defined. It now\ncorrectly accepts any mapping.\n\nFixes: #6943\nChange-Id: Ic09de480dc2da1b0bdce25acb60b8f01371971f9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f02349336fa4470dbb5ca8e4d16031b8aa86a74a",
        "buggy_code": "by :meth:`_future.Connection.execution_options`, and may also",
        "fixed_code": "by :meth:`_engine.Connection.execution_options`, and may also",
        "patch": "@@ -1581,7 +1581,7 @@ def execute(\n         :param execution_options: optional dictionary of execution options,\n          which will be associated with the statement execution.  This\n          dictionary can provide a subset of the options that are accepted\n-         by :meth:`_future.Connection.execution_options`, and may also\n+         by :meth:`_engine.Connection.execution_options`, and may also\n          provide additional options understood only in an ORM context.\n \n         :param bind_arguments: dictionary of additional arguments to determine"
    },
    {
        "commit_id": "02914d5758d433f08d91753e2f959a2e135fddee",
        "commit_message": "fix spelling (#6926)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/02914d5758d433f08d91753e2f959a2e135fddee",
        "buggy_code": "\"default\": \"READ_COMMITED\",",
        "fixed_code": "\"default\": \"READ_COMMITTED\",",
        "patch": "@@ -857,7 +857,7 @@ def get_isolation_levels(self, config):\n \n             >>> testing.requirements.get_isolation_levels()\n             {\n-                \"default\": \"READ_COMMITED\",\n+                \"default\": \"READ_COMMITTED\",\n                 \"supported\": [\n                     \"SERIALIZABLE\", \"READ UNCOMMITTED\",\n                     \"READ COMMITTED\", \"REPEATABLE READ\","
    },
    {
        "commit_id": "02914d5758d433f08d91753e2f959a2e135fddee",
        "commit_message": "fix spelling (#6926)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/02914d5758d433f08d91753e2f959a2e135fddee",
        "buggy_code": "def test_set_commited_value_none_uselist(self):",
        "fixed_code": "def test_set_committed_value_none_uselist(self):",
        "patch": "@@ -1110,7 +1110,7 @@ class Bar(object):\n         attributes.del_attribute(f1, \"coll\")\n         assert \"coll\" not in f1.__dict__\n \n-    def test_set_commited_value_none_uselist(self):\n+    def test_set_committed_value_none_uselist(self):\n         \"\"\"test that set_committed_value->None to a uselist generates an\n         empty list\"\"\"\n "
    },
    {
        "commit_id": "255a884438ff3d6fe173339ff134c5ee6b8c8f5b",
        "commit_message": "fix black check for correct files and update test_types\n\nChange-Id: I5e21821ad203a91f9942fd8d29f516ed21824e50",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/255a884438ff3d6fe173339ff134c5ee6b8c8f5b",
        "buggy_code": "@testing.skip_if('mysql < 8')",
        "fixed_code": "@testing.skip_if(\"mysql < 8\")",
        "patch": "@@ -2560,7 +2560,7 @@ def test_omit_warn(self):\n         (True, \"omit_alias\"), (False, \"with_alias\"), id_=\"ai\", argnames=\"omit\"\n     )\n     @testing.provide_metadata\n-    @testing.skip_if('mysql < 8')\n+    @testing.skip_if(\"mysql < 8\")\n     def test_duplicate_values_accepted(self, native, omit):\n         foo_enum = pep435_enum(\"foo_enum\")\n         foo_enum(\"one\", 1, \"two\")"
    },
    {
        "commit_id": "b987465332ab9fdbab9ad85435919a2967004b12",
        "commit_message": "fix linter JOIN logic; fix PostgreSQL ARRAY op comparison\n\nAdjusted the \"from linter\" warning feature to accommodate for a chain of\njoins more than one level deep where the ON clauses don't explicitly match\nup the targets, such as an expression such as \"ON TRUE\". This mode of use\nis intended to cancel the cartesian product warning simply by the fact that\nthere's a JOIN from \"a to b\", which was not working for the case where the\nchain of joins had more than one element.\n\nthis incurs a bit more compiler overhead that comes out in profiling\nbut is not extensive.\n\nAdded the \"is_comparison\" flag to the PostgreSQL \"overlaps\",\n\"contained_by\", \"contains\" operators, so that they work in relevant ORM\ncontexts as well as in conjunction with the \"from linter\" feature.\n\nFixes: #6886\nChange-Id: I078dc3fe6d4f7871ffe4ebac3e71e62f3f213d12",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b987465332ab9fdbab9ad85435919a2967004b12",
        "buggy_code": "@testing.skip_if('mysql < 8')",
        "fixed_code": "@testing.skip_if(\"mysql < 8\")",
        "patch": "@@ -2560,7 +2560,7 @@ def test_omit_warn(self):\n         (True, \"omit_alias\"), (False, \"with_alias\"), id_=\"ai\", argnames=\"omit\"\n     )\n     @testing.provide_metadata\n-    @testing.skip_if('mysql < 8')\n+    @testing.skip_if(\"mysql < 8\")\n     def test_duplicate_values_accepted(self, native, omit):\n         foo_enum = pep435_enum(\"foo_enum\")\n         foo_enum(\"one\", 1, \"two\")"
    },
    {
        "commit_id": "9de57843a3a98555df21b5c5585f8af699d8ec2e",
        "commit_message": "dont qualify literal_binds with literal_execute\n\nthis appears to be unnecessary and prevents end-user\nliteral_binds case from working.\n\nFixed issue where the ``literal_binds`` compiler flag, as used externally\nto render bound parameters inline, would fail to work when used with a\ncertain class of parameters known as \"literal_execute\", which covers things\nlike LIMIT and OFFSET values for dialects where the drivers don't allow a\nbound parameter, such as SQL Server's \"TOP\" clause.  The issue locally\nseemed to affect only the MSSQL dialect.\n\nFixes: #6863\nChange-Id: Ia74cff5b0107b129a11b9b965883552b2962e449",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9de57843a3a98555df21b5c5585f8af699d8ec2e",
        "buggy_code": "if not literal_execute and (literal_binds):",
        "fixed_code": "if literal_binds:",
        "patch": "@@ -2297,7 +2297,7 @@ def visit_bindparam(\n         else:\n             post_compile = False\n \n-        if not literal_execute and (literal_binds):\n+        if literal_binds:\n             ret = self.render_literal_bindparam(\n                 bindparam, within_columns_clause=True, **kwargs\n             )"
    },
    {
        "commit_id": "c6b1d24fe71c22e4d2117d084f06df3597671985",
        "commit_message": "Modernize tests - dml_whereclause\n\nFixed issue where the unit of work would internally use a 2.0-deprecated\nSQL expression form, emitting a deprecation warning when SQLALCHEMY_WARN_20\nwere enabled.\n\nFixes: #6812\nChange-Id: I0a031e728527a1c3382848b6ddc793939362b128",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c6b1d24fe71c22e4d2117d084f06df3597671985",
        "buggy_code": "statement = self.secondary.update(",
        "fixed_code": "statement = self.secondary.update().where(",
        "patch": "@@ -1216,7 +1216,7 @@ def _run_crud(\n \n         if secondary_update:\n             associationrow = secondary_update[0]\n-            statement = self.secondary.update(\n+            statement = self.secondary.update().where(\n                 sql.and_(\n                     *[\n                         c == sql.bindparam(\"old_\" + c.key, type_=c.type)"
    },
    {
        "commit_id": "c6b1d24fe71c22e4d2117d084f06df3597671985",
        "commit_message": "Modernize tests - dml_whereclause\n\nFixed issue where the unit of work would internally use a 2.0-deprecated\nSQL expression form, emitting a deprecation warning when SQLALCHEMY_WARN_20\nwere enabled.\n\nFixes: #6812\nChange-Id: I0a031e728527a1c3382848b6ddc793939362b128",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c6b1d24fe71c22e4d2117d084f06df3597671985",
        "buggy_code": "connection.execute(tbl.delete(tbl.c.id == 1))",
        "fixed_code": "connection.execute(tbl.delete().where(tbl.c.id == 1))",
        "patch": "@@ -380,7 +380,7 @@ def test_delete_schema(self, connection):\n         tbl.create(connection)\n         connection.execute(tbl.insert(), {\"id\": 1})\n         eq_(connection.scalar(tbl.select()), 1)\n-        connection.execute(tbl.delete(tbl.c.id == 1))\n+        connection.execute(tbl.delete().where(tbl.c.id == 1))\n         eq_(connection.scalar(tbl.select()), None)\n \n     @testing.provide_metadata"
    },
    {
        "commit_id": "c6b1d24fe71c22e4d2117d084f06df3597671985",
        "commit_message": "Modernize tests - dml_whereclause\n\nFixed issue where the unit of work would internally use a 2.0-deprecated\nSQL expression form, emitting a deprecation warning when SQLALCHEMY_WARN_20\nwere enabled.\n\nFixes: #6812\nChange-Id: I0a031e728527a1c3382848b6ddc793939362b128",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c6b1d24fe71c22e4d2117d084f06df3597671985",
        "buggy_code": "stmt = delete(cte, text(\"RN > 1\"))",
        "fixed_code": "stmt = delete(cte).where(text(\"RN > 1\"))",
        "patch": "@@ -1504,7 +1504,7 @@ def test_delete_against_user_textual_cte(self):\n             )\n         )\n         cte = q.cte(\"deldup\")\n-        stmt = delete(cte, text(\"RN > 1\"))\n+        stmt = delete(cte).where(text(\"RN > 1\"))\n         eq_(stmt.compile().execution_options[\"autocommit\"], True)\n \n         self.assert_compile("
    },
    {
        "commit_id": "27ec4929198807702190b96d3c00d0291976f49e",
        "commit_message": "dont warn for dictionary passed positionally\n\nFixed issue where use of the :paramref:`_sql.case.whens` parameter passing\na dictionary positionally and not as a keyword argument would emit a 2.0\ndeprecation warning, referring to the deprecation of passing a list\npositionally. The dictionary format of \"whens\", passed positionally, is\nstill supported and was accidentally marked as deprecated.\n\nRemoves warning filter for case statement.\n\nFixes: #6786\nChange-Id: I8efd1882563773bec89ae5e34f0dfede77fc4683",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/27ec4929198807702190b96d3c00d0291976f49e",
        "buggy_code": "session.query(case([(User.name == \"x\", \"C\")], else_=\"W\")).all()",
        "fixed_code": "session.query(case((User.name == \"x\", \"C\"), else_=\"W\")).all()",
        "patch": "@@ -7290,7 +7290,7 @@ def test_case(self):\n         User = self.classes.User\n         session = fixture_session()\n         with self._assert_bind_args(session, expect_mapped_bind=True):\n-            session.query(case([(User.name == \"x\", \"C\")], else_=\"W\")).all()\n+            session.query(case((User.name == \"x\", \"C\"), else_=\"W\")).all()\n \n     def test_cast(self):\n         User = self.classes.User"
    },
    {
        "commit_id": "27ec4929198807702190b96d3c00d0291976f49e",
        "commit_message": "dont warn for dictionary passed positionally\n\nFixed issue where use of the :paramref:`_sql.case.whens` parameter passing\na dictionary positionally and not as a keyword argument would emit a 2.0\ndeprecation warning, referring to the deprecation of passing a list\npositionally. The dictionary format of \"whens\", passed positionally, is\nstill supported and was accidentally marked as deprecated.\n\nRemoves warning filter for case statement.\n\nFixes: #6786\nChange-Id: I8efd1882563773bec89ae5e34f0dfede77fc4683",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/27ec4929198807702190b96d3c00d0291976f49e",
        "buggy_code": "case_stmt = case([(Document.title.in_(subq), True)], else_=False)",
        "fixed_code": "case_stmt = case((Document.title.in_(subq), True), else_=False)",
        "patch": "@@ -1721,7 +1721,7 @@ def test_update_using_case(self):\n \n         # this would work with Firebird if you do literal_column('1')\n         # instead\n-        case_stmt = case([(Document.title.in_(subq), True)], else_=False)\n+        case_stmt = case((Document.title.in_(subq), True), else_=False)\n \n         s.query(Document).update(\n             {\"flag\": case_stmt}, synchronize_session=False"
    },
    {
        "commit_id": "27ec4929198807702190b96d3c00d0291976f49e",
        "commit_message": "dont warn for dictionary passed positionally\n\nFixed issue where use of the :paramref:`_sql.case.whens` parameter passing\na dictionary positionally and not as a keyword argument would emit a 2.0\ndeprecation warning, referring to the deprecation of passing a list\npositionally. The dictionary format of \"whens\", passed positionally, is\nstill supported and was accidentally marked as deprecated.\n\nRemoves warning filter for case statement.\n\nFixes: #6786\nChange-Id: I8efd1882563773bec89ae5e34f0dfede77fc4683",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/27ec4929198807702190b96d3c00d0291976f49e",
        "buggy_code": "elements.Case([]),",
        "fixed_code": "elements.Case(),",
        "patch": "@@ -3137,7 +3137,7 @@ def test_ensure_repr_elements(self):\n             elements.BooleanClauseList._construct_raw(operators.and_),\n             elements.BooleanClauseList._construct_raw(operators.or_),\n             elements.Tuple(),\n-            elements.Case([]),\n+            elements.Case(),\n             elements.Extract(\"foo\", column(\"x\")),\n             elements.UnaryExpression(column(\"x\")),\n             elements.Grouping(column(\"x\")),"
    },
    {
        "commit_id": "b02087666e4ff9199ea221fbee37be8438ecd7f0",
        "commit_message": "Merge \"Fix missing None handling of Table.prefixes\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b02087666e4ff9199ea221fbee37be8438ecd7f0",
        "buggy_code": "self._prefixes = kwargs.pop(\"prefixes\", [])",
        "fixed_code": "self._prefixes = kwargs.pop(\"prefixes\", None) or []",
        "patch": "@@ -660,7 +660,7 @@ def _init(self, name, metadata, *args, **kwargs):\n             for evt, fn in listeners:\n                 event.listen(self, evt, fn)\n \n-        self._prefixes = kwargs.pop(\"prefixes\", [])\n+        self._prefixes = kwargs.pop(\"prefixes\", None) or []\n \n         self._extra_kwargs(**kwargs)\n "
    },
    {
        "commit_id": "7e5e40ff849c92e4c062bad28848b5bdbb8bdd80",
        "commit_message": "Fix missing None handling of Table.prefixes\n\nFixed issue where passing ``None`` for the value of\n:paramref:`_schema.Table.prefixes` would not store an empty list, but\nrather the constant ``None``, which may be unexpected by third party\ndialects. The issue is revealed by a usage in recent versions of Alembic\nthat are passing ``None`` for this value. Pull request courtesy Kai\nMueller.\n\nFixes: #6685\nCloses: #6672\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/6672\nPull-request-sha: b79aca0ee4011b244978b35fed4c687ffbe56dc9\n\nChange-Id: I758641c6fbde6f2607d074fecea7efa6728aeea0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e5e40ff849c92e4c062bad28848b5bdbb8bdd80",
        "buggy_code": "self._prefixes = kwargs.pop(\"prefixes\", [])",
        "fixed_code": "self._prefixes = kwargs.pop(\"prefixes\", None) or []",
        "patch": "@@ -660,7 +660,7 @@ def _init(self, name, metadata, *args, **kwargs):\n             for evt, fn in listeners:\n                 event.listen(self, evt, fn)\n \n-        self._prefixes = kwargs.pop(\"prefixes\", [])\n+        self._prefixes = kwargs.pop(\"prefixes\", None) or []\n \n         self._extra_kwargs(**kwargs)\n "
    },
    {
        "commit_id": "fb141d9d5e3116dc233138fa0cf78ffdd05be87a",
        "commit_message": "Merge \"Fix typo in _warn_for_legacy_exec_format\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fb141d9d5e3116dc233138fa0cf78ffdd05be87a",
        "buggy_code": "\"oriened dictionaries and/or tuples \"",
        "fixed_code": "\"oriented dictionaries and/or tuples \"",
        "patch": "@@ -1094,7 +1094,7 @@ def _warn_for_legacy_exec_format(self):\n             \"dictionary or a \"\n             \"single sequence of dictionaries only. \"\n             \"Parameters passed as keyword arguments, tuples or positionally \"\n-            \"oriened dictionaries and/or tuples \"\n+            \"oriented dictionaries and/or tuples \"\n             \"will no longer be accepted.\"\n         )\n "
    },
    {
        "commit_id": "34163dfd1cf3259356e8cff37302ca9c7866525b",
        "commit_message": "Fix typo in _warn_for_legacy_exec_format\n\nChange-Id: Idc24b5ab4b5a25fcfb7115c5d7be4c2ece520674",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/34163dfd1cf3259356e8cff37302ca9c7866525b",
        "buggy_code": "\"oriened dictionaries and/or tuples \"",
        "fixed_code": "\"oriented dictionaries and/or tuples \"",
        "patch": "@@ -1094,7 +1094,7 @@ def _warn_for_legacy_exec_format(self):\n             \"dictionary or a \"\n             \"single sequence of dictionaries only. \"\n             \"Parameters passed as keyword arguments, tuples or positionally \"\n-            \"oriened dictionaries and/or tuples \"\n+            \"oriented dictionaries and/or tuples \"\n             \"will no longer be accepted.\"\n         )\n "
    },
    {
        "commit_id": "80b90cbcfe91e94f67d768d407fa274ec75e69cd",
        "commit_message": "Add Executable to DefaultGenerator\n\nFixed the class hierarchy for the :class:`_schema.Sequence` and the more\ngeneral :class:`_schema.DefaultGenerator` base, as these are \"executable\"\nas statements they need to include :class:`_sql.Executable` in their\nhierarchy, not just :class:`_roles.StatementRole` as was applied\narbitrarily to :class:`_schema.Sequence` previously. The fix allows\n:class:`_schema.Sequence` to work in all ``.execute()`` methods including\nwith :meth:`_orm.Session.execute` which was not working in the case that a\n``do_orm_execute()`` handler was also established.\n\nFixes: #6668\nChange-Id: I0d192258c7cbd1bce2552f9e748e8fdd680dc45f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/80b90cbcfe91e94f67d768d407fa274ec75e69cd",
        "buggy_code": "self._log_info(\"%r\", parameters)",
        "fixed_code": "self._log_info(\"[raw sql] %r\", parameters)",
        "patch": "@@ -1835,7 +1835,7 @@ def _cursor_execute(self, cursor, statement, parameters, context=None):\n \n         if self._echo:\n             self._log_info(statement)\n-            self._log_info(\"%r\", parameters)\n+            self._log_info(\"[raw sql] %r\", parameters)\n         try:\n             for fn in (\n                 ()"
    },
    {
        "commit_id": "cdd041ea60628b2f4fd7f7da562aa19bdb15c206",
        "commit_message": "consider \"*\" col as textual ordered\n\nFixed old issue where a :func:`_sql.select()` made against the token \"*\",\nwhich then yielded exactly one column, would fail to correctly organize the\n``cursor.description`` column name into the keys of the result object.\n\nFixes: #6665\nChange-Id: Ie8c00f62998972ad4a19a750d2642d00fde006f6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cdd041ea60628b2f4fd7f7da562aa19bdb15c206",
        "buggy_code": "if keyname is None:",
        "fixed_code": "if keyname is None or keyname == \"*\":",
        "patch": "@@ -2805,7 +2805,7 @@ def get_render_as_alias_suffix(self, alias_name_text):\n         return \" AS \" + alias_name_text\n \n     def _add_to_result_map(self, keyname, name, objects, type_):\n-        if keyname is None:\n+        if keyname is None or keyname == \"*\":\n             self._ordered_columns = False\n             self._textual_ordered_columns = True\n         if type_._is_tuple_type:"
    },
    {
        "commit_id": "add4da2c51ed9316973f8ad75cde62d6e837fb7d",
        "commit_message": "fix typo\n\nChange-Id: I3f5fcb1928051a1c2ac5e51917c95af086fb0380",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/add4da2c51ed9316973f8ad75cde62d6e837fb7d",
        "buggy_code": "Enable :ref:`lambda caching <engine_lambda_caching>`_ for loader",
        "fixed_code": "Enable :ref:`lambda caching <engine_lambda_caching>` for loader",
        "patch": "@@ -364,7 +364,7 @@ class name or dotted package-qualified name.\n                 :ref:`error_qzyx` - usage example\n \n         :param bake_queries=True:\n-          Enable :ref:`lambda caching <engine_lambda_caching>`_ for loader\n+          Enable :ref:`lambda caching <engine_lambda_caching>` for loader\n           strategies, if applicable, which adds a performance gain to the\n           construction of SQL constructs used by loader strategies, in addition\n           to the usual SQL statement caching used throughout SQLAlchemy. This"
    },
    {
        "commit_id": "b8ff111975be2b8d2e370f51168e39c7fae44e92",
        "commit_message": "simplify relationship caching options\n\nClarified the current purpose of the\n:paramref:`_orm.relationship.bake_queries` flag, which in 1.4 is to enable\nor disable \"lambda caching\" of statements within the \"lazyload\" and\n\"selectinload\" loader strategies; this is separate from the more\nfoundational SQL query cache that is used for most statements.\nAdditionally, the lazy loader no longer uses its own cache for many-to-one\nSQL queries, which was an implementation quirk that doesn't exist for any\nother loader scenario. Finally, the \"lru cache\" warning that the lazyloader\nand selectinloader strategies could emit when handling a wide array of\nclass/relationship combinations has been removed; based on analysis of some\nend-user cases, this warning doesn't suggest any significant issue. While\nsetting ``bake_queries=False`` for such a relationship will remove this\ncache from being used, there's no particular performance gain in this case\nas using no caching vs. using a cache that needs to refresh often likely\nstill wins out on the caching being used side.\n\nFixes: #6072\nFixes: #6487\nChange-Id: Ida61f09b837d3acdafa07344d7d747d7f3ab226a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b8ff111975be2b8d2e370f51168e39c7fae44e92",
        "buggy_code": "class LoadManyToOneFromIdentityTest(NoCache, fixtures.MappedTest):",
        "fixed_code": "class LoadManyToOneFromIdentityTest(fixtures.MappedTest):",
        "patch": "@@ -155,7 +155,7 @@ def go2():\n         self.assert_sql_count(testing.db, go2, 2)\n \n \n-class LoadManyToOneFromIdentityTest(NoCache, fixtures.MappedTest):\n+class LoadManyToOneFromIdentityTest(fixtures.MappedTest):\n \n     \"\"\"test overhead associated with many-to-one fetches.\n "
    },
    {
        "commit_id": "4e8577ca66d194661b1fed01c46a529655473b97",
        "commit_message": "restore adapter logic in ORM loading\n\nFixed regression involving how the ORM would resolve a given mapped column\nto a result row, where under cases such as joined eager loading, a slightly\nmore expensive \"fallback\" could take place to set up this resolution due to\nsome logic that was removed since 1.3. The issue could also cause\ndeprecation warnings involving column resolution to be emitted when using a\n1.4 style query with joined eager loading.\n\nIn order to ensure we don't look up columns by string name in the ORM,\nwe've turned on future_result=True in all cases, which I thought was\nalready the assumption here, but apparently not.    That in turn\nled to the issue that Session autocommit relies on close_with_result=True,\nwhich is legacy result only.   This was also hard to figure out.\nSo a new exception is raised if one tries to use future_result=True\nalong with close_with_result, and the Session now has an explicit path\nfor \"autocommit\" that sets these flags to their legacy values.\n\nThis does leave the possibility of some of these fallback cases\nemitting warnings for users using session in autocommit along with\njoined inheritance and column properties, as this patch identifies\nthat joined inheritance + column properties produce the fallback\nlogic when looking up in the result via the adapted column, which\nin those tests is actually a Label object that doesn't adapt\nnicely.\n\nFixes: #6596\nChange-Id: I107a47e873ae05ab50853bb00a9ea0e1a88d5aee",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4e8577ca66d194661b1fed01c46a529655473b97",
        "buggy_code": "mock.call._connection_for_bind(engine, close_with_result=True),",
        "fixed_code": "mock.call._connection_for_bind(engine),",
        "patch": "@@ -377,7 +377,7 @@ def get_bind(self, **kw):\n             canary.mock_calls,\n             [\n                 mock.call.get_bind(**expected_get_bind_args),\n-                mock.call._connection_for_bind(engine, close_with_result=True),\n+                mock.call._connection_for_bind(engine),\n             ],\n         )\n         sess.close()"
    },
    {
        "commit_id": "03633a6462ee16a1348acb98fe0323c74eb9ba85",
        "commit_message": "Pass URL object, not the string, to on_connect_url\n\nThe fix for pysqlcipher released in version 1.4.3 :ticket:`5848` was\nunfortunately non-working, in that the new ``on_connect_url`` hook was\nerroneously not receiving a ``URL`` object under normal usage of\n:func:`_sa.create_engine` and instead received a string that was unhandled;\nthe test suite failed to fully set up the actual conditions under which\nthis hook is called. This has been fixed.\n\nFixes: #6586\nChange-Id: I3bf738daec35877a10fdad740f08dca9e7420829",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/03633a6462ee16a1348acb98fe0323c74eb9ba85",
        "buggy_code": ":connectstring: sqlite+pysqlcipher://:passphrase/file_path[?kdf_iter=<iter>]",
        "fixed_code": ":connectstring: sqlite+pysqlcipher://:passphrase@/file_path[?kdf_iter=<iter>]",
        "patch": "@@ -9,7 +9,7 @@\n .. dialect:: sqlite+pysqlcipher\n     :name: pysqlcipher\n     :dbapi: sqlcipher 3 or pysqlcipher\n-    :connectstring: sqlite+pysqlcipher://:passphrase/file_path[?kdf_iter=<iter>]\n+    :connectstring: sqlite+pysqlcipher://:passphrase@/file_path[?kdf_iter=<iter>]\n \n     Dialect for support of DBAPIs that make use of the\n     `SQLCipher <https://www.zetetic.net/sqlcipher>`_ backend."
    },
    {
        "commit_id": "4460d21e1331bdc8593c6d09a238885badd021f9",
        "commit_message": "Removed automap deprecation warning\n\nFixed a deprecation warning that was emitted when using\n:func:`_automap.automap_base` without passing an existing\n``Base``.\n\nFixes: #6529\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nFixed the automap's declarative import from sqlalchemy.orm instead from the deprecated ext.declarative package\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #6533\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/6533\nPull-request-sha: 46d40005eae51fd7423da66f6ad4072f65744c1c\n\nChange-Id: I432df70d4221873ca229076d5d3ac20b2870c13b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4460d21e1331bdc8593c6d09a238885badd021f9",
        "buggy_code": "from .declarative import declarative_base as _declarative_base",
        "fixed_code": "from ..orm import declarative_base as _declarative_base",
        "patch": "@@ -560,9 +560,9 @@ def column_reflect(inspector, table, column_info):\n \n \n \"\"\"  # noqa\n-from .declarative import declarative_base as _declarative_base\n from .. import util\n from ..orm import backref\n+from ..orm import declarative_base as _declarative_base\n from ..orm import exc as orm_exc\n from ..orm import interfaces\n from ..orm import relationship"
    },
    {
        "commit_id": "b0846876c973505c1c74309a4c7de97d438e83fa",
        "commit_message": "fix typo in\"Connecting to databases with access tokens\" (#6432)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b0846876c973505c1c74309a4c7de97d438e83fa",
        "buggy_code": "token_struct = struct.pack(f\"<I{len(raw_token)}s\", len(raw_token), token)",
        "fixed_code": "token_struct = struct.pack(f\"<I{len(raw_token)}s\", len(raw_token), raw_token)",
        "patch": "@@ -124,7 +124,7 @@ def provide_token(dialect, conn_rec, cargs, cparams):\n \n         # create token credential\n         raw_token = azure_credentials.get_token(TOKEN_URL).token.encode(\"utf-16-le\")\n-        token_struct = struct.pack(f\"<I{len(raw_token)}s\", len(raw_token), token)\n+        token_struct = struct.pack(f\"<I{len(raw_token)}s\", len(raw_token), raw_token)\n \n         # apply it to keyword arguments\n         cparams[\"attrs_before\"] = {SQL_COPT_SS_ACCESS_TOKEN: token_struct}"
    },
    {
        "commit_id": "a52b5efda02708dc655da11b78d4e15f32785fa4",
        "commit_message": "Use type_ when creating literals in _LiteralRoundTripFixture\n\nFixes #6496 by passing the `type_` argument passed to `run` to `literal`.\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [X] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #6497\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/6497\nPull-request-sha: 5f82408b2c25c7593f7202533dde4e29f045de5d\n\nChange-Id: Ieed822c157f91d95fe3a07ea4482a36777539c35",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a52b5efda02708dc655da11b78d4e15f32785fa4",
        "buggy_code": ".values(x=literal(value))",
        "fixed_code": ".values(x=literal(value, type_))",
        "patch": "@@ -63,7 +63,7 @@ def run(type_, input_, output, filter_=None):\n             for value in input_:\n                 ins = (\n                     t.insert()\n-                    .values(x=literal(value))\n+                    .values(x=literal(value, type_))\n                     .compile(\n                         dialect=testing.db.dialect,\n                         compile_kwargs=dict(literal_binds=True),"
    },
    {
        "commit_id": "66cb4e9987419cd48f2ce5f56eb41ddfe0bff224",
        "commit_message": "Fix documentation type in URL class\n\nChange-Id: I16a24718ee322efeffbf5a268d995ff53c23b696",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66cb4e9987419cd48f2ce5f56eb41ddfe0bff224",
        "buggy_code": ":var `_engine.URL.driver`: database backend and driver name, such as",
        "fixed_code": ":var `_engine.URL.drivername`: database backend and driver name, such as",
        "patch": "@@ -72,7 +72,7 @@ class URL(\n \n     :class:`_engine.URL` contains the following attributes:\n \n-    :var `_engine.URL.driver`: database backend and driver name, such as\n+    :var `_engine.URL.drivername`: database backend and driver name, such as\n      ``postgresql+psycopg2``\n     :var `_engine.URL.username`: username string\n     :var `_engine.URL.password`: password, which is normally a string but may"
    },
    {
        "commit_id": "18b7224f32bac9f6b41a1afd6288a55f6ffd00b9",
        "commit_message": "fix absolute import\n\nChange-Id: I57e7bb8ac8f53c601b2ec5462d7502f8e53f1b0f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/18b7224f32bac9f6b41a1afd6288a55f6ffd00b9",
        "buggy_code": "from sqlalchemy.sql.traversals import NO_CACHE",
        "fixed_code": "from .traversals import NO_CACHE",
        "patch": "@@ -10,9 +10,9 @@\n \"\"\"\n \n \n-from sqlalchemy.sql.traversals import NO_CACHE\n from . import operators\n from .base import SchemaEventTarget\n+from .traversals import NO_CACHE\n from .visitors import Traversible\n from .visitors import TraversibleType\n from .. import exc"
    },
    {
        "commit_id": "373e960cb4448d1498d0a47fd35c97f83170f87e",
        "commit_message": "dont assume ClauseElement in attributes, coercions\n\nFixed two distinct issues, each of which would come into play under certain\ncircumstances, most likely however one which is a common mis-configuration\nin :class:`_hybrid.hybrid_property`, where the \"expression\" implementation\nwould return a non :class:`_sql.ClauseElement` such as a boolean value.\nFor both issues, 1.3's behavior was to silently ignore the\nmis-configuration and ultimately attempt to interpret the value as a\nSQL expression, which would lead to an incorrect query.\n\n* Fixed issue regarding interaction of the attribute system with\nhybrid_property, where if the ``__clause_element__()`` method of the\nattribute returned a non-:class:`_sql.ClauseElement` object, an internal\n``AttributeError`` would lead the attribute to return the ``expression``\nfunction on the hybrid_property itself, as the attribute error was\nagainst the name ``.expression`` which would invoke the ``__getattr__()``\nmethod as a fallback. This now raises explicitly. In 1.3 the\nnon-:class:`_sql.ClauseElement` was returned directly.\n\n* Fixed issue in SQL argument coercions system where passing the wrong\nkind of object to methods that expect column expressions would fail if\nthe object were altogether not a SQLAlchemy object, such as a Python\nfunction, in cases where the object were not just coerced into a bound\nvalue. Again 1.3 did not have a comprehensive argument coercion system\nso this case would also pass silently.\n\nFixes: #6350\nChange-Id: I5bba0a6b27f45e5f8ebadfd6d511fa773388ef7c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/373e960cb4448d1498d0a47fd35c97f83170f87e",
        "buggy_code": "if not resolved.is_clause_element:",
        "fixed_code": "if not getattr(resolved, \"is_clause_element\", False):",
        "patch": "@@ -313,7 +313,7 @@ def _warn_for_scalar_subquery_coercion(self):\n     def _implicit_coercions(\n         self, original_element, resolved, argname=None, **kw\n     ):\n-        if not resolved.is_clause_element:\n+        if not getattr(resolved, \"is_clause_element\", False):\n             self._raise_for_expected(original_element, argname, resolved)\n         elif resolved._is_select_statement:\n             self._warn_for_scalar_subquery_coercion()"
    },
    {
        "commit_id": "ea225c63f98dc3c250cee1b243762970b8e0932a",
        "commit_message": "Merge \"Fix as_declarative mypy test\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ea225c63f98dc3c250cee1b243762970b8e0932a",
        "buggy_code": "@as_declarative",
        "fixed_code": "@as_declarative()",
        "patch": "@@ -10,7 +10,7 @@\n from sqlalchemy.sql.schema import ForeignKey\n \n \n-@as_declarative\n+@as_declarative()\n class Base(object):\n     updated_at = Column(Integer)\n "
    },
    {
        "commit_id": "904097d13dc106f20c759db238fc2190605156e0",
        "commit_message": "Fix as_declarative mypy test\n\nChange-Id: I7f131c336cfe8987a1bcebf4a4068fd227f01226",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/904097d13dc106f20c759db238fc2190605156e0",
        "buggy_code": "@as_declarative",
        "fixed_code": "@as_declarative()",
        "patch": "@@ -10,7 +10,7 @@\n from sqlalchemy.sql.schema import ForeignKey\n \n \n-@as_declarative\n+@as_declarative()\n class Base(object):\n     updated_at = Column(Integer)\n "
    },
    {
        "commit_id": "de7f14104d5278987fa72d6866fa39569e56077e",
        "commit_message": "Merge \"Fix typo that prevented setting the ``bind`` attribute of an :class:`_asyncio.AsyncSession` to the correct value.\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/de7f14104d5278987fa72d6866fa39569e56077e",
        "buggy_code": "self.bind = engine",
        "fixed_code": "self.bind = bind",
        "patch": "@@ -80,7 +80,7 @@ def __init__(\n     ):\n         kw[\"future\"] = True\n         if bind:\n-            self.bind = engine\n+            self.bind = bind\n             bind = engine._get_sync_engine_or_connection(bind)\n \n         if binds:"
    },
    {
        "commit_id": "3d41fad27de91800b89a199e67766066fd744103",
        "commit_message": "Fix typo that prevented setting the ``bind``\nattribute of an :class:`_asyncio.AsyncSession` to the correct value.\n\nFixes: #6220\nChange-Id: I91021351b8076e4aa4139af4b2cf359b3c0404af",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3d41fad27de91800b89a199e67766066fd744103",
        "buggy_code": "self.bind = engine",
        "fixed_code": "self.bind = bind",
        "patch": "@@ -80,7 +80,7 @@ def __init__(\n     ):\n         kw[\"future\"] = True\n         if bind:\n-            self.bind = engine\n+            self.bind = bind\n             bind = engine._get_sync_engine_or_connection(bind)\n \n         if binds:"
    },
    {
        "commit_id": "dc5ade010da55c1158ee7294c9e882cc52cd6e01",
        "commit_message": "Merge \"Fix has table reflection on MySQL 5.0 5.1\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dc5ade010da55c1158ee7294c9e882cc52cd6e01",
        "buggy_code": "\"SELECT * FROM information_schema.tables WHERE \"",
        "fixed_code": "\"SELECT COUNT(*) FROM information_schema.tables WHERE \"",
        "patch": "@@ -2812,7 +2812,7 @@ def has_table(self, connection, table_name, schema=None):\n \n         rs = connection.execute(\n             text(\n-                \"SELECT * FROM information_schema.tables WHERE \"\n+                \"SELECT COUNT(*) FROM information_schema.tables WHERE \"\n                 \"table_schema = :table_schema AND \"\n                 \"table_name = :table_name\"\n             ).bindparams("
    },
    {
        "commit_id": "be200636a90e0ab5cd54f694c03b6593013665e1",
        "commit_message": "Fix has table reflection on MySQL 5.0 5.1\n\nFixed regression in the MySQL dialect where the reflection query used to\ndetect if a table exists would fail on very old MySQL 5.0 and 5.1 versions.\n\nFixes: #6151\nChange-Id: I48e98542c3a1a49519a5d113e43ba6f917e8580e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/be200636a90e0ab5cd54f694c03b6593013665e1",
        "buggy_code": "\"SELECT * FROM information_schema.tables WHERE \"",
        "fixed_code": "\"SELECT COUNT(*) FROM information_schema.tables WHERE \"",
        "patch": "@@ -2812,7 +2812,7 @@ def has_table(self, connection, table_name, schema=None):\n \n         rs = connection.execute(\n             text(\n-                \"SELECT * FROM information_schema.tables WHERE \"\n+                \"SELECT COUNT(*) FROM information_schema.tables WHERE \"\n                 \"table_schema = :table_schema AND \"\n                 \"table_name = :table_name\"\n             ).bindparams("
    },
    {
        "commit_id": "115e4d1a491173276821bdafd967666d71cdb7a8",
        "commit_message": "Apply quoting to render_derived() names\n\nFixed bug in new :meth:`_functions.FunctionElement.render_derived` feature\nwhere column names rendered out explicitly in the alias SQL would not have\nproper quoting applied for case sensitive names and other non-alphanumeric\nnames.\n\nFixes: #6183\nChange-Id: I33e2534affc6e1f449f564750028fd027cb0f352",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/115e4d1a491173276821bdafd967666d71cdb7a8",
        "buggy_code": "col.name,",
        "fixed_code": "self.preparer.quote(col.name),",
        "patch": "@@ -2662,7 +2662,7 @@ def visit_alias(\n                     \", \".join(\n                         \"%s%s\"\n                         % (\n-                            col.name,\n+                            self.preparer.quote(col.name),\n                             \" %s\"\n                             % self.dialect.type_compiler.process(\n                                 col.type, **kwargs"
    },
    {
        "commit_id": "56f9c7743e9083add69a10501a503f4e25bb59d7",
        "commit_message": "Adapt loader_criteria params for current query\n\nFixed critical issue in the new :meth:`_orm.PropComparator.and_` feature\nwhere loader strategies that emit secondary SELECT statements such as\n:func:`_orm.selectinload` and :func:`_orm.lazyload` would fail to\naccommodate for bound parameters in the user-defined criteria in terms of\nthe current statement being executed, as opposed to the cached statement,\ncausing stale bound values to be used.\n\nThis also adds a warning for the case where an object that uses\n:func:`_orm.lazyload` in conjunction with :meth:`_orm.PropComparator.and_`\nis attempted to be serialized; the loader criteria cannot reliably\nbe serialized and deserialized and eager loading should be used for this\ncase.\n\nFixes: #6139\nChange-Id: I5a638bbecb7b583db2d3c0b76469f5a25c13dd3b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/56f9c7743e9083add69a10501a503f4e25bb59d7",
        "buggy_code": "newelem = elem._clone()",
        "fixed_code": "newelem = elem._clone(**kw)",
        "patch": "@@ -262,7 +262,7 @@ def clone(elem, **kw):\n             and hasattr(elem, \"proxy_set\")\n             and elem.proxy_set.intersection(exclude)\n         ):\n-            newelem = elem._clone()\n+            newelem = elem._clone(**kw)\n         elif annotations != elem._annotations:\n             newelem = elem._annotate(annotations)\n         else:"
    },
    {
        "commit_id": "9ec860e7a5c944799f9ef4de9069d707cfc1ed27",
        "commit_message": "Remove internal use of string attr in loader option\n\nFixed issue where a \"removed in 2.0\" warning were generated internally by\nthe relationship loader mechanics.\n\nThis changeset started the effort of converting all string usage\nin the test suite, however this is a much longer job as the\nuse of strings in loader options is widespread.  In particular\nI'm not totally comfortable with strings not being accepted\nin obvious spots like Load(User).load_only(\"x\", \"y\", \"z\"), which\npoints to a new string expecting functionality that's not\nwhat's there now.  However at the moment it seems like we need\nto continue removing all support for strings and then figure out\n\"immediate strings from an explicit class\" later.\n\nFixes: #6115\nChange-Id: I6b314d135d2bc049fd66500914b772c1fe60b5b3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9ec860e7a5c944799f9ef4de9069d707cfc1ed27",
        "buggy_code": ").lazyload(rev.key).process_compile_state(compile_context)",
        "fixed_code": ").lazyload(rev).process_compile_state(compile_context)",
        "patch": "@@ -992,7 +992,7 @@ def _lazyload_reverse(compile_context):\n                         compile_context.compile_options._current_path[\n                             rev.parent\n                         ]\n-                    ).lazyload(rev.key).process_compile_state(compile_context)\n+                    ).lazyload(rev).process_compile_state(compile_context)\n \n         stmt = stmt.add_criteria(\n             lambda stmt: stmt._add_context_option("
    },
    {
        "commit_id": "9ec860e7a5c944799f9ef4de9069d707cfc1ed27",
        "commit_message": "Remove internal use of string attr in loader option\n\nFixed issue where a \"removed in 2.0\" warning were generated internally by\nthe relationship loader mechanics.\n\nThis changeset started the effort of converting all string usage\nin the test suite, however this is a much longer job as the\nuse of strings in loader options is widespread.  In particular\nI'm not totally comfortable with strings not being accepted\nin obvious spots like Load(User).load_only(\"x\", \"y\", \"z\"), which\npoints to a new string expecting functionality that's not\nwhat's there now.  However at the moment it seems like we need\nto continue removing all support for strings and then figure out\n\"immediate strings from an explicit class\" later.\n\nFixes: #6115\nChange-Id: I6b314d135d2bc049fd66500914b772c1fe60b5b3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9ec860e7a5c944799f9ef4de9069d707cfc1ed27",
        "buggy_code": "sa.orm.joinedload(\"parent\").joinedload(\"zc\")",
        "fixed_code": "sa.orm.joinedload(B.parent).joinedload(B.zc)",
        "patch": "@@ -1516,7 +1516,7 @@ def test_lazy_doesnt_interfere(self):\n \n         # If the bug is here, the next line throws an exception\n         session.query(B).options(\n-            sa.orm.joinedload(\"parent\").joinedload(\"zc\")\n+            sa.orm.joinedload(B.parent).joinedload(B.zc)\n         ).all()\n \n "
    },
    {
        "commit_id": "242867ec87c4d739011ee3cea9a53f33d9f05f2b",
        "commit_message": "Adjust derivation rules for table vs. subquery against a join\n\nFixed bug where ORM queries using a correlated subquery in conjunction with\n:func:`_orm.column_property` would fail to correlate correctly to an\nenclosing subquery or to a CTE when :meth:`_sql.Select.correlate_except`\nwere used in the property to control correlation, in cases where the\nsubquery contained the same selectables as ones within the correlated\nsubquery that were intended to not be correlated.\n\nThis is achieved by adding a limiting factor to ClauseAdapter\nwhich is to explicitly pass the selectables we will be adapting\n\"from\", which is then used by AliasedClass to limit \"from\"\nto the mappers represented by the AliasedClass.\n\nThis did cause one test where an alias for a contains_eager()\nwas missing to suddenly fail, and the test was corrected, however\nthere may be some very edge cases like that one where the tighter\ncriteria causes an existing use case that's relying on the more\nliberal aliasing to require modifications.\n\nFixes: #6060\nChange-Id: I8342042641886e1a220beafeb94fe45ea7aadb33",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/242867ec87c4d739011ee3cea9a53f33d9f05f2b",
        "buggy_code": "@assert_cycles(68)",
        "fixed_code": "@assert_cycles(69)",
        "patch": "@@ -1197,7 +1197,7 @@ def user_name(self):\n         # unfortunately there's a lot of cycles with an aliased()\n         # for now, however calling upon clause_element does not seem\n         # to make it worse which is what this was looking to test\n-        @assert_cycles(68)\n+        @assert_cycles(69)\n         def go():\n             a1 = aliased(Foo)\n             a1.user_name.__clause_element__()"
    },
    {
        "commit_id": "028e5e90331ff3d12ad3f241e63ccef56a8fa017",
        "commit_message": "Use tuple for function package names\n\nFixed issue where using a ``func`` that includes dotted packagenames would\nfail to be cacheable by the SQL caching system due to a Python list of\nnames that needed to be a tuple.\n\nFixes: #6101\nChange-Id: I1d4bb5bf230b83596c59b6a04aa498f18ecd9613",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/028e5e90331ff3d12ad3f241e63ccef56a8fa017",
        "buggy_code": "self.__names[-1], packagenames=self.__names[0:-1], *c, **o",
        "fixed_code": "self.__names[-1], packagenames=tuple(self.__names[0:-1]), *c, **o",
        "patch": "@@ -790,7 +790,7 @@ def __call__(self, *c, **kwargs):\n                 return func(*c, **o)\n \n         return Function(\n-            self.__names[-1], packagenames=self.__names[0:-1], *c, **o\n+            self.__names[-1], packagenames=tuple(self.__names[0:-1]), *c, **o\n         )\n \n "
    },
    {
        "commit_id": "ea844985d08ec6de49e82bb6a5878765bbeeb17b",
        "commit_message": "check for MemberExpr looking for column argument\n\nFixed issue in MyPy extension which crashed on detecting the type of a\n:class:`.Column` if the type were given with a module prefix like\n``sa.Integer()``.\n\nFixes: sqlalchemy/sqlalchemy2-stubs/#2\nChange-Id: I71f53a6ced501ae144e28ce255cf3f50ea2b2e84",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ea844985d08ec6de49e82bb6a5878765bbeeb17b",
        "buggy_code": "elif isinstance(column_arg, nodes.NameExpr):",
        "fixed_code": "elif isinstance(column_arg, (nodes.NameExpr, nodes.MemberExpr)):",
        "patch": "@@ -693,7 +693,7 @@ class MyClass:\n             # x = Column(String(50))\n             callee = column_arg.callee\n             break\n-        elif isinstance(column_arg, nodes.NameExpr):\n+        elif isinstance(column_arg, (nodes.NameExpr, nodes.MemberExpr)):\n             if isinstance(column_arg.node, TypeInfo):\n                 # x = Column(String)\n                 callee = column_arg"
    },
    {
        "commit_id": "3fec5028e695ad138aa46a0ae66c55e8bcb653f6",
        "commit_message": "fix typo\n\nChange-Id: I7afb81cfa4f8041181c24666bb9acd71ff45692b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3fec5028e695ad138aa46a0ae66c55e8bcb653f6",
        "buggy_code": "with :class:`_function.Function` objects generated from the :data:`_sql.func`",
        "fixed_code": "with :class:`_functions.Function` objects generated from the :data:`_sql.func`",
        "patch": "@@ -1064,7 +1064,7 @@ def set_search_path(dbapi_connection, connection_record):\n ``json_each()``, ``json_to_record()``, ``json_populate_recordset()`` use such\n forms. These classes of SQL function calling forms in SQLAlchemy are available\n using the :meth:`_functions.FunctionElement.table_valued` method in conjunction\n-with :class:`_function.Function` objects generated from the :data:`_sql.func`\n+with :class:`_functions.Function` objects generated from the :data:`_sql.func`\n namespace.\n \n Examples from PostgreSQL's reference documentation follow below:"
    },
    {
        "commit_id": "a9a31c0fb8454c82fc13ec5312110b812f8e4ce1",
        "commit_message": "Merge \"Fix typo in Session.identity_key\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a9a31c0fb8454c82fc13ec5312110b812f8e4ce1",
        "buggy_code": "return util.perload.orm_util.identity_key(*args, **kwargs)",
        "fixed_code": "return util.preloaded.orm_util.identity_key(*args, **kwargs)",
        "patch": "@@ -81,7 +81,7 @@ def identity_key(cls, *args, **kwargs):\n         This is an alias of :func:`.util.identity_key`.\n \n         \"\"\"\n-        return util.perload.orm_util.identity_key(*args, **kwargs)\n+        return util.preloaded.orm_util.identity_key(*args, **kwargs)\n \n     @classmethod\n     def object_session(cls, instance):"
    },
    {
        "commit_id": "057a3dad02cc1f40f9e35bc070e0844b01d76417",
        "commit_message": "Fix typo in Session.identity_key\n\nFixed regression in :meth:`_orm.Session.identity_key`, including that the\nmethod and related methods were not covered by any unit test as well as\nthat the method contained a typo preventing it from functioning correctly.\n\nFixes: #6067\nChange-Id: I1a84f9ed095c4226d57eef1c46996601dc2f1eaa",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/057a3dad02cc1f40f9e35bc070e0844b01d76417",
        "buggy_code": "return util.perload.orm_util.identity_key(*args, **kwargs)",
        "fixed_code": "return util.preloaded.orm_util.identity_key(*args, **kwargs)",
        "patch": "@@ -81,7 +81,7 @@ def identity_key(cls, *args, **kwargs):\n         This is an alias of :func:`.util.identity_key`.\n \n         \"\"\"\n-        return util.perload.orm_util.identity_key(*args, **kwargs)\n+        return util.preloaded.orm_util.identity_key(*args, **kwargs)\n \n     @classmethod\n     def object_session(cls, instance):"
    },
    {
        "commit_id": "7293b3dc0e9eb3dae84ffd831494b85355df8e73",
        "commit_message": "Fix test that incorrectly used ; as query separator\n\nChange-Id: I31e9973930d90184bbabda0bff6346eca4e00c37",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7293b3dc0e9eb3dae84ffd831494b85355df8e73",
        "buggy_code": "\"driver=ODBC+Driver+17+for+SQL+Server;\"",
        "fixed_code": "\"driver=ODBC+Driver+17+for+SQL+Server&\"",
        "patch": "@@ -161,7 +161,7 @@ def test_pyodbc_extra_connect_azure(self):\n         dialect = pyodbc.dialect()\n         u = url.make_url(\n             \"mssql+pyodbc://@server_name/db_name?\"\n-            \"driver=ODBC+Driver+17+for+SQL+Server;\"\n+            \"driver=ODBC+Driver+17+for+SQL+Server&\"\n             \"authentication=ActiveDirectoryIntegrated\"\n         )\n         connection = dialect.create_connect_args(u)"
    },
    {
        "commit_id": "553ac45aae5712e64a5380ba1fa1c6028acf5f39",
        "commit_message": "Apply consistent labeling for all future style ORM queries\n\nFixed issue in new 1.4/2.0 style ORM queries where a statement-level label\nstyle would not be preserved in the keys used by result rows; this has been\napplied to all combinations of Core/ORM columns / session vs. connection\netc. so that the linkage from statement to result row is the same in all\ncases.\n\nalso repairs a cache key bug where query.from_statement()\nvs. select().from_statement() would not be disambiguated; the\ncompile options were not included in the cache key for\nFromStatement.\n\nFixes: #5933\nChange-Id: I22f6cf0f0b3360e55299cdcb2452cead2b2458ea",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/553ac45aae5712e64a5380ba1fa1c6028acf5f39",
        "buggy_code": "orig_query",
        "fixed_code": "orig_query, legacy=False",
        "patch": "@@ -1593,7 +1593,7 @@ def _setup_query_from_rowproc(\n         # much of this we need.    in particular I can't get a test to\n         # fail if the \"set_base_alias\" is missing and not sure why that is.\n         orig_compile_state = compile_state_cls._create_entities_collection(\n-            orig_query\n+            orig_query, legacy=False\n         )\n \n         ("
    },
    {
        "commit_id": "c0521e6f0688b794048e44ff3df429249a093b72",
        "commit_message": "Add identifier_preparer per-execution context for schema translates\n\nFixed bug where the \"schema_translate_map\" feature failed to be taken into\naccount for the use case of direct execution of\n:class:`_schema.DefaultGenerator` objects such as sequences, which included\nthe case where they were \"pre-executed\" in order to generate primary key\nvalues when implicit_returning was disabled.\n\nFixes: #5929\nChange-Id: I3fed1d0af28be5ce9c9bb572524dcc8411633f60",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c0521e6f0688b794048e44ff3df429249a093b72",
        "buggy_code": "% self.dialect.identifier_preparer.format_sequence(seq),",
        "fixed_code": "% self.identifier_preparer.format_sequence(seq),",
        "patch": "@@ -614,7 +614,7 @@ def fire_sequence(self, seq, type_):\n \n         return self._execute_scalar(\n             \"SELECT gen_id(%s, 1) FROM rdb$database\"\n-            % self.dialect.identifier_preparer.format_sequence(seq),\n+            % self.identifier_preparer.format_sequence(seq),\n             type_,\n         )\n "
    },
    {
        "commit_id": "c0521e6f0688b794048e44ff3df429249a093b72",
        "commit_message": "Add identifier_preparer per-execution context for schema translates\n\nFixed bug where the \"schema_translate_map\" feature failed to be taken into\naccount for the use case of direct execution of\n:class:`_schema.DefaultGenerator` objects such as sequences, which included\nthe case where they were \"pre-executed\" in order to generate primary key\nvalues when implicit_returning was disabled.\n\nFixes: #5929\nChange-Id: I3fed1d0af28be5ce9c9bb572524dcc8411633f60",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c0521e6f0688b794048e44ff3df429249a093b72",
        "buggy_code": "% self.dialect.identifier_preparer.format_sequence(seq)",
        "fixed_code": "% self.identifier_preparer.format_sequence(seq)",
        "patch": "@@ -2936,7 +2936,7 @@ def fire_sequence(self, seq, type_):\n         return self._execute_scalar(\n             (\n                 \"select nextval('%s')\"\n-                % self.dialect.identifier_preparer.format_sequence(seq)\n+                % self.identifier_preparer.format_sequence(seq)\n             ),\n             type_,\n         )"
    },
    {
        "commit_id": "23e088bccff02f18e4a27ef9dfc656c814695525",
        "commit_message": "Detect non async driver on engine creation\n\nAn error is raised when creating an async engine with an\nincompatible dbapi. Before the error was raised only when\nfirst using the engine.\n\nChange-Id: I977952b4c03ae51f568749ad744c545197bcd887\nReference: #5920",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/23e088bccff02f18e4a27ef9dfc656c814695525",
        "buggy_code": "was awaited when it required one",
        "fixed_code": "was awaited when it required one.",
        "patch": "@@ -287,7 +287,7 @@ class NoReferenceError(InvalidRequestError):\n \n class AwaitRequired(InvalidRequestError):\n     \"\"\"Error raised by the async greenlet spawn if no async operation\n-    was awaited when it required one\n+    was awaited when it required one.\n \n     \"\"\"\n "
    },
    {
        "commit_id": "e91d918fc24d678a413feb3744e70014f54172c7",
        "commit_message": "orm/session.py - comment grammar fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e91d918fc24d678a413feb3744e70014f54172c7",
        "buggy_code": "If this session were created with ``autocommit=False``, a new",
        "fixed_code": "If this Session was created with ``autocommit=False``, a new",
        "patch": "@@ -1693,7 +1693,7 @@ def close(self):\n \n         This clears all items and ends any transaction in progress.\n \n-        If this session were created with ``autocommit=False``, a new\n+        If this Session was created with ``autocommit=False``, a new\n         transaction will be begun when the :class:`.Session` is next asked\n         to procure a database connection.\n "
    },
    {
        "commit_id": "2c7e78be96a33902927f911429849a2ccfbcfc9b",
        "commit_message": "Fix broken link to cx_Oracle documentation",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2c7e78be96a33902927f911429849a2ccfbcfc9b",
        "buggy_code": "http://cx-oracle.readthedocs.io/en/latest/module.html#types.",
        "fixed_code": "http://cx-oracle.readthedocs.io/en/latest/module.html#database-types.",
        "patch": "@@ -208,7 +208,7 @@\n \n Users of the cx_Oracle dialect are **strongly encouraged** to read through\n cx_Oracle's list of built-in datatype symbols at\n-http://cx-oracle.readthedocs.io/en/latest/module.html#types.\n+http://cx-oracle.readthedocs.io/en/latest/module.html#database-types.\n Note that in some cases, significant performance degradation can occur when\n using these types vs. not, in particular when specifying ``cx_Oracle.CLOB``.\n "
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "This method translates the values in the provided uri",
        "fixed_code": "This method translates the values in the provided URI",
        "patch": "@@ -108,7 +108,7 @@ def create_connect_args(self, url):\n             connect(dsn, user='', password='',\n                     clear_auto_commit=1, errorhandler=None)\n \n-        This method translates the values in the provided uri\n+        This method translates the values in the provided URI\n         into args and kwargs needed to instantiate an mxODBC Connection.\n \n         The arg 'errorhandler' is not used by SQLAlchemy and will"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -22,7 +22,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`_mssql.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -21,7 +21,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`.mysql.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "Defines an EXCLUDE constraint as described in the `postgres",
        "fixed_code": "Defines an EXCLUDE constraint as described in the `PostgreSQL",
        "patch": "@@ -87,7 +87,7 @@ def _from_objects(self):\n class ExcludeConstraint(ColumnCollectionConstraint):\n     \"\"\"A table-level EXCLUDE constraint.\n \n-    Defines an EXCLUDE constraint as described in the `postgres\n+    Defines an EXCLUDE constraint as described in the `PostgreSQL\n     documentation`__.\n \n     __ http://www.postgresql.org/docs/9.0/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -107,7 +107,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The operators provided by the PostgreSQL version of :class:`_types.JSON`"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -14,7 +14,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`_sqlite.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "specifing \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept",
        "fixed_code": "specifying \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept",
        "patch": "@@ -65,7 +65,7 @@\n that additional driver-level arguments can be passed including options such as\n \"read only\".   The Python sqlite3 driver supports this mode under modern Python\n 3 versions.   The SQLAlchemy pysqlite driver supports this mode of use by\n-specifing \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept\n+specifying \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept\n as the \"database\" portion of the SQLAlchemy url (that is, following a slash)::\n \n     e = create_engine(\"sqlite:///file:path/to/database?mode=ro&uri=true\")"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": ":class:`_engine.URL` object should impliement the",
        "fixed_code": ":class:`_engine.URL` object should implement the",
        "patch": "@@ -1156,7 +1156,7 @@ def __init__(self, url, kwargs):\n \n             The :class:`_engine.URL` object is now immutable, so a\n             :class:`_engine.CreateEnginePlugin` that needs to alter the\n-            :class:`_engine.URL` object should impliement the\n+            :class:`_engine.URL` object should implement the\n             :meth:`_engine.CreateEnginePlugin.update_url` method.\n \n         :param kwargs: The keyword arguments passed to"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "r\"\"\"Direct consructor for a new :class:`_orm.Mapper` object.",
        "fixed_code": "r\"\"\"Direct constructor for a new :class:`_orm.Mapper` object.",
        "patch": "@@ -155,7 +155,7 @@ def __init__(\n         legacy_is_orphan=False,\n         _compiled_cache_size=100,\n     ):\n-        r\"\"\"Direct consructor for a new :class:`_orm.Mapper` object.\n+        r\"\"\"Direct constructor for a new :class:`_orm.Mapper` object.\n \n         The :func:`_orm.mapper` function is normally invoked through the\n         use of the :class:`_orm.registry` object through either the"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "\"\"\"Seralizable object that tests for a name in c._annotations.\"\"\"",
        "fixed_code": "\"\"\"Serializable object that tests for a name in c._annotations.\"\"\"",
        "patch": "@@ -3650,7 +3650,7 @@ def col_to_bind(col):\n \n \n class _ColInAnnotations(object):\n-    \"\"\"Seralizable object that tests for a name in c._annotations.\"\"\"\n+    \"\"\"Serializable object that tests for a name in c._annotations.\"\"\"\n \n     __slots__ = (\"name\",)\n "
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "Basically used to apply a \"dont traverse\" annotation to a",
        "fixed_code": "Basically used to apply a \"don't traverse\" annotation to a",
        "patch": "@@ -306,7 +306,7 @@ def _shallow_annotate(element, annotations):\n     \"\"\"Annotate the given ClauseElement and copy its internals so that\n     internal objects refer to the new annotated object.\n \n-    Basically used to apply a \"dont traverse\" annotation to a\n+    Basically used to apply a \"don't traverse\" annotation to a\n     selectable, without digging throughout the whole\n     structure wasting time.\n     \"\"\""
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "and are generaly trying to get an empty SELECT statement as a",
        "fixed_code": "and are generally trying to get an empty SELECT statement as a",
        "patch": "@@ -542,7 +542,7 @@ def in_(self, other):\n \n           In this calling form, the expression renders an \"empty set\"\n           expression.  These expressions are tailored to individual backends\n-          and are generaly trying to get an empty SELECT statement as a\n+          and are generally trying to get an empty SELECT statement as a\n           subquery.  Such as on SQLite, the expression is::\n \n             WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "\"\"\"the oppopsite of \"sequences\", DB does not support sequences at",
        "fixed_code": "\"\"\"the opposite of \"sequences\", DB does not support sequences at",
        "patch": "@@ -496,7 +496,7 @@ def sequences(self):\n \n     @property\n     def no_sequences(self):\n-        \"\"\"the oppopsite of \"sequences\", DB does not support sequences at\n+        \"\"\"the opposite of \"sequences\", DB does not support sequences at\n         all.\"\"\"\n \n         return exclusions.NotPredicate(self.sequences)"
    },
    {
        "commit_id": "25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "commit_message": "Merge \"Fix many spell glitches in docstrings and comments\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25ee5a05df0daeb7dc7ba432172d6abc76ffab56",
        "buggy_code": "Utimately we would need to rewrite our \"decorator\" routine completely",
        "fixed_code": "Ultimately we would need to rewrite our \"decorator\" routine completely",
        "patch": "@@ -362,7 +362,7 @@ def inspect_formatargspec(\n         Instead of introducing all the object-creation overhead and having\n         to reinvent from scratch, just copy their compatibility routine.\n \n-        Utimately we would need to rewrite our \"decorator\" routine completely\n+        Ultimately we would need to rewrite our \"decorator\" routine completely\n         which is not really worth it right now, until all Python 2.x support\n         is dropped.\n "
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "This method translates the values in the provided uri",
        "fixed_code": "This method translates the values in the provided URI",
        "patch": "@@ -108,7 +108,7 @@ def create_connect_args(self, url):\n             connect(dsn, user='', password='',\n                     clear_auto_commit=1, errorhandler=None)\n \n-        This method translates the values in the provided uri\n+        This method translates the values in the provided URI\n         into args and kwargs needed to instantiate an mxODBC Connection.\n \n         The arg 'errorhandler' is not used by SQLAlchemy and will"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -22,7 +22,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`_mssql.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -21,7 +21,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`.mysql.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "Defines an EXCLUDE constraint as described in the `postgres",
        "fixed_code": "Defines an EXCLUDE constraint as described in the `PostgreSQL",
        "patch": "@@ -87,7 +87,7 @@ def _from_objects(self):\n class ExcludeConstraint(ColumnCollectionConstraint):\n     \"\"\"A table-level EXCLUDE constraint.\n \n-    Defines an EXCLUDE constraint as described in the `postgres\n+    Defines an EXCLUDE constraint as described in the `PostgreSQL\n     documentation`__.\n \n     __ http://www.postgresql.org/docs/9.0/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -107,7 +107,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The operators provided by the PostgreSQL version of :class:`_types.JSON`"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": ":class:`_types.JSON` - main documenation for the generic",
        "fixed_code": ":class:`_types.JSON` - main documentation for the generic",
        "patch": "@@ -14,7 +14,7 @@ class JSON(sqltypes.JSON):\n \n     .. seealso::\n \n-        :class:`_types.JSON` - main documenation for the generic\n+        :class:`_types.JSON` - main documentation for the generic\n         cross-platform JSON datatype.\n \n     The :class:`_sqlite.JSON` type supports persistence of JSON values"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "specifing \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept",
        "fixed_code": "specifying \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept",
        "patch": "@@ -65,7 +65,7 @@\n that additional driver-level arguments can be passed including options such as\n \"read only\".   The Python sqlite3 driver supports this mode under modern Python\n 3 versions.   The SQLAlchemy pysqlite driver supports this mode of use by\n-specifing \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept\n+specifying \"uri=true\" in the URL query string.  The SQLite-level \"URI\" is kept\n as the \"database\" portion of the SQLAlchemy url (that is, following a slash)::\n \n     e = create_engine(\"sqlite:///file:path/to/database?mode=ro&uri=true\")"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": ":class:`_engine.URL` object should impliement the",
        "fixed_code": ":class:`_engine.URL` object should implement the",
        "patch": "@@ -1156,7 +1156,7 @@ def __init__(self, url, kwargs):\n \n             The :class:`_engine.URL` object is now immutable, so a\n             :class:`_engine.CreateEnginePlugin` that needs to alter the\n-            :class:`_engine.URL` object should impliement the\n+            :class:`_engine.URL` object should implement the\n             :meth:`_engine.CreateEnginePlugin.update_url` method.\n \n         :param kwargs: The keyword arguments passed to"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "r\"\"\"Direct consructor for a new :class:`_orm.Mapper` object.",
        "fixed_code": "r\"\"\"Direct constructor for a new :class:`_orm.Mapper` object.",
        "patch": "@@ -154,7 +154,7 @@ def __init__(\n         legacy_is_orphan=False,\n         _compiled_cache_size=100,\n     ):\n-        r\"\"\"Direct consructor for a new :class:`_orm.Mapper` object.\n+        r\"\"\"Direct constructor for a new :class:`_orm.Mapper` object.\n \n         The :func:`_orm.mapper` function is normally invoked through the\n         use of the :class:`_orm.registry` object through either the"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "\"\"\"Seralizable object that tests for a name in c._annotations.\"\"\"",
        "fixed_code": "\"\"\"Serializable object that tests for a name in c._annotations.\"\"\"",
        "patch": "@@ -3650,7 +3650,7 @@ def col_to_bind(col):\n \n \n class _ColInAnnotations(object):\n-    \"\"\"Seralizable object that tests for a name in c._annotations.\"\"\"\n+    \"\"\"Serializable object that tests for a name in c._annotations.\"\"\"\n \n     __slots__ = (\"name\",)\n "
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "Basically used to apply a \"dont traverse\" annotation to a",
        "fixed_code": "Basically used to apply a \"don't traverse\" annotation to a",
        "patch": "@@ -306,7 +306,7 @@ def _shallow_annotate(element, annotations):\n     \"\"\"Annotate the given ClauseElement and copy its internals so that\n     internal objects refer to the new annotated object.\n \n-    Basically used to apply a \"dont traverse\" annotation to a\n+    Basically used to apply a \"don't traverse\" annotation to a\n     selectable, without digging throughout the whole\n     structure wasting time.\n     \"\"\""
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "and are generaly trying to get an empty SELECT statement as a",
        "fixed_code": "and are generally trying to get an empty SELECT statement as a",
        "patch": "@@ -542,7 +542,7 @@ def in_(self, other):\n \n           In this calling form, the expression renders an \"empty set\"\n           expression.  These expressions are tailored to individual backends\n-          and are generaly trying to get an empty SELECT statement as a\n+          and are generally trying to get an empty SELECT statement as a\n           subquery.  Such as on SQLite, the expression is::\n \n             WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "\"\"\"the oppopsite of \"sequences\", DB does not support sequences at",
        "fixed_code": "\"\"\"the opposite of \"sequences\", DB does not support sequences at",
        "patch": "@@ -496,7 +496,7 @@ def sequences(self):\n \n     @property\n     def no_sequences(self):\n-        \"\"\"the oppopsite of \"sequences\", DB does not support sequences at\n+        \"\"\"the opposite of \"sequences\", DB does not support sequences at\n         all.\"\"\"\n \n         return exclusions.NotPredicate(self.sequences)"
    },
    {
        "commit_id": "f04147d9490df68b1fe1bb53991062d82017f865",
        "commit_message": "Fix many spell glitches in docstrings and comments\n\nThese were revealed by running `pylint --disable all --enable spelling --spelling-dict en_US` over all sources.\n\nCloses: #5868\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5868\nPull-request-sha: bb249195d92e3b806e81ecf1192d5a1b3cd5db48\n\nChange-Id: I96080ec93a9fbd20ce21e9e16265b3c77f22bb14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f04147d9490df68b1fe1bb53991062d82017f865",
        "buggy_code": "Utimately we would need to rewrite our \"decorator\" routine completely",
        "fixed_code": "Ultimately we would need to rewrite our \"decorator\" routine completely",
        "patch": "@@ -362,7 +362,7 @@ def inspect_formatargspec(\n         Instead of introducing all the object-creation overhead and having\n         to reinvent from scratch, just copy their compatibility routine.\n \n-        Utimately we would need to rewrite our \"decorator\" routine completely\n+        Ultimately we would need to rewrite our \"decorator\" routine completely\n         which is not really worth it right now, until all Python 2.x support\n         is dropped.\n "
    },
    {
        "commit_id": "8860117c9655a4bdeafebab1c6ef12c6a6198e66",
        "commit_message": "introduce generalized decorator to prevent invalid method calls\n\nThis introduces the ``_exclusive_against()`` utility decorator\nthat can be used to prevent repeated invocations of methods that\ntypically should only be called once.\n\nAn informative error message is now raised for a selected set of DML\nmethods (currently all part of :class:`_dml.Insert` constructs) if they are\ncalled a second time, which would implicitly cancel out the previous\nsetting.  The methods altered include:\n:class:`_sqlite.Insert.on_conflict_do_update`,\n:class:`_sqlite.Insert.on_conflict_do_nothing` (SQLite),\n:class:`_postgresql.Insert.on_conflict_do_update`,\n:class:`_postgresql.Insert.on_conflict_do_nothing` (PostgreSQL),\n:class:`_mysql.Insert.on_duplicate_key_update` (MySQL)\n\nFixes: #5169\nChange-Id: I9278fa87cd3470dcf296ff96bb0fb17a3236d49d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8860117c9655a4bdeafebab1c6ef12c6a6198e66",
        "buggy_code": "exc.ArgumentError,",
        "fixed_code": "exc.InvalidRequestError,",
        "patch": "@@ -672,7 +672,7 @@ def test_update_ordered_then_nonordered(self):\n         stmt = table1.update().ordered_values((\"myid\", 1), (\"name\", \"d1\"))\n \n         assert_raises_message(\n-            exc.ArgumentError,\n+            exc.InvalidRequestError,\n             \"This statement already has ordered values present\",\n             stmt.values,\n             {\"myid\": 2, \"name\": \"d2\"},"
    },
    {
        "commit_id": "c5b4af959e13f8214121f62f322c668bb178d41f",
        "commit_message": "Guard against re-entrant autobegin in Core, ORM\n\nFixed bug in \"future\" version of :class:`.Engine` where emitting SQL during\nthe :meth:`.EngineEvents.do_begin` event hook would cause a re-entrant\ncondition due to autobegin, including the recipe documented for SQLite to\nallow for savepoints and serializable isolation support.\n\nFixed issue in new :class:`_orm.Session` similar to that of the\n:class:`_engine.Connection` where the new \"autobegin\" logic could be\ntripped into a re-entrant state if SQL were executed within the\n:meth:`.SessionEvents.after_transaction_create` event hook.\n\nAlso repair the new \"testing_engine\" pytest fixture to\nset up for \"future\" engine appropriately, which wasn't working\nleading to the test_execute.py tests not using the future\nengine since recent f1e96cb0874927a475d0c11139.\n\nFixes: #5845\nChange-Id: Ib2432d8c8bd753e24be60720ec47affb2df15a4a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5b4af959e13f8214121f62f322c668bb178d41f",
        "buggy_code": "url=None, options=None, future=False, asyncio=False",
        "fixed_code": "url=None, options=None, future=None, asyncio=False",
        "patch": "@@ -93,7 +93,7 @@ def testing_engine(self):\n         from . import engines\n \n         def gen_testing_engine(\n-            url=None, options=None, future=False, asyncio=False\n+            url=None, options=None, future=None, asyncio=False\n         ):\n             if options is None:\n                 options = {}"
    },
    {
        "commit_id": "038ee979985c5585287c5636bbfde607082f5130",
        "commit_message": "allow Executable to be accepted by Session.execute()\n\nFixed an issue where the API to create a custom executable SQL construct\nusing the ``sqlalchemy.ext.compiles`` extension according to the\ndocumentation that's been up for many years would no longer function if\nonly ``Executable, ClauseElement`` were used as the base classes,\nadditional classes were needed if wanting to use\n:meth:`_orm.Session.execute`. This has been resolved so that those extra\nclasses aren't needed.\n\nChange-Id: I99b8acd88515c2a52842d62974199121e64c0381",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/038ee979985c5585287c5636bbfde607082f5130",
        "buggy_code": "class Executable(Generative):",
        "fixed_code": "class Executable(roles.CoerceTextStatementRole, Generative):",
        "patch": "@@ -729,7 +729,7 @@ def _clone(self):\n         return c\n \n \n-class Executable(Generative):\n+class Executable(roles.CoerceTextStatementRole, Generative):\n     \"\"\"Mark a :class:`_expression.ClauseElement` as supporting execution.\n \n     :class:`.Executable` is a superclass for all \"statement\" types"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "options=dict(poolclass=pool.StaticPool)",
        "fixed_code": "options=dict(poolclass=pool.StaticPool, scope=\"class\"),",
        "patch": "@@ -293,7 +293,7 @@ def setup_bind(cls):\n             from sqlalchemy import pool\n \n             return engines.testing_engine(\n-                options=dict(poolclass=pool.StaticPool)\n+                options=dict(poolclass=pool.StaticPool, scope=\"class\"),\n             )\n         else:\n             return config.db"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup_class(cls):",
        "fixed_code": "def setup_test_class(cls):",
        "patch": "@@ -18,7 +18,7 @@ class CompileTest(fixtures.TestBase, AssertsExecutionResults):\n     __backend__ = True\n \n     @classmethod\n-    def setup_class(cls):\n+    def setup_test_class(cls):\n \n         global t1, t2, metadata\n         metadata = MetaData()"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -19,7 +19,7 @@\n class EnumTest(fixtures.TestBase):\n     __requires__ = (\"cpython\", \"python_profiling_backend\")\n \n-    def setup(self):\n+    def setup_test(self):\n         class SomeEnum(object):\n             # Implements PEP 435 in the minimal fashion needed by SQLAlchemy\n "
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -17,7 +17,7 @@ def rollback(self):\n         def close(self):\n             pass\n \n-    def setup(self):\n+    def setup_test(self):\n         # create a throwaway pool which\n         # has the effect of initializing\n         # class-level event listeners on Pool,"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def tearDown(self):",
        "fixed_code": "def teardown_test(self):",
        "patch": "@@ -13,7 +13,7 @@ class TestFixture(object):\n \n \n class TestInspection(fixtures.TestBase):\n-    def tearDown(self):\n+    def teardown_test(self):\n         for type_ in list(inspection._registrars):\n             if issubclass(type_, TestFixture):\n                 del inspection._registrars[type_]"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -1814,7 +1814,7 @@ def test_identity_object_no_options(self):\n \n \n class SchemaTest(fixtures.TestBase):\n-    def setup(self):\n+    def setup_test(self):\n         t = Table(\n             \"sometable\",\n             MetaData(),"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -31,7 +31,7 @@ class LegacySchemaAliasingTest(fixtures.TestBase, AssertsCompiledSQL):\n \n     \"\"\"\n \n-    def setup(self):\n+    def setup_test(self):\n         metadata = MetaData()\n         self.t1 = table(\n             \"t1\","
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -1115,7 +1115,7 @@ def test_case_sensitive_reflection_dual_case_references(\n class RawReflectionTest(fixtures.TestBase):\n     __backend__ = True\n \n-    def setup(self):\n+    def setup_test(self):\n         dialect = mysql.dialect()\n         self.parser = _reflection.MySQLTableDefinitionParser(\n             dialect, dialect.identifier_preparer"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setUp(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -1355,7 +1355,7 @@ def test_compile(self):\n class RegexpTest(fixtures.TestBase, testing.AssertsCompiledSQL):\n     __dialect__ = \"oracle\"\n \n-    def setUp(self):\n+    def setup_test(self):\n         self.table = table(\n             \"mytable\", column(\"myid\", Integer), column(\"name\", String)\n         )"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup(self):",
        "fixed_code": "def setup_test(self):",
        "patch": "@@ -27,7 +27,7 @@ class BakedTest(_fixtures.FixtureTest):\n     run_inserts = \"once\"\n     run_deletes = None\n \n-    def setup(self):\n+    def setup_test(self):\n         self.bakery = baked.bakery()\n \n "
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def teardown(self):",
        "fixed_code": "def teardown_test(self):",
        "patch": "@@ -426,7 +426,7 @@ class DefaultOnExistingTest(fixtures.TestBase, AssertsCompiledSQL):\n \n     __dialect__ = \"default\"\n \n-    def teardown(self):\n+    def teardown_test(self):\n         for cls in (Select, BindParameter):\n             deregister(cls)\n "
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup_class(cls):",
        "fixed_code": "def setup_test_class(cls):",
        "patch": "@@ -697,7 +697,7 @@ class SpecialObjectTest(fixtures.TestBase, AssertsCompiledSQL):\n     __dialect__ = \"default\"\n \n     @classmethod\n-    def setup_class(cls):\n+    def setup_test_class(cls):\n         from sqlalchemy import literal\n \n         symbols = (\"usd\", \"gbp\", \"cad\", \"eur\", \"aud\")"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def teardown(self):",
        "fixed_code": "def teardown_test(self):",
        "patch": "@@ -17,7 +17,7 @@\n \n \n class ConcurrentUseDeclMappingTest(fixtures.TestBase):\n-    def teardown(self):\n+    def teardown_test(self):\n         clear_mappers()\n \n     @classmethod"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def teardown(self):",
        "fixed_code": "def teardown_test(self):",
        "patch": "@@ -19,7 +19,7 @@\n class CompileTest(fixtures.ORMTest):\n     \"\"\"test various mapper compilation scenarios\"\"\"\n \n-    def teardown(self):\n+    def teardown_test(self):\n         clear_mappers()\n \n     def test_with_polymorphic(self):"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup_class(cls):",
        "fixed_code": "def setup_test_class(cls):",
        "patch": "@@ -26,7 +26,7 @@\n \n class _JoinFixtures(object):\n     @classmethod\n-    def setup_class(cls):\n+    def setup_test_class(cls):\n         m = MetaData()\n         cls.left = Table(\n             \"lft\","
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup_class(cls):",
        "fixed_code": "def setup_test_class(cls):",
        "patch": "@@ -1203,7 +1203,7 @@ def test_generative_cache_key_regen_w_del(self):\n \n class CompareAndCopyTest(CoreFixtures, fixtures.TestBase):\n     @classmethod\n-    def setup_class(cls):\n+    def setup_test_class(cls):\n         # TODO: we need to get dialects here somehow, perhaps in test_suite?\n         [\n             importlib.import_module(\"sqlalchemy.dialects.%s\" % d)"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def setup_class(cls):",
        "fixed_code": "def setup_test_class(cls):",
        "patch": "@@ -4306,7 +4306,7 @@ def test_dialect_specific_ddl(self):\n \n class KwargPropagationTest(fixtures.TestBase):\n     @classmethod\n-    def setup_class(cls):\n+    def setup_test_class(cls):\n         from sqlalchemy.sql.expression import ColumnClause, TableClause\n \n         class CatchCol(ColumnClause):"
    },
    {
        "commit_id": "f1e96cb0874927a475d0c111393b7861796dd758",
        "commit_message": "reinvent xdist hooks in terms of pytest fixtures\n\nTo allow the \"connection\" pytest fixture and others work\ncorrectly in conjunction with setup/teardown that expects\nto be external to the transaction, remove and prevent any usage\nof \"xdist\" style names that are hardcoded by pytest to run\ninside of fixtures, even function level ones.   Instead use\npytest autouse fixtures to implement our own\nr\"setup|teardown_test(?:_class)?\" methods so that we can ensure\nfunction-scoped fixtures are run within them.   A new more\nexplicit flow is set up within plugin_base and pytestplugin\nsuch that the order of setup/teardown steps, which there are now\nmany, is fully documented and controllable.   New granularity\nhas been added to the test teardown phase to distinguish\nbetween \"end of the test\" when lock-holding structures on\nconnections should be released to allow for table drops,\nvs. \"end of the test plus its teardown steps\" when we can\nperform final cleanup on connections and run assertions\nthat everything is closed out.\n\nFrom there we can remove most of the defensive \"tear down everything\"\nlogic inside of engines which for many years would frequently dispose\nof pools over and over again, creating for a broken and expensive\nconnection flow.  A quick test shows that running test/sql/ against\na single Postgresql engine with the new approach uses 75% fewer new\nconnections, creating 42 new connections total, vs. 164 new\nconnections total with the previous system.\n\nAs part of this, the new fixtures metadata/connection/future_connection\nhave been integrated such that they can be combined together\neffectively.  The fixture_session(), provide_metadata() fixtures\nhave been improved, including that fixture_session() now strongly\nreferences sessions which are explicitly torn down before\ntable drops occur afer a test.\n\nMajor changes have been made to the\nConnectionKiller such that it now features different \"scopes\" for\ntesting engines and will limit its cleanup to those testing\nengines corresponding to end of test, end of test class, or\nend of test session.   The system by which it tracks DBAPI\nconnections has been reworked, is ultimately somewhat similar to\nhow it worked before but is organized more clearly along\nwith the proxy-tracking logic.  A \"testing_engine\" fixture\nis also added that works as a pytest fixture rather than a\nstandalone function.  The connection cleanup logic should\nnow be very robust, as we now can use the same global\nconnection pools for the whole suite without ever disposing\nthem, while also running a query for PostgreSQL\nlocks remaining after every test and assert there are no open\ntransactions leaking between tests at all.  Additional steps\nare added that also accommodate for asyncio connections not\nexplicitly closed, as is the case for legacy sync-style\ntests as well as the async tests themselves.\n\nAs always, hundreds of tests are further refined to use the\nnew fixtures where problems with loose connections were identified,\nlargely as a result of the new PostgreSQL assertions,\nmany more tests have moved from legacy patterns into the newest.\n\nAn unfortunate discovery during the creation of this system is that\nautouse fixtures (as well as if they are set up by\n@pytest.mark.usefixtures) are not usable at our current scale with pytest\n4.6.11 running under Python 2.  It's unclear if this is due\nto the older version of pytest or how it implements itself for\nPython 2, as well as if the issue is CPU slowness or just large\nmemory use, but collecting the full span of tests takes over\na minute for a single process when any autouse fixtures are in\nplace and on CI the jobs just time out after ten minutes.\nSo at the moment this patch also reinvents a small version of\n\"autouse\" fixtures when py2k is running, which skips generating\nthe real fixture and instead uses two global pytest fixtures\n(which don't seem to impact performance) to invoke the\n\"autouse\" fixtures ourselves outside of pytest.\nThis will limit our ability to do more with fixtures\nuntil we can remove py2k support.\n\npy.test is still observed to be much slower in collection in the\n4.6.11 version compared to modern 6.2 versions, so add support for new\nTOX_POSTGRESQL_PY2K and TOX_MYSQL_PY2K environment variables that\nwill run the suite for fewer backends under Python 2.  For Python 3\npin pytest to modern 6.2 versions where performance for collection\nhas been improved greatly.\n\nIncludes the following improvements:\n\nFixed bug in asyncio connection pool where ``asyncio.TimeoutError`` would\nbe raised rather than :class:`.exc.TimeoutError`.  Also repaired the\n:paramref:`_sa.create_engine.pool_timeout` parameter set to zero when using\nthe async engine, which previously would ignore the timeout and block\nrather than timing out immediately as is the behavior with regular\n:class:`.QueuePool`.\n\nFor asyncio the connection pool will now also not interact\nat all with an asyncio connection whose ConnectionFairy is\nbeing garbage collected; a warning that the connection was\nnot properly closed is emitted and the connection is discarded.\nWithin the test suite the ConnectionKiller is now maintaining\nstrong references to all DBAPI connections and ensuring they\nare released when tests end, including those whose ConnectionFairy\nproxies are GCed.\n\nIdentified cx_Oracle.stmtcachesize as a major factor in Oracle\ntest scalability issues, this can be reset on a per-test basis\nrather than setting it to zero across the board.  the addition\nof this flag has resolved the long-standing oracle \"two task\"\nerror problem.\n\nFor SQL Server, changed the temp table style used by the\n\"suite\" tests to be the double-pound-sign, i.e. global,\nvariety, which is much easier to test generically.  There\nare already reflection tests that are more finely tuned\nto both styles of temp table within the mssql test\nsuite.  Additionally, added an extra step to the\n\"dropfirst\" mechanism for SQL Server that will remove\nall foreign key constraints first as some issues were\nobserved when using this flag when multiple schemas\nhad not been torn down.\n\nIdentified and fixed two subtle failure modes in the\nengine, when commit/rollback fails in a begin()\ncontext manager, the connection is explicitly closed,\nand when \"initialize()\" fails on the first new connection\nof a dialect, the transactional state on that connection\nis still rolled back.\n\nFixes: #5826\nFixes: #5827\nChange-Id: Ib1d05cb8c7cf84f9a4bfd23df397dc23c9329bfe",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1e96cb0874927a475d0c111393b7861796dd758",
        "buggy_code": "def teardown(self):",
        "fixed_code": "def teardown_test(self):",
        "patch": "@@ -4257,7 +4257,7 @@ def load(dialect_name):\n         with mock.patch(\"sqlalchemy.dialects.registry.load\", load):\n             yield\n \n-    def teardown(self):\n+    def teardown_test(self):\n         Index._kw_registry.clear()\n \n     def test_participating(self):"
    },
    {
        "commit_id": "5ba427f6daad4e7224267d11f7c6d99bd68f3d0e",
        "commit_message": "Repair async test refactor\n\nin I4940d184a4dc790782fcddfb9873af3cca844398 we reworked how async\ntests run but apparently the async tests in test/ext/asyncio\nare reporting success without being run.   This patch pushes\npytestplugin further so that it won't instrument any test\nor function overall that declares itself async. This removes\nthe need for the __async_wrap__ flag and also allows us to\nuse a more strict \"run_async_test\" function that always\nruns the asyncio event loop from the top.\n\nAlso start working asyncio into main testing suite.\n\nChange-Id: If7144e951a9db67eb7ea73b377f81c4440d39819",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5ba427f6daad4e7224267d11f7c6d99bd68f3d0e",
        "buggy_code": "__slots__ = \"_slots_dispatch\"",
        "fixed_code": "__slots__ = \"_slots_dispatch\", \"__weakref__\"",
        "patch": "@@ -41,7 +41,7 @@ def create_async_engine(*arg, **kw):\n \n \n class AsyncConnectable:\n-    __slots__ = \"_slots_dispatch\"\n+    __slots__ = \"_slots_dispatch\", \"__weakref__\"\n \n \n @util.create_proxy_methods("
    },
    {
        "commit_id": "77c9534dcaf3723f7b2baf42442eda3e1d8c3332",
        "commit_message": "Major revisals to lambdas\n\n1. Improve coercions._deep_is_literal to check sequences\nfor clause elements, thus allowing a phrase like\nlambda: col.in_([literal(\"x\"), literal(\"y\")]) to be handled\n\n2. revise closure variable caching completely.   All variables\nentering must be part of a closure cache key or rejected.\nonly objects that can be resolved to HasCacheKey or FunctionType\nare accepted; all other types are rejected.  This adds a high\ndegree of strictness to lambdas and will make them a little more\nawkward to use in some cases, however prevents several classes\nof critical issues:\n\na. previously, a lambda that had an expression derived from\nsome kind of state, like \"self.x\", or \"execution_context.session.foo\"\nwould produce a closure cache key from \"self\" or \"execution_context\",\nobjects that can very well be per-execution and would therefore\ncause a AnalyzedFunction objects to overflow. (memory won't leak\nas it looks like an LRUCache is already used for these)\n\nb. a lambda, such as one used within DeferredLamdaElement, that\nproduces different SQL expressions based on the arguments\n(which is in fact what it's supposed to do), however it would\nthrough the use of conditionals produce different bound parameter\ncombinations, leading to literal parameters not tracked properly.\nThese are now rejected as uncacheable whereas previously they would\nagain be part of the closure cache key, causing an overflow of\nAnalyizedFunction objects.\n\n3. Ensure non-mapped mixins are handled correctly by\nwith_loader_criteria().\n\n4. Fixed bug in lambda SQL system where we are not supposed to allow a Python\nfunction to be embedded in the lambda, since we can't predict a bound value\nfrom it.   While there was an error condition added for this, it was not\ntested and wasn't working; an informative error is now raised.\n\n5. new docs for lambdas\n\n6. consolidated changelog for all of these\n\nFixes: #5760\nFixes: #5765\nFixes: #5766\nFixes: #5768\nFixes: #5770\nChange-Id: Iedaa636c3225fad496df23b612c516c8ab247ab7",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/77c9534dcaf3723f7b2baf42442eda3e1d8c3332",
        "buggy_code": "@profiling.function_call_count()",
        "fixed_code": "@profiling.function_call_count(warmup=1)",
        "patch": "@@ -703,7 +703,7 @@ def test_round_trip_results(self):\n         # this is because the test was previously making use of the same\n         # loader option state repeatedly without rebuilding it.\n \n-        @profiling.function_call_count()\n+        @profiling.function_call_count(warmup=1)\n         def go():\n             for i in range(100):\n                 obj = q.all()"
    },
    {
        "commit_id": "ed20e2f95f52a072d0c6b09af095b4cda0436d38",
        "commit_message": "Fixes for lambda expressions and relationship loaders\n\nFixed bug in lambda SQL feature, used by ORM\n:meth:`_orm.with_loader_criteria` as well as available generally in the SQL\nexpression language, where assigning a boolean value True/False to a\nvariable would cause the query-time expression calculation to fail, as it\nwould produce a SQL expression not compatible with a bound value.\n\nFixed issue where the :attr:`_orm.ORMExecuteState.is_relationship_load`\nparameter would not be set correctly for many lazy loads, all\nselectinloads, etc.  The flag is essential in order to test if options\nshould be added to statements or if they would already have been propagated\nvia relationship loads.\n\nFixes: #5763\nFixes: #5764\nChange-Id: I66aafbef193f892ff75ede0670698647b7475482",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ed20e2f95f52a072d0c6b09af095b4cda0436d38",
        "buggy_code": "if isinstance(opts, context.ORMCompileState.default_compile_options):",
        "fixed_code": "if opts.isinstance(context.ORMCompileState.default_compile_options):",
        "patch": "@@ -275,7 +275,7 @@ def _orm_compile_options(self):\n         if not self.is_select:\n             return None\n         opts = self.statement._compile_options\n-        if isinstance(opts, context.ORMCompileState.default_compile_options):\n+        if opts.isinstance(context.ORMCompileState.default_compile_options):\n             return opts\n         else:\n             return None"
    },
    {
        "commit_id": "1a3def008ec84e8caa49461ae947ed00078f72ae",
        "commit_message": "Merge \"Fix documentation link in query with_for_update\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a3def008ec84e8caa49461ae947ed00078f72ae",
        "buggy_code": ":meth:`_expression.SelectBase.with_for_update`.",
        "fixed_code": ":meth:`_expression.GenerativeSelect.with_for_update`.",
        "patch": "@@ -1509,7 +1509,7 @@ def with_for_update(\n         ``FOR UPDATE`` clause.\n \n         The behavior of this method is identical to that of\n-        :meth:`_expression.SelectBase.with_for_update`.\n+        :meth:`_expression.GenerativeSelect.with_for_update`.\n         When called with no arguments,\n         the resulting ``SELECT`` statement will have a ``FOR UPDATE`` clause\n         appended.  When additional arguments are specified, backend-specific"
    },
    {
        "commit_id": "80050b8a19a324e84fbf6b3f81e82f377305b044",
        "commit_message": "Fix documentation link in query with_for_update\n\nChange-Id: I4e9a97905d42686c911da81a25f023519328a8a3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/80050b8a19a324e84fbf6b3f81e82f377305b044",
        "buggy_code": ":meth:`_expression.SelectBase.with_for_update`.",
        "fixed_code": ":meth:`_expression.GenerativeSelect.with_for_update`.",
        "patch": "@@ -1509,7 +1509,7 @@ def with_for_update(\n         ``FOR UPDATE`` clause.\n \n         The behavior of this method is identical to that of\n-        :meth:`_expression.SelectBase.with_for_update`.\n+        :meth:`_expression.GenerativeSelect.with_for_update`.\n         When called with no arguments,\n         the resulting ``SELECT`` statement will have a ``FOR UPDATE`` clause\n         appended.  When additional arguments are specified, backend-specific"
    },
    {
        "commit_id": "a4ac0058c119d63aeccbe3793acf3deb22ffd11c",
        "commit_message": "Fix typo in sessionmaker example: s/wih/with\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nFix typo in sessionmaker documentation example: s/wih/with\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5730\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5730\nPull-request-sha: 2759eefbf32862be464ecd5b1e91163c7773df39\n\nChange-Id: I6226802a598e53f12dbdb97470deaa0f47789faf",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a4ac0058c119d63aeccbe3793acf3deb22ffd11c",
        "buggy_code": "wih Session.begin() as session:",
        "fixed_code": "with Session.begin() as session:",
        "patch": "@@ -3766,7 +3766,7 @@ class sessionmaker(_SessionClassMethods):\n \n         Session = sessionmaker(engine)\n \n-        wih Session.begin() as session:\n+        with Session.begin() as session:\n             session.add(some_object)\n             session.add(some_other_object)\n         # commits transaction, closes session"
    },
    {
        "commit_id": "3241e3ca728c883adb4f8e859c77168c3361d957",
        "commit_message": "Don't emit warnings on descriptor access\n\nThis commit is revising 5162f2bc5fc0ac239f26a76fc9f0c2, which\nwhen I did it felt a little rushed but I couldn't find anything\nwrong.  Well here we are :).\n\nFixed issue where a :class:`.RemovedIn20Warning` would erroneously emit\nwhen the ``.bind`` attribute were accessed internally on objects,\nparticularly when stringifying a SQL construct.\n\nAlter the deprecated() decorator so that we can use it just to add\ndocstring warnings but not actually warn when the function is\naccessed, adding new argument enable_warnings that can be\nset to False.\n\nAdded a safety feature to deprecated_20() that will disallow an\n\":attr:\" from proceeding if enable_warnings=False isn't present,\nunless there's an extra flag\nwarn_on_attribute_access, since we want Session.transaction to\nemit a deprecation warning.  This is a little hacky but it's essentially\nmodifying the decorator to require a positive assertion that\na deprecation decorator on a descriptor should actually warn\non access.\n\nRemove the warning filter for session.transaction and get\ntests to pass to ensure this is not also being called\ninternally.\n\nAdded tests to ensure that common places .bind can be passed\nas a parameter definitely warn as I was not able to find\nthis otherwise.\n\nFixes: #5717\nChange-Id: Ia586b4f9ee6b212f3a71104b1caf40b5edd399e2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3241e3ca728c883adb4f8e859c77168c3361d957",
        "buggy_code": "transaction = sess.transaction",
        "fixed_code": "transaction = sess._legacy_transaction()",
        "patch": "@@ -405,7 +405,7 @@ def test_bound_connection(self):\n         c = testing.db.connect()\n         sess = create_session(bind=c)\n         sess.begin()\n-        transaction = sess.transaction\n+        transaction = sess._legacy_transaction()\n         u = User(name=\"u1\")\n         sess.add(u)\n         sess.flush()"
    },
    {
        "commit_id": "3241e3ca728c883adb4f8e859c77168c3361d957",
        "commit_message": "Don't emit warnings on descriptor access\n\nThis commit is revising 5162f2bc5fc0ac239f26a76fc9f0c2, which\nwhen I did it felt a little rushed but I couldn't find anything\nwrong.  Well here we are :).\n\nFixed issue where a :class:`.RemovedIn20Warning` would erroneously emit\nwhen the ``.bind`` attribute were accessed internally on objects,\nparticularly when stringifying a SQL construct.\n\nAlter the deprecated() decorator so that we can use it just to add\ndocstring warnings but not actually warn when the function is\naccessed, adding new argument enable_warnings that can be\nset to False.\n\nAdded a safety feature to deprecated_20() that will disallow an\n\":attr:\" from proceeding if enable_warnings=False isn't present,\nunless there's an extra flag\nwarn_on_attribute_access, since we want Session.transaction to\nemit a deprecation warning.  This is a little hacky but it's essentially\nmodifying the decorator to require a positive assertion that\na deprecation decorator on a descriptor should actually warn\non access.\n\nRemove the warning filter for session.transaction and get\ntests to pass to ensure this is not also being called\ninternally.\n\nAdded tests to ensure that common places .bind can be passed\nas a parameter definitely warn as I was not able to find\nthis otherwise.\n\nFixes: #5717\nChange-Id: Ia586b4f9ee6b212f3a71104b1caf40b5edd399e2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3241e3ca728c883adb4f8e859c77168c3361d957",
        "buggy_code": "assert sess.transaction is not None",
        "fixed_code": "assert sess.in_transaction()",
        "patch": "@@ -501,7 +501,7 @@ def test_deleted_flag(self):\n         sess.flush()\n         assert u1 not in sess\n         assert_raises(sa.exc.InvalidRequestError, sess.add, u1)\n-        assert sess.transaction is not None\n+        assert sess.in_transaction()\n         sess.rollback()\n         assert u1 in sess\n "
    },
    {
        "commit_id": "3241e3ca728c883adb4f8e859c77168c3361d957",
        "commit_message": "Don't emit warnings on descriptor access\n\nThis commit is revising 5162f2bc5fc0ac239f26a76fc9f0c2, which\nwhen I did it felt a little rushed but I couldn't find anything\nwrong.  Well here we are :).\n\nFixed issue where a :class:`.RemovedIn20Warning` would erroneously emit\nwhen the ``.bind`` attribute were accessed internally on objects,\nparticularly when stringifying a SQL construct.\n\nAlter the deprecated() decorator so that we can use it just to add\ndocstring warnings but not actually warn when the function is\naccessed, adding new argument enable_warnings that can be\nset to False.\n\nAdded a safety feature to deprecated_20() that will disallow an\n\":attr:\" from proceeding if enable_warnings=False isn't present,\nunless there's an extra flag\nwarn_on_attribute_access, since we want Session.transaction to\nemit a deprecation warning.  This is a little hacky but it's essentially\nmodifying the decorator to require a positive assertion that\na deprecation decorator on a descriptor should actually warn\non access.\n\nRemove the warning filter for session.transaction and get\ntests to pass to ensure this is not also being called\ninternally.\n\nAdded tests to ensure that common places .bind can be passed\nas a parameter definitely warn as I was not able to find\nthis otherwise.\n\nFixes: #5717\nChange-Id: Ia586b4f9ee6b212f3a71104b1caf40b5edd399e2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3241e3ca728c883adb4f8e859c77168c3361d957",
        "buggy_code": "assert session.transaction is None",
        "fixed_code": "assert session._legacy_transaction() is None",
        "patch": "@@ -3307,7 +3307,7 @@ def test_close_transaction_on_commit_fail(self):\n             assert False\n         except Exception:\n             # Flush needs to rollback also when commit fails\n-            assert session.transaction is None\n+            assert session._legacy_transaction() is None\n \n         # todo: on 8.3 at least, the failed commit seems to close the cursor?\n         # needs investigation.  leaving in the DDL above now to help verify"
    },
    {
        "commit_id": "585e38cd4317f41d1cf1fa384b094b64f72fe0f8",
        "commit_message": "s/craete/create/g\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\nit's a typo fix\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [x] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5689\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5689\nPull-request-sha: 3823b2552da2a7b7a345979ad6283d848c0ec7a5\n\nChange-Id: I170e7bea60182ebec8867499b2ea171d813fc49a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/585e38cd4317f41d1cf1fa384b094b64f72fe0f8",
        "buggy_code": "in conjunction with :func:`_sa.craete_engine`::",
        "fixed_code": "in conjunction with :func:`_sa.create_engine`::",
        "patch": "@@ -28,7 +28,7 @@\n an ad-hoc event loop.  This mode of operation is of **limited use**\n and is for special testing scenarios only.  The mode can be enabled by\n adding the SQLAlchemy-specific flag ``async_fallback`` to the URL\n-in conjunction with :func:`_sa.craete_engine`::\n+in conjunction with :func:`_sa.create_engine`::\n \n     # for testing purposes only; do not use in production!\n     engine = create_engine(\"postgresql+asyncpg://user:pass@hostname/dbname?async_fallback=true\")"
    },
    {
        "commit_id": "f016c1ac7f93d2f759aff53ec1494658efd7b496",
        "commit_message": "Reduce import time overhead\n\n* Fix subclass traversals to not run classes multiple times\n\n* switch compiler visitor to use an attrgetter, to avoid\n  an eval() at startup time\n\n* don't pre-generate traversal functions, there's lots of these\n  which are expensive to generate at once and most applications\n  won't use them all; have it generate them on first use instead\n\n* Some ideas about removing asyncio imports, they don't seem to\n  be too signficant, apply some more simplicity to the overall\n  \"greenlet fallback\" situation\n\nFixes: #5681\nChange-Id: Ib564ddaddb374787ce3e11ff48026e99ed570933",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f016c1ac7f93d2f759aff53ec1494658efd7b496",
        "buggy_code": ":param case_sensitive=True: if False, result column names",
        "fixed_code": ":param case_sensitive: if False, result column names",
        "patch": "@@ -92,7 +92,7 @@ def create_engine(url, **kwargs):\n \n         :ref:`connections_toplevel`\n \n-    :param case_sensitive=True: if False, result column names\n+    :param case_sensitive: if False, result column names\n        will match in a case-insensitive fashion, that is,\n        ``row['SomeColumn']``.\n "
    },
    {
        "commit_id": "f016c1ac7f93d2f759aff53ec1494658efd7b496",
        "commit_message": "Reduce import time overhead\n\n* Fix subclass traversals to not run classes multiple times\n\n* switch compiler visitor to use an attrgetter, to avoid\n  an eval() at startup time\n\n* don't pre-generate traversal functions, there's lots of these\n  which are expensive to generate at once and most applications\n  won't use them all; have it generate them on first use instead\n\n* Some ideas about removing asyncio imports, they don't seem to\n  be too signficant, apply some more simplicity to the overall\n  \"greenlet fallback\" situation\n\nFixes: #5681\nChange-Id: Ib564ddaddb374787ce3e11ff48026e99ed570933",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f016c1ac7f93d2f759aff53ec1494658efd7b496",
        "buggy_code": "@profiling.function_call_count()",
        "fixed_code": "@profiling.function_call_count(warmup=1)",
        "patch": "@@ -864,7 +864,7 @@ def test_fetch_results(self):\n \n         from sqlalchemy.orm.context import ORMCompileState\n \n-        @profiling.function_call_count()\n+        @profiling.function_call_count(warmup=1)\n         def go():\n             for i in range(100):\n                 # NOTE: this test was broken in"
    },
    {
        "commit_id": "b0e6dccfb60cb900e327ae8ff6632e8c3339c53d",
        "commit_message": "Fix wheel generation\n\nAvoid passing LD_LIBRARY_PATH variable to the docker image used\nto generate the wheels\n\nChange-Id: I418a9574a7f49695984b1c68c997fc02f0450c12",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b0e6dccfb60cb900e327ae8ff6632e8c3339c53d",
        "buggy_code": "__version__ = '1.4.0b2'",
        "fixed_code": "__version__ = \"1.4.0b2\"",
        "patch": "@@ -126,7 +126,7 @@\n from .types import VARCHAR  # noqa\n \n \n-__version__ = '1.4.0b2'\n+__version__ = \"1.4.0b2\"\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "3e49b8d0519aa024842206a2fb664a4ad83796d6",
        "commit_message": "Ensure no compiler visit method tries to access .statement\n\nFixed structural compiler issue where some constructs such as MySQL /\nPostgreSQL \"on conflict / on duplicate key\" would rely upon the state of\nthe :class:`_sql.Compiler` object being fixed against their statement as\nthe top level statement, which would fail in cases where those statements\nare branched from a different context, such as a DDL construct linked to a\nSQL statement.\n\nFixes: #5656\nChange-Id: I568bf40adc7edcf72ea6c7fd6eb9d07790de189e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3e49b8d0519aa024842206a2fb664a4ad83796d6",
        "buggy_code": "self.statement.table.name,",
        "fixed_code": "self.current_executable.table.name,",
        "patch": "@@ -2101,7 +2101,7 @@ def visit_on_conflict_do_update(self, on_conflict, **kw):\n                 \"Additional column names not matching \"\n                 \"any column keys in table '%s': %s\"\n                 % (\n-                    self.statement.table.name,\n+                    self.current_executable.table.name,\n                     (\", \".join(\"'%s'\" % c for c in set_parameters)),\n                 )\n             )"
    },
    {
        "commit_id": "296c84313ab29bf9599634f38caaf7dd092e4e23",
        "commit_message": "Ensure escaping of percent signs in columns, parameters\n\nImproved support for column names that contain percent signs in the string,\nincluding repaired issues involving anoymous labels that also embedded a\ncolumn name with a percent sign in it, as well as re-established support\nfor bound parameter names with percent signs embedded on the psycopg2\ndialect, using a late-escaping process similar to that used by the\ncx_Oracle dialect.\n\n* Added new constructor for _anonymous_label() that ensures incoming\n  string tokens based on column or table names will have percent\n  signs escaped; abstracts away the format of the label.\n\n* generalized cx_Oracle's quoted_bind_names facility into the compiler\n  itself, and leveraged this for the psycopg2 dialect's issue with\n  percent signs in names as well.  the parameter substitution is now\n  integrated with compiler.construct_parameters() as well as the\n  recently reworked set_input_sizes(), reducing verbosity in the\n  cx_Oracle dialect.\n\nFixes: #5653\n\nChange-Id: Ia2ad13ea68b4b0558d410026e5a33f5cb3fbab2c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/296c84313ab29bf9599634f38caaf7dd092e4e23",
        "buggy_code": "name = _anonymous_label(\"%%(%d %s)s\" % (id(self), name or \"anon\"))",
        "fixed_code": "name = _anonymous_label.safe_construct(id(self), name or \"anon\")",
        "patch": "@@ -1432,7 +1432,7 @@ def _init(self, selectable, name=None):\n                 name = getattr(selectable, \"name\", None)\n                 if isinstance(name, _anonymous_label):\n                     name = None\n-            name = _anonymous_label(\"%%(%d %s)s\" % (id(self), name or \"anon\"))\n+            name = _anonymous_label.safe_construct(id(self), name or \"anon\")\n         self.name = name\n \n     def _refresh_for_new_column(self, column):"
    },
    {
        "commit_id": "296c84313ab29bf9599634f38caaf7dd092e4e23",
        "commit_message": "Ensure escaping of percent signs in columns, parameters\n\nImproved support for column names that contain percent signs in the string,\nincluding repaired issues involving anoymous labels that also embedded a\ncolumn name with a percent sign in it, as well as re-established support\nfor bound parameter names with percent signs embedded on the psycopg2\ndialect, using a late-escaping process similar to that used by the\ncx_Oracle dialect.\n\n* Added new constructor for _anonymous_label() that ensures incoming\n  string tokens based on column or table names will have percent\n  signs escaped; abstracts away the format of the label.\n\n* generalized cx_Oracle's quoted_bind_names facility into the compiler\n  itself, and leveraged this for the psycopg2 dialect's issue with\n  percent signs in names as well.  the parameter substitution is now\n  integrated with compiler.construct_parameters() as well as the\n  recently reworked set_input_sizes(), reducing verbosity in the\n  cx_Oracle dialect.\n\nFixes: #5653\n\nChange-Id: Ia2ad13ea68b4b0558d410026e5a33f5cb3fbab2c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/296c84313ab29bf9599634f38caaf7dd092e4e23",
        "buggy_code": "def test_foo(self):",
        "fixed_code": "def test_union_alias_misc(self):",
        "patch": "@@ -740,7 +740,7 @@ def test_union_of_text(self):\n         assert u2.corresponding_column(s1.selected_columns.col1) is u2.c.col1\n         assert u2.corresponding_column(s2.selected_columns.col1) is u2.c.col1\n \n-    def test_foo(self):\n+    def test_union_alias_misc(self):\n         s1 = select(table1.c.col1, table1.c.col2)\n         s2 = select(table1.c.col2, table1.c.col1)\n "
    },
    {
        "commit_id": "9e82f32f274e649b04740c819d21ba232c89cfff",
        "commit_message": "Deprecate duplicated column names in Table definition\n\nThe :class:`_schema.Table` class now raises a deprecation warning\nwhen columns with the same name are defined. To replace a column a new\nparameter :paramref:`_schema.Table.append_column.replace_existing` was\nadded to the :meth:`_schema.Table.append_column` method.\n\nThe :meth:`_expression.ColumnCollection.contains_column` will now\nraises an error when called with a string, suggesting the caller\nto use ``in`` instead.\n\nCo-authored-by: Federico Caselli <cfederico87@gmail.com>\nChange-Id: I1d58c8ebe081079cb669e7ead60886ffc1b1a7f5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9e82f32f274e649b04740c819d21ba232c89cfff",
        "buggy_code": "def _set_parent(self, table):",
        "fixed_code": "def _set_parent(self, table, **kw):",
        "patch": "@@ -205,7 +205,7 @@ def __init__(self, *elements, **kw):\n         if where is not None:\n             self.where = coercions.expect(roles.StatementOptionRole, where)\n \n-    def _set_parent(self, table):\n+    def _set_parent(self, table, **kw):\n         super(ExcludeConstraint, self)._set_parent(table)\n \n         self._render_exprs = ["
    },
    {
        "commit_id": "9e82f32f274e649b04740c819d21ba232c89cfff",
        "commit_message": "Deprecate duplicated column names in Table definition\n\nThe :class:`_schema.Table` class now raises a deprecation warning\nwhen columns with the same name are defined. To replace a column a new\nparameter :paramref:`_schema.Table.append_column.replace_existing` was\nadded to the :meth:`_schema.Table.append_column` method.\n\nThe :meth:`_expression.ColumnCollection.contains_column` will now\nraises an error when called with a string, suggesting the caller\nto use ``in`` instead.\n\nCo-authored-by: Federico Caselli <cfederico87@gmail.com>\nChange-Id: I1d58c8ebe081079cb669e7ead60886ffc1b1a7f5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9e82f32f274e649b04740c819d21ba232c89cfff",
        "buggy_code": "table.append_column(col)",
        "fixed_code": "table.append_column(col, replace_existing=True)",
        "patch": "@@ -898,7 +898,7 @@ def _reflect_column(\n \n         if col.key in table.primary_key:\n             col.primary_key = True\n-        table.append_column(col)\n+        table.append_column(col, replace_existing=True)\n \n     def _reflect_col_sequence(self, col_d, colargs):\n         if \"sequence\" in col_d:"
    },
    {
        "commit_id": "9e82f32f274e649b04740c819d21ba232c89cfff",
        "commit_message": "Deprecate duplicated column names in Table definition\n\nThe :class:`_schema.Table` class now raises a deprecation warning\nwhen columns with the same name are defined. To replace a column a new\nparameter :paramref:`_schema.Table.append_column.replace_existing` was\nadded to the :meth:`_schema.Table.append_column` method.\n\nThe :meth:`_expression.ColumnCollection.contains_column` will now\nraises an error when called with a string, suggesting the caller\nto use ``in`` instead.\n\nCo-authored-by: Federico Caselli <cfederico87@gmail.com>\nChange-Id: I1d58c8ebe081079cb669e7ead60886ffc1b1a7f5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9e82f32f274e649b04740c819d21ba232c89cfff",
        "buggy_code": "def append_column(self, c):",
        "fixed_code": "def append_column(self, c, **kw):",
        "patch": "@@ -2167,7 +2167,7 @@ def description(self):\n         else:\n             return self.name.encode(\"ascii\", \"backslashreplace\")\n \n-    def append_column(self, c):\n+    def append_column(self, c, **kw):\n         existing = c.table\n         if existing is not None and existing is not self:\n             raise exc.ArgumentError("
    },
    {
        "commit_id": "20ae8c7726297f1bf105b6df18d9bec0cb961acf",
        "commit_message": "Address minor comments from previous changes\n\nChange how pypy is detected. From I0952e54ed9af2952ea340be1945311376ffc1ad2\nFix typos. From Ibb5871a457c0555f82b37e354e7787d15575f1f7\n\nChange-Id: I9657e602267590f10a74df27a84e4292da94c30a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/20ae8c7726297f1bf105b6df18d9bec0cb961acf",
        "buggy_code": "is currently implemented for Oracle, PostgreSQL, MSSSQL.",
        "fixed_code": "is currently implemented for Oracle, PostgreSQL, MSSQL.",
        "patch": "@@ -3044,7 +3044,7 @@ def fetch(self, count, with_ties=False, percent=False):\n         This is a numeric value which usually renders as\n         ``FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH TIES}``\n         expression in the resulting select. This functionality is\n-        is currently implemented for Oracle, PostgreSQL, MSSSQL.\n+        is currently implemented for Oracle, PostgreSQL, MSSQL.\n \n         Use :meth:`_sql.GenerativeSelect.offset` to specify the offset.\n "
    },
    {
        "commit_id": "20ae8c7726297f1bf105b6df18d9bec0cb961acf",
        "commit_message": "Address minor comments from previous changes\n\nChange how pypy is detected. From I0952e54ed9af2952ea340be1945311376ffc1ad2\nFix typos. From Ibb5871a457c0555f82b37e354e7787d15575f1f7\n\nChange-Id: I9657e602267590f10a74df27a84e4292da94c30a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/20ae8c7726297f1bf105b6df18d9bec0cb961acf",
        "buggy_code": "pypy = hasattr(sys, \"pypy_version_info\")",
        "fixed_code": "pypy = platform.python_implementation() == \"PyPy\"",
        "patch": "@@ -20,7 +20,7 @@\n py36 = sys.version_info >= (3, 6)\n py3k = sys.version_info >= (3, 0)\n py2k = sys.version_info < (3, 0)\n-pypy = hasattr(sys, \"pypy_version_info\")\n+pypy = platform.python_implementation() == \"PyPy\"\n \n \n cpython = platform.python_implementation() == \"CPython\""
    },
    {
        "commit_id": "cda023bbe391d175c80c4d82196538b42575d937",
        "commit_message": "dont use uninstrument event to dispose registry entry\n\nsince 450f5c0d6519a439f4025c3892fe4c we've been seeing\nerrors during the uninstrument_class event where first\nwe saw an internal weakref being collected earlier than seen,\nthen fixing that we saw the listener collection changing during\niteration for similar reasons.\n\nwe would assume the issue is because of the interaction between\nmapper / instrumentation/ registry during a test teardown\nand the usage of the uninstrument_class event within this\ninteraction.   this interaction is too fundamental to be\nrelying upon this event in any case and when I wrote this\nnew code i was planning on changing that part in any case,\nI just forgot.\n\nChange-Id: I15744e01bb4d3349bfd529593ebd23eae658eaab",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cda023bbe391d175c80c4d82196538b42575d937",
        "buggy_code": "def _dispose_declarative_artifacts(self, cls):",
        "fixed_code": "def _dispose_cls(self, cls):",
        "patch": "@@ -454,7 +454,7 @@ class that has no ``__init__`` of its own.  Defaults to an\n         self.metadata = lcl_metadata\n         self.constructor = constructor\n \n-    def _dispose_declarative_artifacts(self, cls):\n+    def _dispose_cls(self, cls):\n         clsregistry.remove_class(cls.__name__, cls, self._class_registry)\n \n     def generate_base("
    },
    {
        "commit_id": "0d1efeec475621b5c2c2aca0632b02edef54c1a6",
        "commit_message": "Raise if unique() not applied to 2.0 joined eager load results\n\nThe automatic uniquing of rows on the client side is turned off for the new\n:term:`2.0 style` of ORM querying.  This improves both clarity and\nperformance.  However, uniquing of rows on the client side is generally\nnecessary when using joined eager loading for collections, as there\nwill be duplicates of the primary entity for each element in the\ncollection because a join was used.  This uniquing must now be manually\nenabled and can be achieved using the new\n:meth:`_engine.Result.unique` modifier.   To avoid silent failure, the ORM\nexplicitly requires the method be called when the result of an ORM\nquery in 2.0 style makes use of joined load collections.    The newer\n:func:`_orm.selectinload` strategy is likely preferable for eager loading\nof collections in any case.\n\nThis changeset also fixes an issue where ORM-style \"single entity\"\nresults would not apply unique() correctly if results were returned\nas tuples.\n\nFixes: #4395\nChange-Id: Ie62e0cb68ef2a6d2120e968b79575a70d057212e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0d1efeec475621b5c2c2aca0632b02edef54c1a6",
        "buggy_code": "list(obj)",
        "fixed_code": "list(obj.unique())",
        "patch": "@@ -893,7 +893,7 @@ def go():\n                 obj = ORMCompileState.orm_setup_cursor_result(\n                     sess, compile_state.statement, {}, exec_opts, {}, r,\n                 )\n-                list(obj)\n+                list(obj.unique())\n                 sess.close()\n \n         go()"
    },
    {
        "commit_id": "0d1efeec475621b5c2c2aca0632b02edef54c1a6",
        "commit_message": "Raise if unique() not applied to 2.0 joined eager load results\n\nThe automatic uniquing of rows on the client side is turned off for the new\n:term:`2.0 style` of ORM querying.  This improves both clarity and\nperformance.  However, uniquing of rows on the client side is generally\nnecessary when using joined eager loading for collections, as there\nwill be duplicates of the primary entity for each element in the\ncollection because a join was used.  This uniquing must now be manually\nenabled and can be achieved using the new\n:meth:`_engine.Result.unique` modifier.   To avoid silent failure, the ORM\nexplicitly requires the method be called when the result of an ORM\nquery in 2.0 style makes use of joined load collections.    The newer\n:func:`_orm.selectinload` strategy is likely preferable for eager loading\nof collections in any case.\n\nThis changeset also fixes an issue where ORM-style \"single entity\"\nresults would not apply unique() correctly if results were returned\nas tuples.\n\nFixes: #4395\nChange-Id: Ie62e0cb68ef2a6d2120e968b79575a70d057212e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0d1efeec475621b5c2c2aca0632b02edef54c1a6",
        "buggy_code": "s.execute(stmt).scalars().all()",
        "fixed_code": "s.execute(stmt).unique().scalars().all()",
        "patch": "@@ -909,7 +909,7 @@ def test_populate_existing_future(self):\n             .execution_options(populate_existing=True)\n         )\n \n-        s.execute(stmt).scalars().all()\n+        s.execute(stmt).unique().scalars().all()\n \n         assert u.addresses[0].email_address == \"jack@bean.com\"\n         assert u.orders[1].items[2].description == \"item 5\""
    },
    {
        "commit_id": "f0f08db5715e41cc08e57dbc76a85300bd68f8de",
        "commit_message": "Complete deprecation of from_self()\n\nFor most from_self() tests, move them into\ntest/orm/test_deprecated.py and replace the existing\ntest with one that uses aliased() plus a subquery.\nThis then revealed a few more issues.\n\nRelated items:\n\n* Added slice() method to GenerativeSelect, to match that\n  of orm.Query and to make possible migration of one of the\n  from_self() tests.  moved the utility functions used for this\n  from orm/util into sql/util.\n\n* repairs a caching issue related to subqueryload\n  where information being derived from the cached path info\n  was mixing up with query information based on the per-query\n  state, specifically an AliasedClass that is per query.\n\n* for the above issue, it seemed like path_registry maybe\n  had to change so that it represents AliasedClass objects\n  as their cache key rather than on identity, but it wasn't\n  needed.  still seems like it would be more correct.\n\n* enhances the error message raised by coercions for a case\n  such as when an AliasedClass holds onto a select() object\n  and not a subquery(); will name the original and resolved\n  object for clarity  (although how is AliasedClass able to\n  accept a Select() object in the first place?)\n\n* Added _set_propagate_attrs() to Query so that again if\n  it's passed to AliasedClass, it doesn't raise an error\n  during coercion, but again maybe that should also be\n  rejected up front\n\nFixes: #5368\nChange-Id: I5912aa611d899acc87a75eb5ee9f95990592f210",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f0f08db5715e41cc08e57dbc76a85300bd68f8de",
        "buggy_code": "bq = self.bq.with_criteria(lambda q: q.from_self(col))",
        "fixed_code": "bq = self.bq.with_criteria(lambda q: q._from_self(col))",
        "patch": "@@ -434,7 +434,7 @@ def count(self):\n         \"\"\"\n \n         col = func.count(literal_column(\"*\"))\n-        bq = self.bq.with_criteria(lambda q: q.from_self(col))\n+        bq = self.bq.with_criteria(lambda q: q._from_self(col))\n         return bq.for_session(self.session).params(self._params).scalar()\n \n     def scalar(self):"
    },
    {
        "commit_id": "7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "commit_message": "Create a framework to allow all SQLALCHEMY_WARN_20 to pass\n\nAs the test suite has widespread use of many patterns\nthat are deprecated, enable SQLALCHEMY_WARN_20 globally\nfor the test suite but then break the warnings filter\nout into a whole list of all the individual warnings\nwe are looking for.  this way individual changesets\ncan target a specific class of warning, as many of these\nwarnings will indivdidually affect dozens of files\nand potentially hundreds of lines of code.\n\nMany warnings are also resolved here as this\npatch started out that way.   From this point\nforward there should be changesets that target a\nsubset of the warnings at a time.\n\nFor expediency, updates some migration 2.0 docs\nfor ORM as well.\n\nChange-Id: I98b8defdf7c37b818b3824d02f7668e3f5f31c94",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "buggy_code": "return sql.select(cols, cond, use_labels=True)",
        "fixed_code": "return sql.select(*cols).where(cond).apply_labels()",
        "patch": "@@ -3014,7 +3014,7 @@ def visit_binary(binary):\n         cols = []\n         for key in col_attribute_names:\n             cols.extend(props[key].columns)\n-        return sql.select(cols, cond, use_labels=True)\n+        return sql.select(*cols).where(cond).apply_labels()\n \n     def _iterate_to_target_viawpoly(self, mapper):\n         if self.isa(mapper):"
    },
    {
        "commit_id": "7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "commit_message": "Create a framework to allow all SQLALCHEMY_WARN_20 to pass\n\nAs the test suite has widespread use of many patterns\nthat are deprecated, enable SQLALCHEMY_WARN_20 globally\nfor the test suite but then break the warnings filter\nout into a whole list of all the individual warnings\nwe are looking for.  this way individual changesets\ncan target a specific class of warning, as many of these\nwarnings will indivdidually affect dozens of files\nand potentially hundreds of lines of code.\n\nMany warnings are also resolved here as this\npatch started out that way.   From this point\nforward there should be changesets that target a\nsubset of the warnings at a time.\n\nFor expediency, updates some migration 2.0 docs\nfor ORM as well.\n\nChange-Id: I98b8defdf7c37b818b3824d02f7668e3f5f31c94",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "buggy_code": "conn.execute(\"CREATE INDEX idx1 ON t (x) INCLUDE (name)\")",
        "fixed_code": "conn.exec_driver_sql(\"CREATE INDEX idx1 ON t (x) INCLUDE (name)\")",
        "patch": "@@ -1193,7 +1193,7 @@ def test_index_reflection_with_include(self):\n         )\n         metadata.create_all()\n         with testing.db.connect() as conn:\n-            conn.execute(\"CREATE INDEX idx1 ON t (x) INCLUDE (name)\")\n+            conn.exec_driver_sql(\"CREATE INDEX idx1 ON t (x) INCLUDE (name)\")\n \n             # prior to #5205, this would return:\n             # [{'column_names': ['x', 'name'],"
    },
    {
        "commit_id": "7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "commit_message": "Create a framework to allow all SQLALCHEMY_WARN_20 to pass\n\nAs the test suite has widespread use of many patterns\nthat are deprecated, enable SQLALCHEMY_WARN_20 globally\nfor the test suite but then break the warnings filter\nout into a whole list of all the individual warnings\nwe are looking for.  this way individual changesets\ncan target a specific class of warning, as many of these\nwarnings will indivdidually affect dozens of files\nand potentially hundreds of lines of code.\n\nMany warnings are also resolved here as this\npatch started out that way.   From this point\nforward there should be changesets that target a\nsubset of the warnings at a time.\n\nFor expediency, updates some migration 2.0 docs\nfor ORM as well.\n\nChange-Id: I98b8defdf7c37b818b3824d02f7668e3f5f31c94",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "buggy_code": "from sqlalchemy.orm import create_session",
        "fixed_code": "from sqlalchemy.testing.fixtures import create_session",
        "patch": "@@ -2,10 +2,10 @@\n from sqlalchemy import Integer\n from sqlalchemy import String\n from sqlalchemy import testing\n-from sqlalchemy.orm import create_session\n from sqlalchemy.orm import mapper\n from sqlalchemy.testing import eq_\n from sqlalchemy.testing import fixtures\n+from sqlalchemy.testing.fixtures import create_session\n from sqlalchemy.testing.schema import Column\n from sqlalchemy.testing.schema import Table\n "
    },
    {
        "commit_id": "7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "commit_message": "Create a framework to allow all SQLALCHEMY_WARN_20 to pass\n\nAs the test suite has widespread use of many patterns\nthat are deprecated, enable SQLALCHEMY_WARN_20 globally\nfor the test suite but then break the warnings filter\nout into a whole list of all the individual warnings\nwe are looking for.  this way individual changesets\ncan target a specific class of warning, as many of these\nwarnings will indivdidually affect dozens of files\nand potentially hundreds of lines of code.\n\nMany warnings are also resolved here as this\npatch started out that way.   From this point\nforward there should be changesets that target a\nsubset of the warnings at a time.\n\nFor expediency, updates some migration 2.0 docs\nfor ORM as well.\n\nChange-Id: I98b8defdf7c37b818b3824d02f7668e3f5f31c94",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "buggy_code": "from sqlalchemy.orm import create_session",
        "fixed_code": "from sqlalchemy.testing.fixtures import create_session",
        "patch": "@@ -4,10 +4,10 @@\n from sqlalchemy.orm import backref\n from sqlalchemy.orm import clear_mappers\n from sqlalchemy.orm import configure_mappers\n-from sqlalchemy.orm import create_session\n from sqlalchemy.orm import mapper\n from sqlalchemy.orm import relationship\n from sqlalchemy.testing import fixtures\n+from sqlalchemy.testing.fixtures import create_session\n from sqlalchemy.testing.schema import Column\n from sqlalchemy.testing.schema import Table\n "
    },
    {
        "commit_id": "7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "commit_message": "Create a framework to allow all SQLALCHEMY_WARN_20 to pass\n\nAs the test suite has widespread use of many patterns\nthat are deprecated, enable SQLALCHEMY_WARN_20 globally\nfor the test suite but then break the warnings filter\nout into a whole list of all the individual warnings\nwe are looking for.  this way individual changesets\ncan target a specific class of warning, as many of these\nwarnings will indivdidually affect dozens of files\nand potentially hundreds of lines of code.\n\nMany warnings are also resolved here as this\npatch started out that way.   From this point\nforward there should be changesets that target a\nsubset of the warnings at a time.\n\nFor expediency, updates some migration 2.0 docs\nfor ORM as well.\n\nChange-Id: I98b8defdf7c37b818b3824d02f7668e3f5f31c94",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e864fc7b1b950760cbf02e6dcd5aa5aac267400",
        "buggy_code": "from sqlalchemy.orm import create_session",
        "fixed_code": "from sqlalchemy.testing.fixtures import create_session",
        "patch": "@@ -7,11 +7,11 @@\n from sqlalchemy import LargeBinary\n from sqlalchemy import String\n from sqlalchemy.orm import backref\n-from sqlalchemy.orm import create_session\n from sqlalchemy.orm import deferred\n from sqlalchemy.orm import mapper\n from sqlalchemy.orm import relationship\n from sqlalchemy.testing import fixtures\n+from sqlalchemy.testing.fixtures import create_session\n from sqlalchemy.testing.schema import Column\n from sqlalchemy.testing.schema import Table\n "
    },
    {
        "commit_id": "31c3ed715ad2e6007bf6b98ae7670cb1a902731c",
        "commit_message": "Remove silent ignore for skip_locked w/ unsupported backends\n\nFor SQLAlchemy 1.4:\n\nThe \"skip_locked\" keyword used with ``with_for_update()`` will render \"SKIP\nLOCKED\" on all MySQL backends, meaning it will fail for MySQL less than\nversion 8 and on current MariaDB backends.  This is because those backends\ndo not support \"SKIP LOCKED\" or any equivalent, so this error should not be\nsilently ignored.   This is upgraded from a warning in the 1.3 series.\n\nFor SQLAlchemy 1.3:\n\nThe \"skip_locked\" keyword used with ``with_for_update()`` will emit a\nwarning when used on MariaDB backends, and will then be ignored.   This is\na deprecated behavior that will raise in SQLAlchemy 1.4, as an application\nthat requests \"skip locked\" is looking for a non-blocking operation which\nis not available on those backends.\n\nFixes: #5578\nChange-Id: I49ccb6c6ff46eafed12b77f51e1da8e0e397966c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/31c3ed715ad2e6007bf6b98ae7670cb1a902731c",
        "buggy_code": "if select._for_update_arg.skip_locked and self.dialect._is_mysql:",
        "fixed_code": "if select._for_update_arg.skip_locked:",
        "patch": "@@ -1670,7 +1670,7 @@ def for_update_clause(self, select, **kw):\n         if select._for_update_arg.nowait:\n             tmp += \" NOWAIT\"\n \n-        if select._for_update_arg.skip_locked and self.dialect._is_mysql:\n+        if select._for_update_arg.skip_locked:\n             tmp += \" SKIP LOCKED\"\n \n         return tmp"
    },
    {
        "commit_id": "9c5b989cf08c3e625fc08a8c5e037c44ba465579",
        "commit_message": "Fix a mis-reference in create_async_engine().\n\n`AsyncMethodRequired` is actually from\n`sqlalchemy.ext.asyncio.exc`, so here it\nshould be referenced as `async_exc.AsyncMethodRequired`,\ninstead of `exc.AsyncMethodRequired`.\n\nFixes: #5529\nCloses: #5545\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5545\nPull-request-sha: d8f885c587dd058f909d4f3bdbec3d0fca176680\n\nChange-Id: I6886558bfd33d3e9e283fbd60c0ec971a1f22c0c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9c5b989cf08c3e625fc08a8c5e037c44ba465579",
        "buggy_code": "raise exc.AsyncMethodRequired(",
        "fixed_code": "raise async_exc.AsyncMethodRequired(",
        "patch": "@@ -31,7 +31,7 @@ def create_async_engine(*arg, **kw):\n     \"\"\"\n \n     if kw.get(\"server_side_cursors\", False):\n-        raise exc.AsyncMethodRequired(\n+        raise async_exc.AsyncMethodRequired(\n             \"Can't set server_side_cursors for async engine globally; \"\n             \"use the connection.stream() method for an async \"\n             \"streaming result set\""
    },
    {
        "commit_id": "cae33a79017d955c7a35bf1810c18e13fd00b4f3",
        "commit_message": "Fix AsyncEngine connect() bug when pool is exhausted\n\n### Description\n\nDecorating the referenced `await_fallback` with `staticmethod` would stop `AsyncAdaptedQueue.await_` from being treated as a bound method.\n\n### Checklist\n\nThis pull request is:\n\n- [x] A short code fix\n    Fixes #5546\n\n**Have a nice day!**\n\nCloses: #5547\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5547\nPull-request-sha: 6f18ee290e7d9fe24ce2a4a4ed8069b46082ca18\n\nChange-Id: Ie335ee650f1dee0d1fce59e448217a48307b3435",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cae33a79017d955c7a35bf1810c18e13fd00b4f3",
        "buggy_code": "await_ = await_fallback",
        "fixed_code": "await_ = staticmethod(await_fallback)",
        "patch": "@@ -202,7 +202,7 @@ def _get(self):\n \n \n class AsyncAdaptedQueue:\n-    await_ = await_fallback\n+    await_ = staticmethod(await_fallback)\n \n     def __init__(self, maxsize=0, use_lifo=False):\n         if use_lifo:"
    },
    {
        "commit_id": "fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "commit_message": "Bump minimum MySQL version to 5.0.2; use all-numeric server version\n\nMySQL dialect's server_version_info tuple is now all numeric.  String\ntokens like \"MariaDB\" are no longer present so that numeric comparison\nworks in all cases.  The .is_mariadb flag on the dialect should be\nconsulted for whether or not mariadb was detected.   Additionally removed\nstructures meant to support extremely old MySQL versions 3.x and 4.x;\nthe minimum MySQL version supported is now version 5.0.2.\n\nIn addition, as the \"MariaDB\" name goes away from server version,\nexpand upon the change in I330815ebe572b6a9818377da56621397335fa702\nto support the name \"mariadb\" throughout the dialect and test suite\nwhen mariadb-only mode is used.    This changes the \"name\" field\non the MariaDB dialect to \"mariadb\", which then implies a change\nthroughout the testing requirements system as well as all the\ndialect-specific DDL argument names such as \"mysql_engine\" is\nnow specified as \"mariadb_engine\", etc.   Make use of the\nrecent additions to test suite URL provisioning so that we can\nforce MariaDB databases to have a \"mariadb-only\" dialect which\nallows us to test this name change fully.\n\nUpdate documentation to refer to MySQL / MariaDB explicitly\nas well as indicating the \"mariadb_\" prefix used for options.\n\nIt seems likely that MySQL and MariaDB version numbers are going to\nstart colliding at some point so having the \"mariadb\" name\nbe available as a totally separate dialect name should give us\nsome options in this regard.\n\nCurrently also includes a date related fix to a test for\nthe postgresql dialect that was implicitly assuming a\nnon-UTC timezone\n\nFixes: #4189\nChange-Id: I00e76d00f62971e1f067bd61915fa6cc1cf64e5e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "buggy_code": "__only_on__ = (\"mysql\",)",
        "fixed_code": "__only_on__ = (\"mysql\", \"mariadb\")",
        "patch": "@@ -13,7 +13,7 @@\n \n \n class OnDuplicateTest(fixtures.TablesTest):\n-    __only_on__ = (\"mysql\",)\n+    __only_on__ = (\"mysql\", \"mariadb\")\n     __backend__ = True\n     run_define_tables = \"each\"\n "
    },
    {
        "commit_id": "fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "commit_message": "Bump minimum MySQL version to 5.0.2; use all-numeric server version\n\nMySQL dialect's server_version_info tuple is now all numeric.  String\ntokens like \"MariaDB\" are no longer present so that numeric comparison\nworks in all cases.  The .is_mariadb flag on the dialect should be\nconsulted for whether or not mariadb was detected.   Additionally removed\nstructures meant to support extremely old MySQL versions 3.x and 4.x;\nthe minimum MySQL version supported is now version 5.0.2.\n\nIn addition, as the \"MariaDB\" name goes away from server version,\nexpand upon the change in I330815ebe572b6a9818377da56621397335fa702\nto support the name \"mariadb\" throughout the dialect and test suite\nwhen mariadb-only mode is used.    This changes the \"name\" field\non the MariaDB dialect to \"mariadb\", which then implies a change\nthroughout the testing requirements system as well as all the\ndialect-specific DDL argument names such as \"mysql_engine\" is\nnow specified as \"mariadb_engine\", etc.   Make use of the\nrecent additions to test suite URL provisioning so that we can\nforce MariaDB databases to have a \"mariadb-only\" dialect which\nallows us to test this name change fully.\n\nUpdate documentation to refer to MySQL / MariaDB explicitly\nas well as indicating the \"mariadb_\" prefix used for options.\n\nIt seems likely that MySQL and MariaDB version numbers are going to\nstart colliding at some point so having the \"mariadb\" name\nbe available as a totally separate dialect name should give us\nsome options in this regard.\n\nCurrently also includes a date related fix to a test for\nthe postgresql dialect that was implicitly assuming a\nnon-UTC timezone\n\nFixes: #4189\nChange-Id: I00e76d00f62971e1f067bd61915fa6cc1cf64e5e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "buggy_code": "__unsupported_on__ = (\"mssql\", \"mysql\")",
        "fixed_code": "__unsupported_on__ = (\"mssql\", \"mysql\", \"mariadb\")",
        "patch": "@@ -871,7 +871,7 @@ def test_reverse_savepoint(self):\n class SelfReferentialTest(fixtures.MappedTest):\n     # mssql, mysql don't allow\n     # ON UPDATE on self-referential keys\n-    __unsupported_on__ = (\"mssql\", \"mysql\")\n+    __unsupported_on__ = (\"mssql\", \"mysql\", \"mariadb\")\n \n     __requires__ = (\"on_update_or_deferrable_fks\",)\n     __backend__ = True"
    },
    {
        "commit_id": "fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "commit_message": "Bump minimum MySQL version to 5.0.2; use all-numeric server version\n\nMySQL dialect's server_version_info tuple is now all numeric.  String\ntokens like \"MariaDB\" are no longer present so that numeric comparison\nworks in all cases.  The .is_mariadb flag on the dialect should be\nconsulted for whether or not mariadb was detected.   Additionally removed\nstructures meant to support extremely old MySQL versions 3.x and 4.x;\nthe minimum MySQL version supported is now version 5.0.2.\n\nIn addition, as the \"MariaDB\" name goes away from server version,\nexpand upon the change in I330815ebe572b6a9818377da56621397335fa702\nto support the name \"mariadb\" throughout the dialect and test suite\nwhen mariadb-only mode is used.    This changes the \"name\" field\non the MariaDB dialect to \"mariadb\", which then implies a change\nthroughout the testing requirements system as well as all the\ndialect-specific DDL argument names such as \"mysql_engine\" is\nnow specified as \"mariadb_engine\", etc.   Make use of the\nrecent additions to test suite URL provisioning so that we can\nforce MariaDB databases to have a \"mariadb-only\" dialect which\nallows us to test this name change fully.\n\nUpdate documentation to refer to MySQL / MariaDB explicitly\nas well as indicating the \"mariadb_\" prefix used for options.\n\nIt seems likely that MySQL and MariaDB version numbers are going to\nstart colliding at some point so having the \"mariadb\" name\nbe available as a totally separate dialect name should give us\nsome options in this regard.\n\nCurrently also includes a date related fix to a test for\nthe postgresql dialect that was implicitly assuming a\nnon-UTC timezone\n\nFixes: #4189\nChange-Id: I00e76d00f62971e1f067bd61915fa6cc1cf64e5e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc97854f69ee589774627f14ce78bb8a1bbb3236",
        "buggy_code": "\"mysql\",",
        "fixed_code": "[\"mysql\", \"mariadb\"],",
        "patch": "@@ -3139,7 +3139,7 @@ def define_tables(cls, metadata):\n         )\n \n     @testing.fails_on(\n-        \"mysql\",\n+        [\"mysql\", \"mariadb\"],\n         \"The CHECK clause is parsed but ignored by all storage engines.\",\n     )\n     @testing.fails_on(\"mssql\", \"FIXME: MS-SQL 2005 doesn't honor CHECK ?!?\")"
    },
    {
        "commit_id": "5fb0138a3220161703e6ab1087319a669d14e7f4",
        "commit_message": "Implement rudimentary asyncio support w/ asyncpg\n\nUsing the approach introduced at\nhttps://gist.github.com/zzzeek/6287e28054d3baddc07fa21a7227904e\n\nWe can now create asyncio endpoints that are then handled\nin \"implicit IO\" form within the majority of the Core internals.\nThen coroutines are re-exposed at the point at which we call\ninto asyncpg methods.\n\nPatch includes:\n\n* asyncpg dialect\n\n* asyncio package\n\n* engine, result, ORM session classes\n\n* new test fixtures, tests\n\n* some work with pep-484 and a short plugin for the\n  pyannotate package, which seems to have so-so results\n\nChange-Id: Idbcc0eff72c4cad572914acdd6f40ddb1aef1a7d\nFixes: #3414",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5fb0138a3220161703e6ab1087319a669d14e7f4",
        "buggy_code": "poolclass = dialect_cls.get_pool_class(u)",
        "fixed_code": "poolclass = dialect.get_dialect_pool_class(u)",
        "patch": "@@ -553,7 +553,7 @@ def connect(connection_record=None):\n \n         poolclass = pop_kwarg(\"poolclass\", None)\n         if poolclass is None:\n-            poolclass = dialect_cls.get_pool_class(u)\n+            poolclass = dialect.get_dialect_pool_class(u)\n         pool_args = {\"dialect\": dialect}\n \n         # consume pool arguments from kwargs, translating a few of"
    },
    {
        "commit_id": "5fb0138a3220161703e6ab1087319a669d14e7f4",
        "commit_message": "Implement rudimentary asyncio support w/ asyncpg\n\nUsing the approach introduced at\nhttps://gist.github.com/zzzeek/6287e28054d3baddc07fa21a7227904e\n\nWe can now create asyncio endpoints that are then handled\nin \"implicit IO\" form within the majority of the Core internals.\nThen coroutines are re-exposed at the point at which we call\ninto asyncpg methods.\n\nPatch includes:\n\n* asyncpg dialect\n\n* asyncio package\n\n* engine, result, ORM session classes\n\n* new test fixtures, tests\n\n* some work with pep-484 and a short plugin for the\n  pyannotate package, which seems to have so-so results\n\nChange-Id: Idbcc0eff72c4cad572914acdd6f40ddb1aef1a7d\nFixes: #3414",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5fb0138a3220161703e6ab1087319a669d14e7f4",
        "buggy_code": "DateTime,",
        "fixed_code": "DateTime(timezone=True),",
        "patch": "@@ -948,7 +948,7 @@ def define_tables(cls, metadata):\n             metadata,\n             Column(\n                 \"date_id\",\n-                DateTime,\n+                DateTime(timezone=True),\n                 default=text(\"current_timestamp\"),\n                 primary_key=True,\n             ),"
    },
    {
        "commit_id": "71f14f6de8ee1865fd68d7989f751eed95dde719",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/71f14f6de8ee1865fd68d7989f751eed95dde719",
        "buggy_code": "as well as the notion of a default isolation level, currently harcoded",
        "fixed_code": "as well as the notion of a default isolation level, currently hardcoded",
        "patch": "@@ -65,7 +65,7 @@\n \n \n .. versionadded:: 1.3.16 added support for AUTOCOMMIT to the cx_oracle dialect\n-   as well as the notion of a default isolation level, currently harcoded\n+   as well as the notion of a default isolation level, currently hardcoded\n    to \"READ COMMITTED\".\n \n .. seealso::"
    },
    {
        "commit_id": "71f14f6de8ee1865fd68d7989f751eed95dde719",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/71f14f6de8ee1865fd68d7989f751eed95dde719",
        "buggy_code": "subuqery.  Such as on SQLite, the expression is::",
        "fixed_code": "subquery.  Such as on SQLite, the expression is::",
        "patch": "@@ -536,7 +536,7 @@ def in_(self, other):\n           In this calling form, the expression renders an \"empty set\"\n           expression.  These expressions are tailored to individual backends\n           and are generaly trying to get an empty SELECT statement as a\n-          subuqery.  Such as on SQLite, the expression is::\n+          subquery.  Such as on SQLite, the expression is::\n \n             WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n "
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "statement, params, execution_options=execution_options",
        "fixed_code": "statement, params, execution_options=execution_options, future=True",
        "patch": "@@ -405,7 +405,7 @@ def _iter(self):\n         )\n \n         result = self.session.execute(\n-            statement, params, execution_options=execution_options\n+            statement, params, execution_options=execution_options, future=True\n         )\n         if result._attributes.get(\"is_single_entity\", False):\n             result = result.scalars()"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "from .selectable import Select  # noqa",
        "fixed_code": "from ..sql.selectable import Select  # noqa",
        "patch": "@@ -11,7 +11,7 @@\n from .engine import Connection  # noqa\n from .engine import create_engine  # noqa\n from .engine import Engine  # noqa\n-from .selectable import Select  # noqa\n+from ..sql.selectable import Select  # noqa\n from ..util.langhelpers import public_factory\n \n select = public_factory(Select._create_future_select, \".future.select\")"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "select = public_factory(Select, \".sql.expression.select\")",
        "fixed_code": "select = public_factory(Select._create, \".sql.expression.select\")",
        "patch": "@@ -185,7 +185,7 @@\n lateral = public_factory(Lateral._factory, \".sql.expression.lateral\")\n or_ = public_factory(BooleanClauseList.or_, \".sql.expression.or_\")\n bindparam = public_factory(BindParameter, \".sql.expression.bindparam\")\n-select = public_factory(Select, \".sql.expression.select\")\n+select = public_factory(Select._create, \".sql.expression.select\")\n text = public_factory(TextClause._create_text, \".sql.expression.text\")\n table = public_factory(TableClause, \".sql.expression.table\")\n column = public_factory(ColumnClause, \".sql.expression.column\")"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "from sqlalchemy.future import select",
        "fixed_code": "from sqlalchemy import select",
        "patch": "@@ -4,10 +4,10 @@\n from sqlalchemy import Column\n from sqlalchemy import DECIMAL\n from sqlalchemy import Integer\n+from sqlalchemy import select\n from sqlalchemy import Sequence\n from sqlalchemy import String\n from sqlalchemy import Table\n-from sqlalchemy.future import select\n from sqlalchemy.testing import eq_\n from sqlalchemy.testing import fixtures\n "
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "s = select([\"*\"]).select_from(table(\"foo\"))",
        "fixed_code": "s = select(\"*\").select_from(table(\"foo\"))",
        "patch": "@@ -14,7 +14,7 @@ class CompileTest(AssertsCompiledSQL, fixtures.TestBase):\n     __dialect__ = mysql.dialect()\n \n     def test_distinct_string(self):\n-        s = select([\"*\"]).select_from(table(\"foo\"))\n+        s = select(\"*\").select_from(table(\"foo\"))\n         s._distinct = \"foo\"\n \n         with expect_deprecated("
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "assert select([tbl.c.int_y]).scalar() == 1",
        "fixed_code": "assert select(tbl.c.int_y).scalar() == 1",
        "patch": "@@ -477,7 +477,7 @@ def test_autoincrement(self):\n                         assert not c.autoincrement\n                 tbl.insert().execute()\n                 if \"int_y\" in tbl.c:\n-                    assert select([tbl.c.int_y]).scalar() == 1\n+                    assert select(tbl.c.int_y).scalar() == 1\n                     assert list(tbl.select().execute().first()).count(1) == 1\n                 else:\n                     assert 1 not in list(tbl.select().execute().first())"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "select([a_table.c.id, a_table.c.type, c_table, d_table, e_table])",
        "fixed_code": "select(a_table.c.id, a_table.c.type, c_table, d_table, e_table)",
        "patch": "@@ -429,7 +429,7 @@ def test_threelevel_selectin_to_inline_awkward_alias_options(self):\n         a_table, c_table, d_table, e_table = self.tables(\"a\", \"c\", \"d\", \"e\")\n \n         poly = (\n-            select([a_table.c.id, a_table.c.type, c_table, d_table, e_table])\n+            select(a_table.c.id, a_table.c.type, c_table, d_table, e_table)\n             .select_from(\n                 a_table.join(c_table).outerjoin(d_table).outerjoin(e_table)\n             )"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "base_select = select([base]).alias()",
        "fixed_code": "base_select = select(base).alias()",
        "patch": "@@ -116,7 +116,7 @@ def test_map_to_select(self):\n         Base, Child = self.classes.Base, self.classes.Child\n         base, child = self.tables.base, self.tables.child\n \n-        base_select = select([base]).alias()\n+        base_select = select(base).alias()\n         mapper(\n             Base,\n             base_select,"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "select([b1.c.d1, b1.c.d2]), \"SELECT data.d1, data.d2 FROM data\"",
        "fixed_code": "select(b1.c.d1, b1.c.d2), \"SELECT data.d1, data.d2 FROM data\"",
        "patch": "@@ -122,7 +122,7 @@ def test_c_attr(self):\n         b1 = Bundle(\"b1\", Data.d1, Data.d2)\n \n         self.assert_compile(\n-            select([b1.c.d1, b1.c.d2]), \"SELECT data.d1, data.d2 FROM data\"\n+            select(b1.c.d1, b1.c.d2), \"SELECT data.d1, data.d2 FROM data\"\n         )\n \n     def test_result(self):"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "s = select([self.tables.foo]).alias()",
        "fixed_code": "s = select(self.tables.foo).alias()",
        "patch": "@@ -1997,7 +1997,7 @@ def test_indirect_table_column_mapped(self):\n     def test_selectable_column_mapped(self):\n         from sqlalchemy import select\n \n-        s = select([self.tables.foo]).alias()\n+        s = select(self.tables.foo).alias()\n         Foo = self.classes.Foo\n         mapper(Foo, s)\n         self._run_test([(Foo.b, Foo(b=5), 5), (s.c.b, Foo(b=5), 5)])"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "from sqlalchemy.future import select",
        "fixed_code": "from sqlalchemy import select",
        "patch": "@@ -3,9 +3,9 @@\n from sqlalchemy import insert\n from sqlalchemy import literal_column\n from sqlalchemy import or_\n+from sqlalchemy import select\n from sqlalchemy import testing\n from sqlalchemy import util\n-from sqlalchemy.future import select\n from sqlalchemy.orm import aliased\n from sqlalchemy.orm import column_property\n from sqlalchemy.orm import contains_eager"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "stmt = select([User.id])",
        "fixed_code": "stmt = select(User.id)",
        "patch": "@@ -86,7 +86,7 @@ def test_row_proc_not_created(self):\n         s = Session()\n \n         q = s.query(User.id, User.name)\n-        stmt = select([User.id])\n+        stmt = select(User.id)\n \n         assert_raises_message(\n             exc.NoSuchColumnError,"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "select([func.count(\"*\")]).select_from(self.tables.parent)",
        "fixed_code": "select(func.count(\"*\")).select_from(self.tables.parent)",
        "patch": "@@ -1548,7 +1548,7 @@ def test_switch_on_delete(self):\n \n         eq_(\n             sess.scalar(\n-                select([func.count(\"*\")]).select_from(self.tables.parent)\n+                select(func.count(\"*\")).select_from(self.tables.parent)\n             ),\n             0,\n         )"
    },
    {
        "commit_id": "91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "commit_message": "Add future=True to create_engine/Session; unify select()\n\nSeveral weeks of using the future_select() construct\nhas led to the proposal there be just one select() construct\nagain which features the new join() method, and otherwise accepts\nboth the 1.x and 2.x argument styles.   This would make\nmigration simpler and reduce confusion.\n\nHowever, confusion may be increased by the fact that select().join()\nis different  Current thinking is we may be better off\nwith a few hard behavioral changes to old and relatively unknown APIs\nrather than trying to play both sides within two extremely similar\nbut subtly different APIs.  At the moment, the .join() thing seems\nto be the only behavioral change that occurs without the user\ntaking any explicit steps.   Session.execute() will still\nbehave the old way as we are adding a future flag.\n\nThis change also adds the \"future\" flag to Session() and\nsession.execute(), so that interpretation of the incoming statement,\nas well as that the new style result is returned, does not\noccur for existing applications unless they add the use\nof this flag.\n\nThe change in general is moving the \"removed in 2.0\" system\nfurther along where we want the test suite to fully pass\neven if the SQLALCHEMY_WARN_20 flag is set.\n\nGet many tests to pass when SQLALCHEMY_WARN_20 is set; this\nshould be ongoing after this patch merges.\n\nImprove the RemovedIn20 warning; these are all deprecated\n\"since\" 1.4, so ensure that's what the messages read.\nMake sure the inforamtion link is on all warnings.\nAdd deprecation warnings for parameters present and\nadd warnings to all FromClause.select() types of methods.\n\nFixes: #5379\nFixes: #5284\nChange-Id: I765a0b912b3dcd0e995426427d8bb7997cbffd51\nReferences: #5159",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91f376692d472a5bf0c4b4033816250ec1ce3ab6",
        "buggy_code": "s2 = select([column(\"q\").in_(stmt)])",
        "fixed_code": "s2 = select(column(\"q\").in_(stmt))",
        "patch": "@@ -2896,7 +2896,7 @@ def test_in_cte_implicit(self):\n             r\"Coercing CTE object into a select\\(\\) for use in \"\n             r\"IN\\(\\); please pass a select\\(\\) construct explicitly\",\n         ):\n-            s2 = select([column(\"q\").in_(stmt)])\n+            s2 = select(column(\"q\").in_(stmt))\n \n         self.assert_compile(\n             s2,"
    },
    {
        "commit_id": "3dc9a4a2392d033f9d1bd79dd6b6ecea6281a61c",
        "commit_message": "introduce deferred lambdas\n\nThe coercions system allows us to add in lambdas as arguments\nto Core and ORM elements without changing them at all.   By allowing\nthe lambda to produce a deterministic cache key where we can also\ncheat and yank out literal parameters means we can move towards\nhaving 90% of \"baked\" functionality in a clearer way right in\nCore / ORM.\n\nAs a second step, we can have whole statements inside the lambda,\nand can then add generation with __add__(), so then we have\n100% of \"baked\" functionality with full support of ad-hoc\nliteral values.\n\nAdds some more short_selects tests for the moment for comparison.\n\nOther tweaks inside cache key generation as we're trying to\napproach a certain level of performance such that we can\nremove the use of \"baked\" from the loader strategies.\n\nAs we have not yet closed #4639, however the caching feature\nhas been fully integrated as of\nb0cfa7379cf8513a821a3dbe3028c4965d9f85bd, we will also\nadd complete caching documentation here and close that issue\nas well.\n\nCloses: #4639\nFixes: #5380\nChange-Id: If91f61527236fd4d7ae3cad1f24c38be921c90ba",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3dc9a4a2392d033f9d1bd79dd6b6ecea6281a61c",
        "buggy_code": "return \"cached for %.4gs\" % (now - self.compiled._gen_time,)",
        "fixed_code": "return \"cached since %.4gs ago\" % (now - self.compiled._gen_time,)",
        "patch": "@@ -1031,7 +1031,7 @@ def _get_cache_stats(self):\n         if self.compiled.cache_key is None:\n             return \"no key %.5fs\" % (now - self.compiled._gen_time,)\n         elif self.cache_hit:\n-            return \"cached for %.4gs\" % (now - self.compiled._gen_time,)\n+            return \"cached since %.4gs ago\" % (now - self.compiled._gen_time,)\n         else:\n             return \"generated in %.5fs\" % (now - self.compiled._gen_time,)\n "
    },
    {
        "commit_id": "3dc9a4a2392d033f9d1bd79dd6b6ecea6281a61c",
        "commit_message": "introduce deferred lambdas\n\nThe coercions system allows us to add in lambdas as arguments\nto Core and ORM elements without changing them at all.   By allowing\nthe lambda to produce a deterministic cache key where we can also\ncheat and yank out literal parameters means we can move towards\nhaving 90% of \"baked\" functionality in a clearer way right in\nCore / ORM.\n\nAs a second step, we can have whole statements inside the lambda,\nand can then add generation with __add__(), so then we have\n100% of \"baked\" functionality with full support of ad-hoc\nliteral values.\n\nAdds some more short_selects tests for the moment for comparison.\n\nOther tweaks inside cache key generation as we're trying to\napproach a certain level of performance such that we can\nremove the use of \"baked\" from the loader strategies.\n\nAs we have not yet closed #4639, however the caching feature\nhas been fully integrated as of\nb0cfa7379cf8513a821a3dbe3028c4965d9f85bd, we will also\nadd complete caching documentation here and close that issue\nas well.\n\nCloses: #4639\nFixes: #5380\nChange-Id: If91f61527236fd4d7ae3cad1f24c38be921c90ba",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3dc9a4a2392d033f9d1bd79dd6b6ecea6281a61c",
        "buggy_code": "roles.WhereHavingRole, onclause",
        "fixed_code": "roles.OnClauseRole, onclause",
        "patch": "@@ -847,7 +847,7 @@ def __init__(self, left, right, onclause=None, isouter=False, full=False):\n             # note: taken from If91f61527236fd4d7ae3cad1f24c38be921c90ba\n             # not merged yet\n             self.onclause = coercions.expect(\n-                roles.WhereHavingRole, onclause\n+                roles.OnClauseRole, onclause\n             ).self_group(against=operators._asbool)\n \n         self.isouter = isouter"
    },
    {
        "commit_id": "b421c51b94fdef2bc542b0a40bfb21490b23ca15",
        "commit_message": "added semicolon (;) to improve warning message clarity\n\n### Description\n\nAdded a semicolon to improve the clarity of warning message.  I actually had a table named `backend`, and thought it was involved!\n\nWhile updating the code, I noticed no test that directly tests for this warning message. There are tests for the `Can't sort tables for DROP;` prefix of this message and the `exc.CircularDependencyError`; and some tests for the `exc.CircularDependencyError` message itself. I couldn't find any test for this particular message though.  (Just thought I'd bring that up)\n\nNo issue created, because this is minor.\n\nCloses: #5431\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5431\nPull-request-sha: 87fb5733ff4fc1a13dd94277716814ea852f654c\n\nChange-Id: I87a504d30a7dd5155c34f7d7f30b2116d0d3cd3f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b421c51b94fdef2bc542b0a40bfb21490b23ca15",
        "buggy_code": "\"dependency exists between tables: %s, and backend does \"",
        "fixed_code": "\"dependency exists between tables: %s; and backend does \"",
        "patch": "@@ -804,7 +804,7 @@ def visit_metadata(self, metadata):\n                 util.warn(\n                     \"Can't sort tables for DROP; an \"\n                     \"unresolvable foreign key \"\n-                    \"dependency exists between tables: %s, and backend does \"\n+                    \"dependency exists between tables: %s; and backend does \"\n                     \"not support ALTER.  To restore at least a partial sort, \"\n                     \"apply use_alter=True to ForeignKey and \"\n                     \"ForeignKeyConstraint \""
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "objects directly.    In all cases however, the driver requires an explcit",
        "fixed_code": "objects directly.    In all cases however, the driver requires an explicit",
        "patch": "@@ -100,7 +100,7 @@\n \n As is the case for all DBAPIs under Python 3, all strings are inherently\n Unicode strings.     Under Python 2, cx_Oracle also supports Python Unicode\n-objects directly.    In all cases however, the driver requires an explcit\n+objects directly.    In all cases however, the driver requires an explicit\n encoding configuration.\n \n Ensuring the Correct Client Encoding"
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "from a string by the :func:`.make_url` function.  the string",
        "fixed_code": "from a string by the :func:`.make_url` function.  The string",
        "patch": "@@ -29,7 +29,7 @@ class URL(object):\n \n     This object is suitable to be passed directly to a\n     :func:`~sqlalchemy.create_engine` call.  The fields of the URL are parsed\n-    from a string by the :func:`.make_url` function.  the string\n+    from a string by the :func:`.make_url` function.  The string\n     format of the URL is an RFC-1738-style string.\n \n     All initialization parameters are available as public attributes."
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "\"\"\"\"refers to a module name within",
        "fixed_code": "\"\"\"Refers to a module name within",
        "patch": "@@ -132,7 +132,7 @@ def add_item(self, item):\n \n \n class _ModuleMarker(object):\n-    \"\"\"\"refers to a module name within\n+    \"\"\"Refers to a module name within\n     _decl_class_registry.\n \n     \"\"\""
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "\"\"\"facade for pytest.mark.paramtrize.",
        "fixed_code": "\"\"\"Facade for pytest.mark.parametrize.",
        "patch": "@@ -371,7 +371,7 @@ def skip_test_exception(self, *arg, **kw):\n     }\n \n     def combinations(self, *arg_sets, **kw):\n-        \"\"\"facade for pytest.mark.paramtrize.\n+        \"\"\"Facade for pytest.mark.parametrize.\n \n         Automatically derives argument names from the callable which in our\n         case is always a method on a class with positional arguments."
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "\"\"\"\"Store per-platform/fn profiling results in a file.",
        "fixed_code": "\"\"\"Store per-platform/fn profiling results in a file.",
        "patch": "@@ -57,7 +57,7 @@ def _start_current_test(id_):\n \n \n class ProfileStatsFile(object):\n-    \"\"\"\"Store per-platform/fn profiling results in a file.\n+    \"\"\"Store per-platform/fn profiling results in a file.\n \n     There was no json module available when this was written, but now\n     the file format which is very deterministically line oriented is kind of"
    },
    {
        "commit_id": "ba047cc8cab22541e88ce91936162d6e8164991a",
        "commit_message": "Merge \"Fix a wide variety of typos and broken links\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba047cc8cab22541e88ce91936162d6e8164991a",
        "buggy_code": "Derived from mailing list-reported problems and trac tickets.",
        "fixed_code": "Derived from mailing list-reported problems and issue tracker issues.",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\"Exercises for eager loading.\n \n-Derived from mailing list-reported problems and trac tickets.\n+Derived from mailing list-reported problems and issue tracker issues.\n \n These are generally very old 0.1-era tests and at some point should\n be cleaned up and modernized."
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "objects directly.    In all cases however, the driver requires an explcit",
        "fixed_code": "objects directly.    In all cases however, the driver requires an explicit",
        "patch": "@@ -100,7 +100,7 @@\n \n As is the case for all DBAPIs under Python 3, all strings are inherently\n Unicode strings.     Under Python 2, cx_Oracle also supports Python Unicode\n-objects directly.    In all cases however, the driver requires an explcit\n+objects directly.    In all cases however, the driver requires an explicit\n encoding configuration.\n \n Ensuring the Correct Client Encoding"
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "from a string by the :func:`.make_url` function.  the string",
        "fixed_code": "from a string by the :func:`.make_url` function.  The string",
        "patch": "@@ -29,7 +29,7 @@ class URL(object):\n \n     This object is suitable to be passed directly to a\n     :func:`~sqlalchemy.create_engine` call.  The fields of the URL are parsed\n-    from a string by the :func:`.make_url` function.  the string\n+    from a string by the :func:`.make_url` function.  The string\n     format of the URL is an RFC-1738-style string.\n \n     All initialization parameters are available as public attributes."
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "\"\"\"\"refers to a module name within",
        "fixed_code": "\"\"\"Refers to a module name within",
        "patch": "@@ -132,7 +132,7 @@ def add_item(self, item):\n \n \n class _ModuleMarker(object):\n-    \"\"\"\"refers to a module name within\n+    \"\"\"Refers to a module name within\n     _decl_class_registry.\n \n     \"\"\""
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "\"\"\"facade for pytest.mark.paramtrize.",
        "fixed_code": "\"\"\"Facade for pytest.mark.parametrize.",
        "patch": "@@ -371,7 +371,7 @@ def skip_test_exception(self, *arg, **kw):\n     }\n \n     def combinations(self, *arg_sets, **kw):\n-        \"\"\"facade for pytest.mark.paramtrize.\n+        \"\"\"Facade for pytest.mark.parametrize.\n \n         Automatically derives argument names from the callable which in our\n         case is always a method on a class with positional arguments."
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "\"\"\"\"Store per-platform/fn profiling results in a file.",
        "fixed_code": "\"\"\"Store per-platform/fn profiling results in a file.",
        "patch": "@@ -57,7 +57,7 @@ def _start_current_test(id_):\n \n \n class ProfileStatsFile(object):\n-    \"\"\"\"Store per-platform/fn profiling results in a file.\n+    \"\"\"Store per-platform/fn profiling results in a file.\n \n     There was no json module available when this was written, but now\n     the file format which is very deterministically line oriented is kind of"
    },
    {
        "commit_id": "2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "commit_message": "Fix a wide variety of typos and broken links\n\nNote the PR has a few remaining doc linking issues\nlisted in the comment that must be addressed separately.\n\nSigned-off-by: aplatkouski <5857672+aplatkouski@users.noreply.github.com>\nCloses: #5371\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5371\nPull-request-sha: 7e7d233cf3a0c66980c27db0fcdb3c7d93bc2510\n\nChange-Id: I9c36e8d8804483950db4b42c38ee456e384c59e3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2a1a9f5f5a9723f757439657d2bdf224baed8748",
        "buggy_code": "Derived from mailing list-reported problems and trac tickets.",
        "fixed_code": "Derived from mailing list-reported problems and issue tracker issues.",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\"Exercises for eager loading.\n \n-Derived from mailing list-reported problems and trac tickets.\n+Derived from mailing list-reported problems and issue tracker issues.\n \n These are generally very old 0.1-era tests and at some point should\n be cleaned up and modernized."
    },
    {
        "commit_id": "b0cfa7379cf8513a821a3dbe3028c4965d9f85bd",
        "commit_message": "Turn on caching everywhere, add logging\n\nA variety of caching issues found by running\nall tests with statement caching turned on.\n\nThe cache system now has a more conservative approach where\nany subclass of a SQL element will by default invalidate\nthe cache key unless it adds the flag inherit_cache=True\nat the class level, or if it implements its own caching.\n\nAdd working caching to a few elements that were\nomitted previously; fix some caching implementations\nto suit lesser used edge cases such as json casts\nand array slices.\n\nRefine the way BaseCursorResult and CursorMetaData\ninteract with caching; to suit cases like Alembic\nmodifying table structures, don't cache the\ncursor metadata if it were created against a\ncursor.description using non-positional matching,\ne.g. \"select *\".   if a table re-ordered its columns\nor added/removed, now that data is obsolete.\n\nAdditionally we have to adapt the cursor metadata\n_keymap regardless of if we just processed\ncursor.description, because if we ran against\na cached SQLCompiler we won't have the right\ncolumns in _keymap.\n\nOther refinements to how and when we do this\nadaption as some weird cases\nwere exposed in the Postgresql dialect,\na text() construct that names just one column that\nis not actually in the statement.   Fixed that\nalso as it looks like a cut-and-paste artifact\nthat doesn't actually affect anything.\n\nVarious issues with re-use of compiled result maps\nand cursor metadata in conjunction with tables being\nchanged, such as change in order of columns.\n\nmappers can be cleared but the class remains, meaning\na mapper has to use itself as the cache key not the class.\n\nlots of bound parameter / literal issues, due to Alembic\ncreating a straight subclass of bindparam that renders\ninline directly.   While we can update Alembic to not\ndo this, we have to assume other people might be doing\nthis, so bindparam() implements the inherit_cache=True\nlogic as well that was a bit involved.\n\nturn on cache stats in logging.\n\nIncludes a fix to subqueryloader which moves all setup to\nthe create_row_processor() phase and elminates any storage\nwithin the compiled context.   This includes some changes\nto create_row_processor() signature and a revising of the\ntechnique used to determine if the loader can participate\nin polymorphic queries, which is also applied to\nselectinloading.\n\nDML update.values() and ordered_values() now coerces the\nkeys as we have tests that pass an arbitrary class here\nwhich only includes __clause_element__(), so the\nkey can't be cached unless it is coerced.  this in turn\nchanged how composite attributes support bulk update\nto use the standard approach of ClauseElement with\nannotations that are parsed in the ORM context.\n\nmemory profiling successfully caught that the Session\nfrom Query was getting passed into _statement_20()\nso that was a big win for that test suite.\n\nApparently Compiler had .execute() and .scalar() methods\nstuck on it, these date back to version 0.4 and there\nwas a single test in the PostgreSQL dialect tests\nthat exercised it for no apparent reason.   Removed\nthese methods as well as the concept of a Compiler\nholding onto a \"bind\".\n\nFixes: #5386\n\nChange-Id: I990b43aab96b42665af1b2187ad6020bee778784",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b0cfa7379cf8513a821a3dbe3028c4965d9f85bd",
        "buggy_code": "s = sql.text(SQL_DOMAINS).columns(attname=sqltypes.Unicode)",
        "fixed_code": "s = sql.text(SQL_DOMAINS)",
        "patch": "@@ -3681,7 +3681,7 @@ def _load_domains(self, connection):\n             WHERE t.typtype = 'd'\n         \"\"\"\n \n-        s = sql.text(SQL_DOMAINS).columns(attname=sqltypes.Unicode)\n+        s = sql.text(SQL_DOMAINS)\n         c = connection.execution_options(future_result=True).execute(s)\n \n         domains = {}"
    },
    {
        "commit_id": "b0cfa7379cf8513a821a3dbe3028c4965d9f85bd",
        "commit_message": "Turn on caching everywhere, add logging\n\nA variety of caching issues found by running\nall tests with statement caching turned on.\n\nThe cache system now has a more conservative approach where\nany subclass of a SQL element will by default invalidate\nthe cache key unless it adds the flag inherit_cache=True\nat the class level, or if it implements its own caching.\n\nAdd working caching to a few elements that were\nomitted previously; fix some caching implementations\nto suit lesser used edge cases such as json casts\nand array slices.\n\nRefine the way BaseCursorResult and CursorMetaData\ninteract with caching; to suit cases like Alembic\nmodifying table structures, don't cache the\ncursor metadata if it were created against a\ncursor.description using non-positional matching,\ne.g. \"select *\".   if a table re-ordered its columns\nor added/removed, now that data is obsolete.\n\nAdditionally we have to adapt the cursor metadata\n_keymap regardless of if we just processed\ncursor.description, because if we ran against\na cached SQLCompiler we won't have the right\ncolumns in _keymap.\n\nOther refinements to how and when we do this\nadaption as some weird cases\nwere exposed in the Postgresql dialect,\na text() construct that names just one column that\nis not actually in the statement.   Fixed that\nalso as it looks like a cut-and-paste artifact\nthat doesn't actually affect anything.\n\nVarious issues with re-use of compiled result maps\nand cursor metadata in conjunction with tables being\nchanged, such as change in order of columns.\n\nmappers can be cleared but the class remains, meaning\na mapper has to use itself as the cache key not the class.\n\nlots of bound parameter / literal issues, due to Alembic\ncreating a straight subclass of bindparam that renders\ninline directly.   While we can update Alembic to not\ndo this, we have to assume other people might be doing\nthis, so bindparam() implements the inherit_cache=True\nlogic as well that was a bit involved.\n\nturn on cache stats in logging.\n\nIncludes a fix to subqueryloader which moves all setup to\nthe create_row_processor() phase and elminates any storage\nwithin the compiled context.   This includes some changes\nto create_row_processor() signature and a revising of the\ntechnique used to determine if the loader can participate\nin polymorphic queries, which is also applied to\nselectinloading.\n\nDML update.values() and ordered_values() now coerces the\nkeys as we have tests that pass an arbitrary class here\nwhich only includes __clause_element__(), so the\nkey can't be cached unless it is coerced.  this in turn\nchanged how composite attributes support bulk update\nto use the standard approach of ClauseElement with\nannotations that are parsed in the ORM context.\n\nmemory profiling successfully caught that the Session\nfrom Query was getting passed into _statement_20()\nso that was a big win for that test suite.\n\nApparently Compiler had .execute() and .scalar() methods\nstuck on it, these date back to version 0.4 and there\nwas a single test in the PostgreSQL dialect tests\nthat exercised it for no apparent reason.   Removed\nthese methods as well as the concept of a Compiler\nholding onto a \"bind\".\n\nFixes: #5386\n\nChange-Id: I990b43aab96b42665af1b2187ad6020bee778784",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b0cfa7379cf8513a821a3dbe3028c4965d9f85bd",
        "buggy_code": "(\"class_\", visitors.ExtendedInternalTraversal.dp_plain_obj)",
        "fixed_code": "(\"mapper\", visitors.ExtendedInternalTraversal.dp_plain_obj),",
        "patch": "@@ -720,7 +720,7 @@ def mapper(self):\n         return self\n \n     _cache_key_traversal = [\n-        (\"class_\", visitors.ExtendedInternalTraversal.dp_plain_obj)\n+        (\"mapper\", visitors.ExtendedInternalTraversal.dp_plain_obj),\n     ]\n \n     @property"
    },
    {
        "commit_id": "14bc09203a8b5b2bc001f764ad7cce6a184975cc",
        "commit_message": "Fix connection string escaping for mssql+pyodbc\n\nFixes: #5373\nChange-Id: Ia41e8f1ef8644c54d23ebfdf3f909c785adf0fb0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/14bc09203a8b5b2bc001f764ad7cce6a184975cc",
        "buggy_code": "token = \"'%s'\" % token",
        "fixed_code": "token = \"{%s}\" % token.replace(\"}\", \"}}\")",
        "patch": "@@ -56,7 +56,7 @@ def create_connect_args(self, url):\n \n             def check_quote(token):\n                 if \";\" in str(token):\n-                    token = \"'%s'\" % token\n+                    token = \"{%s}\" % token.replace(\"}\", \"}}\")\n                 return token\n \n             keys = dict((k, check_quote(v)) for k, v in keys.items())"
    },
    {
        "commit_id": "4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "commit_message": "Improve rendering of core statements w/ ORM elements\n\nThis patch contains a variety of ORM and expression layer\ntweaks to support ORM constructs in select() statements,\nwithout the 1.3.x requiremnt in Query that a full\n_compile_context() + new select() is needed in order to\nget a working statement object.\n\nIncludes such tweaks as the ability to implement\naliased class of an aliased class,\nas we are looking to fully support ACs against subqueries,\nas well as the ability to access anonymously-labeled\nColumnProperty expressions within subqueries by\nnaming the \".key\" of the label after the property\nkey.   Some tuning to query.join() as well\nas ORMJoin internals to allow things to work more\nsmoothly.\n\nChange-Id: Id810f485c5f7ed971529489b84694e02a3356d6d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "buggy_code": "statement = query._statement_20(orm_results=True)",
        "fixed_code": "statement = query._statement_20()",
        "patch": "@@ -228,7 +228,7 @@ def _bake(self, session):\n \n         # in 1.4, this is where before_compile() event is\n         # invoked\n-        statement = query._statement_20(orm_results=True)\n+        statement = query._statement_20()\n \n         # if the query is not safe to cache, we still do everything as though\n         # we did cache it, since the receiver of _bake() assumes subqueryload"
    },
    {
        "commit_id": "4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "commit_message": "Improve rendering of core statements w/ ORM elements\n\nThis patch contains a variety of ORM and expression layer\ntweaks to support ORM constructs in select() statements,\nwithout the 1.3.x requiremnt in Query that a full\n_compile_context() + new select() is needed in order to\nget a working statement object.\n\nIncludes such tweaks as the ability to implement\naliased class of an aliased class,\nas we are looking to fully support ACs against subqueries,\nas well as the ability to access anonymously-labeled\nColumnProperty expressions within subqueries by\nnaming the \".key\" of the label after the property\nkey.   Some tuning to query.join() as well\nas ORMJoin internals to allow things to work more\nsmoothly.\n\nChange-Id: Id810f485c5f7ed971529489b84694e02a3356d6d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "buggy_code": "compile_options = ORMCompileState.default_compile_options.merge(",
        "fixed_code": "compile_options = ORMCompileState.default_compile_options.safe_merge(",
        "patch": "@@ -345,7 +345,7 @@ def load_on_pk_identity(\n     if load_options is None:\n         load_options = QueryContext.default_load_options\n \n-    compile_options = ORMCompileState.default_compile_options.merge(\n+    compile_options = ORMCompileState.default_compile_options.safe_merge(\n         q.compile_options\n     )\n "
    },
    {
        "commit_id": "4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "commit_message": "Improve rendering of core statements w/ ORM elements\n\nThis patch contains a variety of ORM and expression layer\ntweaks to support ORM constructs in select() statements,\nwithout the 1.3.x requiremnt in Query that a full\n_compile_context() + new select() is needed in order to\nget a working statement object.\n\nIncludes such tweaks as the ability to implement\naliased class of an aliased class,\nas we are looking to fully support ACs against subqueries,\nas well as the ability to access anonymously-labeled\nColumnProperty expressions within subqueries by\nnaming the \".key\" of the label after the property\nkey.   Some tuning to query.join() as well\nas ORMJoin internals to allow things to work more\nsmoothly.\n\nChange-Id: Id810f485c5f7ed971529489b84694e02a3356d6d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "buggy_code": "(\"orig_query\", SubqueryLoader), compile_state.query",
        "fixed_code": "(\"orig_query\", SubqueryLoader), compile_state.select_statement",
        "patch": "@@ -1143,7 +1143,7 @@ def setup_query(\n         ) = self._get_leftmost(subq_path)\n \n         orig_query = compile_state.attributes.get(\n-            (\"orig_query\", SubqueryLoader), compile_state.query\n+            (\"orig_query\", SubqueryLoader), compile_state.select_statement\n         )\n \n         # generate a new Query from the original, then"
    },
    {
        "commit_id": "4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "commit_message": "Improve rendering of core statements w/ ORM elements\n\nThis patch contains a variety of ORM and expression layer\ntweaks to support ORM constructs in select() statements,\nwithout the 1.3.x requiremnt in Query that a full\n_compile_context() + new select() is needed in order to\nget a working statement object.\n\nIncludes such tweaks as the ability to implement\naliased class of an aliased class,\nas we are looking to fully support ACs against subqueries,\nas well as the ability to access anonymously-labeled\nColumnProperty expressions within subqueries by\nnaming the \".key\" of the label after the property\nkey.   Some tuning to query.join() as well\nas ORMJoin internals to allow things to work more\nsmoothly.\n\nChange-Id: Id810f485c5f7ed971529489b84694e02a3356d6d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4ecd352a9fbb9dbac7b428fe0f098f665c1f0cb1",
        "buggy_code": "any_ = Company.employees.of_type(Boss).any(",
        "fixed_code": "any_ = Company.employees.of_type(Manager).any(",
        "patch": "@@ -54,7 +54,7 @@ def test_any_three(self):\n \n     def test_any_four(self):\n         sess = Session()\n-        any_ = Company.employees.of_type(Boss).any(\n+        any_ = Company.employees.of_type(Manager).any(\n             Manager.manager_name == \"pointy\"\n         )\n         eq_(sess.query(Company).filter(any_).one(), self.c1)"
    },
    {
        "commit_id": "8a6e64323abeb9d08de3f68c63c6401ba1a5f847",
        "commit_message": "Fix 'email_address' being typoed as 'email_addres' in two places",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a6e64323abeb9d08de3f68c63c6401ba1a5f847",
        "buggy_code": "Load(Address).load_only(\"email_addres\")",
        "fixed_code": "Load(Address).load_only(\"email_address\")",
        "patch": "@@ -1155,7 +1155,7 @@ def load_only(loadopt, *attrs):\n \n         session.query(User, Address).join(User.addresses).options(\n                     Load(User).load_only(\"name\", \"fullname\"),\n-                    Load(Address).load_only(\"email_addres\")\n+                    Load(Address).load_only(\"email_address\")\n                 )\n \n "
    },
    {
        "commit_id": "8a6e64323abeb9d08de3f68c63c6401ba1a5f847",
        "commit_message": "Fix 'email_address' being typoed as 'email_addres' in two places",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a6e64323abeb9d08de3f68c63c6401ba1a5f847",
        "buggy_code": "assert \"email_addres\" not in a.__dict__",
        "fixed_code": "assert \"email_address\" not in a.__dict__",
        "patch": "@@ -277,7 +277,7 @@ def test_incomplete_columns(self):\n         eq_(a.user_id, 7)\n         eq_(a.id, 1)\n         # email address auto-defers\n-        assert \"email_addres\" not in a.__dict__\n+        assert \"email_address\" not in a.__dict__\n         eq_(a.email_address, \"jack@bean.com\")\n \n     def test_column_not_present(self):"
    },
    {
        "commit_id": "6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "commit_message": "Convert execution to move through Session\n\nThis patch replaces the ORM execution flow with a\nsingle pathway through Session.execute() for all queries,\nincluding Core and ORM.\n\nCurrently included is full support for ORM Query,\nQuery.from_statement(), select(), as well as the\nbaked query and horizontal shard systems.  Initial\nchanges have also been made to the dogpile caching\nexample, which like baked query makes use of a\nnew ORM-specific execution hook that replaces the\nuse of both QueryEvents.before_compile() as well\nas Query._execute_and_instances() as the central\nORM interception hooks.\n\nselect() and Query() constructs alike can be passed to\nSession.execute() where they will return ORM\nresults in a Results object.   This API is currently\nused internally by Query.   Full support for\nSession.execute()->results to behave in a fully\n2.0 fashion will be in later changesets.\n\nbulk update/delete with ORM support will also\nbe delivered via the update() and delete()\nconstructs, however these have not yet been adapted\nto the new system and may follow in a subsequent\nupdate.\n\nPerformance is also beginning to lag as of this\ncommit and some previous ones.   It is hoped that\na few central functions such as the coercions\nfunctions can be rewritten in C to re-gain\nperformance.  Additionally, query caching\nis now available and some subsequent patches\nwill attempt to cache more of the per-execution\nwork from the ORM layer, e.g. column getters\nand adapters.\n\nThis patch also contains initial \"turn on\" of the\ncaching system enginewide via the query_cache_size\nparameter to create_engine(). Still defaulting at\nzero for \"no caching\".   The caching system still\nneeds adjustments in order to gain adequate performance.\n\nChange-Id: I047a7ebb26aa85dc01f6789fac2bff561dcd555d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "buggy_code": ".options(FromCache(\"local_session\"))",
        "fixed_code": ".execution_options(cache_options=FromCache(\"local_session\"))",
        "patch": "@@ -75,8 +75,8 @@ def _cache_dictionary(self):\n     # of \"person 10\"\n     q = (\n         Session.query(Person)\n-        .options(FromCache(\"local_session\"))\n         .filter(Person.name == \"person 10\")\n+        .execution_options(cache_options=FromCache(\"local_session\"))\n     )\n \n     # load from DB"
    },
    {
        "commit_id": "6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "commit_message": "Convert execution to move through Session\n\nThis patch replaces the ORM execution flow with a\nsingle pathway through Session.execute() for all queries,\nincluding Core and ORM.\n\nCurrently included is full support for ORM Query,\nQuery.from_statement(), select(), as well as the\nbaked query and horizontal shard systems.  Initial\nchanges have also been made to the dogpile caching\nexample, which like baked query makes use of a\nnew ORM-specific execution hook that replaces the\nuse of both QueryEvents.before_compile() as well\nas Query._execute_and_instances() as the central\nORM interception hooks.\n\nselect() and Query() constructs alike can be passed to\nSession.execute() where they will return ORM\nresults in a Results object.   This API is currently\nused internally by Query.   Full support for\nSession.execute()->results to behave in a fully\n2.0 fashion will be in later changesets.\n\nbulk update/delete with ORM support will also\nbe delivered via the update() and delete()\nconstructs, however these have not yet been adapted\nto the new system and may follow in a subsequent\nupdate.\n\nPerformance is also beginning to lag as of this\ncommit and some previous ones.   It is hoped that\na few central functions such as the coercions\nfunctions can be rewritten in C to re-gain\nperformance.  Additionally, query caching\nis now available and some subsequent patches\nwill attempt to cache more of the per-execution\nwork from the ORM layer, e.g. column getters\nand adapters.\n\nThis patch also contains initial \"turn on\" of the\ncaching system enginewide via the query_cache_size\nparameter to create_engine(). Still defaulting at\nzero for \"no caching\".   The caching system still\nneeds adjustments in order to gain adequate performance.\n\nChange-Id: I047a7ebb26aa85dc01f6789fac2bff561dcd555d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "buggy_code": "assert_raises(Exception, loading.instances, q, cursor, ctx)",
        "fixed_code": "assert_raises(Exception, loading.instances, cursor, ctx)",
        "patch": "@@ -78,7 +78,7 @@ def test_cursor_close_w_failed_rowproc(self):\n         ctx.compile_state._entities = [\n             mock.Mock(row_processor=mock.Mock(side_effect=Exception(\"boom\")))\n         ]\n-        assert_raises(Exception, loading.instances, q, cursor, ctx)\n+        assert_raises(Exception, loading.instances, cursor, ctx)\n         assert cursor.close.called, \"Cursor wasn't closed\"\n \n     def test_row_proc_not_created(self):"
    },
    {
        "commit_id": "6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "commit_message": "Convert execution to move through Session\n\nThis patch replaces the ORM execution flow with a\nsingle pathway through Session.execute() for all queries,\nincluding Core and ORM.\n\nCurrently included is full support for ORM Query,\nQuery.from_statement(), select(), as well as the\nbaked query and horizontal shard systems.  Initial\nchanges have also been made to the dogpile caching\nexample, which like baked query makes use of a\nnew ORM-specific execution hook that replaces the\nuse of both QueryEvents.before_compile() as well\nas Query._execute_and_instances() as the central\nORM interception hooks.\n\nselect() and Query() constructs alike can be passed to\nSession.execute() where they will return ORM\nresults in a Results object.   This API is currently\nused internally by Query.   Full support for\nSession.execute()->results to behave in a fully\n2.0 fashion will be in later changesets.\n\nbulk update/delete with ORM support will also\nbe delivered via the update() and delete()\nconstructs, however these have not yet been adapted\nto the new system and may follow in a subsequent\nupdate.\n\nPerformance is also beginning to lag as of this\ncommit and some previous ones.   It is hoped that\na few central functions such as the coercions\nfunctions can be rewritten in C to re-gain\nperformance.  Additionally, query caching\nis now available and some subsequent patches\nwill attempt to cache more of the per-execution\nwork from the ORM layer, e.g. column getters\nand adapters.\n\nThis patch also contains initial \"turn on\" of the\ncaching system enginewide via the query_cache_size\nparameter to create_engine(). Still defaulting at\nzero for \"no caching\".   The caching system still\nneeds adjustments in order to gain adequate performance.\n\nChange-Id: I047a7ebb26aa85dc01f6789fac2bff561dcd555d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "buggy_code": "session.connection(m)",
        "fixed_code": "session.connection(mapper=m)",
        "patch": "@@ -256,7 +256,7 @@ def test_configure_on_session(self):\n \n         m = mapper(User, users)\n         session = create_session()\n-        session.connection(m)\n+        session.connection(mapper=m)\n \n     def test_incomplete_columns(self):\n         \"\"\"Loading from a select which does not contain all columns\"\"\""
    },
    {
        "commit_id": "6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "commit_message": "Convert execution to move through Session\n\nThis patch replaces the ORM execution flow with a\nsingle pathway through Session.execute() for all queries,\nincluding Core and ORM.\n\nCurrently included is full support for ORM Query,\nQuery.from_statement(), select(), as well as the\nbaked query and horizontal shard systems.  Initial\nchanges have also been made to the dogpile caching\nexample, which like baked query makes use of a\nnew ORM-specific execution hook that replaces the\nuse of both QueryEvents.before_compile() as well\nas Query._execute_and_instances() as the central\nORM interception hooks.\n\nselect() and Query() constructs alike can be passed to\nSession.execute() where they will return ORM\nresults in a Results object.   This API is currently\nused internally by Query.   Full support for\nSession.execute()->results to behave in a fully\n2.0 fashion will be in later changesets.\n\nbulk update/delete with ORM support will also\nbe delivered via the update() and delete()\nconstructs, however these have not yet been adapted\nto the new system and may follow in a subsequent\nupdate.\n\nPerformance is also beginning to lag as of this\ncommit and some previous ones.   It is hoped that\na few central functions such as the coercions\nfunctions can be rewritten in C to re-gain\nperformance.  Additionally, query caching\nis now available and some subsequent patches\nwill attempt to cache more of the per-execution\nwork from the ORM layer, e.g. column getters\nand adapters.\n\nThis patch also contains initial \"turn on\" of the\ncaching system enginewide via the query_cache_size\nparameter to create_engine(). Still defaulting at\nzero for \"no caching\".   The caching system still\nneeds adjustments in order to gain adequate performance.\n\nChange-Id: I047a7ebb26aa85dc01f6789fac2bff561dcd555d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6930dfc032c3f9f474e71ab4e021c0ef8384930e",
        "buggy_code": "eq_(hash(a_key), hash(b_key))",
        "fixed_code": "eq_(hash(a_key.key), hash(b_key.key))",
        "patch": "@@ -681,7 +681,7 @@ def _run_cache_key_fixture(self, fixture, compare_values):\n                     continue\n \n                 eq_(a_key.key, b_key.key)\n-                eq_(hash(a_key), hash(b_key))\n+                eq_(hash(a_key.key), hash(b_key.key))\n \n                 for a_param, b_param in zip(\n                     a_key.bindparams, b_key.bindparams"
    },
    {
        "commit_id": "c82540033c0876690355f80a19ab46f7a9304d72",
        "commit_message": "Merge \"fix typo in reference documentation\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c82540033c0876690355f80a19ab46f7a9304d72",
        "buggy_code": ":meth:.`.Query.prefix_with` - generic SELECT prefixing which also",
        "fixed_code": ":meth:`.Query.prefix_with` - generic SELECT prefixing which also",
        "patch": "@@ -1599,7 +1599,7 @@ def with_hint(self, selectable, text, dialect_name=\"*\"):\n \n             :meth:`_query.Query.with_statement_hint`\n \n-            :meth:.`.Query.prefix_with` - generic SELECT prefixing which also\n+            :meth:`.Query.prefix_with` - generic SELECT prefixing which also\n             can suit some database-specific HINT syntaxes such as MySQL\n             optimizer hints\n "
    },
    {
        "commit_id": "c82540033c0876690355f80a19ab46f7a9304d72",
        "commit_message": "Merge \"fix typo in reference documentation\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c82540033c0876690355f80a19ab46f7a9304d72",
        "buggy_code": ":meth:.`.Select.prefix_with` - generic SELECT prefixing which also",
        "fixed_code": ":meth:`.Select.prefix_with` - generic SELECT prefixing which also",
        "patch": "@@ -3838,7 +3838,7 @@ def with_statement_hint(self, text, dialect_name=\"*\"):\n \n             :meth:`_expression.Select.with_hint`\n \n-            :meth:.`.Select.prefix_with` - generic SELECT prefixing which also\n+            :meth:`.Select.prefix_with` - generic SELECT prefixing which also\n             can suit some database-specific HINT syntaxes such as MySQL\n             optimizer hints\n "
    },
    {
        "commit_id": "2632a8db05d69607260d412852f7cc5c0ac0f368",
        "commit_message": "fix typo in reference documentation\n\nChange-Id: I5720635863f0d8a8ebfa4ddc51008bb93c1067b4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2632a8db05d69607260d412852f7cc5c0ac0f368",
        "buggy_code": ":meth:.`.Query.prefix_with` - generic SELECT prefixing which also",
        "fixed_code": ":meth:`.Query.prefix_with` - generic SELECT prefixing which also",
        "patch": "@@ -1599,7 +1599,7 @@ def with_hint(self, selectable, text, dialect_name=\"*\"):\n \n             :meth:`_query.Query.with_statement_hint`\n \n-            :meth:.`.Query.prefix_with` - generic SELECT prefixing which also\n+            :meth:`.Query.prefix_with` - generic SELECT prefixing which also\n             can suit some database-specific HINT syntaxes such as MySQL\n             optimizer hints\n "
    },
    {
        "commit_id": "2632a8db05d69607260d412852f7cc5c0ac0f368",
        "commit_message": "fix typo in reference documentation\n\nChange-Id: I5720635863f0d8a8ebfa4ddc51008bb93c1067b4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2632a8db05d69607260d412852f7cc5c0ac0f368",
        "buggy_code": ":meth:.`.Select.prefix_with` - generic SELECT prefixing which also",
        "fixed_code": ":meth:`.Select.prefix_with` - generic SELECT prefixing which also",
        "patch": "@@ -3838,7 +3838,7 @@ def with_statement_hint(self, text, dialect_name=\"*\"):\n \n             :meth:`_expression.Select.with_hint`\n \n-            :meth:.`.Select.prefix_with` - generic SELECT prefixing which also\n+            :meth:`.Select.prefix_with` - generic SELECT prefixing which also\n             can suit some database-specific HINT syntaxes such as MySQL\n             optimizer hints\n "
    },
    {
        "commit_id": "3fb0eb5a156ab7dbe19d82717dd197d9d22e64f1",
        "commit_message": "Merge \"Fix query string escaping in engine URLs\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3fb0eb5a156ab7dbe19d82717dd197d9d22e64f1",
        "buggy_code": "\"%s=%s\" % (k, element)",
        "fixed_code": "\"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))",
        "patch": "@@ -96,7 +96,7 @@ def __to_string__(self, hide_password=True):\n             keys = list(self.query)\n             keys.sort()\n             s += \"?\" + \"&\".join(\n-                \"%s=%s\" % (k, element)\n+                \"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))\n                 for k in keys\n                 for element in util.to_list(self.query[k])\n             )"
    },
    {
        "commit_id": "2644693c0bf5b775f7a7283cdbf566a37872586f",
        "commit_message": "Fix query string escaping in engine URLs\n\nFixed issue in :class:`.URL` object where stringifying the object\nwould not URL encode special characters, preventing the URL from being\nre-consumable as a real URL.  Pull request courtesy Miguel Grinberg.\n\nFixes: #5341\nCloses: #5342\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5342\nPull-request-sha: 362ca3398336a3a892e8020530f0c68d4f2d1d01\n\nChange-Id: Ief6218122d1ec0c70479eb1a90e1c16433801924",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2644693c0bf5b775f7a7283cdbf566a37872586f",
        "buggy_code": "\"%s=%s\" % (k, element)",
        "fixed_code": "\"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))",
        "patch": "@@ -96,7 +96,7 @@ def __to_string__(self, hide_password=True):\n             keys = list(self.query)\n             keys.sort()\n             s += \"?\" + \"&\".join(\n-                \"%s=%s\" % (k, element)\n+                \"%s=%s\" % (util.quote_plus(k), util.quote_plus(element))\n                 for k in keys\n                 for element in util.to_list(self.query[k])\n             )"
    },
    {
        "commit_id": "3d55263c92ee29a0257d823124c353a35246cf31",
        "commit_message": "fix table.schema version to 1.3.18\n\nFixes: #5338\nChange-Id: I12ce8021f5627c306c768b74da991ef4af0a5b55",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3d55263c92ee29a0257d823124c353a35246cf31",
        "buggy_code": ".. versionadded:: 1.3.17 :func:`_expression.table` can now",
        "fixed_code": ".. versionadded:: 1.3.18 :func:`_expression.table` can now",
        "patch": "@@ -1945,7 +1945,7 @@ def __init__(self, name, *columns, **kw):\n \n         :param schema: The schema name for this table.\n \n-            .. versionadded:: 1.3.17 :func:`_expression.table` can now\n+            .. versionadded:: 1.3.18 :func:`_expression.table` can now\n                accept a ``schema`` argument.\n         \"\"\"\n "
    },
    {
        "commit_id": "0d611b88911217727a174916b83e296e8c7105b1",
        "commit_message": "Reword delete-orphan on many error message and document\n\nFor many years we have encountered users making use of the\n\"single_parent\" flag in response to the error message for\n\"delete-orphan\" expressing this as a means to cancel the current\nerror.   However, the actual issue here is usually a misuse\nof the delete-orphan cascade setting.  Reword the error message to\nbe much more descriptive about what this means and add new\nerror link sections describing the situation in as much detail\nas possible.\n\nFixes: #5329\nChange-Id: I7ba710378b2935479ab22ff9a0a79c692dbf69a6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0d611b88911217727a174916b83e296e8c7105b1",
        "buggy_code": "\"On A.bs, delete-orphan cascade is not supported\",",
        "fixed_code": "\"For many-to-many relationship A.bs, delete-orphan cascade\",",
        "patch": "@@ -2247,7 +2247,7 @@ def test_single_parent_error(self):\n         mapper(B, b)\n         assert_raises_message(\n             sa_exc.ArgumentError,\n-            \"On A.bs, delete-orphan cascade is not supported\",\n+            \"For many-to-many relationship A.bs, delete-orphan cascade\",\n             configure_mappers,\n         )\n "
    },
    {
        "commit_id": "e70e8a7f89f9b50d8f1e3161c44bbfcf64e8b9f3",
        "commit_message": "Expand CTE testing and begin to make this more prominent.\n\nSQLite supports CTEs as do both the MariaDB and MySQL\ndatabases now.  Expand test support and begin adding\nnew tutorial sections to make this concept more prominent.\n\nAlso fix some formatting issues in the tutorial, and start\nmoving more towards {opensql} - the \"SQL\" button thing\nis cool but the tutorials mainly need to illustrate how\nthe SQL looks for things.  Screens are bigger now and\nwe likely should move away from the SQL button almost\nentirely.\n\nCTE for the tutorial needed zzzeeksphinx fix to recognize\n\"WITH\" so bumping that to latest release number in git.\n\nChange-Id: Ia1bbe3248b4f7c74fbee06fedf76a6ce94cd28a6\nReferences: #5269",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e70e8a7f89f9b50d8f1e3161c44bbfcf64e8b9f3",
        "buggy_code": "needs_extensions = {\"zzzeeksphinx\": \"1.1.2\"}",
        "fixed_code": "needs_extensions = {\"zzzeeksphinx\": \"1.1.5\"}",
        "patch": "@@ -37,7 +37,7 @@\n     \"changelog\",\n     \"sphinx_paramlinks\",\n ]\n-needs_extensions = {\"zzzeeksphinx\": \"1.1.2\"}\n+needs_extensions = {\"zzzeeksphinx\": \"1.1.5\"}\n \n # Add any paths that contain templates here, relative to this directory.\n # not sure why abspath() is needed here, some users"
    },
    {
        "commit_id": "bbf644862ab05734d153d74abf59aa3492278563",
        "commit_message": "Integrate new Result into ORM query\n\nThe next step in the 2.0 ORM changes is to have the\nORM integrate with the new Result object fully.\n\nthis patch uses Result to represent ORM objects rather\nthan lists.  public API to get at this Result is not\nadded yet.   dogpile.cache and horizontal sharding\nrecipe/extensions have small adjustments to accommodate\nthis change.\n\nCallcounts have fluctuated, some slightly better and\nsome slightly worse.  A few have gone up by a bit,\nhowever as the codebase is still in flux it is anticipated\nthere will be some performance gains later on as\nORM fetching is refined to no longer need to accommodate\nfor extensive aliasing.   The addition of caching\nwill then change the entire story.\n\nReferences: #5087\nReferences: #4395\n\nChange-Id: If1a23824ffb77d8d58cf2338cf35dd6b5963b17f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bbf644862ab05734d153d74abf59aa3492278563",
        "buggy_code": "assert_raises(Exception, list, loading.instances(q, cursor, ctx))",
        "fixed_code": "assert_raises(Exception, loading.instances, q, cursor, ctx)",
        "patch": "@@ -78,7 +78,7 @@ def test_cursor_close_w_failed_rowproc(self):\n         q._entities = [\n             mock.Mock(row_processor=mock.Mock(side_effect=Exception(\"boom\")))\n         ]\n-        assert_raises(Exception, list, loading.instances(q, cursor, ctx))\n+        assert_raises(Exception, loading.instances, q, cursor, ctx)\n         assert cursor.close.called, \"Cursor wasn't closed\"\n \n     def test_row_proc_not_created(self):"
    },
    {
        "commit_id": "aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "commit_message": "Propose Result as immediate replacement for ResultProxy\n\nAs progress is made on the _future.Result, including breaking\nit out such that DBAPI behaviors are local to specific\nimplementations, it becomes apparent that the Result object\nis a functional superset of ResultProxy and that basic\noperations like fetchone(), fetchall(), and fetchmany()\nbehave pretty much exactly the same way on the new object.\nReorganize things so that ResultProxy is now referred to\nas LegacyCursorResult, which subclasses CursorResult\nthat represents the DBAPI-cursor version of Result,\nmaking use of a multiple inheritance pattern so that\nthe functionality of Result is also available in non-DBAPI\ncontexts, as will be necessary for some ORM\npatterns.\n\nAdditionally propose the composition system for Result\nthat will form the basis for ORM-alternative result\nsystems such as horizontal sharding and dogpile cache.\nAs ORM results will soon be coming directly from\ninstances of Result, these extensions will instead\nbuild their own ResultFetchStrategies that perform\nthe special steps to create composed or cached\nresult sets.\n\nAlso considering at the moment not emitting deprecation\nwarnings for fetchXYZ() methods; the immediate issue\nis Keystone tests are calling upon it, but as the\nimplementations here are proving to be not in any\nkind of conflict with how Result works, there's\nnot too much issue leaving them around and deprecating\nat some later point.\n\nReferences: #5087\nReferences: #4395\nFixes: #4959\nChange-Id: I8091919d45421e3f53029b8660427f844fee0228",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "buggy_code": "return _instance, self._label_name, self.entities",
        "fixed_code": "return _instance, self._label_name, tuple(self.entities)",
        "patch": "@@ -4315,7 +4315,7 @@ def row_processor(self, query, context, result):\n             polymorphic_discriminator=self._polymorphic_discriminator,\n         )\n \n-        return _instance, self._label_name, self.entities\n+        return _instance, self._label_name, tuple(self.entities)\n \n     def setup_context(self, query, context):\n         adapter = self._get_entity_clauses(query, context)"
    },
    {
        "commit_id": "aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "commit_message": "Propose Result as immediate replacement for ResultProxy\n\nAs progress is made on the _future.Result, including breaking\nit out such that DBAPI behaviors are local to specific\nimplementations, it becomes apparent that the Result object\nis a functional superset of ResultProxy and that basic\noperations like fetchone(), fetchall(), and fetchmany()\nbehave pretty much exactly the same way on the new object.\nReorganize things so that ResultProxy is now referred to\nas LegacyCursorResult, which subclasses CursorResult\nthat represents the DBAPI-cursor version of Result,\nmaking use of a multiple inheritance pattern so that\nthe functionality of Result is also available in non-DBAPI\ncontexts, as will be necessary for some ORM\npatterns.\n\nAdditionally propose the composition system for Result\nthat will form the basis for ORM-alternative result\nsystems such as horizontal sharding and dogpile cache.\nAs ORM results will soon be coming directly from\ninstances of Result, these extensions will instead\nbuild their own ResultFetchStrategies that perform\nthe special steps to create composed or cached\nresult sets.\n\nAlso considering at the moment not emitting deprecation\nwarnings for fetchXYZ() methods; the immediate issue\nis Keystone tests are calling upon it, but as the\nimplementations here are proving to be not in any\nkind of conflict with how Result works, there's\nnot too much issue leaving them around and deprecating\nat some later point.\n\nReferences: #5087\nReferences: #4395\nFixes: #4959\nChange-Id: I8091919d45421e3f53029b8660427f844fee0228",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "buggy_code": "), patch(\"sqlalchemy.engine.result.ResultProxy.rowcount\", rowcount):",
        "fixed_code": "), patch(\"sqlalchemy.engine.cursor.CursorResult.rowcount\", rowcount):",
        "patch": "@@ -451,7 +451,7 @@ def rowcount(self):\n \n         with patch.object(\n             config.db.dialect, \"supports_sane_multi_rowcount\", False\n-        ), patch(\"sqlalchemy.engine.result.ResultProxy.rowcount\", rowcount):\n+        ), patch(\"sqlalchemy.engine.cursor.CursorResult.rowcount\", rowcount):\n \n             Foo = self.classes.Foo\n             s1 = self._fixture()"
    },
    {
        "commit_id": "aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "commit_message": "Propose Result as immediate replacement for ResultProxy\n\nAs progress is made on the _future.Result, including breaking\nit out such that DBAPI behaviors are local to specific\nimplementations, it becomes apparent that the Result object\nis a functional superset of ResultProxy and that basic\noperations like fetchone(), fetchall(), and fetchmany()\nbehave pretty much exactly the same way on the new object.\nReorganize things so that ResultProxy is now referred to\nas LegacyCursorResult, which subclasses CursorResult\nthat represents the DBAPI-cursor version of Result,\nmaking use of a multiple inheritance pattern so that\nthe functionality of Result is also available in non-DBAPI\ncontexts, as will be necessary for some ORM\npatterns.\n\nAdditionally propose the composition system for Result\nthat will form the basis for ORM-alternative result\nsystems such as horizontal sharding and dogpile cache.\nAs ORM results will soon be coming directly from\ninstances of Result, these extensions will instead\nbuild their own ResultFetchStrategies that perform\nthe special steps to create composed or cached\nresult sets.\n\nAlso considering at the moment not emitting deprecation\nwarnings for fetchXYZ() methods; the immediate issue\nis Keystone tests are calling upon it, but as the\nimplementations here are proving to be not in any\nkind of conflict with how Result works, there's\nnot too much issue leaving them around and deprecating\nat some later point.\n\nReferences: #5087\nReferences: #4395\nFixes: #4959\nChange-Id: I8091919d45421e3f53029b8660427f844fee0228",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aded39f68c29e44a50c85be1ddb370d3d1affe9d",
        "buggy_code": "from sqlalchemy.engine.result import CursorResultMetaData",
        "fixed_code": "from sqlalchemy.engine.cursor import CursorResultMetaData",
        "patch": "@@ -5020,7 +5020,7 @@ def test_insert_from_select(self):\n         )\n \n     def test_nested_api(self):\n-        from sqlalchemy.engine.result import CursorResultMetaData\n+        from sqlalchemy.engine.cursor import CursorResultMetaData\n \n         stmt2 = select([table2]).subquery()\n "
    },
    {
        "commit_id": "b99012d143e0f61bada9c86f524c421fd41c20c2",
        "commit_message": "Enable zzzeeksphinx module prefixes\n\nzzzeeksphinx 1.1.2 in git can now convert short\nprefix names in a configured lookup to fully qualified module\nnames, so that\nwe can have succinct and portable pyrefs\nthat still resolve absolutely.\nIt also includes a formatter that will format all pyrefs\nin a fully consistent way regardless of the package path,\nby unconditionally removing all package tokens but always\nleaving class names in place including for methods, which\nmeans we no longer have to deal with tildes in pyrefs.\n\nThe most immediate goal of the absolute prefixes is\nthat we have lots of\n\"ambiguous\" names that appear in muliple places, like select(),\nARRAY, ENUM etc.   With the incoming future packages there\nis going to be lots of name overlap so it is necessary\nthat all names eventually use absolute package paths\nwhen Sphinx receives them.\n\nIn multiple stages, pyrefs will be converted using the\nzzzeeksphinx tools/fix_xrefs.py tool so that doclinks can\nbe made absolute using symbolic prefixes.\n\nFor this review, the actual search and replace of symbols\nis not performed, instead some general cleanup to prepare\nthe docs as well as a lookup file used by the tool\nto do the conversion.   this relatively small patch will\nbe backported\nwith appropriate changes to 1.3, 1.2, 1.1 and the tool\ncan then be run on each branch individually.  We are shooting\nfor almost no warnings at all for master (still a handful\nI can't figure out which don't seem to have any impact)\n, very few for 1.3,\nand for 1.2 / 1.1 we hope for a significant reduction\nin warnings.\n\nOverall for all versions pyrefs should\nalways point to the correct target, if they are in fact\nhyperlinked.  it's better for a ref to go nowhere and\nbe plain text than go to the wrong thing.  Right now,\nhundreds of API links are pointing to the wrong thing\nas they are ambiguous names such as refresh(), insert(),\nupdate(), select(), join(), JSON etc. and Sphinx sends these all\nto essesntially random destinations among as many as five\nor six possible choices per symbol.  A shorthand system\nthat allows us to use absolute refs without having\nto type out a full blown absoulte module is the only\nway this is going to work, and we should ultimately\nseek to abandon any use of prefix dot for lookups.  Everything\nshould be on an underscore token so at the very least the module\nspaces can be reorganized without having to search and replace\nthe entire documentation every time.\n\nChange-Id: I484a7329034af275fcdb322b62b6255dfeea9151",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b99012d143e0f61bada9c86f524c421fd41c20c2",
        "buggy_code": ":paramref:`.execution_options.isolation_level` setting on",
        "fixed_code": ":paramref:`.Connection.execution_options.isolation_level` setting on",
        "patch": "@@ -325,7 +325,7 @@ def do_begin(conn):\n         conn.exec_driver_sql(\"BEGIN\")\n \n .. warning:: When using the above recipe, it is advised to not use the\n-   :paramref:`.execution_options.isolation_level` setting on\n+   :paramref:`.Connection.execution_options.isolation_level` setting on\n    :class:`.Connection` and :func:`.create_engine` with the SQLite driver,\n    as this function necessarily will also alter the \".isolation_level\" setting.\n "
    },
    {
        "commit_id": "b99012d143e0f61bada9c86f524c421fd41c20c2",
        "commit_message": "Enable zzzeeksphinx module prefixes\n\nzzzeeksphinx 1.1.2 in git can now convert short\nprefix names in a configured lookup to fully qualified module\nnames, so that\nwe can have succinct and portable pyrefs\nthat still resolve absolutely.\nIt also includes a formatter that will format all pyrefs\nin a fully consistent way regardless of the package path,\nby unconditionally removing all package tokens but always\nleaving class names in place including for methods, which\nmeans we no longer have to deal with tildes in pyrefs.\n\nThe most immediate goal of the absolute prefixes is\nthat we have lots of\n\"ambiguous\" names that appear in muliple places, like select(),\nARRAY, ENUM etc.   With the incoming future packages there\nis going to be lots of name overlap so it is necessary\nthat all names eventually use absolute package paths\nwhen Sphinx receives them.\n\nIn multiple stages, pyrefs will be converted using the\nzzzeeksphinx tools/fix_xrefs.py tool so that doclinks can\nbe made absolute using symbolic prefixes.\n\nFor this review, the actual search and replace of symbols\nis not performed, instead some general cleanup to prepare\nthe docs as well as a lookup file used by the tool\nto do the conversion.   this relatively small patch will\nbe backported\nwith appropriate changes to 1.3, 1.2, 1.1 and the tool\ncan then be run on each branch individually.  We are shooting\nfor almost no warnings at all for master (still a handful\nI can't figure out which don't seem to have any impact)\n, very few for 1.3,\nand for 1.2 / 1.1 we hope for a significant reduction\nin warnings.\n\nOverall for all versions pyrefs should\nalways point to the correct target, if they are in fact\nhyperlinked.  it's better for a ref to go nowhere and\nbe plain text than go to the wrong thing.  Right now,\nhundreds of API links are pointing to the wrong thing\nas they are ambiguous names such as refresh(), insert(),\nupdate(), select(), join(), JSON etc. and Sphinx sends these all\nto essesntially random destinations among as many as five\nor six possible choices per symbol.  A shorthand system\nthat allows us to use absolute refs without having\nto type out a full blown absoulte module is the only\nway this is going to work, and we should ultimately\nseek to abandon any use of prefix dot for lookups.  Everything\nshould be on an underscore token so at the very least the module\nspaces can be reorganized without having to search and replace\nthe entire documentation every time.\n\nChange-Id: I484a7329034af275fcdb322b62b6255dfeea9151",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b99012d143e0f61bada9c86f524c421fd41c20c2",
        "buggy_code": ":ref:`create_engine`.",
        "fixed_code": ":func:`.create_engine`.",
        "patch": "@@ -610,7 +610,7 @@ def engine_from_config(configuration, prefix=\"sqlalchemy.\", **kwargs):\n     :param configuration: A dictionary (typically produced from a config file,\n         but this is not a requirement).  Items whose keys start with the value\n         of 'prefix' will have that prefix stripped, and will then be passed to\n-        :ref:`create_engine`.\n+        :func:`.create_engine`.\n \n     :param prefix: Prefix to match and then strip from keys\n         in 'configuration'."
    },
    {
        "commit_id": "b99012d143e0f61bada9c86f524c421fd41c20c2",
        "commit_message": "Enable zzzeeksphinx module prefixes\n\nzzzeeksphinx 1.1.2 in git can now convert short\nprefix names in a configured lookup to fully qualified module\nnames, so that\nwe can have succinct and portable pyrefs\nthat still resolve absolutely.\nIt also includes a formatter that will format all pyrefs\nin a fully consistent way regardless of the package path,\nby unconditionally removing all package tokens but always\nleaving class names in place including for methods, which\nmeans we no longer have to deal with tildes in pyrefs.\n\nThe most immediate goal of the absolute prefixes is\nthat we have lots of\n\"ambiguous\" names that appear in muliple places, like select(),\nARRAY, ENUM etc.   With the incoming future packages there\nis going to be lots of name overlap so it is necessary\nthat all names eventually use absolute package paths\nwhen Sphinx receives them.\n\nIn multiple stages, pyrefs will be converted using the\nzzzeeksphinx tools/fix_xrefs.py tool so that doclinks can\nbe made absolute using symbolic prefixes.\n\nFor this review, the actual search and replace of symbols\nis not performed, instead some general cleanup to prepare\nthe docs as well as a lookup file used by the tool\nto do the conversion.   this relatively small patch will\nbe backported\nwith appropriate changes to 1.3, 1.2, 1.1 and the tool\ncan then be run on each branch individually.  We are shooting\nfor almost no warnings at all for master (still a handful\nI can't figure out which don't seem to have any impact)\n, very few for 1.3,\nand for 1.2 / 1.1 we hope for a significant reduction\nin warnings.\n\nOverall for all versions pyrefs should\nalways point to the correct target, if they are in fact\nhyperlinked.  it's better for a ref to go nowhere and\nbe plain text than go to the wrong thing.  Right now,\nhundreds of API links are pointing to the wrong thing\nas they are ambiguous names such as refresh(), insert(),\nupdate(), select(), join(), JSON etc. and Sphinx sends these all\nto essesntially random destinations among as many as five\nor six possible choices per symbol.  A shorthand system\nthat allows us to use absolute refs without having\nto type out a full blown absoulte module is the only\nway this is going to work, and we should ultimately\nseek to abandon any use of prefix dot for lookups.  Everything\nshould be on an underscore token so at the very least the module\nspaces can be reorganized without having to search and replace\nthe entire documentation every time.\n\nChange-Id: I484a7329034af275fcdb322b62b6255dfeea9151",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b99012d143e0f61bada9c86f524c421fd41c20c2",
        "buggy_code": "\"\"\"Symbol indicating an :class:`InspectionAttr` that's",
        "fixed_code": "\"\"\"Symbol indicating an :class:`.InspectionAttr` that's",
        "patch": "@@ -81,7 +81,7 @@ def association_proxy(target_collection, attr, **kw):\n \n \n ASSOCIATION_PROXY = util.symbol(\"ASSOCIATION_PROXY\")\n-\"\"\"Symbol indicating an :class:`InspectionAttr` that's\n+\"\"\"Symbol indicating an :class:`.InspectionAttr` that's\n     of type :class:`.AssociationProxy`.\n \n    Is assigned to the :attr:`.InspectionAttr.extension_type`"
    },
    {
        "commit_id": "b99012d143e0f61bada9c86f524c421fd41c20c2",
        "commit_message": "Enable zzzeeksphinx module prefixes\n\nzzzeeksphinx 1.1.2 in git can now convert short\nprefix names in a configured lookup to fully qualified module\nnames, so that\nwe can have succinct and portable pyrefs\nthat still resolve absolutely.\nIt also includes a formatter that will format all pyrefs\nin a fully consistent way regardless of the package path,\nby unconditionally removing all package tokens but always\nleaving class names in place including for methods, which\nmeans we no longer have to deal with tildes in pyrefs.\n\nThe most immediate goal of the absolute prefixes is\nthat we have lots of\n\"ambiguous\" names that appear in muliple places, like select(),\nARRAY, ENUM etc.   With the incoming future packages there\nis going to be lots of name overlap so it is necessary\nthat all names eventually use absolute package paths\nwhen Sphinx receives them.\n\nIn multiple stages, pyrefs will be converted using the\nzzzeeksphinx tools/fix_xrefs.py tool so that doclinks can\nbe made absolute using symbolic prefixes.\n\nFor this review, the actual search and replace of symbols\nis not performed, instead some general cleanup to prepare\nthe docs as well as a lookup file used by the tool\nto do the conversion.   this relatively small patch will\nbe backported\nwith appropriate changes to 1.3, 1.2, 1.1 and the tool\ncan then be run on each branch individually.  We are shooting\nfor almost no warnings at all for master (still a handful\nI can't figure out which don't seem to have any impact)\n, very few for 1.3,\nand for 1.2 / 1.1 we hope for a significant reduction\nin warnings.\n\nOverall for all versions pyrefs should\nalways point to the correct target, if they are in fact\nhyperlinked.  it's better for a ref to go nowhere and\nbe plain text than go to the wrong thing.  Right now,\nhundreds of API links are pointing to the wrong thing\nas they are ambiguous names such as refresh(), insert(),\nupdate(), select(), join(), JSON etc. and Sphinx sends these all\nto essesntially random destinations among as many as five\nor six possible choices per symbol.  A shorthand system\nthat allows us to use absolute refs without having\nto type out a full blown absoulte module is the only\nway this is going to work, and we should ultimately\nseek to abandon any use of prefix dot for lookups.  Everything\nshould be on an underscore token so at the very least the module\nspaces can be reorganized without having to search and replace\nthe entire documentation every time.\n\nChange-Id: I484a7329034af275fcdb322b62b6255dfeea9151",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b99012d143e0f61bada9c86f524c421fd41c20c2",
        "buggy_code": "@_sa_util.deprecated_20(\"relation\", \"Please use :func:`joinedload`.\")",
        "fixed_code": "@_sa_util.deprecated_20(\"eagerload\", \"Please use :func:`_orm.joinedload`.\")",
        "patch": "@@ -239,7 +239,7 @@ def clear_mappers():\n selectin_polymorphic = strategy_options.selectin_polymorphic._unbound_fn\n \n \n-@_sa_util.deprecated_20(\"relation\", \"Please use :func:`joinedload`.\")\n+@_sa_util.deprecated_20(\"eagerload\", \"Please use :func:`_orm.joinedload`.\")\n def eagerload(*args, **kwargs):\n     \"\"\"A synonym for :func:`joinedload()`.\"\"\"\n     return joinedload(*args, **kwargs)"
    },
    {
        "commit_id": "b99012d143e0f61bada9c86f524c421fd41c20c2",
        "commit_message": "Enable zzzeeksphinx module prefixes\n\nzzzeeksphinx 1.1.2 in git can now convert short\nprefix names in a configured lookup to fully qualified module\nnames, so that\nwe can have succinct and portable pyrefs\nthat still resolve absolutely.\nIt also includes a formatter that will format all pyrefs\nin a fully consistent way regardless of the package path,\nby unconditionally removing all package tokens but always\nleaving class names in place including for methods, which\nmeans we no longer have to deal with tildes in pyrefs.\n\nThe most immediate goal of the absolute prefixes is\nthat we have lots of\n\"ambiguous\" names that appear in muliple places, like select(),\nARRAY, ENUM etc.   With the incoming future packages there\nis going to be lots of name overlap so it is necessary\nthat all names eventually use absolute package paths\nwhen Sphinx receives them.\n\nIn multiple stages, pyrefs will be converted using the\nzzzeeksphinx tools/fix_xrefs.py tool so that doclinks can\nbe made absolute using symbolic prefixes.\n\nFor this review, the actual search and replace of symbols\nis not performed, instead some general cleanup to prepare\nthe docs as well as a lookup file used by the tool\nto do the conversion.   this relatively small patch will\nbe backported\nwith appropriate changes to 1.3, 1.2, 1.1 and the tool\ncan then be run on each branch individually.  We are shooting\nfor almost no warnings at all for master (still a handful\nI can't figure out which don't seem to have any impact)\n, very few for 1.3,\nand for 1.2 / 1.1 we hope for a significant reduction\nin warnings.\n\nOverall for all versions pyrefs should\nalways point to the correct target, if they are in fact\nhyperlinked.  it's better for a ref to go nowhere and\nbe plain text than go to the wrong thing.  Right now,\nhundreds of API links are pointing to the wrong thing\nas they are ambiguous names such as refresh(), insert(),\nupdate(), select(), join(), JSON etc. and Sphinx sends these all\nto essesntially random destinations among as many as five\nor six possible choices per symbol.  A shorthand system\nthat allows us to use absolute refs without having\nto type out a full blown absoulte module is the only\nway this is going to work, and we should ultimately\nseek to abandon any use of prefix dot for lookups.  Everything\nshould be on an underscore token so at the very least the module\nspaces can be reorganized without having to search and replace\nthe entire documentation every time.\n\nChange-Id: I484a7329034af275fcdb322b62b6255dfeea9151",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b99012d143e0f61bada9c86f524c421fd41c20c2",
        "buggy_code": "either :func:`text()` or :func:`literal_column()` constructs.",
        "fixed_code": "either :func:`.text()` or :func:`.literal_column()` constructs.",
        "patch": "@@ -3424,7 +3424,7 @@ def __init__(\n \n         All arguments which accept :class:`.ClauseElement` arguments also\n         accept string arguments, which will be converted as appropriate into\n-        either :func:`text()` or :func:`literal_column()` constructs.\n+        either :func:`.text()` or :func:`.literal_column()` constructs.\n \n         .. seealso::\n "
    },
    {
        "commit_id": "43bcb0de1ecc1dc2abd7e7c3eb0c39f3eab9adc0",
        "commit_message": "Fix almost all read-level sphinx warnings\n\nThere are some related to changelog that I can't figure out\nand are likely due to something in the changelog extension.\nalso one thing with a \"collection\" I can't figure out.\n\nChange-Id: I0a9e6f4291c3589aa19a4abcb9245cd22a266fe0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/43bcb0de1ecc1dc2abd7e7c3eb0c39f3eab9adc0",
        "buggy_code": "\"\"\"visit the values() dictionary of a :class:`.ValuesBase",
        "fixed_code": "\"\"\"visit the values() dictionary of a :class:`.ValuesBase`",
        "patch": "@@ -386,7 +386,7 @@ def generate_dispatch(\n     \"\"\"visit the values() ordered tuple list of an :class:`.Update` object.\"\"\"\n \n     dp_dml_values = symbol(\"DML_V\")\n-    \"\"\"visit the values() dictionary of a :class:`.ValuesBase\n+    \"\"\"visit the values() dictionary of a :class:`.ValuesBase`\n     (e.g. Insert or Update) object.\n \n     \"\"\""
    },
    {
        "commit_id": "aff41b2384e64c6d9739626791603a2becf0126c",
        "commit_message": "Merge \"Fix distinct_from test for Firebird et al.\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aff41b2384e64c6d9739626791603a2becf0126c",
        "buggy_code": "tbl.create(connection)",
        "fixed_code": "meta.create_all()",
        "patch": "@@ -1036,7 +1036,7 @@ def test_is_or_isnot_distinct_from(\n             Column(\"col_a\", Integer, nullable=True),\n             Column(\"col_b\", Integer, nullable=True),\n         )\n-        tbl.create(connection)\n+        meta.create_all()\n         connection.execute(\n             tbl.insert(),\n             [{\"id\": 1, \"col_a\": col_a_value, \"col_b\": col_b_value}],"
    },
    {
        "commit_id": "10fb4d4d2f755d813993852b8cb9de3a9c0a2b3f",
        "commit_message": "Fix distinct_from test for Firebird et al.\n\nFirebird (and perhaps others) allow us to CREATE TABLE inside a transaction but we can't INSERT INTO that table unless we COMMIT first.\n\nChange-Id: Ie8127ef29f1ec91e7afb88e1429538c27a321784",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/10fb4d4d2f755d813993852b8cb9de3a9c0a2b3f",
        "buggy_code": "tbl.create(connection)",
        "fixed_code": "meta.create_all()",
        "patch": "@@ -1036,7 +1036,7 @@ def test_is_or_isnot_distinct_from(\n             Column(\"col_a\", Integer, nullable=True),\n             Column(\"col_b\", Integer, nullable=True),\n         )\n-        tbl.create(connection)\n+        meta.create_all()\n         connection.execute(\n             tbl.insert(),\n             [{\"id\": 1, \"col_a\": col_a_value, \"col_b\": col_b_value}],"
    },
    {
        "commit_id": "45dd5654a15e9df8eb6c04e49aa9a3b9a1d82197",
        "commit_message": "Merge \"fix typo on testing.skip_if assertion\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/45dd5654a15e9df8eb6c04e49aa9a3b9a1d82197",
        "buggy_code": "@testing.skip_if(lambda: testing.requires.datetime_literals)",
        "fixed_code": "@testing.skip_if(testing.requires.datetime_literals)",
        "patch": "@@ -3249,7 +3249,7 @@ class LiteralTest(fixtures.TestBase):\n         argnames=\"value\",\n         id_=\"ia\",\n     )\n-    @testing.skip_if(lambda: testing.requires.datetime_literals)\n+    @testing.skip_if(testing.requires.datetime_literals)\n     def test_render_datetime(self, value):\n         lit = literal(value)\n "
    },
    {
        "commit_id": "c7d3ca0da477451885158a923aa9ee7e49794541",
        "commit_message": "Run autoflush for column attribute load operations\n\nThe \"autoflush\" behavior of :class:`.Query` will now trigger for nearly\nall ORM level attribute load operations, including when a deferred\ncolumn is loaded as well as when an expired column is loaded.   Previously,\nautoflush on load of expired or unloaded attributes was limited to\nrelationship-bound attributes only.   However, this led to the issue\nwhere column-based attributes that also depended on other rows, or even\nother columns in the same row, in order to express the correct value,\nwould show an effectively stale value when accessed as there could be\npending changes in the session left to be flushed.    Autoflush\nis now disabled only in some cases where attributes are being unexpired in\nthe context of a history operation.\n\nFixes: #5226\nChange-Id: Ibd965b30918cd273ae020411a704bf2bb1891f59",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c7d3ca0da477451885158a923aa9ee7e49794541",
        "buggy_code": "if self._autoflush and not self._populate_existing:",
        "fixed_code": "if self._autoflush:",
        "patch": "@@ -3323,7 +3323,7 @@ def scalar(self):\n     def __iter__(self):\n         context = self._compile_context()\n         context.statement.label_style = LABEL_STYLE_TABLENAME_PLUS_COL\n-        if self._autoflush and not self._populate_existing:\n+        if self._autoflush:\n             self.session._autoflush()\n         return self._execute_and_instances(context)\n "
    },
    {
        "commit_id": "c7d3ca0da477451885158a923aa9ee7e49794541",
        "commit_message": "Run autoflush for column attribute load operations\n\nThe \"autoflush\" behavior of :class:`.Query` will now trigger for nearly\nall ORM level attribute load operations, including when a deferred\ncolumn is loaded as well as when an expired column is loaded.   Previously,\nautoflush on load of expired or unloaded attributes was limited to\nrelationship-bound attributes only.   However, this led to the issue\nwhere column-based attributes that also depended on other rows, or even\nother columns in the same row, in order to express the correct value,\nwould show an effectively stale value when accessed as there could be\npending changes in the session left to be flushed.    Autoflush\nis now disabled only in some cases where attributes are being unexpired in\nthe context of a history operation.\n\nFixes: #5226\nChange-Id: Ibd965b30918cd273ae020411a704bf2bb1891f59",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c7d3ca0da477451885158a923aa9ee7e49794541",
        "buggy_code": "def loader(state, keys):",
        "fixed_code": "def loader(state, keys, passive):",
        "patch": "@@ -223,7 +223,7 @@ class Foo(base):\n \n             data = {\"a\": \"this is a\", \"b\": 12}\n \n-            def loader(state, keys):\n+            def loader(state, keys, passive):\n                 for k in keys:\n                     state.dict[k] = data[k]\n                 return attributes.ATTR_WAS_SET"
    },
    {
        "commit_id": "e6250123a30e457068878394e49b7ca07ca4d3b0",
        "commit_message": "Fix databases -> dialects\n\nThe change in I5343a2d270ed5a8c654b9fe13dff40cdf54649ed\nleft the name \"databases\" present in one spot, which is usually\nnot reached unless tests are being run on only partial files\nwhere not every dialect has been imported.\n\nChange-Id: I5a8776b412eaf2476f8a93eebc31448b6f9218ee",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e6250123a30e457068878394e49b7ca07ca4d3b0",
        "buggy_code": "__import__(\"sqlalchemy.dialects.%s\" % name).databases, name",
        "fixed_code": "__import__(\"sqlalchemy.dialects.%s\" % name).dialects, name",
        "patch": "@@ -167,7 +167,7 @@ def all_dialects(exclude=None):\n         mod = getattr(d, name, None)\n         if not mod:\n             mod = getattr(\n-                __import__(\"sqlalchemy.dialects.%s\" % name).databases, name\n+                __import__(\"sqlalchemy.dialects.%s\" % name).dialects, name\n             )\n         yield mod.dialect()\n "
    },
    {
        "commit_id": "c99f6781d3a0c555561149cada66cb02fe263225",
        "commit_message": "fix typo on testing.skip_if assertion\n\nChange-Id: I3f2eeffb0b59971a6025f9ce69250d6421751d16",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c99f6781d3a0c555561149cada66cb02fe263225",
        "buggy_code": "@testing.skip_if(lambda: testing.requires.datetime_literals)",
        "fixed_code": "@testing.skip_if(testing.requires.datetime_literals)",
        "patch": "@@ -3249,7 +3249,7 @@ class LiteralTest(fixtures.TestBase):\n         argnames=\"value\",\n         id_=\"ia\",\n     )\n-    @testing.skip_if(lambda: testing.requires.datetime_literals)\n+    @testing.skip_if(testing.requires.datetime_literals)\n     def test_render_datetime(self, value):\n         lit = literal(value)\n "
    },
    {
        "commit_id": "becab22dcbe9d68b0671a9246e022c9810f7e319",
        "commit_message": "Test instance for matching class hierarchy on get_from_identity\n\nFixed issue where a lazyload that uses session-local \"get\" against a target\nmany-to-one relationship where an object with the correct primary key is\npresent, however it's an instance of a sibling class, does not correctly\nreturn None as is the case when the lazy loader actually emits a load for\nthat row.\n\nFixes: #5210\nChange-Id: I89f9946cfeba61d89a272435f76a5a082b1da30c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/becab22dcbe9d68b0671a9246e022c9810f7e319",
        "buggy_code": "return loading.get_from_identity(self, key, passive)",
        "fixed_code": "return loading.get_from_identity(self, mapper, key, passive)",
        "patch": "@@ -1617,7 +1617,7 @@ def _identity_lookup(\n         key = mapper.identity_key_from_primary_key(\n             primary_key_identity, identity_token=identity_token\n         )\n-        return loading.get_from_identity(self, key, passive)\n+        return loading.get_from_identity(self, mapper, key, passive)\n \n     @property\n     @util.contextmanager"
    },
    {
        "commit_id": "fcc03730c553b3fc0229e446e886d4f61dcb6291",
        "commit_message": "Merge \"Fix IntegerTest for sqlalchemy-firebird\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fcc03730c553b3fc0229e446e886d4f61dcb6291",
        "buggy_code": "metadata.create_all(connection)",
        "fixed_code": "metadata.create_all(config.db)",
        "patch": "@@ -411,7 +411,7 @@ def _round_trip(self, datatype, data, connection):\n             Column(\"integer_data\", datatype),\n         )\n \n-        metadata.create_all(connection)\n+        metadata.create_all(config.db)\n \n         connection.execute(int_table.insert(), {\"integer_data\": data})\n "
    },
    {
        "commit_id": "79a53645ba8e6c12aff33d9ba1318ea4328ab7de",
        "commit_message": "Fix tests failing for SQLite file databases; repair provisioning\n\n1. ensure provision.py loads dialect implementations when running\nreap_dbs.py.   Reapers haven't been working since\n598f2f7e557073f29563d4d567f43931fc03013f .\n\n2. add some exclusion rules to allow the sqlite_file target to work;\nadd to tox.\n\n3. add reap dbs target for SQLite, repair SQLite drop_db routine\nwhich also wasn't doing the right thing for memory databases\netc.\n\n4. Fix logging in provision files, as the main provision logger\nis the one that's enabled by reap_dbs and maybe others, have all\nthe provision files use the provision logger.\n\nFixes: #5180\nFixes: #5168\n\nChange-Id: Ibc1b0106394d20f5bcf847f37b09d185f26ac9b5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/79a53645ba8e6c12aff33d9ba1318ea4328ab7de",
        "buggy_code": "@profiling.function_call_count(variance=0.10)",
        "fixed_code": "@profiling.function_call_count(variance=0.20)",
        "patch": "@@ -93,7 +93,7 @@ def test_merge_no_load(self):\n \n         sess2.transaction  # autobegin\n \n-        @profiling.function_call_count(variance=0.10)\n+        @profiling.function_call_count(variance=0.20)\n         def go1():\n             return sess2.merge(p1, load=False)\n "
    },
    {
        "commit_id": "937d7d41c796b209e2c333ca3a33a28e601028b7",
        "commit_message": "Merge \"Fix link in docs of query_expression and with_expression\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/937d7d41c796b209e2c333ca3a33a28e601028b7",
        "buggy_code": ":ref:`mapper_query_expression`",
        "fixed_code": ":ref:`mapper_querytime_expression`",
        "patch": "@@ -182,7 +182,7 @@ def query_expression():\n \n     .. seealso::\n \n-        :ref:`mapper_query_expression`\n+        :ref:`mapper_querytime_expression`\n \n     \"\"\"\n     prop = ColumnProperty(_sql.null())"
    },
    {
        "commit_id": "937d7d41c796b209e2c333ca3a33a28e601028b7",
        "commit_message": "Merge \"Fix link in docs of query_expression and with_expression\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/937d7d41c796b209e2c333ca3a33a28e601028b7",
        "buggy_code": ":ref:`mapper_query_expression`",
        "fixed_code": ":ref:`mapper_querytime_expression`",
        "patch": "@@ -1713,7 +1713,7 @@ def with_expression(loadopt, key, expression):\n \n     .. seealso::\n \n-        :ref:`mapper_query_expression`\n+        :ref:`mapper_querytime_expression`\n \n     \"\"\"\n "
    },
    {
        "commit_id": "4cf10e7deb15dc3c5424a209fd243ca760bbbb8b",
        "commit_message": "Fix link in docs of query_expression and with_expression\n\nRef #5198\n\nChange-Id: I566c2f7bbe08e9017e09e133079bef1c38469595",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4cf10e7deb15dc3c5424a209fd243ca760bbbb8b",
        "buggy_code": ":ref:`mapper_query_expression`",
        "fixed_code": ":ref:`mapper_querytime_expression`",
        "patch": "@@ -182,7 +182,7 @@ def query_expression():\n \n     .. seealso::\n \n-        :ref:`mapper_query_expression`\n+        :ref:`mapper_querytime_expression`\n \n     \"\"\"\n     prop = ColumnProperty(_sql.null())"
    },
    {
        "commit_id": "4cf10e7deb15dc3c5424a209fd243ca760bbbb8b",
        "commit_message": "Fix link in docs of query_expression and with_expression\n\nRef #5198\n\nChange-Id: I566c2f7bbe08e9017e09e133079bef1c38469595",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4cf10e7deb15dc3c5424a209fd243ca760bbbb8b",
        "buggy_code": ":ref:`mapper_query_expression`",
        "fixed_code": ":ref:`mapper_querytime_expression`",
        "patch": "@@ -1713,7 +1713,7 @@ def with_expression(loadopt, key, expression):\n \n     .. seealso::\n \n-        :ref:`mapper_query_expression`\n+        :ref:`mapper_querytime_expression`\n \n     \"\"\"\n "
    },
    {
        "commit_id": "ceba13d4be5e73fed4522d6f66ab4c54f60fd983",
        "commit_message": "Repair broken call to sys.exc_info()\n\nFixed regression in 1.3.14 due to :ticket:`4849` where a sys.exc_info()\ncall failed to be invoked correctly when a flush error would occur. Test\ncoverage has been added for this exception case.\n\nFixes: #5196\nChange-Id: Ib59a58a3a9d4c9c6f4b751201b794816a9f70225",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ceba13d4be5e73fed4522d6f66ab4c54f60fd983",
        "buggy_code": "util.raise_(e, with_traceback=sys.exc_info[2])",
        "fixed_code": "util.raise_(e, with_traceback=sys.exc_info()[2])",
        "patch": "@@ -1661,7 +1661,7 @@ def _autoflush(self):\n                     \"consider using a session.no_autoflush block if this \"\n                     \"flush is occurring prematurely\"\n                 )\n-                util.raise_(e, with_traceback=sys.exc_info[2])\n+                util.raise_(e, with_traceback=sys.exc_info()[2])\n \n     def refresh(\n         self,"
    },
    {
        "commit_id": "693938dd6fb2f3ee3e031aed4c62355ac97f3ceb",
        "commit_message": "Rework select(), CompoundSelect() in terms of CompileState\n\nContinuation of I408e0b8be91fddd77cf279da97f55020871f75a9\n\n- add an options() method to the base Generative construct.\nthis will be where ORM options can go\n- Change Null, False_, True_ to be singletons, so that\nwe aren't instantiating them and having to use isinstance.\nThe previous issue with this was that they would produce dupe\nlabels in SELECT statements.   Apply the duplicate column\nlogic, newly added in 1.4, to these objects as well as to\nnon-apply-labels SELECT statements in general as a means of\nimproving this.\n- create a revised system for generating ClauseList compilation\nconstructs that simplfies up front creation to not actually\nuse ClauseList; a simple tuple is rendered by the compiler\nusing the same constrcution rules as what are used for\nClauseList but without creating the actual object.  Apply\nto Select, CompoundSelect, revise Update, Delete\n- Select, CompoundSelect get an initial CompileState\nimplementation.  All methods used only within compilation\nare moved here\n- refine update/insert/delete compile state to not require\nan outside boolean\n- refine and simplify Select._copy_internals\n- rework bind(), which is going away, to not use some\nof the internal traversal stuff\n- remove \"autocommit\", \"for_update\" parameters from Select,\n  references #4643\n- remove \"autocommit\" parameter from TextClause ,\n  references #4643\n- add deprecation warnings for statement.execute(),\nengine.execute(), statement.scalar(), engine.scalar().\nFixes: #5193\n\nChange-Id: I04ca0152b046fd42c5054ba10f37e43fc6e5a57b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/693938dd6fb2f3ee3e031aed4c62355ac97f3ceb",
        "buggy_code": "from .elements import _select_iterables  # noqa",
        "fixed_code": "from .base import _select_iterables  # noqa",
        "patch": "@@ -84,6 +84,7 @@\n \n \n from .base import _from_objects  # noqa\n+from .base import _select_iterables  # noqa\n from .base import ColumnCollection  # noqa\n from .base import Executable  # noqa\n from .base import PARSE_AUTOCOMMIT  # noqa\n@@ -92,7 +93,6 @@\n from .dml import Update  # noqa\n from .dml import UpdateBase  # noqa\n from .dml import ValuesBase  # noqa\n-from .elements import _select_iterables  # noqa\n from .elements import _truncated_label  # noqa\n from .elements import between  # noqa\n from .elements import BinaryExpression  # noqa"
    },
    {
        "commit_id": "693938dd6fb2f3ee3e031aed4c62355ac97f3ceb",
        "commit_message": "Rework select(), CompoundSelect() in terms of CompileState\n\nContinuation of I408e0b8be91fddd77cf279da97f55020871f75a9\n\n- add an options() method to the base Generative construct.\nthis will be where ORM options can go\n- Change Null, False_, True_ to be singletons, so that\nwe aren't instantiating them and having to use isinstance.\nThe previous issue with this was that they would produce dupe\nlabels in SELECT statements.   Apply the duplicate column\nlogic, newly added in 1.4, to these objects as well as to\nnon-apply-labels SELECT statements in general as a means of\nimproving this.\n- create a revised system for generating ClauseList compilation\nconstructs that simplfies up front creation to not actually\nuse ClauseList; a simple tuple is rendered by the compiler\nusing the same constrcution rules as what are used for\nClauseList but without creating the actual object.  Apply\nto Select, CompoundSelect, revise Update, Delete\n- Select, CompoundSelect get an initial CompileState\nimplementation.  All methods used only within compilation\nare moved here\n- refine update/insert/delete compile state to not require\nan outside boolean\n- refine and simplify Select._copy_internals\n- rework bind(), which is going away, to not use some\nof the internal traversal stuff\n- remove \"autocommit\", \"for_update\" parameters from Select,\n  references #4643\n- remove \"autocommit\" parameter from TextClause ,\n  references #4643\n- add deprecation warnings for statement.execute(),\nengine.execute(), statement.scalar(), engine.scalar().\nFixes: #5193\n\nChange-Id: I04ca0152b046fd42c5054ba10f37e43fc6e5a57b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/693938dd6fb2f3ee3e031aed4c62355ac97f3ceb",
        "buggy_code": "@profiling.function_call_count(variance=0.15, warmup=1)",
        "fixed_code": "@profiling.function_call_count(variance=0.15, warmup=2)",
        "patch": "@@ -105,7 +105,7 @@ def stmt_fixture_one(self, mapping_fixture):\n             for i in range(100)\n         ]\n \n-    @profiling.function_call_count(variance=0.15, warmup=1)\n+    @profiling.function_call_count(variance=0.15, warmup=2)\n     def test_statement_one(self, stmt_fixture_one):\n         current_key = None\n         for stmt in stmt_fixture_one:"
    },
    {
        "commit_id": "0c294d356f7cbb22a8da3fc4552a9c4232c3f69a",
        "commit_message": "Reflect comments from any table accessible by the current user\n\nFixed a reflection bug where table comments could only be retrieved for\ntables actually owned by the user but not for tables visible to the user\nbut owned by someone else.  Pull request courtesy Dave Hirschfeld.\n\nFixes: #5146\nCloses: #5147\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5147\nPull-request-sha: 0651e3bed05923765203b37986a2506dac3e634e\n\nChange-Id: If970fda10d6adf04d926d38df1a567df1de9f7b9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0c294d356f7cbb22a8da3fc4552a9c4232c3f69a",
        "buggy_code": "FROM user_tab_comments",
        "fixed_code": "FROM all_tab_comments",
        "patch": "@@ -1760,7 +1760,7 @@ def get_table_comment(\n \n         COMMENT_SQL = \"\"\"\n             SELECT comments\n-            FROM user_tab_comments\n+            FROM all_tab_comments\n             WHERE table_name = :table_name\n         \"\"\"\n "
    },
    {
        "commit_id": "f9753f5c8f7c4427fa7b21076d3f46177afbfcd0",
        "commit_message": "fix typo in PickleType documentation",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f9753f5c8f7c4427fa7b21076d3f46177afbfcd0",
        "buggy_code": "pickle-compatible ``dumps` and ``loads`` methods.",
        "fixed_code": "pickle-compatible ``dumps`` and ``loads`` methods.",
        "patch": "@@ -1628,7 +1628,7 @@ def __init__(\n \n         :param pickler: defaults to cPickle.pickle or pickle.pickle if\n           cPickle is not available.  May be any object with\n-          pickle-compatible ``dumps` and ``loads`` methods.\n+          pickle-compatible ``dumps`` and ``loads`` methods.\n \n         :param comparator: a 2-arg callable predicate used\n           to compare values of this type.  If left as ``None``,"
    },
    {
        "commit_id": "57dc36a01b2b334a996f73f6a78b3bfbe4d9f2ec",
        "commit_message": "Ensure all nested exception throws have a cause\n\nApplied an explicit \"cause\" to most if not all internally raised exceptions\nthat are raised from within an internal exception catch, to avoid\nmisleading stacktraces that suggest an error within the handling of an\nexception.  While it would be preferable to suppress the internally caught\nexception in the way that the ``__suppress_context__`` attribute would,\nthere does not as yet seem to be a way to do this without suppressing an\nenclosing user constructed context, so for now it exposes the internally\ncaught exception as the cause so that full information about the context\nof the error is maintained.\n\nFixes: #4849\nChange-Id: I55a86b29023675d9e5e49bc7edc5a2dc0bcd4751",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/57dc36a01b2b334a996f73f6a78b3bfbe4d9f2ec",
        "buggy_code": "@profiling.function_call_count()",
        "fixed_code": "@profiling.function_call_count(variance=0.10)",
        "patch": "@@ -111,7 +111,7 @@ def test_contains_doesnt_compile(self):\n             \"some other column\", Integer\n         )\n \n-        @profiling.function_call_count()\n+        @profiling.function_call_count(variance=0.10)\n         def go():\n             c1 in row\n "
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": "print q.all()",
        "fixed_code": "print(q.all())",
        "patch": "@@ -25,7 +25,7 @@\n     q = q.options(RelationshipCache(Person.addresses, \"default\"))\n \n     # query\n-    print q.all()\n+    print(q.all())\n \n To run, both SQLAlchemy and dogpile.cache must be\n installed or on the current PYTHONPATH. The demo will create a local"
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": "print document",
        "fixed_code": "print(document)",
        "patch": "@@ -17,7 +17,7 @@\n     # locate documents with a certain path/attribute structure\n     for document in find_document('/somefile/header/field2[@attr=foo]'):\n         # dump the XML\n-        print document\n+        print(document)\n \n .. autosource::\n     :files: pickle_type.py, adjacency_list.py, optimized_al.py"
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": "print n2.higher_neighbors()",
        "fixed_code": "print(n2.higher_neighbors())",
        "patch": "@@ -6,7 +6,7 @@\n     n2 = Node(2)\n     n5 = Node(5)\n     n2.add_neighbor(n5)\n-    print n2.higher_neighbors()\n+    print(n2.higher_neighbors())\n \n .. autosource::\n "
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": "print 'weasel-like animals', q.all()",
        "fixed_code": "print('weasel-like animals', q.all())",
        "patch": "@@ -27,7 +27,7 @@\n          filter(Animal.facts.any(\n            and_(AnimalFact.key == u'weasel-like',\n                 AnimalFact.value == True))))\n-    print 'weasel-like animals', q.all()\n+    print('weasel-like animals', q.all())\n \n .. autosource::\n "
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": "print r.rowcount",
        "fixed_code": "print(r.rowcount)",
        "patch": "@@ -42,7 +42,7 @@\n \n       conn = engine.connect().execution_options(enable_rowcount=True)\n       r = conn.execute(stmt)\n-      print r.rowcount\n+      print(r.rowcount)\n \n * ``retaining`` - False by default.   Setting this to True will pass the\n   ``retaining=True`` keyword argument to the ``.commit()`` and ``.rollback()``"
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": ">>> print SearchWord.word_insensitive == \"Trucks\"",
        "fixed_code": ">>> print(SearchWord.word_insensitive == \"Trucks\")",
        "patch": "@@ -764,7 +764,7 @@ class SearchWord(Base):\n         A mapping like the above allows the ``word_insensitive`` attribute\n         to render an expression like::\n \n-            >>> print SearchWord.word_insensitive == \"Trucks\"\n+            >>> print(SearchWord.word_insensitive == \"Trucks\")\n             lower(search_word.word) = lower(:lower_1)\n \n         :param comparator_factory:"
    },
    {
        "commit_id": "a836e3df5d973f75bd8330cecb76511b67c13612",
        "commit_message": "Remove print statement in favor of print() function in docs and examples\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\nRemove print statements\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [X] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [ ] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #5166\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5166\nPull-request-sha: 04a7394f71298322188f0861b4dfe93e5485839d\n\nChange-Id: Ib90a59fac929661a18748c6e44966fb87e3978c6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a836e3df5d973f75bd8330cecb76511b67c13612",
        "buggy_code": ">>> print select([cast('some string', String(collation='utf8'))])",
        "fixed_code": ">>> print(select([cast('some string', String(collation='utf8'))]))",
        "patch": "@@ -177,7 +177,7 @@ def __init__(\n           E.g.::\n \n             >>> from sqlalchemy import cast, select, String\n-            >>> print select([cast('some string', String(collation='utf8'))])\n+            >>> print(select([cast('some string', String(collation='utf8'))]))\n             SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1\n \n         :param convert_unicode: When set to ``True``, the"
    },
    {
        "commit_id": "cdc195ff48f12e4bf54b99e4269db693f5a46a15",
        "commit_message": "Fix IntegerTest for sqlalchemy-firebird\n\nRecent cleanup of test_types.py introduced a\nregression for sqlalchemy-firebird (and possibly\nother external dialects). With this change,\n`test_huge_int` now passes for\nsqlalchemy-firebird.\n\nChange-Id: Ieeb4b33ec5985f2e2bf6832d1cdef294f85407a0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cdc195ff48f12e4bf54b99e4269db693f5a46a15",
        "buggy_code": "metadata.create_all(connection)",
        "fixed_code": "metadata.create_all(config.db)",
        "patch": "@@ -411,7 +411,7 @@ def _round_trip(self, datatype, data, connection):\n             Column(\"integer_data\", datatype),\n         )\n \n-        metadata.create_all(connection)\n+        metadata.create_all(config.db)\n \n         connection.execute(int_table.insert(), {\"integer_data\": data})\n "
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": "nitpicky = True",
        "fixed_code": "nitpicky = False",
        "patch": "@@ -43,7 +43,7 @@\n # have reported this.\n templates_path = [os.path.abspath(\"templates\")]\n \n-nitpicky = True\n+nitpicky = False\n \n # The suffix of source filenames.\n source_suffix = \".rst\""
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": "select.column(",
        "fixed_code": "select.add_columns(",
        "patch": "@@ -1715,7 +1715,7 @@ def visit_select(self, select, **kwargs):\n             select = select._generate()\n             select._mssql_visit = True\n             select = (\n-                select.column(\n+                select.add_columns(\n                     sql.func.ROW_NUMBER()\n                     .over(order_by=_order_by_clauses)\n                     .label(\"mssql_rn\")"
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": "s = Select([self])",
        "fixed_code": "s = Select._create_select(self)",
        "patch": "@@ -341,7 +341,7 @@ def select(self):\n             s = select([function_element])\n \n         \"\"\"\n-        s = Select([self])\n+        s = Select._create_select(self)\n         if self._execution_options:\n             s = s.execution_options(**self._execution_options)\n         return s"
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": ".add_column(ealias.name)",
        "fixed_code": ".add_columns(ealias.name)",
        "patch": "@@ -199,7 +199,7 @@ def test_multi_qualification(self):\n \n         eq_(\n             session.query(Manager.name)\n-            .add_column(ealias.name)\n+            .add_columns(ealias.name)\n             .join(ealias, true())\n             .all(),\n             [(\"Tom\", \"Kurt\"), (\"Tom\", \"Ed\")],"
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": ".add_column(orders.c.description)",
        "fixed_code": ".add_columns(orders.c.description)",
        "patch": "@@ -834,7 +834,7 @@ def test_locates_col(self):\n         o1 = (\n             sess.query(Order)\n             .order_by(Order.id)\n-            .add_column(orders.c.description)\n+            .add_columns(orders.c.description)\n             .first()\n         )[0]\n "
    },
    {
        "commit_id": "9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "commit_message": "Create initial future package, RemovedIn20Warning\n\nReorganization of Select() is the first major element\nof the 2.0 restructuring.   In order to start this we need\nto first create the new Select constructor and apply legacy\nelements to the old one.    This in turn necessitates\nstarting up the RemovedIn20Warning concept which itself\nneed to refer to \"sqlalchemy.future\", so begin to establish\nthis basic framework.   Additionally, update the\nDML constructors with the newer no-keyword style.  Remove\nthe use of the \"pending deprecation\" and fix Query.add_column()\ndeprecation which was not acting as deprecated.\n\nFixes: #4845\nFixes: #4648\nChange-Id: I0c7a22b2841a985e1c379a0bb6c94089aae6264c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fca5d827d880ccc529c94bb65c46de6aafd227c",
        "buggy_code": "select_copy = s.column(column(\"yyy\"))",
        "fixed_code": "select_copy = s.add_columns(column(\"yyy\"))",
        "patch": "@@ -1831,7 +1831,7 @@ def test_columns(self):\n         self.assert_compile(\n             s, \"SELECT table1.col1, table1.col2, \" \"table1.col3 FROM table1\"\n         )\n-        select_copy = s.column(column(\"yyy\"))\n+        select_copy = s.add_columns(column(\"yyy\"))\n         self.assert_compile(\n             select_copy,\n             \"SELECT table1.col1, table1.col2, \" \"table1.col3, yyy FROM table1\","
    },
    {
        "commit_id": "f136cc893a2cd765c019654157af42aeb5135a1d",
        "commit_message": "fix documentation typos\n\nChange-Id: I4376910ae1cf6bf27226f049d4cf2d0e6ba2a83b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f136cc893a2cd765c019654157af42aeb5135a1d",
        "buggy_code": "attribtues named ``value``, ``whens``, and ``else\\_``.    They each",
        "fixed_code": "attributes named ``value``, ``whens``, and ``else\\_``.    They each",
        "patch": "@@ -180,7 +180,7 @@ class InternalTraversal(util.with_metaclass(_InternalTraversalType, object)):\n         ]\n \n     Above, the :class:`.Case` class indicates its internal state as the\n-    attribtues named ``value``, ``whens``, and ``else\\_``.    They each\n+    attributes named ``value``, ``whens``, and ``else\\_``.    They each\n     link to an :class:`.InternalTraversal` method which indicates the type\n     of datastructure referred towards.\n "
    },
    {
        "commit_id": "3809a5ecfe785cecbc9d91a8e4e4558e3839c694",
        "commit_message": "Query linter option\n\nAdded \"from linting\" as a built-in feature to the SQL compiler.  This\nallows the compiler to maintain graph of all the FROM clauses in a\nparticular SELECT statement, linked by criteria in either the WHERE\nor in JOIN clauses that link these FROM clauses together.  If any two\nFROM clauses have no path between them, a warning is emitted that the\nquery may be producing a cartesian product.   As the Core expression\nlanguage as well as the ORM are built on an \"implicit FROMs\" model where\na particular FROM clause is automatically added if any part of the query\nrefers to it, it is easy for this to happen inadvertently and it is\nhoped that the new feature helps with this issue.\n\nThe original recipe is from:\nhttps://github.com/sqlalchemy/sqlalchemy/wiki/FromLinter\n\nThe linter is now enabled for all tests in the test suite as well.\nThis has necessitated that a lot of the queries be adjusted to\nnot include cartesian products.  Part of the rationale for the\nlinter to not be enabled for statement compilation only was to reduce\nthe need for adjustment for the many test case statements throughout\nthe test suite that are not real-world statements.\n\nThis gerrit is adapted from Ib5946e57c9dba6da428c4d1dee6760b3e978dda0.\n\nFixes: #4737\n\nChange-Id: Ic91fd9774379f895d021c3ad564db6062299211c\nCloses: #4830\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4830\nPull-request-sha: f8a21aa6262d1bcc9ff0d11a2616e41fba97a47a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3809a5ecfe785cecbc9d91a8e4e4558e3839c694",
        "buggy_code": "stmt = select([p.c.s, cte.c.z])",
        "fixed_code": "stmt = select([p.c.s, cte.c.z]).where(p.c.s == cte.c.z)",
        "patch": "@@ -852,7 +852,7 @@ def _test_a_in_b(self, a, b):\n \n             if b == \"select\":\n                 conn.execute(p.insert().values(s=1))\n-                stmt = select([p.c.s, cte.c.z])\n+                stmt = select([p.c.s, cte.c.z]).where(p.c.s == cte.c.z)\n             elif b == \"insert\":\n                 sel = select([1, cte.c.z])\n                 stmt = ("
    },
    {
        "commit_id": "c506e01324cac524ee15257d31d9821aa8a23b95",
        "commit_message": "Reorganize core event modules to avoid import cycles\n\nsqlalchemy.sql.naming was causing a full import of\nengine due to the DDLEvents dependency.  Break out pool,\nDDL and engine events into new modules specific to those\npackages; resolve some other import cycles in Core also.\n\nChange-Id: Ife8d217e58a26ab3605dd80ee70837968f957eaf",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c506e01324cac524ee15257d31d9821aa8a23b95",
        "buggy_code": "from .. import events  # noqa",
        "fixed_code": "from . import events  # noqa",
        "patch": "@@ -12,6 +12,7 @@\n \n import re\n \n+from . import events  # noqa\n from .elements import _defer_name\n from .elements import _defer_none_name\n from .elements import conv\n@@ -24,7 +25,6 @@\n from .schema import Table\n from .schema import UniqueConstraint\n from .. import event\n-from .. import events  # noqa\n from .. import exc\n \n "
    },
    {
        "commit_id": "c506e01324cac524ee15257d31d9821aa8a23b95",
        "commit_message": "Reorganize core event modules to avoid import cycles\n\nsqlalchemy.sql.naming was causing a full import of\nengine due to the DDLEvents dependency.  Break out pool,\nDDL and engine events into new modules specific to those\npackages; resolve some other import cycles in Core also.\n\nChange-Id: Ife8d217e58a26ab3605dd80ee70837968f957eaf",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c506e01324cac524ee15257d31d9821aa8a23b95",
        "buggy_code": "from .. import inspect",
        "fixed_code": "from ..inspection import inspect",
        "patch": "@@ -5,8 +5,8 @@\n from . import operators\n from .visitors import ExtendedInternalTraversal\n from .visitors import InternalTraversal\n-from .. import inspect\n from .. import util\n+from ..inspection import inspect\n \n SKIP_TRAVERSE = util.symbol(\"skip_traverse\")\n COMPARE_FAILED = False"
    },
    {
        "commit_id": "2734439fff953a7bb8aecdedb5f851441b5122e9",
        "commit_message": "Set use_mapper_path=True for with_poly subentities\n\nFixed regression in joined eager loading introduced in 1.3.0b3 via\n:ticket:`4468` where the ability to create a joined option across a\n:func:`.with_polymorphic` into a polymorphic subclass using\n:meth:`.RelationshipProperty.of_type` and then further along regular mapped\nrelationships would fail as the polymorphic subclass would not add itself\nto the load path in a way that could be located by the loader strategy.  A\ntweak has been made to resolve this scenario.\n\nFixes: #5082\nChange-Id: I1c7b8d70ed94436c655e433bf34394b13d384c35",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2734439fff953a7bb8aecdedb5f851441b5122e9",
        "buggy_code": "use_mapper_path=_use_mapper_path,",
        "fixed_code": "use_mapper_path=True,",
        "patch": "@@ -606,7 +606,7 @@ def __init__(\n                         selectable,\n                         base_alias=self,\n                         adapt_on_names=adapt_on_names,\n-                        use_mapper_path=_use_mapper_path,\n+                        use_mapper_path=True,\n                     )\n \n                     setattr(self.entity, poly.class_.__name__, ent)"
    },
    {
        "commit_id": "463a5f2e29ca28e53b5d19ac2b63acf39438ce87",
        "commit_message": "Merge \"Fix QueryContext ref cycle on joinedload\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/463a5f2e29ca28e53b5d19ac2b63acf39438ce87",
        "buggy_code": "strategy(*rec[1:])",
        "fixed_code": "strategy(context, *rec[1:])",
        "patch": "@@ -3878,7 +3878,7 @@ def _compile_context(self, for_statement=False):\n \n         for rec in context.create_eager_joins:\n             strategy = rec[0]\n-            strategy(*rec[1:])\n+            strategy(context, *rec[1:])\n \n         if context.from_clause:\n             # \"load from explicit FROMs\" mode,"
    },
    {
        "commit_id": "5ecb7732fb62d80adb4434bdd0e606e43aa14a98",
        "commit_message": "Fix QueryContext ref cycle on joinedload\n\nAvoid storing a reference to itself when dealing with create_eager_joins. Also fix a cheating test.\n\nFixes: #5071\nCloses: #5072\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5072\nPull-request-sha: 75ebaf7c91e96d7567eb5760be713dc134c58763\n\nChange-Id: I511ddc0979b46f7928217347199eca4b1d0b4a49",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5ecb7732fb62d80adb4434bdd0e606e43aa14a98",
        "buggy_code": "strategy(*rec[1:])",
        "fixed_code": "strategy(context, *rec[1:])",
        "patch": "@@ -3878,7 +3878,7 @@ def _compile_context(self, for_statement=False):\n \n         for rec in context.create_eager_joins:\n             strategy = rec[0]\n-            strategy(*rec[1:])\n+            strategy(context, *rec[1:])\n \n         if context.from_clause:\n             # \"load from explicit FROMs\" mode,"
    },
    {
        "commit_id": "217948f5c79e03956de998af86fef77ebc3edb76",
        "commit_message": "Enable F821\n\nIn Ia63a510f9c1d08b055eef62cf047f1f427f0450c we introduced\n\"lambda combinations\" which use a bit of function closure inspection\nin order to allow for testing combinations that make use of symbols that\ncome from test fixtures, or from the test itself.\n\nTwo problems.  One is that we can't use F821 flake8 rule without either\nadding lots of noqas, skipping the file, or adding arguments to the\nlambdas themselves that are then populated, which makes for a very\nverbose system.  The other is that the system is already verbose\nwith all those lambdas and the magic in use is a non-explicit kind,\nhence F821 reminds us that if we can improve upon this, we should.\n\nSo let's improve upon it by making it so that the \"lambda\" is just\nonce and up front for the whole thing, and let it accept the arguments\ndirectly.   This still requires magic, because these test cases need\nto resolve at test collection time, not test runtime.  But we will\ninstead substitute a namespace up front that can be coerced into\nits desired form within the tests.\n\nAdditionally, there's a little bit of py2k compatible type annotations\npresent; f821 is checking these, so we have to add those imports\nalso using the TYPE_CHECKING boolean so they don't take place in\npy2k.\n\nChange-Id: Idb7e7a0c8af86d9ab133f548511306ef68cdba14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/217948f5c79e03956de998af86fef77ebc3edb76",
        "buggy_code": "conn.setencoding(unicode, encoding=\"utf-8\")",
        "fixed_code": "conn.setencoding(unicode, encoding=\"utf-8\")  # noqa: F821",
        "patch": "@@ -126,7 +126,7 @@ def on_connect(conn):\n                 conn.setdecoding(pyodbc_SQL_CHAR, encoding=\"utf-8\")\n                 conn.setdecoding(pyodbc_SQL_WCHAR, encoding=\"utf-8\")\n                 conn.setencoding(str, encoding=\"utf-8\")\n-                conn.setencoding(unicode, encoding=\"utf-8\")\n+                conn.setencoding(unicode, encoding=\"utf-8\")  # noqa: F821\n \n         return on_connect\n "
    },
    {
        "commit_id": "217948f5c79e03956de998af86fef77ebc3edb76",
        "commit_message": "Enable F821\n\nIn Ia63a510f9c1d08b055eef62cf047f1f427f0450c we introduced\n\"lambda combinations\" which use a bit of function closure inspection\nin order to allow for testing combinations that make use of symbols that\ncome from test fixtures, or from the test itself.\n\nTwo problems.  One is that we can't use F821 flake8 rule without either\nadding lots of noqas, skipping the file, or adding arguments to the\nlambdas themselves that are then populated, which makes for a very\nverbose system.  The other is that the system is already verbose\nwith all those lambdas and the magic in use is a non-explicit kind,\nhence F821 reminds us that if we can improve upon this, we should.\n\nSo let's improve upon it by making it so that the \"lambda\" is just\nonce and up front for the whole thing, and let it accept the arguments\ndirectly.   This still requires magic, because these test cases need\nto resolve at test collection time, not test runtime.  But we will\ninstead substitute a namespace up front that can be coerced into\nits desired form within the tests.\n\nAdditionally, there's a little bit of py2k compatible type annotations\npresent; f821 is checking these, so we have to add those imports\nalso using the TYPE_CHECKING boolean so they don't take place in\npy2k.\n\nChange-Id: Idb7e7a0c8af86d9ab133f548511306ef68cdba14",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/217948f5c79e03956de998af86fef77ebc3edb76",
        "buggy_code": "dialect_args[k] = kwargs.pop(k)",
        "fixed_code": "dialect_args[k] = kw.pop(k)",
        "patch": "@@ -108,7 +108,7 @@ def dump(sql, *multiparams, **params):\n     # consume dialect arguments from kwargs\n     for k in util.get_cls_kwargs(dialect_cls):\n         if k in kw:\n-            dialect_args[k] = kwargs.pop(k)\n+            dialect_args[k] = kw.pop(k)\n \n     # create dialect\n     dialect = dialect_cls(**dialect_args)"
    },
    {
        "commit_id": "4e7c789331c9ccf86ad0040175764d361d21b4f3",
        "commit_message": "Merge \"Fix DATETIMEOFFSET formatting to preserve fractional seconds.\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4e7c789331c9ccf86ad0040175764d361d21b4f3",
        "buggy_code": "0,",
        "fixed_code": "123456,",
        "patch": "@@ -735,7 +735,7 @@ def test_date_roundtrip(self):\n             11,\n             2,\n             32,\n-            0,\n+            123456,\n             util.timezone(datetime.timedelta(hours=1)),\n         )\n         t.insert().execute("
    },
    {
        "commit_id": "0d316e42f0645283c222f050c403c9c8d20463ec",
        "commit_message": "Fix DATETIMEOFFSET formatting to preserve fractional seconds.\n\nFixed issue where a timezone-aware ``datetime`` value being converted to\nstring for use as a parameter value of a :class:`.mssql.DATETIMEOFFSET`\ncolumn was omitting the fractional seconds.\n\nFixes: #5045\nCloses: #5046\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/5046\nPull-request-sha: 99dc7b23f69b7b068795a02d20b88bf352c7dcd7\n\nChange-Id: I971629466fe0675536bbdf55693f0c1821dfb3cc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0d316e42f0645283c222f050c403c9c8d20463ec",
        "buggy_code": "0,",
        "fixed_code": "123456,",
        "patch": "@@ -735,7 +735,7 @@ def test_date_roundtrip(self):\n             11,\n             2,\n             32,\n-            0,\n+            123456,\n             util.timezone(datetime.timedelta(hours=1)),\n         )\n         t.insert().execute("
    },
    {
        "commit_id": "431f655b407cd3b266b5dfed5a5f3822e2c6b032",
        "commit_message": "Merge \"Test for short term reference cycles and resolve as many as possible\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/431f655b407cd3b266b5dfed5a5f3822e2c6b032",
        "buggy_code": "prev[f] = jp",
        "fixed_code": "prev[f] = jp.copy()",
        "patch": "@@ -2235,7 +2235,7 @@ def _update_joinpoint(self, jp):\n         while \"prev\" in jp:\n             f, prev = jp[\"prev\"]\n             prev = prev.copy()\n-            prev[f] = jp\n+            prev[f] = jp.copy()\n             jp[\"prev\"] = (f, prev)\n             jp = prev\n         self._joinpath = jp"
    },
    {
        "commit_id": "431f655b407cd3b266b5dfed5a5f3822e2c6b032",
        "commit_message": "Merge \"Test for short term reference cycles and resolve as many as possible\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/431f655b407cd3b266b5dfed5a5f3822e2c6b032",
        "buggy_code": "from ._collections import populate_column_dict  # noqa",
        "fixed_code": "from ._collections import WeakPopulateDict  # noqa",
        "patch": "@@ -31,7 +31,6 @@\n from ._collections import OrderedIdentitySet  # noqa\n from ._collections import OrderedProperties  # noqa\n from ._collections import OrderedSet  # noqa\n-from ._collections import populate_column_dict  # noqa\n from ._collections import PopulateDict  # noqa\n from ._collections import Properties  # noqa\n from ._collections import ScopedRegistry  # noqa\n@@ -42,6 +41,7 @@\n from ._collections import unique_list  # noqa\n from ._collections import UniqueAppender  # noqa\n from ._collections import update_copy  # noqa\n+from ._collections import WeakPopulateDict  # noqa\n from ._collections import WeakSequence  # noqa\n from .compat import b  # noqa\n from .compat import b64decode  # noqa"
    },
    {
        "commit_id": "04fbb9e63c098dd2de40b545eed210dfd93893ce",
        "commit_message": "Test for short term reference cycles and resolve as many as possible\n\nAdded test support and repaired a wide variety of unnecessary reference\ncycles created for short-lived objects, mostly in the area of ORM queries.\n\nFixes: #5056\nChange-Id: Ifd93856eba550483f95f9ae63d49f36ab068b85a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/04fbb9e63c098dd2de40b545eed210dfd93893ce",
        "buggy_code": "prev[f] = jp",
        "fixed_code": "prev[f] = jp.copy()",
        "patch": "@@ -2235,7 +2235,7 @@ def _update_joinpoint(self, jp):\n         while \"prev\" in jp:\n             f, prev = jp[\"prev\"]\n             prev = prev.copy()\n-            prev[f] = jp\n+            prev[f] = jp.copy()\n             jp[\"prev\"] = (f, prev)\n             jp = prev\n         self._joinpath = jp"
    },
    {
        "commit_id": "04fbb9e63c098dd2de40b545eed210dfd93893ce",
        "commit_message": "Test for short term reference cycles and resolve as many as possible\n\nAdded test support and repaired a wide variety of unnecessary reference\ncycles created for short-lived objects, mostly in the area of ORM queries.\n\nFixes: #5056\nChange-Id: Ifd93856eba550483f95f9ae63d49f36ab068b85a",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/04fbb9e63c098dd2de40b545eed210dfd93893ce",
        "buggy_code": "from ._collections import populate_column_dict  # noqa",
        "fixed_code": "from ._collections import WeakPopulateDict  # noqa",
        "patch": "@@ -31,7 +31,6 @@\n from ._collections import OrderedIdentitySet  # noqa\n from ._collections import OrderedProperties  # noqa\n from ._collections import OrderedSet  # noqa\n-from ._collections import populate_column_dict  # noqa\n from ._collections import PopulateDict  # noqa\n from ._collections import Properties  # noqa\n from ._collections import ScopedRegistry  # noqa\n@@ -42,6 +41,7 @@\n from ._collections import unique_list  # noqa\n from ._collections import UniqueAppender  # noqa\n from ._collections import update_copy  # noqa\n+from ._collections import WeakPopulateDict  # noqa\n from ._collections import WeakSequence  # noqa\n from .compat import b  # noqa\n from .compat import b64decode  # noqa"
    },
    {
        "commit_id": "926952c4afe0b2e16c4a74f05958bded7b932760",
        "commit_message": "Use label reference coercion for select() distinct keyword argument\n\nFixed bug where \"distinct\" keyword passed to :func:`.select` would not\ntreat a string value as a \"label reference\" in the same way that the\n:meth:`.select.distinct` does; it would instead raise unconditionally. This\nkeyword argument and the others passed to :func:`.select` will ultimately\nbe deprecated for SQLAlchemy 2.0.\n\nFixes: #5028\nChange-Id: Id36cfe477ed836c3248824ce1b81d0016dbe99f4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/926952c4afe0b2e16c4a74f05958bded7b932760",
        "buggy_code": "coercions.expect(roles.WhereHavingRole, e)",
        "fixed_code": "coercions.expect(roles.ByOfRole, e)",
        "patch": "@@ -3388,7 +3388,7 @@ def __init__(\n             if not isinstance(distinct, bool):\n                 self._distinct_on = tuple(\n                     [\n-                        coercions.expect(roles.WhereHavingRole, e)\n+                        coercions.expect(roles.ByOfRole, e)\n                         for e in util.to_list(distinct)\n                     ]\n                 )"
    },
    {
        "commit_id": "1bf1a9c0d8e122da79898835c007ea904e238c21",
        "commit_message": "Fix rst for flake8-rst-docstrings-0.0.12\n\nA few new formatting errors are caught by this version.\n\nChange-Id: I737b33267a00f400b7ba7696a03ddb07a4c95bc0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1bf1a9c0d8e122da79898835c007ea904e238c21",
        "buggy_code": "and :class:`.Row.\"\"\"",
        "fixed_code": "and :class:`.Row`.\"\"\"",
        "patch": "@@ -6,7 +6,7 @@\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n \"\"\"Define result set constructs including :class:`.ResultProxy`\n-and :class:`.Row.\"\"\"\n+and :class:`.Row`.\"\"\"\n \n \n import collections"
    },
    {
        "commit_id": "1bf1a9c0d8e122da79898835c007ea904e238c21",
        "commit_message": "Fix rst for flake8-rst-docstrings-0.0.12\n\nA few new formatting errors are caught by this version.\n\nChange-Id: I737b33267a00f400b7ba7696a03ddb07a4c95bc0",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1bf1a9c0d8e122da79898835c007ea904e238c21",
        "buggy_code": "\"\"\"test the legacy *addl_attrs argument.\"\"\"",
        "fixed_code": "r\"\"\"test the legacy \\*addl_attrs argument.\"\"\"",
        "patch": "@@ -989,7 +989,7 @@ def go():\n         eq_(item.description, \"item 4\")\n \n     def test_path_entity(self):\n-        \"\"\"test the legacy *addl_attrs argument.\"\"\"\n+        r\"\"\"test the legacy \\*addl_attrs argument.\"\"\"\n \n         User = self.classes.User\n         Order = self.classes.Order"
    },
    {
        "commit_id": "b3c3562ecf67ae7c94091287504579fcace6a500",
        "commit_message": "Interpret empty LIMIT, expression LIMIT correctly\n\nFixed issue in MSSQL dialect where an expression-based OFFSET value in a\nSELECT would be rejected, even though the dialect can render this\nexpression inside of a ROW NUMBER-oriented LIMIT/OFFSET construct.\n\nFixes: #4973\nChange-Id: I040d34f781791c4ed5a727e1b8fb98c68ddd0622",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b3c3562ecf67ae7c94091287504579fcace6a500",
        "buggy_code": "[\"mysql\", \"mssql\"],",
        "fixed_code": "[\"mysql\"],",
        "patch": "@@ -627,7 +627,7 @@ def offset(self):\n     def sql_expression_limit_offset(self):\n         return (\n             fails_if(\n-                [\"mysql\", \"mssql\"],\n+                [\"mysql\"],\n                 \"Target backend can't accommodate full expressions in \"\n                 \"OFFSET or LIMIT\",\n             )"
    },
    {
        "commit_id": "885befb0a7fb877d52633b1bad35c6103a6f093b",
        "commit_message": "Merge \"Fix Python 3.8 SyntaxWarning: \"is not\" with a literal\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/885befb0a7fb877d52633b1bad35c6103a6f093b",
        "buggy_code": "if entities is not ():",
        "fixed_code": "if entities != ():",
        "patch": "@@ -176,7 +176,7 @@ def _set_entities(self, entities, entity_wrapper=None):\n         self._primary_entity = None\n         self._has_mapper_entities = False\n \n-        if entities is not ():\n+        if entities != ():\n             for ent in util.to_list(entities):\n                 entity_wrapper(self, ent)\n "
    },
    {
        "commit_id": "4b61b81dba8d90165d764050d9466b286c7a80f2",
        "commit_message": "Fix Python 3.8 SyntaxWarning: \"is not\" with a literal\n\n### Description\n\nFixes this warning from Python 3.8 in `Query._set_entities`:\n\n```\nlib/sqlalchemy/orm/query.py:179: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  if entities is not ():\n```\n\nFixes #4938.\n\n### Checklist\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4939\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4939\nPull-request-sha: 88167460ced7f576a9aed3d0ff0a6e7e18810004\n\nChange-Id: I21464c3e69b4db6307db99f9ccb9b34bbac4e744",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4b61b81dba8d90165d764050d9466b286c7a80f2",
        "buggy_code": "if entities is not ():",
        "fixed_code": "if entities != ():",
        "patch": "@@ -176,7 +176,7 @@ def _set_entities(self, entities, entity_wrapper=None):\n         self._primary_entity = None\n         self._has_mapper_entities = False\n \n-        if entities is not ():\n+        if entities != ():\n             for ent in util.to_list(entities):\n                 entity_wrapper(self, ent)\n "
    },
    {
        "commit_id": "26d9a29514ea0949f09f75622065e737fabeabe1",
        "commit_message": "Typo fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/26d9a29514ea0949f09f75622065e737fabeabe1",
        "buggy_code": "e.g. those specified using :paramref:`.Column.onupdate`.",
        "fixed_code": "those specified using :paramref:`.Column.onupdate`.",
        "patch": "@@ -409,7 +409,7 @@ def use_identity(element, compiler, **kw):\n \n     The :meth:`.Insert.on_conflict_do_update` method does **not** take into\n     account Python-side default UPDATE values or generation functions, e.g.\n-    e.g. those specified using :paramref:`.Column.onupdate`.\n+    those specified using :paramref:`.Column.onupdate`.\n     These values will not be exercised for an ON CONFLICT style of UPDATE,\n     unless they are manually specified in the\n     :paramref:`.Insert.on_conflict_do_update.set_` dictionary."
    },
    {
        "commit_id": "82cf32a6cf265927de49d0f5220ad13e0131d95e",
        "commit_message": "- fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/82cf32a6cf265927de49d0f5220ad13e0131d95e",
        "buggy_code": "return DeclarativeMeta.__init__(cls, classname, bases, dict_)",
        "fixed_code": "DeclarativeMeta.__init__(cls, classname, bases, dict_)",
        "patch": "@@ -377,7 +377,7 @@ def _with_register_classes(cls, fn):\n         class FindFixtureDeclarative(DeclarativeMeta):\n             def __init__(cls, classname, bases, dict_):\n                 cls_registry[classname] = cls\n-                return DeclarativeMeta.__init__(cls, classname, bases, dict_)\n+                DeclarativeMeta.__init__(cls, classname, bases, dict_)\n \n         class DeclarativeBasic(object):\n             __table_cls__ = schema.Table"
    },
    {
        "commit_id": "d25c03310fd3523392d37b88c23c48cf26836248",
        "commit_message": "Fix test failures from func doc fix\n\nThe doc edits in e45878bf4f9cdfb714dce8b2a4d705178947674d\ntriggered a doctest and a pep8 failure.\n\nChange-Id: I41c6cba9bab2d3721d9c6280be47eec32f4b4736",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d25c03310fd3523392d37b88c23c48cf26836248",
        "buggy_code": ":param type_: optional :class:`.TypeEngine` datatype object that will be",
        "fixed_code": ":param type\\_: optional :class:`.TypeEngine` datatype object that will be",
        "patch": "@@ -580,7 +580,7 @@ class Function(FunctionElement):\n     :param \\*clauses: list of column expressions that form the arguments\n      of the SQL function call.\n \n-    :param type_: optional :class:`.TypeEngine` datatype object that will be\n+    :param type\\_: optional :class:`.TypeEngine` datatype object that will be\n      used as the return value of the column expression generated by this\n      function call.\n "
    },
    {
        "commit_id": "41dc71ad2fc1963a44e5f308f53aed6b8d7d662a",
        "commit_message": "Use separate label generator for column_label naming convention\n\nFixed bug where a table that would have a column label overlap with a plain\ncolumn name, such as \"foo.id AS foo_id\" vs. \"foo.foo_id\", would prematurely\ngenerate the ``._label`` attribute for a column before this overlap could\nbe detected due to the use of the ``index=True`` or ``unique=True`` flag on\nthe column in conjunction with the default naming convention of\n``\"column_0_label\"``.  This would then lead to failures when ``._label``\nwere used later to generate a bound parameter name, in particular those\nused by the ORM when generating the WHERE clause for an UPDATE statement.\nThe issue has been fixed by using an alternate ``._label`` accessor for DDL\ngeneration that does not affect the state of the :class:`.Column`.   The\naccessor also bypasses the key-deduplication step as it is not necessary\nfor DDL, the naming is now consistently ``\"<tablename>_<columnname>\"``\nwithout any subsequent numeric symbols when used in DDL.\n\nFixes: #4911\n\nChange-Id: Iabf5fd3250738d800d6e41a2a3a27a7ce2405e7d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/41dc71ad2fc1963a44e5f308f53aed6b8d7d662a",
        "buggy_code": "return self._column_X(idx)._label",
        "fixed_code": "return self._column_X(idx)._ddl_label",
        "patch": "@@ -67,7 +67,7 @@ def _key_column_X_name(self, idx):\n         return self._column_X(idx).name\n \n     def _key_column_X_label(self, idx):\n-        return self._column_X(idx)._label\n+        return self._column_X(idx)._ddl_label\n \n     def _key_referred_table_name(self):\n         fk = self.const.elements[0]"
    },
    {
        "commit_id": "9406ec8eb0591956de4c399fa0876fb9f717c9b6",
        "commit_message": "fix supports_unicode_statements for mysql+pyodbc\n\nFixes: #4881",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9406ec8eb0591956de4c399fa0876fb9f717c9b6",
        "buggy_code": "supports_unicode_statements = False",
        "fixed_code": "supports_unicode_statements = True",
        "patch": "@@ -40,7 +40,7 @@ def get_lastrowid(self):\n \n \n class MySQLDialect_pyodbc(PyODBCConnector, MySQLDialect):\n-    supports_unicode_statements = False\n+    supports_unicode_statements = True\n     execution_ctx_cls = MySQLExecutionContext_pyodbc\n \n     pyodbc_driver_name = \"MySQL\""
    },
    {
        "commit_id": "cff9544ab3aba84b65b008e51b79cdf486567d12",
        "commit_message": "Change Oracle max_identifier_length to 128\n\nThe max_identifier_length for the Oracle dialect is now 128 characters by\ndefault, unless compatibility version less than 12.2 upon first connect, in\nwhich case the legacy length of 30 characters is used.  This is a\ncontinuation of the issue as committed to the 1.3 series which adds max\nidentifier length detection upon first connect as well as warns for the\nchange in Oracle server.\n\nFixes: #4857\nChange-Id: I5b11edaebb54ec7f0e5456a785105838a1d752e5",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cff9544ab3aba84b65b008e51b79cdf486567d12",
        "buggy_code": "\"addresses_1.email_address AS addresses_1_email_addres_1 \"",
        "fixed_code": "\"addresses_1.email_address AS addresses_1_email_address \"",
        "patch": "@@ -338,7 +338,7 @@ def test_for_update_on_inner_w_joinedload_no_render_oracle(self):\n             \"anon_1.users_name AS anon_1_users_name, \"\n             \"addresses_1.id AS addresses_1_id, \"\n             \"addresses_1.user_id AS addresses_1_user_id, \"\n-            \"addresses_1.email_address AS addresses_1_email_addres_1 \"\n+            \"addresses_1.email_address AS addresses_1_email_address \"\n             \"FROM (SELECT anon_2.users_id AS users_id, \"\n             \"anon_2.users_name AS users_name FROM \"\n             \"(SELECT users.id AS users_id, users.name AS users_name \""
    },
    {
        "commit_id": "edcfc262a33bf8cbe509f2640e55d3361232c185",
        "commit_message": "Remove unnecessary util.callable usage\n\nFixes: #4850\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nRemoves usage of `util.callable`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4851\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4851\nPull-request-sha: a0ccdff2cb74f5e944d8baccc269c382b591c8e2\n\nChange-Id: I79918f44becbc5dbefdc7ff65128695c1cabed1d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/edcfc262a33bf8cbe509f2640e55d3361232c185",
        "buggy_code": "if not util.callable(method):",
        "fixed_code": "if not callable(method):",
        "patch": "@@ -936,7 +936,7 @@ def _locate_roles_and_methods(cls):\n \n     for supercls in cls.__mro__:\n         for name, method in vars(supercls).items():\n-            if not util.callable(method):\n+            if not callable(method):\n                 continue\n \n             # note role declarations"
    },
    {
        "commit_id": "edcfc262a33bf8cbe509f2640e55d3361232c185",
        "commit_message": "Remove unnecessary util.callable usage\n\nFixes: #4850\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nRemoves usage of `util.callable`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4851\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4851\nPull-request-sha: a0ccdff2cb74f5e944d8baccc269c382b591c8e2\n\nChange-Id: I79918f44becbc5dbefdc7ff65128695c1cabed1d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/edcfc262a33bf8cbe509f2640e55d3361232c185",
        "buggy_code": "and not util.callable(on)",
        "fixed_code": "and not callable(on)",
        "patch": "@@ -258,7 +258,7 @@ def __call__(self, target, bind, **kw):\n     def _check_ddl_on(self, on):\n         if on is not None and (\n             not isinstance(on, util.string_types + (tuple, list, set))\n-            and not util.callable(on)\n+            and not callable(on)\n         ):\n             raise exc.ArgumentError(\n                 \"Expected the name of a database dialect, a tuple \""
    },
    {
        "commit_id": "edcfc262a33bf8cbe509f2640e55d3361232c185",
        "commit_message": "Remove unnecessary util.callable usage\n\nFixes: #4850\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nRemoves usage of `util.callable`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4851\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4851\nPull-request-sha: a0ccdff2cb74f5e944d8baccc269c382b591c8e2\n\nChange-Id: I79918f44becbc5dbefdc7ff65128695c1cabed1d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/edcfc262a33bf8cbe509f2640e55d3361232c185",
        "buggy_code": "if util.callable(typeobj):",
        "fixed_code": "if callable(typeobj):",
        "patch": "@@ -1461,7 +1461,7 @@ def to_instance(typeobj, *arg, **kw):\n     if typeobj is None:\n         return NULLTYPE\n \n-    if util.callable(typeobj):\n+    if callable(typeobj):\n         return typeobj(*arg, **kw)\n     else:\n         return typeobj"
    },
    {
        "commit_id": "edcfc262a33bf8cbe509f2640e55d3361232c185",
        "commit_message": "Remove unnecessary util.callable usage\n\nFixes: #4850\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nRemoves usage of `util.callable`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4851\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4851\nPull-request-sha: a0ccdff2cb74f5e944d8baccc269c382b591c8e2\n\nChange-Id: I79918f44becbc5dbefdc7ff65128695c1cabed1d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/edcfc262a33bf8cbe509f2640e55d3361232c185",
        "buggy_code": "if util.callable(self.params):",
        "fixed_code": "if callable(self.params):",
        "patch": "@@ -170,7 +170,7 @@ def process_statement(self, execute_observed):\n \n     def _all_params(self, context):\n         if self.params:\n-            if util.callable(self.params):\n+            if callable(self.params):\n                 params = self.params(context)\n             else:\n                 params = self.params"
    },
    {
        "commit_id": "edcfc262a33bf8cbe509f2640e55d3361232c185",
        "commit_message": "Remove unnecessary util.callable usage\n\nFixes: #4850\n\n<!-- Provide a general summary of your proposed changes in the Title field above -->\n\n### Description\n<!-- Describe your changes in detail -->\n\nRemoves usage of `util.callable`.\n\n### Checklist\n<!-- go over following points. check them with an `x` if they do apply, (they turn into clickable checkboxes once the PR is submitted, so no need to do everything at once)\n\n-->\n\nThis pull request is:\n\n- [ ] A documentation / typographical error fix\n\t- Good to go, no issue or tests are needed\n- [x] A short code fix\n\t- please include the issue number, and create an issue if none exists, which\n\t  must include a complete example of the issue.  one line code fixes without an\n\t  issue and demonstration will not be accepted.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.   one line code fixes without tests will not be accepted.\n- [ ] A new feature implementation\n\t- please include the issue number, and create an issue if none exists, which must\n\t  include a complete example of how the feature would look.\n\t- Please include: `Fixes: #<issue number>` in the commit message\n\t- please include tests.\n\n**Have a nice day!**\n\nCloses: #4851\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4851\nPull-request-sha: a0ccdff2cb74f5e944d8baccc269c382b591c8e2\n\nChange-Id: I79918f44becbc5dbefdc7ff65128695c1cabed1d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/edcfc262a33bf8cbe509f2640e55d3361232c185",
        "buggy_code": "elif util.callable(predicate):",
        "fixed_code": "elif callable(predicate):",
        "patch": "@@ -208,7 +208,7 @@ def as_predicate(cls, predicate, description=None):\n             )\n \n             return SpecPredicate(db, op, spec, description=description)\n-        elif util.callable(predicate):\n+        elif callable(predicate):\n             return LambdaPredicate(predicate, description)\n         else:\n             assert False, \"unknown predicate type: %s\" % predicate"
    },
    {
        "commit_id": "e429ef1d31343b99e885f58a79800ae490155294",
        "commit_message": "bump variance on test_merge_load\n\nThis test is very sensitive and fluctuates a lot, failing builds,\nbump the variance to try and resolve.\n\nChange-Id: Ia19bb8871b432059cb3917ca0050a68f75c0a0f2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e429ef1d31343b99e885f58a79800ae490155294",
        "buggy_code": "@profiling.function_call_count()",
        "fixed_code": "@profiling.function_call_count(variance=0.10)",
        "patch": "@@ -111,7 +111,7 @@ def test_merge_load(self):\n         # using sqlite3 the C extension took it back up to approx. 1257\n         # (py2.6)\n \n-        @profiling.function_call_count()\n+        @profiling.function_call_count(variance=0.10)\n         def go():\n             sess2.merge(p1)\n "
    },
    {
        "commit_id": "2051fa2ce9e724e6e77e19067d27d2660e7cd74a",
        "commit_message": "Add new \"exec_once_unless_exception\" system; apply to dialect.initialize\n\nFixed an issue whereby if the dialect \"initialize\" process which occurs on\nfirst connect would encounter an unexpected exception, the initialize\nprocess would fail to complete and then no longer attempt on subsequent\nconnection attempts, leaving the dialect in an un-initialized, or partially\ninitialized state, within the scope of parameters that need to be\nestablished based on inspection of a live connection.   The \"invoke once\"\nlogic in the event system has been reworked to accommodate for this\noccurrence using new, private API features that establish an \"exec once\"\nhook that will continue to allow the initializer to fire off on subsequent\nconnections, until it completes without raising an exception. This does not\nimpact the behavior of the existing ``once=True`` flag within the event\nsystem.\n\nFixes: #4807\nChange-Id: Iec32999b61b6af4b38b6719e0c2651454619078c",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2051fa2ce9e724e6e77e19067d27d2660e7cd74a",
        "buggy_code": ").exec_once(self.connection, self)",
        "fixed_code": ").exec_once_unless_exception(self.connection, self)",
        "patch": "@@ -604,7 +604,7 @@ def __connect(self, first_connect_check=False):\n             if first_connect_check:\n                 pool.dispatch.first_connect.for_modify(\n                     pool.dispatch\n-                ).exec_once(self.connection, self)\n+                ).exec_once_unless_exception(self.connection, self)\n             if pool.dispatch.connect:\n                 pool.dispatch.connect(self.connection, self)\n "
    },
    {
        "commit_id": "f5e57f7c311288d892894edcc44d901b5bfbb3d1",
        "commit_message": "Emit SET NAMES for all MySQL connections w charset\n\nThe MySQL dialects will emit \"SET NAMES\" at the start of a connection when\ncharset is given to the MySQL driver, to appease an apparent behavior\nobserved in MySQL 8.0 that raises a collation error when a UNION includes\nstring columns unioned against columns of the form CAST(NULL AS CHAR(..)),\nwhich is what SQLAlchemy's polymorphic_union function does.   The issue\nseems to have affected PyMySQL for at least a year, however has recently\nappeared as of mysqlclient 1.4.4 based on changes in how this DBAPI creates\na connection.  As the presence of this directive impacts three separate\nMySQL charset settings which each have intricate effects based on their\npresense,  SQLAlchemy will now emit the directive on new connections to\nensure correct behavior.\n\nFixes: #4804\nChange-Id: If9d7ee00d0ccaf773972b564fe455e8e9edf6627",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f5e57f7c311288d892894edcc44d901b5bfbb3d1",
        "buggy_code": "data_element = self.data1",
        "fixed_code": "data_element = {\"key1\": \"data1\"}",
        "patch": "@@ -733,7 +733,7 @@ def _test_round_trip(self, data_element):\n \n     def test_round_trip_custom_json(self):\n         data_table = self.tables.data_table\n-        data_element = self.data1\n+        data_element = {\"key1\": \"data1\"}\n \n         js = mock.Mock(side_effect=json.dumps)\n         jd = mock.Mock(side_effect=json.loads)"
    },
    {
        "commit_id": "896d47f318c5c27620fd6da805f98811941b88c5",
        "commit_message": "Don't assume key when matching cloned columns in _make_proxy\n\nFixed issue where internal cloning of SELECT constructs could lead to a key\nerror if the copy of the SELECT changed its state such that its list of\ncolumns changed.  This was observed to be occurring in some ORM scenarios\nwhich may be unique to 1.3 and above, so is partially a regression fix.\n\nFor 1.4, the _is_clone_of key will be removed entirely as it seems to\nhave no purpose.  This commit is the initial backport to 1.3 which\nincludes tests.\n\nFixes: #4780\nChange-Id: I0c64962a2eba3763bea3107fc7c7d7aed8244430",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/896d47f318c5c27620fd6da805f98811941b88c5",
        "buggy_code": "c._is_clone_of = selectable._is_clone_of.columns[c.key]",
        "fixed_code": "c._is_clone_of = selectable._is_clone_of.columns.get(c.key)",
        "patch": "@@ -1608,7 +1608,7 @@ def _make_proxy(\n \n         c.table = selectable\n         if selectable._is_clone_of is not None:\n-            c._is_clone_of = selectable._is_clone_of.columns[c.key]\n+            c._is_clone_of = selectable._is_clone_of.columns.get(c.key)\n         if self.primary_key:\n             selectable.primary_key.add(c)\n         if fk:"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "are used for new rows even for rows taht have been deleted.\"\"\"",
        "fixed_code": "are used for new rows even for rows that have been deleted.\"\"\"",
        "patch": "@@ -182,7 +182,7 @@ def map_(cls, *arg, **kw):\n \n     __table_args__ = {\"sqlite_autoincrement\": True}\n     \"\"\"Use sqlite_autoincrement, to ensure unique integer values\n-    are used for new rows even for rows taht have been deleted.\"\"\"\n+    are used for new rows even for rows that have been deleted.\"\"\"\n \n \n def versioned_objects(iter_):"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "), \"This collection adapter is alreay in the 'empty' state\"",
        "fixed_code": "), \"This collection adapter is already in the 'empty' state\"",
        "patch": "@@ -656,7 +656,7 @@ def append_with_event(self, item, initiator=None):\n     def _set_empty(self, user_data):\n         assert (\n             not self.empty\n-        ), \"This collection adapter is alreay in the 'empty' state\"\n+        ), \"This collection adapter is already in the 'empty' state\"\n         self.empty = True\n         self.owner_state._empty_collections[self._key] = user_data\n "
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "such as \"INITIALLY\", \"INTIALLY DEFERRED\", etc.   no special characters",
        "fixed_code": "such as \"INITIALLY\", \"INITIALLY DEFERRED\", etc.   no special characters",
        "patch": "@@ -3498,7 +3498,7 @@ def validate_sql_phrase(self, element, reg):\n         \"\"\"keyword sequence filter.\n \n         a filter for elements that are intended to represent keyword sequences,\n-        such as \"INITIALLY\", \"INTIALLY DEFERRED\", etc.   no special characters\n+        such as \"INITIALLY\", \"INITIALLY DEFERRED\", etc.   no special characters\n         should be present.\n \n         .. versionadded:: 1.3"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "As refered above, the :paramref:`.MetaData.schema` parameter",
        "fixed_code": "As referred above, the :paramref:`.MetaData.schema` parameter",
        "patch": "@@ -3777,7 +3777,7 @@ def __init__(\n \n            .. note::\n \n-                As refered above, the :paramref:`.MetaData.schema` parameter\n+                As referred above, the :paramref:`.MetaData.schema` parameter\n                 only refers to the **default value** that will be applied to\n                 the :paramref:`.Table.schema` parameter of an incoming\n                 :class:`.Table` object.   It does not refer to how the"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "columns of the first SELECT statement contined within the series of",
        "fixed_code": "columns of the first SELECT statement contained within the series of",
        "patch": "@@ -2976,7 +2976,7 @@ def selected_columns(self):\n \n         For a :class:`.CompoundSelect`, the\n         :attr:`.CompoundSelect.selected_columns` attribute returns the selected\n-        columns of the first SELECT statement contined within the series of\n+        columns of the first SELECT statement contained within the series of\n         statements within the set operation.\n \n         .. versionadded:: 1.4"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "These rules are currenly used by the numeric, integer and date types",
        "fixed_code": "These rules are currently used by the numeric, integer and date types",
        "patch": "@@ -48,7 +48,7 @@ class _LookupExpressionAdapter(object):\n \n     \"\"\"Mixin expression adaptations based on lookup tables.\n \n-    These rules are currenly used by the numeric, integer and date types\n+    These rules are currently used by the numeric, integer and date types\n     which have detailed cross-expression coercion rules.\n \n     \"\"\""
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "assert bsub1.a is a2  # beacuse bsub1.a_member is not a relationship",
        "fixed_code": "assert bsub1.a is a2  # because bsub1.a_member is not a relationship",
        "patch": "@@ -744,7 +744,7 @@ def _test_fixture_one_run(self, **kw):\n         bsub2.a = a2\n \n         session.commit()\n-        assert bsub1.a is a2  # beacuse bsub1.a_member is not a relationship\n+        assert bsub1.a is a2  # because bsub1.a_member is not a relationship\n         assert bsub2.a is a1  # because bsub2.a is viewonly=True\n \n         # everyone has a B.a relationship"
    },
    {
        "commit_id": "7e588aadaab27a53b226a4637be9b4022ab46956",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e588aadaab27a53b226a4637be9b4022ab46956",
        "buggy_code": "\"sqlite\", \"sqlite autoincremnt doesn't work with composite pks\"",
        "fixed_code": "\"sqlite\", \"sqlite autoincrement doesn't work with composite pks\"",
        "patch": "@@ -263,7 +263,7 @@ def get_lastrowid(self):\n         eq_(r.inserted_primary_key, [0])\n \n     @testing.fails_on(\n-        \"sqlite\", \"sqlite autoincremnt doesn't work with composite pks\"\n+        \"sqlite\", \"sqlite autoincrement doesn't work with composite pks\"\n     )\n     @testing.provide_metadata\n     def test_misordered_lastrow(self):"
    },
    {
        "commit_id": "7b8ff3c335938532b70e6ffff212bd8f67c56add",
        "commit_message": "Small text error in json field doc\n\nSmall fix json field doc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7b8ff3c335938532b70e6ffff212bd8f67c56add",
        "buggy_code": "The base :class:`.types.JSON` provides these two operations:",
        "fixed_code": "The base :class:`.types.JSON` provides these operations:",
        "patch": "@@ -1941,7 +1941,7 @@ class JSON(Indexable, TypeEngine):\n                 data = {\"key1\": \"value1\", \"key2\": \"value2\"}\n             )\n \n-    The base :class:`.types.JSON` provides these two operations:\n+    The base :class:`.types.JSON` provides these operations:\n \n     * Keyed index operations::\n "
    },
    {
        "commit_id": "28daa34cb887e0f07e9f53e4b9e7596e6df12cd9",
        "commit_message": "Squashed commit of the following:\n\ncommit d4f3bedc74568b7ec543988ee2d43e64c5ace28f\nAuthor: Carson Ip <carsonip@users.noreply.github.com>\nDate:   Fri Jul 5 11:20:12 2019 +0800\n\n    Fix typo in docstring\n\ncommit a3e4b05744f51ec5d12a2fee1ad6093de904273e\nAuthor: Carson Ip <carsonip@users.noreply.github.com>\nDate:   Fri Jul 5 11:14:57 2019 +0800\n\n    Fix typo in docstring\n\nChange-Id: Ifa2ebff5629bf970e5fac28bba64d501376cfae9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/28daa34cb887e0f07e9f53e4b9e7596e6df12cd9",
        "buggy_code": "This method now raises NotImplmentedError() as the \"baked\" implementation",
        "fixed_code": "This method now raises NotImplementedError() as the \"baked\" implementation",
        "patch": "@@ -629,7 +629,7 @@ def bake_lazy_loaders():\n def unbake_lazy_loaders():\n     \"\"\"Disable the use of baked queries for all lazyloaders systemwide.\n \n-    This method now raises NotImplmentedError() as the \"baked\" implementation\n+    This method now raises NotImplementedError() as the \"baked\" implementation\n     is the only lazy load implementation.  The\n     :paramref:`.relationship.bake_queries` flag may be used to disable\n     the caching of queries on a per-relationship basis."
    },
    {
        "commit_id": "28daa34cb887e0f07e9f53e4b9e7596e6df12cd9",
        "commit_message": "Squashed commit of the following:\n\ncommit d4f3bedc74568b7ec543988ee2d43e64c5ace28f\nAuthor: Carson Ip <carsonip@users.noreply.github.com>\nDate:   Fri Jul 5 11:20:12 2019 +0800\n\n    Fix typo in docstring\n\ncommit a3e4b05744f51ec5d12a2fee1ad6093de904273e\nAuthor: Carson Ip <carsonip@users.noreply.github.com>\nDate:   Fri Jul 5 11:14:57 2019 +0800\n\n    Fix typo in docstring\n\nChange-Id: Ifa2ebff5629bf970e5fac28bba64d501376cfae9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/28daa34cb887e0f07e9f53e4b9e7596e6df12cd9",
        "buggy_code": "object when it is passed :metfh:`.Query.options`.",
        "fixed_code": "object when it is passed :meth:`.Query.options`.",
        "patch": "@@ -506,7 +506,7 @@ class _UnboundLoad(Load):\n     \"\"\"Represent a loader option that isn't tied to a root entity.\n \n     The loader option will produce an entity-linked :class:`.Load`\n-    object when it is passed :metfh:`.Query.options`.\n+    object when it is passed :meth:`.Query.options`.\n \n     This provides compatibility with the traditional system\n     of freestanding options, e.g. ``joinedload('x.y.z')``."
    },
    {
        "commit_id": "79d07c9abc7d4d3abb6bf2ca5ca66e87d3a11f08",
        "commit_message": "Consult is_attrbute flag to determine descriptor; enable for assoc proxy\n\nFixed bug where the :attr:`.Mapper.all_orm_descriptors` accessor would\nreturn an entry for the :class:`.Mapper` itself under the declarative\n``__mapper___`` key, when this is not a descriptor.  The ``.is_attribute``\nflag that's present on all :class:`.InspectionAttr` objects is now\nconsulted, which has also been modified to be ``True`` for an association\nproxy, as it was erroneously set to False for this object.\n\nFixes: #4729\nChange-Id: Ia02388cc25d004e32d337140b62a587f3e5a0b7b",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/79d07c9abc7d4d3abb6bf2ca5ca66e87d3a11f08",
        "buggy_code": "is_attribute = False",
        "fixed_code": "is_attribute = True",
        "patch": "@@ -93,7 +93,7 @@ def association_proxy(target_collection, attr, **kw):\n class AssociationProxy(interfaces.InspectionAttrInfo):\n     \"\"\"A descriptor that presents a read/write view of an object attribute.\"\"\"\n \n-    is_attribute = False\n+    is_attribute = True\n     extension_type = ASSOCIATION_PROXY\n \n     def __init__("
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "% expression._string_or_unprintable(key)",
        "fixed_code": "% util.string_or_unprintable(key)",
        "patch": "@@ -626,7 +626,7 @@ def _key_fallback(self, key, raiseerr=True):\n             if raiseerr:\n                 raise exc.NoSuchColumnError(\n                     \"Could not locate column in row for column '%s'\"\n-                    % expression._string_or_unprintable(key)\n+                    % util.string_or_unprintable(key)\n                 )\n             else:\n                 return None"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "raise exc.InvalidRequestError(",
        "fixed_code": "raise AttributeError(",
        "patch": "@@ -217,7 +217,7 @@ def __getattr__(self, key):\n         mp = class_mapper(self.cls, configure=False)\n         if mp:\n             if key not in mp.all_orm_descriptors:\n-                raise exc.InvalidRequestError(\n+                raise AttributeError(\n                     \"Class %r does not have a mapped column named %r\"\n                     % (self.cls, key)\n                 )"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "s = select([datetable.alias(\"x\").c.today]).as_scalar()",
        "fixed_code": "s = select([datetable.alias(\"x\").c.today]).scalar_subquery()",
        "patch": "@@ -98,7 +98,7 @@ def test_row_w_scalar_select(self):\n \n         \"\"\"\n         datetable = self.tables.has_dates\n-        s = select([datetable.alias(\"x\").c.today]).as_scalar()\n+        s = select([datetable.alias(\"x\").c.today]).scalar_subquery()\n         s2 = select([datetable.c.id, s.label(\"somelabel\")])\n         row = config.db.execute(s2).first()\n "
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "s = select([self.t2, select([a1.c.a]).as_scalar()])",
        "fixed_code": "s = select([self.t2, select([a1.c.a]).scalar_subquery()])",
        "patch": "@@ -130,7 +130,7 @@ def test_union_schema_to_non(self):\n \n     def test_column_subquery_to_alias(self):\n         a1 = self.t2.alias(\"a1\")\n-        s = select([self.t2, select([a1.c.a]).as_scalar()])\n+        s = select([self.t2, select([a1.c.a]).scalar_subquery()])\n         self._assert_sql(\n             s,\n             \"SELECT t2_1.a, t2_1.b, t2_1.c, \""
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": ".as_scalar()",
        "fixed_code": ".scalar_subquery()",
        "patch": "@@ -1851,7 +1851,7 @@ def address_count(cls):\n                 return column_property(\n                     select([func.count(Address.id)])\n                     .where(Address.user_id == cls.id)\n-                    .as_scalar()\n+                    .scalar_subquery()\n                 )\n \n         class Address(Base):"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": ".as_scalar()",
        "fixed_code": ".scalar_subquery()",
        "patch": "@@ -962,7 +962,7 @@ def test_correlated_column_select(self):\n             .select_from(Engineer)\n             .filter(Engineer.company_id == Company.company_id)\n             .correlate(Company)\n-            .as_scalar()\n+            .scalar_subquery()\n         )\n \n         self.assert_compile("
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "stuff.c.id == (stuff_view.as_scalar()),",
        "fixed_code": "stuff.c.id == (stuff_view.scalar_subquery()),",
        "patch": "@@ -1290,7 +1290,7 @@ class Stuff(fixtures.ComparableEntity):\n                     Stuff,\n                     primaryjoin=sa.and_(\n                         user_t.c.id == stuff.c.user_id,\n-                        stuff.c.id == (stuff_view.as_scalar()),\n+                        stuff.c.id == (stuff_view.scalar_subquery()),\n                     ),\n                 )\n             },"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "m.add_property(\"y\", column_property(expr2))",
        "fixed_code": "m.add_property(\"y\", column_property(expr2.scalar_subquery()))",
        "patch": "@@ -764,7 +764,7 @@ def test_column_prop_deannotate(self):\n         expr = User.name + \"name\"\n         expr2 = sa.select([User.name, users.c.id])\n         m.add_property(\"x\", column_property(expr))\n-        m.add_property(\"y\", column_property(expr2))\n+        m.add_property(\"y\", column_property(expr2.scalar_subquery()))\n \n         assert User.x.property.columns[0] is not expr\n         assert User.x.property.columns[0].element.left is users.c.name"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": ".as_scalar()",
        "fixed_code": ".scalar_subquery()",
        "patch": "@@ -121,7 +121,7 @@ def test_anonymous_rows(self):\n         sel = (\n             select([users.c.user_id])\n             .where(users.c.user_name == \"jack\")\n-            .as_scalar()\n+            .scalar_subquery()\n         )\n         for row in select([sel + 1, sel + 3], bind=users.bind).execute():\n             eq_(row[\"anon_1\"], 8)"
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": ".values(x=select([t1.c.x]).as_scalar())",
        "fixed_code": ".values(x=select([t1.c.x]).scalar_subquery())",
        "patch": "@@ -222,7 +222,7 @@ def process_result_value(self, value, dialect):\n \n             stmt = (\n                 t2.insert()\n-                .values(x=select([t1.c.x]).as_scalar())\n+                .values(x=select([t1.c.x]).scalar_subquery())\n                 .returning(t2.c.x)\n             )\n "
    },
    {
        "commit_id": "f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "commit_message": "Implement new ClauseElement role and coercion system\n\nA major refactoring of all the functions handle all detection of\nCore argument types as well as perform coercions into a new class hierarchy\nbased on \"roles\", each of which identify a syntactical location within a\nSQL statement.  In contrast to the ClauseElement hierarchy that identifies\n\"what\" each object is syntactically, the SQLRole hierarchy identifies\nthe \"where does it go\" of each object syntactically.   From this we define\na consistent type checking and coercion system that establishes well\ndefined behviors.\n\nThis is a breakout of the patch that is reorganizing select()\nconstructs to no longer be in the FromClause hierarchy.\n\nAlso includes a rename of as_scalar() into scalar_subquery(); deprecates\nautomatic coercion to scalar_subquery().\n\nPartially-fixes: #4617\nChange-Id: I26f1e78898693c6b99ef7ea2f4e7dfd0e8e1a1bd",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07e050c9ce4afdeb9c0c136dbcc547f7e5ac7b8",
        "buggy_code": "subq = t.as_scalar()",
        "fixed_code": "subq = t.scalar_subquery()",
        "patch": "@@ -564,7 +564,7 @@ def test_alias(self):\n \n     def test_scalar_subquery(self):\n         t = text(\"select id from user\").columns(id=Integer)\n-        subq = t.as_scalar()\n+        subq = t.scalar_subquery()\n \n         assert subq.type._type_affinity is Integer()._type_affinity\n "
    },
    {
        "commit_id": "6a19b6dacde07955ade02158920c7d0b8e9d2c18",
        "commit_message": "Merge \"Resolve RST306 issues\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6a19b6dacde07955ade02158920c7d0b8e9d2c18",
        "buggy_code": "Given a class_, attrname, and a :class:`.DefaultGenerator` instance.",
        "fixed_code": "Given a class attribute and a :class:`.DefaultGenerator` instance.",
        "patch": "@@ -28,7 +28,7 @@ def configure_listener(mapper, class_):\n def default_listener(col_attr, default):\n     \"\"\"Establish a default-setting listener.\n \n-    Given a class_, attrname, and a :class:`.DefaultGenerator` instance.\n+    Given a class attribute and a :class:`.DefaultGenerator` instance.\n     The default generator should be a :class:`.ColumnDefault` object with a\n     plain Python value or callable default; otherwise, the appropriate behavior\n     for SQL functions and defaults should be determined here by the"
    },
    {
        "commit_id": "6a19b6dacde07955ade02158920c7d0b8e9d2c18",
        "commit_message": "Merge \"Resolve RST306 issues\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6a19b6dacde07955ade02158920c7d0b8e9d2c18",
        "buggy_code": ":param class_: class to use in order to create new :class:`.Session`",
        "fixed_code": ":param class\\_: class to use in order to create new :class:`.Session`",
        "patch": "@@ -3162,7 +3162,7 @@ def __init__(\n \n         :param bind: a :class:`.Engine` or other :class:`.Connectable` with\n          which newly created :class:`.Session` objects will be associated.\n-        :param class_: class to use in order to create new :class:`.Session`\n+        :param class\\_: class to use in order to create new :class:`.Session`\n          objects.  Defaults to :class:`.Session`.\n         :param autoflush: The autoflush setting to use with newly created\n          :class:`.Session` objects."
    },
    {
        "commit_id": "663ed1a0772f6c6d53b1f4f9a2f652d0e5ce0b8a",
        "commit_message": "Resolve RST306 issues\n\nThe latest flake8 seems to look for these and they are in fact\ncorrectable with a backslash.  Also need to add r to the strings\nto avoid W605.\n\nChange-Id: I8045309aa2ad29978ba7e99c45f75bc1457dff3d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/663ed1a0772f6c6d53b1f4f9a2f652d0e5ce0b8a",
        "buggy_code": "Given a class_, attrname, and a :class:`.DefaultGenerator` instance.",
        "fixed_code": "Given a class attribute and a :class:`.DefaultGenerator` instance.",
        "patch": "@@ -28,7 +28,7 @@ def configure_listener(mapper, class_):\n def default_listener(col_attr, default):\n     \"\"\"Establish a default-setting listener.\n \n-    Given a class_, attrname, and a :class:`.DefaultGenerator` instance.\n+    Given a class attribute and a :class:`.DefaultGenerator` instance.\n     The default generator should be a :class:`.ColumnDefault` object with a\n     plain Python value or callable default; otherwise, the appropriate behavior\n     for SQL functions and defaults should be determined here by the"
    },
    {
        "commit_id": "663ed1a0772f6c6d53b1f4f9a2f652d0e5ce0b8a",
        "commit_message": "Resolve RST306 issues\n\nThe latest flake8 seems to look for these and they are in fact\ncorrectable with a backslash.  Also need to add r to the strings\nto avoid W605.\n\nChange-Id: I8045309aa2ad29978ba7e99c45f75bc1457dff3d",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/663ed1a0772f6c6d53b1f4f9a2f652d0e5ce0b8a",
        "buggy_code": ":param class_: class to use in order to create new :class:`.Session`",
        "fixed_code": ":param class\\_: class to use in order to create new :class:`.Session`",
        "patch": "@@ -3162,7 +3162,7 @@ def __init__(\n \n         :param bind: a :class:`.Engine` or other :class:`.Connectable` with\n          which newly created :class:`.Session` objects will be associated.\n-        :param class_: class to use in order to create new :class:`.Session`\n+        :param class\\_: class to use in order to create new :class:`.Session`\n          objects.  Defaults to :class:`.Session`.\n         :param autoflush: The autoflush setting to use with newly created\n          :class:`.Session` objects."
    },
    {
        "commit_id": "21099479daf98dca84cb97e928951ea0c486b479",
        "commit_message": "Add __reduce_ex__ to MutableList; add compat for older pickles\n\nFixed bug where using ``copy.copy()`` or ``copy.deepcopy()`` on\n:class:`.MutableList` would cause the items within the list to be\nduplicated, due to an inconsistency in how Python pickle and copy both make\nuse of ``__getstate__()`` and ``__setstate__()`` regarding lists.  In order\nto resolve, a ``__reduce_ex__`` method had to be added to\n:class:`.MutableList`.  In order to maintain backwards compatibility with\nexisting pickles based on ``__getstate__()``, the ``__setstate__()`` method\nremains as well; the test suite asserts that pickles made against the old\nversion of the class can still be deserialized by the pickle module.\n\nAlso modified sqlalchemy.testing.util.picklers to return picklers all the way through\npickle.HIGHEST_PROTOCOL.\n\nFixes: #4603\nChange-Id: I7f78b9cfb89d59a706248536c553dc5e1d987b88",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/21099479daf98dca84cb97e928951ea0c486b479",
        "buggy_code": "for protocol in -1, 0, 1, 2:",
        "fixed_code": "for protocol in range(-2, pickle.HIGHEST_PROTOCOL):",
        "patch": "@@ -62,7 +62,7 @@ def picklers():\n \n     # yes, this thing needs this much testing\n     for pickle_ in picklers:\n-        for protocol in -1, 0, 1, 2:\n+        for protocol in range(-2, pickle.HIGHEST_PROTOCOL):\n             yield pickle_.loads, lambda d: pickle_.dumps(d, protocol)\n \n "
    },
    {
        "commit_id": "201c4a60e4b8af56d9c02a3675d1443ba4171c89",
        "commit_message": "run a black run\n\nfix some pep8s that snuck in\n\nChange-Id: Ied282007df30a52d232b1ba88659f2a123ff380f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/201c4a60e4b8af56d9c02a3675d1443ba4171c89",
        "buggy_code": "__version__ = '1.3.1'",
        "fixed_code": "__version__ = \"1.3.1\"",
        "patch": "@@ -122,7 +122,7 @@\n from .engine import engine_from_config  # noqa nosort\n \n \n-__version__ = '1.3.1'\n+__version__ = \"1.3.1\"\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "201c4a60e4b8af56d9c02a3675d1443ba4171c89",
        "commit_message": "run a black run\n\nfix some pep8s that snuck in\n\nChange-Id: Ied282007df30a52d232b1ba88659f2a123ff380f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/201c4a60e4b8af56d9c02a3675d1443ba4171c89",
        "buggy_code": "u1.name = 'u2'",
        "fixed_code": "u1.name = \"u2\"",
        "patch": "@@ -2004,7 +2004,7 @@ def test_flag(session, instance):\n             [call.pending_to_persistent(sess, u1), call.flag_checked(u1)],\n         )\n \n-        u1.name = 'u2'\n+        u1.name = \"u2\"\n         sess.flush()\n \n         # event was not called again"
    },
    {
        "commit_id": "8f318692d4443300c90c7be9dc44ae3c8707f818",
        "commit_message": "Include newlines in StatementError formatting\n\nRevised the formatting for :class:`.StatementError` when stringified. Each\nerror detail is broken up over multiple newlines instead of spaced out on a\nsingle line.  Additionally, the SQL representation now stringifies the SQL\nstatement rather than using ``repr()``, so that newlines are rendered as is.\nPull request courtesy Nate Clark.\n\nFixes: #4500\n\nCloses: #4501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4501\nPull-request-sha: 60cc0ee68dc96b8f483a60d37bcb26b6c6d53efe\n\nChange-Id: I79d8418b7495e5691c9a56f41e79495c26a967ff",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8f318692d4443300c90c7be9dc44ae3c8707f818",
        "buggy_code": "r\"\\(.*SomeException\\) \" r\"nope \\[SQL\\: u?'SELECT 1 \",",
        "fixed_code": "r\"\\(.*SomeException\\) \" r\"nope\\n\\[SQL\\: u?SELECT 1 \",",
        "patch": "@@ -1114,7 +1114,7 @@ def process_bind_param(self, value, dialect):\n         with engine.connect() as conn:\n             assert_raises_message(\n                 tsa.exc.StatementError,\n-                r\"\\(.*SomeException\\) \" r\"nope \\[SQL\\: u?'SELECT 1 \",\n+                r\"\\(.*SomeException\\) \" r\"nope\\n\\[SQL\\: u?SELECT 1 \",\n                 conn.execute,\n                 select([1]).where(column(\"foo\") == literal(\"bar\", MyType())),\n             )"
    },
    {
        "commit_id": "8f318692d4443300c90c7be9dc44ae3c8707f818",
        "commit_message": "Include newlines in StatementError formatting\n\nRevised the formatting for :class:`.StatementError` when stringified. Each\nerror detail is broken up over multiple newlines instead of spaced out on a\nsingle line.  Additionally, the SQL representation now stringifies the SQL\nstatement rather than using ``repr()``, so that newlines are rendered as is.\nPull request courtesy Nate Clark.\n\nFixes: #4500\n\nCloses: #4501\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4501\nPull-request-sha: 60cc0ee68dc96b8f483a60d37bcb26b6c6d53efe\n\nChange-Id: I79d8418b7495e5691c9a56f41e79495c26a967ff",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8f318692d4443300c90c7be9dc44ae3c8707f818",
        "buggy_code": "\".User.*.; the object is detached and the value was expired \",",
        "fixed_code": "\".User.*.; the object is detached and the value was expired\",",
        "patch": "@@ -1037,7 +1037,7 @@ def go():\n         assert_raises_message(\n             sa.exc.StatementError,\n             \"Can't resolve value for column users.id on object \"\n-            \".User.*.; the object is detached and the value was expired \",\n+            \".User.*.; the object is detached and the value was expired\",\n             q.one,\n         )\n "
    },
    {
        "commit_id": "b2afef966dcc44e991f22a8fb68de4f1220bd674",
        "commit_message": "Don't run pending_to_persistent for non-new objects\n\nFixed fairly simple but critical issue where the\n:meth:`.SessionEvents.pending_to_persistent` event would be invoked for\nobjects not just when they move from pending to persistent, but when they\nwere also already persistent and just being updated, thus causing the event\nto be invoked for all objects on every update.\n\nFixes: #4489\nChange-Id: Ibe147020aa62f7d605cb1029b7f3b776f42e6b43",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b2afef966dcc44e991f22a8fb68de4f1220bd674",
        "buggy_code": "self.session._register_newly_persistent(other)",
        "fixed_code": "self.session._register_persistent(other)",
        "patch": "@@ -440,7 +440,7 @@ def finalize_flush_changes(self):\n         if isdel:\n             self.session._remove_newly_deleted(isdel)\n         if other:\n-            self.session._register_newly_persistent(other)\n+            self.session._register_persistent(other)\n \n \n class IterateMappersMixin(object):"
    },
    {
        "commit_id": "30307c4616ad67c01ddae2e1e8e34fabf6028414",
        "commit_message": "Remove all remaining text() coercions and ensure identifiers are safe\n\nFully removed the behavior of strings passed directly as components of a\n:func:`.select` or :class:`.Query` object being coerced to :func:`.text`\nconstructs automatically; the warning that has been emitted is now an\nArgumentError or in the case of order_by() / group_by() a CompileError.\nThis has emitted a warning since version 1.0 however its presence continues\nto create concerns for the potential of mis-use of this behavior.\n\nNote that public CVEs have been posted for order_by() / group_by() which\nare resolved by this commit:  CVE-2019-7164  CVE-2019-7548\n\nAdded \"SQL phrase validation\" to key DDL phrases that are accepted as plain\nstrings, including :paramref:`.ForeignKeyConstraint.on_delete`,\n:paramref:`.ForeignKeyConstraint.on_update`,\n:paramref:`.ExcludeConstraint.using`,\n:paramref:`.ForeignKeyConstraint.initially`, for areas where a series of SQL\nkeywords only are expected.Any non-space characters that suggest the phrase\nwould need to be quoted will raise a :class:`.CompileError`.   This change\nis related to the series of changes committed as part of :ticket:`4481`.\n\nFixed issue where using an uppercase name for an index type (e.g. GIST,\nBTREE, etc. ) or an EXCLUDE constraint would treat it as an identifier to\nbe quoted, rather than rendering it as is. The new behavior converts these\ntypes to lowercase and ensures they contain only valid SQL characters.\n\nQuoting is applied to :class:`.Function` names, those which are usually but\nnot necessarily generated from the :attr:`.sql.func` construct,  at compile\ntime if they contain illegal characters, such as spaces or punctuation. The\nnames are as before treated as case insensitive however, meaning if the\nnames contain uppercase or mixed case characters, that alone does not\ntrigger quoting. The case insensitivity is currently maintained for\nbackwards compatibility.\n\nFixes: #4481\nFixes: #4473\nFixes: #4467\nChange-Id: Ib22a27d62930e24702e2f0f7c74a0473385a08eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/30307c4616ad67c01ddae2e1e8e34fabf6028414",
        "buggy_code": "__version__ = '1.3.0b3'",
        "fixed_code": "__version__ = \"1.3.0b3\"",
        "patch": "@@ -122,7 +122,7 @@\n from .engine import engine_from_config  # noqa nosort\n \n \n-__version__ = '1.3.0b3'\n+__version__ = \"1.3.0b3\"\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "30307c4616ad67c01ddae2e1e8e34fabf6028414",
        "commit_message": "Remove all remaining text() coercions and ensure identifiers are safe\n\nFully removed the behavior of strings passed directly as components of a\n:func:`.select` or :class:`.Query` object being coerced to :func:`.text`\nconstructs automatically; the warning that has been emitted is now an\nArgumentError or in the case of order_by() / group_by() a CompileError.\nThis has emitted a warning since version 1.0 however its presence continues\nto create concerns for the potential of mis-use of this behavior.\n\nNote that public CVEs have been posted for order_by() / group_by() which\nare resolved by this commit:  CVE-2019-7164  CVE-2019-7548\n\nAdded \"SQL phrase validation\" to key DDL phrases that are accepted as plain\nstrings, including :paramref:`.ForeignKeyConstraint.on_delete`,\n:paramref:`.ForeignKeyConstraint.on_update`,\n:paramref:`.ExcludeConstraint.using`,\n:paramref:`.ForeignKeyConstraint.initially`, for areas where a series of SQL\nkeywords only are expected.Any non-space characters that suggest the phrase\nwould need to be quoted will raise a :class:`.CompileError`.   This change\nis related to the series of changes committed as part of :ticket:`4481`.\n\nFixed issue where using an uppercase name for an index type (e.g. GIST,\nBTREE, etc. ) or an EXCLUDE constraint would treat it as an identifier to\nbe quoted, rather than rendering it as is. The new behavior converts these\ntypes to lowercase and ensures they contain only valid SQL characters.\n\nQuoting is applied to :class:`.Function` names, those which are usually but\nnot necessarily generated from the :attr:`.sql.func` construct,  at compile\ntime if they contain illegal characters, such as spaces or punctuation. The\nnames are as before treated as case insensitive however, meaning if the\nnames contain uppercase or mixed case characters, that alone does not\ntrigger quoting. The case insensitivity is currently maintained for\nbackwards compatibility.\n\nFixes: #4481\nFixes: #4473\nFixes: #4467\nChange-Id: Ib22a27d62930e24702e2f0f7c74a0473385a08eb",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/30307c4616ad67c01ddae2e1e8e34fabf6028414",
        "buggy_code": "\"SQL expression object or string expected, got object of type \"",
        "fixed_code": "\"SQL expression object expected, got object of type \"",
        "patch": "@@ -657,7 +657,7 @@ def test_no_embed_in_sql(self):\n         ):\n             assert_raises_message(\n                 sa.exc.ArgumentError,\n-                \"SQL expression object or string expected, got object of type \"\n+                \"SQL expression object expected, got object of type \"\n                 \"<.* 'list'> instead\",\n                 t.select,\n                 [const],"
    },
    {
        "commit_id": "5ae8a54ed381735a88141b8ec5326b21c36e793b",
        "commit_message": "repair F632 issue\n\nin b8f9517cddf41dbb47ae4ad120141c7ab1a29ac5 we disabled this new error\ncoming up, but it's just this one line in a test that is in fact wrong.\n\nChange-Id: I4e3612596e9735c7db066832d13ccb454c93808f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5ae8a54ed381735a88141b8ec5326b21c36e793b",
        "buggy_code": "assert j.default is 10",
        "fixed_code": "assert j.default == 10",
        "patch": "@@ -164,7 +164,7 @@ class J(Base):\n         assert j.default is None\n         assert j.none is None\n         j.none = 10\n-        assert j.default is 10\n+        assert j.default == 10\n         assert j.none == 10\n \n "
    },
    {
        "commit_id": "2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "commit_message": "Improve error messages in the area of loader options\n\nImproved error messages emitted by the ORM in the area of loader option\ntraversal.  This includes early detection of mis-matched loader strategies\nalong with a clearer explanation why these strategies don't match.\n\nFixes: #4433\nChange-Id: I3351b64241f7f62ca141a0be95085e6ef8ca6d32",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "buggy_code": "r\"Triggering mapper: 'Mapper\\|User\\|users'. \"",
        "fixed_code": "r\"Triggering mapper: 'mapped class User->users'. \"",
        "patch": "@@ -982,7 +982,7 @@ class User(Base):\n                 sa.exc.InvalidRequestError,\n                 \"^One or more mappers failed to initialize\"\n                 \" - can't proceed with initialization of other mappers. \"\n-                r\"Triggering mapper: 'Mapper\\|User\\|users'. \"\n+                r\"Triggering mapper: 'mapped class User->users'. \"\n                 \"Original exception was: When initializing.*\",\n                 configure_mappers,\n             )"
    },
    {
        "commit_id": "2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "commit_message": "Improve error messages in the area of loader options\n\nImproved error messages emitted by the ORM in the area of loader option\ntraversal.  This includes early detection of mis-matched loader strategies\nalong with a clearer explanation why these strategies don't match.\n\nFixes: #4433\nChange-Id: I3351b64241f7f62ca141a0be95085e6ef8ca6d32",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "buggy_code": "r\"On mapper Mapper\\|Employee\\|employees, \"",
        "fixed_code": "r\"On mapper mapped class Employee->employees, \"",
        "patch": "@@ -2010,7 +2010,7 @@ def test_explicit_composite_pk(self):\n         )\n         assert_raises_message(\n             sa_exc.SAWarning,\n-            r\"On mapper Mapper\\|Employee\\|employees, \"\n+            r\"On mapper mapped class Employee->employees, \"\n             \"primary key column 'persons.id' is being \"\n             \"combined with distinct primary key column 'employees.eid' \"\n             \"in attribute 'id'. Use explicit properties to give \""
    },
    {
        "commit_id": "2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "commit_message": "Improve error messages in the area of loader options\n\nImproved error messages emitted by the ORM in the area of loader option\ntraversal.  This includes early detection of mis-matched loader strategies\nalong with a clearer explanation why these strategies don't match.\n\nFixes: #4433\nChange-Id: I3351b64241f7f62ca141a0be95085e6ef8ca6d32",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2eb3f211dae1188a6c1b3664f612f4628fd7b9a9",
        "buggy_code": "r\"reference mapper Mapper\\|User\\|users\",",
        "fixed_code": "r\"reference mapper mapped class User->users\",",
        "patch": "@@ -2142,7 +2142,7 @@ def test_invalid_target(self):\n             r\"User.addresses references \"\n             r\"relationship Address.dingaling, \"\n             r\"which does not \"\n-            r\"reference mapper Mapper\\|User\\|users\",\n+            r\"reference mapper mapped class User->users\",\n             configure_mappers,\n         )\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "a backwards compatibility mode SQAlchemy may attempt to use T-SQL",
        "fixed_code": "a backwards compatibility mode SQLAlchemy may attempt to use T-SQL",
        "patch": "@@ -561,7 +561,7 @@\n server. ``server_version_info`` will always return the database\n server version information (in this case SQL2005) and not the\n compatibility level information. Because of this, if running under\n-a backwards compatibility mode SQAlchemy may attempt to use T-SQL\n+a backwards compatibility mode SQLAlchemy may attempt to use T-SQL\n statements that are unable to be parsed by the database server.\n \n Triggers"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "Ansi Quoting Style",
        "fixed_code": "ANSI Quoting Style",
        "patch": "@@ -294,7 +294,7 @@\n     `Character set introducers <https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html>`_ - on the MySQL website\n \n \n-Ansi Quoting Style\n+ANSI Quoting Style\n ------------------\n \n MySQL features two varieties of identifier \"quoting style\", one using"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "except that the list is limited to those tables tha report a",
        "fixed_code": "except that the list is limited to those tables that report a",
        "patch": "@@ -2224,7 +2224,7 @@ def get_foreign_table_names(self, schema=None):\n         \"\"\"Return a list of FOREIGN TABLE names.\n \n         Behavior is similar to that of :meth:`.Inspector.get_table_names`,\n-        except that the list is limited to those tables tha report a\n+        except that the list is limited to those tables that report a\n         ``relkind`` value of ``f``.\n \n         .. versionadded:: 1.0.0"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "INSERT contructs created using :meth:`.Insert.values` should be",
        "fixed_code": "INSERT constructs created using :meth:`.Insert.values` should be",
        "patch": "@@ -1339,7 +1339,7 @@ def get_current_parameters(self, isolate_multiinsert_groups=True):\n         with the name.\n \n         :param isolate_multiinsert_groups=True: indicates that multi-valued\n-         INSERT contructs created using :meth:`.Insert.values` should be\n+         INSERT constructs created using :meth:`.Insert.values` should be\n          handled by returning only the subset of parameters that are local\n          to the current column default invocation.   When ``False``, the\n          raw parameters of the statement are returned including the"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "\"\"\"Contruct a new :class:`.CreateEnginePlugin`.",
        "fixed_code": "\"\"\"Construct a new :class:`.CreateEnginePlugin`.",
        "patch": "@@ -901,7 +901,7 @@ def __init__(self, url, kwargs):\n     \"\"\"\n \n     def __init__(self, url, kwargs):\n-        \"\"\"Contruct a new :class:`.CreateEnginePlugin`.\n+        \"\"\"Construct a new :class:`.CreateEnginePlugin`.\n \n         The plugin object is instantiated individually for each call\n         to :func:`.create_engine`.  A single :class:`.Engine` will be"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "\"\"\"Table exists but can't be reflectted for some reason.",
        "fixed_code": "\"\"\"Table exists but can't be reflected for some reason.",
        "patch": "@@ -266,7 +266,7 @@ class NoSuchTableError(InvalidRequestError):\n \n \n class UnreflectableTableError(InvalidRequestError):\n-    \"\"\"Table exists but can't be reflectted for some reason.\n+    \"\"\"Table exists but can't be reflected for some reason.\n \n     .. versionadded:: 1.2\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "attibute.",
        "fixed_code": "attribute.",
        "patch": "@@ -85,7 +85,7 @@ def association_proxy(target_collection, attr, **kw):\n     of type :class:`.AssociationProxy`.\n \n    Is assigned to the :attr:`.InspectionAttr.extension_type`\n-   attibute.\n+   attribute.\n \n \"\"\"\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "after all of its decscendants.  This is a very unique system of mapping",
        "fixed_code": "after all of its descendants.  This is a very unique system of mapping",
        "patch": "@@ -528,7 +528,7 @@ class Manager(Employee):\n     at class configuration time, it behaves like a declarative mixin\n     or an ``__abstract__`` base class.   Once classes are configured\n     and mappings are produced, it then gets mapped itself, but\n-    after all of its decscendants.  This is a very unique system of mapping\n+    after all of its descendants.  This is a very unique system of mapping\n     not found in any other SQLAlchemy system.\n \n     Using this approach, we can specify columns and properties"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "for indexed access, instead of the usual index opearator of ``->``::",
        "fixed_code": "for indexed access, instead of the usual index operator of ``->``::",
        "patch": "@@ -210,7 +210,7 @@ class Person(Base):\n \n The ``age`` attribute at the instance level works as before; however\n when rendering SQL, PostgreSQL's ``->>`` operator will be used\n-for indexed access, instead of the usual index opearator of ``->``::\n+for indexed access, instead of the usual index operator of ``->``::\n \n     >>> query = session.query(Person).filter(Person.age < 20)\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "possible, allevating this limitation, though this feature will require",
        "fixed_code": "possible, alleviating this limitation, though this feature will require",
        "patch": "@@ -107,7 +107,7 @@ class Bullet(Base):\n       to lessen the impact of this limitation, however this does not take place\n       for a UNIQUE column.\n       A future feature will allow the \"DELETE before INSERT\" behavior to be\n-      possible, allevating this limitation, though this feature will require\n+      possible, alleviating this limitation, though this feature will require\n       explicit configuration at the mapper level for sets of columns that\n       are to be handled in this way.\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "attibute.",
        "fixed_code": "attribute.",
        "patch": "@@ -195,7 +195,7 @@\n     not part of sqlalchemy.ext.\n \n     Is assigned to the :attr:`.InspectionAttr.extension_type`\n-    attibute.\n+    attribute.\n \n     \"\"\",\n )"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "This is a private module which defines the behavior of invidual ORM-",
        "fixed_code": "This is a private module which defines the behavior of individual ORM-",
        "patch": "@@ -7,7 +7,7 @@\n \n \"\"\"MapperProperty implementations.\n \n-This is a private module which defines the behavior of invidual ORM-\n+This is a private module which defines the behavior of individual ORM-\n mapped attributes.\n \n \"\"\""
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": ":paramref:`~.relationship.primaryjoin` conditition are to be",
        "fixed_code": ":paramref:`~.relationship.primaryjoin` condition are to be",
        "patch": "@@ -426,7 +426,7 @@ class Parent(Base):\n           In normal cases, the :paramref:`~.relationship.foreign_keys`\n           parameter is **not required.** :func:`.relationship` will\n           automatically determine which columns in the\n-          :paramref:`~.relationship.primaryjoin` conditition are to be\n+          :paramref:`~.relationship.primaryjoin` condition are to be\n           considered \"foreign key\" columns based on those\n           :class:`.Column` objects that specify :class:`.ForeignKey`,\n           or are otherwise listed as referencing columns in a"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "\"\"\"Return the :class:`.Mapper` used for this mapepd object.\"\"\"",
        "fixed_code": "\"\"\"Return the :class:`.Mapper` used for this mapped object.\"\"\"",
        "patch": "@@ -312,7 +312,7 @@ def _pending_mutations(self):\n \n     @util.memoized_property\n     def mapper(self):\n-        \"\"\"Return the :class:`.Mapper` used for this mapepd object.\"\"\"\n+        \"\"\"Return the :class:`.Mapper` used for this mapped object.\"\"\"\n         return self.manager.mapper\n \n     @property"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "particiular entity load path.",
        "fixed_code": "particular entity load path.",
        "patch": "@@ -1472,7 +1472,7 @@ def undefer_group(loadopt, name):\n             defaultload(\"someattr\").undefer_group(\"large_attrs\"))\n \n     .. versionchanged:: 0.9.0 :func:`.orm.undefer_group` is now specific to a\n-       particiular entity load path.\n+       particular entity load path.\n \n     .. seealso::\n "
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "and will remain persisent throughout the life of the",
        "fixed_code": "and will remain persistent throughout the life of the",
        "patch": "@@ -470,7 +470,7 @@ def record_info(self):\n         Unlike the :attr:`._ConnectionRecord.info` dictionary, which is linked\n         to the lifespan of the DBAPI connection, this dictionary is linked\n         to the lifespan of the :class:`._ConnectionRecord` container itself\n-        and will remain persisent throughout the life of the\n+        and will remain persistent throughout the life of the\n         :class:`._ConnectionRecord`.\n \n         .. versionadded:: 1.1"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "be transformed on a per-execution basis to accomodate the sequence",
        "fixed_code": "be transformed on a per-execution basis to accommodate the sequence",
        "patch": "@@ -1089,7 +1089,7 @@ def __init__(\n           if True, this parameter will be treated as an \"expanding\" parameter\n           at execution time; the parameter value is expected to be a sequence,\n           rather than a scalar value, and the string SQL statement will\n-          be transformed on a per-execution basis to accomodate the sequence\n+          be transformed on a per-execution basis to accommodate the sequence\n           with a variable number of parameter slots passed to the DBAPI.\n           This is to allow statement caching to be used in conjunction with\n           an IN clause."
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "The presense of an \"onclause\" indicates that at least one clause can",
        "fixed_code": "The presence of an \"onclause\" indicates that at least one clause can",
        "patch": "@@ -116,7 +116,7 @@ def find_left_clause_to_join_from(clauses, join_to, onclause):\n     and optional ON clause, return a list of integer indexes from the\n     clauses list indicating the clauses that can be joined from.\n \n-    The presense of an \"onclause\" indicates that at least one clause can\n+    The presence of an \"onclause\" indicates that at least one clause can\n     definitely be joined from; if the list of clauses is of length one\n     and the onclause is given, returns that index.   If the list of clauses\n     is more than length one, and the onclause is given, attempts to locate"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "def test_autoincrement_on_insert_implcit_returning(self):",
        "fixed_code": "def test_autoincrement_on_insert_implicit_returning(self):",
        "patch": "@@ -300,7 +300,7 @@ def test_explicit_returning_pk_no_autocommit(self):\n         fetched_pk = config.db.scalar(select([table.c.id]))\n         eq_(fetched_pk, pk)\n \n-    def test_autoincrement_on_insert_implcit_returning(self):\n+    def test_autoincrement_on_insert_implicit_returning(self):\n \n         config.db.execute(self.tables.autoinc_pk.insert(), data=\"some data\")\n         self._assert_round_trip(self.tables.autoinc_pk, config.db)"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "arent attempted to be matched to the target polymorphic",
        "fixed_code": "aren't attempted to be matched to the target polymorphic",
        "patch": "@@ -1535,7 +1535,7 @@ def define_tables(cls, metadata):\n \n     def test_pjoin_compile(self):\n         \"\"\"test that remote_side columns in the secondary join table\n-        arent attempted to be matched to the target polymorphic\n+        aren't attempted to be matched to the target polymorphic\n         selectable\"\"\"\n \n         class BaseItem(object):"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "\"\"\"Target database will quote bound paramter names, doesn't support",
        "fixed_code": "\"\"\"Target database will quote bound parameter names, doesn't support",
        "patch": "@@ -167,7 +167,7 @@ def standalone_binds(self):\n \n     @property\n     def no_quoting_special_bind_names(self):\n-        \"\"\"Target database will quote bound paramter names, doesn't support\n+        \"\"\"Target database will quote bound parameter names, doesn't support\n         EXPANDING\"\"\"\n \n         return skip_if([\"oracle\"])"
    },
    {
        "commit_id": "66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "commit_message": "Fix many spell glitches\n\nThis affects mostly docstrings, except in orm/events.py::dispose_collection()\nwhere one parameter gets renamed: given that the method is\nempty, it seemed reasonable to me to fix that too.\n\nCloses: #4440\nPull-request: https://github.com/sqlalchemy/sqlalchemy/pull/4440\nPull-request-sha: 779ed75acb6142e1f1daac467b5b14134529bb4b\n\nChange-Id: Ic0553fe97853054b09c2453af76d96363de6eb0e",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66e88d30a86fc37e2eaf7367e988ced3834e3250",
        "buggy_code": "to support SQLite's lack of right-nested joins.  SQlite as of",
        "fixed_code": "to support SQLite's lack of right-nested joins.  SQLite as of",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"These tests are all about the \"join rewriting\" feature built\n-to support SQLite's lack of right-nested joins.  SQlite as of\n+to support SQLite's lack of right-nested joins.  SQLite as of\n version 3.7.16 no longer has this limitation.\n \n \"\"\""
    },
    {
        "commit_id": "1c56b6049a3fdd1122a4c82ae5757332d3753146",
        "commit_message": "Cleanup with query aliasing\n\nTry to simplify some of the \"adapter\" stuff in query:\n\n1. identify that join(.., aliased=True) doesn't work if the\nright side has no mapper.   The adaption of the right side is\ndone via the mapper with aliased(), so that doesn't effect\na selectable only.  raise an error, so we can simplify\nthe code.\n\n2. build fewer adapter objects.   these are confusing to follow\nand we should try to figure out exactly what purpose which\none serves where and make that clear.\n\nChange-Id: I18dfcd01e6ad533aa0b8d557fc637ee2766ed050",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1c56b6049a3fdd1122a4c82ae5757332d3753146",
        "buggy_code": "assert sub1.c.id not in q._filter_aliases.equivalents",
        "fixed_code": "assert sub1.c.id not in q._filter_aliases[0].equivalents",
        "patch": "@@ -3555,7 +3555,7 @@ class Sub2(fixtures.ComparableEntity):\n         sess.flush()\n \n         q = sess.query(Base).outerjoin(\"sub2\", aliased=True)\n-        assert sub1.c.id not in q._filter_aliases.equivalents\n+        assert sub1.c.id not in q._filter_aliases[0].equivalents\n \n         eq_(\n             sess.query(Base)"
    },
    {
        "commit_id": "c8d7141c79829f36e123bf3e4be1721dd34aaeb4",
        "commit_message": "Adapt single inh criteria more specifically\n\nFixed issue where when using single-table inheritance in conjunction with a\njoined inheritance hierarchy that uses \"with polymorphic\" loading, the\n\"single table criteria\" for that single-table entity could get confused for\nthat of other entities from the same hierarchy used in the same query.The\nadaption of the \"single table criteria\" is made more specific to the target\nentity to avoid it accidentally getting adapted to other tables in the\nquery.\n\nChange-Id: Ia9f915a4b01e8bb9cee365c4c70e00c626f103c4\nFixes: #4454",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8d7141c79829f36e123bf3e4be1721dd34aaeb4",
        "buggy_code": "return self.polymorphic_on.in_(",
        "fixed_code": "return self.polymorphic_on._annotate({\"parentmapper\": self}).in_(",
        "patch": "@@ -2103,7 +2103,7 @@ def _selectable_from_mappers(self, mappers, innerjoin):\n     @_memoized_configured_property\n     def _single_table_criterion(self):\n         if self.single and self.inherits and self.polymorphic_on is not None:\n-            return self.polymorphic_on.in_(\n+            return self.polymorphic_on._annotate({\"parentmapper\": self}).in_(\n                 m.polymorphic_identity for m in self.self_and_descendants\n             )\n         else:"
    },
    {
        "commit_id": "404e69426b05a82d905cbb3ad33adafccddb00dd",
        "commit_message": "Assorted pre-Black fixes\n\nFixes to the test suite, a few errant imports, and setup.py:\n\n- mysql and postgresql have unused 'json' imports; remove\n- postgresql is exporting the 'json' symbol, remove\n- make sure setup.py can find __version__ using \" or '\n- retry logic in provision create database for postgresql fixed\n- refactor test_magazine to use cls.tables rather than globals\n- remove unused class in test_scoping\n- add a comment to test_deprecations that this test suite itself\n  is deprecated\n- don't use mapper() and orm_mapper() in test_unitofwork, just\n  use mapper()\n- remove dupe test_scalar_set_None test in test_attributes\n- Python 2.7 and above includes unittest.SkipTest, remove pre-2.7\n  fallback\n- use imported SkipTest in profiling\n- declarative test_reflection tests with \"reflectable_autoincrement\"\n  already don't run on oracle or firebird; remove conditional logic\n  for these, which also removes an \"id\" symbol\n- clean up test in test_functions, remove print statement\n- remove dupe test_literal_processor_coercion_native_int_out_of_range\n  in test/sql/test_types.py\n- fix psycopg2_hstore ref\n\nChange-Id: I7b3444f8546aac82be81cd1e7b6d8b2ad6834fe6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/404e69426b05a82d905cbb3ad33adafccddb00dd",
        "buggy_code": ".. _psycopg2_hstore::",
        "fixed_code": ".. _psycopg2_hstore:",
        "patch": "@@ -300,7 +300,7 @@\n     import logging\n     logging.getLogger('sqlalchemy.dialects.postgresql').setLevel(logging.INFO)\n \n-.. _psycopg2_hstore::\n+.. _psycopg2_hstore:\n \n HSTORE type\n ------------"
    },
    {
        "commit_id": "404e69426b05a82d905cbb3ad33adafccddb00dd",
        "commit_message": "Assorted pre-Black fixes\n\nFixes to the test suite, a few errant imports, and setup.py:\n\n- mysql and postgresql have unused 'json' imports; remove\n- postgresql is exporting the 'json' symbol, remove\n- make sure setup.py can find __version__ using \" or '\n- retry logic in provision create database for postgresql fixed\n- refactor test_magazine to use cls.tables rather than globals\n- remove unused class in test_scoping\n- add a comment to test_deprecations that this test suite itself\n  is deprecated\n- don't use mapper() and orm_mapper() in test_unitofwork, just\n  use mapper()\n- remove dupe test_scalar_set_None test in test_attributes\n- Python 2.7 and above includes unittest.SkipTest, remove pre-2.7\n  fallback\n- use imported SkipTest in profiling\n- declarative test_reflection tests with \"reflectable_autoincrement\"\n  already don't run on oracle or firebird; remove conditional logic\n  for these, which also removes an \"id\" symbol\n- clean up test in test_functions, remove print statement\n- remove dupe test_literal_processor_coercion_native_int_out_of_range\n  in test/sql/test_types.py\n- fix psycopg2_hstore ref\n\nChange-Id: I7b3444f8546aac82be81cd1e7b6d8b2ad6834fe6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/404e69426b05a82d905cbb3ad33adafccddb00dd",
        "buggy_code": "raise SkipTest(\"cProfile is not installed\")",
        "fixed_code": "raise config._skip_test_exception(\"cProfile is not installed\")",
        "patch": "@@ -206,7 +206,7 @@ def wrap(*args, **kw):\n @contextlib.contextmanager\n def count_functions(variance=0.05):\n     if cProfile is None:\n-        raise SkipTest(\"cProfile is not installed\")\n+        raise config._skip_test_exception(\"cProfile is not installed\")\n \n     if not _profile_stats.has_stats() and not _profile_stats.write:\n         config.skip_test("
    },
    {
        "commit_id": "404e69426b05a82d905cbb3ad33adafccddb00dd",
        "commit_message": "Assorted pre-Black fixes\n\nFixes to the test suite, a few errant imports, and setup.py:\n\n- mysql and postgresql have unused 'json' imports; remove\n- postgresql is exporting the 'json' symbol, remove\n- make sure setup.py can find __version__ using \" or '\n- retry logic in provision create database for postgresql fixed\n- refactor test_magazine to use cls.tables rather than globals\n- remove unused class in test_scoping\n- add a comment to test_deprecations that this test suite itself\n  is deprecated\n- don't use mapper() and orm_mapper() in test_unitofwork, just\n  use mapper()\n- remove dupe test_scalar_set_None test in test_attributes\n- Python 2.7 and above includes unittest.SkipTest, remove pre-2.7\n  fallback\n- use imported SkipTest in profiling\n- declarative test_reflection tests with \"reflectable_autoincrement\"\n  already don't run on oracle or firebird; remove conditional logic\n  for these, which also removes an \"id\" symbol\n- clean up test in test_functions, remove print statement\n- remove dupe test_literal_processor_coercion_native_int_out_of_range\n  in test/sql/test_types.py\n- fix psycopg2_hstore ref\n\nChange-Id: I7b3444f8546aac82be81cd1e7b6d8b2ad6834fe6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/404e69426b05a82d905cbb3ad33adafccddb00dd",
        "buggy_code": "r\".*__version__ = '(.*?)'\",",
        "fixed_code": "r\"\"\".*__version__ = [\"'](.*?)['\"]\"\"\",",
        "patch": "@@ -114,7 +114,7 @@ def status_msgs(*msgs):\n             os.path.dirname(__file__),\n             'lib', 'sqlalchemy', '__init__.py')) as v_file:\n     VERSION = re.compile(\n-        r\".*__version__ = '(.*?)'\",\n+        r\"\"\".*__version__ = [\"'](.*?)['\"]\"\"\",\n         re.S).match(v_file.read()).group(1)\n \n with open(os.path.join(os.path.dirname(__file__), 'README.rst')) as r_file:"
    },
    {
        "commit_id": "0b0a4c8ba2465fce5fa1954a0d31b44840f1b4b8",
        "commit_message": "Handle PostgreSQL enums in remote schemas\n\nFixed issue where a :class:`.postgresql.ENUM` or a custom domain present\nin a remote schema would not be recognized within column reflection if\nthe name of the enum/domain or the name of the schema required quoting.\nA new parsing scheme now fully parses out quoted or non-quoted tokens\nincluding support for SQL-escaped quotes.\n\nFixed issue where multiple :class:`.postgresql.ENUM` objects referred to\nby the same :class:`.MetaData` object would fail to be created if\nmultiple objects had the same name under different schema names.  The\ninternal memoization the Postgresql dialect uses to track if it has\ncreated a particular :class:`.postgresql.ENUM` in the database during\na DDL creation sequence now takes schema name into account.\n\nFixes: #4416\nChange-Id: I8cf03069e10b12f409e9b6796e24fc5850979955",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0b0a4c8ba2465fce5fa1954a0d31b44840f1b4b8",
        "buggy_code": "safe_reraise,\\",
        "fixed_code": "safe_reraise, quoted_token_parser,\\",
        "patch": "@@ -34,7 +34,7 @@\n     classproperty, set_creation_order, warn_exception, warn, NoneType,\\\n     constructor_copy, methods_equivalent, chop_traceback, asint,\\\n     generic_repr, counter, PluginLoader, hybridproperty, hybridmethod, \\\n-    safe_reraise,\\\n+    safe_reraise, quoted_token_parser,\\\n     get_callable_argspec, only_once, attrsetter, ellipses_string, \\\n     warn_limited, map_bits, MemoizedSlots, EnsureKWArgType, wrap_callable\n "
    },
    {
        "commit_id": "580d114405f3d200682f3a219dcb9004c81300c7",
        "commit_message": "Pin pytest *before* 3.9.1 totally\n\nUnfortunately they have released\n3.9.2 before fixing issue 4181, which means we will have to\nre-pin a third time after they eventually release with\na fix\n\nChange-Id: I9b6fab1b535f883a035f002264c41ad0166790ab\nReference: https://github.com/pytest-dev/pytest/issues/4181",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/580d114405f3d200682f3a219dcb9004c81300c7",
        "buggy_code": "tests_require=['pytest>=2.5.2,!=3.9.1', 'mock', 'pytest-xdist'],",
        "fixed_code": "tests_require=['pytest>=2.5.2,<3.9.1', 'mock', 'pytest-xdist'],",
        "patch": "@@ -139,7 +139,7 @@ def run_setup(with_cext):\n         package_dir={'': 'lib'},\n         license=\"MIT License\",\n         cmdclass=cmdclass,\n-        tests_require=['pytest>=2.5.2,!=3.9.1', 'mock', 'pytest-xdist'],\n+        tests_require=['pytest>=2.5.2,<3.9.1', 'mock', 'pytest-xdist'],\n         long_description=readme,\n         python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n         classifiers=["
    },
    {
        "commit_id": "2b9ba4049e94eaa4e6299d1d1c1d37fb236af99b",
        "commit_message": "Merge \"Fix dependency_for final argument\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2b9ba4049e94eaa4e6299d1d1c1d37fb236af99b",
        "buggy_code": "\".\".join(tokens[0:-1]), globals(), locals(), tokens[-1])",
        "fixed_code": "\".\".join(tokens[0:-1]), globals(), locals(), [tokens[-1]])",
        "patch": "@@ -859,7 +859,7 @@ def decorate(obj):\n         # unfortunately importlib doesn't work that great either\n         tokens = modulename.split(\".\")\n         mod = compat.import_(\n-            \".\".join(tokens[0:-1]), globals(), locals(), tokens[-1])\n+            \".\".join(tokens[0:-1]), globals(), locals(), [tokens[-1]])\n         mod = getattr(mod, tokens[-1])\n         setattr(mod, obj.__name__, obj)\n         return obj"
    },
    {
        "commit_id": "cacc3c2057ab14faaf6c5b679bb2dbb6f8b98f8e",
        "commit_message": "Fix dependency_for final argument\n\nFixed issue where part of the utility language helper internals was passing\nthe wrong kind of argument to the Python ``__import__`` builtin as the list\nof modules to be imported.  The issue produced no symptoms within the core\nlibrary but could cause issues with external applications that redefine the\n``__import__`` builtin or otherwise instrument it. Pull request courtesy Joe\nUrciuoli.\n\nPer the submitter: \"The fourth argument provided to `__import__`  (which\n`import_` feeds in to) is supposed to be a a list of strings, but this code is\npassing a single string. This was causing the sqlalchemy `import_` function to\nbreak the string (for example 'interfaces') into an array of single characters\n['i', 'n', ...], which causes the actual `__import__` to not find the module\n`sqlalchemy.orm.i` (since it's trying to import `sqlalchemy.orm.i` and\n`sqlalchemy.orm.n` .. etc)\"\n\nNo issue could be reproduced locally as it seems you can put anything non-\nempty/None into that last argument, even a list like ``['X']``, and  all the\nsub-modules seem to appear.  Omit it, and then the sub-modules aren't present.\nPerhaps it just runs the module or not if this attribute is present.\n\nChange-Id: Ia15c74620f24d24f0df4882f9b36a04e2c3725b8\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/473",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cacc3c2057ab14faaf6c5b679bb2dbb6f8b98f8e",
        "buggy_code": "\".\".join(tokens[0:-1]), globals(), locals(), tokens[-1])",
        "fixed_code": "\".\".join(tokens[0:-1]), globals(), locals(), [tokens[-1]])",
        "patch": "@@ -859,7 +859,7 @@ def decorate(obj):\n         # unfortunately importlib doesn't work that great either\n         tokens = modulename.split(\".\")\n         mod = compat.import_(\n-            \".\".join(tokens[0:-1]), globals(), locals(), tokens[-1])\n+            \".\".join(tokens[0:-1]), globals(), locals(), [tokens[-1]])\n         mod = getattr(mod, tokens[-1])\n         setattr(mod, obj.__name__, obj)\n         return obj"
    },
    {
        "commit_id": "469931514a1517dde82ba56f780c3007c66d5943",
        "commit_message": "Propagate **kw in postgresql distinct on compilation\n\nFixed bug in PostgreSQL dialect where compiler keyword arguments such as\n``literal_binds=True`` were not being propagated to a DISTINCT ON\nexpression.\n\nFixes: #4325\nChange-Id: I9949387dceb7fabe889799f42e92423572368b29",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/469931514a1517dde82ba56f780c3007c66d5943",
        "buggy_code": "[self.process(col) for col in select._distinct]",
        "fixed_code": "[self.process(col, **kw) for col in select._distinct]",
        "patch": "@@ -1525,7 +1525,7 @@ def get_select_precolumns(self, select, **kw):\n                 return \"DISTINCT \"\n             elif isinstance(select._distinct, (list, tuple)):\n                 return \"DISTINCT ON (\" + ', '.join(\n-                    [self.process(col) for col in select._distinct]\n+                    [self.process(col, **kw) for col in select._distinct]\n                 ) + \") \"\n             else:\n                 return \"DISTINCT ON (\" + \\"
    },
    {
        "commit_id": "0fc34a113989cfd284837363a7a55dc2c8aadeab",
        "commit_message": "Merge \"Fix collections ABC access before Python 3.8\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0fc34a113989cfd284837363a7a55dc2c8aadeab",
        "buggy_code": "coerce_generator_arg, lightweight_named_tuple",
        "fixed_code": "coerce_generator_arg, lightweight_named_tuple, collections_abc",
        "patch": "@@ -21,7 +21,7 @@\n     UniqueAppender, PopulateDict, EMPTY_SET, to_list, to_set, \\\n     to_column_set, update_copy, flatten_iterator, has_intersection, \\\n     LRUCache, ScopedRegistry, ThreadLocalRegistry, WeakSequence, \\\n-    coerce_generator_arg, lightweight_named_tuple\n+    coerce_generator_arg, lightweight_named_tuple, collections_abc\n \n from .langhelpers import iterate_attributes, class_hierarchy, \\\n     portable_instancemethod, unbound_method_to_callable, \\"
    },
    {
        "commit_id": "0fc34a113989cfd284837363a7a55dc2c8aadeab",
        "commit_message": "Merge \"Fix collections ABC access before Python 3.8\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0fc34a113989cfd284837363a7a55dc2c8aadeab",
        "buggy_code": "assert not isinstance(col, collections.Iterable)",
        "fixed_code": "assert not isinstance(col, util.collections_abc.Iterable)",
        "patch": "@@ -636,7 +636,7 @@ def __getitem__(self, index):\n                     return self.op(\"->\")(index)\n \n         col = Column('x', MyType())\n-        assert not isinstance(col, collections.Iterable)\n+        assert not isinstance(col, util.collections_abc.Iterable)\n \n     def test_lshift(self):\n         class MyType(UserDefinedType):"
    },
    {
        "commit_id": "a51b0528d3dca59e655e4d19b50bb271015f8196",
        "commit_message": "Fix collections ABC access before Python 3.8\n\nStarted importing \"collections\" from \"collections.abc\" under Python 3.3 and\ngreater for Python 3.8 compatibility.  Pull request courtesy Nathaniel\nKnight.\n\nIn Python 3.3, the abstract base classes (Iterable, Mapping, etc.)\nwere moved from the `collections` module and put in the\n`collections.abc` module. They remain in the `collections` module for\nbackwards compatibility, and will until Python 3.8.\n\nThis commit adds a variable (`collections_abc`) to the `util/compat`\nmodule, which will be the `collections` module for Python < 3.3 and\nbefore, or the `collections.abc` module for Python >= 3.3. It also\nuses the new variable, getting rid of some deprecation warnings that\nwere seen when running under Python 3.7.\n\nChange-Id: I2d1c0ef97c8ecac7af152cc56263422a40faa6bb\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/464",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a51b0528d3dca59e655e4d19b50bb271015f8196",
        "buggy_code": "coerce_generator_arg, lightweight_named_tuple",
        "fixed_code": "coerce_generator_arg, lightweight_named_tuple, collections_abc",
        "patch": "@@ -21,7 +21,7 @@\n     UniqueAppender, PopulateDict, EMPTY_SET, to_list, to_set, \\\n     to_column_set, update_copy, flatten_iterator, has_intersection, \\\n     LRUCache, ScopedRegistry, ThreadLocalRegistry, WeakSequence, \\\n-    coerce_generator_arg, lightweight_named_tuple\n+    coerce_generator_arg, lightweight_named_tuple, collections_abc\n \n from .langhelpers import iterate_attributes, class_hierarchy, \\\n     portable_instancemethod, unbound_method_to_callable, \\"
    },
    {
        "commit_id": "a51b0528d3dca59e655e4d19b50bb271015f8196",
        "commit_message": "Fix collections ABC access before Python 3.8\n\nStarted importing \"collections\" from \"collections.abc\" under Python 3.3 and\ngreater for Python 3.8 compatibility.  Pull request courtesy Nathaniel\nKnight.\n\nIn Python 3.3, the abstract base classes (Iterable, Mapping, etc.)\nwere moved from the `collections` module and put in the\n`collections.abc` module. They remain in the `collections` module for\nbackwards compatibility, and will until Python 3.8.\n\nThis commit adds a variable (`collections_abc`) to the `util/compat`\nmodule, which will be the `collections` module for Python < 3.3 and\nbefore, or the `collections.abc` module for Python >= 3.3. It also\nuses the new variable, getting rid of some deprecation warnings that\nwere seen when running under Python 3.7.\n\nChange-Id: I2d1c0ef97c8ecac7af152cc56263422a40faa6bb\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/464",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a51b0528d3dca59e655e4d19b50bb271015f8196",
        "buggy_code": "assert not isinstance(col, collections.Iterable)",
        "fixed_code": "assert not isinstance(col, util.collections_abc.Iterable)",
        "patch": "@@ -636,7 +636,7 @@ def __getitem__(self, index):\n                     return self.op(\"->\")(index)\n \n         col = Column('x', MyType())\n-        assert not isinstance(col, collections.Iterable)\n+        assert not isinstance(col, util.collections_abc.Iterable)\n \n     def test_lshift(self):\n         class MyType(UserDefinedType):"
    },
    {
        "commit_id": "2fdf26020878edcbaa7792a869b3d45b715cc05a",
        "commit_message": "Use exprs for bundle __clause_element__\n\nFixed bug in :class:`.Bundle` construct where placing two columns of the\nsame name would be de-duplicated, when the :class:`.Bundle` were used as\npart of the rendered SQL, such as in the ORDER BY or GROUP BY of the statement.\n\nChange-Id: Ia528c9fbb399a6beb5ea7cdd3a8a83ad530f5831\nFixes: #4295",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2fdf26020878edcbaa7792a869b3d45b715cc05a",
        "buggy_code": "return expression.ClauseList(group=False, *self.c)",
        "fixed_code": "return expression.ClauseList(group=False, *self.exprs)",
        "patch": "@@ -3964,7 +3964,7 @@ def _clone(self):\n         return cloned\n \n     def __clause_element__(self):\n-        return expression.ClauseList(group=False, *self.c)\n+        return expression.ClauseList(group=False, *self.exprs)\n \n     @property\n     def clauses(self):"
    },
    {
        "commit_id": "532566ba1f28ff8a6afa6eacc10c59eb918501f6",
        "commit_message": "Drop default-related structures after the Table is dropped.\n\nFixed bug where a :class:`.Sequence` would be dropped explicitly before any\n:class:`.Table` that refers to it, which breaks in the case when the\nsequence is also involved in a server-side default for that table, when\nusing :meth:`.MetaData.drop_all`.   The step which processes sequences\nto be dropped via non server-side column default functions is now invoked\nafter the table itself is dropped.\n\nChange-Id: I185f2cc76d2011ad4dd3ba9bde5d8aef0ec335ae\nFixes: #4300",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/532566ba1f28ff8a6afa6eacc10c59eb918501f6",
        "buggy_code": "[\"SEQUENCE\", \"TABLE\"]",
        "fixed_code": "[\"TABLE\", \"SEQUENCE\"]",
        "patch": "@@ -917,7 +917,7 @@ def test_sequence_not_duped(self):\n \n         eq_(\n             re.findall(r'DROP (\\w+)', buf.getvalue()),\n-            [\"SEQUENCE\", \"TABLE\"]\n+            [\"TABLE\", \"SEQUENCE\"]\n         )\n \n "
    },
    {
        "commit_id": "1827af37cfc7494143ae290da435029043af2372",
        "commit_message": "Merge \"fix TypeReflectionTest for sqlite 3.24\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1827af37cfc7494143ae290da435029043af2372",
        "buggy_code": "(\"NOTHING WE KNOW\", sqltypes.NUMERIC()),",
        "fixed_code": "(\"SOMETHING UNKNOWN\", sqltypes.NUMERIC()),",
        "patch": "@@ -1637,7 +1637,7 @@ def _type_affinity_fixture(self):\n             (\"BLOBBER\", sqltypes.NullType()),\n             (\"DOUBLE PRECISION\", sqltypes.REAL()),\n             (\"FLOATY\", sqltypes.REAL()),\n-            (\"NOTHING WE KNOW\", sqltypes.NUMERIC()),\n+            (\"SOMETHING UNKNOWN\", sqltypes.NUMERIC()),\n         ]\n \n     def _fixture_as_string(self, fixture):"
    },
    {
        "commit_id": "40a5d0a4b006780167976b296984eb9790f3df7f",
        "commit_message": "fix TypeReflectionTest for sqlite 3.24\n\nFixed issue in test suite where SQLite 3.24 added a new reserved word that\nconflicted with a usage in TypeReflectionTest.  Pull request courtesy Nils\nPhilippsen.\n\nChange-Id: I396562cecb5ca774f29e9234845bcc6a399fc5cb\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/452",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/40a5d0a4b006780167976b296984eb9790f3df7f",
        "buggy_code": "(\"NOTHING WE KNOW\", sqltypes.NUMERIC()),",
        "fixed_code": "(\"SOMETHING UNKNOWN\", sqltypes.NUMERIC()),",
        "patch": "@@ -1637,7 +1637,7 @@ def _type_affinity_fixture(self):\n             (\"BLOBBER\", sqltypes.NullType()),\n             (\"DOUBLE PRECISION\", sqltypes.REAL()),\n             (\"FLOATY\", sqltypes.REAL()),\n-            (\"NOTHING WE KNOW\", sqltypes.NUMERIC()),\n+            (\"SOMETHING UNKNOWN\", sqltypes.NUMERIC()),\n         ]\n \n     def _fixture_as_string(self, fixture):"
    },
    {
        "commit_id": "cca5482221c0e94955a3d30162e0fe942adf5424",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cca5482221c0e94955a3d30162e0fe942adf5424",
        "buggy_code": "name schemas **other** than ``public`` explicitly within ``Table`` defintitions.",
        "fixed_code": "name schemas **other** than ``public`` explicitly within ``Table`` definitions.",
        "patch": "@@ -126,7 +126,7 @@ def use_identity(element, compiler, **kw):\n ------------------------------------------------------------\n \n **TL;DR;**: keep the ``search_path`` variable set to its default of ``public``,\n-name schemas **other** than ``public`` explicitly within ``Table`` defintitions.\n+name schemas **other** than ``public`` explicitly within ``Table`` definitions.\n \n The PostgreSQL dialect can reflect tables from any schema.  The\n :paramref:`.Table.schema` argument, or alternatively the"
    },
    {
        "commit_id": "a574b409296ef793cec8e1d00f1f7be48f15325e",
        "commit_message": "Add Query.lazy_load_from attribute for sharding\n\nAdded new attribute :attr:`.Query.lazy_loaded_from` which is populated\nwith an :class:`.InstanceState` that is using this :class:`.Query` in\norder to lazy load a relationship.  The rationale for this is that\nit serves as a hint for the horizontal sharding feature to use, such that\nthe identity token of the state can be used as the default identity token\nto use for the query within id_chooser().\n\nAlso repaired an issue in the :meth:`.Result.with_post_criteria`\nmethod added in I899808734458e25a023142c2c5bb37cbed869479\nfor :ticket:`4128` where the \"unbake subquery loaders\" version was calling\nthe post crtieria functions given the :class:`.Result` as the argument\nrather than applying them to the :class:`.Query`.\n\nChange-Id: I3c0919ce7fd151b80fe2f9b5f99f60df31c2d73d\nFixes: #4243",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a574b409296ef793cec8e1d00f1f7be48f15325e",
        "buggy_code": "q = fn(q)",
        "fixed_code": "q = q.with_post_criteria(fn)",
        "patch": "@@ -253,7 +253,7 @@ def _unbake_subquery_loaders(\n             bk._cache_key = cache_key\n             q = bk.for_session(session)\n             for fn in post_criteria:\n-                q = fn(q)\n+                q = q.with_post_criteria(fn)\n             context.attributes[k] = q.params(**params)\n \n "
    },
    {
        "commit_id": "9f7814c8b8edbae03cece6e63ee59c0bfb3140d3",
        "commit_message": "Merge \"Fix string formatting TypeError if tuple is passed\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9f7814c8b8edbae03cece6e63ee59c0bfb3140d3",
        "buggy_code": "\"bound value.\" % element)",
        "fixed_code": "\"bound value.\" % (element, ))",
        "patch": "@@ -4283,7 +4283,7 @@ def _no_literals(element):\n         raise exc.ArgumentError(\"Ambiguous literal: %r.  Use the 'text()' \"\n                                 \"function to indicate a SQL expression \"\n                                 \"literal, or 'literal()' to indicate a \"\n-                                \"bound value.\" % element)\n+                                \"bound value.\" % (element, ))\n     else:\n         return element\n "
    },
    {
        "commit_id": "0b0b58c938c6a38fccc3e0ba59876b3b6b4f8009",
        "commit_message": "Fix string formatting TypeError if tuple is passed\n\nFixed issue where the \"ambiguous literal\" error message used when\ninterpreting literal values as SQL expression values would encounter a\ntuple value, and fail to format the message properly. Pull request courtesy\nMiguel Ventura.\n\nChange-Id: I50d5d32d5f80ec79703a42d4b19b42c2f9701f24\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/442",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0b0b58c938c6a38fccc3e0ba59876b3b6b4f8009",
        "buggy_code": "\"bound value.\" % element)",
        "fixed_code": "\"bound value.\" % (element, ))",
        "patch": "@@ -4283,7 +4283,7 @@ def _no_literals(element):\n         raise exc.ArgumentError(\"Ambiguous literal: %r.  Use the 'text()' \"\n                                 \"function to indicate a SQL expression \"\n                                 \"literal, or 'literal()' to indicate a \"\n-                                \"bound value.\" % element)\n+                                \"bound value.\" % (element, ))\n     else:\n         return element\n "
    },
    {
        "commit_id": "29ce87273e3f66797d87edc9673fd3868e28249a",
        "commit_message": "Default server_version_info to (0, )\n\nFixed a bug in the test suite where if an external dialect returned\n``None`` for ``server_version_info``, the exclusion logic would raise an\n``AttributeError``.\n\nChange-Id: I9124d3ac5484941081127274e6eb71f392fb94f7\nFixes: #4249",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/29ce87273e3f66797d87edc9673fd3868e28249a",
        "buggy_code": "config_obj.db.dialect.server_version_info),",
        "fixed_code": "exclusions._server_version(config_obj.db)),",
        "patch": "@@ -561,7 +561,7 @@ def _do_skips(cls):\n                     config_obj.db.name,\n                     \".\".join(\n                         str(dig) for dig in\n-                        config_obj.db.dialect.server_version_info),\n+                        exclusions._server_version(config_obj.db)),\n                     config_obj.db.driver\n                 )\n               for config_obj in config.Config.all_configs()"
    },
    {
        "commit_id": "b4eb29253cb29a069973503f36d1103d4a18311c",
        "commit_message": "Ensure all visit_sequence accepts **kw args\n\nFixed issue where the compilation of an INSERT statement with the\n\"literal_binds\" option that also uses an explicit sequence and \"inline\"\ngeneration, as on Postgresql and Oracle, would fail to accommodate the\nextra keyword argument within the sequence processing routine.\n\nChange-Id: Ibdab7d340aea7429a210c9535ccf1a3e85f074fb\nFixes: #4231",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4eb29253cb29a069973503f36d1103d4a18311c",
        "buggy_code": "def visit_sequence(self, seq):",
        "fixed_code": "def visit_sequence(self, seq, **kw):",
        "patch": "@@ -291,7 +291,7 @@ def function_argspec(self, func, **kw):\n     def default_from(self):\n         return \" FROM rdb$database\"\n \n-    def visit_sequence(self, seq):\n+    def visit_sequence(self, seq, **kw):\n         return \"gen_id(%s, 1)\" % self.preparer.format_sequence(seq)\n \n     def get_select_precolumns(self, select, **kw):"
    },
    {
        "commit_id": "b4eb29253cb29a069973503f36d1103d4a18311c",
        "commit_message": "Ensure all visit_sequence accepts **kw args\n\nFixed issue where the compilation of an INSERT statement with the\n\"literal_binds\" option that also uses an explicit sequence and \"inline\"\ngeneration, as on Postgresql and Oracle, would fail to accommodate the\nextra keyword argument within the sequence processing routine.\n\nChange-Id: Ibdab7d340aea7429a210c9535ccf1a3e85f074fb\nFixes: #4231",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4eb29253cb29a069973503f36d1103d4a18311c",
        "buggy_code": "def visit_sequence(self, seq):",
        "fixed_code": "def visit_sequence(self, seq, **kw):",
        "patch": "@@ -767,7 +767,7 @@ def visit_binary(binary):\n     def visit_outer_join_column(self, vc, **kw):\n         return self.process(vc.column, **kw) + \"(+)\"\n \n-    def visit_sequence(self, seq):\n+    def visit_sequence(self, seq, **kw):\n         return (self.dialect.identifier_preparer.format_sequence(seq) +\n                 \".nextval\")\n "
    },
    {
        "commit_id": "b4eb29253cb29a069973503f36d1103d4a18311c",
        "commit_message": "Ensure all visit_sequence accepts **kw args\n\nFixed issue where the compilation of an INSERT statement with the\n\"literal_binds\" option that also uses an explicit sequence and \"inline\"\ngeneration, as on Postgresql and Oracle, would fail to accommodate the\nextra keyword argument within the sequence processing routine.\n\nChange-Id: Ibdab7d340aea7429a210c9535ccf1a3e85f074fb\nFixes: #4231",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4eb29253cb29a069973503f36d1103d4a18311c",
        "buggy_code": "def visit_sequence(self, seq):",
        "fixed_code": "def visit_sequence(self, seq, **kw):",
        "patch": "@@ -1489,7 +1489,7 @@ def render_literal_value(self, value, type_):\n             value = value.replace('\\\\', '\\\\\\\\')\n         return value\n \n-    def visit_sequence(self, seq):\n+    def visit_sequence(self, seq, **kw):\n         return \"nextval('%s')\" % self.preparer.format_sequence(seq)\n \n     def limit_clause(self, select, **kw):"
    },
    {
        "commit_id": "b4eb29253cb29a069973503f36d1103d4a18311c",
        "commit_message": "Ensure all visit_sequence accepts **kw args\n\nFixed issue where the compilation of an INSERT statement with the\n\"literal_binds\" option that also uses an explicit sequence and \"inline\"\ngeneration, as on Postgresql and Oracle, would fail to accommodate the\nextra keyword argument within the sequence processing routine.\n\nChange-Id: Ibdab7d340aea7429a210c9535ccf1a3e85f074fb\nFixes: #4231",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4eb29253cb29a069973503f36d1103d4a18311c",
        "buggy_code": "def visit_sequence(self, sequence):",
        "fixed_code": "def visit_sequence(self, sequence, **kw):",
        "patch": "@@ -934,7 +934,7 @@ def visit_function(self, func, add_to_result_map=None, **kwargs):\n     def visit_next_value_func(self, next_value, **kw):\n         return self.visit_sequence(next_value.sequence)\n \n-    def visit_sequence(self, sequence):\n+    def visit_sequence(self, sequence, **kw):\n         raise NotImplementedError(\n             \"Dialect '%s' does not support sequence increments.\" %\n             self.dialect.name"
    },
    {
        "commit_id": "ef2859bbc8bb8104bf4e429a52efb50a712d834a",
        "commit_message": "Track if we're rendering within the CTE recursively\n\nFixed a regression that occurred from the previous fix to :ticket:`4204` in\nversion 1.2.5, where a CTE that refers to itself after the\n:meth:`.CTE.alias` method has been called would not refer to iself\ncorrectly.\n\nChange-Id: Iaa63d65ad2b90c8693f9953fbb32dbb10c73a037\nFixes: #4204",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ef2859bbc8bb8104bf4e429a52efb50a712d834a",
        "buggy_code": "\"UNION ALL SELECT foo.n + :n_1 AS anon_1 FROM t AS foo \"",
        "fixed_code": "\"UNION ALL SELECT foo.n + :n_1 AS anon_1 FROM foo \"",
        "patch": "@@ -509,7 +509,7 @@ def test_aliased_cte_w_union(self):\n         self.assert_compile(\n             cloned,\n             \"WITH RECURSIVE foo(n) AS (SELECT values(:values_1) AS n \"\n-            \"UNION ALL SELECT foo.n + :n_1 AS anon_1 FROM t AS foo \"\n+            \"UNION ALL SELECT foo.n + :n_1 AS anon_1 FROM foo \"\n             \"WHERE foo.n < :n_2) SELECT sum(foo.n) AS sum_1 FROM foo\"\n         )\n "
    },
    {
        "commit_id": "9a13f007e2342def94cc7362eeadd5ec8c988340",
        "commit_message": "Clone _cte_alias instead of assigning \"self\"\n\nFixed bug in :class:.`CTE` construct along the same lines as that of\n:ticket:`4204` where a :class:`.CTE` that was aliased would not copy itself\ncorrectly during a \"clone\" operation as is frequent within the ORM as well\nas when using the :meth:`.ClauseElement.params` method.\n\nChange-Id: Id68d72dd244dedfc7bd6116c9a5123c51a55ea20\nFixes: #4210",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9a13f007e2342def94cc7362eeadd5ec8c988340",
        "buggy_code": "self._cte_alias = self",
        "fixed_code": "self._cte_alias = clone(self._cte_alias, **kw)",
        "patch": "@@ -1391,7 +1391,7 @@ def __init__(self, selectable,\n     def _copy_internals(self, clone=_clone, **kw):\n         super(CTE, self)._copy_internals(clone, **kw)\n         if self._cte_alias is not None:\n-            self._cte_alias = self\n+            self._cte_alias = clone(self._cte_alias, **kw)\n         self._restates = frozenset([\n             clone(elem, **kw) for elem in self._restates\n         ])"
    },
    {
        "commit_id": "d746ea9579238d41c66f173e5c39d561d094f7f8",
        "commit_message": "Allow bind processors to work with expanding IN\n\nFixed bug in new \"expanding IN parameter\" feature where the bind parameter\nprocessors for values wasn't working at all, tests failed to cover this\npretty basic case which includes that ENUM values weren't working.\n\nChange-Id: I8e2420d7229a3e253e43b5227ebb98f9fe0bd14a\nFixes: #4198",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d746ea9579238d41c66f173e5c39d561d094f7f8",
        "buggy_code": "for key in to_update if name in processors",
        "fixed_code": "for key, value in to_update if name in processors",
        "patch": "@@ -766,7 +766,7 @@ def _expand_in_parameters(self, compiled, processors):\n                 compiled_params.update(to_update)\n                 processors.update(\n                     (key, processors[name])\n-                    for key in to_update if name in processors\n+                    for key, value in to_update if name in processors\n                 )\n                 if compiled.positional:\n                     positiontup.extend(name for name, value in to_update)"
    },
    {
        "commit_id": "ea3fd424957620ae6a93b5e65d6a4bc7b4048ab7",
        "commit_message": "- fix formatting\n\nChange-Id: Ic919048462520de8de84174a5e366d6c85316e87",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ea3fd424957620ae6a93b5e65d6a4bc7b4048ab7",
        "buggy_code": "\"\"\"Return a new :class:`.Query` replacing the SELECT list with the",
        "fixed_code": "r\"\"\"Return a new :class:`.Query` replacing the SELECT list with the",
        "patch": "@@ -1281,7 +1281,7 @@ def value(self, column):\n \n     @_generative()\n     def with_entities(self, *entities):\n-        \"\"\"Return a new :class:`.Query` replacing the SELECT list with the\n+        r\"\"\"Return a new :class:`.Query` replacing the SELECT list with the\n         given entities.\n \n         e.g.::"
    },
    {
        "commit_id": "9f657fee5ba66820b9cd6b80653332c07eec0451",
        "commit_message": "Merge \"Check cx_Oracle error code on all exception classes\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9f657fee5ba66820b9cd6b80653332c07eec0451",
        "buggy_code": "return exclusions.skip_if([\"oracle\"])",
        "fixed_code": "return exclusions.open()",
        "patch": "@@ -1006,7 +1006,7 @@ def mssql_freetds(self):\n \n     @property\n     def ad_hoc_engines(self):\n-        return exclusions.skip_if([\"oracle\"])\n+        return exclusions.open()\n \n     @property\n     def no_mssql_freetds(self):"
    },
    {
        "commit_id": "2bc7dfebe6dd708573fcc08b769241b36d675588",
        "commit_message": "Check cx_Oracle error code on all exception classes\n\nFixed bug in cx_Oracle disconnect detection, used by pre_ping and other\nfeatures, where an error could be raised as DatabaseError which includes a\nnumeric error code; previously we weren't checking in this case for a\ndisconnect code.\n\nChange-Id: I359bb5ede25a4726ea632b81af83c6391f405ae1\nFixes: #4182",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2bc7dfebe6dd708573fcc08b769241b36d675588",
        "buggy_code": "return exclusions.skip_if([\"oracle\"])",
        "fixed_code": "return exclusions.open()",
        "patch": "@@ -1002,7 +1002,7 @@ def mssql_freetds(self):\n \n     @property\n     def ad_hoc_engines(self):\n-        return exclusions.skip_if([\"oracle\"])\n+        return exclusions.open()\n \n     @property\n     def no_mssql_freetds(self):"
    },
    {
        "commit_id": "a216625bd03313e85f8063c2c875730e15edc4a4",
        "commit_message": "Limit select in loading for correct types\n\nFixed bug in new \"selectin\" relationship loader where the loader could try\nto load a non-existent relationship when loading a collection of\npolymorphic objects, where only some of the mappers include that\nrelationship, typically when :meth:`.PropComparator.of_type` is being used.\n\nThis generalizes the mapper limiting that was present\nin _load_subclass_via_in() to be part of the PostLoad object\nitself, and is used by both polymorphic selectin loading and\nrelationship selectin loading.\n\nChange-Id: I31416550e27bc8374b673860f57d9dcf96abe87d\nFixes: #4156",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a216625bd03313e85f8063c2c875730e15edc4a4",
        "buggy_code": "context, selectin_path, self.key,",
        "fixed_code": "context, selectin_path, self.parent, self.key,",
        "patch": "@@ -1883,7 +1883,7 @@ def create_row_processor(\n                 return\n \n         loading.PostLoad.callable_for_path(\n-            context, selectin_path, self.key,\n+            context, selectin_path, self.parent, self.key,\n             self._load_for_path, effective_entity)\n \n     @util.dependencies(\"sqlalchemy.ext.baked\")"
    },
    {
        "commit_id": "8759e7d4d675d4b9df2a0e023ffa3e3cfd1663ba",
        "commit_message": "Merge \"Implement an error lookup\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8759e7d4d675d4b9df2a0e023ffa3e3cfd1663ba",
        "buggy_code": "(self.size(), self.overflow(), self._timeout))",
        "fixed_code": "(self.size(), self.overflow(), self._timeout), code=\"3o7r\")",
        "patch": "@@ -1176,7 +1176,7 @@ def _do_get(self):\n                 raise exc.TimeoutError(\n                     \"QueuePool limit of size %d overflow %d reached, \"\n                     \"connection timed out, timeout %d\" %\n-                    (self.size(), self.overflow(), self._timeout))\n+                    (self.size(), self.overflow(), self._timeout), code=\"3o7r\")\n \n         if self._inc_overflow():\n             try:"
    },
    {
        "commit_id": "064f82986ca3573b124fc88518e99d3d43874b61",
        "commit_message": "Implement an error lookup\n\nAdd codes to commonly raised error messages and classes\nthat link back to fixed documentation sections\ngiving background on these messages.\n\nChange-Id: I78d0660add7026bb662e20305a59283b20616954",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/064f82986ca3573b124fc88518e99d3d43874b61",
        "buggy_code": "(self.size(), self.overflow(), self._timeout))",
        "fixed_code": "(self.size(), self.overflow(), self._timeout), code=\"3o7r\")",
        "patch": "@@ -1176,7 +1176,7 @@ def _do_get(self):\n                 raise exc.TimeoutError(\n                     \"QueuePool limit of size %d overflow %d reached, \"\n                     \"connection timed out, timeout %d\" %\n-                    (self.size(), self.overflow(), self._timeout))\n+                    (self.size(), self.overflow(), self._timeout), code=\"3o7r\")\n \n         if self._inc_overflow():\n             try:"
    },
    {
        "commit_id": "e447582b8575eaf165f02864a4b0b977930b3a52",
        "commit_message": "Fix regexp for expanding IN\n\nFixed bug in new \"expanding bind parameter\" feature whereby if multiple\nparams were used in one statement, the regular expression would not\nmatch the parameter name correctly.\n\nChange-Id: Ifaf7d627aac4ead2a13c8dddccb5c515253d88e6\nFixes: #4140",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e447582b8575eaf165f02864a4b0b977930b3a52",
        "buggy_code": "r\"\\[EXPANDING_(.+)\\]\",",
        "fixed_code": "r\"\\[EXPANDING_(\\S+)\\]\",",
        "patch": "@@ -779,7 +779,7 @@ def process_expanding(m):\n             return replacement_expressions.pop(m.group(1))\n \n         self.statement = re.sub(\n-            r\"\\[EXPANDING_(.+)\\]\",\n+            r\"\\[EXPANDING_(\\S+)\\]\",\n             process_expanding,\n             self.statement\n         )"
    },
    {
        "commit_id": "e6b290df2774efbafaea8374b27f72eb712853e9",
        "commit_message": "Fix import in Inspector.reflecttable doc",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e6b290df2774efbafaea8374b27f72eb712853e9",
        "buggy_code": "from sqlalchemy.engine import reflection",
        "fixed_code": "from sqlalchemy.engine.reflection import Inspector",
        "patch": "@@ -561,7 +561,7 @@ def reflecttable(self, table, include_columns, exclude_columns=(),\n         table reflection.  Direct usage is like::\n \n             from sqlalchemy import create_engine, MetaData, Table\n-            from sqlalchemy.engine import reflection\n+            from sqlalchemy.engine.reflection import Inspector\n \n             engine = create_engine('...')\n             meta = MetaData()"
    },
    {
        "commit_id": "5acc9b149a4f7c44b8e7fbe926c0c5de8f13b2c4",
        "commit_message": "Accommodate tuples for ColumnDefault.__repr__\n\nFixed bug where ``__repr__`` of :class:`.ColumnDefault` would fail\nif the argument were a tuple.  Pull request courtesy Nicolas Caniart.\n\nChange-Id: I08aa2448ef91054c43d6068ac54cedbdf7a83d64\nPull-request: https://bitbucket.org/zzzeek/sqlalchemy/pull-requests/1\nFixes: #4126",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5acc9b149a4f7c44b8e7fbe926c0c5de8f13b2c4",
        "buggy_code": "return \"ColumnDefault(%r)\" % self.arg",
        "fixed_code": "return \"ColumnDefault(%r)\" % (self.arg, )",
        "patch": "@@ -2111,7 +2111,7 @@ def _visit_name(self):\n     __visit_name__ = property(_visit_name)\n \n     def __repr__(self):\n-        return \"ColumnDefault(%r)\" % self.arg\n+        return \"ColumnDefault(%r)\" % (self.arg, )\n \n \n class Sequence(DefaultGenerator):"
    },
    {
        "commit_id": "55b511c3960cad636ff1e512594368a36a85ce5c",
        "commit_message": "Merge branch 'patch-1' of https://github.com/pletnes/sqlalchemy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/55b511c3960cad636ff1e512594368a36a85ce5c",
        "buggy_code": "return \"%s(class_=%r,%s)\" % (",
        "fixed_code": "return \"%s(class_=%r, %s)\" % (",
        "patch": "@@ -2944,7 +2944,7 @@ def configure(self, **new_kw):\n         self.kw.update(new_kw)\n \n     def __repr__(self):\n-        return \"%s(class_=%r,%s)\" % (\n+        return \"%s(class_=%r, %s)\" % (\n             self.__class__.__name__,\n             self.class_.__name__,\n             \", \".join(\"%s=%r\" % (k, v) for k, v in self.kw.items())"
    },
    {
        "commit_id": "5abb036e9b9eba0f61cf9617dea2d879c2d5b09c",
        "commit_message": "Don't expire \"deferred\" attributes in make_transient_to_detached\n\nFixed issue where the :func:`.make_transient_to_detached` function\nwould expire all attributes on the target object, including \"deferred\"\nattributes, which has the effect of the attribute being undeferred\nfor the next refesh, causing an unexpected load of the attribute.\n\nChange-Id: I82a385e3033e3f3c31569b1e908efb5f258d0f27\nFixes: #4084",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5abb036e9b9eba0f61cf9617dea2d879c2d5b09c",
        "buggy_code": "state._expire_attributes(state.dict, state.unloaded)",
        "fixed_code": "state._expire_attributes(state.dict, state.unloaded_expirable)",
        "patch": "@@ -3037,7 +3037,7 @@ def make_transient_to_detached(instance):\n     if state._deleted:\n         del state._deleted\n     state._commit_all(state.dict)\n-    state._expire_attributes(state.dict, state.unloaded)\n+    state._expire_attributes(state.dict, state.unloaded_expirable)\n \n \n def object_session(instance):"
    },
    {
        "commit_id": "ac1c19dee7d5ac784a7c913b1555f58d9cd4ec80",
        "commit_message": "Merge branch 'patch-1' of https://github.com/irushchyshyn/sqlalchemy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ac1c19dee7d5ac784a7c913b1555f58d9cd4ec80",
        "buggy_code": "callback_ = kw.pop(\"callback\", None)",
        "fixed_code": "callback_ = kw.pop(\"callback\", None) or kw.pop(\"zeroarg_callback\", None)",
        "patch": "@@ -41,7 +41,7 @@ def options(self, parser, env=os.environ):\n         opt = parser.add_option\n \n         def make_option(name, **kw):\n-            callback_ = kw.pop(\"callback\", None)\n+            callback_ = kw.pop(\"callback\", None) or kw.pop(\"zeroarg_callback\", None)\n             if callback_:\n                 def wrap_(option, opt_str, value, parser):\n                     callback_(opt_str, value, parser)"
    },
    {
        "commit_id": "8e002c87b343a4e7f103cc8aef922b0e63856d29",
        "commit_message": "Fix noseplugin to accept `zeroarg_callback` for `--dbs` option\n\n./sqla_nose.py --dbs  works fine with zero arguments, so `zeroarg_callback` should be treated as `callback`.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8e002c87b343a4e7f103cc8aef922b0e63856d29",
        "buggy_code": "callback_ = kw.pop(\"callback\", None)",
        "fixed_code": "callback_ = kw.pop(\"callback\", None) or kw.pop(\"zeroarg_callback\", None)",
        "patch": "@@ -41,7 +41,7 @@ def options(self, parser, env=os.environ):\n         opt = parser.add_option\n \n         def make_option(name, **kw):\n-            callback_ = kw.pop(\"callback\", None)\n+            callback_ = kw.pop(\"callback\", None) or kw.pop(\"zeroarg_callback\", None)\n             if callback_:\n                 def wrap_(option, opt_str, value, parser):\n                     callback_(opt_str, value, parser)"
    },
    {
        "commit_id": "d0470e296ea589620c94d8f2dd37e94b8f03842a",
        "commit_message": "Use text_type, not unicode\n\nRevise the fix from 03560c4b83308719067ec635662c35f9a437fb7f\nto use compat.text_type for py3k compatibility\n\nChange-Id: Ia6807bd4de3bba4b33b5327a1be7e728b45eb093",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d0470e296ea589620c94d8f2dd37e94b8f03842a",
        "buggy_code": "conn.py_types[quoted_name] = conn.py_types[unicode]",
        "fixed_code": "conn.py_types[quoted_name] = conn.py_types[util.text_type]",
        "patch": "@@ -271,7 +271,7 @@ def on_connect(self):\n         fns = []\n \n         def on_connect(conn):\n-            conn.py_types[quoted_name] = conn.py_types[unicode]\n+            conn.py_types[quoted_name] = conn.py_types[util.text_type]\n         fns.append(on_connect)\n \n         if self.client_encoding is not None:"
    },
    {
        "commit_id": "3f9df2b86b4a8d7912d1190aead4aa084daf802c",
        "commit_message": "Handle cache key for option that has no strategy\n\nFixed regression where the use of a :func:`.undefer_group` option\nin conjunction with a lazy loaded relationship option would cause\nan attribute error, due to a bug in the SQL cache key generation\nadded in 1.2 as part of :ticket:`3954`.\n\nChange-Id: Icd9a34f0b5aa96d6433a2ab9c8d3eaee0006f609\nFixes: #4049",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3f9df2b86b4a8d7912d1190aead4aa084daf802c",
        "buggy_code": "obj.strategy +",
        "fixed_code": "(obj.strategy or ()) +",
        "patch": "@@ -110,7 +110,7 @@ def _generate_cache_key(self, path):\n             serialized.append(\n                 (\n                     tuple(serialized_path) +\n-                    obj.strategy +\n+                    (obj.strategy or ()) +\n                     (tuple([\n                         (key, obj.local_opts[key])\n                         for key in sorted(obj.local_opts)"
    },
    {
        "commit_id": "54cdda032ea59789be15972ed0529f71fd4f0214",
        "commit_message": "- fix one test for STRICT, which may be turned on by default\nin mariadb 10.2.   more mariadb fixes coming\n\nChange-Id: I6e3a94ae7340772663677b1082506adbb2d84a38",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/54cdda032ea59789be15972ed0529f71fd4f0214",
        "buggy_code": "return not row or \"STRICT\" not in row[1]",
        "fixed_code": "return not row or \"STRICT_TRANS_TABLES\" not in row[1]",
        "patch": "@@ -931,7 +931,7 @@ def check(config):\n     def mysql_non_strict(self):\n         def check(config):\n             row = config.db.execute(\"show variables like 'sql_mode'\").first()\n-            return not row or \"STRICT\" not in row[1]\n+            return not row or \"STRICT_TRANS_TABLES\" not in row[1]\n \n         return only_if(check)\n "
    },
    {
        "commit_id": "7d4005156b5a48989dae7c4424faafc03cc8410d",
        "commit_message": "Ensure we check for boolean condition when we inspect __exit__()\n\nFixed issue in testing fixtures which was incompatible with a change\nmade as of Python 3.6.2 involving context managers.\n\nChange-Id: I0f12aa6cc15cba89153f7e4888ac347e7ce599c7\nFixes: #4034",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7d4005156b5a48989dae7c4424faafc03cc8410d",
        "buggy_code": "if raise_ is None:",
        "fixed_code": "if not raise_:",
        "patch": "@@ -161,7 +161,7 @@ def run_as_contextmanager(ctx, fn, *arg, **kw):\n     except:\n         exc_info = sys.exc_info()\n         raise_ = ctx.__exit__(*exc_info)\n-        if raise_ is None:\n+        if not raise_:\n             raise\n         else:\n             return raise_"
    },
    {
        "commit_id": "7628ff39dcea080171f3f8bcbc7153c4c0119857",
        "commit_message": "Check for column object in eval_none, not propkey\n\nFixed bug involving JSON NULL evaluation logic added in 1.1 as part\nof :ticket:`3514` where the logic would not accommodate ORM\nmapped attributes named differently from the :class:`.Column`\nthat was mapped.\n\nChange-Id: I1848afcfb63ad7f074f315d8d3097666069b42be\nFixes: #4031",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7628ff39dcea080171f3f8bcbc7153c4c0119857",
        "buggy_code": "col.key for col in columns",
        "fixed_code": "col for col in columns",
        "patch": "@@ -2020,7 +2020,7 @@ def _insert_cols_evaluating_none(self):\n             (\n                 table,\n                 frozenset(\n-                    col.key for col in columns\n+                    col for col in columns\n                     if col.type.should_evaluate_none\n                 )\n             )"
    },
    {
        "commit_id": "7628ff39dcea080171f3f8bcbc7153c4c0119857",
        "commit_message": "Check for column object in eval_none, not propkey\n\nFixed bug involving JSON NULL evaluation logic added in 1.1 as part\nof :ticket:`3514` where the logic would not accommodate ORM\nmapped attributes named differently from the :class:`.Column`\nthat was mapped.\n\nChange-Id: I1848afcfb63ad7f074f315d8d3097666069b42be\nFixes: #4031",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7628ff39dcea080171f3f8bcbc7153c4c0119857",
        "buggy_code": "if value is None and propkey not in eval_none and not render_nulls:",
        "fixed_code": "if value is None and col not in eval_none and not render_nulls:",
        "patch": "@@ -398,7 +398,7 @@ def _collect_insert_commands(\n         for propkey in set(propkey_to_col).intersection(state_dict):\n             value = state_dict[propkey]\n             col = propkey_to_col[propkey]\n-            if value is None and propkey not in eval_none and not render_nulls:\n+            if value is None and col not in eval_none and not render_nulls:\n                 continue\n             elif not bulk and hasattr(value, '__clause_element__') or \\\n                     isinstance(value, sql.ClauseElement):"
    },
    {
        "commit_id": "b6d3f60791834ead92564fc58afebc2c3eb4a2ff",
        "commit_message": "Parse for Postgresql version w/ \"beta\"\n\nContinuing with the fix that correctly handles Postgresql\nversion string \"10devel\" released in 1.1.8, an additional regexp\nbump to handle version strings of the form \"10beta1\".   While\nPostgresql now offers better ways to get this information, we\nare sticking w/ the regexp at least through 1.1.x for the least\namount of risk to compatibility w/ older or alternate Postgresql\ndatabases.\n\nChange-Id: I12ddb06465f7dcf80563c27632441ef5963f60d4\nFixes: #4005",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b6d3f60791834ead92564fc58afebc2c3eb4a2ff",
        "buggy_code": "r'(\\d+)\\.?(\\d+)?(?:\\.(\\d+))?(?:\\.\\d+)?(?:devel)?',",
        "fixed_code": "r'(\\d+)\\.?(\\d+)?(?:\\.(\\d+))?(?:\\.\\d+)?(?:devel|beta)?',",
        "patch": "@@ -2303,7 +2303,7 @@ def _get_server_version_info(self, connection):\n         v = connection.execute(\"select version()\").scalar()\n         m = re.match(\n             r'.*(?:PostgreSQL|EnterpriseDB) '\n-            r'(\\d+)\\.?(\\d+)?(?:\\.(\\d+))?(?:\\.\\d+)?(?:devel)?',\n+            r'(\\d+)\\.?(\\d+)?(?:\\.(\\d+))?(?:\\.\\d+)?(?:devel|beta)?',\n             v)\n         if not m:\n             raise AssertionError("
    },
    {
        "commit_id": "271a098b642041744dc904b9a6eddbf7f784a554",
        "commit_message": "Merge branch 'patch-1' of https://github.com/UnquietCode/sqlalchemy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/271a098b642041744dc904b9a6eddbf7f784a554",
        "buggy_code": "\"time, such aswithin a load() event.\"",
        "fixed_code": "\"time, such as within a load() event.\"",
        "patch": "@@ -1592,7 +1592,7 @@ def _register_newly_persistent(self, states):\n                         \"that the mapped Column object is configured to \"\n                         \"expect these generated values.  Ensure also that \"\n                         \"this flush() is not occurring at an inappropriate \"\n-                        \"time, such aswithin a load() event.\"\n+                        \"time, such as within a load() event.\"\n                         % state_str(state)\n                     )\n "
    },
    {
        "commit_id": "90c72c31a55337bef61cdd0cb75f5d128bcc34f9",
        "commit_message": "Fix of minor typo in the UnmappedInstanceError message",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/90c72c31a55337bef61cdd0cb75f5d128bcc34f9",
        "buggy_code": "\"instrumentation.  This occurs when the instance\"",
        "fixed_code": "\"instrumentation.  This occurs when the instance \"",
        "patch": "@@ -71,7 +71,7 @@ def __init__(self, base, obj, msg=None):\n                 base.class_mapper(type(obj))\n                 name = _safe_cls_name(type(obj))\n                 msg = (\"Class %r is mapped, but this instance lacks \"\n-                       \"instrumentation.  This occurs when the instance\"\n+                       \"instrumentation.  This occurs when the instance \"\n                        \"is created before sqlalchemy.orm.mapper(%s) \"\n                        \"was called.\" % (name, name))\n             except UnmappedClassError:"
    },
    {
        "commit_id": "7b056709c0f8a37744d18f37d40f94fa30c50c71",
        "commit_message": "Consult compiled paramstyle on execute_compiled\n\nFixed bug where in the unusual case of passing a\n:class:`.Compiled` object directly to :meth:`.Connection.execute`,\nthe dialect with which the :class:`.Compiled` object were generated\nwas not consulted for the paramstyle of the string statement, instead\nassuming it would match the dialect-level paramstyle, causing\nmismatches to occur.\n\nChange-Id: I114e4db2183fbb75bb7c0b0641f5a161855696ee\nFixes: #3938",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7b056709c0f8a37744d18f37d40f94fa30c50c71",
        "buggy_code": "if dialect.positional:",
        "fixed_code": "if compiled.positional:",
        "patch": "@@ -627,7 +627,7 @@ def _init_compiled(cls, dialect, connection, dbapi_connection,\n         # into a dict or list to be sent to the DBAPI's\n         # execute() or executemany() method.\n         parameters = []\n-        if dialect.positional:\n+        if compiled.positional:\n             for compiled_params in self.compiled_parameters:\n                 param = []\n                 for key in self.compiled.positiontup:"
    },
    {
        "commit_id": "3771af0af45c2a7ea79a055b953c32f23c53e256",
        "commit_message": "Fix typos ('expicit' -> 'explicit')",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3771af0af45c2a7ea79a055b953c32f23c53e256",
        "buggy_code": "def test_expicit_sequence(self):",
        "fixed_code": "def test_explicit_sequence(self):",
        "patch": "@@ -328,7 +328,7 @@ def _test_multi(self, stmt, rows, data):\n             data)\n \n     @testing.requires.sequences\n-    def test_expicit_sequence(self):\n+    def test_explicit_sequence(self):\n         t = self._fixture()\n         self._test(\n             t.insert().values("
    },
    {
        "commit_id": "86cf3eb71c3c4d4c9f2e5cdb5059762f8f851ad9",
        "commit_message": "Improve serializer behavior\n\nFix an issue where the Annotated system needs to have a\n__reduce__ method, also see why we can't default to HIGHEST_PROTOCOL.\nThis latter part might not be a good idea until 1.2 for compatibility\nreasons.\n\nChange-Id: I0239e38259fc768c9e3b6c448c29161e271a969c\nFixes: #3918",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/86cf3eb71c3c4d4c9f2e5cdb5059762f8f851ad9",
        "buggy_code": "def dumps(obj, protocol=0):",
        "fixed_code": "def dumps(obj, protocol=pickle.HIGHEST_PROTOCOL):",
        "patch": "@@ -146,7 +146,7 @@ def persistent_load(id):\n     return unpickler\n \n \n-def dumps(obj, protocol=0):\n+def dumps(obj, protocol=pickle.HIGHEST_PROTOCOL):\n     buf = byte_buffer()\n     pickler = Serializer(buf, protocol)\n     pickler.dump(obj)"
    },
    {
        "commit_id": "0cc5561c93899681733b4fb8369fd20ea37a02ac",
        "commit_message": "Merge branch 'fix-example-re' of https://github.com/demoray/sqlalchemy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0cc5561c93899681733b4fb8369fd20ea37a02ac",
        "buggy_code": "return re.sub(r'(?![0-9])', '', value)",
        "fixed_code": "return re.sub(r'\\D', '', value)",
        "patch": "@@ -1812,7 +1812,7 @@ def my_append_listener(target, value, initiator):\n         def validate_phone(target, value, oldvalue, initiator):\n             \"Strip non-numeric characters from a phone number\"\n \n-            return re.sub(r'(?![0-9])', '', value)\n+            return re.sub(r'\\D', '', value)\n \n         # setup listener on UserContact.phone attribute, instructing\n         # it to use the return value"
    },
    {
        "commit_id": "8795472c875d5f424f96a1e19e93d6dd4a7df6a8",
        "commit_message": "Fix typo in documentation",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8795472c875d5f424f96a1e19e93d6dd4a7df6a8",
        "buggy_code": "``fund.sum(UnitPrice.price).label('price')`` column, as it is",
        "fixed_code": "``func.sum(UnitPrice.price).label('price')`` column, as it is",
        "patch": "@@ -636,7 +636,7 @@ class UnitPrice(Base):\n \n      Above, functions on ``aggregated_unit_price`` which refer to\n      ``.price`` will return the\n-     ``fund.sum(UnitPrice.price).label('price')`` column, as it is\n+     ``func.sum(UnitPrice.price).label('price')`` column, as it is\n      matched on the name \"price\".  Ordinarily, the \"price\" function\n      wouldn't have any \"column correspondence\" to the actual\n      ``UnitPrice.price`` column as it is not a proxy of the original."
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -123,7 +123,7 @@ def _get_server_version_info(self, connection):\n         # of what we're doing here\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         # 18 == pyodbc.SQL_DBMS_VER\n         for n in r.split(dbapi_con.getinfo(18)[1]):\n             try:"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -187,7 +187,7 @@ def _get_server_version_info(self, connection):\n         # queries.\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         for n in r.split(dbapi_con.getinfo(self.dbapi.SQL_DBMS_VER)):\n             try:\n                 version.append(int(n))"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "'\\w+-V(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)( \\w+ (\\d+)\\.(\\d+))?', version)",
        "fixed_code": "r'\\w+-V(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)( \\w+ (\\d+)\\.(\\d+))?', version)",
        "patch": "@@ -160,7 +160,7 @@ def _get_server_version_info(self, connection):\n \n     def _parse_version_info(self, version):\n         m = match(\n-            '\\w+-V(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)( \\w+ (\\d+)\\.(\\d+))?', version)\n+            r'\\w+-V(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)( \\w+ (\\d+)\\.(\\d+))?', version)\n         if not m:\n             raise AssertionError(\n                 \"Could not determine version from string '%s'\" % version)"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -5,7 +5,7 @@\n # This module is part of SQLAlchemy and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n-\"\"\"\n+r\"\"\"\n \n .. dialect:: mysql\n     :name: MySQL"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -59,7 +59,7 @@ def dbapi(cls):\n     def _get_server_version_info(self, connection):\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         for n in r.split(dbapi_con.server_version):\n             try:\n                 version.append(int(n))"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -184,7 +184,7 @@ def create_connect_args(self, url):\n     def _get_server_version_info(self, connection):\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         for n in r.split(dbapi_con.get_server_info()):\n             try:\n                 version.append(int(n))"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -223,7 +223,7 @@ def create_connect_args(self, url):\n     def _get_server_version_info(self, connection):\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         for n in r.split(dbapi_con.server_info):\n             try:\n                 version.append(int(n))"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "r = re.compile('[.\\-]')",
        "fixed_code": "r = re.compile(r'[.\\-]')",
        "patch": "@@ -106,7 +106,7 @@ def _extract_error_code(self, exception):\n     def _get_server_version_info(self, connection):\n         dbapi_con = connection.connection\n         version = []\n-        r = re.compile('[.\\-]')\n+        r = re.compile(r'[.\\-]')\n         for n in r.split(dbapi_con.dbversion):\n             try:\n                 version.append(int(n))"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -81,7 +81,7 @@ class ExcludeConstraint(ColumnCollectionConstraint):\n     where = None\n \n     def __init__(self, *elements, **kw):\n-        \"\"\"\n+        r\"\"\"\n         :param \\*elements:\n           A sequence of two tuples of the form ``(column, operator)`` where\n           column must be a column name or Column object and operator must"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Translate url attributes into a dictionary of connection arguments.",
        "fixed_code": "r\"\"\"Translate url attributes into a dictionary of connection arguments.",
        "patch": "@@ -156,7 +156,7 @@ def get_dialect(self):\n         return dialect_cls\n \n     def translate_connect_args(self, names=[], **kw):\n-        \"\"\"Translate url attributes into a dictionary of connection arguments.\n+        r\"\"\"Translate url attributes into a dictionary of connection arguments.\n \n         Returns attributes of this url (`host`, `database`, `username`,\n         `password`, `port`) as a plain dictionary.  The attribute names are"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Return a Python property implementing a view of a target",
        "fixed_code": "r\"\"\"Return a Python property implementing a view of a target",
        "patch": "@@ -22,7 +22,7 @@\n \n \n def association_proxy(target_collection, attr, **kw):\n-    \"\"\"Return a Python property implementing a view of a target\n+    r\"\"\"Return a Python property implementing a view of a target\n     attribute which references an attribute on members of the\n     target.\n "
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Construct a base class for declarative class definitions.",
        "fixed_code": "r\"\"\"Construct a base class for declarative class definitions.",
        "patch": "@@ -250,7 +250,7 @@ def declarative_base(bind=None, metadata=None, mapper=None, cls=object,\n                      name='Base', constructor=_declarative_constructor,\n                      class_registry=None,\n                      metaclass=DeclarativeMeta):\n-    \"\"\"Construct a base class for declarative class definitions.\n+    r\"\"\"Construct a base class for declarative class definitions.\n \n     The new base class will be given a metaclass that produces\n     appropriate :class:`~sqlalchemy.schema.Table` objects and makes"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Construct an AttributeImpl.",
        "fixed_code": "r\"\"\"Construct an AttributeImpl.",
        "patch": "@@ -382,7 +382,7 @@ def __init__(self, class_, key,\n                  parent_token=None, expire_missing=True,\n                  send_modified_events=True,\n                  **kwargs):\n-        \"\"\"Construct an AttributeImpl.\n+        r\"\"\"Construct an AttributeImpl.\n \n         \\class_\n           associated class"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Return a composite column-based property for use with a Mapper.",
        "fixed_code": "r\"\"\"Return a composite column-based property for use with a Mapper.",
        "patch": "@@ -91,7 +91,7 @@ class CompositeProperty(DescriptorProperty):\n     \"\"\"\n \n     def __init__(self, class_, *attrs, **kwargs):\n-        \"\"\"Return a composite column-based property for use with a Mapper.\n+        r\"\"\"Return a composite column-based property for use with a Mapper.\n \n         See the mapping documentation section :ref:`mapper_composite` for a\n         full usage example."
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Provide a column-level property for use with a Mapper.",
        "fixed_code": "r\"\"\"Provide a column-level property for use with a Mapper.",
        "patch": "@@ -42,7 +42,7 @@ class ColumnProperty(StrategizedProperty):\n         '_mapped_by_synonym', '_deferred_column_loader')\n \n     def __init__(self, *columns, **kwargs):\n-        \"\"\"Provide a column-level property for use with a Mapper.\n+        r\"\"\"Provide a column-level property for use with a Mapper.\n \n         Column-based properties can normally be applied to the mapper's\n         ``properties`` dictionary using the :class:`.Column` element directly."
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Return the current :class:`.Session`, creating it",
        "fixed_code": "r\"\"\"Return the current :class:`.Session`, creating it",
        "patch": "@@ -51,7 +51,7 @@ def __init__(self, session_factory, scopefunc=None):\n             self.registry = ThreadLocalRegistry(session_factory)\n \n     def __call__(self, **kw):\n-        \"\"\"Return the current :class:`.Session`, creating it\n+        r\"\"\"Return the current :class:`.Session`, creating it\n         using the :attr:`.scoped_session.session_factory` if not present.\n \n         :param \\**kw: Keyword arguments will be passed to the"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "ensure_kwarg = 'visit_\\w+'",
        "fixed_code": "ensure_kwarg = r'visit_\\w+'",
        "patch": "@@ -281,7 +281,7 @@ def scalar(self, *multiparams, **params):\n class TypeCompiler(util.with_metaclass(util.EnsureKWArgType, object)):\n     \"\"\"Produces DDL specification for TypeEngine objects.\"\"\"\n \n-    ensure_kwarg = 'visit_\\w+'\n+    ensure_kwarg = r'visit_\\w+'\n \n     def __init__(self, dialect):\n         self.dialect = dialect"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Return a callable that will execute this",
        "fixed_code": "r\"\"\"Return a callable that will execute this",
        "patch": "@@ -143,7 +143,7 @@ def against(self, target):\n \n     @_generative\n     def execute_if(self, dialect=None, callable_=None, state=None):\n-        \"\"\"Return a callable that will execute this\n+        r\"\"\"Return a callable that will execute this\n         DDLElement conditionally.\n \n         Used to provide a wrapper for event listening::"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"Operate on an argument.",
        "fixed_code": "r\"\"\"Operate on an argument.",
        "patch": "@@ -159,7 +159,7 @@ def against(other):\n         return against\n \n     def operate(self, op, *other, **kwargs):\n-        \"\"\"Operate on an argument.\n+        r\"\"\"Operate on an argument.\n \n         This is the lowest level of operation, raises\n         :class:`NotImplementedError` by default."
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"\"\"given a list of columns, return a 'reduced' set based on natural",
        "fixed_code": "r\"\"\"given a list of columns, return a 'reduced' set based on natural",
        "patch": "@@ -462,7 +462,7 @@ def splice_joins(left, right, stop_on=None):\n \n \n def reduce_columns(columns, *clauses, **kw):\n-    \"\"\"given a list of columns, return a 'reduced' set based on natural\n+    r\"\"\"given a list of columns, return a 'reduced' set based on natural\n     equivalents.\n \n     the set is reduced to the smallest list of columns which have no natural"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "'''residual at position 36: u?'crapcrapcrap, \"key3\"\\[\\.\\.\\.\\]''',",
        "fixed_code": "r'''residual at position 36: u?'crapcrapcrap, \"key3\"\\[\\.\\.\\.\\]''',",
        "patch": "@@ -1709,7 +1709,7 @@ def test_parse_error(self):\n         assert_raises_message(\n             ValueError,\n             r'''After u?'\\[\\.\\.\\.\\], \"key1\"=>\"value1\", ', could not parse '''\n-            '''residual at position 36: u?'crapcrapcrap, \"key3\"\\[\\.\\.\\.\\]''',\n+            r'''residual at position 36: u?'crapcrapcrap, \"key3\"\\[\\.\\.\\.\\]''',\n             proc,\n             '\"key2\"=>\"value2\", \"key1\"=>\"value1\", '\n             'crapcrapcrap, \"key3\"=>\"value3\"'"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "a_eq(prep(\":this \\:that\"), \"? :that\")",
        "fixed_code": "a_eq(prep(r\":this \\:that\"), \"? :that\")",
        "patch": "@@ -250,7 +250,7 @@ def a_eq(got, wanted):\n \n         a_eq(prep(r'select \\foo'), r'select \\foo')\n         a_eq(prep(r\"time='12\\:30:00'\"), r\"time='12\\:30:00'\")\n-        a_eq(prep(\":this \\:that\"), \"? :that\")\n+        a_eq(prep(r\":this \\:that\"), \"? :that\")\n         a_eq(prep(r\"(\\:that$other)\"), \"(:that$other)\")\n         a_eq(prep(r\".\\:that$ :other.\"), \".:that$ ?.\")\n "
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"smaller than number of columns requested \\(2\\)\"):",
        "fixed_code": "r\"smaller than number of columns requested \\(2\\)\"):",
        "patch": "@@ -1409,7 +1409,7 @@ def test_more_cols_than_sql(self):\n \n         with assertions.expect_warnings(\n                 r\"Number of columns in textual SQL \\(4\\) is \"\n-                \"smaller than number of columns requested \\(2\\)\"):\n+                r\"smaller than number of columns requested \\(2\\)\"):\n             result = testing.db.execute(stmt)\n \n         row = result.first()"
    },
    {
        "commit_id": "fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "commit_message": "Support python3.6\n\nCorrects some warnings and adds tox config.  Adds DeprecationWarning\nto the error category.   Large sweep for string literals w/ backslashes\nas this is common in docstrings\n\nCo-authored-by: Andrii Soldatenko\nFixes: #3886\nChange-Id: Ia7c838dfbbe70b262622ed0803d581edc736e085\nPull-request: https://github.com/zzzeek/sqlalchemy/pull/337",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa6dd376bb24845724287d980a98ea50eb1cfab1",
        "buggy_code": "\"Can't call inserted_primary_key when returning\\(\\) is used.\",",
        "fixed_code": "r\"Can't call inserted_primary_key when returning\\(\\) is used.\",",
        "patch": "@@ -129,7 +129,7 @@ def test_no_ipk_on_returning(self):\n         )\n         assert_raises_message(\n             sa_exc.InvalidRequestError,\n-            \"Can't call inserted_primary_key when returning\\(\\) is used.\",\n+            r\"Can't call inserted_primary_key when returning\\(\\) is used.\",\n             getattr, result, \"inserted_primary_key\"\n         )\n "
    },
    {
        "commit_id": "4fec72f178f0da016301a0d12ad9abe02cc2b62a",
        "commit_message": "Pass **kw to bound params in multi values\n\nFixed bug where literal_binds compiler flag was not honored by the\n:class:`.Insert` construct for the \"multiple values\" feature; the\nsubsequent values are now rendered as literals.\n\nChange-Id: I81ac358fd59995885d482e7571620090210865d2\nFixes: #3880",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4fec72f178f0da016301a0d12ad9abe02cc2b62a",
        "buggy_code": "name=\"%s_m%d\" % (c.key, i + 1)",
        "fixed_code": "name=\"%s_m%d\" % (c.key, i + 1), **kw",
        "patch": "@@ -603,7 +603,7 @@ def _extend_values_for_multiparams(compiler, stmt, values, kw):\n                 c,\n                 (_create_bind_param(\n                     compiler, c, row[c.key],\n-                    name=\"%s_m%d\" % (c.key, i + 1)\n+                    name=\"%s_m%d\" % (c.key, i + 1), **kw\n                 ) if elements._is_literal(row[c.key])\n                     else compiler.process(\n                         row[c.key].self_group(), **kw))"
    },
    {
        "commit_id": "d5bb919aa6d5b9961f85987dfaa58d5999910d15",
        "commit_message": "Call nextval() on sequence when doing INSERT from SELECT\n\nFixed bug where an INSERT from SELECT where the source table contains\nan autoincrementing Sequence would fail to compile correctly.\n\nChange-Id: I41eb9f65789a4007712ae61ed5fa23a9839a5128\nFixes: #3877",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d5bb919aa6d5b9961f85987dfaa58d5999910d15",
        "buggy_code": "values.append((c, proc))",
        "fixed_code": "values.append((c, proc.next_value()))",
        "patch": "@@ -505,7 +505,7 @@ def _append_param_insert_select_hasdefault(\n             (not c.default.optional or\n              not compiler.dialect.sequences_optional):\n             proc = c.default\n-            values.append((c, proc))\n+            values.append((c, proc.next_value()))\n     elif c.default.is_clause_element:\n         proc = c.default.arg.self_group()\n         values.append((c, proc))"
    },
    {
        "commit_id": "910347aef28f662a1f183936624f6f193d87ee6d",
        "commit_message": "Bump \"table compression\" flag to Oracle 10.1\n\n- Fixed bug where the \"COMPRESSION\" keyword was used in the ALL_TABLES\nquery on Oracle 9.2; even though Oracle docs state table compression\nwas introduced in 9i, the actual column is not present until\n10.1.\n\nChange-Id: Iebfa59bfcfdff859169df349a5426137ab006e67\nFixes: #3875",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/910347aef28f662a1f183936624f6f193d87ee6d",
        "buggy_code": "self.server_version_info >= (9, 2, )",
        "fixed_code": "self.server_version_info >= (10, 1, )",
        "patch": "@@ -1026,7 +1026,7 @@ def _is_oracle_8(self):\n     @property\n     def _supports_table_compression(self):\n         return self.server_version_info and \\\n-            self.server_version_info >= (9, 2, )\n+            self.server_version_info >= (10, 1, )\n \n     @property\n     def _supports_table_compress_for(self):"
    },
    {
        "commit_id": "3c0fc9b95f458f608bf10c266e52b2cd919467d5",
        "commit_message": "fix example re such that the listen modifier example works",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c0fc9b95f458f608bf10c266e52b2cd919467d5",
        "buggy_code": "return re.sub(r'(?![0-9])', '', value)",
        "fixed_code": "return re.sub(r'\\D', '', value)",
        "patch": "@@ -1812,7 +1812,7 @@ def my_append_listener(target, value, initiator):\n         def validate_phone(target, value, oldvalue, initiator):\n             \"Strip non-numeric characters from a phone number\"\n \n-            return re.sub(r'(?![0-9])', '', value)\n+            return re.sub(r'\\D', '', value)\n \n         # setup listener on UserContact.phone attribute, instructing\n         # it to use the return value"
    },
    {
        "commit_id": "6a688b736429e27a892bc02111414491fe4103b0",
        "commit_message": "Ensure attribute keys used for bulk update pk set\n\nFixed bug in :meth:`.Session.bulk_update_mappings` where an alternate-named\nprimary key attribute would not track properly into the UPDATE statement.\n\nChange-Id: I33e9140f45827772768fa548adcfeb4dbfc2208d\nFixes: #3849",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6a688b736429e27a892bc02111414491fe4103b0",
        "buggy_code": "intersection(mapper._pk_keys_by_table[table])",
        "fixed_code": "intersection(mapper._pk_attr_keys_by_table[table])",
        "patch": "@@ -522,7 +522,7 @@ def _collect_update_commands(\n                 (propkey_to_col[propkey]._label, state_dict.get(propkey))\n                 for propkey in\n                 set(propkey_to_col).\n-                intersection(mapper._pk_keys_by_table[table])\n+                intersection(mapper._pk_attr_keys_by_table[table])\n             )\n         else:\n             pk_params = {}"
    },
    {
        "commit_id": "25804aeae262fa01256dbd2f045ad4a380644f66",
        "commit_message": "Repair foreign_keys population for Join._refresh_for_new_column\n\nFixed bug where setting up a single-table inh subclass of a joined-table\nsubclass which included an extra column would corrupt the foreign keys\ncollection of the mapped table, thereby interfering with the\ninitialization of relationships.\n\nChange-Id: I04a0cf98fd456d12d5a5b9e77a46a01246969a63\nFixes: #3797",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/25804aeae262fa01256dbd2f045ad4a380644f66",
        "buggy_code": "self.foreign_keys.add(col)",
        "fixed_code": "self.foreign_keys.update(col.foreign_keys)",
        "patch": "@@ -905,7 +905,7 @@ def _refresh_for_new_column(self, column):\n         if col is not None:\n             if self._cols_populated:\n                 self._columns[col._label] = col\n-                self.foreign_keys.add(col)\n+                self.foreign_keys.update(col.foreign_keys)\n                 if col.primary_key:\n                     self.primary_key.add(col)\n                 return col"
    },
    {
        "commit_id": "ce577d48449588d3e5395c08c7f4d04cb8bb325f",
        "commit_message": "Repair clauselist comparison to account for clause ordering\n\nFixed bug where the \"simple many-to-one\" condition that allows  lazy\nloading to use get() from identity map would fail to be  invoked if the\nprimaryjoin of the relationship had multiple clauses separated by AND\nwhich were not in the same order as that of the primary key columns\nbeing compared in each clause. This ordering\ndifference occurs for a composite foreign key where the table-bound\ncolumns on the referencing side were not in the same order in the .c\ncollection as the primary key columns on the referenced side....which\nin turn occurs a lot if one is using declarative mixins and/or\ndeclared_attr to set up columns.\n\nChange-Id: I66cce74f614c04ed693dc0d58ac8c952b2f8ae54\nFixes: #3788",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ce577d48449588d3e5395c08c7f4d04cb8bb325f",
        "buggy_code": "in_, not_in_, eq_ignore_whitespace, eq_regex",
        "fixed_code": "in_, not_in_, eq_ignore_whitespace, eq_regex, is_true, is_false",
        "patch": "@@ -22,7 +22,7 @@ def against(*queries):\n     eq_, ne_, le_, is_, is_not_, startswith_, assert_raises, \\\n     assert_raises_message, AssertsCompiledSQL, ComparesTables, \\\n     AssertsExecutionResults, expect_deprecated, expect_warnings, \\\n-    in_, not_in_, eq_ignore_whitespace, eq_regex\n+    in_, not_in_, eq_ignore_whitespace, eq_regex, is_true, is_false\n \n from .util import run_as_contextmanager, rowset, fail, \\\n     provide_metadata, adict, force_drop_names, \\"
    },
    {
        "commit_id": "2b0fa0f8a190a65aea5a284e4f7d0a22488ae560",
        "commit_message": "Fix table reference in PostgreSQL documentation",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2b0fa0f8a190a65aea5a284e4f7d0a22488ae560",
        "buggy_code": "Index('my_index', my_table.c.id, postgresql_where=tbl.c.value > 10)",
        "fixed_code": "Index('my_index', my_table.c.id, postgresql_where=my_table.c.value > 10)",
        "patch": "@@ -554,7 +554,7 @@\n applied to a subset of rows.   These can be specified on :class:`.Index`\n using the ``postgresql_where`` keyword argument::\n \n-  Index('my_index', my_table.c.id, postgresql_where=tbl.c.value > 10)\n+  Index('my_index', my_table.c.id, postgresql_where=my_table.c.value > 10)\n \n Operator Classes\n ^^^^^^^^^^^^^^^^^"
    },
    {
        "commit_id": "b07eb3cb45d1a344759a2eee9d2166fbf3e44888",
        "commit_message": "Ensure final link in subqueryload join is correct\n\nFixed bug in subquery eager loading where a subqueryload\nof an \"of_type()\" object linked to a second subqueryload of a plain\nmapped class would fail to link the joins correctly.\n\nChange-Id: I4be89e6f5e492438464a2ded01eb9c84d7ff7d4e\nFixes: #3773",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b07eb3cb45d1a344759a2eee9d2166fbf3e44888",
        "buggy_code": "if last and effective_entity is not self.mapper:",
        "fixed_code": "if last:",
        "patch": "@@ -968,7 +968,7 @@ def _apply_joins(\n                 if last and effective_entity is not self.mapper:\n                     attr = attr.of_type(effective_entity)\n             else:\n-                if last and effective_entity is not self.mapper:\n+                if last:\n                     attr = getattr(parent_alias, key).\\\n                         of_type(effective_entity)\n                 else:"
    },
    {
        "commit_id": "924a47fc4fd0012bad151af5a99e5faea41bad8b",
        "commit_message": "Fix reference to _declarative_constructor in docstring",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/924a47fc4fd0012bad151af5a99e5faea41bad8b",
        "buggy_code": ":func:`~sqlalchemy.ext.declarative._declarative_constructor`, an",
        "fixed_code": ":func:`~sqlalchemy.ext.declarative.base._declarative_constructor`, an",
        "patch": "@@ -283,7 +283,7 @@ def declarative_base(bind=None, metadata=None, mapper=None, cls=object,\n \n     :param constructor:\n       Defaults to\n-      :func:`~sqlalchemy.ext.declarative._declarative_constructor`, an\n+      :func:`~sqlalchemy.ext.declarative.base._declarative_constructor`, an\n       __init__ implementation that assigns \\**kwargs for declared\n       fields and relationships to an instance.  If ``None`` is supplied,\n       no __init__ will be provided and construction will fall back to"
    },
    {
        "commit_id": "6b6bdb354252830a1a099c92cb98064337240a1a",
        "commit_message": "- fix typo\n\nChange-Id: Ie66d419a5188529a64fcb2e2463c15c26863889f",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6b6bdb354252830a1a099c92cb98064337240a1a",
        "buggy_code": "..versionadded:: 0.8.2",
        "fixed_code": ".. versionadded:: 0.8.2",
        "patch": "@@ -793,7 +793,7 @@ def __init__(self, *args, **kwargs):\n     return an empty tuple, in which case no values will be coerced to\n     constants.\n \n-    ..versionadded:: 0.8.2\n+    .. versionadded:: 0.8.2\n         Added :attr:`.TypeDecorator.coerce_to_is_types` to allow for easier\n         control of ``__eq__()`` ``__ne__()`` operations.\n "
    },
    {
        "commit_id": "5c60aaefd32a7bdee611fb340911409e0b8223ed",
        "commit_message": "Preserve type for math negation\n\nFixed issue in SQL math negation operator where the type of the\nexpression would no longer be the numeric type of the original.\nThis would cause issues where the type determined result set\nbehaviors.\n\nChange-Id: If0e339614a3686e251235fc94b6f59310c4630a5\nFixes: #3735",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5c60aaefd32a7bdee611fb340911409e0b8223ed",
        "buggy_code": "return UnaryExpression(expr, operator=operators.neg)",
        "fixed_code": "return UnaryExpression(expr, operator=operators.neg, type_=expr.type)",
        "patch": "@@ -192,7 +192,7 @@ def _inv_impl(expr, op, **kw):\n \n def _neg_impl(expr, op, **kw):\n     \"\"\"See :meth:`.ColumnOperators.__neg__`.\"\"\"\n-    return UnaryExpression(expr, operator=operators.neg)\n+    return UnaryExpression(expr, operator=operators.neg, type_=expr.type)\n \n \n def _match_impl(expr, op, other, **kw):"
    },
    {
        "commit_id": "ff71283e535b078b294f05e056f01f354c08ccdb",
        "commit_message": "Fix typo in config result.py docs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ff71283e535b078b294f05e056f01f354c08ccdb",
        "buggy_code": "to the statement execution, if one is stil present.  Note that the",
        "fixed_code": "to the statement execution, if one is still present.  Note that the",
        "patch": "@@ -829,7 +829,7 @@ def close(self):\n         \"\"\"Close this ResultProxy.\n \n         This closes out the underlying DBAPI cursor corresonding\n-        to the statement execution, if one is stil present.  Note that the\n+        to the statement execution, if one is still present.  Note that the\n         DBAPI cursor is automatically released when the :class:`.ResultProxy`\n         exhausts all available rows.  :meth:`.ResultProxy.close` is generally\n         an optional method except in the case when discarding a"
    },
    {
        "commit_id": "9bdd6f2b1f6b34a82b77849ec05811aa0279931d",
        "commit_message": "Repair _orm_columns() to accommodate text()\n\nFixed bug whereby passing a :func:`.text` construct to the\n:meth:`.Query.group_by` method would raise an error, instead\nof intepreting the object as a SQL fragment.\n\nChange-Id: I5fc2f590b76508d52e23b5fa9cf037ddea8080c3\nfixes: #3706",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9bdd6f2b1f6b34a82b77849ec05811aa0279931d",
        "buggy_code": "if hasattr(insp, 'selectable'):",
        "fixed_code": "if hasattr(insp, 'selectable') and hasattr(insp.selectable, 'c'):",
        "patch": "@@ -344,7 +344,7 @@ def _attr_as_key(attr):\n \n def _orm_columns(entity):\n     insp = inspection.inspect(entity, False)\n-    if hasattr(insp, 'selectable'):\n+    if hasattr(insp, 'selectable') and hasattr(insp.selectable, 'c'):\n         return [c for c in insp.selectable.c]\n     else:\n         return [entity]"
    },
    {
        "commit_id": "9a3c9ba7beb18dfd6232deb895528ea8593a12b0",
        "commit_message": "Fix pymssql sample URL\n\nA slash is required before building out the query string portion.\n\nChange-Id: Ie97fd3d07047d78e17cbaffed4ff54960a2b956e\nFixes: #3696\n(cherry picked from commit 83a9e6e1fac276090e60136aa4e9234ae23bc25a)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9a3c9ba7beb18dfd6232deb895528ea8593a12b0",
        "buggy_code": ":connectstring: mssql+pymssql://<username>:<password>@<freetds_name>?\\",
        "fixed_code": ":connectstring: mssql+pymssql://<username>:<password>@<freetds_name>/?\\",
        "patch": "@@ -9,7 +9,7 @@\n .. dialect:: mssql+pymssql\n     :name: pymssql\n     :dbapi: pymssql\n-    :connectstring: mssql+pymssql://<username>:<password>@<freetds_name>?\\\n+    :connectstring: mssql+pymssql://<username>:<password>@<freetds_name>/?\\\n charset=utf8\n     :url: http://pymssql.org/\n "
    },
    {
        "commit_id": "c8db0862c102281da617d395b1826ff523af302e",
        "commit_message": "Fix typo from \"addreses\" to \"addresses\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8db0862c102281da617d395b1826ff523af302e",
        "buggy_code": "subqueryload(\"addreses\").load_only(\"email_address\")",
        "fixed_code": "subqueryload(\"addresses\").load_only(\"email_address\")",
        "patch": "@@ -615,7 +615,7 @@ def load_only(loadopt, *attrs):\n     ``Address`` object load only the ``email_address`` attribute::\n \n         session.query(User).options(\n-                subqueryload(\"addreses\").load_only(\"email_address\")\n+                subqueryload(\"addresses\").load_only(\"email_address\")\n         )\n \n     For a :class:`.Query` that has multiple entities, the lead entity can be"
    },
    {
        "commit_id": "b1c9b3bd384fc40e1c411abef12eaf04b574612f",
        "commit_message": "Fix some broken links in docs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b1c9b3bd384fc40e1c411abef12eaf04b574612f",
        "buggy_code": "<http://www.sqlalchemy.org/trac/wiki/FAQ#HowcanIgettheCREATETABLEDROPTABLEoutputasastring>`_.",
        "fixed_code": "<http://docs.sqlalchemy.org/en/latest/faq/metadata_schema.html#how-can-i-get-the-create-table-drop-table-output-as-a-string>`_.",
        "patch": "@@ -374,7 +374,7 @@ def create_engine(*args, **kwargs):\n         * the ``mock`` strategy, which dispatches all statement\n           execution to a function passed as the argument ``executor``.\n           See `example in the FAQ\n-          <http://www.sqlalchemy.org/trac/wiki/FAQ#HowcanIgettheCREATETABLEDROPTABLEoutputasastring>`_.\n+          <http://docs.sqlalchemy.org/en/latest/faq/metadata_schema.html#how-can-i-get-the-create-table-drop-table-output-as-a-string>`_.\n \n     :param executor=None: a function taking arguments\n         ``(sql, *multiparams, **params)``, to which the ``mock`` strategy will"
    },
    {
        "commit_id": "e3abb63293be80379d20b4c3f0d1cd093459a9eb",
        "commit_message": "ReST fix: missing backtick\n\nFixes a misrendering at http://docs.sqlalchemy.org/en/latest/dialects/mssql.html#nullability:",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3abb63293be80379d20b4c3f0d1cd093459a9eb",
        "buggy_code": "``NULL` or ``NOT NULL`` respectively.",
        "fixed_code": "``NULL`` or ``NOT NULL`` respectively.",
        "patch": "@@ -255,7 +255,7 @@\n     name VARCHAR(20)\n \n If ``nullable`` is ``True`` or ``False`` then the column will be\n-``NULL` or ``NOT NULL`` respectively.\n+``NULL`` or ``NOT NULL`` respectively.\n \n Date / Time Handling\n --------------------"
    },
    {
        "commit_id": "2965da0a5d89119787bd45ac6f5459a7b755656d",
        "commit_message": "- handle parameter sets that aren't correctly formed, so that\nfor example an exception object made within a test suite can\nstill repr (error seen in Keystone)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2965da0a5d89119787bd45ac6f5459a7b755656d",
        "buggy_code": "assert False, \"Unknown parameter type %s\" % (type(self.params), )",
        "fixed_code": "return self.trunc(self.params)",
        "patch": "@@ -345,7 +345,7 @@ def __repr__(self):\n             typ = self._DICT\n             ismulti = False\n         else:\n-            assert False, \"Unknown parameter type %s\" % (type(self.params), )\n+            return self.trunc(self.params)\n \n         if ismulti and len(self.params) > self.batches:\n             msg = \" ... displaying %i of %i total bound parameter sets ... \""
    },
    {
        "commit_id": "2965da0a5d89119787bd45ac6f5459a7b755656d",
        "commit_message": "- handle parameter sets that aren't correctly formed, so that\nfor example an exception object made within a test suite can\nstill repr (error seen in Keystone)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2965da0a5d89119787bd45ac6f5459a7b755656d",
        "buggy_code": "in_, not_in_, eq_ignore_whitespace",
        "fixed_code": "in_, not_in_, eq_ignore_whitespace, eq_regex",
        "patch": "@@ -22,7 +22,7 @@ def against(*queries):\n     eq_, ne_, le_, is_, is_not_, startswith_, assert_raises, \\\n     assert_raises_message, AssertsCompiledSQL, ComparesTables, \\\n     AssertsExecutionResults, expect_deprecated, expect_warnings, \\\n-    in_, not_in_, eq_ignore_whitespace\n+    in_, not_in_, eq_ignore_whitespace, eq_regex\n \n from .util import run_as_contextmanager, rowset, fail, \\\n     provide_metadata, adict, force_drop_names, \\"
    },
    {
        "commit_id": "c9b03fa8afd52646aba8c59fc038330eeee6db60",
        "commit_message": "fix passing literal_binds flag through for update and insert",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c9b03fa8afd52646aba8c59fc038330eeee6db60",
        "buggy_code": "t = self.process(update_stmt._whereclause)",
        "fixed_code": "t = self.process(update_stmt._whereclause, **kw)",
        "patch": "@@ -2045,7 +2045,7 @@ def visit_update(self, update_stmt, **kw):\n                 text += \" \" + extra_from_text\n \n         if update_stmt._whereclause is not None:\n-            t = self.process(update_stmt._whereclause)\n+            t = self.process(update_stmt._whereclause, **kw)\n             if t:\n                 text += \" WHERE \" + t\n "
    },
    {
        "commit_id": "a2badb751f09299c925bd96a9fd2e76acca04269",
        "commit_message": "Fix ArrayOfEnum's handling of empty arrays.\n\nPrior to this change a value of `'{}'` would split into the list `['']`.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a2badb751f09299c925bd96a9fd2e76acca04269",
        "buggy_code": "return inner.split(\",\")",
        "fixed_code": "return inner.split(\",\") if inner else []",
        "patch": "@@ -579,7 +579,7 @@ def result_processor(self, dialect, coltype):\n \n             def handle_raw_string(value):\n                 inner = re.match(r\"^{(.*)}$\", value).group(1)\n-                return inner.split(\",\")\n+                return inner.split(\",\") if inner else []\n \n             def process(value):\n                 if value is None:"
    },
    {
        "commit_id": "39837686b068a6e7016169f31a96a058546e4bdd",
        "commit_message": "- calling str() on a core sql construct has been made more \"friendly\",\nwhen the construct contains non-standard sql elements such as\nreturning, array index operations, or dialect-specific or custom\ndatatypes.  a string is now returned in these cases rendering an\napproximation of the construct (typically the postgresql-style\nversion of it) rather than raising an error. fixes #3631\n- add within_group to top-level imports\n- add eq_ignore_whitespace to sqlalchemy.testing imports",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/39837686b068a6e7016169f31a96a058546e4bdd",
        "buggy_code": "dialect = default.DefaultDialect()",
        "fixed_code": "dialect = default.StrCompileDialect()",
        "patch": "@@ -429,7 +429,7 @@ def compile(self, default, bind=None, dialect=None, **kw):\n                 dialect = self.bind.dialect\n                 bind = self.bind\n             else:\n-                dialect = default.DefaultDialect()\n+                dialect = default.StrCompileDialect()\n         return self._compiler(dialect, bind=bind, **kw)\n \n     def _compiler(self, dialect, **kw):"
    },
    {
        "commit_id": "39837686b068a6e7016169f31a96a058546e4bdd",
        "commit_message": "- calling str() on a core sql construct has been made more \"friendly\",\nwhen the construct contains non-standard sql elements such as\nreturning, array index operations, or dialect-specific or custom\ndatatypes.  a string is now returned in these cases rendering an\napproximation of the construct (typically the postgresql-style\nversion of it) rather than raising an error. fixes #3631\n- add within_group to top-level imports\n- add eq_ignore_whitespace to sqlalchemy.testing imports",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/39837686b068a6e7016169f31a96a058546e4bdd",
        "buggy_code": "in_, not_in_",
        "fixed_code": "in_, not_in_, eq_ignore_whitespace",
        "patch": "@@ -22,7 +22,7 @@ def against(*queries):\n     eq_, ne_, le_, is_, is_not_, startswith_, assert_raises, \\\n     assert_raises_message, AssertsCompiledSQL, ComparesTables, \\\n     AssertsExecutionResults, expect_deprecated, expect_warnings, \\\n-    in_, not_in_\n+    in_, not_in_, eq_ignore_whitespace\n \n from .util import run_as_contextmanager, rowset, fail, \\\n     provide_metadata, adict, force_drop_names, \\"
    },
    {
        "commit_id": "0ff3f95d5b41335c977e1bdbe88b7dfd4ae581e1",
        "commit_message": "- there was a DATEPART test after all, fix format",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0ff3f95d5b41335c977e1bdbe88b7dfd4ae581e1",
        "buggy_code": "'SELECT DATEPART(\"%s\", t.col1) AS anon_1 FROM t' % field)",
        "fixed_code": "'SELECT DATEPART(%s, t.col1) AS anon_1 FROM t' % field)",
        "patch": "@@ -383,7 +383,7 @@ def test_extract(self):\n         for field in 'day', 'month', 'year':\n             self.assert_compile(\n                 select([extract(field, t.c.col1)]),\n-                'SELECT DATEPART(\"%s\", t.col1) AS anon_1 FROM t' % field)\n+                'SELECT DATEPART(%s, t.col1) AS anon_1 FROM t' % field)\n \n     def test_update_returning(self):\n         table1 = table("
    },
    {
        "commit_id": "d03477d4b761132f44c48417be09d622ad9adfd3",
        "commit_message": "- fix link to types in metadata, fixes #3618\n- fix \"version\" got whacked into \"f\" in core tutorial\n- fix short underline in automap\n- fix unmatched boldface in session events",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d03477d4b761132f44c48417be09d622ad9adfd3",
        "buggy_code": "============================",
        "fixed_code": "=============================",
        "patch": "@@ -112,7 +112,7 @@\n         Base.classes.user_order\n \n Specifying Classes Explicitly\n-============================\n+=============================\n \n The :mod:`.sqlalchemy.ext.automap` extension allows classes to be defined\n explicitly, in a way similar to that of the :class:`.DeferredReflection` class."
    },
    {
        "commit_id": "26ed90ab22dde7bdafe933cb1d16acfe70c1ab78",
        "commit_message": "- Fixed bug where :meth:`.Session.bulk_update_mappings` and related\nwould not bump a version id counter when in use.  The experience\nhere is still a little rough as the original version id is required\nin the given dictionaries and there's not clean error reporting\non that yet.\nfixes #3610",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/26ed90ab22dde7bdafe933cb1d16acfe70c1ab78",
        "buggy_code": "if col.key not in params and \\",
        "fixed_code": "if (bulk or col.key not in params) and \\",
        "patch": "@@ -492,7 +492,7 @@ def _collect_update_commands(\n             col = mapper.version_id_col\n             params[col._label] = update_version_id\n \n-            if col.key not in params and \\\n+            if (bulk or col.key not in params) and \\\n                     mapper.version_id_generator is not False:\n                 val = mapper.version_id_generator(update_version_id)\n                 params[col.key] = val"
    },
    {
        "commit_id": "7e6f3312333d09a051d01509d8c423708d3fbca3",
        "commit_message": "fix some typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e6f3312333d09a051d01509d8c423708d3fbca3",
        "buggy_code": "u1.addresess = [a2, a3]  #  <- new collection",
        "fixed_code": "u1.addresses = [a2, a3]  #  <- new collection",
        "patch": "@@ -1950,7 +1950,7 @@ def init_collection(self, target, collection, collection_adapter):\n \n         and also during replace operations::\n \n-            u1.addresess = [a2, a3]  #  <- new collection\n+            u1.addresses = [a2, a3]  #  <- new collection\n \n         :param target: the object instance receiving the event.\n          If the listener is registered with ``raw=True``, this will"
    },
    {
        "commit_id": "7e6f3312333d09a051d01509d8c423708d3fbca3",
        "commit_message": "fix some typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e6f3312333d09a051d01509d8c423708d3fbca3",
        "buggy_code": "The initial value of this dictioanry can be populated using the",
        "fixed_code": "The initial value of this dictionary can be populated using the",
        "patch": "@@ -694,7 +694,7 @@ def __init__(self, bind=None, autoflush=True, expire_on_commit=True,\n     def info(self):\n         \"\"\"A user-modifiable dictionary.\n \n-        The initial value of this dictioanry can be populated using the\n+        The initial value of this dictionary can be populated using the\n         ``info`` argument to the :class:`.Session` constructor or\n         :class:`.sessionmaker` constructor or factory methods.  The dictionary\n         here is always local to this :class:`.Session` and can be modified"
    },
    {
        "commit_id": "7df4054b04ed54504be2c2ab8a83721748130780",
        "commit_message": "- make this DROP conditional, attempting to isolate why jenkins has\nan issue with just one test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7df4054b04ed54504be2c2ab8a83721748130780",
        "buggy_code": "DDL(\"DROP VIEW mysql_types_v\")",
        "fixed_code": "DDL(\"DROP VIEW IF EXISTS mysql_types_v\")",
        "patch": "@@ -37,7 +37,7 @@ def _run_test(self, specs, attributes):\n             )\n             event.listen(\n                 m, 'before_drop',\n-                DDL(\"DROP VIEW mysql_types_v\")\n+                DDL(\"DROP VIEW IF EXISTS mysql_types_v\")\n             )\n         m.create_all()\n "
    },
    {
        "commit_id": "9695faf32981406b12a6468b98d5c9b673f8e219",
        "commit_message": "- Fixed bug where CREATE TABLE with a no-column table, but a constraint\nsuch as a CHECK constraint would render an erroneous comma in the\ndefinition; this scenario can occur such as with a Postgresql\nINHERITS table that has no columns of its own.\nfixes #3598",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9695faf32981406b12a6468b98d5c9b673f8e219",
        "buggy_code": "text += \", \\n\\t\" + const",
        "fixed_code": "text += separator + \"\\t\" + const",
        "patch": "@@ -2163,7 +2163,7 @@ def visit_create_table(self, create):\n             table, _include_foreign_key_constraints=  # noqa\n                 create.include_foreign_key_constraints)\n         if const:\n-            text += \", \\n\\t\" + const\n+            text += separator + \"\\t\" + const\n \n         text += \"\\n)%s\\n\\n\" % self.post_create_table(table)\n         return text"
    },
    {
        "commit_id": "d9178320d6755d893638646503ed538b11b6536a",
        "commit_message": "Fix _assert_unorderable_types on py36.\n\nThe error message changed to:\n\n`'<' not supported between instances of 'foo' and 'bar'`",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d9178320d6755d893638646503ed538b11b6536a",
        "buggy_code": "threading, py3k, py33, py2k, jython, pypy, cpython, win32, \\",
        "fixed_code": "threading, py3k, py33, py36, py2k, jython, pypy, cpython, win32, \\",
        "patch": "@@ -6,7 +6,7 @@\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n from .compat import callable, cmp, reduce,  \\\n-    threading, py3k, py33, py2k, jython, pypy, cpython, win32, \\\n+    threading, py3k, py33, py36, py2k, jython, pypy, cpython, win32, \\\n     pickle, dottedgetter, parse_qsl, namedtuple, next, reraise, \\\n     raise_from_cause, text_type, safe_kwarg, string_types, int_types, \\\n     binary_type, nested, \\"
    },
    {
        "commit_id": "0921a6abbc8246c57f447af7a6ac240778127fae",
        "commit_message": "fix postgresql exclude contraint to check when= against None rather than __bool__ eval",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0921a6abbc8246c57f447af7a6ac240778127fae",
        "buggy_code": "if where:",
        "fixed_code": "if where is not None:",
        "patch": "@@ -142,7 +142,7 @@ def __init__(self, *elements, **kw):\n         )\n         self.using = kw.get('using', 'gist')\n         where = kw.get('where')\n-        if where:\n+        if where is not None:\n             self.where = expression._literal_as_text(where)\n \n     def copy(self, **kw):"
    },
    {
        "commit_id": "a6fe4dc0c8ebc346a90dd849a86dac9345d74515",
        "commit_message": "- A rare case which occurs when a :meth:`.Session.rollback` fails in the\nscope of a :meth:`.Session.flush` operation that's raising an\nexception, as has been observed in some MySQL SAVEPOINT cases, prevents\nthe original  database exception from being observed when it was\nemitted during  flush, but only on Py2K because Py2K does not support\nexception  chaining; on Py3K the originating exception is chained.  As\na workaround, a warning is emitted in this specific case showing at\nleast the string message of the original database error before we\nproceed to raise  the rollback-originating exception.\nfixes #2696",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a6fe4dc0c8ebc346a90dd849a86dac9345d74515",
        "buggy_code": "filters = [re.compile(msg, re.I) for msg in messages]",
        "fixed_code": "filters = [re.compile(msg, re.I | re.S) for msg in messages]",
        "patch": "@@ -121,7 +121,7 @@ def decorate(fn, *args, **kw):\n def _expect_warnings(exc_cls, messages, regex=True, assert_=True):\n \n     if regex:\n-        filters = [re.compile(msg, re.I) for msg in messages]\n+        filters = [re.compile(msg, re.I | re.S) for msg in messages]\n     else:\n         filters = messages\n "
    },
    {
        "commit_id": "33c378f768c699f3590f168f6c3c86448239268c",
        "commit_message": "- Fixed bug where the \"single table inheritance\" criteria would be\nadded onto the end of a query in some inappropriate situations, such\nas when querying from an exists() of a single-inheritance subclass.\n\nfixes #3582",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/33c378f768c699f3590f168f6c3c86448239268c",
        "buggy_code": "elem for elem in visitors.iterate(column, {})",
        "fixed_code": "elem for elem in sql_util.surface_column_elements(column)",
        "patch": "@@ -3676,7 +3676,7 @@ def __init__(self, query, column, namespace=None):\n             self._from_entities = set(self.entities)\n         else:\n             all_elements = [\n-                elem for elem in visitors.iterate(column, {})\n+                elem for elem in sql_util.surface_column_elements(column)\n                 if 'parententity' in elem._annotations\n             ]\n "
    },
    {
        "commit_id": "887edc431a4c5198bb4f842419d729aed42a6ce8",
        "commit_message": "fix typo: Explcitly -> Explicitly",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/887edc431a4c5198bb4f842419d729aed42a6ce8",
        "buggy_code": "Specifying Classes Explcitly",
        "fixed_code": "Specifying Classes Explicitly",
        "patch": "@@ -111,7 +111,7 @@\n     User, Address, Order = Base.classes.user, Base.classes.address,\\\n         Base.classes.user_order\n \n-Specifying Classes Explcitly\n+Specifying Classes Explicitly\n ============================\n \n The :mod:`.sqlalchemy.ext.automap` extension allows classes to be defined"
    },
    {
        "commit_id": "7393ee8d4f20e84240623bb180681742813dd178",
        "commit_message": "- bzzt, fix the base _post_configure_engine() call to not fail",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7393ee8d4f20e84240623bb180681742813dd178",
        "buggy_code": "def _post_configure_engine(url, engine):",
        "fixed_code": "def _post_configure_engine(url, engine, follower_ident):",
        "patch": "@@ -107,7 +107,7 @@ def _configure_follower(cfg, ident):\n \n \n @register.init\n-def _post_configure_engine(url, engine):\n+def _post_configure_engine(url, engine, follower_ident):\n     pass\n \n "
    },
    {
        "commit_id": "1704eacf24f803283033c172cb74b0fb4e9e36d8",
        "commit_message": "- fix bool test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1704eacf24f803283033c172cb74b0fb4e9e36d8",
        "buggy_code": "is_(comp.returning, True)",
        "fixed_code": "is_(bool(comp.returning), True)",
        "patch": "@@ -77,7 +77,7 @@ def insert_values(engine, table_, values):\n                 comp = ins.compile(engine, column_keys=list(values))\n                 if not set(values).issuperset(\n                         c.key for c in table_.primary_key):\n-                    is_(comp.returning, True)\n+                    is_(bool(comp.returning), True)\n \n             result = engine.execute(table_.insert(), **values)\n             ret = values.copy()"
    },
    {
        "commit_id": "91255618ddb47553774c620a23479adf88c27b74",
        "commit_message": "Fix sqlalchemy.ext.baked.Result.one_or_none() exception message\n\nAlso add a couple of missing tests.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91255618ddb47553774c620a23479adf88c27b74",
        "buggy_code": "\"Multiple rows were found for one()\")",
        "fixed_code": "\"Multiple rows were found for one_or_none()\")",
        "patch": "@@ -301,7 +301,7 @@ def one_or_none(self):\n             return None\n         else:\n             raise orm_exc.MultipleResultsFound(\n-                \"Multiple rows were found for one()\")\n+                \"Multiple rows were found for one_or_none()\")\n \n     def all(self):\n         \"\"\"Return all rows."
    },
    {
        "commit_id": "b653fedca5f0fc384c990e93d82c0780c9e76f2c",
        "commit_message": "- fix the postgresql_jsonb requirement to include the 9.4 requirement\n- new test for json col['x']['y']['z'] seems to fail pre PG 9.4,\nfails on comparisons for non-compatible data instead of not matching\n- no need to call SpecPredicate(db) directly in exclusion functions,\nby using Predicate.as_predicate() the spec strings can have version\ncomparisons",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b653fedca5f0fc384c990e93d82c0780c9e76f2c",
        "buggy_code": "return skip_if(",
        "fixed_code": "return only_on(\"postgresql >= 9.4\") + skip_if(",
        "patch": "@@ -784,7 +784,7 @@ def postgresql_test_dblink(self):\n \n     @property\n     def postgresql_jsonb(self):\n-        return skip_if(\n+        return only_on(\"postgresql >= 9.4\") + skip_if(\n             lambda config:\n             config.db.dialect.driver == \"pg8000\" and\n             config.db.dialect._dbapi_version <= (1, 10, 1)"
    },
    {
        "commit_id": "e99dbe141d0cb809bc1e3abcf8943f2bbf81f934",
        "commit_message": "Merge pull request #192 from halfcrazy/patch-1\n\nfix typo int->into",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e99dbe141d0cb809bc1e3abcf8943f2bbf81f934",
        "buggy_code": "operations int the flush.",
        "fixed_code": "operations into the flush.",
        "patch": "@@ -1983,7 +1983,7 @@ def flush(self, objects=None):\n \n         For ``autocommit`` Sessions with no active manual transaction, flush()\n         will create a transaction on the fly that surrounds the entire set of\n-        operations int the flush.\n+        operations into the flush.\n \n         :param objects: Optional; restricts the flush operation to operate\n           only on elements that are in the given collection."
    },
    {
        "commit_id": "51870ddaef8abf61ee4c8d6337a72db5395a0a85",
        "commit_message": "fix typo int->into",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/51870ddaef8abf61ee4c8d6337a72db5395a0a85",
        "buggy_code": "operations int the flush.",
        "fixed_code": "operations into the flush.",
        "patch": "@@ -1983,7 +1983,7 @@ def flush(self, objects=None):\n \n         For ``autocommit`` Sessions with no active manual transaction, flush()\n         will create a transaction on the fly that surrounds the entire set of\n-        operations int the flush.\n+        operations into the flush.\n \n         :param objects: Optional; restricts the flush operation to operate\n           only on elements that are in the given collection."
    },
    {
        "commit_id": "dd6110eed335154e0ae14b2dba13e44af76c4f2b",
        "commit_message": "- Fixed issue where the SQL Server dialect would reflect a string-\nor other variable-length column type with unbounded length\nby assigning the token ``\"max\"`` to the\nlength attribute of the string.   While using the ``\"max\"`` token\nexplicitly is supported by the SQL Server dialect, it isn't part\nof the normal contract of the base string types, and instead the\nlength should just be left as None.   The dialect now assigns the\nlength to None on reflection of the type so that the type behaves\nnormally in other contexts.\nfixes #3504",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dd6110eed335154e0ae14b2dba13e44af76c4f2b",
        "buggy_code": "charlen = 'max'",
        "fixed_code": "charlen = None",
        "patch": "@@ -1772,7 +1772,7 @@ def get_columns(self, connection, tablename, dbname, owner, schema, **kw):\n                            MSNText, MSBinary, MSVarBinary,\n                            sqltypes.LargeBinary):\n                 if charlen == -1:\n-                    charlen = 'max'\n+                    charlen = None\n                 kwargs['length'] = charlen\n                 if collation:\n                     kwargs['collation'] = collation"
    },
    {
        "commit_id": "2e52f877638ded9d8440fa94632bff0f1705a83e",
        "commit_message": "- fix typo in suffix_with() docs, fixes #3502",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2e52f877638ded9d8440fa94632bff0f1705a83e",
        "buggy_code": "Multiple prefixes can be specified by multiple calls",
        "fixed_code": "Multiple suffixes can be specified by multiple calls",
        "patch": "@@ -224,7 +224,7 @@ def suffix_with(self, *expr, **kw):\n             stmt = select([col1, col2]).cte().suffix_with(\n                 \"cycle empno set y_cycle to 1 default 0\", dialect=\"oracle\")\n \n-        Multiple prefixes can be specified by multiple calls\n+        Multiple suffixes can be specified by multiple calls\n         to :meth:`.suffix_with`.\n \n         :param \\*expr: textual or :class:`.ClauseElement` construct which"
    },
    {
        "commit_id": "9e092e339463e6c6e02cf85266ca49ab1c32832f",
        "commit_message": "- An adjustment to the new Postgresql feature of reflecting storage\noptions and USING of :ticket:`3455` released in 1.0.6,\nto disable the feature for Postgresql versions < 8.2 where the\n``reloptions`` column is not provided; this allows Amazon Redshift\nto again work as it is based on an 8.0.x version of Postgresql.\nFix courtesy Pete Hollobon.\nreferences #3455",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9e092e339463e6c6e02cf85266ca49ab1c32832f",
        "buggy_code": "__version__ = '1.0.8'",
        "fixed_code": "__version__ = '1.0.9'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.8'\n+__version__ = '1.0.9'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "f39e692d1249aeffb4de85987f6a74303fc5dcc5",
        "commit_message": "- Fixed bug in SQLite dialect where reflection of UNIQUE constraints\nthat included non-alphabetic characters in the names, like dots or\nspaces, would not be reflected with their name.\nfixes #3495",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f39e692d1249aeffb4de85987f6a74303fc5dcc5",
        "buggy_code": "UNIQUE_PATTERN = '(?:CONSTRAINT (\\w+) +)?UNIQUE *\\((.+?)\\)'",
        "fixed_code": "UNIQUE_PATTERN = '(?:CONSTRAINT \"?(.+?)\"? +)?UNIQUE *\\((.+?)\\)'",
        "patch": "@@ -1387,7 +1387,7 @@ def get_unique_constraints(self, connection, table_name,\n         unique_constraints = []\n \n         def parse_uqs():\n-            UNIQUE_PATTERN = '(?:CONSTRAINT (\\w+) +)?UNIQUE *\\((.+?)\\)'\n+            UNIQUE_PATTERN = '(?:CONSTRAINT \"?(.+?)\"? +)?UNIQUE *\\((.+?)\\)'\n             INLINE_UNIQUE_PATTERN = (\n                 '(?:(\".+?\")|([a-z0-9]+)) '\n                 '+[a-z0-9_ ]+? +UNIQUE')"
    },
    {
        "commit_id": "575f080850a0a061ccb7ac40e3ea1fbf6b0fedf4",
        "commit_message": "- Fixed an issue where a particular base class within utils\ndidn't implement ``__slots__``, and therefore meant all subclasses\nof that class didn't either, negating the rationale for ``__slots__``\nto be in use.  Didn't cause any issue except on IronPython\nwhich apparently does not implement ``__slots__`` behavior compatibly\nwith cPython.\nFixes #3494",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/575f080850a0a061ccb7ac40e3ea1fbf6b0fedf4",
        "buggy_code": "__version__ = '1.0.7'",
        "fixed_code": "__version__ = '1.0.8'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.7'\n+__version__ = '1.0.8'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "575f080850a0a061ccb7ac40e3ea1fbf6b0fedf4",
        "commit_message": "- Fixed an issue where a particular base class within utils\ndidn't implement ``__slots__``, and therefore meant all subclasses\nof that class didn't either, negating the rationale for ``__slots__``\nto be in use.  Didn't cause any issue except on IronPython\nwhich apparently does not implement ``__slots__`` behavior compatibly\nwith cPython.\nFixes #3494",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/575f080850a0a061ccb7ac40e3ea1fbf6b0fedf4",
        "buggy_code": "'_mapped_by_synonym', '_deferred_loader')",
        "fixed_code": "'_mapped_by_synonym', '_deferred_column_loader')",
        "patch": "@@ -39,7 +39,7 @@ class ColumnProperty(StrategizedProperty):\n         'instrument', 'comparator_factory', 'descriptor', 'extension',\n         'active_history', 'expire_on_flush', 'info', 'doc',\n         'strategy_class', '_creation_order', '_is_polymorphic_discriminator',\n-        '_mapped_by_synonym', '_deferred_loader')\n+        '_mapped_by_synonym', '_deferred_column_loader')\n \n     def __init__(self, *columns, **kwargs):\n         \"\"\"Provide a column-level property for use with a Mapper."
    },
    {
        "commit_id": "fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "commit_message": "- Fixed 1.0 regression where the \"parent entity\" of a synonym-\nmapped attribute on top of an :func:`.aliased` object would\nresolve to the original mapper, not the :func:`.aliased`\nversion of it, thereby causing problems for a :class:`.Query`\nthat relies on this attribute (e.g. it's the only representative\nattribute given in the constructor) to figure out the correct FROM\nclause for the query.\nfixes #3466\n- apply consitency to ._parententity vs.\n__clause_element__()._annotations['parententity']\nin terms of aliased class, test it all.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "buggy_code": "__version__ = '1.0.6'",
        "fixed_code": "__version__ = '1.0.7'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.6'\n+__version__ = '1.0.7'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "commit_message": "- Fixed 1.0 regression where the \"parent entity\" of a synonym-\nmapped attribute on top of an :func:`.aliased` object would\nresolve to the original mapper, not the :func:`.aliased`\nversion of it, thereby causing problems for a :class:`.Query`\nthat relies on this attribute (e.g. it's the only representative\nattribute given in the constructor) to figure out the correct FROM\nclause for the query.\nfixes #3466\n- apply consitency to ._parententity vs.\n__clause_element__()._annotations['parententity']\nin terms of aliased class, test it all.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "buggy_code": "self._parententity = parentmapper",
        "fixed_code": "self._parententity = adapt_to_entity or parentmapper",
        "patch": "@@ -338,7 +338,7 @@ class SomeMappedClass(Base):\n \n     def __init__(self, prop, parentmapper, adapt_to_entity=None):\n         self.prop = self.property = prop\n-        self._parententity = parentmapper\n+        self._parententity = adapt_to_entity or parentmapper\n         self._adapt_to_entity = adapt_to_entity\n \n     def __clause_element__(self):"
    },
    {
        "commit_id": "fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "commit_message": "- Fixed 1.0 regression where the \"parent entity\" of a synonym-\nmapped attribute on top of an :func:`.aliased` object would\nresolve to the original mapper, not the :func:`.aliased`\nversion of it, thereby causing problems for a :class:`.Query`\nthat relies on this attribute (e.g. it's the only representative\nattribute given in the constructor) to figure out the correct FROM\nclause for the query.\nfixes #3466\n- apply consitency to ._parententity vs.\n__clause_element__()._annotations['parententity']\nin terms of aliased class, test it all.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fcb7c784e9479b9bff7de20c41a05bc1aa550ffb",
        "buggy_code": "'parententity': self.entity,",
        "fixed_code": "'parententity': self,",
        "patch": "@@ -530,7 +530,7 @@ def __setstate__(self, state):\n     def _adapt_element(self, elem):\n         return self._adapter.traverse(elem).\\\n             _annotate({\n-                'parententity': self.entity,\n+                'parententity': self,\n                 'parentmapper': self.mapper}\n         )\n "
    },
    {
        "commit_id": "ee5bf27eb80b1f14d797bc410225d64f20747806",
        "commit_message": "Merge pull request #184 from bnjmn/patch-1\n\nMissing comma in method params for hybrid docs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ee5bf27eb80b1f14d797bc410225d64f20747806",
        "buggy_code": "def contains(self,point):",
        "fixed_code": "def contains(self, point):",
        "patch": "@@ -45,7 +45,7 @@ def length(self):\n             return self.end - self.start\n \n         @hybrid_method\n-        def contains(self,point):\n+        def contains(self, point):\n             return (self.start <= point) & (point < self.end)\n \n         @hybrid_method"
    },
    {
        "commit_id": "24f8ab2bc360c1e0837ce7c5392839f87b57e916",
        "commit_message": "- Re-fixed this issue first released in 1.0.5 to fix psycopg2cffi\nJSONB support once again, as they suddenly\nswitched on unconditional decoding of JSONB types in version 2.7.1.\nVersion detection now specifies 2.7.1 as where we should expect\nthe DBAPI to do json encoding for us.\nfixes #3439",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/24f8ab2bc360c1e0837ce7c5392839f87b57e916",
        "buggy_code": "native_jsonb=(99, 99, 99),",
        "fixed_code": "native_jsonb=(2, 7, 1),",
        "patch": "@@ -37,7 +37,7 @@ class PGDialect_psycopg2cffi(PGDialect_psycopg2):\n \n     FEATURE_VERSION_MAP = dict(\n         native_json=(2, 4, 4),\n-        native_jsonb=(99, 99, 99),\n+        native_jsonb=(2, 7, 1),\n         sane_multi_rowcount=(2, 4, 4),\n         array_oid=(2, 4, 4),\n         hstore_adapter=(2, 4, 4)"
    },
    {
        "commit_id": "cfa296d9cd27c66a05eee4cdaeae85b59593f3ab",
        "commit_message": "Merge pull request #183 from renshawbay/master\n\nFix a tiny typo in test name",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cfa296d9cd27c66a05eee4cdaeae85b59593f3ab",
        "buggy_code": "class MaterialiedViewReflectionTest(",
        "fixed_code": "class MaterializedViewReflectionTest(",
        "patch": "@@ -71,7 +71,7 @@ def test_get_table_names_no_foreign(self):\n             eq_(names, ['testtable'])\n \n \n-class MaterialiedViewReflectionTest(\n+class MaterializedViewReflectionTest(\n         fixtures.TablesTest, AssertsExecutionResults):\n     \"\"\"Test reflection on materialized views\"\"\"\n "
    },
    {
        "commit_id": "e3c8eabb289786d8c133e8e915c3b39e4b81affd",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3c8eabb289786d8c133e8e915c3b39e4b81affd",
        "buggy_code": "class MaterialiedViewReflectionTest(",
        "fixed_code": "class MaterializedViewReflectionTest(",
        "patch": "@@ -71,7 +71,7 @@ def test_get_table_names_no_foreign(self):\n             eq_(names, ['testtable'])\n \n \n-class MaterialiedViewReflectionTest(\n+class MaterializedViewReflectionTest(\n         fixtures.TablesTest, AssertsExecutionResults):\n     \"\"\"Test reflection on materialized views\"\"\"\n "
    },
    {
        "commit_id": "e15d58695d6eff9a1d53e31e5ae3666434a4a1af",
        "commit_message": "- Add a new le_() assertion for less than or equals\n- fix TablesTest to use the bind that we've returned from setup_bind()\nto emit DELETE statements",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e15d58695d6eff9a1d53e31e5ae3666434a4a1af",
        "buggy_code": "eq_, ne_, is_, is_not_, startswith_, assert_raises, \\",
        "fixed_code": "eq_, ne_, le_, is_, is_not_, startswith_, assert_raises, \\",
        "patch": "@@ -19,7 +19,7 @@ def against(*queries):\n     return _against(config._current, *queries)\n \n from .assertions import emits_warning, emits_warning_on, uses_deprecated, \\\n-    eq_, ne_, is_, is_not_, startswith_, assert_raises, \\\n+    eq_, ne_, le_, is_, is_not_, startswith_, assert_raises, \\\n     assert_raises_message, AssertsCompiledSQL, ComparesTables, \\\n     AssertsExecutionResults, expect_deprecated, expect_warnings\n "
    },
    {
        "commit_id": "be81cb200d9efb45c3bf331315c54dff778b5de6",
        "commit_message": "- fix typo MANYTOONE -> MANYTOMANY, fixes #3415",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/be81cb200d9efb45c3bf331315c54dff778b5de6",
        "buggy_code": "be one of :data:`.ONETOMANY`, :data:`.MANYTOONE`, :data:`.MANYTOONE`.",
        "fixed_code": "be one of :data:`.ONETOMANY`, :data:`.MANYTOONE`, :data:`.MANYTOMANY`.",
        "patch": "@@ -631,7 +631,7 @@ def generate_relationship(\n     :param base: the :class:`.AutomapBase` class doing the prepare.\n \n     :param direction: indicate the \"direction\" of the relationship; this will\n-     be one of :data:`.ONETOMANY`, :data:`.MANYTOONE`, :data:`.MANYTOONE`.\n+     be one of :data:`.ONETOMANY`, :data:`.MANYTOONE`, :data:`.MANYTOMANY`.\n \n     :param return_fn: the function that is used by default to create the\n      relationship.  This will be either :func:`.relationship` or"
    },
    {
        "commit_id": "ac52239b328f6dc573fdfb9acbbc7d5d528fa982",
        "commit_message": "- Fixed bug where the truncation of long labels in SQL could produce\na label that overlapped another label that is not truncated; this\nbecause the length threshhold for truncation was greater than\nthe portion of the label that remains after truncation.  These\ntwo values have now been made the same; label_length - 6.\nThe effect here is that shorter column labels will be \"truncated\"\nwhere they would not have been truncated before.\nfixes #3396",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ac52239b328f6dc573fdfb9acbbc7d5d528fa982",
        "buggy_code": "if len(anonname) > self.label_length:",
        "fixed_code": "if len(anonname) > self.label_length - 6:",
        "patch": "@@ -1133,7 +1133,7 @@ def _truncated_identifier(self, ident_class, name):\n \n         anonname = name.apply_map(self.anon_map)\n \n-        if len(anonname) > self.label_length:\n+        if len(anonname) > self.label_length - 6:\n             counter = self.truncated_names.get(ident_class, 1)\n             truncname = anonname[0:max(self.label_length - 6, 0)] + \\\n                 \"_\" + hex(counter)[2:]"
    },
    {
        "commit_id": "0783cb9337ad7711d216cc7e7b79e6fa6d4bbef1",
        "commit_message": "Merge pull request #170 from eronisko/fix_typo\n\nFix typo in 'Relationships API' docs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0783cb9337ad7711d216cc7e7b79e6fa6d4bbef1",
        "buggy_code": "is not otherwise exprssed in any direct class mapping. If the",
        "fixed_code": "is not otherwise expressed in any direct class mapping. If the",
        "patch": "@@ -195,7 +195,7 @@ class Parent(Base):\n \n           The :paramref:`~.relationship.secondary` keyword argument is\n           typically applied in the case where the intermediary :class:`.Table`\n-          is not otherwise exprssed in any direct class mapping. If the\n+          is not otherwise expressed in any direct class mapping. If the\n           \"secondary\" table is also explicitly mapped elsewhere (e.g. as in\n           :ref:`association_pattern`), one should consider applying the\n           :paramref:`~.relationship.viewonly` flag so that this"
    },
    {
        "commit_id": "da327d0349b2af88700808c8e0041eda4c57882f",
        "commit_message": "Fix typo in 'Relationships API' docs\nexprssed -> expressed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/da327d0349b2af88700808c8e0041eda4c57882f",
        "buggy_code": "is not otherwise exprssed in any direct class mapping. If the",
        "fixed_code": "is not otherwise expressed in any direct class mapping. If the",
        "patch": "@@ -195,7 +195,7 @@ class Parent(Base):\n \n           The :paramref:`~.relationship.secondary` keyword argument is\n           typically applied in the case where the intermediary :class:`.Table`\n-          is not otherwise exprssed in any direct class mapping. If the\n+          is not otherwise expressed in any direct class mapping. If the\n           \"secondary\" table is also explicitly mapped elsewhere (e.g. as in\n           :ref:`association_pattern`), one should consider applying the\n           :paramref:`~.relationship.viewonly` flag so that this"
    },
    {
        "commit_id": "d48acff23bc04dafa958e76ef2ff614aa8d6751b",
        "commit_message": "- Fixed issue in new :meth:`.QueryEvents.before_compile` event where\nchanges made to the :class:`.Query` object's collection of entities\nto load within the event would render in the SQL, but would not\nbe reflected during the loading process.\nfixes #3387",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d48acff23bc04dafa958e76ef2ff614aa8d6751b",
        "buggy_code": "__version__ = '1.0.2'",
        "fixed_code": "__version__ = '1.0.3'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.2'\n+__version__ = '1.0.3'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "d48acff23bc04dafa958e76ef2ff614aa8d6751b",
        "commit_message": "- Fixed issue in new :meth:`.QueryEvents.before_compile` event where\nchanges made to the :class:`.Query` object's collection of entities\nto load within the event would render in the SQL, but would not\nbe reflected during the loading process.\nfixes #3387",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d48acff23bc04dafa958e76ef2ff614aa8d6751b",
        "buggy_code": "return loading.instances(self, result, querycontext)",
        "fixed_code": "return loading.instances(querycontext.query, result, querycontext)",
        "patch": "@@ -2528,7 +2528,7 @@ def _execute_and_instances(self, querycontext):\n             close_with_result=True)\n \n         result = conn.execute(querycontext.statement, self._params)\n-        return loading.instances(self, result, querycontext)\n+        return loading.instances(querycontext.query, result, querycontext)\n \n     @property\n     def column_descriptions(self):"
    },
    {
        "commit_id": "d349ad448c020d9c4ac976c048500d2cee51ab6d",
        "commit_message": "- Fixed a critical regression caused by :ticket:`3061` where the\nNEVER_SET symbol could easily leak into a lazyload query, subsequent\nto the flush of a pending object.  This would occur typically\nfor a many-to-one relationship that does not use a simple\n\"get\" strategy.   The good news is that the fix improves efficiency\nvs. 0.9, because we can now skip the SELECT statement entirely\nwhen we detect NEVER_SET symbols present in the parameters; prior to\n:ticket:`3061`, we couldn't discern if the None here were set or not.\nfixes #3368",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d349ad448c020d9c4ac976c048500d2cee51ab6d",
        "buggy_code": "state_attribute_str, object_mapper, object_state, _none_set",
        "fixed_code": "state_attribute_str, object_mapper, object_state, _none_set, _never_set",
        "patch": "@@ -13,7 +13,7 @@\n import re\n \n from .base import instance_str, state_str, state_class_str, attribute_str, \\\n-    state_attribute_str, object_mapper, object_state, _none_set\n+    state_attribute_str, object_mapper, object_state, _none_set, _never_set\n from .base import class_mapper, _class_to_mapper\n from .base import InspectionAttr\n from .path_registry import PathRegistry"
    },
    {
        "commit_id": "ecd7b31d5eaed138e699293719f70260da3c978d",
        "commit_message": "- Fixed a long-standing bug where the :class:`.Enum` type as used\nwith the psycopg2 dialect in conjunction with non-ascii values\nand ``native_enum=False`` would fail to decode return results properly.\nThis stemmed from when the PG :class:`.postgresql.ENUM` type used\nto be a standalone type without a \"non native\" option.\nfixes #3354\n- corrected the assertsql comparison rule to expect a non-ascii\nSQL string",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ecd7b31d5eaed138e699293719f70260da3c978d",
        "buggy_code": "if util.py2k and self.convert_unicode is True:",
        "fixed_code": "if self.native_enum and util.py2k and self.convert_unicode is True:",
        "patch": "@@ -354,7 +354,7 @@ def result_processor(self, dialect, coltype):\n \n class _PGEnum(ENUM):\n     def result_processor(self, dialect, coltype):\n-        if util.py2k and self.convert_unicode is True:\n+        if self.native_enum and util.py2k and self.convert_unicode is True:\n             # we can't easily use PG's extensions here because\n             # the OID is on the fly, and we need to give it a python\n             # function anyway - not really worth it."
    },
    {
        "commit_id": "ecd7b31d5eaed138e699293719f70260da3c978d",
        "commit_message": "- Fixed a long-standing bug where the :class:`.Enum` type as used\nwith the psycopg2 dialect in conjunction with non-ascii values\nand ``native_enum=False`` would fail to decode return results properly.\nThis stemmed from when the PG :class:`.postgresql.ENUM` type used\nto be a standalone type without a \"non native\" option.\nfixes #3354\n- corrected the assertsql comparison rule to expect a non-ascii\nSQL string",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ecd7b31d5eaed138e699293719f70260da3c978d",
        "buggy_code": "_received_statement = re.sub(r'[\\n\\t]', '', str(compiled))",
        "fixed_code": "_received_statement = re.sub(r'[\\n\\t]', '', util.text_type(compiled))",
        "patch": "@@ -85,7 +85,7 @@ def _received_statement(self, execute_observed):\n                     column_keys=context.compiled.column_keys,\n                     inline=context.compiled.inline)\n             )\n-        _received_statement = re.sub(r'[\\n\\t]', '', str(compiled))\n+        _received_statement = re.sub(r'[\\n\\t]', '', util.text_type(compiled))\n         parameters = execute_observed.parameters\n \n         if not parameters:"
    },
    {
        "commit_id": "59816435dae75db9712f80c34734813a0246205a",
        "commit_message": "- Added a list() call around a weak dictionary used within the\ncommit phase of the session, which without it could cause\na \"dictionary changed size during iter\" error if garbage collection\ninteracted within the process.   Change was introduced by",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/59816435dae75db9712f80c34734813a0246205a",
        "buggy_code": "for s in self._deleted:",
        "fixed_code": "for s in list(self._deleted):",
        "patch": "@@ -300,7 +300,7 @@ def _remove_snapshot(self):\n         if not self.nested and self.session.expire_on_commit:\n             for s in self.session.identity_map.all_states():\n                 s._expire(s.dict, self.session.identity_map._modified)\n-            for s in self._deleted:\n+            for s in list(self._deleted):\n                 s._detach()\n             self._deleted.clear()\n         elif self.nested:"
    },
    {
        "commit_id": "4b164935481c44c126500761f873c5b0c5bdbe80",
        "commit_message": "- Fixed bug where updated PG index reflection as a result of\n:ticket:`3184` would cause index operations to fail on Postgresql\nversions 8.4 and earlier.  The enhancements are now\ndisabled when using an older version of Postgresql.\nfixes #3343",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4b164935481c44c126500761f873c5b0c5bdbe80",
        "buggy_code": "\"postgresql\", \"mssql\", \"oracle\"",
        "fixed_code": "\"postgresql>=8.4\", \"mssql\", \"oracle\"",
        "patch": "@@ -372,7 +372,7 @@ def offset(self):\n     @property\n     def window_functions(self):\n         return only_if([\n-                    \"postgresql\", \"mssql\", \"oracle\"\n+                    \"postgresql>=8.4\", \"mssql\", \"oracle\"\n                 ], \"Backend does not support window functions\")\n \n     @property"
    },
    {
        "commit_id": "a518b31f3b131ae8304026109cd826e38c2afc26",
        "commit_message": "Fix typos\nagaisnt -> against\n'a Alias' -> 'an Alias'",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a518b31f3b131ae8304026109cd826e38c2afc26",
        "buggy_code": "construct from this :class:`.Join`, then to produce a",
        "fixed_code": "construct from this :class:`.Join`, then to produce an",
        "patch": "@@ -948,7 +948,7 @@ def alias(self, sqlutil, name=None, flat=False):\n         \"\"\"return an alias of this :class:`.Join`.\n \n         The default behavior here is to first produce a SELECT\n-        construct from this :class:`.Join`, then to produce a\n+        construct from this :class:`.Join`, then to produce an\n         :class:`.Alias` from that.  So given a join of the form::\n \n             j = table_a.join(table_b, table_a.c.id == table_b.c.a_id)"
    },
    {
        "commit_id": "4c17337da60b8b126c4a7804f40da236656a1fc8",
        "commit_message": "- fix this for pg8000 of all backends...",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4c17337da60b8b126c4a7804f40da236656a1fc8",
        "buggy_code": "stmt = select([func.count(1), expr]).group_by(expr).order_by(expr)",
        "fixed_code": "stmt = select([func.count(table.c.id), expr]).group_by(expr).order_by(expr)",
        "patch": "@@ -89,7 +89,7 @@ def test_composed_int_desc(self):\n     def test_group_by_composed(self):\n         table = self.tables.some_table\n         expr = (table.c.x + table.c.y).label('lx')\n-        stmt = select([func.count(1), expr]).group_by(expr).order_by(expr)\n+        stmt = select([func.count(table.c.id), expr]).group_by(expr).order_by(expr)\n         self._assert_result(\n             stmt,\n             [(1, 3), (1, 5), (1, 7)]"
    },
    {
        "commit_id": "c09c21c9f31826e126b97d6318a9df66986af774",
        "commit_message": "- Fixed bug in new \"label resolution\" feature of :ticket:`2992` where\nthe string label placed in the order_by() or group_by() of a statement\nwould place higher priority on the name as found\ninside the FROM clause instead of a more locally available name\ninside the columns clause.\nfixes #3335",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c09c21c9f31826e126b97d6318a9df66986af774",
        "buggy_code": "__version__ = '1.0.0b3'",
        "fixed_code": "__version__ = '1.0.0b4'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.0b3'\n+__version__ = '1.0.0b4'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "3ae00fea903b3403c1900e9b9f440305362dd26c",
        "commit_message": "- Repaired the commit for issue #2771 which was inadvertently commented\nout.\n- add __backend__ to the dialect suite so that it runs on CI.\n- will be 1.0.0b3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ae00fea903b3403c1900e9b9f440305362dd26c",
        "buggy_code": "__version__ = '1.0.0b2'",
        "fixed_code": "__version__ = '1.0.0b3'",
        "patch": "@@ -120,7 +120,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '1.0.0b2'\n+__version__ = '1.0.0b3'\n \n \n def __go(lcls):"
    },
    {
        "commit_id": "3ae00fea903b3403c1900e9b9f440305362dd26c",
        "commit_message": "- Repaired the commit for issue #2771 which was inadvertently commented\nout.\n- add __backend__ to the dialect suite so that it runs on CI.\n- will be 1.0.0b3",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ae00fea903b3403c1900e9b9f440305362dd26c",
        "buggy_code": "self.charset = charset #self._encoding_compat.get(charset, charset)",
        "fixed_code": "self.charset = self._encoding_compat.get(charset, charset)",
        "patch": "@@ -3351,7 +3351,7 @@ class _DecodingRowProxy(object):\n \n     def __init__(self, rowproxy, charset):\n         self.rowproxy = rowproxy\n-        self.charset = charset #self._encoding_compat.get(charset, charset)\n+        self.charset = self._encoding_compat.get(charset, charset)\n \n     def __getitem__(self, index):\n         item = self.rowproxy[index]"
    },
    {
        "commit_id": "b7e151ac5cf5a0c13b9a30bc6841ed0cfe322536",
        "commit_message": "- The \"auto close\" for :class:`.ResultProxy` is now a \"soft\" close.\nThat is, after exhausing all rows using the fetch methods, the\nDBAPI cursor is released as before and the object may be safely\ndiscarded, but the fetch methods may continue to be called for which\nthey will return an end-of-result object (None for fetchone, empty list\nfor fetchmany and fetchall).   Only if :meth:`.ResultProxy.close`\nis called explicitly will these methods raise the \"result is closed\"\nerror.\nfixes #3330 fixes #3329",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b7e151ac5cf5a0c13b9a30bc6841ed0cfe322536",
        "buggy_code": "if not cursor.closed:",
        "fixed_code": "if not cursor._soft_closed:",
        "patch": "@@ -1305,7 +1305,7 @@ def _get_table_pragma(self, connection, pragma, table_name, schema=None):\n         qtable = quote(table_name)\n         statement = \"%s%s(%s)\" % (statement, pragma, qtable)\n         cursor = connection.execute(statement)\n-        if not cursor.closed:\n+        if not cursor._soft_closed:\n             # work around SQLite issue whereby cursor.description\n             # is blank when PRAGMA returns no rows:\n             # http://www.sqlite.org/cvstrac/tktview?tn=1884"
    },
    {
        "commit_id": "dcbedfd61ae07315cd4b2d9cc76b5d2cb6d47926",
        "commit_message": "- fix a get call here, we should figure this out since we dont want\nto be using getattr",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dcbedfd61ae07315cd4b2d9cc76b5d2cb6d47926",
        "buggy_code": "_entity = column._parententity",
        "fixed_code": "_entity = getattr(column, '_parententity', None)",
        "patch": "@@ -3541,7 +3541,7 @@ def __init__(self, query, column, namespace=None):\n             attributes.QueryableAttribute,\n             interfaces.PropComparator\n         )):\n-            _entity = column._parententity\n+            _entity = getattr(column, '_parententity', None)\n             if _entity is not None:\n                 search_entities = False\n             self._label_name = column.key"
    },
    {
        "commit_id": "b3d3795de0d45fe4adda7393881f0f955409a45d",
        "commit_message": "- The SQL compiler now generates the mapping of expected columns\nsuch that they are matched to the received result set positionally,\nrather than by name.  Originally, this was seen as a way to handle\ncases where we had columns returned with difficult-to-predict names,\nthough in modern use that issue has been overcome by anonymous\nlabeling.   In this version, the approach basically reduces function\ncall count per-result by a few dozen calls, or more for larger\nsets of result columns.  The approach still degrades into a modern\nversion of the old approach if textual elements modify the result\nmap, or if any discrepancy in size exists between\nthe compiled set of columns versus what was received, so there's no\nissue for partially or fully textual compilation scenarios where these\nlists might not line up.  fixes #918\n- callcounts still need to be adjusted down for this so zoomark\ntests won't pass at the moment",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b3d3795de0d45fe4adda7393881f0f955409a45d",
        "buggy_code": "type_=sa.Date).label('today')]))",
        "fixed_code": "type_=sa.Date)]))",
        "patch": "@@ -133,7 +133,7 @@ def gen_default(cls, ctx):\n                     [\n                         func.trunc(\n                             func.sysdate(), sa.literal_column(\"'DAY'\"),\n-                            type_=sa.Date).label('today')]))\n+                            type_=sa.Date)]))\n             assert isinstance(ts, datetime.date) and not isinstance(\n                 ts, datetime.datetime)\n             f = sa.select([func.length('abcdef')], bind=db).scalar()"
    },
    {
        "commit_id": "62f87749067684696dca32cacac17f7d33066d8b",
        "commit_message": "- fix this test for py3k",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/62f87749067684696dca32cacac17f7d33066d8b",
        "buggy_code": "\"<type 'list'> instead\",",
        "fixed_code": "\"<.* 'list'> instead\",",
        "patch": "@@ -379,7 +379,7 @@ def test_no_embed_in_sql(self):\n             assert_raises_message(\n                 sa.exc.ArgumentError,\n                 \"SQL expression object or string expected, got object of type \"\n-                \"<type 'list'> instead\",\n+                \"<.* 'list'> instead\",\n                 t.select, [const]\n             )\n             assert_raises_message("
    },
    {
        "commit_id": "28d0b8d1d1b135c2d6974f4d31e56b8d49c8ef09",
        "commit_message": "- fix another issue from rf49c367ef, add another test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/28d0b8d1d1b135c2d6974f4d31e56b8d49c8ef09",
        "buggy_code": "if assert_multirow or assert_singlerow and \\",
        "fixed_code": "if hasvalue or assert_multirow or assert_singlerow and \\",
        "patch": "@@ -677,7 +677,7 @@ def update_stmt():\n                         c.context.compiled_parameters[0],\n                         value_params)\n \n-        if assert_multirow or assert_singlerow and \\\n+        if hasvalue or assert_multirow or assert_singlerow and \\\n                 len(multiparams) == 1:\n             if rows != len(records):\n                 raise orm_exc.StaleDataError("
    },
    {
        "commit_id": "2f6ec41dc98c83c66e36d85fd236bd97402cadb4",
        "commit_message": "- fix test for new events",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2f6ec41dc98c83c66e36d85fd236bd97402cadb4",
        "buggy_code": "assert issubclass(manager.dispatch._parent_cls.__dict__['dispatch'].events, MyEvents)",
        "fixed_code": "assert issubclass(manager.dispatch._events, MyEvents)",
        "patch": "@@ -485,5 +485,5 @@ class A(object): pass\n \n         register_class(A)\n         manager = instrumentation.manager_of_class(A)\n-        assert issubclass(manager.dispatch._parent_cls.__dict__['dispatch'].events, MyEvents)\n+        assert issubclass(manager.dispatch._events, MyEvents)\n "
    },
    {
        "commit_id": "0bd632804eae635d793175a959294f49f3538806",
        "commit_message": "- fix links for loading, add a redirect page\n\nbump\n\nfoo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0bd632804eae635d793175a959294f49f3538806",
        "buggy_code": ":doc:`/orm/loading` - Full documentation on relationship loader",
        "fixed_code": ":doc:`/orm/loading_relationships` - Full documentation on relationship loader",
        "patch": "@@ -528,7 +528,7 @@ class Parent(Base):\n \n           .. seealso::\n \n-            :doc:`/orm/loading` - Full documentation on relationship loader\n+            :doc:`/orm/loading_relationships` - Full documentation on relationship loader\n             configuration.\n \n             :ref:`dynamic_relationship` - detail on the ``dynamic`` option."
    },
    {
        "commit_id": "91af7337878612b2497269e600eef147a0f5bb30",
        "commit_message": "- fix unique constraint parsing for sqlite -- may return '' for name, however",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91af7337878612b2497269e600eef147a0f5bb30",
        "buggy_code": "UNIQUE_PATTERN = 'CONSTRAINT (\\w+) UNIQUE \\(([^\\)]+)\\)'",
        "fixed_code": "UNIQUE_PATTERN = '(?:CONSTRAINT (\\w+) )?UNIQUE \\(([^\\)]+)\\)'",
        "patch": "@@ -1173,7 +1173,7 @@ def get_unique_constraints(self, connection, table_name,\n             return []\n         table_data = row[0]\n \n-        UNIQUE_PATTERN = 'CONSTRAINT (\\w+) UNIQUE \\(([^\\)]+)\\)'\n+        UNIQUE_PATTERN = '(?:CONSTRAINT (\\w+) )?UNIQUE \\(([^\\)]+)\\)'\n         return [\n             {'name': name,\n              'column_names': [col.strip(' \"') for col in cols.split(',')]}"
    },
    {
        "commit_id": "b7cf11b163dd7d15f56634a41dcceb880821ecf3",
        "commit_message": "- simplify the \"noconnection\" error handling, setting\n_handle_dbapi_exception_noconnection() to only invoke in the case\nof raw_connection() in the constructor of Connection.   in all other\ncases the Connection proceeds with _handle_dbapi_exception() including\nrevalidate.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b7cf11b163dd7d15f56634a41dcceb880821ecf3",
        "buggy_code": "self.pool.connect, connection, wrap=True),",
        "fixed_code": "self.pool.connect, connection),",
        "patch": "@@ -61,7 +61,7 @@ def contextual_connect(self, **kw):\n             connection = self._tl_connection_cls(\n                 self,\n                 self._wrap_pool_connect(\n-                    self.pool.connect, connection, wrap=True),\n+                    self.pool.connect, connection),\n                 **kw)\n             self._connections.conn = weakref.ref(connection)\n "
    },
    {
        "commit_id": "c24423bc2e3fd227bf4a86599e28407bd190ee9e",
        "commit_message": "- enhance only_on() to work with compound specs\n- fix \"temporary_tables\" requirement",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c24423bc2e3fd227bf4a86599e28407bd190ee9e",
        "buggy_code": "OrPredicate([SpecPredicate(db) for db in util.to_list(dbs)])",
        "fixed_code": "OrPredicate([Predicate.as_predicate(db) for db in util.to_list(dbs)])",
        "patch": "@@ -425,7 +425,7 @@ def skip(db, reason=None):\n \n def only_on(dbs, reason=None):\n     return only_if(\n-        OrPredicate([SpecPredicate(db) for db in util.to_list(dbs)])\n+        OrPredicate([Predicate.as_predicate(db) for db in util.to_list(dbs)])\n     )\n \n "
    },
    {
        "commit_id": "41e7253dee168b8c26c4993d27aac11f98c7f9e3",
        "commit_message": "- The engine-level error handling and wrapping routines will now\ntake effect in all engine connection use cases, including\nwhen user-custom connect routines are used via the\n:paramref:`.create_engine.creator` parameter, as well as when\nthe :class:`.Connection` encounters a connection error on\nrevalidation.\nfixes #3266",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/41e7253dee168b8c26c4993d27aac11f98c7f9e3",
        "buggy_code": "self, self.pool.connect(), **kw)",
        "fixed_code": "self, self._wrap_pool_connect(self.pool.connect), **kw)",
        "patch": "@@ -59,7 +59,7 @@ def contextual_connect(self, **kw):\n             # guards against pool-level reapers, if desired.\n             # or not connection.connection.is_valid:\n             connection = self._tl_connection_cls(\n-                self, self.pool.connect(), **kw)\n+                self, self._wrap_pool_connect(self.pool.connect), **kw)\n             self._connections.conn = weakref.ref(connection)\n \n         return connection._increment_connect()"
    },
    {
        "commit_id": "fda589487b2cb60e8d69f520e0120eeb7c875915",
        "commit_message": "- Updated the \"supports_unicode_statements\" flag to True for MySQLdb\nand Pymysql under Python 2.   This refers to the SQL statements\nthemselves, not the parameters, and affects issues such as table\nand column names using non-ASCII characters.   These drivers both\nappear to support Python 2 Unicode objects without issue in modern\nversions.\nfixes #3121",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fda589487b2cb60e8d69f520e0120eeb7c875915",
        "buggy_code": "supports_unicode_statements = False",
        "fixed_code": "supports_unicode_statements = True",
        "patch": "@@ -77,7 +77,7 @@ def _escape_identifier(self, value):\n \n class MySQLDialect_mysqldb(MySQLDialect):\n     driver = 'mysqldb'\n-    supports_unicode_statements = False\n+    supports_unicode_statements = True\n     supports_sane_rowcount = True\n     supports_sane_multi_rowcount = True\n "
    },
    {
        "commit_id": "07f3aff03b8d5eb8ddb91154ce2b8ecafc2ad433",
        "commit_message": "Merged in jon_nelson/sqlalchemy/minor_spelling_error (pull request #37)\r\n\r\n- fix minor spelling error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/07f3aff03b8d5eb8ddb91154ce2b8ecafc2ad433",
        "buggy_code": "\"\"\"Target database must support derferable constraints.\"\"\"",
        "fixed_code": "\"\"\"Target database must support deferrable constraints.\"\"\"",
        "patch": "@@ -30,7 +30,7 @@ def exclude(db, op, spec, description=None):\n class DefaultRequirements(SuiteRequirements):\n     @property\n     def deferrable_or_no_constraints(self):\n-        \"\"\"Target database must support derferable constraints.\"\"\"\n+        \"\"\"Target database must support deferrable constraints.\"\"\"\n \n         return skip_if([\n             no_support('firebird', 'not supported by database'),"
    },
    {
        "commit_id": "5fd779df0c958dc1ec2766f55d80b3090d2427eb",
        "commit_message": "- fix minor spelling error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5fd779df0c958dc1ec2766f55d80b3090d2427eb",
        "buggy_code": "\"\"\"Target database must support derferable constraints.\"\"\"",
        "fixed_code": "\"\"\"Target database must support deferrable constraints.\"\"\"",
        "patch": "@@ -30,7 +30,7 @@ def exclude(db, op, spec, description=None):\n class DefaultRequirements(SuiteRequirements):\n     @property\n     def deferrable_or_no_constraints(self):\n-        \"\"\"Target database must support derferable constraints.\"\"\"\n+        \"\"\"Target database must support deferrable constraints.\"\"\"\n \n         return skip_if([\n             no_support('firebird', 'not supported by database'),"
    },
    {
        "commit_id": "e01dab9b1fbaf8325022c20f76ea9b99fbfdfd73",
        "commit_message": "Set the length for MyType implementation\n\nMysql drops the type in these tests, when it does visit_typeclause,\n since it's an unkown type it just says none,\nand doesn't do a cast.\nFirebird also doesn't support varchar with length, it throws an\nerror on these types.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e01dab9b1fbaf8325022c20f76ea9b99fbfdfd73",
        "buggy_code": "impl = String",
        "fixed_code": "impl = String(50)",
        "patch": "@@ -558,7 +558,7 @@ class TypeCoerceCastTest(fixtures.TablesTest):\n     @classmethod\n     def define_tables(cls, metadata):\n         class MyType(types.TypeDecorator):\n-            impl = String\n+            impl = String(50)\n \n             def process_bind_param(self, value, dialect):\n                 return \"BIND_IN\" + str(value)"
    },
    {
        "commit_id": "5a10b6a455f9ad7be752469cbaa503857ae9fda2",
        "commit_message": "- Fixed \"'NoneType' object has no attribute 'concrete'\" error\nwhen using :class:`.AbstractConcreteBase` in conjunction with\na subclass that declares ``__abstract__``.\nfixes #3185",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5a10b6a455f9ad7be752469cbaa503857ae9fda2",
        "buggy_code": "if sm.concrete and cls in scls.__bases__:",
        "fixed_code": "if sm and sm.concrete and cls in scls.__bases__:",
        "patch": "@@ -547,7 +547,7 @@ def mapper_args():\n \n         for scls in cls.__subclasses__():\n             sm = _mapper_or_none(scls)\n-            if sm.concrete and cls in scls.__bases__:\n+            if sm and sm.concrete and cls in scls.__bases__:\n                 sm._set_concrete_base(m)\n \n "
    },
    {
        "commit_id": "e3f07f7206cf0d6a5f2ff9344a365f4657645338",
        "commit_message": "- Added support for the Oracle table option ON COMMIT.  This is being\nkept separate from Postgresql's ON COMMIT for now even though ON COMMIT\nis in the SQL standard; the option is still very specific to temp tables\nand we eventually would provide a more first class temporary table\nfeature.\n- oracle can apparently do get_temp_table_names() too, so implement that,\nfix its get_table_names(), and add it to #3204.  fixes #3204 again.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3f07f7206cf0d6a5f2ff9344a365f4657645338",
        "buggy_code": "return only_on(['sqlite'])",
        "fixed_code": "return only_on(['sqlite', 'oracle'])",
        "patch": "@@ -300,7 +300,7 @@ def unique_constraint_reflection(self):\n     def temp_table_names(self):\n         \"\"\"target dialect supports listing of temporary table names\"\"\"\n \n-        return only_on(['sqlite'])\n+        return only_on(['sqlite', 'oracle'])\n \n     @property\n     def temporary_views(self):"
    },
    {
        "commit_id": "76c06aa65345b47af38a0a1d20638dfbc890b640",
        "commit_message": "method documentation typo fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/76c06aa65345b47af38a0a1d20638dfbc890b640",
        "buggy_code": "\"\"\"Produce an :class:`.FunctionFilter` object against a function.",
        "fixed_code": "\"\"\"Produce a :class:`.FunctionFilter` object against a function.",
        "patch": "@@ -2901,7 +2901,7 @@ class FunctionFilter(ColumnElement):\n     criterion = None\n \n     def __init__(self, func, *criterion):\n-        \"\"\"Produce an :class:`.FunctionFilter` object against a function.\n+        \"\"\"Produce a :class:`.FunctionFilter` object against a function.\n \n         Used against aggregate and window functions,\n         for database backends that support the \"FILTER\" clause."
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "changelog_inner_tag_sort = [\"feature\", \"bug\", \"moved\", \"changed\", \"removed\"]",
        "fixed_code": "changelog_inner_tag_sort = [\"feature\", \"changed\", \"removed\", \"bug\", \"moved\"]",
        "patch": "@@ -61,7 +61,7 @@\n                 \"postgresql\", \"mysql\", \"sqlite\", \"mssql\", \\\n                 \"oracle\", \"firebird\"]\n # tags to sort on inside of sections\n-changelog_inner_tag_sort = [\"feature\", \"bug\", \"moved\", \"changed\", \"removed\"]\n+changelog_inner_tag_sort = [\"feature\", \"changed\", \"removed\", \"bug\", \"moved\"]\n \n # how to render changelog links\n changelog_render_ticket = \"http://www.sqlalchemy.org/trac/ticket/%s\""
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "self.sqltext = _literal_as_text(sqltext)",
        "fixed_code": "self.sqltext = _literal_as_text(sqltext, warn=False)",
        "patch": "@@ -2433,7 +2433,7 @@ def __init__(self, sqltext, name=None, deferrable=None,\n \n         super(CheckConstraint, self).\\\n             __init__(name, deferrable, initially, _create_rule, info=info)\n-        self.sqltext = _literal_as_text(sqltext)\n+        self.sqltext = _literal_as_text(sqltext, warn=False)\n         if table is not None:\n             self._set_parent_with_dispatch(table)\n         elif _autoattach:"
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "AssertsExecutionResults, expect_deprecated",
        "fixed_code": "AssertsExecutionResults, expect_deprecated, expect_warnings",
        "patch": "@@ -21,7 +21,7 @@ def against(*queries):\n from .assertions import emits_warning, emits_warning_on, uses_deprecated, \\\n     eq_, ne_, is_, is_not_, startswith_, assert_raises, \\\n     assert_raises_message, AssertsCompiledSQL, ComparesTables, \\\n-    AssertsExecutionResults, expect_deprecated\n+    AssertsExecutionResults, expect_deprecated, expect_warnings\n \n from .util import run_as_contextmanager, rowset, fail, provide_metadata, adict\n "
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "next(counter), next(counter))",
        "fixed_code": "(next(counter), next(counter)))",
        "patch": "@@ -387,7 +387,7 @@ def test_warnings_util(self):\n         def go():\n             util.warn_limited(\n                 \"memusage warning, param1: %s, param2: %s\",\n-                next(counter), next(counter))\n+                (next(counter), next(counter)))\n         go()\n \n     def test_mapper_reset(self):"
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "return str(select(['q'], **kw).compile(dialect=dialect))",
        "fixed_code": "return str(select([column('q')], **kw).compile(dialect=dialect))",
        "patch": "@@ -193,7 +193,7 @@ def gen(distinct=None, prefixes=None):\n                 kw['distinct'] = distinct\n             if prefixes is not None:\n                 kw['prefixes'] = prefixes\n-            return str(select(['q'], **kw).compile(dialect=dialect))\n+            return str(select([column('q')], **kw).compile(dialect=dialect))\n \n         eq_(gen(None), 'SELECT q')\n         eq_(gen(True), 'SELECT DISTINCT q')"
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "'EXISTS (select yay from foo where boo = lar)'",
        "fixed_code": "text('EXISTS (select yay from foo where boo = lar)')",
        "patch": "@@ -397,7 +397,7 @@ def test_outer_join(self):\n \n         query = select([table1, table2], or_(table1.c.name == 'fred',\n                        table1.c.myid == 10, table2.c.othername != 'jack',\n-                       'EXISTS (select yay from foo where boo = lar)'\n+                       text('EXISTS (select yay from foo where boo = lar)')\n                        ), from_obj=[outerjoin(table1, table2,\n                        table1.c.myid == table2.c.otherid)])\n         self.assert_compile(query,"
    },
    {
        "commit_id": "7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "commit_message": "- The :func:`~.expression.column` and :func:`~.expression.table`\nconstructs are now importable from the \"from sqlalchemy\" namespace,\njust like every other Core construct.\n- The implicit conversion of strings to :func:`.text` constructs\nwhen passed to most builder methods of :func:`.select` as\nwell as :class:`.Query` now emits a warning with just the\nplain string sent.   The textual conversion still proceeds normally,\nhowever.  The only method that accepts a string without a warning\nare the \"label reference\" methods like order_by(), group_by();\nthese functions will now at compile time attempt to resolve a single\nstring argument to a column or label expression present in the\nselectable; if none is located, the expression still renders, but\nyou get the warning again. The rationale here is that the implicit\nconversion from string to text is more unexpected than not these days,\nand it is better that the user send more direction to the Core / ORM\nwhen passing a raw string as to what direction should be taken.\nCore/ORM tutorials have been updated to go more in depth as to how text\nis handled.\nfixes #2992",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c6a45c480a865ac9580eb33fcca2dae5b19dd11",
        "buggy_code": "select(['foo']).select_from(expr),",
        "fixed_code": "select([column('foo')]).select_from(expr),",
        "patch": "@@ -340,7 +340,7 @@ def test_select_method_two(self):\n     def test_select_method_three(self):\n         expr = func.rows(\"foo\")\n         self.assert_compile(\n-            select(['foo']).select_from(expr),\n+            select([column('foo')]).select_from(expr),\n             \"SELECT foo FROM rows(:rows_1)\"\n         )\n "
    },
    {
        "commit_id": "b4af17b342162f54ae097eb13d52185e24be196c",
        "commit_message": "Merge pull request #130 from gthb/docfix-1\n\nFix doc typos and copy-paste error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4af17b342162f54ae097eb13d52185e24be196c",
        "buggy_code": "This method is used in conjunection with :meth:`dispose`",
        "fixed_code": "This method is used in conjunction with :meth:`dispose`",
        "patch": "@@ -305,7 +305,7 @@ def recreate(self):\n         \"\"\"Return a new :class:`.Pool`, of the same class as this one\n         and configured with identical creation arguments.\n \n-        This method is used in conjunection with :meth:`dispose`\n+        This method is used in conjunction with :meth:`dispose`\n         to close out an entire :class:`.Pool` and create a new one in\n         its place.\n "
    },
    {
        "commit_id": "b4af17b342162f54ae097eb13d52185e24be196c",
        "commit_message": "Merge pull request #130 from gthb/docfix-1\n\nFix doc typos and copy-paste error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b4af17b342162f54ae097eb13d52185e24be196c",
        "buggy_code": "options in conjunection with column-only entities, or",
        "fixed_code": "options in conjunction with column-only entities, or",
        "patch": "@@ -497,7 +497,7 @@ def test_chained_plus_multi(self):\n \n class OptionsNoPropTest(_fixtures.FixtureTest):\n     \"\"\"test the error messages emitted when using property\n-    options in conjunection with column-only entities, or\n+    options in conjunction with column-only entities, or\n     for not existing options\n \n     \"\"\""
    },
    {
        "commit_id": "a12fcd1487f6ae210486fa4a015d9ea71e3bb7d7",
        "commit_message": "Fix doc typo 'conjunection'",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a12fcd1487f6ae210486fa4a015d9ea71e3bb7d7",
        "buggy_code": "This method is used in conjunection with :meth:`dispose`",
        "fixed_code": "This method is used in conjunction with :meth:`dispose`",
        "patch": "@@ -305,7 +305,7 @@ def recreate(self):\n         \"\"\"Return a new :class:`.Pool`, of the same class as this one\n         and configured with identical creation arguments.\n \n-        This method is used in conjunection with :meth:`dispose`\n+        This method is used in conjunction with :meth:`dispose`\n         to close out an entire :class:`.Pool` and create a new one in\n         its place.\n "
    },
    {
        "commit_id": "a12fcd1487f6ae210486fa4a015d9ea71e3bb7d7",
        "commit_message": "Fix doc typo 'conjunection'",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a12fcd1487f6ae210486fa4a015d9ea71e3bb7d7",
        "buggy_code": "options in conjunection with column-only entities, or",
        "fixed_code": "options in conjunction with column-only entities, or",
        "patch": "@@ -497,7 +497,7 @@ def test_chained_plus_multi(self):\n \n class OptionsNoPropTest(_fixtures.FixtureTest):\n     \"\"\"test the error messages emitted when using property\n-    options in conjunection with column-only entities, or\n+    options in conjunction with column-only entities, or\n     for not existing options\n \n     \"\"\""
    },
    {
        "commit_id": "374173e89d4e21a75bfabd8a655d17c247b6f1fc",
        "commit_message": "- fix link",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/374173e89d4e21a75bfabd8a655d17c247b6f1fc",
        "buggy_code": "implies that the :paramref:`.Insert.inline` flag is set to",
        "fixed_code": "implies that the :paramref:`.insert.inline` flag is set to",
        "patch": "@@ -508,7 +508,7 @@ def from_select(self, names, select):\n          correspond.\n \n         .. versionchanged:: 1.0.0 an INSERT that uses FROM SELECT\n-           implies that the :paramref:`.Insert.inline` flag is set to\n+           implies that the :paramref:`.insert.inline` flag is set to\n            True, indicating that the statement will not attempt to fetch\n            the \"last inserted primary key\" or other defaults.  The statement\n            deals with an arbitrary number of rows, so the"
    },
    {
        "commit_id": "7c80e521f00a52254678acb7dab632be3e6d0119",
        "commit_message": "- Fixed bug in CTE where ``literal_binds`` compiler argument would not\nbe always be correctly propagated when one CTE referred to another\naliased CTE in a statement.\nFixes #3154",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c80e521f00a52254678acb7dab632be3e6d0119",
        "buggy_code": "self.visit_cte(orig_cte)",
        "fixed_code": "self.visit_cte(orig_cte, **kwargs)",
        "patch": "@@ -1120,7 +1120,7 @@ def visit_cte(self, cte, asfrom=False, ashint=False,\n         if cte._cte_alias is not None:\n             orig_cte = cte._cte_alias\n             if orig_cte not in self.ctes:\n-                self.visit_cte(orig_cte)\n+                self.visit_cte(orig_cte, **kwargs)\n             cte_alias_name = cte._cte_alias.name\n             if isinstance(cte_alias_name, elements._truncated_label):\n                 cte_alias_name = self._truncated_identifier("
    },
    {
        "commit_id": "ba58708643d21106ff6f752df507c6d987e4d7b5",
        "commit_message": "Fix argument to array() in array._bind_param()\n\narray.__init__() expects a list as its sole parameter but inside _bind_param(), instead of sending a list it's sending each item in the list as a separate argument which is incorrect.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba58708643d21106ff6f752df507c6d987e4d7b5",
        "buggy_code": "return array(*[",
        "fixed_code": "return array([",
        "patch": "@@ -695,7 +695,7 @@ def __init__(self, clauses, **kw):\n         self.type = ARRAY(self.type)\n \n     def _bind_param(self, operator, obj):\n-        return array(*[\n+        return array([\n             expression.BindParameter(None, o, _compared_to_operator=operator,\n                                      _compared_to_type=self.type, unique=True)\n             for o in obj"
    },
    {
        "commit_id": "72ac9c189248c726e3ed04e5fe2e6b7ec599d24c",
        "commit_message": "Merge pull request #120 from bogkyu/pr_fix_docgen\n\nFix doc gen on Windows platform",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/72ac9c189248c726e3ed04e5fe2e6b7ec599d24c",
        "buggy_code": "sourcefile = self.state.document.current_source.split(\":\")[0]",
        "fixed_code": "sourcefile = self.state.document.current_source.split(os.pathsep)[0]",
        "patch": "@@ -167,7 +167,7 @@ def run(self):\n         env = self.state.document.settings.env\n         self.docname = env.docname\n \n-        sourcefile = self.state.document.current_source.split(\":\")[0]\n+        sourcefile = self.state.document.current_source.split(os.pathsep)[0]\n         dir_ = os.path.dirname(sourcefile)\n         files = [\n             f for f in os.listdir(dir_) if f.endswith(\".py\")"
    },
    {
        "commit_id": "0cd79fb1f50b28dff50e394ffb9066919aea947c",
        "commit_message": "Fix doc gen on Windows platform\n\n- replaced hardcoded \":\" path separator with OS dependent one.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0cd79fb1f50b28dff50e394ffb9066919aea947c",
        "buggy_code": "sourcefile = self.state.document.current_source.split(\":\")[0]",
        "fixed_code": "sourcefile = self.state.document.current_source.split(os.pathsep)[0]",
        "patch": "@@ -167,7 +167,7 @@ def run(self):\n         env = self.state.document.settings.env\n         self.docname = env.docname\n \n-        sourcefile = self.state.document.current_source.split(\":\")[0]\n+        sourcefile = self.state.document.current_source.split(os.pathsep)[0]\n         dir_ = os.path.dirname(sourcefile)\n         files = [\n             f for f in os.listdir(dir_) if f.endswith(\".py\")"
    },
    {
        "commit_id": "a49ec1cf778811fb3717bd0ace183ba0ea5ba4d4",
        "commit_message": "- Added a \"str()\" step to the dialect_kwargs iteration for\nPython version < 2.6.5, working around the\n\"no unicode keyword arg\" bug as these args are passed along as\nkeyword args within some reflection processes.\nfixes #3123",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a49ec1cf778811fb3717bd0ace183ba0ea5ba4d4",
        "buggy_code": "\"%s_%s\" % (dialect_name, value_name)",
        "fixed_code": "util.safe_kwarg(\"%s_%s\" % (dialect_name, value_name))",
        "patch": "@@ -90,7 +90,7 @@ def __len__(self):\n \n     def __iter__(self):\n         return (\n-            \"%s_%s\" % (dialect_name, value_name)\n+            util.safe_kwarg(\"%s_%s\" % (dialect_name, value_name))\n             for dialect_name in self.obj.dialect_options\n             for value_name in self.obj.dialect_options[dialect_name]._non_defaults\n         )"
    },
    {
        "commit_id": "99350b159f736fe8c2c95eabb4d332d9fab73eb9",
        "commit_message": "- Fixed bug where \"python setup.py test\" wasn't calling into\ndistutils appropriately, and errors would be emitted at the end\nof the test suite.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/99350b159f736fe8c2c95eabb4d332d9fab73eb9",
        "buggy_code": "test_suite=\"pytest.main\",",
        "fixed_code": "test_suite=\"sqlalchemy.testing.distutils_run\",",
        "patch": "@@ -129,7 +129,7 @@ def run_setup(with_cext):\n         license=\"MIT License\",\n         cmdclass=cmdclass,\n         tests_require=['pytest >= 2.5.2', 'mock'],\n-        test_suite=\"pytest.main\",\n+        test_suite=\"sqlalchemy.testing.distutils_run\",\n         long_description=readme,\n         classifiers=[\n             \"Development Status :: 5 - Production/Stable\","
    },
    {
        "commit_id": "3ea154fbf5dbda642141a5867afac6b0fc97e3cb",
        "commit_message": "- MySQL error 2014 \"commands out of sync\" appears to be raised as a\nProgrammingError, not OperationalError, in modern MySQL-Python versions;\nall MySQL error codes that are tested for \"is disconnect\" are now\nchecked within OperationalError and ProgrammingError regardless.\nfixes #3101",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ea154fbf5dbda642141a5867afac6b0fc97e3cb",
        "buggy_code": "if isinstance(e, self.dbapi.OperationalError):",
        "fixed_code": "if isinstance(e, (self.dbapi.OperationalError, self.dbapi.ProgrammingError)):",
        "patch": "@@ -2225,7 +2225,7 @@ def do_recover_twophase(self, connection):\n         return [row['data'][0:row['gtrid_length']] for row in resultset]\n \n     def is_disconnect(self, e, connection, cursor):\n-        if isinstance(e, self.dbapi.OperationalError):\n+        if isinstance(e, (self.dbapi.OperationalError, self.dbapi.ProgrammingError)):\n             return self._extract_error_code(e) in \\\n                         (2006, 2013, 2014, 2045, 2055)\n         elif isinstance(e, self.dbapi.InterfaceError):"
    },
    {
        "commit_id": "ca58fa5d9338b6dfaa56b25c5affa369188a7086",
        "commit_message": "- Fixed bug when the declarative ``__abstract__`` flag was not being\ndistinguished for when it was actually the value ``False``.\nThe ``__abstract__`` flag needs to acutally evaluate to a True\nvalue at the level being tested.\nfixes #3097",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ca58fa5d9338b6dfaa56b25c5affa369188a7086",
        "buggy_code": "if '__abstract__' in base.__dict__:",
        "fixed_code": "if '__abstract__' in base.__dict__ and base.__abstract__:",
        "patch": "@@ -56,7 +56,7 @@ def go():\n             @event.listens_for(mapper, \"before_configured\")\n             def go():\n                 cls.__declare_first__()\n-        if '__abstract__' in base.__dict__:\n+        if '__abstract__' in base.__dict__ and base.__abstract__:\n             if (base is cls or\n                 (base in cls.__bases__ and not _is_declarative_inherits)\n             ):"
    },
    {
        "commit_id": "7e7447db1ff1a49f15269f6515a82607db9384f4",
        "commit_message": "- Reverted the change for :ticket:`3060` - this is a unit of work\nfix that is updated more comprehensively in 1.0 via :ticket:`3061`.\nThe fix in :ticket:`3060` unfortunately produces a new issue whereby\nan eager load of a many-to-one attribute can produce an event\nthat is interpreted into an attribute change.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7e7447db1ff1a49f15269f6515a82607db9384f4",
        "buggy_code": "against as _against, _server_version, only_if",
        "fixed_code": "against as _against, _server_version, only_if, fails",
        "patch": "@@ -11,7 +11,7 @@\n \n from .exclusions import db_spec, _is_excluded, fails_if, skip_if, future,\\\n     fails_on, fails_on_everything_except, skip, only_on, exclude, \\\n-    against as _against, _server_version, only_if\n+    against as _against, _server_version, only_if, fails\n \n \n def against(*queries):"
    },
    {
        "commit_id": "482a67e1c68d3123ab91f8141ae58c7daa88e6db",
        "commit_message": "- Fixed bug in INSERT..FROM SELECT construct where selecting from a\nUNION would wrap the union in an anonymous (e.g. unlabled) subquery.\nfixes #3044",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/482a67e1c68d3123ab91f8141ae58c7daa88e6db",
        "buggy_code": "if not isinstance(element, Select):",
        "fixed_code": "if not isinstance(element, SelectBase):",
        "patch": "@@ -44,7 +44,7 @@ def _interpret_as_select(element):\n     element = _interpret_as_from(element)\n     if isinstance(element, Alias):\n         element = element.original\n-    if not isinstance(element, Select):\n+    if not isinstance(element, SelectBase):\n         element = element.select()\n     return element\n "
    },
    {
        "commit_id": "95b10c4e8e59cf2509ba5d90a03341d74f93d164",
        "commit_message": "- Fixed bug in subquery eager loading where a long chain of\neager loads across a polymorphic-subclass boundary in conjunction\nwith polymorphic loading would fail to locate the subclass-link in the\nchain, erroring out with a missing property name on an\n:class:`.AliasedClass`. fixes #3055",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/95b10c4e8e59cf2509ba5d90a03341d74f93d164",
        "buggy_code": "attr = key",
        "fixed_code": "attr = getattr(mapper.entity, key)",
        "patch": "@@ -885,7 +885,7 @@ def _apply_joins(self, q, to_join, left_alias, parent_alias,\n                     attr = getattr(parent_alias, key).\\\n                                     of_type(effective_entity)\n                 else:\n-                    attr = key\n+                    attr = getattr(mapper.entity, key)\n \n             if second_to_last:\n                 q = q.join(parent_alias, attr, from_joinpoint=True)"
    },
    {
        "commit_id": "f9adac0a34e49bacfc02cb18a899b4ae757754dd",
        "commit_message": "- fix some identity map accessors\n- fix a bad comparison in MySQL w/ limit/offset thing",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f9adac0a34e49bacfc02cb18a899b4ae757754dd",
        "buggy_code": "if (limit_clause, offset_clause) == (None, None):",
        "fixed_code": "if limit_clause is None and offset_clause is None:",
        "patch": "@@ -1570,7 +1570,7 @@ def limit_clause(self, select):\n \n         limit_clause, offset_clause = select._limit_clause, select._offset_clause\n \n-        if (limit_clause, offset_clause) == (None, None):\n+        if limit_clause is None and offset_clause is None:\n             return ''\n         elif offset_clause is not None:\n             # As suggested by the MySQL docs, need to apply an"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "\"\"\" MS-SQL puts TOP, it's version of LIMIT here \"\"\"",
        "fixed_code": "\"\"\" MS-SQL puts TOP, its version of LIMIT, here \"\"\"",
        "patch": "@@ -740,7 +740,7 @@ def visit_match_op_binary(self, binary, operator, **kw):\n                                         self.process(binary.right, **kw))\n \n     def get_select_precolumns(self, select):\n-        \"\"\" MS-SQL puts TOP, it's version of LIMIT here \"\"\"\n+        \"\"\" MS-SQL puts TOP, its version of LIMIT, here \"\"\"\n         if select._distinct or select._limit is not None:\n             s = select._distinct and \"DISTINCT \" or \"\"\n "
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "\"%r - it's type %r is not supported by\"",
        "fixed_code": "\"%r - its type %r is not supported by\"",
        "patch": "@@ -499,7 +499,7 @@ def pre_exec(self):\n                     if dbtype is None:\n                         raise exc.InvalidRequestError(\n                                     \"Cannot create out parameter for parameter \"\n-                                    \"%r - it's type %r is not supported by\"\n+                                    \"%r - its type %r is not supported by\"\n                                     \" cx_oracle\" %\n                                     (bindparam.key, bindparam.type)\n                                     )"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "\"entry point\" class into this package is the Engine and it's public",
        "fixed_code": "\"entry point\" class into this package is the Engine and its public",
        "patch": "@@ -9,7 +9,7 @@\n The engine package defines the basic components used to interface\n DB-API modules with higher-level statement construction,\n connection-management, execution and result contexts.  The primary\n-\"entry point\" class into this package is the Engine and it's public\n+\"entry point\" class into this package is the Engine and its public\n constructor ``create_engine()``.\n \n This package includes:"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "would be discarded immediately, which is implicit if used as in::",
        "fixed_code": "will be discarded immediately, which is implicit if used as in::",
        "patch": "@@ -122,7 +122,7 @@ def execution_options(self, **opt):\n         execution options which will take effect for a call to\n         :meth:`execute`. As the new :class:`.Connection` references the same\n         underlying resource, it's usually a good idea to ensure that the copies\n-        would be discarded immediately, which is implicit if used as in::\n+        will be discarded immediately, which is implicit if used as in::\n \n             result = connection.execution_options(stream_results=True).\\\\\n                                 execute(stmt)"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "it's public attributes represent different kinds of events.   These attributes",
        "fixed_code": "its public attributes represent different kinds of events.   These attributes",
        "patch": "@@ -7,7 +7,7 @@\n \"\"\"Base implementation classes.\n \n The public-facing ``Events`` serves as the base class for an event interface;\n-it's public attributes represent different kinds of events.   These attributes\n+its public attributes represent different kinds of events.   These attributes\n are mirrored onto a ``_Dispatch`` class, which serves as a container for\n collections of listener functions.   These collections are represented both\n at the class level of a particular ``_Dispatch`` class as well as within"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "that is of the highest value - it's equivalent to Python's ``max``",
        "fixed_code": "that is of the highest value - its equivalent to Python's ``max``",
        "patch": "@@ -319,7 +319,7 @@ def ms_utcnow(element, compiler, **kw):\n -------------------\n \n The \"GREATEST\" function is given any number of arguments and returns the one\n-that is of the highest value - it's equivalent to Python's ``max``\n+that is of the highest value - its equivalent to Python's ``max``\n function.  A SQL standard version versus a CASE based version which only\n accommodates two arguments::\n "
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "it's sole job is to adapt the value the user provides into an iterable",
        "fixed_code": "its sole job is to adapt the value the user provides into an iterable",
        "patch": "@@ -445,7 +445,7 @@ def converter(fn):\n         The converter method will receive the object being assigned and should\n         return an iterable of values suitable for use by the ``appender``\n         method.  A converter must not assign values or mutate the collection,\n-        it's sole job is to adapt the value the user provides into an iterable\n+        its sole job is to adapt the value the user provides into an iterable\n         of values for the ORM's use.\n \n         The default converter implementation will use duck-typing to do the"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "as it's single argument.",
        "fixed_code": "as its single argument.",
        "patch": "@@ -414,7 +414,7 @@ def __init__(self, *args, **kwargs):\n \n class next_value(GenericFunction):\n     \"\"\"Represent the 'next value', given a :class:`.Sequence`\n-    as it's single argument.\n+    as its single argument.\n \n     Compiles into the appropriate function on each backend,\n     or will raise NotImplementedError if used on a backend"
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "\" with this Column object until it's 'name' has \"",
        "fixed_code": "\" with this Column object until its 'name' has \"",
        "patch": "@@ -1241,7 +1241,7 @@ def _make_proxy(self, selectable, name=None, key=None,\n                 for f in self.foreign_keys]\n         if name is None and self.name is None:\n             raise exc.InvalidRequestError(\"Cannot initialize a sub-selectable\"\n-                    \" with this Column object until it's 'name' has \"\n+                    \" with this Column object until its 'name' has \"\n                     \"been assigned.\")\n         try:\n             c = self._constructor("
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "If the given selectable hasn't populated it's .c. collection yet,",
        "fixed_code": "If the given selectable hasn't populated its .c. collection yet,",
        "patch": "@@ -469,7 +469,7 @@ def _refresh_for_new_column(self, column):\n         to its .c. collection when a Column has been added to one of the\n         Table objects it ultimtely derives from.\n \n-        If the given selectable hasn't populated it's .c. collection yet,\n+        If the given selectable hasn't populated its .c. collection yet,\n         it should at least pass on the message to the contained selectables,\n         but it will return None.\n "
    },
    {
        "commit_id": "1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "commit_message": "Merge pull request #91 from smurfix/de_apostroph_ify\n\nDocumentation fix-up: \"its\" vs. \"it's\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1abd53a3556b9593d9eba868d69c13bae3c3a7ab",
        "buggy_code": "created, after a check is performed for it's existence. The type is",
        "fixed_code": "created, after a check is performed for its existence. The type is",
        "patch": "@@ -1054,7 +1054,7 @@ def __init__(self, *enums, **kw):\n            operations. If the type is not associated with any ``MetaData``\n            object, it will associate itself with each ``Table`` in which it is\n            used, and will be created when any of those individual tables are\n-           created, after a check is performed for it's existence. The type is\n+           created, after a check is performed for its existence. The type is\n            only dropped when ``drop_all()`` is called for that ``Table``\n            object's metadata, however.\n "
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "\"\"\" MS-SQL puts TOP, it's version of LIMIT here \"\"\"",
        "fixed_code": "\"\"\" MS-SQL puts TOP, its version of LIMIT, here \"\"\"",
        "patch": "@@ -740,7 +740,7 @@ def visit_match_op_binary(self, binary, operator, **kw):\n                                         self.process(binary.right, **kw))\n \n     def get_select_precolumns(self, select):\n-        \"\"\" MS-SQL puts TOP, it's version of LIMIT here \"\"\"\n+        \"\"\" MS-SQL puts TOP, its version of LIMIT, here \"\"\"\n         if select._distinct or select._limit is not None:\n             s = select._distinct and \"DISTINCT \" or \"\"\n "
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "\"%r - it's type %r is not supported by\"",
        "fixed_code": "\"%r - its type %r is not supported by\"",
        "patch": "@@ -499,7 +499,7 @@ def pre_exec(self):\n                     if dbtype is None:\n                         raise exc.InvalidRequestError(\n                                     \"Cannot create out parameter for parameter \"\n-                                    \"%r - it's type %r is not supported by\"\n+                                    \"%r - its type %r is not supported by\"\n                                     \" cx_oracle\" %\n                                     (bindparam.key, bindparam.type)\n                                     )"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "\"entry point\" class into this package is the Engine and it's public",
        "fixed_code": "\"entry point\" class into this package is the Engine and its public",
        "patch": "@@ -9,7 +9,7 @@\n The engine package defines the basic components used to interface\n DB-API modules with higher-level statement construction,\n connection-management, execution and result contexts.  The primary\n-\"entry point\" class into this package is the Engine and it's public\n+\"entry point\" class into this package is the Engine and its public\n constructor ``create_engine()``.\n \n This package includes:"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "would be discarded immediately, which is implicit if used as in::",
        "fixed_code": "will be discarded immediately, which is implicit if used as in::",
        "patch": "@@ -122,7 +122,7 @@ def execution_options(self, **opt):\n         execution options which will take effect for a call to\n         :meth:`execute`. As the new :class:`.Connection` references the same\n         underlying resource, it's usually a good idea to ensure that the copies\n-        would be discarded immediately, which is implicit if used as in::\n+        will be discarded immediately, which is implicit if used as in::\n \n             result = connection.execution_options(stream_results=True).\\\\\n                                 execute(stmt)"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "it's public attributes represent different kinds of events.   These attributes",
        "fixed_code": "its public attributes represent different kinds of events.   These attributes",
        "patch": "@@ -7,7 +7,7 @@\n \"\"\"Base implementation classes.\n \n The public-facing ``Events`` serves as the base class for an event interface;\n-it's public attributes represent different kinds of events.   These attributes\n+its public attributes represent different kinds of events.   These attributes\n are mirrored onto a ``_Dispatch`` class, which serves as a container for\n collections of listener functions.   These collections are represented both\n at the class level of a particular ``_Dispatch`` class as well as within"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "that is of the highest value - it's equivalent to Python's ``max``",
        "fixed_code": "that is of the highest value - its equivalent to Python's ``max``",
        "patch": "@@ -319,7 +319,7 @@ def ms_utcnow(element, compiler, **kw):\n -------------------\n \n The \"GREATEST\" function is given any number of arguments and returns the one\n-that is of the highest value - it's equivalent to Python's ``max``\n+that is of the highest value - its equivalent to Python's ``max``\n function.  A SQL standard version versus a CASE based version which only\n accommodates two arguments::\n "
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "it's sole job is to adapt the value the user provides into an iterable",
        "fixed_code": "its sole job is to adapt the value the user provides into an iterable",
        "patch": "@@ -445,7 +445,7 @@ def converter(fn):\n         The converter method will receive the object being assigned and should\n         return an iterable of values suitable for use by the ``appender``\n         method.  A converter must not assign values or mutate the collection,\n-        it's sole job is to adapt the value the user provides into an iterable\n+        its sole job is to adapt the value the user provides into an iterable\n         of values for the ORM's use.\n \n         The default converter implementation will use duck-typing to do the"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "as it's single argument.",
        "fixed_code": "as its single argument.",
        "patch": "@@ -414,7 +414,7 @@ def __init__(self, *args, **kwargs):\n \n class next_value(GenericFunction):\n     \"\"\"Represent the 'next value', given a :class:`.Sequence`\n-    as it's single argument.\n+    as its single argument.\n \n     Compiles into the appropriate function on each backend,\n     or will raise NotImplementedError if used on a backend"
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "\" with this Column object until it's 'name' has \"",
        "fixed_code": "\" with this Column object until its 'name' has \"",
        "patch": "@@ -1241,7 +1241,7 @@ def _make_proxy(self, selectable, name=None, key=None,\n                 for f in self.foreign_keys]\n         if name is None and self.name is None:\n             raise exc.InvalidRequestError(\"Cannot initialize a sub-selectable\"\n-                    \" with this Column object until it's 'name' has \"\n+                    \" with this Column object until its 'name' has \"\n                     \"been assigned.\")\n         try:\n             c = self._constructor("
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "If the given selectable hasn't populated it's .c. collection yet,",
        "fixed_code": "If the given selectable hasn't populated its .c. collection yet,",
        "patch": "@@ -469,7 +469,7 @@ def _refresh_for_new_column(self, column):\n         to its .c. collection when a Column has been added to one of the\n         Table objects it ultimtely derives from.\n \n-        If the given selectable hasn't populated it's .c. collection yet,\n+        If the given selectable hasn't populated its .c. collection yet,\n         it should at least pass on the message to the contained selectables,\n         but it will return None.\n "
    },
    {
        "commit_id": "f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "commit_message": "Documentation fix-up: \"its\" vs. \"it's\"\n\nRemoved ungrammatical apostrophes from documentation, replacing\n\"it's\" with \"its\" where appropriate (but in a few cases with \"it is\"\nwhen that read better).\n\nWhile doing that, I also fixed a couple of minor typos etc.\nas I noticed them.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f341cfbfe117e777569d58eb6d2c3d3f7fe7bbf3",
        "buggy_code": "created, after a check is performed for it's existence. The type is",
        "fixed_code": "created, after a check is performed for its existence. The type is",
        "patch": "@@ -1054,7 +1054,7 @@ def __init__(self, *enums, **kw):\n            operations. If the type is not associated with any ``MetaData``\n            object, it will associate itself with each ``Table`` in which it is\n            used, and will be created when any of those individual tables are\n-           created, after a check is performed for it's existence. The type is\n+           created, after a check is performed for its existence. The type is\n            only dropped when ``drop_all()`` is called for that ``Table``\n            object's metadata, however.\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "pk so we just return all shard ids. often, youd want to do some",
        "fixed_code": "pk so we just return all shard ids. often, you'd want to do some",
        "patch": "@@ -109,7 +109,7 @@ def id_chooser(query, ident):\n \n     given a primary key, returns a list of shards\n     to search.  here, we don't have any particular information from a\n-    pk so we just return all shard ids. often, youd want to do some\n+    pk so we just return all shard ids. often, you'd want to do some\n     kind of round-robin strategy here so that requests are evenly\n     distributed among DBs.\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "below for futher information.",
        "fixed_code": "below for further information.",
        "patch": "@@ -24,7 +24,7 @@\n \n * ``concurrency_level`` - set the backend policy with regards to threading\n   issues: by default SQLAlchemy uses policy 1.  See the linked documents\n-  below for futher information.\n+  below for further information.\n \n .. seealso::\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "overriden via a ``create_engine`` URL parameter.",
        "fixed_code": "overridden via a ``create_engine`` URL parameter.",
        "patch": "@@ -19,7 +19,7 @@\n zxjdbc/JDBC layer. To allow multiple character sets to be sent from the\n MySQL Connector/J JDBC driver, by default SQLAlchemy sets its\n ``characterEncoding`` connection property to ``UTF-8``. It may be\n-overriden via a ``create_engine`` URL parameter.\n+overridden via a ``create_engine`` URL parameter.\n \n \"\"\"\n import re"
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "\"\"\"Parse an hstore from it's literal string representation.",
        "fixed_code": "\"\"\"Parse an hstore from its literal string representation.",
        "patch": "@@ -52,7 +52,7 @@ def _parse_error(hstore_str, pos):\n \n \n def _parse_hstore(hstore_str):\n-    \"\"\"Parse an hstore from it's literal string representation.\n+    \"\"\"Parse an hstore from its literal string representation.\n \n     Attempts to approximate PG's hstore input parsing rules as closely as\n     possible. Although currently this is not strictly necessary, since the"
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "3. As the :class:`.ForeignKeyConstraint` we are examining correponds to a reference",
        "fixed_code": "3. As the :class:`.ForeignKeyConstraint` we are examining corresponds to a reference",
        "patch": "@@ -231,7 +231,7 @@ def pluralize_collection(base, local_cls, referred_cls, constraint):\n    object present is matched up to the class to which it is to be mapped,\n    if any, else it is skipped.\n \n-3. As the :class:`.ForeignKeyConstraint` we are examining correponds to a reference\n+3. As the :class:`.ForeignKeyConstraint` we are examining corresponds to a reference\n    from the immediate mapped class,\n    the relationship will be set up as a many-to-one referring to the referred class;\n    a corresponding one-to-many backref will be created on the referred class referring"
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "to lessen the impact of this lmitation, however this does not take place",
        "fixed_code": "to lessen the impact of this limitation, however this does not take place",
        "patch": "@@ -103,7 +103,7 @@ class Bullet(Base):\n       SQLAlchemy's unit of work performs all INSERTs before DELETEs within a\n       single flush.  In the case of a primary key, it will trade\n       an INSERT/DELETE of the same primary key for an UPDATE statement in order\n-      to lessen the impact of this lmitation, however this does not take place\n+      to lessen the impact of this limitation, however this does not take place\n       for a UNIQUE column.\n       A future feature will allow the \"DELETE before INSERT\" behavior to be\n       possible, allevating this limitation, though this feature will require"
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "expression itself does not have it's own ``.info`` attribute",
        "fixed_code": "expression itself does not have its own ``.info`` attribute",
        "patch": "@@ -98,7 +98,7 @@ def info(self):\n           any other kind of SQL expression other than a :class:`.Column`,\n           the attribute will refer to the :attr:`.MapperProperty.info` dictionary\n           associated directly with the :class:`.ColumnProperty`, assuming the SQL\n-          expression itself does not have it's own ``.info`` attribute\n+          expression itself does not have its own ``.info`` attribute\n           (which should be the case, unless a user-defined SQL construct\n           has defined one).\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": ":ref:`self_referential` - in-depth explaination of how",
        "fixed_code": ":ref:`self_referential` - in-depth explanation of how",
        "patch": "@@ -666,7 +666,7 @@ class Parent(Base):\n \n           .. seealso::\n \n-            :ref:`self_referential` - in-depth explaination of how\n+            :ref:`self_referential` - in-depth explanation of how\n             :paramref:`~.relationship.remote_side`\n             is used to configure self-referential relationships.\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "\"\"\"Compatiblity namespace for sqlalchemy.sql.schema and related.",
        "fixed_code": "\"\"\"Compatibility namespace for sqlalchemy.sql.schema and related.",
        "patch": "@@ -4,7 +4,7 @@\n # This module is part of SQLAlchemy and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n-\"\"\"Compatiblity namespace for sqlalchemy.sql.schema and related.\n+\"\"\"Compatibility namespace for sqlalchemy.sql.schema and related.\n \n \"\"\"\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "assert False, \"Stray conections in cleanup: %s\" % err",
        "fixed_code": "assert False, \"Stray connections in cleanup: %s\" % err",
        "patch": "@@ -172,7 +172,7 @@ def _assert_no_stray_pool_connections():\n         # so the error doesn't at least keep happening.\n         pool._refs.clear()\n         _STRAY_CONNECTION_FAILURES = 0\n-        assert False, \"Stray conections in cleanup: %s\" % err\n+        assert False, \"Stray connections in cleanup: %s\" % err\n \n \n def eq_(a, b, msg=None):"
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "to provide specific inclusion/exlusions.",
        "fixed_code": "to provide specific inclusion/exclusions.",
        "patch": "@@ -10,7 +10,7 @@\n target database.\n \n External dialect test suites should subclass SuiteRequirements\n-to provide specific inclusion/exlusions.\n+to provide specific inclusion/exclusions.\n \n \"\"\"\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "\"\"\"Compatiblity namespace for sqlalchemy.sql.types.",
        "fixed_code": "\"\"\"Compatibility namespace for sqlalchemy.sql.types.",
        "patch": "@@ -4,7 +4,7 @@\n # This module is part of SQLAlchemy and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n-\"\"\"Compatiblity namespace for sqlalchemy.sql.types.\n+\"\"\"Compatibility namespace for sqlalchemy.sql.types.\n \n \"\"\"\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "pass along unrecognized keywords to it's base classes, and the collection",
        "fixed_code": "pass along unrecognized keywords to its base classes, and the collection",
        "patch": "@@ -200,7 +200,7 @@ def get_cls_kwargs(cls, _set=None):\n \n     Probes a class's __init__ method, collecting all named arguments.  If the\n     __init__ defines a \\**kwargs catch-all, then the constructor is presumed to\n-    pass along unrecognized keywords to it's base classes, and the collection\n+    pass along unrecognized keywords to its base classes, and the collection\n     process is repeated recursively on each of the bases.\n \n     Uses a subset of inspect.getargspec() to cut down on method overhead."
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "datetime with a tzinfo to a datetime that doesnt have one.  this",
        "fixed_code": "datetime with a tzinfo to a datetime that doesn't have one.  this",
        "patch": "@@ -374,7 +374,7 @@ class TimezoneTest(fixtures.TestBase):\n \n     psycopg will return a datetime with a tzinfo attached to it, if\n     postgresql returns it.  python then will not let you compare a\n-    datetime with a tzinfo to a datetime that doesnt have one.  this\n+    datetime with a tzinfo to a datetime that doesn't have one.  this\n     test illustrates two ways to have datetime types with and without\n     timezone info. \"\"\"\n "
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "\"Older versions dont support cursor pickling, newer ones do\")",
        "fixed_code": "\"Older versions don't support cursor pickling, newer ones do\")",
        "patch": "@@ -282,7 +282,7 @@ def test_stmt_exception_pickleable_no_dbapi(self):\n         self._test_stmt_exception_pickleable(Exception(\"hello world\"))\n \n     @testing.crashes(\"postgresql+psycopg2\",\n-                \"Older versions dont support cursor pickling, newer ones do\")\n+                \"Older versions don't support cursor pickling, newer ones do\")\n     @testing.fails_on(\"mysql+oursql\",\n                 \"Exception doesn't come back exactly the same from pickle\")\n     @testing.fails_on(\"mysql+mysqlconnector\","
    },
    {
        "commit_id": "1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "commit_message": "Fix many typos throughout the codebase\n\nFound using: https://github.com/intgr/topy",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1caa7fafbd3c9870e1bf2b2ac623872447fc804e",
        "buggy_code": "Or, that bi-directional eager loads dont include each other in eager",
        "fixed_code": "Or, that bi-directional eager loads don't include each other in eager",
        "patch": "@@ -289,7 +289,7 @@ def setup_mappers(cls):\n     def test_eager_terminate(self):\n         \"\"\"Eager query generation does not include the same mapper's table twice.\n \n-        Or, that bi-directional eager loads dont include each other in eager\n+        Or, that bi-directional eager loads don't include each other in eager\n         query generation.\n \n         \"\"\""
    },
    {
        "commit_id": "fcda519452cf5e0cdbde7569ab32459b9f314f7a",
        "commit_message": "- Fixed regression introduced in 0.9 where new \"ORDER BY <labelname>\"\nfeature from :ticket:`1068` would not apply quoting rules to the\nlabel name as rendered in the ORDER BY.\nfix #3020, re: #1068",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fcda519452cf5e0cdbde7569ab32459b9f314f7a",
        "buggy_code": "return labelname",
        "fixed_code": "return self.preparer.format_label(label, labelname)",
        "patch": "@@ -521,7 +521,7 @@ def visit_label(self, label,\n                         OPERATORS[operators.as_] + \\\n                         self.preparer.format_label(label, labelname)\n         elif render_label_only:\n-            return labelname\n+            return self.preparer.format_label(label, labelname)\n         else:\n             return label.element._compiler_dispatch(self,\n                                     within_columns_clause=False,"
    },
    {
        "commit_id": "28aaa593879738861f0b901044d02d37d2694c58",
        "commit_message": "- fix set syntax supposed to be dict",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/28aaa593879738861f0b901044d02d37d2694c58",
        "buggy_code": "constraints = {key, constraints[key]}",
        "fixed_code": "constraints = {key: constraints[key]}",
        "patch": "@@ -741,7 +741,7 @@ def _join_condition(cls, a, b, ignore_nonexistent_tables=False,\n                 dedupe = set(tuple(crit) for crit in constraints.values())\n                 if len(dedupe) == 1:\n                     key = constraints.keys()[0]\n-                    constraints = {key, constraints[key]}\n+                    constraints = {key: constraints[key]}\n \n             if len(constraints) != 1:\n                 raise exc.AmbiguousForeignKeysError("
    },
    {
        "commit_id": "610e0594e249cd0bb28cb2bd4a7624f63f4510bb",
        "commit_message": "- fix py3k bug re: dictionary values(), fixes #3005",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/610e0594e249cd0bb28cb2bd4a7624f63f4510bb",
        "buggy_code": "crit = [(x == y) for x, y in constraints.values()[0]]",
        "fixed_code": "crit = [(x == y) for x, y in list(constraints.values())[0]]",
        "patch": "@@ -761,7 +761,7 @@ def _join_condition(cls, a, b, ignore_nonexistent_tables=False,\n                 \"Can't find any foreign key relationships \"\n                 \"between '%s' and '%s'.%s\" % (a.description, b.description, hint))\n \n-        crit = [(x == y) for x, y in constraints.values()[0]]\n+        crit = [(x == y) for x, y in list(constraints.values())[0]]\n         if len(crit) == 1:\n             return (crit[0])\n         else:"
    },
    {
        "commit_id": "1a35188b6903a48999ebbd1aeeec0114d3cbe7d3",
        "commit_message": "- Fixed regression caused by release 0.8.5 / 0.9.3's compatibility\nenhancements where index reflection on Postgresql versions specific\nto only the 8.1, 8.2 series again\nbroke, surrounding the ever problematic int2vector type.  While\nint2vector supports array operations as of 8.1, apparently it only\nsupports CAST to a varchar as of 8.3.\nfix #3000",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a35188b6903a48999ebbd1aeeec0114d3cbe7d3",
        "buggy_code": "__only_on__ = 'postgresql > 8.2'",
        "fixed_code": "__only_on__ = 'postgresql > 8.3'",
        "patch": "@@ -20,7 +20,7 @@ class DomainReflectionTest(fixtures.TestBase, AssertsExecutionResults):\n \n     \"\"\"Test PostgreSQL domains\"\"\"\n \n-    __only_on__ = 'postgresql > 8.2'\n+    __only_on__ = 'postgresql > 8.3'\n \n     @classmethod\n     def setup_class(cls):"
    },
    {
        "commit_id": "12c8a10b81a42b35a7f6d9b005bacc708934fcab",
        "commit_message": "fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/12c8a10b81a42b35a7f6d9b005bacc708934fcab",
        "buggy_code": "spec = exclusions.db_spec(*util.to_list(cls.__prefer__))",
        "fixed_code": "spec = exclusions.db_spec(*util.to_list(cls.__prefer_backends__))",
        "patch": "@@ -429,7 +429,7 @@ def _do_skips(cls):\n         )\n     elif hasattr(cls, '__prefer_backends__'):\n         non_preferred = set()\n-        spec = exclusions.db_spec(*util.to_list(cls.__prefer__))\n+        spec = exclusions.db_spec(*util.to_list(cls.__prefer_backends__))\n         for config_obj in all_configs:\n             if not spec(config_obj):\n                 non_preferred.add(config_obj)"
    },
    {
        "commit_id": "5d2bfc4df45bd2f3347391c67b975066fdb74723",
        "commit_message": "- Fixed a few errant ``u''`` strings that would prevent tests from passing\nin Py3.2.  Patch courtesy Arfrever Frehtes Taifersar Arahesis. fixes #2980",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5d2bfc4df45bd2f3347391c67b975066fdb74723",
        "buggy_code": "checkparams={u'addresses_name': 'new address', 'name': 'newname'},",
        "fixed_code": "checkparams={'addresses_name': 'new address', 'name': 'newname'},",
        "patch": "@@ -306,7 +306,7 @@ def test_update_from_multitable_same_name_mysql(self):\n                 where(users.c.id == addresses.c.user_id),\n             \"UPDATE users, addresses SET addresses.name=%s, \"\n                 \"users.name=%s WHERE users.id = addresses.user_id\",\n-            checkparams={u'addresses_name': 'new address', 'name': 'newname'},\n+            checkparams={'addresses_name': 'new address', 'name': 'newname'},\n             dialect='mysql'\n         )\n "
    },
    {
        "commit_id": "89a8e0d187b8967c9b8291bcdc3078335704dbfa",
        "commit_message": "fix assertion",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/89a8e0d187b8967c9b8291bcdc3078335704dbfa",
        "buggy_code": "\"Don't know how to join from x; please use select_from() to \"",
        "fixed_code": "\"Don't know how to join from x; please use select_from\\(\\) to \"",
        "patch": "@@ -404,7 +404,7 @@ def test_left_is_none(self):\n \n         assert_raises_message(\n             sa_exc.InvalidRequestError,\n-            \"Don't know how to join from x; please use select_from() to \"\n+            \"Don't know how to join from x; please use select_from\\(\\) to \"\n             \"establish the left entity/selectable of this join\",\n             sess.query(literal_column('x'), User).join, Address\n         )"
    },
    {
        "commit_id": "b9a2b58dd74757184ef94206f09e9db1f536e4cb",
        "commit_message": "- Fixed bug in mutable extension as well as\n:func:`.attributes.flag_modified` where the change event would not be\npropagated if the attribute had been reassigned to itself.\nfixes #2997",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9a2b58dd74757184ef94206f09e9db1f536e4cb",
        "buggy_code": "state._modified_event(dict_, impl, NO_VALUE)",
        "fixed_code": "state._modified_event(dict_, impl, NO_VALUE, force=True)",
        "patch": "@@ -1538,4 +1538,4 @@ def flag_modified(instance, key):\n     \"\"\"\n     state, dict_ = instance_state(instance), instance_dict(instance)\n     impl = state.manager[key].impl\n-    state._modified_event(dict_, impl, NO_VALUE)\n+    state._modified_event(dict_, impl, NO_VALUE, force=True)"
    },
    {
        "commit_id": "d85d6f9a3f1d3132abcd917d4378b2c4e14aec65",
        "commit_message": "- Fixed bug in new :paramref:`.MetaData.naming_convention` feature\nwhere the name of a check constraint making use of the\n`\"%(constraint_name)s\"` token would get doubled up for the\nconstraint generated by a boolean or enum type, and overall\nduplicate events would cause the `\"%(constraint_name)s\"` token\nto keep compounding itself.\nfixes #2991",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d85d6f9a3f1d3132abcd917d4378b2c4e14aec65",
        "buggy_code": "self._const_name = const.name",
        "fixed_code": "self._const_name = const._orig_name = getattr(const, '_orig_name', const.name)",
        "patch": "@@ -22,7 +22,7 @@ def __init__(self, const, table, convention):\n         self._is_fk = isinstance(const, ForeignKeyConstraint)\n         self.table = table\n         self.convention = convention\n-        self._const_name = const.name\n+        self._const_name = const._orig_name = getattr(const, '_orig_name', const.name)\n \n     def _key_table_name(self):\n         return self.table.name"
    },
    {
        "commit_id": "e8d048f10bb5f5239d1fde543c084b17e81a017f",
        "commit_message": "fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e8d048f10bb5f5239d1fde543c084b17e81a017f",
        "buggy_code": ":parmref:`.joinedload.innerjoin` - loader option version",
        "fixed_code": ":paramref:`.joinedload.innerjoin` - loader option version",
        "patch": "@@ -502,7 +502,7 @@ class Parent(Base):\n             :ref:`what_kind_of_loading` - Discussion of some details of\n             various loader options.\n \n-            :parmref:`.joinedload.innerjoin` - loader option version\n+            :paramref:`.joinedload.innerjoin` - loader option version\n \n         :param join_depth:\n           when non-``None``, an integer value indicating how many levels"
    },
    {
        "commit_id": "e60529da797491e9e88e9fcc581334ad3a09bcc2",
        "commit_message": "- Fixed bug where events set to listen at the class\nlevel (e.g. on the :class:`.Mapper` or :class:`.ClassManager`\nlevel, as opposed to on an individual mapped class, and also on\n:class:`.Connection`) that also made use of internal argument conversion\n(which is most within those categories) would fail to be removable.\nfixes #2973",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e60529da797491e9e88e9fcc581334ad3a09bcc2",
        "buggy_code": "self._clslevel[cls].remove(event_key.fn)",
        "fixed_code": "self._clslevel[cls].remove(event_key._listen_fn)",
        "patch": "@@ -135,7 +135,7 @@ def remove(self, event_key):\n             cls = stack.pop(0)\n             stack.extend(cls.__subclasses__())\n             if cls in self._clslevel:\n-                self._clslevel[cls].remove(event_key.fn)\n+                self._clslevel[cls].remove(event_key._listen_fn)\n         registry._removed_from_collection(event_key, self)\n \n     def clear(self):"
    },
    {
        "commit_id": "ceaa6047ef8bc3916ffdda1924844cbf233dfd94",
        "commit_message": "- More fixes to SQLite \"join rewriting\"; the fix from :ticket:`2967`\nimplemented right before the release of 0.9.3 affected the case where\na UNION contained nested joins in it.   \"Join rewriting\" is a feature\nwith a wide range of possibilities and is the first intricate\n\"SQL rewriting\" feature we've introduced in years, so we're sort of\ngoing through a lot of iterations with it (not unlike eager loading\nback in the 0.2/0.3 series, polymorphic loading in 0.4/0.5). We should\nbe there soon so thanks for bearing with us :).\nfixes #2969   re: #2967\n- solve the issue of join rewriting inspecting various types of\nfrom objects without using isinstance(), by adding some new\nunderscored inspection flags to the FromClause hierarchy.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ceaa6047ef8bc3916ffdda1924844cbf233dfd94",
        "buggy_code": "__version__ = '0.9.3'",
        "fixed_code": "__version__ = '0.9.4'",
        "patch": "@@ -116,7 +116,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '0.9.3'\n+__version__ = '0.9.4'\n \n def __go(lcls):\n     global __all__"
    },
    {
        "commit_id": "5c88f38c7259780e9acc18cc8752110b1d369c23",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5c88f38c7259780e9acc18cc8752110b1d369c23",
        "buggy_code": ":string ``CHAR``, ``CLOB`` or ``TEXT``",
        "fixed_code": "string ``CHAR``, ``CLOB`` or ``TEXT``",
        "patch": "@@ -164,7 +164,7 @@ def set_sqlite_pragma(dbapi_connection, connection_record):\n * :class:`~.types.INTEGER` is returned if the type name includes the\n   string ``INT``\n * :class:`~.types.TEXT` is returned if the type name includes the\n-  :string ``CHAR``, ``CLOB`` or ``TEXT``\n+  string ``CHAR``, ``CLOB`` or ``TEXT``\n * :class:`~.types.NullType` is returned if the type name includes the\n   string ``BLOB``\n * :class:`~.types.REAL` is returned if the type name includes the string"
    },
    {
        "commit_id": "d87923c1d19f584183f185988880e030fb0703c4",
        "commit_message": "Merge pull request #58 from kstark/patch-1\n\nFix TypeError for class_mapper called w/ iterable",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d87923c1d19f584183f185988880e030fb0703c4",
        "buggy_code": "\"Class object expected, got '%r'.\" % class_)",
        "fixed_code": "\"Class object expected, got '%r'.\" % (class_, ))",
        "patch": "@@ -375,7 +375,7 @@ def class_mapper(class_, configure=True):\n     if mapper is None:\n         if not isinstance(class_, type):\n             raise sa_exc.ArgumentError(\n-                    \"Class object expected, got '%r'.\" % class_)\n+                    \"Class object expected, got '%r'.\" % (class_, ))\n         raise exc.UnmappedClassError(class_)\n     else:\n         return mapper"
    },
    {
        "commit_id": "1536bc4664a248faf81c62326fe1be3dbe18b8cd",
        "commit_message": "- The MySQL CAST compilation now takes into account aspects of a string\ntype such as \"charset\" and \"collation\".  While MySQL wants all character-\nbased CAST calls to use the CHAR type, we now create a real CHAR\nobject at CAST time and copy over all the parameters it has, so that\nan expression like ``cast(x, mysql.TEXT(charset='utf8'))`` will\nrender ``CAST(t.col AS CHAR CHARACTER SET utf8)``.\n\n- Added new \"unicode returns\" detection to the MySQL dialect and\nto the default dialect system overall, such that any dialect\ncan add extra \"tests\" to the on-first-connect \"does this DBAPI\nreturn unicode directly?\" detection. In this case, we are\nadding a check specifically against the \"utf8\" encoding with\nan explicit \"utf8_bin\" collation type (after checking that\nthis collation is available) to test for some buggy unicode\nbehavior observed with MySQLdb version 1.2.3.  While MySQLdb\nhas resolved this issue as of 1.2.4, the check here should\nguard against regressions.  The change also allows the \"unicode\"\nchecks to log in the engine logs, which was not previously\nthe case. [ticket:2906]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1536bc4664a248faf81c62326fe1be3dbe18b8cd",
        "buggy_code": "engine = testing_engine(\"sqlite://\")",
        "fixed_code": "engine = testing_engine(\"sqlite://\", options=dict(_initialize=False))",
        "patch": "@@ -1050,7 +1050,7 @@ def test_empty_accessors(self):\n \n class ExecutionOptionsTest(fixtures.TestBase):\n     def test_dialect_conn_options(self):\n-        engine = testing_engine(\"sqlite://\")\n+        engine = testing_engine(\"sqlite://\", options=dict(_initialize=False))\n         engine.dialect = Mock()\n         conn = engine.connect()\n         c2 = conn.execution_options(foo=\"bar\")"
    },
    {
        "commit_id": "58d3a4147361315fec2979e7bf933f4bd30ae46b",
        "commit_message": "Fix TypeError for class_mapper called w/ iterable\n\nWhen the class_ passed is not a mapped class but is actually an iterable, the string formatting operation fails with a TypeError, and the expected ArgumentError is not raised. Calling code which is using reflection and expects this error will fail (e.g. the sadisplay module).",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58d3a4147361315fec2979e7bf933f4bd30ae46b",
        "buggy_code": "\"Class object expected, got '%r'.\" % class_)",
        "fixed_code": "\"Class object expected, got '%r'.\" % (class_, ))",
        "patch": "@@ -375,7 +375,7 @@ def class_mapper(class_, configure=True):\n     if mapper is None:\n         if not isinstance(class_, type):\n             raise sa_exc.ArgumentError(\n-                    \"Class object expected, got '%r'.\" % class_)\n+                    \"Class object expected, got '%r'.\" % (class_, ))\n         raise exc.UnmappedClassError(class_)\n     else:\n         return mapper"
    },
    {
        "commit_id": "6d3e563a575bcdc57c966980abc5038337505566",
        "commit_message": "- Fixed regression where we don't check the given name against the\ncorrect string class when setting up a backref based on a name,\ntherefore causing the error \"too many values to unpack\".  This was\nrelated to the Py3k conversion. [ticket:2901]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d3e563a575bcdc57c966980abc5038337505566",
        "buggy_code": "if isinstance(self.backref, str):",
        "fixed_code": "if isinstance(self.backref, util.string_types):",
        "patch": "@@ -1560,7 +1560,7 @@ def _generate_backref(self):\n         if not self.is_primary():\n             return\n         if self.backref is not None and not self.back_populates:\n-            if isinstance(self.backref, str):\n+            if isinstance(self.backref, util.string_types):\n                 backref_key, kwargs = self.backref, {}\n             else:\n                 backref_key, kwargs = self.backref"
    },
    {
        "commit_id": "545df6b39ee56cab401d2639fe2beb4556d9055e",
        "commit_message": "- Fixed bug in Firebird index reflection where the columns within the\nindex were not sorted correctly; they are now sorted\nin order of RDB$FIELD_POSITION.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/545df6b39ee56cab401d2639fe2beb4556d9055e",
        "buggy_code": "ORDER BY index_name, field_name",
        "fixed_code": "ORDER BY index_name, ic.rdb$field_position",
        "patch": "@@ -700,7 +700,7 @@ def get_indexes(self, connection, table_name, schema=None, **kw):\n                         ic.rdb$index_name\n         WHERE ix.rdb$relation_name=? AND ix.rdb$foreign_key IS NULL\n           AND rdb$relation_constraints.rdb$constraint_type IS NULL\n-        ORDER BY index_name, field_name\n+        ORDER BY index_name, ic.rdb$field_position\n         \"\"\"\n         c = connection.execute(qry, [self.denormalize_name(table_name)])\n "
    },
    {
        "commit_id": "47eb5682d1b8885c052e4bc50004af45b5f19174",
        "commit_message": "fix doc target",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/47eb5682d1b8885c052e4bc50004af45b5f19174",
        "buggy_code": ":meth:`.SelectBase.with_for_update` - Core level method with",
        "fixed_code": ":meth:`.GenerativeSelect.with_for_update` - Core level method with",
        "patch": "@@ -1176,7 +1176,7 @@ def with_for_update(self, read=False, nowait=False, of=None):\n \n         .. seealso::\n \n-            :meth:`.SelectBase.with_for_update` - Core level method with\n+            :meth:`.GenerativeSelect.with_for_update` - Core level method with\n             full argument and behavioral description.\n \n         \"\"\""
    },
    {
        "commit_id": "752359936645a6308beb52e77dbdbfad9929a301",
        "commit_message": "make the error message for [ticket:2889] more accurate, as we support\ncomposites to many-to-ones now also",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/752359936645a6308beb52e77dbdbfad9929a301",
        "buggy_code": "\"Composite expects Column or Column-bound \"",
        "fixed_code": "\"Composite expects Column objects or mapped \"",
        "patch": "@@ -247,7 +247,7 @@ def _init_props(self):\n                 prop = attr.property\n             else:\n                 raise sa_exc.ArgumentError(\n-                        \"Composite expects Column or Column-bound \"\n+                        \"Composite expects Column objects or mapped \"\n                         \"attributes/attribute names as arguments, got: %r\"\n                         % (attr,))\n             props.append(prop)"
    },
    {
        "commit_id": "752359936645a6308beb52e77dbdbfad9929a301",
        "commit_message": "make the error message for [ticket:2889] more accurate, as we support\ncomposites to many-to-ones now also",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/752359936645a6308beb52e77dbdbfad9929a301",
        "buggy_code": "r\"Composite expects Column or Column-bound \"",
        "fixed_code": "r\"Composite expects Column objects or mapped \"",
        "patch": "@@ -751,7 +751,7 @@ def test_check_prop_type(self):\n             # note that we also are checking that the tuple\n             # renders here, so the \"%\" operator in the string needs to\n             # apply the tuple also\n-            r\"Composite expects Column or Column-bound \"\n+            r\"Composite expects Column objects or mapped \"\n             \"attributes/attribute names as \"\n             \"arguments, got: \\(Column\",\n             configure_mappers"
    },
    {
        "commit_id": "6d5eae78a7dd79ad7bd0a0951bc6c95437d0fa8e",
        "commit_message": "- A DBAPI that raises an error on ``connect()`` which is not a subclass\nof dbapi.Error (such as ``TypeError``, ``NotImplementedError``, etc.)\nwill propagate the exception unchanged.  Previously,\nthe error handling specific to the ``connect()`` routine would both\ninappropriately run the exception through the dialect's\n:meth:`.Dialect.is_disconnect` routine as well as wrap it in\na :class:`sqlalchemy.exc.DBAPIError`.  It is now propagated unchanged\nin the same way as occurs within the execute process. [ticket:2881]\n- add tests for this in test_parseconnect, but also add tests in test_execute\nto ensure the execute() behavior as well",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d5eae78a7dd79ad7bd0a0951bc6c95437d0fa8e",
        "buggy_code": "except Exception as e:",
        "fixed_code": "except dialect.dbapi.Error as e:",
        "patch": "@@ -78,7 +78,7 @@ def create(self, name_or_url, **kwargs):\n             def connect():\n                 try:\n                     return dialect.connect(*cargs, **cparams)\n-                except Exception as e:\n+                except dialect.dbapi.Error as e:\n                     invalidated = dialect.is_disconnect(e, None, None)\n                     util.raise_from_cause(\n                         exc.DBAPIError.instance(None, None,"
    },
    {
        "commit_id": "e6f67f48054d906856f879bc1803ea639aa4b670",
        "commit_message": "Fixed bug where in Py2K a unicode literal would not be accepted\nas the string name of a class or other argument within\ndeclarative using :func:`.relationship`.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e6f67f48054d906856f879bc1803ea639aa4b670",
        "buggy_code": "if isinstance(v, str):",
        "fixed_code": "if isinstance(v, util.string_types):",
        "patch": "@@ -277,7 +277,7 @@ def _deferred_relationship(cls, prop):\n         for attr in ('argument', 'order_by', 'primaryjoin', 'secondaryjoin',\n                      'secondary', '_user_defined_foreign_keys', 'remote_side'):\n             v = getattr(prop, attr)\n-            if isinstance(v, str):\n+            if isinstance(v, util.string_types):\n                 setattr(prop, attr, resolve_arg(v))\n \n         if prop.backref and isinstance(prop.backref, tuple):"
    },
    {
        "commit_id": "e860dcb912165a2dd03e211a503a5f83ddadaa0c",
        "commit_message": "Fixed a syntax error in example code.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e860dcb912165a2dd03e211a503a5f83ddadaa0c",
        "buggy_code": "class Base(object)",
        "fixed_code": "class Base(object):",
        "patch": "@@ -253,7 +253,7 @@ def as_declarative(**kw):\n         from sqlalchemy.ext.declarative import as_declarative\n \n         @as_declarative()\n-        class Base(object)\n+        class Base(object):\n             @declared_attr\n             def __tablename__(cls):\n                 return cls.__name__.lower()"
    },
    {
        "commit_id": "08c30e3867fe298f569f0fd99d1fa18130f797f3",
        "commit_message": "Merge pull request #45 from timka/patch-1\n\nFix sessionmaker.__repr__",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/08c30e3867fe298f569f0fd99d1fa18130f797f3",
        "buggy_code": "return \"%s(class_=%r%s)\" % (",
        "fixed_code": "return \"%s(class_=%r,%s)\" % (",
        "patch": "@@ -2311,7 +2311,7 @@ def configure(self, **new_kw):\n         self.kw.update(new_kw)\n \n     def __repr__(self):\n-        return \"%s(class_=%r%s)\" % (\n+        return \"%s(class_=%r,%s)\" % (\n                     self.__class__.__name__,\n                     self.class_.__name__,\n                     \", \".join(\"%s=%r\" % (k, v) for k, v in self.kw.items())"
    },
    {
        "commit_id": "92133bc3d8d66411cb8c0fbc8dcfefe6778b6f03",
        "commit_message": "more fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/92133bc3d8d66411cb8c0fbc8dcfefe6778b6f03",
        "buggy_code": "\"\"\"Turn this :class:`.Text` object into a :class:`.FromClause`",
        "fixed_code": "\"\"\"Turn this :class:`.TextClause` object into a :class:`.TextAsFrom`",
        "patch": "@@ -1160,7 +1160,7 @@ def bindparams(self, *binds, **names_to_values):\n \n     @util.dependencies('sqlalchemy.sql.selectable')\n     def columns(self, selectable, *cols, **types):\n-        \"\"\"Turn this :class:`.Text` object into a :class:`.FromClause`\n+        \"\"\"Turn this :class:`.TextClause` object into a :class:`.TextAsFrom`\n         object that can be embedded into another statement.\n \n         This function essentially bridges the gap between an entirely"
    },
    {
        "commit_id": "c056d73cb974a4e1cbb14d96a9bd4cf1e09c4f7d",
        "commit_message": "fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c056d73cb974a4e1cbb14d96a9bd4cf1e09c4f7d",
        "buggy_code": "This allows the :class:`.Text` object to gain a ``.c`` collection and",
        "fixed_code": "This allows the :class:`.TextClause` object to gain a ``.c`` collection and",
        "patch": "@@ -2942,7 +2942,7 @@ class TextAsFrom(SelectBase):\n     \"\"\"Wrap a :class:`.TextClause` construct within a :class:`.SelectBase`\n     interface.\n \n-    This allows the :class:`.Text` object to gain a ``.c`` collection and\n+    This allows the :class:`.TextClause` object to gain a ``.c`` collection and\n     other FROM-like capabilities such as :meth:`.FromClause.alias`,\n     :meth:`.SelectBase.cte`, etc.\n "
    },
    {
        "commit_id": "f112dc1d533033f19186eb65227aba1660d03102",
        "commit_message": "- Fixed bug where SQL statement would be improperly ASCII-encoded\nwhen a pre-DBAPI :class:`.StatementError` were raised within\n:meth:`.Connection.execute`, causing encoding errors for\nnon-ASCII statements.  The stringification now remains within\nPython unicode thus avoiding encoding errors. [ticket:2871]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f112dc1d533033f19186eb65227aba1660d03102",
        "buggy_code": "str(statement), parameters,",
        "fixed_code": "util.text_type(statement), parameters,",
        "patch": "@@ -824,7 +824,7 @@ def _execute_context(self, dialect, constructor,\n             context = constructor(dialect, self, conn, *args)\n         except Exception as e:\n             self._handle_dbapi_exception(e,\n-                        str(statement), parameters,\n+                        util.text_type(statement), parameters,\n                         None, None)\n \n         if context.compiled:"
    },
    {
        "commit_id": "f112dc1d533033f19186eb65227aba1660d03102",
        "commit_message": "- Fixed bug where SQL statement would be improperly ASCII-encoded\nwhen a pre-DBAPI :class:`.StatementError` were raised within\n:meth:`.Connection.execute`, causing encoding errors for\nnon-ASCII statements.  The stringification now remains within\nPython unicode thus avoiding encoding errors. [ticket:2871]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f112dc1d533033f19186eb65227aba1660d03102",
        "buggy_code": "\"parameter group 2\\) 'INSERT INTO query_users\",",
        "fixed_code": "\"parameter group 2\\) u?'INSERT INTO query_users\",",
        "patch": "@@ -68,7 +68,7 @@ def test_insert_heterogeneous_params(self):\n             r\"A value is required for bind parameter 'user_name', in \"\n             \"parameter group 2 \\(original cause: (sqlalchemy.exc.)?InvalidRequestError: A \"\n             \"value is required for bind parameter 'user_name', in \"\n-            \"parameter group 2\\) 'INSERT INTO query_users\",\n+            \"parameter group 2\\) u?'INSERT INTO query_users\",\n             users.insert().execute,\n             {'user_id':7, 'user_name':'jack'},\n             {'user_id':8, 'user_name':'ed'},"
    },
    {
        "commit_id": "2aa00c49d7a1a783ff50832f2de7760bfaaccf6d",
        "commit_message": "- Fixed bug which prevented the ``serializer`` extension from working\ncorrectly with table or column names that contain non-ASCII\ncharacters. [ticket:2869]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2aa00c49d7a1a783ff50832f2de7760bfaaccf6d",
        "buggy_code": "print(\"\\nSQL String:\\n\" + util.text_type(c) + param_str)",
        "fixed_code": "print(\"\\nSQL String:\\n\" + util.text_type(c).encode('utf-8') + param_str)",
        "patch": "@@ -235,7 +235,7 @@ def assert_compile(self, clause, result, params=None,\n         if util.py3k:\n             param_str = param_str.encode('utf-8').decode('ascii', 'ignore')\n \n-        print(\"\\nSQL String:\\n\" + util.text_type(c) + param_str)\n+        print(\"\\nSQL String:\\n\" + util.text_type(c).encode('utf-8') + param_str)\n \n         cc = re.sub(r'[\\n\\t]', '', util.text_type(c))\n "
    },
    {
        "commit_id": "c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "buggy_code": ":class:`.Query.join`.   To combine explicit JOINs with eager loading",
        "fixed_code": ":meth:`.Query.join`.   To combine explicit JOINs with eager loading",
        "patch": "@@ -619,7 +619,7 @@ def joinedload(loadopt, attr, innerjoin=None):\n         :class:`.Query` refer to these joins in any way, including ordering.\n \n         To produce a specific SQL JOIN which is explicitly available, use\n-        :class:`.Query.join`.   To combine explicit JOINs with eager loading\n+        :meth:`.Query.join`.   To combine explicit JOINs with eager loading\n         of collections, use :func:`.orm.contains_eager`; see :ref:`contains_eager`.\n \n     .. seealso::"
    },
    {
        "commit_id": "c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "buggy_code": "an :class:`~.base.Engine` or :class:`~.base.Connection` instance",
        "fixed_code": "an :class:`~.Engine` or :class:`~.Connection` instance",
        "patch": "@@ -1796,7 +1796,7 @@ def __init__(self,\n           to set the autocommit option.\n \n         :param bind=None:\n-          an :class:`~.base.Engine` or :class:`~.base.Connection` instance\n+          an :class:`~.Engine` or :class:`~.Connection` instance\n           to which the\n           resulting :class:`.Select` object will be bound.  The :class:`.Select`\n           object will otherwise automatically bind to whatever"
    },
    {
        "commit_id": "c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8c88213a762a0365dcdd6752fd82d5bd115e90e",
        "buggy_code": "or :class:`UnicodeText`",
        "fixed_code": "or :class:`.UnicodeText`",
        "patch": "@@ -119,7 +119,7 @@ def __init__(self, length=None, collation=None,\n           unicode objects, this flag generally does not\n           need to be set.  For columns that are explicitly\n           intended to store non-ASCII data, the :class:`.Unicode`\n-          or :class:`UnicodeText`\n+          or :class:`.UnicodeText`\n           types should be used regardless, which feature\n           the same behavior of ``convert_unicode`` but\n           also indicate an underlying column type that"
    },
    {
        "commit_id": "90d1f98f43fecd50ec215815e99f436748a92136",
        "commit_message": "Generate API and resolve cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/90d1f98f43fecd50ec215815e99f436748a92136",
        "buggy_code": ":param close_with_result: Passed to :meth:`Engine.connect`, indicating",
        "fixed_code": ":param close_with_result: Passed to :meth:`.Engine.connect`, indicating",
        "patch": "@@ -823,7 +823,7 @@ def connection(self, mapper=None, clause=None,\n             etc.) which will be used to locate a bind, if a bind\n             cannot otherwise be identified.\n \n-        :param close_with_result: Passed to :meth:`Engine.connect`, indicating\n+        :param close_with_result: Passed to :meth:`.Engine.connect`, indicating\n           the :class:`.Connection` should be considered \"single use\",\n           automatically closing when the first result set is closed.  This\n           flag only has an effect if this :class:`.Session` is configured with"
    },
    {
        "commit_id": "a62afc6229969e71c1c8f12f1e47299824eb3884",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a62afc6229969e71c1c8f12f1e47299824eb3884",
        "buggy_code": "that is, :class:`.SchemaItem` and :class:`.SchemaEvent`",
        "fixed_code": "that is, :class:`.SchemaItem` and other :class:`.SchemaEventTarget`",
        "patch": "@@ -14,7 +14,7 @@\n class DDLEvents(event.Events):\n     \"\"\"\n     Define event listeners for schema objects,\n-    that is, :class:`.SchemaItem` and :class:`.SchemaEvent`\n+    that is, :class:`.SchemaItem` and other :class:`.SchemaEventTarget`\n     subclasses, including :class:`.MetaData`, :class:`.Table`,\n     :class:`.Column`.\n "
    },
    {
        "commit_id": "a62afc6229969e71c1c8f12f1e47299824eb3884",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a62afc6229969e71c1c8f12f1e47299824eb3884",
        "buggy_code": "setup using :class:`~sqlalchemy.orm.scoped_session` might look like::",
        "fixed_code": "setup using :class:`~sqlalchemy.orm.scoping.scoped_session` might look like::",
        "patch": "@@ -1238,7 +1238,7 @@ class OtherBase(Base):\n Note that ``declarative`` does nothing special with sessions, and is\n only intended as an easier way to configure mappers and\n :class:`~sqlalchemy.schema.Table` objects.  A typical application\n-setup using :class:`~sqlalchemy.orm.scoped_session` might look like::\n+setup using :class:`~sqlalchemy.orm.scoping.scoped_session` might look like::\n \n     engine = create_engine('postgresql://scott:tiger@localhost/test')\n     Session = scoped_session(sessionmaker(autocommit=False,"
    },
    {
        "commit_id": "4bc2869b24719d0ebde324e8e16171caa69f21dd",
        "commit_message": "Add API generation to resolve cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4bc2869b24719d0ebde324e8e16171caa69f21dd",
        "buggy_code": "well :attr:`.instrumentation_finders`",
        "fixed_code": "well :data:`.instrumentation_finders`",
        "patch": "@@ -22,7 +22,7 @@\n    :mod:`sqlalchemy.orm.instrumentation` so that it\n    takes effect, including recognition of\n    ``__sa_instrumentation_manager__`` on mapped classes, as\n-   well :attr:`.instrumentation_finders`\n+   well :data:`.instrumentation_finders`\n    being used to determine class instrumentation resolution.\n \n \"\"\""
    },
    {
        "commit_id": "216413d38ff42dad182b1a15adfba1380b1e07c8",
        "commit_message": "Fix sessionmaker.__repr__\n\nA comma separating 'class_' from the other args. It's still there even when kw is empty, which is syntactically correct.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/216413d38ff42dad182b1a15adfba1380b1e07c8",
        "buggy_code": "return \"%s(class_=%r%s)\" % (",
        "fixed_code": "return \"%s(class_=%r,%s)\" % (",
        "patch": "@@ -2311,7 +2311,7 @@ def configure(self, **new_kw):\n         self.kw.update(new_kw)\n \n     def __repr__(self):\n-        return \"%s(class_=%r%s)\" % (\n+        return \"%s(class_=%r,%s)\" % (\n                     self.__class__.__name__,\n                     self.class_.__name__,\n                     \", \".join(\"%s=%r\" % (k, v) for k, v in self.kw.items())"
    },
    {
        "commit_id": "1a6dd8b393991cb0cdba044d1c560c08ca426f89",
        "commit_message": "Fix cross references",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a6dd8b393991cb0cdba044d1c560c08ca426f89",
        "buggy_code": "Views are instead returned using the :meth:`.get_view_names`",
        "fixed_code": "Views are instead returned using the :meth:`.Inspector.get_view_names`",
        "patch": "@@ -161,7 +161,7 @@ def get_table_names(self, schema=None, order_by=None):\n         \"\"\"Return all table names in referred to within a particular schema.\n \n         The names are expected to be real tables only, not views.\n-        Views are instead returned using the :meth:`.get_view_names`\n+        Views are instead returned using the :meth:`.Inspector.get_view_names`\n         method.\n \n "
    },
    {
        "commit_id": "24a46499308dad8bef072aa4f5052d054e769786",
        "commit_message": "Fix cross reference",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/24a46499308dad8bef072aa4f5052d054e769786",
        "buggy_code": ":func:`.Select.alias` method, as many platforms require",
        "fixed_code": ":meth:`.Select.alias` method, as many platforms require",
        "patch": "@@ -361,7 +361,7 @@ def self_group(self, against=None):\n         as well as by :func:`.select` constructs when placed into\n         the FROM clause of another :func:`.select`.  (Note that\n         subqueries should be normally created using the\n-        :func:`.Select.alias` method, as many platforms require\n+        :meth:`.Select.alias` method, as many platforms require\n         nested SELECT statements to be named).\n \n         As expressions are composed together, the application of"
    },
    {
        "commit_id": "fefa2f5d57301f86136233a485624f0d083236d9",
        "commit_message": "Fixed bug where usage of new :class:`.Bundle` object would cause\nthe :attr:`.Query.column_descriptions` attribute to fail.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fefa2f5d57301f86136233a485624f0d083236d9",
        "buggy_code": "self.bundle = bundle",
        "fixed_code": "self.bundle = self.expr = bundle",
        "patch": "@@ -3198,7 +3198,7 @@ def proc(row, result):\n class _BundleEntity(_QueryEntity):\n     def __init__(self, query, bundle, setup_entities=True):\n         query._entities.append(self)\n-        self.bundle = bundle\n+        self.bundle = self.expr = bundle\n         self.type = type(bundle)\n         self._label_name = bundle.name\n         self._entities = []"
    },
    {
        "commit_id": "b9abc078ee1fb0c13e949b1abaef7bf40d0a50f2",
        "commit_message": "Fix indentation and escape *args and **kwargs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9abc078ee1fb0c13e949b1abaef7bf40d0a50f2",
        "buggy_code": "Returns self.class_.",
        "fixed_code": "Returns self.class\\_.",
        "patch": "@@ -622,7 +622,7 @@ def mapper(self):\n     def entity(self):\n         \"\"\"Part of the inspection API.\n \n-        Returns self.class_.\n+        Returns self.class\\_.\n \n         \"\"\"\n         return self.class_"
    },
    {
        "commit_id": "fe1d64473896b1e8abeb8ddb966447632c057321",
        "commit_message": "Fix indentation issues in docstrings",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fe1d64473896b1e8abeb8ddb966447632c057321",
        "buggy_code": ":param state: any value which will be passed to the callable_",
        "fixed_code": ":param state: any value which will be passed to the callable\\_",
        "patch": "@@ -195,7 +195,7 @@ def execute_if(self, dialect=None, callable_=None, state=None):\n           If the callable returns a true value, the DDL statement will be\n           executed.\n \n-        :param state: any value which will be passed to the callable_\n+        :param state: any value which will be passed to the callable\\_\n           as the ``state`` keyword argument.\n \n         .. seealso::"
    },
    {
        "commit_id": "b1f7e8a3704f0eccbaba653eec9b43805b77ccb8",
        "commit_message": "Merge pull request #39 from jmagnusson/minordocfix\n\nSuper-minor doc fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b1f7e8a3704f0eccbaba653eec9b43805b77ccb8",
        "buggy_code": "Column('y', DateTime, server_default=text('NOW()'))0",
        "fixed_code": "Column('y', DateTime, server_default=text('NOW()'))",
        "patch": "@@ -901,7 +901,7 @@ def __init__(self, *args, **kwargs):\n             A :func:`~sqlalchemy.sql.expression.text` expression will be\n             rendered as-is, without quotes::\n \n-                Column('y', DateTime, server_default=text('NOW()'))0\n+                Column('y', DateTime, server_default=text('NOW()'))\n \n                 y DATETIME DEFAULT NOW()\n "
    },
    {
        "commit_id": "60a72e7c5635b502c8eb9328f7be2990a321ae59",
        "commit_message": "Super-minor doc fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/60a72e7c5635b502c8eb9328f7be2990a321ae59",
        "buggy_code": "Column('y', DateTime, server_default=text('NOW()'))0",
        "fixed_code": "Column('y', DateTime, server_default=text('NOW()'))",
        "patch": "@@ -901,7 +901,7 @@ def __init__(self, *args, **kwargs):\n             A :func:`~sqlalchemy.sql.expression.text` expression will be\n             rendered as-is, without quotes::\n \n-                Column('y', DateTime, server_default=text('NOW()'))0\n+                Column('y', DateTime, server_default=text('NOW()'))\n \n                 y DATETIME DEFAULT NOW()\n "
    },
    {
        "commit_id": "1e2945d26c126f0aad0dbe1c06fdcb62d3172597",
        "commit_message": "- Fixed bug where index reflection would mis-interpret indkey values\nwhen using the pypostgresql adapter, which returns these values\nas lists vs. psycopg2's return type of string.\n[ticket:2855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1e2945d26c126f0aad0dbe1c06fdcb62d3172597",
        "buggy_code": "__version__ = '0.9.0b1'",
        "fixed_code": "__version__ = '0.9.0b2'",
        "patch": "@@ -116,7 +116,7 @@\n from .inspection import inspect\n from .engine import create_engine, engine_from_config\n \n-__version__ = '0.9.0b1'\n+__version__ = '0.9.0b2'\n \n def __go(lcls):\n     global __all__"
    },
    {
        "commit_id": "51e8e5df469b755ad8ba940a43281e8423789167",
        "commit_message": "- Fix and test parsing of MySQL foreign key options within reflection;\nthis complements the work in :ticket:`2183` where we begin to support\nreflection of foreign key options such as ON UPDATE/ON DELETE\ncascade. [ticket:2839]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/51e8e5df469b755ad8ba940a43281e8423789167",
        "buggy_code": "kw['on'] = 'RESTRICT|CASCASDE|SET NULL|NOACTION'",
        "fixed_code": "kw['on'] = 'RESTRICT|CASCADE|SET NULL|NOACTION'",
        "patch": "@@ -2807,7 +2807,7 @@ def _prep_regexes(self):\n         #\n         # unique constraints come back as KEYs\n         kw = quotes.copy()\n-        kw['on'] = 'RESTRICT|CASCASDE|SET NULL|NOACTION'\n+        kw['on'] = 'RESTRICT|CASCADE|SET NULL|NOACTION'\n         self._re_constraint = _re_compile(\n             r'  '\n             r'CONSTRAINT +'"
    },
    {
        "commit_id": "9bc9d5c1068be878118202259add3c2e1bcec0cb",
        "commit_message": "- Fixed bug in default compiler plus those of postgresql, mysql, and\nmssql to ensure that any literal SQL expression values are\nrendered directly as literals, instead of as bound parameters,\nwithin a CREATE INDEX statement. [ticket:2742]\n- don't need expression_as_ddl(); literal_binds and include_table\ntake care of this functionality.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9bc9d5c1068be878118202259add3c2e1bcec0cb",
        "buggy_code": "include_table=False) for",
        "fixed_code": "include_table=False, literal_binds=True) for",
        "patch": "@@ -1001,7 +1001,7 @@ def visit_create_index(self, create, include_schema=False):\n                         preparer.format_table(index.table),\n                        ', '.join(\n                             self.sql_compiler.process(expr,\n-                                include_table=False) for\n+                                include_table=False, literal_binds=True) for\n                                 expr in index.expressions)\n                         )\n "
    },
    {
        "commit_id": "d363a4b0bbc5de22ec77bb1b2f0fd64e30e4009e",
        "commit_message": "- fix a bunch of test failures",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d363a4b0bbc5de22ec77bb1b2f0fd64e30e4009e",
        "buggy_code": "strategy = tuple(strategy.items())",
        "fixed_code": "strategy = tuple(sorted(strategy.items()))",
        "patch": "@@ -171,7 +171,7 @@ def _generate_path(self, path, attr, wildcard_key, raiseerr=True):\n \n     def _coerce_strat(self, strategy):\n         if strategy is not None:\n-            strategy = tuple(strategy.items())\n+            strategy = tuple(sorted(strategy.items()))\n         return strategy\n \n     @_generative"
    },
    {
        "commit_id": "d363a4b0bbc5de22ec77bb1b2f0fd64e30e4009e",
        "commit_message": "- fix a bunch of test failures",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d363a4b0bbc5de22ec77bb1b2f0fd64e30e4009e",
        "buggy_code": "l3 = l2.context.values()[0]",
        "fixed_code": "l3 = list(l2.context.values())[0]",
        "patch": "@@ -141,7 +141,7 @@ def test_set_strat_col(self):\n \n         l1 = Load(User)\n         l2 = l1.defer(\"name\")\n-        l3 = l2.context.values()[0]\n+        l3 = list(l2.context.values())[0]\n         eq_(\n             l1.context,\n             {"
    },
    {
        "commit_id": "b9bd6ffd43a138f0b8964cae0657e478f9b4a13a",
        "commit_message": "fix typos",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9bd6ffd43a138f0b8964cae0657e478f9b4a13a",
        "buggy_code": "full \"polymoprhic\" selectable is returned.",
        "fixed_code": "full \"polymorphic\" selectable is returned.",
        "patch": "@@ -1819,7 +1819,7 @@ def selectable(self):\n \n         Normally, this is equivalent to :attr:`.mapped_table`, unless\n         the ``with_polymorphic`` feature is in use, in which case the\n-        full \"polymoprhic\" selectable is returned.\n+        full \"polymorphic\" selectable is returned.\n \n         \"\"\"\n         return self._with_polymorphic_selectable"
    },
    {
        "commit_id": "e0237aac2ba992a5c31206fea52f55969db65ba0",
        "commit_message": "- don't need resolve, don't need import for this.  just look in sys.modules,\nsince we are dealing with cycles in any case.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e0237aac2ba992a5c31206fea52f55969db65ba0",
        "buggy_code": "from . import util, strategies",
        "fixed_code": "from . import util, strategies, ddl",
        "patch": "@@ -83,7 +83,7 @@\n     connection_memoize\n     )\n \n-from . import util, strategies\n+from . import util, strategies, ddl\n \n default_strategy = 'plain'\n "
    },
    {
        "commit_id": "5d4094ba739b35775e6e4810b730fab510de7707",
        "commit_message": "fix missing comma",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5d4094ba739b35775e6e4810b730fab510de7707",
        "buggy_code": "\"has_kw_arguments\": \" **kw\" if dispatch_descriptor.has_kw else \"\",",
        "fixed_code": "\"has_kw_arguments\": \", **kw\" if dispatch_descriptor.has_kw else \"\",",
        "patch": "@@ -82,7 +82,7 @@ def _standard_listen_example(dispatch_descriptor, sample_target, fn):\n                 \"current_since\": \" (arguments as of %s)\" %\n                                 current_since if current_since else \"\",\n                 \"event_name\": fn.__name__,\n-                \"has_kw_arguments\": \" **kw\" if dispatch_descriptor.has_kw else \"\",\n+                \"has_kw_arguments\": \", **kw\" if dispatch_descriptor.has_kw else \"\",\n                 \"named_event_arguments\": \", \".join(dispatch_descriptor.arg_names),\n                 \"example_kw_arg\": example_kw_arg,\n                 \"sample_target\": sample_target"
    },
    {
        "commit_id": "731a4daf63dc0fdb784d195e89c5f357420657fb",
        "commit_message": "A performance fix related to the usage of the :func:`.defer` option\nwhen loading mapped entities.   The function overhead of applying\na per-object deferred callable to an instance at load time was\nsignificantly higher than that of just loading the data from the row\n(note that ``defer()`` is meant to reduce DB/network overhead, not\nnecessarily function call count); the function call overhead is now\nless than that of loading data from the column in all cases.  There\nis also a reduction in the number of \"lazy callable\" objects created\nper load from N (total deferred values in the result) to 1 (total\nnumber of deferred cols).\n[ticket:2778]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/731a4daf63dc0fdb784d195e89c5f357420657fb",
        "buggy_code": "value = callable_(passive)",
        "fixed_code": "value = callable_(state, passive)",
        "patch": "@@ -605,7 +605,7 @@ def get(self, state, dict_, passive=PASSIVE_OFF):\n \n                 if key in state.callables:\n                     callable_ = state.callables[key]\n-                    value = callable_(passive)\n+                    value = callable_(state, passive)\n                 elif self.callable_:\n                     value = self.callable_(state, passive)\n                 else:"
    },
    {
        "commit_id": "731a4daf63dc0fdb784d195e89c5f357420657fb",
        "commit_message": "A performance fix related to the usage of the :func:`.defer` option\nwhen loading mapped entities.   The function overhead of applying\na per-object deferred callable to an instance at load time was\nsignificantly higher than that of just loading the data from the row\n(note that ``defer()`` is meant to reduce DB/network overhead, not\nnecessarily function call count); the function call overhead is now\nless than that of loading data from the column in all cases.  There\nis also a reduction in the number of \"lazy callable\" objects created\nper load from N (total deferred values in the result) to 1 (total\nnumber of deferred cols).\n[ticket:2778]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/731a4daf63dc0fdb784d195e89c5f357420657fb",
        "buggy_code": "state(passive)",
        "fixed_code": "state(state, passive)",
        "patch": "@@ -161,7 +161,7 @@ def get_from_identity(session, key, passive):\n                 # expired state will be checked soon enough, if necessary\n                 return instance\n             try:\n-                state(passive)\n+                state(state, passive)\n             except orm_exc.ObjectDeletedError:\n                 session._remove_newly_deleted([state])\n                 return None"
    },
    {
        "commit_id": "fd8b2d188c58626bdc0d2f11341bc99ba81ae91d",
        "commit_message": "doc fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fd8b2d188c58626bdc0d2f11341bc99ba81ae91d",
        "buggy_code": "regexp=re.compile(\"(\\d+)/(\\d+)/(\\d+) (\\d+)-(\\d+)-(\\d+)\")",
        "fixed_code": "regexp=r\"(\\d+)/(\\d+)/(\\d+) (\\d+)-(\\d+)-(\\d+)\"",
        "patch": "@@ -179,7 +179,7 @@ class DATETIME(_DateTimeMixin, sqltypes.DateTime):\n \n         dt = DATETIME(\n             storage_format=\"%(year)04d/%(month)02d/%(day)02d %(hour)02d:%(min)02d:%(second)02d\",\n-            regexp=re.compile(\"(\\d+)/(\\d+)/(\\d+) (\\d+)-(\\d+)-(\\d+)\")\n+            regexp=r\"(\\d+)/(\\d+)/(\\d+) (\\d+)-(\\d+)-(\\d+)\"\n         )\n \n     :param storage_format: format string which will be applied to the"
    },
    {
        "commit_id": "fd55be01ddc0ab41dd9469c6c7736d12d5a2f1ea",
        "commit_message": "Dialect.initialize() is not called a second time if an :class:`.Engine`\nis recreated, due to a disconnect error.   This fixes a particular\nissue in the Oracle 8 dialect, but in general the dialect.initialize()\nphase should only be once per dialect.  Also in 0.8.3. [ticket:2776]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fd55be01ddc0ab41dd9469c6c7736d12d5a2f1ea",
        "buggy_code": "get_callable_argspec",
        "fixed_code": "get_callable_argspec, only_once",
        "patch": "@@ -31,7 +31,7 @@\n     classproperty, set_creation_order, warn_exception, warn, NoneType,\\\n     constructor_copy, methods_equivalent, chop_traceback, asint,\\\n     generic_repr, counter, PluginLoader, hybridmethod, safe_reraise,\\\n-    get_callable_argspec\n+    get_callable_argspec, only_once\n \n from .deprecations import warn_deprecated, warn_pending_deprecation, \\\n     deprecated, pending_deprecation, inject_docstring_text"
    },
    {
        "commit_id": "fc348366f76bdb3072c69ad8e03f305de38d486c",
        "commit_message": "- fix a regression caused by #2587, where query.join() would apply an\nadapter to an aliased-mapped, non-polymorphic selectable that prevented us from referring\ndirectly to that selectable.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc348366f76bdb3072c69ad8e03f305de38d486c",
        "buggy_code": "isinstance(",
        "fixed_code": "right_mapper.with_polymorphic and isinstance(",
        "patch": "@@ -1892,7 +1892,7 @@ def _prepare_right_side(self, r_info, right, onclause, create_aliases,\n         aliased_entity = right_mapper and \\\n                             not right_is_aliased and \\\n                             (\n-                                isinstance(\n+                                right_mapper.with_polymorphic and isinstance(\n                                     right_mapper._with_polymorphic_selectable,\n                                     expression.Alias)\n                                 or"
    },
    {
        "commit_id": "58c8c4ce77d1e0e9f3a25f4e4dbdd0013cb9044b",
        "commit_message": "Fixed bug where sending a composite attribute into :meth:`.Query.order_by`\nwould produce a parenthesized expression not accepted by some databases.\n[ticket:2754]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58c8c4ce77d1e0e9f3a25f4e4dbdd0013cb9044b",
        "buggy_code": "return expression.ClauseList(*self._comparable_elements)",
        "fixed_code": "return expression.ClauseList(group=False, *self._comparable_elements)",
        "patch": "@@ -320,7 +320,7 @@ class Comparator(PropComparator):\n         \"\"\"\n \n         def __clause_element__(self):\n-            return expression.ClauseList(*self._comparable_elements)\n+            return expression.ClauseList(group=False, *self._comparable_elements)\n \n         __hash__ = None\n "
    },
    {
        "commit_id": "c8f9831a66728787d8cedf0e1d9d24bfbcb8a559",
        "commit_message": "Fixing the error regex to match numbers with the long suffix, like 1146L",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8f9831a66728787d8cedf0e1d9d24bfbcb8a559",
        "buggy_code": "match = re.compile(r\"^(\\d+):|^\\((\\d+),\").match(str(exception))",
        "fixed_code": "match = re.compile(r\"^(\\d+)L?:|^\\((\\d+)L?,\").match(str(exception))",
        "patch": "@@ -74,7 +74,7 @@ def create_connect_args(self, url):\n         return [], opts\n \n     def _extract_error_code(self, exception):\n-        match = re.compile(r\"^(\\d+):|^\\((\\d+),\").match(str(exception))\n+        match = re.compile(r\"^(\\d+)L?:|^\\((\\d+)L?,\").match(str(exception))\n         # The rdbms api will wrap then re-raise some types of errors\n         # making this regex return no matches.\n         code = match.group(1) or match.group(2) if match else None"
    },
    {
        "commit_id": "965b34fa32f5266ca0fd8e40ae259e2957d50534",
        "commit_message": "- fix up 0.9 links",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/965b34fa32f5266ca0fd8e40ae259e2957d50534",
        "buggy_code": "version = \"0.0\"",
        "fixed_code": "version = \"0.9\"",
        "patch": "@@ -81,7 +81,7 @@\n # built documents.\n #\n # The short X.Y version.\n-version = \"0.0\"\n+version = \"0.9\"\n # The full version, including alpha/beta/rc tags.\n release = \"0.9.0\"\n "
    },
    {
        "commit_id": "94096593ca92e105b8f716ff89b78856595d95c8",
        "commit_message": "Fixed a small bug in the dogpile example where the generation\nof SQL cache keys wasn't applying deduping labels to the\nstatement the same way :class:`.Query` normally does.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/94096593ca92e105b8f716ff89b78856595d95c8",
        "buggy_code": "stmt = query.statement",
        "fixed_code": "stmt = query.with_labels().statement",
        "patch": "@@ -136,7 +136,7 @@ def _key_from_query(query, qualifier=None):\n \n     \"\"\"\n \n-    stmt = query.statement\n+    stmt = query.with_labels().statement\n     compiled = stmt.compile()\n     params = compiled.params\n "
    },
    {
        "commit_id": "638803eef1e5dc6e985b176b43bb9cb2a3b5010b",
        "commit_message": "- fix a dict while iterate mutation\n- illustrate how OrderedDict can catch these, but commented out\nto save function overhead",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/638803eef1e5dc6e985b176b43bb9cb2a3b5010b",
        "buggy_code": "for key, c in our_stuff.items():",
        "fixed_code": "for key, c in list(our_stuff.items()):",
        "patch": "@@ -173,7 +173,7 @@ def go():\n \n     # extract columns from the class dict\n     declared_columns = set()\n-    for key, c in our_stuff.items():\n+    for key, c in list(our_stuff.items()):\n         if isinstance(c, (ColumnProperty, CompositeProperty)):\n             for col in c.columns:\n                 if isinstance(col, Column) and \\"
    },
    {
        "commit_id": "a393ef6799b3ed619f91ab60bfa1299a5fe19e8f",
        "commit_message": "fix an errant str check",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a393ef6799b3ed619f91ab60bfa1299a5fe19e8f",
        "buggy_code": "if isinstance(column.server_default.arg, str):",
        "fixed_code": "if isinstance(column.server_default.arg, util.string_types):",
        "patch": "@@ -2025,7 +2025,7 @@ def post_create_table(self, table):\n \n     def get_column_default_string(self, column):\n         if isinstance(column.server_default, schema.DefaultClause):\n-            if isinstance(column.server_default.arg, str):\n+            if isinstance(column.server_default.arg, util.string_types):\n                 return \"'%s'\" % column.server_default.arg\n             else:\n                 return self.sql_compiler.process(column.server_default.arg)"
    },
    {
        "commit_id": "e2b8c893ca98bb0141405a7d7d40c4024d5bdf41",
        "commit_message": "fix this test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e2b8c893ca98bb0141405a7d7d40c4024d5bdf41",
        "buggy_code": "'%r , which has the same key.  Consider '",
        "fixed_code": "'%r, which has the same key.  Consider '",
        "patch": "@@ -2485,7 +2485,7 @@ def __setitem__(self, key, value):\n             existing = self[key]\n             if not existing.shares_lineage(value):\n                 util.warn('Column %r on table %r being replaced by '\n-                          '%r , which has the same key.  Consider '\n+                          '%r, which has the same key.  Consider '\n                           'use_labels for select() statements.' % (key,\n                           getattr(existing, 'table', None), value))\n             self._all_cols.remove(existing)"
    },
    {
        "commit_id": "e2b8c893ca98bb0141405a7d7d40c4024d5bdf41",
        "commit_message": "fix this test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e2b8c893ca98bb0141405a7d7d40c4024d5bdf41",
        "buggy_code": "\"replaced by another column with the same key\",",
        "fixed_code": "r\"replaced by Column.*, which has the same key\",",
        "patch": "@@ -1592,7 +1592,7 @@ class WithLabelsTest(fixtures.TestBase):\n     def _assert_labels_warning(self, s):\n         assert_raises_message(\n             exc.SAWarning,\n-            \"replaced by another column with the same key\",\n+            r\"replaced by Column.*, which has the same key\",\n             lambda: s.c\n         )\n "
    },
    {
        "commit_id": "956c144c7feae68fa957eb62ede4b21cd818c737",
        "commit_message": "fix serializer tests.  something is wrong with non-C pickle but for some reason py3k's pickle seems to be OK?  not sure why that is, as this\nis all related to http://bugs.python.org/issue998998",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/956c144c7feae68fa957eb62ede4b21cd818c737",
        "buggy_code": "unquote_plus",
        "fixed_code": "unquote_plus, b64decode, b64encode, byte_buffer",
        "patch": "@@ -9,7 +9,7 @@\n     pickle, dottedgetter, parse_qsl, namedtuple, next, WeakSet, reraise, \\\n     raise_from_cause, text_type, string_types, int_types, binary_type, \\\n     quote_plus, with_metaclass, print_, itertools_filterfalse, u, ue, b,\\\n-    unquote_plus\n+    unquote_plus, b64decode, b64encode, byte_buffer\n \n from ._collections import KeyedTuple, ImmutableContainer, immutabledict, \\\n     Properties, OrderedProperties, ImmutableProperties, OrderedDict, \\"
    },
    {
        "commit_id": "f5956fae6a67868ea89dd1518f380fb8264acc34",
        "commit_message": "fix incorrect method name",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f5956fae6a67868ea89dd1518f380fb8264acc34",
        "buggy_code": "\"mean to call table.add_constraint(constraint) ?\")",
        "fixed_code": "\"mean to call table.append_constraint(constraint) ?\")",
        "patch": "@@ -2007,7 +2007,7 @@ def table(self):\n             pass\n         raise exc.InvalidRequestError(\n                     \"This constraint is not bound to a table.  Did you \"\n-                    \"mean to call table.add_constraint(constraint) ?\")\n+                    \"mean to call table.append_constraint(constraint) ?\")\n \n     def _set_parent(self, parent):\n         self.parent = parent"
    },
    {
        "commit_id": "d3ca368921999f7776958480e12a5d8570b3ca90",
        "commit_message": "fix here, was only failing in the py3k version",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d3ca368921999f7776958480e12a5d8570b3ca90",
        "buggy_code": "cls = pickle.loads(b64decode(args))",
        "fixed_code": "cls = pickle.loads(b64decode(mapper))",
        "patch": "@@ -141,7 +141,7 @@ def persistent_load(id):\n                 return class_mapper(cls)\n             elif type_ == \"mapperprop\":\n                 mapper, keyname = args.split(':')\n-                cls = pickle.loads(b64decode(args))\n+                cls = pickle.loads(b64decode(mapper))\n                 return class_mapper(cls).attrs[keyname]\n             elif type_ == \"table\":\n                 return metadata.tables[args]"
    },
    {
        "commit_id": "6ae1e8996165ea3efd29996e010b760c921a20a8",
        "commit_message": "- these pickle the assoc proxy by itself tests can't really pass\nnow without strong ref on the parent\n- fix message compare for py3k",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6ae1e8996165ea3efd29996e010b760c921a20a8",
        "buggy_code": "\"<class 'test.orm.test_instrumentation.A'> will cause \"",
        "fixed_code": "\"<class '.*\\.A'> will cause \"",
        "patch": "@@ -453,7 +453,7 @@ def __del__(self):\n         assert_raises_message(\n             sa.exc.SAWarning,\n             r\"__del__\\(\\) method on class \"\n-            \"<class 'test.orm.test_instrumentation.A'> will cause \"\n+            \"<class '.*\\.A'> will cause \"\n             \"unreachable cycles and memory leaks, as SQLAlchemy \"\n             \"instrumentation often creates reference cycles.  \"\n             \"Please remove this method.\","
    },
    {
        "commit_id": "0790efcf87a268fd8bc810b711fe2b9760bcf1e6",
        "commit_message": "- this pymssql test needs to be against the pymssql dialect\n- Part of a longer series of fixes needed for pyodbc+\n      mssql, a CAST to NVARCHAR(max) has been added to the bound\n      parameter for the table name and schema name in all information schema\n      queries to avoid the issue of comparing NVARCHAR to NTEXT,\n      which seems to be rejected by the ODBC driver in some cases,\n      such as FreeTDS (0.91 only?) plus unicode bound parameters being passed.\n      The issue seems to be specific to the SQL Server information\n      schema tables and the workaround is harmless for those cases\n      where the problem doesn't exist in the first place.\n[ticket:2355]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0790efcf87a268fd8bc810b711fe2b9760bcf1e6",
        "buggy_code": "__only_on__ = 'mssql'",
        "fixed_code": "__only_on__ = 'mssql+pymssql'",
        "patch": "@@ -1949,7 +1949,7 @@ def test_autoincrement(self):\n                 engine.execute(tbl.delete())\n \n class MonkeyPatchedBinaryTest(fixtures.TestBase):\n-    __only_on__ = 'mssql'\n+    __only_on__ = 'mssql+pymssql'\n \n     def test_unicode(self):\n         module = __import__('pymssql')"
    },
    {
        "commit_id": "b5b751e3de817641583e7909fb8d28197ddcec86",
        "commit_message": "fix syntax error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b5b751e3de817641583e7909fb8d28197ddcec86",
        "buggy_code": "assert i == assertvalues, \"tablename: %s %r %r\" %",
        "fixed_code": "assert i == assertvalues, \"tablename: %s %r %r\" % \\",
        "patch": "@@ -190,7 +190,7 @@ def insert_values(engine, table, values):\n                 try:\n                     table.create(bind=engine, checkfirst=True)\n                     i = insert_values(engine, table, values)\n-                    assert i == assertvalues, \"tablename: %s %r %r\" %\n+                    assert i == assertvalues, \"tablename: %s %r %r\" % \\\n                             (table.name, repr(i), repr(assertvalues))\n                 finally:\n                     table.drop(bind=engine)"
    },
    {
        "commit_id": "35c5fd3fba57a04ebd9083207875692bb92ac6d4",
        "commit_message": "Fixed bug whereby a DBAPI that can return \"0\"\nfor cursor.lastrowid would not function correctly\nin conjunction with :attr:`.ResultProxy.inserted_primary_key`.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/35c5fd3fba57a04ebd9083207875692bb92ac6d4",
        "buggy_code": "c is autoinc_col and lastrowid or v",
        "fixed_code": "lastrowid if c is autoinc_col else v",
        "patch": "@@ -679,7 +679,7 @@ def post_insert(self):\n                     lastrowid = proc(lastrowid)\n \n             self.inserted_primary_key = [\n-                c is autoinc_col and lastrowid or v\n+                lastrowid if c is autoinc_col else v\n                 for c, v in zip(\n                                     table.primary_key,\n                                     self.inserted_primary_key)"
    },
    {
        "commit_id": "9ad9ccec87b89023db611d70da2c6d455c29ab60",
        "commit_message": "0.8.1 bump + test, changelog for hstore fix [ticket:2680]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9ad9ccec87b89023db611d70da2c6d455c29ab60",
        "buggy_code": "__version__ = '0.8.0'",
        "fixed_code": "__version__ = '0.8.1'",
        "patch": "@@ -120,7 +120,7 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or _inspect.ismodule(obj)))\n \n-__version__ = '0.8.0'\n+__version__ = '0.8.1'\n \n del _inspect, sys\n "
    },
    {
        "commit_id": "72c4bdf735d8d81b6ff182d7cc15bbfe56078d12",
        "commit_message": "merge plus fix the test spelling too",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/72c4bdf735d8d81b6ff182d7cc15bbfe56078d12",
        "buggy_code": "\"it's 'name' is assigned.\")",
        "fixed_code": "\"its 'name' is assigned.\")",
        "patch": "@@ -423,7 +423,7 @@ def visit_column(self, column, add_to_result_map=None,\n         name = orig_name = column.name\n         if name is None:\n             raise exc.CompileError(\"Cannot compile Column object until \"\n-                                   \"it's 'name' is assigned.\")\n+                                   \"its 'name' is assigned.\")\n \n         is_literal = column.is_literal\n         if not is_literal and isinstance(name, sql._truncated_label):"
    },
    {
        "commit_id": "c3e1ef81dbd6a3b62218b73a476407867b6b0871",
        "commit_message": "Fix typo.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c3e1ef81dbd6a3b62218b73a476407867b6b0871",
        "buggy_code": "\"it's 'name' is assigned.\")",
        "fixed_code": "\"its 'name' is assigned.\")",
        "patch": "@@ -423,7 +423,7 @@ def visit_column(self, column, add_to_result_map=None,\n         name = orig_name = column.name\n         if name is None:\n             raise exc.CompileError(\"Cannot compile Column object until \"\n-                                   \"it's 'name' is assigned.\")\n+                                   \"its 'name' is assigned.\")\n \n         is_literal = column.is_literal\n         if not is_literal and isinstance(name, sql._truncated_label):"
    },
    {
        "commit_id": "05eb72d431bdbf32d9787b9cdfafc651e5b335e5",
        "commit_message": "test_execute: import logging.handlers to fix AttributeError\n\nSee also: https://bugs.gentoo.org/show_bug.cgi?id=458684",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/05eb72d431bdbf32d9787b9cdfafc651e5b335e5",
        "buggy_code": "import logging",
        "fixed_code": "import logging, logging.handlers",
        "patch": "@@ -13,7 +13,7 @@\n from sqlalchemy import testing\n from sqlalchemy.testing import engines\n from sqlalchemy.testing.engines import testing_engine\n-import logging\n+import logging, logging.handlers\n from sqlalchemy.dialects.oracle.zxjdbc import ReturningParam\n from sqlalchemy.engine import result as _result, default\n from sqlalchemy.engine.base import Connection, Engine"
    },
    {
        "commit_id": "af44efe26e3f703ca1c30e79ee68428eed35abcf",
        "commit_message": "Fixed a bug regarding column annotations which in particular\ncould impact some usages of the new :func:`.orm.remote` and\n:func:`.orm.local` annotation functions, where annotations\ncould be lost when the column were used in a subsequent\nexpression.\n[ticket:2660]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/af44efe26e3f703ca1c30e79ee68428eed35abcf",
        "buggy_code": "expression.ColumnElement.comparator._reset(self)",
        "fixed_code": "expression.ColumnElement.comparator._reset(clone)",
        "patch": "@@ -449,7 +449,7 @@ def _annotate(self, values):\n     def _with_annotations(self, values):\n         clone = self.__class__.__new__(self.__class__)\n         clone.__dict__ = self.__dict__.copy()\n-        expression.ColumnElement.comparator._reset(self)\n+        expression.ColumnElement.comparator._reset(clone)\n         clone._annotations = values\n         return clone\n "
    },
    {
        "commit_id": "e26b28224d7c1745a8a2892372e1f5a8862e792c",
        "commit_message": "Fixed bug where :meth:`.Table.tometadata` would fail if a\n:class:`.Column` had both a foreign key as well as an\nalternate \".key\" name for the column.   Also in 0.7.10.\n[ticket:2643]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e26b28224d7c1745a8a2892372e1f5a8862e792c",
        "buggy_code": "[x.parent.name for x in self._elements.values()],",
        "fixed_code": "[x.parent.key for x in self._elements.values()],",
        "patch": "@@ -2280,7 +2280,7 @@ def supports_alter(ddl, event, schema_item, bind, **kw):\n \n     def copy(self, schema=None, **kw):\n         fkc = ForeignKeyConstraint(\n-                    [x.parent.name for x in self._elements.values()],\n+                    [x.parent.key for x in self._elements.values()],\n                     [x._get_colspec(schema=schema) for x in self._elements.values()],\n                     name=self.name,\n                     onupdate=self.onupdate,"
    },
    {
        "commit_id": "44576792ab80540abbf7da88badd5bd05953c478",
        "commit_message": "- fix a format issue in the create index",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/44576792ab80540abbf7da88badd5bd05953c478",
        "buggy_code": "include_schema=True),",
        "fixed_code": "include_schema=False),",
        "patch": "@@ -968,7 +968,7 @@ def visit_create_index(self, create):\n             text += \"UNIQUE \"\n         text += \"INDEX %s ON %s \" % (\n                         self._prepared_index_name(index,\n-                                include_schema=True),\n+                                include_schema=False),\n                     preparer.format_table(index.table)\n                 )\n "
    },
    {
        "commit_id": "a94f2f81afc859ea4553037cc12734311c8328b0",
        "commit_message": "Fixed bug in :func:`.postgresql.array` construct whereby using it\ninside of an :func:`.expression.insert` construct would produce an\nerror regarding a parameter issue in the ``self_group()`` method.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a94f2f81afc859ea4553037cc12734311c8328b0",
        "buggy_code": "def self_group(self, against):",
        "fixed_code": "def self_group(self, against=None):",
        "patch": "@@ -411,7 +411,7 @@ def _bind_param(self, operator, obj):\n             for o in obj\n         ])\n \n-    def self_group(self, against):\n+    def self_group(self, against=None):\n         return self\n \n "
    },
    {
        "commit_id": "6397a4ff4bce537487a3b30552622544868da9a0",
        "commit_message": "Fixed bug in type_coerce() whereby typing information\ncould be lost if the statement were used as a subquery\ninside of another statement, as well as other similar\nsituations.  Among other things, would cause\ntyping information to be lost when the Oracle/mssql dialects\nwould apply limit/offset wrappings. [ticket:2603]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6397a4ff4bce537487a3b30552622544868da9a0",
        "buggy_code": "VARCHAR2, NVARCHAR2, ROWID",
        "fixed_code": "VARCHAR2, NVARCHAR2, ROWID, dialect",
        "patch": "@@ -12,7 +12,7 @@\n     VARCHAR, NVARCHAR, CHAR, DATE, DATETIME, NUMBER,\\\n     BLOB, BFILE, CLOB, NCLOB, TIMESTAMP, RAW,\\\n     FLOAT, DOUBLE_PRECISION, LONG, dialect, INTERVAL,\\\n-    VARCHAR2, NVARCHAR2, ROWID\n+    VARCHAR2, NVARCHAR2, ROWID, dialect\n \n \n __all__ = ("
    },
    {
        "commit_id": "9dd08c2eca8ed250e3a36dcb6a9aa20693d324be",
        "commit_message": "Fixed regression where query.update() would produce\nan error if an object matched by the \"fetch\"\nsynchronization strategy wasn't locally present.\nCourtesy Scott Torborg. [ticket:2602]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9dd08c2eca8ed250e3a36dcb6a9aa20693d324be",
        "buggy_code": "eq_(sess.query(User.age).order_by(User.id).all(), zip([25,37,44,27]))",
        "fixed_code": "eq_(sess.query(User.age).order_by(User.id).all(), zip([25,47,44,37]))",
        "patch": "@@ -233,7 +233,7 @@ def test_update_without_load(self):\n \n         sess.query(User).filter(User.id == 3).\\\n                 update({'age': 44}, synchronize_session='fetch')\n-        eq_(sess.query(User.age).order_by(User.id).all(), zip([25,37,44,27]))\n+        eq_(sess.query(User.age).order_by(User.id).all(), zip([25,47,44,37]))\n \n     def test_update_changes_resets_dirty(self):\n         User = self.classes.User"
    },
    {
        "commit_id": "d30ab8495c9e16f7cf599da02ac8e333cc620b54",
        "commit_message": "Fixed bug whereby the \".key\" of a Column wasn't being\nused when producing a \"proxy\" of the column against\na selectable.   This probably didn't occur in 0.7\nsince 0.7 doesn't respect the \".key\" in a wider\nrange of scenarios. [ticket:2597]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d30ab8495c9e16f7cf599da02ac8e333cc620b54",
        "buggy_code": "__version__ = '0.8.0b1'",
        "fixed_code": "__version__ = '0.8.0b2'",
        "patch": "@@ -120,7 +120,7 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or _inspect.ismodule(obj)))\n \n-__version__ = '0.8.0b1'\n+__version__ = '0.8.0b2'\n \n del _inspect, sys\n "
    },
    {
        "commit_id": "d30ab8495c9e16f7cf599da02ac8e333cc620b54",
        "commit_message": "Fixed bug whereby the \".key\" of a Column wasn't being\nused when producing a \"proxy\" of the column against\na selectable.   This probably didn't occur in 0.7\nsince 0.7 doesn't respect the \".key\" in a wider\nrange of scenarios. [ticket:2597]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d30ab8495c9e16f7cf599da02ac8e333cc620b54",
        "buggy_code": "c._is_clone_of = selectable._is_clone_of.columns[c.name]",
        "fixed_code": "c._is_clone_of = selectable._is_clone_of.columns[c.key]",
        "patch": "@@ -1145,7 +1145,7 @@ def _make_proxy(self, selectable, name=None, key=None):\n         c.table = selectable\n         selectable._columns.add(c)\n         if selectable._is_clone_of is not None:\n-            c._is_clone_of = selectable._is_clone_of.columns[c.name]\n+            c._is_clone_of = selectable._is_clone_of.columns[c.key]\n         if self.primary_key:\n             selectable.primary_key.add(c)\n         c.dispatch.after_parent_attach(c, selectable)"
    },
    {
        "commit_id": "2484ef34c27f3342e62bd6285bb3668e2c913090",
        "commit_message": "  - [feature] The Query can now load entity/scalar-mixed\n    \"tuple\" rows that contain\n    types which aren't hashable, by setting the flag\n    \"hashable=False\" on the corresponding TypeEngine object\n    in use.  Custom types that return unhashable types\n    (typically lists) can set this flag to False.\n    [ticket:2592]\n  - [bug] Applying a column expression to a select\n    statement using a label with or without other\n    modifying constructs will no longer \"target\" that\n    expression to the underlying Column; this affects\n    ORM operations that rely upon Column targeting\n    in order to retrieve results.  That is, a query\n    like query(User.id, User.id.label('foo')) will now\n    track the value of each \"User.id\" expression separately\n    instead of munging them together.  It is not expected\n    that any users will be impacted by this; however,\n    a usage that uses select() in conjunction with\n    query.from_statement() and attempts to load fully\n    composed ORM entities may not function as expected\n    if the select() named Column objects with arbitrary\n    .label() names, as these will no longer target to\n    the Column objects mapped by that entity.\n    [ticket:2591]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2484ef34c27f3342e62bd6285bb3668e2c913090",
        "buggy_code": "compiled.result_map['test_table_y'][1][1],",
        "fixed_code": "compiled.result_map['test_table_y'][1][2],",
        "patch": "@@ -56,7 +56,7 @@ def test_select_cols_use_labels_result_map_targeting(self):\n         # the lower() function goes into the result_map, we don't really\n         # need this but it's fine\n         self.assert_compile(\n-            compiled.result_map['test_table_y'][1][1],\n+            compiled.result_map['test_table_y'][1][2],\n             \"lower(test_table.y)\"\n         )\n         # then the original column gets put in there as well."
    },
    {
        "commit_id": "c307df6596dab489109cd216665cf30006b70d13",
        "commit_message": "  - [feature] \"scalar\" selects now have a WHERE method\n    to help with generative building.  Also slight adjustment\n    regarding how SS \"correlates\" columns; the new methodology\n    no longer applies meaning to the underlying\n    Table column being selected.  This improves\n    some fairly esoteric situations, and the logic\n    that was there didn't seem to have any purpose.\n  - [feature] Some support for auto-rendering of a\n    relationship join condition based on the mapped\n    attribute, with usage of core SQL constructs.\n    E.g. select([SomeClass]).where(SomeClass.somerelationship)\n    would render SELECT from \"someclass\" and use the\n    primaryjoin of \"somerelationship\" as the WHERE\n    clause.   This changes the previous meaning\n    of \"SomeClass.somerelationship\" when used in a\n    core SQL context; previously, it would \"resolve\"\n    to the parent selectable, which wasn't generally\n    useful.  Related to [ticket:2245].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c307df6596dab489109cd216665cf30006b70d13",
        "buggy_code": "adapt_from = onclause.__clause_element__()",
        "fixed_code": "adapt_from = onclause.comparator._source_selectable()",
        "patch": "@@ -796,7 +796,7 @@ def __init__(self, left, right, onclause=None,\n                 prop = left_mapper.get_property(onclause)\n             elif isinstance(onclause, attributes.QueryableAttribute):\n                 if adapt_from is None:\n-                    adapt_from = onclause.__clause_element__()\n+                    adapt_from = onclause.comparator._source_selectable()\n                 prop = onclause.property\n             elif isinstance(onclause, MapperProperty):\n                 prop = onclause"
    },
    {
        "commit_id": "502152de2a77d213489d9652f1779dffde1e6d7b",
        "commit_message": "mssql:   - [bug] Fixed bug where reflection of primary key constraint\n    would double up columns if the same constraint/table\n    existed in multiple schemas.\n- force returns_rows to False for inserts where we know rows shouldnt be returned;\nallows post_exec() to use the cursor without issue",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/502152de2a77d213489d9652f1779dffde1e6d7b",
        "buggy_code": "Column('id', Integer, primary_key=True),",
        "fixed_code": "Column('id', Integer, primary_key=True, autoincrement=False),",
        "patch": "@@ -11,7 +11,7 @@ class TableDDLTest(fixtures.TestBase):\n \n     def _simple_fixture(self):\n         return Table('test_table', self.metadata,\n-                Column('id', Integer, primary_key=True),\n+                Column('id', Integer, primary_key=True, autoincrement=False),\n                 Column('data', String(50))\n             )\n "
    },
    {
        "commit_id": "502152de2a77d213489d9652f1779dffde1e6d7b",
        "commit_message": "mssql:   - [bug] Fixed bug where reflection of primary key constraint\n    would double up columns if the same constraint/table\n    existed in multiple schemas.\n- force returns_rows to False for inserts where we know rows shouldnt be returned;\nallows post_exec() to use the cursor without issue",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/502152de2a77d213489d9652f1779dffde1e6d7b",
        "buggy_code": "assert r.returns_rows",
        "fixed_code": "assert not r.returns_rows",
        "patch": "@@ -103,7 +103,7 @@ def test_autoclose_on_insert_implicit_returning(self):\n         )\n         assert r.closed\n         assert r.is_insert\n-        assert r.returns_rows\n+        assert not r.returns_rows\n \n \n __all__ = ('InsertSequencingTest', 'InsertBehaviorTest')"
    },
    {
        "commit_id": "4aba2eb6017de5d4b56d4aa34af87f2ebab903b0",
        "commit_message": "- fix annotation transfer when producing m2m backref, [ticket:2578]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4aba2eb6017de5d4b56d4aa34af87f2ebab903b0",
        "buggy_code": "if self.parent.isa(subq_mapper) and self.key==subq_path[1]:",
        "fixed_code": "if self.parent.isa(subq_mapper) and self.key == subq_path[1]:",
        "patch": "@@ -737,7 +737,7 @@ def _get_leftmost(self, subq_path):\n         subq_mapper = orm_util._class_to_mapper(subq_path[0])\n \n         # determine attributes of the leftmost mapper\n-        if self.parent.isa(subq_mapper) and self.key==subq_path[1]:\n+        if self.parent.isa(subq_mapper) and self.key == subq_path[1]:\n             leftmost_mapper, leftmost_prop = \\\n                                     self.parent, self.parent_property\n         else:"
    },
    {
        "commit_id": "0895e34d21c9818ec73e5c87e35ad6ba5c05acbd",
        "commit_message": "- fix empty row insert in fixture, [ticket:2573]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0895e34d21c9818ec73e5c87e35ad6ba5c05acbd",
        "buggy_code": "('id', 'parent_id', 'data')",
        "fixed_code": "('id', 'parent_id', 'data'),",
        "patch": "@@ -275,7 +275,7 @@ def fixtures(cls):\n             ),\n \n             nodes = (\n-                ('id', 'parent_id', 'data')\n+                ('id', 'parent_id', 'data'),\n             ),\n \n             composite_pk_table = ("
    },
    {
        "commit_id": "c7ab095fdbb13d045376df3f997a30058d7c82dd",
        "commit_message": "- [bug] Adjusted column default reflection code to\nconvert non-string values to string, to accommodate\nold SQLite versions that don't deliver\ndefault info as a string.  [ticket:2265]\n- factor sqlite column reflection to be like we did for postgresql,\nin a separate method.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c7ab095fdbb13d045376df3f997a30058d7c82dd",
        "buggy_code": "'nullable':col_d['nullable'],",
        "fixed_code": "'nullable': col_d['nullable'],",
        "patch": "@@ -387,7 +387,7 @@ def reflecttable(self, table, include_columns, exclude_columns=()):\n \n             coltype = col_d['type']\n             col_kw = {\n-                'nullable':col_d['nullable'],\n+                'nullable': col_d['nullable'],\n             }\n             for k in ('autoincrement', 'quote', 'info', 'key'):\n                 if k in col_d:"
    },
    {
        "commit_id": "c5d06d6f5dec6ec51cbc90d01725c99920a74f82",
        "commit_message": "Added test and fix for version_id_col bug.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5d06d6f5dec6ec51cbc90d01725c99920a74f82",
        "buggy_code": "type_=col.type))",
        "fixed_code": "type_=mapper.version_id_col.type))",
        "patch": "@@ -464,7 +464,7 @@ def update_stmt():\n         if needs_version_id:\n             clause.clauses.append(mapper.version_id_col ==\\\n                     sql.bindparam(mapper.version_id_col._label,\n-                                    type_=col.type))\n+                                    type_=mapper.version_id_col.type))\n \n         return table.update(clause)\n "
    },
    {
        "commit_id": "d55722031a6f3c04e41cd31f9e2926e66ecab78f",
        "commit_message": "fix 2.5 ism",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d55722031a6f3c04e41cd31f9e2926e66ecab78f",
        "buggy_code": "obj = constructor(*args, info={\"x\": \"y\"})",
        "fixed_code": "obj = constructor(info={\"x\": \"y\"}, *args)",
        "patch": "@@ -397,7 +397,7 @@ class MyComposite(object):\n             (relationship, (Address,)),\n             (composite, (MyComposite, 'id', 'name'))\n         ]:\n-            obj = constructor(*args, info={\"x\": \"y\"})\n+            obj = constructor(info={\"x\": \"y\"}, *args)\n             eq_(obj.info, {\"x\": \"y\"})\n             obj.info[\"q\"] = \"p\"\n             eq_(obj.info, {\"x\": \"y\", \"q\": \"p\"})"
    },
    {
        "commit_id": "8f5a31441aed9d223e67d211472445e574fc521f",
        "commit_message": "- [bug] Fixed cextension bug whereby the\n\"ambiguous column error\" would fail to\nfunction properly if the given index were\na Column object and not a string.\nNote there are still some column-targeting\nissues here which are fixed in 0.8.\n[ticket:2553]\n- find more cases where column targeting is being inaccurate, add\nmore information to result_map to better differentiate \"ambiguous\"\nresults from \"present\" or \"not present\".  In particular, result_map\nis sensitive to dupes, even though no error is raised; the conflicting\ncolumns are added to the \"obj\" member of the tuple so that the two\nare both directly accessible in the result proxy\n- handwringing over the damn \"name fallback\" thing in results.  can't\nreally make it perfect yet\n- fix up oracle returning clause.  not sure why its guarding against\nlabels, remove that for now and see what the bot says.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8f5a31441aed9d223e67d211472445e574fc521f",
        "buggy_code": "else name.lower()] = (processor, obj, None)",
        "fixed_code": "else name.lower()] = rec = (processor, obj, None)",
        "patch": "@@ -232,7 +232,7 @@ def __init__(self, parent, metadata):\n                 # unambiguous.\n                 primary_keymap[name\n                                 if self.case_sensitive\n-                                else name.lower()] = (processor, obj, None)\n+                                else name.lower()] = rec = (processor, obj, None)\n \n             self.keys.append(colname)\n             if obj:"
    },
    {
        "commit_id": "8340361bfa93dab71b18827fa0b7e7dc91b1d736",
        "commit_message": "- [bug] Fixed compiler bug whereby a given\nselect() would be modified if it had an \"offset\"\nattribute, causing the construct to not compile\ncorrectly a second time.  [ticket:2545]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8340361bfa93dab71b18827fa0b7e7dc91b1d736",
        "buggy_code": "sql.literal_column(\"ROWNUM\")<=max_row)",
        "fixed_code": "sql.literal_column(\"ROWNUM\") <= max_row)",
        "patch": "@@ -566,7 +566,7 @@ def visit_select(self, select, **kwargs):\n                     if not self.dialect.use_binds_for_limits:\n                         max_row = sql.literal_column(\"%d\" % max_row)\n                     limitselect.append_whereclause(\n-                            sql.literal_column(\"ROWNUM\")<=max_row)\n+                            sql.literal_column(\"ROWNUM\") <= max_row)\n \n                 # If needed, add the ora_rn, and wrap again with offset.\n                 if select._offset is None:"
    },
    {
        "commit_id": "9ade5d2ebff4b7c712191827688066927b3e62b2",
        "commit_message": "- another import fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9ade5d2ebff4b7c712191827688066927b3e62b2",
        "buggy_code": "self._result_proxy = base.FullyBufferedResultProxy(self)",
        "fixed_code": "self._result_proxy = engine.FullyBufferedResultProxy(self)",
        "patch": "@@ -689,7 +689,7 @@ def post_exec(self):\n \n         if (self.isinsert or self.isupdate or self.isdelete) and \\\n                 self.compiled.returning:\n-            self._result_proxy = base.FullyBufferedResultProxy(self)\n+            self._result_proxy = engine.FullyBufferedResultProxy(self)\n \n         if self._enable_identity_insert:\n             conn._cursor_execute(self.cursor,"
    },
    {
        "commit_id": "63e2a0f8eba8c2a3b522abb86d17edb6c7bc94ee",
        "commit_message": "  - [bug] Improvements to joined/subquery eager\n    loading dealing with chains of subclass entities\n    sharing a common base, with no specific \"join depth\"\n    provided.  Will chain out to\n    each subclass mapper individually before detecting\n    a \"cycle\", rather than considering the base class\n    to be the source of the \"cycle\".  [ticket:2481]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/63e2a0f8eba8c2a3b522abb86d17edb6c7bc94ee",
        "buggy_code": "return mapper.base_mapper in self.reduced_path",
        "fixed_code": "return mapper in self.path",
        "patch": "@@ -288,7 +288,7 @@ def length(self):\n         return len(self.path)\n \n     def contains_mapper(self, mapper):\n-        return mapper.base_mapper in self.reduced_path\n+        return mapper in self.path\n \n     def contains(self, reg, key):\n         return (key, self.reduced_path) in reg._attributes"
    },
    {
        "commit_id": "747250587491ad76e30177b232daec5928f5b36d",
        "commit_message": "- justify NamedTuple, now called KeyedTuple\n- fix this test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/747250587491ad76e30177b232daec5928f5b36d",
        "buggy_code": "rows = [util.NamedTuple([proc(row, None) for proc in process],",
        "fixed_code": "rows = [util.KeyedTuple([proc(row, None) for proc in process],",
        "patch": "@@ -70,7 +70,7 @@ def filter_fn(row):\n         elif single_entity:\n             rows = [process[0](row, None) for row in fetch]\n         else:\n-            rows = [util.NamedTuple([proc(row, None) for proc in process],\n+            rows = [util.KeyedTuple([proc(row, None) for proc in process],\n                                     labels) for row in fetch]\n \n         if filtered:"
    },
    {
        "commit_id": "747250587491ad76e30177b232daec5928f5b36d",
        "commit_message": "- justify NamedTuple, now called KeyedTuple\n- fix this test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/747250587491ad76e30177b232daec5928f5b36d",
        "buggy_code": "from _collections import NamedTuple, ImmutableContainer, immutabledict, \\",
        "fixed_code": "from _collections import KeyedTuple, ImmutableContainer, immutabledict, \\",
        "patch": "@@ -9,7 +9,7 @@\n     update_wrapper, partial, md5_hex, decode_slice, dottedgetter,\\\n     parse_qsl, any, contextmanager, namedtuple, next, WeakSet\n \n-from _collections import NamedTuple, ImmutableContainer, immutabledict, \\\n+from _collections import KeyedTuple, ImmutableContainer, immutabledict, \\\n     Properties, OrderedProperties, ImmutableProperties, OrderedDict, \\\n     OrderedSet, IdentitySet, OrderedIdentitySet, column_set, \\\n     column_dict, ordered_column_set, populate_column_dict, unique_list, \\"
    },
    {
        "commit_id": "ee8b7d317850dc0852116efe457751f41e7c6cf8",
        "commit_message": "- fix this import\n- call loading.instances",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ee8b7d317850dc0852116efe457751f41e7c6cf8",
        "buggy_code": "from . import util",
        "fixed_code": "from .. import util",
        "patch": "@@ -18,7 +18,7 @@\n     'sybase',\n     )\n \n-from . import util\n+from .. import util\n \n def _auto_fn(name):\n     \"\"\"default dialect importer."
    },
    {
        "commit_id": "ee8b7d317850dc0852116efe457751f41e7c6cf8",
        "commit_message": "- fix this import\n- call loading.instances",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ee8b7d317850dc0852116efe457751f41e7c6cf8",
        "buggy_code": "return self.instances(result, querycontext)",
        "fixed_code": "return loading.instances(self, result, querycontext)",
        "patch": "@@ -2242,7 +2242,7 @@ def _execute_and_instances(self, querycontext):\n                         close_with_result=True)\n \n         result = conn.execute(querycontext.statement, self._params)\n-        return self.instances(result, querycontext)\n+        return loading.instances(self, result, querycontext)\n \n     @property\n     def column_descriptions(self):"
    },
    {
        "commit_id": "a29245e247698160172e42e2154180997b81b8ba",
        "commit_message": "- [bug] Added BIGINT, BINARY, VARBINARY to\ntypes.__all__, sqlalchemy namespaces,\nplus tests to make sure new types\nremain importable.\n[ticket:2499]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a29245e247698160172e42e2154180997b81b8ba",
        "buggy_code": "'CLOB', 'BLOB', 'BINARY', 'VARBINARY', 'BOOLEAN', 'SMALLINT',",
        "fixed_code": "'CLOB', 'BLOB', 'BINARY', 'VARBINARY', 'BOOLEAN', 'BIGINT', 'SMALLINT',",
        "patch": "@@ -14,7 +14,7 @@\n __all__ = [ 'TypeEngine', 'TypeDecorator', 'AbstractType', 'UserDefinedType',\n             'INT', 'CHAR', 'VARCHAR', 'NCHAR', 'NVARCHAR','TEXT', 'Text',\n             'FLOAT', 'NUMERIC', 'REAL', 'DECIMAL', 'TIMESTAMP', 'DATETIME', \n-            'CLOB', 'BLOB', 'BINARY', 'VARBINARY', 'BOOLEAN', 'SMALLINT',\n+            'CLOB', 'BLOB', 'BINARY', 'VARBINARY', 'BOOLEAN', 'BIGINT', 'SMALLINT',\n             'INTEGER', 'DATE', 'TIME', 'String', 'Integer', 'SmallInteger',\n             'BigInteger', 'Numeric', 'Float', 'DateTime', 'Date', 'Time',\n             'LargeBinary', 'Binary', 'Boolean', 'Unicode', 'Concatenable',"
    },
    {
        "commit_id": "5b8e5d381c710b0d813022467acc56265e98a27d",
        "commit_message": "- [bug] Fixed identity_key() function which\nwas not accepting a scalar argument\nfor the identity.  [ticket:2508]. Also\nin 0.7.8.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5b8e5d381c710b0d813022467acc56265e98a27d",
        "buggy_code": "return mapper.identity_key_from_primary_key(ident)",
        "fixed_code": "return mapper.identity_key_from_primary_key(util.to_list(ident))",
        "patch": "@@ -199,7 +199,7 @@ def identity_key(*args, **kwargs):\n                 % \", \".join(kwargs.keys()))\n         mapper = class_mapper(class_)\n         if \"ident\" in locals():\n-            return mapper.identity_key_from_primary_key(ident)\n+            return mapper.identity_key_from_primary_key(util.to_list(ident))\n         return mapper.identity_key_from_row(row)\n     instance = kwargs.pop(\"instance\")\n     if kwargs:"
    },
    {
        "commit_id": "c05b9e49a566f4ead41badfd3bdbff938e7f2230",
        "commit_message": "- [bug] Added ROWID to oracle.*, [ticket:2483]\nAlso in 0.7.8.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c05b9e49a566f4ead41badfd3bdbff938e7f2230",
        "buggy_code": "VARCHAR2, NVARCHAR2",
        "fixed_code": "VARCHAR2, NVARCHAR2, ROWID",
        "patch": "@@ -12,7 +12,7 @@\n     VARCHAR, NVARCHAR, CHAR, DATE, DATETIME, NUMBER,\\\n     BLOB, BFILE, CLOB, NCLOB, TIMESTAMP, RAW,\\\n     FLOAT, DOUBLE_PRECISION, LONG, dialect, INTERVAL,\\\n-    VARCHAR2, NVARCHAR2\n+    VARCHAR2, NVARCHAR2, ROWID\n \n \n __all__ = ("
    },
    {
        "commit_id": "3757034d2de03f23dabb9456d773e34b8b09edb0",
        "commit_message": "  - [bug] Fixed issue in unit of work\n    whereby setting a non-None self-referential\n    many-to-one relationship to None\n    would fail to persist the change if the\n    former value was not already loaded.\n    [ticket:2477].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3757034d2de03f23dabb9456d773e34b8b09edb0",
        "buggy_code": "ret = []",
        "fixed_code": "ret = [(None, None)]",
        "patch": "@@ -627,7 +627,7 @@ def get_all_pending(self, state, dict_):\n             if current is not None:\n                 ret = [(instance_state(current), current)]\n             else:\n-                ret = []\n+                ret = [(None, None)]\n \n             if self.key in state.committed_state:\n                 original = state.committed_state[self.key]"
    },
    {
        "commit_id": "232dcbfb19fb254ca887b1ec44be8cea564d2b89",
        "commit_message": "fix 2.5 failure",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/232dcbfb19fb254ca887b1ec44be8cea564d2b89",
        "buggy_code": "@inspection._inspects(SomeFoo)",
        "fixed_code": "SomeFooInspect = inspection._inspects(SomeFoo)(SomeFooInspect)",
        "patch": "@@ -32,10 +32,10 @@ def test_class_insp(self):\n         class SomeFoo(TestFixture):\n             pass\n \n-        @inspection._inspects(SomeFoo)\n         class SomeFooInspect(object):\n             def __init__(self, target):\n                 self.target = target\n+        SomeFooInspect = inspection._inspects(SomeFoo)(SomeFooInspect)\n \n         somefoo = SomeFoo()\n         insp = inspect(somefoo)"
    },
    {
        "commit_id": "0b97ba8a1410447797c0a1d049b2cfb6cc066ff3",
        "commit_message": "- [bug] Added 'LEVEL' to the list of reserved\nwords for Oracle.  [ticket:2435]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0b97ba8a1410447797c0a1d049b2cfb6cc066ff3",
        "buggy_code": "'DECIMAL UNION PUBLIC AND START UID COMMENT CURRENT'.split())",
        "fixed_code": "'DECIMAL UNION PUBLIC AND START UID COMMENT CURRENT LEVEL'.split())",
        "patch": "@@ -158,7 +158,7 @@\n         'AS IN VIEW EXCLUSIVE COMPRESS SYNONYM SELECT INSERT EXISTS '\\\n         'NOT TRIGGER ELSE CREATE INTERSECT PCTFREE DISTINCT USER '\\\n         'CONNECT SET MODE OF UNIQUE VARCHAR2 VARCHAR LOCK OR CHAR '\\\n-        'DECIMAL UNION PUBLIC AND START UID COMMENT CURRENT'.split())\n+        'DECIMAL UNION PUBLIC AND START UID COMMENT CURRENT LEVEL'.split())\n \n NO_ARG_FNS = set('UID CURRENT_DATE SYSDATE USER '\n                 'CURRENT_TIME CURRENT_TIMESTAMP'.split())"
    },
    {
        "commit_id": "54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "commit_message": "merge patch for [ticket:2208].   This still needs documentation.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "buggy_code": "state.modified_event(dict_,",
        "fixed_code": "state._modified_event(dict_,",
        "patch": "@@ -97,7 +97,7 @@ def _modified_event(self, state, dict_):\n         if self.key not in state.committed_state:\n             state.committed_state[self.key] = CollectionHistory(self, state)\n \n-        state.modified_event(dict_, \n+        state._modified_event(dict_, \n                                 self,\n                                 attributes.NEVER_SET)\n "
    },
    {
        "commit_id": "54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "commit_message": "merge patch for [ticket:2208].   This still needs documentation.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "buggy_code": "from sqlalchemy import event, util",
        "fixed_code": "from sqlalchemy import event, util, inspection",
        "patch": "@@ -23,7 +23,7 @@\n \n from sqlalchemy.orm import exc, collections, events\n from operator import attrgetter, itemgetter\n-from sqlalchemy import event, util\n+from sqlalchemy import event, util, inspection\n import weakref\n from sqlalchemy.orm import state, attributes\n "
    },
    {
        "commit_id": "54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "commit_message": "merge patch for [ticket:2208].   This still needs documentation.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/54017d9de202ed67072a352ce2f6dbfd74bf48f3",
        "buggy_code": "state.dispose()",
        "fixed_code": "state._dispose()",
        "patch": "@@ -1158,7 +1158,7 @@ def _set_imap_in_disposal(self, sess, *objs):\n         for obj in objs:\n             state = attributes.instance_state(obj)\n             sess.identity_map.discard(state)\n-            state.dispose()\n+            state._dispose()\n \n     def _test_session(self, **kwargs):\n         global sess"
    },
    {
        "commit_id": "541e59c3d7c141cfe532b26b5fbf4b8a8d30b841",
        "commit_message": "- [bug] UPDATE..FROM syntax with SQL Server\nrequires that the updated table be present\nin the FROM clause when an alias of that\ntable is also present in the FROM clause.\nThe updated table is now always present\nin the FROM, when FROM is present\nin the first place.  Courtesy sayap.\n[ticket:2468]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/541e59c3d7c141cfe532b26b5fbf4b8a8d30b841",
        "buggy_code": "MySQL overrides this.",
        "fixed_code": "MySQL and MSSQL override this.",
        "patch": "@@ -1115,7 +1115,7 @@ def update_from_clause(self, update_stmt,\n         \"\"\"Provide a hook to override the generation of an \n         UPDATE..FROM clause.\n \n-        MySQL overrides this.\n+        MySQL and MSSQL override this.\n \n         \"\"\"\n         return \"FROM \" + ', '.join("
    },
    {
        "commit_id": "541e59c3d7c141cfe532b26b5fbf4b8a8d30b841",
        "commit_message": "- [bug] UPDATE..FROM syntax with SQL Server\nrequires that the updated table be present\nin the FROM clause when an alias of that\ntable is also present in the FROM clause.\nThe updated table is now always present\nin the FROM, when FROM is present\nin the first place.  Courtesy sayap.\n[ticket:2468]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/541e59c3d7c141cfe532b26b5fbf4b8a8d30b841",
        "buggy_code": "\"FROM othertable WITH (PAGLOCK) \"",
        "fixed_code": "\"FROM sometable, othertable WITH (PAGLOCK) \"",
        "patch": "@@ -136,7 +136,7 @@ def test_update_from_hint(self):\n                                 selectable=t2, \n                                 dialect_name=darg),\n                 \"UPDATE sometable SET somecolumn=:somecolumn \"\n-                \"FROM othertable WITH (PAGLOCK) \"\n+                \"FROM sometable, othertable WITH (PAGLOCK) \"\n                 \"WHERE sometable.somecolumn = othertable.somecolumn\"\n             )\n "
    },
    {
        "commit_id": "ad9c893dc81704de7adca8635fb870de5952305b",
        "commit_message": "Merged in bentrofatter/sqlalchemy-informix-dialect-fix (pull request #7)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ad9c893dc81704de7adca8635fb870de5952305b",
        "buggy_code": "\"all\", \"allocate\", \"all_rows\", \"altere\", \"and\", \"ansi\", \"any\", \"append\",",
        "fixed_code": "\"all\", \"allocate\", \"all_rows\", \"alter\", \"and\", \"ansi\", \"any\", \"append\",",
        "patch": "@@ -23,7 +23,7 @@\n RESERVED_WORDS = set(\n     [\"abs\", \"absolute\", \"access\", \"access_method\", \"acos\", \"active\", \"add\",\n     \"address\", \"add_months\", \"admin\", \"after\", \"aggregate\", \"alignment\",\n-    \"all\", \"allocate\", \"all_rows\", \"altere\", \"and\", \"ansi\", \"any\", \"append\",\n+    \"all\", \"allocate\", \"all_rows\", \"alter\", \"and\", \"ansi\", \"any\", \"append\",\n     \"array\", \"as\", \"asc\", \"ascii\", \"asin\", \"at\", \"atan\", \"atan2\", \"attach\",\n     \"attributes\", \"audit\", \"authentication\", \"authid\", \"authorization\",\n     \"authorized\", \"auto\", \"autofree\", \"auto_reprepare\", \"auto_stat_mode\","
    },
    {
        "commit_id": "b7abf86f72e62644846dfd540bcceae7959cd046",
        "commit_message": "Fix innodb autoinc constraint (double)quoting",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b7abf86f72e62644846dfd540bcceae7959cd046",
        "buggy_code": "constraint_string += \"KEY `idx_autoinc_%s`(`%s`)\" % (auto_inc_column.name, \\",
        "fixed_code": "constraint_string += \"KEY `idx_autoinc_%s`(%s)\" % (auto_inc_column.name, \\",
        "patch": "@@ -1395,7 +1395,7 @@ def create_table_constraints(self, table):\n                 auto_inc_column is not list(table.primary_key)[0]:\n             if constraint_string:\n                 constraint_string += \", \\n\\t\"\n-            constraint_string += \"KEY `idx_autoinc_%s`(`%s`)\" % (auto_inc_column.name, \\\n+            constraint_string += \"KEY `idx_autoinc_%s`(%s)\" % (auto_inc_column.name, \\\n                             self.preparer.format_column(auto_inc_column))\n \n         return constraint_string"
    },
    {
        "commit_id": "8696a45b096dd7fedb6e9683bef4de99220c976d",
        "commit_message": "- [bug] Fixed event registration bug\nwhich would primarily show up as\nevents not being registered with\nsessionmaker() instances created\nafter the event was associated\nwith the Session class.  [ticket:2424]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8696a45b096dd7fedb6e9683bef4de99220c976d",
        "buggy_code": "return type(\"Session\", (Sess, class_), {})",
        "fixed_code": "return type(\"SessionMaker\", (Sess, class_), {})",
        "patch": "@@ -99,7 +99,7 @@ def configure(self, **new_kwargs):\n             kwargs.update(new_kwargs)\n \n \n-    return type(\"Session\", (Sess, class_), {})\n+    return type(\"SessionMaker\", (Sess, class_), {})\n \n \n class SessionTransaction(object):"
    },
    {
        "commit_id": "d60bc21fc69f70c8e7b63b7ed88483bbbe42250a",
        "commit_message": "fix callcount",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d60bc21fc69f70c8e7b63b7ed88483bbbe42250a",
        "buggy_code": "'2.6':58, '3':57,",
        "fixed_code": "'2.6':58, '3':61,",
        "patch": "@@ -85,7 +85,7 @@ def test_minimal_engine_execute(self):\n         e.execute(\"select 1\")\n \n         @profiling.function_call_count(versions={'2.4':41, '2.5':58, \n-                                                    '2.6':58, '3':57,\n+                                                    '2.6':58, '3':61,\n                                                     '2.7':60,\n                                                     '2.6+cextension':60}, \n                                             variance=.05)"
    },
    {
        "commit_id": "d101c597f57bfa7a72636b8e76a14d5c9f82bfd4",
        "commit_message": "- [feature] Added support for the \"isolation_level\"\nparameter to all MySQL dialects.  Thanks\nto mu_mind for the patch here. [ticket:2394]\n- add documentation examples for mysql, postgresql\n- pep8ing",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d101c597f57bfa7a72636b8e76a14d5c9f82bfd4",
        "buggy_code": "only_on(('postgresql', 'sqlite'), \"DBAPI has no isolation level support\"),",
        "fixed_code": "only_on(('postgresql', 'sqlite', 'mysql'), \"DBAPI has no isolation level support\"),",
        "patch": "@@ -107,7 +107,7 @@ def updateable_autoincrement_pks(fn):\n def isolation_level(fn):\n     return _chain_decorators_on(\n         fn,\n-        only_on(('postgresql', 'sqlite'), \"DBAPI has no isolation level support\"),\n+        only_on(('postgresql', 'sqlite', 'mysql'), \"DBAPI has no isolation level support\"),\n         fails_on('postgresql+pypostgresql',\n                       'pypostgresql bombs on multiple isolation level calls')\n     )"
    },
    {
        "commit_id": "d50ea3eabf49a8f881a4a21dbafd471bd6510ba8",
        "commit_message": "- [bug] Index will raise when arguments passed\ncannot be interpreted as columns or expressions.\nWill warn when Index is created\nwith no columns at all.  [ticket:2380]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d50ea3eabf49a8f881a4a21dbafd471bd6510ba8",
        "buggy_code": "(schema.Index(\"bar\"), \"Index('bar')\"),",
        "fixed_code": "(schema.Index(\"bar\", \"c\"), \"Index('bar')\"),",
        "patch": "@@ -655,7 +655,7 @@ def test_assorted_repr(self):\n                 \"Column('x', String(), table=<bar>), schema=None)\"),\n             (schema.DefaultGenerator(for_update=True), \n                 \"DefaultGenerator(for_update=True)\"),\n-            (schema.Index(\"bar\"), \"Index('bar')\"),\n+            (schema.Index(\"bar\", \"c\"), \"Index('bar')\"),\n             (i1, \"Index('bar', Column('x', Integer(), table=<foo>))\"),\n             (schema.FetchedValue(), \"FetchedValue()\"),\n             (ck, "
    },
    {
        "commit_id": "a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "commit_message": "- [bug] A significant change to how labeling\nis applied to columns in SELECT statements\nallows \"truncated\" labels, that is label names\nthat are generated in Python which exceed\nthe maximum identifier length (note this is\nconfigurable via label_length on create_engine()),\nto be properly referenced when rendered inside\nof a subquery, as well as to be present\nin a result set row using their original\nin-Python names.   [ticket:2396]\n\n- apply pep8 to test_labels",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "buggy_code": "expression._generated_label) and \\",
        "fixed_code": "expression._truncated_label) and \\",
        "patch": "@@ -215,7 +215,7 @@ def visit_alias(self, alias, asfrom=False, **kwargs):\n             # Override to not use the AS keyword which FB 1.5 does not like\n             if asfrom:\n                 alias_name = isinstance(alias.name,\n-                                expression._generated_label) and \\\n+                                expression._truncated_label) and \\\n                                 self._truncated_identifier(\"alias\",\n                                 alias.name) or alias.name\n "
    },
    {
        "commit_id": "a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "commit_message": "- [bug] A significant change to how labeling\nis applied to columns in SELECT statements\nallows \"truncated\" labels, that is label names\nthat are generated in Python which exceed\nthe maximum identifier length (note this is\nconfigurable via label_length on create_engine()),\nto be properly referenced when rendered inside\nof a subquery, as well as to be present\nin a result set row using their original\nin-Python names.   [ticket:2396]\n\n- apply pep8 to test_labels",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "buggy_code": "alias_name = isinstance(alias.name, expression._generated_label) and \\",
        "fixed_code": "alias_name = isinstance(alias.name, expression._truncated_label) and \\",
        "patch": "@@ -481,7 +481,7 @@ def visit_alias(self, alias, asfrom=False, ashint=False, **kwargs):\n         \"\"\"Oracle doesn't like ``FROM table AS alias``.  Is the AS standard SQL??\"\"\"\n \n         if asfrom or ashint:\n-            alias_name = isinstance(alias.name, expression._generated_label) and \\\n+            alias_name = isinstance(alias.name, expression._truncated_label) and \\\n                             self._truncated_identifier(\"alias\", alias.name) or alias.name\n \n         if ashint:"
    },
    {
        "commit_id": "a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "commit_message": "- [bug] A significant change to how labeling\nis applied to columns in SELECT statements\nallows \"truncated\" labels, that is label names\nthat are generated in Python which exceed\nthe maximum identifier length (note this is\nconfigurable via label_length on create_engine()),\nto be properly referenced when rendered inside\nof a subquery, as well as to be present\nin a result set row using their original\nin-Python names.   [ticket:2396]\n\n- apply pep8 to test_labels",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a4e3bc61bcb1f1aeaa334f6da4f3b9fcb3059d00",
        "buggy_code": "@profiling.function_call_count(393, {'3.2':360})",
        "fixed_code": "@profiling.function_call_count(413, {'3.2':360})",
        "patch": "@@ -340,7 +340,7 @@ def test_profile_1_create_tables(self):\n     def test_profile_1a_populate(self):\n         self.test_baseline_1a_populate()\n \n-    @profiling.function_call_count(393, {'3.2':360})\n+    @profiling.function_call_count(413, {'3.2':360})\n     def test_profile_2_insert(self):\n         self.test_baseline_2_insert()\n "
    },
    {
        "commit_id": "dbd46170fb2751084d3de09d5a78e5802a839bf2",
        "commit_message": "mark this test as unsupported before 2.6, there's some unicode\nissue I'm not exactly sure of what nature it is",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dbd46170fb2751084d3de09d5a78e5802a839bf2",
        "buggy_code": "assert re.search(msg, unicode(e)), u\"%r !~ %s\" % (msg, e)",
        "fixed_code": "assert re.search(msg, unicode(e), re.UNICODE), u\"%r !~ %s\" % (msg, e)",
        "patch": "@@ -522,7 +522,7 @@ def assert_raises_message(except_cls, msg, callable_, *args, **kwargs):\n         callable_(*args, **kwargs)\n         assert False, \"Callable did not raise an exception\"\n     except except_cls, e:\n-        assert re.search(msg, unicode(e)), u\"%r !~ %s\" % (msg, e)\n+        assert re.search(msg, unicode(e), re.UNICODE), u\"%r !~ %s\" % (msg, e)\n         print unicode(e).encode('utf-8')\n \n def fail(msg):"
    },
    {
        "commit_id": "b7f7ed210501a405938bf55e08a47e35674f0247",
        "commit_message": "fix a few py3k bugs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b7f7ed210501a405938bf55e08a47e35674f0247",
        "buggy_code": "buf.write(sql.compile(dialect=engine.dialect))",
        "fixed_code": "buf.write(unicode(sql.compile(dialect=engine.dialect)))",
        "patch": "@@ -576,7 +576,7 @@ class MockStrategyTest(fixtures.TestBase):\n     def _engine_fixture(self):\n         buf = StringIO.StringIO()\n         def dump(sql, *multiparams, **params):\n-            buf.write(sql.compile(dialect=engine.dialect))\n+            buf.write(unicode(sql.compile(dialect=engine.dialect)))\n         engine = create_engine('postgresql://', strategy='mock', executor=dump)\n         return engine, buf\n "
    },
    {
        "commit_id": "378e86124b598f2773cf124beab853ad63b71ee9",
        "commit_message": "- [bug] Fixed regression from 0.7.4 whereby\nusing an already instrumented column from a\nsuperclass as \"polymorphic_on\" failed to resolve\nthe underlying Column.  [ticket:2345]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/378e86124b598f2773cf124beab853ad63b71ee9",
        "buggy_code": "self.polymorphic_on = polymorphic_on",
        "fixed_code": "self.polymorphic_on = expression._clause_element_as_expr(polymorphic_on)",
        "patch": "@@ -128,7 +128,7 @@ def __init__(self,\n         self.batch = batch\n         self.eager_defaults = eager_defaults\n         self.column_prefix = column_prefix\n-        self.polymorphic_on = polymorphic_on\n+        self.polymorphic_on = expression._clause_element_as_expr(polymorphic_on)\n         self._dependency_processors = []\n         self.validators = util.immutabledict()\n         self.passive_updates = passive_updates"
    },
    {
        "commit_id": "5221f492ca704d75561d7729fba0fa48fd3ad0fb",
        "commit_message": "- [bug] Added a boolean check for the \"finalize\"\nfunction within the pool connection proxy's\nweakref callback before calling it, so that a\nwarning isn't emitted that this function is None\nwhen the application is exiting and gc has\nremoved the function from the module before the\nweakref callback was invoked.  [ticket:2383]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5221f492ca704d75561d7729fba0fa48fd3ad0fb",
        "buggy_code": "lambda ref:_finalize_fairy(conn, rec, pool, ref, _echo)",
        "fixed_code": "lambda ref:_finalize_fairy and _finalize_fairy(conn, rec, pool, ref, _echo)",
        "patch": "@@ -372,7 +372,7 @@ def __init__(self, pool):\n             conn = self.connection = self._connection_record.get_connection()\n             rec.fairy = weakref.ref(\n                             self, \n-                            lambda ref:_finalize_fairy(conn, rec, pool, ref, _echo)\n+                            lambda ref:_finalize_fairy and _finalize_fairy(conn, rec, pool, ref, _echo)\n                         )\n             _refs.add(rec)\n         except:"
    },
    {
        "commit_id": "21870c750302704890f5fc7a4e15c7e27c3e512f",
        "commit_message": "  - [bug] Adjusted the regexp used in the\n    mssql.TIME type to ensure only six digits\n    are received for the \"microseconds\" portion\n    of the value, which is expected by\n    Python's datetime.time().  Note that\n    support for sending microseconds doesn't\n    seem to be possible yet with pyodbc\n    at least.  [ticket:2340]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/21870c750302704890f5fc7a4e15c7e27c3e512f",
        "buggy_code": "_reg = re.compile(r\"(\\d+):(\\d+):(\\d+)(?:\\.(\\d+))?\")",
        "fixed_code": "_reg = re.compile(r\"(\\d+):(\\d+):(\\d+)(?:\\.(\\d{0,6}))?\")",
        "patch": "@@ -296,7 +296,7 @@ def process(value):\n             return value\n         return process\n \n-    _reg = re.compile(r\"(\\d+):(\\d+):(\\d+)(?:\\.(\\d+))?\")\n+    _reg = re.compile(r\"(\\d+):(\\d+):(\\d+)(?:\\.(\\d{0,6}))?\")\n     def result_processor(self, dialect, coltype):\n         def process(value):\n             if isinstance(value, datetime.datetime):"
    },
    {
        "commit_id": "bd87e2c455944c93cd2ee881f714fcb7b231bcac",
        "commit_message": "pg8000 fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bd87e2c455944c93cd2ee881f714fcb7b231bcac",
        "buggy_code": "row = testing.db.execute(select([(content.c.type > 5).label(\"content_type\")])).first()",
        "fixed_code": "row = testing.db.execute(select([(content.c.type > \"abc\").label(\"content_type\")])).first()",
        "patch": "@@ -327,7 +327,7 @@ def test_column_label_overlap_fallback(self):\n         assert bar.c.content_type not in row\n         assert sql.column('content_type') in row\n \n-        row = testing.db.execute(select([(content.c.type > 5).label(\"content_type\")])).first()\n+        row = testing.db.execute(select([(content.c.type > \"abc\").label(\"content_type\")])).first()\n         assert content.c.type in row\n         assert bar.c.content_type not in row\n         assert sql.column('content_type') in row"
    },
    {
        "commit_id": "876305170fe6bd27e0c67cfa1843b7430e293ef8",
        "commit_message": "fix small update doc issue [ticket:2158]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/876305170fe6bd27e0c67cfa1843b7430e293ef8",
        "buggy_code": ">>> db.loans.update(db.loans.book_id==2, book_id=1)",
        "fixed_code": ">>> db.loans.filter_by(db.loans.book_id==2).update({'book_id':1})",
        "patch": "@@ -159,7 +159,7 @@\n You can similarly update multiple rows at once. This will change the\n book_id to 1 in all loans whose book_id is 2::\n \n-    >>> db.loans.update(db.loans.book_id==2, book_id=1)\n+    >>> db.loans.filter_by(db.loans.book_id==2).update({'book_id':1})\n     >>> db.loans.filter_by(book_id=1).all()\n     [MappedLoans(book_id=1,user_name=u'Joe Student',\n         loan_date=datetime.datetime(2006, 7, 12, 0, 0))]"
    },
    {
        "commit_id": "350a468ae91100faac947746caf3d749460a90ec",
        "commit_message": "- [bug] Fixed bug whereby event.listen(SomeClass)\nforced an entirely unnecessary compile of the\nmapper, making events very hard to set up\nat module import time (nobody noticed this ??)\n[ticket:2367]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/350a468ae91100faac947746caf3d749460a90ec",
        "buggy_code": "return orm.class_mapper(target)",
        "fixed_code": "return orm.class_mapper(target, compile=False)",
        "patch": "@@ -335,7 +335,7 @@ def _accept_with(cls, target):\n             if issubclass(target, orm.Mapper):\n                 return target\n             else:\n-                return orm.class_mapper(target)\n+                return orm.class_mapper(target, compile=False)\n         else:\n             return target\n "
    },
    {
        "commit_id": "5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "commit_message": "- [bug] Fixed inappropriate usage of util.py3k\nflag and renamed it to util.py3k_warning, since\nthis flag is intended to detect the -3 flag\nseries of import restrictions only.\n[ticket:2348]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "buggy_code": "if util.py3k:",
        "fixed_code": "if util.py3k_warning:",
        "patch": "@@ -1166,7 +1166,7 @@ def update(self, __other=Unspecified, **kw):\n     l.pop('Unspecified')\n     return l\n \n-if util.py3k:\n+if util.py3k_warning:\n     _set_binop_bases = (set, frozenset)\n else:\n     import sets"
    },
    {
        "commit_id": "5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "commit_message": "- [bug] Fixed inappropriate usage of util.py3k\nflag and renamed it to util.py3k_warning, since\nthis flag is intended to detect the -3 flag\nseries of import restrictions only.\n[ticket:2348]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "buggy_code": "threading, py3k, jython, pypy, win32, set_types, buffer, pickle, \\",
        "fixed_code": "threading, py3k_warning, jython, pypy, win32, set_types, buffer, pickle, \\",
        "patch": "@@ -5,7 +5,7 @@\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n from compat import callable, cmp, reduce, defaultdict, py25_dict, \\\n-    threading, py3k, jython, pypy, win32, set_types, buffer, pickle, \\\n+    threading, py3k_warning, jython, pypy, win32, set_types, buffer, pickle, \\\n     update_wrapper, partial, md5_hex, decode_slice, dottedgetter,\\\n     parse_qsl\n "
    },
    {
        "commit_id": "5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "commit_message": "- [bug] Fixed inappropriate usage of util.py3k\nflag and renamed it to util.py3k_warning, since\nthis flag is intended to detect the -3 flag\nseries of import restrictions only.\n[ticket:2348]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5c86d3914cb2ddb3333f47e35f5fe7a34bca882b",
        "buggy_code": "from sqlalchemy.util import py3k, decorator",
        "fixed_code": "from sqlalchemy.util import decorator",
        "patch": "@@ -10,7 +10,7 @@\n \n from test.bootstrap import config\n from test.lib import assertsql, util as testutil\n-from sqlalchemy.util import py3k, decorator\n+from sqlalchemy.util import decorator\n from engines import drop_all_tables\n \n from sqlalchemy import exc as sa_exc, util, types as sqltypes, schema, \\"
    },
    {
        "commit_id": "c4506b8c906c2606b50cdf8643cf01112bf1fa01",
        "commit_message": "  - [bug] Fixed bug whereby hybrid_property didn't\n    work as a kw arg in any(), has().",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c4506b8c906c2606b50cdf8643cf01112bf1fa01",
        "buggy_code": "crit = self.property.mapper.class_manager[k] == kwargs[k]",
        "fixed_code": "crit = getattr(self.property.mapper.class_, k) == kwargs[k]",
        "patch": "@@ -428,7 +428,7 @@ def _criterion_exists(self, criterion=None, **kwargs):\n                         source_selectable=source_selectable)\n \n             for k in kwargs:\n-                crit = self.property.mapper.class_manager[k] == kwargs[k]\n+                crit = getattr(self.property.mapper.class_, k) == kwargs[k]\n                 if criterion is None:\n                     criterion = crit\n                 else:"
    },
    {
        "commit_id": "b3fa5d0326a6aa7c0fc9df08d13d849e468662a4",
        "commit_message": "- [bug] Updated warning message when setting\ndelete-orphan without delete to no longer\nrefer to 0.6, as we never got around to\nupgrading this to an exception.  Ideally\nthis might be better as an exception but\nit's not critical either way.  [ticket:2325]\n- add new test suite to test_cascades for cascade\narguments",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b3fa5d0326a6aa7c0fc9df08d13d849e468662a4",
        "buggy_code": "\"'delete'.  This will raise an error in 0.6.\")",
        "fixed_code": "\"'delete'.\")",
        "patch": "@@ -41,7 +41,7 @@ def __init__(self, arg=\"\"):\n \n         if self.delete_orphan and not self.delete:\n             util.warn(\"The 'delete-orphan' cascade option requires \"\n-                        \"'delete'.  This will raise an error in 0.6.\")\n+                        \"'delete'.\")\n \n         for x in values:\n             if x not in all_cascades:"
    },
    {
        "commit_id": "3867ea9dc7b432f84d29496c1824486b14cd8bfa",
        "commit_message": "- [bug] pyodbc-based dialects now parse the\npyodbc accurately as far as observed\npyodbc strings, including such gems\nas \"py3-3.0.1-beta4\" [ticket:2318]\n- [bug] use new pyodbc version detection for\n_need_decimal_fix option, [ticket:2318]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3867ea9dc7b432f84d29496c1824486b14cd8bfa",
        "buggy_code": "tuple(self.dbapi.version.split(\".\")) < (2, 1, 8)",
        "fixed_code": "self._dbapi_version() < (2, 1, 8)",
        "patch": "@@ -216,6 +216,6 @@ def __init__(self, description_encoding='latin-1', **params):\n         self.use_scope_identity = self.dbapi and \\\n                         hasattr(self.dbapi.Cursor, 'nextset')\n         self._need_decimal_fix = self.dbapi and \\\n-                                tuple(self.dbapi.version.split(\".\")) < (2, 1, 8)\n+                            self._dbapi_version() < (2, 1, 8)\n \n dialect = MSDialect_pyodbc"
    },
    {
        "commit_id": "7c993de6cee97dc8c2c9ac0a988e410ccd7fa97c",
        "commit_message": "- [bug] Fixed the error formatting raised when\na tuple is inadvertently passed to session.query()\n[ticket:2297].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c993de6cee97dc8c2c9ac0a988e410ccd7fa97c",
        "buggy_code": "\"expected - got '%r'\" % column",
        "fixed_code": "\"expected - got '%r'\" % (column, )",
        "patch": "@@ -3052,7 +3052,7 @@ def __init__(self, query, column):\n         if not isinstance(column, sql.ColumnElement):\n             raise sa_exc.InvalidRequestError(\n                 \"SQL expression, column, or mapped entity \"\n-                \"expected - got '%r'\" % column\n+                \"expected - got '%r'\" % (column, )\n             )\n \n         # If the Column is unnamed, give it a"
    },
    {
        "commit_id": "699146086df8fd8778582a03267f8f28c5cdad7a",
        "commit_message": "- [bug] Fixed bug whereby column_property() created\nagainst ORM-level column could be treated as\na distinct entity when producing certain\nkinds of joined-inh joins.  [ticket:2316]\n\n- [bug] related to [ticket:2316], made some\nadjustments to the change from [ticket:2261]\nregarding the \"from\" list on a select(). The\n_froms collection is no longer memoized, as this\nsimplifies various use cases and removes the\nneed for a \"warning\" if a column is attached\nto a table after it was already used in an\nexpression - the select() construct will now\nalways produce the correct expression.\nThere's probably no real-world\nperformance hit here; select() objects are\nalmost always made ad-hoc, and systems that\nwish to optimize the re-use of a select()\nwould be using the \"compiled_cache\" feature.\nA hit which would occur when calling select.bind\nhas been reduced, but the vast majority\nof users shouldn't be using \"bound metadata\"\nanyway :).",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/699146086df8fd8778582a03267f8f28c5cdad7a",
        "buggy_code": "sess2 = sessionmaker()()",
        "fixed_code": "sess2 = sessionmaker(testing.db)()",
        "patch": "@@ -100,7 +100,7 @@ def go():\n \n         # one more time, count the SQL\n \n-        sess2 = sessionmaker()()\n+        sess2 = sessionmaker(testing.db)()\n         self.assert_sql_count(testing.db, go, 2)\n \n class LoadManyToOneFromIdentityTest(fixtures.MappedTest):"
    },
    {
        "commit_id": "beef2b5aa811efd42a111c87a4308d6584c78b97",
        "commit_message": "- [bug] Fixed bug whereby TypeDecorator would\nreturn a stale value for _type_affinity, when\nusing a TypeDecorator that \"switches\" types,\nlike the CHAR/UUID type.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/beef2b5aa811efd42a111c87a4308d6584c78b97",
        "buggy_code": "@util.memoized_property",
        "fixed_code": "@property",
        "patch": "@@ -490,7 +490,7 @@ def _gen_dialect_impl(self, dialect):\n         tt.impl = typedesc\n         return tt\n \n-    @util.memoized_property\n+    @property\n     def _type_affinity(self):\n         return self.impl._type_affinity\n "
    },
    {
        "commit_id": "a870d1c401fb4da3139743cafc6c5e29d988faee",
        "commit_message": "- [bug] fixed inappropriate evaluation of user-mapped\nobject in a boolean context within query.get()\n[ticket:2310].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a870d1c401fb4da3139743cafc6c5e29d988faee",
        "buggy_code": "if instance:",
        "fixed_code": "if instance is not None:",
        "patch": "@@ -2240,7 +2240,7 @@ def _get_from_identity(cls, session, key, passive):\n \n         \"\"\"\n         instance = session.identity_map.get(key)\n-        if instance:\n+        if instance is not None:\n \n             state = attributes.instance_state(instance)\n "
    },
    {
        "commit_id": "438e63db068860cfe04224567a65e710df77d15e",
        "commit_message": "- Fixed bug in history_meta.py example where\nthe \"unique\" flag was not removed from a\nsingle-table-inheritance subclass which\ngenerates columns to put up onto the base.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/438e63db068860cfe04224567a65e710df77d15e",
        "buggy_code": "__version__ = '0.7.3'",
        "fixed_code": "__version__ = '0.7.4'",
        "patch": "@@ -117,7 +117,7 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n \n-__version__ = '0.7.3'\n+__version__ = '0.7.4'\n \n del inspect, sys\n "
    },
    {
        "commit_id": "3104da41399bc827bee8b67d83991802711c1683",
        "commit_message": "fix test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3104da41399bc827bee8b67d83991802711c1683",
        "buggy_code": "'DATE', 'CLOB', 'VARCHAR(20 CHAR)'], ':param_1')",
        "fixed_code": "'DATE', 'CLOB', 'VARCHAR2(20 CHAR)'], ':param_1')",
        "patch": "@@ -2091,7 +2091,7 @@ def check_results(dialect, expected_results, literal):\n \n         # then the Oracle engine\n         check_results(oracle.dialect(), ['NUMERIC', 'NUMERIC(12, 9)',\n-                      'DATE', 'CLOB', 'VARCHAR(20 CHAR)'], ':param_1')\n+                      'DATE', 'CLOB', 'VARCHAR2(20 CHAR)'], ':param_1')\n \n         # then the sqlite engine\n         check_results(sqlite.dialect(), ['NUMERIC', 'NUMERIC(12, 9)',"
    },
    {
        "commit_id": "127c48252edc2d431a10dbe5b3c3ae77d16ac479",
        "commit_message": "  - Fixed bug in unit of work whereby detection of\n    \"cycles\" among classes in highly interlinked patterns\n    would not produce a deterministic\n    result; thereby sometimes missing some nodes that\n    should be considered cycles and causing further\n    issues down the road.  Note this bug is in 0.6\n    also; not backported at the moment.\n    [ticket:2282]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/127c48252edc2d431a10dbe5b3c3ae77d16ac479",
        "buggy_code": "from sqlalchemy import topological",
        "fixed_code": "from sqlalchemy.util import topological",
        "patch": "@@ -168,7 +168,7 @@ def _set_table_options(options, file_config):\n def _reverse_topological(options, file_config):\n     if options.reversetop:\n         from sqlalchemy.orm import unitofwork, session, mapper, dependency\n-        from sqlalchemy import topological\n+        from sqlalchemy.util import topological\n         from test.lib.util import RandomSet\n         topological.set = unitofwork.set = session.set = mapper.set = dependency.set = RandomSet\n post_configure.append(_reverse_topological)"
    },
    {
        "commit_id": "2aa80d40d2c9a00bb87a145bba1f01c327b6000b",
        "commit_message": "   - Adjusted the \"importlater\" mechanism, which is\n     used internally to resolve import cycles,\n     such that the usage of __import__ is completed\n     when the import of sqlalchemy or sqlalchemy.orm\n     is done, thereby avoiding any usage of __import__\n     after the application starts new threads,\n     fixes [ticket:2279].  Also in 0.6.9.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2aa80d40d2c9a00bb87a145bba1f01c327b6000b",
        "buggy_code": "deque = util.importlater('collections').deque",
        "fixed_code": "deque = __import__('collections').deque",
        "patch": "@@ -21,7 +21,7 @@\n from sqlalchemy import exc as sa_exc\n from sqlalchemy import util\n from sqlalchemy.sql import operators\n-deque = util.importlater('collections').deque\n+deque = __import__('collections').deque\n \n mapperutil = util.importlater('sqlalchemy.orm', 'util')\n "
    },
    {
        "commit_id": "98a08bf207c21a4bc06c2ec6fbda9819f59dc751",
        "commit_message": "fix sentence",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/98a08bf207c21a4bc06c2ec6fbda9819f59dc751",
        "buggy_code": "A basic abstract example of the :class:`.AbstractConcreteBase` class::",
        "fixed_code": "An abstract base can be declared using the :class:`.AbstractConcreteBase` class::",
        "patch": "@@ -466,7 +466,7 @@ class Manager(Person):\n With these objects, the ``__declare_last__`` helper is used to configure the \"polymorphic\"\n loader for the mapper after all subclasses have been declared.\n \n-A basic abstract example of the :class:`.AbstractConcreteBase` class::\n+An abstract base can be declared using the :class:`.AbstractConcreteBase` class::\n \n     from sqlalchemy.ext.declarative import AbstractConcreteBase\n     "
    },
    {
        "commit_id": "1492cc634ee67afb5ad03f0d56caca9fc3bbcc0e",
        "commit_message": "- Fixed bug whereby if __eq__() was\nredefined, a relationship many-to-one lazyload\nwould hit the __eq__() and fail.  [ticket:2260]\nDoes not apply to 0.6.9.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1492cc634ee67afb5ad03f0d56caca9fc3bbcc0e",
        "buggy_code": "if value in (PASSIVE_NO_RESULT, NEVER_SET):",
        "fixed_code": "if value is PASSIVE_NO_RESULT or value is NEVER_SET:",
        "patch": "@@ -421,7 +421,7 @@ def get(self, state, dict_, passive=PASSIVE_OFF):\n                 else:\n                     value = ATTR_EMPTY\n \n-                if value in (PASSIVE_NO_RESULT, NEVER_SET):\n+                if value is PASSIVE_NO_RESULT or value is NEVER_SET:\n                     return value\n                 elif value is ATTR_WAS_SET:\n                     try:"
    },
    {
        "commit_id": "07179d2aae12bb4e72eb1e494a870eefada8320a",
        "commit_message": "fix typo, [ticket:2271]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/07179d2aae12bb4e72eb1e494a870eefada8320a",
        "buggy_code": "solver..",
        "fixed_code": "solver.",
        "patch": "@@ -1511,7 +1511,7 @@ def flush(self, objects=None):\n         Writes out all pending object creations, deletions and modifications\n         to the database as INSERTs, DELETEs, UPDATEs, etc.  Operations are\n         automatically ordered by the Session's unit of work dependency\n-        solver..\n+        solver.\n \n         Database operations will be issued in the current transactional\n         context and do not affect the state of the transaction, unless an"
    },
    {
        "commit_id": "de0e2724c5a85586e98f524bba85b69e3ae6a21e",
        "commit_message": "- Fixed bug where query.join() + aliased=True\nfrom a joined-inh structure to itself on\nrelationship() with join condition on the child\ntable would convert the lead entity into the\njoined one inappropriately.  [ticket:2234]\nAlso in 0.6.9.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/de0e2724c5a85586e98f524bba85b69e3ae6a21e",
        "buggy_code": "if aliased_entity:",
        "fixed_code": "if aliased_entity and not create_aliases:",
        "patch": "@@ -1535,7 +1535,7 @@ def _join_left_to_right(self, left, right,\n         # which is intended to wrap a the right side in a subquery,\n         # ensure that columns retrieved from this target in the result\n         # set are also adapted.\n-        if aliased_entity:\n+        if aliased_entity and not create_aliases:\n             self.__mapper_loads_polymorphically_with(\n                         right_mapper,\n                         ORMAdapter("
    },
    {
        "commit_id": "1ae69566ccbcf5faa0d760d3fc03e85262a69122",
        "commit_message": "fix keyword error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1ae69566ccbcf5faa0d760d3fc03e85262a69122",
        "buggy_code": "Column('data2', key='d2', Integer))",
        "fixed_code": "Column('data2', Integer, key='d2'))",
        "patch": "@@ -156,7 +156,7 @@ def test_create_index_with_ops(self):\n         m = MetaData()\n         tbl = Table('testtbl', m,\n                     Column('data', String), \n-                    Column('data2', key='d2', Integer))\n+                    Column('data2', Integer, key='d2'))\n \n         idx = Index('test_idx1', tbl.c.data,\n                     postgresql_ops={'data': 'text_pattern_ops'})"
    },
    {
        "commit_id": "7c21b81cf8ec508c1b6ecc5f488960346ffac11f",
        "commit_message": "- fix pypostgresql typo, [ticket:2185]\n- rewrite \"getting a session\" docs to delineate\nall sessionmaker() use cases distinctly\n- rewrite \"Managing Transactions\" doc to spell out\neach specific step completely, [ticket:2204]\n- add to create_engine() and main \"engine\" doc\nan unambiguous statement that the create_engine()\ndoes not create a connection\n- other link fixes\n- rewrite \"deleting\" section so that \"deleting from collections\"\nis separate, well-described, [ticket:2202]\n- rephrase \"autocommit mode\" into its own section, move it down,\nput some bold text that you shouldn't be using it.\n- simplify the \"subtransactions\" section and make it local to\n\"autocommit\" since it is utterly unneeded by anybody.\n- oracle is not doing 2-phase anytime soon",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c21b81cf8ec508c1b6ecc5f488960346ffac11f",
        "buggy_code": "URLs are of the form ``postgresql+pypostgresql://user@password@host:port/dbname[?key=value&key=value...]``.",
        "fixed_code": "URLs are of the form ``postgresql+pypostgresql://user:password@host:port/dbname[?key=value&key=value...]``.",
        "patch": "@@ -9,7 +9,7 @@\n Connecting\n ----------\n \n-URLs are of the form ``postgresql+pypostgresql://user@password@host:port/dbname[?key=value&key=value...]``.\n+URLs are of the form ``postgresql+pypostgresql://user:password@host:port/dbname[?key=value&key=value...]``.\n \n \n \"\"\""
    },
    {
        "commit_id": "668991a7ed3a46e29ab76cd0278b021e5190b103",
        "commit_message": "- Fixed subtle bug that caused SQL to blow\nup if: column_property() against subquery +\njoinedload + LIMIT + order by the column\nproperty() occurred.  [ticket:2188].\nAlso in 0.6.9",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/668991a7ed3a46e29ab76cd0278b021e5190b103",
        "buggy_code": "return self._element",
        "fixed_code": "return self",
        "patch": "@@ -3710,7 +3710,7 @@ def self_group(self, against=None):\n                         sub_element, \n                         type_=self._type)\n         else:\n-            return self._element\n+            return self\n \n     @property\n     def primary_key(self):"
    },
    {
        "commit_id": "8c4fc616115a4b47bbbfd8834fe758324cafe97f",
        "commit_message": "fix docstring",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8c4fc616115a4b47bbbfd8834fe758324cafe97f",
        "buggy_code": "q.columns",
        "fixed_code": "q.column_descriptions",
        "patch": "@@ -1813,7 +1813,7 @@ def column_descriptions(self):\n             q = sess.query(User, User.id, user_alias)\n \n             # this expression:\n-            q.columns\n+            q.column_descriptions\n \n             # would return:\n             ["
    },
    {
        "commit_id": "1dcf33e71280698007af718a2404034ef51dd1c7",
        "commit_message": "fix some tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1dcf33e71280698007af718a2404034ef51dd1c7",
        "buggy_code": "ts = db.func.current_date().scalar()",
        "fixed_code": "ts = db.scalar(func.current_date())",
        "patch": "@@ -68,7 +68,7 @@ def mydefault_using_connection(ctx):\n                 def2 = sa.text(\"getdate()\")\n             else:\n                 def2 = sa.text(\"current_date\")\n-            ts = db.func.current_date().scalar()\n+            ts = db.scalar(func.current_date())\n         else:\n             f = len('abcdef')\n             f2 = len('abcdefghijk')"
    },
    {
        "commit_id": "ba299476b827ada34d01360e3024f87dd56dc967",
        "commit_message": "- get all comparison operators to document with sphinx - column based, relationship based.\nShould fix misunderstandings like [ticket:2177]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba299476b827ada34d01360e3024f87dd56dc967",
        "buggy_code": "if what == 'class' and skip and name == '__init__':",
        "fixed_code": "if what == 'class' and skip and name in ('__init__', '__eq__', '__ne__', '__lt__', '__le__') and obj.__doc__:",
        "patch": "@@ -158,7 +158,7 @@ def format(self, tokensource, outfile):\n         LatexFormatter.format(self, self._filter_tokens(tokensource), outfile)\n \n def autodoc_skip_member(app, what, name, obj, skip, options):\n-    if what == 'class' and skip and name == '__init__':\n+    if what == 'class' and skip and name in ('__init__', '__eq__', '__ne__', '__lt__', '__le__') and obj.__doc__:\n         return False\n     else:\n         return skip"
    },
    {
        "commit_id": "ba299476b827ada34d01360e3024f87dd56dc967",
        "commit_message": "- get all comparison operators to document with sphinx - column based, relationship based.\nShould fix misunderstandings like [ticket:2177]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ba299476b827ada34d01360e3024f87dd56dc967",
        "buggy_code": "new operator behaivor. The custom :class:`.PropComparator` is passed to",
        "fixed_code": "new operator behavior. The custom :class:`.PropComparator` is passed to",
        "patch": "@@ -185,7 +185,7 @@ class PropComparator(expression.ColumnOperators):\n     User-defined subclasses of :class:`.PropComparator` may be created. The\n     built-in Python comparison and math operator methods, such as\n     ``__eq__()``, ``__lt__()``, ``__add__()``, can be overridden to provide\n-    new operator behaivor. The custom :class:`.PropComparator` is passed to\n+    new operator behavior. The custom :class:`.PropComparator` is passed to\n     the mapper property via the ``comparator_factory`` argument. In each case,\n     the appropriate subclass of :class:`.PropComparator` should be used::\n "
    },
    {
        "commit_id": "de9c030f5c09e0c1f3a61762dc2380662f8889ee",
        "commit_message": "- Fixed the error message emitted for \"can't\nexecute syncrule for destination column 'q';\nmapper 'X' does not map this column\" to\nreference the correct mapper.  [ticket:2163].\nAlso in 0.6.8.\n- test/orm/test_sync.py covers orm/sync.py 100%",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/de9c030f5c09e0c1f3a61762dc2380662f8889ee",
        "buggy_code": "\"(or use a viewonly=True relation).\" % (dest_column, source_mapper)",
        "fixed_code": "\"(or use a viewonly=True relation).\" % (dest_column, dest_mapper)",
        "patch": "@@ -95,7 +95,7 @@ def _raise_col_to_prop(isdest, source_mapper, source_column, dest_mapper, dest_c\n                                 \"Can't execute sync rule for destination column '%s'; \"\n                                 \"mapper '%s' does not map this column.  Try using an explicit\"\n                                 \" `foreign_keys` collection which does not include this column \"\n-                                \"(or use a viewonly=True relation).\" % (dest_column, source_mapper)\n+                                \"(or use a viewonly=True relation).\" % (dest_column, dest_mapper)\n                                 )\n     else:\n         raise exc.UnmappedColumnError("
    },
    {
        "commit_id": "3452a2ba03bcf75eeec60141f040d661e15eaa2f",
        "commit_message": "- Fixed bug whereby if FetchedValue was passed\nto column server_onupdate, it would not\nhave its parent \"column\" assigned, added\ntest coverage for all column default assignment\npatterns.  [ticket:2147]  also in 0.6.8",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3452a2ba03bcf75eeec60141f040d661e15eaa2f",
        "buggy_code": "args.append(self.server_default)",
        "fixed_code": "args.append(self.server_onupdate)",
        "patch": "@@ -836,7 +836,7 @@ def __init__(self, *args, **kwargs):\n \n         if self.server_onupdate is not None:\n             if isinstance(self.server_onupdate, FetchedValue):\n-                args.append(self.server_default)\n+                args.append(self.server_onupdate)\n             else:\n                 args.append(DefaultClause(self.server_onupdate,\n                                             for_update=True))"
    },
    {
        "commit_id": "b02193bd7e84a8fe1ac74d16cf78a90bd3d59f7c",
        "commit_message": "- Fixed regression introduced in 0.7b4 (!) whereby\nquery.options(someoption(\"nonexistent name\")) would\nfail to raise an error.  Also added additional\nerror catching for cases where the option would\ntry to build off a column-based element, further\nfixed up some of the error messages tailored\nin [ticket:2069]\n- added another huge crapload of tests to the existing\ncrapload of tests we already had for options..._get_paths()\nand dependencies are covered 100% now\n- one case still doesn't do the \"right\" thing, using an option\nspecific to relationships will silently pass if the endpoint\nis a column-based attribute, and vice versa.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b02193bd7e84a8fe1ac74d16cf78a90bd3d59f7c",
        "buggy_code": "__version__ = '0.7b4'",
        "fixed_code": "__version__ = '0.7b5'",
        "patch": "@@ -117,6 +117,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n \n-__version__ = '0.7b4'\n+__version__ = '0.7b5'\n \n del inspect, sys"
    },
    {
        "commit_id": "7cd4ccabafd19a2c97ffe9bbd43b28ede30b61b7",
        "commit_message": "fix for pdf",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7cd4ccabafd19a2c97ffe9bbd43b28ede30b61b7",
        "buggy_code": "('index', 'sqlalchemy_%s.tex' % release.replace('.', '_'), ur'SQLAlchemy Documentation',",
        "fixed_code": "('contents', 'sqlalchemy_%s.tex' % release.replace('.', '_'), ur'SQLAlchemy Documentation',",
        "patch": "@@ -199,7 +199,7 @@\n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  ('index', 'sqlalchemy_%s.tex' % release.replace('.', '_'), ur'SQLAlchemy Documentation',\n+  ('contents', 'sqlalchemy_%s.tex' % release.replace('.', '_'), ur'SQLAlchemy Documentation',\n    ur'Mike Bayer', 'manual'),\n ]\n "
    },
    {
        "commit_id": "da938820ec731b55e5285b202436668e49edf14b",
        "commit_message": "- fix a callcount\n- remove extra _load_fixtures() method.   using the classbound version as the fixtures\nseem to have everything classlevel at the moment (wondering if we want to change that\nfor non-classlevel setup/teardown)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/da938820ec731b55e5285b202436668e49edf14b",
        "buggy_code": "'2.6+cextension':1041,",
        "fixed_code": "'2.6+cextension':988,",
        "patch": "@@ -88,7 +88,7 @@ def test_merge_load(self):\n \n         @profiling.function_call_count(\n                                 versions={'2.5':1050, '2.6':1050,\n-                                        '2.6+cextension':1041, \n+                                        '2.6+cextension':988, \n                                         '2.7':1005,\n                                         '3':1005}\n                             )"
    },
    {
        "commit_id": "d5d1e2df67048b77ef41626940189116ba98b2f0",
        "commit_message": "fix \"associated\" at the source too",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d5d1e2df67048b77ef41626940189116ba98b2f0",
        "buggy_code": "\"Foreign key assocated with column '%s' could not find \"",
        "fixed_code": "\"Foreign key associated with column '%s' could not find \"",
        "patch": "@@ -1175,7 +1175,7 @@ def column(self):\n \n             if _get_table_key(tname, schema) not in parenttable.metadata:\n                 raise exc.NoReferencedTableError(\n-                    \"Foreign key assocated with column '%s' could not find \"\n+                    \"Foreign key associated with column '%s' could not find \"\n                     \"table '%s' with which to generate a \"\n                     \"foreign key to target column '%s'\" % (self.parent, tname, colname))\n             table = Table(tname, parenttable.metadata,"
    },
    {
        "commit_id": "cf5113115047032dd46724d1e3f56dfca6503eee",
        "commit_message": "- Added a fully descriptive error message for the\ncase where Column is subclassed and _make_proxy()\nfails to make a copy due to TypeError on the\nconstructor.   The method _constructor should\nbe implemented in this case.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cf5113115047032dd46724d1e3f56dfca6503eee",
        "buggy_code": "__version__ = '0.7b2'",
        "fixed_code": "__version__ = '0.7b3'",
        "patch": "@@ -116,6 +116,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n \n-__version__ = '0.7b2'\n+__version__ = '0.7b3'\n \n del inspect, sys"
    },
    {
        "commit_id": "838d78af711ccda918a702e01b5630b787cec453",
        "commit_message": "- Fixed bug whereby Session.merge() would call the\nload() event with one too few arguments.\n[ticket:2053]\n\n- Added logic which prevents the generation of\nevents from a MapperExtension or SessionExtension\nfrom generating do-nothing events for all the methods\nnot overridden. [ticket:2052]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/838d78af711ccda918a702e01b5630b787cec453",
        "buggy_code": "merged_state.manager.dispatch.load(merged_state)",
        "fixed_code": "merged_state.manager.dispatch.load(merged_state, None)",
        "patch": "@@ -1318,7 +1318,7 @@ def _merge(self, state, state_dict, load=True, _recursive=None):\n             merged_state.commit_all(merged_dict, self.identity_map)\n \n         if new_instance:\n-            merged_state.manager.dispatch.load(merged_state)\n+            merged_state.manager.dispatch.load(merged_state, None)\n         return merged\n \n     @classmethod"
    },
    {
        "commit_id": "838d78af711ccda918a702e01b5630b787cec453",
        "commit_message": "- Fixed bug whereby Session.merge() would call the\nload() event with one too few arguments.\n[ticket:2053]\n\n- Added logic which prevents the generation of\nevents from a MapperExtension or SessionExtension\nfrom generating do-nothing events for all the methods\nnot overridden. [ticket:2052]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/838d78af711ccda918a702e01b5630b787cec453",
        "buggy_code": "constructor_copy",
        "fixed_code": "constructor_copy, methods_equivalent",
        "patch": "@@ -25,7 +25,7 @@\n     monkeypatch_proxied_specials, asbool, bool_or_str, coerce_kw_type,\\\n     duck_type_collection, assert_arg_type, symbol, dictlike_iteritems,\\\n     classproperty, set_creation_order, warn_exception, warn, NoneType,\\\n-    constructor_copy\n+    constructor_copy, methods_equivalent\n \n from deprecations import warn_deprecated, warn_pending_deprecation, \\\n     deprecated, pending_deprecation"
    },
    {
        "commit_id": "ed4534ea8a003c89441064b028b0b22c5b5ea97a",
        "commit_message": "fix sqlite test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ed4534ea8a003c89441064b028b0b22c5b5ea97a",
        "buggy_code": "'matchtable.title MATCH ?')",
        "fixed_code": "'matchtable.title MATCH ?', dialect=sqlite.dialect())",
        "patch": "@@ -580,7 +580,7 @@ def teardown_class(cls):\n \n     def test_expression(self):\n         self.assert_compile(matchtable.c.title.match('somstr'),\n-                            'matchtable.title MATCH ?')\n+                            'matchtable.title MATCH ?', dialect=sqlite.dialect())\n \n     def test_simple_match(self):\n         results = \\"
    },
    {
        "commit_id": "f367117562f3f75db53406f09bc402a7e14e96f4",
        "commit_message": "- typo fix [ticket:2017]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f367117562f3f75db53406f09bc402a7e14e96f4",
        "buggy_code": "class my_before_commit(session):",
        "fixed_code": "def my_before_commit(session):",
        "patch": "@@ -773,7 +773,7 @@ class SessionEvents(event.Events):\n         from sqlalchemy import event\n         from sqlalchemy.orm import sessionmaker\n \n-        class my_before_commit(session):\n+        def my_before_commit(session):\n             print \"before commit!\"\n \n         Session = sessionmaker()"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -81,7 +81,7 @@ def create_connect_args(self, url):\n             connectors.extend(['%s=%s' % (k,v) for k,v in keys.iteritems()])\n         return [[\";\".join (connectors)], connect_args]\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, self.dbapi.ProgrammingError):\n             return \"The cursor's connection has been closed.\" in str(e) or \\\n                             'Attempt to use a closed connection.' in str(e)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -46,7 +46,7 @@ def create_connect_args(self, url):\n                 self.jdbc_driver_name],\n                 opts]\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if not isinstance(e, self.dbapi.ProgrammingError):\n             return False\n         e = str(e)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -153,7 +153,7 @@ def _parse_version_info(self, version):\n         else:\n             return tuple([int(x) for x in m.group(1, 2, 3)] + ['interbase'])\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, (self.dbapi.OperationalError,\n                             self.dbapi.ProgrammingError)):\n             msg = str(e)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -62,7 +62,7 @@ def _get_server_version_info(self, connection):\n         v = VERSION_RE.split(connection.connection.dbms_version)\n         return (int(v[1]), int(v[2]), v[3])\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, self.dbapi.OperationalError):\n             return 'closed the connection' in str(e) \\\n                     or 'connection not open' in str(e)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -62,7 +62,7 @@ def create_connect_args(self, url):\n             connectors.append(\"Integrated Security=SSPI\")\n         return [[\";\".join (connectors)], {}]\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         return isinstance(e, self.dbapi.adodbapi.DatabaseError) and \\\n                             \"'connection failure'\" in str(e)\n "
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -95,7 +95,7 @@ def create_connect_args(self, url):\n             opts['host'] = \"%s:%s\" % (opts['host'], port)\n         return [[], opts]\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         for msg in (\n             \"Error 10054\",\n             \"Not connected to any MS SQL server\","
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -1711,7 +1711,7 @@ def do_recover_twophase(self, connection):\n         resultset = connection.execute(\"XA RECOVER\")\n         return [row['data'][0:row['gtrid_length']] for row in resultset]\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, self.dbapi.OperationalError):\n             return self._extract_error_code(e) in \\\n                         (2006, 2013, 2014, 2045, 2055)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -118,7 +118,7 @@ def _detect_charset(self, connection):\n     def _extract_error_code(self, exception):\n         return exception.errno\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         errnos = (2006, 2013, 2014, 2045, 2055, 2048)\n         exceptions = (self.dbapi.OperationalError,self.dbapi.InterfaceError)\n         if isinstance(e, exceptions):"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -195,7 +195,7 @@ def _show_create_table(self, connection, table, charset=None,\n                                 execution_options(_oursql_plain_query=True),\n                                 table, charset, full_name)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, self.dbapi.ProgrammingError):\n             return e.errno is None and 'cursor' not in e.args[1] and e.args[1].endswith('closed')\n         else:"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -680,7 +680,7 @@ def _get_server_version_info(self, connection):\n                         for x in connection.connection.version.split('.')\n                     )\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, self.dbapi.InterfaceError):\n             return \"not connected\" in str(e)\n         else:"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -108,7 +108,7 @@ def create_connect_args(self, url):\n         opts.update(url.query)\n         return ([], opts)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         return \"connection is closed\" in str(e)\n \n dialect = PGDialect_pg8000"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -67,7 +67,7 @@ def create_connect_args(self, url):\n         opts.update(url.query)\n         return ([], opts)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         return \"connection is closed\" in str(e)\n \n dialect = PGDialect_pypostgresql"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -238,7 +238,7 @@ def create_connect_args(self, url):\n \n         return ([filename], opts)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         return isinstance(e, self.dbapi.ProgrammingError) and \"Cannot operate on a closed database.\" in str(e)\n \n dialect = SQLiteDialect_pysqlite"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -87,7 +87,7 @@ def _get_server_version_info(self, connection):\n        # (12, 5, 0, 0)\n        return (vers / 1000, vers % 1000 / 100, vers % 100 / 10, vers % 10)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         if isinstance(e, (self.dbapi.OperationalError,\n                             self.dbapi.ProgrammingError)):\n             msg = str(e)"
    },
    {
        "commit_id": "6f16b8db6f08cefd68cdf251292316497eb849b3",
        "commit_message": "- add connection and cursor to is_disconnect().  We aren't using it yet,\nbut we'd like to.   Most DBAPIs don't give us anything we can do with it.\nSome research was done on psycopg2 and it still seems like they give us\nno adequate method (tried connection.closed, cursor.closed, connection.status).\nmxodbc claims their .closed attribute will work (but I am skeptical).\n- remove beahvior in pool that auto-invalidated a connection when\nthe cursor failed to create.  That's not the pool's job.  we need the conn\nfor the error logic.  Can't get any tests to fail, curious why that\nbehavior was there, guess we'll find out (or not).\n- add support for psycopg2 version detection.  even though we have\nno use for it yet...\n- adjust one of the reconnect tests to work with oracle's\nhorrendously slow connect speed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f16b8db6f08cefd68cdf251292316497eb849b3",
        "buggy_code": "def is_disconnect(self, e):",
        "fixed_code": "def is_disconnect(self, e, connection, cursor):",
        "patch": "@@ -324,7 +324,7 @@ def do_executemany(self, cursor, statement, parameters, context=None):\n     def do_execute(self, cursor, statement, parameters, context=None):\n         cursor.execute(statement, parameters)\n \n-    def is_disconnect(self, e):\n+    def is_disconnect(self, e, connection, cursor):\n         return False\n \n     def reset_isolation_level(self, dbapi_conn):"
    },
    {
        "commit_id": "3ac7ec476e5a52892a48f1932a5452ed9263c758",
        "commit_message": "- fix oracle tests\n- fix some obnoxious type adaption issues resulting from the \"adapt must copy\" change",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3ac7ec476e5a52892a48f1932a5452ed9263c758",
        "buggy_code": "Column('id', Integer, primary_key=True),",
        "fixed_code": "Column('id', Integer, primary_key=True, test_needs_autoincrement=True),",
        "patch": "@@ -465,7 +465,7 @@ class InheritanceTwoVersionIdsTest(_base.MappedTest):\n     @classmethod\n     def define_tables(cls, metadata):\n         Table('base', metadata,\n-            Column('id', Integer, primary_key=True),\n+            Column('id', Integer, primary_key=True, test_needs_autoincrement=True),\n             Column('version_id', Integer, nullable=True),\n             Column('data', String(50))\n         )"
    },
    {
        "commit_id": "848a56ea57154c65943d1efd278c78e36500fb28",
        "commit_message": "- Fixed bug whereby \"passive_deletes='all'\" wasn't passing\nthe correct symbols to lazy loaders during flush, thereby\ncausing an unwarranted load.  [ticket:2013]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/848a56ea57154c65943d1efd278c78e36500fb28",
        "buggy_code": "def get_attribute_history(self, state, key, passive=True):",
        "fixed_code": "def get_attribute_history(self, state, key, passive=attributes.PASSIVE_NO_INITIALIZE):",
        "patch": "@@ -149,7 +149,7 @@ def remove_state_actions(self, state):\n \n         self.states[state] = (isdelete, True)\n \n-    def get_attribute_history(self, state, key, passive=True):\n+    def get_attribute_history(self, state, key, passive=attributes.PASSIVE_NO_INITIALIZE):\n         \"\"\"facade to attributes.get_state_history(), including caching of results.\"\"\"\n \n         hashkey = (\"history\", state, key)"
    },
    {
        "commit_id": "c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "commit_message": "- support for cdecimal\n- add --with-cdecimal flag to tests, monkeypatches cdecimal in\n- fix mssql/pyodbc.py to not use private '_int' accessor in decimal conversion\nroutines\n- pyodbc version 2.1.8 is needed for cdecimal in any case as\nprevious versions also called '_int', 2.1.8 adds the same string\nlogic as our own dialect, so that logic is skipped for modern\npyodbc version\n- make the imports for \"Decimal\" consistent across the whole lib.  not sure\nyet how we should be importing \"Decimal\" or what the best way forward\nis that would allow a clean user-invoked swap of cdecimal; for now,\nadded docs suggesting a global monkeypatch - the two decimal libs\nare not compatible with each other so any chance of mixing produces\nserious issues.  adding adapters to DBAPIs tedious and adds in-python\noverhead.  suggestions welcome on how we should be doing\nDecimal/cdecimal.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "buggy_code": "from decimal import Decimal",
        "fixed_code": "from sqlalchemy.util.compat import decimal",
        "patch": "@@ -15,7 +15,7 @@\n import sys\n import re\n import warnings\n-from decimal import Decimal\n+from sqlalchemy.util.compat import decimal\n \n from sqlalchemy.connectors import Connector\n from sqlalchemy import types as sqltypes"
    },
    {
        "commit_id": "c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "commit_message": "- support for cdecimal\n- add --with-cdecimal flag to tests, monkeypatches cdecimal in\n- fix mssql/pyodbc.py to not use private '_int' accessor in decimal conversion\nroutines\n- pyodbc version 2.1.8 is needed for cdecimal in any case as\nprevious versions also called '_int', 2.1.8 adds the same string\nlogic as our own dialect, so that logic is skipped for modern\npyodbc version\n- make the imports for \"Decimal\" consistent across the whole lib.  not sure\nyet how we should be importing \"Decimal\" or what the best way forward\nis that would allow a clean user-invoked swap of cdecimal; for now,\nadded docs suggesting a global monkeypatch - the two decimal libs\nare not compatible with each other so any chance of mixing produces\nserious issues.  adding adapters to DBAPIs tedious and adds in-python\noverhead.  suggestions welcome on how we should be doing\nDecimal/cdecimal.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "buggy_code": "import decimal",
        "fixed_code": "from sqlalchemy.util.compat import decimal",
        "patch": "@@ -86,10 +86,10 @@\n \n import random\n import re\n-import decimal\n import logging\n \n from sqlalchemy import util, exc\n+from sqlalchemy.util.compat import decimal\n from sqlalchemy import processors\n from sqlalchemy.engine import base, default\n from sqlalchemy.sql import expression"
    },
    {
        "commit_id": "c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "commit_message": "- support for cdecimal\n- add --with-cdecimal flag to tests, monkeypatches cdecimal in\n- fix mssql/pyodbc.py to not use private '_int' accessor in decimal conversion\nroutines\n- pyodbc version 2.1.8 is needed for cdecimal in any case as\nprevious versions also called '_int', 2.1.8 adds the same string\nlogic as our own dialect, so that logic is skipped for modern\npyodbc version\n- make the imports for \"Decimal\" consistent across the whole lib.  not sure\nyet how we should be importing \"Decimal\" or what the best way forward\nis that would allow a clean user-invoked swap of cdecimal; for now,\nadded docs suggesting a global monkeypatch - the two decimal libs\nare not compatible with each other so any chance of mixing produces\nserious issues.  adding adapters to DBAPIs tedious and adds in-python\noverhead.  suggestions welcome on how we should be doing\nDecimal/cdecimal.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "buggy_code": "import decimal",
        "fixed_code": "from sqlalchemy.util.compat import decimal",
        "patch": "@@ -31,8 +31,8 @@\n from sqlalchemy.dialects.sybase.base import SybaseDialect,\\\n                                             SybaseExecutionContext\n from sqlalchemy.connectors.pyodbc import PyODBCConnector\n-import decimal\n from sqlalchemy import types as sqltypes, util, processors\n+from sqlalchemy.util.compat import decimal\n \n class _SybNumeric_pyodbc(sqltypes.Numeric):\n     \"\"\"Turns Decimals with adjusted() < -6 into floats."
    },
    {
        "commit_id": "c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "commit_message": "- support for cdecimal\n- add --with-cdecimal flag to tests, monkeypatches cdecimal in\n- fix mssql/pyodbc.py to not use private '_int' accessor in decimal conversion\nroutines\n- pyodbc version 2.1.8 is needed for cdecimal in any case as\nprevious versions also called '_int', 2.1.8 adds the same string\nlogic as our own dialect, so that logic is skipped for modern\npyodbc version\n- make the imports for \"Decimal\" consistent across the whole lib.  not sure\nyet how we should be importing \"Decimal\" or what the best way forward\nis that would allow a clean user-invoked swap of cdecimal; for now,\nadded docs suggesting a global monkeypatch - the two decimal libs\nare not compatible with each other so any chance of mixing produces\nserious issues.  adding adapters to DBAPIs tedious and adds in-python\noverhead.  suggestions welcome on how we should be doing\nDecimal/cdecimal.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "buggy_code": "import decimal",
        "fixed_code": "from sqlalchemy.util.compat import decimal",
        "patch": "@@ -14,6 +14,7 @@\n from test.lib import *\n from test.lib.testing import eq_, emits_warning_on, \\\n     assert_raises_message\n+from sqlalchemy.util.compat import decimal\n \n class CompileTest(TestBase, AssertsCompiledSQL):\n     __dialect__ = mssql.dialect()\n@@ -1043,7 +1044,6 @@ def teardown(self):\n     @testing.fails_on_everything_except('mssql+pyodbc',\n             'this is some pyodbc-specific feature')\n     def test_decimal_notation(self):\n-        import decimal\n         numeric_table = Table('numeric_table', metadata, Column('id',\n                               Integer, Sequence('numeric_id_seq',\n                               optional=True), primary_key=True),"
    },
    {
        "commit_id": "c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "commit_message": "- support for cdecimal\n- add --with-cdecimal flag to tests, monkeypatches cdecimal in\n- fix mssql/pyodbc.py to not use private '_int' accessor in decimal conversion\nroutines\n- pyodbc version 2.1.8 is needed for cdecimal in any case as\nprevious versions also called '_int', 2.1.8 adds the same string\nlogic as our own dialect, so that logic is skipped for modern\npyodbc version\n- make the imports for \"Decimal\" consistent across the whole lib.  not sure\nyet how we should be importing \"Decimal\" or what the best way forward\nis that would allow a clean user-invoked swap of cdecimal; for now,\nadded docs suggesting a global monkeypatch - the two decimal libs\nare not compatible with each other so any chance of mixing produces\nserious issues.  adding adapters to DBAPIs tedious and adds in-python\noverhead.  suggestions welcome on how we should be doing\nDecimal/cdecimal.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c691b4cbdf7424964f49ac2fd05057514e5856a3",
        "buggy_code": "from decimal import Decimal",
        "fixed_code": "from sqlalchemy.util.compat import decimal",
        "patch": "@@ -1,6 +1,6 @@\n # -*- encoding: utf8 -*-\n from datetime import *\n-from decimal import Decimal\n+from sqlalchemy.util.compat import decimal\n #from fastdec import mpd as Decimal\n from cPickle import dumps, loads\n "
    },
    {
        "commit_id": "dd2b208d867c58403cbf2ff0f37b61942460204f",
        "commit_message": "- fix callcount for 2.6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dd2b208d867c58403cbf2ff0f37b61942460204f",
        "buggy_code": "@profiling.function_call_count(64, {'2.4': 42, '2.7':67,",
        "fixed_code": "@profiling.function_call_count(72, {'2.4': 42, '2.7':67,",
        "patch": "@@ -18,7 +18,7 @@ def setup(self):\n                          use_threadlocal=True)\n \n \n-    @profiling.function_call_count(64, {'2.4': 42, '2.7':67, \n+    @profiling.function_call_count(72, {'2.4': 42, '2.7':67, \n                                             '2.7+cextension':67,\n                                             '3.0':65, '3.1':65},\n                                             variance=.10)"
    },
    {
        "commit_id": "69ee83d1cb3c94642518a36de59ca001c63324fd",
        "commit_message": "- fix bug preventing multiple SessionExtensions from being correctly converted to event listeners",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/69ee83d1cb3c94642518a36de59ca001c63324fd",
        "buggy_code": "SessionExtension._adapt_listener(self, extension)",
        "fixed_code": "SessionExtension._adapt_listener(self, ext)",
        "patch": "@@ -515,7 +515,7 @@ def __init__(self, bind=None, autoflush=True, expire_on_commit=True,\n         \n         if extension:\n             for ext in util.to_list(extension):\n-                SessionExtension._adapt_listener(self, extension)\n+                SessionExtension._adapt_listener(self, ext)\n         \n         if binds is not None:\n             for mapperortable, bind in binds.iteritems():"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,5 +1,5 @@\n from sqlalchemy import *\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n class CompileTest(TestBase, AssertsExecutionResults):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,5 +1,5 @@\n from sqlalchemy import *\n-from sqlalchemy.test import *\n+from test.lib import *\n from sqlalchemy.pool import QueuePool\n \n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,5 +1,5 @@\n from sqlalchemy import *\n-from sqlalchemy.test import *\n+from test.lib import *\n NUM_FIELDS = 10\n NUM_RECORDS = 1000\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -7,7 +7,7 @@\n import sys\n import time\n from sqlalchemy import *\n-from sqlalchemy.test import *\n+from test.lib import *\n ITERATIONS = 1\n dbapi_session = engines.ReplayableSession()\n metadata = None"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -8,7 +8,7 @@\n import time\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import *\n+from test.lib import *\n ITERATIONS = 1\n dbapi_session = engines.ReplayableSession()\n metadata = None"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test.testing import TestBase, eq_, assert_raises",
        "fixed_code": "from test.lib.testing import TestBase, eq_, assert_raises",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\"Test event registration and listening.\"\"\"\n \n-from sqlalchemy.test.testing import TestBase, eq_, assert_raises\n+from test.lib.testing import TestBase, eq_, assert_raises\n from sqlalchemy import event, exc, util\n \n class TestEvents(TestBase):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import TestBase",
        "fixed_code": "from test.lib import TestBase",
        "patch": "@@ -2,7 +2,7 @@\n \n \n from sqlalchemy import exc as sa_exceptions\n-from sqlalchemy.test import TestBase\n+from test.lib import TestBase\n \n # Py3K \n #StandardError = BaseException "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,7 +1,7 @@\n from sqlalchemy import *\n from sqlalchemy import sql\n from sqlalchemy.databases import access\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n class CompileTest(TestBase, AssertsCompiledSQL):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,6 +1,6 @@\n from sqlalchemy import *\n from sqlalchemy.databases import informix\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n class CompileTest(TestBase, AssertsCompiledSQL):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,7 +1,7 @@\n from sqlalchemy import *\n from sqlalchemy import sql\n from sqlalchemy.databases import sybase\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n class CompileTest(TestBase, AssertsCompiledSQL):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,4 +1,4 @@\n-from sqlalchemy.test import *\n+from test.lib import *\n import os\n import re\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -5,7 +5,7 @@\n from sqlalchemy.schema import DDLElement\n from sqlalchemy.ext.compiler import compiles\n from sqlalchemy.sql import table, column\n-from sqlalchemy.test import *\n+from test.lib import *\n \n class UserDefinedTest(TestBase, AssertsCompiledSQL):\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test.testing import TestBase, eq_, assert_raises",
        "fixed_code": "from test.lib.testing import TestBase, eq_, assert_raises",
        "patch": "@@ -1,5 +1,5 @@\n from sqlalchemy.ext import sqlsoup\n-from sqlalchemy.test.testing import TestBase, eq_, assert_raises\n+from test.lib.testing import TestBase, eq_, assert_raises\n from sqlalchemy import create_engine, or_, desc, select, func, exc, \\\n     Table, util\n from sqlalchemy.orm import scoped_session, sessionmaker"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import testing",
        "fixed_code": "from test.lib import testing",
        "patch": "@@ -2,7 +2,7 @@\n desired state for different backends.\n \"\"\"\n \n-from sqlalchemy.test import testing\n+from test.lib import testing\n from sqlalchemy import schema\n \n __all__ = 'Table', 'Column',"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test.schema import Table, Column",
        "fixed_code": "from test.lib.schema import Table, Column",
        "patch": "@@ -4,7 +4,7 @@\n \n from sqlalchemy.util import function_named\n from test.orm import _base, _fixtures\n-from sqlalchemy.test.schema import Table, Column\n+from test.lib.schema import Table, Column\n \n class ABCTest(_base.MappedTest):\n     @classmethod"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import testing",
        "fixed_code": "from test.lib import testing",
        "patch": "@@ -1,7 +1,7 @@\n from sqlalchemy import *\n from sqlalchemy.orm import *\n \n-from sqlalchemy.test import testing\n+from test.lib import testing\n from test.orm._fixtures import Base\n from test.orm._base import MappedTest\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import profiling",
        "fixed_code": "from test.lib import profiling",
        "patch": "@@ -2,7 +2,7 @@\n import sys, time\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import profiling\n+from test.lib import profiling\n \n db = create_engine('sqlite://')\n metadata = MetaData(db)"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import profiling",
        "fixed_code": "from test.lib import profiling",
        "patch": "@@ -3,7 +3,7 @@\n from sqlalchemy import Column, ForeignKey\n from sqlalchemy import Integer, String\n from sqlalchemy.orm import mapper\n-from sqlalchemy.test import profiling\n+from test.lib import profiling\n \n class Object(object):\n     pass"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test.util import gc_collect",
        "fixed_code": "from test.lib.util import gc_collect",
        "patch": "@@ -3,7 +3,7 @@\n import random, string\n \n from sqlalchemy.orm import attributes\n-from sqlalchemy.test.util import gc_collect\n+from test.lib.util import gc_collect\n \n # with this test, run top.  make sure the Python process doenst grow in size arbitrarily.\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import profiling",
        "fixed_code": "from test.lib import profiling",
        "patch": "@@ -1,6 +1,6 @@\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import profiling\n+from test.lib import profiling\n \n NUM = 500\n DIVISOR = 50"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -2,7 +2,7 @@\n #import sqlalchemy.orm.attributes as attributes\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \"\"\"\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -2,7 +2,7 @@\n import types\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n NUM = 2500"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import testing",
        "fixed_code": "from test.lib import testing",
        "patch": "@@ -2,7 +2,7 @@\n import thread, time\n from sqlalchemy import *\n import sqlalchemy.pool as pool\n-from sqlalchemy.test import testing\n+from test.lib import testing\n \n db = create_engine(testing.db.url, pool_timeout=30, echo_pool=True)\n metadata = MetaData(db)"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -4,7 +4,7 @@\n from sqlalchemy import *\n from sqlalchemy.orm import *\n import thread\n-from sqlalchemy.test import *\n+from test.lib import *\n \n port = 8000\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,7 +1,7 @@\n from sqlalchemy import *\n from sqlalchemy import sql, schema\n from sqlalchemy.sql import compiler\n-from sqlalchemy.test import *\n+from test.lib import *\n \n class QuoteTest(TestBase, AssertsCompiledSQL):\n     @classmethod"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,5 +1,5 @@\n from sqlalchemy import *\n-from sqlalchemy.test import *\n+from test.lib import *\n \n \n class FoundRowsTest(TestBase, AssertsExecutionResults):"
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test.schema import Table, Column",
        "fixed_code": "from test.lib.schema import Table, Column",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"application table metadata objects are described here.\"\"\"\n \n from sqlalchemy import *\n-from sqlalchemy.test.schema import Table, Column\n+from test.lib.schema import Table, Column\n \n metadata = MetaData()\n "
    },
    {
        "commit_id": "58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "commit_message": "- sqlalchemy.test and nose plugin moves back to being entirely\noutside of \"sqlalchemy\" and under \"test/\".\n\nRationale:\n\n- coverage plugin works without issue, without need for an awkward\nadditional package install\n- command line for \"nosetests\" isn't polluted with SQLAlchemy options\n\n[ticket:1949]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/58b29394337b5a51ce71e96cc4ba6fd68218a999",
        "buggy_code": "from sqlalchemy.test import *",
        "fixed_code": "from test.lib import *",
        "patch": "@@ -1,6 +1,6 @@\n from sqlalchemy import *\n from sqlalchemy.orm import *\n-from sqlalchemy.test import *\n+from test.lib import *\n from test.zblog import mappers, tables\n from test.zblog.user import *\n from test.zblog.blog import *"
    },
    {
        "commit_id": "17fdeb77adadc1833ecee388060c45444d91b7bd",
        "commit_message": "- fix test related to [ticket:1980]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/17fdeb77adadc1833ecee388060c45444d91b7bd",
        "buggy_code": "Column('col2', PickleType(comparator=operator.eq))",
        "fixed_code": "Column('col2', PickleType(comparator=operator.eq, mutable=True))",
        "patch": "@@ -514,7 +514,7 @@ def test_mutable_identity(self):\n         table1 = Table(\"mytable\", metadata,\n             Column('col1', Integer, primary_key=True,\n                                 test_needs_autoincrement=True),\n-            Column('col2', PickleType(comparator=operator.eq))\n+            Column('col2', PickleType(comparator=operator.eq, mutable=True))\n             )\n         \n         class Foo(object):"
    },
    {
        "commit_id": "e3ca3a773ff8c36126fe584b69e380c67791e2bf",
        "commit_message": "- merge FromObj cleanup, immutable .c attribute patch, [ticket:1917]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3ca3a773ff8c36126fe584b69e380c67791e2bf",
        "buggy_code": "_commutative = set([eq, ne, add, mul])",
        "fixed_code": "_commutative = set([eq, ne, add, mul, and_])",
        "patch": "@@ -83,7 +83,7 @@ def desc_op(a):\n def asc_op(a):\n     return a.asc()\n \n-_commutative = set([eq, ne, add, mul])\n+_commutative = set([eq, ne, add, mul, and_])\n def is_commutative(op):\n     return op in _commutative\n "
    },
    {
        "commit_id": "3d72efba2b1a39a52a2736dbc2ad7492b2455b27",
        "commit_message": "- fix test specification for oracle euro test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3d72efba2b1a39a52a2736dbc2ad7492b2455b27",
        "buggy_code": "__only_on__ = 'oracle+cx-oracle'",
        "fixed_code": "__only_on__ = 'oracle+cx_oracle'",
        "patch": "@@ -1047,7 +1047,7 @@ def test_raw_lobs(self):\n class EuroNumericTest(TestBase):\n     \"\"\"test the numeric output_type_handler when using non-US locale for NLS_LANG.\"\"\"\n     \n-    __only_on__ = 'oracle+cx-oracle'\n+    __only_on__ = 'oracle+cx_oracle'\n     \n     def setup(self):\n         self.old_nls_lang = os.environ.get('NLS_LANG', False)"
    },
    {
        "commit_id": "98674959d25040d4d7ca3c95bbfb422cbb23c20e",
        "commit_message": "- initial patch for [ticket:1926]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/98674959d25040d4d7ca3c95bbfb422cbb23c20e",
        "buggy_code": "self.logger = log.instance_logger(self, echoflag=echo)",
        "fixed_code": "log.instance_logger(self, echoflag=echo)",
        "patch": "@@ -1622,7 +1622,7 @@ def __init__(self, pool, dialect, url,\n             self.logging_name = logging_name\n         self.echo = echo\n         self.engine = self\n-        self.logger = log.instance_logger(self, echoflag=echo)\n+        log.instance_logger(self, echoflag=echo)\n         if proxy:\n             self.Connection = _proxy_connection_cls(Connection, proxy)\n         else:"
    },
    {
        "commit_id": "98674959d25040d4d7ca3c95bbfb422cbb23c20e",
        "commit_message": "- initial patch for [ticket:1926]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/98674959d25040d4d7ca3c95bbfb422cbb23c20e",
        "buggy_code": "self.logger = log.instance_logger(self, echoflag=echo)",
        "fixed_code": "log.instance_logger(self, echoflag=echo)",
        "patch": "@@ -114,7 +114,7 @@ def __init__(self,\n         else:\n             self._orig_logging_name = None\n             \n-        self.logger = log.instance_logger(self, echoflag=echo)\n+        log.instance_logger(self, echoflag=echo)\n         self._threadconns = threading.local()\n         self._creator = creator\n         self._recycle = recycle"
    },
    {
        "commit_id": "041a329e69f6aa60bdd2f3fb87b5172481806c4a",
        "commit_message": "- adapt initial patch from [ticket:1917] to current tip\n- raise TypeError for immutability",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/041a329e69f6aa60bdd2f3fb87b5172481806c4a",
        "buggy_code": "_commutative = set([eq, ne, add, mul])",
        "fixed_code": "_commutative = set([eq, ne, add, mul, and_])",
        "patch": "@@ -83,7 +83,7 @@ def desc_op(a):\n def asc_op(a):\n     return a.asc()\n \n-_commutative = set([eq, ne, add, mul])\n+_commutative = set([eq, ne, add, mul, and_])\n def is_commutative(op):\n     return op in _commutative\n "
    },
    {
        "commit_id": "5400ea2c1e2c605843255f5eb15b5ce1d8fba025",
        "commit_message": "- additional fix for [ticket:1964]\n- [ticket:1965] is invalid",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5400ea2c1e2c605843255f5eb15b5ce1d8fba025",
        "buggy_code": "subq_path[0], \\",
        "fixed_code": "subq_mapper, \\",
        "patch": "@@ -748,7 +748,7 @@ def setup_query(self, context, entity,\n                                     self.parent, self.parent_property\n         else:\n             leftmost_mapper, leftmost_prop = \\\n-                                    subq_path[0], \\\n+                                    subq_mapper, \\\n                                     subq_mapper.get_property(subq_path[1])\n         leftmost_cols, remote_cols = self._local_remote_columns(leftmost_prop)\n         "
    },
    {
        "commit_id": "855dbda8258ef62444286924431a5a8171b91e89",
        "commit_message": "- mysql\n  - Fixed error handling for Jython + zxjdbc, such that\n    has_table() property works again.  Regression from\n    0.6.3 (we don't have a Jython buildbot, sorry)\n    [ticket:1960]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/855dbda8258ef62444286924431a5a8171b91e89",
        "buggy_code": "m = re.compile(r\"\\[SQLCode\\: (\\d+)\\]\").search(str(exception.orig.args))",
        "fixed_code": "m = re.compile(r\"\\[SQLCode\\: (\\d+)\\]\").search(str(exception.args))",
        "patch": "@@ -92,7 +92,7 @@ def _driver_kwargs(self):\n     def _extract_error_code(self, exception):\n         # e.g.: DBAPIError: (Error) Table 'test.u2' doesn't exist\n         # [SQLCode: 1146], [SQLState: 42S02] 'DESCRIBE `u2`' ()\n-        m = re.compile(r\"\\[SQLCode\\: (\\d+)\\]\").search(str(exception.orig.args))\n+        m = re.compile(r\"\\[SQLCode\\: (\\d+)\\]\").search(str(exception.args))\n         c = m.group(1)\n         if c:\n             return int(c)"
    },
    {
        "commit_id": "0d00f470356c26fc18e890ede4620c10b5086a85",
        "commit_message": "- Fixed bug whereby a non-\"mutable\" attribute modified event\nwhich occurred on an object that was clean except for\npreceding mutable attribute changes would fail to strongly\nreference itself in the identity map. This would cause the\nobject to be garbage collected, losing track of any changes\nthat weren't previously saved in the \"mutable changes\"\ndictionary.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0d00f470356c26fc18e890ede4620c10b5086a85",
        "buggy_code": "__version__ = '0.6.5'",
        "fixed_code": "__version__ = '0.6.6'",
        "patch": "@@ -115,6 +115,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n                  \n-__version__ = '0.6.5'\n+__version__ = '0.6.6'\n \n del inspect, sys"
    },
    {
        "commit_id": "ea81fa93a4e2598065951e80baab9b37523cc424",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ea81fa93a4e2598065951e80baab9b37523cc424",
        "buggy_code": "filter(User.name.like.('%ed%')).\\\\",
        "fixed_code": "filter(User.name.like('%ed%')).\\\\",
        "patch": "@@ -796,7 +796,7 @@ def with_entities(self, *entities):\n             # and then ordered by related email address\n             q = session.query(User).\\\\\n                         join(User.address).\\\\\n-                        filter(User.name.like.('%ed%')).\\\\\n+                        filter(User.name.like('%ed%')).\\\\\n                         order_by(Address.email)\n \n             # given *only* User.id==5, Address.email, and 'q', what "
    },
    {
        "commit_id": "b47983f8ecdc022c42d2c3b624894e58b4f18538",
        "commit_message": "- Fixed labeling bug in Query whereby the NamedTuple\nwould mis-apply labels if any of the column\nexpressions were un-labeled.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b47983f8ecdc022c42d2c3b624894e58b4f18538",
        "buggy_code": "return self._labels",
        "fixed_code": "return [l for l in self._labels if l is not None]",
        "patch": "@@ -745,7 +745,7 @@ def __new__(cls, vals, labels=None):\n         return t\n \n     def keys(self):\n-        return self._labels\n+        return [l for l in self._labels if l is not None]\n \n \n class OrderedProperties(object):"
    },
    {
        "commit_id": "d9dc05adb689bc4eab2227a96af0d874696cc63d",
        "commit_message": "- begin adding tests for event registration and dispatch standalone\n- fix pickling again\n- other test fixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d9dc05adb689bc4eab2227a96af0d874696cc63d",
        "buggy_code": "super(_ClassInstrumentationAdpter, self).post_configure_attribute(key)",
        "fixed_code": "super(_ClassInstrumentationAdapter, self).post_configure_attribute(key)",
        "patch": "@@ -361,7 +361,7 @@ def instrument_attribute(self, key, inst, propagated=False):\n             self._adapted.instrument_attribute(self.class_, key, inst)\n \n     def post_configure_attribute(self, key):\n-        super(_ClassInstrumentationAdpter, self).post_configure_attribute(key)\n+        super(_ClassInstrumentationAdapter, self).post_configure_attribute(key)\n         self._adapted.post_configure_attribute(self.class_, key, self[key])\n \n     def install_descriptor(self, key, inst):"
    },
    {
        "commit_id": "d9dc05adb689bc4eab2227a96af0d874696cc63d",
        "commit_message": "- begin adding tests for event registration and dispatch standalone\n- fix pickling again\n- other test fixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d9dc05adb689bc4eab2227a96af0d874696cc63d",
        "buggy_code": "self.manager.dispatch.on_resurrect(self, obj)",
        "fixed_code": "self.manager.dispatch.on_resurrect(self)",
        "patch": "@@ -509,7 +509,7 @@ def __resurrect(self):\n         obj.__dict__.update(self.mutable_dict)\n \n         # re-establishes identity attributes from the key\n-        self.manager.dispatch.on_resurrect(self, obj)\n+        self.manager.dispatch.on_resurrect(self)\n         \n         return obj\n "
    },
    {
        "commit_id": "d46985d699e6ebffe45c94d91cfa842271e06bb0",
        "commit_message": "- add instrumentation events\n- simplify listen_for_events example with new system\n- add \"propagate\", \"retval\", \"raw\" flags to attribute events.  this solves the \"return value\"\nissue as well as the \"subclass\" issue.\n- begin thinking about event removal.   Each listen() method will have a corresponding remove().\nCustom listen() methods will have to package all the info onto the event function that is needed\nto remove its state.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d46985d699e6ebffe45c94d91cfa842271e06bb0",
        "buggy_code": "merged_state._run_on_load(merged)",
        "fixed_code": "merged_state._run_on_load()",
        "patch": "@@ -1243,7 +1243,7 @@ def _merge(self, state, state_dict, load=True, _recursive=None):\n             merged_state.commit_all(merged_dict, self.identity_map)  \n \n         if new_instance:\n-            merged_state._run_on_load(merged)\n+            merged_state._run_on_load()\n         return merged\n \n     @classmethod"
    },
    {
        "commit_id": "d46985d699e6ebffe45c94d91cfa842271e06bb0",
        "commit_message": "- add instrumentation events\n- simplify listen_for_events example with new system\n- add \"propagate\", \"retval\", \"raw\" flags to attribute events.  this solves the \"return value\"\nissue as well as the \"subclass\" issue.\n- begin thinking about event removal.   Each listen() method will have a corresponding remove().\nCustom listen() methods will have to package all the info onto the event function that is needed\nto remove its state.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d46985d699e6ebffe45c94d91cfa842271e06bb0",
        "buggy_code": "queryattr = attributes.QueryableAttribute(prop.key,",
        "fixed_code": "queryattr = attributes.QueryableAttribute(self, prop.key,",
        "patch": "@@ -341,7 +341,7 @@ def __adapt_prop(self, prop):\n         existing = getattr(self.__target, prop.key)\n         comparator = existing.comparator.adapted(self.__adapt_element)\n \n-        queryattr = attributes.QueryableAttribute(prop.key,\n+        queryattr = attributes.QueryableAttribute(self, prop.key,\n             impl=existing.impl, parententity=self, comparator=comparator)\n         setattr(self, prop.key, queryattr)\n         return queryattr"
    },
    {
        "commit_id": "f1648baa4bca7c4c3f2ab683ca34c2f271fc48f2",
        "commit_message": "- fix a typo that was apparently not really impacting anything",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f1648baa4bca7c4c3f2ab683ca34c2f271fc48f2",
        "buggy_code": "for attr in '_columns', '_primary_key_foreign_keys', \\",
        "fixed_code": "for attr in '_columns', '_primary_key', '_foreign_keys', \\",
        "patch": "@@ -2201,7 +2201,7 @@ def description(self):\n     def _reset_exported(self):\n         \"\"\"delete memoized collections when a FromClause is cloned.\"\"\"\n \n-        for attr in '_columns', '_primary_key_foreign_keys', \\\n+        for attr in '_columns', '_primary_key', '_foreign_keys', \\\n             'locate_all_froms':\n             self.__dict__.pop(attr, None)\n "
    },
    {
        "commit_id": "cb610d783e6ae6cab088437e333ee7b75c41867d",
        "commit_message": "fix the default here",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cb610d783e6ae6cab088437e333ee7b75c41867d",
        "buggy_code": "def with_hint(self, selectable, text, dialect_name=None):",
        "fixed_code": "def with_hint(self, selectable, text, dialect_name='*'):",
        "patch": "@@ -815,7 +815,7 @@ def _options(self, conditional, *args):\n                 opt.process_query(self)\n \n     @_generative()\n-    def with_hint(self, selectable, text, dialect_name=None):\n+    def with_hint(self, selectable, text, dialect_name='*'):\n         \"\"\"Add an indexing hint for the given entity or selectable to \n         this :class:`Query`.\n         "
    },
    {
        "commit_id": "52735e75c527dd24a793ae7ee0b1978e8aacacb5",
        "commit_message": "- fix test_single test to use default dialect\n- The exception raised by Session when it is used\nsubsequent to a subtransaction rollback (which is what\nhappens when a flush fails in autocommit=False mode) has\nnow been reworded (this is the \"inactive due to a\nrollback in a subtransaction\" message). In particular,\nif the rollback was due to an exception during flush(),\nthe message states this is the case, and reiterates the\nstring form of the original exception that occurred\nduring flush. If the session is closed due to explicit\nusage of subtransactions (not very common), the message\njust states this is the case.\n\n- The exception raised by Mapper when repeated requests to\nits initialization are made after initialization already\nfailed no longer assumes the \"hasattr\" case, since\nthere's other scenarios in which this message gets\nemitted, and the message also does not compound onto\nitself multiple times - you get the same message for\neach attempt at usage. The misnomer \"compiles\" is being\ntraded out for \"initialize\".",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/52735e75c527dd24a793ae7ee0b1978e8aacacb5",
        "buggy_code": "\"When compiling mapper %s, expression %r failed to \"",
        "fixed_code": "\"When initializing mapper %s, expression %r failed to \"",
        "patch": "@@ -1192,7 +1192,7 @@ def return_cls():\n                     return x\n             except NameError, n:\n                 raise exceptions.InvalidRequestError(\n-                    \"When compiling mapper %s, expression %r failed to \"\n+                    \"When initializing mapper %s, expression %r failed to \"\n                     \"locate a name (%r). If this is a class name, consider \"\n                     \"adding this relationship() to the %r class after \"\n                     \"both dependent classes have been defined.\" % "
    },
    {
        "commit_id": "f5d2bb60a886ba0aa35a04eb6c096b7982643ca2",
        "commit_message": "- Fixed recursion bug which could occur when moving\nan object from one reference to another, with\nbackrefs involved, where the initiating parent\nwas a subclass (with its own mapper) of the\nprevious parent.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f5d2bb60a886ba0aa35a04eb6c096b7982643ca2",
        "buggy_code": "Initiator is the InstrumentedAttribute that initiated the membership",
        "fixed_code": "Initiator is a token owned by the InstrumentedAttribute that initiated the membership",
        "patch": "@@ -587,7 +587,7 @@ def __nonzero__(self):\n     def fire_append_event(self, item, initiator=None):\n         \"\"\"Notify that a entity has entered the collection.\n \n-        Initiator is the InstrumentedAttribute that initiated the membership\n+        Initiator is a token owned by the InstrumentedAttribute that initiated the membership\n         mutation, and should be left as None unless you are passing along\n         an initiator value from a chained operation.\n "
    },
    {
        "commit_id": "f5d2bb60a886ba0aa35a04eb6c096b7982643ca2",
        "commit_message": "- Fixed recursion bug which could occur when moving\nan object from one reference to another, with\nbackrefs involved, where the initiating parent\nwas a subclass (with its own mapper) of the\nprevious parent.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f5d2bb60a886ba0aa35a04eb6c096b7982643ca2",
        "buggy_code": "if initiator is self:",
        "fixed_code": "if initiator and initiator.parent_token is self.parent_token:",
        "patch": "@@ -112,7 +112,7 @@ def _modified_event(self, state, dict_):\n \n     def set(self, state, dict_, value, initiator,\n                         passive=attributes.PASSIVE_OFF):\n-        if initiator is self:\n+        if initiator and initiator.parent_token is self.parent_token:\n             return\n \n         self._set_iterable(state, dict_, value)"
    },
    {
        "commit_id": "ccde5319358aa3eb0e075dbcf01024001230b02b",
        "commit_message": "- query.with_parent() now accepts transient objects\nand will use the non-persistent values of their pk/fk\nattributes in order to formulate the criterion.\nDocs are also clarified as to the purpose of with_parent().\n- fix for PG test executing an alias()",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ccde5319358aa3eb0e075dbcf01024001230b02b",
        "buggy_code": "subquery().execute()",
        "fixed_code": "statement.execute()",
        "patch": "@@ -1725,7 +1725,7 @@ class Foo(object):\n             result.close()\n             result = \\\n                 sess.query(Foo).execution_options(stream_results=True).\\\n-                    subquery().execute()\n+                    statement.execute()\n             assert result.cursor.name\n             result.close()\n         finally:"
    },
    {
        "commit_id": "36fa24603f20ff6afc537cc97310d90efc667959",
        "commit_message": "- Oracle reflection of indexes has been tuned so\nthat indexes which include some or all primary\nkey columns, but not the same set of columns\nas that of the primary key, are reflected.\nIndexes which contain the identical columns\nas that of the primary key are skipped within\nreflection, as the index in that case is assumed\nto be the auto-generated primary key index.\nPreviously, any index with PK columns present\nwould be skipped.  Thanks to Kent Bower\nfor the patch.  [ticket:1867]\n\n- Oracle now reflects the names of primary key\nconstraints - also thanks to Kent Bower.\n[ticket:1868]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/36fa24603f20ff6afc537cc97310d90efc667959",
        "buggy_code": "fails_on_everything_except('postgresql')",
        "fixed_code": "fails_on_everything_except('postgresql', 'oracle')",
        "patch": "@@ -257,7 +257,7 @@ def reflects_pk_names(fn):\n     \"\"\"Target driver reflects the name of primary key constraints.\"\"\"\n     return _chain_decorators_on(\n         fn,\n-        fails_on_everything_except('postgresql')\n+        fails_on_everything_except('postgresql', 'oracle')\n     )\n     \n def python2(fn):"
    },
    {
        "commit_id": "8fc50cd3a4eb98501c5ae47ead07c20b485934df",
        "commit_message": "- Another pass through the series of error messages\nemitted when relationship() is configured with\nambiguous arguments.   The \"foreign_keys\"\nsetting is no longer mentioned, as it is almost\nnever needed and it is preferable users set up\ncorrect ForeignKey metadata, which is now the\nrecommendation.  If 'foreign_keys'\nis used and is incorrect, the message suggests\nthe attribute is probably unnecessary.  Docs\nfor the attribute are beefed up.  This\nbecause all confused relationship() users on the\nML appear to be attempting to use foreign_keys\ndue to the message, which only confuses them\nfurther since Table metadata is much clearer.\n\n- If the \"secondary\" table has no ForeignKey metadata\nand no foreign_keys is set, even though the\nuser is passing screwed up information, it is assumed\nthat primary/secondaryjoin expressions should\nconsider only and all cols in \"secondary\" to be\nforeign.  It's not possible with \"secondary\" for\nthe foreign keys to be elsewhere in any case.\nA warning is now emitted instead of an error,\nand the mapping succeeds. [ticket:1877]\n\n- fixed incorrect \"Alternate Collection Mappings\" reference\nin the docs, not sure if someone wants to reference\n\"Rows that Point to Themselves\" function\n- \"Collection Mapping\" is \"Advanced Collection Mapping\", this\nsection is troublesome since nobody really needs it but it\nis public API",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8fc50cd3a4eb98501c5ae47ead07c20b485934df",
        "buggy_code": "'secondary', '_foreign_keys', 'remote_side'):",
        "fixed_code": "'secondary', '_user_defined_foreign_keys', 'remote_side'):",
        "patch": "@@ -1197,7 +1197,7 @@ def return_cls():\n \n     if isinstance(prop, RelationshipProperty):\n         for attr in ('argument', 'order_by', 'primaryjoin', 'secondaryjoin',\n-                     'secondary', '_foreign_keys', 'remote_side'):\n+                     'secondary', '_user_defined_foreign_keys', 'remote_side'):\n             v = getattr(prop, attr)\n             if isinstance(v, basestring):\n                 setattr(prop, attr, resolve_arg(v))"
    },
    {
        "commit_id": "dba3ad87b5a762272a11450a18955468d019fe80",
        "commit_message": "- Specifying a non-column based argument\nfor column_mapped_collection, including string,\ntext() etc., will raise an error message that\nspecifically asks for a column element, no longer\nmisleads with incorrect information about\ntext() or literal().  [ticket:1863]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dba3ad87b5a762272a11450a18955468d019fe80",
        "buggy_code": "cols = [expression._no_literals(q) for q in util.to_list(mapping_spec)]",
        "fixed_code": "cols = [expression._only_column_elements(q) for q in util.to_list(mapping_spec)]",
        "patch": "@@ -129,7 +129,7 @@ def column_mapped_collection(mapping_spec):\n     from sqlalchemy.orm.util import _state_mapper\n     from sqlalchemy.orm.attributes import instance_state\n \n-    cols = [expression._no_literals(q) for q in util.to_list(mapping_spec)]\n+    cols = [expression._only_column_elements(q) for q in util.to_list(mapping_spec)]\n     if len(cols) == 1:\n         def keyfunc(value):\n             state = instance_state(value)"
    },
    {
        "commit_id": "c09b79d61eaba130efcd676db5e27ac3635535d2",
        "commit_message": "- The name ConcurrentModificationError has been\nchanged to StaleDataError, and descriptive\nerror messages have been revised to reflect\nexactly what the issue is.   Both names will\nremain available for the forseeable future\nfor schemes that may be specifying\nConcurrentModificationError in an \"except:\"\nclause.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c09b79d61eaba130efcd676db5e27ac3635535d2",
        "buggy_code": "``ConcurrentModificationError`` exception is thrown.",
        "fixed_code": ":class:`StaleDataError` exception is thrown.",
        "patch": "@@ -782,7 +782,7 @@ def mapper(class_, local_table=None, *args, **params):\n             a running *version id* of mapped entities in the database.  this is\n             used during save operations to ensure that no other thread or process\n             has updated the instance during the lifetime of the entity, else a\n-            ``ConcurrentModificationError`` exception is thrown.\n+            :class:`StaleDataError` exception is thrown.\n \n         :param version_id_generator: A callable which defines the algorithm used to generate new version \n             ids.  Defaults to an integer generator.  Can be replaced with one that"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "__version__ = '0.6.3'",
        "fixed_code": "__version__ = '0.6.4'",
        "patch": "@@ -114,6 +114,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n                  \n-__version__ = '0.6.3'\n+__version__ = '0.6.4'\n \n del inspect, sys"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "self._validate_identifier(index.name, False)))",
        "fixed_code": "self._index_identifier(index.name)))",
        "patch": "@@ -436,7 +436,7 @@ def visit_drop_index(self, drop):\n         index = drop.element\n         self.append(\"\\nDROP INDEX [%s].[%s]\" % \\\n                         (index.table.name,\n-                        self._validate_identifier(index.name, False)))\n+                        self._index_identifier(index.name)))\n \n class AccessIdentifierPreparer(compiler.IdentifierPreparer):\n     reserved_words = compiler.RESERVED_WORDS.copy()"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "self._validate_identifier(drop.element.name, False),",
        "fixed_code": "self._index_identifier(drop.element.name),",
        "patch": "@@ -967,7 +967,7 @@ def visit_drop_index(self, drop):\n         return \"\\nDROP INDEX %s.%s\" % (\n             self.preparer.quote_identifier(drop.element.table.name),\n             self.preparer.quote(\n-                        self._validate_identifier(drop.element.name, False),\n+                        self._index_identifier(drop.element.name),\n                         drop.element.quote)\n             )\n "
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "(self.preparer.quote(self._validate_identifier(index.name, False), index.quote),",
        "fixed_code": "(self.preparer.quote(self._index_identifier(index.name), index.quote),",
        "patch": "@@ -1358,7 +1358,7 @@ def visit_drop_index(self, drop):\n         index = drop.element\n         \n         return \"\\nDROP INDEX %s ON %s\" % \\\n-                    (self.preparer.quote(self._validate_identifier(index.name, False), index.quote),\n+                    (self.preparer.quote(self._index_identifier(index.name), index.quote),\n                      self.preparer.format_table(index.table))\n \n     def visit_drop_constraint(self, drop):"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "self._validate_identifier(index.name, True), index.quote),",
        "fixed_code": "self._index_identifier(index.name), index.quote),",
        "patch": "@@ -480,7 +480,7 @@ def visit_create_index(self, create):\n             text += \"UNIQUE \"\n         text += \"INDEX %s ON %s (%s)\" \\\n                 % (preparer.quote(\n-                    self._validate_identifier(index.name, True), index.quote),\n+                    self._index_identifier(index.name), index.quote),\n                    preparer.format_table(index.table),\n                    ', '.join([preparer.format_column(c) \n                                 for c in index.columns]))"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "name=self._validate_identifier(index.name, True)),",
        "fixed_code": "name=self._index_identifier(index.name)),",
        "patch": "@@ -280,7 +280,7 @@ def visit_create_index(self, create):\n             text += \"UNIQUE \"\n         text += \"INDEX %s ON %s (%s)\" \\\n                     % (preparer.format_index(index,\n-                       name=self._validate_identifier(index.name, True)),\n+                       name=self._index_identifier(index.name)),\n                        preparer.format_table(index.table, use_schema=False),\n                        ', '.join(preparer.quote(c.name, c.quote)\n                                  for c in index.columns))"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "self._validate_identifier(index.name, False), index.quote)",
        "fixed_code": "self._index_identifier(index.name), index.quote)",
        "patch": "@@ -356,7 +356,7 @@ def visit_drop_index(self, drop):\n         return \"\\nDROP INDEX %s.%s\" % (\n             self.preparer.quote_identifier(index.table.name),\n             self.preparer.quote(\n-                    self._validate_identifier(index.name, False), index.quote)\n+                    self._index_identifier(index.name), index.quote)\n             )\n \n class SybaseIdentifierPreparer(compiler.IdentifierPreparer):"
    },
    {
        "commit_id": "dabe38bf56dd18876466f07667c386c56ba88de4",
        "commit_message": "- Changed the scheme used to generate truncated\n\"auto\" index names when using the \"index=True\"\nflag on Column.   The truncation only takes\nplace with the auto-generated name, not one\nthat is user-defined (an error would be\nraised instead), and the truncation scheme\nitself is now based on a fragment of an md5\nhash of the identifier name, so that multiple\nindexes on columns with similar names still\nhave unique names.  [ticket:1855]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/dabe38bf56dd18876466f07667c386c56ba88de4",
        "buggy_code": "Index('ix_%s' % self._label, self, unique=self.unique)",
        "fixed_code": "Index(expression._generated_label('ix_%s' % self._label), self, unique=self.unique)",
        "patch": "@@ -825,7 +825,7 @@ def _set_parent(self, table):\n                     \"The 'index' keyword argument on Column is boolean only. \"\n                     \"To create indexes with a specific name, create an \"\n                     \"explicit Index object external to the Table.\")\n-            Index('ix_%s' % self._label, self, unique=self.unique)\n+            Index(expression._generated_label('ix_%s' % self._label), self, unique=self.unique)\n         elif self.unique:\n             if isinstance(self.unique, basestring):\n                 raise exc.ArgumentError("
    },
    {
        "commit_id": "85a800680a800c945ce9a888c8c8891ba700197a",
        "commit_message": "- _extract_error_code now expects the raw DBAPI error in all cases\nfor all four MySQL dialects.   has_table() passes in the \"orig\"\nfrom the SQLAlchemy exception.  continuing of [ticket:1848]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/85a800680a800c945ce9a888c8c8891ba700197a",
        "buggy_code": "m = re.compile(r\"\\((\\d+)\\)\").search(str(exception.orig.args))",
        "fixed_code": "m = re.compile(r\"\\((\\d+)\\)\").search(str(exception.args))",
        "patch": "@@ -66,7 +66,7 @@ def _detect_charset(self, connection):\n         return 'latin1'\n     \n     def _extract_error_code(self, exception):\n-        m = re.compile(r\"\\((\\d+)\\)\").search(str(exception.orig.args))\n+        m = re.compile(r\"\\((\\d+)\\)\").search(str(exception.args))\n         c = m.group(1)\n         if c:\n             return int(c)"
    },
    {
        "commit_id": "633bba65f9be6a74162ed2ed8563f1e5ced2330d",
        "commit_message": "merge doc fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/633bba65f9be6a74162ed2ed8563f1e5ced2330d",
        "buggy_code": "Propigates attribute change events to a",
        "fixed_code": "Propagates attribute change events to a",
        "patch": "@@ -15,7 +15,7 @@ def post_configure_attribute(self, class_, key, inst):\n class AttributeListener(AttributeExtension):\n     \"\"\"Generic event listener.  \n     \n-    Propigates attribute change events to a \n+    Propagates attribute change events to a \n     \"receive_change_event()\" method on the target\n     instance.\n     "
    },
    {
        "commit_id": "5095369ce8302111d56a1e3a15089606d1aee8e6",
        "commit_message": "fix oracle char length test for newer descriptors",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5095369ce8302111d56a1e3a15089606d1aee8e6",
        "buggy_code": "oracle8dialect._supports_char_length = False",
        "fixed_code": "oracle8dialect.server_version_info = (8, 0)",
        "patch": "@@ -822,7 +822,7 @@ def test_char_length(self):\n         self.assert_compile(VARCHAR(50),\"VARCHAR(50 CHAR)\")\n \n         oracle8dialect = oracle.dialect()\n-        oracle8dialect._supports_char_length = False\n+        oracle8dialect.server_version_info = (8, 0)\n         self.assert_compile(VARCHAR(50),\"VARCHAR(50)\",dialect=oracle8dialect)\n \n         self.assert_compile(NVARCHAR(50),\"NVARCHAR2(50)\")"
    },
    {
        "commit_id": "caa465512cae22d2a5288ff7b424904d246459fa",
        "commit_message": "fix import",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/caa465512cae22d2a5288ff7b424904d246459fa",
        "buggy_code": "from sqlalchemy.orm import exc as sa_exc",
        "fixed_code": "from sqlalchemy.orm import exc as orm_exc",
        "patch": "@@ -13,7 +13,7 @@\n \n from sqlalchemy import log, util\n from sqlalchemy import exc as sa_exc\n-from sqlalchemy.orm import exc as sa_exc\n+from sqlalchemy.orm import exc as orm_exc\n from sqlalchemy.sql import operators\n from sqlalchemy.orm import (\n     attributes, object_session, util as mapperutil, strategies, object_mapper"
    },
    {
        "commit_id": "e0aa61018545700119d294197ac4581430cb2335",
        "commit_message": "fix variable name",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e0aa61018545700119d294197ac4581430cb2335",
        "buggy_code": "return bind.dialect.inspector(engine)",
        "fixed_code": "return bind.dialect.inspector(bind)",
        "patch": "@@ -107,7 +107,7 @@ def from_engine(cls, bind):\n         \n         \"\"\"\n         if hasattr(bind.dialect, 'inspector'):\n-            return bind.dialect.inspector(engine)\n+            return bind.dialect.inspector(bind)\n         return Inspector(bind)\n \n     @property"
    },
    {
        "commit_id": "0707c94d630966ef677acafecf90f7c6884de1ce",
        "commit_message": "- Fixed incorrect signature in do_execute() for firebird, access, error\nintroduced in 0.6.1. [ticket:1823]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0707c94d630966ef677acafecf90f7c6884de1ce",
        "buggy_code": "def do_execute(self, cursor, statement, params, **kwargs):",
        "fixed_code": "def do_execute(self, cursor, statement, params, context=None):",
        "patch": "@@ -194,7 +194,7 @@ def create_connect_args(self, url):\n     def last_inserted_ids(self):\n         return self.context.last_inserted_ids\n \n-    def do_execute(self, cursor, statement, params, **kwargs):\n+    def do_execute(self, cursor, statement, params, context=None):\n         if params == {}:\n             params = ()\n         super(AccessDialect, self).do_execute(cursor, statement, params, **kwargs)"
    },
    {
        "commit_id": "0707c94d630966ef677acafecf90f7c6884de1ce",
        "commit_message": "- Fixed incorrect signature in do_execute() for firebird, access, error\nintroduced in 0.6.1. [ticket:1823]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0707c94d630966ef677acafecf90f7c6884de1ce",
        "buggy_code": "def do_execute(self, cursor, statement, parameters, **kwargs):",
        "fixed_code": "def do_execute(self, cursor, statement, parameters, context=None):",
        "patch": "@@ -605,7 +605,7 @@ def get_indexes(self, connection, table_name, schema=None, **kw):\n \n         return indexes.values()\n \n-    def do_execute(self, cursor, statement, parameters, **kwargs):\n+    def do_execute(self, cursor, statement, parameters, context=None):\n         # kinterbase does not accept a None, but wants an empty list\n         # when there are no arguments.\n         cursor.execute(statement, parameters or [])"
    },
    {
        "commit_id": "74a8723df35fb35869fe95af5128ab6acd527a79",
        "commit_message": "- Fixed bug in connection pool cursor wrapper whereby if a\ncursor threw an exception on close(), the logging of the\nmessage would fail.  [ticket:1786]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/74a8723df35fb35869fe95af5128ab6acd527a79",
        "buggy_code": "self.__parent._logger.warn(\"Error closing cursor: %s\", ex_text)",
        "fixed_code": "self._parent._logger.warn(\"Error closing cursor: %s\", ex_text)",
        "patch": "@@ -454,7 +454,7 @@ def close(self):\n                 ex_text = str(e)\n             except TypeError:\n                 ex_text = repr(e)\n-            self.__parent._logger.warn(\"Error closing cursor: %s\", ex_text)\n+            self._parent._logger.warn(\"Error closing cursor: %s\", ex_text)\n \n             if isinstance(e, (SystemExit, KeyboardInterrupt)):\n                 raise"
    },
    {
        "commit_id": "31d168d2c3f322d013f7944701072ce4d5d420af",
        "commit_message": "fix sphinx reference",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/31d168d2c3f322d013f7944701072ce4d5d420af",
        "buggy_code": ":mod:~sqlalchemy.engine_TwoPhaseTransaction. During a ``commit()``, after",
        "fixed_code": ":mod:`~sqlalchemy.engine_TwoPhaseTransaction`. During a ``commit()``, after",
        "patch": "@@ -147,7 +147,7 @@ def sessionmaker(bind=None, class_=None, autoflush=True, autocommit=False,\n \n     twophase\n       When ``True``, all transactions will be started using\n-      :mod:~sqlalchemy.engine_TwoPhaseTransaction. During a ``commit()``, after\n+      :mod:`~sqlalchemy.engine_TwoPhaseTransaction`. During a ``commit()``, after\n       ``flush()`` has been issued for all attached databases, the\n       ``prepare()`` method on each database's ``TwoPhaseTransaction`` will be\n       called. This allows each database to roll back the entire transaction,"
    },
    {
        "commit_id": "22771624a24de4c54a29ffe7350bc2af4f06cef4",
        "commit_message": "format string for no primary mapper defined error, [ticket:1774]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/22771624a24de4c54a29ffe7350bc2af4f06cef4",
        "buggy_code": "\"Mapper.\")",
        "fixed_code": "\"Mapper.\" % self.class_)",
        "patch": "@@ -337,7 +337,7 @@ def _configure_class_instrumentation(self):\n                 raise sa_exc.InvalidRequestError(\n                     \"Class %s has no primary mapper configured.  Configure \"\n                     \"a primary mapper first before setting up a non primary \"\n-                    \"Mapper.\")\n+                    \"Mapper.\" % self.class_)\n             self.class_manager = manager\n             _mapper_registry[self] = True\n             return"
    },
    {
        "commit_id": "67878d13ed95a1caafd9d304c916a3abf0320fb6",
        "commit_message": "- Fixed an error in expression typing which caused an endless\nloop for expressions with two NULL types.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/67878d13ed95a1caafd9d304c916a3abf0320fb6",
        "buggy_code": "if othertype is NullType or not operators.is_commutative(op):",
        "fixed_code": "if othertype is NULLTYPE or not operators.is_commutative(op):",
        "patch": "@@ -524,7 +524,7 @@ class NullType(TypeEngine):\n     __visit_name__ = 'null'\n \n     def _adapt_expression(self, op, othertype):\n-        if othertype is NullType or not operators.is_commutative(op):\n+        if othertype is NULLTYPE or not operators.is_commutative(op):\n             return op, self\n         else:\n             return othertype._adapt_expression(op, self)"
    },
    {
        "commit_id": "4cbe117eb2feb7cff28c66d849d3a0613448fdce",
        "commit_message": "fix pk violation error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4cbe117eb2feb7cff28c66d849d3a0613448fdce",
        "buggy_code": "a = Address(email_address='foobar')",
        "fixed_code": "a = Address(id=12, email_address='foobar')",
        "patch": "@@ -336,7 +336,7 @@ def _test_cascade_to_pending(self, cascade, expire_or_refresh):\n         s = create_session()\n \n         u = s.query(User).get(8)\n-        a = Address(email_address='foobar')\n+        a = Address(id=12, email_address='foobar')\n         \n         u.addresses.append(a)\n         if expire_or_refresh:"
    },
    {
        "commit_id": "fb766e69bd2fa2811de127a69ad33d507621bff7",
        "commit_message": "fix some examples",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fb766e69bd2fa2811de127a69ad33d507621bff7",
        "buggy_code": "q = session.query(Order).join(['order_items', 'item'])",
        "fixed_code": "q = session.query(Order).join('order_items', 'item')",
        "patch": "@@ -101,7 +101,7 @@ def item(name):\n        for order_item in order.order_items]\n \n # print customers who bought 'MySQL Crowbar' on sale\n-q = session.query(Order).join(['order_items', 'item'])\n+q = session.query(Order).join('order_items', 'item')\n q = q.filter(and_(Item.description == 'MySQL Crowbar',\n                   Item.price > OrderItem.price))\n "
    },
    {
        "commit_id": "fb766e69bd2fa2811de127a69ad33d507621bff7",
        "commit_message": "fix some examples",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fb766e69bd2fa2811de127a69ad33d507621bff7",
        "buggy_code": "orders = session.query(Order).join(['itemassociations', 'item']).filter(",
        "fixed_code": "orders = session.query(Order).join('itemassociations', 'item').filter(",
        "patch": "@@ -100,6 +100,6 @@ def item(name):\n        for item in order.items]\n \n # print customers who bought 'MySQL Crowbar' on sale\n-orders = session.query(Order).join(['itemassociations', 'item']).filter(\n+orders = session.query(Order).join('itemassociations', 'item').filter(\n     and_(Item.description=='MySQL Crowbar', Item.price > OrderItem.price))\n print [order.customer_name for order in orders]"
    },
    {
        "commit_id": "febf3bf78c74aa99ead0902d926de371904595d8",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/febf3bf78c74aa99ead0902d926de371904595d8",
        "buggy_code": "URLs are of the form `postgresql+psycopg2://user@password@host:port/dbname[?key=value&key=value...]`.",
        "fixed_code": "URLs are of the form `postgresql+psycopg2://user:password@host:port/dbname[?key=value&key=value...]`.",
        "patch": "@@ -12,7 +12,7 @@\n Connecting\n ----------\n \n-URLs are of the form `postgresql+psycopg2://user@password@host:port/dbname[?key=value&key=value...]`.\n+URLs are of the form `postgresql+psycopg2://user:password@host:port/dbname[?key=value&key=value...]`.\n \n psycopg2-specific keyword arguments which are accepted by :func:`~sqlalchemy.create_engine()` are:\n "
    },
    {
        "commit_id": "832d508816aae51af1f08e37a0e964ce41755104",
        "commit_message": "one additional oracle fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/832d508816aae51af1f08e37a0e964ce41755104",
        "buggy_code": "(VARCHAR(10), \"VARCHAR(10)\"),",
        "fixed_code": "(VARCHAR(10), (\"VARCHAR(10)\",\"VARCHAR(10 CHAR)\")),",
        "patch": "@@ -42,7 +42,7 @@ def test_uppercase_rendering(self):\n                 (DATE, \"DATE\"),\n                 (TIME, \"TIME\"),\n                 (CLOB, \"CLOB\"),\n-                (VARCHAR(10), \"VARCHAR(10)\"),\n+                (VARCHAR(10), (\"VARCHAR(10)\",\"VARCHAR(10 CHAR)\")),\n                 (NVARCHAR(10), (\"NVARCHAR(10)\", \"NATIONAL VARCHAR(10)\", \"NVARCHAR2(10)\")),\n                 (CHAR, \"CHAR\"),\n                 (NCHAR, (\"NCHAR\", \"NATIONAL CHAR\")),"
    },
    {
        "commit_id": "6acc9e6d9e88bc529a5147f6daa93c4c4e6de64c",
        "commit_message": "- The Oracle dialect will issue VARCHAR type definitions\nusing character counts, i.e. VARCHAR2(50 CHAR), so that\nthe column is sized in terms of characters and not bytes.\nColumn reflection of character types will also use\nALL_TAB_COLUMNS.CHAR_LENGTH instead of\nALL_TAB_COLUMNS.DATA_LENGTH.  Both of these behaviors take\neffect when the server version is 9 or higher - for\nversion 8, the old behaviors are used.  [ticket:1744]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6acc9e6d9e88bc529a5147f6daa93c4c4e6de64c",
        "buggy_code": "check_results(oracle.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'CLOB', 'VARCHAR(20)'], ':param_1')",
        "fixed_code": "check_results(oracle.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'CLOB', 'VARCHAR(20 CHAR)'], ':param_1')",
        "patch": "@@ -1673,7 +1673,7 @@ def check_results(dialect, expected_results, literal):\n         check_results(postgresql.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'TEXT', 'VARCHAR(20)'], '%(param_1)s')\n \n         # then the Oracle engine\n-        check_results(oracle.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'CLOB', 'VARCHAR(20)'], ':param_1')\n+        check_results(oracle.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'CLOB', 'VARCHAR(20 CHAR)'], ':param_1')\n \n         # then the sqlite engine\n         check_results(sqlite.dialect(), ['NUMERIC', 'NUMERIC(12, 9)', 'DATE', 'TEXT', 'VARCHAR(20)'], '?')"
    },
    {
        "commit_id": "a977894c84bf4351f460499a44c7c11439b8d14b",
        "commit_message": "- fix some final pathing stuff, we weren't getting all the loads in the\ninheritance examples, now its improved !\n- final doc pass",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a977894c84bf4351f460499a44c7c11439b8d14b",
        "buggy_code": "options(subqueryload('children.children')).first()",
        "fixed_code": "options(subqueryload_all('children.children')).first()",
        "patch": "@@ -726,7 +726,7 @@ def append(self, node):\n         sess.expunge_all()\n         def go():\n             d = sess.query(Node).filter_by(data='n1').\\\n-                        options(subqueryload('children.children')).first()\n+                        options(subqueryload_all('children.children')).first()\n             eq_(Node(data='n1', children=[\n                 Node(data='n11'),\n                 Node(data='n12', children=["
    },
    {
        "commit_id": "0197a70343a7d6f4eb387bbd461e0624e2dc436b",
        "commit_message": "- Fixed bug which affected all eagerload() and similar options\nsuch that \"remote\" eager loads, i.e. eagerloads off of a lazy\nload such as query(A).options(eagerload(A.b, B.c))\nwouldn't eagerload anything, but using eagerload(\"b.c\") would\nwork fine.\n- subquery eagerloading very close",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0197a70343a7d6f4eb387bbd461e0624e2dc436b",
        "buggy_code": "User(id=10)]",
        "fixed_code": "User(id=10, orders=[])]",
        "patch": "@@ -418,7 +418,7 @@ def user_item_keyword_result(self):\n                            items=[item1, item2, item3]),\n                      Order(id=4,\n                            items=[item1, item5])]),\n-                User(id=10)]\n+                User(id=10, orders=[])]\n         return user_result\n         \n FixtureTest.static = CannedResults()"
    },
    {
        "commit_id": "d6edf5557fa7b3e559ecf93dd6e860f50499bbb8",
        "commit_message": "revert the newline workaround, fix the regexp that was consuming",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d6edf5557fa7b3e559ecf93dd6e860f50499bbb8",
        "buggy_code": "return re.compile(r'\\.html#.*-toplevel').sub('.html', text)",
        "fixed_code": "return re.compile(r'\\.html#\\w+-toplevel').sub('.html', text)",
        "patch": "@@ -4,5 +4,5 @@ def striptags(text):\n     return re.compile(r'<[^>]*>').sub('', text)\n \n def strip_toplevel_anchors(text):\n-    return re.compile(r'\\.html#.*-toplevel').sub('.html', text)\n+    return re.compile(r'\\.html#\\w+-toplevel').sub('.html', text)\n     "
    },
    {
        "commit_id": "aabd00218ba7b6eb3e521b171c90aee4782b480f",
        "commit_message": "fix a python 3 screwup",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aabd00218ba7b6eb3e521b171c90aee4782b480f",
        "buggy_code": "cx_oracle_ver = None",
        "fixed_code": "cx_oracle_ver = (0, 0, 0)",
        "patch": "@@ -387,7 +387,7 @@ def __init__(self,\n         if hasattr(self.dbapi, 'version'):\n             cx_oracle_ver = tuple([int(x) for x in self.dbapi.version.split('.')])\n         else:  \n-           cx_oracle_ver = None\n+           cx_oracle_ver = (0, 0, 0)\n             \n         def types(*names):\n             return set(["
    },
    {
        "commit_id": "960863906680b4a2fd4c27fff58e8a5939ea35f1",
        "commit_message": "- Fixed import error which could occur reflecting tables on\na Windows host [ticket:1580]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/960863906680b4a2fd4c27fff58e8a5939ea35f1",
        "buggy_code": "lc_alias = schema._get_table_key(table.name, table.schema)",
        "fixed_code": "lc_alias = sa_schema._get_table_key(table.name, table.schema)",
        "patch": "@@ -1942,7 +1942,7 @@ def _adjust_casing(self, table, charset=None):\n         # For winxx database hosts.  TODO: is this really needed?\n         if casing == 1 and table.name != table.name.lower():\n             table.name = table.name.lower()\n-            lc_alias = schema._get_table_key(table.name, table.schema)\n+            lc_alias = sa_schema._get_table_key(table.name, table.schema)\n             table.metadata.tables[lc_alias] = table\n \n     def _detect_charset(self, connection):"
    },
    {
        "commit_id": "e5256b76300ab704f386709c997381c8bf8a9358",
        "commit_message": "- added test for #1737\n- the fix from r502f1a4f92d5 broke another rare use case, one-to-one on a PK/FK combo which apparently enables use_get.\n fortunate that another test waiting in trac reveals this.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e5256b76300ab704f386709c997381c8bf8a9358",
        "buggy_code": "active_history = not self.use_get,",
        "fixed_code": "active_history = self.parent_property.direction is not interfaces.MANYTOONE or not self.use_get,",
        "patch": "@@ -377,7 +377,7 @@ def init_class_attribute(self, mapper):\n                 callable_=self._class_level_loader,\n                 uselist = self.parent_property.uselist,\n                 typecallable = self.parent_property.collection_class,\n-                active_history = not self.use_get, \n+                active_history = self.parent_property.direction is not interfaces.MANYTOONE or not self.use_get,\n                 )\n \n     def lazy_clause(self, state, reverse_direction=False, alias_secondary=False, adapt_source=None):"
    },
    {
        "commit_id": "c03b434104368b1c025f45987d7a3fa8048d5e37",
        "commit_message": "- Fixed bug in 0.6-reworked \"many-to-one\" optimizations\nsuch that a many-to-one that is against a non-primary key\ncolumn on the remote table (i.e. foreign key against a\nUNIQUE column) will pull the \"old\" value in from the\ndatabase during a change, since if it's in the session\nwe will need it for proper history/backref accounting,\nand we can't pull from the local identity map on a\nnon-primary key column. [ticket:1737] (test is pending)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c03b434104368b1c025f45987d7a3fa8048d5e37",
        "buggy_code": "active_history = self.parent_property.direction is not interfaces.MANYTOONE,",
        "fixed_code": "active_history = not self.use_get,",
        "patch": "@@ -377,7 +377,7 @@ def init_class_attribute(self, mapper):\n                 callable_=self._class_level_loader,\n                 uselist = self.parent_property.uselist,\n                 typecallable = self.parent_property.collection_class,\n-                active_history = self.parent_property.direction is not interfaces.MANYTOONE, \n+                active_history = not self.use_get, \n                 )\n \n     def lazy_clause(self, state, reverse_direction=False, alias_secondary=False, adapt_source=None):"
    },
    {
        "commit_id": "0b78ef9e7a0292f78ef06ff36202e78e4a3f5981",
        "commit_message": "fix extending of a tuple",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0b78ef9e7a0292f78ef06ff36202e78e4a3f5981",
        "buggy_code": "insert2_params.append(ReturningParam(12))",
        "fixed_code": "insert2_params += (ReturningParam(12),)",
        "patch": "@@ -189,7 +189,7 @@ def assert_stmts(expected, received):\n                 insert2_params = (6, 'Foo')\n                 if testing.against('oracle+zxjdbc'):\n                     from sqlalchemy.dialects.oracle.zxjdbc import ReturningParam\n-                    insert2_params.append(ReturningParam(12))\n+                    insert2_params += (ReturningParam(12),)\n                 cursor = [\n                     (\"CREATE TABLE t1\", {}, ()),\n                     (\"INSERT INTO t1 (c1, c2)\", {'c2': 'some data', 'c1': 5}, (5, 'some data')),"
    },
    {
        "commit_id": "47f7b6f68e42d9157bbb88dc519f8a9875bef88f",
        "commit_message": "fix this test for oracle so all types return datetime.date",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/47f7b6f68e42d9157bbb88dc519f8a9875bef88f",
        "buggy_code": "type = DATE()",
        "fixed_code": "type = Date()",
        "patch": "@@ -200,7 +200,7 @@ def test_conn_execute(self):\n         from sqlalchemy.ext.compiler import compiles\n         \n         class myfunc(FunctionElement):\n-            type = DATE()\n+            type = Date()\n         \n         @compiles(myfunc)\n         def compile(elem, compiler, **kw):"
    },
    {
        "commit_id": "649d1f11c3d62ca0fe5024a036afe09a594c40ba",
        "commit_message": "fix last commit",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/649d1f11c3d62ca0fe5024a036afe09a594c40ba",
        "buggy_code": "cursor.execute(select([1], bind=testing.db))",
        "fixed_code": "cursor.execute(str(select([1], bind=testing.db)))",
        "patch": "@@ -77,7 +77,7 @@ def testnonthreadlocalmanager(self):\n     def test_cursor_iterable(self):\n         conn = testing.db.raw_connection()\n         cursor = conn.cursor()\n-        cursor.execute(select([1], bind=testing.db))\n+        cursor.execute(str(select([1], bind=testing.db)))\n         expected = [(1,)]\n         for row in cursor:\n             eq_(row, expected.pop(0))"
    },
    {
        "commit_id": "c6dd43b25245a4e6cd184995357e97a0a8a1dbe7",
        "commit_message": "Found another float / Decimal issue that needs to be changed to be consistent on Python2/3.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c6dd43b25245a4e6cd184995357e97a0a8a1dbe7",
        "buggy_code": "eq_(round(avg, 1), 14.5)",
        "fixed_code": "eq_(float(round(avg, 1)), 14.5)",
        "patch": "@@ -93,7 +93,7 @@ def test_aggregate_1(self):\n     def test_aggregate_2(self):\n         query = create_session().query(func.avg(foo.c.bar))\n         avg = query.filter(foo.c.bar < 30).one()[0]\n-        eq_(round(avg, 1), 14.5)\n+        eq_(float(round(avg, 1)), 14.5)\n \n     @testing.fails_on('mssql', 'AVG produces an average as the original column type on mssql.')\n     @testing.resolve_artifact_names"
    },
    {
        "commit_id": "1f7e0c069c68f60254424081bd184d2955a3b25a",
        "commit_message": "- Fixed cascade bug in many-to-one relation() when attribute\nwas set to None, introduced in r6711 (cascade deleted\nitems into session during add()).",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1f7e0c069c68f60254424081bd184d2955a3b25a",
        "buggy_code": "'save-update', state, halt_on=lambda c:c in self):",
        "fixed_code": "'save-update', state, halt_on=self.__contains__):",
        "patch": "@@ -1051,7 +1051,7 @@ def _save_or_update_state(self, state):\n \n     def _cascade_save_or_update(self, state):\n         for state, mapper in _cascade_unknown_state_iterator(\n-                                    'save-update', state, halt_on=lambda c:c in self):\n+                                    'save-update', state, halt_on=self.__contains__):\n             self._save_or_update_impl(state)\n \n     def delete(self, instance):"
    },
    {
        "commit_id": "e0215c12d70cbef200db98e4179797625aac1f49",
        "commit_message": "2.4 fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e0215c12d70cbef200db98e4179797625aac1f49",
        "buggy_code": "@profiling.function_call_count(95, variance=0.001)",
        "fixed_code": "@profiling.function_call_count(95, variance=0.001, versions={'2.4':67})",
        "patch": "@@ -58,7 +58,7 @@ def test_merge_no_load(self):\n         # down from 185 on this\n         # this is a small slice of a usually bigger\n         # operation so using a small variance\n-        @profiling.function_call_count(95, variance=0.001)\n+        @profiling.function_call_count(95, variance=0.001, versions={'2.4':67})\n         def go():\n             return sess2.merge(p1, load=False)\n             "
    },
    {
        "commit_id": "e38b11928a4d0902dde5c45e0df99565df85d6ba",
        "commit_message": "Fixed bug in session.merge() blocking dict-like collections from merging.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e38b11928a4d0902dde5c45e0df99565df85d6ba",
        "buggy_code": "@profiling.function_call_count(87, variance=0.001)",
        "fixed_code": "@profiling.function_call_count(91, variance=0.001)",
        "patch": "@@ -58,7 +58,7 @@ def test_merge_no_load(self):\n         # down from 185 on this\n         # this is a small slice of a usually bigger\n         # operation so using a small variance\n-        @profiling.function_call_count(87, variance=0.001)\n+        @profiling.function_call_count(91, variance=0.001)\n         def go():\n             return sess2.merge(p1, load=False)\n             "
    },
    {
        "commit_id": "342265ec3eff16fc2723f8e904a9cc7e1b12f943",
        "commit_message": "fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/342265ec3eff16fc2723f8e904a9cc7e1b12f943",
        "buggy_code": "super(MSSQLDialect_pymssql, self).__init__(**params)",
        "fixed_code": "super(MSDialect_pymssql, self).__init__(**params)",
        "patch": "@@ -22,7 +22,7 @@ def dbapi(cls):\n         return module\n \n     def __init__(self, **params):\n-        super(MSSQLDialect_pymssql, self).__init__(**params)\n+        super(MSDialect_pymssql, self).__init__(**params)\n         self.use_scope_identity = True\n \n "
    },
    {
        "commit_id": "463f73f80dcc3a35d9b4fe114445aa41bc2e933b",
        "commit_message": "fix ResultProxy for SQLite truncated names",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/463f73f80dcc3a35d9b4fe114445aa41bc2e933b",
        "buggy_code": "colfuncs[name.lower()] = (self._ambiguous_processor(origname), i, \"ambiguous\")",
        "fixed_code": "colfuncs[origname.lower()] = (self._ambiguous_processor(origname), i, \"ambiguous\")",
        "patch": "@@ -1731,7 +1731,7 @@ def getcol(row):\n             # store the \"origname\" if we truncated (sqlite only)\n             if origname and \\\n                     colfuncs.setdefault(origname.lower(), rec) is not rec:\n-                colfuncs[name.lower()] = (self._ambiguous_processor(origname), i, \"ambiguous\")\n+                colfuncs[origname.lower()] = (self._ambiguous_processor(origname), i, \"ambiguous\")\n             \n             if dialect.requires_name_normalize:\n                 colname = dialect.normalize_name(colname)"
    },
    {
        "commit_id": "f07297e82d56d3ea155578ecff9cdae691b95de5",
        "commit_message": "- fix mysqlconnector import\n- mysqlconnector returns get_server_version() as a tuple-ready structure",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f07297e82d56d3ea155578ecff9cdae691b95de5",
        "buggy_code": "from sqlalchemy.dialects.mysql import base, mysqldb, oursql, pyodbc, zxjdbc, myconnpy",
        "fixed_code": "from sqlalchemy.dialects.mysql import base, mysqldb, oursql, pyodbc, zxjdbc, mysqlconnector",
        "patch": "@@ -1,4 +1,4 @@\n-from sqlalchemy.dialects.mysql import base, mysqldb, oursql, pyodbc, zxjdbc, myconnpy\n+from sqlalchemy.dialects.mysql import base, mysqldb, oursql, pyodbc, zxjdbc, mysqlconnector\n \n # default dialect\n base.dialect = mysqldb.dialect"
    },
    {
        "commit_id": "b9657c763a88921ab456992f061a52b4fe08deb2",
        "commit_message": "- Fixed bug preventing alias() of an alias() from being\ncloned or adapted (occurs frequently in ORM operations).\n[ticket:1641]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b9657c763a88921ab456992f061a52b4fe08deb2",
        "buggy_code": "baseselectable = baseselectable.selectable",
        "fixed_code": "baseselectable = baseselectable.element",
        "patch": "@@ -2819,7 +2819,7 @@ def _copy_internals(self, clone=_clone):\n         self.element = _clone(self.element)\n         baseselectable = self.element\n         while isinstance(baseselectable, Alias):\n-            baseselectable = baseselectable.selectable\n+            baseselectable = baseselectable.element\n         self.original = baseselectable\n \n     def get_children(self, column_collections=True, aliased_selectables=True, **kwargs):"
    },
    {
        "commit_id": "180569992337435140549c71d67cd1b0729d89e7",
        "commit_message": "- merge r6549 of 0.5 branch\n- Fixed bug in query.update() when passing Cls.attribute\nas keys in the value dict and using synchronize_session='expire'\n('fetch' in 0.6). [ticket:1436]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/180569992337435140549c71d67cd1b0729d89e7",
        "buggy_code": "session.expire(session.identity_map[identity_key], values.keys())",
        "fixed_code": "session.expire(session.identity_map[identity_key], [expression._column_as_key(k) for k in values])",
        "patch": "@@ -1778,7 +1778,7 @@ def update(self, values, synchronize_session='evaluate'):\n             for primary_key in matched_rows:\n                 identity_key = target_mapper.identity_key_from_primary_key(list(primary_key))\n                 if identity_key in session.identity_map:\n-                    session.expire(session.identity_map[identity_key], values.keys())\n+                    session.expire(session.identity_map[identity_key], [expression._column_as_key(k) for k in values])\n \n         for ext in session.extensions:\n             ext.after_bulk_update(session, self, context, result)"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -101,7 +101,7 @@ def process(value):\n                 return value\n         return process\n         \n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         def process(value):\n             if value is not None:\n                 return PersistentGisElement(value)"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -124,7 +124,7 @@\n \n \n class _FBBoolean(sqltypes.Boolean):\n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         def process(value):\n             if value is None:\n                 return None"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -3,7 +3,7 @@\n import sys\n \n class MSDateTime_adodbapi(MSDateTime):\n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         def process(value):\n             # adodbapi will return datetimes with empty time values as datetime.date() objects.\n             # Promote them back to full datetime.datetime()"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -48,7 +48,7 @@ def post_process_text(self, text):\n \n \n class _DecimalType(_NumericType):\n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         if self.asdecimal:\n             return\n         def process(value):"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -23,7 +23,7 @@\n from sqlalchemy.dialects.mysql.base import BIT, MySQLDialect, MySQLExecutionContext\n \n class _ZxJDBCBit(BIT):\n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         \"\"\"Converts boolean or byte arrays from MySQL Connector/J to longs.\"\"\"\n         def process(value):\n             if value is None:"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -159,7 +159,7 @@ class _OracleBoolean(sqltypes.Boolean):\n     def get_dbapi_type(self, dbapi):\n         return dbapi.NUMBER\n     \n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         def process(value):\n             if value is None:\n                 return None"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -17,7 +17,7 @@ class PGNumeric(sqltypes.Numeric):\n     def bind_processor(self, dialect):\n         return None\n \n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         if self.asdecimal:\n             return None\n         else:"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "def result_processor(self, dialect):",
        "fixed_code": "def result_processor(self, dialect, coltype):",
        "patch": "@@ -113,7 +113,7 @@ class SybaseUniqueIdentifier(sqltypes.TypeEngine):\n     __visit_name__ = \"UNIQUEIDENTIFIER\"\n     \n class SybaseBoolean(sqltypes.Boolean):\n-    def result_processor(self, dialect):\n+    def result_processor(self, dialect, coltype):\n         def process(value):\n             if value is None:\n                 return None"
    },
    {
        "commit_id": "5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "commit_message": "- pg8000 + postgresql dialects now check for float/numeric return\ntypes to more intelligently determine float() vs. Decimal(),\n[ticket:1567]\n- since result processing is a hot issue of late, the DBAPI type\nreturned from cursor.description is certainly useful in cases like\nthese to determine an efficient result processor.   There's likely\nother result processors that can make use of it.  But, backwards\nincompat change to result_processor().  Happy major version number..",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5f6ed1a3f8bb0b2a724c7f07b98936433a3ef053",
        "buggy_code": "rp = sldt.result_processor(None)",
        "fixed_code": "rp = sldt.result_processor(None, None)",
        "patch": "@@ -43,7 +43,7 @@ def test_time_microseconds(self):\n         bp = sldt.bind_processor(None)\n         eq_(bp(dt), '2008-06-27 12:00:00.000125')\n         \n-        rp = sldt.result_processor(None)\n+        rp = sldt.result_processor(None, None)\n         eq_(rp(bp(dt)), dt)\n         \n         sldt.__legacy_microseconds__ = True"
    },
    {
        "commit_id": "cac9f6b3bb2bffea34c9371451cd070eb5d45a56",
        "commit_message": "fix MySQL initialize to use defaultdialect first",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cac9f6b3bb2bffea34c9371451cd070eb5d45a56",
        "buggy_code": "self.server_version_info = self._get_server_version_info(connection)",
        "fixed_code": "default.DefaultDialect.initialize(self, connection)",
        "patch": "@@ -1783,7 +1783,7 @@ def has_table(self, connection, table_name, schema=None):\n                 rs.close()\n     \n     def initialize(self, connection):\n-        self.server_version_info = self._get_server_version_info(connection)\n+        default.DefaultDialect.initialize(self, connection)\n         self._connection_charset = self._detect_charset(connection)\n         self._server_casing = self._detect_casing(connection)\n         self._server_collations = self._detect_collations(connection)"
    },
    {
        "commit_id": "7b457b973102c8fe7c3105d5984f48a3265a5168",
        "commit_message": "merged r6416 of 0.5 branch, fix the \"numeric\" paramstyle and add tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7b457b973102c8fe7c3105d5984f48a3265a5168",
        "buggy_code": "'numeric':\"%(position)s\",",
        "fixed_code": "'numeric':\":%(position)s\",",
        "patch": "@@ -56,7 +56,7 @@\n     'pyformat':\"%%(%(name)s)s\",\n     'qmark':\"?\",\n     'format':\"%%s\",\n-    'numeric':\"%(position)s\",\n+    'numeric':\":%(position)s\",\n     'named':\":%(name)s\"\n }\n "
    },
    {
        "commit_id": "31f26e561cc1aeb3475e6e662839b07a60412c36",
        "commit_message": "- Fixed bug which disallowed one side of a many-to-many\nbidirectional reference to declare itself as \"viewonly\"\n[ticket:1507]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/31f26e561cc1aeb3475e6e662839b07a60412c36",
        "buggy_code": "if (r._dependency_processor, action, parent, child) in uowcommit.attributes:",
        "fixed_code": "if not r.viewonly and (r._dependency_processor, action, parent, child) in uowcommit.attributes:",
        "patch": "@@ -140,7 +140,7 @@ def _check_reverse_action(self, uowcommit, parent, child, action):\n         \n         \"\"\"\n         for r in self.prop._reverse_property:\n-            if (r._dependency_processor, action, parent, child) in uowcommit.attributes:\n+            if not r.viewonly and (r._dependency_processor, action, parent, child) in uowcommit.attributes:\n                 return True\n         return False\n     "
    },
    {
        "commit_id": "aa73243fdeabbbbe0390222a96de8454839b5cf3",
        "commit_message": "- Fixed the error message for \"could not find a FROM clause\"\nin query.join() which would fail to issue correctly\nif the query was against a pure SQL construct.\n[ticket:1522]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/aa73243fdeabbbbe0390222a96de8454839b5cf3",
        "buggy_code": "if not clause:",
        "fixed_code": "if not clause and left_entity:",
        "patch": "@@ -1036,7 +1036,7 @@ def _join(self, keys, outerjoin, create_aliases, from_joinpoint):\n                 if not clause:\n                     clause = left_selectable\n                     \n-            if not clause:\n+            if not clause and left_entity:\n                 for ent in self._entities:\n                     if ent.corresponds_to(left_entity):\n                         clause = ent.selectable"
    },
    {
        "commit_id": "358ab55c311a823c241a5ae87806cb2607e5e1f1",
        "commit_message": "- Fixed recursion issue which occured if a mapped object's\n`__len__()` or `__nonzero__()` method resulted in state\nchanges.  [ticket:1501]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/358ab55c311a823c241a5ae87806cb2607e5e1f1",
        "buggy_code": "if not self._strong_obj:",
        "fixed_code": "if self._strong_obj is None:",
        "patch": "@@ -289,7 +289,7 @@ def modified_event(self, dict_, attr, should_copy, previous, passive=PASSIVE_OFF\n                 instance_dict._modified.add(self)\n \n         self.modified = True\n-        if not self._strong_obj:\n+        if self._strong_obj is None:\n             self._strong_obj = self.obj()\n \n     def commit(self, dict_, keys):"
    },
    {
        "commit_id": "a6b56237feb91a62c6515b6e8aff6fd581dc9794",
        "commit_message": "fix, comes back funky on PG reflection",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a6b56237feb91a62c6515b6e8aff6fd581dc9794",
        "buggy_code": "assert str(table_c.c.foo.server_default.arg) == 'x'",
        "fixed_code": "assert 'x' in str(table_c.c.foo.server_default.arg)",
        "patch": "@@ -94,7 +94,7 @@ def test_pickle_via_reflect():\n                 assert table.primary_key is not table_c.primary_key\n                 assert list(table2_c.c.myid.foreign_keys)[0].column is table_c.c.myid\n                 assert list(table2_c.c.myid.foreign_keys)[0].column is not table.c.myid\n-                assert str(table_c.c.foo.server_default.arg) == 'x'\n+                assert 'x' in str(table_c.c.foo.server_default.arg)\n                 \n                 if not reflect:\n                     assert str(table_c.c.foo.server_onupdate.arg) == 'q'"
    },
    {
        "commit_id": "a7499ddfc0c9c07830b08863918c21bf5e984997",
        "commit_message": "fix up oracle tests, returning is on by default",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a7499ddfc0c9c07830b08863918c21bf5e984997",
        "buggy_code": "columns = [self.process(c, within_columns_clause=False) for c in columnlist]",
        "fixed_code": "columns = [self.process(c, within_columns_clause=False, result_map=self.result_map) for c in columnlist]",
        "patch": "@@ -318,7 +318,7 @@ def create_out_param(col, i):\n         columnlist = list(expression._select_iterables(returning_cols))\n         \n         # within_columns_clause =False so that labels (foo AS bar) don't render\n-        columns = [self.process(c, within_columns_clause=False) for c in columnlist]\n+        columns = [self.process(c, within_columns_clause=False, result_map=self.result_map) for c in columnlist]\n         \n         binds = [create_out_param(c, i) for i, c in enumerate(columnlist)]\n         "
    },
    {
        "commit_id": "328e2647bea7d124a8033897791f365883e3e8d9",
        "commit_message": "fix some profiles for 2.4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/328e2647bea7d124a8033897791f365883e3e8d9",
        "buggy_code": "@profiling.function_call_count(72, {'2.4': 42, '3.0':77})",
        "fixed_code": "@profiling.function_call_count(72, {'2.4': 45, '3.0':77})",
        "patch": "@@ -15,7 +15,7 @@ def setup_class(cls):\n             Column('c1', Integer, primary_key=True),\n             Column('c2', String(30)))\n \n-    @profiling.function_call_count(72, {'2.4': 42, '3.0':77})\n+    @profiling.function_call_count(72, {'2.4': 45, '3.0':77})\n     def test_insert(self):\n         t1.insert().compile()\n "
    },
    {
        "commit_id": "328e2647bea7d124a8033897791f365883e3e8d9",
        "commit_message": "fix some profiles for 2.4",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/328e2647bea7d124a8033897791f365883e3e8d9",
        "buggy_code": "@profiling.function_call_count(54, {'2.4': 38, '3.0':57})",
        "fixed_code": "@profiling.function_call_count(54, {'2.4': 36, '3.0':57})",
        "patch": "@@ -18,7 +18,7 @@ def setup(self):\n                          use_threadlocal=True)\n \n \n-    @profiling.function_call_count(54, {'2.4': 38, '3.0':57})\n+    @profiling.function_call_count(54, {'2.4': 36, '3.0':57})\n     def test_first_connect(self):\n         conn = pool.connect()\n "
    },
    {
        "commit_id": "cfa1a42328b406d0f494672f0b268890471d6d2e",
        "commit_message": "fix non2.4 gremlin",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cfa1a42328b406d0f494672f0b268890471d6d2e",
        "buggy_code": "\" CASCADE\" if drop.cascade else \"\"",
        "fixed_code": "drop.cascade and \" CASCADE\" or \"\"",
        "patch": "@@ -1006,7 +1006,7 @@ def visit_drop_constraint(self, drop):\n         return \"ALTER TABLE %s DROP CONSTRAINT %s%s\" % (\n             self.preparer.format_table(drop.element.table),\n             self.preparer.format_constraint(drop.element),\n-            \" CASCADE\" if drop.cascade else \"\"\n+            drop.cascade and \" CASCADE\" or \"\"\n         )\n     \n     def get_column_specification(self, column, **kwargs):"
    },
    {
        "commit_id": "b303eb9342a2bd697eda4c64a939249cd559ba67",
        "commit_message": "merged [ticket:1486] fix from 0.6",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b303eb9342a2bd697eda4c64a939249cd559ba67",
        "buggy_code": "for fk in col.foreign_keys:",
        "fixed_code": "for fk in chain(*[c.foreign_keys for c in col.proxy_set]):",
        "patch": "@@ -298,7 +298,7 @@ def reduce_columns(columns, *clauses, **kw):\n \n     omit = util.column_set()\n     for col in columns:\n-        for fk in col.foreign_keys:\n+        for fk in chain(*[c.foreign_keys for c in col.proxy_set]):\n             for c in columns:\n                 if c is col:\n                     continue"
    },
    {
        "commit_id": "f300bb43dedd54a81f5bd72fd9afad1c2bb39ede",
        "commit_message": "- Fixed bug whereby inheritance discriminator part of a\ncomposite primary key would fail on updates.\nContinuation of [ticket:1300].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f300bb43dedd54a81f5bd72fd9afad1c2bb39ede",
        "buggy_code": "elif mapper.polymorphic_on and mapper.polymorphic_on.shares_lineage(col):",
        "fixed_code": "elif mapper.polymorphic_on and mapper.polymorphic_on.shares_lineage(col) and col not in pks:",
        "patch": "@@ -1328,7 +1328,7 @@ def _save_obj(self, states, uowtransaction, postupdate=False, post_update_cols=N\n                                 history = attributes.get_state_history(state, prop.key, passive=True)\n                                 if history.added:\n                                     hasdata = True\n-                        elif mapper.polymorphic_on and mapper.polymorphic_on.shares_lineage(col):\n+                        elif mapper.polymorphic_on and mapper.polymorphic_on.shares_lineage(col) and col not in pks:\n                             pass\n                         else:\n                             if post_update_cols is not None and col not in post_update_cols:"
    },
    {
        "commit_id": "5045bf4f4bae769743bc3bef4ec85453caf0fa41",
        "commit_message": "- Fixed a bug involving contains_eager(), which would apply itself\nto a secondary (i.e. lazy) load in a particular rare case,\nproducing cartesian products.   improved the targeting\nof query.options() on secondary loads overall [ticket:1461].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5045bf4f4bae769743bc3bef4ec85453caf0fa41",
        "buggy_code": "return (strategies.EagerLazyOption(keys, lazy=False), strategies.LoadEagerFromAliasOption(keys, alias=alias))",
        "fixed_code": "return (strategies.EagerLazyOption(keys, lazy=False, _only_on_lead=True), strategies.LoadEagerFromAliasOption(keys, alias=alias))",
        "patch": "@@ -934,7 +934,7 @@ def contains_eager(*keys, **kwargs):\n     if kwargs:\n         raise exceptions.ArgumentError(\"Invalid kwargs for contains_eager: %r\" % kwargs.keys())\n \n-    return (strategies.EagerLazyOption(keys, lazy=False), strategies.LoadEagerFromAliasOption(keys, alias=alias))\n+    return (strategies.EagerLazyOption(keys, lazy=False, _only_on_lead=True), strategies.LoadEagerFromAliasOption(keys, alias=alias))\n \n @sa_util.accepts_a_list_as_starargs(list_deprecation='pending')\n def defer(*keys):"
    },
    {
        "commit_id": "5ea1d673151a2a94b41d3131345464dfddaea95b",
        "commit_message": "- sql\n    - Removed an obscure feature of execute() (including connection,\n      engine, Session) whereby a bindparam() construct can be sent as\n      a key to the params dictionary.  This usage is undocumented\n      and is at the core of an issue whereby the bindparam() object\n      created implicitly by a text() construct may have the same\n      hash value as a string placed in the params dictionary and\n      may result in an inappropriate match when computing the final\n      bind parameters.   Internal checks for this condition would\n      add significant latency to the critical task of parameter\n      rendering, so the behavior is removed.  This is a backwards\n      incompatible change for any application that may have been\n      using this feature, however the feature has never been\n      documented.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5ea1d673151a2a94b41d3131345464dfddaea95b",
        "buggy_code": "for paramname in (bindparam, bindparam.key, bindparam.shortname, name):",
        "fixed_code": "for paramname in (bindparam.key, bindparam.shortname, name):",
        "patch": "@@ -226,7 +226,7 @@ def construct_params(self, params=None):\n             params = util.column_dict(params)\n             pd = {}\n             for bindparam, name in self.bind_names.iteritems():\n-                for paramname in (bindparam, bindparam.key, bindparam.shortname, name):\n+                for paramname in (bindparam.key, bindparam.shortname, name):\n                     if paramname in params:\n                         pd[name] = params[paramname]\n                         break"
    },
    {
        "commit_id": "fe3902771f51dea078bbee986e984c399aae2468",
        "commit_message": "- Fixed bug introduced in 0.5.4 whereby Composite types\nfail when default-holding columns are flushed.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fe3902771f51dea078bbee986e984c399aae2468",
        "buggy_code": "__version__ = '0.5.4p2'",
        "fixed_code": "__version__ = '0.5.4p3'",
        "patch": "@@ -107,6 +107,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n                  \n-__version__ = '0.5.4p2'\n+__version__ = '0.5.4p3'\n \n del inspect, sys"
    },
    {
        "commit_id": "fe3902771f51dea078bbee986e984c399aae2468",
        "commit_message": "- Fixed bug introduced in 0.5.4 whereby Composite types\nfail when default-holding columns are flushed.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fe3902771f51dea078bbee986e984c399aae2468",
        "buggy_code": "state.get_impl(self.key).set(state, obj, None)",
        "fixed_code": "state.get_impl(self.key).set(state, state.dict, obj, None)",
        "patch": "@@ -171,7 +171,7 @@ def setattr(self, state, value, column):\n         obj = state.get_impl(self.key).get(state, state.dict)\n         if obj is None:\n             obj = self.composite_class(*[None for c in self.columns])\n-            state.get_impl(self.key).set(state, obj, None)\n+            state.get_impl(self.key).set(state, state.dict, obj, None)\n \n         if hasattr(obj, '__set_composite_values__'):\n             values = list(obj.__composite_values__())"
    },
    {
        "commit_id": "7ff23a5218e05ae7e543e31f18b1a3fbe650e4cb",
        "commit_message": "- Fixed an attribute error introduced in 0.5.4 which would\noccur when merge() was used with an incomplete object.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7ff23a5218e05ae7e543e31f18b1a3fbe650e4cb",
        "buggy_code": "__version__ = '0.5.4'",
        "fixed_code": "__version__ = '0.5.4p1'",
        "patch": "@@ -107,6 +107,6 @@\n __all__ = sorted(name for name, obj in locals().items()\n                  if not (name.startswith('_') or inspect.ismodule(obj)))\n                  \n-__version__ = '0.5.4'\n+__version__ = '0.5.4p1'\n \n del inspect, sys"
    },
    {
        "commit_id": "7ff23a5218e05ae7e543e31f18b1a3fbe650e4cb",
        "commit_message": "- Fixed an attribute error introduced in 0.5.4 which would\noccur when merge() was used with an incomplete object.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7ff23a5218e05ae7e543e31f18b1a3fbe650e4cb",
        "buggy_code": "return self.get(state, passive=passive)",
        "fixed_code": "return self.get(state, dict_, passive=passive)",
        "patch": "@@ -376,7 +376,7 @@ def get(self, state, dict_, passive=PASSIVE_OFF):\n                         return self.set_committed_value(state, dict_, value)\n                     else:\n                         if self.key not in dict_:\n-                            return self.get(state, passive=passive)\n+                            return self.get(state, dict_, passive=passive)\n                         return dict_[self.key]\n \n             # Return a new, empty value"
    },
    {
        "commit_id": "7af9d1c04b431a98c1e19dd234a00fb202283c0a",
        "commit_message": "- Fixed obscure mapper compilation issue when inheriting\nmappers are used which would result in un-initialized\nattributes.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7af9d1c04b431a98c1e19dd234a00fb202283c0a",
        "buggy_code": "if not prop._compile_started:",
        "fixed_code": "if prop.parent is self and not prop._compile_started:",
        "patch": "@@ -682,7 +682,7 @@ def _post_configure_properties(self):\n         for key, prop in l:\n             self._log(\"initialize prop \" + key)\n             \n-            if not prop._compile_started:\n+            if prop.parent is self and not prop._compile_started:\n                 prop.init()\n             \n             if prop._compile_finished:"
    },
    {
        "commit_id": "bef0bb95e7372d63684bddbb30b461de877ae4db",
        "commit_message": "fix formatting to match unit tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bef0bb95e7372d63684bddbb30b461de877ae4db",
        "buggy_code": "\" Did you mean to set remote_side on the many-to-one side ?\" % (self, other, self.direction))",
        "fixed_code": "\"  Did you mean to set remote_side on the many-to-one side ?\" % (self, other, self.direction))",
        "patch": "@@ -705,7 +705,7 @@ def _add_reverse_property(self, key):\n         \n         if self.direction in (ONETOMANY, MANYTOONE) and self.direction == other.direction:\n             raise sa_exc.ArgumentError(\"%s and back-reference %s are both of the same direction %r.\"\n-                \" Did you mean to set remote_side on the many-to-one side ?\" % (self, other, self.direction))\n+                \"  Did you mean to set remote_side on the many-to-one side ?\" % (self, other, self.direction))\n         \n     def do_init(self):\n         self._get_target()"
    },
    {
        "commit_id": "68ee348d36c7df8ccdaf57c3ca6da03e905590bc",
        "commit_message": "- a forward and complementing backwards reference which are both\nof the same direction, i.e. ONETOMANY or MANYTOONE,\nis now detected, and an error message is raised.\nSaves crazy CircularDependencyErrors later on.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/68ee348d36c7df8ccdaf57c3ca6da03e905590bc",
        "buggy_code": "'boss': relation(Manager, backref='peon')",
        "fixed_code": "'boss': relation(Manager, backref=backref('peon', ), remote_side=t.c.id)",
        "patch": "@@ -447,7 +447,7 @@ class Lala(object): pass\n                      include_properties=('id', 'type', 'name'))\n         e_m = mapper(Employee, inherits=p_m, polymorphic_identity='employee',\n           properties={\n-            'boss': relation(Manager, backref='peon')\n+            'boss': relation(Manager, backref=backref('peon', ), remote_side=t.c.id)\n           },\n           exclude_properties=('vendor_id',))\n "
    },
    {
        "commit_id": "f6718dc6d6dd2d03eabe443f6bb0f579f1103ac6",
        "commit_message": "fix serialize",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f6718dc6d6dd2d03eabe443f6bb0f579f1103ac6",
        "buggy_code": "d['_impl_dict'] = weakref.WeakKeyDictionary()   # will be optimized in 0.6",
        "fixed_code": "d.pop('_impl_dict', None)",
        "patch": "@@ -132,7 +132,7 @@ def dialect_impl(self, dialect, **kwargs):\n \n     def __getstate__(self):\n         d = self.__dict__.copy()\n-        d['_impl_dict'] = weakref.WeakKeyDictionary()   # will be optimized in 0.6\n+        d.pop('_impl_dict', None)\n         return d\n \n     def get_col_spec(self):"
    },
    {
        "commit_id": "7c56371f81707b5979249b2f2b056f65488f1bab",
        "commit_message": "- Further refined 0.5.1's warning about delete-orphan cascade\nplaced on a many-to-many relation.   First, the bad news:\nthe warning will apply to both many-to-many as well as\nmany-to-one relations.  This is necessary since in both\ncases, SQLA does not scan the full set of potential parents\nwhen determining \"orphan\" status - for a persistent object\nit only detects an in-python de-association event to establish\nthe object as an \"orphan\".  Next, the good news: to support\none-to-one via a foreign key or assocation table, or to\nsupport one-to-many via an association table, a new flag\nsingle_parent=True may be set which indicates objects\nlinked to the relation are only meant to have a single parent.\nThe relation will raise an error if multiple parent-association\nevents occur within Python.\n\n- Fixed bug in delete-orphan cascade whereby two one-to-one\nrelations from two different parent classes to the same target\nclass would prematurely expunge the instance.  This is\nan extension of the non-ticketed fix in r4247.\n\n- the order of \"sethasparent\" flagging in relation to\nAttributeExtensions has been refined such that false setparents\nare issued before the event, true setparents issued afterwards.\nevent handlers \"know\" that a remove event originates\nfrom a non-orphan but need to know if its become an orphan,\nand that append events will become non-orphans but need to know\nif the event originates from a non-orphan.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7c56371f81707b5979249b2f2b056f65488f1bab",
        "buggy_code": "'a':relation(A, cascade=cascade)",
        "fixed_code": "'a':relation(A, cascade=cascade, single_parent=True)",
        "patch": "@@ -452,7 +452,7 @@ def test_delete_cascade_BtoA(self):\n                         #\"save-update, delete-orphan\",\n                         \"save-update, delete, delete-orphan\"):\n             mapper(B, tableB, properties={\n-                'a':relation(A, cascade=cascade)\n+                'a':relation(A, cascade=cascade, single_parent=True)\n             })\n             mapper(A, tableA)\n "
    },
    {
        "commit_id": "2ab5b4f30c234e5301f827e335d57fa7e18896e8",
        "commit_message": "fix errant foreign key",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2ab5b4f30c234e5301f827e335d57fa7e18896e8",
        "buggy_code": "primary_language_id = Column(String(50), ForeignKey('languages.id'))",
        "fixed_code": "primary_language_id = Column(Integer, ForeignKey('languages.id'))",
        "patch": "@@ -1065,7 +1065,7 @@ class Person(Base, ComparableEntity):\n \n         class Engineer(Person):\n             __mapper_args__ = {'polymorphic_identity':'engineer'}\n-            primary_language_id = Column(String(50), ForeignKey('languages.id'))\n+            primary_language_id = Column(Integer, ForeignKey('languages.id'))\n             primary_language = relation(\"Language\")\n             \n         class Language(Base, ComparableEntity):"
    },
    {
        "commit_id": "fc46b9eb5bd1496c06a1a459ee07ce33fc3b7b52",
        "commit_message": "NotSupportedError is a DBAPI wrapper which takes four args and is expected to originate from the DBAPI layer.\nMoved those error throws to CompileError/InvalidRequestError.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc46b9eb5bd1496c06a1a459ee07ce33fc3b7b52",
        "buggy_code": "raise exc.NotSupportedError(",
        "fixed_code": "raise exc.CompileError(",
        "patch": "@@ -1585,7 +1585,7 @@ def visit_insert(self, insert_stmt):\n                               [self.process(x) for x in insert_stmt._prefixes])\n \n             if not colparams and not self.dialect.supports_default_values and not self.dialect.supports_empty_insert:\n-                raise exc.NotSupportedError(\n+                raise exc.CompileError(\n                     \"The version of %s you are using does not support empty inserts.\" % self.dialect.name)\n             elif not colparams and self.dialect.supports_default_values:\n                 return (insert + \" INTO %s DEFAULT VALUES\" % ("
    },
    {
        "commit_id": "fc46b9eb5bd1496c06a1a459ee07ce33fc3b7b52",
        "commit_message": "NotSupportedError is a DBAPI wrapper which takes four args and is expected to originate from the DBAPI layer.\nMoved those error throws to CompileError/InvalidRequestError.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fc46b9eb5bd1496c06a1a459ee07ce33fc3b7b52",
        "buggy_code": "raise exc.NotSupportedError(",
        "fixed_code": "raise exc.CompileError(",
        "patch": "@@ -599,7 +599,7 @@ def visit_insert(self, insert_stmt):\n                           [self.process(x) for x in insert_stmt._prefixes])\n \n         if not colparams and not self.dialect.supports_default_values and not self.dialect.supports_empty_insert:\n-            raise exc.NotSupportedError(\n+            raise exc.CompileError(\n                 \"The version of %s you are using does not support empty inserts.\" % self.dialect.name)\n         elif not colparams and self.dialect.supports_default_values:\n             return (insert + \" INTO %s DEFAULT VALUES\" % ("
    },
    {
        "commit_id": "209e888e1bda69924b364ae3394016acef0e9d41",
        "commit_message": "- Concrete inheriting mappers now instrument attributes which are inherited from the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute that issues a descriptive error when accessed.  [ticket:1237]\n- Added a new `relation()` keyword `back_populates`.  This allows configuation of backreferences using explicit relations. [ticket:781]  This is required when creating bidirectional relations between a hierarchy of concrete mappers and another class. [ticket:1237]\n- Test coverage added for `relation()` objects specified on concrete mappers. [ticket:1237]\n- A short documentation example added for bidirectional relations specified on concrete mappers. [ticket:1237]\n- Mappers now instrument class attributes upon construction with the final InstrumentedAttribute object which remains persistent.  The `_CompileOnAttr`/`__getattribute__()` methodology has been removed.  The net effect is that Column-based mapped class attributes can now be used fully at the class level without invoking a mapper compilation operation, greatly simplifying typical usage patterns within declarative. [ticket:1269]\n- Index now accepts column-oriented InstrumentedAttributes (i.e. column-based mapped class attributes) as column arguments.  [ticket:1214]\n- Broke up attributes.register_attribute into two separate functions register_descriptor and register_attribute_impl.    The first assembles an InstrumentedAttribute or Proxy descriptor, the second assembles the AttributeImpl inside the InstrumentedAttribute.  register_attribute remains for outside compatibility.  The argument lists have been simplified.\n- Removed class_manager argument from all but MutableScalarAttributeImpl (the branch had removed class_ as well but this has been reverted locally to support the serializer extension).\n- Mapper's previous construction of _CompileOnAttr now moves to a new MapperProperty.instrument_class() method which is called on all MapperProperty objects at the moment the mapper receives them. All MapperProperty objects now call attributes.register_descriptor within that method to assemble an InstrumentedAttribute object directly.\n- InstrumentedAttribute now receives the \"property\" attribute from the given PropComparator.  The guesswork within the constructor is removed, and allows \"property\" to serve as a mapper compilation trigger.\n- RelationProperty.Comparator now triggers compilation of its parent mapper within a util.memoized_property accessor for the \"property\" attribute, which is used instead of \"prop\" (we can probably remove \"prop\").\n- ColumnProperty and similar handle most of their initialization in their __init__ method since they must function fully at the class level before mappers are compiled.\n- SynonymProperty and ComparableProperty move their class instrumentation logic to the new instrument_class() method.\n- LoaderStrategy objects now add their state to existing InstrumentedAttributes using attributes.register_attribute_impl.  Both column and relation-based loaders instrument in the same way now, with a unique InstrumentedAttribute *and* a unique AttributeImpl for each class in the hierarchy.  attribute.parententity should now be correct in all cases.\n- Removed unitofwork.register_attribute, and simpified the _register_attribute methods into a single function in strategies.py.  unitofwork exports the UOWEventHandler extension directly.\n- To accomodate the multiple AttributeImpls across a class hierarchy, the sethasparent() method now uses an optional \"parent_token\" attribute to identify the \"parent\".  AbstractRelationLoader sends the MapperProperty along to serve as this token.  If the token isn't present (which is only the case in the attributes unit tests), the AttributeImpl is used instead, which is essentially the same as the old behavior.\n- Added new ConcreteInheritedProperty MapperProperty.  This is invoked for concrete mappers within _adapt_inherited_property() to accomodate concrete mappers which inherit unhandled attributes from the base class, and basically raises an exception upon access.  [ticket:1237]\n- attributes.register_attribute and register_descriptor will now re-instrument an attribute unconditionally without checking for a previous attribute.  Not sure if this is controversial. It's needed so that ConcreteInheritedProperty instrumentation can be overridden by an incoming legit MapperProperty without any complexity.\n- Added new UninstrumentedColumnLoader LoaderStrategy.  This is used by the polymorphic_on argument when the given column is not represented within the mapped selectable, as is typical with a concrete scenario which maps to a polymorphic union.  It does not configure class instrumentation, keeping polymorphic_on from getting caught up in the new concrete attribute-checking logic.\n- RelationProperty now records its \"backref\" attributes using a set assigned to `_reverse_property` instead of a scalar.  The `back_populates` keyword allows any number of properties to be involved in a single bidirectional relation.  Changes were needed to RelationProperty.merge(), DependencyProcessor to accomodate for the new multiple nature of this attribute.\n- Generalized the methodology used by ManyToManyDP to check for \"did the other dependency already handle this direction\", building on the `_reverse_property` collection.\n- post_update logic within dependency.py moves to use the same methodology as ManyToManyDP so that \"did the other dependency do this already\" checks are made to be specific to the two dependent instances.\n- Caught that RelationProperty.merge() was writing to instance.__dict__ directly (!) - repaired to talk to instance_state.dict.\n- Removed needless eager loading example from concrete mapper docs.\n- Added test for [ticket:965].\n- Added the usual Node class/nodes table to orm/_fixtures.py, but haven't used it for anything yet.   We can potentially update test/orm/query.py to use this fixture.\n- Other test/documentation cleanup.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/209e888e1bda69924b364ae3394016acef0e9d41",
        "buggy_code": "class_mapper(cls)._compile_property(propname, relation(*args, **kwargs))",
        "fixed_code": "class_mapper(cls)._configure_property(propname, relation(*args, **kwargs))",
        "patch": "@@ -419,7 +419,7 @@ def update(cls, whereclause=None, values=None, **kwargs):\n         cls._table.update(whereclause, values).execute(**kwargs)\n \n     def relate(cls, propname, *args, **kwargs):\n-        class_mapper(cls)._compile_property(propname, relation(*args, **kwargs))\n+        class_mapper(cls)._configure_property(propname, relation(*args, **kwargs))\n \n def _is_outer_join(selectable):\n     if not isinstance(selectable, sql.Join):"
    },
    {
        "commit_id": "209e888e1bda69924b364ae3394016acef0e9d41",
        "commit_message": "- Concrete inheriting mappers now instrument attributes which are inherited from the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute that issues a descriptive error when accessed.  [ticket:1237]\n- Added a new `relation()` keyword `back_populates`.  This allows configuation of backreferences using explicit relations. [ticket:781]  This is required when creating bidirectional relations between a hierarchy of concrete mappers and another class. [ticket:1237]\n- Test coverage added for `relation()` objects specified on concrete mappers. [ticket:1237]\n- A short documentation example added for bidirectional relations specified on concrete mappers. [ticket:1237]\n- Mappers now instrument class attributes upon construction with the final InstrumentedAttribute object which remains persistent.  The `_CompileOnAttr`/`__getattribute__()` methodology has been removed.  The net effect is that Column-based mapped class attributes can now be used fully at the class level without invoking a mapper compilation operation, greatly simplifying typical usage patterns within declarative. [ticket:1269]\n- Index now accepts column-oriented InstrumentedAttributes (i.e. column-based mapped class attributes) as column arguments.  [ticket:1214]\n- Broke up attributes.register_attribute into two separate functions register_descriptor and register_attribute_impl.    The first assembles an InstrumentedAttribute or Proxy descriptor, the second assembles the AttributeImpl inside the InstrumentedAttribute.  register_attribute remains for outside compatibility.  The argument lists have been simplified.\n- Removed class_manager argument from all but MutableScalarAttributeImpl (the branch had removed class_ as well but this has been reverted locally to support the serializer extension).\n- Mapper's previous construction of _CompileOnAttr now moves to a new MapperProperty.instrument_class() method which is called on all MapperProperty objects at the moment the mapper receives them. All MapperProperty objects now call attributes.register_descriptor within that method to assemble an InstrumentedAttribute object directly.\n- InstrumentedAttribute now receives the \"property\" attribute from the given PropComparator.  The guesswork within the constructor is removed, and allows \"property\" to serve as a mapper compilation trigger.\n- RelationProperty.Comparator now triggers compilation of its parent mapper within a util.memoized_property accessor for the \"property\" attribute, which is used instead of \"prop\" (we can probably remove \"prop\").\n- ColumnProperty and similar handle most of their initialization in their __init__ method since they must function fully at the class level before mappers are compiled.\n- SynonymProperty and ComparableProperty move their class instrumentation logic to the new instrument_class() method.\n- LoaderStrategy objects now add their state to existing InstrumentedAttributes using attributes.register_attribute_impl.  Both column and relation-based loaders instrument in the same way now, with a unique InstrumentedAttribute *and* a unique AttributeImpl for each class in the hierarchy.  attribute.parententity should now be correct in all cases.\n- Removed unitofwork.register_attribute, and simpified the _register_attribute methods into a single function in strategies.py.  unitofwork exports the UOWEventHandler extension directly.\n- To accomodate the multiple AttributeImpls across a class hierarchy, the sethasparent() method now uses an optional \"parent_token\" attribute to identify the \"parent\".  AbstractRelationLoader sends the MapperProperty along to serve as this token.  If the token isn't present (which is only the case in the attributes unit tests), the AttributeImpl is used instead, which is essentially the same as the old behavior.\n- Added new ConcreteInheritedProperty MapperProperty.  This is invoked for concrete mappers within _adapt_inherited_property() to accomodate concrete mappers which inherit unhandled attributes from the base class, and basically raises an exception upon access.  [ticket:1237]\n- attributes.register_attribute and register_descriptor will now re-instrument an attribute unconditionally without checking for a previous attribute.  Not sure if this is controversial. It's needed so that ConcreteInheritedProperty instrumentation can be overridden by an incoming legit MapperProperty without any complexity.\n- Added new UninstrumentedColumnLoader LoaderStrategy.  This is used by the polymorphic_on argument when the given column is not represented within the mapped selectable, as is typical with a concrete scenario which maps to a polymorphic union.  It does not configure class instrumentation, keeping polymorphic_on from getting caught up in the new concrete attribute-checking logic.\n- RelationProperty now records its \"backref\" attributes using a set assigned to `_reverse_property` instead of a scalar.  The `back_populates` keyword allows any number of properties to be involved in a single bidirectional relation.  Changes were needed to RelationProperty.merge(), DependencyProcessor to accomodate for the new multiple nature of this attribute.\n- Generalized the methodology used by ManyToManyDP to check for \"did the other dependency already handle this direction\", building on the `_reverse_property` collection.\n- post_update logic within dependency.py moves to use the same methodology as ManyToManyDP so that \"did the other dependency do this already\" checks are made to be specific to the two dependent instances.\n- Caught that RelationProperty.merge() was writing to instance.__dict__ directly (!) - repaired to talk to instance_state.dict.\n- Removed needless eager loading example from concrete mapper docs.\n- Added test for [ticket:965].\n- Added the usual Node class/nodes table to orm/_fixtures.py, but haven't used it for anything yet.   We can potentially update test/orm/query.py to use this fixture.\n- Other test/documentation cleanup.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/209e888e1bda69924b364ae3394016acef0e9d41",
        "buggy_code": "register_attribute = unitofwork.register_attribute",
        "fixed_code": "UOWEventHandler = unitofwork.UOWEventHandler",
        "patch": "@@ -1521,7 +1521,7 @@ def new(self):\n         return util.IdentitySet(self._new.values())\n \n _expire_state = attributes.InstanceState.expire_attributes\n-register_attribute = unitofwork.register_attribute\n+UOWEventHandler = unitofwork.UOWEventHandler\n \n _sessions = weakref.WeakValueDictionary()\n "
    },
    {
        "commit_id": "8dc7bada918db59593fea9d8ba0671e6531d5fa8",
        "commit_message": "- Fixed mysql bug in exception raise when FK columns not present\nduring reflection. [ticket:1241]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8dc7bada918db59593fea9d8ba0671e6531d5fa8",
        "buggy_code": "(', '.join(ref_names), ref_table.fullname()))",
        "fixed_code": "(', '.join(ref_names), ref_table.fullname))",
        "patch": "@@ -2331,7 +2331,7 @@ def _set_constraints(self, table, constraints, connection, only):\n                 raise exc.InvalidRequestError(\n                     \"Foreign key columns (%s) are not present on \"\n                     \"foreign table %s\" %\n-                    (', '.join(ref_names), ref_table.fullname()))\n+                    (', '.join(ref_names), ref_table.fullname))\n             ref_columns = [ref_table.c[name] for name in ref_names]\n \n             con_kw = {}"
    },
    {
        "commit_id": "70f55bd2cdd0bcc6d188a24f78ee124c851b368f",
        "commit_message": "- restored the previous API Reference structure\n- bumped latex TOC structure, the PDF looks great\n- but we need to fix the translate_connect_args docstring bug to really have PDF",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/70f55bd2cdd0bcc6d188a24f78ee124c851b368f",
        "buggy_code": "latex_preamble = '\\setcounter{tocdepth}{2}'",
        "fixed_code": "latex_preamble = '\\setcounter{tocdepth}{3}'",
        "patch": "@@ -185,7 +185,7 @@\n \n # Additional stuff for the LaTeX preamble.\n # sets TOC depth to 2.\n-latex_preamble = '\\setcounter{tocdepth}{2}'\n+latex_preamble = '\\setcounter{tocdepth}{3}'\n \n # Documents to append as an appendix to all manuals.\n #latex_appendices = []"
    },
    {
        "commit_id": "4c4568eeb86380cabcbf09ac0ad7df2f9d5823a1",
        "commit_message": "further fix that docstring",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4c4568eeb86380cabcbf09ac0ad7df2f9d5823a1",
        "buggy_code": "t = Table('sometable', Column('col1', Integer))",
        "fixed_code": "t = Table('sometable', metadata, Column('col1', Integer))",
        "patch": "@@ -1648,7 +1648,7 @@ def replace(self, column):\n \n             e.g.::\n \n-                t = Table('sometable', Column('col1', Integer))\n+                t = Table('sometable', metadata, Column('col1', Integer))\n                 t.columns.replace(Column('col1', Integer, key='columnone'))\n \n             will remove the original 'col1' from the collection, and add"
    },
    {
        "commit_id": "3c1aa033e69e77a010cd8786fdc7f7d1239447b0",
        "commit_message": "- Fixed bug introduced in 0.5rc4 involving eager\nloading not functioning for properties which were\nadded to a mapper post-compile using\nadd_property() or equivalent.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c1aa033e69e77a010cd8786fdc7f7d1239447b0",
        "buggy_code": "@util.memoized_property",
        "fixed_code": "@property",
        "patch": "@@ -860,7 +860,7 @@ def _with_polymorphic_args(self, spec=None, selectable=False):\n         else:\n             return mappers, self._selectable_from_mappers(mappers)\n \n-    @util.memoized_property\n+    @property\n     def _default_polymorphic_properties(self):\n         return util.unique_list(\n             chain(*[list(mapper.iterate_properties) for mapper in [self] + self._with_polymorphic_mappers])"
    },
    {
        "commit_id": "d360fd7fe33bdc7f3c0fc9c41a52c17f440b9310",
        "commit_message": "Corrected issue with decimal e notation that broke regular decimal tests for mssql.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d360fd7fe33bdc7f3c0fc9c41a52c17f440b9310",
        "buggy_code": "if value._exp < 6:",
        "fixed_code": "if not isinstance(value, float) and value._exp < -6:",
        "patch": "@@ -69,7 +69,7 @@ def process(value):\n                 # Not sure that this exception is needed\n                 return value\n             else:\n-                if value._exp < 6:\n+                if not isinstance(value, float) and value._exp < -6:\n                     value = ((value < 0 and '-' or '')\n                         + '0.'\n                         + '0' * -(value._exp+1)"
    },
    {
        "commit_id": "f4db07281554b1ccf2588f4996db98a2c9c82122",
        "commit_message": "docstring fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f4db07281554b1ccf2588f4996db98a2c9c82122",
        "buggy_code": "This step is also required when using table reflection, i.e. autoload=True:",
        "fixed_code": "This step is also required when using table reflection, i.e. autoload=True::",
        "patch": "@@ -55,7 +55,7 @@\n         Column(...), ...\n   )\n \n-This step is also required when using table reflection, i.e. autoload=True:\n+This step is also required when using table reflection, i.e. autoload=True::\n \n   t = Table('mytable', metadata, \n         Column('id', Integer, Sequence('id_seq'), primary_key=True),"
    },
    {
        "commit_id": "3f1e5e213d65375e89a23ecb4d50566c1f34b7b0",
        "commit_message": "- added 'EXPLAIN' to the list of 'returns rows', but this\nissue will be addressed more fully by [ticket:1212].",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3f1e5e213d65375e89a23ecb4d50566c1f34b7b0",
        "buggy_code": "r'\\s*(?:SELECT|SHOW|DESCRIBE|XA RECOVER|CALL)',",
        "fixed_code": "r'\\s*(?:SELECT|SHOW|DESCRIBE|XA RECOVER|CALL|EXPLAIN)',",
        "patch": "@@ -221,7 +221,7 @@\n     r'\\s*(?:UPDATE|INSERT|CREATE|DELETE|DROP|ALTER|LOAD +DATA|REPLACE)',\n     re.I | re.UNICODE)\n SELECT_RE = re.compile(\n-    r'\\s*(?:SELECT|SHOW|DESCRIBE|XA RECOVER|CALL)',\n+    r'\\s*(?:SELECT|SHOW|DESCRIBE|XA RECOVER|CALL|EXPLAIN)',\n     re.I | re.UNICODE)\n SET_RE = re.compile(\n     r'\\s*SET\\s+(?:(?:GLOBAL|SESSION)\\s+)?\\w',"
    },
    {
        "commit_id": "231839e0379330ce5206febaa22d690b2c2b230e",
        "commit_message": "Corrects an import error when using echo_uow. Fixes #1205.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/231839e0379330ce5206febaa22d690b2c2b230e",
        "buggy_code": "from sqlalchemy import util, sql, engine",
        "fixed_code": "from sqlalchemy import util, sql, engine, log",
        "patch": "@@ -9,7 +9,7 @@\n import weakref\n from itertools import chain\n import sqlalchemy.exceptions as sa_exc\n-from sqlalchemy import util, sql, engine\n+from sqlalchemy import util, sql, engine, log\n from sqlalchemy.sql import util as sql_util, expression\n from sqlalchemy.orm import (\n     SessionExtension, attributes, exc, query, unitofwork, util as mapperutil,"
    },
    {
        "commit_id": "c9afdb5072ccaffb73e29853dbade1eb0237157b",
        "commit_message": "Corrects issue where engine.execute raised exception when given empty list. Fixes #1175.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c9afdb5072ccaffb73e29853dbade1eb0237157b",
        "buggy_code": "if isinstance(multiparams[0][0], (list, tuple, dict)):",
        "fixed_code": "if not multiparams[0] or isinstance(multiparams[0][0], (list, tuple, dict)):",
        "patch": "@@ -873,7 +873,7 @@ def __distill_params(self, multiparams, params):\n                 return [{}]\n         elif len(multiparams) == 1:\n             if isinstance(multiparams[0], (list, tuple)):\n-                if isinstance(multiparams[0][0], (list, tuple, dict)):\n+                if not multiparams[0] or isinstance(multiparams[0][0], (list, tuple, dict)):\n                     return multiparams[0]\n                 else:\n                     return [multiparams[0]]"
    },
    {
        "commit_id": "bf493ac0b7a11f14c6db7fdbb90239a8e70bc752",
        "commit_message": "- Fixed bug involving read/write relation()s that\ncontain literal or other non-column expressions\nwithin their primaryjoin condition equated\nto a foreign key column.\n- fixed UnmappedColumnError exception raise to not assume it was passed a column",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bf493ac0b7a11f14c6db7fdbb90239a8e70bc752",
        "buggy_code": "raise exc.UnmappedColumnError(\"No column %s.%s is configured on mapper %s...\" % (column.table.name, column.name, str(self)))",
        "fixed_code": "raise exc.UnmappedColumnError(\"No column %s is configured on mapper %s...\" % (column, self))",
        "patch": "@@ -1012,7 +1012,7 @@ def _get_col_to_prop(self, column):\n             if prop:\n                 raise exc.UnmappedColumnError(\"Column '%s.%s' is not available, due to conflicting property '%s':%s\" % (column.table.name, column.name, column.key, repr(prop)))\n             else:\n-                raise exc.UnmappedColumnError(\"No column %s.%s is configured on mapper %s...\" % (column.table.name, column.name, str(self)))\n+                raise exc.UnmappedColumnError(\"No column %s is configured on mapper %s...\" % (column, self))\n \n     # TODO: improve names\n     def _get_state_attr_by_column(self, state, column):"
    },
    {
        "commit_id": "bf493ac0b7a11f14c6db7fdbb90239a8e70bc752",
        "commit_message": "- Fixed bug involving read/write relation()s that\ncontain literal or other non-column expressions\nwithin their primaryjoin condition equated\nto a foreign key column.\n- fixed UnmappedColumnError exception raise to not assume it was passed a column",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bf493ac0b7a11f14c6db7fdbb90239a8e70bc752",
        "buggy_code": "eq_pairs = [(l, r) for l, r in eq_pairs if (self._col_is_part_of_mappings(l) and self._col_is_part_of_mappings(r)) or r in self._foreign_keys]",
        "fixed_code": "eq_pairs = [(l, r) for l, r in eq_pairs if (self._col_is_part_of_mappings(l) and self._col_is_part_of_mappings(r)) or self.viewonly and r in self._foreign_keys]",
        "patch": "@@ -628,7 +628,7 @@ def _determine_synchronize_pairs(self):\n                     self.synchronize_pairs.append((r, l))\n         else:\n             eq_pairs = criterion_as_pairs(self.primaryjoin, consider_as_foreign_keys=self._foreign_keys, any_operator=self.viewonly)\n-            eq_pairs = [(l, r) for l, r in eq_pairs if (self._col_is_part_of_mappings(l) and self._col_is_part_of_mappings(r)) or r in self._foreign_keys]\n+            eq_pairs = [(l, r) for l, r in eq_pairs if (self._col_is_part_of_mappings(l) and self._col_is_part_of_mappings(r)) or self.viewonly and r in self._foreign_keys]\n \n             if not eq_pairs:\n                 if not self.viewonly and criterion_as_pairs(self.primaryjoin, consider_as_foreign_keys=self._foreign_keys, any_operator=True):"
    },
    {
        "commit_id": "427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "commit_message": "- fixed a bug in declarative test which was looking for old version of history\n- Added \"sorted_tables\" accessor to MetaData, which returns\nTable objects sorted in order of dependency as a list.\nThis deprecates the MetaData.table_iterator() method.\nThe \"reverse=False\" keyword argument has also been\nremoved from util.sort_tables(); use the Python\n'reversed' function to reverse the results.\n[ticket:1033]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "buggy_code": "for table in sqlutil.sort_tables(table_to_mapper.keys(), reverse=True):",
        "fixed_code": "for table in reversed(sqlutil.sort_tables(table_to_mapper.keys())):",
        "patch": "@@ -1314,7 +1314,7 @@ def _delete_obj(self, states, uowtransaction):\n             for t in mapper.tables:\n                 table_to_mapper[t] = mapper\n \n-        for table in sqlutil.sort_tables(table_to_mapper.keys(), reverse=True):\n+        for table in reversed(sqlutil.sort_tables(table_to_mapper.keys())):\n             delete = {}\n             for state, mapper, connection in tups:\n                 if table not in mapper._pks_by_table:"
    },
    {
        "commit_id": "427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "commit_message": "- fixed a bug in declarative test which was looking for old version of history\n- Added \"sorted_tables\" accessor to MetaData, which returns\nTable objects sorted in order of dependency as a list.\nThis deprecates the MetaData.table_iterator() method.\nThe \"reverse=False\" keyword argument has also been\nremoved from util.sort_tables(); use the Python\n'reversed' function to reverse the results.\n[ticket:1033]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "buggy_code": "for table in fixture_metadata.table_iterator(reverse=False):",
        "fixed_code": "for table in fixture_metadata.sorted_tables:",
        "patch": "@@ -153,7 +153,7 @@ def load_fixture(bind=None):\n \n \n def _load_fixtures():\n-    for table in fixture_metadata.table_iterator(reverse=False):\n+    for table in fixture_metadata.sorted_tables:\n         table.info[('fixture', 'loader')]()\n \n def run_inserts_for(table, bind=None):"
    },
    {
        "commit_id": "427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "commit_message": "- fixed a bug in declarative test which was looking for old version of history\n- Added \"sorted_tables\" accessor to MetaData, which returns\nTable objects sorted in order of dependency as a list.\nThis deprecates the MetaData.table_iterator() method.\nThe \"reverse=False\" keyword argument has also been\nremoved from util.sort_tables(); use the Python\n'reversed' function to reverse the results.\n[ticket:1033]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "buggy_code": "for t in _a_table.metadata.table_iterator(reverse=True):",
        "fixed_code": "for t in reversed(_a_table.metadata.sorted_tables):",
        "patch": "@@ -653,7 +653,7 @@ def test_joins(self):\n         for j1 in (None, _b_table.c.a_id==_a_table.c.id, _a_table.c.id==_b_table.c.a_id):\n             for j2 in (None, _b_table.c.a_id==_c_table.c.b_a_id, _c_table.c.b_a_id==_b_table.c.a_id):\n                 self._do_test(j1, j2)\n-                for t in _a_table.metadata.table_iterator(reverse=True):\n+                for t in reversed(_a_table.metadata.sorted_tables):\n                     t.delete().execute().close()\n \n     def _do_test(self, j1, j2):"
    },
    {
        "commit_id": "427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "commit_message": "- fixed a bug in declarative test which was looking for old version of history\n- Added \"sorted_tables\" accessor to MetaData, which returns\nTable objects sorted in order of dependency as a list.\nThis deprecates the MetaData.table_iterator() method.\nThe \"reverse=False\" keyword argument has also been\nremoved from util.sort_tables(); use the Python\n'reversed' function to reverse the results.\n[ticket:1033]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "buggy_code": "for t in metadata.table_iterator(reverse=True):",
        "fixed_code": "for t in reversed(metadata.sorted_tables):",
        "patch": "@@ -652,7 +652,7 @@ def tearDownAll(self):\n         metadata.drop_all()\n     def tearDown(self):\n         clear_mappers()\n-        for t in metadata.table_iterator(reverse=True):\n+        for t in reversed(metadata.sorted_tables):\n             t.delete().execute()\n \n     def testjointo(self):"
    },
    {
        "commit_id": "427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "commit_message": "- fixed a bug in declarative test which was looking for old version of history\n- Added \"sorted_tables\" accessor to MetaData, which returns\nTable objects sorted in order of dependency as a list.\nThis deprecates the MetaData.table_iterator() method.\nThe \"reverse=False\" keyword argument has also been\nremoved from util.sort_tables(); use the Python\n'reversed' function to reverse the results.\n[ticket:1033]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/427ed1966f0f9ce13df49dcdbe43ce48333e94fa",
        "buggy_code": "for t in _otest_metadata.table_iterator(reverse=True):",
        "fixed_code": "for t in reversed(_otest_metadata.sorted_tables):",
        "patch": "@@ -911,7 +911,7 @@ def tearDown(self):\n         if not self.keep_mappers:\n             clear_mappers()\n         if not self.keep_data:\n-            for t in _otest_metadata.table_iterator(reverse=True):\n+            for t in reversed(_otest_metadata.sorted_tables):\n                 try:\n                     t.delete().execute().close()\n                 except Exception, e:"
    },
    {
        "commit_id": "deaff3e97fbb166afe7fde42700a504863bd4679",
        "commit_message": "- Fixed bug when calling select([literal('foo')])\nor select([bindparam('foo')]).",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/deaff3e97fbb166afe7fde42700a504863bd4679",
        "buggy_code": "elif not isinstance(column, (sql._UnaryExpression, sql._TextClause)) and (not hasattr(column, 'name') or isinstance(column, sql._Function)):",
        "fixed_code": "elif not isinstance(column, (sql._UnaryExpression, sql._TextClause, sql._BindParamClause)) and (not hasattr(column, 'name') or isinstance(column, sql._Function)):",
        "patch": "@@ -459,7 +459,7 @@ def label_select_column(self, select, column, asfrom):\n             column.table is not None and \\\n             not isinstance(column.table, sql.Select):\n             return column.label(column.name)\n-        elif not isinstance(column, (sql._UnaryExpression, sql._TextClause)) and (not hasattr(column, 'name') or isinstance(column, sql._Function)):\n+        elif not isinstance(column, (sql._UnaryExpression, sql._TextClause, sql._BindParamClause)) and (not hasattr(column, 'name') or isinstance(column, sql._Function)):\n             return column.label(column.anon_label)\n         else:\n             return column"
    },
    {
        "commit_id": "01bce5c129cacd8717510922ef63c3d40fe9381c",
        "commit_message": "fix adjacency list examples",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/01bce5c129cacd8717510922ef63c3d40fe9381c",
        "buggy_code": "t = session.query(TreeNode).filter(TreeNode.c.id==nodeid)[0]",
        "fixed_code": "t = session.query(TreeNode).filter(TreeNode.id==nodeid)[0]",
        "patch": "@@ -114,7 +114,7 @@ def print_nodes(self):\n print \"----------------------------\"\n \n session.clear()\n-t = session.query(TreeNode).filter(TreeNode.c.id==nodeid)[0]\n+t = session.query(TreeNode).filter(TreeNode.id==nodeid)[0]\n \n print \"\\n\\n\\n----------------------------\"\n print \"Full Tree:\""
    },
    {
        "commit_id": "45a2b0fedfa069bbd110727eaee5185e8f3e1848",
        "commit_message": "possible fix for MS-SQL version of match() test, but the real solution here may be to have the correct default paramstyle set up on the MS-SQL dialect.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/45a2b0fedfa069bbd110727eaee5185e8f3e1848",
        "buggy_code": "(table1.c.myid.match('somstr'), \"CONTAINS (mytable.myid, ?)\", mssql.MSSQLDialect()),",
        "fixed_code": "(table1.c.myid.match('somstr'), \"CONTAINS (mytable.myid, :myid_1)\", mssql.MSSQLDialect()),",
        "patch": "@@ -470,7 +470,7 @@ def test_match(self):\n         for expr, check, dialect in [\n             (table1.c.myid.match('somstr'), \"mytable.myid MATCH ?\", sqlite.SQLiteDialect()),\n             (table1.c.myid.match('somstr'), \"MATCH (mytable.myid) AGAINST (%s IN BOOLEAN MODE)\", mysql.MySQLDialect()),\n-            (table1.c.myid.match('somstr'), \"CONTAINS (mytable.myid, ?)\", mssql.MSSQLDialect()),\n+            (table1.c.myid.match('somstr'), \"CONTAINS (mytable.myid, :myid_1)\", mssql.MSSQLDialect()),\n             (table1.c.myid.match('somstr'), \"mytable.myid @@ to_tsquery(%(myid_1)s)\", postgres.PGDialect()),\n             (table1.c.myid.match('somstr'), \"CONTAINS (mytable.myid, :myid_1)\", oracle.OracleDialect()),            \n         ]:"
    },
    {
        "commit_id": "93c706a03bc809e21208cb6e9f76b23ed6d2ff19",
        "commit_message": "- re-fixed the fix to the prefixes fix\n- removed ancient descriptor() functions from dialects; replaced with Dialect.name\n- removed similarly ancient sys.modules silliness in Engine.name",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/93c706a03bc809e21208cb6e9f76b23ed6d2ff19",
        "buggy_code": "self.append(\"\\nCREATE\" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")",
        "fixed_code": "self.append(\"\\n\" + \" \".join(['CREATE'] + table._prefixes + ['TABLE', self.preparer.format_table(table), \"(\"]))",
        "patch": "@@ -788,7 +788,7 @@ def visit_table(self, table):\n             if column.default is not None:\n                 self.traverse_single(column.default)\n \n-        self.append(\"\\nCREATE\" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")\n+        self.append(\"\\n\" + \" \".join(['CREATE'] + table._prefixes + ['TABLE', self.preparer.format_table(table), \"(\"]))\n \n         separator = \"\\n\"\n "
    },
    {
        "commit_id": "0f42004deeab823398571986ff4a75eb536267ea",
        "commit_message": "- session.refresh() raises an informative error message if\nthe list of attributes does not include any column-based\nattributes.\n\n- query() raises an informative error message if no columns\nor mappers are specified.\n\n- lazy loaders now trigger autoflush before proceeding.  This\nallows expire() of a collection or scalar relation to\nfunction properly in the context of autoflush.\n\n- whitespace fix to new Table prefixes option",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0f42004deeab823398571986ff4a75eb536267ea",
        "buggy_code": "self.append(\"\\nCREATE \" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")",
        "fixed_code": "self.append(\"\\nCREATE\" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")",
        "patch": "@@ -788,7 +788,7 @@ def visit_table(self, table):\n             if column.default is not None:\n                 self.traverse_single(column.default)\n \n-        self.append(\"\\nCREATE \" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")\n+        self.append(\"\\nCREATE\" + \" \".join(table._prefixes) + \" TABLE \" + self.preparer.format_table(table) + \" (\")\n \n         separator = \"\\n\"\n "
    },
    {
        "commit_id": "cde133c45d01848cd5696113fe94f269b7fe8d9c",
        "commit_message": "merged merge fix from r4834/rel_0_4 branch",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cde133c45d01848cd5696113fe94f269b7fe8d9c",
        "buggy_code": "def get_select_precolumns(self, select):",
        "fixed_code": "def dont_get_select_precolumns(self, select):",
        "patch": "@@ -675,7 +675,7 @@ def limit_clause(self, select):\n             text += \" OFFSET \" + str(select._offset)\n         return text\n \n-    def get_select_precolumns(self, select):\n+    def dont_get_select_precolumns(self, select):\n         if select._distinct:\n             if isinstance(select._distinct, bool):\n                 return \"DISTINCT \""
    },
    {
        "commit_id": "cde133c45d01848cd5696113fe94f269b7fe8d9c",
        "commit_message": "merged merge fix from r4834/rel_0_4 branch",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cde133c45d01848cd5696113fe94f269b7fe8d9c",
        "buggy_code": "def merge(self, session, source, dest):",
        "fixed_code": "def merge(self, session, source, dest, dont_load, _recursive):",
        "patch": "@@ -398,7 +398,7 @@ def is_primary(self):\n \n         return not self.parent.non_primary\n \n-    def merge(self, session, source, dest):\n+    def merge(self, session, source, dest, dont_load, _recursive):\n         \"\"\"Merge the attribute represented by this ``MapperProperty``\n         from source to destination object\"\"\"\n "
    },
    {
        "commit_id": "1b1b68a3376060782c99269a0f4ab2b3c9ed468e",
        "commit_message": "merged r4809 from rel_0_4, oracle fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1b1b68a3376060782c99269a0f4ab2b3c9ed468e",
        "buggy_code": "@testing.fails_on('access', 'oracle', 'mssql', 'sybase')",
        "fixed_code": "@testing.fails_on('access', 'mssql', 'sybase')",
        "patch": "@@ -679,7 +679,7 @@ def foo(s, p=None):\n     @testing.crashes('firebird', 'No schema support')\n     @testing.fails_on('sqlite')\n     # fixme: revisit these below.\n-    @testing.fails_on('access', 'oracle', 'mssql', 'sybase')\n+    @testing.fails_on('access', 'mssql', 'sybase')\n     def test_explicit_default_schema(self):\n         engine = testing.db\n "
    },
    {
        "commit_id": "731115ffbd172044eda2f19fc04845fcf4cebddd",
        "commit_message": "Refactor-o fix.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/731115ffbd172044eda2f19fc04845fcf4cebddd",
        "buggy_code": "context.append('mapper %s' % c_mapper)",
        "fixed_code": "context.append('mapper %s' % _class_to_mapper(mapper))",
        "patch": "@@ -883,7 +883,7 @@ def get_bind(self, mapper=None, clause=None, instance=None, state=None):\n \n         context = []\n         if mapper is not None:\n-            context.append('mapper %s' % c_mapper)\n+            context.append('mapper %s' % _class_to_mapper(mapper))\n         if clause is not None:\n             context.append('SQL expression')\n         if instance is not None:"
    },
    {
        "commit_id": "590e74182f68a8932e8c4d2c4b53da28b316ffdf",
        "commit_message": "Fix table.delete() arguments",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/590e74182f68a8932e8c4d2c4b53da28b316ffdf",
        "buggy_code": "result = table.delete(table.c.persons > 4, dict(full=True), firebird_returning=[table.c.id]).execute()",
        "fixed_code": "result = table.delete(table.c.persons > 4, firebird_returning=[table.c.id]).execute()",
        "patch": "@@ -187,7 +187,7 @@ def test_delete_returning(self):\n         try:\n             table.insert().execute([{'persons': 5, 'full': False}, {'persons': 3, 'full': False}])\n \n-            result = table.delete(table.c.persons > 4, dict(full=True), firebird_returning=[table.c.id]).execute()\n+            result = table.delete(table.c.persons > 4, firebird_returning=[table.c.id]).execute()\n             self.assertEqual(result.fetchall(), [(1,)])\n \n             result2 = select([table.c.id, table.c.full]).order_by(table.c.id).execute()"
    },
    {
        "commit_id": "00475df2ef9fe0926bd429cb2be0001d5280c68a",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/00475df2ef9fe0926bd429cb2be0001d5280c68a",
        "buggy_code": "((compiled.isupdate or compiled.isinsert or compiler.isdelete) and",
        "fixed_code": "((compiled.isupdate or compiled.isinsert or compiled.isdelete) and",
        "patch": "@@ -309,7 +309,7 @@ def returns_rows_text(self, statement):\n \n     def returns_rows_compiled(self, compiled):\n         return (isinstance(compiled.statement, sql.expression.Selectable) or\n-                ((compiled.isupdate or compiled.isinsert or compiler.isdelete) and\n+                ((compiled.isupdate or compiled.isinsert or compiled.isdelete) and\n                  RETURNING_KW_NAME in compiled.statement.kwargs))\n \n "
    },
    {
        "commit_id": "d3621ae961a869c6bdb68dc8738bb732d5b00dc1",
        "commit_message": "- fixed a fairly critical bug in clause adaption/corresponding column in conjunction with annotations\n- implicit order by is removed, modified many tests to explicitly set ordering, probably many more to go\nonce it hits the buildbot.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d3621ae961a869c6bdb68dc8738bb732d5b00dc1",
        "buggy_code": "orm_mapper(T, t1_t)",
        "fixed_code": "orm_mapper(T, t1_t, order_by=t1_t.c.id)",
        "patch": "@@ -1987,7 +1987,7 @@ def test_boolean(self):\n         # use the regular mapper\n         class T(_base.ComparableEntity):\n             pass\n-        orm_mapper(T, t1_t)\n+        orm_mapper(T, t1_t, order_by=t1_t.c.id)\n \n         sess = create_session()\n         t1 = T(value=True, name=\"t1\")"
    },
    {
        "commit_id": "e3460573d037e27592995277a19840be13457828",
        "commit_message": "- factored out the logic used by Join to create its join condition\n- With declarative, joined table inheritance mappers use a slightly relaxed\nfunction to create the \"inherit condition\" to the parent\ntable, so that other foreign keys to not-yet-declared\nTable objects don't trigger an error.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3460573d037e27592995277a19840be13457828",
        "buggy_code": "self.inherit_condition = sql.join(self.inherits.local_table, self.local_table).onclause",
        "fixed_code": "self.inherit_condition = sqlutil.join_condition(self.inherits.local_table, self.local_table)",
        "patch": "@@ -424,7 +424,7 @@ def __compile_inheritance(self):\n                         # figure out inherit condition from our table to the immediate table\n                         # of the inherited mapper, not its full table which could pull in other\n                         # stuff we dont want (allows test/inheritance.InheritTest4 to pass)\n-                        self.inherit_condition = sql.join(self.inherits.local_table, self.local_table).onclause\n+                        self.inherit_condition = sqlutil.join_condition(self.inherits.local_table, self.local_table)\n                     self.mapped_table = sql.join(self.inherits.mapped_table, self.local_table, self.inherit_condition)\n                     \n                     fks = util.to_set(self.inherit_foreign_keys)"
    },
    {
        "commit_id": "e3460573d037e27592995277a19840be13457828",
        "commit_message": "- factored out the logic used by Join to create its join condition\n- With declarative, joined table inheritance mappers use a slightly relaxed\nfunction to create the \"inherit condition\" to the parent\ntable, so that other foreign keys to not-yet-declared\nTable objects don't trigger an error.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3460573d037e27592995277a19840be13457828",
        "buggy_code": "raise exceptions.InvalidRequestError(",
        "fixed_code": "raise exceptions.NoSuchTableError(",
        "patch": "@@ -782,7 +782,7 @@ def column(self):\n                 else:\n                     (schema,tname,colname) = m.group(1,2,3)\n                 if _get_table_key(tname, schema) not in parenttable.metadata:\n-                    raise exceptions.InvalidRequestError(\n+                    raise exceptions.NoSuchTableError(\n                         \"Could not find table '%s' with which to generate a \"\n                         \"foreign key\" % tname)\n                 table = Table(tname, parenttable.metadata,"
    },
    {
        "commit_id": "e7f3f997fec841013ebaea749516929bfba9f9c6",
        "commit_message": "- Fix 2.3 regression from 4598",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7f3f997fec841013ebaea749516929bfba9f9c6",
        "buggy_code": "return sum(tag.prop_score for tag in self.tags)",
        "fixed_code": "return sum([tag.prop_score for tag in self.tags])",
        "patch": "@@ -1005,7 +1005,7 @@ def test_label_anonymizing(self):\n         class User(Base):\n             @property\n             def prop_score(self):\n-                return sum(tag.prop_score for tag in self.tags)\n+                return sum([tag.prop_score for tag in self.tags])\n \n         class Tag(Base):\n             @property"
    },
    {
        "commit_id": "3560379ff742f63937ecd9b81d30ac6f0e92f629",
        "commit_message": "fix order by for MySQL environment",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3560379ff742f63937ecd9b81d30ac6f0e92f629",
        "buggy_code": "q = q.add_entity(Item).select_from(join(Order, Item, 'items'))",
        "fixed_code": "q = q.add_entity(Item).select_from(join(Order, Item, 'items')).order_by(Order.id, Item.id)",
        "patch": "@@ -678,7 +678,7 @@ def test_aliased_classes_m2m(self):\n         ]\n         \n         q = sess.query(Order)\n-        q = q.add_entity(Item).select_from(join(Order, Item, 'items'))\n+        q = q.add_entity(Item).select_from(join(Order, Item, 'items')).order_by(Order.id, Item.id)\n         l = q.all()\n         self.assertEquals(l, expected)\n "
    },
    {
        "commit_id": "e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "commit_message": "- merged -r4458:4466 of query_columns branch\n- this branch changes query.values() to immediately return an iterator, adds a new \"aliased\" construct which will be the primary method to get at aliased columns when using values()\n- tentative ORM versions of _join and _outerjoin are not yet public, would like to integrate with Query better (work continues in the branch)\n- lots of fixes to expressions regarding cloning and correlation.  Some apparent ORM bug-workarounds removed.\n- to fix a recursion issue with anonymous identifiers, bind parameters generated against columns now just use the name of the column instead of the tablename_columnname label (plus the unique integer counter).  this way expensive recursive schemes aren't needed for the anon identifier logic.   This, as usual, impacted a ton of compiler unit tests which needed a search-n-replace for the new bind names.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "buggy_code": "if key._label.lower() in props:",
        "fixed_code": "if key._label and key._label.lower() in props:",
        "patch": "@@ -1485,7 +1485,7 @@ def lookup_key(key):\n                 # you say something like query.options(contains_alias('fooalias')) - the matching\n                 # is done on strings\n                 if isinstance(key, expression.ColumnElement):\n-                    if key._label.lower() in props:\n+                    if key._label and key._label.lower() in props:\n                         return props[key._label.lower()]\n                     elif key.name.lower() in props:\n                         return props[key.name.lower()]"
    },
    {
        "commit_id": "e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "commit_message": "- merged -r4458:4466 of query_columns branch\n- this branch changes query.values() to immediately return an iterator, adds a new \"aliased\" construct which will be the primary method to get at aliased columns when using values()\n- tentative ORM versions of _join and _outerjoin are not yet public, would like to integrate with Query better (work continues in the branch)\n- lots of fixes to expressions regarding cloning and correlation.  Some apparent ORM bug-workarounds removed.\n- to fix a recursion issue with anonymous identifiers, bind parameters generated against columns now just use the name of the column instead of the tablename_columnname label (plus the unique integer counter).  this way expensive recursive schemes aren't needed for the anon identifier logic.   This, as usual, impacted a ton of compiler unit tests which needed a search-n-replace for the new bind names.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "buggy_code": "self.assert_compile(case([(t.c.col1==7, \"y\")], else_=\"z\"), \"CASE WHEN (test.col1 = :test_col1_1) THEN :param_1 ELSE :param_2 END\")",
        "fixed_code": "self.assert_compile(case([(t.c.col1==7, \"y\")], else_=\"z\"), \"CASE WHEN (test.col1 = :col1_1) THEN :param_1 ELSE :param_2 END\")",
        "patch": "@@ -94,7 +94,7 @@ def test_literal_interpretation(self):\n         self.assertRaises(exceptions.ArgumentError, case, [(\"x\", \"y\")])\n         \n         self.assert_compile(case([(\"x\", \"y\")], value=t.c.col1), \"CASE test.col1 WHEN :param_1 THEN :param_2 END\")\n-        self.assert_compile(case([(t.c.col1==7, \"y\")], else_=\"z\"), \"CASE WHEN (test.col1 = :test_col1_1) THEN :param_1 ELSE :param_2 END\")\n+        self.assert_compile(case([(t.c.col1==7, \"y\")], else_=\"z\"), \"CASE WHEN (test.col1 = :col1_1) THEN :param_1 ELSE :param_2 END\")\n \n         \n     @testing.fails_on('maxdb')"
    },
    {
        "commit_id": "e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "commit_message": "- merged -r4458:4466 of query_columns branch\n- this branch changes query.values() to immediately return an iterator, adds a new \"aliased\" construct which will be the primary method to get at aliased columns when using values()\n- tentative ORM versions of _join and _outerjoin are not yet public, would like to integrate with Query better (work continues in the branch)\n- lots of fixes to expressions regarding cloning and correlation.  Some apparent ORM bug-workarounds removed.\n- to fix a recursion issue with anonymous identifiers, bind parameters generated against columns now just use the name of the column instead of the tablename_columnname label (plus the unique integer counter).  this way expensive recursive schemes aren't needed for the anon identifier logic.   This, as usual, impacted a ton of compiler unit tests which needed a search-n-replace for the new bind names.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "buggy_code": "\"WHERE some_large_named_table.this_is_the_primarykey_column = :some_large_named_table__1) AS anon_1\", dialect=compile_dialect)",
        "fixed_code": "\"WHERE some_large_named_table.this_is_the_primarykey_column = :this_is_the_primarykey__1) AS anon_1\", dialect=compile_dialect)",
        "patch": "@@ -120,7 +120,7 @@ def test_anon_alias(self):\n       self.assert_compile(x, \"SELECT anon_1.this_is_the_primarykey_column AS anon_1_this_is_the_prim_1, anon_1.this_is_the_data_column AS anon_1_this_is_the_data_2 \"\n             \"FROM (SELECT some_large_named_table.this_is_the_primarykey_column AS this_is_the_primarykey_column, some_large_named_table.this_is_the_data_column AS this_is_the_data_column \"\n             \"FROM some_large_named_table \"\n-            \"WHERE some_large_named_table.this_is_the_primarykey_column = :some_large_named_table__1) AS anon_1\", dialect=compile_dialect)\n+            \"WHERE some_large_named_table.this_is_the_primarykey_column = :this_is_the_primarykey__1) AS anon_1\", dialect=compile_dialect)\n \n       print x.execute().fetchall()\n "
    },
    {
        "commit_id": "e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "commit_message": "- merged -r4458:4466 of query_columns branch\n- this branch changes query.values() to immediately return an iterator, adds a new \"aliased\" construct which will be the primary method to get at aliased columns when using values()\n- tentative ORM versions of _join and _outerjoin are not yet public, would like to integrate with Query better (work continues in the branch)\n- lots of fixes to expressions regarding cloning and correlation.  Some apparent ORM bug-workarounds removed.\n- to fix a recursion issue with anonymous identifiers, bind parameters generated against columns now just use the name of the column instead of the tablename_columnname label (plus the unique integer counter).  this way expensive recursive schemes aren't needed for the anon identifier logic.   This, as usual, impacted a ton of compiler unit tests which needed a search-n-replace for the new bind names.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e3b2305d6721a1f1ed20f9c520765f7c33876f32",
        "buggy_code": "assert str(j) == \"a JOIN b ON a.id = b.id AND b.x = :b_x_1\", str(j)",
        "fixed_code": "assert str(j) == \"a JOIN b ON a.id = b.id AND b.x = :x_1\", str(j)",
        "patch": "@@ -281,7 +281,7 @@ def test_non_column_clause(self):\n         b = Table('b', meta, Column('id', Integer, ForeignKey('a.id'), primary_key=True), Column('x', Integer, primary_key=True))\n \n         j = a.join(b, and_(a.c.id==b.c.id, b.c.x==5))\n-        assert str(j) == \"a JOIN b ON a.id = b.id AND b.x = :b_x_1\", str(j)\n+        assert str(j) == \"a JOIN b ON a.id = b.id AND b.x = :x_1\", str(j)\n         assert list(j.primary_key) == [a.c.id, b.c.x]\n \n     def test_onclause_direction(self):"
    },
    {
        "commit_id": "1dbed0b2b4446408f14a87d94f9c0c6b3356fcf2",
        "commit_message": "- merged sync_simplify branch\n- The methodology behind \"primaryjoin\"/\"secondaryjoin\" has\nbeen refactored.  Behavior should be slightly more\nintelligent, primarily in terms of error messages which\nhave been pared down to be more readable.  In a slight\nnumber of scenarios it can better resolve the correct\nforeign key than before.\n- moved collections unit test from relationships.py to collection.py\n- PropertyLoader now has \"synchronize_pairs\" and \"equated_pairs\"\ncollections which allow easy access to the source/destination\nparent/child relation between columns (might change names)\n- factored out ClauseSynchronizer (finally)\n- added many more tests for priamryjoin/secondaryjoin\nerror checks",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1dbed0b2b4446408f14a87d94f9c0c6b3356fcf2",
        "buggy_code": "if fk.column is column:",
        "fixed_code": "if fk.references(column.table):",
        "patch": "@@ -553,7 +553,7 @@ def bind(self):\n     def references(self, column):\n         \"\"\"Return True if this references the given column via a foreign key.\"\"\"\n         for fk in self.foreign_keys:\n-            if fk.column is column:\n+            if fk.references(column.table):\n                 return True\n         else:\n             return False"
    },
    {
        "commit_id": "8f2ff2a64824d0a7b7ded83c10b0a0c1764d1fd1",
        "commit_message": "added an order by to fix potential mysql test failure",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8f2ff2a64824d0a7b7ded83c10b0a0c1764d1fd1",
        "buggy_code": "] == create_session().query(User).filter(User.id.in_([8,9]))._from_self().join('addresses').add_entity(Address).all()",
        "fixed_code": "] == create_session().query(User).filter(User.id.in_([8,9]))._from_self().join('addresses').add_entity(Address).order_by(User.id, Address.id).all()",
        "patch": "@@ -423,7 +423,7 @@ def test_join(self):\n             (User(id=8), Address(id=3)),\n             (User(id=8), Address(id=4)),\n             (User(id=9), Address(id=5))\n-        ] == create_session().query(User).filter(User.id.in_([8,9]))._from_self().join('addresses').add_entity(Address).all()\n+        ] == create_session().query(User).filter(User.id.in_([8,9]))._from_self().join('addresses').add_entity(Address).order_by(User.id, Address.id).all()\n         \n class AggregateTest(QueryTest):\n     def test_sum(self):"
    },
    {
        "commit_id": "7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "commit_message": "fix up some unit tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "buggy_code": "self.assert_compile(tbl.delete(tbl.c.id == 1), \"DELETE FROM paj.test WHERE paj.test.id = :test_id_1\")",
        "fixed_code": "self.assert_compile(tbl.delete(tbl.c.id == 1), \"DELETE FROM paj.test WHERE paj.test.id = :paj_test_id_1\")",
        "patch": "@@ -59,7 +59,7 @@ def test_aliases_schemas(self):\n     def test_delete_schema(self):\n         metadata = MetaData()\n         tbl = Table('test', metadata, Column('id', Integer, primary_key=True), schema='paj')\n-        self.assert_compile(tbl.delete(tbl.c.id == 1), \"DELETE FROM paj.test WHERE paj.test.id = :test_id_1\")\n+        self.assert_compile(tbl.delete(tbl.c.id == 1), \"DELETE FROM paj.test WHERE paj.test.id = :paj_test_id_1\")\n \n     def test_union(self):\n         t1 = table('t1',"
    },
    {
        "commit_id": "7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "commit_message": "fix up some unit tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "buggy_code": "self.assert_compile(parent.join(child), \"ed.parent JOIN ed.child ON parent.id = child.parent_id\")",
        "fixed_code": "self.assert_compile(parent.join(child), \"ed.parent JOIN ed.child ON ed.parent.id = ed.child.parent_id\")",
        "patch": "@@ -40,7 +40,7 @@ def test_owner(self):\n            Column('parent_id', Integer, ForeignKey('ed.parent.id')),\n            owner = 'ed')\n \n-        self.assert_compile(parent.join(child), \"ed.parent JOIN ed.child ON parent.id = child.parent_id\")\n+        self.assert_compile(parent.join(child), \"ed.parent JOIN ed.child ON ed.parent.id = ed.child.parent_id\")\n \n     def test_subquery(self):\n         t = table('sometable', column('col1'), column('col2'))"
    },
    {
        "commit_id": "7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "commit_message": "fix up some unit tests",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7ae89c28f0c4e86a2325ba857ec7dd1e2a5cd3c9",
        "buggy_code": "@profiling.function_call_count(125, versions={'2.3': 180})",
        "fixed_code": "@profiling.function_call_count(125, versions={'2.3': 180, '2.4':140})",
        "patch": "@@ -24,7 +24,7 @@ def test_update(self):\n         t1.update().compile()\n \n     # TODO: this is alittle high\n-    @profiling.function_call_count(125, versions={'2.3': 180})\n+    @profiling.function_call_count(125, versions={'2.3': 180, '2.4':140})\n     def test_select(self):\n         s = select([t1], t1.c.c2==t2.c.c1)\n         s.compile()"
    },
    {
        "commit_id": "c4955c05a3ab40d53c83982da612e746c662640d",
        "commit_message": "- merged with_polymorphic branch, which was merged with query_columns branch\n- removes everything to do with select_table, which remains as a keyword argument synonymous with\nwith_polymorphic=('*', select_table).\n- all \"polymorphic\" selectables find their way to Query by way of _set_select_from() now, so that\nall joins/aliasing/eager loads/etc. is handled consistently.  Mapper has methods for producing\npolymorphic selectables so that Query and eagerloaders alike can get to them.\n- row aliasing simplified, so that they don't need to nest.  they only need the source selectable\nand adapt to whatever incoming columns they get.\n- Query is more egalitarian about mappers/columns now.  Still has a strong sense of \"entity zero\",\nbut also introduces new unpublished/experimental _values() method which sets up a columns-only query.\n- Query.order_by() and Query.group_by() take *args now (also still take a list, will likely deprecate\nin 0.5).  May want to do this for select() as well.\n- the existing \"check for False discriminiator\" \"fix\" was not working completely, added coverage\n- orphan detection was broken when the target object was a subclass of the mapper with the orphaned\nrelation, fixed that too.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c4955c05a3ab40d53c83982da612e746c662640d",
        "buggy_code": "args.append(schema.Sequence(args[0], optional=True))",
        "fixed_code": "args.append(schema.Sequence(args[0] + \"_seq\", optional=True))",
        "patch": "@@ -69,6 +69,6 @@ def Column(*args, **kw):\n     if testing.against('oracle'):\n         if 'test_needs_autoincrement' in test_opts:\n             args = list(args)\n-            args.append(schema.Sequence(args[0], optional=True)) \n+            args.append(schema.Sequence(args[0] + \"_seq\", optional=True)) \n \n     return schema.Column(*args, **kw)"
    },
    {
        "commit_id": "ef07d002d760f3efc1af6b448b552e2ed5304159",
        "commit_message": "fix datatypes #2",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ef07d002d760f3efc1af6b448b552e2ed5304159",
        "buggy_code": "Column('data', Integer, nullable=False))",
        "fixed_code": "Column('data', String(10), nullable=False))",
        "patch": "@@ -89,7 +89,7 @@ def define_tables(self, metadata):\n                    Column('info', Text))\n         t2 = Table('t2', metadata,\n                    Column('id', Integer, ForeignKey('t1.id'), primary_key=True),\n-                   Column('data', Integer, nullable=False))\n+                   Column('data', String(10), nullable=False))\n     \n     def test_polymorphic_synonym(self):\n         class T1(fixtures.Base):"
    },
    {
        "commit_id": "763575246d1586c51b24cf963ad7b0a9e9df394e",
        "commit_message": "fix insert() to have values (supports buildbot's SQLite)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/763575246d1586c51b24cf963ad7b0a9e9df394e",
        "buggy_code": "sess.execute(users.insert(user_name='Johnny'))",
        "fixed_code": "sess.execute(users.insert(), user_name='Johnny')",
        "patch": "@@ -106,7 +106,7 @@ def test_bind_from_metadata(self):\n         sess = Session()\n         mapper(User, users)\n         \n-        sess.execute(users.insert(user_name='Johnny'))\n+        sess.execute(users.insert(), user_name='Johnny')\n         \n         assert len(sess.query(User).all()) == 1\n         "
    },
    {
        "commit_id": "a4003c08832b0227a5a30a3fd06694a6b7f6258f",
        "commit_message": "- fixed bug which was preventing synonym() attributes\nfrom being used with inheritance",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a4003c08832b0227a5a30a3fd06694a6b7f6258f",
        "buggy_code": "elif isinstance(prop, SynonymProperty):",
        "fixed_code": "elif isinstance(prop, SynonymProperty) and setparent:",
        "patch": "@@ -652,7 +652,7 @@ def _compile_property(self, key, prop, init=True, setparent=True):\n             for col in prop.columns:\n                 for col in col.proxy_set:\n                     self._columntoproperty[col] = prop\n-        elif isinstance(prop, SynonymProperty):\n+        elif isinstance(prop, SynonymProperty) and setparent:\n             prop.instrument = getattr(self.class_, key, None)\n             if isinstance(prop.instrument, Mapper._CompileOnAttr):\n                 prop.instrument = object.__getattribute__(prop.instrument, 'existing_prop')"
    },
    {
        "commit_id": "d8e258410e224b5910e656539c9e15d3135d8eb7",
        "commit_message": "- adjusted generative.py test for revised error message\n- mapper with non_primary asserts primary mapper already created\n- added any()/instance compare test to query",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d8e258410e224b5910e656539c9e15d3135d8eb7",
        "buggy_code": "raise exceptions.InvalidRequestError(\"Self-referential query on '%s' property requires create_aliases=True argument.\" % str(prop))",
        "fixed_code": "raise exceptions.InvalidRequestError(\"Self-referential query on '%s' property requires aliased=True argument.\" % str(prop))",
        "patch": "@@ -522,7 +522,7 @@ def _join_to(self, keys, outerjoin=False, start=None, create_aliases=True):\n                     use_selectable = use_selectable.alias()\n             \n             if prop._is_self_referential() and not create_aliases and not use_selectable:\n-                raise exceptions.InvalidRequestError(\"Self-referential query on '%s' property requires create_aliases=True argument.\" % str(prop))\n+                raise exceptions.InvalidRequestError(\"Self-referential query on '%s' property requires aliased=True argument.\" % str(prop))\n \n             if prop.select_table not in currenttables or create_aliases or use_selectable:\n                 if prop.secondary:"
    },
    {
        "commit_id": "e193854f952e05175bcdedf45944d0ccb4e92994",
        "commit_message": "- Tweaked error messaging for unbound DDL().execute()",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e193854f952e05175bcdedf45944d0ccb4e92994",
        "buggy_code": "if isinstance(schemaitem, MetaData):",
        "fixed_code": "if isinstance(schemaitem, (MetaData, DDL)):",
        "patch": "@@ -1747,7 +1747,7 @@ def _bind_or_error(schemaitem):\n             item = '%s %r' % (name, label)\n         else:\n             item = name\n-        if isinstance(schemaitem, MetaData):\n+        if isinstance(schemaitem, (MetaData, DDL)):\n             bindable = \"the %s's .bind\" % name\n         else:\n             bindable = \"this %s's .metadata.bind\" % name"
    },
    {
        "commit_id": "47418e0f87cb432e0d813c7c30e43822fa479e9e",
        "commit_message": "- added exception wrapping/reconnect support to result set\nfetching.  Reconnect works for those databases that\nraise a catchable data error during results\n(i.e. doesn't work on MySQL) [ticket:978]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/47418e0f87cb432e0d813c7c30e43822fa479e9e",
        "buggy_code": "return 'connection already closed' in str(e)",
        "fixed_code": "return 'connection already closed' in str(e) or 'cursor already closed' in str(e)",
        "patch": "@@ -384,7 +384,7 @@ def is_disconnect(self, e):\n         if isinstance(e, self.dbapi.OperationalError):\n             return 'closed the connection' in str(e) or 'connection not open' in str(e)\n         elif isinstance(e, self.dbapi.InterfaceError):\n-            return 'connection already closed' in str(e)\n+            return 'connection already closed' in str(e) or 'cursor already closed' in str(e)\n         elif isinstance(e, self.dbapi.ProgrammingError):\n             # yes, it really says \"losed\", not \"closed\"\n             return \"losed the connection unexpectedly\" in str(e)"
    },
    {
        "commit_id": "84485fb7bbc31ecc20176c088af671b2c27311bc",
        "commit_message": "- fixed bug in result proxy where anonymously generated\ncolumn labels would not be accessible using their straight\nstring name",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/84485fb7bbc31ecc20176c088af671b2c27311bc",
        "buggy_code": "result_map[labelname.lower()] = (label.name, (label, label.obj), label.obj.type)",
        "fixed_code": "result_map[labelname.lower()] = (label.name, (label, label.obj, labelname), label.obj.type)",
        "patch": "@@ -236,7 +236,7 @@ def visit_label(self, label, result_map=None):\n         labelname = self._truncated_identifier(\"colident\", label.name)\n         \n         if result_map is not None:\n-            result_map[labelname.lower()] = (label.name, (label, label.obj), label.obj.type)\n+            result_map[labelname.lower()] = (label.name, (label, label.obj, labelname), label.obj.type)\n             \n         return \" \".join([self.process(label.obj), self.operator_string(operators.as_), self.preparer.format_label(label, labelname)])\n         "
    },
    {
        "commit_id": "979c9323dce30c3a12552668fc93958cba566cca",
        "commit_message": "- fixed bug with session.dirty when using \"mutable scalars\"\n(such as PickleTypes)\n\n- added a more descriptive error message when flushing on a\nrelation() that has non-locally-mapped columns in its primary or\nsecondary join condition",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/979c9323dce30c3a12552668fc93958cba566cca",
        "buggy_code": "or (x.__class__._class_state.has_mutable_scalars and x.state.is_modified())",
        "fixed_code": "or (x.__class__._class_state.has_mutable_scalars and x._state.is_modified())",
        "patch": "@@ -158,7 +158,7 @@ def locate_dirty(self):\n             if x._state not in self.deleted \n             and (\n                 x._state.modified\n-                or (x.__class__._class_state.has_mutable_scalars and x.state.is_modified())\n+                or (x.__class__._class_state.has_mutable_scalars and x._state.is_modified())\n             )\n             ])\n "
    },
    {
        "commit_id": "e8feacf1db658ecccf7bb1d1688662e701ad37f5",
        "commit_message": "- fixed an attribute history bug whereby assigning a new collection\nto a collection-based attribute which already had pending changes\nwould generate incorrect history [ticket:922]\n\n- fixed delete-orphan cascade bug whereby setting the same\nobject twice to a scalar attribute could log it as an orphan\n[ticket:925]\n- generative select.order_by(None) / group_by(None) was not managing to\nreset order by/group by criterion, fixed [ticket:924]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e8feacf1db658ecccf7bb1d1688662e701ad37f5",
        "buggy_code": "\"sometable.col2 AS col2, ROW_NUMBER() OVER (ORDER BY sometable.col2) AS ora_rn FROM sometable ORDER BY sometable.col2) WHERE ora_rn>20 AND ora_rn<=30\")",
        "fixed_code": "\"sometable.col2 AS col2, ROW_NUMBER() OVER (ORDER BY sometable.col2) AS ora_rn FROM sometable) WHERE ora_rn>20 AND ora_rn<=30\")",
        "patch": "@@ -59,7 +59,7 @@ def test_limit(self):\n         s = select([t]).limit(10).offset(20).order_by(t.c.col2)\n \n         self.assert_compile(s, \"SELECT col1, col2 FROM (SELECT sometable.col1 AS col1, \"\n-            \"sometable.col2 AS col2, ROW_NUMBER() OVER (ORDER BY sometable.col2) AS ora_rn FROM sometable ORDER BY sometable.col2) WHERE ora_rn>20 AND ora_rn<=30\")\n+            \"sometable.col2 AS col2, ROW_NUMBER() OVER (ORDER BY sometable.col2) AS ora_rn FROM sometable) WHERE ora_rn>20 AND ora_rn<=30\")\n \n     def test_outer_join(self):\n         table1 = table('mytable',"
    },
    {
        "commit_id": "8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "commit_message": "- changed name of TEXT to Text since its a \"generic\" type; TEXT name is\ndeprecated until 0.5.  The \"upgrading\" behavior of String to Text\nwhen no length is present is also deprecated until 0.5; will issue a\nwarning when used for CREATE TABLE statements (String with no length\nfor SQL expression purposes is still fine) [ticket:912]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "buggy_code": "sqltypes.TEXT : InfoText,",
        "fixed_code": "sqltypes.Text : InfoText,",
        "patch": "@@ -150,7 +150,7 @@ def process(value):\n     sqltypes.String : InfoString,\n     sqltypes.Binary : InfoBinary,\n     sqltypes.Boolean : InfoBoolean,\n-    sqltypes.TEXT : InfoText,\n+    sqltypes.Text : InfoText,\n     sqltypes.CHAR: InfoChar,\n }\n "
    },
    {
        "commit_id": "8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "commit_message": "- changed name of TEXT to Text since its a \"generic\" type; TEXT name is\ndeprecated until 0.5.  The \"upgrading\" behavior of String to Text\nwhen no length is present is also deprecated until 0.5; will issue a\nwarning when used for CREATE TABLE statements (String with no length\nfor SQL expression purposes is still fine) [ticket:912]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "buggy_code": "sqltypes.TEXT: MaxText,",
        "fixed_code": "sqltypes.Text: MaxText,",
        "patch": "@@ -353,7 +353,7 @@ def process(value):\n     sqltypes.String: MaxString,\n     sqltypes.Binary: MaxBlob,\n     sqltypes.Boolean: MaxBoolean,\n-    sqltypes.TEXT: MaxText,\n+    sqltypes.Text: MaxText,\n     sqltypes.CHAR: MaxChar,\n     sqltypes.TIMESTAMP: MaxTimestamp,\n     sqltypes.BLOB: MaxBlob,"
    },
    {
        "commit_id": "8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "commit_message": "- changed name of TEXT to Text since its a \"generic\" type; TEXT name is\ndeprecated until 0.5.  The \"upgrading\" behavior of String to Text\nwhen no length is present is also deprecated until 0.5; will issue a\nwarning when used for CREATE TABLE statements (String with no length\nfor SQL expression purposes is still fine) [ticket:912]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8fe38c7e956675eb9b6c859848200d8dcc7a9589",
        "buggy_code": "return typeclause.type.dialect_impl(self.dialect).get_col_spec()",
        "fixed_code": "return typeclause.type.dialect_impl(self.dialect, _for_ddl=True).get_col_spec()",
        "patch": "@@ -286,7 +286,7 @@ def visit_index(self, index, **kwargs):\n         return index.name\n \n     def visit_typeclause(self, typeclause, **kwargs):\n-        return typeclause.type.dialect_impl(self.dialect).get_col_spec()\n+        return typeclause.type.dialect_impl(self.dialect, _for_ddl=True).get_col_spec()\n \n     def visit_textclause(self, textclause, **kwargs):\n         if textclause.typemap is not None:"
    },
    {
        "commit_id": "57a5b5f58eeb66ba4926156ab3fef3d3295e9f77",
        "commit_message": "func unittest fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/57a5b5f58eeb66ba4926156ab3fef3d3295e9f77",
        "buggy_code": "self.assert_compile(select([func.max(t.c.col1)]), \"SELECT max(sometable.col1) FROM sometable\")",
        "fixed_code": "self.assert_compile(select([func.max(t.c.col1)]), \"SELECT max(sometable.col1) AS max_1 FROM sometable\")",
        "patch": "@@ -70,7 +70,7 @@ def test_function(self):\n \n         m = MetaData()\n         t = Table('sometable', m, Column('col1', Integer), Column('col2', Integer))\n-        self.assert_compile(select([func.max(t.c.col1)]), \"SELECT max(sometable.col1) FROM sometable\")\n+        self.assert_compile(select([func.max(t.c.col1)]), \"SELECT max(sometable.col1) AS max_1 FROM sometable\")\n \n \n class MiscFBTests(PersistTest):"
    },
    {
        "commit_id": "efb89f211319b19231260572422e4814639cace7",
        "commit_message": "fix not calling the result processor of PGArray subtypes. (a rather embarrasing copypaste error) [ticket:913]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/efb89f211319b19231260572422e4814639cace7",
        "buggy_code": "item_proc = self.item_type.bind_processor(dialect)",
        "fixed_code": "item_proc = self.item_type.result_processor(dialect)",
        "patch": "@@ -138,7 +138,7 @@ def convert_item(item):\n         return process\n         \n     def result_processor(self, dialect):\n-        item_proc = self.item_type.bind_processor(dialect)\n+        item_proc = self.item_type.result_processor(dialect)\n         def process(value):\n             if value is None:\n                 return value"
    },
    {
        "commit_id": "e12075efa8b5eb45a918cc150218921d88dc2bec",
        "commit_message": "fix weakref issue seen on one buildbot test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e12075efa8b5eb45a918cc150218921d88dc2bec",
        "buggy_code": "for mapper in _mapper_registry:",
        "fixed_code": "for mapper in list(_mapper_registry):",
        "patch": "@@ -604,7 +604,7 @@ def clear_mappers():\n     \"\"\"\n     mapperlib._COMPILE_MUTEX.acquire()\n     try:\n-        for mapper in _mapper_registry:\n+        for mapper in list(_mapper_registry):\n             mapper.dispose()\n     finally:\n         mapperlib._COMPILE_MUTEX.release()"
    },
    {
        "commit_id": "abc33bd32d6fd11f46bdc3e65ce97b606ce1cb89",
        "commit_message": "- more fixes to the LIMIT/OFFSET aliasing applied with Query + eagerloads,\nin this case when mapped against a select statement [ticket:904]\n- _hide_froms logic in expression totally localized to Join class, including search through previous clone sources\n- removed \"stop_on\" from main visitors, not used\n- \"stop_on\" in AbstractClauseProcessor part of constructor, ClauseAdapter sets it up based on given clause\n- fixes to is_derived_from() to take previous clone sources into account, Alias takes self + cloned sources into account. this is ultimately what the #904 bug was.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/abc33bd32d6fd11f46bdc3e65ce97b606ce1cb89",
        "buggy_code": "whereclause = sql_util.ClauseAdapter(from_obj).traverse(whereclause, stop_on=util.Set([from_obj]))",
        "fixed_code": "whereclause = sql_util.ClauseAdapter(from_obj).traverse(whereclause)",
        "patch": "@@ -919,7 +919,7 @@ def _compile_context(self):\n         adapt_criterion = self.table not in self._get_joinable_tables()\n \n         if not adapt_criterion and whereclause is not None and (self.mapper is not self.select_mapper):\n-            whereclause = sql_util.ClauseAdapter(from_obj).traverse(whereclause, stop_on=util.Set([from_obj]))\n+            whereclause = sql_util.ClauseAdapter(from_obj).traverse(whereclause)\n \n         # TODO: mappers added via add_entity(), adapt their queries also, \n         # if those mappers are polymorphic"
    },
    {
        "commit_id": "8ce3f5d6997be2d28e88f2ed982454e7b4d6e3fa",
        "commit_message": "Fix bad example of Firebird test DB\nUse an absolute path rather than a relative one, and the out-of-the-box\nsysdba password. This is just to avoid confusing new testers, that should\nadd a db.firebird entry in their ~/satest.cfg anyway.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8ce3f5d6997be2d28e88f2ed982454e7b4d6e3fa",
        "buggy_code": "firebird=firebird://sysdba:s@localhost/tmp/test.fdb",
        "fixed_code": "firebird=firebird://sysdba:masterkey@localhost//tmp/test.fdb",
        "patch": "@@ -20,7 +20,7 @@\n oracle=oracle://scott:tiger@127.0.0.1:1521\n oracle8=oracle://scott:tiger@127.0.0.1:1521/?use_ansi=0\n mssql=mssql://scott:tiger@SQUAWK\\\\SQLEXPRESS/test\n-firebird=firebird://sysdba:s@localhost/tmp/test.fdb\n+firebird=firebird://sysdba:masterkey@localhost//tmp/test.fdb\n maxdb=maxdb://MONA:RED@/maxdb1\n \"\"\"\n "
    },
    {
        "commit_id": "6f6a0981351697192651ef7437fdc451c1ad71ab",
        "commit_message": "bug fixes\n\n- the call to self.get() in get_committed_state was missing a required parameter, rendered sqlalchemy unusable in certain situations\n\n- fixed a large bug in dynamic_loader() where the query criterion wasn't generated correctly if other relations existed to dynamic_loader's argument",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f6a0981351697192651ef7437fdc451c1ad71ab",
        "buggy_code": "self.get()",
        "fixed_code": "self.get(state)",
        "patch": "@@ -263,7 +263,7 @@ def set(self, state, value, initiator):\n     def get_committed_value(self, state):\n         if state.committed_state is not None:\n             if self.key not in state.committed_state:\n-                self.get()\n+                self.get(state)\n             return state.committed_state.get(self.key)\n         else:\n             return None"
    },
    {
        "commit_id": "6f6a0981351697192651ef7437fdc451c1ad71ab",
        "commit_message": "bug fixes\n\n- the call to self.get() in get_committed_state was missing a required parameter, rendered sqlalchemy unusable in certain situations\n\n- fixed a large bug in dynamic_loader() where the query criterion wasn't generated correctly if other relations existed to dynamic_loader's argument",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6f6a0981351697192651ef7437fdc451c1ad71ab",
        "buggy_code": "return sess.query(self.attr.target_mapper).with_parent(instance)",
        "fixed_code": "return sess.query(self.attr.target_mapper).with_parent(instance, self.attr.key)",
        "patch": "@@ -117,7 +117,7 @@ def _clone(self, sess=None):\n                 except exceptions.InvalidRequestError:\n                     raise exceptions.InvalidRequestError(\"Parent instance %s is not bound to a Session, and no contextual session is established; lazy load operation of attribute '%s' cannot proceed\" % (mapperutil.instance_str(instance), self.attr.key))\n \n-        return sess.query(self.attr.target_mapper).with_parent(instance)\n+        return sess.query(self.attr.target_mapper).with_parent(instance, self.attr.key)\n \n     def assign(self, collection):\n         instance = self.state.obj()"
    },
    {
        "commit_id": "7bf90e2f4dc211423a409a747a2392922ed7a9c7",
        "commit_message": "fix to unique bind params, you *can* use the same unique bindparam multiple times\nin a statement.  the collision check is strictly detecting non-unique's that happen to have\nthe same name.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bf90e2f4dc211423a409a747a2392922ed7a9c7",
        "buggy_code": "if existing.unique or bindparam.unique:",
        "fixed_code": "if existing is not bindparam and (existing.unique or bindparam.unique):",
        "patch": "@@ -376,7 +376,7 @@ def visit_bindparam(self, bindparam, **kwargs):\n         name = self._truncate_bindparam(bindparam)\n         if name in self.binds:\n             existing = self.binds[name]\n-            if existing.unique or bindparam.unique:\n+            if existing is not bindparam and (existing.unique or bindparam.unique):\n                 raise exceptions.CompileError(\"Bind parameter '%s' conflicts with unique bind parameter of the same name\" % bindparam.key)\n         self.binds[bindparam.key] = self.binds[name] = bindparam\n         return self.bindparam_string(name)"
    },
    {
        "commit_id": "33f62587cd5096122d1474c03e0194344834a651",
        "commit_message": "fixed key error when no pks could be located",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/33f62587cd5096122d1474c03e0194344834a651",
        "buggy_code": "if len(self._pks_by_table[self.mapped_table]) == 0:",
        "fixed_code": "if self.mapped_table not in self._pks_by_table or len(self._pks_by_table[self.mapped_table]) == 0:",
        "patch": "@@ -418,7 +418,7 @@ def _compile_pks(self):\n                     self._pks_by_table[k.table] = util.OrderedSet()\n                 self._pks_by_table[k.table].add(k)\n                 \n-        if len(self._pks_by_table[self.mapped_table]) == 0:\n+        if self.mapped_table not in self._pks_by_table or len(self._pks_by_table[self.mapped_table]) == 0:\n             raise exceptions.ArgumentError(\"Could not assemble any primary key columns for mapped table '%s'\" % (self.mapped_table.name))\n \n         if self.inherits is not None and not self.concrete and not self.primary_key_argument:"
    },
    {
        "commit_id": "e9abaaef9f682941aa424db73e408de3ec5462da",
        "commit_message": "- adjustment to the previous checkin regarding inheritance to not conflict with globals\n- fix to self-referential eager loading such that if the same mapped\ninstance appears in two or more distinct sets of columns in the same\nresult set, its eagerly loaded collection will be populated regardless\nof whether or not all of the rows contain a set of \"eager\" columns for\nthat collection.  this would also show up as a KeyError when fetching\nresults with join_depth turned on.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e9abaaef9f682941aa424db73e408de3ec5462da",
        "buggy_code": "self._eager_loaders = util.Set(chain(*[mapper._eager_loaders for mapper in [m for m in self.mapper.iterate_to_root()]]))",
        "fixed_code": "self._eager_loaders = util.Set(chain(*[mp._eager_loaders for mp in [m for m in self.mapper.iterate_to_root()]]))",
        "patch": "@@ -46,7 +46,7 @@ def __init__(self, class_or_mapper, session=None, entity_name=None):\n         self._populate_existing = False\n         self._version_check = False\n         self._autoflush = True\n-        self._eager_loaders = util.Set(chain(*[mapper._eager_loaders for mapper in [m for m in self.mapper.iterate_to_root()]]))\n+        self._eager_loaders = util.Set(chain(*[mp._eager_loaders for mp in [m for m in self.mapper.iterate_to_root()]]))\n         self._attributes = {}\n         self._current_path = ()\n         self._primary_adapter=None"
    },
    {
        "commit_id": "724eb54efd498a772dc3d4db209c50592f2a158c",
        "commit_message": "- figured out a way to get previous oracle behavior back.  the ROWID thing\nis still a pretty thorny issue.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/724eb54efd498a772dc3d4db209c50592f2a158c",
        "buggy_code": "orderby = select.oid_column",
        "fixed_code": "orderby = list(select.oid_column.proxies)[0]",
        "patch": "@@ -646,7 +646,7 @@ def visit_select(self, select, **kwargs):\n             # to use ROW_NUMBER(), an ORDER BY is required.\n             orderby = self.process(select._order_by_clause)\n             if not orderby:\n-                orderby = select.oid_column\n+                orderby = list(select.oid_column.proxies)[0]\n                 orderby = self.process(orderby)\n                 \n             oldselect = select"
    },
    {
        "commit_id": "5a1863d092e07ae1d052af54eb0ac7a46400e399",
        "commit_message": "- also added proxying of save_or_update to scoped sessions.\n- session.update() raises an error when updating an instance that is already in the session with a different identity\n- adjusted zoomarks lower limits so I can get a nice clean run",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5a1863d092e07ae1d052af54eb0ac7a46400e399",
        "buggy_code": "for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified', '__contains__', '__iter__'):",
        "fixed_code": "for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'save_or_update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified', '__contains__', '__iter__'):",
        "patch": "@@ -73,7 +73,7 @@ def instrument(name):\n     def do(self, *args, **kwargs):\n         return getattr(self.registry(), name)(*args, **kwargs)\n     return do\n-for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified', '__contains__', '__iter__'):\n+for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'save_or_update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified', '__contains__', '__iter__'):\n     setattr(ScopedSession, meth, instrument(meth))\n \n def makeprop(name):"
    },
    {
        "commit_id": "5a1863d092e07ae1d052af54eb0ac7a46400e399",
        "commit_message": "- also added proxying of save_or_update to scoped sessions.\n- session.update() raises an error when updating an instance that is already in the session with a different identity\n- adjusted zoomarks lower limits so I can get a nice clean run",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5a1863d092e07ae1d052af54eb0ac7a46400e399",
        "buggy_code": "i1.company = c1",
        "fixed_code": "i1.company = a",
        "patch": "@@ -652,7 +652,7 @@ def testtwo(self):\n         # set up an invoice\n         i1 = Invoice()\n         i1.date = datetime.datetime.now()\n-        i1.company = c1\n+        i1.company = a\n \n         item1 = Item()\n         item1.code = 'aaaa'"
    },
    {
        "commit_id": "2d3f907ac0a23d410ecc3c74afc6d63bd2abc186",
        "commit_message": "Fixed a truncation error when re-assigning a subset of a collection\n(obj.relation = obj.relation[1:]) [ticket:834]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2d3f907ac0a23d410ecc3c74afc6d63bd2abc186",
        "buggy_code": "l = sess.query(User).select()",
        "fixed_code": "l = sess.query(User).all()",
        "patch": "@@ -871,7 +871,7 @@ def test_external_columns_good(self):\n         })    \n \n         sess = create_session()\n-        l = sess.query(User).select()\n+        l = sess.query(User).all()\n         assert [\n             User(id=7, concat=14, count=1),\n             User(id=8, concat=16, count=3),"
    },
    {
        "commit_id": "206c0b9792b02a0d77d92e679952cb2d0465cede",
        "commit_message": "- fix to \"row switch\" behavior, i.e. when an INSERT/DELETE is combined into a\n  single UPDATE; many-to-many relations on the parent object update properly.\n  [ticket:841]\n- it's an error to session.save() an object which is already persistent\n  [ticket:840]\n- changed a bunch of repr(obj) calls in session.py exceptions to use mapperutil.instance_str()",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/206c0b9792b02a0d77d92e679952cb2d0465cede",
        "buggy_code": "uowtransaction.unregister_object(existing)",
        "fixed_code": "uowtransaction.set_row_switch(existing)",
        "patch": "@@ -968,7 +968,7 @@ def save_obj(self, objects, uowtransaction, postupdate=False, post_update_cols=N\n                     raise exceptions.FlushError(\"New instance %s with identity key %s conflicts with persistent instance %s\" % (mapperutil.instance_str(obj), str(instance_key), mapperutil.instance_str(existing)))\n                 if self.__should_log_debug:\n                     self.__log_debug(\"detected row switch for identity %s.  will update %s, remove %s from transaction\" % (instance_key, mapperutil.instance_str(obj), mapperutil.instance_str(existing)))\n-                uowtransaction.unregister_object(existing)\n+                uowtransaction.set_row_switch(existing)\n             if has_identity(obj):\n                 if obj._instance_key != instance_key:\n                     raise exceptions.FlushError(\"Can't change the identity of instance %s in session (existing identity: %s; new identity: %s)\" % (mapperutil.instance_str(obj), obj._instance_key, instance_key))"
    },
    {
        "commit_id": "9f856b88f6695318e32842a88fddd8f645e5cda5",
        "commit_message": "- attempted to add a test for #622 / #751, but cant reproduce the failing condition\n- fixed major oracle bug introduced by r3561, since colnames come back as unicode now,\nneed to encode keys in setinputsizes() step",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9f856b88f6695318e32842a88fddd8f645e5cda5",
        "buggy_code": "inputsizes[key] = dbtype",
        "fixed_code": "inputsizes[key.encode(self.dialect.encoding)] = dbtype",
        "patch": "@@ -270,7 +270,7 @@ def set_input_sizes(self):\n                     typeengine = params.get_type(key)\n                     dbtype = typeengine.dialect_impl(self.dialect).get_dbapi_type(self.dialect.dbapi)\n                     if dbtype is not None:\n-                        inputsizes[key] = dbtype\n+                        inputsizes[key.encode(self.dialect.encoding)] = dbtype\n             self.cursor.setinputsizes(**inputsizes)\n \n     def _process_defaults(self):"
    },
    {
        "commit_id": "2821adc57ca46c9310ded691729843a124ddca92",
        "commit_message": "Fix broken update/delete queries on MSSQL when tables have a schema",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2821adc57ca46c9310ded691729843a124ddca92",
        "buggy_code": "if column.table is not None:",
        "fixed_code": "if column.table is not None and not self.isupdate and not self.isdelete:",
        "patch": "@@ -896,7 +896,7 @@ def visit_alias(self, alias, **kwargs):\n         return super(MSSQLCompiler, self).visit_alias(alias, **kwargs)\n \n     def visit_column(self, column):\n-        if column.table is not None:\n+        if column.table is not None and not self.isupdate and not self.isdelete:\n             # translate for schema-qualified table aliases\n             t = self._schema_aliased_table(column.table)\n             if t is not None:"
    },
    {
        "commit_id": "b27ddac20af6e98fedbd2d427088e9056b882f2e",
        "commit_message": "- fix to anonymous label generation of long table/column names [ticket:806]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b27ddac20af6e98fedbd2d427088e9056b882f2e",
        "buggy_code": "truncname = name[0:self.dialect.max_identifier_length - 6] + \"_\" + hex(counter)[2:]",
        "fixed_code": "truncname = anonname[0:self.dialect.max_identifier_length - 6] + \"_\" + hex(counter)[2:]",
        "patch": "@@ -415,7 +415,7 @@ def _truncated_identifier(self, ident_class, name):\n \n         if len(anonname) > self.dialect.max_identifier_length:\n             counter = self.generated_ids.get(ident_class, 1)\n-            truncname = name[0:self.dialect.max_identifier_length - 6] + \"_\" + hex(counter)[2:]\n+            truncname = anonname[0:self.dialect.max_identifier_length - 6] + \"_\" + hex(counter)[2:]\n             self.generated_ids[ident_class] = counter + 1\n         else:\n             truncname = anonname"
    },
    {
        "commit_id": "6b5543995b66b524097ad540a0a3f9dfd9eb9413",
        "commit_message": "- added session.is_modified(obj) method; performs the same \"history\" comparison operation\n  as occurs within a flush operation; setting include_collections=False gives the same\n  result as is used when the flush determines whether or not to issue an UPDATE for the\n  instance's row.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6b5543995b66b524097ad540a0a3f9dfd9eb9413",
        "buggy_code": "for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind'):",
        "fixed_code": "for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified'):",
        "patch": "@@ -69,7 +69,7 @@ def instrument(name):\n     def do(self, *args, **kwargs):\n         return getattr(self.registry(), name)(*args, **kwargs)\n     return do\n-for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind'):\n+for meth in ('get', 'load', 'close', 'save', 'commit', 'update', 'flush', 'query', 'delete', 'merge', 'clear', 'refresh', 'expire', 'expunge', 'rollback', 'begin', 'begin_nested', 'connection', 'execute', 'scalar', 'get_bind', 'is_modified'):\n     setattr(ScopedSession, meth, instrument(meth))\n \n def makeprop(name):"
    },
    {
        "commit_id": "d6c6f72274b5754c6d408870e6796e4b622f7eb8",
        "commit_message": "fix to oracle sequence exec",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d6c6f72274b5754c6d408870e6796e4b622f7eb8",
        "buggy_code": "return self.execute_string(\"SELECT \" + self.dialect.identifier_preparer.format_sequence(seq) + \".nextval FROM DUAL\")",
        "fixed_code": "return self.execute_string(\"SELECT \" + self.dialect.identifier_preparer.format_sequence(seq) + \".nextval FROM DUAL\", {})",
        "patch": "@@ -673,7 +673,7 @@ def visit_sequence(self, sequence):\n \n class OracleDefaultRunner(base.DefaultRunner):\n     def visit_sequence(self, seq):\n-        return self.execute_string(\"SELECT \" + self.dialect.identifier_preparer.format_sequence(seq) + \".nextval FROM DUAL\")\n+        return self.execute_string(\"SELECT \" + self.dialect.identifier_preparer.format_sequence(seq) + \".nextval FROM DUAL\", {})\n \n class OracleIdentifierPreparer(compiler.IdentifierPreparer):\n     def format_savepoint(self, savepoint):"
    },
    {
        "commit_id": "83d05aa5aff0b27027fb10986390d898a3153eb2",
        "commit_message": "engine.url cleanups [ticket:742]\n- translate_connect_args can now take kw args or the classic list\n- in-tree dialects updated to supply their overrides as keywords\n- tweaked url parsing in the spirit of the #742 patch, more or less",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/83d05aa5aff0b27027fb10986390d898a3153eb2",
        "buggy_code": "opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])",
        "fixed_code": "opts = url.translate_connect_args(username='user')",
        "patch": "@@ -116,7 +116,7 @@ def dbapi(cls):\n     dbapi = classmethod(dbapi)\n     \n     def create_connect_args(self, url):\n-        opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])\n+        opts = url.translate_connect_args(username='user')\n         if opts.get('port'):\n             opts['host'] = \"%s/%s\" % (opts['host'], opts['port'])\n             del opts['port']"
    },
    {
        "commit_id": "83d05aa5aff0b27027fb10986390d898a3153eb2",
        "commit_message": "engine.url cleanups [ticket:742]\n- translate_connect_args can now take kw args or the classic list\n- in-tree dialects updated to supply their overrides as keywords\n- tweaked url parsing in the spirit of the #742 patch, more or less",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/83d05aa5aff0b27027fb10986390d898a3153eb2",
        "buggy_code": "opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])",
        "fixed_code": "opts = url.translate_connect_args(username='user')",
        "patch": "@@ -447,7 +447,7 @@ def dbapi(cls, module_name=None):\n     dbapi = classmethod(dbapi)\n     \n     def create_connect_args(self, url):\n-        opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])\n+        opts = url.translate_connect_args(username='user')\n         opts.update(url.query)\n         if 'auto_identity_insert' in opts:\n             self.auto_identity_insert = bool(int(opts.pop('auto_identity_insert')))"
    },
    {
        "commit_id": "83d05aa5aff0b27027fb10986390d898a3153eb2",
        "commit_message": "engine.url cleanups [ticket:742]\n- translate_connect_args can now take kw args or the classic list\n- in-tree dialects updated to supply their overrides as keywords\n- tweaked url parsing in the spirit of the #742 patch, more or less",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/83d05aa5aff0b27027fb10986390d898a3153eb2",
        "buggy_code": "opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])",
        "fixed_code": "opts = url.translate_connect_args(username='user')",
        "patch": "@@ -240,7 +240,7 @@ def dbapi(cls):\n     dbapi = classmethod(dbapi)\n     \n     def create_connect_args(self, url):\n-        opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])\n+        opts = url.translate_connect_args(username='user')\n         if 'port' in opts:\n             opts['port'] = int(opts['port'])\n         opts.update(url.query)"
    },
    {
        "commit_id": "cdde69e7bdef6d9a8a074d1051e099e217d33acf",
        "commit_message": "Fix for scoped_session's `mapper(extension=<scalar>)` [ticket:760]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cdde69e7bdef6d9a8a074d1051e099e217d33acf",
        "buggy_code": "extension = to_list(kwargs.setdefault('extension', []))",
        "fixed_code": "kwargs['extension'] = extension = to_list(kwargs.get('extension', []))",
        "patch": "@@ -51,7 +51,7 @@ def mapper(self, *args, **kwargs):\n         \n         from sqlalchemy.orm import mapper\n         validate = kwargs.pop('validate', False)\n-        extension = to_list(kwargs.setdefault('extension', []))\n+        kwargs['extension'] = extension = to_list(kwargs.get('extension', []))\n         if validate:\n             extension.append(self.extension.validating())\n         else:"
    },
    {
        "commit_id": "433b34f036f8a8617d833456d6d882409a45ad83",
        "commit_message": "Fix for reflecting mysql keys that have USING",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/433b34f036f8a8617d833456d6d882409a45ad83",
        "buggy_code": "r'(?: +USING +(?P<using>\\S+) +)?'",
        "fixed_code": "r'(?: +USING +(?P<using>\\S+))?'",
        "patch": "@@ -2186,7 +2186,7 @@ def _prep_regexes(self):\n             r'  '\n             r'(?:(?P<type>\\S+) )?KEY +'\n             r'(?:%(iq)s(?P<name>(?:%(esc_fq)s|[^%(fq)s])+)%(fq)s)?'\n-            r'(?: +USING +(?P<using>\\S+) +)?'\n+            r'(?: +USING +(?P<using>\\S+))?'\n             r' +\\((?P<columns>.+?)\\)'\n             r'(?: +KEY_BLOCK_SIZE +(?P<keyblock>\\S+))?'\n             r'(?: +WITH PARSER +(?P<parser>\\S+))?'"
    },
    {
        "commit_id": "5a1db6658882efbeba99d5f079cec2fdab1d880b",
        "commit_message": "ReST docstring fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/5a1db6658882efbeba99d5f079cec2fdab1d880b",
        "buggy_code": "complex queries like the or_ above or non-equality based comparisons this way.",
        "fixed_code": "complex queries like the or\\_ above or non-equality based comparisons this way.",
        "patch": "@@ -78,7 +78,7 @@\n \n filter_by is like filter, but takes kwargs instead of full clause expressions.\n This makes it more concise for simple queries like this, but you can't do\n-complex queries like the or_ above or non-equality based comparisons this way.\n+complex queries like the or\\_ above or non-equality based comparisons this way.\n \n Full query documentation\n ------------------------"
    },
    {
        "commit_id": "ab540ec6019c5431a7629a5ddcd02915442c6b96",
        "commit_message": "Fix broken imports",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/ab540ec6019c5431a7629a5ddcd02915442c6b96",
        "buggy_code": "import datetime, random, warnings, re",
        "fixed_code": "import datetime, random, warnings, re, sys, operator",
        "patch": "@@ -37,7 +37,7 @@\n   \n \"\"\"\n \n-import datetime, random, warnings, re\n+import datetime, random, warnings, re, sys, operator\n \n from sqlalchemy import util, sql, schema, exceptions\n from sqlalchemy.sql import compiler, expression"
    },
    {
        "commit_id": "46535b25a642b596c1f43217fe00f6205bcc0ecb",
        "commit_message": "use threading.local if available\nspeed up ThreadLocal for python 2.3 [ticket:743]\nclean in topo (in patch from [ticket:743])",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/46535b25a642b596c1f43217fe00f6205bcc0ecb",
        "buggy_code": "help=\"Engine strategy (plain or threadlocal, defaults toplain)\")",
        "fixed_code": "help=\"Engine strategy (plain or threadlocal, defaults to plain)\")",
        "patch": "@@ -109,7 +109,7 @@ def _engine_strategy(options, opt_str, value, parser):\n     help=\"Use mock pool (asserts only one connection used)\")\n opt(\"--enginestrategy\", action=\"callback\", type=\"string\",\n     callback=_engine_strategy,\n-    help=\"Engine strategy (plain or threadlocal, defaults toplain)\")\n+    help=\"Engine strategy (plain or threadlocal, defaults to plain)\")\n opt(\"--reversetop\", action=\"store_true\", dest=\"reversetop\", default=False,\n     help=\"Reverse the collection ordering for topological sorts (helps \"\n           \"reveal dependency issues)\")"
    },
    {
        "commit_id": "fddc687348fe5e5b36b3207e5ff454bb901b64bc",
        "commit_message": "fix hasattr typo [ticket:744]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fddc687348fe5e5b36b3207e5ff454bb901b64bc",
        "buggy_code": "if e.hasattr('dispose'):",
        "fixed_code": "if hasattr(e, 'dispose'):",
        "patch": "@@ -1352,7 +1352,7 @@ def dispose(self):\n         \"\"\"Dispose any and all ``Engines`` to which this ``ThreadLocalMetaData`` has been connected.\"\"\"\n \n         for e in self.__engines.values():\n-            if e.hasattr('dispose'):\n+            if hasattr(e, 'dispose'):\n                 e.dispose()\n \n "
    },
    {
        "commit_id": "62410adeb9f6a0e01de35680ff77cc15ae994995",
        "commit_message": "- fixed compiler bug in mssql\n- marked as unsupported for mssql all two-phase and nested transcation tests\n- marked as unsupported for mssql various transactional/session tests which require two connections looking at uncommitted/external data at the same time (ms-sql cant handle it)\n- put better explicit closeout step in unitofwork.py tests to appease ms-sqls hard locking",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/62410adeb9f6a0e01de35680ff77cc15ae994995",
        "buggy_code": "super(MSSQLCompiler, self).visit_function(func)",
        "fixed_code": "return super(MSSQLCompiler, self).visit_function(func)",
        "patch": "@@ -897,7 +897,7 @@ def label_select_column(self, select, column):\n                           }\n     def visit_function(self, func):\n         func.name = self.function_rewrites.get(func.name, func.name)\n-        super(MSSQLCompiler, self).visit_function(func)            \n+        return super(MSSQLCompiler, self).visit_function(func)            \n \n     def for_update_clause(self, select):\n         # \"FOR UPDATE\" is only allowed on \"DECLARE CURSOR\" which SQLAlchemy doesn't use"
    },
    {
        "commit_id": "2d8b5bb4f36e5624f25b170391fe42d3bfbeb623",
        "commit_message": "Added an exception hierarchy shadowing DB-API exc types\nNo more generic SQLErrors wrappers- the shadow type matching the DB-API error is raised. [ticket:706]\nSQLError is now (also) DBAPIError.\nDBAPIError and subtype constructors will refuse to wrap a SystemExit or KeyboardInterrupt, returningthe original interrupt exception instead of a new instance. [ticket:689]\nAdded a passthroughs for SE/KI exceptions in a couple except-and-discard situations",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2d8b5bb4f36e5624f25b170391fe42d3bfbeb623",
        "buggy_code": "raise exceptions.DBAPIError(\"Connection failed\", e)",
        "fixed_code": "raise exceptions.DBAPIError(None, None, e)",
        "patch": "@@ -71,7 +71,7 @@ def connect():\n                 try:\n                     return dbapi.connect(*cargs, **cparams)\n                 except Exception, e:\n-                    raise exceptions.DBAPIError(\"Connection failed\", e)\n+                    raise exceptions.DBAPIError(None, None, e)\n             creator = kwargs.pop('creator', connect)\n \n             poolclass = (kwargs.pop('poolclass', None) or"
    },
    {
        "commit_id": "e37b3c39208830a6950e4426103da68203e41322",
        "commit_message": "fix url for 04 docs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e37b3c39208830a6950e4426103da68203e41322",
        "buggy_code": "__ http://www.sqlalchemy.org/docs/documentation.myt#sql_textual",
        "fixed_code": "__ http://www.sqlalchemy.org/docs/04/sqlexpression.html#sql_text",
        "patch": "@@ -240,7 +240,7 @@\n \n SqlSoup works fine with SQLAlchemy's `text block support`__.\n \n-__ http://www.sqlalchemy.org/docs/documentation.myt#sql_textual\n+__ http://www.sqlalchemy.org/docs/04/sqlexpression.html#sql_text\n \n You can also access the SqlSoup's `engine` attribute to compose SQL\n directly.  The engine's ``execute`` method corresponds to the one of a"
    },
    {
        "commit_id": "1dba9d48c28d59523f952d5e6b2f1425450cd7db",
        "commit_message": "bind/connectable compat, allow .bind = None\nfix import for DBAPIError raise",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1dba9d48c28d59523f952d5e6b2f1425450cd7db",
        "buggy_code": "raise DBAPIError(\"Unsupported paramstyle '%s'\" % self._paramstyle)",
        "fixed_code": "raise exceptions.DBAPIError(\"Unsupported paramstyle '%s'\" % self._paramstyle)",
        "patch": "@@ -142,7 +142,7 @@ def _figure_paramstyle(self, paramstyle=None, default='named'):\n             # to appropriate character upon compilation\n             self.positional = True\n         else:\n-            raise DBAPIError(\"Unsupported paramstyle '%s'\" % self._paramstyle)\n+            raise exceptions.DBAPIError(\"Unsupported paramstyle '%s'\" % self._paramstyle)\n \n     def _get_ischema(self):\n         if self._ischema is None:"
    },
    {
        "commit_id": "fb6906bb798a8f63303e6bcdbcc56121ff0fe5b1",
        "commit_message": "Fix setup for standalone sequence test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fb6906bb798a8f63303e6bcdbcc56121ff0fe5b1",
        "buggy_code": "s = Sequence(\"my_sequence\", metadata=testbase.db)",
        "fixed_code": "s = Sequence(\"my_sequence\", metadata=MetaData(testbase.db))",
        "patch": "@@ -224,7 +224,7 @@ def testsequence(self):\n    \n     @testbase.supported('postgres', 'oracle')\n     def teststandalone(self):\n-        s = Sequence(\"my_sequence\", metadata=testbase.db)\n+        s = Sequence(\"my_sequence\", metadata=MetaData(testbase.db))\n         s.create()\n         try:\n             x = s.execute()"
    },
    {
        "commit_id": "91e511cce53792f6348a5b471e84c67dea15eb9a",
        "commit_message": "Correct error message for concurrent delete exceptions, fixes #586",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/91e511cce53792f6348a5b471e84c67dea15eb9a",
        "buggy_code": "raise exceptions.ConcurrentModificationError(\"Updated rowcount %d does not match number of objects updated %d\" % (c.cursor.rowcount, len(delete)))",
        "fixed_code": "raise exceptions.ConcurrentModificationError(\"Updated rowcount %d does not match number of objects updated %d\" % (c.rowcount, len(delete)))",
        "patch": "@@ -1317,7 +1317,7 @@ def comparator(a, b):\n                 statement = table.delete(clause)\n                 c = connection.execute(statement, delete)\n                 if c.supports_sane_rowcount() and c.rowcount != len(delete):\n-                    raise exceptions.ConcurrentModificationError(\"Updated rowcount %d does not match number of objects updated %d\" % (c.cursor.rowcount, len(delete)))\n+                    raise exceptions.ConcurrentModificationError(\"Updated rowcount %d does not match number of objects updated %d\" % (c.rowcount, len(delete)))\n \n         for obj in deleted_objects:\n             for mapper in object_mapper(obj).iterate_to_root():"
    },
    {
        "commit_id": "9b1b4e0cc09b7033e8ce0852567312a279c50b9b",
        "commit_message": "further refinements to the previous session.expunge() fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9b1b4e0cc09b7033e8ce0852567312a279c50b9b",
        "buggy_code": "if hasattr(obj, \"_instance_key\") and obj._instance_key in self.identity_map:",
        "fixed_code": "if hasattr(obj, \"_instance_key\"):",
        "patch": "@@ -108,7 +108,7 @@ def __init__(self, identity_map=None, weak_identity_map=False):\n     echo = logging.echo_property()\n \n     def _remove_deleted(self, obj):\n-        if hasattr(obj, \"_instance_key\") and obj._instance_key in self.identity_map:\n+        if hasattr(obj, \"_instance_key\"):\n             del self.identity_map[obj._instance_key]\n         try:\n             self.deleted.remove(obj)"
    },
    {
        "commit_id": "0c64a8ab5c05eb830f40980ded7fab541b1ca932",
        "commit_message": "fixed small expunge() bug where object might not be present in session",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/0c64a8ab5c05eb830f40980ded7fab541b1ca932",
        "buggy_code": "if hasattr(obj, \"_instance_key\"):",
        "fixed_code": "if hasattr(obj, \"_instance_key\") and obj._instance_key in self.identity_map:",
        "patch": "@@ -108,7 +108,7 @@ def __init__(self, identity_map=None, weak_identity_map=False):\n     echo = logging.echo_property()\n \n     def _remove_deleted(self, obj):\n-        if hasattr(obj, \"_instance_key\"):\n+        if hasattr(obj, \"_instance_key\") and obj._instance_key in self.identity_map:\n             del self.identity_map[obj._instance_key]\n         try:\n             self.deleted.remove(obj)"
    },
    {
        "commit_id": "af611b101842ee9482ddd901762fd73a6fe62364",
        "commit_message": "- ForeignKey to a table in a schema thats not the default schema\nrequires the schema to be explicit; i.e. ForeignKey('alt_schema.users.id')\n- the fix in \"schema\" above fixes postgres reflection of foreign keys from an\nalt-schema table to a public schema table",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/af611b101842ee9482ddd901762fd73a6fe62364",
        "buggy_code": "schema = parenttable.schema",
        "fixed_code": "schema = None",
        "patch": "@@ -701,7 +701,7 @@ def _init_column(self):\n                     raise exceptions.ArgumentError(\"Invalid foreign key column specification: \" + self._colspec)\n                 if m.group(3) is None:\n                     (tname, colname) = m.group(1, 2)\n-                    schema = parenttable.schema\n+                    schema = None\n                 else:\n                     (schema,tname,colname) = m.group(1,2,3)\n                 table = Table(tname, parenttable.metadata, mustexist=True, schema=schema)"
    },
    {
        "commit_id": "7bb67e363dd6debbe065248c07bc968e96eb4c58",
        "commit_message": "fix to \"populate_existing\"",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7bb67e363dd6debbe065248c07bc968e96eb4c58",
        "buggy_code": "if isnew or populate_existing:",
        "fixed_code": "if isnew or context.populate_existing:",
        "patch": "@@ -99,7 +99,7 @@ def append_result(self, mapper, selectcontext, row, instance, identitykey, resul\n         if instance.parent_id is None:\n             result.append(instance)\n         else:\n-            if isnew or populate_existing:\n+            if isnew or context.populate_existing:\n                 parentnode = selectcontext.identity_map[mapper.identity_key(instance.parent_id)]\n                 parentnode.children.append_without_event(instance)\n         # fire off lazy loader before the instance is part of the session"
    },
    {
        "commit_id": "01e9fa8f47a79fecb89913f1637fa9ef03ab6e22",
        "commit_message": "- fix to the \"column_prefix\" flag so that the mapper does not\ntrip over synonyms (and others) that are named after the column's actual\n\"key\" (since, column_prefix means \"dont use the key\").",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/01e9fa8f47a79fecb89913f1637fa9ef03ab6e22",
        "buggy_code": "prop = self.__props.get(column.key, None)",
        "fixed_code": "prop = self.__props.get(column_key, None)",
        "patch": "@@ -555,7 +555,7 @@ def _compile_properties(self):\n                 self.columns[column.key] = self.select_table.corresponding_column(column, keys_ok=True, raiseerr=True)\n \n             column_key = (self.column_prefix or '') + column.key\n-            prop = self.__props.get(column.key, None)\n+            prop = self.__props.get(column_key, None)\n             if prop is None:\n                 prop = ColumnProperty(column)\n                 self.__props[column_key] = prop"
    },
    {
        "commit_id": "2268526d4c443c27eb9e970967155768ad0a93de",
        "commit_message": "better error message for NoSuchColumnError, fix ticket #607",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/2268526d4c443c27eb9e970967155768ad0a93de",
        "buggy_code": "raise exceptions.NoSuchColumnError(\"Could not locate column in row for column '%s'\" % (repr(key)))",
        "fixed_code": "raise exceptions.NoSuchColumnError(\"Could not locate column in row for column '%s'\" % (str(key)))",
        "patch": "@@ -928,7 +928,7 @@ def _convert_key(self, key):\n                     rec = self.__props[label]\n                         \n             if not \"rec\" in locals():\n-                raise exceptions.NoSuchColumnError(\"Could not locate column in row for column '%s'\" % (repr(key)))\n+                raise exceptions.NoSuchColumnError(\"Could not locate column in row for column '%s'\" % (str(key)))\n \n             self.__key_cache[key] = rec\n             return rec"
    },
    {
        "commit_id": "4302d162ae608ab975f6dfc34350c4883bc18747",
        "commit_message": "documented eager load fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4302d162ae608ab975f6dfc34350c4883bc18747",
        "buggy_code": "metadata = BoundMetaData('sqlite://', echo='True')",
        "fixed_code": "metadata = BoundMetaData('sqlite://', echo=True)",
        "patch": "@@ -4,7 +4,7 @@\n # this example illustrates a polymorphic load of two classes, where each class has a very \n # different set of properties\n \n-metadata = BoundMetaData('sqlite://', echo='True')\n+metadata = BoundMetaData('sqlite://', echo=True)\n \n # a table to store companies\n companies = Table('companies', metadata, "
    },
    {
        "commit_id": "96ee77cd096f94613e3f98f7b7c179167b05877a",
        "commit_message": "fix running tests on Windows",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/96ee77cd096f94613e3f98f7b7c179167b05877a",
        "buggy_code": "sys.path.insert(0, './lib/')",
        "fixed_code": "sys.path.insert(0, os.path.join(os.getcwd(), 'lib'))",
        "patch": "@@ -1,6 +1,6 @@\n import sys\n-sys.path.insert(0, './lib/')\n import os, unittest, StringIO, re, ConfigParser\n+sys.path.insert(0, os.path.join(os.getcwd(), 'lib'))\n import sqlalchemy\n from sqlalchemy import sql, engine, pool\n import sqlalchemy.engine.base as base"
    },
    {
        "commit_id": "7a1bbdd8cf4c45140b087067d920b8cc487f97b8",
        "commit_message": "turned off supports_sane_rowcount until someone wants to fix #370",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7a1bbdd8cf4c45140b087067d920b8cc487f97b8",
        "buggy_code": "return True",
        "fixed_code": "return False",
        "patch": "@@ -137,7 +137,7 @@ def type_descriptor(self, typeobj):\n         return sqltypes.adapt_type(typeobj, colspecs)\n \n     def supports_sane_rowcount(self):\n-        return True\n+        return False\n \n     def compiler(self, statement, bindparams, **kwargs):\n         return FBCompiler(self, statement, bindparams, **kwargs)"
    },
    {
        "commit_id": "6cd83d10b15b1d88748eff6829014aea10c3a0b3",
        "commit_message": " - small fix to SelectResultsExt to not bypass itself during\n      select().",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6cd83d10b15b1d88748eff6829014aea10c3a0b3",
        "buggy_code": "if hasattr(arg, '_selectable'):",
        "fixed_code": "if isinstance(arg, sql.FromClause) and arg.supports_execution():",
        "patch": "@@ -7,7 +7,7 @@ class SelectResultsExt(orm.MapperExtension):\n     def select_by(self, query, *args, **params):\n         return SelectResults(query, query.join_by(*args, **params))\n     def select(self, query, arg=None, **kwargs):\n-        if hasattr(arg, '_selectable'):\n+        if isinstance(arg, sql.FromClause) and arg.supports_execution():\n             return orm.EXT_PASS\n         else:\n             return SelectResults(query, arg, ops=kwargs)"
    },
    {
        "commit_id": "9fc5a1fe466e6eb6ba5beb664ef7efaceef62275",
        "commit_message": "- fix to using distinct() or distinct=True in combination with\njoin() and similar",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9fc5a1fe466e6eb6ba5beb664ef7efaceef62275",
        "buggy_code": "s = sql.select([self.table], whereclause, **kwargs).alias('getcount').count()",
        "fixed_code": "s = sql.select([self.table], whereclause, from_obj=from_obj, **kwargs).alias('getcount').count()",
        "patch": "@@ -344,7 +344,7 @@ def count(self, whereclause=None, params=None, **kwargs):\n         if self.table not in alltables:\n             from_obj.append(self.table)\n         if self._nestable(**kwargs):\n-            s = sql.select([self.table], whereclause, **kwargs).alias('getcount').count()\n+            s = sql.select([self.table], whereclause, from_obj=from_obj, **kwargs).alias('getcount').count()\n         else:\n             primary_key = self.primary_key_columns\n             s = sql.select([sql.func.count(list(primary_key)[0])], whereclause, from_obj=from_obj, **kwargs)"
    },
    {
        "commit_id": "c416dad6c652262bafbb137e6412054481db8e2f",
        "commit_message": "- merged the patch from #516 + fixes\n- improves the framework for auto-invalidation of connections that have\nlost their underlying database - the error catching/invalidate\nstep is totally moved to the connection pool.\n- added better condition checking for do_rollback() and do_commit() including\nSQLError excepetion wrapping",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c416dad6c652262bafbb137e6412054481db8e2f",
        "buggy_code": "pool = poolclass(creator, **pool_args)",
        "fixed_code": "pool = poolclass(creator, disconnect_checker=dialect.get_disconnect_checker(), **pool_args)",
        "patch": "@@ -86,7 +86,7 @@ def connect():\n                 if tk in kwargs:\n                     pool_args[k] = kwargs.pop(tk)\n             pool_args['use_threadlocal'] = self.pool_threadlocal()\n-            pool = poolclass(creator, **pool_args)\n+            pool = poolclass(creator, disconnect_checker=dialect.get_disconnect_checker(), **pool_args)\n         else:\n             if isinstance(pool, poollib._DBProxy):\n                 pool = pool.get_pool(*cargs, **cparams)"
    },
    {
        "commit_id": "cdceb3c3714af707bfe3ede10af6536eaf529ca8",
        "commit_message": "- merged the \"execcontext\" branch, refactors engine/dialect codepaths\n- much more functionality moved into ExecutionContext, which impacted\nthe API used by dialects to some degree\n- ResultProxy and subclasses now designed sanely\n- merged patch for #522, Unicode subclasses String directly,\nMSNVarchar implements for MS-SQL, removed MSUnicode.\n- String moves its \"VARCHAR\"/\"TEXT\" switchy thing into\n\"get_search_list()\" function, which VARCHAR and CHAR can override\nto not return TEXT in any case (didnt do the latter yet)\n- implements server side cursors for postgres, unit tests, #514\n- includes overhaul of dbapi import strategy #480, all dbapi\nimporting happens in dialect method \"dbapi()\", is only called\ninside of create_engine() for default and threadlocal strategies.\nDialect subclasses have a datamember \"dbapi\" referencing the loaded\nmodule which may be None.\n- added \"mock\" engine strategy, doesnt require DBAPI module and\ngives you a \"Connecition\" which just sends all executes to a callable.\ncan be used to create string output of create_all()/drop_all().",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cdceb3c3714af707bfe3ede10af6536eaf529ca8",
        "buggy_code": "return repr(self.get_original_dict())",
        "fixed_code": "return self.__class__.__name__ + \":\" + repr(self.get_original_dict())",
        "patch": "@@ -508,7 +508,7 @@ def get_raw_dict(self):\n         return d\n \n     def __repr__(self):\n-        return repr(self.get_original_dict())\n+        return self.__class__.__name__ + \":\" + repr(self.get_original_dict())\n \n class ClauseVisitor(object):\n     \"\"\"A class that knows how to traverse and visit"
    },
    {
        "commit_id": "cdceb3c3714af707bfe3ede10af6536eaf529ca8",
        "commit_message": "- merged the \"execcontext\" branch, refactors engine/dialect codepaths\n- much more functionality moved into ExecutionContext, which impacted\nthe API used by dialects to some degree\n- ResultProxy and subclasses now designed sanely\n- merged patch for #522, Unicode subclasses String directly,\nMSNVarchar implements for MS-SQL, removed MSUnicode.\n- String moves its \"VARCHAR\"/\"TEXT\" switchy thing into\n\"get_search_list()\" function, which VARCHAR and CHAR can override\nto not return TEXT in any case (didnt do the latter yet)\n- implements server side cursors for postgres, unit tests, #514\n- includes overhaul of dbapi import strategy #480, all dbapi\nimporting happens in dialect method \"dbapi()\", is only called\ninside of create_engine() for default and threadlocal strategies.\nDialect subclasses have a datamember \"dbapi\" referencing the loaded\nmodule which may be None.\n- added \"mock\" engine strategy, doesnt require DBAPI module and\ngives you a \"Connecition\" which just sends all executes to a callable.\ncan be used to create string output of create_all()/drop_all().",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cdceb3c3714af707bfe3ede10af6536eaf529ca8",
        "buggy_code": "assert str(ar) == \"Cant determine relation direction for relationship 'Person.manager (Manager)' - foreign key columns are present in both the parent and the child's mapped tables.  Specify 'foreign_keys' argument.\"",
        "fixed_code": "assert str(ar) == \"Can't determine relation direction for relationship 'Person.manager (Manager)' - foreign key columns are present in both the parent and the child's mapped tables.  Specify 'foreign_keys' argument.\", str(ar)",
        "patch": "@@ -42,7 +42,7 @@ class Manager(Person):\n         try:\n             compile_mappers()\n         except exceptions.ArgumentError, ar:\n-            assert str(ar) == \"Cant determine relation direction for relationship 'Person.manager (Manager)' - foreign key columns are present in both the parent and the child's mapped tables.  Specify 'foreign_keys' argument.\"\n+            assert str(ar) == \"Can't determine relation direction for relationship 'Person.manager (Manager)' - foreign key columns are present in both the parent and the child's mapped tables.  Specify 'foreign_keys' argument.\", str(ar)\n \n         clear_mappers()\n "
    },
    {
        "commit_id": "04914527998024494d19ba15ec0d29b8f2d2215b",
        "commit_message": "- fix for fetchmany() \"size\" argument being positional in most\ndbapis [ticket:505]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/04914527998024494d19ba15ec0d29b8f2d2215b",
        "buggy_code": "rows = self.cursor.fetchmany(size=size)",
        "fixed_code": "rows = self.cursor.fetchmany(size)",
        "patch": "@@ -968,7 +968,7 @@ def fetchmany(self, size=None):\n         if size is None:\n             rows = self.cursor.fetchmany()\n         else:\n-            rows = self.cursor.fetchmany(size=size)\n+            rows = self.cursor.fetchmany(size)\n         l = []\n         for row in rows:\n             l.append(RowProxy(self, row))"
    },
    {
        "commit_id": "30b20e3c563d10935b1c85f43d0b7b3054f81415",
        "commit_message": "MSSQL now passes still more unit tests [ticket:481]\nFix to null FLOAT fields in mssql-trusted.patch\nMSSQL: LIMIT with OFFSET now raises an error\nMSSQL: can now specify Windows authorization\nMSSQL: ignores seconds on DATE columns (DATE fix, part 1)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/30b20e3c563d10935b1c85f43d0b7b3054f81415",
        "buggy_code": "time.sleep(3)",
        "fixed_code": "time.sleep(4)",
        "patch": "@@ -162,7 +162,7 @@ def test_recycle(self):\n         c2 = p.connect()\n         assert id(c2.connection) == c_id\n         c2.close()\n-        time.sleep(3)\n+        time.sleep(4)\n         c3= p.connect()\n         assert id(c3.connection) != c_id\n     "
    },
    {
        "commit_id": "bfbbb2afb1137bfa3efe381356b5bf620036737c",
        "commit_message": "fix CASE statement when else_ is zero",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bfbbb2afb1137bfa3efe381356b5bf620036737c",
        "buggy_code": "if else_:",
        "fixed_code": "if not else_ is None:",
        "patch": "@@ -243,7 +243,7 @@ def case(whens, value=None, else_=None):\n     \"\"\"\n \n     whenlist = [_CompoundClause(None, 'WHEN', c, 'THEN', r) for (c,r) in whens]\n-    if else_:\n+    if not else_ is None:\n         whenlist.append(_CompoundClause(None, 'ELSE', else_))\n     cc = _CalculatedClause(None, 'CASE', value, *whenlist + ['END'])\n     for c in cc.clauses:"
    },
    {
        "commit_id": "e7ac502b811aeede49a82fd6fb077d31513d0f29",
        "commit_message": "Completed previously missed patches from tickets 422 and 415\nget unit tests to work with pyodbc [ticket:481]\nfix blank password on adodbapi [ticket:371]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e7ac502b811aeede49a82fd6fb077d31513d0f29",
        "buggy_code": "Column('multi_rev', Integer, Sequence('multi_rev_seq'), primary_key=True),",
        "fixed_code": "Column('multi_rev', Integer, primary_key=True),",
        "patch": "@@ -273,7 +273,7 @@ def testmultipk(self):\n         table = Table(\n             'engine_multi', meta, \n             Column('multi_id', Integer, Sequence('multi_id_seq'), primary_key=True),\n-            Column('multi_rev', Integer, Sequence('multi_rev_seq'), primary_key=True),\n+            Column('multi_rev', Integer, primary_key=True),\n             Column('name', String(50), nullable=False),\n             Column('val', String(100))\n         )"
    },
    {
        "commit_id": "67f020f69cbca55150c2d793ba3f9fcb95749838",
        "commit_message": "- small fix to BoundMetaData to accept unicode or string URLs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/67f020f69cbca55150c2d793ba3f9fcb95749838",
        "buggy_code": "if isinstance(name_or_url, str) or isinstance(name_or_url, unicode):",
        "fixed_code": "if isinstance(name_or_url, basestring):",
        "patch": "@@ -80,7 +80,7 @@ def make_url(name_or_url):\n     \n     the given string is parsed according to the rfc1738 spec.\n     if an existing URL object is passed, just returns the object.\"\"\"\n-    if isinstance(name_or_url, str) or isinstance(name_or_url, unicode):\n+    if isinstance(name_or_url, basestring):\n         return _parse_rfc1738_args(name_or_url)\n     else:\n         return name_or_url"
    },
    {
        "commit_id": "67f020f69cbca55150c2d793ba3f9fcb95749838",
        "commit_message": "- small fix to BoundMetaData to accept unicode or string URLs",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/67f020f69cbca55150c2d793ba3f9fcb95749838",
        "buggy_code": "if isinstance(engine_or_url, str):",
        "fixed_code": "if isinstance(engine_or_url, basestring):",
        "patch": "@@ -914,7 +914,7 @@ class BoundMetaData(MetaData):\n     \"\"\"builds upon MetaData to provide the capability to bind to an Engine implementation.\"\"\"\n     def __init__(self, engine_or_url, name=None, **kwargs):\n         super(BoundMetaData, self).__init__(name, **kwargs)\n-        if isinstance(engine_or_url, str):\n+        if isinstance(engine_or_url, basestring):\n             self._engine = sqlalchemy.create_engine(engine_or_url, **kwargs)\n         else:\n             self._engine = engine_or_url"
    },
    {
        "commit_id": "66a74c136fbb16e81efeb3e4e42c8e6dc7519dd1",
        "commit_message": "revert old unittest patch for MSSQL",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/66a74c136fbb16e81efeb3e4e42c8e6dc7519dd1",
        "buggy_code": "tlengine = create_engine(testbase.db_uri, strategy='threadlocal', **testbase.db_opts)",
        "fixed_code": "tlengine = create_engine(testbase.db_uri, strategy='threadlocal')",
        "patch": "@@ -144,7 +144,7 @@ def testrollback_deadlock(self):\n class TLTransactionTest(testbase.PersistTest):\n     def setUpAll(self):\n         global users, metadata, tlengine\n-        tlengine = create_engine(testbase.db_uri, strategy='threadlocal', **testbase.db_opts)\n+        tlengine = create_engine(testbase.db_uri, strategy='threadlocal')\n         metadata = MetaData()\n         users = Table('query_users', metadata,\n             Column('user_id', INT, primary_key = True),"
    },
    {
        "commit_id": "8908ea81d230185ddda53509594757929e65e3a5",
        "commit_message": "OK nevermind that last commit, rolling the quoting fix back",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8908ea81d230185ddda53509594757929e65e3a5",
        "buggy_code": "self.case_sensitive = case_sensitive",
        "fixed_code": "self.case_sensitive = False #text.isalpha() and not text.islower()",
        "patch": "@@ -1257,7 +1257,7 @@ def __init__(self, text, selectable=None, type=None, _is_oid=False, case_sensiti\n         self.type = sqltypes.to_instance(type)\n         self._is_oid = _is_oid\n         self.__label = None\n-        self.case_sensitive = case_sensitive\n+        self.case_sensitive = False #text.isalpha() and not text.islower()\n     def _get_label(self):\n         if self.__label is None:\n             if self.table is not None and self.table.named_with_column():"
    },
    {
        "commit_id": "6d278f307ea9407993a2cc4b01bcd09f6e819834",
        "commit_message": "typo fix (thanks Paul J)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/6d278f307ea9407993a2cc4b01bcd09f6e819834",
        "buggy_code": "set_default_schema_name(\"dbo\")",
        "fixed_code": "self.set_default_schema_name(\"dbo\")",
        "patch": "@@ -266,7 +266,7 @@ def __init__(self, module=None, auto_identity_insert=False, **params):\n         self.module = module or dbmodule\n         self.auto_identity_insert = auto_identity_insert\n         ansisql.ANSIDialect.__init__(self, **params)\n-        set_default_schema_name(\"dbo\")\n+        self.set_default_schema_name(\"dbo\")\n         \n     def create_connect_args(self, url):\n         opts = url.translate_connect_args(['host', 'database', 'user', 'password', 'port'])"
    },
    {
        "commit_id": "4771a156a3b4ae233a8efd9b7741e09bebfe6d87",
        "commit_message": "- fix to post_update to insure rows are updated even for non insert/delete scenarios\n[ticket:413]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/4771a156a3b4ae233a8efd9b7741e09bebfe6d87",
        "buggy_code": "if x is not None and (uowcommit.is_deleted(x) or not hasattr(x, '_instance_key')):",
        "fixed_code": "if x is not None:",
        "patch": "@@ -108,7 +108,7 @@ def _conditional_post_update(self, obj, uowcommit, related):\n         given related object list contains INSERTs or DELETEs.\"\"\"\n         if obj is not None and self.post_update:\n             for x in related:\n-                if x is not None and (uowcommit.is_deleted(x) or not hasattr(x, '_instance_key')):\n+                if x is not None:\n                     uowcommit.register_object(obj, postupdate=True, post_update_cols=self.syncrules.dest_columns())\n                     break\n "
    },
    {
        "commit_id": "f5b5696afddacdd7c5a5ede716e7241e5fa5c97e",
        "commit_message": "fixed the raise for mysql to re-raise the error",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f5b5696afddacdd7c5a5ede716e7241e5fa5c97e",
        "buggy_code": "version = '0.3.2'",
        "fixed_code": "version = '0.3.3'",
        "patch": "@@ -24,7 +24,7 @@\n     ]\n \n title='SQLAlchemy 0.3 Documentation'\n-version = '0.3.2'\n+version = '0.3.3'\n \n root = toc.TOCElement('', 'root', '', version=version, doctitle=title)\n "
    },
    {
        "commit_id": "e1a52eb7dfb19edf3baeff6d2878b6b0afb9a04d",
        "commit_message": "- patch that makes MySQL rowcount work correctly! [ticket:396]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e1a52eb7dfb19edf3baeff6d2878b6b0afb9a04d",
        "buggy_code": "rows += c.cursor.rowcount",
        "fixed_code": "rows += c.rowcount",
        "patch": "@@ -960,7 +960,7 @@ def comparator(a, b):\n                     mapper._postfetch(connection, table, obj, c, c.last_updated_params())\n \n                     updated_objects.add(obj)\n-                    rows += c.cursor.rowcount\n+                    rows += c.rowcount\n \n                 if c.supports_sane_rowcount() and rows != len(update):\n                     raise exceptions.ConcurrentModificationError(\"Updated rowcount %d does not match number of objects updated %d\" % (rows, len(update)))"
    },
    {
        "commit_id": "e1a52eb7dfb19edf3baeff6d2878b6b0afb9a04d",
        "commit_message": "- patch that makes MySQL rowcount work correctly! [ticket:396]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e1a52eb7dfb19edf3baeff6d2878b6b0afb9a04d",
        "buggy_code": "@testbase.unsupported('mysql', 'mssql')",
        "fixed_code": "@testbase.unsupported('mssql')",
        "patch": "@@ -100,7 +100,7 @@ def tearDown(self):\n         version_table.delete().execute()\n         UnitOfWorkTest.tearDown(self)\n     \n-    @testbase.unsupported('mysql', 'mssql')\n+    @testbase.unsupported('mssql')\n     def testbasic(self):\n         s = create_session()\n         class Foo(object):pass"
    },
    {
        "commit_id": "34268e56840f263030fe4f6e95d2c535b1eba7ca",
        "commit_message": "fix in OrderedProperties to allow pickling",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/34268e56840f263030fe4f6e95d2c535b1eba7ca",
        "buggy_code": "return self.__data[key]",
        "fixed_code": "return self.__dict__['_OrderedProperties__data'][key]",
        "patch": "@@ -110,7 +110,7 @@ def __setattr__(self, key, object):\n         self.__data[key] = object\n     def __getattr__(self, key):\n         try:\n-            return self.__data[key]\n+            return self.__dict__['_OrderedProperties__data'][key]\n         except KeyError:\n             raise AttributeError(key)\n     def __contains__(self, key):"
    },
    {
        "commit_id": "3f280c3f71ebb689d67085bbd9af6a0425f4d08d",
        "commit_message": "oops, KeyError fix for [ticket:380]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3f280c3f71ebb689d67085bbd9af6a0425f4d08d",
        "buggy_code": "except exceptions.KeyError:",
        "fixed_code": "except KeyError:",
        "patch": "@@ -624,7 +624,7 @@ def _has_key(self, row, key):\n         try:\n             self._convert_key(key)\n             return True\n-        except exceptions.KeyError:\n+        except KeyError:\n             return False\n         \n     def _get_col(self, row, key):"
    },
    {
        "commit_id": "8a2ed6de4f4b59675a354b5e5900fd0d442444d2",
        "commit_message": "fix to oracle types test, added RAW type [ticket:378]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a2ed6de4f4b59675a354b5e5900fd0d442444d2",
        "buggy_code": "if not db.name=='sqlite':",
        "fixed_code": "if not db.name=='sqlite' and not db.name=='oracle':",
        "patch": "@@ -108,7 +108,7 @@ def testcolumns(self):\n                                    'float_column': 'float_column NUMERIC(25, 2)'\n                                  }\n \n-        if not db.name=='sqlite':\n+        if not db.name=='sqlite' and not db.name=='oracle':\n             expectedResults['float_column'] = 'float_column FLOAT(25)'\n     \n         print db.engine.__module__"
    },
    {
        "commit_id": "cf8e9d1db33630b413ac2ea3174ab05a32c3218c",
        "commit_message": "[ticket:374] [ticket:377] [ticket:375], small fix to mutable types unit test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/cf8e9d1db33630b413ac2ea3174ab05a32c3218c",
        "buggy_code": "if isinstance(pool, poollib.DBProxy):",
        "fixed_code": "if isinstance(pool, poollib._DBProxy):",
        "patch": "@@ -67,7 +67,7 @@ def connect():\n             pool_args['use_threadlocal'] = self.pool_threadlocal()\n             pool = poolclass(creator, **pool_args)\n         else:\n-            if isinstance(pool, poollib.DBProxy):\n+            if isinstance(pool, poollib._DBProxy):\n                 pool = pool.get_pool(*cargs, **cparams)\n             else:\n                 pool = pool"
    },
    {
        "commit_id": "695f65db853a7b74a1ce2da75d8e3c55bbafae81",
        "commit_message": "- added an assertion within the \"cascade\" step of ORM relationships to check\nthat the class of object attached to a parent object is appropriate\n(i.e. if A.items stores B objects, raise an error if a C is appended to A.items)\n- new extension sqlalchemy.ext.associationproxy, provides transparent \"association object\"\nmappings.  new example examples/association/proxied_association.py illustrates.\n- some example cleanup",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/695f65db853a7b74a1ce2da75d8e3c55bbafae81",
        "buggy_code": "from sqlalchemy.orm.mapper import mapper_registry, ExtensionOption",
        "fixed_code": "from sqlalchemy.orm import mapper as mapperlib",
        "patch": "@@ -10,7 +10,7 @@\n \"\"\"\n from sqlalchemy import exceptions\n from sqlalchemy.orm.mapper import *\n-from sqlalchemy.orm.mapper import mapper_registry, ExtensionOption\n+from sqlalchemy.orm import mapper as mapperlib\n from sqlalchemy.orm.query import Query\n from sqlalchemy.orm.util import polymorphic_union\n from sqlalchemy.orm import properties, strategies"
    },
    {
        "commit_id": "695f65db853a7b74a1ce2da75d8e3c55bbafae81",
        "commit_message": "- added an assertion within the \"cascade\" step of ORM relationships to check\nthat the class of object attached to a parent object is appropriate\n(i.e. if A.items stores B objects, raise an error if a C is appended to A.items)\n- new extension sqlalchemy.ext.associationproxy, provides transparent \"association object\"\nmappings.  new example examples/association/proxied_association.py illustrates.\n- some example cleanup",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/695f65db853a7b74a1ce2da75d8e3c55bbafae81",
        "buggy_code": "__all__ = ['Mapper', 'MapperExtension', 'class_mapper', 'object_mapper', 'EXT_PASS']",
        "fixed_code": "__all__ = ['Mapper', 'MapperExtension', 'class_mapper', 'object_mapper', 'EXT_PASS', 'mapper_registry', 'ExtensionOption']",
        "patch": "@@ -11,7 +11,7 @@\n from sqlalchemy.orm.interfaces import MapperProperty, MapperOption, OperationContext\n import weakref\n \n-__all__ = ['Mapper', 'MapperExtension', 'class_mapper', 'object_mapper', 'EXT_PASS']\n+__all__ = ['Mapper', 'MapperExtension', 'class_mapper', 'object_mapper', 'EXT_PASS', 'mapper_registry', 'ExtensionOption']\n \n # a dictionary mapping classes to their primary mappers\n mapper_registry = weakref.WeakKeyDictionary()"
    },
    {
        "commit_id": "b2c68fab83092eb760e07c63c64274bf59f46f54",
        "commit_message": "- fix to postgres sequence quoting when using schemas",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b2c68fab83092eb760e07c63c64274bf59f46f54",
        "buggy_code": "exc = \"select nextval('\\\"%s.%s_%s_seq\\\"')\" % (sch, column.table.name, column.name)",
        "fixed_code": "exc = \"select nextval('\\\"%s\\\".\\\"%s_%s_seq\\\"')\" % (sch, column.table.name, column.name)",
        "patch": "@@ -530,7 +530,7 @@ def get_column_default(self, column, isinsert=True):\n                 # TODO: this has to build into the Sequence object so we can get the quoting \n                 # logic from it\n                 if sch is not None:\n-                    exc = \"select nextval('\\\"%s.%s_%s_seq\\\"')\" % (sch, column.table.name, column.name)\n+                    exc = \"select nextval('\\\"%s\\\".\\\"%s_%s_seq\\\"')\" % (sch, column.table.name, column.name)\n                 else:\n                     exc = \"select nextval('\\\"%s_%s_seq\\\"')\" % (column.table.name, column.name)\n                 c = self.proxy(exc)"
    },
    {
        "commit_id": "bc240be3f87b41232671e4da7f59679744959154",
        "commit_message": "- attributes module and test suite moves underneath 'orm' package\n- fixed table comparison example in metadata.txt\n- docstrings all over the place\n- renamed mapper _getattrbycolumn/_setattrbycolumn to get_attr_by_column,set_attr_by_column\n- removed frommapper parameter from populate_instance().  the two operations can be performed separately\n- fix to examples/adjacencytree/byroot_tree.py to fire off lazy loaders upon load, to reduce query calling\n- added get(), get_by(), load() to MapperExtension\n- re-implemented ExtensionOption (called by extension() function)\n- redid _ExtensionCarrier to function dynamically based on __getattribute__\n- added logging to attributes package, indicating the execution of a lazy callable\n- going to close [ticket:329]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bc240be3f87b41232671e4da7f59679744959154",
        "buggy_code": "import sqlalchemy.attributes as attributes",
        "fixed_code": "import sqlalchemy.orm.attributes as attributes",
        "patch": "@@ -1,6 +1,6 @@\n from testbase import PersistTest\n import sqlalchemy.util as util\n-import sqlalchemy.attributes as attributes\n+import sqlalchemy.orm.attributes as attributes\n import unittest, sys, os\n import pickle\n "
    },
    {
        "commit_id": "8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "commit_message": "- a fair amount of cleanup to the schema package, removal of ambiguous\nmethods, methods that are no longer needed.  slightly more constrained\nuseage, greater emphasis on explicitness.\n- table_iterator signature fixup, includes fix for [ticket:288]\n- the \"primary_key\" attribute of Table and other selectables becomes\na setlike ColumnCollection object; is no longer ordered or numerically\nindexed.  a comparison clause between two pks that are derived from the\nsame underlying tables (i.e. such as two Alias objects) can be generated\nvia table1.primary_key==table2.primary_key\n- append_item() methods removed from Table and Column; preferably\nconstruct Table/Column/related objects inline, but if needed use\nappend_column(), append_foreign_key(), append_constraint(), etc.\n- table.create() no longer returns the Table object, instead has no\nreturn value.  the usual case is that tables are created via metadata,\nwhich is preferable since it will handle table dependencies.\n- added UniqueConstraint (goes at Table level), CheckConstraint\n(goes at Table or Column level) fixes [ticket:217]\n- index=False/unique=True on Column now creates a UniqueConstraint,\nindex=True/unique=False creates a plain Index,\nindex=True/unique=True on Column creates a unique Index.  'index'\nand 'unique' keyword arguments to column are now boolean only; for\nexplcit names and groupings of indexes or unique constraints, use the\nUniqueConstraint/Index constructs explicitly.\n- relationship of Metadata/Table/SchemaGenerator/Dropper has been\nimproved so that the schemavisitor receives the metadata object\nfor greater control over groupings of creates/drops.\n- added \"use_alter\" argument to ForeignKey, ForeignKeyConstraint,\nbut it doesnt do anything yet.  will utilize new generator/dropper\nbehavior to implement.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "buggy_code": "element.accept_schema_visitor(visitorcallable(self, conn.proxy, connection=conn, **kwargs))",
        "fixed_code": "element.accept_schema_visitor(visitorcallable(self, conn.proxy, connection=conn, **kwargs), traverse=False)",
        "patch": "@@ -421,7 +421,7 @@ def _run_visitor(self, visitorcallable, element, connection=None, **kwargs):\n         else:\n             conn = connection\n         try:\n-            element.accept_schema_visitor(visitorcallable(self, conn.proxy, connection=conn, **kwargs))\n+            element.accept_schema_visitor(visitorcallable(self, conn.proxy, connection=conn, **kwargs), traverse=False)\n         finally:\n             if connection is None:\n                 conn.close()"
    },
    {
        "commit_id": "8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "commit_message": "- a fair amount of cleanup to the schema package, removal of ambiguous\nmethods, methods that are no longer needed.  slightly more constrained\nuseage, greater emphasis on explicitness.\n- table_iterator signature fixup, includes fix for [ticket:288]\n- the \"primary_key\" attribute of Table and other selectables becomes\na setlike ColumnCollection object; is no longer ordered or numerically\nindexed.  a comparison clause between two pks that are derived from the\nsame underlying tables (i.e. such as two Alias objects) can be generated\nvia table1.primary_key==table2.primary_key\n- append_item() methods removed from Table and Column; preferably\nconstruct Table/Column/related objects inline, but if needed use\nappend_column(), append_foreign_key(), append_constraint(), etc.\n- table.create() no longer returns the Table object, instead has no\nreturn value.  the usual case is that tables are created via metadata,\nwhich is preferable since it will handle table dependencies.\n- added UniqueConstraint (goes at Table level), CheckConstraint\n(goes at Table or Column level) fixes [ticket:217]\n- index=False/unique=True on Column now creates a UniqueConstraint,\nindex=True/unique=False creates a plain Index,\nindex=True/unique=True on Column creates a unique Index.  'index'\nand 'unique' keyword arguments to column are now boolean only; for\nexplcit names and groupings of indexes or unique constraints, use the\nUniqueConstraint/Index constructs explicitly.\n- relationship of Metadata/Table/SchemaGenerator/Dropper has been\nimproved so that the schemavisitor receives the metadata object\nfor greater control over groupings of creates/drops.\n- added \"use_alter\" argument to ForeignKey, ForeignKeyConstraint,\nbut it doesnt do anything yet.  will utilize new generator/dropper\nbehavior to implement.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "buggy_code": "'sql.indexes',",
        "fixed_code": "'sql.constraints',",
        "patch": "@@ -5,7 +5,7 @@\n def suite():\n     modules_to_test = (\n         'sql.testtypes',\n-        'sql.indexes',\n+        'sql.constraints',\n \n         # SQL syntax\n         'sql.select',"
    },
    {
        "commit_id": "8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "commit_message": "- a fair amount of cleanup to the schema package, removal of ambiguous\nmethods, methods that are no longer needed.  slightly more constrained\nuseage, greater emphasis on explicitness.\n- table_iterator signature fixup, includes fix for [ticket:288]\n- the \"primary_key\" attribute of Table and other selectables becomes\na setlike ColumnCollection object; is no longer ordered or numerically\nindexed.  a comparison clause between two pks that are derived from the\nsame underlying tables (i.e. such as two Alias objects) can be generated\nvia table1.primary_key==table2.primary_key\n- append_item() methods removed from Table and Column; preferably\nconstruct Table/Column/related objects inline, but if needed use\nappend_column(), append_foreign_key(), append_constraint(), etc.\n- table.create() no longer returns the Table object, instead has no\nreturn value.  the usual case is that tables are created via metadata,\nwhich is preferable since it will handle table dependencies.\n- added UniqueConstraint (goes at Table level), CheckConstraint\n(goes at Table or Column level) fixes [ticket:217]\n- index=False/unique=True on Column now creates a UniqueConstraint,\nindex=True/unique=False creates a plain Index,\nindex=True/unique=True on Column creates a unique Index.  'index'\nand 'unique' keyword arguments to column are now boolean only; for\nexplcit names and groupings of indexes or unique constraints, use the\nUniqueConstraint/Index constructs explicitly.\n- relationship of Metadata/Table/SchemaGenerator/Dropper has been\nimproved so that the schemavisitor receives the metadata object\nfor greater control over groupings of creates/drops.\n- added \"use_alter\" argument to ForeignKey, ForeignKeyConstraint,\nbut it doesnt do anything yet.  will utilize new generator/dropper\nbehavior to implement.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8340006dd7ed34cf32bbb7f856397d1c7f13d295",
        "buggy_code": "self.assertEquals(expectedResults[aCol.name], db.dialect.schemagenerator(db, None).get_column_specification(aCol))",
        "fixed_code": "self.assertEquals(expectedResults[aCol.name], db.dialect.schemagenerator(db, None, None).get_column_specification(aCol))",
        "patch": "@@ -121,7 +121,7 @@ def testcolumns(self):\n         )\n \n         for aCol in testTable.c:\n-            self.assertEquals(expectedResults[aCol.name], db.dialect.schemagenerator(db, None).get_column_specification(aCol))\n+            self.assertEquals(expectedResults[aCol.name], db.dialect.schemagenerator(db, None, None).get_column_specification(aCol))\n         \n class UnicodeTest(AssertMixin):\n     \"\"\"tests the Unicode type.  also tests the TypeDecorator with instances in the types package.\"\"\""
    },
    {
        "commit_id": "d407289e41e017360ee1d9d851ff56031e7e8807",
        "commit_message": "- ForeignKey reports better error message for column not found\n- change in verbiage when join conditions are figured out (and fail)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d407289e41e017360ee1d9d851ff56031e7e8807",
        "buggy_code": "return \"Mapper| \" + str(id(self)) + \"|\" + self.class_.__name__ + \"|\" + (self.entity_name is not None and \"/%s\" % self.entity_name or \"\") + (self.local_table and self.local_table.name or str(self.local_table)) + \"|is_primary=\" + repr(self._is_primary_mapper())",
        "fixed_code": "return \"Mapper|\" + self.class_.__name__ + \"|\" + (self.entity_name is not None and \"/%s\" % self.entity_name or \"\") + (self.local_table and self.local_table.name or str(self.local_table)) + (not self._is_primary_mapper() and \"|non-primary\" or \"\")",
        "patch": "@@ -566,7 +566,7 @@ def _compile_property(self, key, prop, init=True, skipmissing=False):\n             prop.adapt_to_inherited(key, mapper)\n         \n     def __str__(self):\n-        return \"Mapper| \" + str(id(self)) + \"|\" + self.class_.__name__ + \"|\" + (self.entity_name is not None and \"/%s\" % self.entity_name or \"\") + (self.local_table and self.local_table.name or str(self.local_table)) + \"|is_primary=\" + repr(self._is_primary_mapper())\n+        return \"Mapper|\" + self.class_.__name__ + \"|\" + (self.entity_name is not None and \"/%s\" % self.entity_name or \"\") + (self.local_table and self.local_table.name or str(self.local_table)) + (not self._is_primary_mapper() and \"|non-primary\" or \"\")\n     \n     def _is_primary_mapper(self):\n         \"\"\"returns True if this mapper is the primary mapper for its class key (class + entity_name)\"\"\""
    },
    {
        "commit_id": "d407289e41e017360ee1d9d851ff56031e7e8807",
        "commit_message": "- ForeignKey reports better error message for column not found\n- change in verbiage when join conditions are figured out (and fail)",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d407289e41e017360ee1d9d851ff56031e7e8807",
        "buggy_code": "raise exceptions.ArgumentError(\"Error determining primary and/or secondary join for relationship '%s' between mappers '%s' and '%s'.  You should specify the 'primaryjoin' (and 'secondaryjoin', if there is an association table present) keyword arguments to the relation() function (or for backrefs, by specifying the backref using the backref() function with keyword arguments) to explicitly specify the join conditions.  Nested error is \\\"%s\\\"\" % (self.key, self.localparent, self.mapper, str(e)))",
        "fixed_code": "raise exceptions.ArgumentError(\"Error determining primary and/or secondary join for relationship '%s' between mappers '%s' and '%s'.  If the underlying error cannot be corrected, you should specify the 'primaryjoin' (and 'secondaryjoin', if there is an association table present) keyword arguments to the relation() function (or for backrefs, by specifying the backref using the backref() function with keyword arguments) to explicitly specify the join conditions.  Nested error is \\\"%s\\\"\" % (self.key, self.localparent, self.mapper, str(e)))",
        "patch": "@@ -238,7 +238,7 @@ def do_init(self):\n                 if self.primaryjoin is None:\n                     self.primaryjoin = sql.join(self.parent.unjoined_table, self.target).onclause\n         except exceptions.ArgumentError, e:\n-            raise exceptions.ArgumentError(\"Error determining primary and/or secondary join for relationship '%s' between mappers '%s' and '%s'.  You should specify the 'primaryjoin' (and 'secondaryjoin', if there is an association table present) keyword arguments to the relation() function (or for backrefs, by specifying the backref using the backref() function with keyword arguments) to explicitly specify the join conditions.  Nested error is \\\"%s\\\"\" % (self.key, self.localparent, self.mapper, str(e)))\n+            raise exceptions.ArgumentError(\"Error determining primary and/or secondary join for relationship '%s' between mappers '%s' and '%s'.  If the underlying error cannot be corrected, you should specify the 'primaryjoin' (and 'secondaryjoin', if there is an association table present) keyword arguments to the relation() function (or for backrefs, by specifying the backref using the backref() function with keyword arguments) to explicitly specify the join conditions.  Nested error is \\\"%s\\\"\" % (self.key, self.localparent, self.mapper, str(e)))\n         # if the foreign key wasnt specified and theres no assocaition table, try to figure\n         # out who is dependent on who. we dont need all the foreign keys represented in the join,\n         # just one of them.  "
    },
    {
        "commit_id": "9a5247818904185d3f1e3f4bfbc66cc614a941c6",
        "commit_message": "- added basic 'zblog' test suite\n- better error message for mapper orphan detect",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9a5247818904185d3f1e3f4bfbc66cc614a941c6",
        "buggy_code": "raise exceptions.FlushError(\"instance %s is an unsaved, pending instance and is an orphan\" % obj)",
        "fixed_code": "raise exceptions.FlushError(\"instance %s is an unsaved, pending instance and is an orphan (is not attached to any parent '%s' instance via that classes' '%s' attribute)\" % (obj, klass.__name__, key))",
        "patch": "@@ -145,7 +145,7 @@ def _is_orphan(self, obj):\n         for (key,klass) in self.delete_orphans:\n             if not getattr(klass, key).hasparent(obj, optimistic=optimistic):\n                 if not has_identity(obj):\n-                    raise exceptions.FlushError(\"instance %s is an unsaved, pending instance and is an orphan\" % obj)\n+                    raise exceptions.FlushError(\"instance %s is an unsaved, pending instance and is an orphan (is not attached to any parent '%s' instance via that classes' '%s' attribute)\" % (obj, klass.__name__, key))\n                 return True\n         else:\n             return False"
    },
    {
        "commit_id": "9f23a5c3de9b98a3f74b11cc765b702ad741c4b5",
        "commit_message": "fix to from clause in unittest query...somehow this didnt fail on pg 8.0, but fails on 8.1",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/9f23a5c3de9b98a3f74b11cc765b702ad741c4b5",
        "buggy_code": "c = notztable.update(tztable.c.id==1).execute(name='newname')",
        "fixed_code": "c = notztable.update(notztable.c.id==1).execute(name='newname')",
        "patch": "@@ -311,7 +311,7 @@ def testnotz(self):\n         # get a date without a tzinfo\n         somedate = datetime.datetime(2005, 10,20, 11, 52, 00)\n         notztable.insert().execute(id=1, name='row1', date=somedate)\n-        c = notztable.update(tztable.c.id==1).execute(name='newname')\n+        c = notztable.update(notztable.c.id==1).execute(name='newname')\n         x = c.last_updated_params()\n         print x['date'] == somedate\n         "
    },
    {
        "commit_id": "7252ccd7c988d2fe2f218401a0a81738e19fa239",
        "commit_message": "- fix to using query.count() with distinct, **kwargs with SelectResults\ncount() [ticket:287]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/7252ccd7c988d2fe2f218401a0a81738e19fa239",
        "buggy_code": "return self._query.count(self._clause)",
        "fixed_code": "return self._query.count(self._clause, **self._ops)",
        "patch": "@@ -28,7 +28,7 @@ def __init__(self, query, clause=None, ops={}):\n \n     def count(self):\n         \"\"\"executes the SQL count() function against the SelectResults criterion.\"\"\"\n-        return self._query.count(self._clause)\n+        return self._query.count(self._clause, **self._ops)\n \n     def _col_aggregate(self, col, func):\n         \"\"\"executes func() function against the given column"
    },
    {
        "commit_id": "a2f00afe36206d8b73d9104ec0eeaa3a7c0447b8",
        "commit_message": "fix to __eq__ method in a test object",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a2f00afe36206d8b73d9104ec0eeaa3a7c0447b8",
        "buggy_code": "return other.name == self.name",
        "fixed_code": "return other.__class__ == Keyword and other.name == self.name",
        "patch": "@@ -1081,7 +1081,7 @@ class Keyword(object):\n             def __init__(self, name):\n                 self.name = name\n             def __eq__(self, other):\n-                return other.name == self.name\n+                return other.__class__ == Keyword and other.name == self.name\n             def __repr__(self):\n                 return \"Keyword(%s, %s)\" % (getattr(self, 'keyword_id', 'None'), self.name)\n                 "
    },
    {
        "commit_id": "e07d80642e7a25df47c97ef8ca6bce50ab18e099",
        "commit_message": "fix for when default is zero",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e07d80642e7a25df47c97ef8ca6bce50ab18e099",
        "buggy_code": "(name, type, nullable, has_default, primary_key) = (row[1], row[2].upper(), not row[3], row[4], row[5])",
        "fixed_code": "(name, type, nullable, has_default, primary_key) = (row[1], row[2].upper(), not row[3], row[4] is not None, row[5])",
        "patch": "@@ -178,7 +178,7 @@ def reflecttable(self, connection, table):\n                 break\n             #print \"row! \" + repr(row)\n             found_table = True\n-            (name, type, nullable, has_default, primary_key) = (row[1], row[2].upper(), not row[3], row[4], row[5])\n+            (name, type, nullable, has_default, primary_key) = (row[1], row[2].upper(), not row[3], row[4] is not None, row[5])\n             \n             match = re.match(r'(\\w+)(\\(.*?\\))?', type)\n             coltype = match.group(1)"
    },
    {
        "commit_id": "77d818d08988389579b8dd8423d75279bca0f345",
        "commit_message": "typo fix noticed by R Munn",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/77d818d08988389579b8dd8423d75279bca0f345",
        "buggy_code": "s = arg._selectable_()",
        "fixed_code": "s = arg._selectable()",
        "patch": "@@ -221,7 +221,7 @@ def select(self, arg=None, **kwargs):\n         if ret is not mapper.EXT_PASS:\n             return ret\n         try:\n-            s = arg._selectable_()\n+            s = arg._selectable()\n         except AttributeError:\n             return self.select_whereclause(whereclause=arg, **kwargs)\n         else:"
    },
    {
        "commit_id": "d8ca865f17e466dcc311ca687707e2f1afbf9f0d",
        "commit_message": "assignmapper was setting is_primary=True, causing all sorts of mayhem\nby not raising an error when redundant mappers were set up, fixed",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d8ca865f17e466dcc311ca687707e2f1afbf9f0d",
        "buggy_code": "self.association = mapper.class_mapper(self.association, compile=False)",
        "fixed_code": "self.association = mapper.class_mapper(self.association, compile=False)._check_compile()",
        "patch": "@@ -206,7 +206,7 @@ def do_init(self):\n             \n         if self.association is not None:\n             if isinstance(self.association, type):\n-                self.association = mapper.class_mapper(self.association, compile=False)\n+                self.association = mapper.class_mapper(self.association, compile=False)._check_compile()\n         \n         self.target = self.mapper.mapped_table\n "
    },
    {
        "commit_id": "d89b81a1d9dd85e3dce3512643e9a077d60a2d44",
        "commit_message": "fix to error message for object with mismatched session",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/d89b81a1d9dd85e3dce3512643e9a077d60a2d44",
        "buggy_code": "raise InvalidRequestError(\"Detected a mapped object not present in the current thread's Identity Map: '%s'.  Use objectstore.import_instance() to place deserialized instances or instances from other threads\" % repr(obj._instance_key))",
        "fixed_code": "raise InvalidRequestError(\"Detected a mapped object not present in this Session's identity map: '%s'.  Use session.merge() to place deserialized instances or instances from other threads\" % repr(obj._instance_key))",
        "patch": "@@ -143,7 +143,7 @@ def _validate_obj(self, obj):\n         \"\"\"validates that dirty/delete/flush operations can occur upon the given object, by checking\n         if it has an instance key and that the instance key is present in the identity map.\"\"\"\n         if hasattr(obj, '_instance_key') and not self.identity_map.has_key(obj._instance_key):\n-            raise InvalidRequestError(\"Detected a mapped object not present in the current thread's Identity Map: '%s'.  Use objectstore.import_instance() to place deserialized instances or instances from other threads\" % repr(obj._instance_key))\n+            raise InvalidRequestError(\"Detected a mapped object not present in this Session's identity map: '%s'.  Use session.merge() to place deserialized instances or instances from other threads\" % repr(obj._instance_key))\n         \n     def update(self, obj):\n         \"\"\"called to add an object to this UnitOfWork as though it were loaded from the DB,"
    },
    {
        "commit_id": "bd8ee15b87a504c158ddf7b44264e3bdc3cf3d02",
        "commit_message": "fix to timeout",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bd8ee15b87a504c158ddf7b44264e3bdc3cf3d02",
        "buggy_code": "if self._overflow >= self._max_overflow:",
        "fixed_code": "if self._max_overflow > -1 and self._overflow >= self._max_overflow:",
        "patch": "@@ -236,7 +236,7 @@ def do_get(self):\n         try:\n             return self._pool.get(self._max_overflow > -1 and self._overflow >= self._max_overflow, self._timeout)\n         except Queue.Empty:\n-            if self._overflow >= self._max_overflow:\n+            if self._max_overflow > -1 and self._overflow >= self._max_overflow:\n                 raise exceptions.TimeoutError(\"QueuePool limit of size %d overflow %d reached, connection timed out\" % (self.size(), self.overflow()))\n             self._overflow += 1\n             return self._creator()"
    },
    {
        "commit_id": "091d40344ebeedd4633841146449ac772e33b631",
        "commit_message": "fixed bug where if a many-to-many table mapped as \"secondary\" had other cols in it, delete operations would try to match up on those columns.  also fixed bug in new attributes if you set a list based attribute to a blank list, properly fires the 'delete' event for the elements of the previous list",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/091d40344ebeedd4633841146449ac772e33b631",
        "buggy_code": "statement = self.secondary.delete(sql.and_(*[c == sql.bindparam(c.key) for c in self.secondary.c]))",
        "fixed_code": "statement = self.secondary.delete(sql.and_(*[c == sql.bindparam(c.key) for c in self.secondary.c if c.key in associationrow]))",
        "patch": "@@ -281,7 +281,7 @@ def process_dependencies(self, task, deplist, uowcommit, delete = False):\n         if len(secondary_delete):\n             # TODO: precompile the delete/insert queries and store them as instance variables\n             # on the PropertyLoader\n-            statement = self.secondary.delete(sql.and_(*[c == sql.bindparam(c.key) for c in self.secondary.c]))\n+            statement = self.secondary.delete(sql.and_(*[c == sql.bindparam(c.key) for c in self.secondary.c if c.key in associationrow]))\n             connection.execute(statement, secondary_delete)\n         if len(secondary_insert):\n             statement = self.secondary.insert()"
    },
    {
        "commit_id": "3f8bfe517c2cb9687fa3d32443d762dfdbf0ae87",
        "commit_message": "fixed bug where Column with redefined \"key\" property wasnt getting\ntype conversion happening in the ResultProxy [ticket:207]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3f8bfe517c2cb9687fa3d32443d762dfdbf0ae87",
        "buggy_code": "self.typemap.setdefault(column.key.lower(), column.type)",
        "fixed_code": "self.typemap.setdefault(column.name.lower(), column.type)",
        "patch": "@@ -168,7 +168,7 @@ def visit_column(self, column):\n         if len(self.select_stack):\n             # if we are within a visit to a Select, set up the \"typemap\"\n             # for this column which is used to translate result set values\n-            self.typemap.setdefault(column.key.lower(), column.type)\n+            self.typemap.setdefault(column.name.lower(), column.type)\n         if column.table is None or not column.table.named_with_column():\n             self.strings[column] = column.name\n         else:"
    },
    {
        "commit_id": "8f8f5dec6cc53bf8bac18b515f20e572842c9675",
        "commit_message": "possible fix to cascade_mappers",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8f8f5dec6cc53bf8bac18b515f20e572842c9675",
        "buggy_code": "table_to_mapper[m.table] = m",
        "fixed_code": "table_to_mapper[m.mapped_table] = m",
        "patch": "@@ -105,7 +105,7 @@ def cascade_mappers(*classes_or_mappers):\n         else:\n             klass = item\n             m = class_mapper(klass)\n-        table_to_mapper[m.table] = m\n+        table_to_mapper[m.mapped_table] = m\n     def pluralize(name):\n         # oh crap, do we need locale stuff now\n         if name[-1] == 's':"
    },
    {
        "commit_id": "c12b48b62e4f94a651eec634ca74a028e4b3d760",
        "commit_message": "connection more careful about checking if its closed before operations\nsmall fix to table sort if no tables\nunit test tweaks",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c12b48b62e4f94a651eec634ca74a028e4b3d760",
        "buggy_code": "unittest.main()",
        "fixed_code": "testbase.main()",
        "patch": "@@ -165,4 +165,4 @@ def tearDownAll(self):\n         cartitems.drop()\n \n if __name__ == \"__main__\":\n-    unittest.main()\n+    testbase.main()"
    },
    {
        "commit_id": "c8637ba660aec9f718e5e3d38a1c0c62983bbdb0",
        "commit_message": "made order_by/group_by construction a little more simplisitc\nfix to mapper extension\nCompoundSelect can export all columns now, not sure if theres any advantage there",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c8637ba660aec9f718e5e3d38a1c0c62983bbdb0",
        "buggy_code": "return self.next.populate_instance(row, imap, result, instance, isnew)",
        "fixed_code": "return self.next.populate_instance(mapper, instance, row, identitykey, imap, isnew)",
        "patch": "@@ -1062,7 +1062,7 @@ def populate_instance(self, mapper, instance, row, identitykey, imap, isnew):\n         if self.next is None:\n             return EXT_PASS\n         else:\n-            return self.next.populate_instance(row, imap, result, instance, isnew)\n+            return self.next.populate_instance(mapper, instance, row, identitykey, imap, isnew)\n     def before_insert(self, mapper, instance):\n         \"\"\"called before an object instance is INSERTed into its table.\n         "
    },
    {
        "commit_id": "225b9ec1385a80170ddf27e7c2b62e76ee680590",
        "commit_message": "fix to oeprator test for new parenthesized rules",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/225b9ec1385a80170ddf27e7c2b62e76ee680590",
        "buggy_code": "literal(\"a\") + literal(\"b\") * literal(\"c\"), \":literal + :liter_1 * :liter_2\", db",
        "fixed_code": "literal(\"a\") + literal(\"b\") * literal(\"c\"), \":literal + (:liter_1 * :liter_2)\", db",
        "patch": "@@ -210,7 +210,7 @@ def testoperators(self):\n         )\n         \n         self.runtest(\n-            literal(\"a\") + literal(\"b\") * literal(\"c\"), \":literal + :liter_1 * :liter_2\", db\n+            literal(\"a\") + literal(\"b\") * literal(\"c\"), \":literal + (:liter_1 * :liter_2)\", db\n         )\n \n     def testmultiparam(self):"
    },
    {
        "commit_id": "1a5e65c14f11ea2d88e2a00cea6cbd82f371e385",
        "commit_message": "Jonas Borgstr\u00f6m's fantastic SelectRsults patch that adds dynamic list argument support to the mapper.select() methd.  associated unit test tweaks and mapper integration.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a5e65c14f11ea2d88e2a00cea6cbd82f371e385",
        "buggy_code": "result = self.mapper.select(self.lazywhere, order_by=order_by, params=params)",
        "fixed_code": "result = list(self.mapper.select(self.lazywhere, order_by=order_by, params=params))",
        "patch": "@@ -616,7 +616,7 @@ def lazyload():\n                     order_by = self.secondary.default_order_by()\n                 else:\n                     order_by = False\n-                result = self.mapper.select(self.lazywhere, order_by=order_by, params=params)\n+                result = list(self.mapper.select(self.lazywhere, order_by=order_by, params=params))\n             else:\n                 result = []\n             if self.uselist:"
    },
    {
        "commit_id": "1a5e65c14f11ea2d88e2a00cea6cbd82f371e385",
        "commit_message": "Jonas Borgstr\u00f6m's fantastic SelectRsults patch that adds dynamic list argument support to the mapper.select() methd.  associated unit test tweaks and mapper integration.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1a5e65c14f11ea2d88e2a00cea6cbd82f371e385",
        "buggy_code": "all = User.select()[:]",
        "fixed_code": "all = User.select()[:].list()",
        "patch": "@@ -96,7 +96,7 @@ def test():\n                     try:\n                         trans  = objectstore.begin()\n \n-                        all = User.select()[:]\n+                        all = User.select()[:].list()\n                         assert all == []\n \n                         u = User()"
    },
    {
        "commit_id": "f08bf5a6fec07d8c6295926d5fc9735ba72c8cc9",
        "commit_message": "fixed nasty transaction counting bug with new session thing + unit test",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f08bf5a6fec07d8c6295926d5fc9735ba72c8cc9",
        "buggy_code": "module_engine = ProxyEngine()",
        "fixed_code": "module_engine = ProxyEngine(echo=testbase.echo)",
        "patch": "@@ -11,7 +11,7 @@\n #\n \n \n-module_engine = ProxyEngine()\n+module_engine = ProxyEngine(echo=testbase.echo)\n users = Table('users', module_engine, \n               Column('user_id', Integer, primary_key=True),\n               Column('user_name', String(16)),"
    },
    {
        "commit_id": "bbf9f191ec10067d282df63f4c684af2c00d8110",
        "commit_message": "fixed attributes bug where if an object is committed, its lazy-loaded list got\nblown away if it hadnt been loaded",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/bbf9f191ec10067d282df63f4c684af2c00d8110",
        "buggy_code": "if not self.live:",
        "fixed_code": "if not self.live and not passive:",
        "patch": "@@ -214,7 +214,7 @@ def gethistory(self, passive=False, *args, **kwargs):\n                 value = None\n             p = self.manager.create_list(self.obj, self.key, value, readonly=self.live, **self.kwargs)\n         \n-        if not self.live:\n+        if not self.live and not passive:\n             # set the new history list as the new attribute, discards ourself\n             self.manager.attribute_history(self.obj)[self.key] = p\n             self.manager = None"
    },
    {
        "commit_id": "a579e8f687833257757d53e772698f652e90472a",
        "commit_message": "small tweak to select in order to fix [ticket:112]...the exported columns when doing select on a select() will be the column names, not the keys.  this is with selects that have use_labels=False.  which makes sense since using the \"key\" and not the name implies a label has to be used.",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/a579e8f687833257757d53e772698f652e90472a",
        "buggy_code": "return column._make_proxy(self, name=column.key)",
        "fixed_code": "return column._make_proxy(self, name=column.name)",
        "patch": "@@ -1272,7 +1272,7 @@ def _proxy_column(self, column):\n         if self.use_labels:\n             return column._make_proxy(self, name=column._label)\n         else:\n-            return column._make_proxy(self, name=column.key)\n+            return column._make_proxy(self, name=column.name)\n             \n     def append_whereclause(self, whereclause):\n         self._append_condition('whereclause', whereclause)"
    },
    {
        "commit_id": "c5e1abc7f7adce841775ea92b72bcf95207027af",
        "commit_message": "refactor to Compiled.get_params() to return new ClauseParameters object, a more intelligent bind parameter dictionary that does type conversions late and preserves the unconverted value; used to fix mappers not comparing correct value in post-fetch [ticket:110]\nremoved pre_exec assertion from oracle/firebird regarding \"check for sequence/primary key value\"\nfix to Unicode type to check for null, fixes [ticket:109]\ncreate_engine() now uses genericized parameters; host/hostname, db/dbname/database, password/passwd, etc. for all engine connections\nfix to select([func(column)]) so that it creates a FROM clause to the column's table, fixes [ticket:111]\ndoc updates for column defaults, indexes, connection pooling, engine params\nunit tests for the above bugfixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5e1abc7f7adce841775ea92b72bcf95207027af",
        "buggy_code": "self.opts = opts or {}",
        "fixed_code": "self.opts = self._translate_connect_args(('host', 'db', 'user', 'passwd'), opts)",
        "patch": "@@ -134,7 +134,7 @@ class MySQLEngine(ansisql.ANSISQLEngine):\n     def __init__(self, opts, module = None, **params):\n         if module is None:\n             self.module = mysql\n-        self.opts = opts or {}\n+        self.opts = self._translate_connect_args(('host', 'db', 'user', 'passwd'), opts)\n         ansisql.ANSISQLEngine.__init__(self, **params)\n \n     def connect_args(self):"
    },
    {
        "commit_id": "c5e1abc7f7adce841775ea92b72bcf95207027af",
        "commit_message": "refactor to Compiled.get_params() to return new ClauseParameters object, a more intelligent bind parameter dictionary that does type conversions late and preserves the unconverted value; used to fix mappers not comparing correct value in post-fetch [ticket:110]\nremoved pre_exec assertion from oracle/firebird regarding \"check for sequence/primary key value\"\nfix to Unicode type to check for null, fixes [ticket:109]\ncreate_engine() now uses genericized parameters; host/hostname, db/dbname/database, password/passwd, etc. for all engine connections\nfix to select([func(column)]) so that it creates a FROM clause to the column's table, fixes [ticket:111]\ndoc updates for column defaults, indexes, connection pooling, engine params\nunit tests for the above bugfixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5e1abc7f7adce841775ea92b72bcf95207027af",
        "buggy_code": "self.opts = opts or {}",
        "fixed_code": "self.opts = self._translate_connect_args(('host', 'database', 'user', 'password'), opts)",
        "patch": "@@ -181,7 +181,7 @@ def __init__(self, opts, module=None, use_oids=False, **params):\n                 self.version = 1\n         except:\n             self.version = 1\n-        self.opts = opts or {}\n+        self.opts = self._translate_connect_args(('host', 'database', 'user', 'password'), opts)\n         if self.opts.has_key('port'):\n             if self.version == 2:\n                 self.opts['port'] = int(self.opts['port'])"
    },
    {
        "commit_id": "c5e1abc7f7adce841775ea92b72bcf95207027af",
        "commit_message": "refactor to Compiled.get_params() to return new ClauseParameters object, a more intelligent bind parameter dictionary that does type conversions late and preserves the unconverted value; used to fix mappers not comparing correct value in post-fetch [ticket:110]\nremoved pre_exec assertion from oracle/firebird regarding \"check for sequence/primary key value\"\nfix to Unicode type to check for null, fixes [ticket:109]\ncreate_engine() now uses genericized parameters; host/hostname, db/dbname/database, password/passwd, etc. for all engine connections\nfix to select([func(column)]) so that it creates a FROM clause to the column's table, fixes [ticket:111]\ndoc updates for column defaults, indexes, connection pooling, engine params\nunit tests for the above bugfixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5e1abc7f7adce841775ea92b72bcf95207027af",
        "buggy_code": "unique=None : True or undex name. Indicates that this column is",
        "fixed_code": "unique=None : True or index name. Indicates that this column is",
        "patch": "@@ -267,7 +267,7 @@ def __init__(self, name, type, *args, **kwargs):\n         name will all be included in the index, in the order of their\n         creation.\n \n-        unique=None : True or undex name. Indicates that this column is\n+        unique=None : True or index name. Indicates that this column is\n         indexed in a unique index . Pass true to autogenerate the index\n         name. Pass a string to specify the index name. Multiple columns that\n         specify the same index name will all be included in the index, in the"
    },
    {
        "commit_id": "c5e1abc7f7adce841775ea92b72bcf95207027af",
        "commit_message": "refactor to Compiled.get_params() to return new ClauseParameters object, a more intelligent bind parameter dictionary that does type conversions late and preserves the unconverted value; used to fix mappers not comparing correct value in post-fetch [ticket:110]\nremoved pre_exec assertion from oracle/firebird regarding \"check for sequence/primary key value\"\nfix to Unicode type to check for null, fixes [ticket:109]\ncreate_engine() now uses genericized parameters; host/hostname, db/dbname/database, password/passwd, etc. for all engine connections\nfix to select([func(column)]) so that it creates a FROM clause to the column's table, fixes [ticket:111]\ndoc updates for column defaults, indexes, connection pooling, engine params\nunit tests for the above bugfixes",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/c5e1abc7f7adce841775ea92b72bcf95207027af",
        "buggy_code": "db_uri = 'mysql://db=test&host=127.0.0.1&user=scott&passwd=tiger'",
        "fixed_code": "db_uri = 'mysql://database=test&host=127.0.0.1&user=scott&password=tiger'",
        "patch": "@@ -40,7 +40,7 @@ def parse_argv():\n         elif DBTYPE == 'postgres':\n             db_uri = 'postgres://database=test&port=5432&host=127.0.0.1&user=scott&password=tiger'\n         elif DBTYPE == 'mysql':\n-            db_uri = 'mysql://db=test&host=127.0.0.1&user=scott&passwd=tiger'\n+            db_uri = 'mysql://database=test&host=127.0.0.1&user=scott&password=tiger'\n         elif DBTYPE == 'oracle':\n             db_uri = 'oracle://user=scott&password=tiger'\n "
    },
    {
        "commit_id": "97b1c3a59a8158a75f697faa3aae78875d9d6a61",
        "commit_message": "patch on index create syntax to fix [ticket:90] so schema name gets included",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/97b1c3a59a8158a75f697faa3aae78875d9d6a61",
        "buggy_code": "% (index.name, index.table.name,",
        "fixed_code": "% (index.name, index.table.fullname,",
        "patch": "@@ -609,7 +609,7 @@ def visit_index(self, index):\n         if index.unique:\n             self.append('UNIQUE ')\n         self.append('INDEX %s ON %s (%s)' \\\n-                    % (index.name, index.table.name,\n+                    % (index.name, index.table.fullname,\n                        string.join([c.name for c in index.columns], ', ')))\n         self.execute()\n         "
    },
    {
        "commit_id": "e5415ee9e10da5db55d1ebeac8a486cd4ac88984",
        "commit_message": "more work on cycles, fleshed out tests for post_update, fix to the delete phase of a one-to-many post update\ncloses [ticket:67]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e5415ee9e10da5db55d1ebeac8a486cd4ac88984",
        "buggy_code": "if self.private:",
        "fixed_code": "if self.private and not self.post_update:",
        "patch": "@@ -458,7 +458,7 @@ def getlist(obj, passive=True):\n         elif self.direction == PropertyLoader.ONETOMANY and delete:\n             # head object is being deleted, and we manage its list of child objects\n             # the child objects have to have their foreign key to the parent set to NULL\n-            if self.private:\n+            if self.private and not self.post_update:\n                 # if we are privately managed, then all our objects should\n                 # have been marked as \"todelete\" already and no attribute adjustment is needed\n                 return"
    },
    {
        "commit_id": "e5415ee9e10da5db55d1ebeac8a486cd4ac88984",
        "commit_message": "more work on cycles, fleshed out tests for post_update, fix to the delete phase of a one-to-many post update\ncloses [ticket:67]",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/e5415ee9e10da5db55d1ebeac8a486cd4ac88984",
        "buggy_code": "self.unittest.assert_(statement == query and params == parameters, \"Testing for query '%s' params %s, received '%s' with params %s\" % (query, repr(params), statement, repr(parameters)))",
        "fixed_code": "self.unittest.assert_(statement == query and (params is None or params == parameters), \"Testing for query '%s' params %s, received '%s' with params %s\" % (query, repr(params), statement, repr(parameters)))",
        "patch": "@@ -143,7 +143,7 @@ def post_exec(self, proxy, compiled, parameters, **kwargs):\n \n             query = self.convert_statement(query)\n \n-            self.unittest.assert_(statement == query and params == parameters, \"Testing for query '%s' params %s, received '%s' with params %s\" % (query, repr(params), statement, repr(parameters)))\n+            self.unittest.assert_(statement == query and (params is None or params == parameters), \"Testing for query '%s' params %s, received '%s' with params %s\" % (query, repr(params), statement, repr(parameters)))\n         self.sql_count += 1\n         return self.realexec(proxy, compiled, parameters, **kwargs)\n "
    },
    {
        "commit_id": "94ac052104cd07ae0dace2d1b1ac6a7144412c44",
        "commit_message": "fix to silent \"recursive\" bug in schema getattr that was somehow running only 994 times",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/94ac052104cd07ae0dace2d1b1ac6a7144412c44",
        "buggy_code": "if not hasattr(self, '_impl'):",
        "fixed_code": "if not self.__dict__.has_key('_impl'):",
        "patch": "@@ -49,7 +49,7 @@ def __repr__(self):\n     def __getattr__(self, key):\n         \"\"\"proxies method calls to an underlying implementation object for methods not found\n         locally\"\"\"\n-        if not hasattr(self, '_impl'):\n+        if not self.__dict__.has_key('_impl'):\n             raise AttributeError(key)\n         return getattr(self._impl, key)\n "
    },
    {
        "commit_id": "24e22e2e5a20c6dea4e8030feb1f579b7dfc2bcd",
        "commit_message": "fix to EagerLoad where it late-initializes its eager chain, thereby not getting messed up by late add_property() calls",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/24e22e2e5a20c6dea4e8030feb1f579b7dfc2bcd",
        "buggy_code": "raise ArgumentError(\"Cant find any foreign key relationships between '%s' (%s) and '%s' (%s)\" % (primary.name, repr(primary), secondary.name, repr(secondary)))",
        "fixed_code": "raise ArgumentError(\"Cant find any foreign key relationships between '%s' and '%s'\" % (primary.name, secondary.name))",
        "patch": "@@ -870,7 +870,7 @@ def _match_primaries(self, primary, secondary):\n                     crit.append(secondary._get_col_by_original(fk.column) == fk.parent)\n                     self.foreignkey = fk.parent\n         if len(crit) == 0:\n-            raise ArgumentError(\"Cant find any foreign key relationships between '%s' (%s) and '%s' (%s)\" % (primary.name, repr(primary), secondary.name, repr(secondary)))\n+            raise ArgumentError(\"Cant find any foreign key relationships between '%s' and '%s'\" % (primary.name, secondary.name))\n         elif len(crit) == 1:\n             return (crit[0])\n         else:"
    },
    {
        "commit_id": "fa11bcd6720548b0e845623f8c3b4c93b3a47939",
        "commit_message": "bind_to fix",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/fa11bcd6720548b0e845623f8c3b4c93b3a47939",
        "buggy_code": "self.bind_to(instance)",
        "fixed_code": "self._bind_to(instance)",
        "patch": "@@ -168,7 +168,7 @@ def import_instance(self, instance):\n             else:\n                 instance._instance_key = key\n                 u.identity_map[key] = instance\n-                self.bind_to(instance)\n+                self._bind_to(instance)\n         else:\n             u.register_new(instance)\n         return instance"
    },
    {
        "commit_id": "8a3c00bc5a705132f8c03263e330acbf373a73bf",
        "commit_message": "lazy load column fix courtesy raul garcia garcia",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/8a3c00bc5a705132f8c03263e330acbf373a73bf",
        "buggy_code": "ident.append(params[self.mapper.table.name + \"_\" + primary_key.key])",
        "fixed_code": "ident.append(params[self.mapper.table.name + \"_\" + primary_key.name])",
        "patch": "@@ -659,7 +659,7 @@ def lazyload():\n                 if self.use_get:\n                     ident = []\n                     for primary_key in self.mapper.pks_by_table[self.mapper.table]:\n-                        ident.append(params[self.mapper.table.name + \"_\" + primary_key.key])\n+                        ident.append(params[self.mapper.table.name + \"_\" + primary_key.name])\n                     return self.mapper.get(*ident)\n                 elif self.order_by is not False:\n                     order_by = self.order_by"
    },
    {
        "commit_id": "703908caadfc2cb763e2838e4886074aef32c294",
        "commit_message": "slight glitch when the same clause is compiled repeatedly and contains redundant bind parameters...this fix prevents the binds from stepping on each other....",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/703908caadfc2cb763e2838e4886074aef32c294",
        "buggy_code": "self.binds[bindparam.shortname] = bindparam",
        "fixed_code": "self.binds.setdefault(bindparam.shortname, bindparam)",
        "patch": "@@ -222,7 +222,7 @@ def binary_operator_string(self, binary):\n \n     def visit_bindparam(self, bindparam):\n         if bindparam.shortname != bindparam.key:\n-            self.binds[bindparam.shortname] = bindparam\n+            self.binds.setdefault(bindparam.shortname, bindparam)\n         count = 1\n         key = bindparam.key\n "
    },
    {
        "commit_id": "3c73d40fd34f48afde1cc5eef4e77d4c86659db4",
        "commit_message": "fixes to TypeDecorator, including A. Houghton's patch",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c73d40fd34f48afde1cc5eef4e77d4c86659db4",
        "buggy_code": "self.assert_(table.c.col2.type.is_unicode)",
        "fixed_code": "self.assert_(isinstance(table.c.col2.type, Unicode))",
        "patch": "@@ -139,7 +139,7 @@ def testoverride(self):\n         \n             print repr(table)\n             self.assert_(isinstance(table.c.col1.type, Integer))\n-            self.assert_(table.c.col2.type.is_unicode)\n+            self.assert_(isinstance(table.c.col2.type, Unicode))\n             self.assert_(isinstance(table.c.col4.type, String))\n         finally:\n             table.drop()"
    },
    {
        "commit_id": "1e1eea05538e43a41750ba8548da517d77284e9c",
        "commit_message": "got oracle LIMIT/OFFSET to use row_number() syntax\nsql: ColumnClause will use the given name when proxying itself (used for the \"ora_rn\" label)\nansisql: When adding on ORDER_BY, GROUP_BY, etc. clauses, if there is no string for the column list,\nthen dont add the clause (this allows oracle to strip out the ORDER BY)\nOracle is modifying the select statement, which is not ideal - should fix that",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/1e1eea05538e43a41750ba8548da517d77284e9c",
        "buggy_code": "c = ColumnClause(self.text or name, selectable)",
        "fixed_code": "c = ColumnClause(name or self.text, selectable)",
        "patch": "@@ -987,7 +987,7 @@ def _bind_param(self, obj):\n         else:\n             return BindParamClause(self.table.name + \"_\" + self.text, obj, shortname = self.text, type=self.type)\n     def _make_proxy(self, selectable, name = None):\n-        c = ColumnClause(self.text or name, selectable)\n+        c = ColumnClause(name or self.text, selectable)\n         selectable.columns[c.key] = c\n         return c\n "
    },
    {
        "commit_id": "b769988c9c6f34b2c704f5b90707d538b747fe18",
        "commit_message": "column.label is now a function; fix byroot example, add 'default_label' accessor to columnimpl",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/b769988c9c6f34b2c704f5b90707d538b747fe18",
        "buggy_code": "return TreeNode(row[mapper.c.name.label], _mapper_nohistory=True)",
        "fixed_code": "return TreeNode(row[mapper.c.name], _mapper_nohistory=True)",
        "patch": "@@ -68,7 +68,7 @@ class TreeLoader(MapperExtension):\n     def create_instance(self, mapper, row, imap, class_):\n         \"\"\"creates an instance of a TreeNode.  since the TreeNode constructor requires\n         the 'name' argument, this method pulls the data from the database row directly.\"\"\"\n-        return TreeNode(row[mapper.c.name.label], _mapper_nohistory=True)\n+        return TreeNode(row[mapper.c.name], _mapper_nohistory=True)\n     def after_insert(self, mapper, instance):\n         \"\"\"runs after the insert of a new TreeNode row.  The primary key of the row is not determined\n         until the insert is complete, since most DB's use autoincrementing columns.  If this node is"
    },
    {
        "commit_id": "3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "commit_message": "fix to parameter thing in insert\nadded unicodetype to __all__ for types",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "buggy_code": "if self.parameters.get(c.key, None) is None and c.default is not None:",
        "fixed_code": "if (self.parameters is None or self.parameters.get(c.key, None) is None) and c.default is not None:",
        "patch": "@@ -360,7 +360,7 @@ def visit_sequence(s, seq):\n                 self.visit_insert_sequence(c, seq)\n         vis = DefaultVisitor()\n         for c in insert_stmt.table.c:\n-            if self.parameters.get(c.key, None) is None and c.default is not None:\n+            if (self.parameters is None or self.parameters.get(c.key, None) is None) and c.default is not None:\n                 c.default.accept_visitor(vis)\n         \n         self.isinsert = True"
    },
    {
        "commit_id": "3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "commit_message": "fix to parameter thing in insert\nadded unicodetype to __all__ for types",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "buggy_code": "def execute(self, statement, parameters, connection=None, cursor=None, echo = None, typemap = None, commit=False, **kwargs):",
        "fixed_code": "def execute(self, statement, parameters, connection=None, cursor=None, echo=None, typemap=None, commit=False, **kwargs):",
        "patch": "@@ -381,7 +381,7 @@ def proxy(statement=None, parameters=None):\n         self.post_exec(proxy, compiled, parameters, **kwargs)\n         return ResultProxy(cursor, self, typemap=compiled.typemap)\n \n-    def execute(self, statement, parameters, connection=None, cursor=None, echo = None, typemap = None, commit=False, **kwargs):\n+    def execute(self, statement, parameters, connection=None, cursor=None, echo=None, typemap=None, commit=False, **kwargs):\n         \"\"\"executes the given string-based SQL statement with the given parameters.  \n \n         The parameters can be a dictionary or a list, or a list of dictionaries or lists, depending"
    },
    {
        "commit_id": "3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "commit_message": "fix to parameter thing in insert\nadded unicodetype to __all__ for types",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3c62b09c5c795bb30f47cc6850bdfefa709d0a94",
        "buggy_code": "'TIMESTAMP', 'DATETIME', 'CLOB', 'BLOB', 'BOOLEAN', 'String', 'Integer', 'Numeric', 'Float', 'DateTime', 'Binary', 'Boolean', 'NULLTYPE'",
        "fixed_code": "'TIMESTAMP', 'DATETIME', 'CLOB', 'BLOB', 'BOOLEAN', 'String', 'Integer', 'Numeric', 'Float', 'DateTime', 'Binary', 'Boolean', 'Unicode', 'NULLTYPE'",
        "patch": "@@ -17,7 +17,7 @@\n \n __all__ = [ 'TypeEngine', 'TypeDecorator', 'NullTypeEngine',\n             'INT', 'CHAR', 'VARCHAR', 'TEXT', 'FLOAT', 'DECIMAL', \n-            'TIMESTAMP', 'DATETIME', 'CLOB', 'BLOB', 'BOOLEAN', 'String', 'Integer', 'Numeric', 'Float', 'DateTime', 'Binary', 'Boolean', 'NULLTYPE'\n+            'TIMESTAMP', 'DATETIME', 'CLOB', 'BLOB', 'BOOLEAN', 'String', 'Integer', 'Numeric', 'Float', 'DateTime', 'Binary', 'Boolean', 'Unicode', 'NULLTYPE'\n             ]\n \n "
    },
    {
        "commit_id": "3e4b0d17a9f4d9dd1ba293dac3e0966f7b80f69c",
        "commit_message": "fix to oracle function select, users table in test should be non-sequence",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/3e4b0d17a9f4d9dd1ba293dac3e0966f7b80f69c",
        "buggy_code": "Column('user_id', Integer, Sequence('user_id_seq', optional=False), primary_key = True),",
        "fixed_code": "Column('user_id', Integer, Sequence('user_id_seq', optional=True), primary_key = True),",
        "patch": "@@ -12,7 +12,7 @@\n \n \n users = Table('users', db,\n-    Column('user_id', Integer, Sequence('user_id_seq', optional=False), primary_key = True),\n+    Column('user_id', Integer, Sequence('user_id_seq', optional=True), primary_key = True),\n     Column('user_name', String(40)),\n )\n "
    },
    {
        "commit_id": "f81f3f8bd4d496dcc5fc142f6dbad987ce1ea45c",
        "commit_message": "got round trip for multiple priamry keys to work with table create/reflection (postgres, sqlite)\nsmall fix to ORM get with multiple primary keys",
        "commit_url": "https://github.com/sqlalchemy/sqlalchemy/commit/f81f3f8bd4d496dcc5fc142f6dbad987ce1ea45c",
        "buggy_code": "i += 2",
        "fixed_code": "i += 1",
        "patch": "@@ -371,7 +371,7 @@ def get(self, *ident):\n                 # appending to the and_'s clause list directly to skip\n                 # typechecks etc.\n                 clause.clauses.append(primary_key == ident[i])\n-                i += 2\n+                i += 1\n             try:\n                 return self.select(clause)[0]\n             except IndexError:"
    }
]