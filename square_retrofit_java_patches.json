[
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -1,2 +1,2 @@\n @retrofit2.internal.EverythingIsNonNull\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.annotation.XmlElement;\n import jakarta.xml.bind.annotation.XmlRootElement;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import static com.google.common.truth.Truth.assertThat;\n import static junit.framework.TestCase.fail;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.annotation.XmlAttribute;\n import jakarta.xml.bind.annotation.XmlElement;"
    },
    {
        "commit_id": "9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "commit_message": "Merge pull request #4102 from square/jw.package-name.2024-03-18\n\nFix package name",
        "commit_url": "https://github.com/square/retrofit/commit/9ae4f9527f243f91b182a6b76877c4cd28f96eab",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n enum Type {\n   OTHER,"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.JAXBContext;\n import jakarta.xml.bind.JAXBException;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -1,2 +1,2 @@\n @retrofit2.internal.EverythingIsNonNull\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.annotation.XmlElement;\n import jakarta.xml.bind.annotation.XmlRootElement;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import static com.google.common.truth.Truth.assertThat;\n import static junit.framework.TestCase.fail;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n import jakarta.xml.bind.annotation.XmlAttribute;\n import jakarta.xml.bind.annotation.XmlElement;"
    },
    {
        "commit_id": "28225fef67eed2bfbe705316b3f04a98abb97798",
        "commit_message": "Fix package name\n\nThis module has not shipped yet, so it's safe to change.",
        "commit_url": "https://github.com/square/retrofit/commit/28225fef67eed2bfbe705316b3f04a98abb97798",
        "buggy_code": "package retrofit2.converter.jaxb;",
        "fixed_code": "package retrofit2.converter.jaxb3;",
        "patch": "@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package retrofit2.converter.jaxb;\n+package retrofit2.converter.jaxb3;\n \n enum Type {\n   OTHER,"
    },
    {
        "commit_id": "c016a38ce4d40ff8c3d40c68cb7cf3334f61cf32",
        "commit_message": "Update dependency com.squareup.moshi:moshi to v1.14.0 (#3815)\n\n* Update dependency com.squareup.moshi:moshi to v1.14.0\r\n\r\n* Track error message update\r\n\r\n---------\r\n\r\nCo-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>\r\nCo-authored-by: Jake Wharton <github@jakewharton.com>",
        "commit_url": "https://github.com/square/retrofit/commit/c016a38ce4d40ff8c3d40c68cb7cf3334f61cf32",
        "buggy_code": "assertThat(e).hasMessage(\"Cannot skip unexpected NAME at $.\");",
        "fixed_code": "assertThat(e).hasMessage(\"Cannot skip unexpected NAME at $.taco\");",
        "patch": "@@ -268,7 +268,7 @@ public void failOnUnknown() throws IOException, InterruptedException {\n       call.execute();\n       fail();\n     } catch (JsonDataException e) {\n-      assertThat(e).hasMessage(\"Cannot skip unexpected NAME at $.\");\n+      assertThat(e).hasMessage(\"Cannot skip unexpected NAME at $.taco\");\n     }\n   }\n "
    },
    {
        "commit_id": "b133ba91cffc73eff0e5780b4286d8852b5c7dba",
        "commit_message": "Merge pull request #3355 from square/jakew/gradle/2020-03-25\n\nSmall fixes from error-prone and animal sniffer",
        "commit_url": "https://github.com/square/retrofit/commit/b133ba91cffc73eff0e5780b4286d8852b5c7dba",
        "buggy_code": "+ \" had no parser() method or PARSER field.\");",
        "fixed_code": "+ \" had no parser() method or PARSER field.\", e);",
        "patch": "@@ -77,7 +77,7 @@ private ProtoConverterFactory(@Nullable ExtensionRegistryLite registry) {\n       } catch (NoSuchFieldException | IllegalAccessException e) {\n         throw new IllegalArgumentException(\"Found a protobuf message but \"\n             + c.getName()\n-            + \" had no parser() method or PARSER field.\");\n+            + \" had no parser() method or PARSER field.\", e);\n       }\n     }\n     return new ProtoResponseBodyConverter<>(parser, registry);"
    },
    {
        "commit_id": "b133ba91cffc73eff0e5780b4286d8852b5c7dba",
        "commit_message": "Merge pull request #3355 from square/jakew/gradle/2020-03-25\n\nSmall fixes from error-prone and animal sniffer",
        "commit_url": "https://github.com/square/retrofit/commit/b133ba91cffc73eff0e5780b4286d8852b5c7dba",
        "buggy_code": "} catch (Throwable e) {",
        "fixed_code": "} catch (Exception e) {",
        "patch": "@@ -163,7 +163,7 @@ public final class CallsTest {\n     try {\n       taco.execute();\n       fail();\n-    } catch (Throwable e) {\n+    } catch (Exception e) {\n       assertSame(failure, e);\n     }\n     assertTrue(taco.isExecuted());"
    },
    {
        "commit_id": "d5b83600aafe3c21fe8a621cb46e3277598c856d",
        "commit_message": "Small fixes from error-prone and animal sniffer",
        "commit_url": "https://github.com/square/retrofit/commit/d5b83600aafe3c21fe8a621cb46e3277598c856d",
        "buggy_code": "+ \" had no parser() method or PARSER field.\");",
        "fixed_code": "+ \" had no parser() method or PARSER field.\", e);",
        "patch": "@@ -77,7 +77,7 @@ private ProtoConverterFactory(@Nullable ExtensionRegistryLite registry) {\n       } catch (NoSuchFieldException | IllegalAccessException e) {\n         throw new IllegalArgumentException(\"Found a protobuf message but \"\n             + c.getName()\n-            + \" had no parser() method or PARSER field.\");\n+            + \" had no parser() method or PARSER field.\", e);\n       }\n     }\n     return new ProtoResponseBodyConverter<>(parser, registry);"
    },
    {
        "commit_id": "d5b83600aafe3c21fe8a621cb46e3277598c856d",
        "commit_message": "Small fixes from error-prone and animal sniffer",
        "commit_url": "https://github.com/square/retrofit/commit/d5b83600aafe3c21fe8a621cb46e3277598c856d",
        "buggy_code": "} catch (Throwable e) {",
        "fixed_code": "} catch (Exception e) {",
        "patch": "@@ -163,7 +163,7 @@ public final class CallsTest {\n     try {\n       taco.execute();\n       fail();\n-    } catch (Throwable e) {\n+    } catch (Exception e) {\n       assertSame(failure, e);\n     }\n     assertTrue(taco.isExecuted());"
    },
    {
        "commit_id": "f288fef3c150db09b8deb4b72707dd430e8239f5",
        "commit_message": "Merge pull request #3346 from square/jakew/gradle/2020-03-25\n\nSmall fixes from error-prone",
        "commit_url": "https://github.com/square/retrofit/commit/f288fef3c150db09b8deb4b72707dd430e8239f5",
        "buggy_code": "public void cancel() {",
        "fixed_code": "@Override public void cancel() {",
        "patch": "@@ -234,7 +234,7 @@ Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {\n     }\n   }\n \n-  public void cancel() {\n+  @Override public void cancel() {\n     canceled = true;\n \n     okhttp3.Call call;"
    },
    {
        "commit_id": "a1897aebc2678d5ca1f3ae09416030673d415ab2",
        "commit_message": "Small fixes from error-prone",
        "commit_url": "https://github.com/square/retrofit/commit/a1897aebc2678d5ca1f3ae09416030673d415ab2",
        "buggy_code": "public void cancel() {",
        "fixed_code": "@Override public void cancel() {",
        "patch": "@@ -234,7 +234,7 @@ Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {\n     }\n   }\n \n-  public void cancel() {\n+  @Override public void cancel() {\n     canceled = true;\n \n     okhttp3.Call call;"
    },
    {
        "commit_id": "49aa9fe9ccb3addb7e4fbc17f0a96d0c584e9f6c",
        "commit_message": "Merge pull request #3344 from square/jakew/get-a-handle/2020-03-24\n\nDon't attempt to resolve Lookup ctor on API 24/25",
        "commit_url": "https://github.com/square/retrofit/commit/49aa9fe9ccb3addb7e4fbc17f0a96d0c584e9f6c",
        "buggy_code": "public final class Java8DefaultMethodsTest {",
        "fixed_code": "public final class DefaultMethodsTest {",
        "patch": "@@ -26,7 +26,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-public final class Java8DefaultMethodsTest {\n+public final class DefaultMethodsTest {\n   @Rule public final MockWebServer server = new MockWebServer();\n \n   interface Example {"
    },
    {
        "commit_id": "58503333735ffada17aef1c8fa617cf91a4102f8",
        "commit_message": "Don't attempt to resolve Lookup ctor on API 24/25\n\nUnfortuntaely we lack functional tests on Android. I'm going to remedy that separately.",
        "commit_url": "https://github.com/square/retrofit/commit/58503333735ffada17aef1c8fa617cf91a4102f8",
        "buggy_code": "public final class Java8DefaultMethodsTest {",
        "fixed_code": "public final class DefaultMethodsTest {",
        "patch": "@@ -26,7 +26,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-public final class Java8DefaultMethodsTest {\n+public final class DefaultMethodsTest {\n   @Rule public final MockWebServer server = new MockWebServer();\n \n   interface Example {"
    },
    {
        "commit_id": "f9a225949bcce6f20de8bfcae77a6693eb208ff8",
        "commit_message": "Merge pull request #2904 from NightlyNexus/eric.2018-09-23.delegating-optional\n\nFix Optional converter factories not delegating properly.",
        "commit_url": "https://github.com/square/retrofit/commit/f9a225949bcce6f20de8bfcae77a6693eb208ff8",
        "buggy_code": "retrofit.nextResponseBodyConverter(this, innerType, annotations);",
        "fixed_code": "retrofit.responseBodyConverter(innerType, annotations);",
        "patch": "@@ -45,7 +45,7 @@ private GuavaOptionalConverterFactory() {\n \n     Type innerType = getParameterUpperBound(0, (ParameterizedType) type);\n     Converter<ResponseBody, Object> delegate =\n-        retrofit.nextResponseBodyConverter(this, innerType, annotations);\n+        retrofit.responseBodyConverter(innerType, annotations);\n     return new OptionalConverter<>(delegate);\n   }\n }"
    },
    {
        "commit_id": "f9a225949bcce6f20de8bfcae77a6693eb208ff8",
        "commit_message": "Merge pull request #2904 from NightlyNexus/eric.2018-09-23.delegating-optional\n\nFix Optional converter factories not delegating properly.",
        "commit_url": "https://github.com/square/retrofit/commit/f9a225949bcce6f20de8bfcae77a6693eb208ff8",
        "buggy_code": "retrofit.nextResponseBodyConverter(this, innerType, annotations);",
        "fixed_code": "retrofit.responseBodyConverter(innerType, annotations);",
        "patch": "@@ -49,7 +49,7 @@ private Java8OptionalConverterFactory() {\n \n     Type innerType = getParameterUpperBound(0, (ParameterizedType) type);\n     Converter<ResponseBody, Object> delegate =\n-        retrofit.nextResponseBodyConverter(this, innerType, annotations);\n+        retrofit.responseBodyConverter(innerType, annotations);\n     return new OptionalConverter<>(delegate);\n   }\n }"
    },
    {
        "commit_id": "8cd0be328e1ae2aa1446166776cc2e3c7e54a098",
        "commit_message": "Fix Optional converter factories not delegating properly.",
        "commit_url": "https://github.com/square/retrofit/commit/8cd0be328e1ae2aa1446166776cc2e3c7e54a098",
        "buggy_code": "retrofit.nextResponseBodyConverter(this, innerType, annotations);",
        "fixed_code": "retrofit.responseBodyConverter(innerType, annotations);",
        "patch": "@@ -45,7 +45,7 @@ private GuavaOptionalConverterFactory() {\n \n     Type innerType = getParameterUpperBound(0, (ParameterizedType) type);\n     Converter<ResponseBody, Object> delegate =\n-        retrofit.nextResponseBodyConverter(this, innerType, annotations);\n+        retrofit.responseBodyConverter(innerType, annotations);\n     return new OptionalConverter<>(delegate);\n   }\n }"
    },
    {
        "commit_id": "8cd0be328e1ae2aa1446166776cc2e3c7e54a098",
        "commit_message": "Fix Optional converter factories not delegating properly.",
        "commit_url": "https://github.com/square/retrofit/commit/8cd0be328e1ae2aa1446166776cc2e3c7e54a098",
        "buggy_code": "retrofit.nextResponseBodyConverter(this, innerType, annotations);",
        "fixed_code": "retrofit.responseBodyConverter(innerType, annotations);",
        "patch": "@@ -45,7 +45,7 @@ private Java8OptionalConverterFactory() {\n \n     Type innerType = getParameterUpperBound(0, (ParameterizedType) type);\n     Converter<ResponseBody, Object> delegate =\n-        retrofit.nextResponseBodyConverter(this, innerType, annotations);\n+        retrofit.responseBodyConverter(innerType, annotations);\n     return new OptionalConverter<>(delegate);\n   }\n }"
    },
    {
        "commit_id": "bbcd0a5c954aca04b2a7092b2d155bb3c501a07c",
        "commit_message": "Merge pull request #2524 from glureau/patch-1\n\ntypo",
        "commit_url": "https://github.com/square/retrofit/commit/bbcd0a5c954aca04b2a7092b2d155bb3c501a07c",
        "buggy_code": "System.err.println(\"NETOWRK ERROR \" + e.getMessage());",
        "fixed_code": "System.err.println(\"NETWORK ERROR \" + e.getMessage());",
        "patch": "@@ -180,7 +180,7 @@ public static void main(String... args) {\n       }\n \n       @Override public void networkError(IOException e) {\n-        System.err.println(\"NETOWRK ERROR \" + e.getMessage());\n+        System.err.println(\"NETWORK ERROR \" + e.getMessage());\n       }\n \n       @Override public void unexpectedError(Throwable t) {"
    },
    {
        "commit_id": "6a580e897649d162d628763d332a86910aba0794",
        "commit_message": "Merge pull request #2490 from NightlyNexus/patch-1\n\nAdd initial capacity for converter factory list.",
        "commit_url": "https://github.com/square/retrofit/commit/6a580e897649d162d628763d332a86910aba0794",
        "buggy_code": "List<Converter.Factory> converterFactories = new ArrayList<>();",
        "fixed_code": "List<Converter.Factory> converterFactories = new ArrayList<>(1 + this.converterFactories.size());",
        "patch": "@@ -582,7 +582,7 @@ public Retrofit build() {\n       adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));\n \n       // Make a defensive copy of the converters.\n-      List<Converter.Factory> converterFactories = new ArrayList<>();\n+      List<Converter.Factory> converterFactories = new ArrayList<>(1 + this.converterFactories.size());\n \n       // Add the built-in converter factory first. This prevents overriding its behavior but also\n       // ensures correct behavior when using converters that consume all types."
    },
    {
        "commit_id": "fef22de3f5226ea99627cce7bde8c532d057ce65",
        "commit_message": "Merge pull request #2205 from guptasourabh/patch-1\n\nRemoval of Unnecessary Creation of String Builder",
        "commit_url": "https://github.com/square/retrofit/commit/fef22de3f5226ea99627cce7bde8c532d057ce65",
        "buggy_code": "if (typeArguments.length == 0) return result.toString();",
        "fixed_code": "if (typeArguments.length == 0) return typeToString(rawType);",
        "patch": "@@ -407,9 +407,9 @@ private static final class ParameterizedTypeImpl implements ParameterizedType {\n     }\n \n     @Override public String toString() {\n+      if (typeArguments.length == 0) return typeToString(rawType);\n       StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));\n       result.append(typeToString(rawType));\n-      if (typeArguments.length == 0) return result.toString();\n       result.append(\"<\").append(typeToString(typeArguments[0]));\n       for (int i = 1; i < typeArguments.length; i++) {\n         result.append(\", \").append(typeToString(typeArguments[i]));"
    },
    {
        "commit_id": "9323a0c9d7485d30cf1e6d7b64a6bb5f71819038",
        "commit_message": "Merge pull request #2200 from square/jw/2017-02-14/error-prone\n\nAdd error-prone compiler.",
        "commit_url": "https://github.com/square/retrofit/commit/9323a0c9d7485d30cf1e6d7b64a6bb5f71819038",
        "buggy_code": "upstream.call(new BodySubscriber<>(subscriber));",
        "fixed_code": "upstream.call(new BodySubscriber<T>(subscriber));",
        "patch": "@@ -30,7 +30,7 @@ final class BodyOnSubscribe<T> implements OnSubscribe<T> {\n   }\n \n   @Override public void call(Subscriber<? super T> subscriber) {\n-    upstream.call(new BodySubscriber<>(subscriber));\n+    upstream.call(new BodySubscriber<T>(subscriber));\n   }\n \n   private static class BodySubscriber<R> extends Subscriber<Response<R>> {"
    },
    {
        "commit_id": "9323a0c9d7485d30cf1e6d7b64a6bb5f71819038",
        "commit_message": "Merge pull request #2200 from square/jw/2017-02-14/error-prone\n\nAdd error-prone compiler.",
        "commit_url": "https://github.com/square/retrofit/commit/9323a0c9d7485d30cf1e6d7b64a6bb5f71819038",
        "buggy_code": "upstream.subscribe(new BodyObserver<>(observer));",
        "fixed_code": "upstream.subscribe(new BodyObserver<T>(observer));",
        "patch": "@@ -31,7 +31,7 @@ final class BodyObservable<T> extends Observable<T> {\n   }\n \n   @Override protected void subscribeActual(Observer<? super T> observer) {\n-    upstream.subscribe(new BodyObserver<>(observer));\n+    upstream.subscribe(new BodyObserver<T>(observer));\n   }\n \n   private static class BodyObserver<R> implements Observer<Response<R>> {"
    },
    {
        "commit_id": "c4be2dd8e36a9fd031b28950c9ec29944c76c4e7",
        "commit_message": "Add error-prone compiler.",
        "commit_url": "https://github.com/square/retrofit/commit/c4be2dd8e36a9fd031b28950c9ec29944c76c4e7",
        "buggy_code": "upstream.call(new BodySubscriber<>(subscriber));",
        "fixed_code": "upstream.call(new BodySubscriber<T>(subscriber));",
        "patch": "@@ -30,7 +30,7 @@ final class BodyOnSubscribe<T> implements OnSubscribe<T> {\n   }\n \n   @Override public void call(Subscriber<? super T> subscriber) {\n-    upstream.call(new BodySubscriber<>(subscriber));\n+    upstream.call(new BodySubscriber<T>(subscriber));\n   }\n \n   private static class BodySubscriber<R> extends Subscriber<Response<R>> {"
    },
    {
        "commit_id": "c4be2dd8e36a9fd031b28950c9ec29944c76c4e7",
        "commit_message": "Add error-prone compiler.",
        "commit_url": "https://github.com/square/retrofit/commit/c4be2dd8e36a9fd031b28950c9ec29944c76c4e7",
        "buggy_code": "upstream.subscribe(new BodyObserver<>(observer));",
        "fixed_code": "upstream.subscribe(new BodyObserver<T>(observer));",
        "patch": "@@ -31,7 +31,7 @@ final class BodyObservable<T> extends Observable<T> {\n   }\n \n   @Override protected void subscribeActual(Observer<? super T> observer) {\n-    upstream.subscribe(new BodyObserver<>(observer));\n+    upstream.subscribe(new BodyObserver<T>(observer));\n   }\n \n   private static class BodyObserver<R> implements Observer<Response<R>> {"
    },
    {
        "commit_id": "c516a34e107818c394f75997fe4a8cf10f299852",
        "commit_message": "Merge pull request #2197 from square/jw/2017-02-13/error-prone\n\nUse array instead of varargs in override signature.",
        "commit_url": "https://github.com/square/retrofit/commit/c516a34e107818c394f75997fe4a8cf10f299852",
        "buggy_code": "@Override public Object invoke(Object proxy, Method method, Object... args)",
        "fixed_code": "@Override public Object invoke(Object proxy, Method method, Object[] args)",
        "patch": "@@ -133,7 +133,7 @@ public <T> T create(final Class<T> service) {\n         new InvocationHandler() {\n           private final Platform platform = Platform.get();\n \n-          @Override public Object invoke(Object proxy, Method method, Object... args)\n+          @Override public Object invoke(Object proxy, Method method, Object[] args)\n               throws Throwable {\n             // If the method is a method from Object then defer to normal invocation.\n             if (method.getDeclaringClass() == Object.class) {"
    },
    {
        "commit_id": "1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "commit_message": "Merge pull request #1542 from square/jw/resolve-generic-types\n\nCorrectly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "buggy_code": "if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {",
        "fixed_code": "if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {",
        "patch": "@@ -41,7 +41,7 @@ final class BuiltInConverters extends Converter.Factory {\n   @Override\n   public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,\n       Retrofit retrofit) {\n-    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {\n+    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {\n       return RequestBodyConverter.INSTANCE;\n     }\n     return null;"
    },
    {
        "commit_id": "1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "commit_message": "Merge pull request #1542 from square/jw/resolve-generic-types\n\nCorrectly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "buggy_code": "return Utils.getRawType(type);",
        "fixed_code": "return Types.getRawType(type);",
        "patch": "@@ -79,7 +79,7 @@ protected static Type getParameterUpperBound(int index, ParameterizedType type)\n      * {@code List<? extends Runnable>} returns {@code List.class}.\n      */\n     protected static Class<?> getRawType(Type type) {\n-      return Utils.getRawType(type);\n+      return Types.getRawType(type);\n     }\n   }\n }"
    },
    {
        "commit_id": "1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "commit_message": "Merge pull request #1542 from square/jw/resolve-generic-types\n\nCorrectly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/1c995b2281afcb67a293dc435fe74771fa3e88d5",
        "buggy_code": "+ Utils.getRawType(responseType).getName()",
        "fixed_code": "+ Types.getRawType(responseType).getName()",
        "patch": "@@ -26,7 +26,7 @@ static MethodHandler create(Retrofit retrofit, Method method) {\n     Type responseType = callAdapter.responseType();\n     if (responseType == Response.class || responseType == okhttp3.Response.class) {\n       throw Utils.methodError(method, \"'\"\n-          + Utils.getRawType(responseType).getName()\n+          + Types.getRawType(responseType).getName()\n           + \"' is not a valid response body type. Did you mean ResponseBody?\");\n     }\n     Converter<ResponseBody, ?> responseConverter ="
    },
    {
        "commit_id": "b3ae737714ef0f025663f362bc98c85a8757ca56",
        "commit_message": "Correctly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/b3ae737714ef0f025663f362bc98c85a8757ca56",
        "buggy_code": "if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {",
        "fixed_code": "if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {",
        "patch": "@@ -41,7 +41,7 @@ final class BuiltInConverters extends Converter.Factory {\n   @Override\n   public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] annotations,\n       Retrofit retrofit) {\n-    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {\n+    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {\n       return RequestBodyConverter.INSTANCE;\n     }\n     return null;"
    },
    {
        "commit_id": "b3ae737714ef0f025663f362bc98c85a8757ca56",
        "commit_message": "Correctly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/b3ae737714ef0f025663f362bc98c85a8757ca56",
        "buggy_code": "return Utils.getRawType(type);",
        "fixed_code": "return Types.getRawType(type);",
        "patch": "@@ -79,7 +79,7 @@ protected static Type getParameterUpperBound(int index, ParameterizedType type)\n      * {@code List<? extends Runnable>} returns {@code List.class}.\n      */\n     protected static Class<?> getRawType(Type type) {\n-      return Utils.getRawType(type);\n+      return Types.getRawType(type);\n     }\n   }\n }"
    },
    {
        "commit_id": "b3ae737714ef0f025663f362bc98c85a8757ca56",
        "commit_message": "Correctly resolve generic types on the target type, not actual.",
        "commit_url": "https://github.com/square/retrofit/commit/b3ae737714ef0f025663f362bc98c85a8757ca56",
        "buggy_code": "+ Utils.getRawType(responseType).getName()",
        "fixed_code": "+ Types.getRawType(responseType).getName()",
        "patch": "@@ -26,7 +26,7 @@ static MethodHandler create(Retrofit retrofit, Method method) {\n     Type responseType = callAdapter.responseType();\n     if (responseType == Response.class || responseType == okhttp3.Response.class) {\n       throw Utils.methodError(method, \"'\"\n-          + Utils.getRawType(responseType).getName()\n+          + Types.getRawType(responseType).getName()\n           + \"' is not a valid response body type. Did you mean ResponseBody?\");\n     }\n     Converter<ResponseBody, ?> responseConverter ="
    },
    {
        "commit_id": "0a879a3ea98222972c0c56a79d6de4e84d131e11",
        "commit_message": "Merge pull request #1428 from square/jw/resolve-to-builder\n\nUse method to resolve directly to a builder.",
        "commit_url": "https://github.com/square/retrofit/commit/0a879a3ea98222972c0c56a79d6de4e84d131e11",
        "buggy_code": "urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();",
        "fixed_code": "urlBuilder = baseUrl.newBuilder(relativeUrl);",
        "patch": "@@ -141,7 +141,7 @@ private static void canonicalize(Buffer out, String input, int pos, int limit,\n   void addQueryParam(String name, String value, boolean encoded) {\n     if (relativeUrl != null) {\n       // Do a one-time combination of the built relative URL and the base URL.\n-      urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();\n+      urlBuilder = baseUrl.newBuilder(relativeUrl);\n       relativeUrl = null;\n     }\n "
    },
    {
        "commit_id": "00d5223604c23386cc9eef896ada366b9152ba86",
        "commit_message": "Use method to resolve directly to a builder.",
        "commit_url": "https://github.com/square/retrofit/commit/00d5223604c23386cc9eef896ada366b9152ba86",
        "buggy_code": "urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();",
        "fixed_code": "urlBuilder = baseUrl.newBuilder(relativeUrl);",
        "patch": "@@ -141,7 +141,7 @@ private static void canonicalize(Buffer out, String input, int pos, int limit,\n   void addQueryParam(String name, String value, boolean encoded) {\n     if (relativeUrl != null) {\n       // Do a one-time combination of the built relative URL and the base URL.\n-      urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();\n+      urlBuilder = baseUrl.newBuilder(relativeUrl);\n       relativeUrl = null;\n     }\n "
    },
    {
        "commit_id": "75013dc34c4fe54de3c19336d6f05b92b23e0d42",
        "commit_message": "Merge pull request #1276 from square/jw/revert-callback-retrofit\n\nRevert \"Provide Retrofit to response callback. Add error converter sample.\"",
        "commit_url": "https://github.com/square/retrofit/commit/75013dc34c4fe54de3c19336d6f05b92b23e0d42",
        "buggy_code": "void onResponse(Response<T> response, Retrofit retrofit);",
        "fixed_code": "void onResponse(Response<T> response);",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public interface Callback<T> {\n   /** Successful HTTP response. */\n-  void onResponse(Response<T> response, Retrofit retrofit);\n+  void onResponse(Response<T> response);\n \n   /** Invoked when a network or unexpected exception occurred during the HTTP request. */\n   void onFailure(Throwable t);"
    },
    {
        "commit_id": "75013dc34c4fe54de3c19336d6f05b92b23e0d42",
        "commit_message": "Merge pull request #1276 from square/jw/revert-callback-retrofit\n\nRevert \"Provide Retrofit to response callback. Add error converter sample.\"",
        "commit_url": "https://github.com/square/retrofit/commit/75013dc34c4fe54de3c19336d6f05b92b23e0d42",
        "buggy_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "fixed_code": "@Override public void onResponse(Response<T> response) {",
        "patch": "@@ -73,7 +73,7 @@ private CallFuture(Call<T> call) {\n         call.cancel();\n       }\n \n-      @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n+      @Override public void onResponse(Response<T> response) {\n         if (response.isSuccess()) {\n           set(response.body());\n         } else {"
    },
    {
        "commit_id": "8c94d05414f5dacc7d88072ecff02ff3dded3bf4",
        "commit_message": "Revert \"Provide Retrofit to response callback. Add error converter sample.\"\n\nThis reverts commit 3a777472334263c6f6d1e9cc255b1288bcc02e48.",
        "commit_url": "https://github.com/square/retrofit/commit/8c94d05414f5dacc7d88072ecff02ff3dded3bf4",
        "buggy_code": "void onResponse(Response<T> response, Retrofit retrofit);",
        "fixed_code": "void onResponse(Response<T> response);",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public interface Callback<T> {\n   /** Successful HTTP response. */\n-  void onResponse(Response<T> response, Retrofit retrofit);\n+  void onResponse(Response<T> response);\n \n   /** Invoked when a network or unexpected exception occurred during the HTTP request. */\n   void onFailure(Throwable t);"
    },
    {
        "commit_id": "8c94d05414f5dacc7d88072ecff02ff3dded3bf4",
        "commit_message": "Revert \"Provide Retrofit to response callback. Add error converter sample.\"\n\nThis reverts commit 3a777472334263c6f6d1e9cc255b1288bcc02e48.",
        "commit_url": "https://github.com/square/retrofit/commit/8c94d05414f5dacc7d88072ecff02ff3dded3bf4",
        "buggy_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "fixed_code": "@Override public void onResponse(Response<T> response) {",
        "patch": "@@ -73,7 +73,7 @@ private CallFuture(Call<T> call) {\n         call.cancel();\n       }\n \n-      @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n+      @Override public void onResponse(Response<T> response) {\n         if (response.isSuccess()) {\n           set(response.body());\n         } else {"
    },
    {
        "commit_id": "a704966767ab96f286986a3f9e0e79f6693db1ed",
        "commit_message": "Merge pull request #1118 from square/jw/provide-retrofit\n\nProvide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/a704966767ab96f286986a3f9e0e79f6693db1ed",
        "buggy_code": "@Override public void onResponse(Response<T> response) {",
        "fixed_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "patch": "@@ -103,7 +103,7 @@ private CallOnSubscribe(Call<T> originalCall) {\n       }));\n \n       call.enqueue(new Callback<T>() {\n-        @Override public void onResponse(Response<T> response) {\n+        @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n           if (subscriber.isUnsubscribed()) {\n             return;\n           }"
    },
    {
        "commit_id": "a704966767ab96f286986a3f9e0e79f6693db1ed",
        "commit_message": "Merge pull request #1118 from square/jw/provide-retrofit\n\nProvide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/a704966767ab96f286986a3f9e0e79f6693db1ed",
        "buggy_code": "void onResponse(Response<T> response);",
        "fixed_code": "void onResponse(Response<T> response, Retrofit retrofit);",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public interface Callback<T> {\n   /** Successful HTTP response. */\n-  void onResponse(Response<T> response);\n+  void onResponse(Response<T> response, Retrofit retrofit);\n \n   /** Invoked when a network or unexpected exception occurred during the HTTP request. */\n   void onFailure(Throwable t);"
    },
    {
        "commit_id": "a704966767ab96f286986a3f9e0e79f6693db1ed",
        "commit_message": "Merge pull request #1118 from square/jw/provide-retrofit\n\nProvide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/a704966767ab96f286986a3f9e0e79f6693db1ed",
        "buggy_code": "@Override public void onResponse(Response<T> response) {",
        "fixed_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "patch": "@@ -73,7 +73,7 @@ private CallFuture(Call<T> call) {\n         call.cancel();\n       }\n \n-      @Override public void onResponse(Response<T> response) {\n+      @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n         if (response.isSuccess()) {\n           set(response.body());\n         } else {"
    },
    {
        "commit_id": "3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "commit_message": "Provide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "buggy_code": "@Override public void onResponse(Response<T> response) {",
        "fixed_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "patch": "@@ -103,7 +103,7 @@ private CallOnSubscribe(Call<T> originalCall) {\n       }));\n \n       call.enqueue(new Callback<T>() {\n-        @Override public void onResponse(Response<T> response) {\n+        @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n           if (subscriber.isUnsubscribed()) {\n             return;\n           }"
    },
    {
        "commit_id": "3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "commit_message": "Provide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "buggy_code": "void onResponse(Response<T> response);",
        "fixed_code": "void onResponse(Response<T> response, Retrofit retrofit);",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public interface Callback<T> {\n   /** Successful HTTP response. */\n-  void onResponse(Response<T> response);\n+  void onResponse(Response<T> response, Retrofit retrofit);\n \n   /** Invoked when a network or unexpected exception occurred during the HTTP request. */\n   void onFailure(Throwable t);"
    },
    {
        "commit_id": "3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "commit_message": "Provide Retrofit to response callback. Add error converter sample.",
        "commit_url": "https://github.com/square/retrofit/commit/3a777472334263c6f6d1e9cc255b1288bcc02e48",
        "buggy_code": "@Override public void onResponse(Response<T> response) {",
        "fixed_code": "@Override public void onResponse(Response<T> response, Retrofit retrofit) {",
        "patch": "@@ -73,7 +73,7 @@ private CallFuture(Call<T> call) {\n         call.cancel();\n       }\n \n-      @Override public void onResponse(Response<T> response) {\n+      @Override public void onResponse(Response<T> response, Retrofit retrofit) {\n         if (response.isSuccess()) {\n           set(response.body());\n         } else {"
    },
    {
        "commit_id": "0c515b5b0c0b8cb089b9cd3b9e1cbc3308f7e703",
        "commit_message": "Do not bring the converter along into the response.\n\nWe used to do this with RetrofitError and it was always very strange. We cannot guarantee the contents of the error body let alone the serialization mechanism. The semantics of conversion only make sense for successful responses. If you want to deserialize the error body, bring your converter instance which access the ResponseBody that Response already has.",
        "commit_url": "https://github.com/square/retrofit/commit/0c515b5b0c0b8cb089b9cd3b9e1cbc3308f7e703",
        "buggy_code": "return new Response<>(rawResponse, converted, body, converter);",
        "fixed_code": "return new Response<>(rawResponse, converted, body);",
        "patch": "@@ -147,7 +147,7 @@ private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) thro\n       rawBody.close();\n     }\n \n-    return new Response<>(rawResponse, converted, body, converter);\n+    return new Response<>(rawResponse, converted, body);\n   }\n \n   public void cancel() {"
    },
    {
        "commit_id": "2afdbb5ca44b38fc1e5ddfbd2dd3bf09d12658a3",
        "commit_message": "Merge pull request #622 from square/jw/error-kind\n\nProvide explicit error kind for disambiguation of underlying cause.",
        "commit_url": "https://github.com/square/retrofit/commit/2afdbb5ca44b38fc1e5ddfbd2dd3bf09d12658a3",
        "buggy_code": "super(message, url, response, null, responseType, false, null);",
        "fixed_code": "super(message, url, response, null, responseType, Kind.HTTP, null);",
        "patch": "@@ -9,7 +9,7 @@ class MockHttpRetrofitError extends RetrofitError {\n \n   MockHttpRetrofitError(String message, String url, Response response, Object body,\n       Type responseType) {\n-    super(message, url, response, null, responseType, false, null);\n+    super(message, url, response, null, responseType, Kind.HTTP, null);\n     this.body = body;\n   }\n "
    },
    {
        "commit_id": "0e58bb8d5c863da0451fa3096d1c605e927746b7",
        "commit_message": "Provide explicit error kind for disambiguation of underlying cause.",
        "commit_url": "https://github.com/square/retrofit/commit/0e58bb8d5c863da0451fa3096d1c605e927746b7",
        "buggy_code": "super(message, url, response, null, responseType, false, null);",
        "fixed_code": "super(message, url, response, null, responseType, Kind.HTTP, null);",
        "patch": "@@ -9,7 +9,7 @@ class MockHttpRetrofitError extends RetrofitError {\n \n   MockHttpRetrofitError(String message, String url, Response response, Object body,\n       Type responseType) {\n-    super(message, url, response, null, responseType, false, null);\n+    super(message, url, response, null, responseType, Kind.HTTP, null);\n     this.body = body;\n   }\n "
    },
    {
        "commit_id": "c2946b4016d9d6e6381a89712b70b1d30672d464",
        "commit_message": "Merge pull request #369 from flash-ua/patch-1\n\nFixed exception message in RestMethodInfo",
        "commit_url": "https://github.com/square/retrofit/commit/c2946b4016d9d6e6381a89712b70b1d30672d464",
        "buggy_code": "\"Multipart can only be specific on HTTP methods with request body (e.g., POST). (\"",
        "fixed_code": "\"FormUrlEncoded can only be specific on HTTP methods with request body (e.g., POST). (\"",
        "patch": "@@ -174,7 +174,7 @@ private void parseMethodAnnotations() {\n       }\n       if (requestType == RequestType.FORM_URL_ENCODED) {\n         throw new IllegalStateException(\n-            \"Multipart can only be specific on HTTP methods with request body (e.g., POST). (\"\n+            \"FormUrlEncoded can only be specific on HTTP methods with request body (e.g., POST). (\"\n                 + method.getName()\n                 + \")\");\n       }"
    },
    {
        "commit_id": "0488684468895123c0a9784cb4660dd9b1df0144",
        "commit_message": "Merge pull request #207 from square/jwilson/doc_nitpicks\n\nFix a few tiny issues in the retrofit docs.",
        "commit_url": "https://github.com/square/retrofit/commit/0488684468895123c0a9784cb4660dd9b1df0144",
        "buggy_code": "class Contributor {",
        "fixed_code": "static class Contributor {",
        "patch": "@@ -23,7 +23,7 @@\n public class GitHubClient {\n   private static final String API_URL = \"https://api.github.com\";\n \n-  class Contributor {\n+  static class Contributor {\n     String login;\n     int contributions;\n   }"
    },
    {
        "commit_id": "f520b68bb40e65bff13fca3102cf93421a5cf2dc",
        "commit_message": "Fix a few tiny issues in the retrofit docs.",
        "commit_url": "https://github.com/square/retrofit/commit/f520b68bb40e65bff13fca3102cf93421a5cf2dc",
        "buggy_code": "class Contributor {",
        "fixed_code": "static class Contributor {",
        "patch": "@@ -23,7 +23,7 @@\n public class GitHubClient {\n   private static final String API_URL = \"https://api.github.com\";\n \n-  class Contributor {\n+  static class Contributor {\n     String login;\n     int contributions;\n   }"
    },
    {
        "commit_id": "f844530c11dca51bd8d96afc87b6e94d0a20917a",
        "commit_message": "issue #198: rename Header -> HeaderPair to harvest the names for new annotations",
        "commit_url": "https://github.com/square/retrofit/commit/f844530c11dca51bd8d96afc87b6e94d0a20917a",
        "buggy_code": "private static List<Header> NO_HEADERS = Collections.emptyList();",
        "fixed_code": "private static List<HeaderPair> NO_HEADERS = Collections.emptyList();",
        "patch": "@@ -28,7 +28,7 @@\n import static retrofit.http.Utils.SynchronousExecutor;\n \n public class RestAdapterTest {\n-  private static List<Header> NO_HEADERS = Collections.emptyList();\n+  private static List<HeaderPair> NO_HEADERS = Collections.emptyList();\n \n   private interface Example {\n     @GET(\"/\") Object something();"
    },
    {
        "commit_id": "8c50ec43595df79a094a28056011c3399f2a028e",
        "commit_message": "Merge pull request #175 from square/jw/fix-sample\n\nUpdate sample name to reflect behavior.",
        "commit_url": "https://github.com/square/retrofit/commit/8c50ec43595df79a094a28056011c3399f2a028e",
        "buggy_code": "package com.squareup.retrofit.sample.twitter;",
        "fixed_code": "package com.squareup.retrofit.sample.github;",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright 2012 Square, Inc.\n-package com.squareup.retrofit.sample.twitter;\n+package com.squareup.retrofit.sample.github;\n \n import java.util.List;\n import retrofit.http.GET;"
    },
    {
        "commit_id": "278433b9012a8a41365987280b1001236e8aad89",
        "commit_message": "Fix wrapper scope and callback param ordering.",
        "commit_url": "https://github.com/square/retrofit/commit/278433b9012a8a41365987280b1001236e8aad89",
        "buggy_code": "void success(Response response, T t);",
        "fixed_code": "void success(T t, Response response);",
        "patch": "@@ -13,7 +13,7 @@\n public interface Callback<T> {\n \n   /** Successful HTTP response. */\n-  void success(Response response, T t);\n+  void success(T t, Response response);\n \n   /**\n    * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected"
    },
    {
        "commit_id": "278433b9012a8a41365987280b1001236e8aad89",
        "commit_message": "Fix wrapper scope and callback param ordering.",
        "commit_url": "https://github.com/square/retrofit/commit/278433b9012a8a41365987280b1001236e8aad89",
        "buggy_code": "callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());",
        "fixed_code": "callback.success((T) wrapper.responseBody, wrapper.response);",
        "patch": "@@ -24,7 +24,7 @@ abstract class CallbackRunnable<T> implements Runnable {\n       final ResponseWrapper wrapper = obtainResponse();\n       callbackExecutor.execute(new Runnable() {\n         @Override public void run() {\n-          callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());\n+          callback.success((T) wrapper.responseBody, wrapper.response);\n         }\n       });\n     } catch (final RetrofitError e) {"
    },
    {
        "commit_id": "278433b9012a8a41365987280b1001236e8aad89",
        "commit_message": "Fix wrapper scope and callback param ordering.",
        "commit_url": "https://github.com/square/retrofit/commit/278433b9012a8a41365987280b1001236e8aad89",
        "buggy_code": "verify(callback).success(same(wrapper.getResponse()), same(wrapper.getResponseObj()));",
        "fixed_code": "verify(callback).success(same(wrapper.responseBody), same(wrapper.response));",
        "patch": "@@ -34,7 +34,7 @@ public class CallbackRunnableTest {\n     callbackRunnable.run();\n \n     verify(executor).execute(any(Runnable.class));\n-    verify(callback).success(same(wrapper.getResponse()), same(wrapper.getResponseObj()));\n+    verify(callback).success(same(wrapper.responseBody), same(wrapper.response));\n   }\n \n   @Test public void errorPassedToFailure() {"
    },
    {
        "commit_id": "ffab8145393225741167a003577696549573e857",
        "commit_message": "Fix spelling",
        "commit_url": "https://github.com/square/retrofit/commit/ffab8145393225741167a003577696549573e857",
        "buggy_code": "public void testPeakWithElementReader() throws IOException {",
        "fixed_code": "public void testPeekWithElementReader() throws IOException {",
        "patch": "@@ -209,7 +209,7 @@ public void testFailedExpansion() throws IOException {\n     assertEquals(values[99], queueFile.peek());\n   }\n \n-  public void testPeakWithElementReader() throws IOException {\n+  public void testPeekWithElementReader() throws IOException {\n     QueueFile queueFile = new QueueFile(file);\n     final byte[] a = {1, 2};\n     queueFile.add(a);"
    }
]