[
    {
        "commit_id": "682013d200764b27659dd5eb60963bbb18779964",
        "commit_message": "Make wasxfail consistent (#13328)\n\nPreviously, xfailed tests via the marker would have a special `\"reason: \"` string prefixed to it. \n\nRemoved the prefix so the `wasxfail` attribute is now consistent regardless the method used.\n\nFix #11067\n\n---------\n\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/682013d200764b27659dd5eb60963bbb18779964",
        "buggy_code": "rep.wasxfail = \"reason: \" + call.excinfo.value.msg",
        "fixed_code": "rep.wasxfail = call.excinfo.value.msg",
        "patch": "@@ -278,7 +278,7 @@ def pytest_runtest_makereport(\n         pass  # don't interfere\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n-        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n+        rep.wasxfail = call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n     elif not rep.skipped and xfailed:\n         if call.excinfo:"
    },
    {
        "commit_id": "134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "commit_message": "raisesgroup followups (#13279)\n\n* raisesgroup followups\n* renames src/_pytest/raises_group.py to src/_pytest/raises.py\n* moves pytest.raises from src/_pytest/python_api.py to src/_pytest/raises.py\n* adds several newsfragments that should've been bundled with #13192\n* add more detailed error message if you try to do RaisesGroup((ValueError, TypeError))\n* mess around with ValueError vs TypeError on invalid expected exception\n* revert change in behaviour if raises has a type mismatch\n* add check example to raises, fix test after behaviour revert\n* made args to AbstractMatcher, RaisesExc and RaisesGroup pos/kw-only\n\n---------\n\nCo-authored-by: Ran Benita <ran@unusedvar.com>\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "buggy_code": "from _pytest.raises_group import AbstractRaises",
        "fixed_code": "from _pytest.raises import AbstractRaises",
        "patch": "@@ -28,7 +28,7 @@\n from _pytest.deprecated import check_ispytest\n from _pytest.deprecated import MARKED_FIXTURE\n from _pytest.outcomes import fail\n-from _pytest.raises_group import AbstractRaises\n+from _pytest.raises import AbstractRaises\n from _pytest.scope import _ScopeName\n from _pytest.warning_types import PytestUnknownMarkWarning\n "
    },
    {
        "commit_id": "134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "commit_message": "raisesgroup followups (#13279)\n\n* raisesgroup followups\n* renames src/_pytest/raises_group.py to src/_pytest/raises.py\n* moves pytest.raises from src/_pytest/python_api.py to src/_pytest/raises.py\n* adds several newsfragments that should've been bundled with #13192\n* add more detailed error message if you try to do RaisesGroup((ValueError, TypeError))\n* mess around with ValueError vs TypeError on invalid expected exception\n* revert change in behaviour if raises has a type mismatch\n* add check example to raises, fix test after behaviour revert\n* made args to AbstractMatcher, RaisesExc and RaisesGroup pos/kw-only\n\n---------\n\nCo-authored-by: Ran Benita <ran@unusedvar.com>\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "buggy_code": "from _pytest.raises_group import AbstractRaises",
        "fixed_code": "from _pytest.raises import AbstractRaises",
        "patch": "@@ -20,7 +20,7 @@\n from _pytest.outcomes import fail\n from _pytest.outcomes import skip\n from _pytest.outcomes import xfail\n-from _pytest.raises_group import AbstractRaises\n+from _pytest.raises import AbstractRaises\n from _pytest.reports import BaseReport\n from _pytest.reports import TestReport\n from _pytest.runner import CallInfo"
    },
    {
        "commit_id": "134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "commit_message": "raisesgroup followups (#13279)\n\n* raisesgroup followups\n* renames src/_pytest/raises_group.py to src/_pytest/raises.py\n* moves pytest.raises from src/_pytest/python_api.py to src/_pytest/raises.py\n* adds several newsfragments that should've been bundled with #13192\n* add more detailed error message if you try to do RaisesGroup((ValueError, TypeError))\n* mess around with ValueError vs TypeError on invalid expected exception\n* revert change in behaviour if raises has a type mismatch\n* add check example to raises, fix test after behaviour revert\n* made args to AbstractMatcher, RaisesExc and RaisesGroup pos/kw-only\n\n---------\n\nCo-authored-by: Ran Benita <ran@unusedvar.com>\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/134b759e5def7fd2fd4c74bd2a4f00a4b56e5425",
        "buggy_code": "with pytest.raises(Warning, match=\"(?m)test\\n at .*python_api.py:\\\\d+\"):",
        "fixed_code": "with pytest.raises(Warning, match=\"(?m)test\\n at .*raises.py:\\\\d+\"):",
        "patch": "@@ -43,7 +43,7 @@ def test():\n \n @pytest.mark.filterwarnings(\"error\")\n def test_warn_explicit_for_annotates_errors_with_location():\n-    with pytest.raises(Warning, match=\"(?m)test\\n at .*python_api.py:\\\\d+\"):\n+    with pytest.raises(Warning, match=\"(?m)test\\n at .*raises.py:\\\\d+\"):\n         warning_types.warn_explicit_for(\n             pytest.raises,  # type: ignore[arg-type]\n             warning_types.PytestWarning(\"test\"),"
    },
    {
        "commit_id": "4933d9223ffb3e9c1f11a4a2623be5d32672e071",
        "commit_message": "Merge pull request #13291 from jakkdl/fix_attrs\n\nfix attrs==25.2.0 compatibility",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4933d9223ffb3e9c1f11a4a2623be5d32672e071",
        "buggy_code": "return \"attrs generated eq\" in code_filename",
        "fixed_code": "return \"attrs generated \" in code_filename",
        "patch": "@@ -169,7 +169,7 @@ def has_default_eq(\n         code_filename = obj.__eq__.__code__.co_filename\n \n         if isattrs(obj):\n-            return \"attrs generated eq\" in code_filename\n+            return \"attrs generated \" in code_filename\n \n         return code_filename == \"<string>\"  # data class\n     return True"
    },
    {
        "commit_id": "b7854561993d00b8dddf3f43ce6b042b4111fa4c",
        "commit_message": "fix attrs==25.2.0 compatibility",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b7854561993d00b8dddf3f43ce6b042b4111fa4c",
        "buggy_code": "return \"attrs generated eq\" in code_filename",
        "fixed_code": "return \"attrs generated \" in code_filename",
        "patch": "@@ -169,7 +169,7 @@ def has_default_eq(\n         code_filename = obj.__eq__.__code__.co_filename\n \n         if isattrs(obj):\n-            return \"attrs generated eq\" in code_filename\n+            return \"attrs generated \" in code_filename\n \n         return code_filename == \"<string>\"  # data class\n     return True"
    },
    {
        "commit_id": "309030c0ace99a725f9cbe830ddad87fd3a20140",
        "commit_message": "fix import loop",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/309030c0ace99a725f9cbe830ddad87fd3a20140",
        "buggy_code": "from pytest import ExceptionInfo",
        "fixed_code": "from _pytest._code import ExceptionInfo",
        "patch": "@@ -17,9 +17,9 @@\n from typing import TYPE_CHECKING\n from typing import TypeVar\n \n+from _pytest._code import ExceptionInfo\n from _pytest.outcomes import fail\n from _pytest.raises_group import RaisesExc\n-from pytest import ExceptionInfo\n \n \n if sys.version_info < (3, 11):"
    },
    {
        "commit_id": "309030c0ace99a725f9cbe830ddad87fd3a20140",
        "commit_message": "fix import loop",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/309030c0ace99a725f9cbe830ddad87fd3a20140",
        "buggy_code": "from pytest import ExceptionInfo",
        "fixed_code": "from _pytest._code import ExceptionInfo",
        "patch": "@@ -17,10 +17,10 @@\n from typing import TYPE_CHECKING\n import warnings\n \n+from _pytest._code import ExceptionInfo\n from _pytest._code.code import stringify_exception\n from _pytest.outcomes import fail\n from _pytest.warning_types import PytestWarning\n-from pytest import ExceptionInfo\n \n \n if TYPE_CHECKING:"
    },
    {
        "commit_id": "4f682c17a23d56fbfd85bcf628f24f6d89edecfc",
        "commit_message": "fix rtd",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4f682c17a23d56fbfd85bcf628f24f6d89edecfc",
        "buggy_code": "from _pytest._code import ExceptionInfo",
        "fixed_code": "from pytest import ExceptionInfo",
        "patch": "@@ -17,10 +17,10 @@\n from typing import TYPE_CHECKING\n import warnings\n \n-from _pytest._code import ExceptionInfo\n from _pytest._code.code import stringify_exception\n from _pytest.outcomes import fail\n from _pytest.warning_types import PytestWarning\n+from pytest import ExceptionInfo\n \n \n if TYPE_CHECKING:"
    },
    {
        "commit_id": "09d06fe99dcf2493383c0ef82d04e9561ab0fd7e",
        "commit_message": "fix tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/09d06fe99dcf2493383c0ef82d04e9561ab0fd7e",
        "buggy_code": "msg = f\"Raised exception did not match: Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"",
        "fixed_code": "msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"",
        "patch": "@@ -763,7 +763,7 @@ def match(self, regexp: str | re.Pattern[str]) -> Literal[True]:\n         \"\"\"\n         __tracebackhide__ = True\n         value = self._stringify_exception(self.value)\n-        msg = f\"Raised exception did not match: Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n+        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n         if regexp == value:\n             msg += \"\\n Did you mean to `re.escape()` the regex?\"\n         assert re.search(regexp, value), msg"
    },
    {
        "commit_id": "4d2c70911b55f211eba704b8baedca38c79da62a",
        "commit_message": "fix imports after file rename",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d2c70911b55f211eba704b8baedca38c79da62a",
        "buggy_code": "from _pytest._raises_group import AbstractRaises",
        "fixed_code": "from _pytest.raises_group import AbstractRaises",
        "patch": "@@ -23,11 +23,11 @@\n from .._code import getfslineno\n from ..compat import NOTSET\n from ..compat import NotSetType\n-from _pytest._raises_group import AbstractRaises\n from _pytest.config import Config\n from _pytest.deprecated import check_ispytest\n from _pytest.deprecated import MARKED_FIXTURE\n from _pytest.outcomes import fail\n+from _pytest.raises_group import AbstractRaises\n from _pytest.scope import _ScopeName\n from _pytest.warning_types import PytestUnknownMarkWarning\n "
    },
    {
        "commit_id": "4d2c70911b55f211eba704b8baedca38c79da62a",
        "commit_message": "fix imports after file rename",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d2c70911b55f211eba704b8baedca38c79da62a",
        "buggy_code": "from _pytest._raises_group import AbstractRaises",
        "fixed_code": "from _pytest.raises_group import AbstractRaises",
        "patch": "@@ -12,7 +12,6 @@\n import traceback\n from typing import Optional\n \n-from _pytest._raises_group import AbstractRaises\n from _pytest.config import Config\n from _pytest.config import hookimpl\n from _pytest.config.argparsing import Parser\n@@ -21,6 +20,7 @@\n from _pytest.outcomes import fail\n from _pytest.outcomes import skip\n from _pytest.outcomes import xfail\n+from _pytest.raises_group import AbstractRaises\n from _pytest.reports import BaseReport\n from _pytest.reports import TestReport\n from _pytest.runner import CallInfo"
    },
    {
        "commit_id": "b0caf3d7adc45f773177424593431869fd2f82d8",
        "commit_message": "Merge pull request #13221 from The-Compiler/help-section\n\nFix help sections for CLI options",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b0caf3d7adc45f773177424593431869fd2f82d8",
        "buggy_code": "group._addoption(",
        "fixed_code": "group.addoption(",
        "patch": "@@ -20,7 +20,7 @@\n \n def pytest_addoption(parser: Parser) -> None:\n     group = parser.getgroup(\"terminal reporting\")\n-    group._addoption(\n+    group.addoption(\n         \"--pastebin\",\n         metavar=\"mode\",\n         action=\"store\","
    },
    {
        "commit_id": "4a6a512443e5e1aaed0b5bb0cc82adb2c09d4b66",
        "commit_message": "Fix example in pytest_collection_modifyitems (#13152)\n\nRef #13149",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4a6a512443e5e1aaed0b5bb0cc82adb2c09d4b66",
        "buggy_code": "e.g. with ``config.hook.pytest_deselected(deselected_items)``.",
        "fixed_code": "e.g. with ``config.hook.pytest_deselected(items=deselected_items)``.",
        "patch": "@@ -277,7 +277,7 @@ def pytest_collection_modifyitems(\n     When items are deselected (filtered out from ``items``),\n     the hook :hook:`pytest_deselected` must be called explicitly\n     with the deselected items to properly notify other plugins,\n-    e.g. with ``config.hook.pytest_deselected(deselected_items)``.\n+    e.g. with ``config.hook.pytest_deselected(items=deselected_items)``.\n \n     :param session: The pytest session object.\n     :param config: The pytest config object."
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "exec(\"def test_func_%d(): pass\" % i)",
        "fixed_code": "exec(f\"def test_func_{i}(): pass\")",
        "patch": "@@ -2,4 +2,4 @@\n \n \n for i in range(1000):\n-    exec(\"def test_func_%d(): pass\" % i)\n+    exec(f\"def test_func_{i}(): pass\")"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "stream.write(\"maxlen=%d, \" % object.maxlen)",
        "fixed_code": "stream.write(f\"maxlen={object.maxlen}, \")",
        "patch": "@@ -540,7 +540,7 @@ def _pprint_deque(\n     ) -> None:\n         stream.write(object.__class__.__name__ + \"(\")\n         if object.maxlen is not None:\n-            stream.write(\"maxlen=%d, \" % object.maxlen)\n+            stream.write(f\"maxlen={object.maxlen}, \")\n         stream.write(\"[\")\n \n         self._format_items(object, stream, indent, allowance + 1, context, level)"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "clsname = errno.errorcode.get(eno, \"UnknownErrno%d\" % (eno,))",
        "fixed_code": "clsname = errno.errorcode.get(eno, f\"UnknownErrno{eno}\")",
        "patch": "@@ -69,7 +69,7 @@ def _geterrnoclass(self, eno: int) -> type[Error]:\n         try:\n             return self._errno2class[eno]\n         except KeyError:\n-            clsname = errno.errorcode.get(eno, \"UnknownErrno%d\" % (eno,))\n+            clsname = errno.errorcode.get(eno, f\"UnknownErrno{eno}\")\n             errorcls = type(\n                 clsname,\n                 (Error,),"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "\"%03d %s\" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)",
        "fixed_code": "f\"{i + test.lineno + 1:03d} {x}\" for (i, x) in enumerate(lines)",
        "patch": "@@ -353,7 +353,7 @@ def repr_failure(  # type: ignore[override]\n                 # add line numbers to the left of the error message\n                 assert test.lineno is not None\n                 lines = [\n-                    \"%03d %s\" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)\n+                    f\"{i + test.lineno + 1:03d} {x}\" for (i, x) in enumerate(lines)\n                 ]\n                 # trim docstring error lines to 10\n                 lines = lines[max(example.lineno - 9, 0) : example.lineno + 1]"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "needed_collectors = nextitem and nextitem.listchain() or []",
        "fixed_code": "needed_collectors = (nextitem and nextitem.listchain()) or []",
        "patch": "@@ -533,7 +533,7 @@ def teardown_exact(self, nextitem: Item | None) -> None:\n         When nextitem is None (meaning we're at the last item), the entire\n         stack is torn down.\n         \"\"\"\n-        needed_collectors = nextitem and nextitem.listchain() or []\n+        needed_collectors = (nextitem and nextitem.listchain()) or []\n         exceptions: list[BaseException] = []\n         while self.stack:\n             if list(self.stack.keys()) == needed_collectors[: len(self.stack)]:"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "__slots__ = (\"reason\", \"run\", \"strict\", \"raises\")",
        "fixed_code": "__slots__ = (\"raises\", \"reason\", \"run\", \"strict\")",
        "patch": "@@ -196,7 +196,7 @@ def evaluate_skip_marks(item: Item) -> Skip | None:\n class Xfail:\n     \"\"\"The result of evaluate_xfail_marks().\"\"\"\n \n-    __slots__ = (\"reason\", \"run\", \"strict\", \"raises\")\n+    __slots__ = (\"raises\", \"reason\", \"run\", \"strict\")\n \n     reason: str\n     run: bool"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "result.stdout.fnmatch_lines([\"*=== %d passed in *\" % passes])",
        "fixed_code": "result.stdout.fnmatch_lines([f\"*=== {passes} passed in *\"])",
        "patch": "@@ -1328,7 +1328,7 @@ def test_bar():\n         params = (\"--doctest-modules\",) if enable_doctest else ()\n         passes = 3 if enable_doctest else 2\n         result = pytester.runpytest(*params)\n-        result.stdout.fnmatch_lines([\"*=== %d passed in *\" % passes])\n+        result.stdout.fnmatch_lines([f\"*=== {passes} passed in *\"])\n \n     @pytest.mark.parametrize(\"scope\", SCOPES)\n     @pytest.mark.parametrize(\"autouse\", [True, False])"
    },
    {
        "commit_id": "e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "commit_message": "Merge pull request #13009 from pytest-dev/pre-commit-ci-update-config\n\nUpgrade ruff to 0.8.1 and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e087e3fd272a4963aa3886f0c71ff8f66e8b7a6b",
        "buggy_code": "values.append(\"--verbosity=%d\" % self.verbosity)",
        "fixed_code": "values.append(f\"--verbosity={self.verbosity}\")",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self, verbosity=0):\n     @property\n     def args(self):\n         values = []\n-        values.append(\"--verbosity=%d\" % self.verbosity)\n+        values.append(f\"--verbosity={self.verbosity}\")\n         return values\n \n "
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "exec(\"def test_func_%d(): pass\" % i)",
        "fixed_code": "exec(f\"def test_func_{i}(): pass\")",
        "patch": "@@ -2,4 +2,4 @@\n \n \n for i in range(1000):\n-    exec(\"def test_func_%d(): pass\" % i)\n+    exec(f\"def test_func_{i}(): pass\")"
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "stream.write(\"maxlen=%d, \" % object.maxlen)",
        "fixed_code": "stream.write(f\"maxlen={object.maxlen}, \")",
        "patch": "@@ -540,7 +540,7 @@ def _pprint_deque(\n     ) -> None:\n         stream.write(object.__class__.__name__ + \"(\")\n         if object.maxlen is not None:\n-            stream.write(\"maxlen=%d, \" % object.maxlen)\n+            stream.write(f\"maxlen={object.maxlen}, \")\n         stream.write(\"[\")\n \n         self._format_items(object, stream, indent, allowance + 1, context, level)"
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "clsname = errno.errorcode.get(eno, \"UnknownErrno%d\" % (eno,))",
        "fixed_code": "clsname = errno.errorcode.get(eno, f\"UnknownErrno{eno}\")",
        "patch": "@@ -69,7 +69,7 @@ def _geterrnoclass(self, eno: int) -> type[Error]:\n         try:\n             return self._errno2class[eno]\n         except KeyError:\n-            clsname = errno.errorcode.get(eno, \"UnknownErrno%d\" % (eno,))\n+            clsname = errno.errorcode.get(eno, f\"UnknownErrno{eno}\")\n             errorcls = type(\n                 clsname,\n                 (Error,),"
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "\"%03d %s\" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)",
        "fixed_code": "f\"{i + test.lineno + 1:03d} {x}\" for (i, x) in enumerate(lines)",
        "patch": "@@ -353,7 +353,7 @@ def repr_failure(  # type: ignore[override]\n                 # add line numbers to the left of the error message\n                 assert test.lineno is not None\n                 lines = [\n-                    \"%03d %s\" % (i + test.lineno + 1, x) for (i, x) in enumerate(lines)\n+                    f\"{i + test.lineno + 1:03d} {x}\" for (i, x) in enumerate(lines)\n                 ]\n                 # trim docstring error lines to 10\n                 lines = lines[max(example.lineno - 9, 0) : example.lineno + 1]"
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "tw.line(\"%s:%d\" % (os.fspath(self.filename), self.firstlineno + 1))",
        "fixed_code": "tw.line(f\"{os.fspath(self.filename)}:{self.firstlineno + 1}\")",
        "patch": "@@ -884,7 +884,7 @@ def toterminal(self, tw: TerminalWriter) -> None:\n                     red=True,\n                 )\n         tw.line()\n-        tw.line(\"%s:%d\" % (os.fspath(self.filename), self.firstlineno + 1))\n+        tw.line(f\"{os.fspath(self.filename)}:{self.firstlineno + 1}\")\n \n \n def call_fixture_func("
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "result.stdout.fnmatch_lines([\"*=== %d passed in *\" % passes])",
        "fixed_code": "result.stdout.fnmatch_lines([f\"*=== {passes} passed in *\"])",
        "patch": "@@ -1328,7 +1328,7 @@ def test_bar():\n         params = (\"--doctest-modules\",) if enable_doctest else ()\n         passes = 3 if enable_doctest else 2\n         result = pytester.runpytest(*params)\n-        result.stdout.fnmatch_lines([\"*=== %d passed in *\" % passes])\n+        result.stdout.fnmatch_lines([f\"*=== {passes} passed in *\"])\n \n     @pytest.mark.parametrize(\"scope\", SCOPES)\n     @pytest.mark.parametrize(\"autouse\", [True, False])"
    },
    {
        "commit_id": "17c5bbbdaee125f7d574ae390d4807724efa871a",
        "commit_message": "[Fix UP031] Manually, keeping some required %r specifiers\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17c5bbbdaee125f7d574ae390d4807724efa871a",
        "buggy_code": "values.append(\"--verbosity=%d\" % self.verbosity)",
        "fixed_code": "values.append(f\"--verbosity={self.verbosity}\")",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self, verbosity=0):\n     @property\n     def args(self):\n         values = []\n-        values.append(\"--verbosity=%d\" % self.verbosity)\n+        values.append(f\"--verbosity={self.verbosity}\")\n         return values\n \n "
    },
    {
        "commit_id": "049bb29d8a7fce42bcb4825c23bacffb56b68e55",
        "commit_message": "[Fix PYI063] Use PEP 570 syntax for positional-only parameters",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/049bb29d8a7fce42bcb4825c23bacffb56b68e55",
        "buggy_code": "def __eq__(self, __o: object) -> bool:",
        "fixed_code": "def __eq__(self, __o: object, /) -> bool:",
        "patch": "@@ -10,7 +10,7 @@ class SimpleDataObject:\n         field_a: int = field()\n         field_b: str = field()\n \n-        def __eq__(self, __o: object) -> bool:\n+        def __eq__(self, __o: object, /) -> bool:\n             return super().__eq__(__o)\n \n     left = SimpleDataObject(1, \"b\")"
    },
    {
        "commit_id": "66fc31f05f02914c190fd9120653143f0bcb5105",
        "commit_message": "Fix 'typing.AbstractSet' is deprecated, use 'collections.abc.Set'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fc31f05f02914c190fd9120653143f0bcb5105",
        "buggy_code": "from typing import AbstractSet",
        "fixed_code": "from collections.abc import Set as AbstractSet",
        "patch": "@@ -8,9 +8,9 @@\n from collections.abc import Iterable\n from collections.abc import Mapping\n from collections.abc import Sequence\n+from collections.abc import Set as AbstractSet\n import os\n import pprint\n-from typing import AbstractSet\n from typing import Any\n from typing import Literal\n from typing import Protocol"
    },
    {
        "commit_id": "66fc31f05f02914c190fd9120653143f0bcb5105",
        "commit_message": "Fix 'typing.AbstractSet' is deprecated, use 'collections.abc.Set'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fc31f05f02914c190fd9120653143f0bcb5105",
        "buggy_code": "from typing import AbstractSet",
        "fixed_code": "from collections.abc import Set as AbstractSet",
        "patch": "@@ -12,14 +12,14 @@\n from collections.abc import Mapping\n from collections.abc import MutableMapping\n from collections.abc import Sequence\n+from collections.abc import Set as AbstractSet\n import dataclasses\n import functools\n import inspect\n import os\n from pathlib import Path\n import sys\n import types\n-from typing import AbstractSet\n from typing import Any\n from typing import cast\n from typing import Final"
    },
    {
        "commit_id": "66fc31f05f02914c190fd9120653143f0bcb5105",
        "commit_message": "Fix 'typing.AbstractSet' is deprecated, use 'collections.abc.Set'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fc31f05f02914c190fd9120653143f0bcb5105",
        "buggy_code": "from typing import AbstractSet",
        "fixed_code": "from collections.abc import Set as AbstractSet",
        "patch": "@@ -5,6 +5,7 @@\n \n from collections.abc import Generator\n from collections.abc import Mapping\n+from collections.abc import Set as AbstractSet\n from contextlib import contextmanager\n from contextlib import nullcontext\n from datetime import datetime\n@@ -18,7 +19,6 @@\n from pathlib import Path\n import re\n from types import TracebackType\n-from typing import AbstractSet\n from typing import final\n from typing import Generic\n from typing import Literal"
    },
    {
        "commit_id": "66fc31f05f02914c190fd9120653143f0bcb5105",
        "commit_message": "Fix 'typing.AbstractSet' is deprecated, use 'collections.abc.Set'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fc31f05f02914c190fd9120653143f0bcb5105",
        "buggy_code": "from typing import AbstractSet",
        "fixed_code": "from collections.abc import Set as AbstractSet",
        "patch": "@@ -7,6 +7,7 @@\n from collections.abc import Iterable\n from collections.abc import Iterator\n from collections.abc import Sequence\n+from collections.abc import Set as AbstractSet\n import dataclasses\n import fnmatch\n import functools\n@@ -15,7 +16,6 @@\n import os\n from pathlib import Path\n import sys\n-from typing import AbstractSet\n from typing import final\n from typing import Literal\n from typing import overload"
    },
    {
        "commit_id": "66fc31f05f02914c190fd9120653143f0bcb5105",
        "commit_message": "Fix 'typing.AbstractSet' is deprecated, use 'collections.abc.Set'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fc31f05f02914c190fd9120653143f0bcb5105",
        "buggy_code": "from typing import AbstractSet",
        "fixed_code": "from collections.abc import Set as AbstractSet",
        "patch": "@@ -5,8 +5,8 @@\n import collections\n from collections.abc import Collection\n from collections.abc import Iterable\n+from collections.abc import Set as AbstractSet\n import dataclasses\n-from typing import AbstractSet\n from typing import Optional\n from typing import TYPE_CHECKING\n "
    },
    {
        "commit_id": "d35e4ebad03a6f542304573b12e90848d2169c77",
        "commit_message": "revert now unrelated fix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d35e4ebad03a6f542304573b12e90848d2169c77",
        "buggy_code": "if msg is not None and len(stack) > 1:",
        "fixed_code": "if msg is not None:",
        "patch": "@@ -807,7 +807,7 @@ def formatrepr(self) -> FixtureLookupErrorRepr:\n         stack = [self.request._pyfuncitem.obj]\n         stack.extend(map(lambda x: x.func, self.fixturestack))\n         msg = self.msg\n-        if msg is not None and len(stack) > 1:\n+        if msg is not None:\n             # The last fixture raise an error, let's present\n             # it at the requesting side.\n             stack = stack[:-1]"
    },
    {
        "commit_id": "cd3eb9800b8f36c257cfe4deb40ea275bb72e4e9",
        "commit_message": "fix test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cd3eb9800b8f36c257cfe4deb40ea275bb72e4e9",
        "buggy_code": "\"*PytestRemovedIn9Warning: Sync test 'test_foo' requested an async \"",
        "fixed_code": "\"*PytestRemovedIn9Warning: 'test_foo' requested an async \"",
        "patch": "@@ -1375,7 +1375,7 @@ def test_foo(async_fixture):\n         [\n             \"*== warnings summary ==*\",\n             (\n-                \"*PytestRemovedIn9Warning: Sync test 'test_foo' requested an async \"\n+                \"*PytestRemovedIn9Warning: 'test_foo' requested an async \"\n                 \"fixture 'async_fixture' with autouse=True, with no plugin or hook \"\n                 \"that handled it. This is usually an error, as pytest does not \"\n                 \"natively support it. If this is intentional, consider making the \""
    },
    {
        "commit_id": "216ec3c0ba87b50af11a3fd6f633b69105a7708e",
        "commit_message": "Remove PytestReturnNotNoneWarning and PytestUnhandledCoroutineWarning. Make tests fail instead of raising warning/exception. fix tests. add changelog.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/216ec3c0ba87b50af11a3fd6f633b69105a7708e",
        "buggy_code": "def test_async_support(pytester: Pytester) -> None:  # TODO: Change this",
        "fixed_code": "def test_async_support(pytester: Pytester) -> None:",
        "patch": "@@ -1314,7 +1314,7 @@ def test_1(self):\n     assert tracked == []\n \n \n-def test_async_support(pytester: Pytester) -> None:  # TODO: Change this\n+def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n     pytester.copy_example(\"unittest/test_unittest_asyncio.py\")"
    },
    {
        "commit_id": "45c2ffb635ad228fdb24d3f8feb35c383a3dbdf3",
        "commit_message": "Merge remote-tracking branch 'origin/main' into async-tests-issue-warning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/45c2ffb635ad228fdb24d3f8feb35c383a3dbdf3",
        "buggy_code": "result.stdout.no_fnmatch_line(\"*error*\")",
        "fixed_code": "assert result.ret == 0",
        "patch": "@@ -2996,7 +2996,7 @@ def test_finish():\n             *3 passed*\n         \"\"\"\n         )\n-        result.stdout.no_fnmatch_line(\"*error*\")\n+        assert result.ret == 0\n \n     def test_fixture_finalizer(self, pytester: Pytester) -> None:\n         pytester.makeconftest("
    },
    {
        "commit_id": "ded1f44e5cdf02e5823f52e07414236982200894",
        "commit_message": "Merge pull request #12913 from jakkdl/dontfailonbadpath\n\n[minor] avoid test failing if the working path contains the string 'error'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ded1f44e5cdf02e5823f52e07414236982200894",
        "buggy_code": "result.stdout.no_fnmatch_line(\"*error*\")",
        "fixed_code": "assert result.ret == 0",
        "patch": "@@ -2996,7 +2996,7 @@ def test_finish():\n             *3 passed*\n         \"\"\"\n         )\n-        result.stdout.no_fnmatch_line(\"*error*\")\n+        assert result.ret == 0\n \n     def test_fixture_finalizer(self, pytester: Pytester) -> None:\n         pytester.makeconftest("
    },
    {
        "commit_id": "922d6841b0fe3dd1030f2ec4b816778a74a3bf84",
        "commit_message": "avoid test failing if the working path contains the string 'error'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/922d6841b0fe3dd1030f2ec4b816778a74a3bf84",
        "buggy_code": "result.stdout.no_fnmatch_line(\"*error*\")",
        "fixed_code": "assert result.ret == 0",
        "patch": "@@ -2996,7 +2996,7 @@ def test_finish():\n             *3 passed*\n         \"\"\"\n         )\n-        result.stdout.no_fnmatch_line(\"*error*\")\n+        assert result.ret == 0\n \n     def test_fixture_finalizer(self, pytester: Pytester) -> None:\n         pytester.makeconftest("
    },
    {
        "commit_id": "a14c718867a9e7a664e2c957fd4694a4b5cc355b",
        "commit_message": "Fix `disable_test_id_escaping_and_forfeit_all_rights_to_community_support` option when using `pytest.param(..., id=\"...\")`\n\nFixes #9037\r\n\r\n---------\r\n\r\nCo-authored-by: Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>\r\nCo-authored-by: Bruno Oliveira <bruno@pytest.org>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a14c718867a9e7a664e2c957fd4694a4b5cc355b",
        "buggy_code": "yield parameterset.id",
        "fixed_code": "yield _ascii_escaped_by_config(parameterset.id, self.config)",
        "patch": "@@ -924,7 +924,7 @@ def _resolve_ids(self) -> Iterable[str]:\n         for idx, parameterset in enumerate(self.parametersets):\n             if parameterset.id is not None:\n                 # ID provided directly - pytest.param(..., id=\"...\")\n-                yield parameterset.id\n+                yield _ascii_escaped_by_config(parameterset.id, self.config)\n             elif self.ids and idx < len(self.ids) and self.ids[idx] is not None:\n                 # ID provided in the IDs list - parametrize(..., ids=[...]).\n                 yield self._idval_from_value_required(self.ids[idx], idx)"
    },
    {
        "commit_id": "50044f61446837dc3e2c4b56d7ad516d52808838",
        "commit_message": "Ignore ruff error about EncodingWarning not defined in Python<3.10\n\nWe have a runtime guard right above it, so it is OK to ignore it.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/50044f61446837dc3e2c4b56d7ad516d52808838",
        "buggy_code": "warnings.simplefilter(\"ignore\", EncodingWarning)",
        "fixed_code": "warnings.simplefilter(\"ignore\", EncodingWarning)  # noqa: F821",
        "patch": "@@ -19,7 +19,7 @@\n def ignore_encoding_warning():\n     with warnings.catch_warnings():\n         if sys.version_info > (3, 10):\n-            warnings.simplefilter(\"ignore\", EncodingWarning)\n+            warnings.simplefilter(\"ignore\", EncodingWarning)  # noqa: F821\n         yield\n \n "
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "if self.active and self.config.getoption(\"verbose\") >= 0:",
        "fixed_code": "if self.active and self.config.get_verbosity() >= 0:",
        "patch": "@@ -347,7 +347,7 @@ def get_last_failed_paths(self) -> set[Path]:\n         return {x for x in result if x.exists()}\n \n     def pytest_report_collectionfinish(self) -> str | None:\n-        if self.active and self.config.getoption(\"verbose\") >= 0:\n+        if self.active and self.config.get_verbosity() >= 0:\n             return f\"run-last-failure: {self._report_status}\"\n         return None\n "
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "global_level = self.option.verbose",
        "fixed_code": "global_level = self.getoption(\"verbose\", default=0)",
        "patch": "@@ -1759,7 +1759,7 @@ def get_verbosity(self, verbosity_type: str | None = None) -> int:\n             print(config.get_verbosity())  # 1\n             print(config.get_verbosity(Config.VERBOSITY_ASSERTIONS))  # 2\n         \"\"\"\n-        global_level = self.option.verbose\n+        global_level = self.getoption(\"verbose\", default=0)\n         assert isinstance(global_level, int)\n         if verbosity_type is None:\n             return global_level"
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "if self._log_cli_enabled() and self._config.getoption(\"verbose\") < 1:",
        "fixed_code": "if self._log_cli_enabled() and self._config.get_verbosity() < 1:",
        "patch": "@@ -794,7 +794,7 @@ def pytest_runtestloop(self, session: Session) -> Generator[None, object, object\n         if session.config.option.collectonly:\n             return (yield)\n \n-        if self._log_cli_enabled() and self._config.getoption(\"verbose\") < 1:\n+        if self._log_cli_enabled() and self._config.get_verbosity() < 1:\n             # The verbose flag is needed to avoid messy test progress output.\n             self._config.option.verbose = 1\n "
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "if config.getoption(\"verbose\") < 2:",
        "fixed_code": "if config.get_verbosity() < 2:",
        "patch": "@@ -513,7 +513,7 @@ def importtestmodule(\n         ) from e\n     except ImportError as e:\n         exc_info = ExceptionInfo.from_current()\n-        if config.getoption(\"verbose\") < 2:\n+        if config.get_verbosity() < 2:\n             exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n         exc_repr = (\n             exc_info.getrepr(style=\"short\")"
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "verbose = terminalreporter.config.getvalue(\"verbose\")",
        "fixed_code": "verbose = terminalreporter.config.get_verbosity()",
        "patch": "@@ -71,7 +71,7 @@ def pytest_addoption(parser: Parser) -> None:\n def pytest_terminal_summary(terminalreporter: TerminalReporter) -> None:\n     durations = terminalreporter.config.option.durations\n     durations_min = terminalreporter.config.option.durations_min\n-    verbose = terminalreporter.config.getvalue(\"verbose\")\n+    verbose = terminalreporter.config.get_verbosity()\n     if durations is None:\n         return\n     tr = terminalreporter"
    },
    {
        "commit_id": "72c682ff9773ad2690711105a100423ebf7c7c15",
        "commit_message": "Streamline checks for verbose option (#12706)\n\nInstead of calling `Config.option.verbose`, call the new `Config.get_verbosity` function to determine the verbosity level. \r\n\r\nThis enables pytest to run correctly with the terminal plugin disabled.\r\n\r\nFix #9422",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72c682ff9773ad2690711105a100423ebf7c7c15",
        "buggy_code": "if self.config.getoption(\"verbose\") >= 0 and self.report_status:",
        "fixed_code": "if self.config.get_verbosity() >= 0 and self.report_status:",
        "patch": "@@ -113,7 +113,7 @@ def pytest_runtest_logreport(self, report: TestReport) -> None:\n                     self.lastfailed = None\n \n     def pytest_report_collectionfinish(self) -> str | None:\n-        if self.config.getoption(\"verbose\") >= 0 and self.report_status:\n+        if self.config.get_verbosity() >= 0 and self.report_status:\n             return f\"stepwise: {self.report_status}\"\n         return None\n "
    },
    {
        "commit_id": "09e386e3e0df5a58ef9ab4f8e43f55c650633be7",
        "commit_message": "Fix typos and introduce codespell pre-commit hook (#12769)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/09e386e3e0df5a58ef9ab4f8e43f55c650633be7",
        "buggy_code": "\"\"\"A paramaterized package-scoped fixture correctly reorders items to",
        "fixed_code": "\"\"\"A parameterized package-scoped fixture correctly reorders items to",
        "patch": "@@ -4338,7 +4338,7 @@ def test_func(self, f2, f1, m2):\n         assert request.fixturenames == \"s1 p1 m1 m2 c1 f2 f1\".split()\n \n     def test_parametrized_package_scope_reordering(self, pytester: Pytester) -> None:\n-        \"\"\"A paramaterized package-scoped fixture correctly reorders items to\n+        \"\"\"A parameterized package-scoped fixture correctly reorders items to\n         minimize setups & teardowns.\n \n         Regression test for #12328."
    },
    {
        "commit_id": "c947145fbb4aeec810a259b19f70fcb52fd53ad4",
        "commit_message": "Replaced `typing.Self` with `typing_extensions.Self` (#12744)\n\nFix incorrect Self import from typing instead of typing_extensions.\r\n\r\n---------\r\n\r\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c947145fbb4aeec810a259b19f70fcb52fd53ad4",
        "buggy_code": "from typing import Self",
        "fixed_code": "from typing_extensions import Self",
        "patch": "@@ -43,7 +43,7 @@\n \n \n if TYPE_CHECKING:\n-    from typing import Self\n+    from typing_extensions import Self\n \n     # Imported here due to circular import.\n     from _pytest.main import Session"
    },
    {
        "commit_id": "c947145fbb4aeec810a259b19f70fcb52fd53ad4",
        "commit_message": "Replaced `typing.Self` with `typing_extensions.Self` (#12744)\n\nFix incorrect Self import from typing instead of typing_extensions.\r\n\r\n---------\r\n\r\nCo-authored-by: Bruno Oliveira <bruno@soliv.dev>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c947145fbb4aeec810a259b19f70fcb52fd53ad4",
        "buggy_code": "from typing import Self",
        "fixed_code": "from typing_extensions import Self",
        "patch": "@@ -78,7 +78,7 @@\n \n \n if TYPE_CHECKING:\n-    from typing import Self\n+    from typing_extensions import Self\n \n \n def pytest_addoption(parser: Parser) -> None:"
    },
    {
        "commit_id": "cb98538e9c2ba3c65baf07432229d97fd5a29657",
        "commit_message": "Fix `errisinstance` typing  (#12700)\n\nFixes #12667",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb98538e9c2ba3c65baf07432229d97fd5a29657",
        "buggy_code": "EXCEPTION_OR_MORE = Union[Type[Exception], Tuple[Type[Exception], ...]]",
        "fixed_code": "EXCEPTION_OR_MORE = Union[Type[BaseException], Tuple[Type[BaseException], ...]]",
        "patch": "@@ -56,7 +56,7 @@\n \n TracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\", \"value\", \"auto\"]\n \n-EXCEPTION_OR_MORE = Union[Type[Exception], Tuple[Type[Exception], ...]]\n+EXCEPTION_OR_MORE = Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n \n \n class Code:"
    },
    {
        "commit_id": "b2dc022b3039d23140a50faabdb37676f18d5a2d",
        "commit_message": "[ruff] Fix all RUF024 (no mutable objects as values in 'dict.fromkeys'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b2dc022b3039d23140a50faabdb37676f18d5a2d",
        "buggy_code": "basekw: dict[str, list[object]] = dict.fromkeys(args, [])",
        "fixed_code": "basekw: dict[str, list[object]] = {arg: [] for arg in args}",
        "patch": "@@ -533,7 +533,7 @@ class TestClass(object):\n )\n def test_report_extra_parameters(reporttype: type[reports.BaseReport]) -> None:\n     args = list(inspect.signature(reporttype.__init__).parameters.keys())[1:]\n-    basekw: dict[str, list[object]] = dict.fromkeys(args, [])\n+    basekw: dict[str, list[object]] = {arg: [] for arg in args}\n     report = reporttype(newthing=1, **basekw)\n     assert report.newthing == 1\n "
    },
    {
        "commit_id": "53bf1889993696d4471cdaeffce9db1646b89ffa",
        "commit_message": "Merge pull request #12523 from lovetheguitar/fix/follow_up_to_pr_#12500\n\nImprove documentation & other kinks of marker keyword expression PR #12500",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/53bf1889993696d4471cdaeffce9db1646b89ffa",
        "buggy_code": "[  # TODO: improve/sort out",
        "fixed_code": "[",
        "patch": "@@ -235,7 +235,7 @@ def test_two():\n \n @pytest.mark.parametrize(\n     (\"expr\", \"expected_passed\"),\n-    [  # TODO: improve/sort out\n+    [\n         (\"car(color='red')\", [\"test_one\"]),\n         (\"car(color='red') or car(color='blue')\", [\"test_one\", \"test_two\"]),\n         (\"car and not car(temp=5)\", [\"test_one\", \"test_three\"]),"
    },
    {
        "commit_id": "66dbab697bb2a14801cd744a0d78c3cd69c3f809",
        "commit_message": "\ud83d\udcdd Rename `:pull:` RST role to `:pr:`\n\nThis is a preparatory patch for integrating the third party\n`sphinx-issues` extension.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66dbab697bb2a14801cd744a0d78c3cd69c3f809",
        "buggy_code": "\"pull\": (f\"{_repo}/pull/%s\", \"pull request #%s\"),",
        "fixed_code": "\"pr\": (f\"{_repo}/pull/%s\", \"pull request #%s\"),",
        "patch": "@@ -175,7 +175,7 @@\n     \"bpo\": (\"https://bugs.python.org/issue%s\", \"bpo-%s\"),\n     \"pypi\": (\"https://pypi.org/project/%s/\", \"%s\"),\n     \"issue\": (f\"{_repo}/issues/%s\", \"issue #%s\"),\n-    \"pull\": (f\"{_repo}/pull/%s\", \"pull request #%s\"),\n+    \"pr\": (f\"{_repo}/pull/%s\", \"pull request #%s\"),\n     \"user\": (\"https://github.com/%s\", \"@%s\"),\n }\n "
    },
    {
        "commit_id": "3cce243774b03125bb123a7b69f684ea0abba34b",
        "commit_message": "docs(expression.py): fix typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3cce243774b03125bb123a7b69f684ea0abba34b",
        "buggy_code": "- ident evaluates to True of False according to a provided matcher function.",
        "fixed_code": "- ident evaluates to True or False according to a provided matcher function.",
        "patch": "@@ -12,7 +12,7 @@\n The semantics are:\n \n - Empty expression evaluates to False.\n-- ident evaluates to True of False according to a provided matcher function.\n+- ident evaluates to True or False according to a provided matcher function.\n - or/and/not evaluate according to the usual boolean semantics.\n \"\"\"\n "
    },
    {
        "commit_id": "39b548e6ea0aa467969623b108d809604c0e12c0",
        "commit_message": "\ud83d\udcdd Make \"setuptools entrypoint\" term generic\n\nThis feature grew out of `setuptools` but the modern interface for\nextracting this information from the distribution package metadata\nis `importlib.metadata`. So the patch attempts to reflect this in\nthe documentation messaging.\n\nRefs:\n* https://docs.python.org/3/library/importlib.metadata.html#entry-points\n* https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/#using-package-metadata\n* https://packaging.python.org/en/latest/specifications/entry-points/#entry-points",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/39b548e6ea0aa467969623b108d809604c0e12c0",
        "buggy_code": "lines.append(\"setuptools registered plugins:\")",
        "fixed_code": "lines.append(\"registered third-party plugins:\")",
        "patch": "@@ -243,7 +243,7 @@ def getpluginversioninfo(config: Config) -> List[str]:\n     lines = []\n     plugininfo = config.pluginmanager.list_plugin_distinfo()\n     if plugininfo:\n-        lines.append(\"setuptools registered plugins:\")\n+        lines.append(\"registered third-party plugins:\")\n         for plugin, dist in plugininfo:\n             loc = getattr(plugin, \"__file__\", repr(plugin))\n             content = f\"{dist.project_name}-{dist.version} at {loc}\""
    },
    {
        "commit_id": "39b548e6ea0aa467969623b108d809604c0e12c0",
        "commit_message": "\ud83d\udcdd Make \"setuptools entrypoint\" term generic\n\nThis feature grew out of `setuptools` but the modern interface for\nextracting this information from the distribution package metadata\nis `importlib.metadata`. So the patch attempts to reflect this in\nthe documentation messaging.\n\nRefs:\n* https://docs.python.org/3/library/importlib.metadata.html#entry-points\n* https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/#using-package-metadata\n* https://packaging.python.org/en/latest/specifications/entry-points/#entry-points",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/39b548e6ea0aa467969623b108d809604c0e12c0",
        "buggy_code": "result.stdout.fnmatch_lines([\"*setuptools registered plugins:\", \"*at*\"])",
        "fixed_code": "result.stdout.fnmatch_lines([\"*registered third-party plugins:\", \"*at*\"])",
        "patch": "@@ -10,7 +10,7 @@ def test_version_verbose(pytester: Pytester, pytestconfig, monkeypatch) -> None:\n     assert result.ret == 0\n     result.stdout.fnmatch_lines([f\"*pytest*{pytest.__version__}*imported from*\"])\n     if pytestconfig.pluginmanager.list_plugin_distinfo():\n-        result.stdout.fnmatch_lines([\"*setuptools registered plugins:\", \"*at*\"])\n+        result.stdout.fnmatch_lines([\"*registered third-party plugins:\", \"*at*\"])\n \n \n def test_version_less_verbose(pytester: Pytester, pytestconfig, monkeypatch) -> None:"
    },
    {
        "commit_id": "f85289ba872a26eb41836cdaefe97a93b311bf29",
        "commit_message": "Merge pull request #12436 from bluetech/unittest-rerun-assertion\n\nunittest: fix assertion errors on unittest reruns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f85289ba872a26eb41836cdaefe97a93b311bf29",
        "buggy_code": "self._instance = None",
        "fixed_code": "del self._instance",
        "patch": "@@ -223,7 +223,7 @@ def teardown(self) -> None:\n             self._explicit_tearDown()\n             self._explicit_tearDown = None\n         self._obj = None\n-        self._instance = None\n+        del self._instance\n         super().teardown()\n \n     def startTest(self, testcase: \"unittest.TestCase\") -> None:"
    },
    {
        "commit_id": "de47b73520fd9b7e41272701d7fd4663357af046",
        "commit_message": "unittest: fix assertion errors on unittest reruns\n\nThis fixes unittest test reruns when using plugins like\npytest-rerunfailures.\n\nThe `instance` property uses AttributeError to check if the instance\nneeds to be initialized, so `del` is the correct way to clear it, not\nsetting to `None`.\n\nRegressed in 8.2.2.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/de47b73520fd9b7e41272701d7fd4663357af046",
        "buggy_code": "self._instance = None",
        "fixed_code": "del self._instance",
        "patch": "@@ -222,7 +222,7 @@ def teardown(self) -> None:\n             self._explicit_tearDown()\n             self._explicit_tearDown = None\n         self._obj = None\n-        self._instance = None\n+        del self._instance\n         super().teardown()\n \n     def startTest(self, testcase: \"unittest.TestCase\") -> None:"
    },
    {
        "commit_id": "0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "commit_message": "Merge pull request #12379 from Pierre-Sassoulas/more-pylint-fixes\n\n[pylint] Fix ``consider-using-sys-exit``, ``use-yield-from``, and ``implicit-str-concat``",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "buggy_code": "raise",
        "fixed_code": "raise  # pylint: disable=misplaced-bare-raise",
        "patch": "@@ -401,7 +401,7 @@ def handleError(self, record: logging.LogRecord) -> None:\n             # The default behavior of logging is to print \"Logging error\"\n             # to stderr with the call stack and some extra details.\n             # pytest wants to make such mistakes visible during testing.\n-            raise\n+            raise  # pylint: disable=misplaced-bare-raise\n \n \n @final"
    },
    {
        "commit_id": "0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "commit_message": "Merge pull request #12379 from Pierre-Sassoulas/more-pylint-fixes\n\n[pylint] Fix ``consider-using-sys-exit``, ``use-yield-from``, and ``implicit-str-concat``",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "buggy_code": "[\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info <\" \" (3,6)\")(b\"*dir\")],",
        "fixed_code": "[\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info < (3,6)\")(b\"*dir\")],",
        "patch": "@@ -207,7 +207,7 @@ def test_visit_norecurse(self, path1):\n \n     @pytest.mark.parametrize(\n         \"fil\",\n-        [\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info <\" \" (3,6)\")(b\"*dir\")],\n+        [\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info < (3,6)\")(b\"*dir\")],\n     )\n     def test_visit_filterfunc_is_string(self, path1, fil):\n         lst = []"
    },
    {
        "commit_id": "0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "commit_message": "Merge pull request #12379 from Pierre-Sassoulas/more-pylint-fixes\n\n[pylint] Fix ``consider-using-sys-exit``, ``use-yield-from``, and ``implicit-str-concat``",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0ba3e91fbdfa95df76c0f2318f48c34274e3c161",
        "buggy_code": "\"def test_1(): assert 1\\n\" \"def test_2(): assert 1\\n\", encoding=\"utf-8\"",
        "fixed_code": "\"def test_1(): assert 1\\ndef test_2(): assert 1\\n\", encoding=\"utf-8\"",
        "patch": "@@ -1163,7 +1163,7 @@ def test_1(): assert 1\n         )\n \n         p1.write_text(\n-            \"def test_1(): assert 1\\n\" \"def test_2(): assert 1\\n\", encoding=\"utf-8\"\n+            \"def test_1(): assert 1\\ndef test_2(): assert 1\\n\", encoding=\"utf-8\"\n         )\n         os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n "
    },
    {
        "commit_id": "908e112999c62307c891603bb509cf691ea66f66",
        "commit_message": "[pylint 'implicit-str-concat'] fix existing unwanted implicit str concat",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/908e112999c62307c891603bb509cf691ea66f66",
        "buggy_code": "[\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info <\" \" (3,6)\")(b\"*dir\")],",
        "fixed_code": "[\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info < (3,6)\")(b\"*dir\")],",
        "patch": "@@ -207,7 +207,7 @@ def test_visit_norecurse(self, path1):\n \n     @pytest.mark.parametrize(\n         \"fil\",\n-        [\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info <\" \" (3,6)\")(b\"*dir\")],\n+        [\"*dir\", \"*dir\", pytest.mark.skip(\"sys.version_info < (3,6)\")(b\"*dir\")],\n     )\n     def test_visit_filterfunc_is_string(self, path1, fil):\n         lst = []"
    },
    {
        "commit_id": "908e112999c62307c891603bb509cf691ea66f66",
        "commit_message": "[pylint 'implicit-str-concat'] fix existing unwanted implicit str concat",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/908e112999c62307c891603bb509cf691ea66f66",
        "buggy_code": "\"def test_1(): assert 1\\n\" \"def test_2(): assert 1\\n\", encoding=\"utf-8\"",
        "fixed_code": "\"def test_1(): assert 1\\ndef test_2(): assert 1\\n\", encoding=\"utf-8\"",
        "patch": "@@ -1163,7 +1163,7 @@ def test_1(): assert 1\n         )\n \n         p1.write_text(\n-            \"def test_1(): assert 1\\n\" \"def test_2(): assert 1\\n\", encoding=\"utf-8\"\n+            \"def test_1(): assert 1\\ndef test_2(): assert 1\\n\", encoding=\"utf-8\"\n         )\n         os.utime(p1, ns=(p1.stat().st_atime_ns, int(1e9)))\n "
    },
    {
        "commit_id": "807c01451867cb107900a5a9ce0d07f261770d99",
        "commit_message": "changed warning raised by async def to error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/807c01451867cb107900a5a9ce0d07f261770d99",
        "buggy_code": "class PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):",
        "fixed_code": "class PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):  # TODO: look at this",
        "patch": "@@ -77,7 +77,7 @@ def simple(cls, apiname: str) -> \"PytestExperimentalApiWarning\":\n \n \n @final\n-class PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):\n+class PytestUnhandledCoroutineWarning(PytestReturnNotNoneWarning):  # TODO: look at this\n     \"\"\"Warning emitted for an unhandled coroutine.\n \n     A coroutine was encountered when collecting test functions, but was not"
    },
    {
        "commit_id": "807c01451867cb107900a5a9ce0d07f261770d99",
        "commit_message": "changed warning raised by async def to error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/807c01451867cb107900a5a9ce0d07f261770d99",
        "buggy_code": "def test_async_support(pytester: Pytester) -> None:",
        "fixed_code": "def test_async_support(pytester: Pytester) -> None:  # TODO: Change this",
        "patch": "@@ -1309,7 +1309,7 @@ def test_1(self):\n     assert tracked == []\n \n \n-def test_async_support(pytester: Pytester) -> None:\n+def test_async_support(pytester: Pytester) -> None:  # TODO: Change this\n     pytest.importorskip(\"unittest.async_case\")\n \n     pytester.copy_example(\"unittest/test_unittest_asyncio.py\")"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")",
        "fixed_code": "cProfile.run(f\"pytest.cmdline.main({script!r})\", \"prof\")",
        "patch": "@@ -8,7 +8,7 @@\n     import pytest  # noqa: F401\n \n     script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n-    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n+    cProfile.run(f\"pytest.cmdline.main({script!r})\", \"prof\")\n     p = pstats.Stats(\"prof\")\n     p.strip_dirs()\n     p.sort_stats(\"cumulative\")"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "html_short_title = \"pytest-%s\" % release",
        "fixed_code": "html_short_title = f\"pytest-{release}\"",
        "patch": "@@ -236,7 +236,7 @@\n html_title = \"pytest documentation\"\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-html_short_title = \"pytest-%s\" % release\n+html_short_title = f\"pytest-{release}\"\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar."
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "message = \"in %s\" % (entry.name)",
        "fixed_code": "message = f\"in {entry.name}\"",
        "patch": "@@ -940,7 +940,7 @@ def repr_traceback_entry(\n             s = self.get_source(source, line_index, excinfo, short=short)\n             lines.extend(s)\n             if short:\n-                message = \"in %s\" % (entry.name)\n+                message = f\"in {entry.name}\"\n             else:\n                 message = excinfo and excinfo.typename or \"\"\n             entry_path = entry.path"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "return \"{%s}\" % \", \".join(components)",
        "fixed_code": "return \"{{{}}}\".format(\", \".join(components))",
        "patch": "@@ -616,7 +616,7 @@ def _safe_repr(\n                 vrepr = self._safe_repr(v, context, maxlevels, level)\n                 append(f\"{krepr}: {vrepr}\")\n             context.remove(objid)\n-            return \"{%s}\" % \", \".join(components)\n+            return \"{{{}}}\".format(\", \".join(components))\n \n         if (issubclass(typ, list) and r is list.__repr__) or (\n             issubclass(typ, tuple) and r is tuple.__repr__"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "text = \"\".join(\"\\x1b[%sm\" % cod for cod in esc) + text + \"\\x1b[0m\"",
        "fixed_code": "text = \"\".join(f\"\\x1b[{cod}m\" for cod in esc) + text + \"\\x1b[0m\"",
        "patch": "@@ -104,7 +104,7 @@ def markup(self, text: str, **markup: bool) -> str:\n         if self.hasmarkup:\n             esc = [self._esctable[name] for name, on in markup.items() if on]\n             if esc:\n-                text = \"\".join(\"\\x1b[%sm\" % cod for cod in esc) + text + \"\\x1b[0m\"\n+                text = \"\".join(f\"\\x1b[{cod}m\" for cod in esc) + text + \"\\x1b[0m\"\n         return text\n \n     def sep("
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "return \"fixture %s\" % self._capture_fixture.request.fixturename",
        "fixed_code": "return f\"fixture {self._capture_fixture.request.fixturename}\"",
        "patch": "@@ -738,7 +738,7 @@ def is_capturing(self) -> Union[str, bool]:\n         if self.is_globally_capturing():\n             return \"global\"\n         if self._capture_fixture:\n-            return \"fixture %s\" % self._capture_fixture.request.fixturename\n+            return f\"fixture {self._capture_fixture.request.fixturename}\"\n         return False\n \n     # Global capturing control"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "tw.write(\"@pytest.mark.%s:\" % name, bold=True)",
        "fixed_code": "tw.write(f\"@pytest.mark.{name}:\", bold=True)",
        "patch": "@@ -122,7 +122,7 @@ def pytest_cmdline_main(config: Config) -> Optional[Union[int, ExitCode]]:\n             parts = line.split(\":\", 1)\n             name = parts[0]\n             rest = parts[1] if len(parts) == 2 else \"\"\n-            tw.write(\"@pytest.mark.%s:\" % name, bold=True)\n+            tw.write(f\"@pytest.mark.{name}:\", bold=True)\n             tw.line(rest)\n             tw.line()\n         config._ensure_unconfigure()"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "\"cannot collect %r because it is not a function.\" % name",
        "fixed_code": "f\"cannot collect {name!r} because it is not a function.\"",
        "patch": "@@ -224,7 +224,7 @@ def pytest_pycollect_makeitem(\n             filename, lineno = getfslineno(obj)\n             warnings.warn_explicit(\n                 message=PytestCollectionWarning(\n-                    \"cannot collect %r because it is not a function.\" % name\n+                    f\"cannot collect {name!r} because it is not a function.\"\n                 ),\n                 category=None,\n                 filename=str(filename),"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "tr.write_sep(\"=\", \"slowest %s durations\" % durations)",
        "fixed_code": "tr.write_sep(\"=\", f\"slowest {durations} durations\")",
        "patch": "@@ -90,7 +90,7 @@ def pytest_terminal_summary(terminalreporter: \"TerminalReporter\") -> None:\n     if not durations:\n         tr.write_sep(\"=\", \"slowest durations\")\n     else:\n-        tr.write_sep(\"=\", \"slowest %s durations\" % durations)\n+        tr.write_sep(\"=\", f\"slowest {durations} durations\")\n         dlist = dlist[:durations]\n \n     for i, rep in enumerate(dlist):"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "attr = \"__%s__\" % reason",
        "fixed_code": "attr = f\"__{reason}__\"",
        "patch": "@@ -1406,7 +1406,7 @@ def g():\n             mod.f()\n \n         # emulate the issue described in #1984\n-        attr = \"__%s__\" % reason\n+        attr = f\"__{reason}__\"\n         getattr(excinfo.value, attr).__traceback__ = None\n \n         r = excinfo.getrepr()"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "sys.exit(os.system(\"%s tests\" % executable))",
        "fixed_code": "sys.exit(os.system(f\"{executable} tests\"))",
        "patch": "@@ -10,4 +10,4 @@\n     executable = os.path.join(os.getcwd(), \"dist\", \"runtests_script\", \"runtests_script\")\n     if sys.platform.startswith(\"win\"):\n         executable += \".exe\"\n-    sys.exit(os.system(\"%s tests\" % executable))\n+    sys.exit(os.system(f\"{executable} tests\"))"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "return \"<%s>\" % (self.name)  # type: ignore[attr-defined]",
        "fixed_code": "return f\"<{self.name}>\"  # type: ignore[attr-defined]",
        "patch": "@@ -144,7 +144,7 @@ def test_big_repr():\n def test_repr_on_newstyle() -> None:\n     class Function:\n         def __repr__(self):\n-            return \"<%s>\" % (self.name)  # type: ignore[attr-defined]\n+            return f\"<{self.name}>\"  # type: ignore[attr-defined]\n \n     assert saferepr(Function())\n "
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "result.stdout.fnmatch_lines([\"cachedir: %s\" % expected])",
        "fixed_code": "result.stdout.fnmatch_lines([f\"cachedir: {expected}\"])",
        "patch": "@@ -191,7 +191,7 @@ def test_cache_reportheader(\n         monkeypatch.delenv(\"TOX_ENV_DIR\", raising=False)\n         expected = \".pytest_cache\"\n     result = pytester.runpytest(\"-v\")\n-    result.stdout.fnmatch_lines([\"cachedir: %s\" % expected])\n+    result.stdout.fnmatch_lines([f\"cachedir: {expected}\"])\n \n \n def test_cache_reportheader_external_abspath("
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "pytester.makepyfile('\"\"\"\\n%s\"\"\"' % doctest)",
        "fixed_code": "pytester.makepyfile(f'\"\"\"\\n{doctest}\"\"\"')",
        "patch": "@@ -1160,7 +1160,7 @@ def makeit(doctest):\n                 pytester.maketxtfile(doctest)\n             else:\n                 assert mode == \"module\"\n-                pytester.makepyfile('\"\"\"\\n%s\"\"\"' % doctest)\n+                pytester.makepyfile(f'\"\"\"\\n{doctest}\"\"\"')\n \n         return makeit\n "
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "result.stderr.fnmatch_lines([\"*%s*\" % tb_output])",
        "fixed_code": "result.stderr.fnmatch_lines([f\"*{tb_output}*\"])",
        "patch": "@@ -101,7 +101,7 @@ def test_timeout():\n     result = pytester.runpytest_subprocess(*args)\n     tb_output = \"most recent call first\"\n     if enabled:\n-        result.stderr.fnmatch_lines([\"*%s*\" % tb_output])\n+        result.stderr.fnmatch_lines([f\"*{tb_output}*\"])\n     else:\n         assert tb_output not in result.stderr.str()\n     result.stdout.fnmatch_lines([\"*1 passed*\"])"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "result = pytester.runpytest(\"-s\", p, \"--basetemp=%s/bt\" % linktemp)",
        "fixed_code": "result = pytester.runpytest(\"-s\", p, f\"--basetemp={linktemp}/bt\")",
        "patch": "@@ -79,7 +79,7 @@ def test_1(tmpdir):\n             assert os.path.realpath(str(tmpdir)) == str(tmpdir)\n     \"\"\"\n     )\n-    result = pytester.runpytest(\"-s\", p, \"--basetemp=%s/bt\" % linktemp)\n+    result = pytester.runpytest(\"-s\", p, f\"--basetemp={linktemp}/bt\")\n     assert not result.ret\n \n "
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "\"def check(): return %r\" % dirname, encoding=\"utf-8\"",
        "fixed_code": "f\"def check(): return {dirname!r}\", encoding=\"utf-8\"",
        "patch": "@@ -442,7 +442,7 @@ def test_syspath_prepend_with_namespace_packages(\n         lib = ns.joinpath(dirname)\n         lib.mkdir()\n         lib.joinpath(\"__init__.py\").write_text(\n-            \"def check(): return %r\" % dirname, encoding=\"utf-8\"\n+            f\"def check(): return {dirname!r}\", encoding=\"utf-8\"\n         )\n \n     monkeypatch.syspath_prepend(\"hello\")"
    },
    {
        "commit_id": "4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "commit_message": "[ruff UP031] Fix to use format specifiers instead of percent format",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4788165e69d08e10fc6b9c0124083fb358e2e9b0",
        "buggy_code": "assert \"lexer=%s\" % lexer in data.decode()",
        "fixed_code": "assert f\"lexer={lexer}\" in data.decode()",
        "patch": "@@ -171,7 +171,7 @@ def test_create_new_paste(self, pastebin, mocked_urlopen) -> None:\n         assert type(data) is bytes\n         lexer = \"text\"\n         assert url == \"https://bpa.st\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert f\"lexer={lexer}\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n         assert \"expiry=1week\" in data.decode()\n "
    },
    {
        "commit_id": "111c0d910e15afb9e1ed1f6862e1637594eaa076",
        "commit_message": "Add consider_namespace_packages ini option\n\nFix #11475",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/111c0d910e15afb9e1ed1f6862e1637594eaa076",
        "buggy_code": "mod: Any = import_path(path, root=tmp_path)",
        "fixed_code": "mod: Any = import_path(path, root=tmp_path, consider_namespace_packages=False)",
        "patch": "@@ -296,7 +296,7 @@ def method(self):\n     )\n     path = tmp_path.joinpath(\"a.py\")\n     path.write_text(str(source), encoding=\"utf-8\")\n-    mod: Any = import_path(path, root=tmp_path)\n+    mod: Any = import_path(path, root=tmp_path, consider_namespace_packages=False)\n     s2 = Source(mod.A)\n     assert str(source).strip() == str(s2).strip()\n "
    },
    {
        "commit_id": "73edefdd649b3fe23e29d884ef5982876db7e18b",
        "commit_message": "Merge pull request #12031 from pytest-dev/update-plugin-list/patch-affc652f1\n\n[automated] Update plugin list",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/73edefdd649b3fe23e29d884ef5982876db7e18b",
        "buggy_code": "It includes PyPI projects whose names begin with \"pytest-\" or \"pytest_\" and a handful of manually selected projects.",
        "fixed_code": "It includes PyPI projects whose names begin with ``pytest-`` or ``pytest_`` and a handful of manually selected projects.",
        "patch": "@@ -29,7 +29,7 @@\n ==================\n \n Below is an automated compilation of ``pytest``` plugins available on `PyPI <https://pypi.org>`_.\n-It includes PyPI projects whose names begin with \"pytest-\" or \"pytest_\" and a handful of manually selected projects.\n+It includes PyPI projects whose names begin with ``pytest-`` or ``pytest_`` and a handful of manually selected projects.\n Packages classified as inactive are excluded.\n \n For detailed insights into how this list is generated,"
    },
    {
        "commit_id": "ffd727e9d60a638f915f49b25f89b9a38b8b9700",
        "commit_message": "Fix mention of the prefix for pytest plugins in `plugin_list`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ffd727e9d60a638f915f49b25f89b9a38b8b9700",
        "buggy_code": "It includes PyPI projects whose names begin with \"pytest-\" or \"pytest_\" and a handful of manually selected projects.",
        "fixed_code": "It includes PyPI projects whose names begin with ``pytest-`` or ``pytest_`` and a handful of manually selected projects.",
        "patch": "@@ -29,7 +29,7 @@\n ==================\n \n Below is an automated compilation of ``pytest``` plugins available on `PyPI <https://pypi.org>`_.\n-It includes PyPI projects whose names begin with \"pytest-\" or \"pytest_\" and a handful of manually selected projects.\n+It includes PyPI projects whose names begin with ``pytest-`` or ``pytest_`` and a handful of manually selected projects.\n Packages classified as inactive are excluded.\n \n For detailed insights into how this list is generated,"
    },
    {
        "commit_id": "5bb1363435a8cb3e2010505dbeb1e015c36beed6",
        "commit_message": "Merge pull request #11957 from bluetech/fix-session-collect-order\n\nmain: fix reversed collection order in Session",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5bb1363435a8cb3e2010505dbeb1e015c36beed6",
        "buggy_code": "for node in subnodes:",
        "fixed_code": "for node in reversed(subnodes):",
        "patch": "@@ -897,7 +897,7 @@ def collect(self) -> Iterator[Union[nodes.Item, nodes.Collector]]:\n \n                 # Prune this level.\n                 any_matched_in_collector = False\n-                for node in subnodes:\n+                for node in reversed(subnodes):\n                     # Path part e.g. `/a/b/` in `/a/b/test_file.py::TestIt::test_it`.\n                     if isinstance(matchparts[0], Path):\n                         is_match = node.path == matchparts[0]"
    },
    {
        "commit_id": "5bb1363435a8cb3e2010505dbeb1e015c36beed6",
        "commit_message": "Merge pull request #11957 from bluetech/fix-session-collect-order\n\nmain: fix reversed collection order in Session",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5bb1363435a8cb3e2010505dbeb1e015c36beed6",
        "buggy_code": "result.stdout.fnmatch_lines([\"*Module*test_issue88*\", \"*MyFile*test_issue88*\"])",
        "fixed_code": "result.stdout.fnmatch_lines([\"*MyFile*test_issue88*\", \"*Module*test_issue88*\"])",
        "patch": "@@ -241,7 +241,7 @@ def test_issue88_initial_file_multinodes(self, pytester: Pytester) -> None:\n         pytester.copy_example(\"issue88_initial_file_multinodes\")\n         p = pytester.makepyfile(\"def test_hello(): pass\")\n         result = pytester.runpytest(p, \"--collect-only\")\n-        result.stdout.fnmatch_lines([\"*Module*test_issue88*\", \"*MyFile*test_issue88*\"])\n+        result.stdout.fnmatch_lines([\"*MyFile*test_issue88*\", \"*Module*test_issue88*\"])\n \n     def test_issue93_initialnode_importing_capturing(self, pytester: Pytester) -> None:\n         pytester.makeconftest("
    },
    {
        "commit_id": "1180348303599f835d37b2028288ce81b90b85c5",
        "commit_message": "[ruff] Add 'consider-using-in' from pylint\n\nSee https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/consider-using-in.html\nAn automated fix from ruff is available (but it's unsafe for now).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1180348303599f835d37b2028288ce81b90b85c5",
        "buggy_code": "if sys.platform == \"win32\" or sys.platform == \"emscripten\":",
        "fixed_code": "if sys.platform in {\"win32\", \"emscripten\"}:",
        "patch": "@@ -289,7 +289,7 @@ def get_user_id() -> int | None:\n     # mypy follows the version and platform checking expectation of PEP 484:\n     # https://mypy.readthedocs.io/en/stable/common_issues.html?highlight=platform#python-version-and-system-platform-checks\n     # Containment checks are too complex for mypy v1.5.0 and cause failure.\n-    if sys.platform == \"win32\" or sys.platform == \"emscripten\":\n+    if sys.platform in {\"win32\", \"emscripten\"}:\n         # win32 does not have a getuid() function.\n         # Emscripten has a return 0 stub.\n         return None"
    },
    {
        "commit_id": "1180348303599f835d37b2028288ce81b90b85c5",
        "commit_message": "[ruff] Add 'consider-using-in' from pylint\n\nSee https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/consider-using-in.html\nAn automated fix from ruff is available (but it's unsafe for now).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1180348303599f835d37b2028288ce81b90b85c5",
        "buggy_code": "if self.report_duration == \"total\" or report.when == self.report_duration:",
        "fixed_code": "if self.report_duration in {\"total\", report.when}:",
        "patch": "@@ -624,7 +624,7 @@ def pytest_runtest_logreport(self, report: TestReport) -> None:\n     def update_testcase_duration(self, report: TestReport) -> None:\n         \"\"\"Accumulate total duration for nodeid from given report and update\n         the Junit.testcase with the new total if already created.\"\"\"\n-        if self.report_duration == \"total\" or report.when == self.report_duration:\n+        if self.report_duration in {\"total\", report.when}:\n             reporter = self.node_reporter(report)\n             reporter.duration += getattr(report, \"duration\", 0.0)\n "
    },
    {
        "commit_id": "1180348303599f835d37b2028288ce81b90b85c5",
        "commit_message": "[ruff] Add 'consider-using-in' from pylint\n\nSee https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/consider-using-in.html\nAn automated fix from ruff is available (but it's unsafe for now).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1180348303599f835d37b2028288ce81b90b85c5",
        "buggy_code": "if i == 0 or i == len(ntraceback) - 1",
        "fixed_code": "if i in {0, len(ntraceback) - 1}",
        "patch": "@@ -1787,7 +1787,7 @@ def _traceback_filter(self, excinfo: ExceptionInfo[BaseException]) -> Traceback:\n                     ntraceback = Traceback(\n                         (\n                             entry\n-                            if i == 0 or i == len(ntraceback) - 1\n+                            if i in {0, len(ntraceback) - 1}\n                             else entry.with_repr_style(\"short\")\n                         )\n                         for i, entry in enumerate(ntraceback)"
    },
    {
        "commit_id": "1180348303599f835d37b2028288ce81b90b85c5",
        "commit_message": "[ruff] Add 'consider-using-in' from pylint\n\nSee https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/consider-using-in.html\nAn automated fix from ruff is available (but it's unsafe for now).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1180348303599f835d37b2028288ce81b90b85c5",
        "buggy_code": "if cfg == \"progress\" or cfg == \"progress-even-when-capture-no\":",
        "fixed_code": "if cfg in {\"progress\", \"progress-even-when-capture-no\"}:",
        "patch": "@@ -381,7 +381,7 @@ def _determine_show_progress_info(self) -> Literal[\"progress\", \"count\", False]:\n         if self.config.getoption(\"setupshow\", False):\n             return False\n         cfg: str = self.config.getini(\"console_output_style\")\n-        if cfg == \"progress\" or cfg == \"progress-even-when-capture-no\":\n+        if cfg in {\"progress\", \"progress-even-when-capture-no\"}:\n             return \"progress\"\n         elif cfg == \"count\":\n             return \"count\""
    },
    {
        "commit_id": "1180348303599f835d37b2028288ce81b90b85c5",
        "commit_message": "[ruff] Add 'consider-using-in' from pylint\n\nSee https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/consider-using-in.html\nAn automated fix from ruff is available (but it's unsafe for now).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1180348303599f835d37b2028288ce81b90b85c5",
        "buggy_code": "assert x == 1 or x == 2",
        "fixed_code": "assert x == 1 or x == 2  # noqa: PLR1714",
        "patch": "@@ -429,7 +429,7 @@ def f1() -> None:\n \n         def f2() -> None:\n             x = 1\n-            assert x == 1 or x == 2\n+            assert x == 1 or x == 2  # noqa: PLR1714\n \n         getmsg(f2, must_pass=True)\n "
    },
    {
        "commit_id": "7690a0ddf15785f0af0e9a4cf8524379c53cd061",
        "commit_message": "Improve error message when using @pytest.fixture twice (#11670)\n\n* Improve error message when using @pytest.fixture twice\r\n\r\nWhile obvious in hindsight, this error message confused me. I thought my fixture\r\nfunction was used in a test function twice, since the wording is ambiguous.\r\n\r\nAlso, the error does not tell me *which* function is the culprit.\r\n\r\nFinally, this adds a test, which wasn't done in\r\ncfd16d0dac1c935952b892bfbc225978c9b25de3 where this was originally implemented.\r\n\r\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\r\n\r\nfor more information, see https://pre-commit.ci\r\n\r\n---------\r\n\r\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7690a0ddf15785f0af0e9a4cf8524379c53cd061",
        "buggy_code": "\"fixture is being applied more than once to the same function\"",
        "fixed_code": "f\"@pytest.fixture is being applied more than once to the same function {function.__name__!r}\"",
        "patch": "@@ -1188,7 +1188,7 @@ def __call__(self, function: FixtureFunction) -> FixtureFunction:\n \n         if getattr(function, \"_pytestfixturefunction\", False):\n             raise ValueError(\n-                \"fixture is being applied more than once to the same function\"\n+                f\"@pytest.fixture is being applied more than once to the same function {function.__name__!r}\"\n             )\n \n         if hasattr(function, \"pytestmark\"):"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "import pytest  # NOQA",
        "fixed_code": "import pytest  # noqa: F401",
        "patch": "@@ -5,7 +5,7 @@\n     import cProfile\n     import pstats\n \n-    import pytest  # NOQA\n+    import pytest  # noqa: F401\n \n     script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n     cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "return self.ensure(*args, **{\"dir\": True})",
        "fixed_code": "return self.ensure(*args, dir=True)",
        "patch": "@@ -452,7 +452,7 @@ def relto(self, relpath):\n \n     def ensure_dir(self, *args):\n         \"\"\"Ensure the path joined with args is a directory.\"\"\"\n-        return self.ensure(*args, **{\"dir\": True})\n+        return self.ensure(*args, dir=True)\n \n     def bestrelpath(self, dest):\n         \"\"\"Return a string which is a relative path from self"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa",
        "fixed_code": "self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa: F821",
        "patch": "@@ -1006,7 +1006,7 @@ def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n             if i:\n                 fail_inner: List[ast.stmt] = []\n                 # cond is set in a prior loop iteration below\n-                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n+                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa: F821\n                 self.expl_stmts = fail_inner\n                 # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                 if ("
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "import xdist  # noqa",
        "fixed_code": "import xdist  # noqa: F401",
        "patch": "@@ -712,7 +712,7 @@ def test_method(self, something):\n     )\n     def test_request_garbage(self, pytester: Pytester) -> None:\n         try:\n-            import xdist  # noqa\n+            import xdist  # noqa: F401\n         except ImportError:\n             pass\n         else:"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "l1 = [\"a\"] + [long_a for _ in range(0, 7)]",
        "fixed_code": "l1 = [\"a\"] + [long_a for _ in range(7)]",
        "patch": "@@ -601,7 +601,7 @@ def test_list_wrap_for_width_rewrap_same_length(self) -> None:\n \n     def test_list_dont_wrap_strings(self) -> None:\n         long_a = \"a\" * 10\n-        l1 = [\"a\"] + [long_a for _ in range(0, 7)]\n+        l1 = [\"a\"] + [long_a for _ in range(7)]\n         l2 = [\"should not get wrapped\"]\n         diff = callequal(l1, l2, verbose=True)\n         assert diff == ["
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "assert a_global  # type: ignore[name-defined] # noqa",
        "fixed_code": "assert a_global  # type: ignore[name-defined] # noqa: F821",
        "patch": "@@ -200,7 +200,7 @@ def f2() -> None:\n         assert getmsg(f2) == \"assert False\"\n \n         def f3() -> None:\n-            assert a_global  # type: ignore[name-defined] # noqa\n+            assert a_global  # type: ignore[name-defined] # noqa: F821\n \n         assert getmsg(f3, {\"a_global\": False}) == \"assert False\"\n "
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "topdir = pytester.path  # noqa",
        "fixed_code": "topdir = pytester.path  # noqa: F841",
        "patch": "@@ -535,7 +535,7 @@ def test_collect_protocol_single_function(self, pytester: Pytester) -> None:\n         newid = item.nodeid\n         assert newid == id\n         pprint.pprint(hookrec.calls)\n-        topdir = pytester.path  # noqa\n+        topdir = pytester.path  # noqa: F841\n         hookrec.assert_contains(\n             [\n                 (\"pytest_collectstart\", \"collector.path == topdir\"),"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "for i in range(0, 2):",
        "fixed_code": "for i in range(2):",
        "patch": "@@ -74,7 +74,7 @@ def test_marked_one_arg_twice(self, pytester: Pytester) -> None:\n             \"\"\"@pytest.mark.skipif(\"not hasattr(os, 'murks')\")\"\"\",\n             \"\"\"@pytest.mark.skipif(condition=\"hasattr(os, 'murks')\")\"\"\",\n         ]\n-        for i in range(0, 2):\n+        for i in range(2):\n             item = pytester.getitem(\n                 f\"\"\"\n                 import pytest"
    },
    {
        "commit_id": "29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "commit_message": "Merge pull request #11956 from bluetech/ruff-warning\n\nFix ruff deprecation warning + enable few more rules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/29a5f94428fe2cebf029c8ef9812bd8fc65adcba",
        "buggy_code": "import tracemalloc  # noqa",
        "fixed_code": "import tracemalloc  # noqa: F401",
        "patch": "@@ -794,7 +794,7 @@ def test_resource_warning(pytester: Pytester, monkeypatch: pytest.MonkeyPatch) -\n     # available, using `importorskip(\"tracemalloc\")` for example,\n     # because we want to ensure the same code path does not break in those platforms.\n     try:\n-        import tracemalloc  # noqa\n+        import tracemalloc  # noqa: F401\n \n         has_tracemalloc = True\n     except ImportError:"
    },
    {
        "commit_id": "ea57c40c438b9bb9981518b36ce70e7e445cf674",
        "commit_message": "main: fix reversed collection order in Session\n\nSince we're working with a stack (last in first out), we need to append\nto it in reverse to preserve the order when popped.\n\nFix #11937.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ea57c40c438b9bb9981518b36ce70e7e445cf674",
        "buggy_code": "for node in subnodes:",
        "fixed_code": "for node in reversed(subnodes):",
        "patch": "@@ -897,7 +897,7 @@ def collect(self) -> Iterator[Union[nodes.Item, nodes.Collector]]:\n \n                 # Prune this level.\n                 any_matched_in_collector = False\n-                for node in subnodes:\n+                for node in reversed(subnodes):\n                     # Path part e.g. `/a/b/` in `/a/b/test_file.py::TestIt::test_it`.\n                     if isinstance(matchparts[0], Path):\n                         is_match = node.path == matchparts[0]"
    },
    {
        "commit_id": "ea57c40c438b9bb9981518b36ce70e7e445cf674",
        "commit_message": "main: fix reversed collection order in Session\n\nSince we're working with a stack (last in first out), we need to append\nto it in reverse to preserve the order when popped.\n\nFix #11937.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ea57c40c438b9bb9981518b36ce70e7e445cf674",
        "buggy_code": "result.stdout.fnmatch_lines([\"*Module*test_issue88*\", \"*MyFile*test_issue88*\"])",
        "fixed_code": "result.stdout.fnmatch_lines([\"*MyFile*test_issue88*\", \"*Module*test_issue88*\"])",
        "patch": "@@ -241,7 +241,7 @@ def test_issue88_initial_file_multinodes(self, pytester: Pytester) -> None:\n         pytester.copy_example(\"issue88_initial_file_multinodes\")\n         p = pytester.makepyfile(\"def test_hello(): pass\")\n         result = pytester.runpytest(p, \"--collect-only\")\n-        result.stdout.fnmatch_lines([\"*Module*test_issue88*\", \"*MyFile*test_issue88*\"])\n+        result.stdout.fnmatch_lines([\"*MyFile*test_issue88*\", \"*Module*test_issue88*\"])\n \n     def test_issue93_initialnode_importing_capturing(self, pytester: Pytester) -> None:\n         pytester.makeconftest("
    },
    {
        "commit_id": "41ff3584d78091bf2753bb084b1f5ec8a97c3f51",
        "commit_message": "[flake8-bugbear] Fixes a B017 we can actually fix and noqa the two others",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/41ff3584d78091bf2753bb084b1f5ec8a97c3f51",
        "buggy_code": "with pytest.raises(Exception, foo=\"bar\"):  # type: ignore[call-overload]",
        "fixed_code": "with pytest.raises(OSError, foo=\"bar\"):  # type: ignore[call-overload]",
        "patch": "@@ -280,7 +280,7 @@ def __class__(self):\n \n     def test_raises_context_manager_with_kwargs(self):\n         with pytest.raises(TypeError) as excinfo:\n-            with pytest.raises(Exception, foo=\"bar\"):  # type: ignore[call-overload]\n+            with pytest.raises(OSError, foo=\"bar\"):  # type: ignore[call-overload]\n                 pass\n         assert \"Unexpected keyword arguments\" in str(excinfo.value)\n "
    },
    {
        "commit_id": "52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "commit_message": "[flake8-bugbear] Fix all the useless expressions that are justified",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "buggy_code": "wcwidth  # reference library that must exist for tabulate to work",
        "fixed_code": "_ = wcwidth  # reference library that must exist for tabulate to work",
        "patch": "@@ -208,7 +208,7 @@ def main() -> None:\n         f.write(f\"This list contains {len(plugins)} plugins.\\n\\n\")\n         f.write(\".. only:: not latex\\n\\n\")\n \n-        wcwidth  # reference library that must exist for tabulate to work\n+        _ = wcwidth  # reference library that must exist for tabulate to work\n         plugin_table = tabulate.tabulate(plugins, headers=\"keys\", tablefmt=\"rst\")\n         f.write(indent(plugin_table, \"   \"))\n         f.write(\"\\n\\n\")"
    },
    {
        "commit_id": "52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "commit_message": "[flake8-bugbear] Fix all the useless expressions that are justified",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "buggy_code": "session_request.fspath",
        "fixed_code": "_ = session_request.fspath",
        "patch": "@@ -108,7 +108,7 @@ def test_session_scoped_unavailable_attributes(self, session_request):\n             AttributeError,\n             match=\"path not available in session-scoped context\",\n         ):\n-            session_request.fspath\n+            _ = session_request.fspath\n \n \n @pytest.mark.parametrize(\"config_type\", [\"ini\", \"pyproject\"])"
    },
    {
        "commit_id": "52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "commit_message": "[flake8-bugbear] Fix all the useless expressions that are justified",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/52fba25ff94f01e510ff5e7f52da5bb74a32669e",
        "buggy_code": "mark._some_name",
        "fixed_code": "_ = mark._some_name",
        "patch": "@@ -42,7 +42,7 @@ class SomeClass:\n     def test_pytest_mark_name_starts_with_underscore(self) -> None:\n         mark = MarkGenerator(_ispytest=True)\n         with pytest.raises(AttributeError):\n-            mark._some_name\n+            _ = mark._some_name\n \n \n def test_marked_class_run_twice(pytester: Pytester) -> None:"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)",
        "fixed_code": "check_call([\"towncrier\", \"--yes\", \"--version\", version, *addopts])",
        "patch": "@@ -107,7 +107,7 @@ def pre_release(\n \n def changelog(version: str, write_out: bool = False) -> None:\n     addopts = [] if write_out else [\"--draft\"]\n-    check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)\n+    check_call([\"towncrier\", \"--yes\", \"--version\", version, *addopts])\n \n \n def main() -> None:"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "f\"    {type(e).__name__}: {str(e)}\\n\"",
        "fixed_code": "f\"    {type(e).__name__}: {e!s}\\n\"",
        "patch": "@@ -1018,7 +1018,7 @@ def _truncate_recursive_traceback(\n             extraline: Optional[str] = (\n                 \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                 \"  The following exception happened when comparing locals in the stack frame:\\n\"\n-                f\"    {type(e).__name__}: {str(e)}\\n\"\n+                f\"    {type(e).__name__}: {e!s}\\n\"\n                 f\"  Displaying first and last {max_frames} stack frames out of {len(traceback)}.\"\n             )\n             # Type ignored because adding two instances of a List subtype"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "self.expl_stmts + [hook_call_pass],",
        "fixed_code": "[*self.expl_stmts, hook_call_pass],",
        "patch": "@@ -925,7 +925,7 @@ def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n             # If any hooks implement assert_pass hook\n             hook_impl_test = ast.If(\n                 self.helper(\"_check_if_assertion_pass_impl\"),\n-                self.expl_stmts + [hook_call_pass],\n+                [*self.expl_stmts, hook_call_pass],\n                 [],\n             )\n             statements_pass = [hook_impl_test]"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "NOTSET: Final = NotSetType.token  # noqa: E305",
        "fixed_code": "NOTSET: Final = NotSetType.token",
        "patch": "@@ -27,7 +27,7 @@\n # https://www.python.org/dev/peps/pep-0484/#support-for-singleton-types-in-unions\n class NotSetType(enum.Enum):\n     token = 0\n-NOTSET: Final = NotSetType.token  # noqa: E305\n+NOTSET: Final = NotSetType.token\n # fmt: on\n \n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "groups = self._groups + [self._anonymous]",
        "fixed_code": "groups = [*self._groups, self._anonymous]",
        "patch": "@@ -122,7 +122,7 @@ def _getparser(self) -> \"MyOptionParser\":\n         from _pytest._argcomplete import filescompleter\n \n         optparser = MyOptionParser(self, self.extra_info, prog=self.prog)\n-        groups = self._groups + [self._anonymous]\n+        groups = [*self._groups, self._anonymous]\n         for group in groups:\n             if group.options:\n                 desc = group.description or group.name"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "record_func = xml.add_global_property  # noqa",
        "fixed_code": "record_func = xml.add_global_property",
        "patch": "@@ -375,7 +375,7 @@ def record_func(name: str, value: object) -> None:\n \n     xml = request.config.stash.get(xml_key, None)\n     if xml is not None:\n-        record_func = xml.add_global_property  # noqa\n+        record_func = xml.add_global_property\n     return record_func\n \n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "raise TypeError(f\"got {repr(mark_obj)} instead of Mark\")",
        "fixed_code": "raise TypeError(f\"got {mark_obj!r} instead of Mark\")",
        "patch": "@@ -406,7 +406,7 @@ def normalize_mark_list(\n     for mark in mark_list:\n         mark_obj = getattr(mark, \"mark\", mark)\n         if not isinstance(mark_obj, Mark):\n-            raise TypeError(f\"got {repr(mark_obj)} instead of Mark\")\n+            raise TypeError(f\"got {mark_obj!r} instead of Mark\")\n         yield mark_obj\n \n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "IGNORED_ATTRIBUTES = frozenset.union(  # noqa: E305",
        "fixed_code": "IGNORED_ATTRIBUTES = frozenset.union(",
        "patch": "@@ -358,7 +358,7 @@ def reportinfo(self) -> Tuple[Union[\"os.PathLike[str]\", str], Optional[int], str\n # hook is not called for them.\n # fmt: off\n class _EmptyClass: pass  # noqa: E701\n-IGNORED_ATTRIBUTES = frozenset.union(  # noqa: E305\n+IGNORED_ATTRIBUTES = frozenset.union(\n     frozenset(),\n     # Module.\n     dir(types.ModuleType(\"empty_module\")),"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821",
        "fixed_code": "warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]",
        "patch": "@@ -17,7 +17,7 @@\n def ignore_encoding_warning():\n     with warnings.catch_warnings():\n         with contextlib.suppress(NameError):  # new in 3.10\n-            warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821\n+            warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]\n         yield\n \n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "err.__notes__ = getattr(err, \"__notes__\", []) + [msg]  # type: ignore[attr-defined]",
        "fixed_code": "err.__notes__ = [*getattr(err, \"__notes__\", []), msg]  # type: ignore[attr-defined]",
        "patch": "@@ -1739,7 +1739,7 @@ def test():\n def add_note(err: BaseException, msg: str) -> None:\n     \"\"\"Adds a note to an exception inplace.\"\"\"\n     if sys.version_info < (3, 11):\n-        err.__notes__ = getattr(err, \"__notes__\", []) + [msg]  # type: ignore[attr-defined]\n+        err.__notes__ = [*getattr(err, \"__notes__\", []), msg]  # type: ignore[attr-defined]\n     else:\n         err.add_note(msg)\n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "args = [\"pyinstaller\", \"--noconfirm\"] + hidden + [\"runtests_script.py\"]",
        "fixed_code": "args = [\"pyinstaller\", \"--noconfirm\", *hidden, \"runtests_script.py\"]",
        "patch": "@@ -9,5 +9,5 @@\n     for x in pytest.freeze_includes():\n         hidden.extend([\"--hidden-import\", x])\n     hidden.extend([\"--hidden-import\", \"distutils\"])\n-    args = [\"pyinstaller\", \"--noconfirm\"] + hidden + [\"runtests_script.py\"]\n+    args = [\"pyinstaller\", \"--noconfirm\", *hidden, \"runtests_script.py\"]\n     subprocess.check_call(\" \".join(args), shell=True)"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "(\"\uff04\", 2),",
        "fixed_code": "(\"\uff04\", 2),  # noqa: RUF001",
        "patch": "@@ -15,7 +15,7 @@\n         (\"\\u1ABE\", 0),\n         (\"\\u0591\", 0),\n         (\"\ud83c\ude50\", 2),\n-        (\"\uff04\", 2),\n+        (\"\uff04\", 2),  # noqa: RUF001\n     ],\n )\n def test_wcwidth(c: str, expected: int) -> None:"
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "report_file = os.path.join({repr(report_dir_base)}, item._request.node.name)",
        "fixed_code": "report_file = os.path.join({report_dir_base!r}, item._request.node.name)",
        "patch": "@@ -1032,7 +1032,7 @@ def test_log_set_path(pytester: Pytester) -> None:\n             def pytest_runtest_setup(item):\n                 config = item.config\n                 logging_plugin = config.pluginmanager.get_plugin(\"logging-plugin\")\n-                report_file = os.path.join({repr(report_dir_base)}, item._request.node.name)\n+                report_file = os.path.join({report_dir_base!r}, item._request.node.name)\n                 logging_plugin.set_log_path(report_file)\n                 return (yield)\n         \"\"\""
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "func = list(classcol.collect())[0]",
        "fixed_code": "func = next(iter(classcol.collect()))",
        "patch": "@@ -1209,7 +1209,7 @@ def test_bar(self):\n         classcol = pytester.collect_by_name(modcol, \"TestClass\")\n         assert isinstance(classcol, Class)\n         path, lineno, msg = classcol.reportinfo()\n-        func = list(classcol.collect())[0]\n+        func = next(iter(classcol.collect()))\n         assert isinstance(func, Function)\n         path, lineno, msg = func.reportinfo()\n "
    },
    {
        "commit_id": "5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "commit_message": "Merge pull request #11912 from Pierre-Sassoulas/activate-ruff-checks\n\n[pre-commit] Activate ruff checks and fix existing issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5be64c31cbadde5fd8595922b7c2c02ac13f6d29",
        "buggy_code": "args = (\"-o\", \"junit_family=\" + family) + args",
        "fixed_code": "args = (\"-o\", \"junit_family=\" + family, *args)",
        "patch": "@@ -42,7 +42,7 @@ def __call__(\n         self, *args: Union[str, \"os.PathLike[str]\"], family: Optional[str] = \"xunit1\"\n     ) -> Tuple[RunResult, \"DomNode\"]:\n         if family:\n-            args = (\"-o\", \"junit_family=\" + family) + args\n+            args = (\"-o\", \"junit_family=\" + family, *args)\n         xml_path = self.pytester.path.joinpath(\"junit.xml\")\n         result = self.pytester.runpytest(\"--junitxml=%s\" % xml_path, *args)\n         if family == \"xunit2\":"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)",
        "fixed_code": "check_call([\"towncrier\", \"--yes\", \"--version\", version, *addopts])",
        "patch": "@@ -107,7 +107,7 @@ def pre_release(\n \n def changelog(version: str, write_out: bool = False) -> None:\n     addopts = [] if write_out else [\"--draft\"]\n-    check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)\n+    check_call([\"towncrier\", \"--yes\", \"--version\", version, *addopts])\n \n \n def main() -> None:"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "self.expl_stmts + [hook_call_pass],",
        "fixed_code": "[*self.expl_stmts, hook_call_pass],",
        "patch": "@@ -925,7 +925,7 @@ def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n             # If any hooks implement assert_pass hook\n             hook_impl_test = ast.If(\n                 self.helper(\"_check_if_assertion_pass_impl\"),\n-                self.expl_stmts + [hook_call_pass],\n+                [*self.expl_stmts, hook_call_pass],\n                 [],\n             )\n             statements_pass = [hook_impl_test]"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "groups = self._groups + [self._anonymous]",
        "fixed_code": "groups = [*self._groups, self._anonymous]",
        "patch": "@@ -122,7 +122,7 @@ def _getparser(self) -> \"MyOptionParser\":\n         from _pytest._argcomplete import filescompleter\n \n         optparser = MyOptionParser(self, self.extra_info, prog=self.prog)\n-        groups = self._groups + [self._anonymous]\n+        groups = [*self._groups, self._anonymous]\n         for group in groups:\n             if group.options:\n                 desc = group.description or group.name"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "args = (func,) + args",
        "fixed_code": "args = (func, *args)",
        "patch": "@@ -79,7 +79,7 @@ def deprecated_call(\n     \"\"\"\n     __tracebackhide__ = True\n     if func is not None:\n-        args = (func,) + args\n+        args = (func, *args)\n     return warns(\n         (DeprecationWarning, PendingDeprecationWarning, FutureWarning), *args, **kwargs\n     )"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "err.__notes__ = getattr(err, \"__notes__\", []) + [msg]  # type: ignore[attr-defined]",
        "fixed_code": "err.__notes__ = [*getattr(err, \"__notes__\", []), msg]  # type: ignore[attr-defined]",
        "patch": "@@ -1739,7 +1739,7 @@ def test():\n def add_note(err: BaseException, msg: str) -> None:\n     \"\"\"Adds a note to an exception inplace.\"\"\"\n     if sys.version_info < (3, 11):\n-        err.__notes__ = getattr(err, \"__notes__\", []) + [msg]  # type: ignore[attr-defined]\n+        err.__notes__ = [*getattr(err, \"__notes__\", []), msg]  # type: ignore[attr-defined]\n     else:\n         err.add_note(msg)\n "
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "args = [\"pyinstaller\", \"--noconfirm\"] + hidden + [\"runtests_script.py\"]",
        "fixed_code": "args = [\"pyinstaller\", \"--noconfirm\", *hidden, \"runtests_script.py\"]",
        "patch": "@@ -9,5 +9,5 @@\n     for x in pytest.freeze_includes():\n         hidden.extend([\"--hidden-import\", x])\n     hidden.extend([\"--hidden-import\", \"distutils\"])\n-    args = [\"pyinstaller\", \"--noconfirm\"] + hidden + [\"runtests_script.py\"]\n+    args = [\"pyinstaller\", \"--noconfirm\", *hidden, \"runtests_script.py\"]\n     subprocess.check_call(\" \".join(args), shell=True)"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "items = deduplicate_names(items + (\"g\", \"f\", \"g\", \"e\", \"b\"))",
        "fixed_code": "items = deduplicate_names((*items, \"g\", \"f\", \"g\", \"e\", \"b\"))",
        "patch": "@@ -4536,5 +4536,5 @@ def test_fixt(custom):\n def test_deduplicate_names() -> None:\n     items = deduplicate_names(\"abacd\")\n     assert items == (\"a\", \"b\", \"c\", \"d\")\n-    items = deduplicate_names(items + (\"g\", \"f\", \"g\", \"e\", \"b\"))\n+    items = deduplicate_names((*items, \"g\", \"f\", \"g\", \"e\", \"b\"))\n     assert items == (\"a\", \"b\", \"c\", \"d\", \"g\", \"f\", \"e\")"
    },
    {
        "commit_id": "233ab89f1302465e3a2708043efee9e029db5c78",
        "commit_message": "[ruff] Fix all consider [*cats, garfield] instead of cats + [garfield]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/233ab89f1302465e3a2708043efee9e029db5c78",
        "buggy_code": "args = (\"-o\", \"junit_family=\" + family) + args",
        "fixed_code": "args = (\"-o\", \"junit_family=\" + family, *args)",
        "patch": "@@ -42,7 +42,7 @@ def __call__(\n         self, *args: Union[str, \"os.PathLike[str]\"], family: Optional[str] = \"xunit1\"\n     ) -> Tuple[RunResult, \"DomNode\"]:\n         if family:\n-            args = (\"-o\", \"junit_family=\" + family) + args\n+            args = (\"-o\", \"junit_family=\" + family, *args)\n         xml_path = self.pytester.path.joinpath(\"junit.xml\")\n         result = self.pytester.runpytest(\"--junitxml=%s\" % xml_path, *args)\n         if family == \"xunit2\":"
    },
    {
        "commit_id": "8967c527ff0760bcaafcfc4db874a0b1e9f86316",
        "commit_message": "[ruff] Activate use next(iter(x)) instead of list(x)[0] and fix issue",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8967c527ff0760bcaafcfc4db874a0b1e9f86316",
        "buggy_code": "func = list(classcol.collect())[0]",
        "fixed_code": "func = next(iter(classcol.collect()))",
        "patch": "@@ -1209,7 +1209,7 @@ def test_bar(self):\n         classcol = pytester.collect_by_name(modcol, \"TestClass\")\n         assert isinstance(classcol, Class)\n         path, lineno, msg = classcol.reportinfo()\n-        func = list(classcol.collect())[0]\n+        func = next(iter(classcol.collect()))\n         assert isinstance(func, Function)\n         path, lineno, msg = func.reportinfo()\n "
    },
    {
        "commit_id": "180a16a34414dae308a26ff69315db3de6f54e68",
        "commit_message": "[ruff] Fix ambiguous characters found in string and comment",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/180a16a34414dae308a26ff69315db3de6f54e68",
        "buggy_code": "(\"\uff04\", 2),",
        "fixed_code": "(\"\uff04\", 2),  # noqa: RUF001",
        "patch": "@@ -15,7 +15,7 @@\n         (\"\\u1ABE\", 0),\n         (\"\\u0591\", 0),\n         (\"\ud83c\ude50\", 2),\n-        (\"\uff04\", 2),\n+        (\"\uff04\", 2),  # noqa: RUF001\n     ],\n )\n def test_wcwidth(c: str, expected: int) -> None:"
    },
    {
        "commit_id": "180a16a34414dae308a26ff69315db3de6f54e68",
        "commit_message": "[ruff] Fix ambiguous characters found in string and comment",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/180a16a34414dae308a26ff69315db3de6f54e68",
        "buggy_code": ")  # attr.s doesn\u2019t ignore a custom eq if auto_detect=True",
        "fixed_code": ")  # attr.s doesn't ignore a custom eq if auto_detect=True",
        "patch": "@@ -1149,7 +1149,7 @@ class SimpleDataObjectTwo:\n     def test_attrs_with_auto_detect_and_custom_eq(self) -> None:\n         @attr.s(\n             auto_detect=True\n-        )  # attr.s doesn\u2019t ignore a custom eq if auto_detect=True\n+        )  # attr.s doesn't ignore a custom eq if auto_detect=True\n         class SimpleDataObject:\n             field_a = attr.ib()\n "
    },
    {
        "commit_id": "180a16a34414dae308a26ff69315db3de6f54e68",
        "commit_message": "[ruff] Fix ambiguous characters found in string and comment",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/180a16a34414dae308a26ff69315db3de6f54e68",
        "buggy_code": "'''",
        "fixed_code": "'''  # noqa: RUF001",
        "patch": "@@ -729,7 +729,7 @@ def foo():\n                 >>> name = '\u0441' # not letter 'c' but instead Cyrillic 's'.\n                 'anything'\n                 \"\"\"\n-            '''\n+            '''  # noqa: RUF001\n         )\n         result = pytester.runpytest(\"--doctest-modules\")\n         result.stdout.fnmatch_lines([\"Got nothing\", \"* 1 failed in*\"])"
    },
    {
        "commit_id": "046f64751bf205df695f11d298bfd87d553e1314",
        "commit_message": "Fix a duplicate assignment in test_config.py\n\nTaken from https://github.com/pytest-dev/pytest/pull/11885 that was closed.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/046f64751bf205df695f11d298bfd87d553e1314",
        "buggy_code": "msg = msg = (",
        "fixed_code": "msg = (",
        "patch": "@@ -2109,7 +2109,7 @@ def test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs(\n         args = (\"--pyargs\", \"pkg\") if use_pyargs else ()\n         res = pytester.runpytest(*args)\n         assert res.ret == (0 if use_pyargs else 2)\n-        msg = msg = (\n+        msg = (\n             \"Defining 'pytest_plugins' in a non-top-level conftest is no longer supported\"\n         )\n         if use_pyargs:"
    },
    {
        "commit_id": "c2a4a8d518b433b0b688d084bad09040bf774f70",
        "commit_message": "Merge pull request #11769 from neutrinoceros/fix_warns_docstring\n\nFix a mistake in pytest.warns' docstring (expect_warning accepts tuples, not any sequence)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c2a4a8d518b433b0b688d084bad09040bf774f70",
        "buggy_code": "Specifically, the parameter ``expected_warning`` can be a warning class or sequence",
        "fixed_code": "Specifically, the parameter ``expected_warning`` can be a warning class or tuple",
        "patch": "@@ -113,7 +113,7 @@ def warns(  # noqa: F811\n ) -> Union[\"WarningsChecker\", Any]:\n     r\"\"\"Assert that code raises a particular class of warning.\n \n-    Specifically, the parameter ``expected_warning`` can be a warning class or sequence\n+    Specifically, the parameter ``expected_warning`` can be a warning class or tuple\n     of warning classes, and the code inside the ``with`` block must issue at least one\n     warning of that class or classes.\n "
    },
    {
        "commit_id": "ac96256272b6b806f1b036ed4476910b16dd7ff0",
        "commit_message": "Fix a mistake in pytest.warns' docstring (expect_warning accepts tuples, not any sequence)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ac96256272b6b806f1b036ed4476910b16dd7ff0",
        "buggy_code": "Specifically, the parameter ``expected_warning`` can be a warning class or sequence",
        "fixed_code": "Specifically, the parameter ``expected_warning`` can be a warning class or tuple",
        "patch": "@@ -113,7 +113,7 @@ def warns(  # noqa: F811\n ) -> Union[\"WarningsChecker\", Any]:\n     r\"\"\"Assert that code raises a particular class of warning.\n \n-    Specifically, the parameter ``expected_warning`` can be a warning class or sequence\n+    Specifically, the parameter ``expected_warning`` can be a warning class or tuple\n     of warning classes, and the code inside the ``with`` block must issue at least one\n     warning of that class or classes.\n "
    },
    {
        "commit_id": "effc2b05294b63e23162327a5704077dda6c60d4",
        "commit_message": "Clarified `markers` ini property. Fix #11738 (#11739)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/effc2b05294b63e23162327a5704077dda6c60d4",
        "buggy_code": "parser.addini(\"markers\", \"Markers for test functions\", \"linelist\")",
        "fixed_code": "parser.addini(\"markers\", \"Register new markers for test functions\", \"linelist\")",
        "patch": "@@ -105,7 +105,7 @@ def pytest_addoption(parser: Parser) -> None:\n         help=\"show markers (builtin, plugin and per-project ones).\",\n     )\n \n-    parser.addini(\"markers\", \"Markers for test functions\", \"linelist\")\n+    parser.addini(\"markers\", \"Register new markers for test functions\", \"linelist\")\n     parser.addini(EMPTY_PARAMETERSET_OPTION, \"Default marker for empty parametersets\")\n \n "
    },
    {
        "commit_id": "d220880924c7ba827ff8b4d68f991fb3e67a1cd0",
        "commit_message": "nodes: fix tracebacks from collection errors are not getting pruned (#11711)\n\nFix #11710.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d220880924c7ba827ff8b4d68f991fb3e67a1cd0",
        "buggy_code": "return excinfo.traceback.filter(excinfo)",
        "fixed_code": "return ntraceback.filter(excinfo)",
        "patch": "@@ -579,7 +579,7 @@ def _traceback_filter(self, excinfo: ExceptionInfo[BaseException]) -> Traceback:\n             ntraceback = traceback.cut(path=self.path)\n             if ntraceback == traceback:\n                 ntraceback = ntraceback.cut(excludepath=tracebackcutdir)\n-            return excinfo.traceback.filter(excinfo)\n+            return ntraceback.filter(excinfo)\n         return excinfo.traceback\n \n "
    },
    {
        "commit_id": "88ae27da085da7d59d34736234b57a280dcc9dfc",
        "commit_message": "Add syntactic highlights to the error explanations (#11661)\n\n* Put a 'reset' color in front of the highlighting\r\n\r\nWhen doing the highlighting, some lexers will not set the initial color\r\nexplicitly, which may lead to the red from the errors being propagated\r\nto the start of the expression\r\n\r\n* Add syntactic highlighting to the error explanations\r\n\r\nThis updates the various error reporting to highlight python code when\r\ndisplayed, to increase readability and make it easier to understand",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88ae27da085da7d59d34736234b57a280dcc9dfc",
        "buggy_code": "\"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",",
        "fixed_code": "\"{reset}{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",",
        "patch": "@@ -254,7 +254,7 @@ def test_combining(self) -> None:\n         pytest.param(\n             True,\n             True,\n-            \"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",\n+            \"{reset}{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",\n             id=\"with markup and code_highlight\",\n         ),\n         pytest.param("
    },
    {
        "commit_id": "385796ba494e7ae65d55892d4a358b371ac7a6b6",
        "commit_message": "Rework Session and Package collection\n\nFix #7777.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/385796ba494e7ae65d55892d4a358b371ac7a6b6",
        "buggy_code": "collect_ignore = [\"nonpython\"]",
        "fixed_code": "collect_ignore = [\"nonpython\", \"customdirectory\"]",
        "patch": "@@ -1 +1 @@\n-collect_ignore = [\"nonpython\"]\n+collect_ignore = [\"nonpython\", \"customdirectory\"]"
    },
    {
        "commit_id": "385796ba494e7ae65d55892d4a358b371ac7a6b6",
        "commit_message": "Rework Session and Package collection\n\nFix #7777.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/385796ba494e7ae65d55892d4a358b371ac7a6b6",
        "buggy_code": "_, call = calls",
        "fixed_code": "_, call, _ = calls",
        "patch": "@@ -1006,7 +1006,7 @@ def test_longreprtext_collect_skip(self, pytester: Pytester) -> None:\n         )\n         rec = pytester.inline_run()\n         calls = rec.getcalls(\"pytest_collectreport\")\n-        _, call = calls\n+        _, call, _ = calls\n         assert isinstance(call.report.longrepr, tuple)\n         assert \"Skipped\" in call.report.longreprtext\n "
    },
    {
        "commit_id": "81c06b3955b542280e801c2627266425f00ccbc9",
        "commit_message": "Merge pull request #11650 from bluetech/tr-test-isolation\n\ntesting: fix isolation issue in `tr` fixture",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/81c06b3955b542280e801c2627266425f00ccbc9",
        "buggy_code": "config = _pytest.config._prepareconfig()",
        "fixed_code": "config = _pytest.config._prepareconfig([])",
        "patch": "@@ -1802,7 +1802,7 @@ def test_failure():\n \n @pytest.fixture(scope=\"session\")\n def tr() -> TerminalReporter:\n-    config = _pytest.config._prepareconfig()\n+    config = _pytest.config._prepareconfig([])\n     return TerminalReporter(config)\n \n "
    },
    {
        "commit_id": "968510b6aa69e2616828f643f6f2384e27f1ceb1",
        "commit_message": "testing: fix isolation issue in `tr` fixture\n\nThe default for `_prepareconfig` is to use `sys.argv`, which in this\ncase are the flags passed to (top-level) `pytest`. This is not the\nintention, the tests themselves should not be affected by it.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/968510b6aa69e2616828f643f6f2384e27f1ceb1",
        "buggy_code": "config = _pytest.config._prepareconfig()",
        "fixed_code": "config = _pytest.config._prepareconfig([])",
        "patch": "@@ -1802,7 +1802,7 @@ def test_failure():\n \n @pytest.fixture(scope=\"session\")\n def tr() -> TerminalReporter:\n-    config = _pytest.config._prepareconfig()\n+    config = _pytest.config._prepareconfig([])\n     return TerminalReporter(config)\n \n "
    },
    {
        "commit_id": "738ae2da9d9289253e52960c9eef523633725bad",
        "commit_message": "Merge pull request #11564 from nicoddemus/empty-string-parametrize-11563\n\nFix crash using empty string for parametrized value more than once",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/738ae2da9d9289253e52960c9eef523633725bad",
        "buggy_code": "if id[-1].isdigit():",
        "fixed_code": "if id and id[-1].isdigit():",
        "patch": "@@ -1003,7 +1003,7 @@ def make_unique_parameterset_ids(self) -> List[str]:\n             for index, id in enumerate(resolved_ids):\n                 if id_counts[id] > 1:\n                     suffix = \"\"\n-                    if id[-1].isdigit():\n+                    if id and id[-1].isdigit():\n                         suffix = \"_\"\n                     new_id = f\"{id}{suffix}{id_suffixes[id]}\"\n                     while new_id in set(resolved_ids):"
    },
    {
        "commit_id": "7156a97f9a1471f35c48988f2153047db4fd5e95",
        "commit_message": "Fix crash using empty string for parametrized value more than once\n\nFixes #11563.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7156a97f9a1471f35c48988f2153047db4fd5e95",
        "buggy_code": "if id[-1].isdigit():",
        "fixed_code": "if id and id[-1].isdigit():",
        "patch": "@@ -1003,7 +1003,7 @@ def make_unique_parameterset_ids(self) -> List[str]:\n             for index, id in enumerate(resolved_ids):\n                 if id_counts[id] > 1:\n                     suffix = \"\"\n-                    if id[-1].isdigit():\n+                    if id and id[-1].isdigit():\n                         suffix = \"_\"\n                     new_id = f\"{id}{suffix}{id_suffixes[id]}\"\n                     while new_id in set(resolved_ids):"
    },
    {
        "commit_id": "3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "commit_message": "Use hyphenated cmdline options in docs (#11490)\n\nFix #11091",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "buggy_code": "\"\"\"No-op function in case --junitxml was not passed in the command-line.\"\"\"",
        "fixed_code": "\"\"\"No-op function in case --junit-xml was not passed in the command-line.\"\"\"",
        "patch": "@@ -369,7 +369,7 @@ def test_foo(record_testsuite_property):\n     __tracebackhide__ = True\n \n     def record_func(name: str, value: object) -> None:\n-        \"\"\"No-op function in case --junitxml was not passed in the command-line.\"\"\"\n+        \"\"\"No-op function in case --junit-xml was not passed in the command-line.\"\"\"\n         __tracebackhide__ = True\n         _check_record_param_type(\"name\", name)\n "
    },
    {
        "commit_id": "3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "commit_message": "Use hyphenated cmdline options in docs (#11490)\n\nFix #11091",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "buggy_code": "\"\"\"Run ``pytest.main(['--collectonly'])`` in-process.",
        "fixed_code": "\"\"\"Run ``pytest.main(['--collect-only'])`` in-process.",
        "patch": "@@ -1063,7 +1063,7 @@ def inline_runsource(self, source: str, *cmdlineargs) -> HookRecorder:\n         return self.inline_run(*values)\n \n     def inline_genitems(self, *args) -> Tuple[List[Item], HookRecorder]:\n-        \"\"\"Run ``pytest.main(['--collectonly'])`` in-process.\n+        \"\"\"Run ``pytest.main(['--collect-only'])`` in-process.\n \n         Runs the :py:func:`pytest.main` function to run all of pytest inside\n         the test process itself like :py:meth:`inline_run`, but returns a"
    },
    {
        "commit_id": "3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "commit_message": "Use hyphenated cmdline options in docs (#11490)\n\nFix #11091",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab70cd561cb0b7e5188b22ecf54a0e2d7a67bcb",
        "buggy_code": "result = pytester.runpytest(\"--collectonly\")",
        "fixed_code": "result = pytester.runpytest(\"--collect-only\")",
        "patch": "@@ -1518,7 +1518,7 @@ def test_foo(x):\n                 pass\n         \"\"\"\n         )\n-        result = pytester.runpytest(\"--collectonly\")\n+        result = pytester.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines(\n             [\n                 \"collected 0 items / 1 error\","
    },
    {
        "commit_id": "941b203c940d9c3ed3e74d0352191456b1efc1e7",
        "commit_message": "Merge pull request #11360 from seanjedi/issue_11356-fixing-precommit-issue-with-flake8\n\nfix: fixing an issue with pre-commit with mypy and flake8",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/941b203c940d9c3ed3e74d0352191456b1efc1e7",
        "buggy_code": "warnings.simplefilter(\"ignore\", EncodingWarning)",
        "fixed_code": "warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821",
        "patch": "@@ -15,7 +15,7 @@\n def ignore_encoding_warning():\n     with warnings.catch_warnings():\n         with contextlib.suppress(NameError):  # new in 3.10\n-            warnings.simplefilter(\"ignore\", EncodingWarning)\n+            warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821\n         yield\n \n "
    },
    {
        "commit_id": "19d6b12b2a98f273a082f83cc8d469ab5db4e155",
        "commit_message": "fix: fixing an issue with pre-commit with mypy and flake8",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/19d6b12b2a98f273a082f83cc8d469ab5db4e155",
        "buggy_code": "warnings.simplefilter(\"ignore\", EncodingWarning)",
        "fixed_code": "warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821",
        "patch": "@@ -15,7 +15,7 @@\n def ignore_encoding_warning():\n     with warnings.catch_warnings():\n         with contextlib.suppress(NameError):  # new in 3.10\n-            warnings.simplefilter(\"ignore\", EncodingWarning)\n+            warnings.simplefilter(\"ignore\", EncodingWarning)  # type: ignore [name-defined]  # noqa: F821\n         yield\n \n "
    },
    {
        "commit_id": "43d1398fc7f6af7f140afcadf9cccf569dd66ac2",
        "commit_message": "Merge pull request #11334 from WarrenTheRabbit/fix-docstring-spelling-in-pytester-1\n\ndoc: fix docstring spelling in pytester",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/43d1398fc7f6af7f140afcadf9cccf569dd66ac2",
        "buggy_code": "\"\"\"Write a contest.py file.",
        "fixed_code": "\"\"\"Write a conftest.py file.",
        "patch": "@@ -829,7 +829,7 @@ def makefile(self, ext: str, *args: str, **kwargs: str) -> Path:\n         return self._makefile(ext, args, kwargs)\n \n     def makeconftest(self, source: str) -> Path:\n-        \"\"\"Write a contest.py file.\n+        \"\"\"Write a conftest.py file.\n \n         :param source: The contents.\n         :returns: The conftest.py file."
    },
    {
        "commit_id": "03832fa31e28e29eb22eb9cc45d45554f833a73b",
        "commit_message": "Merge pull request #11326 from DetachHead/DetachHead-patch-1\n\nuse `if not TYPE_CHECKING` on `pytest.__getattr__` to prevent type checkers from using it",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/03832fa31e28e29eb22eb9cc45d45554f833a73b",
        "buggy_code": "pytest.Instance",
        "fixed_code": "pytest.Instance  # type:ignore[attr-defined]",
        "patch": "@@ -272,7 +272,7 @@ def test_importing_instance_is_deprecated(pytester: Pytester) -> None:\n         pytest.PytestDeprecationWarning,\n         match=re.escape(\"The pytest.Instance collector type is deprecated\"),\n     ):\n-        pytest.Instance\n+        pytest.Instance  # type:ignore[attr-defined]\n \n     with pytest.warns(\n         pytest.PytestDeprecationWarning,"
    },
    {
        "commit_id": "cada6c105a7f9e22d5519c0e9355cc44df2a58b8",
        "commit_message": "ignore mypy error on deprecated `Instance` usage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cada6c105a7f9e22d5519c0e9355cc44df2a58b8",
        "buggy_code": "pytest.Instance",
        "fixed_code": "pytest.Instance  # type:ignore[attr-defined]",
        "patch": "@@ -272,7 +272,7 @@ def test_importing_instance_is_deprecated(pytester: Pytester) -> None:\n         pytest.PytestDeprecationWarning,\n         match=re.escape(\"The pytest.Instance collector type is deprecated\"),\n     ):\n-        pytest.Instance\n+        pytest.Instance  # type:ignore[attr-defined]\n \n     with pytest.warns(\n         pytest.PytestDeprecationWarning,"
    },
    {
        "commit_id": "3f446b68fdbd8f1e0e0d9af3960e1da90f58f1b3",
        "commit_message": "doc: fix docstring spelling in pytester",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3f446b68fdbd8f1e0e0d9af3960e1da90f58f1b3",
        "buggy_code": "\"\"\"Write a contest.py file.",
        "fixed_code": "\"\"\"Write a conftest.py file.",
        "patch": "@@ -829,7 +829,7 @@ def makefile(self, ext: str, *args: str, **kwargs: str) -> Path:\n         return self._makefile(ext, args, kwargs)\n \n     def makeconftest(self, source: str) -> Path:\n-        \"\"\"Write a contest.py file.\n+        \"\"\"Write a conftest.py file.\n \n         :param source: The contents.\n         :returns: The conftest.py file."
    },
    {
        "commit_id": "61133ba83d0f24c40aa6b0c1473919c7aff3b16f",
        "commit_message": "un-iterable fix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/61133ba83d0f24c40aa6b0c1473919c7aff3b16f",
        "buggy_code": "except TypeError:",
        "fixed_code": "except Exception:",
        "patch": "@@ -132,7 +132,7 @@ def isiterable(obj: Any) -> bool:\n     try:\n         iter(obj)\n         return not istext(obj)\n-    except TypeError:\n+    except Exception:\n         return False\n \n "
    },
    {
        "commit_id": "9e164fc4fe46bbd43ac87fc30d0d6935f7e4d28b",
        "commit_message": "fixtures: make FixtureRequest abstract, add TopRequest subclass\n\nFix #11218.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9e164fc4fe46bbd43ac87fc30d0d6935f7e4d28b",
        "buggy_code": "self._request = fixtures.FixtureRequest(self, _ispytest=True)",
        "fixed_code": "self._request = fixtures.TopRequest(self, _ispytest=True)",
        "patch": "@@ -1812,7 +1812,7 @@ def from_parent(cls, parent, **kw):  # todo: determine sound type limitations\n \n     def _initrequest(self) -> None:\n         self.funcargs: Dict[str, object] = {}\n-        self._request = fixtures.FixtureRequest(self, _ispytest=True)\n+        self._request = fixtures.TopRequest(self, _ispytest=True)\n \n     @property\n     def function(self):"
    },
    {
        "commit_id": "c0cf822ca1d5d6ac74f46ddccbe377c254c6084a",
        "commit_message": "improve error msg and test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c0cf822ca1d5d6ac74f46ddccbe377c254c6084a",
        "buggy_code": "assert \"Unexpected exception\" in msg",
        "fixed_code": "assert \"__iter__\" in msg and \"__repr__\" not in msg",
        "patch": "@@ -698,7 +698,7 @@ def __eq__(self, o: object) -> bool:\n \n         msg = getmsg(f)\n         assert msg is not None\n-        assert \"Unexpected exception\" in msg\n+        assert \"__iter__\" in msg and \"__repr__\" not in msg\n \n     def test_formatchar(self) -> None:\n         def f() -> None:"
    },
    {
        "commit_id": "4e42421ebf2938bfac01e271afb195c2323566fd",
        "commit_message": "config: fix an incorrect type\n\nWas a mistake in d97d44a97af2303eb3f3aea1f16fd834f5415509.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4e42421ebf2938bfac01e271afb195c2323566fd",
        "buggy_code": "pyargs: List[str],",
        "fixed_code": "pyargs: bool,",
        "patch": "@@ -1243,7 +1243,7 @@ def _decide_args(\n         self,\n         *,\n         args: List[str],\n-        pyargs: List[str],\n+        pyargs: bool,\n         testpaths: List[str],\n         invocation_dir: Path,\n         rootpath: Path,"
    },
    {
        "commit_id": "b41acaea1203abd25b83699e12124fed06fa9f9f",
        "commit_message": "Switch to new-style pluggy hook wrappers\n\nFix #11122.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b41acaea1203abd25b83699e12124fed06fa9f9f",
        "buggy_code": "\"wrapper\" if hookimpl.hookwrapper else \"nonwrapper\",",
        "fixed_code": "\"wrapper\" if (hookimpl.wrapper or hookimpl.hookwrapper) else \"nonwrapper\",",
        "patch": "@@ -1317,7 +1317,7 @@ def pytest_load_initial_conftests(self):\n     hookimpls = [\n         (\n             hookimpl.function.__module__,\n-            \"wrapper\" if hookimpl.hookwrapper else \"nonwrapper\",\n+            \"wrapper\" if (hookimpl.wrapper or hookimpl.hookwrapper) else \"nonwrapper\",\n         )\n         for hookimpl in hc.get_hookimpls()\n     ]"
    },
    {
        "commit_id": "b41acaea1203abd25b83699e12124fed06fa9f9f",
        "commit_message": "Switch to new-style pluggy hook wrappers\n\nFix #11122.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b41acaea1203abd25b83699e12124fed06fa9f9f",
        "buggy_code": "@pytest.hookimpl(hookwrapper=True)",
        "fixed_code": "@pytest.hookimpl(wrapper=True)",
        "patch": "@@ -952,7 +952,7 @@ def test_issue333_result_clearing(pytester: Pytester) -> None:\n     pytester.makeconftest(\n         \"\"\"\n         import pytest\n-        @pytest.hookimpl(hookwrapper=True)\n+        @pytest.hookimpl(wrapper=True)\n         def pytest_runtest_call(item):\n             yield\n             assert 0"
    },
    {
        "commit_id": "b73ec8e5d117a244b696ff4f9d2dfb74df078b2f",
        "commit_message": "doc: fix EncodingWarnings in examples (#11158)\n\n\r\nOtherwise the warnings show in the regen output.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b73ec8e5d117a244b696ff4f9d2dfb74df078b2f",
        "buggy_code": "raw = yaml.safe_load(self.path.open())",
        "fixed_code": "raw = yaml.safe_load(self.path.open(encoding=\"utf-8\"))",
        "patch": "@@ -12,7 +12,7 @@ def collect(self):\n         # We need a yaml parser, e.g. PyYAML.\n         import yaml\n \n-        raw = yaml.safe_load(self.path.open())\n+        raw = yaml.safe_load(self.path.open(encoding=\"utf-8\"))\n         for name, spec in sorted(raw.items()):\n             yield YamlItem.from_parent(self, name=name, spec=spec)\n "
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -2,12 +2,12 @@\n import os\n import shutil\n import sys\n+from typing import final\n from typing import Optional\n from typing import Sequence\n from typing import TextIO\n \n from .wcwidth import wcswidth\n-from _pytest.compat import final\n \n \n # This code was initially copied from py 1.8.1, file _io/terminalwriter.py."
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -6,6 +6,7 @@\n import os\n from pathlib import Path\n from typing import Dict\n+from typing import final\n from typing import Generator\n from typing import Iterable\n from typing import List\n@@ -18,7 +19,6 @@\n from .reports import CollectReport\n from _pytest import nodes\n from _pytest._io import TerminalWriter\n-from _pytest.compat import final\n from _pytest.config import Config\n from _pytest.config import ExitCode\n from _pytest.config import hookimpl"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -7,6 +7,7 @@\n from typing import Callable\n from typing import cast\n from typing import Dict\n+from typing import final\n from typing import List\n from typing import Mapping\n from typing import NoReturn\n@@ -17,7 +18,6 @@\n from typing import Union\n \n import _pytest._io\n-from _pytest.compat import final\n from _pytest.config.exceptions import UsageError\n from _pytest.deprecated import ARGUMENT_PERCENT_DEFAULT\n from _pytest.deprecated import ARGUMENT_TYPE_STR"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -1,4 +1,4 @@\n-from _pytest.compat import final\n+from typing import final\n \n \n @final"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -13,6 +13,7 @@\n from pathlib import Path\n from typing import AbstractSet\n from typing import Dict\n+from typing import final\n from typing import Generator\n from typing import List\n from typing import Mapping\n@@ -25,7 +26,6 @@\n from _pytest import nodes\n from _pytest._io import TerminalWriter\n from _pytest.capture import CaptureManager\n-from _pytest.compat import final\n from _pytest.config import _strtobool\n from _pytest.config import Config\n from _pytest.config import create_terminal_writer"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -5,6 +5,7 @@\n import warnings\n from contextlib import contextmanager\n from typing import Any\n+from typing import final\n from typing import Generator\n from typing import List\n from typing import Mapping\n@@ -15,7 +16,6 @@\n from typing import TypeVar\n from typing import Union\n \n-from _pytest.compat import final\n from _pytest.fixtures import fixture\n from _pytest.warning_types import PytestWarning\n "
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import cached_property",
        "fixed_code": "from functools import cached_property",
        "patch": "@@ -1,5 +1,6 @@\n import os\n import warnings\n+from functools import cached_property\n from inspect import signature\n from pathlib import Path\n from typing import Any\n@@ -23,7 +24,6 @@\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import TerminalRepr\n from _pytest._code.code import Traceback\n-from _pytest.compat import cached_property\n from _pytest.compat import LEGACY_PATH\n from _pytest.config import Config\n from _pytest.config import ConftestImportFailure"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -15,6 +15,7 @@\n from typing import Any\n from typing import Callable\n from typing import Dict\n+from typing import final\n from typing import Generator\n from typing import Iterable\n from typing import Iterator\n@@ -40,7 +41,6 @@\n from _pytest._io.saferepr import saferepr\n from _pytest.compat import ascii_escaped\n from _pytest.compat import assert_never\n-from _pytest.compat import final\n from _pytest.compat import get_default_arg_names\n from _pytest.compat import get_real_func\n from _pytest.compat import getimfunc"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -5,6 +5,7 @@\n from typing import Any\n from typing import cast\n from typing import Dict\n+from typing import final\n from typing import Iterable\n from typing import Iterator\n from typing import List\n@@ -29,7 +30,6 @@\n from _pytest._code.code import ReprTraceback\n from _pytest._code.code import TerminalRepr\n from _pytest._io import TerminalWriter\n-from _pytest.compat import final\n from _pytest.config import Config\n from _pytest.nodes import Collector\n from _pytest.nodes import Item"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -6,6 +6,7 @@\n from typing import Callable\n from typing import cast\n from typing import Dict\n+from typing import final\n from typing import Generic\n from typing import List\n from typing import Optional\n@@ -23,7 +24,6 @@\n from _pytest._code.code import ExceptionChainRepr\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import TerminalRepr\n-from _pytest.compat import final\n from _pytest.config.argparsing import Parser\n from _pytest.deprecated import check_ispytest\n from _pytest.nodes import Collector"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import final",
        "fixed_code": "from typing import final",
        "patch": "@@ -18,6 +18,7 @@\n from typing import cast\n from typing import ClassVar\n from typing import Dict\n+from typing import final\n from typing import Generator\n from typing import List\n from typing import Mapping\n@@ -40,7 +41,6 @@\n from _pytest._io import TerminalWriter\n from _pytest._io.wcwidth import wcswidth\n from _pytest.assertion.util import running_on_ci\n-from _pytest.compat import final\n from _pytest.config import _PluggyPlugin\n from _pytest.config import Config\n from _pytest.config import ExitCode"
    },
    {
        "commit_id": "cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "commit_message": "Merge branch 'main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb732f7f490aa0fc5b8a98d9bd0dbd411c00325a",
        "buggy_code": "from _pytest.compat import cached_property",
        "fixed_code": "from functools import cached_property",
        "patch": "@@ -1,5 +1,6 @@\n import enum\n import sys\n+from functools import cached_property\n from functools import partial\n from functools import wraps\n from typing import TYPE_CHECKING\n@@ -8,7 +9,6 @@\n import pytest\n from _pytest.compat import _PytestWrapper\n from _pytest.compat import assert_never\n-from _pytest.compat import cached_property\n from _pytest.compat import get_real_func\n from _pytest.compat import is_generator\n from _pytest.compat import safe_getattr"
    },
    {
        "commit_id": "2870157234374285630aef2fbf0ac8074cfecb2b",
        "commit_message": "Merge pull request #11133 from bluetech/removed-in-8-error\n\nChange PytestRemovedIn8Warning to error by default, add PytestRemovedIn9Warning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2870157234374285630aef2fbf0ac8074cfecb2b",
        "buggy_code": "result = pytester.runpytest()",
        "fixed_code": "result = pytester.runpytest(\"-Wignore::pytest.PytestRemovedIn8Warning\")",
        "patch": "@@ -1184,7 +1184,7 @@ def pytest_cmdline_preparse(args):\n             args.append(\"-h\")\n     \"\"\"\n     )\n-    result = pytester.runpytest()\n+    result = pytester.runpytest(\"-Wignore::pytest.PytestRemovedIn8Warning\")\n     result.stdout.fnmatch_lines([\"*pytest*\", \"*-h*\"])\n \n "
    },
    {
        "commit_id": "a4a189ad99b2a7c3536de30009bb8111a0cf176e",
        "commit_message": "Change PytestRemovedIn8Warning to error by default\n\nPer our backward compatibility policy.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a4a189ad99b2a7c3536de30009bb8111a0cf176e",
        "buggy_code": "result = pytester.runpytest()",
        "fixed_code": "result = pytester.runpytest(\"-Wignore::pytest.PytestRemovedIn8Warning\")",
        "patch": "@@ -1184,7 +1184,7 @@ def pytest_cmdline_preparse(args):\n             args.append(\"-h\")\n     \"\"\"\n     )\n-    result = pytester.runpytest()\n+    result = pytester.runpytest(\"-Wignore::pytest.PytestRemovedIn8Warning\")\n     result.stdout.fnmatch_lines([\"*pytest*\", \"*-h*\"])\n \n "
    },
    {
        "commit_id": "fda8024622df64802f9670bfe2ba658b40f6674d",
        "commit_message": "cacheprovider: make file-skipping work with any File, not just Modules\n\nNo reason for `--lf`'s whole-file-skipping feature to not for for\nnon-Python files.\n\nFix #11068.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fda8024622df64802f9670bfe2ba658b40f6674d",
        "buggy_code": "def dummy_yaml_custom_test(pytester: Pytester):",
        "fixed_code": "def dummy_yaml_custom_test(pytester: Pytester) -> None:",
        "patch": "@@ -105,7 +105,7 @@ def get_write_msg(self, idx):\n \n \n @pytest.fixture\n-def dummy_yaml_custom_test(pytester: Pytester):\n+def dummy_yaml_custom_test(pytester: Pytester) -> None:\n     \"\"\"Writes a conftest file that collects and executes a dummy yaml test.\n \n     Taken from the docs, but stripped down to the bare minimum, useful for"
    },
    {
        "commit_id": "3a6bdcd76b57e45ca03e6a20db787564843902f1",
        "commit_message": "Merge pull request #11055 from bluetech/lf-skipped-package\n\ncacheprovider: fix file-skipping feature for files in packages",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3a6bdcd76b57e45ca03e6a20db787564843902f1",
        "buggy_code": "if isinstance(collector, Session):",
        "fixed_code": "if isinstance(collector, (Session, Package)):",
        "patch": "@@ -219,7 +219,7 @@ def __init__(self, lfplugin: \"LFPlugin\") -> None:\n \n     @hookimpl(hookwrapper=True)\n     def pytest_make_collect_report(self, collector: nodes.Collector):\n-        if isinstance(collector, Session):\n+        if isinstance(collector, (Session, Package)):\n             out = yield\n             res: CollectReport = out.get_result()\n "
    },
    {
        "commit_id": "fc538c5766a1c67bfcd704288279ceac5e20070a",
        "commit_message": "cacheprovider: fix file-skipping feature for files in packages\n\n`--lf` has a feature where if a certain `Module` (python file) does not\ncontain any failed tests, it is skipped entirely at the collector level\ninstead of being collected and each item skipped individually. When this\nhappens the collection summary looks like this:\n\n    run-last-failure: rerun previous 1 failure (skipped 1 file)\n\nHowever, this feature didn't work for `Module`s inside of `Package`s,\nonly for those directly beneath the `Session`.\n\nFix #11054.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fc538c5766a1c67bfcd704288279ceac5e20070a",
        "buggy_code": "if isinstance(collector, Session):",
        "fixed_code": "if isinstance(collector, (Session, Package)):",
        "patch": "@@ -219,7 +219,7 @@ def __init__(self, lfplugin: \"LFPlugin\") -> None:\n \n     @hookimpl(hookwrapper=True)\n     def pytest_make_collect_report(self, collector: nodes.Collector):\n-        if isinstance(collector, Session):\n+        if isinstance(collector, (Session, Package)):\n             out = yield\n             res: CollectReport = out.get_result()\n "
    },
    {
        "commit_id": "63f258f432198e16aa85a265d59a0513d2a02749",
        "commit_message": "python: fix syntax typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63f258f432198e16aa85a265d59a0513d2a02749",
        "buggy_code": "path=Optional[Path],",
        "fixed_code": "path: Optional[Path] = None,",
        "patch": "@@ -667,7 +667,7 @@ def __init__(\n         config=None,\n         session=None,\n         nodeid=None,\n-        path=Optional[Path],\n+        path: Optional[Path] = None,\n     ) -> None:\n         # NOTE: Could be just the following, but kept as-is for compat.\n         # nodes.FSCollector.__init__(self, fspath, parent=parent)"
    },
    {
        "commit_id": "ba32a3bd87e92d87d777a62414972374cbbfddf2",
        "commit_message": "Handle disabled logging in 'caplog.set_level' and 'caplog.at_level'  (#8758)\n\nForces requested `caplog` logging levels to be enabled if they were disabled via `logging.disable()`\r\n\r\n`[attr-defined]` mypy error ignored in `logging.py` because there were existing errors with the imports\r\nand `loggin.Logger.manager` is an attr set at runtime. Since it's in the standard lib I can't really fix that.\r\n\r\nIgnored an attr-defined error in `src/_pytest/config/__init__.py` because the re-export is necessary.\r\n\r\nFixes #8711",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ba32a3bd87e92d87d777a62414972374cbbfddf2",
        "buggy_code": "from _pytest.compat import importlib_metadata",
        "fixed_code": "from _pytest.compat import importlib_metadata  # type: ignore[attr-defined]",
        "patch": "@@ -49,7 +49,7 @@\n from _pytest._code import filter_traceback\n from _pytest._io import TerminalWriter\n from _pytest.compat import final\n-from _pytest.compat import importlib_metadata\n+from _pytest.compat import importlib_metadata  # type: ignore[attr-defined]\n from _pytest.outcomes import fail\n from _pytest.outcomes import Skipped\n from _pytest.pathlib import absolutepath"
    },
    {
        "commit_id": "faeb16146b811488ebbcbd17ef6f9102314065b2",
        "commit_message": "Consider testpaths for initial conftests\n\nThe 'testpaths' option is meant to be identical to execute\npytest passing the 'testpaths' directories explicitly.\n\nFix #10987",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/faeb16146b811488ebbcbd17ef6f9102314065b2",
        "buggy_code": "conftest._set_initial_conftests(namespace, rootpath=Path(args[0]))",
        "fixed_code": "conftest._set_initial_conftests(namespace, rootpath=Path(args[0]), testpaths_ini=[])",
        "patch": "@@ -35,7 +35,7 @@ def __init__(self) -> None:\n             self.importmode = \"prepend\"\n \n     namespace = cast(argparse.Namespace, Namespace())\n-    conftest._set_initial_conftests(namespace, rootpath=Path(args[0]))\n+    conftest._set_initial_conftests(namespace, rootpath=Path(args[0]), testpaths_ini=[])\n \n \n @pytest.mark.usefixtures(\"_sys_snapshot\")"
    },
    {
        "commit_id": "5b75b0d03f6968e5b389003798589cfa651ac9ff",
        "commit_message": "Merge pull request #10978 from bzoracler/fix-pytest-code-import\n\nfix reference to non-existent module",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5b75b0d03f6968e5b389003798589cfa651ac9ff",
        "buggy_code": "from _pytest.code import ExceptionInfo",
        "fixed_code": "from _pytest._code.code import ExceptionInfo",
        "patch": "@@ -21,7 +21,7 @@\n     from typing_extensions import Literal\n \n     from _pytest._code.code import ExceptionRepr\n-    from _pytest.code import ExceptionInfo\n+    from _pytest._code.code import ExceptionInfo\n     from _pytest.config import Config\n     from _pytest.config import ExitCode\n     from _pytest.config import PytestPluginManager"
    },
    {
        "commit_id": "b1460f32613bc32f4a4e0accac0f6324bc878f8e",
        "commit_message": "fix reference to non-existent module",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b1460f32613bc32f4a4e0accac0f6324bc878f8e",
        "buggy_code": "from _pytest.code import ExceptionInfo",
        "fixed_code": "from _pytest._code.code import ExceptionInfo",
        "patch": "@@ -21,7 +21,7 @@\n     from typing_extensions import Literal\n \n     from _pytest._code.code import ExceptionRepr\n-    from _pytest.code import ExceptionInfo\n+    from _pytest._code.code import ExceptionInfo\n     from _pytest.config import Config\n     from _pytest.config import ExitCode\n     from _pytest.config import PytestPluginManager"
    },
    {
        "commit_id": "762bb61562d1300eedeb80be2ec2fb8150b3cc3f",
        "commit_message": "Fix couple of EncodingWarnings (#10954)\n\n* faulthandler: fix an EncodingWarning\r\n\r\n* _py/path: tiny change to `ensure` to silence EncodingWarning\r\n\r\nWe're not supposed to diverge here, but make this change to fix an\r\nunavoidable EncodingWarning that is otherwise raised in pytest's test\r\nsuite. The behavior should be exactly the same besides the warning,\r\nhopefully that won't cause confusion.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/762bb61562d1300eedeb80be2ec2fb8150b3cc3f",
        "buggy_code": "p.open(\"w\").close()",
        "fixed_code": "p.open(\"wb\").close()",
        "patch": "@@ -953,7 +953,7 @@ def ensure(self, *args, **kwargs):\n         else:\n             p.dirpath()._ensuredirs()\n             if not p.check(file=1):\n-                p.open(\"w\").close()\n+                p.open(\"wb\").close()\n             return p\n \n     @overload"
    },
    {
        "commit_id": "158f41fdf8d11afcf01e4e15a9d96d95a3041d77",
        "commit_message": "Fix documentation typo (#10942)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/158f41fdf8d11afcf01e4e15a9d96d95a3041d77",
        "buggy_code": "help=\"Disable a logger by name. Can be passed multipe times.\",",
        "fixed_code": "help=\"Disable a logger by name. Can be passed multiple times.\",",
        "patch": "@@ -302,7 +302,7 @@ def add_option_ini(option, dest, default=None, type=None, **kwargs):\n         action=\"append\",\n         default=[],\n         dest=\"logger_disable\",\n-        help=\"Disable a logger by name. Can be passed multipe times.\",\n+        help=\"Disable a logger by name. Can be passed multiple times.\",\n     )\n \n "
    },
    {
        "commit_id": "c237297b3d673b8d141a388991c3a4b182e12332",
        "commit_message": "Fix OSError in tmpdir on emscripten due to missing getuid()\n\nFixes #10765",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c237297b3d673b8d141a388991c3a4b182e12332",
        "buggy_code": "if sys.platform != \"win32\":",
        "fixed_code": "if sys.platform != \"win32\" and sys.platform != \"emscripten\":",
        "patch": "@@ -176,7 +176,7 @@ def getbasetemp(self) -> Path:\n             # Also, to keep things private, fixup any world-readable temp\n             # rootdir's permissions. Historically 0o755 was used, so we can't\n             # just error out on this, at least for a while.\n-            if sys.platform != \"win32\":\n+            if sys.platform != \"win32\" and sys.platform != \"emscripten\":\n                 uid = os.getuid()\n                 rootdir_stat = rootdir.stat()\n                 # getuid shouldn't fail, but cpython defines such a case."
    },
    {
        "commit_id": "6bf7f5555552aa92d22fb00a90fb72fa273df0f1",
        "commit_message": "Merge pull request #10632 from danigm/fix-tests\n\nFix tests pygments 2.14.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6bf7f5555552aa92d22fb00a90fb72fa273df0f1",
        "buggy_code": "\"{kw}assert{hl-reset} {number}0{hl-reset}\\n\",",
        "fixed_code": "\"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",",
        "patch": "@@ -254,7 +254,7 @@ def test_combining(self) -> None:\n         pytest.param(\n             True,\n             True,\n-            \"{kw}assert{hl-reset} {number}0{hl-reset}\\n\",\n+            \"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",\n             id=\"with markup and code_highlight\",\n         ),\n         pytest.param("
    },
    {
        "commit_id": "61f70a5a759bd22457c89f3564c0cfbb91b0cd8d",
        "commit_message": "Fix tests pygments 2.14.0\n\nFix https://github.com/pytest-dev/pytest/issues/10630",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/61f70a5a759bd22457c89f3564c0cfbb91b0cd8d",
        "buggy_code": "\"{kw}assert{hl-reset} {number}0{hl-reset}\\n\",",
        "fixed_code": "\"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",",
        "patch": "@@ -254,7 +254,7 @@ def test_combining(self) -> None:\n         pytest.param(\n             True,\n             True,\n-            \"{kw}assert{hl-reset} {number}0{hl-reset}\\n\",\n+            \"{kw}assert{hl-reset} {number}0{hl-reset}{endline}\\n\",\n             id=\"with markup and code_highlight\",\n         ),\n         pytest.param("
    },
    {
        "commit_id": "d5466b39173a62fbcbe0dd2554ede7781a6ae759",
        "commit_message": "Fix typing errors after mypy update",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d5466b39173a62fbcbe0dd2554ede7781a6ae759",
        "buggy_code": "assert os.path.abspath",
        "fixed_code": "assert os.path.abspath  # type:ignore[truthy-function]",
        "patch": "@@ -92,7 +92,7 @@ def test_delattr(self, monkeypatch: MonkeyPatch) -> None:\n             mp.delattr(\"os.path.abspath\")\n             assert not hasattr(os.path, \"abspath\")\n             mp.undo()\n-            assert os.path.abspath\n+            assert os.path.abspath  # type:ignore[truthy-function]\n \n \n def test_delattr() -> None:"
    },
    {
        "commit_id": "13d6114c0a74cd06b332a775f016f349faaaba96",
        "commit_message": "Merge pull request #10484 from joukewitteveen/patch-2\n\nscripts/update-plugin-list: Improve requirement detection",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/13d6114c0a74cd06b332a775f016f349faaaba96",
        "buggy_code": "if requirement == \"pytest\" or \"pytest \" in requirement:",
        "fixed_code": "if re.match(r\"pytest(?![-.\\w])\", requirement):",
        "patch": "@@ -78,7 +78,7 @@ def iter_plugins():\n         requires = \"N/A\"\n         if info[\"requires_dist\"]:\n             for requirement in info[\"requires_dist\"]:\n-                if requirement == \"pytest\" or \"pytest \" in requirement:\n+                if re.match(r\"pytest(?![-.\\w])\", requirement):\n                     requires = requirement\n                     break\n         releases = response.json()[\"releases\"]"
    },
    {
        "commit_id": "8e2de91bf85118c9d992c26cb488ddcf30dbdb66",
        "commit_message": "Merge pull request #10449 from cj81499/patch-1\n\nfix type in python_api.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8e2de91bf85118c9d992c26cb488ddcf30dbdb66",
        "buggy_code": "The excpected exception type, or a tuple if one of multiple possible",
        "fixed_code": "The expected exception type, or a tuple if one of multiple possible",
        "patch": "@@ -801,7 +801,7 @@ def raises(  # noqa: F811\n     r\"\"\"Assert that a code block/function call raises an exception.\n \n     :param typing.Type[E] | typing.Tuple[typing.Type[E], ...] expected_exception:\n-        The excpected exception type, or a tuple if one of multiple possible\n+        The expected exception type, or a tuple if one of multiple possible\n         exception types are excepted.\n     :kwparam str | typing.Pattern[str] | None match:\n         If specified, a string containing a regular expression,"
    },
    {
        "commit_id": "549839bac5d96fd9731f40b537f370cad9fae839",
        "commit_message": "fix type in python_api.py\n\nexcpected -> expected",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/549839bac5d96fd9731f40b537f370cad9fae839",
        "buggy_code": "The excpected exception type, or a tuple if one of multiple possible",
        "fixed_code": "The expected exception type, or a tuple if one of multiple possible",
        "patch": "@@ -801,7 +801,7 @@ def raises(  # noqa: F811\n     r\"\"\"Assert that a code block/function call raises an exception.\n \n     :param typing.Type[E] | typing.Tuple[typing.Type[E], ...] expected_exception:\n-        The excpected exception type, or a tuple if one of multiple possible\n+        The expected exception type, or a tuple if one of multiple possible\n         exception types are excepted.\n     :kwparam str | typing.Pattern[str] | None match:\n         If specified, a string containing a regular expression,"
    },
    {
        "commit_id": "4da06896532809a216bfa7a53b0ff490c5193fe9",
        "commit_message": "Ignore mypy error about missing generic arg for catch_warnings\n\nmypy stubs recently changed warnings.catch_warnings to a Generic, in\norder to have proper overloads depending on the parameters passed to it, whihc\ntriggers this mypy error now when we subclass it:\n\n    src/_pytest/recwarn.py:170: error: Missing type parameters for generic type \"catch_warnings\"  [type-arg]\n\nFor our porpuses the parameter is not relevant (we always use record=True), so\ndecided to just ignore the type error.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4da06896532809a216bfa7a53b0ff490c5193fe9",
        "buggy_code": "class WarningsRecorder(warnings.catch_warnings):",
        "fixed_code": "class WarningsRecorder(warnings.catch_warnings):  # type:ignore[type-arg]",
        "patch": "@@ -167,7 +167,7 @@ def warns(  # noqa: F811\n             return func(*args[1:], **kwargs)\n \n \n-class WarningsRecorder(warnings.catch_warnings):\n+class WarningsRecorder(warnings.catch_warnings):  # type:ignore[type-arg]\n     \"\"\"A context manager to record raised warnings.\n \n     Each recorded warning is an instance of :class:`warnings.WarningMessage`."
    },
    {
        "commit_id": "06007de7bad903018420612e6df42eb8bdfb8329",
        "commit_message": "Fix a few broken links in the documentation",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/06007de7bad903018420612e6df42eb8bdfb8329",
        "buggy_code": "See https://docs.python.org/library/how-to/capture-warnings.html for information",
        "fixed_code": "See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information",
        "patch": "@@ -30,7 +30,7 @@\n def recwarn() -> Generator[\"WarningsRecorder\", None, None]:\n     \"\"\"Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.\n \n-    See https://docs.python.org/library/how-to/capture-warnings.html for information\n+    See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information\n     on warning categories.\n     \"\"\"\n     wrec = WarningsRecorder(_ispytest=True)"
    },
    {
        "commit_id": "cb7f5ed3b1cd0c8e90118adbcafb1b7c4bc8fd63",
        "commit_message": "doc: require sphinx 5\n\nFix #9836.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb7f5ed3b1cd0c8e90118adbcafb1b7c4bc8fd63",
        "buggy_code": "Due to the :std:doc:`tutorial/floatingpoint`, numbers that we",
        "fixed_code": "Due to the :doc:`python:tutorial/floatingpoint`, numbers that we",
        "patch": "@@ -521,7 +521,7 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n     \"\"\"Assert that two numbers (or two ordered sequences of numbers) are equal to each other\n     within some tolerance.\n \n-    Due to the :std:doc:`tutorial/floatingpoint`, numbers that we\n+    Due to the :doc:`python:tutorial/floatingpoint`, numbers that we\n     would intuitively expect to be equal are not always so::\n \n         >>> 0.1 + 0.2 == 0.3"
    },
    {
        "commit_id": "cc0092b9d898fdd903f56b9b937139fbf766d1c1",
        "commit_message": "JUnit XML: Escape error messages in setup/teardown (#10190)\n\nCo-authored-by: Holesch, Simon (BSH) <simon.holesch@bshg.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cc0092b9d898fdd903f56b9b937139fbf766d1c1",
        "buggy_code": "self._add_simple(\"error\", msg, str(report.longrepr))",
        "fixed_code": "self._add_simple(\"error\", bin_xml_escape(msg), str(report.longrepr))",
        "patch": "@@ -231,7 +231,7 @@ def append_error(self, report: TestReport) -> None:\n             msg = f'failed on teardown with \"{reason}\"'\n         else:\n             msg = f'failed on setup with \"{reason}\"'\n-        self._add_simple(\"error\", msg, str(report.longrepr))\n+        self._add_simple(\"error\", bin_xml_escape(msg), str(report.longrepr))\n \n     def append_skipped(self, report: TestReport) -> None:\n         if hasattr(report, \"wasxfail\"):"
    },
    {
        "commit_id": "4d430ea6ffe8cf18582e756b4093405cc83d0cc4",
        "commit_message": "Fix partially unknown type (#10204)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d430ea6ffe8cf18582e756b4093405cc83d0cc4",
        "buggy_code": "default=None,",
        "fixed_code": "default: Any = None,",
        "patch": "@@ -169,7 +169,7 @@ def addini(\n         type: Optional[\n             \"Literal['string', 'paths', 'pathlist', 'args', 'linelist', 'bool']\"\n         ] = None,\n-        default=None,\n+        default: Any = None,\n     ) -> None:\n         \"\"\"Register an ini-file option.\n "
    },
    {
        "commit_id": "f92c4a77ada65a40700272c5af8cef302dbb4c27",
        "commit_message": "Use PurePath directly instead of os.path.sep in rewrite.py\n\nGiven we are already creating a `PurePath`, just pass the parts directly to it.\n\nThis avoids using `os.path.sep`, that although is an official API, seems not to be available in all systems.\n\nFix #9791",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f92c4a77ada65a40700272c5af8cef302dbb4c27",
        "buggy_code": "path = PurePath(os.path.sep.join(parts) + \".py\")",
        "fixed_code": "path = PurePath(*parts).with_suffix(\".py\")",
        "patch": "@@ -190,7 +190,7 @@ def _early_rewrite_bailout(self, name: str, state: \"AssertionState\") -> bool:\n             return False\n \n         # For matching the name it must be as if it was a filename.\n-        path = PurePath(os.path.sep.join(parts) + \".py\")\n+        path = PurePath(*parts).with_suffix(\".py\")\n \n         for pat in self.fnpats:\n             # if the pattern contains subdirectories (\"tests/**.py\" for example) we can't bail out based"
    },
    {
        "commit_id": "141c5e5a89de4504b2a92fef63e021bc077ae634",
        "commit_message": "Merge pull request #10070 from pytest-dev/typos\n\nfix some typos to ensure pre-commit.ci fixes main",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/141c5e5a89de4504b2a92fef63e021bc077ae634",
        "buggy_code": "\"\"\"Store parms in private vars for use in add_argument.\"\"\"",
        "fixed_code": "\"\"\"Store params in private vars for use in add_argument.\"\"\"",
        "patch": "@@ -227,7 +227,7 @@ class Argument:\n     _typ_map = {\"int\": int, \"string\": str, \"float\": float, \"complex\": complex}\n \n     def __init__(self, *names: str, **attrs: Any) -> None:\n-        \"\"\"Store parms in private vars for use in add_argument.\"\"\"\n+        \"\"\"Store params in private vars for use in add_argument.\"\"\"\n         self._attrs = attrs\n         self._short_opts: List[str] = []\n         self._long_opts: List[str] = []"
    },
    {
        "commit_id": "141c5e5a89de4504b2a92fef63e021bc077ae634",
        "commit_message": "Merge pull request #10070 from pytest-dev/typos\n\nfix some typos to ensure pre-commit.ci fixes main",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/141c5e5a89de4504b2a92fef63e021bc077ae634",
        "buggy_code": "\"\"\"Recursively map a function over a sequence of arbitary depth\"\"\"",
        "fixed_code": "\"\"\"Recursively map a function over a sequence of arbitrary depth\"\"\"",
        "patch": "@@ -134,7 +134,7 @@ def _check_type(self) -> None:\n \n \n def _recursive_sequence_map(f, x):\n-    \"\"\"Recursively map a function over a sequence of arbitary depth\"\"\"\n+    \"\"\"Recursively map a function over a sequence of arbitrary depth\"\"\"\n     if isinstance(x, (list, tuple)):\n         seq_type = type(x)\n         return seq_type(_recursive_sequence_map(f, xi) for xi in x)"
    },
    {
        "commit_id": "74691346bdf89c6588cf3a2c10505fce30ccd366",
        "commit_message": "fix some typos to ensure pre-commit.ci fixes main",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/74691346bdf89c6588cf3a2c10505fce30ccd366",
        "buggy_code": "\"\"\"Store parms in private vars for use in add_argument.\"\"\"",
        "fixed_code": "\"\"\"Store params in private vars for use in add_argument.\"\"\"",
        "patch": "@@ -227,7 +227,7 @@ class Argument:\n     _typ_map = {\"int\": int, \"string\": str, \"float\": float, \"complex\": complex}\n \n     def __init__(self, *names: str, **attrs: Any) -> None:\n-        \"\"\"Store parms in private vars for use in add_argument.\"\"\"\n+        \"\"\"Store params in private vars for use in add_argument.\"\"\"\n         self._attrs = attrs\n         self._short_opts: List[str] = []\n         self._long_opts: List[str] = []"
    },
    {
        "commit_id": "74691346bdf89c6588cf3a2c10505fce30ccd366",
        "commit_message": "fix some typos to ensure pre-commit.ci fixes main",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/74691346bdf89c6588cf3a2c10505fce30ccd366",
        "buggy_code": "\"\"\"Recursively map a function over a sequence of arbitary depth\"\"\"",
        "fixed_code": "\"\"\"Recursively map a function over a sequence of arbitrary depth\"\"\"",
        "patch": "@@ -134,7 +134,7 @@ def _check_type(self) -> None:\n \n \n def _recursive_sequence_map(f, x):\n-    \"\"\"Recursively map a function over a sequence of arbitary depth\"\"\"\n+    \"\"\"Recursively map a function over a sequence of arbitrary depth\"\"\"\n     if isinstance(x, (list, tuple)):\n         seq_type = type(x)\n         return seq_type(_recursive_sequence_map(f, xi) for xi in x)"
    },
    {
        "commit_id": "04be900d0677791d97e955b42440627b1818fbcb",
        "commit_message": "Update location of `usage.rst` to fix manpage compilation (#10026)\n\n`usage.rst` has been moved from `doc/en` to `doc/en/how-to`, so the `man_pages` configuration\r\nvalue needs to be updated to the new location, so that we dont get this warning:\r\n\r\n    writing... WARNING: \"man_pages\" config value references unknown document usage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/04be900d0677791d97e955b42440627b1818fbcb",
        "buggy_code": "man_pages = [(\"usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]",
        "fixed_code": "man_pages = [(\"how-to/usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]",
        "patch": "@@ -320,7 +320,7 @@\n \n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n-man_pages = [(\"usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]\n+man_pages = [(\"how-to/usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]\n \n \n # -- Options for Epub output ---------------------------------------------------"
    },
    {
        "commit_id": "fe2c74cb1aaba82a1bc085005ba39e0c6beb0748",
        "commit_message": "Update location of `usage.rst` to fix manpage compilation\n\n`usage.rst` has been moved from `doc/en` to `doc/en/how-to`, so the `man_pages` configuration\r\nvalue needs to be updated to the new location, so that we dont get this warning:\r\n\r\n    writing... WARNING: \"man_pages\" config value references unknown document usage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fe2c74cb1aaba82a1bc085005ba39e0c6beb0748",
        "buggy_code": "man_pages = [(\"usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]",
        "fixed_code": "man_pages = [(\"how-to/usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]",
        "patch": "@@ -320,7 +320,7 @@\n \n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n-man_pages = [(\"usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]\n+man_pages = [(\"how-to/usage\", \"pytest\", \"pytest usage\", [\"holger krekel at merlinux eu\"], 1)]\n \n \n # -- Options for Epub output ---------------------------------------------------"
    },
    {
        "commit_id": "db139307ce5036a35a5e6e825cf32a42ca7a67a4",
        "commit_message": "Merge pull request #9931 from bluetech/py11-rglob\n\ntesting: fix Path.rglob(\"\") failures in Python 3.11b1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/db139307ce5036a35a5e6e825cf32a42ca7a67a4",
        "buggy_code": "for x in pytester.path.rglob(\"\"):",
        "fixed_code": "for x in pytester.path.glob(\"**/\"):",
        "patch": "@@ -553,7 +553,7 @@ def test_no_conftest(fxtr):\n             )\n         )\n         print(\"created directory structure:\")\n-        for x in pytester.path.rglob(\"\"):\n+        for x in pytester.path.glob(\"**/\"):\n             print(\"   \" + str(x.relative_to(pytester.path)))\n \n         return {\"runner\": runner, \"package\": package, \"swc\": swc, \"snc\": snc}"
    },
    {
        "commit_id": "644a81af37af40539aab436814ba6604b5bd5047",
        "commit_message": "testing: fix Path.rglob(\"\") failures in Python 3.11b1\n\nFix #9930.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/644a81af37af40539aab436814ba6604b5bd5047",
        "buggy_code": "for x in pytester.path.rglob(\"\"):",
        "fixed_code": "for x in pytester.path.glob(\"**/\"):",
        "patch": "@@ -553,7 +553,7 @@ def test_no_conftest(fxtr):\n             )\n         )\n         print(\"created directory structure:\")\n-        for x in pytester.path.rglob(\"\"):\n+        for x in pytester.path.glob(\"**/\"):\n             print(\"   \" + str(x.relative_to(pytester.path)))\n \n         return {\"runner\": runner, \"package\": package, \"swc\": swc, \"snc\": snc}"
    },
    {
        "commit_id": "7df405747a9fb0b4b222bb404ccc826021e5efeb",
        "commit_message": "Merge branch 'pytest-dev:main' into patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7df405747a9fb0b4b222bb404ccc826021e5efeb",
        "buggy_code": "stacklevel=3,",
        "fixed_code": "stacklevel=6,",
        "patch": "@@ -111,7 +111,7 @@ def _imply_path(\n             NODE_CTOR_FSPATH_ARG.format(\n                 node_type_name=node_type.__name__,\n             ),\n-            stacklevel=3,\n+            stacklevel=6,\n         )\n     if path is not None:\n         if fspath is not None:"
    },
    {
        "commit_id": "63c73380281e7201dde2be62dad6c6d58841c139",
        "commit_message": "Fix rename issue",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63c73380281e7201dde2be62dad6c6d58841c139",
        "buggy_code": "if cols:",
        "fixed_code": "if collectors:",
        "patch": "@@ -646,7 +646,7 @@ def perform_collect(\n             if self._notfound:\n                 errors = []\n                 for arg, collectors in self._notfound:\n-                    if cols:\n+                    if collectors:\n                         errors.append(\n                             f\"not found: {arg}\\n(no name {arg!r} in any of {collectors!r})\"\n                         )"
    },
    {
        "commit_id": "63126643b9b02bce4bbccc94ea00bebdb8137975",
        "commit_message": "Merge pull request #9789 from spaceone/fix-typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63126643b9b02bce4bbccc94ea00bebdb8137975",
        "buggy_code": "The comparision will be true if both mappings have the same keys and their",
        "fixed_code": "The comparison will be true if both mappings have the same keys and their",
        "patch": "@@ -573,7 +573,7 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n         >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})\n         True\n \n-    The comparision will be true if both mappings have the same keys and their\n+    The comparison will be true if both mappings have the same keys and their\n     respective values match the expected tolerances.\n \n     **Tolerances**"
    },
    {
        "commit_id": "8f64a39d0aab74b2de2bacee03f76e4b90555fa5",
        "commit_message": "[style]: fix typo in docstring",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8f64a39d0aab74b2de2bacee03f76e4b90555fa5",
        "buggy_code": "The comparision will be true if both mappings have the same keys and their",
        "fixed_code": "The comparison will be true if both mappings have the same keys and their",
        "patch": "@@ -573,7 +573,7 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n         >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})\n         True\n \n-    The comparision will be true if both mappings have the same keys and their\n+    The comparison will be true if both mappings have the same keys and their\n     respective values match the expected tolerances.\n \n     **Tolerances**"
    },
    {
        "commit_id": "d52a6e6074844581f5f89653bd4071fb6ea847d3",
        "commit_message": "[pre-commit.ci] pre-commit autoupdate (#9769)\n\n* [pre-commit.ci] pre-commit autoupdate\r\n\r\nupdates:\r\n- [github.com/asottile/reorder_python_imports: v2.7.1 \u2192 v3.0.1](https://github.com/asottile/reorder_python_imports/compare/v2.7.1...v3.0.1)\r\n- [github.com/asottile/pyupgrade: v2.31.0 \u2192 v2.31.1](https://github.com/asottile/pyupgrade/compare/v2.31.0...v2.31.1)\r\n- [github.com/pre-commit/mirrors-mypy: v0.931 \u2192 v0.940](https://github.com/pre-commit/mirrors-mypy/compare/v0.931...v0.940)\r\n\r\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\r\n\r\nfor more information, see https://pre-commit.ci\r\n\r\n* Fix mypy errors\r\n\r\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d52a6e6074844581f5f89653bd4071fb6ea847d3",
        "buggy_code": "yield",
        "fixed_code": "yield  # type:ignore[unreachable]",
        "patch": "@@ -1059,7 +1059,7 @@ def atomic_write_failed(fn, mode=\"r\", overwrite=False):\n                 e = OSError()\n                 e.errno = 10\n                 raise e\n-                yield\n+                yield  # type:ignore[unreachable]\n \n             monkeypatch.setattr(\n                 _pytest.assertion.rewrite, \"atomic_write\", atomic_write_failed"
    },
    {
        "commit_id": "f3053017b9a540fc14fddbb4e40066348ac8c25c",
        "commit_message": "fix typo in pytester docs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f3053017b9a540fc14fddbb4e40066348ac8c25c",
        "buggy_code": "\"\"\"Write a contest.py file with 'source' as contents.\"\"\"",
        "fixed_code": "\"\"\"Write a conftest.py file with 'source' as contents.\"\"\"",
        "patch": "@@ -832,7 +832,7 @@ def makefile(self, ext: str, *args: str, **kwargs: str) -> Path:\n         return self._makefile(ext, args, kwargs)\n \n     def makeconftest(self, source: str) -> Path:\n-        \"\"\"Write a contest.py file with 'source' as contents.\"\"\"\n+        \"\"\"Write a conftest.py file with 'source' as contents.\"\"\"\n         return self.makepyfile(conftest=source)\n \n     def makeini(self, source: str) -> Path:"
    },
    {
        "commit_id": "843e01824c257c3190792a9df430289c3abe349d",
        "commit_message": "Merge pull request #9732 from nicoddemus/9730-toml-failure\n\nImprove error message for malformed pyproject.toml files",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/843e01824c257c3190792a9df430289c3abe349d",
        "buggy_code": "raise UsageError(str(exc)) from exc",
        "fixed_code": "raise UsageError(f\"{filepath}: {exc}\") from exc",
        "patch": "@@ -70,7 +70,7 @@ def load_config_dict_from_file(\n         try:\n             config = tomli.loads(toml_text)\n         except tomli.TOMLDecodeError as exc:\n-            raise UsageError(str(exc)) from exc\n+            raise UsageError(f\"{filepath}: {exc}\") from exc\n \n         result = config.get(\"tool\", {}).get(\"pytest\", {}).get(\"ini_options\", None)\n         if result is not None:"
    },
    {
        "commit_id": "e38d1cac489e42f4bdbecbb50f9f25dc9c36c19f",
        "commit_message": "Improve error message for malformed pyproject.toml files\n\nIncluding the file name is enough to let the user know what the problem is.\n\nThe same is not needed for `.ini` files because the error message includes the path to the file by default.\n\nFix #9730",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e38d1cac489e42f4bdbecbb50f9f25dc9c36c19f",
        "buggy_code": "raise UsageError(str(exc)) from exc",
        "fixed_code": "raise UsageError(f\"{filepath}: {exc}\") from exc",
        "patch": "@@ -70,7 +70,7 @@ def load_config_dict_from_file(\n         try:\n             config = tomli.loads(toml_text)\n         except tomli.TOMLDecodeError as exc:\n-            raise UsageError(str(exc)) from exc\n+            raise UsageError(f\"{filepath}: {exc}\") from exc\n \n         result = config.get(\"tool\", {}).get(\"pytest\", {}).get(\"ini_options\", None)\n         if result is not None:"
    },
    {
        "commit_id": "c9cf2d44245c553258e7e0ed0e446072b3434d1b",
        "commit_message": "Fix count of selected tests on terminal collection summary (#9628)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c9cf2d44245c553258e7e0ed0e446072b3434d1b",
        "buggy_code": "\"collected 2 items / 2 deselected\",",
        "fixed_code": "\"collected 2 items / 2 deselected / 0 selected\",",
        "patch": "@@ -773,7 +773,7 @@ def pytest_sessionfinish():\n         result = pytester.runpytest(\"--lf\", \"--lfnf\", \"none\")\n         result.stdout.fnmatch_lines(\n             [\n-                \"collected 2 items / 2 deselected\",\n+                \"collected 2 items / 2 deselected / 0 selected\",\n                 \"run-last-failure: no previously failed tests, deselecting all items.\",\n                 \"deselected=2\",\n                 \"* 2 deselected in *\","
    },
    {
        "commit_id": "01e1de7a1a79eeac67cf970e84532c2a99839476",
        "commit_message": "Rename ``pythonpath`` plugin to ``python_path``\n\nFix #9636.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/01e1de7a1a79eeac67cf970e84532c2a99839476",
        "buggy_code": "\"pythonpath\",",
        "fixed_code": "\"python_path\",",
        "patch": "@@ -254,7 +254,7 @@ def directory_arg(path: str, optname: str) -> str:\n     \"warnings\",\n     \"logging\",\n     \"reports\",\n-    \"pythonpath\",\n+    \"python_path\",\n     *([\"unraisableexception\", \"threadexception\"] if sys.version_info >= (3, 8) else []),\n     \"faulthandler\",\n )"
    },
    {
        "commit_id": "01e1de7a1a79eeac67cf970e84532c2a99839476",
        "commit_message": "Rename ``pythonpath`` plugin to ``python_path``\n\nFix #9636.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/01e1de7a1a79eeac67cf970e84532c2a99839476",
        "buggy_code": "(\"_pytest.pythonpath\", \"nonwrapper\"),",
        "fixed_code": "(\"_pytest.python_path\", \"nonwrapper\"),",
        "patch": "@@ -1275,7 +1275,7 @@ def pytest_load_initial_conftests(self):\n         (\"_pytest.config\", \"nonwrapper\"),\n         (m.__module__, \"nonwrapper\"),\n         (\"_pytest.legacypath\", \"nonwrapper\"),\n-        (\"_pytest.pythonpath\", \"nonwrapper\"),\n+        (\"_pytest.python_path\", \"nonwrapper\"),\n         (\"_pytest.capture\", \"wrapper\"),\n         (\"_pytest.warnings\", \"wrapper\"),\n     ]"
    },
    {
        "commit_id": "01e1de7a1a79eeac67cf970e84532c2a99839476",
        "commit_message": "Rename ``pythonpath`` plugin to ``python_path``\n\nFix #9636.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/01e1de7a1a79eeac67cf970e84532c2a99839476",
        "buggy_code": "\"\"\"Test that the pythonpath plugin cleans up after itself.\"\"\"",
        "fixed_code": "\"\"\"Test that the plugin cleans up after itself.\"\"\"",
        "patch": "@@ -81,7 +81,7 @@ def test_no_ini(pytester: Pytester, file_structure) -> None:\n \n \n def test_clean_up(pytester: Pytester) -> None:\n-    \"\"\"Test that the pythonpath plugin cleans up after itself.\"\"\"\n+    \"\"\"Test that the plugin cleans up after itself.\"\"\"\n     # This is tough to test behaviorly because the cleanup really runs last.\n     # So the test make several implementation assumptions:\n     # - Cleanup is done in pytest_unconfigure()."
    },
    {
        "commit_id": "abe2a8f4e1d84812b77e492f6505b2da0bcc1d95",
        "commit_message": "Merge pull request #9484 from bluetech/getconftestmodules-cache-fix\n\nconfig: fix incorrect cache hit check in _getconftestmodules",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/abe2a8f4e1d84812b77e492f6505b2da0bcc1d95",
        "buggy_code": "if existing_clist:",
        "fixed_code": "if existing_clist is not None:",
        "patch": "@@ -538,7 +538,7 @@ def _getconftestmodules(\n         # Optimization: avoid repeated searches in the same directory.\n         # Assumes always called with same importmode and rootpath.\n         existing_clist = self._dirpath2confmods.get(directory)\n-        if existing_clist:\n+        if existing_clist is not None:\n             return existing_clist\n \n         # XXX these days we may rather want to use config.rootpath"
    },
    {
        "commit_id": "b19374bc193fddfe2b0c2da21e4e3a96846f15ea",
        "commit_message": "config: fix incorrect cache hit check in _getconftestmodules\n\nThis made the cache not work as intended, causing a major slowdown.\n\nSee #9478 for discussion and context.\n\nAuthored-by: Anthony Sottile <asottile@umich.edu>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b19374bc193fddfe2b0c2da21e4e3a96846f15ea",
        "buggy_code": "if existing_clist:",
        "fixed_code": "if existing_clist is not None:",
        "patch": "@@ -538,7 +538,7 @@ def _getconftestmodules(\n         # Optimization: avoid repeated searches in the same directory.\n         # Assumes always called with same importmode and rootpath.\n         existing_clist = self._dirpath2confmods.get(directory)\n-        if existing_clist:\n+        if existing_clist is not None:\n             return existing_clist\n \n         # XXX these days we may rather want to use config.rootpath"
    },
    {
        "commit_id": "b0aabe4081403ad74e0c0a14a88a76930dbb9a66",
        "commit_message": "fix mypy 0.930 errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b0aabe4081403ad74e0c0a14a88a76930dbb9a66",
        "buggy_code": "found = __import__(used)",
        "fixed_code": "found: object = __import__(used)",
        "patch": "@@ -55,7 +55,7 @@ def resolve(name: str) -> object:\n     parts = name.split(\".\")\n \n     used = parts.pop(0)\n-    found = __import__(used)\n+    found: object = __import__(used)\n     for part in parts:\n         used += \".\" + part\n         try:"
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "in order not to generate explanation unecessarily (might be expensive).\"\"\"",
        "fixed_code": "in order not to generate explanation unnecessarily (might be expensive).\"\"\"",
        "patch": "@@ -513,7 +513,7 @@ def _call_assertion_pass(lineno: int, orig: str, expl: str) -> None:\n \n def _check_if_assertion_pass_impl() -> bool:\n     \"\"\"Check if any plugins implement the pytest_assertion_pass hook\n-    in order not to generate explanation unecessarily (might be expensive).\"\"\"\n+    in order not to generate explanation unnecessarily (might be expensive).\"\"\"\n     return True if util._assertion_pass else False\n \n "
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "to the default onces generated by the dataclass and attr module",
        "fixed_code": "to the default one generated by the dataclass and attr module",
        "patch": "@@ -142,7 +142,7 @@ def has_default_eq(\n \n     First, we check if the object's __eq__ attribute has __code__,\n     if so, we check the equally of the method code filename (__code__.co_filename)\n-    to the default onces generated by the dataclass and attr module\n+    to the default one generated by the dataclass and attr module\n     for dataclasses the default co_filename is <string>, for attrs class, the __eq__ should contain \"attrs eq generated\"\n     \"\"\"\n     # inspired from https://github.com/willmcgugan/rich/blob/07d51ffc1aee6f16bd2e5a25b4e82850fb9ed778/rich/pretty.py#L68"
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "use (usually coninciding with pytest_unconfigure).\"\"\"",
        "fixed_code": "use (usually coinciding with pytest_unconfigure).\"\"\"",
        "patch": "@@ -970,7 +970,7 @@ def inipath(self) -> Optional[Path]:\n \n     def add_cleanup(self, func: Callable[[], None]) -> None:\n         \"\"\"Add a function to be called when the config object gets out of\n-        use (usually coninciding with pytest_unconfigure).\"\"\"\n+        use (usually coinciding with pytest_unconfigure).\"\"\"\n         self._cleanup.append(func)\n \n     def _do_configure(self) -> None:"
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "it currently doesnt return full hook caller proxies for fixed hooks,",
        "fixed_code": "it currently doesn't return full hook caller proxies for fixed hooks,",
        "patch": "@@ -23,7 +23,7 @@ class PathAwareHookProxy:\n     this helper wraps around hook callers\n     until pluggy supports fixingcalls, this one will do\n \n-    it currently doesnt return full hook caller proxies for fixed hooks,\n+    it currently doesn't return full hook caller proxies for fixed hooks,\n     this may have to be changed later depending on bugs\n     \"\"\"\n "
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "The expression can be evaulated against different matchers.",
        "fixed_code": "The expression can be evaluated against different matchers.",
        "patch": "@@ -190,7 +190,7 @@ def __len__(self) -> int:\n class Expression:\n     \"\"\"A compiled match expression as used by -k and -m.\n \n-    The expression can be evaulated against different matchers.\n+    The expression can be evaluated against different matchers.\n     \"\"\"\n \n     __slots__ = (\"code\",)"
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "Searchs a module collection node for a collection node matching the",
        "fixed_code": "Searches a module collection node for a collection node matching the",
        "patch": "@@ -1288,7 +1288,7 @@ def collect_by_name(\n     ) -> Optional[Union[Item, Collector]]:\n         \"\"\"Return the collection node for name from the module collection.\n \n-        Searchs a module collection node for a collection node matching the\n+        Searches a module collection node for a collection node matching the\n         given name.\n \n         :param modcol: A module collection node; see :py:meth:`getmodulecol`."
    },
    {
        "commit_id": "55debfad1f690d11da3b33022d55c49060460e44",
        "commit_message": "Fix typos (#9424)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/55debfad1f690d11da3b33022d55c49060460e44",
        "buggy_code": "\"\"\"Ensure that the broken pipe error message is supressed.",
        "fixed_code": "\"\"\"Ensure that the broken pipe error message is suppressed.",
        "patch": "@@ -1281,7 +1281,7 @@ def test_simple():\n     reason=\"Windows raises `OSError: [Errno 22] Invalid argument` instead\",\n )\n def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n-    \"\"\"Ensure that the broken pipe error message is supressed.\n+    \"\"\"Ensure that the broken pipe error message is suppressed.\n \n     In some Python versions, it reaches sys.unraisablehook, in others\n     a BrokenPipeError exception is propagated, but either way it prints"
    },
    {
        "commit_id": "c69b84f2367b44c0692589aef037deeca9e11a4a",
        "commit_message": "fix typing issues in mypy 0.920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c69b84f2367b44c0692589aef037deeca9e11a4a",
        "buggy_code": "open(os.dup(f.fileno()), mode, buffering),  # type: ignore[arg-type]",
        "fixed_code": "open(os.dup(f.fileno()), mode, buffering),",
        "patch": "@@ -112,7 +112,7 @@ def _reopen_stdio(f, mode):\n             buffering = -1\n \n         return io.TextIOWrapper(\n-            open(os.dup(f.fileno()), mode, buffering),  # type: ignore[arg-type]\n+            open(os.dup(f.fileno()), mode, buffering),\n             f.encoding,\n             f.errors,\n             f.newlines,"
    },
    {
        "commit_id": "c69b84f2367b44c0692589aef037deeca9e11a4a",
        "commit_message": "fix typing issues in mypy 0.920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c69b84f2367b44c0692589aef037deeca9e11a4a",
        "buggy_code": "self.duration = 0",
        "fixed_code": "self.duration = 0.0",
        "patch": "@@ -92,7 +92,7 @@ def __init__(self, nodeid: Union[str, TestReport], xml: \"LogXML\") -> None:\n         self.xml = xml\n         self.add_stats = self.xml.add_stats\n         self.family = self.xml.family\n-        self.duration = 0\n+        self.duration = 0.0\n         self.properties: List[Tuple[str, str]] = []\n         self.nodes: List[ET.Element] = []\n         self.attrs: Dict[str, str] = {}"
    },
    {
        "commit_id": "c69b84f2367b44c0692589aef037deeca9e11a4a",
        "commit_message": "fix typing issues in mypy 0.920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c69b84f2367b44c0692589aef037deeca9e11a4a",
        "buggy_code": "yield  # type:ignore[unreachable]",
        "fixed_code": "yield",
        "patch": "@@ -1057,7 +1057,7 @@ def atomic_write_failed(fn, mode=\"r\", overwrite=False):\n                 e = OSError()\n                 e.errno = 10\n                 raise e\n-                yield  # type:ignore[unreachable]\n+                yield\n \n             monkeypatch.setattr(\n                 _pytest.assertion.rewrite, \"atomic_write\", atomic_write_failed"
    },
    {
        "commit_id": "c69b84f2367b44c0692589aef037deeca9e11a4a",
        "commit_message": "fix typing issues in mypy 0.920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c69b84f2367b44c0692589aef037deeca9e11a4a",
        "buggy_code": "assert item2.fspath == item.fspath  # type: ignore[attr-defined]",
        "fixed_code": "assert item2.fspath == item.fspath",
        "patch": "@@ -14,7 +14,7 @@ def test_item_fspath(pytester: pytest.Pytester) -> None:\n     items2, hookrec = pytester.inline_genitems(item.nodeid)\n     (item2,) = items2\n     assert item2.name == item.name\n-    assert item2.fspath == item.fspath  # type: ignore[attr-defined]\n+    assert item2.fspath == item.fspath\n     assert item2.path == item.path\n \n "
    },
    {
        "commit_id": "f87df9c52eb1113799f241dbd35934efa1bef330",
        "commit_message": "nodes: keep plugins which subclass Item, File working for a bit more (#9279)\n\n* nodes: keep plugins which subclass Item, File working for a bit more\r\n\r\nFix #8435.\r\n\r\n* Update src/_pytest/nodes.py\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\nCo-authored-by: Florian Bruhin <me@the-compiler.org>\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f87df9c52eb1113799f241dbd35934efa1bef330",
        "buggy_code": "class SoWrong(nodes.File, nodes.Item):",
        "fixed_code": "class SoWrong(nodes.Item, nodes.File):",
        "patch": "@@ -71,7 +71,7 @@ def test_subclassing_both_item_and_collector_deprecated(\n         ),\n     ):\n \n-        class SoWrong(nodes.File, nodes.Item):\n+        class SoWrong(nodes.Item, nodes.File):\n             def __init__(self, fspath, parent):\n                 \"\"\"Legacy ctor with legacy call # don't wana see\"\"\"\n                 super().__init__(fspath, parent)"
    },
    {
        "commit_id": "eb6c4493b205c5b709e1a2323eb9ffd2397e4e79",
        "commit_message": "Deprecation of `msg=` for both `pytest.skip()` and `pytest.fail()`. (#8950)\n\n* porting pytest.skip() to use reason=, adding tests\r\n\r\n* avoid adding **kwargs, it breaks other functionality, use optional msg= instead\r\n\r\n* deprecation of `pytest.fail(msg=...)`\r\n\r\n* fix bug with not capturing the returned reason value\r\n\r\n* pass reason= in acceptance async tests instead of msg=\r\n\r\n* finalising deprecations of `msg` in `pytest.skip()` and `pytest.fail()`\r\n\r\n* Update doc/en/deprecations.rst\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\n* Update doc/en/deprecations.rst\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\n* fix failing test after upstream merge\r\n\r\n* adding deprecation to `pytest.exit(msg=...)`\r\n\r\n* add docs for pytest.exit deprecations\r\n\r\n* finalising deprecation of msg for pytest.skip, pytest.exit and pytest.fail\r\n\r\n* hold a reference to the Scope instance to please mypy\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eb6c4493b205c5b709e1a2323eb9ffd2397e4e79",
        "buggy_code": "skip(msg=\"async def function and no async plugin installed (see warnings)\")",
        "fixed_code": "skip(reason=\"async def function and no async plugin installed (see warnings)\")",
        "patch": "@@ -175,7 +175,7 @@ def async_warn_and_skip(nodeid: str) -> None:\n     msg += \"  - pytest-trio\\n\"\n     msg += \"  - pytest-twisted\"\n     warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))\n-    skip(msg=\"async def function and no async plugin installed (see warnings)\")\n+    skip(reason=\"async def function and no async plugin installed (see warnings)\")\n \n \n @hookimpl(trylast=True)"
    },
    {
        "commit_id": "eb6c4493b205c5b709e1a2323eb9ffd2397e4e79",
        "commit_message": "Deprecation of `msg=` for both `pytest.skip()` and `pytest.fail()`. (#8950)\n\n* porting pytest.skip() to use reason=, adding tests\r\n\r\n* avoid adding **kwargs, it breaks other functionality, use optional msg= instead\r\n\r\n* deprecation of `pytest.fail(msg=...)`\r\n\r\n* fix bug with not capturing the returned reason value\r\n\r\n* pass reason= in acceptance async tests instead of msg=\r\n\r\n* finalising deprecations of `msg` in `pytest.skip()` and `pytest.fail()`\r\n\r\n* Update doc/en/deprecations.rst\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\n* Update doc/en/deprecations.rst\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\n* fix failing test after upstream merge\r\n\r\n* adding deprecation to `pytest.exit(msg=...)`\r\n\r\n* add docs for pytest.exit deprecations\r\n\r\n* finalising deprecation of msg for pytest.skip, pytest.exit and pytest.fail\r\n\r\n* hold a reference to the Scope instance to please mypy\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eb6c4493b205c5b709e1a2323eb9ffd2397e4e79",
        "buggy_code": "pytest.exit(msg=\"exit_pytest_sessionfinish\", returncode={returncode})",
        "fixed_code": "pytest.exit(reason=\"exit_pytest_sessionfinish\", returncode={returncode})",
        "patch": "@@ -70,7 +70,7 @@ def test_wrap_session_exit_sessionfinish(\n         \"\"\"\n         import pytest\n         def pytest_sessionfinish():\n-            pytest.exit(msg=\"exit_pytest_sessionfinish\", returncode={returncode})\n+            pytest.exit(reason=\"exit_pytest_sessionfinish\", returncode={returncode})\n     \"\"\".format(\n             returncode=returncode\n         )"
    },
    {
        "commit_id": "9546fb713a3b27767cae4eef59d61fb861232fc9",
        "commit_message": "Merge pull request #9066 from eamanu/fix-8994",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9546fb713a3b27767cae4eef59d61fb861232fc9",
        "buggy_code": ").format(name=self.__name__)",
        "fixed_code": ").format(name=f\"{self.__module__}.{self.__name__}\")",
        "patch": "@@ -123,7 +123,7 @@ def __call__(self, *k, **kw):\n             \"See \"\n             \"https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent\"\n             \" for more details.\"\n-        ).format(name=self.__name__)\n+        ).format(name=f\"{self.__module__}.{self.__name__}\")\n         fail(msg, pytrace=False)\n \n     def _create(self, *k, **kw):"
    },
    {
        "commit_id": "112204cf8d292ee3221d46fa16d4f22334682e6d",
        "commit_message": "Fix non-sensical error message (#9077)\n\n* Fix non-sensical error message\n\nIntroduced in 12de92cd2b818906d342dbdfaf96999887bc9658 / #7698\n\n* Add a test\n\n* Put the unit back into unittest\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/112204cf8d292ee3221d46fa16d4f22334682e6d",
        "buggy_code": "raise AttributeError(f\"module not available in {self.scope}-scoped context\")",
        "fixed_code": "raise AttributeError(f\"path not available in {self.scope}-scoped context\")",
        "patch": "@@ -536,7 +536,7 @@ def fspath(self) -> LEGACY_PATH:\n     @property\n     def path(self) -> Path:\n         if self.scope not in (\"function\", \"class\", \"module\", \"package\"):\n-            raise AttributeError(f\"module not available in {self.scope}-scoped context\")\n+            raise AttributeError(f\"path not available in {self.scope}-scoped context\")\n         # TODO: Remove ignore once _pyfuncitem is properly typed.\n         return self._pyfuncitem.path  # type: ignore\n "
    },
    {
        "commit_id": "ef5d81ad5c37bc06a6365dc61377c18f1001f9de",
        "commit_message": "add `assert_outcomes(warnings=)` functionality to `RunResult` \n\n* expose `warnings=` to pytester `assert_outcomes()`\r\n\r\n* fix test fallout from adding warnings= to assert_outcomes()\r\n\r\n* #closes 8593 - Improve test and add a `changelog` entry for the change",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ef5d81ad5c37bc06a6365dc61377c18f1001f9de",
        "buggy_code": "result.assert_outcomes(skipped=1)",
        "fixed_code": "result.assert_outcomes(skipped=1, warnings=1)",
        "patch": "@@ -335,7 +335,7 @@ def test_failing():\n         \"\"\"\n     )\n     result = pytester.runpytest(p)\n-    result.assert_outcomes(skipped=1)\n+    result.assert_outcomes(skipped=1, warnings=1)\n \n \n def test_SkipTest_in_test(pytester: Pytester) -> None:"
    },
    {
        "commit_id": "febb978651de69298b29a81e6160b13ee4034233",
        "commit_message": "Update error message for module level skip to include 'allow_module_level' (#8906)\n\nCo-authored-by: Naveen <NaveenPr1@microland.com>\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/febb978651de69298b29a81e6160b13ee4034233",
        "buggy_code": "[\"*Using pytest.skip outside of a test is not allowed*\"]",
        "fixed_code": "[\"*Using pytest.skip outside of a test will skip the entire module*\"]",
        "patch": "@@ -1341,7 +1341,7 @@ def test_func():\n     )\n     result = pytester.runpytest()\n     result.stdout.fnmatch_lines(\n-        [\"*Using pytest.skip outside of a test is not allowed*\"]\n+        [\"*Using pytest.skip outside of a test will skip the entire module*\"]\n     )\n \n "
    },
    {
        "commit_id": "17f1a0af8e500151e7e830b8bac3ed5241f0aab1",
        "commit_message": "Fix in more places, use default",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/17f1a0af8e500151e7e830b8bac3ed5241f0aab1",
        "buggy_code": "monkeypatch.setenv(name, value, prepend=os.pathsep)",
        "fixed_code": "monkeypatch.setenv(name, value, prepend=None)",
        "patch": "@@ -36,7 +36,7 @@ def monkeypatch() -> Generator[\"MonkeyPatch\", None, None]:\n         monkeypatch.delattr(obj, name, raising=True)\n         monkeypatch.setitem(mapping, name, value)\n         monkeypatch.delitem(obj, name, raising=True)\n-        monkeypatch.setenv(name, value, prepend=os.pathsep)\n+        monkeypatch.setenv(name, value, prepend=None)\n         monkeypatch.delenv(name, raising=True)\n         monkeypatch.syspath_prepend(path)\n         monkeypatch.chdir(path)"
    },
    {
        "commit_id": "501637547ecefa584db3793f71f1863da5ffc25f",
        "commit_message": "Issue #8823 - remove bots from contributors list (#8828)\n\n* fix-contributors-list\r\n\r\n* remove-bots\r\n\r\n* delete-extraneous-file\r\n\r\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\r\n\r\nfor more information, see https://pre-commit.ci\r\n\r\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/501637547ecefa584db3793f71f1863da5ffc25f",
        "buggy_code": "contributors = set(stdout.splitlines())",
        "fixed_code": "contributors = {name for name in stdout.splitlines() if not name.endswith(\"[bot]\")}",
        "patch": "@@ -20,7 +20,7 @@ def announce(version):\n     stdout = check_output([\"git\", \"log\", f\"{last_version}..HEAD\", \"--format=%aN\"])\n     stdout = stdout.decode(\"utf-8\")\n \n-    contributors = set(stdout.splitlines())\n+    contributors = {name for name in stdout.splitlines() if not name.endswith(\"[bot]\")}\n \n     template_name = (\n         \"release.minor.rst\" if version.endswith(\".0\") else \"release.patch.rst\""
    },
    {
        "commit_id": "109312ba86a7142dfff30f3309d6f7a596f02db1",
        "commit_message": "Make --version write to stdout rather than stderr\n\nFix #8246",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/109312ba86a7142dfff30f3309d6f7a596f02db1",
        "buggy_code": "result.stderr.fnmatch_lines([f\"pytest {pytest.__version__}\"])",
        "fixed_code": "result.stdout.fnmatch_lines([f\"pytest {pytest.__version__}\"])",
        "patch": "@@ -1756,7 +1756,7 @@ def pytest_addoption(parser):\n     assert result.ret == ExitCode.USAGE_ERROR\n \n     result = pytester.runpytest(\"--version\")\n-    result.stderr.fnmatch_lines([f\"pytest {pytest.__version__}\"])\n+    result.stdout.fnmatch_lines([f\"pytest {pytest.__version__}\"])\n     assert result.ret == ExitCode.USAGE_ERROR\n \n "
    },
    {
        "commit_id": "d7b0e172052d855afe444c599330c907cdc53d93",
        "commit_message": "issue a warning when Item and Collector are used in diamond inheritance (#8447)\n\n* issue a warning when Items and Collector form a diamond\r\n\r\naddresses #8435\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Ran Benita <ran@unusedvar.com>\r\n\r\n* Return support for the broken File/Item hybrids\r\n\r\n* adds deprecation\r\n* ads necessary support code in node construction\r\n\r\n* fix incorrect mypy based assertions\r\n\r\n* add docs for deprecation of Item/File inheritance\r\n\r\n* warn when a non-cooperative ctor is encountered\r\n\r\n* use getattr instead of cast to get the class __init__ for legacy ctors\r\n\r\n* update documentation references for node inheritance\r\n\r\n* clean up file+item inheritance test\r\n\r\nenhance docs\r\nmove import upwards\r\n\r\nCo-authored-by: Ran Benita <ran@unusedvar.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d7b0e172052d855afe444c599330c907cdc53d93",
        "buggy_code": "session: Session = cls._create(config)",
        "fixed_code": "session: Session = cls._create(config=config)",
        "patch": "@@ -484,7 +484,7 @@ def __init__(self, config: Config) -> None:\n \n     @classmethod\n     def from_config(cls, config: Config) -> \"Session\":\n-        session: Session = cls._create(config)\n+        session: Session = cls._create(config=config)\n         return session\n \n     def __repr__(self) -> str:"
    },
    {
        "commit_id": "8010fb9f40103d700f8f38c6aa10f6bdbabda7bb",
        "commit_message": "Merge pull request #8749 from beniwohli/fix-at-level-type-hints\n\nupdated type hints for caplog.at_level to match caplog.set_level",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8010fb9f40103d700f8f38c6aa10f6bdbabda7bb",
        "buggy_code": "self, level: int, logger: Optional[str] = None",
        "fixed_code": "self, level: Union[int, str], logger: Optional[str] = None",
        "patch": "@@ -451,7 +451,7 @@ def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> Non\n \n     @contextmanager\n     def at_level(\n-        self, level: int, logger: Optional[str] = None\n+        self, level: Union[int, str], logger: Optional[str] = None\n     ) -> Generator[None, None, None]:\n         \"\"\"Context manager that sets the level for capturing of logs. After\n         the end of the 'with' statement the level is restored to its original"
    },
    {
        "commit_id": "3ae0103975262e2306d5a15f59c98d2be34b6a91",
        "commit_message": "Merge pull request #8641 from rahul-kumi/fix/8548\n\nadd support for precision bit in LEVEL_NAME_FMT regex",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ae0103975262e2306d5a15f59c98d2be34b6a91",
        "buggy_code": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*s)\")",
        "fixed_code": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*(?:\\.\\d+)?s)\")",
        "patch": "@@ -59,7 +59,7 @@ class ColoredLevelFormatter(logging.Formatter):\n         logging.DEBUG: {\"purple\"},\n         logging.NOTSET: set(),\n     }\n-    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*s)\")\n+    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*(?:\\.\\d+)?s)\")\n \n     def __init__(self, terminalwriter: TerminalWriter, *args, **kwargs) -> None:\n         super().__init__(*args, **kwargs)"
    },
    {
        "commit_id": "80acc0ed6f4f1cfaad2de2679089d8376583f6b0",
        "commit_message": "fix test_coloredlogformatter_with_width_precision test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/80acc0ed6f4f1cfaad2de2679089d8376583f6b0",
        "buggy_code": "logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8.2s %(message)s\"",
        "fixed_code": "logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8.8s %(message)s\"",
        "patch": "@@ -37,7 +37,7 @@ class option:\n \n \n def test_coloredlogformatter_with_width_precision() -> None:\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8.2s %(message)s\"\n+    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8.8s %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\","
    },
    {
        "commit_id": "adc197424d6d04070cd919a4631de7fa0cf5851b",
        "commit_message": "Merge pull request #8555 from The-Compiler/py310-fix\n\nFix Python 3.10 test issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/adc197424d6d04070cd919a4631de7fa0cf5851b",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"default::pytest.PytestCollectionWarning\")",
        "patch": "@@ -1237,7 +1237,7 @@ class Test(object):\n     assert result.ret == ExitCode.NO_TESTS_COLLECTED\n \n \n-@pytest.mark.filterwarnings(\"default\")\n+@pytest.mark.filterwarnings(\"default::pytest.PytestCollectionWarning\")\n def test_dont_collect_non_function_callable(pytester: Pytester) -> None:\n     \"\"\"Test for issue https://github.com/pytest-dev/pytest/issues/331\n "
    },
    {
        "commit_id": "adc197424d6d04070cd919a4631de7fa0cf5851b",
        "commit_message": "Merge pull request #8555 from The-Compiler/py310-fix\n\nFix Python 3.10 test issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/adc197424d6d04070cd919a4631de7fa0cf5851b",
        "buggy_code": "pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)",
        "fixed_code": "symlink_or_skip(pytester.path.joinpath(\"symlink_dir\"), dir)",
        "patch": "@@ -1225,7 +1225,7 @@ def test_collect_symlink_dir(pytester: Pytester) -> None:\n     \"\"\"A symlinked directory is collected.\"\"\"\n     dir = pytester.mkdir(\"dir\")\n     dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n-    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    symlink_or_skip(pytester.path.joinpath(\"symlink_dir\"), dir)\n     result = pytester.runpytest()\n     result.assert_outcomes(passed=2)\n "
    },
    {
        "commit_id": "adc197424d6d04070cd919a4631de7fa0cf5851b",
        "commit_message": "Merge pull request #8555 from The-Compiler/py310-fix\n\nFix Python 3.10 test issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/adc197424d6d04070cd919a4631de7fa0cf5851b",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")",
        "patch": "@@ -290,7 +290,7 @@ def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:\n         result = pytester.runpytest()\n         result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n \n-    @pytest.mark.filterwarnings(\"default\")\n+    @pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")\n     def test_disable_warnings_plugin_disables_config_warnings(\n         self, pytester: Pytester\n     ) -> None:"
    },
    {
        "commit_id": "61be48b485ccc2c7981596a2c9d5bf465a59d068",
        "commit_message": "Fix test_collect_symlink_dir on Windows",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/61be48b485ccc2c7981596a2c9d5bf465a59d068",
        "buggy_code": "pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)",
        "fixed_code": "symlink_or_skip(pytester.path.joinpath(\"symlink_dir\"), dir)",
        "patch": "@@ -1225,7 +1225,7 @@ def test_collect_symlink_dir(pytester: Pytester) -> None:\n     \"\"\"A symlinked directory is collected.\"\"\"\n     dir = pytester.mkdir(\"dir\")\n     dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n-    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    symlink_or_skip(pytester.path.joinpath(\"symlink_dir\"), dir)\n     result = pytester.runpytest()\n     result.assert_outcomes(passed=2)\n "
    },
    {
        "commit_id": "e354c5c919f3abc83e38a0e4eaca87e27335bb8f",
        "commit_message": "Fix warning filters used in tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e354c5c919f3abc83e38a0e4eaca87e27335bb8f",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"default::pytest.PytestCollectionWarning\")",
        "patch": "@@ -1237,7 +1237,7 @@ class Test(object):\n     assert result.ret == ExitCode.NO_TESTS_COLLECTED\n \n \n-@pytest.mark.filterwarnings(\"default\")\n+@pytest.mark.filterwarnings(\"default::pytest.PytestCollectionWarning\")\n def test_dont_collect_non_function_callable(pytester: Pytester) -> None:\n     \"\"\"Test for issue https://github.com/pytest-dev/pytest/issues/331\n "
    },
    {
        "commit_id": "e354c5c919f3abc83e38a0e4eaca87e27335bb8f",
        "commit_message": "Fix warning filters used in tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e354c5c919f3abc83e38a0e4eaca87e27335bb8f",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")",
        "patch": "@@ -290,7 +290,7 @@ def test_silence_unknown_key_warning(self, pytester: Pytester) -> None:\n         result = pytester.runpytest()\n         result.stdout.no_fnmatch_line(\"*PytestConfigWarning*\")\n \n-    @pytest.mark.filterwarnings(\"default\")\n+    @pytest.mark.filterwarnings(\"default::pytest.PytestConfigWarning\")\n     def test_disable_warnings_plugin_disables_config_warnings(\n         self, pytester: Pytester\n     ) -> None:"
    },
    {
        "commit_id": "134d8f78d886d5a552bd4f56209af5554bef14a1",
        "commit_message": "Merge pull request #8595 from nschloe/url-fixes\n\n\"fix\" a couple of http -> https redirects",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/134d8f78d886d5a552bd4f56209af5554bef14a1",
        "buggy_code": "\"holger krekel, trainer and consultant, http://merlinux.eu\",",
        "fixed_code": "\"holger krekel, trainer and consultant, https://merlinux.eu/\",",
        "patch": "@@ -252,7 +252,7 @@\n         \"contents\",\n         \"pytest.tex\",\n         \"pytest Documentation\",\n-        \"holger krekel, trainer and consultant, http://merlinux.eu\",\n+        \"holger krekel, trainer and consultant, https://merlinux.eu/\",\n         \"manual\",\n     )\n ]"
    },
    {
        "commit_id": "134d8f78d886d5a552bd4f56209af5554bef14a1",
        "commit_message": "Merge pull request #8595 from nschloe/url-fixes\n\n\"fix\" a couple of http -> https redirects",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/134d8f78d886d5a552bd4f56209af5554bef14a1",
        "buggy_code": "See http://docs.python.org/library/warnings.html for information",
        "fixed_code": "See https://docs.python.org/library/warnings.html for information",
        "patch": "@@ -28,7 +28,7 @@\n def recwarn() -> Generator[\"WarningsRecorder\", None, None]:\n     \"\"\"Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.\n \n-    See http://docs.python.org/library/warnings.html for information\n+    See https://docs.python.org/library/warnings.html for information\n     on warning categories.\n     \"\"\"\n     wrec = WarningsRecorder(_ispytest=True)"
    },
    {
        "commit_id": "9ef608ef76a758b34550a977cc3ebe521986cc4e",
        "commit_message": "\"fix\" a couple of http -> https redirects\n\nFound with\nurli-fix . -a http: -i pytest",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ef608ef76a758b34550a977cc3ebe521986cc4e",
        "buggy_code": "\"holger krekel, trainer and consultant, http://merlinux.eu\",",
        "fixed_code": "\"holger krekel, trainer and consultant, https://merlinux.eu/\",",
        "patch": "@@ -252,7 +252,7 @@\n         \"contents\",\n         \"pytest.tex\",\n         \"pytest Documentation\",\n-        \"holger krekel, trainer and consultant, http://merlinux.eu\",\n+        \"holger krekel, trainer and consultant, https://merlinux.eu/\",\n         \"manual\",\n     )\n ]"
    },
    {
        "commit_id": "9ef608ef76a758b34550a977cc3ebe521986cc4e",
        "commit_message": "\"fix\" a couple of http -> https redirects\n\nFound with\nurli-fix . -a http: -i pytest",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ef608ef76a758b34550a977cc3ebe521986cc4e",
        "buggy_code": "See http://docs.python.org/library/warnings.html for information",
        "fixed_code": "See https://docs.python.org/library/warnings.html for information",
        "patch": "@@ -28,7 +28,7 @@\n def recwarn() -> Generator[\"WarningsRecorder\", None, None]:\n     \"\"\"Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.\n \n-    See http://docs.python.org/library/warnings.html for information\n+    See https://docs.python.org/library/warnings.html for information\n     on warning categories.\n     \"\"\"\n     wrec = WarningsRecorder(_ispytest=True)"
    },
    {
        "commit_id": "fbe66244b8b9e2aabe14a524565664eeca42dc90",
        "commit_message": "Fix some typos, remove redundant words and escapes (#8564)\n\n* doc: Fix typos, remove double words\n\n* Remove redundant escapes in regex",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fbe66244b8b9e2aabe14a524565664eeca42dc90",
        "buggy_code": "m = re.match(r\"@pytestbot please prepare (major )?release from ([\\w\\-_\\.]+)\", body)",
        "fixed_code": "m = re.match(r\"@pytestbot please prepare (major )?release from ([-_.\\w]+)\", body)",
        "patch": "@@ -82,7 +82,7 @@ def validate_and_get_issue_comment_payload(\n ) -> Tuple[str, str, bool]:\n     payload = json.loads(issue_payload_path.read_text(encoding=\"UTF-8\"))\n     body = get_comment_data(payload)[\"body\"]\n-    m = re.match(r\"@pytestbot please prepare (major )?release from ([\\w\\-_\\.]+)\", body)\n+    m = re.match(r\"@pytestbot please prepare (major )?release from ([-_.\\w]+)\", body)\n     if m:\n         is_major, base_branch = m.group(1) is not None, m.group(2)\n     else:"
    },
    {
        "commit_id": "fbe66244b8b9e2aabe14a524565664eeca42dc90",
        "commit_message": "Fix some typos, remove redundant words and escapes (#8564)\n\n* doc: Fix typos, remove double words\n\n* Remove redundant escapes in regex",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fbe66244b8b9e2aabe14a524565664eeca42dc90",
        "buggy_code": "\"\"\"Store is a type-safe heterogenous mutable mapping that",
        "fixed_code": "\"\"\"Store is a type-safe heterogeneous mutable mapping that",
        "patch": "@@ -25,7 +25,7 @@ class StoreKey(Generic[T]):\n \n \n class Store:\n-    \"\"\"Store is a type-safe heterogenous mutable mapping that\n+    \"\"\"Store is a type-safe heterogeneous mutable mapping that\n     allows keys and value types to be defined separately from\n     where it (the Store) is created.\n "
    },
    {
        "commit_id": "9078c3ce23882b9dce941b971b919f52ac72c0d5",
        "commit_message": "fix #8464 wrong root dir when -c is passed (#8537)\n\nfix #8464 wrong root dir when -c is passed",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9078c3ce23882b9dce941b971b919f52ac72c0d5",
        "buggy_code": "rootdir = get_common_ancestor(dirs)",
        "fixed_code": "rootdir = inipath_.parent",
        "patch": "@@ -176,7 +176,7 @@ def determine_setup(\n         inipath: Optional[Path] = inipath_\n         inicfg = load_config_dict_from_file(inipath_) or {}\n         if rootdir_cmd_arg is None:\n-            rootdir = get_common_ancestor(dirs)\n+            rootdir = inipath_.parent\n     else:\n         ancestor = get_common_ancestor(dirs)\n         rootdir, inipath, inicfg = locate_config([ancestor])"
    },
    {
        "commit_id": "b706a2c04840a8057610f41071fbcf3da1290eb5",
        "commit_message": "Fix error with --import-mode=importlib and modules containing dataclasses or pickle (#7870)\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\nFixes #7856, fixes #7859",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b706a2c04840a8057610f41071fbcf3da1290eb5",
        "buggy_code": "mod = import_path(self.path, mode=importmode)",
        "fixed_code": "mod = import_path(self.path, mode=importmode, root=self.config.rootpath)",
        "patch": "@@ -577,7 +577,7 @@ def _importtestmodule(self):\n         # We assume we are only called once per module.\n         importmode = self.config.getoption(\"--import-mode\")\n         try:\n-            mod = import_path(self.path, mode=importmode)\n+            mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n         except SyntaxError as e:\n             raise self.CollectError(\n                 ExceptionInfo.from_current().getrepr(style=\"short\")"
    },
    {
        "commit_id": "b706a2c04840a8057610f41071fbcf3da1290eb5",
        "commit_message": "Fix error with --import-mode=importlib and modules containing dataclasses or pickle (#7870)\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>\r\n\r\nFixes #7856, fixes #7859",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b706a2c04840a8057610f41071fbcf3da1290eb5",
        "buggy_code": "mod: Any = import_path(path)",
        "fixed_code": "mod: Any = import_path(path, root=tmp_path)",
        "patch": "@@ -298,7 +298,7 @@ def method(self):\n     )\n     path = tmp_path.joinpath(\"a.py\")\n     path.write_text(str(source))\n-    mod: Any = import_path(path)\n+    mod: Any = import_path(path, root=tmp_path)\n     s2 = Source(mod.A)\n     assert str(source).strip() == str(s2).strip()\n "
    },
    {
        "commit_id": "b96e229c955cf22ebd4af50b0afb2289b8cd74c9",
        "commit_message": "Fix plugin-list label in the docs (#8505)\n\nLast time I \"fixed\" this I left a `\\` at the start of the string\r\nto avoid an initial newline, but didn't realize it was a raw string.\r\n\r\nThis should fix it now for good.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b96e229c955cf22ebd4af50b0afb2289b8cd74c9",
        "buggy_code": "FILE_HEAD = r\"\"\"\\",
        "fixed_code": "FILE_HEAD = r\"\"\"",
        "patch": "@@ -6,7 +6,7 @@\n import requests\n import tabulate\n \n-FILE_HEAD = r\"\"\"\\\n+FILE_HEAD = r\"\"\"\n .. _plugin-list:\n \n Plugin List"
    },
    {
        "commit_id": "fb481c7e6f86dcae013204240bcac248fed6c1da",
        "commit_message": "fix typo (#8460)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fb481c7e6f86dcae013204240bcac248fed6c1da",
        "buggy_code": "\"\"\"Backward comptibility wrapper that implements :class:``_pytest.compat.LEGACY_PATH``",
        "fixed_code": "\"\"\"Backward compatibility wrapper that implements :class:``_pytest.compat.LEGACY_PATH``",
        "patch": "@@ -134,7 +134,7 @@ def getbasetemp(self) -> Path:\n @final\n @attr.s(init=False)\n class TempdirFactory:\n-    \"\"\"Backward comptibility wrapper that implements :class:``_pytest.compat.LEGACY_PATH``\n+    \"\"\"Backward compatibility wrapper that implements :class:``_pytest.compat.LEGACY_PATH``\n     for :class:``TempPathFactory``.\"\"\"\n \n     _tmppath_factory = attr.ib(type=TempPathFactory)"
    },
    {
        "commit_id": "dd3709718de683a10361e7f5b1f882164b1fa391",
        "commit_message": "Merge pull request #8453 from encukou/rel-error-message\n\nFix value in error message about negative relative tolerance",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd3709718de683a10361e7f5b1f882164b1fa391",
        "buggy_code": "f\"relative tolerance can't be negative: {absolute_tolerance}\"",
        "fixed_code": "f\"relative tolerance can't be negative: {relative_tolerance}\"",
        "patch": "@@ -319,7 +319,7 @@ def set_default(x, default):\n \n         if relative_tolerance < 0:\n             raise ValueError(\n-                f\"relative tolerance can't be negative: {absolute_tolerance}\"\n+                f\"relative tolerance can't be negative: {relative_tolerance}\"\n             )\n         if math.isnan(relative_tolerance):\n             raise ValueError(\"relative tolerance can't be NaN.\")"
    },
    {
        "commit_id": "1f131afb078e714521ed4e400ad7bfeb5836dd14",
        "commit_message": "Fix value in error message about negative relative tolerance",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1f131afb078e714521ed4e400ad7bfeb5836dd14",
        "buggy_code": "f\"relative tolerance can't be negative: {absolute_tolerance}\"",
        "fixed_code": "f\"relative tolerance can't be negative: {relative_tolerance}\"",
        "patch": "@@ -317,7 +317,7 @@ def set_default(x, default):\n \n         if relative_tolerance < 0:\n             raise ValueError(\n-                f\"relative tolerance can't be negative: {absolute_tolerance}\"\n+                f\"relative tolerance can't be negative: {relative_tolerance}\"\n             )\n         if math.isnan(relative_tolerance):\n             raise ValueError(\"relative tolerance can't be NaN.\")"
    },
    {
        "commit_id": "02e69e5cdcb813137097aeb100493a421507a3a3",
        "commit_message": "Merge pull request #8152 from bluetech/empty-skip\n\nterminal: fix \"(<Skipped instance>)\" skip reason in test status line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/02e69e5cdcb813137097aeb100493a421507a3a3",
        "buggy_code": "if self.msg:",
        "fixed_code": "if self.msg is not None:",
        "patch": "@@ -38,7 +38,7 @@ def __init__(self, msg: Optional[str] = None, pytrace: bool = True) -> None:\n         self.pytrace = pytrace\n \n     def __repr__(self) -> str:\n-        if self.msg:\n+        if self.msg is not None:\n             return self.msg\n         return f\"<{self.__class__.__name__} instance>\"\n "
    },
    {
        "commit_id": "d46ecbc18b74b895b71e257bf07836cd2cfae89e",
        "commit_message": "terminal: fix \"(<Skipped instance>)\" skip reason in test status line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d46ecbc18b74b895b71e257bf07836cd2cfae89e",
        "buggy_code": "if self.msg:",
        "fixed_code": "if self.msg is not None:",
        "patch": "@@ -38,7 +38,7 @@ def __init__(self, msg: Optional[str] = None, pytrace: bool = True) -> None:\n         self.pytrace = pytrace\n \n     def __repr__(self) -> str:\n-        if self.msg:\n+        if self.msg is not None:\n             return self.msg\n         return f\"<{self.__class__.__name__} instance>\"\n "
    },
    {
        "commit_id": "70823da7ed68a3fc2f9e562407fab212e35b2d2b",
        "commit_message": "Merge pull request #8064 from symonk/fix-typo-in-mock-timing\n\nfix mock_timing fixture name (typo) in timing.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/70823da7ed68a3fc2f9e562407fab212e35b2d2b",
        "buggy_code": "Fixture \"mock_timinig\" also interacts with this module for pytest's own tests.",
        "fixed_code": "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
        "patch": "@@ -3,7 +3,7 @@\n We intentionally grab some \"time\" functions internally to avoid tests mocking \"time\" to affect\n pytest runtime information (issue #185).\n \n-Fixture \"mock_timinig\" also interacts with this module for pytest's own tests.\n+Fixture \"mock_timing\" also interacts with this module for pytest's own tests.\n \"\"\"\n from time import perf_counter\n from time import sleep"
    },
    {
        "commit_id": "d27806295a3a7249839491e82d0b87bdfbf37383",
        "commit_message": "fix typo (#8069)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d27806295a3a7249839491e82d0b87bdfbf37383",
        "buggy_code": "so the the python-argcomplete-check-easy-install-script does not",
        "fixed_code": "so the python-argcomplete-check-easy-install-script does not",
        "patch": "@@ -26,7 +26,7 @@\n uses a python program to determine startup script generated by pip.\n You can speed up completion somewhat by changing this script to include\n   # PYTHON_ARGCOMPLETE_OK\n-so the the python-argcomplete-check-easy-install-script does not\n+so the python-argcomplete-check-easy-install-script does not\n need to be called to find the entry point of the code and see if that is\n marked  with PYTHON_ARGCOMPLETE_OK.\n "
    },
    {
        "commit_id": "b3108723007e32fcb650a2ade8c697f12fd3f716",
        "commit_message": "fix mock_timing fixture name (typo) in timing.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b3108723007e32fcb650a2ade8c697f12fd3f716",
        "buggy_code": "Fixture \"mock_timinig\" also interacts with this module for pytest's own tests.",
        "fixed_code": "Fixture \"mock_timing\" also interacts with this module for pytest's own tests.",
        "patch": "@@ -3,7 +3,7 @@\n We intentionally grab some \"time\" functions internally to avoid tests mocking \"time\" to affect\n pytest runtime information (issue #185).\n \n-Fixture \"mock_timinig\" also interacts with this module for pytest's own tests.\n+Fixture \"mock_timing\" also interacts with this module for pytest's own tests.\n \"\"\"\n from time import perf_counter\n from time import sleep"
    },
    {
        "commit_id": "f1e6fdcddbfe8991935685ccc5049dd957ec4382",
        "commit_message": "Export types of builtin fixture for type annotations\n\nIn order to allow users to type annotate fixtures they request, the\ntypes need to be imported from the `pytest` namespace. They are/were\nalways available to import from the `_pytest` namespace, but that is\nnot guaranteed to be stable.\n\nThese types are only exported for the purpose of typing. Specifically,\nthe following are *not* public:\n\n- Construction (`__init__`)\n- Subclassing\n- staticmethods and classmethods\n\nWe try to combat them being used anyway by:\n\n- Marking the classes as `@final` when possible (already done).\n\n- Not documenting private stuff in the API Reference.\n\n- Using `_`-prefixed names or marking as `:meta private:` for private\n  stuff.\n\n- Adding a keyword-only `_ispytest=False` to private constructors,\n  warning if False, and changing pytest itself to pass True. In the\n  future it will (hopefully) become a hard error.\n\nHopefully that will be enough.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1e6fdcddbfe8991935685ccc5049dd957ec4382",
        "buggy_code": "fixture_request = FixtureRequest(doctest_item)",
        "fixed_code": "fixture_request = FixtureRequest(doctest_item, _ispytest=True)",
        "patch": "@@ -563,7 +563,7 @@ def func() -> None:\n     doctest_item._fixtureinfo = fm.getfixtureinfo(  # type: ignore[attr-defined]\n         node=doctest_item, func=func, cls=None, funcargs=False\n     )\n-    fixture_request = FixtureRequest(doctest_item)\n+    fixture_request = FixtureRequest(doctest_item, _ispytest=True)\n     fixture_request._fillfixtures()\n     return fixture_request\n "
    },
    {
        "commit_id": "f1e6fdcddbfe8991935685ccc5049dd957ec4382",
        "commit_message": "Export types of builtin fixture for type annotations\n\nIn order to allow users to type annotate fixtures they request, the\ntypes need to be imported from the `pytest` namespace. They are/were\nalways available to import from the `_pytest` namespace, but that is\nnot guaranteed to be stable.\n\nThese types are only exported for the purpose of typing. Specifically,\nthe following are *not* public:\n\n- Construction (`__init__`)\n- Subclassing\n- staticmethods and classmethods\n\nWe try to combat them being used anyway by:\n\n- Marking the classes as `@final` when possible (already done).\n\n- Not documenting private stuff in the API Reference.\n\n- Using `_`-prefixed names or marking as `:meta private:` for private\n  stuff.\n\n- Adding a keyword-only `_ispytest=False` to private constructors,\n  warning if False, and changing pytest itself to pass True. In the\n  future it will (hopefully) become a hard error.\n\nHopefully that will be enough.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1e6fdcddbfe8991935685ccc5049dd957ec4382",
        "buggy_code": "self._request = fixtures.FixtureRequest(self)",
        "fixed_code": "self._request = fixtures.FixtureRequest(self, _ispytest=True)",
        "patch": "@@ -1620,7 +1620,7 @@ def from_parent(cls, parent, **kw):  # todo: determine sound type limitations\n \n     def _initrequest(self) -> None:\n         self.funcargs: Dict[str, object] = {}\n-        self._request = fixtures.FixtureRequest(self)\n+        self._request = fixtures.FixtureRequest(self, _ispytest=True)\n \n     @property\n     def function(self):"
    },
    {
        "commit_id": "30287b49cd02b6a14ade1bbe9adf9711c3d1259e",
        "commit_message": "Deprecate --strict (#7985)\n\nFix #7530",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30287b49cd02b6a14ade1bbe9adf9711c3d1259e",
        "buggy_code": "if self._config.option.strict_markers:",
        "fixed_code": "if self._config.option.strict_markers or self._config.option.strict:",
        "patch": "@@ -496,7 +496,7 @@ def __getattr__(self, name: str) -> MarkDecorator:\n             # If the name is not in the set of known marks after updating,\n             # then it really is time to issue a warning or an error.\n             if name not in self._markers:\n-                if self._config.option.strict_markers:\n+                if self._config.option.strict_markers or self._config.option.strict:\n                     fail(\n                         f\"{name!r} not found in `markers` configuration option\",\n                         pytrace=False,"
    },
    {
        "commit_id": "a14a229d1bb9a7fe75799caa974b2cfb8f02f8b3",
        "commit_message": "Merge pull request #7982 from bluetech/symlink-collect\n\npathlib: fix symlinked directories not followed during collection",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a14a229d1bb9a7fe75799caa974b2cfb8f02f8b3",
        "buggy_code": "if entry.is_dir(follow_symlinks=False) and recurse(entry):",
        "fixed_code": "if entry.is_dir() and recurse(entry):",
        "patch": "@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n "
    },
    {
        "commit_id": "6cdae8ed40e329d82c6ae96dbb3eeff4be5ef5f4",
        "commit_message": "pathlib: fix symlinked directories not followed during collection",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6cdae8ed40e329d82c6ae96dbb3eeff4be5ef5f4",
        "buggy_code": "if entry.is_dir(follow_symlinks=False) and recurse(entry):",
        "fixed_code": "if entry.is_dir() and recurse(entry):",
        "patch": "@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n "
    },
    {
        "commit_id": "65e6e39b76c236999fc53823892c26367a85a8f8",
        "commit_message": "Merge pull request #7931 from bluetech/xunit-quadratic-2\n\nfixtures: fix quadratic behavior in the number of autouse fixtures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/65e6e39b76c236999fc53823892c26367a85a8f8",
        "buggy_code": "autousenames = fm._getautousenames(item.nodeid)",
        "fixed_code": "autousenames = list(fm._getautousenames(item.nodeid))",
        "patch": "@@ -1710,7 +1710,7 @@ def test_parsefactories_conftest(self, testdir):\n             \"\"\"\n             from _pytest.pytester import get_public_names\n             def test_check_setup(item, fm):\n-                autousenames = fm._getautousenames(item.nodeid)\n+                autousenames = list(fm._getautousenames(item.nodeid))\n                 assert len(get_public_names(autousenames)) == 2\n                 assert \"perfunction2\" in autousenames\n                 assert \"perfunction\" in autousenames"
    },
    {
        "commit_id": "e5e47c1097e6f9e7bd30e28d508dca489f0629c6",
        "commit_message": "Fix typing related to iniconfig\n\niniconfig now has typing stubs which reveal a couple issues.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e5e47c1097e6f9e7bd30e28d508dca489f0629c6",
        "buggy_code": "return iniconfig.IniConfig(path)",
        "fixed_code": "return iniconfig.IniConfig(str(path))",
        "patch": "@@ -27,7 +27,7 @@ def _parse_ini_config(path: Path) -> iniconfig.IniConfig:\n     Raise UsageError if the file cannot be parsed.\n     \"\"\"\n     try:\n-        return iniconfig.IniConfig(path)\n+        return iniconfig.IniConfig(str(path))\n     except iniconfig.ParseError as exc:\n         raise UsageError(str(exc)) from exc\n "
    },
    {
        "commit_id": "7581f0b3a156536130bc34f8bec9738be5abc3b1",
        "commit_message": "Merge pull request #7853 from albertvillanova/doc-patch-1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7581f0b3a156536130bc34f8bec9738be5abc3b1",
        "buggy_code": "__ http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.isclose.html",
        "fixed_code": "__ https://numpy.org/doc/stable/reference/generated/numpy.isclose.html",
        "patch": "@@ -456,7 +456,7 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n       think of ``b`` as the reference value.  Support for comparing sequences\n       is provided by ``numpy.allclose``.  `More information...`__\n \n-      __ http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.isclose.html\n+      __ https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\n \n     - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``\n       are within an absolute tolerance of ``1e-7``.  No relative tolerance is"
    },
    {
        "commit_id": "ced0a52a87a4afa02f81a3823d4842cd6c5343e0",
        "commit_message": "Merge pull request #7837 from asottile/py36_union_pattern_match\n\npy36+: remove workaround for Union[Pattern/Match] bug",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ced0a52a87a4afa02f81a3823d4842cd6c5343e0",
        "buggy_code": "def match(self, regexp: \"Union[str, Pattern[str]]\") -> \"Literal[True]\":",
        "fixed_code": "def match(self, regexp: Union[str, Pattern[str]]) -> \"Literal[True]\":",
        "patch": "@@ -625,7 +625,7 @@ def getrepr(\n         )\n         return fmt.repr_excinfo(self)\n \n-    def match(self, regexp: \"Union[str, Pattern[str]]\") -> \"Literal[True]\":\n+    def match(self, regexp: Union[str, Pattern[str]]) -> \"Literal[True]\":\n         \"\"\"Check whether the regular expression `regexp` matches the string\n         representation of the exception using :func:`python:re.search`.\n "
    },
    {
        "commit_id": "e622cb7c4122abcf38a6482b1ef54b5c6cdb936a",
        "commit_message": "py36+: remove workaround for Union[Pattern/Match] bug",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e622cb7c4122abcf38a6482b1ef54b5c6cdb936a",
        "buggy_code": "def match(self, regexp: \"Union[str, Pattern[str]]\") -> \"Literal[True]\":",
        "fixed_code": "def match(self, regexp: Union[str, Pattern[str]]) -> \"Literal[True]\":",
        "patch": "@@ -625,7 +625,7 @@ def getrepr(\n         )\n         return fmt.repr_excinfo(self)\n \n-    def match(self, regexp: \"Union[str, Pattern[str]]\") -> \"Literal[True]\":\n+    def match(self, regexp: Union[str, Pattern[str]]) -> \"Literal[True]\":\n         \"\"\"Check whether the regular expression `regexp` matches the string\n         representation of the exception using :func:`python:re.search`.\n "
    },
    {
        "commit_id": "28ba9ab7371fe2b0582d7a5d6fb4bea6485850e2",
        "commit_message": "Merge pull request #7801 from pytest-dev/fix-bot-typo\n\nFix typos in pytestbot",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/28ba9ab7371fe2b0582d7a5d6fb4bea6485850e2",
        "buggy_code": "created from `master`.\":",
        "fixed_code": "created from `master`:",
        "patch": "@@ -227,7 +227,7 @@ def find_next_version(base_branch: str, is_major: bool) -> str:\n         msg = dedent(\n             f\"\"\"\n             Found features or breaking changes in `{base_branch}`, and feature releases can only be\n-            created from `master`.\":\n+            created from `master`:\n         \"\"\"\n         )\n         msg += \"\\n\".join(f\"* `{x.name}`\" for x in sorted(features + breaking))"
    },
    {
        "commit_id": "14de6781d89a5ec17a2f2486aa27b41d16f8bf3d",
        "commit_message": "Fix typos in pytestbot",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/14de6781d89a5ec17a2f2486aa27b41d16f8bf3d",
        "buggy_code": "created from `master`.\":",
        "fixed_code": "created from `master`:",
        "patch": "@@ -227,7 +227,7 @@ def find_next_version(base_branch: str, is_major: bool) -> str:\n         msg = dedent(\n             f\"\"\"\n             Found features or breaking changes in `{base_branch}`, and feature releases can only be\n-            created from `master`.\":\n+            created from `master`:\n         \"\"\"\n         )\n         msg += \"\\n\".join(f\"* `{x.name}`\" for x in sorted(features + breaking))"
    },
    {
        "commit_id": "78ed3e48db7766ccef1b2c456879b6ee01df0986",
        "commit_message": "Merge pull request #7729 from bluetech/doc-fix-crossrefs\n\ndoc: fix a few broken cross references",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78ed3e48db7766ccef1b2c456879b6ee01df0986",
        "buggy_code": "\"\"\"Same as :meth:`TempPathFactory.mkdir`, but returns a ``py.path.local`` object.\"\"\"",
        "fixed_code": "\"\"\"Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.\"\"\"",
        "patch": "@@ -111,7 +111,7 @@ class TempdirFactory:\n     _tmppath_factory = attr.ib(type=TempPathFactory)\n \n     def mktemp(self, basename: str, numbered: bool = True) -> py.path.local:\n-        \"\"\"Same as :meth:`TempPathFactory.mkdir`, but returns a ``py.path.local`` object.\"\"\"\n+        \"\"\"Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.\"\"\"\n         return py.path.local(self._tmppath_factory.mktemp(basename, numbered).resolve())\n \n     def getbasetemp(self) -> py.path.local:"
    },
    {
        "commit_id": "e503c9a9f80ed2bd41e8ab643261bdb83607dc08",
        "commit_message": "doc: fix broken cross references",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e503c9a9f80ed2bd41e8ab643261bdb83607dc08",
        "buggy_code": "\"\"\"Same as :meth:`TempPathFactory.mkdir`, but returns a ``py.path.local`` object.\"\"\"",
        "fixed_code": "\"\"\"Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.\"\"\"",
        "patch": "@@ -111,7 +111,7 @@ class TempdirFactory:\n     _tmppath_factory = attr.ib(type=TempPathFactory)\n \n     def mktemp(self, basename: str, numbered: bool = True) -> py.path.local:\n-        \"\"\"Same as :meth:`TempPathFactory.mkdir`, but returns a ``py.path.local`` object.\"\"\"\n+        \"\"\"Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.\"\"\"\n         return py.path.local(self._tmppath_factory.mktemp(basename, numbered).resolve())\n \n     def getbasetemp(self) -> py.path.local:"
    },
    {
        "commit_id": "6cf89338d31773919db5f8d41a84d7e5762ee97d",
        "commit_message": "Merge pull request #7677 from bluetech/flaky-no-tests-ran\n\ntesting: fix flaky test when executed slowly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6cf89338d31773919db5f8d41a84d7e5762ee97d",
        "buggy_code": "\"no tests ran in [0-1].[0-9][0-9]s\",",
        "fixed_code": "\"no tests ran in [0-9].[0-9][0-9]s\",",
        "patch": "@@ -899,7 +899,7 @@ def test_simple():\n         expected_lines.extend(\n             [\n                 \"*test_collection_collect_only_live_logging.py::test_simple*\",\n-                \"no tests ran in [0-1].[0-9][0-9]s\",\n+                \"no tests ran in [0-9].[0-9][0-9]s\",\n             ]\n         )\n     elif verbose == \"-qq\":"
    },
    {
        "commit_id": "b47b488e3dca00d241daaccf4d155a2440a8d0ae",
        "commit_message": "testing: fix flaky test when executed slowly\n\nThe 0-1 was a bit too optimistic: CI got \"no tests ran in 3.98s\".",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b47b488e3dca00d241daaccf4d155a2440a8d0ae",
        "buggy_code": "\"no tests ran in [0-1].[0-9][0-9]s\",",
        "fixed_code": "\"no tests ran in [0-9].[0-9][0-9]s\",",
        "patch": "@@ -899,7 +899,7 @@ def test_simple():\n         expected_lines.extend(\n             [\n                 \"*test_collection_collect_only_live_logging.py::test_simple*\",\n-                \"no tests ran in [0-1].[0-9][0-9]s\",\n+                \"no tests ran in [0-9].[0-9][0-9]s\",\n             ]\n         )\n     elif verbose == \"-qq\":"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "source: \"Source\",",
        "fixed_code": "source: Optional[\"Source\"],",
        "patch": "@@ -676,7 +676,7 @@ def repr_args(self, entry: TracebackEntry) -> Optional[\"ReprFuncArgs\"]:\n \n     def get_source(\n         self,\n-        source: \"Source\",\n+        source: Optional[\"Source\"],\n         line_index: int = -1,\n         excinfo: Optional[ExceptionInfo[BaseException]] = None,\n         short: bool = False,"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "msg = \"expected module names as *args, got {0} instead\"",
        "fixed_code": "msg = \"expected module names as *args, got {0} instead\"  # type: ignore[unreachable]",
        "patch": "@@ -57,7 +57,7 @@ def register_assert_rewrite(*names: str) -> None:\n     \"\"\"\n     for name in names:\n         if not isinstance(name, str):\n-            msg = \"expected module names as *args, got {0} instead\"\n+            msg = \"expected module names as *args, got {0} instead\"  # type: ignore[unreachable]\n             raise TypeError(msg.format(repr(names)))\n     for hook in sys.meta_path:\n         if isinstance(hook, rewrite.AssertionRewritingHook):"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "if not hasattr(stream, \"buffer\"):",
        "fixed_code": "if not hasattr(stream, \"buffer\"):  # type: ignore[unreachable]",
        "patch": "@@ -116,7 +116,7 @@ def _py36_windowsconsoleio_workaround(stream: TextIO) -> None:\n         return\n \n     # Bail out if ``stream`` doesn't seem like a proper ``io`` stream (#2666).\n-    if not hasattr(stream, \"buffer\"):\n+    if not hasattr(stream, \"buffer\"):  # type: ignore[unreachable]\n         return\n \n     buffered = hasattr(stream.buffer, \"raw\")"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "return False",
        "fixed_code": "return False  # type: ignore[unreachable]",
        "patch": "@@ -1390,7 +1390,7 @@ def _assertion_supported() -> bool:\n     except AssertionError:\n         return True\n     else:\n-        return False\n+        return False  # type: ignore[unreachable]\n \n \n def create_terminal_writer("
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "common_ancestor = None",
        "fixed_code": "common_ancestor = None  # type: Optional[py.path.local]",
        "patch": "@@ -107,7 +107,7 @@ def locate_config(\n \n \n def get_common_ancestor(paths: Iterable[py.path.local]) -> py.path.local:\n-    common_ancestor = None\n+    common_ancestor = None  # type: Optional[py.path.local]\n     for path in paths:\n         if not path.exists():\n             continue"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "msg = \"{param} parameter needs to be a string, but {g} given\"",
        "fixed_code": "msg = \"{param} parameter needs to be a string, but {g} given\"  # type: ignore[unreachable]",
        "patch": "@@ -330,7 +330,7 @@ def _check_record_param_type(param: str, v: str) -> None:\n     type.\"\"\"\n     __tracebackhide__ = True\n     if not isinstance(v, str):\n-        msg = \"{param} parameter needs to be a string, but {g} given\"\n+        msg = \"{param} parameter needs to be a string, but {g} given\"  # type: ignore[unreachable]\n         raise TypeError(msg.format(param=param, g=type(v).__name__))\n \n "
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "error_msg = (",
        "fixed_code": "error_msg = (  # type: ignore[unreachable]",
        "patch": "@@ -28,7 +28,7 @@ class OutcomeException(BaseException):\n \n     def __init__(self, msg: Optional[str] = None, pytrace: bool = True) -> None:\n         if msg is not None and not isinstance(msg, str):\n-            error_msg = (\n+            error_msg = (  # type: ignore[unreachable]\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                 \"Perhaps you meant to use a mark?\"\n             )"
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "type=Path,",
        "fixed_code": "type=Optional[Path],",
        "patch": "@@ -26,7 +26,7 @@ class TempPathFactory:\n     \"\"\"\n \n     _given_basetemp = attr.ib(\n-        type=Path,\n+        type=Optional[Path],\n         # Use os.path.abspath() to get absolute path instead of resolve() as it\n         # does not work the same in all platforms (see #4427).\n         # Path.absolute() exists, but it is not public (see https://bugs.python.org/issue25012)."
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "teardown()",
        "fixed_code": "teardown()  # type: ignore[unreachable]",
        "patch": "@@ -238,7 +238,7 @@ def c() -> None:\n             c(1)  # type: ignore\n         finally:\n             if teardown:\n-                teardown()\n+                teardown()  # type: ignore[unreachable]\n     source = excinfo.traceback[-1].statement\n     assert str(source).strip() == \"c(1)  # type: ignore\"\n "
    },
    {
        "commit_id": "9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "commit_message": "typing: set warn_unreachable\n\nThis makes mypy raise an error whenever it detects code which is\nstatically unreachable, e.g.\n\n    x: int\n    if isinstance(x, str):\n        ... # Statement is unreachable  [unreachable]\n\nThis is really neat and finds quite a few logic and typing bugs.\n\nSometimes the code is intentionally unreachable in terms of types, e.g.\nraising TypeError when a function is given an argument with a wrong\ntype. In these cases a `type: ignore[unreachable]` is needed, but I\nthink it's a nice code hint.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ab14c6d9cc8318f62d14e0c49ca37a13972bd0e",
        "buggy_code": "monkeypatch.undo()",
        "fixed_code": "monkeypatch.undo()  # type: ignore[unreachable]",
        "patch": "@@ -360,7 +360,7 @@ def test_issue156_undo_staticmethod(Sample: \"Type[Sample]\") -> None:\n     monkeypatch.setattr(Sample, \"hello\", None)\n     assert Sample.hello is None\n \n-    monkeypatch.undo()\n+    monkeypatch.undo()  # type: ignore[unreachable]\n     assert Sample.hello()\n \n "
    },
    {
        "commit_id": "b8471aa527ab1a21ee66f24e5c23a9773b5b0793",
        "commit_message": "testing: fix some docstring issues\n\nIn preparation for enforcing some docstring lints.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b8471aa527ab1a21ee66f24e5c23a9773b5b0793",
        "buggy_code": "\"\"\" check if indentation is right \"\"\"",
        "fixed_code": "\"\"\"Check if indentation is right.\"\"\"",
        "patch": "@@ -464,7 +464,7 @@ def f(x):\n         assert lines[1] == \"        pass\"\n \n     def test_repr_source_excinfo(self) -> None:\n-        \"\"\" check if indentation is right \"\"\"\n+        \"\"\"Check if indentation is right.\"\"\"\n         try:\n \n             def f():"
    },
    {
        "commit_id": "b8471aa527ab1a21ee66f24e5c23a9773b5b0793",
        "commit_message": "testing: fix some docstring issues\n\nIn preparation for enforcing some docstring lints.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b8471aa527ab1a21ee66f24e5c23a9773b5b0793",
        "buggy_code": "\"\"\" Verifies that setups are shown and tests are executed. \"\"\"",
        "fixed_code": "\"\"\"Verify that setups are shown and tests are executed.\"\"\"",
        "patch": "@@ -254,7 +254,7 @@ def test_capturing(two):\n \n \n def test_show_fixtures_and_execute_test(testdir):\n-    \"\"\" Verifies that setups are shown and tests are executed. \"\"\"\n+    \"\"\"Verify that setups are shown and tests are executed.\"\"\"\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest"
    },
    {
        "commit_id": "8d98de8f8aef70a68ec98c1dd7ed0291efb37429",
        "commit_message": "typing: set no_implicit_reexport\n\nIn Python, if module A defines a name `name`, and module B does `import\nname from A`, then another module C can `import name from B`.\n\nSometimes it is intentional -- module B is meant to \"reexport\" `name`.\nBut sometimes it is just confusion/inconsistency on where `name` should\nbe imported from.\n\nmypy has a flag `--no-implicit-reexport` which puts some order into\nthis. A name can only be imported from a module if\n\n1. The module defines the name\n2. The module's `__all__` includes the name\n3. The module imports the name as `from ... import .. as name`.\n\nThis flag is included in mypy's `--strict` flag.\n\nI like this flag, but I realize it is a bit controversial, and in\nparticular item 3 above is a bit unfriendly to contributors who don't\nknow about it. So I didn't intend to add it to pytest.\n\nBut while investigating issue 7589 I came upon mypy issue 8754 which\ncauses `--no-implicit-reexport` to leak into installed libraries and\ncauses some unexpected typing differences *in pytest* if the user uses\nthis flag.\n\nSince the diff mostly makes sense, let's just conform to it.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8d98de8f8aef70a68ec98c1dd7ed0291efb37429",
        "buggy_code": "from .code import getrawcode",
        "fixed_code": "from .source import getrawcode",
        "patch": "@@ -4,9 +4,9 @@\n from .code import filter_traceback\n from .code import Frame\n from .code import getfslineno\n-from .code import getrawcode\n from .code import Traceback\n from .code import TracebackEntry\n+from .source import getrawcode\n from .source import Source\n \n __all__ = ["
    },
    {
        "commit_id": "8d98de8f8aef70a68ec98c1dd7ed0291efb37429",
        "commit_message": "typing: set no_implicit_reexport\n\nIn Python, if module A defines a name `name`, and module B does `import\nname from A`, then another module C can `import name from B`.\n\nSometimes it is intentional -- module B is meant to \"reexport\" `name`.\nBut sometimes it is just confusion/inconsistency on where `name` should\nbe imported from.\n\nmypy has a flag `--no-implicit-reexport` which puts some order into\nthis. A name can only be imported from a module if\n\n1. The module defines the name\n2. The module's `__all__` includes the name\n3. The module imports the name as `from ... import .. as name`.\n\nThis flag is included in mypy's `--strict` flag.\n\nI like this flag, but I realize it is a bit controversial, and in\nparticular item 3 above is a bit unfriendly to contributors who don't\nknow about it. So I didn't intend to add it to pytest.\n\nBut while investigating issue 7589 I came upon mypy issue 8754 which\ncauses `--no-implicit-reexport` to leak into installed libraries and\ncauses some unexpected typing differences *in pytest* if the user uses\nthis flag.\n\nSince the diff mostly makes sense, let's just conform to it.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8d98de8f8aef70a68ec98c1dd7ed0291efb37429",
        "buggy_code": "from _pytest.mark import EMPTY_PARAMETERSET_OPTION",
        "fixed_code": "from _pytest.mark.structures import EMPTY_PARAMETERSET_OPTION",
        "patch": "@@ -4,8 +4,8 @@\n \n import pytest\n from _pytest.config import ExitCode\n-from _pytest.mark import EMPTY_PARAMETERSET_OPTION\n from _pytest.mark import MarkGenerator as Mark\n+from _pytest.mark.structures import EMPTY_PARAMETERSET_OPTION\n from _pytest.nodes import Collector\n from _pytest.nodes import Node\n "
    },
    {
        "commit_id": "41c40efe80b174afeff5902c503720c0a02b318d",
        "commit_message": "Merge pull request #7496 from bluetech/typing-idfn\n\n Fix typing of params ids callable form",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/41c40efe80b174afeff5902c503720c0a02b318d",
        "buggy_code": "Callable[[object], Optional[object]],",
        "fixed_code": "Callable[[Any], Optional[object]],",
        "patch": "@@ -433,7 +433,7 @@ def __call__(  # type: ignore[override]\n             ids: Optional[\n                 Union[\n                     Iterable[Union[None, str, float, int, bool]],\n-                    Callable[[object], Optional[object]],\n+                    Callable[[Any], Optional[object]],\n                 ]\n             ] = ...,\n             scope: Optional[_Scope] = ..."
    },
    {
        "commit_id": "bc17034a67c2ce9cc9169fd85b65bdd2a92db772",
        "commit_message": "Fix typing of params ids callable form\n\nThe previous typing had an object passed to the user, which they can't\ndo anything with without asserting, which is inconvenient. Change it to\nAny instead.\n\nNote that what comes *back* to pytest (the return value) should be an\n`object`, because we want to handle arbitrary objects without assuming\nanything about them.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc17034a67c2ce9cc9169fd85b65bdd2a92db772",
        "buggy_code": "Callable[[object], Optional[object]],",
        "fixed_code": "Callable[[Any], Optional[object]],",
        "patch": "@@ -433,7 +433,7 @@ def __call__(  # type: ignore[override]\n             ids: Optional[\n                 Union[\n                     Iterable[Union[None, str, float, int, bool]],\n-                    Callable[[object], Optional[object]],\n+                    Callable[[Any], Optional[object]],\n                 ]\n             ] = ...,\n             scope: Optional[_Scope] = ..."
    },
    {
        "commit_id": "c6f4c2e5c64450c6e68129db44eb37dc329549a9",
        "commit_message": "Merge pull request #7402 from bluetech/fix-nodes-keywords-typo\n\nnodes: fix string possibly stored in Node.keywords instead of MarkDecorator",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c6f4c2e5c64450c6e68129db44eb37dc329549a9",
        "buggy_code": "self.keywords[marker_.name] = marker",
        "fixed_code": "self.keywords[marker_.name] = marker_",
        "patch": "@@ -276,7 +276,7 @@ def add_marker(\n             marker_ = getattr(MARK_GEN, marker)\n         else:\n             raise ValueError(\"is not a string or pytest.mark.* Marker\")\n-        self.keywords[marker_.name] = marker\n+        self.keywords[marker_.name] = marker_\n         if append:\n             self.own_markers.append(marker_.mark)\n         else:"
    },
    {
        "commit_id": "04a6d378234e3c72055c7e90084b1a2d36d3f89d",
        "commit_message": "nodes: fix string possibly stored in Node.keywords instead of MarkDecorator\n\nThis mistake was introduced in 7259c453d6c1dba6727cd328e6db5635ccf5821c.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/04a6d378234e3c72055c7e90084b1a2d36d3f89d",
        "buggy_code": "self.keywords[marker_.name] = marker",
        "fixed_code": "self.keywords[marker_.name] = marker_",
        "patch": "@@ -276,7 +276,7 @@ def add_marker(\n             marker_ = getattr(MARK_GEN, marker)\n         else:\n             raise ValueError(\"is not a string or pytest.mark.* Marker\")\n-        self.keywords[marker_.name] = marker\n+        self.keywords[marker_.name] = marker_\n         if append:\n             self.own_markers.append(marker_.mark)\n         else:"
    },
    {
        "commit_id": "83891d9022076375cede03bfd8c932d450e6fcf8",
        "commit_message": "Merge pull request #7387 from cool-RR/2020-06-11-raise-from\n\nFix exception causes all over the codebase",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/83891d9022076375cede03bfd8c932d450e6fcf8",
        "buggy_code": "raise newex",
        "fixed_code": "raise newex from ex",
        "patch": "@@ -215,7 +215,7 @@ def compile(  # noqa: F811\n             newex.offset = ex.offset\n             newex.lineno = ex.lineno\n             newex.text = ex.text\n-            raise newex\n+            raise newex from ex\n         else:\n             if flag & ast.PyCF_ONLY_AST:\n                 assert isinstance(co, ast.AST)"
    },
    {
        "commit_id": "83891d9022076375cede03bfd8c932d450e6fcf8",
        "commit_message": "Merge pull request #7387 from cool-RR/2020-06-11-raise-from\n\nFix exception causes all over the codebase",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/83891d9022076375cede03bfd8c932d450e6fcf8",
        "buggy_code": "raise UsageError(str(exc))",
        "fixed_code": "raise UsageError(str(exc)) from exc",
        "patch": "@@ -26,7 +26,7 @@ def _parse_ini_config(path: py.path.local) -> iniconfig.IniConfig:\n     try:\n         return iniconfig.IniConfig(path)\n     except iniconfig.ParseError as exc:\n-        raise UsageError(str(exc))\n+        raise UsageError(str(exc)) from exc\n \n \n def load_config_dict_from_file("
    },
    {
        "commit_id": "dd446bee5eb2d3ab0976309803dc77821eeac93e",
        "commit_message": "Fix exception causes all over the codebase",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd446bee5eb2d3ab0976309803dc77821eeac93e",
        "buggy_code": "raise newex",
        "fixed_code": "raise newex from ex",
        "patch": "@@ -215,7 +215,7 @@ def compile(  # noqa: F811\n             newex.offset = ex.offset\n             newex.lineno = ex.lineno\n             newex.text = ex.text\n-            raise newex\n+            raise newex from ex\n         else:\n             if flag & ast.PyCF_ONLY_AST:\n                 assert isinstance(co, ast.AST)"
    },
    {
        "commit_id": "dd446bee5eb2d3ab0976309803dc77821eeac93e",
        "commit_message": "Fix exception causes all over the codebase",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd446bee5eb2d3ab0976309803dc77821eeac93e",
        "buggy_code": "raise UsageError(str(exc))",
        "fixed_code": "raise UsageError(str(exc)) from exc",
        "patch": "@@ -26,7 +26,7 @@ def _parse_ini_config(path: py.path.local) -> iniconfig.IniConfig:\n     try:\n         return iniconfig.IniConfig(path)\n     except iniconfig.ParseError as exc:\n-        raise UsageError(str(exc))\n+        raise UsageError(str(exc)) from exc\n \n \n def load_config_dict_from_file("
    },
    {
        "commit_id": "31512197851e556f5ed8bb964d69eef6398294e4",
        "commit_message": "assertoutcomes() only accepts plural forms\n\nFix #6505",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/31512197851e556f5ed8bb964d69eef6398294e4",
        "buggy_code": "result.assert_outcomes(error=1)",
        "fixed_code": "result.assert_outcomes(errors=1)",
        "patch": "@@ -4342,6 +4342,6 @@ def test_fixt(custom):\n     )\n     expected = \"E               ValueError: custom did not yield a value\"\n     result = testdir.runpytest()\n-    result.assert_outcomes(error=1)\n+    result.assert_outcomes(errors=1)\n     result.stdout.fnmatch_lines([expected])\n     assert result.ret == ExitCode.TESTS_FAILED"
    },
    {
        "commit_id": "f551cab877fec160fcece9182217c7a2e85d83a9",
        "commit_message": "Merge pull request #7358 from bluetech/typing2\n\nMore type annotations, fix some typing bugs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f551cab877fec160fcece9182217c7a2e85d83a9",
        "buggy_code": "fpath = Path(self._config.rootdir, fpath)",
        "fixed_code": "fpath = Path(str(self._config.rootdir), fpath)",
        "patch": "@@ -586,7 +586,7 @@ def set_log_path(self, fname: str) -> None:\n         fpath = Path(fname)\n \n         if not fpath.is_absolute():\n-            fpath = Path(self._config.rootdir, fpath)\n+            fpath = Path(str(self._config.rootdir), fpath)\n \n         if not fpath.parent.exists():\n             fpath.parent.mkdir(exist_ok=True, parents=True)"
    },
    {
        "commit_id": "f551cab877fec160fcece9182217c7a2e85d83a9",
        "commit_message": "Merge pull request #7358 from bluetech/typing2\n\nMore type annotations, fix some typing bugs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f551cab877fec160fcece9182217c7a2e85d83a9",
        "buggy_code": "abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)",
        "fixed_code": "abspath = Path(os.getcwd()) != Path(str(self.config.invocation_dir))",
        "patch": "@@ -393,7 +393,7 @@ def _repr_failure_py(\n         # It will be better to just always display paths relative to invocation_dir, but\n         # this requires a lot of plumbing (#6428).\n         try:\n-            abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)\n+            abspath = Path(os.getcwd()) != Path(str(self.config.invocation_dir))\n         except OSError:\n             abspath = True\n "
    },
    {
        "commit_id": "f551cab877fec160fcece9182217c7a2e85d83a9",
        "commit_message": "Merge pull request #7358 from bluetech/typing2\n\nMore type annotations, fix some typing bugs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f551cab877fec160fcece9182217c7a2e85d83a9",
        "buggy_code": "return importlib.machinery.PathFinder.find_spec(name, path)  # type: ignore",
        "fixed_code": "return importlib.machinery.PathFinder.find_spec(name, path)",
        "patch": "@@ -1258,7 +1258,7 @@ def isinitpath(self, p):\n \n         def spy_find_spec(name, path):\n             self.find_spec_calls.append(name)\n-            return importlib.machinery.PathFinder.find_spec(name, path)  # type: ignore\n+            return importlib.machinery.PathFinder.find_spec(name, path)\n \n         hook = AssertionRewritingHook(pytestconfig)\n         # use default patterns, otherwise we inherit pytest's testing config"
    },
    {
        "commit_id": "1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "commit_message": "Fix some type errors around py.path.local\n\nThese errors are found using a typed version of py.path.local.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "buggy_code": "displaypath = cachedir.relative_to(config.rootdir)",
        "fixed_code": "displaypath = cachedir.relative_to(str(config.rootdir))",
        "patch": "@@ -495,7 +495,7 @@ def pytest_report_header(config: Config) -> Optional[str]:\n         # starting with .., ../.. if sensible\n \n         try:\n-            displaypath = cachedir.relative_to(config.rootdir)\n+            displaypath = cachedir.relative_to(str(config.rootdir))\n         except ValueError:\n             displaypath = cachedir\n         return \"cachedir: {}\".format(displaypath)"
    },
    {
        "commit_id": "1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "commit_message": "Fix some type errors around py.path.local\n\nThese errors are found using a typed version of py.path.local.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "buggy_code": "fpath = Path(self._config.rootdir, fpath)",
        "fixed_code": "fpath = Path(str(self._config.rootdir), fpath)",
        "patch": "@@ -586,7 +586,7 @@ def set_log_path(self, fname: str) -> None:\n         fpath = Path(fname)\n \n         if not fpath.is_absolute():\n-            fpath = Path(self._config.rootdir, fpath)\n+            fpath = Path(str(self._config.rootdir), fpath)\n \n         if not fpath.parent.exists():\n             fpath.parent.mkdir(exist_ok=True, parents=True)"
    },
    {
        "commit_id": "1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "commit_message": "Fix some type errors around py.path.local\n\nThese errors are found using a typed version of py.path.local.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1cf9405075d889dadae8f31de8b5715f959bcdf9",
        "buggy_code": "abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)",
        "fixed_code": "abspath = Path(os.getcwd()) != Path(str(self.config.invocation_dir))",
        "patch": "@@ -393,7 +393,7 @@ def _repr_failure_py(\n         # It will be better to just always display paths relative to invocation_dir, but\n         # this requires a lot of plumbing (#6428).\n         try:\n-            abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)\n+            abspath = Path(os.getcwd()) != Path(str(self.config.invocation_dir))\n         except OSError:\n             abspath = True\n "
    },
    {
        "commit_id": "c229d6f46ffc77c21ee8773cd341d25d4f8291ba",
        "commit_message": "Fix mypy checks",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c229d6f46ffc77c21ee8773cd341d25d4f8291ba",
        "buggy_code": "field_b: int = field()",
        "fixed_code": "field_b: str = field()",
        "patch": "@@ -5,7 +5,7 @@\n @dataclass\n class SimpleDataObject:\n     field_a: int = field()\n-    field_b: int = field()\n+    field_b: str = field()\n \n \n @dataclass"
    },
    {
        "commit_id": "322190fd84e1b86d7b9a2d71f086445ca80c39b3",
        "commit_message": "Fix issue where working dir becomes wrong on subst drive on Windows. Fixes #5965 (#6523)\n\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/322190fd84e1b86d7b9a2d71f086445ca80c39b3",
        "buggy_code": "p = py.path.local(plugin.__file__).realpath()  # type: ignore[attr-defined] # noqa: F821",
        "fixed_code": "p = py.path.local(plugin.__file__)  # type: ignore[attr-defined] # noqa: F821",
        "patch": "@@ -1496,7 +1496,7 @@ def getfixtureinfo(\n     def pytest_plugin_registered(self, plugin: _PluggyPlugin) -> None:\n         nodeid = None\n         try:\n-            p = py.path.local(plugin.__file__).realpath()  # type: ignore[attr-defined] # noqa: F821\n+            p = py.path.local(plugin.__file__)  # type: ignore[attr-defined] # noqa: F821\n         except AttributeError:\n             pass\n         else:"
    },
    {
        "commit_id": "7a8b8a5c9f67573e35f4e7610272c2acf2bfa502",
        "commit_message": "Merge branch 'master' into fix-flaky-test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7a8b8a5c9f67573e35f4e7610272c2acf2bfa502",
        "buggy_code": "assert callreport.longrepr == \"[XPASS(strict)] nope\"",
        "fixed_code": "assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"",
        "patch": "@@ -194,7 +194,7 @@ def test_func():\n         assert len(reports) == 3\n         callreport = reports[1]\n         assert callreport.failed\n-        assert callreport.longrepr == \"[XPASS(strict)] nope\"\n+        assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n     def test_xfail_run_anyway(self, testdir):"
    },
    {
        "commit_id": "94c7b8b47cd6b5b14f463731e473929b42881073",
        "commit_message": "Issue 1316 - longrepr is a string when pytrace=False (#7100)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94c7b8b47cd6b5b14f463731e473929b42881073",
        "buggy_code": "return str(excinfo.value)",
        "fixed_code": "style = \"value\"",
        "patch": "@@ -337,7 +337,7 @@ def _repr_failure_py(\n             excinfo = ExceptionInfo(excinfo.value.excinfo)\n         if isinstance(excinfo.value, fail.Exception):\n             if not excinfo.value.pytrace:\n-                return str(excinfo.value)\n+                style = \"value\"\n         if isinstance(excinfo.value, FixtureLookupError):\n             return excinfo.value.formatrepr()\n         if self.config.getoption(\"fulltrace\", False):"
    },
    {
        "commit_id": "94c7b8b47cd6b5b14f463731e473929b42881073",
        "commit_message": "Issue 1316 - longrepr is a string when pytrace=False (#7100)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94c7b8b47cd6b5b14f463731e473929b42881073",
        "buggy_code": "assert callreport.longrepr == \"[XPASS(strict)] nope\"",
        "fixed_code": "assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"",
        "patch": "@@ -194,7 +194,7 @@ def test_func():\n         assert len(reports) == 3\n         callreport = reports[1]\n         assert callreport.failed\n-        assert callreport.longrepr == \"[XPASS(strict)] nope\"\n+        assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n     def test_xfail_run_anyway(self, testdir):"
    },
    {
        "commit_id": "d1534181c0bd165f354179d1ac131d874b71a81b",
        "commit_message": "pre-commit: upgrade flake8 3.7.7 -> 3.8.1\n\nNew errors:\n\n    testing/test_setupplan.py:104:15: E741 ambiguous variable name 'l'\n    testing/test_setupplan.py:107:15: E741 ambiguous variable name 'l'\n    extra/get_issues.py:48:29: E741 ambiguous variable name 'l'\n    testing/test_error_diffs.py:270:32: E741 ambiguous variable name 'l'\n\nNot so sure about it but easier to just fix.\n\nBut more importantly, is a large amount of typing-related issues there\nwere fixed which necessitated noqa's which can now be removed.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d1534181c0bd165f354179d1ac131d874b71a81b",
        "buggy_code": "labels = [l[\"name\"] for l in issue[\"labels\"]]",
        "fixed_code": "labels = [label[\"name\"] for label in issue[\"labels\"]]",
        "patch": "@@ -45,7 +45,7 @@ def main(args):\n \n \n def _get_kind(issue):\n-    labels = [l[\"name\"] for l in issue[\"labels\"]]\n+    labels = [label[\"name\"] for label in issue[\"labels\"]]\n     for key in (\"bug\", \"enhancement\", \"proposal\"):\n         if key in labels:\n             return key"
    },
    {
        "commit_id": "d1534181c0bd165f354179d1ac131d874b71a81b",
        "commit_message": "pre-commit: upgrade flake8 3.7.7 -> 3.8.1\n\nNew errors:\n\n    testing/test_setupplan.py:104:15: E741 ambiguous variable name 'l'\n    testing/test_setupplan.py:107:15: E741 ambiguous variable name 'l'\n    extra/get_issues.py:48:29: E741 ambiguous variable name 'l'\n    testing/test_error_diffs.py:270:32: E741 ambiguous variable name 'l'\n\nNot so sure about it but easier to just fix.\n\nBut more importantly, is a large amount of typing-related issues there\nwere fixed which necessitated noqa's which can now be removed.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d1534181c0bd165f354179d1ac131d874b71a81b",
        "buggy_code": "expected = [l.lstrip() for l in expected.splitlines()]",
        "fixed_code": "expected = [line.lstrip() for line in expected.splitlines()]",
        "patch": "@@ -267,7 +267,7 @@ def test_this():\n \n @pytest.mark.parametrize(\"code, expected\", TESTCASES)\n def test_error_diff(code, expected, testdir):\n-    expected = [l.lstrip() for l in expected.splitlines()]\n+    expected = [line.lstrip() for line in expected.splitlines()]\n     p = testdir.makepyfile(code)\n     result = testdir.runpytest(p, \"-vv\")\n     result.stdout.fnmatch_lines(expected)"
    },
    {
        "commit_id": "73448f265d8c680c35dc66dfe65c3cc14fc337eb",
        "commit_message": "Handle EPIPE/BrokenPipeError in pytest's CLI\n\nRunning `pytest | head -1` and similar causes an annoying error to be\nprinted to stderr:\n\n    Exception ignored in: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>\n    BrokenPipeError: [Errno 32] Broken pipe\n\n(or possibly even a propagating exception in older/other Python versions).\n\nThe standard UNIX behavior is to handle the EPIPE silently. To\nrecommended method to do this in Python is described here:\nhttps://docs.python.org/3/library/signal.html#note-on-sigpipe\n\nIt is not appropriate to apply this recommendation to `pytest.main()`,\nwhich is used programmatically for in-process runs. Hence, change\npytest's entrypoint to a new `pytest.console_main()` function, to be\nused exclusively by pytest's CLI, and add the SIGPIPE code there.\n\nFixes #4375.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/73448f265d8c680c35dc66dfe65c3cc14fc337eb",
        "buggy_code": "raise SystemExit(pytest.main())",
        "fixed_code": "raise SystemExit(pytest.console_main())",
        "patch": "@@ -4,4 +4,4 @@\n import pytest\n \n if __name__ == \"__main__\":\n-    raise SystemExit(pytest.main())\n+    raise SystemExit(pytest.console_main())"
    },
    {
        "commit_id": "d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "commit_message": "Merge pull request #7171 from bluetech/code-import-cycles\n\ncode: fix import cycles between code.py and source.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -12,9 +12,9 @@\n import py\n \n import _pytest\n+from _pytest._code import getfslineno\n from _pytest._code.code import FormattedExcinfo\n from _pytest._code.code import TerminalRepr\n-from _pytest._code.source import getfslineno\n from _pytest._io import TerminalWriter\n from _pytest.compat import _format_args\n from _pytest.compat import _PytestWrapper"
    },
    {
        "commit_id": "d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "commit_message": "Merge pull request #7171 from bluetech/code-import-cycles\n\ncode: fix import cycles between code.py and source.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "buggy_code": "from .._code.source import getfslineno",
        "fixed_code": "from .._code import getfslineno",
        "patch": "@@ -14,7 +14,7 @@\n \n import attr\n \n-from .._code.source import getfslineno\n+from .._code import getfslineno\n from ..compat import ascii_escaped\n from ..compat import NOTSET\n from _pytest.outcomes import fail"
    },
    {
        "commit_id": "d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "commit_message": "Merge pull request #7171 from bluetech/code-import-cycles\n\ncode: fix import cycles between code.py and source.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -12,10 +12,10 @@\n import py\n \n import _pytest._code\n+from _pytest._code import getfslineno\n from _pytest._code.code import ExceptionChainRepr\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import ReprExceptionInfo\n-from _pytest._code.source import getfslineno\n from _pytest.compat import cached_property\n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import Config"
    },
    {
        "commit_id": "d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "commit_message": "Merge pull request #7171 from bluetech/code-import-cycles\n\ncode: fix import cycles between code.py and source.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d16ae0bbdc3a1d51a7d85ee4c1bf0eaf49ce29c8",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -25,8 +25,8 @@\n from _pytest import fixtures\n from _pytest import nodes\n from _pytest._code import filter_traceback\n+from _pytest._code import getfslineno\n from _pytest._code.code import ExceptionInfo\n-from _pytest._code.source import getfslineno\n from _pytest._io import TerminalWriter\n from _pytest._io.saferepr import saferepr\n from _pytest.compat import ascii_escaped"
    },
    {
        "commit_id": "69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "commit_message": "code: fix import cycles between code.py and source.py\n\nThese two files were really intertwined. Make it so code.py depends on\nsource.py without a reverse dependency.\n\nNo functional changes.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -13,9 +13,9 @@\n import py\n \n import _pytest\n+from _pytest._code import getfslineno\n from _pytest._code.code import FormattedExcinfo\n from _pytest._code.code import TerminalRepr\n-from _pytest._code.source import getfslineno\n from _pytest._io import TerminalWriter\n from _pytest.compat import _format_args\n from _pytest.compat import _PytestWrapper"
    },
    {
        "commit_id": "69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "commit_message": "code: fix import cycles between code.py and source.py\n\nThese two files were really intertwined. Make it so code.py depends on\nsource.py without a reverse dependency.\n\nNo functional changes.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "buggy_code": "from .._code.source import getfslineno",
        "fixed_code": "from .._code import getfslineno",
        "patch": "@@ -14,7 +14,7 @@\n \n import attr\n \n-from .._code.source import getfslineno\n+from .._code import getfslineno\n from ..compat import ascii_escaped\n from ..compat import NOTSET\n from _pytest.outcomes import fail"
    },
    {
        "commit_id": "69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "commit_message": "code: fix import cycles between code.py and source.py\n\nThese two files were really intertwined. Make it so code.py depends on\nsource.py without a reverse dependency.\n\nNo functional changes.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -12,10 +12,10 @@\n import py\n \n import _pytest._code\n+from _pytest._code import getfslineno\n from _pytest._code.code import ExceptionChainRepr\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import ReprExceptionInfo\n-from _pytest._code.source import getfslineno\n from _pytest.compat import cached_property\n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import Config"
    },
    {
        "commit_id": "69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "commit_message": "code: fix import cycles between code.py and source.py\n\nThese two files were really intertwined. Make it so code.py depends on\nsource.py without a reverse dependency.\n\nNo functional changes.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69143fe5b0a1037198b6ff1b151dc571e3800cec",
        "buggy_code": "from _pytest._code.source import getfslineno",
        "fixed_code": "from _pytest._code import getfslineno",
        "patch": "@@ -25,8 +25,8 @@\n from _pytest import fixtures\n from _pytest import nodes\n from _pytest._code import filter_traceback\n+from _pytest._code import getfslineno\n from _pytest._code.code import ExceptionInfo\n-from _pytest._code.source import getfslineno\n from _pytest._io import TerminalWriter\n from _pytest._io.saferepr import saferepr\n from _pytest.compat import ascii_escaped"
    },
    {
        "commit_id": "d0022b5a13276f1e2fbcfc51a615b41147bf81c2",
        "commit_message": "'saferepr' handles classes with broken __getattribute__\n\nFix #7145",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d0022b5a13276f1e2fbcfc51a615b41147bf81c2",
        "buggy_code": "exc_info, obj.__class__.__name__, id(obj)",
        "fixed_code": "exc_info, type(obj).__name__, id(obj)",
        "patch": "@@ -20,7 +20,7 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, type(obj).__name__, id(obj)\n     )\n \n "
    },
    {
        "commit_id": "4787fd64a4ca0dba5528b5651bddd254102fe9f3",
        "commit_message": "Merge pull request #7167 from bluetech/lint-merge-fix\n\ntesting: fix lint after merge of old branch",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4787fd64a4ca0dba5528b5651bddd254102fe9f3",
        "buggy_code": "}",
        "fixed_code": "},",
        "patch": "@@ -1465,7 +1465,7 @@ def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives\n                     warnings.filterwarnings('always', category=DeprecationWarning)\n                     pytest_plugins=['capture']\n                     \"\"\",\n-            }\n+            },\n         )\n         res = testdir.runpytest_subprocess()\n         assert res.ret == 0"
    },
    {
        "commit_id": "abf785666a72f3e3ed0aefce69497e9a0cde12be",
        "commit_message": "testing: fix lint after merge of old branch",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/abf785666a72f3e3ed0aefce69497e9a0cde12be",
        "buggy_code": "}",
        "fixed_code": "},",
        "patch": "@@ -1465,7 +1465,7 @@ def test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives\n                     warnings.filterwarnings('always', category=DeprecationWarning)\n                     pytest_plugins=['capture']\n                     \"\"\",\n-            }\n+            },\n         )\n         res = testdir.runpytest_subprocess()\n         assert res.ret == 0"
    },
    {
        "commit_id": "077d1c35028bb803b692f7f78a3e7f9122a21a39",
        "commit_message": "Merge pull request #7129 from bluetech/testing-cache-writefail-warning\n\ntesting: fix warning issued by test_cache_writefail_cachfile_silent",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/077d1c35028bb803b692f7f78a3e7f9122a21a39",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"ignore:could not create cache path\")",
        "patch": "@@ -31,7 +31,7 @@ def test_config_cache_dataerror(self, testdir):\n         val = config.cache.get(\"key/name\", -2)\n         assert val == -2\n \n-    @pytest.mark.filterwarnings(\"default\")\n+    @pytest.mark.filterwarnings(\"ignore:could not create cache path\")\n     def test_cache_writefail_cachfile_silent(self, testdir):\n         testdir.makeini(\"[pytest]\")\n         testdir.tmpdir.join(\".pytest_cache\").write(\"gone wrong\")"
    },
    {
        "commit_id": "49e50d3106ac44aee8f20151330e0df35ae00cca",
        "commit_message": "testing: fix warning issued by test_cache_writefail_cachfile_silent\n\nRemove this message which was shown in the warning summary of pytest's\nown testsuite:\n\n    testing/test_cacheprovider.py::TestNewAPI::test_cache_writefail_cachfile_silent\n      testing/test_cacheprovider.py:40: PytestCacheWarning: could not create cache path /tmp/pytest-of-ran/pytest-2/test_cache_writefail_cachfile_silent0/.pytest_cache/v/test/broken\n        cache.set(\"test/broken\", [])",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/49e50d3106ac44aee8f20151330e0df35ae00cca",
        "buggy_code": "@pytest.mark.filterwarnings(\"default\")",
        "fixed_code": "@pytest.mark.filterwarnings(\"ignore:could not create cache path\")",
        "patch": "@@ -31,7 +31,7 @@ def test_config_cache_dataerror(self, testdir):\n         val = config.cache.get(\"key/name\", -2)\n         assert val == -2\n \n-    @pytest.mark.filterwarnings(\"default\")\n+    @pytest.mark.filterwarnings(\"ignore:could not create cache path\")\n     def test_cache_writefail_cachfile_silent(self, testdir):\n         testdir.makeini(\"[pytest]\")\n         testdir.tmpdir.join(\".pytest_cache\").write(\"gone wrong\")"
    },
    {
        "commit_id": "7d5f5a878598aaa7f3e100ef6a97bcd13c1b408d",
        "commit_message": "Merge pull request #7050 from blueyed/fix-doc\n\ndoc: internal: remove references to old \"newinterpret\" module",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d5f5a878598aaa7f3e100ef6a97bcd13c1b408d",
        "buggy_code": "The newinterpret and rewrite modules will use util._reprcompare if",
        "fixed_code": "The rewrite module will use util._reprcompare if",
        "patch": "@@ -114,7 +114,7 @@ def pytest_collection(session: \"Session\") -> None:\n def pytest_runtest_protocol(item):\n     \"\"\"Setup the pytest_assertrepr_compare and pytest_assertion_pass hooks\n \n-    The newinterpret and rewrite modules will use util._reprcompare if\n+    The rewrite module will use util._reprcompare if\n     it exists to use custom reporting via the\n     pytest_assertrepr_compare hook.  This sets up this custom\n     comparison for the test."
    },
    {
        "commit_id": "7789b51acb3cb98f2bdd59fb0cd926376d65f1f9",
        "commit_message": "Issue 4677 - always relative path in skip report (#6953)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7789b51acb3cb98f2bdd59fb0cd926376d65f1f9",
        "buggy_code": "\"SKIPPED [[]2[]] */conftest.py:4: test\",",
        "fixed_code": "\"SKIPPED [[]2[]] conftest.py:4: test\",",
        "patch": "@@ -758,7 +758,7 @@ def doskip():\n     result = testdir.runpytest(\"-rs\")\n     result.stdout.fnmatch_lines_random(\n         [\n-            \"SKIPPED [[]2[]] */conftest.py:4: test\",\n+            \"SKIPPED [[]2[]] conftest.py:4: test\",\n             \"SKIPPED [[]1[]] test_one.py:14: via_decorator\",\n         ]\n     )"
    },
    {
        "commit_id": "7789b51acb3cb98f2bdd59fb0cd926376d65f1f9",
        "commit_message": "Issue 4677 - always relative path in skip report (#6953)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7789b51acb3cb98f2bdd59fb0cd926376d65f1f9",
        "buggy_code": "values = _folded_skips([ev1, ev2, ev3])",
        "fixed_code": "values = _folded_skips(py.path.local(), [ev1, ev2, ev3])",
        "patch": "@@ -2001,7 +2001,7 @@ class X:\n     ev3.longrepr = longrepr\n     ev3.skipped = True\n \n-    values = _folded_skips([ev1, ev2, ev3])\n+    values = _folded_skips(py.path.local(), [ev1, ev2, ev3])\n     assert len(values) == 1\n     num, fspath, lineno, reason = values[0]\n     assert num == 3"
    },
    {
        "commit_id": "244c8e4a131eb446211fd0b2d7258303580b346a",
        "commit_message": "Merge pull request #6680 from RonnyPfannschmidt/fix-6294-more-docs-for-fromparent\n\ndoc: more docs for from_parent",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/244c8e4a131eb446211fd0b2d7258303580b346a",
        "buggy_code": "match=\"direct construction of .* has been deprecated, please use .*.from_parent\",",
        "fixed_code": "match=\"Direct construction of .* has been deprecated, please use .*.from_parent.*\",",
        "patch": "@@ -100,7 +100,7 @@ class MockConfig:\n     ms = MockConfig()\n     with pytest.warns(\n         DeprecationWarning,\n-        match=\"direct construction of .* has been deprecated, please use .*.from_parent\",\n+        match=\"Direct construction of .* has been deprecated, please use .*.from_parent.*\",\n     ) as w:\n         nodes.Node(name=\"test\", config=ms, session=ms, nodeid=\"None\")\n     assert w[0].lineno == inspect.currentframe().f_lineno - 1"
    },
    {
        "commit_id": "19c243f0fa9fe62d8e668a5050598c88d56b49ab",
        "commit_message": "Merge pull request #6285 from earonesty/patch-1\n\nAdd _pytest.fixtures.FixtureLookupError to top level import",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/19c243f0fa9fe62d8e668a5050598c88d56b49ab",
        "buggy_code": "with pytest.raises(Exception):",
        "fixed_code": "with pytest.raises(pytest.FixtureLookupError):",
        "patch": "@@ -3,5 +3,5 @@\n \n @pytest.fixture\n def arg1(request):\n-    with pytest.raises(Exception):\n+    with pytest.raises(pytest.FixtureLookupError):\n         request.getfixturevalue(\"arg2\")"
    },
    {
        "commit_id": "7048d5be9cd78b17baeecfdb4c278e3ddcac6a51",
        "commit_message": "Fix FD leak in test__get_multicapture (#7037)\n\nInstantiating `FDCapture` creates a file descriptor already.  Use \"no\"\r\nto not leak a fd here.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7048d5be9cd78b17baeecfdb4c278e3ddcac6a51",
        "buggy_code": "assert isinstance(_get_multicapture(\"fd\"), MultiCapture)",
        "fixed_code": "assert isinstance(_get_multicapture(\"no\"), MultiCapture)",
        "patch": "@@ -1489,7 +1489,7 @@ def test_encodedfile_writelines(tmpfile: BinaryIO) -> None:\n \n \n def test__get_multicapture() -> None:\n-    assert isinstance(_get_multicapture(\"fd\"), MultiCapture)\n+    assert isinstance(_get_multicapture(\"no\"), MultiCapture)\n     pytest.raises(ValueError, _get_multicapture, \"unknown\").match(\n         r\"^unknown capturing method: 'unknown'\"\n     )"
    },
    {
        "commit_id": "36d0a71be857f5b8d4d48cd07083ef5af0471909",
        "commit_message": "Merge pull request #6976 from nicoddemus/fix-linting\n\nFix linting",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/36d0a71be857f5b8d4d48cd07083ef5af0471909",
        "buggy_code": "}",
        "fixed_code": "},",
        "patch": "@@ -32,7 +32,7 @@ def foo():\n                 warnings.warn(RuntimeWarning(\"runtime warning\"))\n                 return 1\n             \"\"\",\n-        }\n+        },\n     )\n     return str(test_file)\n "
    },
    {
        "commit_id": "a016a75ca76613335a096aaaade6b4b6d95265e4",
        "commit_message": "Fix linting",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a016a75ca76613335a096aaaade6b4b6d95265e4",
        "buggy_code": "}",
        "fixed_code": "},",
        "patch": "@@ -32,7 +32,7 @@ def foo():\n                 warnings.warn(RuntimeWarning(\"runtime warning\"))\n                 return 1\n             \"\"\",\n-        }\n+        },\n     )\n     return str(test_file)\n "
    },
    {
        "commit_id": "c26bbdfaf027d031e694227a2e3414108d17f1a8",
        "commit_message": "Merge pull request #6854 from gdhameeja/Fix-6822\n\nCheck invalid operations for -k",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c26bbdfaf027d031e694227a2e3414108d17f1a8",
        "buggy_code": "except SyntaxError:",
        "fixed_code": "except Exception:",
        "patch": "@@ -112,5 +112,5 @@ def matchkeyword(colitem, keywordexpr):\n             )\n     try:\n         return eval(keywordexpr, {}, mapping)\n-    except SyntaxError:\n+    except Exception:\n         raise UsageError(\"Wrong expression passed to '-k': {}\".format(keywordexpr))"
    },
    {
        "commit_id": "d9a462694414ff62ed1605b139808531ee6a708d",
        "commit_message": "fixup! Fix documentation for Config/InvocationParams",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d9a462694414ff62ed1605b139808531ee6a708d",
        "buggy_code": "invocation_params: InvocationParams = None",
        "fixed_code": "invocation_params: Optional[InvocationParams] = None",
        "patch": "@@ -769,7 +769,7 @@ def __init__(\n         self,\n         pluginmanager: PytestPluginManager,\n         *,\n-        invocation_params: InvocationParams = None\n+        invocation_params: Optional[InvocationParams] = None\n     ) -> None:\n         from .argparsing import Parser, FILE_OR_DIR\n "
    },
    {
        "commit_id": "3d390940d1ad895527486ea69fd06d68732b677b",
        "commit_message": "refer the node-from-parent deprecation  documentation in the warning\n\nfixup: fix test for warning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3d390940d1ad895527486ea69fd06d68732b677b",
        "buggy_code": "match=\"direct construction of .* has been deprecated, please use .*.from_parent\",",
        "fixed_code": "match=\"Direct construction of .* has been deprecated, please use .*.from_parent.*\",",
        "patch": "@@ -86,7 +86,7 @@ class MockConfig:\n     ms = MockConfig()\n     with pytest.warns(\n         DeprecationWarning,\n-        match=\"direct construction of .* has been deprecated, please use .*.from_parent\",\n+        match=\"Direct construction of .* has been deprecated, please use .*.from_parent.*\",\n     ) as w:\n         nodes.Node(name=\"test\", config=ms, session=ms, nodeid=\"None\")\n     assert w[0].lineno == inspect.currentframe().f_lineno - 1"
    },
    {
        "commit_id": "9928c7794ba58e01a1a82ba34687a4ec4b688f49",
        "commit_message": "minor: fix trace msg: s/loaded/loading (#6798)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9928c7794ba58e01a1a82ba34687a4ec4b688f49",
        "buggy_code": "self.trace(\"loaded conftestmodule %r\" % (mod))",
        "fixed_code": "self.trace(\"loading conftestmodule {!r}\".format(mod))",
        "patch": "@@ -515,7 +515,7 @@ def _importconftest(self, conftestpath):\n                     if path and path.relto(dirpath) or path == dirpath:\n                         assert mod not in mods\n                         mods.append(mod)\n-            self.trace(\"loaded conftestmodule %r\" % (mod))\n+            self.trace(\"loading conftestmodule {!r}\".format(mod))\n             self.consider_conftest(mod)\n             return mod\n "
    },
    {
        "commit_id": "0b2b40e35dbcebb26fc72c068bfb11637e09e10b",
        "commit_message": "Remove some redundant commas\n\nFix mypy errors:\n\nsrc/_pytest/runner.py:36: error: \"addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/helpconfig.py:64: error: \"addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/terminal.py:67: error: \"_addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/terminal.py:75: error: \"_addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0b2b40e35dbcebb26fc72c068bfb11637e09e10b",
        "buggy_code": "),",
        "fixed_code": ")",
        "patch": "@@ -66,7 +66,7 @@ def pytest_addoption(parser):\n         action=\"store_true\",\n         default=False,\n         help=\"trace considerations of conftest.py files.\",\n-    ),\n+    )\n     group.addoption(\n         \"--debug\",\n         action=\"store_true\","
    },
    {
        "commit_id": "0b2b40e35dbcebb26fc72c068bfb11637e09e10b",
        "commit_message": "Remove some redundant commas\n\nFix mypy errors:\n\nsrc/_pytest/runner.py:36: error: \"addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/helpconfig.py:64: error: \"addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/terminal.py:67: error: \"_addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]\nsrc/_pytest/terminal.py:75: error: \"_addoption\" of \"OptionGroup\" does not return a value  [func-returns-value]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0b2b40e35dbcebb26fc72c068bfb11637e09e10b",
        "buggy_code": "),",
        "fixed_code": ")",
        "patch": "@@ -39,7 +39,7 @@ def pytest_addoption(parser):\n         default=None,\n         metavar=\"N\",\n         help=\"show N slowest setup/test durations (N=0 for all).\",\n-    ),\n+    )\n \n \n def pytest_terminal_summary(terminalreporter):"
    },
    {
        "commit_id": "f9dd58000a42fba69936ca18ea54c642d4fd73da",
        "commit_message": "Fix CaptureManager.__repr__ (#6697)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f9dd58000a42fba69936ca18ea54c642d4fd73da",
        "buggy_code": "return \"<CaptureManager _method={!r} _global_capturing={!r} _item_capture={!r}>\".format(",
        "fixed_code": "return \"<CaptureManager _method={!r} _global_capturing={!r} _capture_fixture={!r}>\".format(",
        "patch": "@@ -85,7 +85,7 @@ def __init__(self, method) -> None:\n         self._capture_fixture = None  # type: Optional[CaptureFixture]\n \n     def __repr__(self):\n-        return \"<CaptureManager _method={!r} _global_capturing={!r} _item_capture={!r}>\".format(\n+        return \"<CaptureManager _method={!r} _global_capturing={!r} _capture_fixture={!r}>\".format(\n             self._method, self._global_capturing, self._capture_fixture\n         )\n "
    },
    {
        "commit_id": "9e262038c84a99d1353551e8cbb32f46362b58b4",
        "commit_message": "[parametrize] enforce explicit argnames declaration (#6330)\n\nEvery argname used in `parametrize` either must\r\nbe declared explicitly in the python test function, or via\r\n`indirect` list\r\n\r\nFix #5712",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9e262038c84a99d1353551e8cbb32f46362b58b4",
        "buggy_code": "def test_it(fix1):",
        "fixed_code": "def test_it(fix1, fix2):",
        "patch": "@@ -463,7 +463,7 @@ def fix3():\n                return '3'\n \n             @pytest.mark.parametrize('fix2', ['2'])\n-            def test_it(fix1):\n+            def test_it(fix1, fix2):\n                assert fix1 == '21'\n                assert not fix3_instantiated\n         \"\"\""
    },
    {
        "commit_id": "c9eeafade5079f70d424fc3ba6a55b5b33ceeda1",
        "commit_message": "Fix favicon for Chrome and Opera (#6639)\n\n* Fix favicon for Chrome and Opera\r\n\r\n* Delete pytest1favi.ico\r\n\r\nCo-authored-by: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c9eeafade5079f70d424fc3ba6a55b5b33ceeda1",
        "buggy_code": "html_favicon = \"img/pytest1favi.ico\"",
        "fixed_code": "html_favicon = \"img/favicon.png\"",
        "patch": "@@ -162,7 +162,7 @@\n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-html_favicon = \"img/pytest1favi.ico\"\n+html_favicon = \"img/favicon.png\"\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,"
    },
    {
        "commit_id": "64ab68ff0ac6cd83bd62eedd789a05617622ff66",
        "commit_message": "Fix 6341 disallow session config in fromparent (#6387)\n\nFix 6341 disallow session config in fromparent",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/64ab68ff0ac6cd83bd62eedd789a05617622ff66",
        "buggy_code": "return pytest.Function.from_parent(config=config, parent=session, **kwargs)",
        "fixed_code": "return pytest.Function.from_parent(parent=session, **kwargs)",
        "patch": "@@ -284,7 +284,7 @@ def make_function(testdir, **kwargs):\n         session = testdir.Session.from_config(config)\n         session._fixturemanager = FixtureManager(session)\n \n-        return pytest.Function.from_parent(config=config, parent=session, **kwargs)\n+        return pytest.Function.from_parent(parent=session, **kwargs)\n \n     def test_function_equality(self, testdir):\n         def func1():"
    },
    {
        "commit_id": "595d62bc3e9f9ebcc65095ef349a3031322c891d",
        "commit_message": "Merge pull request #6607 from asottile/empty_string_parametrize_nodeid\n\nFix node ids which contain a parametrized empty-string variable",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/595d62bc3e9f9ebcc65095ef349a3031322c891d",
        "buggy_code": "return \"-\".join(map(str, filter(None, self._idlist)))",
        "fixed_code": "return \"-\".join(map(str, self._idlist))",
        "patch": "@@ -873,7 +873,7 @@ def getparam(self, name):\n \n     @property\n     def id(self):\n-        return \"-\".join(map(str, filter(None, self._idlist)))\n+        return \"-\".join(map(str, self._idlist))\n \n     def setmulti2(self, valtypes, argnames, valset, id, marks, scopenum, param_index):\n         for arg, val in zip(argnames, valset):"
    },
    {
        "commit_id": "abd5fc80e84b79d38e2cb622c7124155b0931ddd",
        "commit_message": "Fix node ids which contain a parametrized empty-string variable",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/abd5fc80e84b79d38e2cb622c7124155b0931ddd",
        "buggy_code": "return \"-\".join(map(str, filter(None, self._idlist)))",
        "fixed_code": "return \"-\".join(map(str, self._idlist))",
        "patch": "@@ -873,7 +873,7 @@ def getparam(self, name):\n \n     @property\n     def id(self):\n-        return \"-\".join(map(str, filter(None, self._idlist)))\n+        return \"-\".join(map(str, self._idlist))\n \n     def setmulti2(self, valtypes, argnames, valset, id, marks, scopenum, param_index):\n         for arg, val in zip(argnames, valset):"
    },
    {
        "commit_id": "7c52a37d4618333839bc936481affa13bdf989ab",
        "commit_message": "Merge pull request #6572 from blueyed/fix-test_collection_collect_only_live_logging\n\ntests: test_collection_collect_only_live_logging: allow for 1+s",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c52a37d4618333839bc936481affa13bdf989ab",
        "buggy_code": "\"no tests ran in 0.[0-9][0-9]s\",",
        "fixed_code": "\"no tests ran in [0-1].[0-9][0-9]s\",",
        "patch": "@@ -946,7 +946,7 @@ def test_simple():\n         expected_lines.extend(\n             [\n                 \"*test_collection_collect_only_live_logging.py::test_simple*\",\n-                \"no tests ran in 0.[0-9][0-9]s\",\n+                \"no tests ran in [0-1].[0-9][0-9]s\",\n             ]\n         )\n     elif verbose == \"-qq\":"
    },
    {
        "commit_id": "6f2943c7b3be74f68b6e200cc04569d4aa7dc3fc",
        "commit_message": "Merge pull request #6558 from gavento/patch-1\n\nMake EncodedFile.write() return the return value from inner write()",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f2943c7b3be74f68b6e200cc04569d4aa7dc3fc",
        "buggy_code": "self.buffer.write(obj)",
        "fixed_code": "return self.buffer.write(obj)",
        "patch": "@@ -424,7 +424,7 @@ def write(self, obj):\n             raise TypeError(\n                 \"write() argument must be str, not {}\".format(type(obj).__name__)\n             )\n-        self.buffer.write(obj)\n+        return self.buffer.write(obj)\n \n     def writelines(self, linelist):\n         data = \"\".join(linelist)"
    },
    {
        "commit_id": "5e15c86cc6fb800adf87e5eff0a36896b2cb895e",
        "commit_message": "Fix EncodedFile.write return value\n\nMake EncodedFile, used for captured output streams, method .write return\nthe number of characters written. Add test for captured stderr write.\nFixes #6557.\n\nCo-Authored-By: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5e15c86cc6fb800adf87e5eff0a36896b2cb895e",
        "buggy_code": "self.buffer.write(obj)",
        "fixed_code": "return self.buffer.write(obj)",
        "patch": "@@ -424,7 +424,7 @@ def write(self, obj):\n             raise TypeError(\n                 \"write() argument must be str, not {}\".format(type(obj).__name__)\n             )\n-        self.buffer.write(obj)\n+        return self.buffer.write(obj)\n \n     def writelines(self, linelist):\n         data = \"\".join(linelist)"
    },
    {
        "commit_id": "8521503246ce4fa640da113b5c2d64c0c2057b60",
        "commit_message": "Merge pull request #6527 from blueyed/typing-getfslineno\n\ntyping: fix/adjust _code.source.getfslineno",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8521503246ce4fa640da113b5c2d64c0c2057b60",
        "buggy_code": "def getfslineno(obj) -> Tuple[Union[str, py.path.local], int]:",
        "fixed_code": "def getfslineno(obj) -> Tuple[Optional[Union[\"Literal['']\", py.path.local]], int]:",
        "patch": "@@ -282,7 +282,7 @@ def compile_(  # noqa: F811\n     return s.compile(filename, mode, flags, _genframe=_genframe)\n \n \n-def getfslineno(obj) -> Tuple[Union[str, py.path.local], int]:\n+def getfslineno(obj) -> Tuple[Optional[Union[\"Literal['']\", py.path.local]], int]:\n     \"\"\" Return source location (path, lineno) for the given object.\n     If the source cannot be determined return (\"\", -1).\n "
    },
    {
        "commit_id": "ef112fd7dd8ee220865f7569c0ecc4fa5eb24464",
        "commit_message": "Revert \"Revert \"Fix type errors after adding types to the `py` dependency\"\"\n\nWithout changes to test_itemreport_reportinfo.\n\nThis reverts commit fb99b5c66ee06ad0bd3336d8599448d1d3da4f7f.\n\nConflicts:\n\ttesting/test_nose.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ef112fd7dd8ee220865f7569c0ecc4fa5eb24464",
        "buggy_code": "def reportinfo(self) -> Tuple[str, int, str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[py.path.local, int, str]:",
        "patch": "@@ -308,7 +308,7 @@ def repr_failure(self, excinfo):\n         else:\n             return super().repr_failure(excinfo)\n \n-    def reportinfo(self) -> Tuple[str, int, str]:\n+    def reportinfo(self) -> Tuple[py.path.local, int, str]:\n         return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n "
    },
    {
        "commit_id": "62db3f7abcec8cfdcd8526310f866d0fd08d8025",
        "commit_message": "typing: fix/adjust _code.source.getfslineno",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/62db3f7abcec8cfdcd8526310f866d0fd08d8025",
        "buggy_code": "def getfslineno(obj) -> Tuple[Union[str, py.path.local], int]:",
        "fixed_code": "def getfslineno(obj) -> Tuple[Optional[Union[\"Literal['']\", py.path.local]], int]:",
        "patch": "@@ -282,7 +282,7 @@ def compile_(  # noqa: F811\n     return s.compile(filename, mode, flags, _genframe=_genframe)\n \n \n-def getfslineno(obj) -> Tuple[Union[str, py.path.local], int]:\n+def getfslineno(obj) -> Tuple[Optional[Union[\"Literal['']\", py.path.local]], int]:\n     \"\"\" Return source location (path, lineno) for the given object.\n     If the source cannot be determined return (\"\", -1).\n "
    },
    {
        "commit_id": "a52f7914616d7a0cb936a885374b7f13f06184db",
        "commit_message": "Merge pull request #6518 from bluetech/fix-py-typed-fixes-regression\n\nFix internal assert failure regression in 5.3.4",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a52f7914616d7a0cb936a885374b7f13f06184db",
        "buggy_code": "def reportinfo(self) -> Tuple[py.path.local, int, str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[str, int, str]:",
        "patch": "@@ -308,7 +308,7 @@ def repr_failure(self, excinfo):\n         else:\n             return super().repr_failure(excinfo)\n \n-    def reportinfo(self) -> Tuple[py.path.local, int, str]:\n+    def reportinfo(self) -> Tuple[str, int, str]:\n         return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n "
    },
    {
        "commit_id": "fb99b5c66ee06ad0bd3336d8599448d1d3da4f7f",
        "commit_message": "Revert \"Fix type errors after adding types to the `py` dependency\"\n\nThis reverts commit 930a158a6a4d58ceb37aff97fa476215a68c915e.\n\nRegression test from Bruno Oliveira.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fb99b5c66ee06ad0bd3336d8599448d1d3da4f7f",
        "buggy_code": "def reportinfo(self) -> Tuple[py.path.local, int, str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[str, int, str]:",
        "patch": "@@ -308,7 +308,7 @@ def repr_failure(self, excinfo):\n         else:\n             return super().repr_failure(excinfo)\n \n-    def reportinfo(self) -> Tuple[py.path.local, int, str]:\n+    def reportinfo(self) -> Tuple[str, int, str]:\n         return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n "
    },
    {
        "commit_id": "4fb9cc3bf0926386e0d6f0137d0dd29d4d0e41b5",
        "commit_message": "Merge pull request #6511 from bluetech/py-typed-fixes\n\nFix type errors after adding types to the `py` dependency",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4fb9cc3bf0926386e0d6f0137d0dd29d4d0e41b5",
        "buggy_code": "def reportinfo(self) -> Tuple[str, int, str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[py.path.local, int, str]:",
        "patch": "@@ -308,7 +308,7 @@ def repr_failure(self, excinfo):\n         else:\n             return super().repr_failure(excinfo)\n \n-    def reportinfo(self) -> Tuple[str, int, str]:\n+    def reportinfo(self) -> Tuple[py.path.local, int, str]:\n         return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n "
    },
    {
        "commit_id": "930a158a6a4d58ceb37aff97fa476215a68c915e",
        "commit_message": "Fix type errors after adding types to the `py` dependency",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/930a158a6a4d58ceb37aff97fa476215a68c915e",
        "buggy_code": "def reportinfo(self) -> Tuple[str, int, str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[py.path.local, int, str]:",
        "patch": "@@ -308,7 +308,7 @@ def repr_failure(self, excinfo):\n         else:\n             return super().repr_failure(excinfo)\n \n-    def reportinfo(self) -> Tuple[str, int, str]:\n+    def reportinfo(self) -> Tuple[py.path.local, int, str]:\n         return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n "
    },
    {
        "commit_id": "1a75a3c08e657fe93e51ee7f07125a79abe27750",
        "commit_message": "Merge pull request #6482 from blueyed/fix-_TracebackStyle\n\ntyping: fix _TracebackStyle",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1a75a3c08e657fe93e51ee7f07125a79abe27750",
        "buggy_code": "_TracebackStyle = Literal[\"long\", \"short\", \"no\", \"native\"]",
        "fixed_code": "_TracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\"]",
        "patch": "@@ -41,7 +41,7 @@\n \n     from _pytest._code import Source\n \n-    _TracebackStyle = Literal[\"long\", \"short\", \"no\", \"native\"]\n+    _TracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\"]\n \n \n class Code:"
    },
    {
        "commit_id": "09e9a01df37a5d4e18e72bff41d0388f5439c6fe",
        "commit_message": "typing: fix _TracebackStyle: add \"line\"",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/09e9a01df37a5d4e18e72bff41d0388f5439c6fe",
        "buggy_code": "_TracebackStyle = Literal[\"long\", \"short\", \"no\", \"native\"]",
        "fixed_code": "_TracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\"]",
        "patch": "@@ -41,7 +41,7 @@\n \n     from _pytest._code import Source\n \n-    _TracebackStyle = Literal[\"long\", \"short\", \"no\", \"native\"]\n+    _TracebackStyle = Literal[\"long\", \"short\", \"line\", \"no\", \"native\"]\n \n \n class Code:"
    },
    {
        "commit_id": "e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "commit_message": "Merge pull request #6488 from blueyed/typing-fix-reportinfo\n\ntyping: Node.reportinfo: might return py.path.local via fspath",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "buggy_code": "def fspath(self):",
        "fixed_code": "def fspath(self) -> py.path.local:",
        "patch": "@@ -424,7 +424,7 @@ def module(self):\n         return self._pyfuncitem.getparent(_pytest.python.Module).obj\n \n     @scopeproperty()\n-    def fspath(self):\n+    def fspath(self) -> py.path.local:\n         \"\"\" the file system path of the test module which collected this test. \"\"\"\n         return self._pyfuncitem.fspath\n "
    },
    {
        "commit_id": "e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "commit_message": "Merge pull request #6488 from blueyed/typing-fix-reportinfo\n\ntyping: Node.reportinfo: might return py.path.local via fspath",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "buggy_code": "def reportinfo(self) -> Tuple[str, Optional[int], str]:",
        "fixed_code": "def reportinfo(self) -> Tuple[Union[py.path.local, str], Optional[int], str]:",
        "patch": "@@ -456,7 +456,7 @@ def add_report_section(self, when: str, key: str, content: str) -> None:\n         if content:\n             self._report_sections.append((when, key, content))\n \n-    def reportinfo(self) -> Tuple[str, Optional[int], str]:\n+    def reportinfo(self) -> Tuple[Union[py.path.local, str], Optional[int], str]:\n         return self.fspath, None, \"\"\n \n     @cached_property"
    },
    {
        "commit_id": "e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "commit_message": "Merge pull request #6488 from blueyed/typing-fix-reportinfo\n\ntyping: Node.reportinfo: might return py.path.local via fspath",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e211d6fe2a9d4ecd796ee4849669b7682f73d7a5",
        "buggy_code": "def fspath(self):",
        "fixed_code": "def fspath(self) -> str:",
        "patch": "@@ -114,7 +114,7 @@ def capstderr(self):\n     skipped = property(lambda x: x.outcome == \"skipped\")\n \n     @property\n-    def fspath(self):\n+    def fspath(self) -> str:\n         return self.nodeid.split(\"::\")[0]\n \n     @property"
    },
    {
        "commit_id": "dcb94d8f31017005658ddf808178d2df71cc2913",
        "commit_message": "Merge pull request #6485 from blueyed/lint-fix-f999\n\nscripts/release.py: lint: fix F999",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dcb94d8f31017005658ddf808178d2df71cc2913",
        "buggy_code": "print(f\"Please push your branch and open a PR.\")",
        "fixed_code": "print(\"Please push your branch and open a PR.\")",
        "patch": "@@ -100,7 +100,7 @@ def pre_release(version, *, skip_check_links):\n     print()\n     print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n     print()\n-    print(f\"Please push your branch and open a PR.\")\n+    print(\"Please push your branch and open a PR.\")\n \n \n def changelog(version, write_out=False):"
    },
    {
        "commit_id": "2cfee583dbdee03d2528e52de0c9ed9912dabe72",
        "commit_message": "scripts/release.py: lint: fix F999",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2cfee583dbdee03d2528e52de0c9ed9912dabe72",
        "buggy_code": "print(f\"Please push your branch and open a PR.\")",
        "fixed_code": "print(\"Please push your branch and open a PR.\")",
        "patch": "@@ -100,7 +100,7 @@ def pre_release(version, *, skip_check_links):\n     print()\n     print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n     print()\n-    print(f\"Please push your branch and open a PR.\")\n+    print(\"Please push your branch and open a PR.\")\n \n \n def changelog(version, write_out=False):"
    },
    {
        "commit_id": "8ba0b7bc2ad2ead90a827ffeec5bfed1e264431c",
        "commit_message": "fix #6341 - disallow session/config in Node.from_parent",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ba0b7bc2ad2ead90a827ffeec5bfed1e264431c",
        "buggy_code": "return pytest.Function.from_parent(config=config, parent=session, **kwargs)",
        "fixed_code": "return pytest.Function.from_parent(parent=session, **kwargs)",
        "patch": "@@ -284,7 +284,7 @@ def make_function(testdir, **kwargs):\n         session = testdir.Session.from_config(config)\n         session._fixturemanager = FixtureManager(session)\n \n-        return pytest.Function.from_parent(config=config, parent=session, **kwargs)\n+        return pytest.Function.from_parent(parent=session, **kwargs)\n \n     def test_function_equality(self, testdir, tmpdir):\n         def func1():"
    },
    {
        "commit_id": "910d5df6a8d9e26027a282abfbae8c3ba69db74e",
        "commit_message": "Merge pull request #6456 from blueyed/fix-doc-_splitnode\n\nminor: fix doc/example for _pytest.nodes._splitnode",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/910d5df6a8d9e26027a282abfbae8c3ba69db74e",
        "buggy_code": "['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo', '()']",
        "fixed_code": "['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo']",
        "patch": "@@ -49,7 +49,7 @@ def _splitnode(nodeid):\n         []\n         ['testing', 'code']\n         ['testing', 'code', 'test_excinfo.py']\n-        ['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo', '()']\n+        ['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo']\n     \"\"\"\n     if nodeid == \"\":\n         # If there is no root node at all, return an empty list so the caller's logic can remain sane"
    },
    {
        "commit_id": "189fe3ba1dc72ac71060b103a5e0509a3659a70e",
        "commit_message": "minor: fix doc/example for _pytest.nodes._splitnode",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/189fe3ba1dc72ac71060b103a5e0509a3659a70e",
        "buggy_code": "['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo', '()']",
        "fixed_code": "['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo']",
        "patch": "@@ -49,7 +49,7 @@ def _splitnode(nodeid):\n         []\n         ['testing', 'code']\n         ['testing', 'code', 'test_excinfo.py']\n-        ['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo', '()']\n+        ['testing', 'code', 'test_excinfo.py', 'TestFormattedExcinfo']\n     \"\"\"\n     if nodeid == \"\":\n         # If there is no root node at all, return an empty list so the caller's logic can remain sane"
    },
    {
        "commit_id": "3adaa3d87baab33724e17d712104c1d907c1e6d6",
        "commit_message": "Merge pull request #6447 from blueyed/fix-determine_setup\n\ntyping: fix _pytest.config.findpaths.determine_setup",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3adaa3d87baab33724e17d712104c1d907c1e6d6",
        "buggy_code": "inifile: str,",
        "fixed_code": "inifile: Optional[str],",
        "patch": "@@ -108,7 +108,7 @@ def get_dir_from_path(path):\n \n \n def determine_setup(\n-    inifile: str,\n+    inifile: Optional[str],\n     args: List[str],\n     rootdir_cmd_arg: Optional[str] = None,\n     config: Optional[\"Config\"] = None,"
    },
    {
        "commit_id": "117072d64c395283f8e035ed4dc44e838623c119",
        "commit_message": "typing: fix _pytest.config.findpaths.determine_setup",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/117072d64c395283f8e035ed4dc44e838623c119",
        "buggy_code": "inifile: str,",
        "fixed_code": "inifile: Optional[str],",
        "patch": "@@ -108,7 +108,7 @@ def get_dir_from_path(path):\n \n \n def determine_setup(\n-    inifile: str,\n+    inifile: Optional[str],\n     args: List[str],\n     rootdir_cmd_arg: Optional[str] = None,\n     config: Optional[\"Config\"] = None,"
    },
    {
        "commit_id": "8077168387a59ab2a322594c95de288c7f694b25",
        "commit_message": "pytester: quick fix error introduced in #5990 (#6353)\n\npytester: quick fix error introduced in #5990",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8077168387a59ab2a322594c95de288c7f694b25",
        "buggy_code": "\"error\": d.get(\"error\", 0),",
        "fixed_code": "\"error\": d.get(\"error\", 0) + d.get(\"errors\", 0),",
        "patch": "@@ -456,7 +456,7 @@ def assert_outcomes(\n             \"passed\": d.get(\"passed\", 0),\n             \"skipped\": d.get(\"skipped\", 0),\n             \"failed\": d.get(\"failed\", 0),\n-            \"error\": d.get(\"error\", 0),\n+            \"error\": d.get(\"error\", 0) + d.get(\"errors\", 0),\n             \"xpassed\": d.get(\"xpassed\", 0),\n             \"xfailed\": d.get(\"xfailed\", 0),\n         }"
    },
    {
        "commit_id": "dc7bf518b33b97b08ce54e3ae061c200181757d3",
        "commit_message": "pytester: quick fix error introduced in #5990\n\n- added a test to check this condition\n\nSigned-off-by: Alexandre Mulatinho <alex@mulatinho.net>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dc7bf518b33b97b08ce54e3ae061c200181757d3",
        "buggy_code": "\"error\": d.get(\"error\", 0),",
        "fixed_code": "\"error\": d.get(\"error\", 0) + d.get(\"errors\", 0),",
        "patch": "@@ -456,7 +456,7 @@ def assert_outcomes(\n             \"passed\": d.get(\"passed\", 0),\n             \"skipped\": d.get(\"skipped\", 0),\n             \"failed\": d.get(\"failed\", 0),\n-            \"error\": d.get(\"error\", 0),\n+            \"error\": d.get(\"error\", 0) + d.get(\"errors\", 0),\n             \"xpassed\": d.get(\"xpassed\", 0),\n             \"xfailed\": d.get(\"xfailed\", 0),\n         }"
    },
    {
        "commit_id": "ed67312bca2b8b51c6b309df1201be0f89bbb6ae",
        "commit_message": "Merge pull request #6268 from felixonmars/patch-2\n\nCorrect a typo in _pytest/config/__init__.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed67312bca2b8b51c6b309df1201be0f89bbb6ae",
        "buggy_code": "\"\"\" constructor useable for subprocesses. \"\"\"",
        "fixed_code": "\"\"\" constructor usable for subprocesses. \"\"\"",
        "patch": "@@ -784,7 +784,7 @@ def cwd_relative_nodeid(self, nodeid):\n \n     @classmethod\n     def fromdictargs(cls, option_dict, args):\n-        \"\"\" constructor useable for subprocesses. \"\"\"\n+        \"\"\" constructor usable for subprocesses. \"\"\"\n         config = get_config(args)\n         config.option.__dict__.update(option_dict)\n         config.parse(args, addopts=False)"
    },
    {
        "commit_id": "d2ea9e2db58dfb6c5a3c2981bfd062369e51fbf3",
        "commit_message": "Remove report_log in favor of pytest-reportlog\n\nFix #6180",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d2ea9e2db58dfb6c5a3c2981bfd062369e51fbf3",
        "buggy_code": "\"--result-log is deprecated and scheduled for removal in pytest 6.0.\\n\"",
        "fixed_code": "\"--result-log is deprecated, please try the new pytest-reportlog plugin.\\n\"",
        "patch": "@@ -26,7 +26,7 @@\n \n \n RESULT_LOG = PytestDeprecationWarning(\n-    \"--result-log is deprecated and scheduled for removal in pytest 6.0.\\n\"\n+    \"--result-log is deprecated, please try the new pytest-reportlog plugin.\\n\"\n     \"See https://docs.pytest.org/en/latest/deprecations.html#result-log-result-log for more information.\"\n )\n "
    },
    {
        "commit_id": "d2ea9e2db58dfb6c5a3c2981bfd062369e51fbf3",
        "commit_message": "Remove report_log in favor of pytest-reportlog\n\nFix #6180",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d2ea9e2db58dfb6c5a3c2981bfd062369e51fbf3",
        "buggy_code": "\"*--result-log is deprecated and scheduled for removal in pytest 6.0*\",",
        "fixed_code": "\"*--result-log is deprecated, please try the new pytest-reportlog plugin.\",",
        "patch": "@@ -16,7 +16,7 @@ def test():\n     result = testdir.runpytest(\"--result-log=%s\" % testdir.tmpdir.join(\"result.log\"))\n     result.stdout.fnmatch_lines(\n         [\n-            \"*--result-log is deprecated and scheduled for removal in pytest 6.0*\",\n+            \"*--result-log is deprecated, please try the new pytest-reportlog plugin.\",\n             \"*See https://docs.pytest.org/en/latest/deprecations.html#result-log-result-log for more information*\",\n         ]\n     )"
    },
    {
        "commit_id": "772dfc4f9d610ebd735be48fd1c0924384c94e04",
        "commit_message": "terminal: fix/remove wrong typing for currentfspath\n\nCan be -2, or py.path.local (not typed).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/772dfc4f9d610ebd735be48fd1c0924384c94e04",
        "buggy_code": "self.currentfspath = None  # type: Optional[int]",
        "fixed_code": "self.currentfspath = None  # type: Any",
        "patch": "@@ -254,7 +254,7 @@ def __init__(self, config: Config, file=None) -> None:\n         # self.writer will be deprecated in pytest-3.4\n         self.writer = self._tw\n         self._screen_width = self._tw.fullwidth\n-        self.currentfspath = None  # type: Optional[int]\n+        self.currentfspath = None  # type: Any\n         self.reportchars = getreportopt(config)\n         self.hasmarkup = self._tw.hasmarkup\n         self.isatty = file.isatty()"
    },
    {
        "commit_id": "b3bb60468331d49ff3eaa3241adb9fa070c90d19",
        "commit_message": "fix typo in _issue_warning_captured doc",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b3bb60468331d49ff3eaa3241adb9fa070c90d19",
        "buggy_code": "hook so we can display this warnings in the terminal. This is a hack until we can sort out #2891.",
        "fixed_code": "hook so we can display these warnings in the terminal. This is a hack until we can sort out #2891.",
        "patch": "@@ -138,7 +138,7 @@ def _issue_warning_captured(warning, hook, stacklevel):\n     \"\"\"\n     This function should be used instead of calling ``warnings.warn`` directly when we are in the \"configure\" stage:\n     at this point the actual options might not have been set, so we manually trigger the pytest_warning_captured\n-    hook so we can display this warnings in the terminal. This is a hack until we can sort out #2891.\n+    hook so we can display these warnings in the terminal. This is a hack until we can sort out #2891.\n \n     :param warning: the warning instance.\n     :param hook: the hook caller"
    },
    {
        "commit_id": "2e5cf1cc789908ab4856c84a99d7d1120f84e694",
        "commit_message": "Fix order of format args with warning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2e5cf1cc789908ab4856c84a99d7d1120f84e694",
        "buggy_code": "path, func, exctype, excvalue",
        "fixed_code": "func, path, exctype, excvalue",
        "patch": "@@ -72,7 +72,7 @@ def on_rm_rf_error(func, path: str, exc, *, start_path: Path) -> bool:\n             warnings.warn(\n                 PytestWarning(\n                     \"(rm_rf) unknown function {} when removing {}:\\n{}: {}\".format(\n-                        path, func, exctype, excvalue\n+                        func, path, exctype, excvalue\n                     )\n                 )\n             )"
    },
    {
        "commit_id": "e8a3d1adf2c2688e01e0eaff2110df0d8fc5acd6",
        "commit_message": "Fix test_trace_with_parametrize_handles_shared_fixtureinfo for colors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e8a3d1adf2c2688e01e0eaff2110df0d8fc5acd6",
        "buggy_code": "assert \"6 passed in\" in rest",
        "fixed_code": "assert \"= \\x1b[32m\\x1b[1m6 passed\\x1b[0m\\x1b[32m in\" in rest",
        "patch": "@@ -1086,7 +1086,7 @@ def test_func_kw(myparam, request, func=\"func_kw\"):\n             child.sendline(\"c\")\n             child.expect_exact(\"> PDB continue (IO-capturing resumed) >\")\n         rest = child.read().decode(\"utf8\")\n-        assert \"6 passed in\" in rest\n+        assert \"= \\x1b[32m\\x1b[1m6 passed\\x1b[0m\\x1b[32m in\" in rest\n         assert \"reading from stdin while output\" not in rest\n         # Only printed once - not on stderr.\n         assert \"Exit: Quitting debugger\" not in child.before.decode(\"utf8\")"
    },
    {
        "commit_id": "01769b141a842ba4e7c53d853bb0c7d14c111451",
        "commit_message": "Merge pull request #6100 from blueyed/fix-skip-offset\n\nterminal: fix line offset with skip reports",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/01769b141a842ba4e7c53d853bb0c7d14c111451",
        "buggy_code": "% (verbose_word, num, fspath, lineno + 1, reason)",
        "fixed_code": "% (verbose_word, num, fspath, lineno, reason)",
        "patch": "@@ -965,7 +965,7 @@ def show_skipped(lines: List[str]) -> None:\n                 if lineno is not None:\n                     lines.append(\n                         \"%s [%d] %s:%d: %s\"\n-                        % (verbose_word, num, fspath, lineno + 1, reason)\n+                        % (verbose_word, num, fspath, lineno, reason)\n                     )\n                 else:\n                     lines.append(\"%s [%d] %s: %s\" % (verbose_word, num, fspath, reason))"
    },
    {
        "commit_id": "35800a2f73c4233285a4a8f403ca94bc9c6e998e",
        "commit_message": "Merge pull request #6112 from gaucheph/fix-small-typo\n\ntypos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/35800a2f73c4233285a4a8f403ca94bc9c6e998e",
        "buggy_code": "we hope ot remove",
        "fixed_code": "we hope to remove",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\"\n this is a place where we put datastructures used by legacy apis\n-we hope ot remove\n+we hope to remove\n \"\"\"\n import keyword\n "
    },
    {
        "commit_id": "6d2cabae5752d7bf8e7f5b1b1c43ee41ec1ac067",
        "commit_message": "terminal: fix line offset with skip reports\n\nThe original fix in https://github.com/pytest-dev/pytest/pull/2548 was\nwrong, and was likely meant to fix the use with decorators instead,\nwhich this does now (while reverting 869eed9898).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6d2cabae5752d7bf8e7f5b1b1c43ee41ec1ac067",
        "buggy_code": "% (verbose_word, num, fspath, lineno + 1, reason)",
        "fixed_code": "% (verbose_word, num, fspath, lineno, reason)",
        "patch": "@@ -954,7 +954,7 @@ def show_skipped(lines: List[str]) -> None:\n                 if lineno is not None:\n                     lines.append(\n                         \"%s [%d] %s:%d: %s\"\n-                        % (verbose_word, num, fspath, lineno + 1, reason)\n+                        % (verbose_word, num, fspath, lineno, reason)\n                     )\n                 else:\n                     lines.append(\"%s [%d] %s: %s\" % (verbose_word, num, fspath, reason))"
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"*1 passed, 1 warnings in *\",",
        "fixed_code": "\"*1 passed, 1 warning in *\",",
        "patch": "@@ -1167,7 +1167,7 @@ def test_real():\n         [\n             \"*collected 1 item*\",\n             \"*test_dont_collect_non_function_callable.py:2: *cannot collect 'test_a' because it is not a function*\",\n-            \"*1 passed, 1 warnings in *\",\n+            \"*1 passed, 1 warning in *\",\n         ]\n     )\n "
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "assert \"warnings\" not in \"\".join(result.outlines)",
        "fixed_code": "assert \"warning\" not in \"\".join(result.outlines)",
        "patch": "@@ -122,7 +122,7 @@ def test_dont_rewrite_plugin(self, testdir):\n         }\n         testdir.makepyfile(**contents)\n         result = testdir.runpytest_subprocess()\n-        assert \"warnings\" not in \"\".join(result.outlines)\n+        assert \"warning\" not in \"\".join(result.outlines)\n \n     def test_rewrites_plugin_as_a_package(self, testdir):\n         pkgdir = testdir.mkpydir(\"plugin\")"
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"*2 error*\",",
        "fixed_code": "\"*2 errors*\",",
        "patch": "@@ -453,7 +453,7 @@ def test_two(capfd, capsys):\n                 \"E*capfd*capsys*same*time*\",\n                 \"*ERROR*setup*test_two*\",\n                 \"E*capsys*capfd*same*time*\",\n-                \"*2 error*\",\n+                \"*2 errors*\",\n             ]\n         )\n "
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"*Interrupted: 1 errors during collection*\",",
        "fixed_code": "\"*Interrupted: 1 error during collection*\",",
        "patch": "@@ -334,7 +334,7 @@ def test_doctest_unex_importerror_with_module(self, testdir):\n             [\n                 \"*ERROR collecting hello.py*\",\n                 \"*{e}: No module named *asdals*\".format(e=MODULE_NOT_FOUND_ERROR),\n-                \"*Interrupted: 1 errors during collection*\",\n+                \"*Interrupted: 1 error during collection*\",\n             ]\n         )\n "
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"collected 0 items / 1 errors\",",
        "fixed_code": "\"collected 0 items / 1 error\",",
        "patch": "@@ -891,7 +891,7 @@ def test():\n     result = testdir.runpytest(str(p1))\n     result.stdout.fnmatch_lines(\n         [\n-            \"collected 0 items / 1 errors\",\n+            \"collected 0 items / 1 error\",\n             \"* ERROR collecting test_parameterset_for_fail_at_collect.py *\",\n             \"Empty parameter set in 'test' at line 3\",\n             \"*= 1 error in *\","
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"*2 error*\",",
        "fixed_code": "\"*2 errors*\",",
        "patch": "@@ -234,7 +234,7 @@ def test_function2(hello):\n             \"*ValueError*42*\",\n             \"*function2*\",\n             \"*ValueError*42*\",\n-            \"*2 error*\",\n+            \"*2 errors*\",\n         ]\n     )\n     result.stdout.no_fnmatch_line(\"*xyz43*\")"
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "\"*1 pass*2 error*\",",
        "fixed_code": "\"*1 pass*2 errors*\",",
        "patch": "@@ -886,7 +886,7 @@ def test_func():\n             \"    syntax error\",\n             markline,\n             \"SyntaxError: invalid syntax\",\n-            \"*1 pass*2 error*\",\n+            \"*1 pass*2 errors*\",\n         ]\n     )\n "
    },
    {
        "commit_id": "d863c30c743138ed29cdf786cb18c41c24983fe1",
        "commit_message": "Fix plurality mismatch for  and  in pytest terminal summary",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d863c30c743138ed29cdf786cb18c41c24983fe1",
        "buggy_code": "result.stdout.fnmatch_lines(\"*errors during collection*\")",
        "fixed_code": "result.stdout.fnmatch_lines(\"*error during collection*\")",
        "patch": "@@ -164,7 +164,7 @@ def test_stop_on_collection_errors(broken_testdir, broken_first):\n     if broken_first:\n         files.reverse()\n     result = broken_testdir.runpytest(\"-v\", \"--strict-markers\", \"--stepwise\", *files)\n-    result.stdout.fnmatch_lines(\"*errors during collection*\")\n+    result.stdout.fnmatch_lines(\"*error during collection*\")\n \n \n def test_xfail_handling(testdir):"
    },
    {
        "commit_id": "f0c2b070c5be690ab2285f44cae51b521cf53e52",
        "commit_message": "Merge pull request #6046 from blueyed/fix-features\n\nFix test_doctest_set_trace_quit on features",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f0c2b070c5be690ab2285f44cae51b521cf53e52",
        "buggy_code": "assert \"= no tests ran in\" in rest",
        "fixed_code": "assert \"= \\x1b[33mno tests ran\\x1b[0m\\x1b[33m in\" in rest",
        "patch": "@@ -506,7 +506,7 @@ def function_1():\n         rest = child.read().decode(\"utf8\")\n \n         assert \"! _pytest.outcomes.Exit: Quitting debugger !\" in rest\n-        assert \"= no tests ran in\" in rest\n+        assert \"= \\x1b[33mno tests ran\\x1b[0m\\x1b[33m in\" in rest\n         assert \"BdbQuit\" not in rest\n         assert \"UNEXPECTED EXCEPTION\" not in rest\n "
    },
    {
        "commit_id": "b079dc2dbeb5f117de8c18e41a25cf44531f6bb2",
        "commit_message": "Fix test_doctest_set_trace_quit on features",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b079dc2dbeb5f117de8c18e41a25cf44531f6bb2",
        "buggy_code": "assert \"= no tests ran in\" in rest",
        "fixed_code": "assert \"= \\x1b[33mno tests ran\\x1b[0m\\x1b[33m in\" in rest",
        "patch": "@@ -506,7 +506,7 @@ def function_1():\n         rest = child.read().decode(\"utf8\")\n \n         assert \"! _pytest.outcomes.Exit: Quitting debugger !\" in rest\n-        assert \"= no tests ran in\" in rest\n+        assert \"= \\x1b[33mno tests ran\\x1b[0m\\x1b[33m in\" in rest\n         assert \"BdbQuit\" not in rest\n         assert \"UNEXPECTED EXCEPTION\" not in rest\n "
    },
    {
        "commit_id": "b88f5df4ce29e5dae05ad60c013b3a6a83535703",
        "commit_message": "Merge pull request #6010 from pytest-dev/asottile-patch-2\n\nEnsure .pytest_cache file has a newline at the end",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b88f5df4ce29e5dae05ad60c013b3a6a83535703",
        "buggy_code": "msg = \"# Created by pytest automatically.\\n*\"",
        "fixed_code": "msg = \"# Created by pytest automatically.\\n*\\n\"",
        "patch": "@@ -135,7 +135,7 @@ def _ensure_supporting_files(self):\n         readme_path.write_text(README_CONTENT)\n \n         gitignore_path = self._cachedir.joinpath(\".gitignore\")\n-        msg = \"# Created by pytest automatically.\\n*\"\n+        msg = \"# Created by pytest automatically.\\n*\\n\"\n         gitignore_path.write_text(msg, encoding=\"UTF-8\")\n \n         cachedir_tag_path = self._cachedir.joinpath(\"CACHEDIR.TAG\")"
    },
    {
        "commit_id": "b88f5df4ce29e5dae05ad60c013b3a6a83535703",
        "commit_message": "Merge pull request #6010 from pytest-dev/asottile-patch-2\n\nEnsure .pytest_cache file has a newline at the end",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b88f5df4ce29e5dae05ad60c013b3a6a83535703",
        "buggy_code": "msg = \"# Created by pytest automatically.\\n*\"",
        "fixed_code": "msg = \"# Created by pytest automatically.\\n*\\n\"",
        "patch": "@@ -1029,7 +1029,7 @@ def test_gitignore(testdir):\n     config = testdir.parseconfig()\n     cache = Cache.for_config(config)\n     cache.set(\"foo\", \"bar\")\n-    msg = \"# Created by pytest automatically.\\n*\"\n+    msg = \"# Created by pytest automatically.\\n*\\n\"\n     gitignore_path = cache._cachedir.joinpath(\".gitignore\")\n     assert gitignore_path.read_text(encoding=\"UTF-8\") == msg\n "
    },
    {
        "commit_id": "2bb8d9300100ca3454b477a9d2021898249dcfe0",
        "commit_message": "Fix for Python 4: replace unsafe PY3 with PY2 (#5820)\n\nFix for Python 4: replace unsafe PY3 with PY2",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2bb8d9300100ca3454b477a9d2021898249dcfe0",
        "buggy_code": "if sys.version_info.major == 3 and sys.version_info.minor >= 7:",
        "fixed_code": "if sys.version_info >= (3, 7):",
        "patch": "@@ -853,7 +853,7 @@ def test_supports_breakpoint_module_global(self):\n         Test that supports breakpoint global marks on Python 3.7+ and not on\n         CPython 3.5, 2.7\n         \"\"\"\n-        if sys.version_info.major == 3 and sys.version_info.minor >= 7:\n+        if sys.version_info >= (3, 7):\n             assert SUPPORTS_BREAKPOINT_BUILTIN is True\n         if sys.version_info.major == 3 and sys.version_info.minor == 5:\n             assert SUPPORTS_BREAKPOINT_BUILTIN is False"
    },
    {
        "commit_id": "d049b353974a8f091939775ef34106df7d9ef733",
        "commit_message": "Fix for Python 4: replace unsafe PY3 with PY2",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d049b353974a8f091939775ef34106df7d9ef733",
        "buggy_code": "if sys.version_info.major == 3 and sys.version_info.minor >= 7:",
        "fixed_code": "if sys.version_info >= (3, 7):",
        "patch": "@@ -853,7 +853,7 @@ def test_supports_breakpoint_module_global(self):\n         Test that supports breakpoint global marks on Python 3.7+ and not on\n         CPython 3.5, 2.7\n         \"\"\"\n-        if sys.version_info.major == 3 and sys.version_info.minor >= 7:\n+        if sys.version_info >= (3, 7):\n             assert SUPPORTS_BREAKPOINT_BUILTIN is True\n         if sys.version_info.major == 3 and sys.version_info.minor == 5:\n             assert SUPPORTS_BREAKPOINT_BUILTIN is False"
    },
    {
        "commit_id": "1675048b3569456a2109c9a44e899d6634285f15",
        "commit_message": "Merge pull request #5808 from goerz/pastebin\n\nFix \"lexer\" being used when uploading to bpaste.net",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1675048b3569456a2109c9a44e899d6634285f15",
        "buggy_code": "params = {\"code\": contents, \"lexer\": \"python3\", \"expiry\": \"1week\"}",
        "fixed_code": "params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}",
        "patch": "@@ -65,7 +65,7 @@ def create_new_paste(contents):\n     from urllib.request import urlopen\n     from urllib.parse import urlencode\n \n-    params = {\"code\": contents, \"lexer\": \"python3\", \"expiry\": \"1week\"}\n+    params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}\n     url = \"https://bpaste.net\"\n     try:\n         response = ("
    },
    {
        "commit_id": "1675048b3569456a2109c9a44e899d6634285f15",
        "commit_message": "Merge pull request #5808 from goerz/pastebin\n\nFix \"lexer\" being used when uploading to bpaste.net",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1675048b3569456a2109c9a44e899d6634285f15",
        "buggy_code": "lexer = \"python3\"",
        "fixed_code": "lexer = \"text\"",
        "patch": "@@ -165,7 +165,7 @@ def test_create_new_paste(self, pastebin, mocked_urlopen):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()"
    },
    {
        "commit_id": "f8dd6349c13d47223f6c280f8c755cc0e1196d41",
        "commit_message": "Fix \"lexer\" being used when uploading to bpaste.net\n\nCloses #5806.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f8dd6349c13d47223f6c280f8c755cc0e1196d41",
        "buggy_code": "params = {\"code\": contents, \"lexer\": \"python3\", \"expiry\": \"1week\"}",
        "fixed_code": "params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}",
        "patch": "@@ -65,7 +65,7 @@ def create_new_paste(contents):\n     from urllib.request import urlopen\n     from urllib.parse import urlencode\n \n-    params = {\"code\": contents, \"lexer\": \"python3\", \"expiry\": \"1week\"}\n+    params = {\"code\": contents, \"lexer\": \"text\", \"expiry\": \"1week\"}\n     url = \"https://bpaste.net\"\n     try:\n         response = ("
    },
    {
        "commit_id": "f8dd6349c13d47223f6c280f8c755cc0e1196d41",
        "commit_message": "Fix \"lexer\" being used when uploading to bpaste.net\n\nCloses #5806.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f8dd6349c13d47223f6c280f8c755cc0e1196d41",
        "buggy_code": "lexer = \"python3\"",
        "fixed_code": "lexer = \"text\"",
        "patch": "@@ -165,7 +165,7 @@ def test_create_new_paste(self, pastebin, mocked_urlopen):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()"
    },
    {
        "commit_id": "9859d37cf66eb4d6261ec51d1e5cdbd4848aadd9",
        "commit_message": "Merge pull request #5782 from linchiwei123/patch-1\n\nFix TypeError",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9859d37cf66eb4d6261ec51d1e5cdbd4848aadd9",
        "buggy_code": "return \"bad response: \" + response",
        "fixed_code": "return \"bad response: \" + response.decode(\"utf-8\")",
        "patch": "@@ -72,7 +72,7 @@ def create_new_paste(contents):\n     if m:\n         return \"{}/show/{}\".format(url, m.group(1))\n     else:\n-        return \"bad response: \" + response\n+        return \"bad response: \" + response.decode(\"utf-8\")\n \n \n def pytest_terminal_summary(terminalreporter):"
    },
    {
        "commit_id": "a4adf511fc1e275880c7c4bd68c376eab3435437",
        "commit_message": "Fix TypeError\n\ncan only concatenate str (not \"bytes\") to str",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a4adf511fc1e275880c7c4bd68c376eab3435437",
        "buggy_code": "return \"bad response: \" + response",
        "fixed_code": "return \"bad response: \" + response.decode(\"utf-8\")",
        "patch": "@@ -72,7 +72,7 @@ def create_new_paste(contents):\n     if m:\n         return \"{}/show/{}\".format(url, m.group(1))\n     else:\n-        return \"bad response: \" + response\n+        return \"bad response: \" + response.decode(\"utf-8\")\n \n \n def pytest_terminal_summary(terminalreporter):"
    },
    {
        "commit_id": "daff9066c0c4ed1108a391fe3efcf6df5ab905ca",
        "commit_message": "Merge pull request #5752 from bluetech/typing-py350-fix\n\nFix TypeError when importing pytest on Python 3.5.0 and 3.5.1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/daff9066c0c4ed1108a391fe3efcf6df5ab905ca",
        "buggy_code": "def match(self, regexp: Union[str, Pattern]) -> bool:",
        "fixed_code": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:",
        "patch": "@@ -591,7 +591,7 @@ def getrepr(\n         )\n         return fmt.repr_excinfo(self)\n \n-    def match(self, regexp: Union[str, Pattern]) -> bool:\n+    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n         \"\"\"\n         Check whether the regular expression 'regexp' is found in the string\n         representation of the exception using ``re.search``. If it matches"
    },
    {
        "commit_id": "c2f762460f4c42547de906d53ea498dd499ea837",
        "commit_message": "Merge pull request #5673 from bluetech/type-annotations-3\n\n1/X Fix check_untyped_defs = True mypy errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c2f762460f4c42547de906d53ea498dd499ea837",
        "buggy_code": "def __getattr__(self, name):",
        "fixed_code": "def __getattr__(self, name: str) -> MarkDecorator:",
        "patch": "@@ -292,7 +292,7 @@ def test_function():\n     _config = None\n     _markers = set()  # type: Set[str]\n \n-    def __getattr__(self, name):\n+    def __getattr__(self, name: str) -> MarkDecorator:\n         if name[0] == \"_\":\n             raise AttributeError(\"Marker name must NOT start with underscore\")\n "
    },
    {
        "commit_id": "43eab917a1d174808f1975364f64214f98b094a8",
        "commit_message": "Fix coverage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/43eab917a1d174808f1975364f64214f98b094a8",
        "buggy_code": "if sys.version_info < (3, 5, 2):",
        "fixed_code": "if sys.version_info < (3, 5, 2):  # pragma: no cover",
        "patch": "@@ -350,7 +350,7 @@ def funcargnames(self):\n         return self.fixturenames\n \n \n-if sys.version_info < (3, 5, 2):\n+if sys.version_info < (3, 5, 2):  # pragma: no cover\n \n     def overload(f):  # noqa: F811\n         return f"
    },
    {
        "commit_id": "43eab917a1d174808f1975364f64214f98b094a8",
        "commit_message": "Fix coverage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/43eab917a1d174808f1975364f64214f98b094a8",
        "buggy_code": "if sys.version_info < (3, 5, 2):",
        "fixed_code": "if sys.version_info < (3, 5, 2):  # pragma: no cover",
        "patch": "@@ -166,7 +166,7 @@ def __call__(self):\n                 # Early versions of Python 3.5 have some bug causing the\n                 # __call__ frame to still refer to t even after everything\n                 # is done. This makes the test pass for them.\n-                if sys.version_info < (3, 5, 2):\n+                if sys.version_info < (3, 5, 2):  # pragma: no cover\n                     del self\n                 raise ValueError\n "
    },
    {
        "commit_id": "9f3bfe82cf1200f7a4249a0fbc1e7db2c8369e63",
        "commit_message": "Fix TypeError when importing pytest on Python 3.5.0 and 3.5.1\n\nThe typing module on these versions have these issues:\n\n- `typing.Pattern` cannot appear in a Union since it is not considered a\n  class.\n\n- `@overload` is not supported in runtime. (On the other hand, mypy\n  doesn't support putting it under `if False`, so we need some runtime\n  hack).\n\nRefs #5751.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f3bfe82cf1200f7a4249a0fbc1e7db2c8369e63",
        "buggy_code": "def match(self, regexp: Union[str, Pattern]) -> bool:",
        "fixed_code": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:",
        "patch": "@@ -591,7 +591,7 @@ def getrepr(\n         )\n         return fmt.repr_excinfo(self)\n \n-    def match(self, regexp: Union[str, Pattern]) -> bool:\n+    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n         \"\"\"\n         Check whether the regular expression 'regexp' is found in the string\n         representation of the exception using ``re.search``. If it matches"
    },
    {
        "commit_id": "7259c453d6c1dba6727cd328e6db5635ccf5821c",
        "commit_message": "Fix some check_untyped_defs = True mypy warnings",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7259c453d6c1dba6727cd328e6db5635ccf5821c",
        "buggy_code": "def __getattr__(self, name):",
        "fixed_code": "def __getattr__(self, name: str) -> MarkDecorator:",
        "patch": "@@ -292,7 +292,7 @@ def test_function():\n     _config = None\n     _markers = set()  # type: Set[str]\n \n-    def __getattr__(self, name):\n+    def __getattr__(self, name: str) -> MarkDecorator:\n         if name[0] == \"_\":\n             raise AttributeError(\"Marker name must NOT start with underscore\")\n "
    },
    {
        "commit_id": "1049a38cee2d8642635733f2a9ea0e776c0929db",
        "commit_message": "Fix wording as suggested in review of #5741",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1049a38cee2d8642635733f2a9ea0e776c0929db",
        "buggy_code": ":param str minversion: if given, the imported module ``__version__``",
        "fixed_code": ":param str minversion: if given, the imported module's ``__version__``",
        "patch": "@@ -161,7 +161,7 @@ def importorskip(\n     current test if the module cannot be imported.\n \n     :param str modname: the name of the module to import\n-    :param str minversion: if given, the imported module ``__version__``\n+    :param str minversion: if given, the imported module's ``__version__``\n         attribute must be at least this minimal version, otherwise the test is\n         still skipped.\n     :param str reason: if given, this reason is shown as the message when the"
    },
    {
        "commit_id": "1049a38cee2d8642635733f2a9ea0e776c0929db",
        "commit_message": "Fix wording as suggested in review of #5741",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1049a38cee2d8642635733f2a9ea0e776c0929db",
        "buggy_code": ":param str name: The name of the file for copy.",
        "fixed_code": ":param str name: The name of the file to copy.",
        "patch": "@@ -632,7 +632,7 @@ def mkpydir(self, name):\n     def copy_example(self, name=None):\n         \"\"\"Copy file from project's directory into the testdir.\n \n-        :param str name: The name of the file for copy.\n+        :param str name: The name of the file to copy.\n         :return: path to the copied directory (inside ``self.tmpdir``).\n \n         \"\"\""
    },
    {
        "commit_id": "345df99db7365b34867e8429accb91287867341c",
        "commit_message": "Show session duration in human-readable format\n\nFix #5707",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/345df99db7365b34867e8429accb91287867341c",
        "buggy_code": "\"no tests ran in * seconds\",",
        "fixed_code": "\"no tests ran in 0.[0-9][0-9]s\",",
        "patch": "@@ -946,7 +946,7 @@ def test_simple():\n         expected_lines.extend(\n             [\n                 \"*test_collection_collect_only_live_logging.py::test_simple*\",\n-                \"no tests ran in * seconds\",\n+                \"no tests ran in 0.[0-9][0-9]s\",\n             ]\n         )\n     elif verbose == \"-qq\":"
    },
    {
        "commit_id": "345df99db7365b34867e8429accb91287867341c",
        "commit_message": "Show session duration in human-readable format\n\nFix #5707",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/345df99db7365b34867e8429accb91287867341c",
        "buggy_code": "with pytest.raises(ValueError, match=\"Pytest terminal report not found\"):",
        "fixed_code": "with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):",
        "patch": "@@ -278,7 +278,7 @@ def test_assert_outcomes_after_pytest_error(testdir):\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n-    with pytest.raises(ValueError, match=\"Pytest terminal report not found\"):\n+    with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):\n         result.assert_outcomes(passed=0)\n \n "
    },
    {
        "commit_id": "ee936b27a8bda9e46af327ce093c209463b488ab",
        "commit_message": "pytester: fix docstrings\n\nCo-Authored-By: Bruno Oliveira <nicoddemus@gmail.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ee936b27a8bda9e46af327ce093c209463b488ab",
        "buggy_code": ":return: self.tmpdir",
        "fixed_code": ":return: path to the copied directory (inside ``self.tmpdir``).",
        "patch": "@@ -633,7 +633,7 @@ def copy_example(self, name=None):\n         \"\"\"Copy file from project's directory into the testdir.\n \n         :param str name: The name of the file for copy.\n-        :return: self.tmpdir\n+        :return: path to the copied directory (inside ``self.tmpdir``).\n \n         \"\"\"\n         import warnings"
    },
    {
        "commit_id": "28fabc52bd3a35f1007ab82866940c9afdf7cefc",
        "commit_message": "fix grammar in test_collect_functools_partial docstr (#5703)\n\nfix grammar in test_collect_functools_partial docstr",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/28fabc52bd3a35f1007ab82866940c9afdf7cefc",
        "buggy_code": "to the wrapped functions are dealt correctly (see #811).",
        "fixed_code": "to the wrapped functions are dealt with correctly (see #811).",
        "patch": "@@ -1146,7 +1146,7 @@ class Test(object):\n def test_collect_functools_partial(testdir):\n     \"\"\"\n     Test that collection of functools.partial object works, and arguments\n-    to the wrapped functions are dealt correctly (see #811).\n+    to the wrapped functions are dealt with correctly (see #811).\n     \"\"\"\n     testdir.makepyfile(\n         \"\"\""
    },
    {
        "commit_id": "ef0915e1db3561b5cde7a2e6c60ef692bad1a2a1",
        "commit_message": "fix grammar in test_collect_functools_partial docstr",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ef0915e1db3561b5cde7a2e6c60ef692bad1a2a1",
        "buggy_code": "to the wrapped functions are dealt correctly (see #811).",
        "fixed_code": "to the wrapped functions are dealt with correctly (see #811).",
        "patch": "@@ -1146,7 +1146,7 @@ class Test(object):\n def test_collect_functools_partial(testdir):\n     \"\"\"\n     Test that collection of functools.partial object works, and arguments\n-    to the wrapped functions are dealt correctly (see #811).\n+    to the wrapped functions are dealt with correctly (see #811).\n     \"\"\"\n     testdir.makepyfile(\n         \"\"\""
    },
    {
        "commit_id": "1076a7e61de74bbe6fd5bc2c513804b5a2a121f3",
        "commit_message": "Merge pull request #5680 from ss18/ss18/pr0\n\nFix some typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1076a7e61de74bbe6fd5bc2c513804b5a2a121f3",
        "buggy_code": "- special action attribute map_long_option allows surpressing additional",
        "fixed_code": "- special action attribute map_long_option allows suppressing additional",
        "patch": "@@ -399,7 +399,7 @@ class DropShorterLongHelpFormatter(argparse.HelpFormatter):\n     \"\"\"shorten help for long options that differ only in extra hyphens\n \n     - collapse **long** options that are the same except for extra hyphens\n-    - special action attribute map_long_option allows surpressing additional\n+    - special action attribute map_long_option allows suppressing additional\n       long options\n     - shortcut if there are only two options and one of them is a short one\n     - cache result on action object as this is called at least 2 times"
    },
    {
        "commit_id": "1076a7e61de74bbe6fd5bc2c513804b5a2a121f3",
        "commit_message": "Merge pull request #5680 from ss18/ss18/pr0\n\nFix some typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1076a7e61de74bbe6fd5bc2c513804b5a2a121f3",
        "buggy_code": "item.source  # shouldnt fail",
        "fixed_code": "item.source  # shouldn't fail",
        "patch": "@@ -370,7 +370,7 @@ def test_excinfo_no_python_sourcecode(tmpdir):\n     excinfo = pytest.raises(ValueError, template.render, h=h)\n     for item in excinfo.traceback:\n         print(item)  # XXX: for some reason jinja.Template.render is printed in full\n-        item.source  # shouldnt fail\n+        item.source  # shouldn't fail\n         if item.path.basename == \"test.txt\":\n             assert str(item.source) == \"{{ h()}}:\"\n "
    },
    {
        "commit_id": "cff58457ddea873701fd21d110f5fe70bee5746d",
        "commit_message": "Fix the confusing different names of `fulltrace` (#5668)\n\nFix the confusing different names of `fulltrace`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cff58457ddea873701fd21d110f5fe70bee5746d",
        "buggy_code": "\"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",",
        "fixed_code": "\"(to show a full traceback on KeyboardInterrupt use --full-trace)\",",
        "patch": "@@ -692,7 +692,7 @@ def _report_keyboardinterrupt(self):\n             else:\n                 excrepr.reprcrash.toterminal(self._tw)\n                 self._tw.line(\n-                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n+                    \"(to show a full traceback on KeyboardInterrupt use --full-trace)\",\n                     yellow=True,\n                 )\n "
    },
    {
        "commit_id": "cff58457ddea873701fd21d110f5fe70bee5746d",
        "commit_message": "Fix the confusing different names of `fulltrace` (#5668)\n\nFix the confusing different names of `fulltrace`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cff58457ddea873701fd21d110f5fe70bee5746d",
        "buggy_code": "[\"(to show a full traceback on KeyboardInterrupt use --fulltrace)\"]",
        "fixed_code": "[\"(to show a full traceback on KeyboardInterrupt use --full-trace)\"]",
        "patch": "@@ -233,7 +233,7 @@ def test_interrupt_me():\n             )\n         else:\n             result.stdout.fnmatch_lines(\n-                [\"(to show a full traceback on KeyboardInterrupt use --fulltrace)\"]\n+                [\"(to show a full traceback on KeyboardInterrupt use --full-trace)\"]\n             )\n         result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n "
    },
    {
        "commit_id": "880e36860774cb098a4a604e9ef73265f786fd85",
        "commit_message": "Merge pull request #5653 from blueyed/fix-test\n\nFollowup: unittest: handle outcomes.Exit",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/880e36860774cb098a4a604e9ef73265f786fd85",
        "buggy_code": "result.stdout.fnmatch_lines(\"*Exit: pytest_exit called*\")",
        "fixed_code": "result.stdout.fnmatch_lines([\"*Exit: pytest_exit called*\", \"*= no tests ran in *\"])",
        "patch": "@@ -1085,4 +1085,4 @@ def test_should_not_run(self):\n     \"\"\"\n     )\n     result = testdir.runpytest()\n-    result.stdout.fnmatch_lines(\"*Exit: pytest_exit called*\")\n+    result.stdout.fnmatch_lines([\"*Exit: pytest_exit called*\", \"*= no tests ran in *\"])"
    },
    {
        "commit_id": "401c3d11097225e0081b41cfe5816e398812ba0c",
        "commit_message": "tests: unittest: fix/harden \"test_exit_outcome\"\n\nRef: https://github.com/pytest-dev/pytest/pull/5634#pullrequestreview-265565917",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/401c3d11097225e0081b41cfe5816e398812ba0c",
        "buggy_code": "result.stdout.fnmatch_lines(\"*Exit: pytest_exit called*\")",
        "fixed_code": "result.stdout.fnmatch_lines([\"*Exit: pytest_exit called*\", \"*= no tests ran in *\"])",
        "patch": "@@ -1085,4 +1085,4 @@ def test_should_not_run(self):\n     \"\"\"\n     )\n     result = testdir.runpytest()\n-    result.stdout.fnmatch_lines(\"*Exit: pytest_exit called*\")\n+    result.stdout.fnmatch_lines([\"*Exit: pytest_exit called*\", \"*= no tests ran in *\"])"
    },
    {
        "commit_id": "f7747f5dd652694ce1357ea633787cb772627bef",
        "commit_message": "Remove references to old-style classes in a couple error messages\n\nThese don't exist in Python 3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f7747f5dd652694ce1357ea633787cb772627bef",
        "buggy_code": "msg = \"exceptions must be old-style classes or derived from Warning, not %s\"",
        "fixed_code": "msg = \"exceptions must be derived from Warning, not %s\"",
        "patch": "@@ -151,7 +151,7 @@ class WarningsChecker(WarningsRecorder):\n     def __init__(self, expected_warning=None, match_expr=None):\n         super().__init__()\n \n-        msg = \"exceptions must be old-style classes or derived from Warning, not %s\"\n+        msg = \"exceptions must be derived from Warning, not %s\"\n         if isinstance(expected_warning, tuple):\n             for exc in expected_warning:\n                 if not inspect.isclass(exc):"
    },
    {
        "commit_id": "89dfde95353651f12474621becd808e2330371da",
        "commit_message": "Add rudimentary mypy type checking\n\nAdd a very lax mypy configuration, add it to tox -e linting, and\nfix/ignore the few errors that come up. The idea is to get it running\nbefore diving in too much.\n\nThis enables:\n\n- Progressively adding type annotations and enabling more strict\n  options, which will improve the codebase (IMO).\n\n- Annotating the public API in-line, and eventually exposing it to\n  library users who use type checkers (with a py.typed file).\n\nThough, none of this is done yet.\n\nRefs https://github.com/pytest-dev/pytest/issues/3342.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/89dfde95353651f12474621becd808e2330371da",
        "buggy_code": "stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")",
        "fixed_code": "cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")",
        "patch": "@@ -6,7 +6,7 @@\n     import pstats\n \n     script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n-    stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n+    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n     p = pstats.Stats(\"prof\")\n     p.strip_dirs()\n     p.sort_stats(\"cumulative\")"
    },
    {
        "commit_id": "89dfde95353651f12474621becd808e2330371da",
        "commit_message": "Add rudimentary mypy type checking\n\nAdd a very lax mypy configuration, add it to tox -e linting, and\nfix/ignore the few errors that come up. The idea is to get it running\nbefore diving in too much.\n\nThis enables:\n\n- Progressively adding type annotations and enabling more strict\n  options, which will improve the codebase (IMO).\n\n- Annotating the public API in-line, and eventually exposing it to\n  library users who use type checkers (with a py.typed file).\n\nThough, none of this is done yet.\n\nRefs https://github.com/pytest-dev/pytest/issues/3342.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/89dfde95353651f12474621becd808e2330371da",
        "buggy_code": "_saved = []",
        "fixed_code": "_saved = []  # type: list",
        "patch": "@@ -74,7 +74,7 @@ class pytestPDB:\n \n     _pluginmanager = None\n     _config = None\n-    _saved = []\n+    _saved = []  # type: list\n     _recursive_debug = 0\n     _wrapped_pdb_cls = None\n "
    },
    {
        "commit_id": "c1167ac5522b0e4d16c22f135351f530d3f3e214",
        "commit_message": "Add rudimentary mypy type checking\n\nAdd a very lax mypy configuration, add it to tox -e linting, and\nfix/ignore the few errors that come up. The idea is to get it running\nbefore diving in too much.\n\nThis enables:\n\n- Progressively adding type annotations and enabling more strict\n  options, which will improve the codebase (IMO).\n\n- Annotating the public API in-line, and eventually exposing it to\n  library users who use type checkers (with a py.typed file).\n\nThough, none of this is done yet.\n\nRefs https://github.com/pytest-dev/pytest/issues/3342.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1167ac5522b0e4d16c22f135351f530d3f3e214",
        "buggy_code": "stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")",
        "fixed_code": "cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")",
        "patch": "@@ -6,7 +6,7 @@\n     import pstats\n \n     script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n-    stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n+    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n     p = pstats.Stats(\"prof\")\n     p.strip_dirs()\n     p.sort_stats(\"cumulative\")"
    },
    {
        "commit_id": "c1167ac5522b0e4d16c22f135351f530d3f3e214",
        "commit_message": "Add rudimentary mypy type checking\n\nAdd a very lax mypy configuration, add it to tox -e linting, and\nfix/ignore the few errors that come up. The idea is to get it running\nbefore diving in too much.\n\nThis enables:\n\n- Progressively adding type annotations and enabling more strict\n  options, which will improve the codebase (IMO).\n\n- Annotating the public API in-line, and eventually exposing it to\n  library users who use type checkers (with a py.typed file).\n\nThough, none of this is done yet.\n\nRefs https://github.com/pytest-dev/pytest/issues/3342.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1167ac5522b0e4d16c22f135351f530d3f3e214",
        "buggy_code": "_saved = []",
        "fixed_code": "_saved = []  # type: list",
        "patch": "@@ -74,7 +74,7 @@ class pytestPDB:\n \n     _pluginmanager = None\n     _config = None\n-    _saved = []\n+    _saved = []  # type: list\n     _recursive_debug = 0\n     _wrapped_pdb_cls = None\n "
    },
    {
        "commit_id": "b77c87648147f8eb686deebe629ceb2123167c77",
        "commit_message": "Merge pull request #5563 from nicoddemus/sort-fix\n\nSort parametrize params to test_external_plugins_integrated",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b77c87648147f8eb686deebe629ceb2123167c77",
        "buggy_code": "@pytest.mark.parametrize(\"plugin\", deprecated.DEPRECATED_EXTERNAL_PLUGINS)",
        "fixed_code": "@pytest.mark.parametrize(\"plugin\", sorted(deprecated.DEPRECATED_EXTERNAL_PLUGINS))",
        "patch": "@@ -70,7 +70,7 @@ def test_terminal_reporter_writer_attr(pytestconfig):\n     assert terminal_reporter.writer is terminal_reporter._tw\n \n \n-@pytest.mark.parametrize(\"plugin\", deprecated.DEPRECATED_EXTERNAL_PLUGINS)\n+@pytest.mark.parametrize(\"plugin\", sorted(deprecated.DEPRECATED_EXTERNAL_PLUGINS))\n @pytest.mark.filterwarnings(\"default\")\n def test_external_plugins_integrated(testdir, plugin):\n     testdir.syspathinsert()"
    },
    {
        "commit_id": "8651d880a06c078d8c04ec8c99df1a05bc9826d7",
        "commit_message": "Handle xfail(strict=True) properly in --step-wise mode\n\nFix #5547",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8651d880a06c078d8c04ec8c99df1a05bc9826d7",
        "buggy_code": "if not self.active or \"xfail\" in report.keywords:",
        "fixed_code": "if not self.active:",
        "patch": "@@ -72,7 +72,7 @@ def pytest_collection_modifyitems(self, session, config, items):\n \n     def pytest_runtest_logreport(self, report):\n         # Skip this hook if plugin is not active or the test is xfailed.\n-        if not self.active or \"xfail\" in report.keywords:\n+        if not self.active:\n             return\n \n         if report.failed:"
    },
    {
        "commit_id": "1db132290f25f53482f8d22db0afd00b8817a9d0",
        "commit_message": "Apply workaround for multiple short options for Python <= 3.8\n\nHopefully by Python 3.9 this will be fixed upstream, if not we will\nneed to bump the version again.\n\nFix #5523",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1db132290f25f53482f8d22db0afd00b8817a9d0",
        "buggy_code": "if sys.version_info[:2] < (3, 8):  # pragma: no cover",
        "fixed_code": "if sys.version_info[:2] < (3, 9):  # pragma: no cover",
        "patch": "@@ -358,7 +358,7 @@ def parse_args(self, args=None, namespace=None):\n             getattr(args, FILE_OR_DIR).extend(argv)\n         return args\n \n-    if sys.version_info[:2] < (3, 8):  # pragma: no cover\n+    if sys.version_info[:2] < (3, 9):  # pragma: no cover\n         # Backport of https://github.com/python/cpython/pull/14316 so we can\n         # disable long --argument abbreviations without breaking short flags.\n         def _parse_optional(self, arg_string):"
    },
    {
        "commit_id": "9021194efd9fb253901c11a2a1fb83e7e8585dbf",
        "commit_message": "Apply workaround for multiple short options for Python <= 3.8\n\nHopefully by Python 3.9 this will be fixed upstream, if not we will\nneed to bump the version again.\n\nFix #5523",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9021194efd9fb253901c11a2a1fb83e7e8585dbf",
        "buggy_code": "if sys.version_info[:2] < (3, 8):  # pragma: no cover",
        "fixed_code": "if sys.version_info[:2] < (3, 9):  # pragma: no cover",
        "patch": "@@ -358,7 +358,7 @@ def parse_args(self, args=None, namespace=None):\n             getattr(args, FILE_OR_DIR).extend(argv)\n         return args\n \n-    if sys.version_info[:2] < (3, 8):  # pragma: no cover\n+    if sys.version_info[:2] < (3, 9):  # pragma: no cover\n         # Backport of https://github.com/python/cpython/pull/14316 so we can\n         # disable long --argument abbreviations without breaking short flags.\n         def _parse_optional(self, arg_string):"
    },
    {
        "commit_id": "f7bfbb557e3429fb0f2579322f1a3203a4b48e61",
        "commit_message": "Merge pull request #5506 from asottile/fix_no_terminal\n\nFix crash when discovery fails while using `-p no:terminal`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f7bfbb557e3429fb0f2579322f1a3203a4b48e61",
        "buggy_code": "tbstyle = self.config.getoption(\"tbstyle\")",
        "fixed_code": "tbstyle = self.config.getoption(\"tbstyle\", \"auto\")",
        "patch": "@@ -323,7 +323,7 @@ def repr_failure(self, excinfo):\n \n         # Respect explicit tbstyle option, but default to \"short\"\n         # (None._repr_failure_py defaults to \"long\" without \"fulltrace\" option).\n-        tbstyle = self.config.getoption(\"tbstyle\")\n+        tbstyle = self.config.getoption(\"tbstyle\", \"auto\")\n         if tbstyle == \"auto\":\n             tbstyle = \"short\"\n "
    },
    {
        "commit_id": "4e723d67508a72878e7afc014d4672944c94cd4f",
        "commit_message": "Fix crash when discovery fails while using `-p no:terminal`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4e723d67508a72878e7afc014d4672944c94cd4f",
        "buggy_code": "tbstyle = self.config.getoption(\"tbstyle\")",
        "fixed_code": "tbstyle = self.config.getoption(\"tbstyle\", \"auto\")",
        "patch": "@@ -323,7 +323,7 @@ def repr_failure(self, excinfo):\n \n         # Respect explicit tbstyle option, but default to \"short\"\n         # (None._repr_failure_py defaults to \"long\" without \"fulltrace\" option).\n-        tbstyle = self.config.getoption(\"tbstyle\")\n+        tbstyle = self.config.getoption(\"tbstyle\", \"auto\")\n         if tbstyle == \"auto\":\n             tbstyle = \"short\"\n "
    },
    {
        "commit_id": "eb90f3d1c89a10a00b5cd34a5df3aaaaec500177",
        "commit_message": "Fix default value of 'enable_assertion_pass_hook'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eb90f3d1c89a10a00b5cd34a5df3aaaaec500177",
        "buggy_code": "default=\"False\",",
        "fixed_code": "default=False,",
        "patch": "@@ -26,7 +26,7 @@ def pytest_addoption(parser):\n     parser.addini(\n         \"enable_assertion_pass_hook\",\n         type=\"bool\",\n-        default=\"False\",\n+        default=False,\n         help=\"Enables the pytest_assertion_pass hook.\"\n         \"Make sure to delete any previously generated pyc cache files.\",\n     )"
    },
    {
        "commit_id": "b713460cc75a7a54e15f47c63ecb3f93caa9d1d8",
        "commit_message": "fix typos in the resolution of #5125 (#5458)\n\nfix typos in the resolution of #5125",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b713460cc75a7a54e15f47c63ecb3f93caa9d1d8",
        "buggy_code": "\"\"\"Generate all test items from a collection node.src/_pytest/main.py",
        "fixed_code": "\"\"\"Generate all test items from a collection node.",
        "patch": "@@ -711,7 +711,7 @@ def getpathnode(self, path):\n         return res\n \n     def genitems(self, colitems):\n-        \"\"\"Generate all test items from a collection node.src/_pytest/main.py\n+        \"\"\"Generate all test items from a collection node.\n \n         This recurses into the collection node and returns a list of all the\n         test items contained within."
    },
    {
        "commit_id": "0627d92df248a3263234d0a560c18fc711584c81",
        "commit_message": "fix typos in the resolution of #5125",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0627d92df248a3263234d0a560c18fc711584c81",
        "buggy_code": "\"\"\"Generate all test items from a collection node.src/_pytest/main.py",
        "fixed_code": "\"\"\"Generate all test items from a collection node.",
        "patch": "@@ -711,7 +711,7 @@ def getpathnode(self, path):\n         return res\n \n     def genitems(self, colitems):\n-        \"\"\"Generate all test items from a collection node.src/_pytest/main.py\n+        \"\"\"Generate all test items from a collection node.\n \n         This recurses into the collection node and returns a list of all the\n         test items contained within."
    },
    {
        "commit_id": "79ef04888e261fd7966303bfcd99a29853046c98",
        "commit_message": "Merge pull request #5389 from dirk-thomas/patch-1\n\nfix logic if importlib_metadata.PathDistribution.files is None [breaks pytest 4.6.0|1|2]",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/79ef04888e261fd7966303bfcd99a29853046c98",
        "buggy_code": "for file in dist.files",
        "fixed_code": "for file in dist.files or []",
        "patch": "@@ -784,7 +784,7 @@ def _mark_plugins_for_rewrite(self, hook):\n             str(file)\n             for dist in importlib_metadata.distributions()\n             if any(ep.group == \"pytest11\" for ep in dist.entry_points)\n-            for file in dist.files\n+            for file in dist.files or []\n         )\n \n         for name in _iter_rewritable_modules(package_files):"
    },
    {
        "commit_id": "0a91e181af2451ed1254176d9bbbcf15148ff096",
        "commit_message": "fix logic if importlib_metadata.PathDistribution.files is None",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0a91e181af2451ed1254176d9bbbcf15148ff096",
        "buggy_code": "for file in dist.files",
        "fixed_code": "for file in dist.files or []",
        "patch": "@@ -784,7 +784,7 @@ def _mark_plugins_for_rewrite(self, hook):\n             str(file)\n             for dist in importlib_metadata.distributions()\n             if any(ep.group == \"pytest11\" for ep in dist.entry_points)\n-            for file in dist.files\n+            for file in dist.files or []\n         )\n \n         for name in _iter_rewritable_modules(package_files):"
    },
    {
        "commit_id": "28ac469eaa7206a0bf1439b31ed187beb3598522",
        "commit_message": "Merge pull request #5367 from apollovy/master\n\nFix typo about interpreters count in doc/en/example/parametrize.html",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/28ac469eaa7206a0bf1439b31ed187beb3598522",
        "buggy_code": "pythonlist = [\"python2.7\", \"python3.4\", \"python3.5\"]",
        "fixed_code": "pythonlist = [\"python3.5\", \"python3.6\", \"python3.7\"]",
        "patch": "@@ -9,7 +9,7 @@\n \n import pytest\n \n-pythonlist = [\"python2.7\", \"python3.4\", \"python3.5\"]\n+pythonlist = [\"python3.5\", \"python3.6\", \"python3.7\"]\n \n \n @pytest.fixture(params=pythonlist)"
    },
    {
        "commit_id": "4d49ba65297102110ae8aeecdb3b82b23a231fba",
        "commit_message": "Drop Python 2.7 and 3.4 support\n\n* Update setup.py requires and classifiers\n* Drop Python 2.7 and 3.4 from CI\n* Update docs dropping 2.7 and 3.4 support\n* Fix mock imports and remove tests related to pypi's mock module\n* Add py27 and 34 support docs to the sidebar\n* Remove usage of six from tmpdir\n* Remove six.PY* code blocks\n* Remove sys.version_info related code\n* Cleanup compat\n* Remove obsolete safe_str\n* Remove obsolete __unicode__ methods\n* Remove compat.PY35 and compat.PY36: not really needed anymore\n* Remove unused UNICODE_TYPES\n* Remove Jython specific code\n* Remove some Python 2 references from docs\n\nRelated to #5275",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d49ba65297102110ae8aeecdb3b82b23a231fba",
        "buggy_code": "from ..compat import Sequence",
        "fixed_code": "from collections.abc import Sequence",
        "patch": "@@ -5,11 +5,11 @@\n from __future__ import print_function\n \n import pprint\n+from collections.abc import Sequence\n \n import six\n \n import _pytest._code\n-from ..compat import Sequence\n from _pytest import outcomes\n from _pytest._io.saferepr import saferepr\n "
    },
    {
        "commit_id": "322a0f0a331494746c20a56f7776aec1f08d9240",
        "commit_message": "Fix mention of issue #5062 in docstrings",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/322a0f0a331494746c20a56f7776aec1f08d9240",
        "buggy_code": "\"\"\"Special rewrite for the builtin all function, see #5602\"\"\"",
        "fixed_code": "\"\"\"Special rewrite for the builtin all function, see #5062\"\"\"",
        "patch": "@@ -990,7 +990,7 @@ def visit_Call_35(self, call):\n         return res, outer_expl\n \n     def _visit_all(self, call):\n-        \"\"\"Special rewrite for the builtin all function, see #5602\"\"\"\n+        \"\"\"Special rewrite for the builtin all function, see #5062\"\"\"\n         if not isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):\n             return\n         gen_exp = call.args[0]"
    },
    {
        "commit_id": "de7ba5958bbec42770001c98bc94c627e113b8c3",
        "commit_message": "Merge pull request #5294 from akiomik/fix-disable_test_id_escaping-option\n\nFix `disable_test_id_escaping_and_forfeit_all_rights_to_community_support` option when using a list of test IDs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/de7ba5958bbec42770001c98bc94c627e113b8c3",
        "buggy_code": "return ascii_escaped(ids[idx])",
        "fixed_code": "return _ascii_escaped_by_config(ids[idx], config)",
        "patch": "@@ -1217,7 +1217,7 @@ def _idvalset(idx, parameterset, argnames, idfn, ids, item, config):\n         ]\n         return \"-\".join(this_id)\n     else:\n-        return ascii_escaped(ids[idx])\n+        return _ascii_escaped_by_config(ids[idx], config)\n \n \n def idmaker(argnames, parametersets, idfn=None, ids=None, config=None, item=None):"
    },
    {
        "commit_id": "a304dbb519aecf56022febe570958a8d64dae555",
        "commit_message": "Fix `disable_test_id_escaping_and_forfeit_all_rights_to_community_support` option when using a list of test IDs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a304dbb519aecf56022febe570958a8d64dae555",
        "buggy_code": "return ascii_escaped(ids[idx])",
        "fixed_code": "return _ascii_escaped_by_config(ids[idx], config)",
        "patch": "@@ -1217,7 +1217,7 @@ def _idvalset(idx, parameterset, argnames, idfn, ids, item, config):\n         ]\n         return \"-\".join(this_id)\n     else:\n-        return ascii_escaped(ids[idx])\n+        return _ascii_escaped_by_config(ids[idx], config)\n \n \n def idmaker(argnames, parametersets, idfn=None, ids=None, config=None, item=None):"
    },
    {
        "commit_id": "6663cb054c4f94953ae309341fb354ad273496dc",
        "commit_message": "Fix documentation of pytest.raises(match=...) (#5288)\n\nFix documentation of pytest.raises(match=...)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6663cb054c4f94953ae309341fb354ad273496dc",
        "buggy_code": "representation of the exception using ``re.match``. To match a literal",
        "fixed_code": "representation of the exception using ``re.search``. To match a literal",
        "patch": "@@ -559,7 +559,7 @@ def raises(expected_exception, *args, **kwargs):\n \n     :kwparam match: if specified, a string containing a regular expression,\n         or a regular expression object, that is tested against the string\n-        representation of the exception using ``re.match``. To match a literal\n+        representation of the exception using ``re.search``. To match a literal\n         string that may contain `special characters`__, the pattern can\n         first be escaped with ``re.escape``.\n "
    },
    {
        "commit_id": "b27e40cbf1f01b8bf92ecfc996ee89b22f0c9692",
        "commit_message": "Fix documentation of pytest.raises(match=...)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b27e40cbf1f01b8bf92ecfc996ee89b22f0c9692",
        "buggy_code": "representation of the exception using ``re.match``. To match a literal",
        "fixed_code": "representation of the exception using ``re.search``. To match a literal",
        "patch": "@@ -559,7 +559,7 @@ def raises(expected_exception, *args, **kwargs):\n \n     :kwparam match: if specified, a string containing a regular expression,\n         or a regular expression object, that is tested against the string\n-        representation of the exception using ``re.match``. To match a literal\n+        representation of the exception using ``re.search``. To match a literal\n         string that may contain `special characters`__, the pattern can\n         first be escaped with ``re.escape``.\n "
    },
    {
        "commit_id": "f1183c242275eafd5ad5e594bd631f694c18833a",
        "commit_message": "Remove the 'issue' marker from test suite\n\nIt doesn't seem to add much value (why would one execute tests\nbased on that marker?), plus using the docstring for that\nencourages one to write a more descriptive message about the test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1183c242275eafd5ad5e594bd631f694c18833a",
        "buggy_code": "@pytest.mark.issue(14)",
        "fixed_code": "\"\"\"#14\"\"\"",
        "patch": "@@ -605,8 +605,8 @@ def test_hello(capfd):\n         result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n         assert result.ret == 2\n \n-    @pytest.mark.issue(14)\n     def test_capture_and_logging(self, testdir):\n+        \"\"\"#14\"\"\"\n         p = testdir.makepyfile(\n             \"\"\"\\\n             import logging"
    },
    {
        "commit_id": "f1183c242275eafd5ad5e594bd631f694c18833a",
        "commit_message": "Remove the 'issue' marker from test suite\n\nIt doesn't seem to add much value (why would one execute tests\nbased on that marker?), plus using the docstring for that\nencourages one to write a more descriptive message about the test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1183c242275eafd5ad5e594bd631f694c18833a",
        "buggy_code": "@pytest.mark.issue(616)",
        "fixed_code": "\"\"\"#616\"\"\"",
        "patch": "@@ -491,10 +491,10 @@ def test_no_conftest(fxtr):\n             (\"snc\", \".\", 1),\n         ],\n     )\n-    @pytest.mark.issue(616)\n     def test_parsefactories_relative_node_ids(\n         self, testdir, chdir, testarg, expect_ntests_passed\n     ):\n+        \"\"\"#616\"\"\"\n         dirs = self._setup_tree(testdir)\n         print(\"pytest run in cwd: %s\" % (dirs[chdir].relto(testdir.tmpdir)))\n         print(\"pytestarg        : %s\" % (testarg))"
    },
    {
        "commit_id": "f1183c242275eafd5ad5e594bd631f694c18833a",
        "commit_message": "Remove the 'issue' marker from test suite\n\nIt doesn't seem to add much value (why would one execute tests\nbased on that marker?), plus using the docstring for that\nencourages one to write a more descriptive message about the test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1183c242275eafd5ad5e594bd631f694c18833a",
        "buggy_code": "@pytest.mark.issue(4243)",
        "fixed_code": "\"\"\"#4243\"\"\"",
        "patch": "@@ -47,8 +47,8 @@ def test_recording(self):\n             assert values is rec.list\n             pytest.raises(AssertionError, rec.pop)\n \n-    @pytest.mark.issue(4243)\n     def test_warn_stacklevel(self):\n+        \"\"\"#4243\"\"\"\n         rec = WarningsRecorder()\n         with rec:\n             warnings.warn(\"test\", DeprecationWarning, 2)"
    },
    {
        "commit_id": "f1183c242275eafd5ad5e594bd631f694c18833a",
        "commit_message": "Remove the 'issue' marker from test suite\n\nIt doesn't seem to add much value (why would one execute tests\nbased on that marker?), plus using the docstring for that\nencourages one to write a more descriptive message about the test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1183c242275eafd5ad5e594bd631f694c18833a",
        "buggy_code": "@pytest.mark.issue(4425)",
        "fixed_code": "\"\"\"#4425\"\"\"",
        "patch": "@@ -58,8 +58,8 @@ def test_mktemp(self, tmp_path):\n         assert tmp2.relto(t.getbasetemp()).startswith(\"this\")\n         assert tmp2 != tmp\n \n-    @pytest.mark.issue(4425)\n     def test_tmppath_relative_basetemp_absolute(self, tmp_path, monkeypatch):\n+        \"\"\"#4425\"\"\"\n         from _pytest.tmpdir import TempPathFactory\n \n         monkeypatch.chdir(tmp_path)"
    },
    {
        "commit_id": "f1183c242275eafd5ad5e594bd631f694c18833a",
        "commit_message": "Remove the 'issue' marker from test suite\n\nIt doesn't seem to add much value (why would one execute tests\nbased on that marker?), plus using the docstring for that\nencourages one to write a more descriptive message about the test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1183c242275eafd5ad5e594bd631f694c18833a",
        "buggy_code": "@pytest.mark.issue(3498)",
        "fixed_code": "\"\"\"#3498\"\"\"",
        "patch": "@@ -930,11 +930,11 @@ def test_should_not_run(self):\n     reprec.assertoutcome(passed=1)\n \n \n-@pytest.mark.issue(3498)\n @pytest.mark.parametrize(\n     \"base\", [\"six.moves.builtins.object\", \"unittest.TestCase\", \"unittest2.TestCase\"]\n )\n def test_usefixtures_marker_on_unittest(base, testdir):\n+    \"\"\"#3498\"\"\"\n     module = base.rsplit(\".\", 1)[0]\n     pytest.importorskip(module)\n     testdir.makepyfile("
    },
    {
        "commit_id": "685ca96c71d21611bb695a966121815ce1a44e5e",
        "commit_message": "Change ``--strict`` to ``--strict-markers``, preserving the old one\n\nFix #5023",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/685ca96c71d21611bb695a966121815ce1a44e5e",
        "buggy_code": "result = testdir.runpytest(\"--strict\")",
        "fixed_code": "result = testdir.runpytest(\"--strict-markers\")",
        "patch": "@@ -302,7 +302,7 @@ def test_func():\n             pass\n     \"\"\"\n     )\n-    result = testdir.runpytest(\"--strict\")\n+    result = testdir.runpytest(\"--strict-markers\")\n     assert result.ret == 0\n \n "
    },
    {
        "commit_id": "7e08e094730a66d97cfec4aa8d07ed167d1c20ee",
        "commit_message": "logging: improve default logging format (issue5214)\n\nWe improve the following things in the logging format:\n\n  * Show module name instead of just the filename\n  * show level of logging as the first thing\n  * show lineno attached to module:file details\n\nThanks to @blueyed who suggested this on the github issue.\n\nIt's my first contribution and I have added myself to AUTHORS.\n\nI also added to a changelog file.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7e08e094730a66d97cfec4aa8d07ed167d1c20ee",
        "buggy_code": "DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
        "fixed_code": "DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"",
        "patch": "@@ -15,7 +15,7 @@\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n "
    },
    {
        "commit_id": "53cd7fd2ea2cba07820009a4cfba1e09fa35fcfa",
        "commit_message": "Introduce new warning subclasses\n\nFix #5177",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/53cd7fd2ea2cba07820009a4cfba1e09fa35fcfa",
        "buggy_code": "result.stdout.fnmatch_lines([\"*PytestWarning: %s*\" % msg])",
        "fixed_code": "result.stdout.fnmatch_lines([\"*PytestAssertRewriteWarning: %s*\" % msg])",
        "patch": "@@ -630,7 +630,7 @@ def test():\n class TestAssertionWarnings:\n     @staticmethod\n     def assert_result_warns(result, msg):\n-        result.stdout.fnmatch_lines([\"*PytestWarning: %s*\" % msg])\n+        result.stdout.fnmatch_lines([\"*PytestAssertRewriteWarning: %s*\" % msg])\n \n     def test_tuple_warning(self, testdir):\n         testdir.makepyfile("
    },
    {
        "commit_id": "e87d3d70e2da2663ee619ec60e878be928d49506",
        "commit_message": "Merge pull request #5138 from ikonst/notify_exception_without_terminal\n\nFix dependencies on 'terminal' plugin",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e87d3d70e2da2663ee619ec60e878be928d49506",
        "buggy_code": "if option and option.fulltrace:",
        "fixed_code": "if option and getattr(option, \"fulltrace\", False):",
        "patch": "@@ -699,7 +699,7 @@ def pytest_cmdline_parse(self, pluginmanager, args):\n         return self\n \n     def notify_exception(self, excinfo, option=None):\n-        if option and option.fulltrace:\n+        if option and getattr(option, \"fulltrace\", False):\n             style = \"long\"\n         else:\n             style = \"native\""
    },
    {
        "commit_id": "e87d3d70e2da2663ee619ec60e878be928d49506",
        "commit_message": "Merge pull request #5138 from ikonst/notify_exception_without_terminal\n\nFix dependencies on 'terminal' plugin",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e87d3d70e2da2663ee619ec60e878be928d49506",
        "buggy_code": "excinfo, style=item.config.option.tbstyle",
        "fixed_code": "excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")",
        "patch": "@@ -361,7 +361,7 @@ def from_item_and_call(cls, item, call):\n                     longrepr = item.repr_failure(excinfo)\n                 else:  # exception in setup or teardown\n                     longrepr = item._repr_failure_py(\n-                        excinfo, style=item.config.option.tbstyle\n+                        excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n                     )\n         for rwhen, key, content in item._report_sections:\n             sections.append((\"Captured %s %s\" % (key, rwhen), content))"
    },
    {
        "commit_id": "45ba736c81bb8c3442f8d9b052d1dd043e131c06",
        "commit_message": "Merge pull request #5128 from blueyed/mark-is\n\nFix error message with unregistered markers",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/45ba736c81bb8c3442f8d9b052d1dd043e131c06",
        "buggy_code": "fail(\"{!r} not a registered marker\".format(name), pytrace=False)",
        "fixed_code": "fail(\"{!r} is not a registered marker\".format(name), pytrace=False)",
        "patch": "@@ -312,7 +312,7 @@ def __getattr__(self, name):\n             # then it really is time to issue a warning or an error.\n             if name not in self._markers:\n                 if self._config.option.strict:\n-                    fail(\"{!r} not a registered marker\".format(name), pytrace=False)\n+                    fail(\"{!r} is not a registered marker\".format(name), pytrace=False)\n                 else:\n                     warnings.warn(\n                         \"Unknown pytest.mark.%s - is this a typo?  You can register \""
    },
    {
        "commit_id": "45ba736c81bb8c3442f8d9b052d1dd043e131c06",
        "commit_message": "Merge pull request #5128 from blueyed/mark-is\n\nFix error message with unregistered markers",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/45ba736c81bb8c3442f8d9b052d1dd043e131c06",
        "buggy_code": "result.stdout.fnmatch_lines([\"'unregisteredmark' not a registered marker\"])",
        "fixed_code": "result.stdout.fnmatch_lines([\"'unregisteredmark' is not a registered marker\"])",
        "patch": "@@ -205,7 +205,7 @@ def test_hello():\n     )\n     result = testdir.runpytest(\"--strict\")\n     assert result.ret != 0\n-    result.stdout.fnmatch_lines([\"'unregisteredmark' not a registered marker\"])\n+    result.stdout.fnmatch_lines([\"'unregisteredmark' is not a registered marker\"])\n \n \n @pytest.mark.parametrize("
    },
    {
        "commit_id": "cc005af47ee31bc1364b29fef7de72a65889ad99",
        "commit_message": "Fix error message with unregistered markers",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cc005af47ee31bc1364b29fef7de72a65889ad99",
        "buggy_code": "fail(\"{!r} not a registered marker\".format(name), pytrace=False)",
        "fixed_code": "fail(\"{!r} is not a registered marker\".format(name), pytrace=False)",
        "patch": "@@ -306,7 +306,7 @@ def __getattr__(self, name):\n             # then it really is time to issue a warning or an error.\n             if name not in self._markers:\n                 if self._config.option.strict:\n-                    fail(\"{!r} not a registered marker\".format(name), pytrace=False)\n+                    fail(\"{!r} is not a registered marker\".format(name), pytrace=False)\n                 else:\n                     warnings.warn(\n                         \"Unknown pytest.mark.%s - is this a typo?  You can register \""
    },
    {
        "commit_id": "cc005af47ee31bc1364b29fef7de72a65889ad99",
        "commit_message": "Fix error message with unregistered markers",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cc005af47ee31bc1364b29fef7de72a65889ad99",
        "buggy_code": "result.stdout.fnmatch_lines([\"'unregisteredmark' not a registered marker\"])",
        "fixed_code": "result.stdout.fnmatch_lines([\"'unregisteredmark' is not a registered marker\"])",
        "patch": "@@ -204,7 +204,7 @@ def test_hello():\n     )\n     result = testdir.runpytest(\"--strict\")\n     assert result.ret != 0\n-    result.stdout.fnmatch_lines([\"'unregisteredmark' not a registered marker\"])\n+    result.stdout.fnmatch_lines([\"'unregisteredmark' is not a registered marker\"])\n \n \n @pytest.mark.parametrize("
    },
    {
        "commit_id": "bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "commit_message": "Merge pull request #5051 from blueyed/fix-test\n\nFix test_conftest when run via pytest-randomly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "buggy_code": "def test_plugins_given_as_strings(self, tmpdir, monkeypatch):",
        "fixed_code": "def test_plugins_given_as_strings(self, tmpdir, monkeypatch, _sys_snapshot):",
        "patch": "@@ -485,7 +485,7 @@ def test_foo(invalid_fixture):\n             [\"*source code not available*\", \"E*fixture 'invalid_fixture' not found\"]\n         )\n \n-    def test_plugins_given_as_strings(self, tmpdir, monkeypatch):\n+    def test_plugins_given_as_strings(self, tmpdir, monkeypatch, _sys_snapshot):\n         \"\"\"test that str values passed to main() as `plugins` arg\n         are interpreted as module names to be imported and registered.\n         #855."
    },
    {
        "commit_id": "bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "commit_message": "Merge pull request #5051 from blueyed/fix-test\n\nFix test_conftest when run via pytest-randomly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "buggy_code": "def importasmod(self, request):",
        "fixed_code": "def importasmod(self, request, _sys_snapshot):",
        "patch": "@@ -441,7 +441,7 @@ def test_division_zero():\n \n class TestFormattedExcinfo(object):\n     @pytest.fixture\n-    def importasmod(self, request):\n+    def importasmod(self, request, _sys_snapshot):\n         def importasmod(source):\n             source = textwrap.dedent(source)\n             tmpdir = request.getfixturevalue(\"tmpdir\")"
    },
    {
        "commit_id": "bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "commit_message": "Merge pull request #5051 from blueyed/fix-test\n\nFix test_conftest when run via pytest-randomly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc157417e1afffbefdebcd8cb724b73741c5f1be",
        "buggy_code": "def test_source_of_class_at_eof_without_newline(tmpdir):",
        "fixed_code": "def test_source_of_class_at_eof_without_newline(tmpdir, _sys_snapshot):",
        "patch": "@@ -410,7 +410,7 @@ def g():\n     assert lines == [\"def f():\", \"    def g():\", \"        pass\"]\n \n \n-def test_source_of_class_at_eof_without_newline(tmpdir):\n+def test_source_of_class_at_eof_without_newline(tmpdir, _sys_snapshot):\n     # this test fails because the implicit inspect.getsource(A) below\n     # does not return the \"x = 1\" last line.\n     source = _pytest._code.Source("
    },
    {
        "commit_id": "0f965e57a23313b0020e1c9737380dbe18b6d088",
        "commit_message": "changelog, fix branch coverage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f965e57a23313b0020e1c9737380dbe18b6d088",
        "buggy_code": "elif len_diff < 0:",
        "fixed_code": "else:",
        "patch": "@@ -297,7 +297,7 @@ def _compare_eq_sequence(left, right, verbose=0):\n         if len_diff > 0:\n             dir_with_more = \"Left\"\n             extra = saferepr(left[len_right])\n-        elif len_diff < 0:\n+        else:\n             len_diff = 0 - len_diff\n             dir_with_more = \"Right\"\n             extra = saferepr(right[len_left])"
    },
    {
        "commit_id": "00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "commit_message": "Register \"issue\" mark for self-tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "buggy_code": "@pytest.mark.issue351",
        "fixed_code": "@pytest.mark.issue(351)",
        "patch": "@@ -393,7 +393,7 @@ def test_blah(self):\n         assert not call.items\n \n \n-@pytest.mark.issue351\n+@pytest.mark.issue(351)\n class TestParameterize(object):\n     def test_idfn_marker(self, testdir):\n         testdir.makepyfile("
    },
    {
        "commit_id": "00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "commit_message": "Register \"issue\" mark for self-tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "buggy_code": "@pytest.mark.issue14",
        "fixed_code": "@pytest.mark.issue(14)",
        "patch": "@@ -605,7 +605,7 @@ def test_hello(capfd):\n         result.stdout.fnmatch_lines([\"*KeyboardInterrupt*\"])\n         assert result.ret == 2\n \n-    @pytest.mark.issue14\n+    @pytest.mark.issue(14)\n     def test_capture_and_logging(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\\"
    },
    {
        "commit_id": "00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "commit_message": "Register \"issue\" mark for self-tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/00810b9b2a6a4483e7dc8121df76df32f85cdaf7",
        "buggy_code": "@pytest.mark.issue616",
        "fixed_code": "@pytest.mark.issue(616)",
        "patch": "@@ -490,7 +490,7 @@ def test_no_conftest(fxtr):\n             (\"snc\", \".\", 1),\n         ],\n     )\n-    @pytest.mark.issue616\n+    @pytest.mark.issue(616)\n     def test_parsefactories_relative_node_ids(\n         self, testdir, chdir, testarg, expect_ntests_passed\n     ):"
    },
    {
        "commit_id": "c92021fc4f7cec38a973a12e3d1a32a8686384fb",
        "commit_message": "Merge pull request #5003 from blueyed/off\n\nFix off-by-one error with lineno in mark collection error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c92021fc4f7cec38a973a12e3d1a32a8686384fb",
        "buggy_code": "\"Empty parameter set in '%s' at line %d\" % (f_name, lineno)",
        "fixed_code": "\"Empty parameter set in '%s' at line %d\" % (f_name, lineno + 1)",
        "patch": "@@ -44,7 +44,7 @@ def get_empty_parameterset_mark(config, argnames, func):\n         f_name = func.__name__\n         _, lineno = getfslineno(func)\n         raise Collector.CollectError(\n-            \"Empty parameter set in '%s' at line %d\" % (f_name, lineno)\n+            \"Empty parameter set in '%s' at line %d\" % (f_name, lineno + 1)\n         )\n     else:\n         raise LookupError(requested_mark)"
    },
    {
        "commit_id": "76c70cbf4c040be6fd96aade184cce540f4a4761",
        "commit_message": "Fix off-by-one error with lineno in mark collection error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/76c70cbf4c040be6fd96aade184cce540f4a4761",
        "buggy_code": "\"Empty parameter set in '%s' at line %d\" % (f_name, lineno)",
        "fixed_code": "\"Empty parameter set in '%s' at line %d\" % (f_name, lineno + 1)",
        "patch": "@@ -44,7 +44,7 @@ def get_empty_parameterset_mark(config, argnames, func):\n         f_name = func.__name__\n         _, lineno = getfslineno(func)\n         raise Collector.CollectError(\n-            \"Empty parameter set in '%s' at line %d\" % (f_name, lineno)\n+            \"Empty parameter set in '%s' at line %d\" % (f_name, lineno + 1)\n         )\n     else:\n         raise LookupError(requested_mark)"
    },
    {
        "commit_id": "057c97812ba568225164696918fa93764ab33184",
        "commit_message": "Merge pull request #4975 from blueyed/verbose-fixes\n\nFix usages of \"verbose\" option",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/057c97812ba568225164696918fa93764ab33184",
        "buggy_code": "if config.option.verbose or config.getini(\"cache_dir\") != \".pytest_cache\":",
        "fixed_code": "if config.option.verbose > 0 or config.getini(\"cache_dir\") != \".pytest_cache\":",
        "patch": "@@ -340,7 +340,7 @@ def cache(request):\n \n def pytest_report_header(config):\n     \"\"\"Display cachedir with --cache-show and if non-default.\"\"\"\n-    if config.option.verbose or config.getini(\"cache_dir\") != \".pytest_cache\":\n+    if config.option.verbose > 0 or config.getini(\"cache_dir\") != \".pytest_cache\":\n         cachedir = config.cache._cachedir\n         # TODO: evaluate generating upward relative paths\n         # starting with .., ../.. if sensible"
    },
    {
        "commit_id": "057c97812ba568225164696918fa93764ab33184",
        "commit_message": "Merge pull request #4975 from blueyed/verbose-fixes\n\nFix usages of \"verbose\" option",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/057c97812ba568225164696918fa93764ab33184",
        "buggy_code": "if pytestconfig.getoption(\"verbose\"):",
        "fixed_code": "if pytestconfig.getoption(\"verbose\") > 0:",
        "patch": "@@ -1065,7 +1065,7 @@ def pytestconfig(request):\n     Example::\n \n         def test_foo(pytestconfig):\n-            if pytestconfig.getoption(\"verbose\"):\n+            if pytestconfig.getoption(\"verbose\") > 0:\n                 ...\n \n     \"\"\""
    },
    {
        "commit_id": "057c97812ba568225164696918fa93764ab33184",
        "commit_message": "Merge pull request #4975 from blueyed/verbose-fixes\n\nFix usages of \"verbose\" option",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/057c97812ba568225164696918fa93764ab33184",
        "buggy_code": "if self._log_cli_enabled() and not config.getoption(\"verbose\"):",
        "fixed_code": "if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:",
        "patch": "@@ -389,7 +389,7 @@ def __init__(self, config):\n         self._config = config\n \n         # enable verbose output automatically if live logging is enabled\n-        if self._log_cli_enabled() and not config.getoption(\"verbose\"):\n+        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n             config.option.verbose = 1\n \n         self.print_logs = get_option_ini(config, \"log_print\")"
    },
    {
        "commit_id": "23146e752725e67878c8400eedb3670ab9a7a996",
        "commit_message": "Fix usages of \"verbose\" option\n\nWith `-qq` `bool(config.getoption(\"verbose\"))` is True; it needs to be\nchecked for `> 0`.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/23146e752725e67878c8400eedb3670ab9a7a996",
        "buggy_code": "if config.option.verbose or config.getini(\"cache_dir\") != \".pytest_cache\":",
        "fixed_code": "if config.option.verbose > 0 or config.getini(\"cache_dir\") != \".pytest_cache\":",
        "patch": "@@ -340,7 +340,7 @@ def cache(request):\n \n def pytest_report_header(config):\n     \"\"\"Display cachedir with --cache-show and if non-default.\"\"\"\n-    if config.option.verbose or config.getini(\"cache_dir\") != \".pytest_cache\":\n+    if config.option.verbose > 0 or config.getini(\"cache_dir\") != \".pytest_cache\":\n         cachedir = config.cache._cachedir\n         # TODO: evaluate generating upward relative paths\n         # starting with .., ../.. if sensible"
    },
    {
        "commit_id": "23146e752725e67878c8400eedb3670ab9a7a996",
        "commit_message": "Fix usages of \"verbose\" option\n\nWith `-qq` `bool(config.getoption(\"verbose\"))` is True; it needs to be\nchecked for `> 0`.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/23146e752725e67878c8400eedb3670ab9a7a996",
        "buggy_code": "if pytestconfig.getoption(\"verbose\"):",
        "fixed_code": "if pytestconfig.getoption(\"verbose\") > 0:",
        "patch": "@@ -1065,7 +1065,7 @@ def pytestconfig(request):\n     Example::\n \n         def test_foo(pytestconfig):\n-            if pytestconfig.getoption(\"verbose\"):\n+            if pytestconfig.getoption(\"verbose\") > 0:\n                 ...\n \n     \"\"\""
    },
    {
        "commit_id": "23146e752725e67878c8400eedb3670ab9a7a996",
        "commit_message": "Fix usages of \"verbose\" option\n\nWith `-qq` `bool(config.getoption(\"verbose\"))` is True; it needs to be\nchecked for `> 0`.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/23146e752725e67878c8400eedb3670ab9a7a996",
        "buggy_code": "if self._log_cli_enabled() and not config.getoption(\"verbose\"):",
        "fixed_code": "if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:",
        "patch": "@@ -389,7 +389,7 @@ def __init__(self, config):\n         self._config = config\n \n         # enable verbose output automatically if live logging is enabled\n-        if self._log_cli_enabled() and not config.getoption(\"verbose\"):\n+        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n             config.option.verbose = 1\n \n         self.print_logs = get_option_ini(config, \"log_print\")"
    },
    {
        "commit_id": "0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "commit_message": "Merge pull request #4967 from blueyed/p-no-default\n\nFix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "buggy_code": "mode = ns.assertmode",
        "fixed_code": "mode = getattr(ns, \"assertmode\", \"plain\")",
        "patch": "@@ -762,7 +762,7 @@ def _consider_importhook(self, args):\n         by the importhook.\n         \"\"\"\n         ns, unknown_args = self._parser.parse_known_and_unknown_args(args)\n-        mode = ns.assertmode\n+        mode = getattr(ns, \"assertmode\", \"plain\")\n         if mode == \"rewrite\":\n             try:\n                 hook = _pytest.assertion.install_importhook(self)"
    },
    {
        "commit_id": "0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "commit_message": "Merge pull request #4967 from blueyed/p-no-default\n\nFix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "buggy_code": "if not self.config.option.doctestmodules:",
        "fixed_code": "if not self.config.getoption(\"doctestmodules\", False):",
        "patch": "@@ -548,7 +548,7 @@ def _collect(self, arg):\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n-        if not self.config.option.doctestmodules:\n+        if not self.config.getoption(\"doctestmodules\", False):\n             pm = self.config.pluginmanager\n             for parent in reversed(argpath.parts()):\n                 if pm._confcutdir and pm._confcutdir.relto(parent):"
    },
    {
        "commit_id": "0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "commit_message": "Merge pull request #4967 from blueyed/p-no-default\n\nFix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0e6cf0ff282a2baded992841be18456a4f4dfbe3",
        "buggy_code": "if self.config.getoption(\"setupshow\"):",
        "fixed_code": "if self.config.getoption(\"setupshow\", False):",
        "patch": "@@ -251,7 +251,7 @@ def _determine_show_progress_info(self):\n         if self.config.getoption(\"capture\", \"no\") == \"no\":\n             return False\n         # do not show progress if we are showing fixture setup/teardown\n-        if self.config.getoption(\"setupshow\"):\n+        if self.config.getoption(\"setupshow\", False):\n             return False\n         return self.config.getini(\"console_output_style\") in (\"progress\", \"count\")\n "
    },
    {
        "commit_id": "553951c44381bf554a20d656534f616873f0fbc6",
        "commit_message": "Fix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/553951c44381bf554a20d656534f616873f0fbc6",
        "buggy_code": "mode = ns.assertmode",
        "fixed_code": "mode = getattr(ns, \"assertmode\", \"plain\")",
        "patch": "@@ -762,7 +762,7 @@ def _consider_importhook(self, args):\n         by the importhook.\n         \"\"\"\n         ns, unknown_args = self._parser.parse_known_and_unknown_args(args)\n-        mode = ns.assertmode\n+        mode = getattr(ns, \"assertmode\", \"plain\")\n         if mode == \"rewrite\":\n             try:\n                 hook = _pytest.assertion.install_importhook(self)"
    },
    {
        "commit_id": "553951c44381bf554a20d656534f616873f0fbc6",
        "commit_message": "Fix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/553951c44381bf554a20d656534f616873f0fbc6",
        "buggy_code": "if not self.config.option.doctestmodules:",
        "fixed_code": "if not self.config.getoption(\"doctestmodules\", False):",
        "patch": "@@ -548,7 +548,7 @@ def _collect(self, arg):\n         # Start with a Session root, and delve to argpath item (dir or file)\n         # and stack all Packages found on the way.\n         # No point in finding packages when collecting doctests\n-        if not self.config.option.doctestmodules:\n+        if not self.config.getoption(\"doctestmodules\", False):\n             pm = self.config.pluginmanager\n             for parent in reversed(argpath.parts()):\n                 if pm._confcutdir and pm._confcutdir.relto(parent):"
    },
    {
        "commit_id": "553951c44381bf554a20d656534f616873f0fbc6",
        "commit_message": "Fix some issues related to \"-p no:X\" with default_plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/553951c44381bf554a20d656534f616873f0fbc6",
        "buggy_code": "if self.config.getoption(\"setupshow\"):",
        "fixed_code": "if self.config.getoption(\"setupshow\", False):",
        "patch": "@@ -251,7 +251,7 @@ def _determine_show_progress_info(self):\n         if self.config.getoption(\"capture\", \"no\") == \"no\":\n             return False\n         # do not show progress if we are showing fixture setup/teardown\n-        if self.config.getoption(\"setupshow\"):\n+        if self.config.getoption(\"setupshow\", False):\n             return False\n         return self.config.getini(\"console_output_style\") in (\"progress\", \"count\")\n "
    },
    {
        "commit_id": "714f2113bb932838a5a5824a5d6c7e74198754af",
        "commit_message": "Merge pull request #4929 from blueyed/fix-_factorytraceback-offset\n\nFix line offsets with `ScopeMismatch` errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/714f2113bb932838a5a5824a5d6c7e74198754af",
        "buggy_code": "lines.append(\"%s:%d:  def %s%s\" % (p, lineno, factory.__name__, args))",
        "fixed_code": "lines.append(\"%s:%d:  def %s%s\" % (p, lineno + 1, factory.__name__, args))",
        "patch": "@@ -612,7 +612,7 @@ def _factorytraceback(self):\n             fs, lineno = getfslineno(factory)\n             p = self._pyfuncitem.session.fspath.bestrelpath(fs)\n             args = _format_args(factory)\n-            lines.append(\"%s:%d:  def %s%s\" % (p, lineno, factory.__name__, args))\n+            lines.append(\"%s:%d:  def %s%s\" % (p, lineno + 1, factory.__name__, args))\n         return lines\n \n     def _getscopeitem(self, scope):"
    },
    {
        "commit_id": "f4f6cb7532a49e621d9ba4af9b08f69f6c653f94",
        "commit_message": "Merge pull request #4946 from blueyed/fix-bench\n\nFix bench/bench.py without args",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f4f6cb7532a49e621d9ba4af9b08f69f6c653f94",
        "buggy_code": "script = sys.argv[1:] if len(sys.argv) > 1 else \"empty.py\"",
        "fixed_code": "script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]",
        "patch": "@@ -5,7 +5,7 @@\n     import pytest  # NOQA\n     import pstats\n \n-    script = sys.argv[1:] if len(sys.argv) > 1 else \"empty.py\"\n+    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n     stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n     p = pstats.Stats(\"prof\")\n     p.strip_dirs()"
    },
    {
        "commit_id": "8c96b65082b469b3bc8f1c6f8618924b002b22df",
        "commit_message": "Fix bench/bench.py without args\n\nFixes:\n\n>   File \"\u2026/Vcs/pytest/src/_pytest/config/__init__.py\", line 60, in main\n>     config = _prepareconfig(args, plugins)\n>   File \"\u2026/Vcs/pytest/src/_pytest/config/__init__.py\", line 179, in _prepareconfig\n>     raise TypeError(msg.format(args, type(args)))\n> TypeError: `args` parameter expected to be a list or tuple of strings, got: 'empty.py' (type: <class 'str'>)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8c96b65082b469b3bc8f1c6f8618924b002b22df",
        "buggy_code": "script = sys.argv[1:] if len(sys.argv) > 1 else \"empty.py\"",
        "fixed_code": "script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]",
        "patch": "@@ -5,7 +5,7 @@\n     import pytest  # NOQA\n     import pstats\n \n-    script = sys.argv[1:] if len(sys.argv) > 1 else \"empty.py\"\n+    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n     stats = cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n     p = pstats.Stats(\"prof\")\n     p.strip_dirs()"
    },
    {
        "commit_id": "d441fa66fea052d04364acb6fc67c3b3cc0217c0",
        "commit_message": "Fix line offsets with `ScopeMismatch` errors\n\nFixes https://github.com/pytest-dev/pytest/issues/4928.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d441fa66fea052d04364acb6fc67c3b3cc0217c0",
        "buggy_code": "lines.append(\"%s:%d:  def %s%s\" % (p, lineno, factory.__name__, args))",
        "fixed_code": "lines.append(\"%s:%d:  def %s%s\" % (p, lineno + 1, factory.__name__, args))",
        "patch": "@@ -612,7 +612,7 @@ def _factorytraceback(self):\n             fs, lineno = getfslineno(factory)\n             p = self._pyfuncitem.session.fspath.bestrelpath(fs)\n             args = _format_args(factory)\n-            lines.append(\"%s:%d:  def %s%s\" % (p, lineno, factory.__name__, args))\n+            lines.append(\"%s:%d:  def %s%s\" % (p, lineno + 1, factory.__name__, args))\n         return lines\n \n     def _getscopeitem(self, scope):"
    },
    {
        "commit_id": "0f3d6306340a867a51441c92a14583ee1b883157",
        "commit_message": "Merge pull request #4898 from shoyer/patch-1\n\nFix broken error message in pytester",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f3d6306340a867a51441c92a14583ee1b883157",
        "buggy_code": "func_name, example_dir.bestrelpath(self.request.confg.rootdir)",
        "fixed_code": "func_name, example_dir.bestrelpath(self.request.config.rootdir)",
        "patch": "@@ -693,7 +693,7 @@ def copy_example(self, name=None):\n             else:\n                 raise LookupError(\n                     \"{} cant be found as module or package in {}\".format(\n-                        func_name, example_dir.bestrelpath(self.request.confg.rootdir)\n+                        func_name, example_dir.bestrelpath(self.request.config.rootdir)\n                     )\n                 )\n         else:"
    },
    {
        "commit_id": "dc7ae41f332153173866c02636758643559393e1",
        "commit_message": "Fix broken error message in pytester",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dc7ae41f332153173866c02636758643559393e1",
        "buggy_code": "func_name, example_dir.bestrelpath(self.request.confg.rootdir)",
        "fixed_code": "func_name, example_dir.bestrelpath(self.request.config.rootdir)",
        "patch": "@@ -693,7 +693,7 @@ def copy_example(self, name=None):\n             else:\n                 raise LookupError(\n                     \"{} cant be found as module or package in {}\".format(\n-                        func_name, example_dir.bestrelpath(self.request.confg.rootdir)\n+                        func_name, example_dir.bestrelpath(self.request.config.rootdir)\n                     )\n                 )\n         else:"
    },
    {
        "commit_id": "7dceabfcb2a8d178761bd862d37e01cbcc23f6d1",
        "commit_message": "Ensure fixtures obtained with getfixturevalue() are finalized in the correct order\n\nFix #1895",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7dceabfcb2a8d178761bd862d37e01cbcc23f6d1",
        "buggy_code": "reprec = testdir.inline_run(\"-s\")",
        "fixed_code": "reprec = testdir.inline_run(\"-v\")",
        "patch": "@@ -1866,7 +1866,7 @@ def test_finish():\n                              \"setup-2\", \"step1-2\", \"step2-2\", \"teardown-2\",]\n         \"\"\"\n         )\n-        reprec = testdir.inline_run(\"-s\")\n+        reprec = testdir.inline_run(\"-v\")\n         reprec.assertoutcome(passed=5)\n \n     def test_ordering_autouse_before_explicit(self, testdir):"
    },
    {
        "commit_id": "ede6387caabea85e82849481e24c3b875acb04b3",
        "commit_message": "Require funcsigs>=1.0 on Python 2.7\n\nFix #4815",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ede6387caabea85e82849481e24c3b875acb04b3",
        "buggy_code": "'funcsigs;python_version<\"3.0\"',",
        "fixed_code": "'funcsigs>=1.0;python_version<\"3.0\"',",
        "patch": "@@ -13,7 +13,7 @@\n     'more-itertools>=4.0.0,<6.0.0;python_version<=\"2.7\"',\n     'more-itertools>=4.0.0;python_version>\"2.7\"',\n     \"atomicwrites>=1.0\",\n-    'funcsigs;python_version<\"3.0\"',\n+    'funcsigs>=1.0;python_version<\"3.0\"',\n     'pathlib2>=2.2.0;python_version<\"3.6\"',\n     'colorama;sys_platform==\"win32\"',\n ]"
    },
    {
        "commit_id": "63e7f8e34098621a2167f51ef54c280a4f3ffba3",
        "commit_message": "Merge pull request #4817 from nicoddemus/merge-master-into-features\n\nMerge master into features (including fix from 4816)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63e7f8e34098621a2167f51ef54c280a4f3ffba3",
        "buggy_code": "def iter_entry_points(name):",
        "fixed_code": "def iter_entry_points(group, name=None):",
        "patch": "@@ -209,7 +209,7 @@ def load(self, require=True, *args, **kwargs):\n                     import spamplugin\n                     return spamplugin\n \n-            def iter_entry_points(name):\n+            def iter_entry_points(group, name=None):\n                 yield DummyEntryPoint()\n \n             pkg_resources.iter_entry_points = iter_entry_points"
    },
    {
        "commit_id": "1cf9c2e76fd454d36c897ef43a350b0666363f50",
        "commit_message": "Merge pull request #4816 from nicoddemus/fix-new-pluggy\n\nFix test failures after pluggy 1.8 release",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1cf9c2e76fd454d36c897ef43a350b0666363f50",
        "buggy_code": "def iter_entry_points(name):",
        "fixed_code": "def iter_entry_points(group, name=None):",
        "patch": "@@ -209,7 +209,7 @@ def load(self, require=True, *args, **kwargs):\n                     import spamplugin\n                     return spamplugin\n \n-            def iter_entry_points(name):\n+            def iter_entry_points(group, name=None):\n                 yield DummyEntryPoint()\n \n             pkg_resources.iter_entry_points = iter_entry_points"
    },
    {
        "commit_id": "0ca1f6e0f444f39ac14eb5da13ac39a58932edae",
        "commit_message": "Merge branch 'fix-new-pluggy' into merge-master-into-features",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0ca1f6e0f444f39ac14eb5da13ac39a58932edae",
        "buggy_code": "def iter_entry_points(name):",
        "fixed_code": "def iter_entry_points(group, name=None):",
        "patch": "@@ -209,7 +209,7 @@ def load(self, require=True, *args, **kwargs):\n                     import spamplugin\n                     return spamplugin\n \n-            def iter_entry_points(name):\n+            def iter_entry_points(group, name=None):\n                 yield DummyEntryPoint()\n \n             pkg_resources.iter_entry_points = iter_entry_points"
    },
    {
        "commit_id": "a68f4fd2b9e99c82476d0e04ebcf561aeddbcb2e",
        "commit_message": "Fix test failures after pluggy 1.8 release\n\npluggy now calls iter_entry_points with different arguments, and tests\nwhich mocked that call need to be updated accordingly.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a68f4fd2b9e99c82476d0e04ebcf561aeddbcb2e",
        "buggy_code": "def iter_entry_points(name):",
        "fixed_code": "def iter_entry_points(group, name=None):",
        "patch": "@@ -209,7 +209,7 @@ def load(self, require=True, *args, **kwargs):\n                     import spamplugin\n                     return spamplugin\n \n-            def iter_entry_points(name):\n+            def iter_entry_points(group, name=None):\n                 yield DummyEntryPoint()\n \n             pkg_resources.iter_entry_points = iter_entry_points"
    },
    {
        "commit_id": "dc8af18a0ecdcc85dcb3367e3278f7649cb53121",
        "commit_message": "Merge pull request #4745 from blueyed/test_collect_pkg_init_and_file_in_args\n\nFix handling of pkg init and test file via args",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dc8af18a0ecdcc85dcb3367e3278f7649cb53121",
        "buggy_code": "col = collect_root._collectfile(argpath)",
        "fixed_code": "col = collect_root._collectfile(argpath, handle_dupes=False)",
        "patch": "@@ -582,7 +582,7 @@ def _collect(self, arg):\n                 col = self._node_cache[argpath]\n             else:\n                 collect_root = self._pkg_roots.get(argpath.dirname, self)\n-                col = collect_root._collectfile(argpath)\n+                col = collect_root._collectfile(argpath, handle_dupes=False)\n                 if col:\n                     self._node_cache[argpath] = col\n             m = self.matchnodes(col, names)"
    },
    {
        "commit_id": "61b9246afe1a6aa76d12a62007e716d831432348",
        "commit_message": "Fix/improve handling of pkg init and test file via args\n\nRef: https://github.com/pytest-dev/pytest/issues/4344#issuecomment-441095934",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/61b9246afe1a6aa76d12a62007e716d831432348",
        "buggy_code": "col = collect_root._collectfile(argpath)",
        "fixed_code": "col = collect_root._collectfile(argpath, handle_dupes=False)",
        "patch": "@@ -582,7 +582,7 @@ def _collect(self, arg):\n                 col = self._node_cache[argpath]\n             else:\n                 collect_root = self._pkg_roots.get(argpath.dirname, self)\n-                col = collect_root._collectfile(argpath)\n+                col = collect_root._collectfile(argpath, handle_dupes=False)\n                 if col:\n                     self._node_cache[argpath] = col\n             m = self.matchnodes(col, names)"
    },
    {
        "commit_id": "59e6fb94b5e47bcb8db58c7d704ff389a0b0a8a6",
        "commit_message": "Fix \"ValueError: Plugin already registered\" exceptions when running in build directories that symlink to actual source.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/59e6fb94b5e47bcb8db58c7d704ff389a0b0a8a6",
        "buggy_code": "mod = self._importconftest(conftestpath)",
        "fixed_code": "mod = self._importconftest(conftestpath.realpath())",
        "patch": "@@ -408,7 +408,7 @@ def _getconftestmodules(self, path):\n                 continue\n             conftestpath = parent.join(\"conftest.py\")\n             if conftestpath.isfile():\n-                mod = self._importconftest(conftestpath)\n+                mod = self._importconftest(conftestpath.realpath())\n                 clist.append(mod)\n         self._dirpath2confmods[directory] = clist\n         return clist"
    },
    {
        "commit_id": "c0e6543b5a3233c1fcdf21eed346c33d15656ab8",
        "commit_message": "Fix pytest_report_teststatus call to pass new config object (#4691)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c0e6543b5a3233c1fcdf21eed346c33d15656ab8",
        "buggy_code": "report=report",
        "fixed_code": "report=report, config=terminalreporter.config",
        "patch": "@@ -285,7 +285,7 @@ def show_(terminalreporter, lines):\n \n def _get_report_str(terminalreporter, report):\n     _category, _short, verbose = terminalreporter.config.hook.pytest_report_teststatus(\n-        report=report\n+        report=report, config=terminalreporter.config\n     )\n     return verbose\n "
    },
    {
        "commit_id": "7ad499ad762a9ccc4b58886386980f84dd5d6da7",
        "commit_message": "Merge pull request #4681 from RonnyPfannschmidt/fix-4680-tmppath-is-tmpdir\n\nFix 4680 - `tmp_path` and `tmpdir` now share the same temporary directory",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7ad499ad762a9ccc4b58886386980f84dd5d6da7",
        "buggy_code": "\"tmpdir_factory\"])",
        "fixed_code": "\"tmp_path\", \"tmp_path_factory\"])",
        "patch": "@@ -739,7 +739,7 @@ def sarg(tmpdir):\n             def test_function(request, farg):\n                 assert set(get_public_names(request.fixturenames)) == \\\n                        set([\"tmpdir\", \"sarg\", \"arg1\", \"request\", \"farg\",\n-                            \"tmpdir_factory\"])\n+                            \"tmp_path\", \"tmp_path_factory\"])\n         \"\"\"\n         )\n         reprec = testdir.inline_run()"
    },
    {
        "commit_id": "5567c772cd23ebab01cfe642e2363bc1661068a3",
        "commit_message": "quick&dirty fix fixture tests that rely on tmppath fixture structure",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5567c772cd23ebab01cfe642e2363bc1661068a3",
        "buggy_code": "\"tmpdir_factory\"])",
        "fixed_code": "\"tmp_path\", \"tmp_path_factory\"])",
        "patch": "@@ -739,7 +739,7 @@ def sarg(tmpdir):\n             def test_function(request, farg):\n                 assert set(get_public_names(request.fixturenames)) == \\\n                        set([\"tmpdir\", \"sarg\", \"arg1\", \"request\", \"farg\",\n-                            \"tmpdir_factory\"])\n+                            \"tmp_path\", \"tmp_path_factory\"])\n         \"\"\"\n         )\n         reprec = testdir.inline_run()"
    },
    {
        "commit_id": "6d388689500af36bdc10fd7816105433f8f97194",
        "commit_message": "fix tests by adding additional output to expected responses",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6d388689500af36bdc10fd7816105433f8f97194",
        "buggy_code": "\"collected 4 items / 2 deselected\",",
        "fixed_code": "\"collected 4 items / 2 deselected / 2 selected\",",
        "patch": "@@ -418,7 +418,7 @@ def test_b2():\n         result = testdir.runpytest(\"--lf\")\n         result.stdout.fnmatch_lines(\n             [\n-                \"collected 4 items / 2 deselected\",\n+                \"collected 4 items / 2 deselected / 2 selected\",\n                 \"run-last-failure: rerun previous 2 failures\",\n                 \"*2 failed, 2 deselected in*\",\n             ]"
    },
    {
        "commit_id": "57bf9d6740d64c788f35734785f69627d5250fd9",
        "commit_message": "Merge pull request #4654 from AuHau/fix/#4653-Fix_tmp_path_symlink_resolution\n\nFixes #4653 - tmp_path provides real path",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/57bf9d6740d64c788f35734785f69627d5250fd9",
        "buggy_code": "temproot = Path(from_env or tempfile.gettempdir())",
        "fixed_code": "temproot = Path(from_env or tempfile.gettempdir()).resolve()",
        "patch": "@@ -65,7 +65,7 @@ def getbasetemp(self):\n                 ensure_reset_dir(basetemp)\n             else:\n                 from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n-                temproot = Path(from_env or tempfile.gettempdir())\n+                temproot = Path(from_env or tempfile.gettempdir()).resolve()\n                 user = get_user() or \"unknown\"\n                 # use a sub-directory in the temproot to speed-up\n                 # make_numbered_dir() call"
    },
    {
        "commit_id": "fd48cd57f95d2c4e2f6f4e416d20c36b4484d094",
        "commit_message": "Remove config.warn, Node.warn; pytest_logwarning issues a warning when implemented\n\nFix #3078",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fd48cd57f95d2c4e2f6f4e416d20c36b4484d094",
        "buggy_code": "pm.addhooks(holder)",
        "fixed_code": "pm.add_hookspecs(holder)",
        "patch": "@@ -168,7 +168,7 @@ def pytest_xyz_noarg():\n @pytest.mark.parametrize(\"holder\", make_holder())\n def test_hookrecorder_basic(holder):\n     pm = PytestPluginManager()\n-    pm.addhooks(holder)\n+    pm.add_hookspecs(holder)\n     rec = HookRecorder(pm)\n     pm.hook.pytest_xyz(arg=123)\n     call = rec.popcall(\"pytest_xyz\")"
    },
    {
        "commit_id": "5b83417afcce36c42e5c6cd51649da55101c0d86",
        "commit_message": "Deprecate the 'message' parameter of pytest.raises\n\nFix #3974",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5b83417afcce36c42e5c6cd51649da55101c0d86",
        "buggy_code": "with pytest.raises(ValueError, message=\"Pytest terminal report not found\"):",
        "fixed_code": "with pytest.raises(ValueError, match=\"Pytest terminal report not found\"):",
        "patch": "@@ -280,7 +280,7 @@ def test_assert_outcomes_after_pytest_error(testdir):\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n-    with pytest.raises(ValueError, message=\"Pytest terminal report not found\"):\n+    with pytest.raises(ValueError, match=\"Pytest terminal report not found\"):\n         result.assert_outcomes(passed=0)\n \n "
    },
    {
        "commit_id": "e3d30f8ebf75da51f4ac09a6b197716420994b1f",
        "commit_message": "Remove deprecated PyCollector.makeitem\n\nFix #4535",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e3d30f8ebf75da51f4ac09a6b197716420994b1f",
        "buggy_code": "pytest.Module, \"makeitem\", lambda self, name, obj: values.append(name)",
        "fixed_code": "pytest.Module, \"_makeitem\", lambda self, name, obj: values.append(name)",
        "patch": "@@ -808,7 +808,7 @@ def test_makeitem_non_underscore(self, testdir, monkeypatch):\n         modcol = testdir.getmodulecol(\"def _hello(): pass\")\n         values = []\n         monkeypatch.setattr(\n-            pytest.Module, \"makeitem\", lambda self, name, obj: values.append(name)\n+            pytest.Module, \"_makeitem\", lambda self, name, obj: values.append(name)\n         )\n         values = modcol.collect()\n         assert \"_hello\" not in values"
    },
    {
        "commit_id": "0bccfc44a754dfefce3e99602e767253b7f360f7",
        "commit_message": "Fix flaky test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0bccfc44a754dfefce3e99602e767253b7f360f7",
        "buggy_code": "assert 0.01 <= round(float(val), 2) < 0.02",
        "fixed_code": "assert 0.01 <= round(float(val), 3) < 0.02",
        "patch": "@@ -169,7 +169,7 @@ def test_sleep():\n         node = dom.find_first_by_tag(\"testsuite\")\n         tnode = node.find_first_by_tag(\"testcase\")\n         val = tnode[\"time\"]\n-        assert 0.01 <= round(float(val), 2) < 0.02\n+        assert 0.01 <= round(float(val), 3) < 0.02\n \n     def test_setup_error(self, testdir):\n         testdir.makepyfile("
    },
    {
        "commit_id": "9839ceffe0c78c5308716db758532b03e0f908d8",
        "commit_message": "Change -ra to show errors and failures last, instead of first\n\nOften in large test suites (like pytest's), the -ra summary is very useful\nto obtain a list of failures so we can execute each test at once to fix them.\n\nProblem is the default shows errors and failures first, which leads to a lot\nof scrolling to get to them.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9839ceffe0c78c5308716db758532b03e0f908d8",
        "buggy_code": "reportopts = \"fEsxXw\"",
        "fixed_code": "reportopts = \"sxXwEf\"",
        "patch": "@@ -167,7 +167,7 @@ def getreportopt(config):\n             if char not in reportopts and char != \"a\":\n                 reportopts += char\n             elif char == \"a\":\n-                reportopts = \"fEsxXw\"\n+                reportopts = \"sxXwEf\"\n     return reportopts\n \n "
    },
    {
        "commit_id": "e1e4b226c6aa7ea81bf18eb192a6f979275d7097",
        "commit_message": ":ok_hand: Address code review\n\nEdited the changelog for extra clarity, and to fire off auto-formatting\n\nOddly enough, keeping `filename='{filename!r}'` caused an error while\ncollecting tests, but getting rid of the single ticks fixed it\nHopefully closes #3191",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e1e4b226c6aa7ea81bf18eb192a6f979275d7097",
        "buggy_code": "filename='{filename}',",
        "fixed_code": "filename={filename!r},",
        "patch": "@@ -901,7 +901,7 @@ def warn_about_none_ast(self, node, module_path, lineno):\n warn_explicit(\n     PytestWarning('assertion the value None, Please use \"assert is None\"'),\n     category=None,\n-    filename='{filename}',\n+    filename={filename!r},\n     lineno={lineno},\n )\n             \"\"\".format("
    },
    {
        "commit_id": "860bc5077220cab315b54dfa458b68cee6a18d93",
        "commit_message": "Merge pull request #4451 from asottile/report_correct_filename_raises_exec\n\nFix `raises(..., \"code(string)\")` frame filename.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/860bc5077220cab315b54dfa458b68cee6a18d93",
        "buggy_code": "code = _pytest._code.Source(code).compile()",
        "fixed_code": "code = _pytest._code.Source(code).compile(_genframe=frame)",
        "patch": "@@ -679,7 +679,7 @@ def raises(expected_exception, *args, **kwargs):\n         loc.update(kwargs)\n         # print \"raises frame scope: %r\" % frame.f_locals\n         try:\n-            code = _pytest._code.Source(code).compile()\n+            code = _pytest._code.Source(code).compile(_genframe=frame)\n             six.exec_(code, frame.f_globals, loc)\n             # XXX didn't mean f_globals == f_locals something special?\n             #     this is destroyed here ..."
    },
    {
        "commit_id": "0d5298475de40c36f591b2a57d8843082485ef1c",
        "commit_message": "Fix `raises(..., \"code(string)\")` frame filename.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0d5298475de40c36f591b2a57d8843082485ef1c",
        "buggy_code": "code = _pytest._code.Source(code).compile()",
        "fixed_code": "code = _pytest._code.Source(code).compile(_genframe=frame)",
        "patch": "@@ -679,7 +679,7 @@ def raises(expected_exception, *args, **kwargs):\n         loc.update(kwargs)\n         # print \"raises frame scope: %r\" % frame.f_locals\n         try:\n-            code = _pytest._code.Source(code).compile()\n+            code = _pytest._code.Source(code).compile(_genframe=frame)\n             six.exec_(code, frame.f_globals, loc)\n             # XXX didn't mean f_globals == f_locals something special?\n             #     this is destroyed here ..."
    },
    {
        "commit_id": "63f90a2bcd249a91c76d9e2078143bf66c33b43c",
        "commit_message": "Merge pull request #4438 from RonnyPfannschmidt/fix-4386-raises-partial-object\n\nfix #4386 - restructure construction and partial state of ExceptionInfo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63f90a2bcd249a91c76d9e2078143bf66c33b43c",
        "buggy_code": "six.text_type(_pytest._code.ExceptionInfo()),",
        "fixed_code": "six.text_type(_pytest._code.ExceptionInfo.from_current()),",
        "patch": "@@ -164,7 +164,7 @@ def isiterable(obj):\n         explanation = [\n             u\"(pytest_assertion plugin: representation of details failed.  \"\n             u\"Probably an object has a faulty __repr__.)\",\n-            six.text_type(_pytest._code.ExceptionInfo()),\n+            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n         ]\n \n     if not explanation:"
    },
    {
        "commit_id": "63f90a2bcd249a91c76d9e2078143bf66c33b43c",
        "commit_message": "Merge pull request #4438 from RonnyPfannschmidt/fix-4386-raises-partial-object\n\nfix #4386 - restructure construction and partial state of ExceptionInfo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63f90a2bcd249a91c76d9e2078143bf66c33b43c",
        "buggy_code": "excinfo = _pytest._code.ExceptionInfo()",
        "fixed_code": "excinfo = _pytest._code.ExceptionInfo.from_current()",
        "patch": "@@ -151,7 +151,7 @@ def test_internal_exception(self, style):\n         try:\n             raise ValueError\n         except ValueError:\n-            excinfo = _pytest._code.ExceptionInfo()\n+            excinfo = _pytest._code.ExceptionInfo.from_current()\n         reslog = ResultLog(None, py.io.TextIO())\n         reslog.pytest_internalerror(excinfo.getrepr(style=style))\n         entry = reslog.logfile.getvalue()"
    },
    {
        "commit_id": "88bf01a31e6625edec134fc1d49ec882947fb680",
        "commit_message": "fix #4386 - restructure construction and partial state of ExceptionInfo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88bf01a31e6625edec134fc1d49ec882947fb680",
        "buggy_code": "six.text_type(_pytest._code.ExceptionInfo()),",
        "fixed_code": "six.text_type(_pytest._code.ExceptionInfo.from_current()),",
        "patch": "@@ -155,7 +155,7 @@ def isiterable(obj):\n         explanation = [\n             u\"(pytest_assertion plugin: representation of details failed.  \"\n             u\"Probably an object has a faulty __repr__.)\",\n-            six.text_type(_pytest._code.ExceptionInfo()),\n+            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n         ]\n \n     if not explanation:"
    },
    {
        "commit_id": "88bf01a31e6625edec134fc1d49ec882947fb680",
        "commit_message": "fix #4386 - restructure construction and partial state of ExceptionInfo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88bf01a31e6625edec134fc1d49ec882947fb680",
        "buggy_code": "excinfo = _pytest._code.ExceptionInfo()",
        "fixed_code": "excinfo = _pytest._code.ExceptionInfo.from_current()",
        "patch": "@@ -151,7 +151,7 @@ def test_internal_exception(self, style):\n         try:\n             raise ValueError\n         except ValueError:\n-            excinfo = _pytest._code.ExceptionInfo()\n+            excinfo = _pytest._code.ExceptionInfo.from_current()\n         reslog = ResultLog(None, py.io.TextIO())\n         reslog.pytest_internalerror(excinfo.getrepr(style=style))\n         entry = reslog.logfile.getvalue()"
    },
    {
        "commit_id": "94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "commit_message": "Merge pull request #4436 from asottile/print_function\n\nFix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "buggy_code": "print (\"fix count %s\" % count)",
        "fixed_code": "print(\"fix count %s\" % count)",
        "patch": "@@ -283,7 +283,7 @@ def fix(request):\n                 global count, req\n                 assert request != req\n                 req = request\n-                print (\"fix count %s\" % count)\n+                print(\"fix count %s\" % count)\n                 count += 1\n             def test_fix(fix):\n                 pass"
    },
    {
        "commit_id": "94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "commit_message": "Merge pull request #4436 from asottile/print_function\n\nFix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "buggy_code": "print (excinfo)",
        "fixed_code": "print(excinfo)",
        "patch": "@@ -43,7 +43,7 @@ def test_simple():\n                 with pytest.raises(ZeroDivisionError) as excinfo:\n                     assert isinstance(excinfo, _pytest._code.ExceptionInfo)\n                     1/0\n-                print (excinfo)\n+                print(excinfo)\n                 assert excinfo.type == ZeroDivisionError\n                 assert isinstance(excinfo.value, ZeroDivisionError)\n "
    },
    {
        "commit_id": "94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "commit_message": "Merge pull request #4436 from asottile/print_function\n\nFix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94d032a6debaf8bee95be30ea31ea4a9187a73dc",
        "buggy_code": "print (markers)",
        "fixed_code": "print(markers)",
        "patch": "@@ -189,7 +189,7 @@ def test_ini_markers(testdir):\n         \"\"\"\n         def test_markers(pytestconfig):\n             markers = pytestconfig.getini(\"markers\")\n-            print (markers)\n+            print(markers)\n             assert len(markers) >= 2\n             assert markers[0].startswith(\"a1:\")\n             assert markers[1].startswith(\"a2:\")"
    },
    {
        "commit_id": "5f1d69207260297738ff4dd96687fe049d2963a3",
        "commit_message": "use Path.resolve in test to sort out osx temporary folder being a symlink",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5f1d69207260297738ff4dd96687fe049d2963a3",
        "buggy_code": "assert t.getbasetemp() == (tmp_path / \"hello\")",
        "fixed_code": "assert t.getbasetemp().resolve() == (tmp_path / \"hello\").resolve()",
        "patch": "@@ -65,7 +65,7 @@ def test_tmppath_relative_basetemp_absolute(self, tmp_path, monkeypatch):\n         monkeypatch.chdir(tmp_path)\n         config = FakeConfig(\"hello\")\n         t = TempPathFactory.from_config(config)\n-        assert t.getbasetemp() == (tmp_path / \"hello\")\n+        assert t.getbasetemp().resolve() == (tmp_path / \"hello\").resolve()\n \n \n class TestConfigTmpdir(object):"
    },
    {
        "commit_id": "b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "commit_message": "Fix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "buggy_code": "print (\"fix count %s\" % count)",
        "fixed_code": "print(\"fix count %s\" % count)",
        "patch": "@@ -283,7 +283,7 @@ def fix(request):\n                 global count, req\n                 assert request != req\n                 req = request\n-                print (\"fix count %s\" % count)\n+                print(\"fix count %s\" % count)\n                 count += 1\n             def test_fix(fix):\n                 pass"
    },
    {
        "commit_id": "b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "commit_message": "Fix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "buggy_code": "print (excinfo)",
        "fixed_code": "print(excinfo)",
        "patch": "@@ -43,7 +43,7 @@ def test_simple():\n                 with pytest.raises(ZeroDivisionError) as excinfo:\n                     assert isinstance(excinfo, _pytest._code.ExceptionInfo)\n                     1/0\n-                print (excinfo)\n+                print(excinfo)\n                 assert excinfo.type == ZeroDivisionError\n                 assert isinstance(excinfo.value, ZeroDivisionError)\n "
    },
    {
        "commit_id": "b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "commit_message": "Fix formatting of print() calls",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b3700f61baca9920c421257d1cd8bb00c44d51bc",
        "buggy_code": "print (markers)",
        "fixed_code": "print(markers)",
        "patch": "@@ -189,7 +189,7 @@ def test_ini_markers(testdir):\n         \"\"\"\n         def test_markers(pytestconfig):\n             markers = pytestconfig.getini(\"markers\")\n-            print (markers)\n+            print(markers)\n             assert len(markers) >= 2\n             assert markers[0].startswith(\"a1:\")\n             assert markers[1].startswith(\"a2:\")"
    },
    {
        "commit_id": "e14ca19988bb5cb1754a82b6c404b8ae3f746ee7",
        "commit_message": "Merge pull request #4352 from blueyed/_check_initialpaths_for_relpath\n\nFix nodes._check_initialpaths_for_relpath for dirs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e14ca19988bb5cb1754a82b6c404b8ae3f746ee7",
        "buggy_code": "return fspath.relto(initial_path.dirname)",
        "fixed_code": "return fspath.relto(initial_path)",
        "patch": "@@ -447,7 +447,7 @@ def _prunetraceback(self, excinfo):\n def _check_initialpaths_for_relpath(session, fspath):\n     for initial_path in session._initialpaths:\n         if fspath.common(initial_path) == initial_path:\n-            return fspath.relto(initial_path.dirname)\n+            return fspath.relto(initial_path)\n \n \n class FSCollector(Collector):"
    },
    {
        "commit_id": "bee72a66228762a220474445c9bf019600105528",
        "commit_message": "Fix nodes._check_initialpaths_for_relpath for dirs\n\nRef: https://github.com/pytest-dev/pytest/issues/4321#issuecomment-436951894\n\nHardens some of the not many tests affected by this:\n\n1. `testing/test_session.py::test_rootdir_option_arg` displayed:\n\n> root/test_rootdir_option_arg2/test_rootdir_option_arg.py\n\n2. `test_cmdline_python_namespace_package` displayed \"hello/\" prefix for:\n\n> hello/test_hello.py::test_hello\n> hello/test_hello.py::test_other",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bee72a66228762a220474445c9bf019600105528",
        "buggy_code": "return fspath.relto(initial_path.dirname)",
        "fixed_code": "return fspath.relto(initial_path)",
        "patch": "@@ -447,7 +447,7 @@ def _prunetraceback(self, excinfo):\n def _check_initialpaths_for_relpath(session, fspath):\n     for initial_path in session._initialpaths:\n         if fspath.common(initial_path) == initial_path:\n-            return fspath.relto(initial_path.dirname)\n+            return fspath.relto(initial_path)\n \n \n class FSCollector(Collector):"
    },
    {
        "commit_id": "21725e930462a6533b98ac89d50e1e171d9f0c66",
        "commit_message": "Merge pull request #4285 from kchmck/fix-4046\n\nFix problems with running tests in package `__init__` files (#4046)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/21725e930462a6533b98ac89d50e1e171d9f0c66",
        "buggy_code": "assert len(started) == 7  # XXX extra TopCollector",
        "fixed_code": "assert len(started) == 8",
        "patch": "@@ -219,7 +219,7 @@ class TestY(TestX):\n         started = reprec.getcalls(\"pytest_collectstart\")\n         finished = reprec.getreports(\"pytest_collectreport\")\n         assert len(started) == len(finished)\n-        assert len(started) == 7  # XXX extra TopCollector\n+        assert len(started) == 8\n         colfail = [x for x in finished if x.failed]\n         assert len(colfail) == 1\n "
    },
    {
        "commit_id": "a035c89ea7b7cacd0aa9fddcd4de7a166fa0e266",
        "commit_message": "Spelling fix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a035c89ea7b7cacd0aa9fddcd4de7a166fa0e266",
        "buggy_code": "for the contex of best effort linking to the latest testrun",
        "fixed_code": "for the context of best effort linking to the latest testrun",
        "patch": "@@ -107,7 +107,7 @@ def _force_symlink(root, target, link_to):\n     \"\"\"helper to create the current symlink\n \n     it's full of race conditions that are reasonably ok to ignore\n-    for the contex of best effort linking to the latest testrun\n+    for the context of best effort linking to the latest testrun\n \n     the presumption being thatin case of much parallelism\n     the inaccuracy is going to be acceptable"
    },
    {
        "commit_id": "72d98a7c5261735b361c71c91b4383031603a97f",
        "commit_message": "Merge pull request #4214 from blueyed/fix-4174\n\nFix \"Plugin already registered\" error with symlinks",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/72d98a7c5261735b361c71c91b4383031603a97f",
        "buggy_code": "for parent in directory.parts():",
        "fixed_code": "for parent in directory.realpath().parts():",
        "patch": "@@ -391,7 +391,7 @@ def _getconftestmodules(self, path):\n             # and allow users to opt into looking into the rootdir parent\n             # directories instead of requiring to specify confcutdir\n             clist = []\n-            for parent in directory.parts():\n+            for parent in directory.realpath().parts():\n                 if self._confcutdir and self._confcutdir.relto(parent):\n                     continue\n                 conftestpath = parent.join(\"conftest.py\")"
    },
    {
        "commit_id": "fadac0ffc0102f8ba536f3848623f67c81bb11a2",
        "commit_message": "Fix \"Plugin already registered\" error with symlinks\n\nFixes https://github.com/pytest-dev/pytest/issues/4174.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fadac0ffc0102f8ba536f3848623f67c81bb11a2",
        "buggy_code": "for parent in directory.parts():",
        "fixed_code": "for parent in directory.realpath().parts():",
        "patch": "@@ -391,7 +391,7 @@ def _getconftestmodules(self, path):\n             # and allow users to opt into looking into the rootdir parent\n             # directories instead of requiring to specify confcutdir\n             clist = []\n-            for parent in directory.parts():\n+            for parent in directory.realpath().parts():\n                 if self._confcutdir and self._confcutdir.relto(parent):\n                     continue\n                 conftestpath = parent.join(\"conftest.py\")"
    },
    {
        "commit_id": "2abd005cc975ce6f81e1b2b6c965631e1154a729",
        "commit_message": "Merge pull request #4195 from nicoddemus/issue-3691\n\nUse safe_str() to format warning message about unicode in Python 2",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2abd005cc975ce6f81e1b2b6c965631e1154a729",
        "buggy_code": "\"converting to a safe representation:\\n  %s\" % msg,",
        "fixed_code": "\"converting to a safe representation:\\n  {!r}\".format(compat.safe_str(msg)),",
        "patch": "@@ -123,7 +123,7 @@ def warning_record_to_str(warning_message):\n     if unicode_warning:\n         warnings.warn(\n             \"Warning is using unicode non convertible to ascii, \"\n-            \"converting to a safe representation:\\n  %s\" % msg,\n+            \"converting to a safe representation:\\n  {!r}\".format(compat.safe_str(msg)),\n             UnicodeWarning,\n         )\n     return msg"
    },
    {
        "commit_id": "18035211f5cf9c95cc331ee37156f4c04707c4a0",
        "commit_message": "Use safe_str() to format warning message about unicode in Python 2\n\nFix #3691",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/18035211f5cf9c95cc331ee37156f4c04707c4a0",
        "buggy_code": "\"converting to a safe representation:\\n  %s\" % msg,",
        "fixed_code": "\"converting to a safe representation:\\n  {!r}\".format(compat.safe_str(msg)),",
        "patch": "@@ -123,7 +123,7 @@ def warning_record_to_str(warning_message):\n     if unicode_warning:\n         warnings.warn(\n             \"Warning is using unicode non convertible to ascii, \"\n-            \"converting to a safe representation:\\n  %s\" % msg,\n+            \"converting to a safe representation:\\n  {!r}\".format(compat.safe_str(msg)),\n             UnicodeWarning,\n         )\n     return msg"
    },
    {
        "commit_id": "e4871f7722d4254b28718e9c27b7e927ecf66191",
        "commit_message": "Merge pull request #4183 from RonnyPfannschmidt/bump-setuptools\n\nfix #4177 - pin setuptools>=40.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e4871f7722d4254b28718e9c27b7e927ecf66191",
        "buggy_code": "setup_requires=[\"setuptools-scm\", \"setuptools>=30.3\"],",
        "fixed_code": "setup_requires=[\"setuptools-scm\", \"setuptools>=40.0\"],",
        "patch": "@@ -26,7 +26,7 @@\n def main():\n     setup(\n         use_scm_version={\"write_to\": \"src/_pytest/_version.py\"},\n-        setup_requires=[\"setuptools-scm\", \"setuptools>=30.3\"],\n+        setup_requires=[\"setuptools-scm\", \"setuptools>=40.0\"],\n         package_dir={\"\": \"src\"},\n         install_requires=INSTALL_REQUIRES,\n     )"
    },
    {
        "commit_id": "8dca8f3c9f3ca09bfa11fb1b322a4707c098bab6",
        "commit_message": "fix test_cleanup_keep for expecting symlinks",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8dca8f3c9f3ca09bfa11fb1b322a4707c098bab6",
        "buggy_code": "a, b = tmp_path.iterdir()",
        "fixed_code": "a, b = (x for x in tmp_path.iterdir() if not x.is_symlink())",
        "patch": "@@ -248,7 +248,7 @@ def _do_cleanup(self, tmp_path):\n \n     def test_cleanup_keep(self, tmp_path):\n         self._do_cleanup(tmp_path)\n-        a, b = tmp_path.iterdir()\n+        a, b = (x for x in tmp_path.iterdir() if not x.is_symlink())\n         print(a, b)\n \n     def test_cleanup_locked(self, tmp_path):"
    },
    {
        "commit_id": "4f4c91caf5a95d6aa9f0207f9ec880f1be75dd99",
        "commit_message": "fix #4177 - pin setuptools>=40.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4f4c91caf5a95d6aa9f0207f9ec880f1be75dd99",
        "buggy_code": "setup_requires=[\"setuptools-scm\", \"setuptools>=30.3\"],",
        "fixed_code": "setup_requires=[\"setuptools-scm\", \"setuptools>=40.0\"],",
        "patch": "@@ -26,7 +26,7 @@\n def main():\n     setup(\n         use_scm_version={\"write_to\": \"src/_pytest/_version.py\"},\n-        setup_requires=[\"setuptools-scm\", \"setuptools>=30.3\"],\n+        setup_requires=[\"setuptools-scm\", \"setuptools>=40.0\"],\n         package_dir={\"\": \"src\"},\n         install_requires=INSTALL_REQUIRES,\n     )"
    },
    {
        "commit_id": "27d932e882152c828352ec4855ac2e16d23cc115",
        "commit_message": "Fix order of parameters when raising Exit exception",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/27d932e882152c828352ec4855ac2e16d23cc115",
        "buggy_code": "raise Exit(returncode, msg)",
        "fixed_code": "raise Exit(msg, returncode)",
        "patch": "@@ -66,7 +66,7 @@ def exit(msg, returncode=None):\n     :param int returncode: return code to be used when exiting pytest.\n     \"\"\"\n     __tracebackhide__ = True\n-    raise Exit(returncode, msg)\n+    raise Exit(msg, returncode)\n \n \n exit.Exception = Exit"
    },
    {
        "commit_id": "5322f422e3b09b3630488b0315368595d9804215",
        "commit_message": "Merge pull request #4108 from blueyed/realpath\n\nResolve symlinks for args",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5322f422e3b09b3630488b0315368595d9804215",
        "buggy_code": "p = py.path.local(plugin.__file__)",
        "fixed_code": "p = py.path.local(plugin.__file__).realpath()",
        "patch": "@@ -1175,7 +1175,7 @@ def getfixtureinfo(self, node, func, cls, funcargs=True):\n     def pytest_plugin_registered(self, plugin):\n         nodeid = None\n         try:\n-            p = py.path.local(plugin.__file__)\n+            p = py.path.local(plugin.__file__).realpath()\n         except AttributeError:\n             pass\n         else:"
    },
    {
        "commit_id": "5322f422e3b09b3630488b0315368595d9804215",
        "commit_message": "Merge pull request #4108 from blueyed/realpath\n\nResolve symlinks for args",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5322f422e3b09b3630488b0315368595d9804215",
        "buggy_code": "argpath = names.pop(0)",
        "fixed_code": "argpath = names.pop(0).realpath()",
        "patch": "@@ -490,7 +490,7 @@ def _collect(self, arg):\n         from _pytest.python import Package\n \n         names = self._parsearg(arg)\n-        argpath = names.pop(0)\n+        argpath = names.pop(0).realpath()\n         paths = []\n \n         root = self"
    },
    {
        "commit_id": "7268462b33954e756cfaaa13da81c3c84c2971ee",
        "commit_message": "Resolve symlinks for args\n\nThis fixes running `pytest tests/test_foo.py::test_bar`, where `tests`\nis a symlink to `project/app/tests`: previously\n`project/app/conftest.py` would be ignored for fixtures then.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7268462b33954e756cfaaa13da81c3c84c2971ee",
        "buggy_code": "p = py.path.local(plugin.__file__)",
        "fixed_code": "p = py.path.local(plugin.__file__).realpath()",
        "patch": "@@ -1175,7 +1175,7 @@ def getfixtureinfo(self, node, func, cls, funcargs=True):\n     def pytest_plugin_registered(self, plugin):\n         nodeid = None\n         try:\n-            p = py.path.local(plugin.__file__)\n+            p = py.path.local(plugin.__file__).realpath()\n         except AttributeError:\n             pass\n         else:"
    },
    {
        "commit_id": "7268462b33954e756cfaaa13da81c3c84c2971ee",
        "commit_message": "Resolve symlinks for args\n\nThis fixes running `pytest tests/test_foo.py::test_bar`, where `tests`\nis a symlink to `project/app/tests`: previously\n`project/app/conftest.py` would be ignored for fixtures then.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7268462b33954e756cfaaa13da81c3c84c2971ee",
        "buggy_code": "argpath = names.pop(0)",
        "fixed_code": "argpath = names.pop(0).realpath()",
        "patch": "@@ -490,7 +490,7 @@ def _collect(self, arg):\n         from _pytest.python import Package\n \n         names = self._parsearg(arg)\n-        argpath = names.pop(0)\n+        argpath = names.pop(0).realpath()\n         paths = []\n \n         root = self"
    },
    {
        "commit_id": "7a271a91b09e39889775bbc94718d7fb023a1bfa",
        "commit_message": "Fix rounding error when displaying durations in non-verbose mode.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7a271a91b09e39889775bbc94718d7fb023a1bfa",
        "buggy_code": "if verbose < 2 and rep.duration < 0.01:",
        "fixed_code": "if verbose < 2 and rep.duration < 0.005:",
        "patch": "@@ -50,7 +50,7 @@ def pytest_terminal_summary(terminalreporter):\n         dlist = dlist[:durations]\n \n     for rep in dlist:\n-        if verbose < 2 and rep.duration < 0.01:\n+        if verbose < 2 and rep.duration < 0.005:\n             tr.write_line(\"0.00 durations hidden.  Use -vv to show these durations.\")\n             break\n         nodeid = rep.nodeid.replace(\"::()::\", \"::\")"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "u(\"Skipping %s identical leading \" \"characters in diff, use -v to show\")",
        "fixed_code": "u(\"Skipping %s identical leading characters in diff, use -v to show\")",
        "patch": "@@ -199,7 +199,7 @@ def escape_for_readable_diff(binary_text):\n         if i > 42:\n             i -= 10  # Provide some context\n             explanation = [\n-                u(\"Skipping %s identical leading \" \"characters in diff, use -v to show\")\n+                u(\"Skipping %s identical leading characters in diff, use -v to show\")\n                 % i\n             ]\n             left = left[i:]"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "tw.line(\"%s contains unreadable content, \" \"will be ignored\" % key)",
        "fixed_code": "tw.line(\"%s contains unreadable content, will be ignored\" % key)",
        "patch": "@@ -344,7 +344,7 @@ def cacheshow(config, session):\n         key = valpath.relative_to(vdir)\n         val = config.cache.get(key, dummy)\n         if val is dummy:\n-            tw.line(\"%s contains unreadable content, \" \"will be ignored\" % key)\n+            tw.line(\"%s contains unreadable content, will be ignored\" % key)\n         else:\n             tw.line(\"%s contains:\" % key)\n             for line in pformat(val).splitlines():"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "raise UnsupportedOperation(\"redirected stdin is pseudofile, \" \"has no fileno()\")",
        "fixed_code": "raise UnsupportedOperation(\"redirected stdin is pseudofile, has no fileno()\")",
        "patch": "@@ -654,7 +654,7 @@ def __iter__(self):\n         return self\n \n     def fileno(self):\n-        raise UnsupportedOperation(\"redirected stdin is pseudofile, \" \"has no fileno()\")\n+        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no fileno()\")\n \n     def isatty(self):\n         return False"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "(\"could not find real function of {start}\" \"\\nstopped at {current}\").format(",
        "fixed_code": "(\"could not find real function of {start}\\nstopped at {current}\").format(",
        "patch": "@@ -275,7 +275,7 @@ def get_real_func(obj):\n         obj = new_obj\n     else:\n         raise ValueError(\n-            (\"could not find real function of {start}\" \"\\nstopped at {current}\").format(\n+            (\"could not find real function of {start}\\nstopped at {current}\").format(\n                 start=py.io.saferepr(start_obj), current=py.io.saferepr(obj)\n             )\n         )"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "\"pycollector makeitem was removed \" \"as it is an accidentially leaked internal api\"",
        "fixed_code": "\"pycollector makeitem was removed as it is an accidentially leaked internal api\"",
        "patch": "@@ -64,7 +64,7 @@\n )\n \n COLLECTOR_MAKEITEM = RemovedInPytest4Warning(\n-    \"pycollector makeitem was removed \" \"as it is an accidentially leaked internal api\"\n+    \"pycollector makeitem was removed as it is an accidentially leaked internal api\"\n )\n \n METAFUNC_ADD_CALL = RemovedInPytest4Warning("
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "\"[pytest] ini-options in the first \" \"pytest.ini|tox.ini|setup.cfg file found:\"",
        "fixed_code": "\"[pytest] ini-options in the first pytest.ini|tox.ini|setup.cfg file found:\"",
        "patch": "@@ -139,7 +139,7 @@ def showhelp(config):\n     tw.line()\n     tw.line()\n     tw.line(\n-        \"[pytest] ini-options in the first \" \"pytest.ini|tox.ini|setup.cfg file found:\"\n+        \"[pytest] ini-options in the first pytest.ini|tox.ini|setup.cfg file found:\"\n     )\n     tw.line()\n "
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "help=\"prefixes or glob names for Python test function and \" \"method discovery\",",
        "fixed_code": "help=\"prefixes or glob names for Python test function and method discovery\",",
        "patch": "@@ -131,7 +131,7 @@ def pytest_addoption(parser):\n         \"python_functions\",\n         type=\"args\",\n         default=[\"test\"],\n-        help=\"prefixes or glob names for Python test function and \" \"method discovery\",\n+        help=\"prefixes or glob names for Python test function and method discovery\",\n     )\n \n     group.addoption("
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "msg = \"exceptions must be old-style classes or \" \"derived from Warning, not %s\"",
        "fixed_code": "msg = \"exceptions must be old-style classes or derived from Warning, not %s\"",
        "patch": "@@ -196,7 +196,7 @@ class WarningsChecker(WarningsRecorder):\n     def __init__(self, expected_warning=None, match_expr=None):\n         super(WarningsChecker, self).__init__()\n \n-        msg = \"exceptions must be old-style classes or \" \"derived from Warning, not %s\"\n+        msg = \"exceptions must be old-style classes or derived from Warning, not %s\"\n         if isinstance(expected_warning, tuple):\n             for exc in expected_warning:\n                 if not inspect.isclass(exc):"
    },
    {
        "commit_id": "0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "commit_message": "Merge pull request #4109 from njonesu/master\n\n Fix multiple string literals on a line #4093",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0f5263cdc36db27295f31298338bbd91f5bbc8c1",
        "buggy_code": "classname=\"xyz.test_junit_prefixing.\" \"TestHello\",",
        "fixed_code": "classname=\"xyz.test_junit_prefixing.TestHello\",",
        "patch": "@@ -476,7 +476,7 @@ def test_hello(self):\n         tnode.assert_attr(\n             file=\"test_junit_prefixing.py\",\n             line=\"3\",\n-            classname=\"xyz.test_junit_prefixing.\" \"TestHello\",\n+            classname=\"xyz.test_junit_prefixing.TestHello\",\n             name=\"test_hello\",\n         )\n "
    },
    {
        "commit_id": "00716177b4af3dd885ea1c1cb0ccfd71a3893b51",
        "commit_message": "fix missed Path import",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/00716177b4af3dd885ea1c1cb0ccfd71a3893b51",
        "buggy_code": "from _pytest.compat import Path",
        "fixed_code": "from _pytest.pathlib import Path",
        "patch": "@@ -6,7 +6,7 @@\n from _pytest.pytester import get_public_names\n from _pytest.fixtures import FixtureLookupError, FixtureRequest\n from _pytest import fixtures\n-from _pytest.compat import Path\n+from _pytest.pathlib import Path\n \n \n def test_getfuncargnames():"
    },
    {
        "commit_id": "66a690928cc847c48774906e5ea60f578ddb216c",
        "commit_message": "bring in purepath and fix an assertion",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66a690928cc847c48774906e5ea60f578ddb216c",
        "buggy_code": "session_dir.isdir()",
        "fixed_code": "assert session_dir.isdir()",
        "patch": "@@ -111,7 +111,7 @@ def test_tmpdir_factory(testdir):\n         def session_dir(tmpdir_factory):\n             return tmpdir_factory.mktemp('data', numbered=False)\n         def test_some(session_dir):\n-            session_dir.isdir()\n+            assert session_dir.isdir()\n     \"\"\"\n     )\n     reprec = testdir.inline_run()"
    },
    {
        "commit_id": "4c9015c3b158d3b2800b1582574d36d79daa22eb",
        "commit_message": "Merge pull request #4105 from blueyed/repr\n\nFix trailing whitespace in FixtureDef.__repr__",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c9015c3b158d3b2800b1582574d36d79daa22eb",
        "buggy_code": "return \"<FixtureDef name=%r scope=%r baseid=%r >\" % (",
        "fixed_code": "return \"<FixtureDef name=%r scope=%r baseid=%r>\" % (",
        "patch": "@@ -916,7 +916,7 @@ def execute(self, request):\n         return hook.pytest_fixture_setup(fixturedef=self, request=request)\n \n     def __repr__(self):\n-        return \"<FixtureDef name=%r scope=%r baseid=%r >\" % (\n+        return \"<FixtureDef name=%r scope=%r baseid=%r>\" % (\n             self.argname,\n             self.scope,\n             self.baseid,"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "\"A.a appears not to be b\\n\" \"or does not appear to be b\\none of those\"",
        "fixed_code": "\"A.a appears not to be b\\nor does not appear to be b\\none of those\"",
        "patch": "@@ -246,7 +246,7 @@ class A(object):\n \n         b = 2\n         assert A.a == b, (\n-            \"A.a appears not to be b\\n\" \"or does not appear to be b\\none of those\"\n+            \"A.a appears not to be b\\nor does not appear to be b\\none of those\"\n         )\n \n     def test_custom_repr(self):"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "u(\"Skipping %s identical leading \" \"characters in diff, use -v to show\")",
        "fixed_code": "u(\"Skipping %s identical leading characters in diff, use -v to show\")",
        "patch": "@@ -199,7 +199,7 @@ def escape_for_readable_diff(binary_text):\n         if i > 42:\n             i -= 10  # Provide some context\n             explanation = [\n-                u(\"Skipping %s identical leading \" \"characters in diff, use -v to show\")\n+                u(\"Skipping %s identical leading characters in diff, use -v to show\")\n                 % i\n             ]\n             left = left[i:]"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "tw.line(\"%s contains unreadable content, \" \"will be ignored\" % key)",
        "fixed_code": "tw.line(\"%s contains unreadable content, will be ignored\" % key)",
        "patch": "@@ -344,7 +344,7 @@ def cacheshow(config, session):\n         key = valpath.relative_to(vdir)\n         val = config.cache.get(key, dummy)\n         if val is dummy:\n-            tw.line(\"%s contains unreadable content, \" \"will be ignored\" % key)\n+            tw.line(\"%s contains unreadable content, will be ignored\" % key)\n         else:\n             tw.line(\"%s contains:\" % key)\n             for line in pformat(val).splitlines():"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "raise UnsupportedOperation(\"redirected stdin is pseudofile, \" \"has no fileno()\")",
        "fixed_code": "raise UnsupportedOperation(\"redirected stdin is pseudofile, has no fileno()\")",
        "patch": "@@ -654,7 +654,7 @@ def __iter__(self):\n         return self\n \n     def fileno(self):\n-        raise UnsupportedOperation(\"redirected stdin is pseudofile, \" \"has no fileno()\")\n+        raise UnsupportedOperation(\"redirected stdin is pseudofile, has no fileno()\")\n \n     def isatty(self):\n         return False"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "(\"could not find real function of {start}\" \"\\nstopped at {current}\").format(",
        "fixed_code": "(\"could not find real function of {start}\\nstopped at {current}\").format(",
        "patch": "@@ -275,7 +275,7 @@ def get_real_func(obj):\n         obj = new_obj\n     else:\n         raise ValueError(\n-            (\"could not find real function of {start}\" \"\\nstopped at {current}\").format(\n+            (\"could not find real function of {start}\\nstopped at {current}\").format(\n                 start=py.io.saferepr(start_obj), current=py.io.saferepr(obj)\n             )\n         )"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "\"pycollector makeitem was removed \" \"as it is an accidentially leaked internal api\"",
        "fixed_code": "\"pycollector makeitem was removed as it is an accidentially leaked internal api\"",
        "patch": "@@ -64,7 +64,7 @@\n )\n \n COLLECTOR_MAKEITEM = RemovedInPytest4Warning(\n-    \"pycollector makeitem was removed \" \"as it is an accidentially leaked internal api\"\n+    \"pycollector makeitem was removed as it is an accidentially leaked internal api\"\n )\n \n METAFUNC_ADD_CALL = RemovedInPytest4Warning("
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "\"[pytest] ini-options in the first \" \"pytest.ini|tox.ini|setup.cfg file found:\"",
        "fixed_code": "\"[pytest] ini-options in the first pytest.ini|tox.ini|setup.cfg file found:\"",
        "patch": "@@ -139,7 +139,7 @@ def showhelp(config):\n     tw.line()\n     tw.line()\n     tw.line(\n-        \"[pytest] ini-options in the first \" \"pytest.ini|tox.ini|setup.cfg file found:\"\n+        \"[pytest] ini-options in the first pytest.ini|tox.ini|setup.cfg file found:\"\n     )\n     tw.line()\n "
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "help=\"prefixes or glob names for Python test function and \" \"method discovery\",",
        "fixed_code": "help=\"prefixes or glob names for Python test function and method discovery\",",
        "patch": "@@ -131,7 +131,7 @@ def pytest_addoption(parser):\n         \"python_functions\",\n         type=\"args\",\n         default=[\"test\"],\n-        help=\"prefixes or glob names for Python test function and \" \"method discovery\",\n+        help=\"prefixes or glob names for Python test function and method discovery\",\n     )\n \n     group.addoption("
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "msg = \"exceptions must be old-style classes or \" \"derived from Warning, not %s\"",
        "fixed_code": "msg = \"exceptions must be old-style classes or derived from Warning, not %s\"",
        "patch": "@@ -196,7 +196,7 @@ class WarningsChecker(WarningsRecorder):\n     def __init__(self, expected_warning=None, match_expr=None):\n         super(WarningsChecker, self).__init__()\n \n-        msg = \"exceptions must be old-style classes or \" \"derived from Warning, not %s\"\n+        msg = \"exceptions must be old-style classes or derived from Warning, not %s\"\n         if isinstance(expected_warning, tuple):\n             for exc in expected_warning:\n                 if not inspect.isclass(exc):"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "\"failed passed skipped deselected \" \"xfailed xpassed warnings error\"",
        "fixed_code": "\"failed passed skipped deselected xfailed xpassed warnings error\"",
        "patch": "@@ -836,7 +836,7 @@ def repr_pythonversion(v=None):\n \n def build_summary_stats_line(stats):\n     keys = (\n-        \"failed passed skipped deselected \" \"xfailed xpassed warnings error\"\n+        \"failed passed skipped deselected xfailed xpassed warnings error\"\n     ).split()\n     unknown_key_seen = False\n     for key in stats.keys():"
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "classname=\"xyz.test_junit_prefixing.\" \"TestHello\",",
        "fixed_code": "classname=\"xyz.test_junit_prefixing.TestHello\",",
        "patch": "@@ -476,7 +476,7 @@ def test_hello(self):\n         tnode.assert_attr(\n             file=\"test_junit_prefixing.py\",\n             line=\"3\",\n-            classname=\"xyz.test_junit_prefixing.\" \"TestHello\",\n+            classname=\"xyz.test_junit_prefixing.TestHello\",\n             name=\"test_hello\",\n         )\n "
    },
    {
        "commit_id": "c14a23d4e46810e613401ec095803debcf3b4af5",
        "commit_message": "Fix #4093: multiple string literals on a line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c14a23d4e46810e613401ec095803debcf3b4af5",
        "buggy_code": "\"--show-capture=all --pdb \" \"-p no:logging %s\" % p1",
        "fixed_code": "\"--show-capture=all --pdb -p no:logging %s\" % p1",
        "patch": "@@ -282,7 +282,7 @@ def test_1():\n         \"\"\"\n         )\n         child = testdir.spawn_pytest(\n-            \"--show-capture=all --pdb \" \"-p no:logging %s\" % p1\n+            \"--show-capture=all --pdb -p no:logging %s\" % p1\n         )\n         child.expect(\"get rekt\")\n         output = child.before.decode(\"utf8\")"
    },
    {
        "commit_id": "d93de6cc67b26c62490eb0e080934835d8c213ea",
        "commit_message": "Fix trailing whitespace in FixtureDef.__repr__",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d93de6cc67b26c62490eb0e080934835d8c213ea",
        "buggy_code": "return \"<FixtureDef name=%r scope=%r baseid=%r >\" % (",
        "fixed_code": "return \"<FixtureDef name=%r scope=%r baseid=%r>\" % (",
        "patch": "@@ -899,7 +899,7 @@ def execute(self, request):\n         return hook.pytest_fixture_setup(fixturedef=self, request=request)\n \n     def __repr__(self):\n-        return \"<FixtureDef name=%r scope=%r baseid=%r >\" % (\n+        return \"<FixtureDef name=%r scope=%r baseid=%r>\" % (\n             self.argname,\n             self.scope,\n             self.baseid,"
    },
    {
        "commit_id": "fe7050ba004527edce5dabfb983d7efcf4d7dfa1",
        "commit_message": "Fix lint",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fe7050ba004527edce5dabfb983d7efcf4d7dfa1",
        "buggy_code": "timeout = kwargs.get('timeout')",
        "fixed_code": "timeout = kwargs.get(\"timeout\")",
        "patch": "@@ -1065,7 +1065,7 @@ def run(self, *cmdargs, **kwargs):\n             popen = self.popen(\n                 cmdargs, stdout=f1, stderr=f2, close_fds=(sys.platform != \"win32\")\n             )\n-            timeout = kwargs.get('timeout')\n+            timeout = kwargs.get(\"timeout\")\n             if timeout is None:\n                 ret = popen.wait()\n             elif six.PY3:"
    },
    {
        "commit_id": "bc009a8582b4787c409528bf9c0d1bc6792d35ce",
        "commit_message": "Fix test to comply with pypy 6.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc009a8582b4787c409528bf9c0d1bc6792d35ce",
        "buggy_code": "assert ex.value.offset in (4, 7)  # XXX pypy/jython versus cpython?",
        "fixed_code": "assert ex.value.offset in (4, 5, 7)  # XXX pypy/jython versus cpython?",
        "patch": "@@ -129,7 +129,7 @@ def test_source_strip_multiline():\n def test_syntaxerror_rerepresentation():\n     ex = pytest.raises(SyntaxError, _pytest._code.compile, \"xyz xyz\")\n     assert ex.value.lineno == 1\n-    assert ex.value.offset in (4, 7)  # XXX pypy/jython versus cpython?\n+    assert ex.value.offset in (4, 5, 7)  # XXX pypy/jython versus cpython?\n     assert ex.value.text.strip(), \"x x\"\n \n "
    },
    {
        "commit_id": "bf074b37a3192a454f8c156e116eebd0b4588d9e",
        "commit_message": "Show deprecation warnings for compat properties\n\nFix #3616",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bf074b37a3192a454f8c156e116eebd0b4588d9e",
        "buggy_code": "values.append(self.Function(name, self, args=args, callobj=call))",
        "fixed_code": "values.append(Function(name, self, args=args, callobj=call))",
        "patch": "@@ -800,7 +800,7 @@ def collect(self):\n                     \"%r generated tests with non-unique name %r\" % (self, name)\n                 )\n             seen[name] = True\n-            values.append(self.Function(name, self, args=args, callobj=call))\n+            values.append(Function(name, self, args=args, callobj=call))\n         self.warn(deprecated.YIELD_TESTS)\n         return values\n "
    },
    {
        "commit_id": "f63c683faa85c2a30b0bb2c584484d9b814a2018",
        "commit_message": "No longer escape regex in pytest.mark.filterwarnings\n\nFix #3936",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f63c683faa85c2a30b0bb2c584484d9b814a2018",
        "buggy_code": "warnings._setoption(arg)",
        "fixed_code": "_setoption(warnings, arg)",
        "patch": "@@ -81,7 +81,7 @@ def catch_warnings_for_item(config, ihook, when, item):\n         if item is not None:\n             for mark in item.iter_markers(name=\"filterwarnings\"):\n                 for arg in mark.args:\n-                    warnings._setoption(arg)\n+                    _setoption(warnings, arg)\n                     filters_configured = True\n \n         if not filters_configured:"
    },
    {
        "commit_id": "adc9ed85bcbfe3c3c499a7a2cf874583508213c1",
        "commit_message": "Fix test_idval_hypothesis",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/adc9ed85bcbfe3c3c499a7a2cf874583508213c1",
        "buggy_code": "escaped = _idval(value, \"a\", 6, None, item=None)",
        "fixed_code": "escaped = _idval(value, \"a\", 6, None, item=None, config=None)",
        "patch": "@@ -217,7 +217,7 @@ class A(object):\n     def test_idval_hypothesis(self, value):\n         from _pytest.python import _idval\n \n-        escaped = _idval(value, \"a\", 6, None, item=None)\n+        escaped = _idval(value, \"a\", 6, None, item=None, config=None)\n         assert isinstance(escaped, str)\n         if PY3:\n             escaped.encode(\"ascii\")"
    },
    {
        "commit_id": "a054aa47978770aa9c12e1b244615816c3bbe052",
        "commit_message": "Issue assert rewrite warning if tuple >=1 as suggested in review",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a054aa47978770aa9c12e1b244615816c3bbe052",
        "buggy_code": "if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) == 2:",
        "fixed_code": "if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:",
        "patch": "@@ -750,7 +750,7 @@ def visit_Assert(self, assert_):\n         the expression is false.\n \n         \"\"\"\n-        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) == 2:\n+        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestWarning\n             import warnings\n "
    },
    {
        "commit_id": "415a62e373d96be3aa28dd2dc2e2831940fd428c",
        "commit_message": "Fix typo in PytestExperimentalApiWarning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/415a62e373d96be3aa28dd2dc2e2831940fd428c",
        "buggy_code": "pytest.PytestExerimentalApiWarning.simple(\"testdir.copy_example\"),",
        "fixed_code": "pytest.PytestExperimentalApiWarning.simple(\"testdir.copy_example\"),",
        "patch": "@@ -645,7 +645,7 @@ def copy_example(self, name=None):\n         import warnings\n \n         warnings.warn(\n-            pytest.PytestExerimentalApiWarning.simple(\"testdir.copy_example\"),\n+            pytest.PytestExperimentalApiWarning.simple(\"testdir.copy_example\"),\n             stacklevel=2,\n         )\n         example_dir = self.request.config.getini(\"pytester_example_dir\")"
    },
    {
        "commit_id": "415a62e373d96be3aa28dd2dc2e2831940fd428c",
        "commit_message": "Fix typo in PytestExperimentalApiWarning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/415a62e373d96be3aa28dd2dc2e2831940fd428c",
        "buggy_code": "class PytestExerimentalApiWarning(PytestWarning, FutureWarning):",
        "fixed_code": "class PytestExperimentalApiWarning(PytestWarning, FutureWarning):",
        "patch": "@@ -22,7 +22,7 @@ class RemovedInPytest4Warning(PytestDeprecationWarning):\n     \"\"\"\n \n \n-class PytestExerimentalApiWarning(PytestWarning, FutureWarning):\n+class PytestExperimentalApiWarning(PytestWarning, FutureWarning):\n     \"\"\"\n     Bases: :class:`pytest.PytestWarning`, :class:`FutureWarning`.\n "
    },
    {
        "commit_id": "0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "commit_message": "Fix existing tests now that we are using standard warnings",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "buggy_code": "PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST = RemovedInPytest4Warning(",
        "fixed_code": "PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST = (",
        "patch": "@@ -63,7 +63,7 @@\n     \"Please use Metafunc.parametrize instead.\"\n )\n \n-PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST = RemovedInPytest4Warning(\n+PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST = (\n     \"Defining pytest_plugins in a non-top-level conftest is deprecated, \"\n     \"because it affects the entire directory tree in a non-explicit way.\\n\"\n     \"Please move it to the top level conftest file instead.\""
    },
    {
        "commit_id": "0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "commit_message": "Fix existing tests now that we are using standard warnings",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "buggy_code": "if newmarks:",
        "fixed_code": "if newmarks and item is not None:",
        "patch": "@@ -94,7 +94,7 @@ def extract_from(cls, parameterset, legacy_force_tuple=False, item=None):\n         if legacy_force_tuple:\n             argval = (argval,)\n \n-        if newmarks:\n+        if newmarks and item is not None:\n             item.std_warn(MARK_PARAMETERSET_UNPACKING)\n \n         return cls(argval, marks=newmarks, id=None)"
    },
    {
        "commit_id": "0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "commit_message": "Fix existing tests now that we are using standard warnings",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0c8dbdcd92d0f1d4355d1929d0497bb22d598e6e",
        "buggy_code": "class RemovedInPytest4Warning(PytestWarning):",
        "fixed_code": "class RemovedInPytest4Warning(PytestWarning, DeprecationWarning):",
        "patch": "@@ -6,5 +6,5 @@ class PytestUsageWarning(PytestWarning):\n     \"\"\"Warnings related to pytest usage: either command line or testing code.\"\"\"\n \n \n-class RemovedInPytest4Warning(PytestWarning):\n+class RemovedInPytest4Warning(PytestWarning, DeprecationWarning):\n     \"\"\"warning class for features that will be removed in pytest 4.0\"\"\""
    },
    {
        "commit_id": "75d29acc06e10f6a5f2bbe672299b7733aee8ac4",
        "commit_message": "Fix reference to inter-sphinx objects database",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/75d29acc06e10f6a5f2bbe672299b7733aee8ac4",
        "buggy_code": "intersphinx_mapping = {\"python\": (\"http://docs.python.org/3\", None)}",
        "fixed_code": "intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}",
        "patch": "@@ -329,7 +329,7 @@\n \n \n # Example configuration for intersphinx: refer to the Python standard library.\n-intersphinx_mapping = {\"python\": (\"http://docs.python.org/3\", None)}\n+intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n \n \n def setup(app):"
    },
    {
        "commit_id": "4345efaffc4768efe844bfdc266969c4416f0753",
        "commit_message": "Merge pull request #3902 from stevepiercy/fix-pytest.org-links\n\nFix pytest.org links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4345efaffc4768efe844bfdc266969c4416f0753",
        "buggy_code": "url=\"http://pytest.org\",",
        "fixed_code": "url=\"https://docs.pytest.org/en/latest/\",",
        "patch": "@@ -92,7 +92,7 @@ def main():\n         description=\"pytest: simple powerful testing with Python\",\n         long_description=long_description,\n         use_scm_version={\"write_to\": \"src/_pytest/_version.py\"},\n-        url=\"http://pytest.org\",\n+        url=\"https://docs.pytest.org/en/latest/\",\n         project_urls={\n             \"Source\": \"https://github.com/pytest-dev/pytest\",\n             \"Tracker\": \"https://github.com/pytest-dev/pytest/issues\","
    },
    {
        "commit_id": "4345efaffc4768efe844bfdc266969c4416f0753",
        "commit_message": "Merge pull request #3902 from stevepiercy/fix-pytest.org-links\n\nFix pytest.org links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4345efaffc4768efe844bfdc266969c4416f0753",
        "buggy_code": "self._tw.line(\"-- Docs: http://doc.pytest.org/en/latest/warnings.html\")",
        "fixed_code": "self._tw.line(\"-- Docs: https://docs.pytest.org/en/latest/warnings.html\")",
        "patch": "@@ -691,7 +691,7 @@ def summary_warnings(self):\n                     indented = \"\\n\".join(\"  \" + x for x in lines)\n                     self._tw.line(indented)\n                 self._tw.line()\n-            self._tw.line(\"-- Docs: http://doc.pytest.org/en/latest/warnings.html\")\n+            self._tw.line(\"-- Docs: https://docs.pytest.org/en/latest/warnings.html\")\n \n     def summary_passes(self):\n         if self.config.option.tbstyle != \"no\":"
    },
    {
        "commit_id": "4345efaffc4768efe844bfdc266969c4416f0753",
        "commit_message": "Merge pull request #3902 from stevepiercy/fix-pytest.org-links\n\nFix pytest.org links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4345efaffc4768efe844bfdc266969c4416f0753",
        "buggy_code": "\"see http://pytest.org/latest/warnings.html#pytest-mark-filterwarnings \",",
        "fixed_code": "\"see https://docs.pytest.org/en/latest/warnings.html#pytest-mark-filterwarnings \",",
        "patch": "@@ -53,7 +53,7 @@ def pytest_configure(config):\n     config.addinivalue_line(\n         \"markers\",\n         \"filterwarnings(warning): add a warning filter to the given test. \"\n-        \"see http://pytest.org/latest/warnings.html#pytest-mark-filterwarnings \",\n+        \"see https://docs.pytest.org/en/latest/warnings.html#pytest-mark-filterwarnings \",\n     )\n \n "
    },
    {
        "commit_id": "4345efaffc4768efe844bfdc266969c4416f0753",
        "commit_message": "Merge pull request #3902 from stevepiercy/fix-pytest.org-links\n\nFix pytest.org links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4345efaffc4768efe844bfdc266969c4416f0753",
        "buggy_code": "\"*See https://docs.pytest.org/*/usage.html#creating-resultlog-format-files for more information*\",",
        "fixed_code": "\"*See https://docs.pytest.org/en/latest/usage.html#creating-resultlog-format-files for more information*\",",
        "patch": "@@ -116,7 +116,7 @@ def test():\n     result.stdout.fnmatch_lines(\n         [\n             \"*--result-log is deprecated and scheduled for removal in pytest 4.0*\",\n-            \"*See https://docs.pytest.org/*/usage.html#creating-resultlog-format-files for more information*\",\n+            \"*See https://docs.pytest.org/en/latest/usage.html#creating-resultlog-format-files for more information*\",\n         ]\n     )\n "
    },
    {
        "commit_id": "8ef21f56d35dc70000018387d7b6ae99660ff608",
        "commit_message": "Fix 404",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ef21f56d35dc70000018387d7b6ae99660ff608",
        "buggy_code": "\"*See https://docs.pytest.org/*/usage.html#creating-resultlog-format-files for more information*\",",
        "fixed_code": "\"*See https://docs.pytest.org/en/latest/usage.html#creating-resultlog-format-files for more information*\",",
        "patch": "@@ -116,7 +116,7 @@ def test():\n     result.stdout.fnmatch_lines(\n         [\n             \"*--result-log is deprecated and scheduled for removal in pytest 4.0*\",\n-            \"*See https://docs.pytest.org/*/usage.html#creating-resultlog-format-files for more information*\",\n+            \"*See https://docs.pytest.org/en/latest/usage.html#creating-resultlog-format-files for more information*\",\n         ]\n     )\n "
    },
    {
        "commit_id": "28c3ef1c7713e62b0ef392c1000d8c0f1d892fcc",
        "commit_message": "Use https, save a redirect, fix hostname",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/28c3ef1c7713e62b0ef392c1000d8c0f1d892fcc",
        "buggy_code": "self._tw.line(\"-- Docs: http://doc.pytest.org/en/latest/warnings.html\")",
        "fixed_code": "self._tw.line(\"-- Docs: https://docs.pytest.org/en/latest/warnings.html\")",
        "patch": "@@ -691,7 +691,7 @@ def summary_warnings(self):\n                     indented = \"\\n\".join(\"  \" + x for x in lines)\n                     self._tw.line(indented)\n                 self._tw.line()\n-            self._tw.line(\"-- Docs: http://doc.pytest.org/en/latest/warnings.html\")\n+            self._tw.line(\"-- Docs: https://docs.pytest.org/en/latest/warnings.html\")\n \n     def summary_passes(self):\n         if self.config.option.tbstyle != \"no\":"
    },
    {
        "commit_id": "1e4ecda8845dcf32bdfd395063b797a91d54e80d",
        "commit_message": "Fix the package fixture ordering in Windows.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1e4ecda8845dcf32bdfd395063b797a91d54e80d",
        "buggy_code": "fixture_package_name = os.path.join(fixturedef.baseid, \"__init__.py\")",
        "fixed_code": "fixture_package_name = \"%s/%s\" % (fixturedef.baseid, \"__init__.py\")",
        "patch": "@@ -93,7 +93,7 @@ def get_scope_package(node, fixturedef):\n \n     cls = pytest.Package\n     current = node\n-    fixture_package_name = os.path.join(fixturedef.baseid, \"__init__.py\")\n+    fixture_package_name = \"%s/%s\" % (fixturedef.baseid, \"__init__.py\")\n     while current and (\n         type(current) is not cls or fixture_package_name != current.nodeid\n     ):"
    },
    {
        "commit_id": "3396225f74561f741dcc576e63c6f169bc08eda5",
        "commit_message": "Merge branch 'master' of github.com:pytest-dev/pytest into fix-3854",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3396225f74561f741dcc576e63c6f169bc08eda5",
        "buggy_code": "print(\"mod.hello %r\" % (mod.hello,))",
        "fixed_code": "print(\"mod.hello {!r}\".format(mod.hello))",
        "patch": "@@ -10,4 +10,4 @@ def pytest_runtest_setup(item):\n             return\n         mod = item.getparent(pytest.Module).obj\n         if hasattr(mod, \"hello\"):\n-            print(\"mod.hello %r\" % (mod.hello,))\n+            print(\"mod.hello {!r}\".format(mod.hello))"
    },
    {
        "commit_id": "3396225f74561f741dcc576e63c6f169bc08eda5",
        "commit_message": "Merge branch 'master' of github.com:pytest-dev/pytest into fix-3854",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3396225f74561f741dcc576e63c6f169bc08eda5",
        "buggy_code": "return py._builtin._totext(excinfo.value)",
        "fixed_code": "return six.text_type(excinfo.value)",
        "patch": "@@ -752,7 +752,7 @@ def _prunetraceback(self, excinfo):\n     def _repr_failure_py(self, excinfo, style=\"long\"):\n         if excinfo.errisinstance(fail.Exception):\n             if not excinfo.value.pytrace:\n-                return py._builtin._totext(excinfo.value)\n+                return six.text_type(excinfo.value)\n         return super(FunctionMixin, self)._repr_failure_py(excinfo, style=style)\n \n     def repr_failure(self, excinfo, outerr=None):"
    },
    {
        "commit_id": "3396225f74561f741dcc576e63c6f169bc08eda5",
        "commit_message": "Merge branch 'master' of github.com:pytest-dev/pytest into fix-3854",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3396225f74561f741dcc576e63c6f169bc08eda5",
        "buggy_code": "out.write(\"equal_with_bash %s %s\\n\" % (retval, res))",
        "fixed_code": "out.write(\"equal_with_bash {} {}\\n\".format(retval, res))",
        "patch": "@@ -11,7 +11,7 @@ def equal_with_bash(prefix, ffc, fc, out=None):\n     res_bash = set(fc(prefix))\n     retval = set(res) == res_bash\n     if out:\n-        out.write(\"equal_with_bash %s %s\\n\" % (retval, res))\n+        out.write(\"equal_with_bash {} {}\\n\".format(retval, res))\n         if not retval:\n             out.write(\" python - bash: %s\\n\" % (set(res) - res_bash))\n             out.write(\" bash - python: %s\\n\" % (res_bash - set(res)))"
    },
    {
        "commit_id": "3396225f74561f741dcc576e63c6f169bc08eda5",
        "commit_message": "Merge branch 'master' of github.com:pytest-dev/pytest into fix-3854",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3396225f74561f741dcc576e63c6f169bc08eda5",
        "buggy_code": "ustr = py.builtin._totext(\"\u0412\u041d\u0418!\", \"utf-8\")",
        "fixed_code": "ustr = u\"\u0412\u041d\u0418!\"",
        "patch": "@@ -941,7 +941,7 @@ def test_func(self, param):\n def test_unicode_issue368(testdir):\n     path = testdir.tmpdir.join(\"test.xml\")\n     log = LogXML(str(path), None)\n-    ustr = py.builtin._totext(\"\u0412\u041d\u0418!\", \"utf-8\")\n+    ustr = u\"\u0412\u041d\u0418!\"\n \n     class Report(BaseReport):\n         longrepr = ustr"
    },
    {
        "commit_id": "3396225f74561f741dcc576e63c6f169bc08eda5",
        "commit_message": "Merge branch 'master' of github.com:pytest-dev/pytest into fix-3854",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3396225f74561f741dcc576e63c6f169bc08eda5",
        "buggy_code": "pytest.skip(\"need to be run with pytest executable, not %s\" % (pytest_bin,))",
        "fixed_code": "pytest.skip(\"need to be run with pytest executable, not {}\".format(pytest_bin))",
        "patch": "@@ -294,7 +294,7 @@ def test_argcomplete(testdir, monkeypatch):\n     script = str(testdir.tmpdir.join(\"test_argcomplete\"))\n     pytest_bin = sys.argv[0]\n     if \"pytest\" not in os.path.basename(pytest_bin):\n-        pytest.skip(\"need to be run with pytest executable, not %s\" % (pytest_bin,))\n+        pytest.skip(\"need to be run with pytest executable, not {}\".format(pytest_bin))\n \n     with open(str(script), \"w\") as fp:\n         # redirect output from argcomplete to stdin and stderr is not trivial"
    },
    {
        "commit_id": "266f05c4c4ce981bfa7a1d2266380380aaf4bb72",
        "commit_message": "Fix #3751",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/266f05c4c4ce981bfa7a1d2266380380aaf4bb72",
        "buggy_code": "assert col.parent.parent is None",
        "fixed_code": "assert col.parent.parent.parent is None",
        "patch": "@@ -647,7 +647,7 @@ def test_pkgfile(self, testdir):\n         col = testdir.getnode(config, x)\n         assert isinstance(col, pytest.Module)\n         assert col.name == \"x.py\"\n-        assert col.parent.parent is None\n+        assert col.parent.parent.parent is None\n         for col in col.listchain():\n             assert col.config is config\n "
    },
    {
        "commit_id": "ca0476953e31eab4e5e5a252d5e7cf846ae2d1a7",
        "commit_message": "Merge pull request #3751 from nicoddemus/collect-file-bug\n\nWorkaround for #3742",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ca0476953e31eab4e5e5a252d5e7cf846ae2d1a7",
        "buggy_code": "assert col.parent.parent.parent is None",
        "fixed_code": "assert col.parent.parent is None",
        "patch": "@@ -647,7 +647,7 @@ def test_pkgfile(self, testdir):\n         col = testdir.getnode(config, x)\n         assert isinstance(col, pytest.Module)\n         assert col.name == \"x.py\"\n-        assert col.parent.parent.parent is None\n+        assert col.parent.parent is None\n         for col in col.listchain():\n             assert col.config is config\n "
    },
    {
        "commit_id": "7d13599ba1ad61d4423bc60db14c46a742f1e3fe",
        "commit_message": "Fix recursion in pytest.approx() with arrays in numpy<1.13",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d13599ba1ad61d4423bc60db14c46a742f1e3fe",
        "buggy_code": "return all(a == self for a in actual.flat)",
        "fixed_code": "return all(self == a for a in actual.flat)",
        "patch": "@@ -211,7 +211,7 @@ def __eq__(self, actual):\n         the pre-specified tolerance.\n         \"\"\"\n         if _is_numpy_array(actual):\n-            return all(a == self for a in actual.flat)\n+            return all(self == a for a in actual.flat)\n \n         # Short-circuit exact equality.\n         if actual == self.expected:"
    },
    {
        "commit_id": "150535b6c11b16ad38299ea93246b5ad55ce013c",
        "commit_message": "Merge pull request #3696 from abrammer/approx_numpy_tolerance_bugfix\n\nbugfix in ApproxNumpy initialisation, use keywords for arguments to fix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/150535b6c11b16ad38299ea93246b5ad55ce013c",
        "buggy_code": "return ApproxNumpy(actual, self.abs, self.rel, self.nan_ok) == self.expected",
        "fixed_code": "return all(a == self for a in actual.flat)",
        "patch": "@@ -211,7 +211,7 @@ def __eq__(self, actual):\n         the pre-specified tolerance.\n         \"\"\"\n         if _is_numpy_array(actual):\n-            return ApproxNumpy(actual, self.abs, self.rel, self.nan_ok) == self.expected\n+            return all(a == self for a in actual.flat)\n \n         # Short-circuit exact equality.\n         if actual == self.expected:"
    },
    {
        "commit_id": "e3d412d1f4d873bce356055e8c736a1220bed6bb",
        "commit_message": "Warn when implementations exist for pytest_namespace hook\n\nThis hook has been deprecated and will be removed in the future.\n\nFix #2639",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e3d412d1f4d873bce356055e8c736a1220bed6bb",
        "buggy_code": "install_requires.append(\"pluggy>=0.5,<0.8\")",
        "fixed_code": "install_requires.append(\"pluggy>=0.7\")",
        "patch": "@@ -69,7 +69,7 @@ def main():\n     # if _PYTEST_SETUP_SKIP_PLUGGY_DEP is set, skip installing pluggy;\n     # used by tox.ini to test with pluggy master\n     if \"_PYTEST_SETUP_SKIP_PLUGGY_DEP\" not in os.environ:\n-        install_requires.append(\"pluggy>=0.5,<0.8\")\n+        install_requires.append(\"pluggy>=0.7\")\n     environment_marker_support_level = get_environment_marker_support_level()\n     if environment_marker_support_level >= 2:\n         install_requires.append('funcsigs;python_version<\"3.0\"')"
    },
    {
        "commit_id": "067de257e140ec4ec716368c69c80f9278743fb7",
        "commit_message": "Fix test_pdb.py with pexpect",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/067de257e140ec4ec716368c69c80f9278743fb7",
        "buggy_code": "child.expect(\"test_1\")",
        "fixed_code": "child.expect(\"is_equal\")",
        "patch": "@@ -726,7 +726,7 @@ def test_1():\n             \"\"\"\n         )\n         child = testdir.spawn_pytest(\"--trace \" + str(p1))\n-        child.expect(\"test_1\")\n+        child.expect(\"is_equal\")\n         child.expect(\"(Pdb)\")\n         child.sendeof()\n         rest = child.read().decode(\"utf8\")"
    },
    {
        "commit_id": "4a925ef5e9334c12ac6ad8b8146dec6d664b9945",
        "commit_message": "Fixing bug in test.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4a925ef5e9334c12ac6ad8b8146dec6d664b9945",
        "buggy_code": "assert is_equal, 1, 1",
        "fixed_code": "yield is_equal, 1, 1",
        "patch": "@@ -722,7 +722,7 @@ def is_equal(a, b):\n                 assert a == b\n \n             def test_1():\n-                assert is_equal, 1, 1\n+                yield is_equal, 1, 1\n             \"\"\"\n         )\n         child = testdir.spawn_pytest(\"--trace \" + str(p1))"
    },
    {
        "commit_id": "b75320ba95e2033f7c12b400c0d587e989667d08",
        "commit_message": "Fix --trace option with yield tests.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b75320ba95e2033f7c12b400c0d587e989667d08",
        "buggy_code": "pyfuncitem.args = [testfunction, pyfuncitem._args]",
        "fixed_code": "pyfuncitem._args = [testfunction, *pyfuncitem._args]",
        "patch": "@@ -83,7 +83,7 @@ def pytest_pyfunc_call(pyfuncitem):\n         testfunction = pyfuncitem.obj\n         pyfuncitem.obj = pdb.runcall\n         if pyfuncitem._isyieldedfunction():\n-            pyfuncitem.args = [testfunction, pyfuncitem._args]\n+            pyfuncitem._args = [testfunction, *pyfuncitem._args]\n         else:\n             if \"func\" in pyfuncitem._fixtureinfo.argnames:\n                 raise ValueError(\"--trace can't be used with a fixture named func!\")"
    },
    {
        "commit_id": "b50911285a4d2f593afb92f568b21686473e25a5",
        "commit_message": "Merge pull request #3648 from eelstork/patch-1\n\nFix monkeypatch doc",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b50911285a4d2f593afb92f568b21686473e25a5",
        "buggy_code": "monkeypatch.delenv(name, value, raising=True)",
        "fixed_code": "monkeypatch.delenv(name, raising=True)",
        "patch": "@@ -22,7 +22,7 @@ def monkeypatch():\n         monkeypatch.setitem(mapping, name, value)\n         monkeypatch.delitem(obj, name, raising=True)\n         monkeypatch.setenv(name, value, prepend=False)\n-        monkeypatch.delenv(name, value, raising=True)\n+        monkeypatch.delenv(name, raising=True)\n         monkeypatch.syspath_prepend(path)\n         monkeypatch.chdir(path)\n "
    },
    {
        "commit_id": "a43205b4bc572aad746b9fbd6f6701722d86bce1",
        "commit_message": "Fix monkeypatch doc\n\n`delenv` is incorrectly documented.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a43205b4bc572aad746b9fbd6f6701722d86bce1",
        "buggy_code": "monkeypatch.delenv(name, value, raising=True)",
        "fixed_code": "monkeypatch.delenv(name, raising=True)",
        "patch": "@@ -22,7 +22,7 @@ def monkeypatch():\n         monkeypatch.setitem(mapping, name, value)\n         monkeypatch.delitem(obj, name, raising=True)\n         monkeypatch.setenv(name, value, prepend=False)\n-        monkeypatch.delenv(name, value, raising=True)\n+        monkeypatch.delenv(name, raising=True)\n         monkeypatch.syspath_prepend(path)\n         monkeypatch.chdir(path)\n "
    },
    {
        "commit_id": "2b75a311a78b9e07de4335738c374f3dfbc6a68e",
        "commit_message": "Merge pull request #3637 from RonnyPfannschmidt/fix-3631\n\nfix #3631 - don't store legacy markinfo when its impossible",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2b75a311a78b9e07de4335738c374f3dfbc6a68e",
        "buggy_code": "else:",
        "fixed_code": "elif isinstance(holder, MarkInfo):",
        "patch": "@@ -259,7 +259,7 @@ def store_legacy_markinfo(func, mark):\n     if holder is None:\n         holder = MarkInfo.for_mark(mark)\n         setattr(func, mark.name, holder)\n-    else:\n+    elif isinstance(holder, MarkInfo):\n         holder.add_mark(mark)\n \n "
    },
    {
        "commit_id": "5bd5b8c68aed33ad6b74f79208ef012e0b16c232",
        "commit_message": "fix #3631 - don't store legacy markinfo when its impossible",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5bd5b8c68aed33ad6b74f79208ef012e0b16c232",
        "buggy_code": "else:",
        "fixed_code": "elif isinstance(holder, MarkInfo):",
        "patch": "@@ -259,7 +259,7 @@ def store_legacy_markinfo(func, mark):\n     if holder is None:\n         holder = MarkInfo.for_mark(mark)\n         setattr(func, mark.name, holder)\n-    else:\n+    elif isinstance(holder, MarkInfo):\n         holder.add_mark(mark)\n \n "
    },
    {
        "commit_id": "4ae7e9788c67cb723ccfa7f1a5987d6db451b27b",
        "commit_message": "fix quotes in scope order test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4ae7e9788c67cb723ccfa7f1a5987d6db451b27b",
        "buggy_code": "warnings.warn(\\\"{!r}\\\" is not  in {}, assuming autouse\".format(VARIANT, VALID_VARS) )",
        "fixed_code": "warnings.warn(\"{!r} is not  in {}, assuming autouse\".format(VARIANT, VALID_VARS) )",
        "patch": "@@ -3805,7 +3805,7 @@ def test_func_closure_module_auto(self, testdir, variant, monkeypatch):\n \n             VARIANT = os.environ.get(VAR)\n             if VARIANT is None or VARIANT not in VALID_VARS:\n-                warnings.warn(\\\"{!r}\\\" is not  in {}, assuming autouse\".format(VARIANT, VALID_VARS) )\n+                warnings.warn(\"{!r} is not  in {}, assuming autouse\".format(VARIANT, VALID_VARS) )\n                 variant = 'mark'\n \n             @pytest.fixture(scope='module', autouse=VARIANT == 'autouse')"
    },
    {
        "commit_id": "b8486037d3fc7c61c742ced91ef3109da1448439",
        "commit_message": "fix #3605 - unpack markdecorators from parameterization",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b8486037d3fc7c61c742ced91ef3109da1448439",
        "buggy_code": "result.assert_outcomes(failed=0)",
        "fixed_code": "result.assert_outcomes(passed=4)",
        "patch": "@@ -1168,4 +1168,4 @@ def test_custom_mark_parametrized(obj_type):\n     )\n \n     result = testdir.runpytest()\n-    result.assert_outcomes(failed=0)\n+    result.assert_outcomes(passed=4)"
    },
    {
        "commit_id": "2925f3057f57d4600e3f309a429a370df26f2565",
        "commit_message": "Merge pull request #3584 from jwodder/fix-3583\n\nFix encoding error with `print` statements in doctests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2925f3057f57d4600e3f309a429a370df26f2565",
        "buggy_code": "if encoding:",
        "fixed_code": "if encoding and isinstance(result, bytes):",
        "patch": "@@ -505,7 +505,7 @@ class UnicodeSpoof(_SpoofOut):\n \n         def getvalue(self):\n             result = _SpoofOut.getvalue(self)\n-            if encoding:\n+            if encoding and isinstance(result, bytes):\n                 result = result.decode(encoding)\n             return result\n "
    },
    {
        "commit_id": "4dc7b4ace61d2b48a3df0088c9ca577caac7698a",
        "commit_message": "Merge pull request #3589 from hynek/master\n\nFix 2 DeprecationWarnings about invalid escape seq",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4dc7b4ace61d2b48a3df0088c9ca577caac7698a",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -497,7 +497,7 @@ def _is_numpy_array(obj):\n \n \n def raises(expected_exception, *args, **kwargs):\n-    \"\"\"\n+    r\"\"\"\n     Assert that a code block/function call raises ``expected_exception``\n     and raise a failure exception otherwise.\n "
    },
    {
        "commit_id": "4dc7b4ace61d2b48a3df0088c9ca577caac7698a",
        "commit_message": "Merge pull request #3589 from hynek/master\n\nFix 2 DeprecationWarnings about invalid escape seq",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4dc7b4ace61d2b48a3df0088c9ca577caac7698a",
        "buggy_code": "\"\"\"Assert that code raises a particular class of warning.",
        "fixed_code": "r\"\"\"Assert that code raises a particular class of warning.",
        "patch": "@@ -85,7 +85,7 @@ def __exit__(self, exc_type, exc_val, exc_tb):\n \n \n def warns(expected_warning, *args, **kwargs):\n-    \"\"\"Assert that code raises a particular class of warning.\n+    r\"\"\"Assert that code raises a particular class of warning.\n \n     Specifically, the parameter ``expected_warning`` can be a warning class or\n     sequence of warning classes, and the inside the ``with`` block must issue a warning of that class or"
    },
    {
        "commit_id": "acb8f23311ea66b6dce46bbd85db9c08d38ef981",
        "commit_message": "Fix 2 DeprecationWarnings about invalid escape seq",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/acb8f23311ea66b6dce46bbd85db9c08d38ef981",
        "buggy_code": "\"\"\"",
        "fixed_code": "r\"\"\"",
        "patch": "@@ -497,7 +497,7 @@ def _is_numpy_array(obj):\n \n \n def raises(expected_exception, *args, **kwargs):\n-    \"\"\"\n+    r\"\"\"\n     Assert that a code block/function call raises ``expected_exception``\n     and raise a failure exception otherwise.\n "
    },
    {
        "commit_id": "acb8f23311ea66b6dce46bbd85db9c08d38ef981",
        "commit_message": "Fix 2 DeprecationWarnings about invalid escape seq",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/acb8f23311ea66b6dce46bbd85db9c08d38ef981",
        "buggy_code": "\"\"\"Assert that code raises a particular class of warning.",
        "fixed_code": "r\"\"\"Assert that code raises a particular class of warning.",
        "patch": "@@ -85,7 +85,7 @@ def __exit__(self, exc_type, exc_val, exc_tb):\n \n \n def warns(expected_warning, *args, **kwargs):\n-    \"\"\"Assert that code raises a particular class of warning.\n+    r\"\"\"Assert that code raises a particular class of warning.\n \n     Specifically, the parameter ``expected_warning`` can be a warning class or\n     sequence of warning classes, and the inside the ``with`` block must issue a warning of that class or"
    },
    {
        "commit_id": "d382f3e77ffe6db49ebc6a93f81fcdeea8ea5458",
        "commit_message": "[#3583] Fix encoding error with `print` statements in doctests\n\nThis fix was suggested by Stack Overflow user phd in\n<https://stackoverflow.com/a/50863820/744178>.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d382f3e77ffe6db49ebc6a93f81fcdeea8ea5458",
        "buggy_code": "if encoding:",
        "fixed_code": "if encoding and isinstance(result, bytes):",
        "patch": "@@ -505,7 +505,7 @@ class UnicodeSpoof(_SpoofOut):\n \n         def getvalue(self):\n             result = _SpoofOut.getvalue(self)\n-            if encoding:\n+            if encoding and isinstance(result, bytes):\n                 result = result.decode(encoding)\n             return result\n "
    },
    {
        "commit_id": "464117b4725b853feb15c965732526448128a45a",
        "commit_message": "fix imports in tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/464117b4725b853feb15c965732526448128a45a",
        "buggy_code": "from _pytest.config import Parser",
        "fixed_code": "from _pytest.config.argparsing import Parser",
        "patch": "@@ -51,7 +51,7 @@ class TestCaptureManager(object):\n \n     def test_getmethod_default_no_fd(self, monkeypatch):\n         from _pytest.capture import pytest_addoption\n-        from _pytest.config import Parser\n+        from _pytest.config.argparsing import Parser\n \n         parser = Parser()\n         pytest_addoption(parser)"
    },
    {
        "commit_id": "464117b4725b853feb15c965732526448128a45a",
        "commit_message": "fix imports in tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/464117b4725b853feb15c965732526448128a45a",
        "buggy_code": "from _pytest import config as parseopt",
        "fixed_code": "from _pytest.config import argparsing as parseopt",
        "patch": "@@ -4,7 +4,7 @@\n import os\n import py\n import pytest\n-from _pytest import config as parseopt\n+from _pytest.config import argparsing as parseopt\n \n \n @pytest.fixture"
    },
    {
        "commit_id": "48215fdcb90baf9abc1f83661d9d8be3e72a4b22",
        "commit_message": "Merge pull request #3500 from RonnyPfannschmidt/fix-3498-unittest-marks\n\nfix #3498 - correctly consider marks on unittest classes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/48215fdcb90baf9abc1f83661d9d8be3e72a4b22",
        "buggy_code": "if funcargs and not hasattr(node, \"nofuncargs\"):",
        "fixed_code": "if funcargs and not getattr(node, \"nofuncargs\", False):",
        "patch": "@@ -984,7 +984,7 @@ def __init__(self, session):\n         session.config.pluginmanager.register(self, \"funcmanage\")\n \n     def getfixtureinfo(self, node, func, cls, funcargs=True):\n-        if funcargs and not hasattr(node, \"nofuncargs\"):\n+        if funcargs and not getattr(node, \"nofuncargs\", False):\n             argnames = getfuncargnames(func, cls=cls)\n         else:\n             argnames = ()"
    },
    {
        "commit_id": "48215fdcb90baf9abc1f83661d9d8be3e72a4b22",
        "commit_message": "Merge pull request #3500 from RonnyPfannschmidt/fix-3498-unittest-marks\n\nfix #3498 - correctly consider marks on unittest classes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/48215fdcb90baf9abc1f83661d9d8be3e72a4b22",
        "buggy_code": "self.parent, self.obj, self.cls,",
        "fixed_code": "self, self.obj, self.cls,",
        "patch": "@@ -1155,7 +1155,7 @@ def __init__(self, name, parent, args=None, config=None,\n \n         if fixtureinfo is None:\n             fixtureinfo = self.session._fixturemanager.getfixtureinfo(\n-                self.parent, self.obj, self.cls,\n+                self, self.obj, self.cls,\n                 funcargs=not self._isyieldedfunction())\n         self._fixtureinfo = fixtureinfo\n         self.fixturenames = fixtureinfo.names_closure"
    },
    {
        "commit_id": "a5cf55dd4a5237ad4b5d6e93d9822558bbc8cd28",
        "commit_message": "fix test_mark_option_custom - it used the legacy keyword storage for addign markers",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a5cf55dd4a5237ad4b5d6e93d9822558bbc8cd28",
        "buggy_code": "item.keywords[\"interface\"] = pytest.mark.interface",
        "fixed_code": "item.add_marker(pytest.mark.interface)",
        "patch": "@@ -295,7 +295,7 @@ def test_mark_option_custom(spec, testdir):\n         def pytest_collection_modifyitems(items):\n             for item in items:\n                 if \"interface\" in item.nodeid:\n-                    item.keywords[\"interface\"] = pytest.mark.interface\n+                    item.add_marker(pytest.mark.interface)\n     \"\"\")\n     testdir.makepyfile(\"\"\"\n         def test_interface():"
    },
    {
        "commit_id": "229c8e551d09ae7ed894a2d7d106fefa1307c5a2",
        "commit_message": "Fix parametrized fixtures reordering.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/229c8e551d09ae7ed894a2d7d106fefa1307c5a2",
        "buggy_code": "key = (argname, param_index, item.fspath)",
        "fixed_code": "key = (argname, param_index, item.fspath.dirpath())",
        "patch": "@@ -172,7 +172,7 @@ def get_parametrized_fixture_keys(item, scopenum):\n             if scopenum == 0:    # session\n                 key = (argname, param_index)\n             elif scopenum == 1:  # package\n-                key = (argname, param_index, item.fspath)\n+                key = (argname, param_index, item.fspath.dirpath())\n             elif scopenum == 2:  # module\n                 key = (argname, param_index, item.fspath)\n             elif scopenum == 3:  # class"
    },
    {
        "commit_id": "f8350c63041c8ba042c105fcbf78c9207d3b7dc5",
        "commit_message": "Fix an issue that popped up only on Windows.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f8350c63041c8ba042c105fcbf78c9207d3b7dc5",
        "buggy_code": "if os.sep != SEP:",
        "fixed_code": "if nodeid and os.sep != SEP:",
        "patch": "@@ -329,7 +329,7 @@ def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):\n \n             if not nodeid:\n                 nodeid = _check_initialpaths_for_relpath(session, fspath)\n-            if os.sep != SEP:\n+            if nodeid and os.sep != SEP:\n                 nodeid = nodeid.replace(os.sep, SEP)\n \n         super(FSCollector, self).__init__(name, parent, config, session, nodeid=nodeid, fspath=fspath)"
    },
    {
        "commit_id": "c02e8d8b0d4a50cb802b901f78412448612d03ed",
        "commit_message": "Fix test collection when tests are passed as IDs at the command line. Note this is still broken due to #3358.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c02e8d8b0d4a50cb802b901f78412448612d03ed",
        "buggy_code": "modcol = testdir.getmodulecol(\"pass\", withinit=True)",
        "fixed_code": "modcol = testdir.getmodulecol(\"pass\", withinit=False)",
        "patch": "@@ -927,7 +927,7 @@ def pytest_runtest_teardown(item):\n \n \n def test_modulecol_roundtrip(testdir):\n-    modcol = testdir.getmodulecol(\"pass\", withinit=True)\n+    modcol = testdir.getmodulecol(\"pass\", withinit=False)\n     trail = modcol.nodeid\n     newcol = modcol.session.perform_collect([trail], genitems=0)[0]\n     assert modcol.name == newcol.name"
    },
    {
        "commit_id": "c02e8d8b0d4a50cb802b901f78412448612d03ed",
        "commit_message": "Fix test collection when tests are passed as IDs at the command line. Note this is still broken due to #3358.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c02e8d8b0d4a50cb802b901f78412448612d03ed",
        "buggy_code": "assert col.parent.parent is None",
        "fixed_code": "assert col.parent.parent.parent is None",
        "patch": "@@ -587,7 +587,7 @@ def test_pkgfile(self, testdir):\n         col = testdir.getnode(config, x)\n         assert isinstance(col, pytest.Module)\n         assert col.name == 'x.py'\n-        assert col.parent.parent is None\n+        assert col.parent.parent.parent is None\n         for col in col.listchain():\n             assert col.config is config\n "
    },
    {
        "commit_id": "9a62ebf49018dbb87111368c2e8374b7d5fecbab",
        "commit_message": "Merge pull request #3355 from irmen/py37deprfixes\n\nchange collections.abc import to fix deprecation warnings on python 3.7",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9a62ebf49018dbb87111368c2e8374b7d5fecbab",
        "buggy_code": "from collections import Sequence",
        "fixed_code": "from ..compat import Sequence",
        "patch": "@@ -5,7 +5,7 @@\n import _pytest._code\n import py\n import six\n-from collections import Sequence\n+from ..compat import Sequence\n \n u = six.text_type\n "
    },
    {
        "commit_id": "802da781c62519b26f1a9d0ad9ac6adcc331222c",
        "commit_message": "fix method reference to iter_markers in warning",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/802da781c62519b26f1a9d0ad9ac6adcc331222c",
        "buggy_code": "\"Please use node.find_markers to iterate over markers correctly\"",
        "fixed_code": "\"Please use node.iter_markers to iterate over markers correctly\"",
        "patch": "@@ -33,7 +33,7 @@ class RemovedInPytest4Warning(DeprecationWarning):\n \n MARK_INFO_ATTRIBUTE = RemovedInPytest4Warning(\n     \"MarkInfo objects are deprecated as they contain the merged marks.\\n\"\n-    \"Please use node.find_markers to iterate over markers correctly\"\n+    \"Please use node.iter_markers to iterate over markers correctly\"\n )\n \n MARK_PARAMETERSET_UNPACKING = RemovedInPytest4Warning("
    },
    {
        "commit_id": "99015bfc86d6ad309bdd9abbe2c0700d58ca36d1",
        "commit_message": "fix most of metafunc tests by mocking",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/99015bfc86d6ad309bdd9abbe2c0700d58ca36d1",
        "buggy_code": "assert isinstance(definition, FunctionDefinition)",
        "fixed_code": "assert isinstance(definition, FunctionDefinition) or type(definition).__name__ == \"DefinitionMock\"",
        "patch": "@@ -736,7 +736,7 @@ class Metafunc(fixtures.FuncargnamesCompatAttr):\n \n     def __init__(self, definition, fixtureinfo, config, cls=None, module=None):\n         #: access to the :class:`_pytest.config.Config` object for the test session\n-        assert isinstance(definition, FunctionDefinition)\n+        assert isinstance(definition, FunctionDefinition) or type(definition).__name__ == \"DefinitionMock\"\n         self.definition = definition\n         self.config = config\n "
    },
    {
        "commit_id": "2efaf39ed8baf94bb537d999e9c446362fb8efe1",
        "commit_message": "Merge pull request #3349 from jeffreyrack/3348-unknown-argument\n\n3348: raise error on unknown arguments to raises",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2efaf39ed8baf94bb537d999e9c446362fb8efe1",
        "buggy_code": "with pytest.raises(AssertionError, matches=msg):",
        "fixed_code": "with pytest.raises(AssertionError, match=msg):",
        "patch": "@@ -113,7 +113,7 @@ def f():\n             pass\n \n         msg = 'Did not produce DeprecationWarning or PendingDeprecationWarning'\n-        with pytest.raises(AssertionError, matches=msg):\n+        with pytest.raises(AssertionError, match=msg):\n             if mode == 'call':\n                 pytest.deprecated_call(f)\n             else:"
    },
    {
        "commit_id": "2962c7367cff967b03b46581eafe13c5fd2e2d54",
        "commit_message": "Merge pull request #3307 from KKoukiou/rhv-qe-fix\n\nlogging.py: Don't change log level of the root logger to bigger numeric value",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2962c7367cff967b03b46581eafe13c5fd2e2d54",
        "buggy_code": "root_logger.setLevel(level)",
        "fixed_code": "root_logger.setLevel(min(orig_level, level))",
        "patch": "@@ -153,7 +153,7 @@ def catching_logs(handler, formatter=None, level=None):\n         root_logger.addHandler(handler)\n     if level is not None:\n         orig_level = root_logger.level\n-        root_logger.setLevel(level)\n+        root_logger.setLevel(min(orig_level, level))\n     try:\n         yield handler\n     finally:"
    },
    {
        "commit_id": "e97bd87ee20635bf585900747c3b571fd43e0fa8",
        "commit_message": "fix assertion when hypothesis is installed (which is should be for developing in pytest)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e97bd87ee20635bf585900747c3b571fd43e0fa8",
        "buggy_code": "\"*1 passed*\",",
        "fixed_code": "\"* passed*\",",
        "patch": "@@ -504,7 +504,7 @@ def test_nothing():\n         \"\"\")\n         result = testdir.runpytest_inprocess(\"\", p1)\n         result.stdout.fnmatch_lines([\n-            \"*1 passed*\",\n+            \"* passed*\",\n         ])\n         assert sys.breakpointhook != pytestPDB.set_trace\n "
    },
    {
        "commit_id": "b66019202ec389d5430434ace3068a8eb405402a",
        "commit_message": "Fix test failure on Python 2. Ref #3314.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b66019202ec389d5430434ace3068a8eb405402a",
        "buggy_code": "class DontReadFromInput(object):",
        "fixed_code": "class DontReadFromInput(six.Iterator):",
        "patch": "@@ -560,7 +560,7 @@ def snap(self):\n         return res\n \n \n-class DontReadFromInput(object):\n+class DontReadFromInput(six.Iterator):\n     \"\"\"Temporary stub class.  Ideally when stdin is accessed, the\n     capturing should be turned off, with possibly all data captured\n     so far sent to the screen.  This should be configurable, though,"
    },
    {
        "commit_id": "e980fbbe391aca04c448d2ac9670396da4e8105e",
        "commit_message": "Merge pull request #3277 from maiksensi/bug/3241-check-if-dir-exists\n\nUse `isdir` instead of `exists`",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e980fbbe391aca04c448d2ac9670396da4e8105e",
        "buggy_code": "if not bindir.exists():",
        "fixed_code": "if not bindir.isdir():",
        "patch": "@@ -170,7 +170,7 @@ def _in_venv(path):\n     \"\"\"Attempts to detect if ``path`` is the root of a Virtual Environment by\n     checking for the existence of the appropriate activate script\"\"\"\n     bindir = path.join('Scripts' if sys.platform.startswith('win') else 'bin')\n-    if not bindir.exists():\n+    if not bindir.isdir():\n         return False\n     activates = ('activate', 'activate.csh', 'activate.fish',\n                  'Activate', 'Activate.bat', 'Activate.ps1')"
    },
    {
        "commit_id": "f501d0021c3a86a46da928cf0fc3d806fd5ac03d",
        "commit_message": "#3268 Fix warning variable",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f501d0021c3a86a46da928cf0fc3d806fd5ac03d",
        "buggy_code": "SETUP_CFG_PYTEST = '[pytest] section in setup.cfg files is deprecated, use [tool:pytest] instead.'",
        "fixed_code": "CFG_PYTEST_SECTION = '[pytest] section in {filename} files is deprecated, use [tool:pytest] instead.'",
        "patch": "@@ -22,7 +22,7 @@ class RemovedInPytest4Warning(DeprecationWarning):\n     'and scheduled to be removed in pytest 4.0.  '\n     'Please remove the prefix and use the @pytest.fixture decorator instead.')\n \n-SETUP_CFG_PYTEST = '[pytest] section in setup.cfg files is deprecated, use [tool:pytest] instead.'\n+CFG_PYTEST_SECTION = '[pytest] section in {filename} files is deprecated, use [tool:pytest] instead.'\n \n GETFUNCARGVALUE = \"use of getfuncargvalue is deprecated, use getfixturevalue\"\n "
    },
    {
        "commit_id": "90638b661d2f3159b3284020601eef3d25ebb9b5",
        "commit_message": "Merge pull request #3270 from pytest-dev/blueyed-patch-1\n\nFix typo with test_summary_list_after_errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/90638b661d2f3159b3284020601eef3d25ebb9b5",
        "buggy_code": "\"\"\"Ensure the list of errors/fails/xfails/skips appear after tracebacks in terminal reporting.\"\"\"",
        "fixed_code": "\"\"\"Ensure the list of errors/fails/xfails/skips appears after tracebacks in terminal reporting.\"\"\"",
        "patch": "@@ -1093,7 +1093,7 @@ def pytest_collect_file(path, parent):\n \n \n def test_summary_list_after_errors(testdir):\n-    \"\"\"Ensure the list of errors/fails/xfails/skips appear after tracebacks in terminal reporting.\"\"\"\n+    \"\"\"Ensure the list of errors/fails/xfails/skips appears after tracebacks in terminal reporting.\"\"\"\n     testdir.makepyfile(\"\"\"\n         import pytest\n         def test_fail():"
    },
    {
        "commit_id": "8239103aa95f18b10ea204aa22ca7967522d63fd",
        "commit_message": "Fix typo with test_summary_list_after_errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8239103aa95f18b10ea204aa22ca7967522d63fd",
        "buggy_code": "\"\"\"Ensure the list of errors/fails/xfails/skips appear after tracebacks in terminal reporting.\"\"\"",
        "fixed_code": "\"\"\"Ensure the list of errors/fails/xfails/skips appears after tracebacks in terminal reporting.\"\"\"",
        "patch": "@@ -1093,7 +1093,7 @@ def pytest_collect_file(path, parent):\n \n \n def test_summary_list_after_errors(testdir):\n-    \"\"\"Ensure the list of errors/fails/xfails/skips appear after tracebacks in terminal reporting.\"\"\"\n+    \"\"\"Ensure the list of errors/fails/xfails/skips appears after tracebacks in terminal reporting.\"\"\"\n     testdir.makepyfile(\"\"\"\n         import pytest\n         def test_fail():"
    },
    {
        "commit_id": "82cdc487cefbbbd1848705427fed6276461835e6",
        "commit_message": "Fix raised warning when attrs 17.4.0 is used\n\nRelated: #3223",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82cdc487cefbbbd1848705427fed6276461835e6",
        "buggy_code": "'attrs>=17.2.0',",
        "fixed_code": "'attrs>=17.4.0',",
        "patch": "@@ -59,7 +59,7 @@ def main():\n         'py>=1.5.0',\n         'six>=1.10.0',\n         'setuptools',\n-        'attrs>=17.2.0',\n+        'attrs>=17.4.0',\n     ]\n     # if _PYTEST_SETUP_SKIP_PLUGGY_DEP is set, skip installing pluggy;\n     # used by tox.ini to test with pluggy master"
    },
    {
        "commit_id": "2d0c1e941ef096f4c6a82ee84c659112bf2f9da0",
        "commit_message": "Fix versionadded tag in caplog function",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2d0c1e941ef096f4c6a82ee84c659112bf2f9da0",
        "buggy_code": ".. versionadded:: 3.4",
        "fixed_code": ".. versionadded:: 3.5",
        "patch": "@@ -260,7 +260,7 @@ def longreprtext(self):\n     def caplog(self):\n         \"\"\"Return captured log lines, if log capturing is enabled\n \n-        .. versionadded:: 3.4\n+        .. versionadded:: 3.5\n         \"\"\"\n         return '\\n'.join(content for (prefix, content) in self.get_sections('Captured log'))\n "
    },
    {
        "commit_id": "e289c60c3a6c97cc51cce8eced65c86a3d7ae750",
        "commit_message": "Support py37 officially\n\nPython 3.7.0b1 has been released:\n\n\thttps://www.python.org/downloads/release/python-370b1/\n\nFix #3168",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e289c60c3a6c97cc51cce8eced65c86a3d7ae750",
        "buggy_code": "for x in '2 2.7 3 3.4 3.5 3.6'.split()",
        "fixed_code": "for x in '2 2.7 3 3.4 3.5 3.6 3.7'.split()",
        "patch": "@@ -16,7 +16,7 @@\n     'Topic :: Utilities',\n ] + [\n     ('Programming Language :: Python :: %s' % x)\n-    for x in '2 2.7 3 3.4 3.5 3.6'.split()\n+    for x in '2 2.7 3 3.4 3.5 3.6 3.7'.split()\n ]\n \n with open('README.rst') as fd:"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class FastFilesCompleter:",
        "fixed_code": "class FastFilesCompleter(object):",
        "patch": "@@ -60,7 +60,7 @@\n from glob import glob\n \n \n-class FastFilesCompleter:\n+class FastFilesCompleter(object):\n     'Fast file completer class'\n \n     def __init__(self, directories=True):"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class AssertionState:",
        "fixed_code": "class AssertionState(object):",
        "patch": "@@ -56,7 +56,7 @@ def mark_rewrite(self, *names):\n         pass\n \n \n-class AssertionState:\n+class AssertionState(object):\n     \"\"\"State for the assertion plugin.\"\"\"\n \n     def __init__(self, config, mode):"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class FSHookProxy:",
        "fixed_code": "class FSHookProxy(object):",
        "patch": "@@ -248,7 +248,7 @@ def find_module_patched(self, fullname, path=None):\n         yield\n \n \n-class FSHookProxy:\n+class FSHookProxy(object):\n     def __init__(self, fspath, pm, remove_mods):\n         self.fspath = fspath\n         self.pm = pm"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "argnames, argvalues, self.function)",
        "fixed_code": "argnames, argvalues, self.function, self.config)",
        "patch": "@@ -786,7 +786,7 @@ def parametrize(self, argnames, argvalues, indirect=False, ids=None,\n         from _pytest.mark import ParameterSet\n         from py.io import saferepr\n         argnames, parameters = ParameterSet._for_parameterize(\n-            argnames, argvalues, self.function)\n+            argnames, argvalues, self.function, self.config)\n         del argvalues\n \n         if scope is None:"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class CallInfo:",
        "fixed_code": "class CallInfo(object):",
        "patch": "@@ -178,7 +178,7 @@ def call_runtest_hook(item, when, **kwds):\n     return CallInfo(lambda: ihook(item=item, **kwds), when=when)\n \n \n-class CallInfo:\n+class CallInfo(object):\n     \"\"\" Result/Exception info a function invocation. \"\"\"\n     #: None or ExceptionInfo object.\n     excinfo = None"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class TempdirFactory:",
        "fixed_code": "class TempdirFactory(object):",
        "patch": "@@ -8,7 +8,7 @@\n from _pytest.monkeypatch import MonkeyPatch\n \n \n-class TempdirFactory:\n+class TempdirFactory(object):\n     \"\"\"Factory for temporary directories under the common base temp directory.\n \n     The base directory can be configured using the ``--basetemp`` option."
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class TestClass:",
        "fixed_code": "class TestClass(object):",
        "patch": "@@ -2828,7 +2828,7 @@ def fixture1():\n     def test_show_fixtures_indented_in_class(self, testdir):\n         p = testdir.makepyfile(dedent('''\n             import pytest\n-            class TestClass:\n+            class TestClass(object):\n                 @pytest.fixture\n                 def fixture1(self):\n                     \"\"\"line1"
    },
    {
        "commit_id": "9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "commit_message": "#1642 Resolve conflicts",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9f1772e679712a2cb2ece5c6c0a8cbe5fa46bdc7",
        "buggy_code": "class DummyStream:",
        "fixed_code": "class DummyStream(object):",
        "patch": "@@ -1245,7 +1245,7 @@ def test_py36_windowsconsoleio_workaround_non_standard_streams():\n     \"\"\"\n     from _pytest.capture import _py36_windowsconsoleio_workaround\n \n-    class DummyStream:\n+    class DummyStream(object):\n         def write(self, s):\n             pass\n "
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class FastFilesCompleter:",
        "fixed_code": "class FastFilesCompleter(object):",
        "patch": "@@ -60,7 +60,7 @@\n from glob import glob\n \n \n-class FastFilesCompleter:\n+class FastFilesCompleter(object):\n     'Fast file completer class'\n \n     def __init__(self, directories=True):"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class AssertionState:",
        "fixed_code": "class AssertionState(object):",
        "patch": "@@ -56,7 +56,7 @@ def mark_rewrite(self, *names):\n         pass\n \n \n-class AssertionState:\n+class AssertionState(object):\n     \"\"\"State for the assertion plugin.\"\"\"\n \n     def __init__(self, config, mode):"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class LFPlugin:",
        "fixed_code": "class LFPlugin(object):",
        "patch": "@@ -98,7 +98,7 @@ def set(self, key, value):\n                 json.dump(value, f, indent=2, sort_keys=True)\n \n \n-class LFPlugin:\n+class LFPlugin(object):\n     \"\"\" Plugin which implements the --lf (run last-failing) option \"\"\"\n \n     def __init__(self, config):"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class FSHookProxy:",
        "fixed_code": "class FSHookProxy(object):",
        "patch": "@@ -243,7 +243,7 @@ def find_module_patched(self, fullname, path=None):\n         yield\n \n \n-class FSHookProxy:\n+class FSHookProxy(object):\n     def __init__(self, fspath, pm, remove_mods):\n         self.fspath = fspath\n         self.pm = pm"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class MarkGenerator:",
        "fixed_code": "class MarkGenerator(object):",
        "patch": "@@ -284,7 +284,7 @@ def pytest_unconfigure(config):\n     MARK_GEN._config = getattr(config, '_old_mark_config', None)\n \n \n-class MarkGenerator:\n+class MarkGenerator(object):\n     \"\"\" Factory for :class:`MarkDecorator` objects - exposed as\n     a ``pytest.mark`` singleton instance.  Example::\n "
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class CallInfo:",
        "fixed_code": "class CallInfo(object):",
        "patch": "@@ -178,7 +178,7 @@ def call_runtest_hook(item, when, **kwds):\n     return CallInfo(lambda: ihook(item=item, **kwds), when=when)\n \n \n-class CallInfo:\n+class CallInfo(object):\n     \"\"\" Result/Exception info a function invocation. \"\"\"\n     #: None or ExceptionInfo object.\n     excinfo = None"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class TempdirFactory:",
        "fixed_code": "class TempdirFactory(object):",
        "patch": "@@ -8,7 +8,7 @@\n from _pytest.monkeypatch import MonkeyPatch\n \n \n-class TempdirFactory:\n+class TempdirFactory(object):\n     \"\"\"Factory for temporary directories under the common base temp directory.\n \n     The base directory can be configured using the ``--basetemp`` option."
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class Hooks:",
        "fixed_code": "class Hooks(object):",
        "patch": "@@ -901,7 +901,7 @@ def test_deferred_hook_checking(testdir):\n     testdir.syspathinsert()\n     testdir.makepyfile(**{\n         'plugin.py': \"\"\"\n-        class Hooks:\n+        class Hooks(object):\n             def pytest_my_hook(self, config):\n                 pass\n "
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class TestClass:",
        "fixed_code": "class TestClass(object):",
        "patch": "@@ -2828,7 +2828,7 @@ def fixture1():\n     def test_show_fixtures_indented_in_class(self, testdir):\n         p = testdir.makepyfile(dedent('''\n             import pytest\n-            class TestClass:\n+            class TestClass(object):\n                 @pytest.fixture\n                 def fixture1(self):\n                     \"\"\"line1"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class TestClass:",
        "fixed_code": "class TestClass(object):",
        "patch": "@@ -241,7 +241,7 @@ def test_class_or_function_idval(self):\n         \"\"\"\n         from _pytest.python import _idval\n \n-        class TestClass:\n+        class TestClass(object):\n             pass\n \n         def test_function():"
    },
    {
        "commit_id": "af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "commit_message": "All classes now subclass object for better py3 compatibility\n\nFix #2147",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af37778b0d8d88b72b485ae53a5dde0478cc1b07",
        "buggy_code": "class DummyStream:",
        "fixed_code": "class DummyStream(object):",
        "patch": "@@ -1245,7 +1245,7 @@ def test_py36_windowsconsoleio_workaround_non_standard_streams():\n     \"\"\"\n     from _pytest.capture import _py36_windowsconsoleio_workaround\n \n-    class DummyStream:\n+    class DummyStream(object):\n         def write(self, s):\n             pass\n "
    },
    {
        "commit_id": "b4e8861aa583e9fc365e5bb4769e3a6e5c94f78a",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b4e8861aa583e9fc365e5bb4769e3a6e5c94f78a",
        "buggy_code": "\"\"\"Setups the handler and logger for the Live Logs feature, if enabled.",
        "fixed_code": "\"\"\"Sets up the handler and logger for the Live Logs feature, if enabled.",
        "patch": "@@ -355,7 +355,7 @@ def pytest_runtestloop(self, session):\n                 yield  # run all the tests\n \n     def _setup_cli_logging(self):\n-        \"\"\"Setups the handler and logger for the Live Logs feature, if enabled.\n+        \"\"\"Sets up the handler and logger for the Live Logs feature, if enabled.\n \n         This must be done right before starting the loop so we can access the terminal reporter plugin.\n         \"\"\""
    },
    {
        "commit_id": "bc66f7e43f11632a746618124e5d7688404ab6c5",
        "commit_message": "Merge pull request #3075 from elliterate/bugs/fix-skipping-plugin-reporting\n\nAssume not skipped by mark if attribute missing",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bc66f7e43f11632a746618124e5d7688404ab6c5",
        "buggy_code": "elif item._skipped_by_mark and rep.skipped and type(rep.longrepr) is tuple:",
        "fixed_code": "elif getattr(item, '_skipped_by_mark', False) and rep.skipped and type(rep.longrepr) is tuple:",
        "patch": "@@ -261,7 +261,7 @@ def pytest_runtest_makereport(item, call):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = explanation\n-    elif item._skipped_by_mark and rep.skipped and type(rep.longrepr) is tuple:\n+    elif getattr(item, '_skipped_by_mark', False) and rep.skipped and type(rep.longrepr) is tuple:\n         # skipped by mark.skipif; change the location of the failure\n         # to point to the item definition, otherwise it will display\n         # the location of where the skip exception was raised within pytest"
    },
    {
        "commit_id": "e4da9bacdfd6c787786b5971491455e2e8c0029a",
        "commit_message": "fix `actial` --> `actual` typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e4da9bacdfd6c787786b5971491455e2e8c0029a",
        "buggy_code": "'write_out': 'write changes to the actial changelog'",
        "fixed_code": "'write_out': 'write changes to the actual changelog'",
        "patch": "@@ -151,7 +151,7 @@ def publish_release(ctx, version, user, pypi_name):\n \n @invoke.task(help={\n     'version': 'version being released',\n-    'write_out': 'write changes to the actial changelog'\n+    'write_out': 'write changes to the actual changelog'\n })\n def changelog(ctx, version, write_out=False):\n     if write_out:"
    },
    {
        "commit_id": "8e8a953ac67b74c2ee4ccefe9afa7abbd886cbba",
        "commit_message": "fix test name typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8e8a953ac67b74c2ee4ccefe9afa7abbd886cbba",
        "buggy_code": "def test_assert_outcomes_after_pytest_erro(testdir):",
        "fixed_code": "def test_assert_outcomes_after_pytest_error(testdir):",
        "patch": "@@ -141,7 +141,7 @@ def test_inline_run_clean_modules(testdir):\n     assert result2.ret == EXIT_TESTSFAILED\n \n \n-def test_assert_outcomes_after_pytest_erro(testdir):\n+def test_assert_outcomes_after_pytest_error(testdir):\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest('--unexpected-argument')"
    },
    {
        "commit_id": "70f1e3b4b0cdcf428fdcf44b6bc62ad76e2a03b2",
        "commit_message": "Improve getscopeitem assertion message\n\nFix #2979",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/70f1e3b4b0cdcf428fdcf44b6bc62ad76e2a03b2",
        "buggy_code": "assert node",
        "fixed_code": "assert node, 'Could not obtain a node for scope \"{}\" for function {!r}'.format(scope, self._pyfuncitem)",
        "patch": "@@ -553,7 +553,7 @@ def _getscopeitem(self, scope):\n         if node is None and scope == \"class\":\n             # fallback to function item itself\n             node = self._pyfuncitem\n-        assert node\n+        assert node, 'Could not obtain a node for scope \"{}\" for function {!r}'.format(scope, self._pyfuncitem)\n         return node\n \n     def __repr__(self):"
    },
    {
        "commit_id": "88ed1ab64857c42a2509ed1eea1bf3f13ebd797e",
        "commit_message": "Merge pull request #2964 from rpuntaie/master\n\nfix issue #2920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88ed1ab64857c42a2509ed1eea1bf3f13ebd797e",
        "buggy_code": "if self.get_plugin(modname) is not None:",
        "fixed_code": "if self.is_blocked(modname) or self.get_plugin(modname) is not None:",
        "patch": "@@ -417,7 +417,7 @@ def import_plugin(self, modname):\n         # _pytest prefix.\n         assert isinstance(modname, (six.text_type, str)), \"module name as text required, got %r\" % modname\n         modname = str(modname)\n-        if self.get_plugin(modname) is not None:\n+        if self.is_blocked(modname) or self.get_plugin(modname) is not None:\n             return\n         if modname in builtin_plugins:\n             importspec = \"_pytest.\" + modname"
    },
    {
        "commit_id": "4ea7bbc197de2af0938ff64423add33098ee7326",
        "commit_message": "fix issue #2920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4ea7bbc197de2af0938ff64423add33098ee7326",
        "buggy_code": "if self.get_plugin(modname) is not None:",
        "fixed_code": "if self.is_blocked(modname) or self.get_plugin(modname) is not None:",
        "patch": "@@ -417,7 +417,7 @@ def import_plugin(self, modname):\n         # _pytest prefix.\n         assert isinstance(modname, (six.text_type, str)), \"module name as text required, got %r\" % modname\n         modname = str(modname)\n-        if self.get_plugin(modname) is not None:\n+        if self.is_blocked(modname) or self.get_plugin(modname) is not None:\n             return\n         if modname in builtin_plugins:\n             importspec = \"_pytest.\" + modname"
    },
    {
        "commit_id": "8df7ed12c19ea17aa9fd58d355c4ef85dbaf293c",
        "commit_message": "Merge pull request #2940 from nicoddemus/rewrite-bug-2939\n\nFix assertion rewrite to match module names correctly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8df7ed12c19ea17aa9fd58d355c4ef85dbaf293c",
        "buggy_code": "if name.startswith(marked):",
        "fixed_code": "if name == marked or name.startswith(marked + '.'):",
        "patch": "@@ -168,7 +168,7 @@ def _should_rewrite(self, name, fn_pypath, state):\n                 return True\n \n         for marked in self._must_rewrite:\n-            if name.startswith(marked):\n+            if name == marked or name.startswith(marked + '.'):\n                 state.trace(\"matched marked file %r (from %r)\" % (name, marked))\n                 return True\n "
    },
    {
        "commit_id": "f05333ab75dbd0b4a519616bbcdf762c9f3d07e6",
        "commit_message": "Fix rewrite to not write past the edge of the screen",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f05333ab75dbd0b4a519616bbcdf762c9f3d07e6",
        "buggy_code": "fill_count = self.writer.fullwidth - len(line)",
        "fixed_code": "fill_count = self.writer.fullwidth - len(line) - 1",
        "patch": "@@ -214,7 +214,7 @@ def rewrite(self, line, **markup):\n         \"\"\"\n         erase = markup.pop('erase', False)\n         if erase:\n-            fill_count = self.writer.fullwidth - len(line)\n+            fill_count = self.writer.fullwidth - len(line) - 1\n             fill = ' ' * fill_count\n         else:\n             fill = ''"
    },
    {
        "commit_id": "f05333ab75dbd0b4a519616bbcdf762c9f3d07e6",
        "commit_message": "Fix rewrite to not write past the edge of the screen",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f05333ab75dbd0b4a519616bbcdf762c9f3d07e6",
        "buggy_code": "assert f.getvalue() == 'hello' + '\\r' + 'hey' + (7 * ' ')",
        "fixed_code": "assert f.getvalue() == 'hello' + '\\r' + 'hey' + (6 * ' ')",
        "patch": "@@ -222,7 +222,7 @@ def test_rewrite(self, testdir, monkeypatch):\n         tr.writer.fullwidth = 10\n         tr.write('hello')\n         tr.rewrite('hey', erase=True)\n-        assert f.getvalue() == 'hello' + '\\r' + 'hey' + (7 * ' ')\n+        assert f.getvalue() == 'hello' + '\\r' + 'hey' + (6 * ' ')\n \n \n class TestCollectonly(object):"
    },
    {
        "commit_id": "c8d52b633b6a7423633042c0eec3c67483ac13a3",
        "commit_message": "Fix assertion rewrite to match module names correctly\n\nFix #2939",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8d52b633b6a7423633042c0eec3c67483ac13a3",
        "buggy_code": "if name.startswith(marked):",
        "fixed_code": "if name == marked or name.startswith(marked + '.'):",
        "patch": "@@ -168,7 +168,7 @@ def _should_rewrite(self, name, fn_pypath, state):\n                 return True\n \n         for marked in self._must_rewrite:\n-            if name.startswith(marked):\n+            if name == marked or name.startswith(marked + '.'):\n                 state.trace(\"matched marked file %r (from %r)\" % (name, marked))\n                 return True\n "
    },
    {
        "commit_id": "dab889304e78a734b41baa8b88146a8fef83a146",
        "commit_message": "Implement progress percentage reporting while running tests\n\nFix #2657",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dab889304e78a734b41baa8b88146a8fef83a146",
        "buggy_code": "'*test_arg (fixtures used: arg)F',",
        "fixed_code": "'*test_arg (fixtures used: arg)F*',",
        "patch": "@@ -238,6 +238,6 @@ def test_arg(arg):\n \n     result.stdout.fnmatch_lines([\n         '*SETUP    F arg*',\n-        '*test_arg (fixtures used: arg)F',\n+        '*test_arg (fixtures used: arg)F*',\n         '*TEARDOWN F arg*',\n     ])"
    },
    {
        "commit_id": "dab889304e78a734b41baa8b88146a8fef83a146",
        "commit_message": "Implement progress percentage reporting while running tests\n\nFix #2657",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dab889304e78a734b41baa8b88146a8fef83a146",
        "buggy_code": "\"*test_capturing_outerr.py .F\",",
        "fixed_code": "\"*test_capturing_outerr.py .F*\",",
        "patch": "@@ -266,7 +266,7 @@ def test_capturing_error():\n         \"\"\")\n         result = testdir.runpytest(p1)\n         result.stdout.fnmatch_lines([\n-            \"*test_capturing_outerr.py .F\",\n+            \"*test_capturing_outerr.py .F*\",\n             \"====* FAILURES *====\",\n             \"____*____\",\n             \"*test_capturing_outerr.py:8: ValueError\","
    },
    {
        "commit_id": "dd6c5344681809a7509e45acdf3e28d03b728144",
        "commit_message": "Remove py<1.5 restriction\n\nFix #2926",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd6c5344681809a7509e45acdf3e28d03b728144",
        "buggy_code": "install_requires = ['py>=1.4.33,<1.5', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "fixed_code": "install_requires = ['py>=1.4.33', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "patch": "@@ -43,7 +43,7 @@ def has_environment_marker_support():\n \n \n def main():\n-    install_requires = ['py>=1.4.33,<1.5', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n+    install_requires = ['py>=1.4.33', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n     extras_require = {}\n     if has_environment_marker_support():\n         extras_require[':python_version==\"2.6\"'] = ['argparse', 'ordereddict']"
    },
    {
        "commit_id": "685387a43ec504f3b6447dcf389a65fad342d548",
        "commit_message": "Merge pull request #2127 from malinoff/fix-2124\n\nUse session.config.hook instead of ihook. Fixes #2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/685387a43ec504f3b6447dcf389a65fad342d548",
        "buggy_code": "def pytest_fixture_post_finalizer(fixturedef):",
        "fixed_code": "def pytest_fixture_post_finalizer(fixturedef, request):",
        "patch": "@@ -296,7 +296,7 @@ def pytest_fixture_setup(fixturedef, request):\n     Stops at first non-None result, see :ref:`firstresult` \"\"\"\n \n \n-def pytest_fixture_post_finalizer(fixturedef):\n+def pytest_fixture_post_finalizer(fixturedef, request):\n     \"\"\" called after fixture teardown, but before the cache is cleared so\n     the fixture result cache ``fixturedef.cached_result`` can\n     still be accessed.\"\"\""
    },
    {
        "commit_id": "bdad345f991cae76896476a1b574269b23085bc3",
        "commit_message": "Fix passing request to finish() in FixtureDef",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bdad345f991cae76896476a1b574269b23085bc3",
        "buggy_code": "self.finish()",
        "fixed_code": "self.finish(request)",
        "patch": "@@ -785,7 +785,7 @@ def execute(self, request):\n                     return result\n             # we have a previous but differently parametrized fixture instance\n             # so we need to tear it down before creating a new one\n-            self.finish()\n+            self.finish(request)\n             assert not hasattr(self, \"cached_result\")\n \n         hook = self._fixturemanager.session.gethookproxy(request.node.fspath)"
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "tw = reporter._tw",
        "fixed_code": "tw = reporter.writer",
        "patch": "@@ -107,7 +107,7 @@ def pytest_cmdline_main(config):\n \n def showhelp(config):\n     reporter = config.pluginmanager.get_plugin('terminalreporter')\n-    tw = reporter._tw\n+    tw = reporter.writer\n     tw.write(config._parser.optparser.format_help())\n     tw.line()\n     tw.line()"
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "from _pytest._pluggy import HookspecMarker",
        "fixed_code": "from pluggy import HookspecMarker",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\" hook specifications for pytest plugins, invoked from main.py and builtin plugins.  \"\"\"\n \n-from _pytest._pluggy import HookspecMarker\n+from pluggy import HookspecMarker\n \n hookspec = HookspecMarker(\"pytest\")\n "
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "assert py.builtin.callable(finalizer)",
        "fixed_code": "assert callable(finalizer)",
        "patch": "@@ -431,7 +431,7 @@ def addfinalizer(self, finalizer, colitem):\n         is called at the end of teardown_all().\n         \"\"\"\n         assert colitem and not isinstance(colitem, tuple)\n-        assert py.builtin.callable(finalizer)\n+        assert callable(finalizer)\n         # assert colitem in self.stack  # some unit tests don't setup stack :/\n         self._finalizers.setdefault(colitem, []).append(finalizer)\n "
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "pythonlist = ['python2.6', 'python2.7', 'python3.4', 'python3.5']",
        "fixed_code": "pythonlist = ['python2.7', 'python3.4', 'python3.5']",
        "patch": "@@ -6,7 +6,7 @@\n import pytest\n import _pytest._code\n \n-pythonlist = ['python2.6', 'python2.7', 'python3.4', 'python3.5']\n+pythonlist = ['python2.7', 'python3.4', 'python3.5']\n @pytest.fixture(params=pythonlist)\n def python1(request, tmpdir):\n     picklefile = tmpdir.join(\"data.pickle\")"
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "Use recwarn here to silence this warning in Python 2.6 and 2.7:",
        "fixed_code": "Use recwarn here to silence this warning in Python 2.7:",
        "patch": "@@ -344,7 +344,7 @@ def test_namespace_import_doesnt_confuse_import_hook(self, testdir):\n         Importing a module that didn't exist, even if the ImportError was\n         gracefully handled, would make our test crash.\n \n-        Use recwarn here to silence this warning in Python 2.6 and 2.7:\n+        Use recwarn here to silence this warning in Python 2.7:\n             ImportWarning: Not importing directory '...\\not_a_package': missing __init__.py\n         \"\"\"\n         testdir.mkdir('not_a_package')"
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "assert 'skip' in metafunc._calls[0].keywords",
        "fixed_code": "assert 'skip' == metafunc._calls[0].marks[0].name",
        "patch": "@@ -158,7 +158,7 @@ def func(y):\n             pass\n         metafunc = self.Metafunc(func)\n         metafunc.parametrize(\"y\", [])\n-        assert 'skip' in metafunc._calls[0].keywords\n+        assert 'skip' == metafunc._calls[0].marks[0].name\n \n     def test_parametrize_with_userobjects(self):\n         def func(x, y):"
    },
    {
        "commit_id": "f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f074fd9ac6d5e86a8ec240c395b1d031c45988e2",
        "buggy_code": "@pytest.mark.skipif(sys.version_info < (3, 3),",
        "fixed_code": "@pytest.mark.skipif(sys.version_info < (3, 4),",
        "patch": "@@ -662,7 +662,7 @@ def test_translate_newlines(self, testdir):\n         testdir.tmpdir.join(\"test_newlines.py\").write(b, \"wb\")\n         assert testdir.runpytest().ret == 0\n \n-    @pytest.mark.skipif(sys.version_info < (3, 3),\n+    @pytest.mark.skipif(sys.version_info < (3, 4),\n                         reason='packages without __init__.py not supported on python 2')\n     def test_package_without__init__py(self, testdir):\n         pkg = testdir.mkdir('a_package_without_init_py')"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "same arguments as ``before`` but also a :py:class:`_CallOutcome`` object",
        "fixed_code": "same arguments as ``before`` but also a :py:class:`_CallOutcome <_pytest.vendored_packages.pluggy._CallOutcome>` object",
        "patch": "@@ -540,7 +540,7 @@ def add_hookcall_monitoring(self, before, after):\n         of HookImpl instances and the keyword arguments for the hook call.\n \n         ``after(outcome, hook_name, hook_impls, kwargs)`` receives the\n-        same arguments as ``before`` but also a :py:class:`_CallOutcome`` object\n+        same arguments as ``before`` but also a :py:class:`_CallOutcome <_pytest.vendored_packages.pluggy._CallOutcome>` object\n         which represents the result of the overall hook call.\n         \"\"\"\n         return _TracedHookExecution(self, before, after).undo"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "'simple powerful testing with Pytho',",
        "fixed_code": "'simple powerful testing with Python',",
        "patch": "@@ -303,7 +303,7 @@\n    ('Holger Krekel@*Benjamin Peterson@*Ronny Pfannschmidt@*'\n     'Floris Bruynooghe@*others'),\n    'pytest',\n-   'simple powerful testing with Pytho',\n+   'simple powerful testing with Python',\n    'Programming',\n    1),\n ]"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "class TestStateFullThing:",
        "fixed_code": "class TestStateFullThing(object):",
        "patch": "@@ -1,7 +1,7 @@\n def setup_module(module):\n     module.TestStateFullThing.classcount = 0\n \n-class TestStateFullThing:\n+class TestStateFullThing(object):\n     def setup_class(cls):\n         cls.classcount += 1\n "
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "class CostlySetup:",
        "fixed_code": "class CostlySetup(object):",
        "patch": "@@ -7,7 +7,7 @@ def setup(request):\n     yield setup\n     setup.finalize()\n \n-class CostlySetup:\n+class CostlySetup(object):\n     def __init__(self):\n         import time\n         print (\"performing costly setup\")"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "class Python:",
        "fixed_code": "class Python(object):",
        "patch": "@@ -16,7 +16,7 @@ def python1(request, tmpdir):\n def python2(request, python1):\n     return Python(request.param, python1.picklefile)\n \n-class Python:\n+class Python(object):\n     def __init__(self, version, picklefile):\n         self.pythonpath = py.path.local.sysfind(version)\n         if not self.pythonpath:"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "class TestClass:",
        "fixed_code": "class TestClass(object):",
        "patch": "@@ -4,7 +4,7 @@\n def test_function():\n     pass\n \n-class TestClass:\n+class TestClass(object):\n     def test_method(self):\n         pass\n     def test_anothermethod(self):"
    },
    {
        "commit_id": "258031afe586e789d121b2a02dba37ea6c4a26e1",
        "commit_message": "Merge remote-tracking branch 'upstream/master' into malinoff/fix-2124",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/258031afe586e789d121b2a02dba37ea6c4a26e1",
        "buggy_code": "class Writer:",
        "fixed_code": "class Writer(object):",
        "patch": "@@ -1,7 +1,7 @@\n import textwrap\n import inspect\n \n-class Writer:\n+class Writer(object):\n     def __init__(self, clsname):\n         self.clsname = clsname\n "
    },
    {
        "commit_id": "f0f2d2b861bf8df93afce4e9844a8f97fe402cef",
        "commit_message": "Merge branch 'master' into fix-missing-nodeid-with-pyargs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f0f2d2b861bf8df93afce4e9844a8f97fe402cef",
        "buggy_code": "lines = lines[example.lineno - 9:example.lineno + 1]",
        "fixed_code": "lines = lines[max(example.lineno - 9, 0):example.lineno + 1]",
        "patch": "@@ -120,7 +120,7 @@ def repr_failure(self, excinfo):\n                 lines = [\"%03d %s\" % (i + test.lineno + 1, x)\n                          for (i, x) in enumerate(lines)]\n                 # trim docstring error lines to 10\n-                lines = lines[example.lineno - 9:example.lineno + 1]\n+                lines = lines[max(example.lineno - 9, 0):example.lineno + 1]\n             else:\n                 lines = ['EXAMPLE LOCATION UNKNOWN, not showing all tests of that example']\n                 indent = '>>>'"
    },
    {
        "commit_id": "f0f2d2b861bf8df93afce4e9844a8f97fe402cef",
        "commit_message": "Merge branch 'master' into fix-missing-nodeid-with-pyargs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f0f2d2b861bf8df93afce4e9844a8f97fe402cef",
        "buggy_code": "for x in '/ /d /data qqq'.split():",
        "fixed_code": "for x in ['/', '/d', '/data', 'qqq', '']:",
        "patch": "@@ -82,7 +82,7 @@ def test_compare_with_compgen(self):\n         from _pytest._argcomplete import FastFilesCompleter\n         ffc = FastFilesCompleter()\n         fc = FilesCompleter()\n-        for x in '/ /d /data qqq'.split():\n+        for x in ['/', '/d', '/data', 'qqq', '']:\n             assert equal_with_bash(x, ffc, fc, out=py.std.sys.stdout)\n \n     @pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")"
    },
    {
        "commit_id": "66fbebfc264722137a223d1f918061c609ddd8a1",
        "commit_message": "Merge pull request #2894 from nicoddemus/fix-linting-errors\n\nFix linting errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fbebfc264722137a223d1f918061c609ddd8a1",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -210,7 +210,7 @@ def load_module(self, name):\n             mod.__cached__ = pyc\n             mod.__loader__ = self\n             py.builtin.exec_(co, mod.__dict__)\n-        except:\n+        except:  # noqa\n             if name in sys.modules:\n                 del sys.modules[name]\n             raise"
    },
    {
        "commit_id": "66fbebfc264722137a223d1f918061c609ddd8a1",
        "commit_message": "Merge pull request #2894 from nicoddemus/fix-linting-errors\n\nFix linting errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fbebfc264722137a223d1f918061c609ddd8a1",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -84,7 +84,7 @@ def __eq__(self, actual):\n \n         try:\n             actual = np.asarray(actual)\n-        except:\n+        except:  # noqa\n             raise TypeError(\"cannot compare '{0}' to numpy.ndarray\".format(actual))\n \n         if actual.shape != self.expected.shape:"
    },
    {
        "commit_id": "66fbebfc264722137a223d1f918061c609ddd8a1",
        "commit_message": "Merge pull request #2894 from nicoddemus/fix-linting-errors\n\nFix linting errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/66fbebfc264722137a223d1f918061c609ddd8a1",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -197,7 +197,7 @@ def __init__(self, func, when):\n         except KeyboardInterrupt:\n             self.stop = time()\n             raise\n-        except:\n+        except:  # noqa\n             self.excinfo = ExceptionInfo()\n         self.stop = time()\n "
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -254,7 +254,7 @@ def findsource(obj):\n         sourcelines, lineno = py.std.inspect.findsource(obj)\n     except py.builtin._sysex:\n         raise\n-    except:\n+    except:  # noqa\n         return None, -1\n     source = Source()\n     source.lines = [line.rstrip() for line in sourcelines]"
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -210,7 +210,7 @@ def load_module(self, name):\n             mod.__cached__ = pyc\n             mod.__loader__ = self\n             py.builtin.exec_(co, mod.__dict__)\n-        except:\n+        except:  # noqa\n             if name in sys.modules:\n                 del sys.modules[name]\n             raise"
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -749,7 +749,7 @@ def finish(self):\n                 try:\n                     func = self._finalizer.pop()\n                     func()\n-                except:\n+                except:  # noqa\n                     exceptions.append(sys.exc_info())\n             if exceptions:\n                 e = exceptions[0]"
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -84,7 +84,7 @@ def __eq__(self, actual):\n \n         try:\n             actual = np.asarray(actual)\n-        except:\n+        except:  # noqa\n             raise TypeError(\"cannot compare '{0}' to numpy.ndarray\".format(actual))\n \n         if actual.shape != self.expected.shape:"
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -197,7 +197,7 @@ def __init__(self, func, when):\n         except KeyboardInterrupt:\n             self.stop = time()\n             raise\n-        except:\n+        except:  # noqa\n             self.excinfo = ExceptionInfo()\n         self.stop = time()\n "
    },
    {
        "commit_id": "b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "commit_message": "Fix linting E722: do not use bare except",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b11640c1eb27a170e6390b4b39be8b06e23f3a5a",
        "buggy_code": "except:",
        "fixed_code": "except:  # noqa",
        "patch": "@@ -115,7 +115,7 @@ def _addexcinfo(self, rawexcinfo):\n                     fail(\"\".join(values), pytrace=False)\n                 except (fail.Exception, KeyboardInterrupt):\n                     raise\n-                except:\n+                except:  # noqa\n                     fail(\"ERROR: Unknown Incompatible Exception \"\n                          \"representation:\\n%r\" % (rawexcinfo,), pytrace=False)\n             except KeyboardInterrupt:"
    },
    {
        "commit_id": "26019b33f8b63bf57349e9e206cd3d48ab2c2130",
        "commit_message": "Merge pull request #2882 from thisch/doctest_lineno\n\nFix context output handling for doctests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/26019b33f8b63bf57349e9e206cd3d48ab2c2130",
        "buggy_code": "lines = lines[example.lineno - 9:example.lineno + 1]",
        "fixed_code": "lines = lines[max(example.lineno - 9, 0):example.lineno + 1]",
        "patch": "@@ -120,7 +120,7 @@ def repr_failure(self, excinfo):\n                 lines = [\"%03d %s\" % (i + test.lineno + 1, x)\n                          for (i, x) in enumerate(lines)]\n                 # trim docstring error lines to 10\n-                lines = lines[example.lineno - 9:example.lineno + 1]\n+                lines = lines[max(example.lineno - 9, 0):example.lineno + 1]\n             else:\n                 lines = ['EXAMPLE LOCATION UNKNOWN, not showing all tests of that example']\n                 indent = '>>>'"
    },
    {
        "commit_id": "2f993af54a1401460cc0f70915f28251f007344d",
        "commit_message": "Fix context output handling for doctests\n\nShow full context of doctest source in the pytest output, if the lineno of\nfailed example in the docstring is < 9.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2f993af54a1401460cc0f70915f28251f007344d",
        "buggy_code": "lines = lines[example.lineno - 9:example.lineno + 1]",
        "fixed_code": "lines = lines[max(example.lineno - 9, 0):example.lineno + 1]",
        "patch": "@@ -120,7 +120,7 @@ def repr_failure(self, excinfo):\n                 lines = [\"%03d %s\" % (i + test.lineno + 1, x)\n                          for (i, x) in enumerate(lines)]\n                 # trim docstring error lines to 10\n-                lines = lines[example.lineno - 9:example.lineno + 1]\n+                lines = lines[max(example.lineno - 9, 0):example.lineno + 1]\n             else:\n                 lines = ['EXAMPLE LOCATION UNKNOWN, not showing all tests of that example']\n                 indent = '>>>'"
    },
    {
        "commit_id": "6b86b0dbfea3895a1d16d7db970d3ea91de92ecc",
        "commit_message": "Fix additional linting issues",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b86b0dbfea3895a1d16d7db970d3ea91de92ecc",
        "buggy_code": "sublogger = logging.getLogger(__name__+'.baz')",
        "fixed_code": "sublogger = logging.getLogger(__name__ + '.baz')",
        "patch": "@@ -3,7 +3,7 @@\n \n \n logger = logging.getLogger(__name__)\n-sublogger = logging.getLogger(__name__+'.baz')\n+sublogger = logging.getLogger(__name__ + '.baz')\n \n \n def test_fixture_help(testdir):"
    },
    {
        "commit_id": "3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "commit_message": "Deprecate TerminalReporter._tw\n\nFix #2803",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "buggy_code": "return self.pluginmanager.get_plugin(\"terminalreporter\")._tw",
        "fixed_code": "return self.pluginmanager.get_plugin(\"terminalreporter\").writer",
        "patch": "@@ -931,7 +931,7 @@ def warn(self, code, message, fslocation=None, nodeid=None):\n             fslocation=fslocation, nodeid=nodeid))\n \n     def get_terminal_writer(self):\n-        return self.pluginmanager.get_plugin(\"terminalreporter\")._tw\n+        return self.pluginmanager.get_plugin(\"terminalreporter\").writer\n \n     def pytest_cmdline_parse(self, pluginmanager, args):\n         # REF1 assert self == pluginmanager.config, (self, pluginmanager.config)"
    },
    {
        "commit_id": "3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "commit_message": "Deprecate TerminalReporter._tw\n\nFix #2803",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "buggy_code": "tw = node.config.pluginmanager.getplugin(\"terminalreporter\")._tw",
        "fixed_code": "tw = node.config.pluginmanager.getplugin(\"terminalreporter\").writer",
        "patch": "@@ -83,7 +83,7 @@ def _enter_pdb(node, excinfo, rep):\n     # XXX we re-use the TerminalReporter's terminalwriter\n     # because this seems to avoid some encoding related troubles\n     # for not completely clear reasons.\n-    tw = node.config.pluginmanager.getplugin(\"terminalreporter\")._tw\n+    tw = node.config.pluginmanager.getplugin(\"terminalreporter\").writer\n     tw.line()\n     tw.sep(\">\", \"traceback\")\n     rep.toterminal(tw)"
    },
    {
        "commit_id": "3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "commit_message": "Deprecate TerminalReporter._tw\n\nFix #2803",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3b30c93f73dbda3f96ee5d9ec1c27626bd66a0be",
        "buggy_code": "tw = reporter._tw",
        "fixed_code": "tw = reporter.writer",
        "patch": "@@ -107,7 +107,7 @@ def pytest_cmdline_main(config):\n \n def showhelp(config):\n     reporter = config.pluginmanager.get_plugin('terminalreporter')\n-    tw = reporter._tw\n+    tw = reporter.writer\n     tw.write(config._parser.optparser.format_help())\n     tw.line()\n     tw.line()"
    },
    {
        "commit_id": "afe7966683903316866bee75fcb3c94414449011",
        "commit_message": "Fix call to outcome.get_result now that outcome.result is deprecated",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/afe7966683903316866bee75fcb3c94414449011",
        "buggy_code": "result = outcome.result",
        "fixed_code": "result = outcome.get_result()",
        "patch": "@@ -841,7 +841,7 @@ def test_customized_pymakeitem(self, testdir):\n             def pytest_pycollect_makeitem():\n                 outcome = yield\n                 if outcome.excinfo is None:\n-                    result = outcome.result\n+                    result = outcome.get_result()\n                     if result:\n                         for func in result:\n                             func._some123 = \"world\""
    },
    {
        "commit_id": "ac5c5cc1efb6a0ae089f1b9f06b3782128534eac",
        "commit_message": "Merge pull request #2750 from evanunderscore/fix-filescompleter\n\nFix crash in FastFilesCompleter with no prefix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ac5c5cc1efb6a0ae089f1b9f06b3782128534eac",
        "buggy_code": "for x in '/ /d /data qqq'.split():",
        "fixed_code": "for x in ['/', '/d', '/data', 'qqq', '']:",
        "patch": "@@ -82,7 +82,7 @@ def test_compare_with_compgen(self):\n         from _pytest._argcomplete import FastFilesCompleter\n         ffc = FastFilesCompleter()\n         fc = FilesCompleter()\n-        for x in '/ /d /data qqq'.split():\n+        for x in ['/', '/d', '/data', 'qqq', '']:\n             assert equal_with_bash(x, ffc, fc, out=py.std.sys.stdout)\n \n     @pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")"
    },
    {
        "commit_id": "25ed4edbc7e8aff98a0401950229ab6d90e1008b",
        "commit_message": "Merge pull request #2764 from xuanluong/issue-2758-fix-mark-decorator-equality\n\n[bugfix] Checking MarkDecorator equality returns False for non-MarkDecorator object",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/25ed4edbc7e8aff98a0401950229ab6d90e1008b",
        "buggy_code": "return self.mark == other.mark",
        "fixed_code": "return self.mark == other.mark if isinstance(other, MarkDecorator) else False",
        "patch": "@@ -330,7 +330,7 @@ def markname(self):\n         return self.name  # for backward-compat (2.4.1 had this attr)\n \n     def __eq__(self, other):\n-        return self.mark == other.mark\n+        return self.mark == other.mark if isinstance(other, MarkDecorator) else False\n \n     def __repr__(self):\n         return \"<MarkDecorator %r>\" % (self.mark,)"
    },
    {
        "commit_id": "6cf515b1648061e87bf40ec5a5cbb7f1aa543465",
        "commit_message": "Fix crash in FastFilesCompleter with no prefix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6cf515b1648061e87bf40ec5a5cbb7f1aa543465",
        "buggy_code": "for x in '/ /d /data qqq'.split():",
        "fixed_code": "for x in ['/', '/d', '/data', 'qqq', '']:",
        "patch": "@@ -82,7 +82,7 @@ def test_compare_with_compgen(self):\n         from _pytest._argcomplete import FastFilesCompleter\n         ffc = FastFilesCompleter()\n         fc = FilesCompleter()\n-        for x in '/ /d /data qqq'.split():\n+        for x in ['/', '/d', '/data', 'qqq', '']:\n             assert equal_with_bash(x, ffc, fc, out=py.std.sys.stdout)\n \n     @pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")"
    },
    {
        "commit_id": "7d59b2e350cbff1454355bc5225fc0f93bbba3a7",
        "commit_message": "Fix call to outcome.force_result\n\nEven though the test is not running at the moment (xfail), at least\nwe avoid future confusion",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d59b2e350cbff1454355bc5225fc0f93bbba3a7",
        "buggy_code": "outcome.set_result(rep)",
        "fixed_code": "outcome.force_result(rep)",
        "patch": "@@ -281,7 +281,7 @@ def pytest_make_collect_report():\n                 outcome = yield\n                 rep = outcome.get_result()\n                 rep.headerlines += [\"header1\"]\n-                outcome.set_result(rep)\n+                outcome.force_result(rep)\n         \"\"\")\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines(["
    },
    {
        "commit_id": "5e00549eccaeda4de55ecf96aa833cc3a28dfa5e",
        "commit_message": "Merge pull request #2735 from fgmacedo/fgm-fix-reprfuncargs-toterminal\n\n2731.bug Fix ReprFuncArgs with mixed unicode and utf-8 args.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5e00549eccaeda4de55ecf96aa833cc3a28dfa5e",
        "buggy_code": "ns = \"%s = %s\" % (name, value)",
        "fixed_code": "ns = \"%s = %s\" % (safe_str(name), safe_str(value))",
        "patch": "@@ -863,7 +863,7 @@ def toterminal(self, tw):\n         if self.args:\n             linesofar = \"\"\n             for name, value in self.args:\n-                ns = \"%s = %s\" % (name, value)\n+                ns = \"%s = %s\" % (safe_str(name), safe_str(value))\n                 if len(ns) + len(linesofar) + 2 > tw.fullwidth:\n                     if linesofar:\n                         tw.line(linesofar)"
    },
    {
        "commit_id": "fe415e3ff89f1514e3ed21b2cd9cc7d7dc9caceb",
        "commit_message": "Use latest patch release",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fe415e3ff89f1514e3ed21b2cd9cc7d7dc9caceb",
        "buggy_code": "install_requires = ['py>=1.4.33', 'six>=1.10.0','setuptools', 'pluggy==0.4.0']",
        "fixed_code": "install_requires = ['py>=1.4.33', 'six>=1.10.0','setuptools', 'pluggy>=0.4.0,<0.5']",
        "patch": "@@ -43,7 +43,7 @@ def has_environment_marker_support():\n \n \n def main():\n-    install_requires = ['py>=1.4.33', 'six>=1.10.0','setuptools', 'pluggy==0.4.0']\n+    install_requires = ['py>=1.4.33', 'six>=1.10.0','setuptools', 'pluggy>=0.4.0,<0.5']\n     extras_require = {}\n     if has_environment_marker_support():\n         extras_require[':python_version==\"2.6\"'] = ['argparse', 'ordereddict']"
    },
    {
        "commit_id": "eb462582afa3ca83b2c278bc52fc4094e65f6553",
        "commit_message": "fix #2675 - store marks correctly in callspecs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eb462582afa3ca83b2c278bc52fc4094e65f6553",
        "buggy_code": "assert 'skip' in metafunc._calls[0].keywords",
        "fixed_code": "assert 'skip' == metafunc._calls[0].marks[0].name",
        "patch": "@@ -158,7 +158,7 @@ def func(y):\n             pass\n         metafunc = self.Metafunc(func)\n         metafunc.parametrize(\"y\", [])\n-        assert 'skip' in metafunc._calls[0].keywords\n+        assert 'skip' == metafunc._calls[0].marks[0].name\n \n     def test_parametrize_with_userobjects(self):\n         def func(x, y):"
    },
    {
        "commit_id": "e1aed8cb17871e634a30c21920f15a838b56bf6b",
        "commit_message": "Merge pull request #2490 from RonnyPfannschmidt/fix-580\n\nTest Outcomes as BaseException - fix #580",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e1aed8cb17871e634a30c21920f15a838b56bf6b",
        "buggy_code": "from _pytest.runner import fail",
        "fixed_code": "from _pytest.outcomes import fail",
        "patch": "@@ -23,7 +23,7 @@\n     get_real_func, getfslineno, safe_getattr,\n     safe_str, getlocation, enum,\n )\n-from _pytest.runner import fail\n+from _pytest.outcomes import fail\n from _pytest.mark import transfer_markers\n \n cutdir1 = py.path.local(pluggy.__file__.rstrip(\"oc\"))"
    },
    {
        "commit_id": "e1aed8cb17871e634a30c21920f15a838b56bf6b",
        "commit_message": "Merge pull request #2490 from RonnyPfannschmidt/fix-580\n\nTest Outcomes as BaseException - fix #580",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e1aed8cb17871e634a30c21920f15a838b56bf6b",
        "buggy_code": "from _pytest.runner import fail",
        "fixed_code": "from _pytest.outcomes import fail",
        "patch": "@@ -4,7 +4,7 @@\n import py\n \n from _pytest.compat import isclass, izip\n-from _pytest.runner import fail\n+from _pytest.outcomes import fail\n import _pytest._code\n \n # builtin pytest.approx helper"
    },
    {
        "commit_id": "595ecd23fdf5826ae415b86047384a67f19b5ab9",
        "commit_message": "Merge pull request #2548 from blueyed/skip-fix-lineno\n\nFix lineno offset in show_skipped",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/595ecd23fdf5826ae415b86047384a67f19b5ab9",
        "buggy_code": "(num, fspath, lineno, reason))",
        "fixed_code": "(num, fspath, lineno + 1, reason))",
        "patch": "@@ -382,4 +382,4 @@ def show_skipped(terminalreporter, lines):\n                     reason = reason[9:]\n                 lines.append(\n                     \"SKIP [%d] %s:%d: %s\" %\n-                    (num, fspath, lineno, reason))\n+                    (num, fspath, lineno + 1, reason))"
    },
    {
        "commit_id": "595ecd23fdf5826ae415b86047384a67f19b5ab9",
        "commit_message": "Merge pull request #2548 from blueyed/skip-fix-lineno\n\nFix lineno offset in show_skipped",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/595ecd23fdf5826ae415b86047384a67f19b5ab9",
        "buggy_code": "\"*SKIP*2*conftest.py:3: test\",",
        "fixed_code": "\"*SKIP*2*conftest.py:4: test\",",
        "patch": "@@ -708,7 +708,7 @@ def doskip():\n     )\n     result = testdir.runpytest('-rs')\n     result.stdout.fnmatch_lines([\n-        \"*SKIP*2*conftest.py:3: test\",\n+        \"*SKIP*2*conftest.py:4: test\",\n     ])\n     assert result.ret == 0\n "
    },
    {
        "commit_id": "869eed9898df0d06c7d9be916d4224141c7dd3fe",
        "commit_message": "Fix lineno offset in show_skipped\n\nThe line number is 0-based here, so add 1.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/869eed9898df0d06c7d9be916d4224141c7dd3fe",
        "buggy_code": "(num, fspath, lineno, reason))",
        "fixed_code": "(num, fspath, lineno + 1, reason))",
        "patch": "@@ -382,4 +382,4 @@ def show_skipped(terminalreporter, lines):\n                     reason = reason[9:]\n                 lines.append(\n                     \"SKIP [%d] %s:%d: %s\" %\n-                    (num, fspath, lineno, reason))\n+                    (num, fspath, lineno + 1, reason))"
    },
    {
        "commit_id": "869eed9898df0d06c7d9be916d4224141c7dd3fe",
        "commit_message": "Fix lineno offset in show_skipped\n\nThe line number is 0-based here, so add 1.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/869eed9898df0d06c7d9be916d4224141c7dd3fe",
        "buggy_code": "\"*SKIP*2*conftest.py:3: test\",",
        "fixed_code": "\"*SKIP*2*conftest.py:4: test\",",
        "patch": "@@ -708,7 +708,7 @@ def doskip():\n     )\n     result = testdir.runpytest('-rs')\n     result.stdout.fnmatch_lines([\n-        \"*SKIP*2*conftest.py:3: test\",\n+        \"*SKIP*2*conftest.py:4: test\",\n     ])\n     assert result.ret == 0\n "
    },
    {
        "commit_id": "af2c15332422421ac280f90ac9a7ab470c44ed7b",
        "commit_message": "Report lineno from doctest\n\nThis is to fix pytest-sugar#122 issue.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af2c15332422421ac280f90ac9a7ab470c44ed7b",
        "buggy_code": "return self.fspath, None, \"[doctest] %s\" % self.name",
        "fixed_code": "return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name",
        "patch": "@@ -140,7 +140,7 @@ def repr_failure(self, excinfo):\n             return super(DoctestItem, self).repr_failure(excinfo)\n \n     def reportinfo(self):\n-        return self.fspath, None, \"[doctest] %s\" % self.name\n+        return self.fspath, self.dtest.lineno, \"[doctest] %s\" % self.name\n \n \n def _get_flag_lookup():"
    },
    {
        "commit_id": "0726d9a09f26dece8f0638bb644add34c3e9359f",
        "commit_message": "Turn warnings into errors in pytest's own test suite\n\nFix #2588",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0726d9a09f26dece8f0638bb644add34c3e9359f",
        "buggy_code": "request.getfuncargvalue('dynamically_requested_fixture')",
        "fixed_code": "request.getfixturevalue('dynamically_requested_fixture')",
        "patch": "@@ -187,7 +187,7 @@ def dynamically_requested_fixture():\n             pass\n         @pytest.fixture()\n         def dependent_fixture(request):\n-            request.getfuncargvalue('dynamically_requested_fixture')\n+            request.getfixturevalue('dynamically_requested_fixture')\n         def test_dyn(dependent_fixture):\n             pass\n     ''')"
    },
    {
        "commit_id": "da12c5234737b7afb2865dc0a2bd99ee138678d3",
        "commit_message": "Fix: do not load hypothesis during test_logging_initialized_in_test\n\nA recent release seem to have added a \"logging\" import to the top-level,\nwhich breaks test_logging_initialized_in_test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da12c5234737b7afb2865dc0a2bd99ee138678d3",
        "buggy_code": "\"-p\", \"no:capturelog\")",
        "fixed_code": "\"-p\", \"no:capturelog\", \"-p\", \"no:hypothesis\", \"-p\", \"no:hypothesispytest\")",
        "patch": "@@ -355,7 +355,7 @@ def test_something():\n         \"\"\")\n         result = testdir.runpytest_subprocess(\n             p, \"--traceconfig\",\n-            \"-p\", \"no:capturelog\")\n+            \"-p\", \"no:capturelog\", \"-p\", \"no:hypothesis\", \"-p\", \"no:hypothesispytest\")\n         assert result.ret != 0\n         result.stdout.fnmatch_lines([\n             \"*hello432*\","
    },
    {
        "commit_id": "9e3e58af60691f7a8ec4245a7e1e319eb86d4bcd",
        "commit_message": "Merge pull request #2594 from nicoddemus/fix-flake8-errors\n\nMerge master into features and fix flake8 errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9e3e58af60691f7a8ec4245a7e1e319eb86d4bcd",
        "buggy_code": "\"converting to a safe representation:\\n  %s\"  % msg,",
        "fixed_code": "\"converting to a safe representation:\\n  %s\" % msg,",
        "patch": "@@ -78,7 +78,7 @@ def catch_warnings_for_item(item):\n             if unicode_warning:\n                 warnings.warn(\n                     \"Warning is using unicode non convertible to ascii, \"\n-                    \"converting to a safe representation:\\n  %s\"  % msg,\n+                    \"converting to a safe representation:\\n  %s\" % msg,\n                     UnicodeWarning)\n \n "
    },
    {
        "commit_id": "c92760dca8637251eb9e7b9ea4819b32bc0b8042",
        "commit_message": "Merge branch 'fix-flake8-issues'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c92760dca8637251eb9e7b9ea4819b32bc0b8042",
        "buggy_code": "\"converting to a safe representation:\\n  %s\"  % msg,",
        "fixed_code": "\"converting to a safe representation:\\n  %s\" % msg,",
        "patch": "@@ -78,7 +78,7 @@ def catch_warnings_for_item(item):\n             if unicode_warning:\n                 warnings.warn(\n                     \"Warning is using unicode non convertible to ascii, \"\n-                    \"converting to a safe representation:\\n  %s\"  % msg,\n+                    \"converting to a safe representation:\\n  %s\" % msg,\n                     UnicodeWarning)\n \n "
    },
    {
        "commit_id": "7b1870a94ed27b6e4517026d248c756df1ce9b8e",
        "commit_message": "Fix flake8 in features branch",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7b1870a94ed27b6e4517026d248c756df1ce9b8e",
        "buggy_code": "if sys.version_info < (2,7):",
        "fixed_code": "if sys.version_info < (2, 7):",
        "patch": "@@ -151,7 +151,7 @@ def test_something():\n                     pass\n         \"\"\")\n         result = testdir.runpytest()\n-        if sys.version_info < (2,7):\n+        if sys.version_info < (2, 7):\n             # in 2.6, the code to handle static methods doesn't work\n             result.stdout.fnmatch_lines([\n                 \"*collected 0 items*\","
    },
    {
        "commit_id": "4fd92ef9ba270dc5b80864b3d9b4b4d12fd779bb",
        "commit_message": "Merge branch 'fix-flake8-issues' into features",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4fd92ef9ba270dc5b80864b3d9b4b4d12fd779bb",
        "buggy_code": "\"converting to a safe representation:\\n  %s\"  % msg,",
        "fixed_code": "\"converting to a safe representation:\\n  %s\" % msg,",
        "patch": "@@ -78,7 +78,7 @@ def catch_warnings_for_item(item):\n             if unicode_warning:\n                 warnings.warn(\n                     \"Warning is using unicode non convertible to ascii, \"\n-                    \"converting to a safe representation:\\n  %s\"  % msg,\n+                    \"converting to a safe representation:\\n  %s\" % msg,\n                     UnicodeWarning)\n \n "
    },
    {
        "commit_id": "221f42c5cea1e8a3b4603db1f82d3c4f8b852892",
        "commit_message": "Change --strict help message to clarify it deals with unregistered markers\n\nFix #2444",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/221f42c5cea1e8a3b4603db1f82d3c4f8b852892",
        "buggy_code": "help=\"run pytest in strict mode, warnings become errors.\")",
        "fixed_code": "help=\"marks not registered in configuration file raise errors.\")",
        "patch": "@@ -45,7 +45,7 @@ def pytest_addoption(parser):\n                action=\"store\", type=int, dest=\"maxfail\", default=0,\n                help=\"exit after first num failures or errors.\")\n     group._addoption('--strict', action=\"store_true\",\n-               help=\"run pytest in strict mode, warnings become errors.\")\n+               help=\"marks not registered in configuration file raise errors.\")\n     group._addoption(\"-c\", metavar=\"file\", type=str, dest=\"inifilename\",\n                help=\"load configuration from `file` instead of trying to locate one of the implicit configuration files.\")\n     group._addoption(\"--continue-on-collection-errors\", action=\"store_true\","
    },
    {
        "commit_id": "221f42c5cea1e8a3b4603db1f82d3c4f8b852892",
        "commit_message": "Change --strict help message to clarify it deals with unregistered markers\n\nFix #2444",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/221f42c5cea1e8a3b4603db1f82d3c4f8b852892",
        "buggy_code": "result = testdir.runpytest(\"-rs --strict\")",
        "fixed_code": "result = testdir.runpytest(\"-rs\")",
        "patch": "@@ -576,7 +576,7 @@ def test_strict_and_skip(self, testdir):\n             def test_hello():\n                 pass\n         \"\"\")\n-        result = testdir.runpytest(\"-rs --strict\")\n+        result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\n             \"*unconditional skip*\",\n             \"*1 skipped*\","
    },
    {
        "commit_id": "4e57a39067ddf1973ca2a6207423fdcd5916fa2e",
        "commit_message": "Merge pull request #2468 from nicoddemus/collection-report-2464\n\nFix incorrect \"collected items\" report when specifying tests on the command-line",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4e57a39067ddf1973ca2a6207423fdcd5916fa2e",
        "buggy_code": "line += str(self._numcollected) + \" items\"",
        "fixed_code": "line += str(self._numcollected) + \" item\" + ('' if self._numcollected == 1 else 's')",
        "patch": "@@ -282,7 +282,7 @@ def report_collect(self, final=False):\n             line = \"collected \"\n         else:\n             line = \"collecting \"\n-        line += str(self._numcollected) + \" items\"\n+        line += str(self._numcollected) + \" item\" + ('' if self._numcollected == 1 else 's')\n         if errors:\n             line += \" / %d errors\" % errors\n         if skipped:"
    },
    {
        "commit_id": "9d41eaedbf098ad62f7b41de889230a82260b523",
        "commit_message": "Issue UnicodeWarning only for non-ascii unicode\n\nFix #2463",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9d41eaedbf098ad62f7b41de889230a82260b523",
        "buggy_code": "'*warnings.py:*: UnicodeWarning: This warning*\\u6d4b\\u8bd5',",
        "fixed_code": "'*warnings.py:*: UnicodeWarning: Warning is using unicode non*',",
        "patch": "@@ -161,7 +161,7 @@ def test_func(fix):\n \n         '*test_py2_unicode.py:8: UserWarning: \\u6d4b\\u8bd5',\n         '*warnings.warn(u\"\\u6d4b\\u8bd5\")',\n-        '*warnings.py:*: UnicodeWarning: This warning*\\u6d4b\\u8bd5',\n+        '*warnings.py:*: UnicodeWarning: Warning is using unicode non*',\n         '* 1 passed, 2 warnings*',\n     ])\n "
    },
    {
        "commit_id": "46d157fe07c4b85c9f9ccefcb3d6e3309b0ad922",
        "commit_message": "Fix collection report when collecting a single test item",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/46d157fe07c4b85c9f9ccefcb3d6e3309b0ad922",
        "buggy_code": "line += str(self._numcollected) + \" items\"",
        "fixed_code": "line += str(self._numcollected) + \" item\" + ('' if self._numcollected == 1 else 's')",
        "patch": "@@ -282,7 +282,7 @@ def report_collect(self, final=False):\n             line = \"collected \"\n         else:\n             line = \"collecting \"\n-        line += str(self._numcollected) + \" items\"\n+        line += str(self._numcollected) + \" item\" + ('' if self._numcollected == 1 else 's')\n         if errors:\n             line += \" / %d errors\" % errors\n         if skipped:"
    },
    {
        "commit_id": "c98ad2a0a0c8c1de278255cfec534dd928be2e85",
        "commit_message": "Install py 1.4.33 that contains the fnmatch py.std import fix.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c98ad2a0a0c8c1de278255cfec534dd928be2e85",
        "buggy_code": "install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "fixed_code": "install_requires = ['py>=1.4.33', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "patch": "@@ -43,7 +43,7 @@ def has_environment_marker_support():\n \n \n def main():\n-    install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n+    install_requires = ['py>=1.4.33', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n     extras_require = {}\n     if has_environment_marker_support():\n         extras_require[':python_version==\"2.6\"'] = ['argparse']"
    },
    {
        "commit_id": "454426cba579000d5b87579e37cc05d1900e9b03",
        "commit_message": "Merge pull request #2446 from nicoddemus/issue-2441\n\npytest.deprecated_call now captures PendingDeprecationWarning in context manager form",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/454426cba579000d5b87579e37cc05d1900e9b03",
        "buggy_code": "return WarningsChecker(expected_warning=DeprecationWarning)",
        "fixed_code": "return WarningsChecker(expected_warning=(DeprecationWarning, PendingDeprecationWarning))",
        "patch": "@@ -45,7 +45,7 @@ def deprecated_call(func=None, *args, **kwargs):\n     triggered twice for the same module. See #1190.\n     \"\"\"\n     if not func:\n-        return WarningsChecker(expected_warning=DeprecationWarning)\n+        return WarningsChecker(expected_warning=(DeprecationWarning, PendingDeprecationWarning))\n \n     categories = []\n "
    },
    {
        "commit_id": "f96a1d89c5e8a76708b686c09c16a8017292bf40",
        "commit_message": "pytest.deprecated_call now captures PendingDeprecationWarning in context manager form\n\nFix #2441",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f96a1d89c5e8a76708b686c09c16a8017292bf40",
        "buggy_code": "return WarningsChecker(expected_warning=DeprecationWarning)",
        "fixed_code": "return WarningsChecker(expected_warning=(DeprecationWarning, PendingDeprecationWarning))",
        "patch": "@@ -45,7 +45,7 @@ def deprecated_call(func=None, *args, **kwargs):\n     triggered twice for the same module. See #1190.\n     \"\"\"\n     if not func:\n-        return WarningsChecker(expected_warning=DeprecationWarning)\n+        return WarningsChecker(expected_warning=(DeprecationWarning, PendingDeprecationWarning))\n \n     categories = []\n "
    },
    {
        "commit_id": "a280e43949a489192dd7a80ee9c982843d9b153e",
        "commit_message": "fix import error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a280e43949a489192dd7a80ee9c982843d9b153e",
        "buggy_code": "from ._version import __version__",
        "fixed_code": "from ._version import version as __version__",
        "patch": "@@ -1,7 +1,7 @@\n __all__ = ['__version__']\n \n try:\n-    from ._version import __version__\n+    from ._version import version as __version__\n except ImportError:\n     # broken installation, we don't even try\n     # unknown only works because we do poor mans version compare"
    },
    {
        "commit_id": "731776702d6f50b65b353709f206257bb2a73b78",
        "commit_message": "Fix hook name in LsofFdLeakChecker",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/731776702d6f50b65b353709f206257bb2a73b78",
        "buggy_code": "def pytest_runtest_item(self, item):",
        "fixed_code": "def pytest_runtest_protocol(self, item):",
        "patch": "@@ -88,7 +88,7 @@ def matching_platform(self):\n             return True\n \n     @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n-    def pytest_runtest_item(self, item):\n+    def pytest_runtest_protocol(self, item):\n         lines1 = self.get_open_files()\n         yield\n         if hasattr(sys, \"pypy_version_info\"):"
    },
    {
        "commit_id": "0baf5e149988c55da937385aa0a4e40bd23663b5",
        "commit_message": "Fix test that expected \"unknown hook\" error on stderr",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0baf5e149988c55da937385aa0a4e40bd23663b5",
        "buggy_code": "result.stderr.fnmatch_lines([",
        "fixed_code": "result.stdout.fnmatch_lines([",
        "patch": "@@ -33,7 +33,7 @@ def pytest_hello(xyz):\n     \"\"\")\n     result = testdir.runpytest()\n     assert result.ret != 0\n-    result.stderr.fnmatch_lines([\n+    result.stdout.fnmatch_lines([\n         '*unknown hook*pytest_hello*'\n     ])\n "
    },
    {
        "commit_id": "839c9361539aec8bf90a56cdea89ddccc8c40754",
        "commit_message": "_pytest.mark: fix unconfigure after bad configure, still potential bug",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/839c9361539aec8bf90a56cdea89ddccc8c40754",
        "buggy_code": "MARK_GEN._config = config._old_mark_config",
        "fixed_code": "MARK_GEN._config = getattr(config, '_old_mark_config', None)",
        "patch": "@@ -229,7 +229,7 @@ def pytest_configure(config):\n \n \n def pytest_unconfigure(config):\n-    MARK_GEN._config = config._old_mark_config\n+    MARK_GEN._config = getattr(config, '_old_mark_config', None)\n \n \n class MarkGenerator(object):"
    },
    {
        "commit_id": "2c730743f1b80b38b044ecc08c98609df60ba375",
        "commit_message": "Fix errors related to warnings raised by xdist\n\n- pytester was creating a 'pexpect' directory to serve as temporary dir, but due to the fact that\n   xdist adds the current directory to sys.path, that directory was being considered as candidate\n   for import as a package. The directory is empty and a warning was being raised about\n   it missing __init__ file, which is now turned into an error by our filterwarnings config\n   in pytest.ini.\n\n- Decided to play it safe and ignore any warnings during `pytest.importorskip`.\n\n- pytest-xdist and execnet raise two warnings which should be fixed upstream:\n   pytest-dev/pytest-xdist/issues/133",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2c730743f1b80b38b044ecc08c98609df60ba375",
        "buggy_code": "basetemp = self.tmpdir.mkdir(\"pexpect\")",
        "fixed_code": "basetemp = self.tmpdir.mkdir(\"temp-pexpect\")",
        "patch": "@@ -1008,7 +1008,7 @@ def spawn_pytest(self, string, expect_timeout=10.0):\n         The pexpect child is returned.\n \n         \"\"\"\n-        basetemp = self.tmpdir.mkdir(\"pexpect\")\n+        basetemp = self.tmpdir.mkdir(\"temp-pexpect\")\n         invoke = \" \".join(map(str, self._getpytestargs()))\n         cmd = \"%s --basetemp=%s %s\" % (invoke, basetemp, string)\n         return self.spawn(cmd, expect_timeout=expect_timeout)"
    },
    {
        "commit_id": "916d272c443bf22ff73759e797be29979ec70b7a",
        "commit_message": "Fix test on linux",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/916d272c443bf22ff73759e797be29979ec70b7a",
        "buggy_code": "\"*1 pytest-warnings*\",",
        "fixed_code": "\"*1 warnings*\",",
        "patch": "@@ -55,7 +55,7 @@ def test_error():\n         assert result.ret == 1\n         result.stdout.fnmatch_lines([\n             \"*could not create cache path*\",\n-            \"*1 pytest-warnings*\",\n+            \"*1 warnings*\",\n         ])\n \n     def test_config_cache(self, testdir):"
    },
    {
        "commit_id": "4d947077bbed4862d4e0a055ce967ba490be96af",
        "commit_message": "Fix test in py26 that expected a floor division error message",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d947077bbed4862d4e0a055ce967ba490be96af",
        "buggy_code": "0 / 0",
        "fixed_code": "0 // 0",
        "patch": "@@ -370,7 +370,7 @@ def test_codepath_Queue_example():\n \n def test_match_succeeds():\n     with pytest.raises(ZeroDivisionError) as excinfo:\n-        0 / 0\n+        0 // 0\n     excinfo.match(r'.*zero.*')\n \n def test_match_raises_error(testdir):"
    },
    {
        "commit_id": "78194093afe6bbb82aa2e636b67046ce96b7c238",
        "commit_message": "Improve warning representation in terminal plugin and fix tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78194093afe6bbb82aa2e636b67046ce96b7c238",
        "buggy_code": "self.config.warn('C1', deprecated.FUNCARG_PREFIX.format(name=name))",
        "fixed_code": "self.config.warn('C1', deprecated.FUNCARG_PREFIX.format(name=name), nodeid=nodeid)",
        "patch": "@@ -1080,7 +1080,7 @@ def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n                     continue\n                 marker = defaultfuncargprefixmarker\n                 from _pytest import deprecated\n-                self.config.warn('C1', deprecated.FUNCARG_PREFIX.format(name=name))\n+                self.config.warn('C1', deprecated.FUNCARG_PREFIX.format(name=name), nodeid=nodeid)\n                 name = name[len(self._argprefix):]\n             elif not isinstance(marker, FixtureFunctionMarker):\n                 # magic globals  with __getattr__ might have got us a wrong"
    },
    {
        "commit_id": "78194093afe6bbb82aa2e636b67046ce96b7c238",
        "commit_message": "Improve warning representation in terminal plugin and fix tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78194093afe6bbb82aa2e636b67046ce96b7c238",
        "buggy_code": "('pytest_funcarg__value: '",
        "fixed_code": "('*pytest_funcarg__value: '",
        "patch": "@@ -26,7 +26,7 @@ def test_funcarg_prefix(value):\n     \"\"\")\n     result = testdir.runpytest('-ra')\n     result.stdout.fnmatch_lines([\n-        ('pytest_funcarg__value: '\n+        ('*pytest_funcarg__value: '\n          'declaring fixtures using \"pytest_funcarg__\" prefix is deprecated '\n          'and scheduled to be removed in pytest 4.0.  '\n          'Please remove the prefix and use the @pytest.fixture decorator instead.'),"
    },
    {
        "commit_id": "78194093afe6bbb82aa2e636b67046ce96b7c238",
        "commit_message": "Improve warning representation in terminal plugin and fix tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78194093afe6bbb82aa2e636b67046ce96b7c238",
        "buggy_code": "'record_xml_property*experimental*',",
        "fixed_code": "'*record_xml_property*experimental*',",
        "patch": "@@ -854,7 +854,7 @@ def test_record(record_xml_property, other):\n     pnodes[1].assert_attr(name=\"foo\", value=\"<1\")\n     result.stdout.fnmatch_lines([\n         'test_record_property.py::test_record',\n-        'record_xml_property*experimental*',\n+        '*record_xml_property*experimental*',\n     ])\n \n "
    },
    {
        "commit_id": "906b40fbb209916ea13199d5391c2e64b3587103",
        "commit_message": "Merge pull request #2289 from fbjorn/fix-trailing-whitespace-in-terminal\n\nFix trailing whitespace in terminal output",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/906b40fbb209916ea13199d5391c2e64b3587103",
        "buggy_code": "result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile: '])",
        "fixed_code": "result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile:'])",
        "patch": "@@ -519,7 +519,7 @@ def test_consider_args_after_options_for_rootdir_and_inifile(testdir, args):\n             args[i] = d2\n     with root.as_cwd():\n         result = testdir.runpytest(*args)\n-    result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile: '])\n+    result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile:'])\n \n \n @pytest.mark.skipif(\"sys.platform == 'win32'\")"
    },
    {
        "commit_id": "cee578e32786986cb79495a2ea0e5c5e4eb425ce",
        "commit_message": "Fix trailing whitespace in terminal output",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cee578e32786986cb79495a2ea0e5c5e4eb425ce",
        "buggy_code": "result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile: '])",
        "fixed_code": "result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile:'])",
        "patch": "@@ -519,7 +519,7 @@ def test_consider_args_after_options_for_rootdir_and_inifile(testdir, args):\n             args[i] = d2\n     with root.as_cwd():\n         result = testdir.runpytest(*args)\n-    result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile: '])\n+    result.stdout.fnmatch_lines(['*rootdir: *myroot, inifile:'])\n \n \n @pytest.mark.skipif(\"sys.platform == 'win32'\")"
    },
    {
        "commit_id": "abbff681babdfc788871b77cc7126bf0a63e9f6b",
        "commit_message": "Fix '{0}' format for py26",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/abbff681babdfc788871b77cc7126bf0a63e9f6b",
        "buggy_code": "expr = r\"Pattern '{}' not found in 'invalid literal for int\\(\\) with base 10: 'asdf''\".format(msg)",
        "fixed_code": "expr = r\"Pattern '{0}' not found in 'invalid literal for int\\(\\) with base 10: 'asdf''\".format(msg)",
        "patch": "@@ -129,7 +129,7 @@ def test_raises_match(self):\n             int('asdf')\n \n         msg = \"with base 16\"\n-        expr = r\"Pattern '{}' not found in 'invalid literal for int\\(\\) with base 10: 'asdf''\".format(msg)\n+        expr = r\"Pattern '{0}' not found in 'invalid literal for int\\(\\) with base 10: 'asdf''\".format(msg)\n         with pytest.raises(AssertionError, match=expr):\n             with pytest.raises(ValueError, match=msg):\n                 int('asdf', base=10)"
    },
    {
        "commit_id": "e1c5314d80ad7b90257bfaf7a807a3d2e10f4494",
        "commit_message": "Replace 'raise StopIteration' usages in the code by 'return's in accordance to PEP-479\n\nFix #2160",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e1c5314d80ad7b90257bfaf7a807a3d2e10f4494",
        "buggy_code": "raise StopIteration",
        "fixed_code": "return",
        "patch": "@@ -174,7 +174,7 @@ def pytest_pycollect_makeitem(collector, name, obj):\n     outcome = yield\n     res = outcome.get_result()\n     if res is not None:\n-        raise StopIteration\n+        return\n     # nothing was collected elsewhere, let's do it here\n     if isclass(obj):\n         if collector.istestclass(obj, name):"
    },
    {
        "commit_id": "d076e4158f2fb400107407d1fa74cea8183b1c9a",
        "commit_message": "Merge pull request #2216 from vmuriart/patch-1\n\nAdd py36 classifier & Add py37 to travis",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d076e4158f2fb400107407d1fa74cea8183b1c9a",
        "buggy_code": "'2 2.6 2.7 3 3.3 3.4 3.5'.split()]",
        "fixed_code": "'2 2.6 2.7 3 3.3 3.4 3.5 3.6'.split()]",
        "patch": "@@ -13,7 +13,7 @@\n                'Topic :: Software Development :: Libraries',\n                'Topic :: Utilities'] + [\n               ('Programming Language :: Python :: %s' % x) for x in\n-                  '2 2.6 2.7 3 3.3 3.4 3.5'.split()]\n+                  '2 2.6 2.7 3 3.3 3.4 3.5 3.6'.split()]\n \n with open('README.rst') as fd:\n     long_description = fd.read()"
    },
    {
        "commit_id": "01eaf9db51bc1d7982eb5414902799c365a6909d",
        "commit_message": "fix the xfail docstring typo at the actual docstring + regendoc",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/01eaf9db51bc1d7982eb5414902799c365a6909d",
        "buggy_code": "\"mark the the test function as an expected failure if eval(condition) \"",
        "fixed_code": "\"mark the test function as an expected failure if eval(condition) \"",
        "patch": "@@ -46,7 +46,7 @@ def nop(*args, **kwargs):\n     )\n     config.addinivalue_line(\"markers\",\n         \"xfail(condition, reason=None, run=True, raises=None, strict=False): \"\n-        \"mark the the test function as an expected failure if eval(condition) \"\n+        \"mark the test function as an expected failure if eval(condition) \"\n         \"has a True value. Optionally specify a reason for better reporting \"\n         \"and run=False if you don't even want to execute the test function. \"\n         \"If only specific exception(s) are expected, you can list them in \""
    },
    {
        "commit_id": "c477f09177cabaaa1dbddd9d754f44ec9eba7b2a",
        "commit_message": "Assert statements of the pytester plugin again benefit from assertion rewriting\n\nFix #1920",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c477f09177cabaaa1dbddd9d754f44ec9eba7b2a",
        "buggy_code": "self.rewrite_hook.mark_rewrite(modname)",
        "fixed_code": "self.rewrite_hook.mark_rewrite(importspec)",
        "patch": "@@ -421,7 +421,7 @@ def import_plugin(self, modname):\n             importspec = \"_pytest.\" + modname\n         else:\n             importspec = modname\n-        self.rewrite_hook.mark_rewrite(modname)\n+        self.rewrite_hook.mark_rewrite(importspec)\n         try:\n             __import__(importspec)\n         except ImportError as e:"
    },
    {
        "commit_id": "78f03888f447802f642b6d66c1851ddcbc2b4948",
        "commit_message": "Merge pull request #2168 from jwilk/spelling\n\nFix typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78f03888f447802f642b6d66c1851ddcbc2b4948",
        "buggy_code": "'simple powerful testing with Pytho',",
        "fixed_code": "'simple powerful testing with Python',",
        "patch": "@@ -303,7 +303,7 @@\n    ('Holger Krekel@*Benjamin Peterson@*Ronny Pfannschmidt@*'\n     'Floris Bruynooghe@*others'),\n    'pytest',\n-   'simple powerful testing with Pytho',\n+   'simple powerful testing with Python',\n    'Programming',\n    1),\n ]"
    },
    {
        "commit_id": "03a7a2cd3ed855a8ee0af260aba236818bbcacaf",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/03a7a2cd3ed855a8ee0af260aba236818bbcacaf",
        "buggy_code": "'simple powerful testing with Pytho',",
        "fixed_code": "'simple powerful testing with Python',",
        "patch": "@@ -303,7 +303,7 @@\n    ('Holger Krekel@*Benjamin Peterson@*Ronny Pfannschmidt@*'\n     'Floris Bruynooghe@*others'),\n    'pytest',\n-   'simple powerful testing with Pytho',\n+   'simple powerful testing with Python',\n    'Programming',\n    1),\n ]"
    },
    {
        "commit_id": "b4295aa19e877803de29e0209611dcc9d9f63cf5",
        "commit_message": "Merge pull request #2144 from sscherfke/patch-1\n\nExplicitly add setuptools to install_requires",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b4295aa19e877803de29e0209611dcc9d9f63cf5",
        "buggy_code": "install_requires = ['py>=1.4.29']  # pluggy is vendored in _pytest.vendored_packages",
        "fixed_code": "install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "patch": "@@ -48,7 +48,7 @@ def has_environment_marker_support():\n \n \n def main():\n-    install_requires = ['py>=1.4.29']  # pluggy is vendored in _pytest.vendored_packages\n+    install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n     extras_require = {}\n     if has_environment_marker_support():\n         extras_require[':python_version==\"2.6\"'] = ['argparse']"
    },
    {
        "commit_id": "3f5edc705a336cf7a40dd1117065e9a413d27847",
        "commit_message": "Explicitly add setuptools to install_requires\n\nSetuptools is used in `_pytest/config.py` but was not explicitly listed as requirement. This led to an error when creating a Conda package for pytest since setuptools is not necessarily installed by default in Conda envs.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3f5edc705a336cf7a40dd1117065e9a413d27847",
        "buggy_code": "install_requires = ['py>=1.4.29']  # pluggy is vendored in _pytest.vendored_packages",
        "fixed_code": "install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages",
        "patch": "@@ -48,7 +48,7 @@ def has_environment_marker_support():\n \n \n def main():\n-    install_requires = ['py>=1.4.29']  # pluggy is vendored in _pytest.vendored_packages\n+    install_requires = ['py>=1.4.29', 'setuptools']  # pluggy is vendored in _pytest.vendored_packages\n     extras_require = {}\n     if has_environment_marker_support():\n         extras_require[':python_version==\"2.6\"'] = ['argparse']"
    },
    {
        "commit_id": "7480342710ea7b1389811c5316a70457070d8baf",
        "commit_message": "Fix typo in docstring of register_assert_rewrite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7480342710ea7b1389811c5316a70457070d8baf",
        "buggy_code": "\"\"\"Register a module name to be rewritten on import.",
        "fixed_code": "\"\"\"Register one or more module names to be rewritten on import.",
        "patch": "@@ -29,7 +29,7 @@ def pytest_namespace():\n \n \n def register_assert_rewrite(*names):\n-    \"\"\"Register a module name to be rewritten on import.\n+    \"\"\"Register one or more module names to be rewritten on import.\n \n     This function will make sure that this module or all modules inside\n     the package will get their assert statements rewritten."
    },
    {
        "commit_id": "1e2b2af2967e8565b62ca89c11ea03e2620c548c",
        "commit_message": "Merge pull request #2074 from nedbat/fix-double-spaces\n\nRemove an accidental double space",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1e2b2af2967e8565b62ca89c11ea03e2620c548c",
        "buggy_code": "' For parsearg this is optional and when supplied '",
        "fixed_code": "' For parsearg this is optional and when supplied'",
        "patch": "@@ -594,7 +594,7 @@ def __init__(self, *names, **attrs):\n                 if typ == 'choice':\n                     warnings.warn(\n                         'type argument to addoption() is a string %r.'\n-                        ' For parsearg this is optional and when supplied '\n+                        ' For parsearg this is optional and when supplied'\n                         ' should be a type.'\n                         ' (options: %s)' % (typ, names),\n                         DeprecationWarning,"
    },
    {
        "commit_id": "984d4ce5ec31d0d0d8771c7e5ab3f639182c9025",
        "commit_message": "Fix test_excinfo_getstatement that broke because of whitespace changes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/984d4ce5ec31d0d0d8771c7e5ab3f639182c9025",
        "buggy_code": "linenumbers = [_pytest._code.getrawcode(f).co_firstlineno - 1 + 3,",
        "fixed_code": "linenumbers = [_pytest._code.getrawcode(f).co_firstlineno - 1 + 4,",
        "patch": "@@ -64,7 +64,7 @@ def f():\n         f()\n     except ValueError:\n         excinfo = _pytest._code.ExceptionInfo()\n-    linenumbers = [_pytest._code.getrawcode(f).co_firstlineno - 1 + 3,\n+    linenumbers = [_pytest._code.getrawcode(f).co_firstlineno - 1 + 4,\n                    _pytest._code.getrawcode(f).co_firstlineno - 1 + 1,\n                    _pytest._code.getrawcode(g).co_firstlineno - 1 + 1, ]\n     l = list(excinfo.traceback)"
    },
    {
        "commit_id": "82fb63ca2d3c8b85d8a13038a16bd104cff1ea6e",
        "commit_message": "Merge pull request #2019 from nicoddemus/fix-metavar-pair-help\n\nFix cmdline help message for custom options with two or more metavars",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82fb63ca2d3c8b85d8a13038a16bd104cff1ea6e",
        "buggy_code": "return_list.append(option.replace(' ', '='))",
        "fixed_code": "return_list.append(option.replace(' ', '=', 1))",
        "patch": "@@ -793,7 +793,7 @@ def _format_action_invocation(self, action):\n             if len(option) == 2 or option[2] == ' ':\n                 return_list.append(option)\n             if option[2:] == short_long.get(option.replace('-', '')):\n-                return_list.append(option.replace(' ', '='))\n+                return_list.append(option.replace(' ', '=', 1))\n         action._formatted_action_invocation = ', '.join(return_list)\n         return action._formatted_action_invocation\n "
    },
    {
        "commit_id": "620b384b69ffaf0e98af015a721f385ceb13093c",
        "commit_message": "Fix cmdline help message for custom options with two or more metavars\n\nFix #2004",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/620b384b69ffaf0e98af015a721f385ceb13093c",
        "buggy_code": "return_list.append(option.replace(' ', '='))",
        "fixed_code": "return_list.append(option.replace(' ', '=', 1))",
        "patch": "@@ -793,7 +793,7 @@ def _format_action_invocation(self, action):\n             if len(option) == 2 or option[2] == ' ':\n                 return_list.append(option)\n             if option[2:] == short_long.get(option.replace('-', '')):\n-                return_list.append(option.replace(' ', '='))\n+                return_list.append(option.replace(' ', '=', 1))\n         action._formatted_action_invocation = ', '.join(return_list)\n         return action._formatted_action_invocation\n "
    },
    {
        "commit_id": "7d66e4eae1cc5989df07e140f2ff6949416c2c18",
        "commit_message": "Display full traceback from Import errors when collecting test modules\n\nFix #1976",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d66e4eae1cc5989df07e140f2ff6949416c2c18",
        "buggy_code": "\"'No module named *does_not_work*\",",
        "fixed_code": "\"*No module named *does_not_work*\",",
        "patch": "@@ -120,7 +120,7 @@ def test_this():\n         result.stdout.fnmatch_lines([\n             #XXX on jython this fails:  \">   import import_fails\",\n             \"ImportError while importing test module*\",\n-            \"'No module named *does_not_work*\",\n+            \"*No module named *does_not_work*\",\n         ])\n         assert result.ret == 2\n "
    },
    {
        "commit_id": "7d66e4eae1cc5989df07e140f2ff6949416c2c18",
        "commit_message": "Display full traceback from Import errors when collecting test modules\n\nFix #1976",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d66e4eae1cc5989df07e140f2ff6949416c2c18",
        "buggy_code": "\"'No module named *xyz*\",",
        "fixed_code": "\"*No module named *xyz*\",",
        "patch": "@@ -667,7 +667,7 @@ def test_collect_fail(self, testdir, option):\n         result = testdir.runpytest(*option.args)\n         result.stdout.fnmatch_lines([\n             \"ImportError while importing*\",\n-            \"'No module named *xyz*\",\n+            \"*No module named *xyz*\",\n             \"*1 error*\",\n         ])\n "
    },
    {
        "commit_id": "336d7900c587caa35c0bb9067bf6820fe66a89ea",
        "commit_message": "Fix test about pytest.skip message being used at global level\n\nFix #1959",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/336d7900c587caa35c0bb9067bf6820fe66a89ea",
        "buggy_code": "\"*Using @pytest.skip outside of a test * is not allowed*\"",
        "fixed_code": "\"*Using pytest.skip outside of a test is not allowed*\"",
        "patch": "@@ -967,5 +967,5 @@ def test_func():\n     \"\"\")\n     result = testdir.runpytest()\n     result.stdout.fnmatch_lines(\n-        \"*Using @pytest.skip outside of a test * is not allowed*\"\n+        \"*Using pytest.skip outside of a test is not allowed*\"\n     )"
    },
    {
        "commit_id": "e5deb8a9271de94d9815abdbc3aa9b82697d1379",
        "commit_message": "Merge pull request #1955 from rowillia/fix_python3_deprecation_warnings\n\nFix `DeprecationWarnings` found when running py.test in Python 2.7 with the -3 flag.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e5deb8a9271de94d9815abdbc3aa9b82697d1379",
        "buggy_code": "left_repr = py.io.saferepr(left, maxsize=int(width/2))",
        "fixed_code": "left_repr = py.io.saferepr(left, maxsize=int(width//2))",
        "patch": "@@ -105,7 +105,7 @@ def _format_lines(lines):\n def assertrepr_compare(config, op, left, right):\n     \"\"\"Return specialised explanations for some operators/operands\"\"\"\n     width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n-    left_repr = py.io.saferepr(left, maxsize=int(width/2))\n+    left_repr = py.io.saferepr(left, maxsize=int(width//2))\n     right_repr = py.io.saferepr(right, maxsize=width-len(left_repr))\n \n     summary = u('%s %s %s') % (ecu(left_repr), op, ecu(right_repr))"
    },
    {
        "commit_id": "940ed7e943c63e2eb9df1d537775692021ff0a53",
        "commit_message": "Fix `DeprecationWarnings` found when running py.test in Python 2.7 with the -3 flag.\n\nRunning through some of my tests with the `-3` flag in python2.7 I encountered some errors within py.test itself.  This fixes those errors so we can use py.test in order to identify problems with Python 3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/940ed7e943c63e2eb9df1d537775692021ff0a53",
        "buggy_code": "left_repr = py.io.saferepr(left, maxsize=int(width/2))",
        "fixed_code": "left_repr = py.io.saferepr(left, maxsize=int(width//2))",
        "patch": "@@ -105,7 +105,7 @@ def _format_lines(lines):\n def assertrepr_compare(config, op, left, right):\n     \"\"\"Return specialised explanations for some operators/operands\"\"\"\n     width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n-    left_repr = py.io.saferepr(left, maxsize=int(width/2))\n+    left_repr = py.io.saferepr(left, maxsize=int(width//2))\n     right_repr = py.io.saferepr(right, maxsize=width-len(left_repr))\n \n     summary = u('%s %s %s') % (ecu(left_repr), op, ecu(right_repr))"
    },
    {
        "commit_id": "45524241a5e9ac349961a803907c1394ad289390",
        "commit_message": "mark: fix introduced linting error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/45524241a5e9ac349961a803907c1394ad289390",
        "buggy_code": "from itertools import imap",
        "fixed_code": "from itertools import imap  # NOQA",
        "patch": "@@ -145,7 +145,7 @@ def _escape_strings(val):\n else:\n     STRING_TYPES = bytes, str, unicode\n \n-    from itertools import imap\n+    from itertools import imap  # NOQA\n \n     def _escape_strings(val):\n         \"\"\"In py2 bytes and str are the same type, so return if it's a bytes"
    },
    {
        "commit_id": "1812387bf0c2cb36630afa3942f553c9540a5f47",
        "commit_message": "Mark: fix python 3 compatibility",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1812387bf0c2cb36630afa3942f553c9540a5f47",
        "buggy_code": "from itertools import imap",
        "fixed_code": "from .compat import imap",
        "patch": "@@ -2,7 +2,7 @@\n import inspect\n from collections import namedtuple\n from operator import attrgetter\n-from itertools import imap\n+from .compat import imap\n \n def alias(name):\n     return property(attrgetter(name), doc='alias for ' + name)"
    },
    {
        "commit_id": "b38cf775627554d5ab6ffb303a1819c6a03e73eb",
        "commit_message": "Merge pull request #1911 from irachex/patch-1\n\nFix keyword docs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b38cf775627554d5ab6ffb303a1819c6a03e73eb",
        "buggy_code": "\"and their parent classes. Example: -k 'test_method or test \"",
        "fixed_code": "\"and their parent classes. Example: -k 'test_method or test_\"",
        "patch": "@@ -19,7 +19,7 @@ def pytest_addoption(parser):\n         help=\"only run tests which match the given substring expression. \"\n              \"An expression is a python evaluatable expression \"\n              \"where all names are substring-matched against test names \"\n-             \"and their parent classes. Example: -k 'test_method or test \"\n+             \"and their parent classes. Example: -k 'test_method or test_\"\n              \"other' matches all test functions and classes whose name \"\n              \"contains 'test_method' or 'test_other'. \"\n              \"Additionally keywords are matched to classes and functions \""
    },
    {
        "commit_id": "c60854474abacd62b537b2cf759e305367afb75e",
        "commit_message": "Fix keyword docs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c60854474abacd62b537b2cf759e305367afb75e",
        "buggy_code": "\"and their parent classes. Example: -k 'test_method or test \"",
        "fixed_code": "\"and their parent classes. Example: -k 'test_method or test_\"",
        "patch": "@@ -19,7 +19,7 @@ def pytest_addoption(parser):\n         help=\"only run tests which match the given substring expression. \"\n              \"An expression is a python evaluatable expression \"\n              \"where all names are substring-matched against test names \"\n-             \"and their parent classes. Example: -k 'test_method or test \"\n+             \"and their parent classes. Example: -k 'test_method or test_\"\n              \"other' matches all test functions and classes whose name \"\n              \"contains 'test_method' or 'test_other'. \"\n              \"Additionally keywords are matched to classes and functions \""
    },
    {
        "commit_id": "4e58c9a7d010be4b9f67f89495d1e7c2ae9062d0",
        "commit_message": "Fix use of deprecated getfuncargvalue method in the internal doctest plugin\n\nFix #1898",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4e58c9a7d010be4b9f67f89495d1e7c2ae9062d0",
        "buggy_code": "for name, value in self.fixture_request.getfuncargvalue('doctest_namespace').items():",
        "fixed_code": "for name, value in self.fixture_request.getfixturevalue('doctest_namespace').items():",
        "patch": "@@ -88,7 +88,7 @@ def setup(self):\n         if self.dtest is not None:\n             self.fixture_request = _setup_fixtures(self)\n             globs = dict(getfixture=self.fixture_request.getfixturevalue)\n-            for name, value in self.fixture_request.getfuncargvalue('doctest_namespace').items():\n+            for name, value in self.fixture_request.getfixturevalue('doctest_namespace').items():\n                 globs[name] = value\n             self.dtest.globs.update(globs)\n "
    },
    {
        "commit_id": "a947e83be9276d0f7cda77682c8cf0db70bb7472",
        "commit_message": "Merge pull request #1870 from AiOO/bugfix/assertion-with-unicode\n\nFix UnicodeEncodeError when string comparison with unicode has failed.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a947e83be9276d0f7cda77682c8cf0db70bb7472",
        "buggy_code": "exprinfo = str(tup[1])",
        "fixed_code": "exprinfo = py._builtin._totext(tup[1])",
        "patch": "@@ -354,7 +354,7 @@ def __init__(self, tup=None, exprinfo=None):\n             if exprinfo is None and isinstance(tup[1], AssertionError):\n                 exprinfo = getattr(tup[1], 'msg', None)\n                 if exprinfo is None:\n-                    exprinfo = str(tup[1])\n+                    exprinfo = py._builtin._totext(tup[1])\n                 if exprinfo and exprinfo.startswith('assert '):\n                     self._striptext = 'AssertionError: '\n         self._excinfo = tup"
    },
    {
        "commit_id": "856ad719d3f5343d6bbc8c0d01c52846206d01c7",
        "commit_message": "Fix UnicodeEncodeError when string comparison with unicode has failed.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/856ad719d3f5343d6bbc8c0d01c52846206d01c7",
        "buggy_code": "exprinfo = str(tup[1])",
        "fixed_code": "exprinfo = py._builtin._totext(tup[1])",
        "patch": "@@ -354,7 +354,7 @@ def __init__(self, tup=None, exprinfo=None):\n             if exprinfo is None and isinstance(tup[1], AssertionError):\n                 exprinfo = getattr(tup[1], 'msg', None)\n                 if exprinfo is None:\n-                    exprinfo = str(tup[1])\n+                    exprinfo = py._builtin._totext(tup[1])\n                 if exprinfo and exprinfo.startswith('assert '):\n                     self._striptext = 'AssertionError: '\n         self._excinfo = tup"
    },
    {
        "commit_id": "ea0febad2873da4df524f78fb688a9b182c55587",
        "commit_message": "Updates for new patch version 3.0.2",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ea0febad2873da4df524f78fb688a9b182c55587",
        "buggy_code": "__version__ = '3.0.1'",
        "fixed_code": "__version__ = '3.0.2.dev'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '3.0.1'\n+__version__ = '3.0.2.dev'"
    },
    {
        "commit_id": "3c866e70808a39d6f0a606fae7701c8b33b1932c",
        "commit_message": "Merge pull request #1855 from nicoddemus/fix-empty-parametrize-ids\n\nFix internal error when parametrizing using and empty list of ids()",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3c866e70808a39d6f0a606fae7701c8b33b1932c",
        "buggy_code": "if ids is None or ids[idx] is None:",
        "fixed_code": "if ids is None or (idx >= len(ids) or ids[idx] is None):",
        "patch": "@@ -936,7 +936,7 @@ def _idval(val, argname, idx, idfn, config=None):\n     return str(argname)+str(idx)\n \n def _idvalset(idx, valset, argnames, idfn, ids, config=None):\n-    if ids is None or ids[idx] is None:\n+    if ids is None or (idx >= len(ids) or ids[idx] is None):\n         this_id = [_idval(val, argname, idx, idfn, config)\n                    for val, argname in zip(valset, argnames)]\n         return \"-\".join(this_id)"
    },
    {
        "commit_id": "df200297e28f0fb9e6f071b9ca4c63b734b1dbe6",
        "commit_message": "Fix internal error when parametrizing using and empty list of ids()\n\nFix #1849",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/df200297e28f0fb9e6f071b9ca4c63b734b1dbe6",
        "buggy_code": "if ids is None or ids[idx] is None:",
        "fixed_code": "if ids is None or (idx >= len(ids) or ids[idx] is None):",
        "patch": "@@ -936,7 +936,7 @@ def _idval(val, argname, idx, idfn, config=None):\n     return str(argname)+str(idx)\n \n def _idvalset(idx, valset, argnames, idfn, ids, config=None):\n-    if ids is None or ids[idx] is None:\n+    if ids is None or (idx >= len(ids) or ids[idx] is None):\n         this_id = [_idval(val, argname, idx, idfn, config)\n                    for val, argname in zip(valset, argnames)]\n         return \"-\".join(this_id)"
    },
    {
        "commit_id": "d99ceb12189862a570d259324d98eb16fb9819b5",
        "commit_message": "Merge pull request #1844 from nicoddemus/importer-error\n\nImporter loader error",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d99ceb12189862a570d259324d98eb16fb9819b5",
        "buggy_code": "path = loader.get_filename()",
        "fixed_code": "path = loader.get_filename(x)",
        "patch": "@@ -687,7 +687,7 @@ def _tryconvertpyarg(self, x):\n         # This method is sometimes invoked when AssertionRewritingHook, which\n         # does not define a get_filename method, is already in place:\n         try:\n-            path = loader.get_filename()\n+            path = loader.get_filename(x)\n         except AttributeError:\n             # Retrieve path from AssertionRewritingHook:\n             path = loader.modules[x][0].co_filename"
    },
    {
        "commit_id": "678750c8f873f32a9a09987463805fe59c829e54",
        "commit_message": "Fix importer call",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/678750c8f873f32a9a09987463805fe59c829e54",
        "buggy_code": "path = loader.get_filename()",
        "fixed_code": "path = loader.get_filename(x)",
        "patch": "@@ -687,7 +687,7 @@ def _tryconvertpyarg(self, x):\n         # This method is sometimes invoked when AssertionRewritingHook, which\n         # does not define a get_filename method, is already in place:\n         try:\n-            path = loader.get_filename()\n+            path = loader.get_filename(x)\n         except AttributeError:\n             # Retrieve path from AssertionRewritingHook:\n             path = loader.modules[x][0].co_filename"
    },
    {
        "commit_id": "a20c3f9c4475ac28878a4f7b0eb703b1e3e83bb4",
        "commit_message": "Merge pull request #1827 from blueyed/Fix-spelling-s-outside-a-outside-of-a-\n\nFix spelling: s/outside a/outside of a/",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a20c3f9c4475ac28878a4f7b0eb703b1e3e83bb4",
        "buggy_code": "\"*Using @pytest.skip outside a test * is not allowed*\"",
        "fixed_code": "\"*Using @pytest.skip outside of a test * is not allowed*\"",
        "patch": "@@ -967,5 +967,5 @@ def test_func():\n     \"\"\")\n     result = testdir.runpytest()\n     result.stdout.fnmatch_lines(\n-        \"*Using @pytest.skip outside a test * is not allowed*\"\n+        \"*Using @pytest.skip outside of a test * is not allowed*\"\n     )"
    },
    {
        "commit_id": "e306a53999aaa4b8122a99910469fbb1c4c9e7fa",
        "commit_message": "Fix spelling: s/outside a/outside of a/",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e306a53999aaa4b8122a99910469fbb1c4c9e7fa",
        "buggy_code": "\"*Using @pytest.skip outside a test * is not allowed*\"",
        "fixed_code": "\"*Using @pytest.skip outside of a test * is not allowed*\"",
        "patch": "@@ -967,5 +967,5 @@ def test_func():\n     \"\"\")\n     result = testdir.runpytest()\n     result.stdout.fnmatch_lines(\n-        \"*Using @pytest.skip outside a test * is not allowed*\"\n+        \"*Using @pytest.skip outside of a test * is not allowed*\"\n     )"
    },
    {
        "commit_id": "dfc659f7810284a8607d02a1e0052ff4af002300",
        "commit_message": "Fix sys.version_info expression in xfail marker",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dfc659f7810284a8607d02a1e0052ff4af002300",
        "buggy_code": "pytest.mark.xfail(\"sys.version_info.major > 0\", reason=\"some bug\", strict={strict})((2, 3)),",
        "fixed_code": "pytest.mark.xfail(\"sys.version_info > (0, 0, 0)\", reason=\"some bug\", strict={strict})((2, 3)),",
        "patch": "@@ -1087,7 +1087,7 @@ def test_xfail_passing_is_xpass(self, testdir, strict):\n \n             @pytest.mark.parametrize((\"n\", \"expected\"), [\n                 (1, 2),\n-                pytest.mark.xfail(\"sys.version_info.major > 0\", reason=\"some bug\", strict={strict})((2, 3)),\n+                pytest.mark.xfail(\"sys.version_info > (0, 0, 0)\", reason=\"some bug\", strict={strict})((2, 3)),\n                 (3, 4),\n             ])\n             def test_increment(n, expected):"
    },
    {
        "commit_id": "bb3d6d87b61b98f4a3dcad33ede8ce207b3c6fb9",
        "commit_message": "Merge branch 'master' into fix-report-outcome-for-xpass",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bb3d6d87b61b98f4a3dcad33ede8ce207b3c6fb9",
        "buggy_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']",
        "fixed_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']",
        "patch": "@@ -369,7 +369,7 @@ def pytest_sessionfinish(self):\n         suite_stop_time = time.time()\n         suite_time_delta = suite_stop_time - self.suite_start_time\n \n-        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']\n+        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']\n \n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n         logfile.write(Junit.testsuite("
    },
    {
        "commit_id": "bb3d6d87b61b98f4a3dcad33ede8ce207b3c6fb9",
        "commit_message": "Merge branch 'master' into fix-report-outcome-for-xpass",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bb3d6d87b61b98f4a3dcad33ede8ce207b3c6fb9",
        "buggy_code": "fslocation = \"%s:%s\" % fslocation[:2]",
        "fixed_code": "fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)",
        "patch": "@@ -267,7 +267,7 @@ def warn(self, code, message):\n         if fslocation is None:\n             fslocation = getattr(self, \"fspath\", None)\n         else:\n-            fslocation = \"%s:%s\" % fslocation[:2]\n+            fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)\n \n         self.ihook.pytest_logwarning.call_historic(kwargs=dict(\n             code=code, message=message,"
    },
    {
        "commit_id": "ca5957932bbfe5c3db83ed88ba6ea24b79a8d92e",
        "commit_message": "Merge pull request #1806 from blueyed/fix-off-by-one-error-with-warnings\n\nFix off-by-one error with lines from request.node.warn",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ca5957932bbfe5c3db83ed88ba6ea24b79a8d92e",
        "buggy_code": "fslocation = \"%s:%s\" % fslocation[:2]",
        "fixed_code": "fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)",
        "patch": "@@ -267,7 +267,7 @@ def warn(self, code, message):\n         if fslocation is None:\n             fslocation = getattr(self, \"fspath\", None)\n         else:\n-            fslocation = \"%s:%s\" % fslocation[:2]\n+            fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)\n \n         self.ihook.pytest_logwarning.call_historic(kwargs=dict(\n             code=code, message=message,"
    },
    {
        "commit_id": "16cb5d01b133c0b00526fce94f8eb6c405fe3c21",
        "commit_message": "Fix off-by-one error with lines from request.node.warn\n\nThe line numbers in `node.location` seem to be zero-based?!",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/16cb5d01b133c0b00526fce94f8eb6c405fe3c21",
        "buggy_code": "fslocation = \"%s:%s\" % fslocation[:2]",
        "fixed_code": "fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)",
        "patch": "@@ -267,7 +267,7 @@ def warn(self, code, message):\n         if fslocation is None:\n             fslocation = getattr(self, \"fspath\", None)\n         else:\n-            fslocation = \"%s:%s\" % fslocation[:2]\n+            fslocation = \"%s:%s\" % (fslocation[0], fslocation[1] + 1)\n \n         self.ihook.pytest_logwarning.call_historic(kwargs=dict(\n             code=code, message=message,"
    },
    {
        "commit_id": "34925a31a915de488c537d3449b3d166c56c1600",
        "commit_message": "Merge pull request #1799 from cryporchild/junitxml-tests-tally-fix\n\nFix #1798 to include errors in total tests in junit xml output.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/34925a31a915de488c537d3449b3d166c56c1600",
        "buggy_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']",
        "fixed_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']",
        "patch": "@@ -369,7 +369,7 @@ def pytest_sessionfinish(self):\n         suite_stop_time = time.time()\n         suite_time_delta = suite_stop_time - self.suite_start_time\n \n-        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']\n+        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']\n \n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n         logfile.write(Junit.testsuite("
    },
    {
        "commit_id": "e4028b4505148804fe30634a49980b4fc7de9a37",
        "commit_message": "Fix #1798 to include errors in total tests in junit xml output.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e4028b4505148804fe30634a49980b4fc7de9a37",
        "buggy_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']",
        "fixed_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']",
        "patch": "@@ -369,7 +369,7 @@ def pytest_sessionfinish(self):\n         suite_stop_time = time.time()\n         suite_time_delta = suite_stop_time - self.suite_start_time\n \n-        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']\n+        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped'] + self.stats['error']\n \n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n         logfile.write(Junit.testsuite("
    },
    {
        "commit_id": "d5be6cba13d2c120be08d9dd9e886148475de9d7",
        "commit_message": "Merge pull request #1788 from nicoddemus/available-fixtures-sorted\n\nSort fixture names when a fixture lookup error occurs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d5be6cba13d2c120be08d9dd9e886148475de9d7",
        "buggy_code": "msg += \"\\n available fixtures: %s\" %(\", \".join(available),)",
        "fixed_code": "msg += \"\\n available fixtures: %s\" %(\", \".join(sorted(available)),)",
        "patch": "@@ -668,7 +668,7 @@ def formatrepr(self):\n                 if faclist and name not in available:\n                     available.append(name)\n             msg = \"fixture %r not found\" % (self.argname,)\n-            msg += \"\\n available fixtures: %s\" %(\", \".join(available),)\n+            msg += \"\\n available fixtures: %s\" %(\", \".join(sorted(available)),)\n             msg += \"\\n use 'pytest --fixtures [testpath]' for help on them.\"\n \n         return FixtureLookupErrorRepr(fspath, lineno, tblines, msg, self.argname)"
    },
    {
        "commit_id": "277b6d3974d4615592c3f67af299d9f90b854ff7",
        "commit_message": "Sort fixture names when a fixture lookup error occurs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/277b6d3974d4615592c3f67af299d9f90b854ff7",
        "buggy_code": "msg += \"\\n available fixtures: %s\" %(\", \".join(available),)",
        "fixed_code": "msg += \"\\n available fixtures: %s\" %(\", \".join(sorted(available)),)",
        "patch": "@@ -668,7 +668,7 @@ def formatrepr(self):\n                 if faclist and name not in available:\n                     available.append(name)\n             msg = \"fixture %r not found\" % (self.argname,)\n-            msg += \"\\n available fixtures: %s\" %(\", \".join(available),)\n+            msg += \"\\n available fixtures: %s\" %(\", \".join(sorted(available)),)\n             msg += \"\\n use 'pytest --fixtures [testpath]' for help on them.\"\n \n         return FixtureLookupErrorRepr(fspath, lineno, tblines, msg, self.argname)"
    },
    {
        "commit_id": "48f4e18280dfd87b4d8503f621a3f9514ffb0bf2",
        "commit_message": "fix deselect tests to match reason removal",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/48f4e18280dfd87b4d8503f621a3f9514ffb0bf2",
        "buggy_code": "\"=* 1 test*deselected by*test_two:*=\",",
        "fixed_code": "\"=* 1 test*deselected *=\",",
        "patch": "@@ -384,7 +384,7 @@ def test_three():\n         result = testdir.runpytest(\"-k\", \"test_two:\", testpath)\n         result.stdout.fnmatch_lines([\n             \"*test_deselected.py ..\",\n-            \"=* 1 test*deselected by*test_two:*=\",\n+            \"=* 1 test*deselected *=\",\n         ])\n         assert result.ret == 0\n "
    },
    {
        "commit_id": "76fbc6379f42c1a10736135106b48aca54766dde",
        "commit_message": "Fix deprecated directive in docstring",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/76fbc6379f42c1a10736135106b48aca54766dde",
        "buggy_code": ".. deprecated:: 1.10",
        "fixed_code": ".. deprecated:: 3.0",
        "patch": "@@ -874,7 +874,7 @@ def fixture(scope=\"function\", params=None, autouse=False, ids=None, name=None):\n def yield_fixture(scope=\"function\", params=None, autouse=False, ids=None, name=None):\n     \"\"\" (return a) decorator to mark a yield-fixture factory function.\n \n-    .. deprecated:: 1.10\n+    .. deprecated:: 3.0\n         Use :py:func:`pytest.fixture` directly instead.\n     \"\"\"\n     if callable(scope) and params is None and not autouse:"
    },
    {
        "commit_id": "c40dcb3c18896135cf3815b2f12e2896fd3258a6",
        "commit_message": "Merge pull request #1768 from ioggstream/1609-fix-description\n\nfix keep-duplicates help line.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c40dcb3c18896135cf3815b2f12e2896fd3258a6",
        "buggy_code": "help=\"Skip duplicate tests.\")",
        "fixed_code": "help=\"Keep duplicate tests.\")",
        "patch": "@@ -65,7 +65,7 @@ def pytest_addoption(parser):\n         help=\"Don't load any conftest.py files.\")\n     group.addoption('--keepduplicates', '--keep-duplicates', action=\"store_true\",\n         dest=\"keepduplicates\", default=False,\n-        help=\"Skip duplicate tests.\")\n+        help=\"Keep duplicate tests.\")\n \n     group = parser.getgroup(\"debugconfig\",\n         \"test session debugging and configuration\")"
    },
    {
        "commit_id": "05728d1317974cae6d51397075371d2a1d986eb3",
        "commit_message": "fix keep-duplicates help line.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/05728d1317974cae6d51397075371d2a1d986eb3",
        "buggy_code": "help=\"Skip duplicate tests.\")",
        "fixed_code": "help=\"Keep duplicate tests.\")",
        "patch": "@@ -65,7 +65,7 @@ def pytest_addoption(parser):\n         help=\"Don't load any conftest.py files.\")\n     group.addoption('--keepduplicates', '--keep-duplicates', action=\"store_true\",\n         dest=\"keepduplicates\", default=False,\n-        help=\"Skip duplicate tests.\")\n+        help=\"Keep duplicate tests.\")\n \n     group = parser.getgroup(\"debugconfig\",\n         \"test session debugging and configuration\")"
    },
    {
        "commit_id": "e9a67e6702c5780ab1fedf4de327214937590397",
        "commit_message": "Adjust test involving FixtureLookupErrorRepr\n\nI added a starting 'E' to the expected error messages.\n\nThe tests were still passing after the previous patch but I think it's\nbetter to have stricter tests.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e9a67e6702c5780ab1fedf4de327214937590397",
        "buggy_code": "\"*fixture 'invalid_fixture' not found\",",
        "fixed_code": "\"E*fixture 'invalid_fixture' not found\",",
        "patch": "@@ -376,7 +376,7 @@ def test_foo(invalid_fixture):\n         res = testdir.runpytest(p)\n         res.stdout.fnmatch_lines([\n             \"*source code not available*\",\n-            \"*fixture 'invalid_fixture' not found\",\n+            \"E*fixture 'invalid_fixture' not found\",\n         ])\n \n     def test_plugins_given_as_strings(self, tmpdir, monkeypatch):"
    },
    {
        "commit_id": "1a5e530b982dfe6f485a18f6861cc860a7d3ce73",
        "commit_message": "Fix capturing with --setup-only/--setup-plan",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1a5e530b982dfe6f485a18f6861cc860a7d3ce73",
        "buggy_code": "tw.write('{0}'.format(item._nodeid))",
        "fixed_code": "tw.write(item._nodeid)",
        "patch": "@@ -91,7 +91,7 @@ def show_test_item(item):\n     tw = item.config.get_terminal_writer()\n     tw.line()\n     tw.write(' ' * 8)\n-    tw.write('{0}'.format(item._nodeid))\n+    tw.write(item._nodeid)\n     used_fixtures = sorted(item._fixtureinfo.name2fixturedefs.keys())\n     if used_fixtures:\n         tw.write(' (fixtures used: {0})'.format(', '.join(used_fixtures)))"
    },
    {
        "commit_id": "6359e75ff8917c2335cd108d7eae988a1e8ad981",
        "commit_message": "Trivial spelling fix in runtest_setup.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6359e75ff8917c2335cd108d7eae988a1e8ad981",
        "buggy_code": "description=\"exemple of how embedding py.test into an executable using cx_freeze\",",
        "fixed_code": "description=\"example of how embedding py.test into an executable using cx_freeze\",",
        "patch": "@@ -8,7 +8,7 @@\n     setup(\r\n         name=\"runtests\",\r\n         version=\"0.1\",\r\n-        description=\"exemple of how embedding py.test into an executable using cx_freeze\",\r\n+        description=\"example of how embedding py.test into an executable using cx_freeze\",\r\n         executables=[Executable(\"runtests_script.py\")],\r\n         options={\"build_exe\": {'includes': pytest.freeze_includes()}},\r\n     )\r"
    },
    {
        "commit_id": "573866bfad10f9f5e8d70be936ca61f23e23ebb7",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into issue-1619-conftest-assert-rewrite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/573866bfad10f9f5e8d70be936ca61f23e23ebb7",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -231,6 +231,6 @@ def test_func():\n             pass\n     \"\"\")\n     result = testdir.runpytest(\"--resultlog=log\")\n-    assert result.ret == 1\n+    assert result.ret == 2\n \n "
    },
    {
        "commit_id": "573866bfad10f9f5e8d70be936ca61f23e23ebb7",
        "commit_message": "Merge remote-tracking branch 'upstream/features' into issue-1619-conftest-assert-rewrite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/573866bfad10f9f5e8d70be936ca61f23e23ebb7",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -273,7 +273,7 @@ def test_method(self):\n     def test_collectonly_error(self, testdir):\n         p = testdir.makepyfile(\"import Errlkjqweqwe\")\n         result = testdir.runpytest(\"--collect-only\", p)\n-        assert result.ret == 1\n+        assert result.ret == 2\n         result.stdout.fnmatch_lines(_pytest._code.Source(\"\"\"\n             *ERROR*\n             *ImportError*"
    },
    {
        "commit_id": "2305d3271d4c62c13dc26b01f78166509365ac06",
        "commit_message": "Merge pull request #1628 from omarkohl/exit_on_collection_error\n\nExit pytest on collection error (without executing tests)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2305d3271d4c62c13dc26b01f78166509365ac06",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -231,6 +231,6 @@ def test_func():\n             pass\n     \"\"\")\n     result = testdir.runpytest(\"--resultlog=log\")\n-    assert result.ret == 1\n+    assert result.ret == 2\n \n "
    },
    {
        "commit_id": "2305d3271d4c62c13dc26b01f78166509365ac06",
        "commit_message": "Merge pull request #1628 from omarkohl/exit_on_collection_error\n\nExit pytest on collection error (without executing tests)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2305d3271d4c62c13dc26b01f78166509365ac06",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -273,7 +273,7 @@ def test_method(self):\n     def test_collectonly_error(self, testdir):\n         p = testdir.makepyfile(\"import Errlkjqweqwe\")\n         result = testdir.runpytest(\"--collect-only\", p)\n-        assert result.ret == 1\n+        assert result.ret == 2\n         result.stdout.fnmatch_lines(_pytest._code.Source(\"\"\"\n             *ERROR*\n             *ImportError*"
    },
    {
        "commit_id": "ede7478dcc69ef0d1526346813ca32fb34ce0343",
        "commit_message": "Exit pytest on collection error (without executing tests)\n\nAdd --continue-on-collection-errors option to restore the previous behaviour:\nExecute tests (that were successfully collected) even when collection errors\nhappen.\n\nSome tests had to be modified e.g. because the return code changed to 2\n(EXIT_INTERRUPTED) instead of 1 (EXIT_TESTSFAILED) because an Interrupted\nexception is raised on collection error.\n\nImplemented via pair programming with:\n    Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>\n\ncloses #1421",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ede7478dcc69ef0d1526346813ca32fb34ce0343",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -231,6 +231,6 @@ def test_func():\n             pass\n     \"\"\")\n     result = testdir.runpytest(\"--resultlog=log\")\n-    assert result.ret == 1\n+    assert result.ret == 2\n \n "
    },
    {
        "commit_id": "ede7478dcc69ef0d1526346813ca32fb34ce0343",
        "commit_message": "Exit pytest on collection error (without executing tests)\n\nAdd --continue-on-collection-errors option to restore the previous behaviour:\nExecute tests (that were successfully collected) even when collection errors\nhappen.\n\nSome tests had to be modified e.g. because the return code changed to 2\n(EXIT_INTERRUPTED) instead of 1 (EXIT_TESTSFAILED) because an Interrupted\nexception is raised on collection error.\n\nImplemented via pair programming with:\n    Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>\n\ncloses #1421",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ede7478dcc69ef0d1526346813ca32fb34ce0343",
        "buggy_code": "assert result.ret == 1",
        "fixed_code": "assert result.ret == 2",
        "patch": "@@ -273,7 +273,7 @@ def test_method(self):\n     def test_collectonly_error(self, testdir):\n         p = testdir.makepyfile(\"import Errlkjqweqwe\")\n         result = testdir.runpytest(\"--collect-only\", p)\n-        assert result.ret == 1\n+        assert result.ret == 2\n         result.stdout.fnmatch_lines(_pytest._code.Source(\"\"\"\n             *ERROR*\n             *ImportError*"
    },
    {
        "commit_id": "54872e94b4f3437cb0052a83970133722e79eadd",
        "commit_message": "Fix test name typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/54872e94b4f3437cb0052a83970133722e79eadd",
        "buggy_code": "def test_costum_raise_message(self):",
        "fixed_code": "def test_custom_raise_message(self):",
        "patch": "@@ -87,7 +87,7 @@ def test_no_raise_message(self):\n         else:\n             assert False, \"Expected pytest.raises.Exception\"\n \n-    def test_costum_raise_message(self):\n+    def test_custom_raise_message(self):\n         message = \"TEST_MESSAGE\"\n         try:\n             with pytest.raises(ValueError, message=message):"
    },
    {
        "commit_id": "436e13ac2557e662ded50c36b5f264eae0c6c203",
        "commit_message": "Merge pull request #1566 from nicoddemus/fix-win32-path\n\nFix shell argument split in win32",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/436e13ac2557e662ded50c36b5f264eae0c6c203",
        "buggy_code": "args = shlex.split(args, posix=sys.platform == \"win32\")",
        "fixed_code": "args = shlex.split(args, posix=sys.platform != \"win32\")",
        "patch": "@@ -104,7 +104,7 @@ def _prepareconfig(args=None, plugins=None):\n     elif not isinstance(args, (tuple, list)):\n         if not isinstance(args, str):\n             raise ValueError(\"not a string or argument list: %r\" % (args,))\n-        args = shlex.split(args, posix=sys.platform == \"win32\")\n+        args = shlex.split(args, posix=sys.platform != \"win32\")\n     config = get_config()\n     pluginmanager = config.pluginmanager\n     try:"
    },
    {
        "commit_id": "9fb5ddf77890095a08553309e49467a1baf50c9b",
        "commit_message": "Fix shell argument split in win32\n\nThis fixes the bug inserted by accident in #1523",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9fb5ddf77890095a08553309e49467a1baf50c9b",
        "buggy_code": "args = shlex.split(args, posix=sys.platform == \"win32\")",
        "fixed_code": "args = shlex.split(args, posix=sys.platform != \"win32\")",
        "patch": "@@ -104,7 +104,7 @@ def _prepareconfig(args=None, plugins=None):\n     elif not isinstance(args, (tuple, list)):\n         if not isinstance(args, str):\n             raise ValueError(\"not a string or argument list: %r\" % (args,))\n-        args = shlex.split(args, posix=sys.platform == \"win32\")\n+        args = shlex.split(args, posix=sys.platform != \"win32\")\n     config = get_config()\n     pluginmanager = config.pluginmanager\n     try:"
    },
    {
        "commit_id": "5ab5a115440d7cd0d88870f77a660135d9d39e8b",
        "commit_message": "Merge pull request #1565 from tomviner/issue1544/ignore-build-dist-dirs\n\nIssue 1544: norecursedirs build & dist dirs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5ab5a115440d7cd0d88870f77a660135d9d39e8b",
        "buggy_code": "type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "fixed_code": "type=\"args\", default=['.*', 'build', 'dist', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "patch": "@@ -29,7 +29,7 @@\n \n def pytest_addoption(parser):\n     parser.addini(\"norecursedirs\", \"directory patterns to avoid for recursion\",\n-        type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])\n+        type=\"args\", default=['.*', 'build', 'dist', 'CVS', '_darcs', '{arch}', '*.egg'])\n     parser.addini(\"testpaths\", \"directories to search for tests when no files or directories are given in the command line.\",\n         type=\"args\", default=[])\n     #parser.addini(\"dirpatterns\","
    },
    {
        "commit_id": "d6dfb1a393c6c03f42ed419c085142a69bc7c9e1",
        "commit_message": "issue 1544: norecursedirs build & dist dirs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d6dfb1a393c6c03f42ed419c085142a69bc7c9e1",
        "buggy_code": "type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "fixed_code": "type=\"args\", default=['.*', 'build', 'dist', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "patch": "@@ -29,7 +29,7 @@\n \n def pytest_addoption(parser):\n     parser.addini(\"norecursedirs\", \"directory patterns to avoid for recursion\",\n-        type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])\n+        type=\"args\", default=['.*', 'build', 'dist', 'CVS', '_darcs', '{arch}', '*.egg'])\n     parser.addini(\"testpaths\", \"directories to search for tests when no files or directories are given in the command line.\",\n         type=\"args\", default=[])\n     #parser.addini(\"dirpatterns\","
    },
    {
        "commit_id": "ec5e05834fd261d6880bc8b5b9912fff13a6e05f",
        "commit_message": "fix typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ec5e05834fd261d6880bc8b5b9912fff13a6e05f",
        "buggy_code": "@pytest.mark.xfail(reason='callspec2.setmulti missuses keywords')",
        "fixed_code": "@pytest.mark.xfail(reason='callspec2.setmulti misuses keywords')",
        "patch": "@@ -563,7 +563,7 @@ def assert_markers(self, items, **expected):\n                                 if isinstance(v, MarkInfo)])\n             assert marker_names == set(expected_markers)\n \n-    @pytest.mark.xfail(reason='callspec2.setmulti missuses keywords')\n+    @pytest.mark.xfail(reason='callspec2.setmulti misuses keywords')\n     @pytest.mark.issue1540\n     def test_mark_from_parameters(self, testdir):\n         testdir.makepyfile(\"\"\""
    },
    {
        "commit_id": "c49863aa63e9311f912348208bb5ab8c104949ac",
        "commit_message": "merge next chunk from master and fix changelog linting issue",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c49863aa63e9311f912348208bb5ab8c104949ac",
        "buggy_code": "keywordexpr = config.option.keyword",
        "fixed_code": "keywordexpr = config.option.keyword.lstrip()",
        "patch": "@@ -58,7 +58,7 @@ def pytest_cmdline_main(config):\n \n \n def pytest_collection_modifyitems(items, config):\n-    keywordexpr = config.option.keyword\n+    keywordexpr = config.option.keyword.lstrip()\n     matchexpr = config.option.markexpr\n     if not keywordexpr and not matchexpr:\n         return"
    },
    {
        "commit_id": "8a94c66e6834e060e20d3bc6691594bf4bf42153",
        "commit_message": "Merge pull request #1551 from fushi/master\n\nFix #1549 - count skips in junit-xml",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8a94c66e6834e060e20d3bc6691594bf4bf42153",
        "buggy_code": "numtests = self.stats['passed'] + self.stats['failure']",
        "fixed_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']",
        "patch": "@@ -369,7 +369,7 @@ def pytest_sessionfinish(self):\n         suite_stop_time = time.time()\n         suite_time_delta = suite_stop_time - self.suite_start_time\n \n-        numtests = self.stats['passed'] + self.stats['failure']\n+        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']\n \n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n         logfile.write(Junit.testsuite("
    },
    {
        "commit_id": "0d07b645713d4a68acc651ba99ea9efc5d3f0307",
        "commit_message": "Fixes Issue 1549",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0d07b645713d4a68acc651ba99ea9efc5d3f0307",
        "buggy_code": "numtests = self.stats['passed'] + self.stats['failure']",
        "fixed_code": "numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']",
        "patch": "@@ -369,7 +369,7 @@ def pytest_sessionfinish(self):\n         suite_stop_time = time.time()\n         suite_time_delta = suite_stop_time - self.suite_start_time\n \n-        numtests = self.stats['passed'] + self.stats['failure']\n+        numtests = self.stats['passed'] + self.stats['failure'] + self.stats['skipped']\n \n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n         logfile.write(Junit.testsuite("
    },
    {
        "commit_id": "56855893ca21e57b644387b3d6ada05c3448440c",
        "commit_message": "Raise CollectError if import test module fails\n\nOne of the reasons for failing to import the test module is invalid Python\nidentifiers in the full package path of the test module.\n\nfix #1426",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/56855893ca21e57b644387b3d6ada05c3448440c",
        "buggy_code": "out = l[0].longrepr.reprcrash.message",
        "fixed_code": "out = str(l[0].longrepr)",
        "patch": "@@ -42,7 +42,7 @@ def test_this():\n         reprec = testdir.inline_run(tfile)\n         l = reprec.getfailedcollections()\n         assert len(l) == 1\n-        out = l[0].longrepr.reprcrash.message\n+        out = str(l[0].longrepr)\n         assert out.find('does_not_work') != -1\n \n     def test_raises_output(self, testdir):"
    },
    {
        "commit_id": "491b30c5d97a807e2d885bc6127c6f7e08e41a82",
        "commit_message": "Add Hypothesis test for _idval and fix bug it found",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/491b30c5d97a807e2d885bc6127c6f7e08e41a82",
        "buggy_code": "return val.decode('ascii')",
        "fixed_code": "return val.encode('ascii')",
        "patch": "@@ -1122,7 +1122,7 @@ def _escape_strings(val):\n         \"\"\"\n         if isinstance(val, bytes):\n             try:\n-                return val.decode('ascii')\n+                return val.encode('ascii')\n             except UnicodeDecodeError:\n                 return val.encode('string-escape')\n         else:"
    },
    {
        "commit_id": "491b30c5d97a807e2d885bc6127c6f7e08e41a82",
        "commit_message": "Add Hypothesis test for _idval and fix bug it found",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/491b30c5d97a807e2d885bc6127c6f7e08e41a82",
        "buggy_code": "@pytest.mark.parametrize('char', [\"\\\\x00\"])",
        "fixed_code": "@pytest.mark.parametrize('char', [u\"\\\\x00\"])",
        "patch": "@@ -610,7 +610,7 @@ def test_pass():\n def test_escaped_parametrized_names_xml(testdir):\n     testdir.makepyfile(\"\"\"\n         import pytest\n-        @pytest.mark.parametrize('char', [\"\\\\x00\"])\n+        @pytest.mark.parametrize('char', [u\"\\\\x00\"])\n         def test_func(char):\n             assert char\n     \"\"\")"
    },
    {
        "commit_id": "b631fc0bc1ad720b408b84964994641a631d3a74",
        "commit_message": "Fix test_escaped_parametrized_names_xml",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b631fc0bc1ad720b408b84964994641a631d3a74",
        "buggy_code": "node.assert_attr(name=\"test_func[#x00]\")",
        "fixed_code": "node.assert_attr(name=\"test_func[\\\\x00]\")",
        "patch": "@@ -617,7 +617,7 @@ def test_func(char):\n     result, dom = runandparse(testdir)\n     assert result.ret == 0\n     node = dom.find_first_by_tag(\"testcase\")\n-    node.assert_attr(name=\"test_func[#x00]\")\n+    node.assert_attr(name=\"test_func[\\\\x00]\")\n \n \n def test_double_colon_split_function_issue469(testdir):"
    },
    {
        "commit_id": "a736e267346f25005fc39c7f692262b696163dea",
        "commit_message": "Merge remote-tracking branch 'pytest-dev/master' into fix-issue-138",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a736e267346f25005fc39c7f692262b696163dea",
        "buggy_code": "__version__ = '2.9.1.dev1'",
        "fixed_code": "__version__ = '2.9.2.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.9.1.dev1'\n+__version__ = '2.9.2.dev1'"
    },
    {
        "commit_id": "a736e267346f25005fc39c7f692262b696163dea",
        "commit_message": "Merge remote-tracking branch 'pytest-dev/master' into fix-issue-138",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a736e267346f25005fc39c7f692262b696163dea",
        "buggy_code": "def pytest_load_initial_conftests(args, early_config, parser):",
        "fixed_code": "def pytest_load_initial_conftests(early_config, parser, args):",
        "patch": "@@ -81,7 +81,7 @@ def pytest_cmdline_main(config):\n     \"\"\" called for performing the main command line action. The default\n     implementation will invoke the configure hooks and runtest_mainloop. \"\"\"\n \n-def pytest_load_initial_conftests(args, early_config, parser):\n+def pytest_load_initial_conftests(early_config, parser, args):\n     \"\"\" implements the loading of initial conftest files ahead\n     of command line option parsing. \"\"\"\n "
    },
    {
        "commit_id": "19cec7936393e3a58f16864eae3ab32e0a1daec8",
        "commit_message": "Merge pull request #1451 from blueyed/fix-doc-pytest_load_initial_conftests\n\ndocs: sort arguments for pytest_load_initial_conftests\r\nthe change is purely cosmetic, but its nice to have them ordered by name",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/19cec7936393e3a58f16864eae3ab32e0a1daec8",
        "buggy_code": "def pytest_load_initial_conftests(args, early_config, parser):",
        "fixed_code": "def pytest_load_initial_conftests(early_config, parser, args):",
        "patch": "@@ -81,7 +81,7 @@ def pytest_cmdline_main(config):\n     \"\"\" called for performing the main command line action. The default\n     implementation will invoke the configure hooks and runtest_mainloop. \"\"\"\n \n-def pytest_load_initial_conftests(args, early_config, parser):\n+def pytest_load_initial_conftests(early_config, parser, args):\n     \"\"\" implements the loading of initial conftest files ahead\n     of command line option parsing. \"\"\"\n "
    },
    {
        "commit_id": "bdddc9c38bf60452741b6374fef153e5529f04c3",
        "commit_message": "doc: fix argument order for pytest_load_initial_conftests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bdddc9c38bf60452741b6374fef153e5529f04c3",
        "buggy_code": "def pytest_load_initial_conftests(args, early_config, parser):",
        "fixed_code": "def pytest_load_initial_conftests(early_config, parser, args):",
        "patch": "@@ -81,7 +81,7 @@ def pytest_cmdline_main(config):\n     \"\"\" called for performing the main command line action. The default\n     implementation will invoke the configure hooks and runtest_mainloop. \"\"\"\n \n-def pytest_load_initial_conftests(args, early_config, parser):\n+def pytest_load_initial_conftests(early_config, parser, args):\n     \"\"\" implements the loading of initial conftest files ahead\n     of command line option parsing. \"\"\"\n "
    },
    {
        "commit_id": "7d155bd3cff913dffbc5c813ee62ee05e2027eb1",
        "commit_message": "Fix sys.version_info errors.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7d155bd3cff913dffbc5c813ee62ee05e2027eb1",
        "buggy_code": "utf_8 = lambda s: s.encode('utf-8') if sys.version_info.major == 2 else s",
        "fixed_code": "utf_8 = lambda s: s.encode('utf-8') if sys.version_info[0] == 2 else s",
        "patch": "@@ -1417,7 +1417,7 @@ def __init__(self, expected, rel=None, abs=None):\n \n     def __repr__(self):\n         from collections import Iterable\n-        utf_8 = lambda s: s.encode('utf-8') if sys.version_info.major == 2 else s\n+        utf_8 = lambda s: s.encode('utf-8') if sys.version_info[0] == 2 else s\n         plus_minus = lambda x: utf_8(u'{0} \\u00b1 {1:.1e}'.format(x, self._get_margin(x)))\n \n         if isinstance(self.expected, Iterable):"
    },
    {
        "commit_id": "c9c73b8d8e8e985864569d93e012145c870c0929",
        "commit_message": "Fix zero-length field name error in python2.6",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c9c73b8d8e8e985864569d93e012145c870c0929",
        "buggy_code": "plus_minus = lambda x: utf_8(u'{} \\u00b1 {:.1e}'.format(x, self._get_margin(x)))",
        "fixed_code": "plus_minus = lambda x: utf_8(u'{0} \\u00b1 {1:.1e}'.format(x, self._get_margin(x)))",
        "patch": "@@ -1418,7 +1418,7 @@ def __init__(self, expected, rel=None, abs=None):\n     def __repr__(self):\n         from collections import Iterable\n         utf_8 = lambda s: s.encode('utf-8') if sys.version_info.major == 2 else s\n-        plus_minus = lambda x: utf_8(u'{} \\u00b1 {:.1e}'.format(x, self._get_margin(x)))\n+        plus_minus = lambda x: utf_8(u'{0} \\u00b1 {1:.1e}'.format(x, self._get_margin(x)))\n \n         if isinstance(self.expected, Iterable):\n             return ', '.join([plus_minus(x) for x in self.expected])"
    },
    {
        "commit_id": "6d4b14d7ee3c6bc31040226bf32e7c8e34db75bf",
        "commit_message": "Merge pull request #1438 from Bachmann1234/issue-1437\n\nMake a good faith effort to display a bytestring when one is provided\u2026",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6d4b14d7ee3c6bc31040226bf32e7c8e34db75bf",
        "buggy_code": "return val.pattern",
        "fixed_code": "return _escape_bytes(val.pattern) if isinstance(val.pattern, bytes) else val.pattern",
        "patch": "@@ -1115,7 +1115,7 @@ def _idval(val, argname, idx, idfn):\n     elif isinstance(val, (float, int, str, bool, NoneType)):\n         return str(val)\n     elif isinstance(val, REGEX_TYPE):\n-        return val.pattern\n+        return _escape_bytes(val.pattern) if isinstance(val.pattern, bytes) else val.pattern\n     elif enum is not None and isinstance(val, enum.Enum):\n         return str(val)\n     elif isclass(val) and hasattr(val, '__name__'):"
    },
    {
        "commit_id": "fd0010e6e9f656f8536f4914fe40dd86039cf045",
        "commit_message": "Merge pull request #1439 from pytest-dev/fix-1178\n\nSupport pytest.fail with non-ascii characters\r\n\r\nFixes #1178",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fd0010e6e9f656f8536f4914fe40dd86039cf045",
        "buggy_code": "return str(excinfo.value)",
        "fixed_code": "return py._builtin._totext(excinfo.value)",
        "patch": "@@ -740,7 +740,7 @@ def _prunetraceback(self, excinfo):\n     def _repr_failure_py(self, excinfo, style=\"long\"):\n         if excinfo.errisinstance(pytest.fail.Exception):\n             if not excinfo.value.pytrace:\n-                return str(excinfo.value)\n+                return py._builtin._totext(excinfo.value)\n         return super(FunctionMixin, self)._repr_failure_py(excinfo,\n             style=style)\n "
    },
    {
        "commit_id": "24d3e015481434657a71d9b5403cc7331e936fea",
        "commit_message": "pytest.fail with non-ascii characters raises an internal pytest error\n\nFix #1178",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/24d3e015481434657a71d9b5403cc7331e936fea",
        "buggy_code": "return str(excinfo.value)",
        "fixed_code": "return py._builtin._totext(excinfo.value)",
        "patch": "@@ -740,7 +740,7 @@ def _prunetraceback(self, excinfo):\n     def _repr_failure_py(self, excinfo, style=\"long\"):\n         if excinfo.errisinstance(pytest.fail.Exception):\n             if not excinfo.value.pytrace:\n-                return str(excinfo.value)\n+                return py._builtin._totext(excinfo.value)\n         return super(FunctionMixin, self)._repr_failure_py(excinfo,\n             style=style)\n "
    },
    {
        "commit_id": "24d3e015481434657a71d9b5403cc7331e936fea",
        "commit_message": "pytest.fail with non-ascii characters raises an internal pytest error\n\nFix #1178",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/24d3e015481434657a71d9b5403cc7331e936fea",
        "buggy_code": "return str(self.msg)",
        "fixed_code": "return py._builtin._totext(self.msg)",
        "patch": "@@ -435,7 +435,7 @@ def __init__(self, msg=None, pytrace=True):\n \n     def __repr__(self):\n         if self.msg:\n-            return str(self.msg)\n+            return py._builtin._totext(self.msg)\n         return \"<%s instance>\" %(self.__class__.__name__,)\n     __str__ = __repr__\n "
    },
    {
        "commit_id": "b64aaac7ec05a08da1bef4c930ed0a194c66e04c",
        "commit_message": "Merge pull request #1416 from blubber/fix-mark-documentation\n\nFix a typo in the docstring for mark.MarkGenerator",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b64aaac7ec05a08da1bef4c930ed0a194c66e04c",
        "buggy_code": "import py",
        "fixed_code": "import pytest",
        "patch": "@@ -169,7 +169,7 @@ class MarkGenerator:\n     \"\"\" Factory for :class:`MarkDecorator` objects - exposed as\n     a ``pytest.mark`` singleton instance.  Example::\n \n-         import py\n+         import pytest\n          @pytest.mark.slowtest\n          def test_function():\n             pass"
    },
    {
        "commit_id": "424b46de1b20bf85abf54ca5cc432da9593855f2",
        "commit_message": "Fix a typo in the docstring for mark.MarkGenerator",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/424b46de1b20bf85abf54ca5cc432da9593855f2",
        "buggy_code": "import py",
        "fixed_code": "import pytest",
        "patch": "@@ -169,7 +169,7 @@ class MarkGenerator:\n     \"\"\" Factory for :class:`MarkDecorator` objects - exposed as\n     a ``pytest.mark`` singleton instance.  Example::\n \n-         import py\n+         import pytest\n          @pytest.mark.slowtest\n          def test_function():\n             pass"
    },
    {
        "commit_id": "a912d3745bcbbc49999dc9becf0d5545849d44ea",
        "commit_message": "Moved py.code code over to py.test\n\nFix #103",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a912d3745bcbbc49999dc9becf0d5545849d44ea",
        "buggy_code": "packages=['_pytest', '_pytest.assertion', '_pytest.vendored_packages'],",
        "fixed_code": "packages=['_pytest', '_pytest.assertion', '_pytest._code', '_pytest.vendored_packages'],",
        "patch": "@@ -75,7 +75,7 @@ def main():\n         # the following should be enabled for release\n         install_requires=install_requires,\n         extras_require=extras_require,\n-        packages=['_pytest', '_pytest.assertion', '_pytest.vendored_packages'],\n+        packages=['_pytest', '_pytest.assertion', '_pytest._code', '_pytest.vendored_packages'],\n         py_modules=['pytest'],\n         zip_safe=False,\n     )"
    },
    {
        "commit_id": "1c70827f338395f4fedf5d4ca4fe202481403df5",
        "commit_message": "Merge pull request #1241 from nicoddemus/fix-deprecated-call-args\n\nFix deprecated_call regression introduced in 2.8.4",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1c70827f338395f4fedf5d4ca4fe202481403df5",
        "buggy_code": "def warn(message, category=None, **kwargs):",
        "fixed_code": "def warn(message, category=None, *args, **kwargs):",
        "patch": "@@ -42,7 +42,7 @@ def warn_explicit(message, category, *args, **kwargs):\n         categories.append(category)\n         old_warn_explicit(message, category, *args, **kwargs)\n \n-    def warn(message, category=None, **kwargs):\n+    def warn(message, category=None, *args, **kwargs):\n         if isinstance(message, Warning):\n             categories.append(message.__class__)\n         else:"
    },
    {
        "commit_id": "1c464629919e539c005fe514e172b6fee5acca52",
        "commit_message": "Fix deprecated_call regression introduced in 2.8.4\n\nFix #1238",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1c464629919e539c005fe514e172b6fee5acca52",
        "buggy_code": "def warn(message, category=None, **kwargs):",
        "fixed_code": "def warn(message, category=None, *args, **kwargs):",
        "patch": "@@ -42,7 +42,7 @@ def warn_explicit(message, category, *args, **kwargs):\n         categories.append(category)\n         old_warn_explicit(message, category, *args, **kwargs)\n \n-    def warn(message, category=None, **kwargs):\n+    def warn(message, category=None, *args, **kwargs):\n         if isinstance(message, Warning):\n             categories.append(message.__class__)\n         else:"
    },
    {
        "commit_id": "5eef6a28214b21be31843803614ed35a1da0c85b",
        "commit_message": "junitxml: fix python3 compat of the tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5eef6a28214b21be31843803614ed35a1da0c85b",
        "buggy_code": "return map(t, self.__node.getElementsByTagName(tag))",
        "fixed_code": "return [t(x) for x in self.__node.getElementsByTagName(tag)]",
        "patch": "@@ -52,7 +52,7 @@ def find_nth_by_tag(self, tag, n):\n \n     def find_by_tag(self, tag):\n         t = type(self)\n-        return map(t, self.__node.getElementsByTagName(tag))\n+        return [t(x) for x in self.__node.getElementsByTagName(tag)]\n \n     def __getitem__(self, key):\n         node = self.__node.getAttributeNode(key)"
    },
    {
        "commit_id": "6a2ebddc7c2fb6176d2b442c21239402da7b92ce",
        "commit_message": "Decode urlopen response in pastebin\n\nFix #1198",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6a2ebddc7c2fb6176d2b442c21239402da7b92ce",
        "buggy_code": "m = re.search(r'href=\"/raw/(\\w+)\"', response)",
        "fixed_code": "m = re.search(r'href=\"/raw/(\\w+)\"', response.decode())",
        "patch": "@@ -62,7 +62,7 @@ def create_new_paste(contents):\n     }\n     url = 'https://bpaste.net'\n     response = urlopen(url, data=urlencode(params).encode()).read()\n-    m = re.search(r'href=\"/raw/(\\w+)\"', response)\n+    m = re.search(r'href=\"/raw/(\\w+)\"', response.decode())\n     if m:\n         return '%s/show/%s' % (url, m.group(1))\n     else:"
    },
    {
        "commit_id": "def543924b91fdd1f93b8ef51440bcc2b4deded2",
        "commit_message": "Merge pull request #1209 from jeffwidman/master\n\nFix spelling: explicitely --> explicitly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/def543924b91fdd1f93b8ef51440bcc2b4deded2",
        "buggy_code": "\"\"\" explicitely fail an currently-executing test with the given Message.",
        "fixed_code": "\"\"\" explicitly fail an currently-executing test with the given Message.",
        "patch": "@@ -469,7 +469,7 @@ def skip(msg=\"\"):\n skip.Exception = Skipped\n \n def fail(msg=\"\", pytrace=True):\n-    \"\"\" explicitely fail an currently-executing test with the given Message.\n+    \"\"\" explicitly fail an currently-executing test with the given Message.\n \n     :arg pytrace: if false the msg represents the full failure information\n                   and no python traceback will be reported."
    },
    {
        "commit_id": "6be6798cdfedeffc0323375a9d095506f8c757ef",
        "commit_message": "Fix spelling: explicitely --> explicitly",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6be6798cdfedeffc0323375a9d095506f8c757ef",
        "buggy_code": "\"\"\" explicitely fail an currently-executing test with the given Message.",
        "fixed_code": "\"\"\" explicitly fail an currently-executing test with the given Message.",
        "patch": "@@ -469,7 +469,7 @@ def skip(msg=\"\"):\n skip.Exception = Skipped\n \n def fail(msg=\"\", pytrace=True):\n-    \"\"\" explicitely fail an currently-executing test with the given Message.\n+    \"\"\" explicitly fail an currently-executing test with the given Message.\n \n     :arg pytrace: if false the msg represents the full failure information\n                   and no python traceback will be reported."
    },
    {
        "commit_id": "ce4eb51ee0a41919e6314ee3d8388d105521e0e9",
        "commit_message": "Merge pull request #1208 from The-Compiler/no-tests-run-spelling\n\nFix spelling mistake in #1207.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ce4eb51ee0a41919e6314ee3d8388d105521e0e9",
        "buggy_code": "line = \"no tests run\"",
        "fixed_code": "line = \"no tests ran\"",
        "patch": "@@ -548,7 +548,7 @@ def build_summary_stats_line(stats):\n     if parts:\n         line = \", \".join(parts)\n     else:\n-        line = \"no tests run\"\n+        line = \"no tests ran\"\n \n     if 'failed' in stats or 'error' in stats:\n         color = 'red'"
    },
    {
        "commit_id": "0d2668017dcf2ac618dfaeff671c24b603b5e0ca",
        "commit_message": "Fix spelling mistake in #1207.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0d2668017dcf2ac618dfaeff671c24b603b5e0ca",
        "buggy_code": "line = \"no tests run\"",
        "fixed_code": "line = \"no tests ran\"",
        "patch": "@@ -548,7 +548,7 @@ def build_summary_stats_line(stats):\n     if parts:\n         line = \", \".join(parts)\n     else:\n-        line = \"no tests run\"\n+        line = \"no tests ran\"\n \n     if 'failed' in stats or 'error' in stats:\n         color = 'red'"
    },
    {
        "commit_id": "81ad1689b9961973c66d8454c03fe283b1973725",
        "commit_message": "fix #1198 - removed docoding the result",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/81ad1689b9961973c66d8454c03fe283b1973725",
        "buggy_code": "response = urlopen(url, data=urlencode(params).encode()).read().decode()",
        "fixed_code": "response = urlopen(url, data=urlencode(params).encode()).read()",
        "patch": "@@ -61,7 +61,7 @@ def create_new_paste(contents):\n         'expiry': '1week',\n     }\n     url = 'https://bpaste.net'\n-    response = urlopen(url, data=urlencode(params).encode()).read().decode()\n+    response = urlopen(url, data=urlencode(params).encode()).read()\n     m = re.search(r'href=\"/raw/(\\w+)\"', response)\n     if m:\n         return '%s/show/%s' % (url, m.group(1))"
    },
    {
        "commit_id": "44f60ba141204073983e99b56cfb8ce061bc01cc",
        "commit_message": "fixed #1198 issue by encoding the unicode parameters to bytes and decoding the\nbytes response to unicode",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/44f60ba141204073983e99b56cfb8ce061bc01cc",
        "buggy_code": "response = urlopen(url, data=urlencode(params)).read()",
        "fixed_code": "response = urlopen(url, data=urlencode(params).encode()).read().decode()",
        "patch": "@@ -61,7 +61,7 @@ def create_new_paste(contents):\n         'expiry': '1week',\n     }\n     url = 'https://bpaste.net'\n-    response = urlopen(url, data=urlencode(params)).read()\n+    response = urlopen(url, data=urlencode(params).encode()).read().decode()\n     m = re.search(r'href=\"/raw/(\\w+)\"', response)\n     if m:\n         return '%s/show/%s' % (url, m.group(1))"
    },
    {
        "commit_id": "8633c4cefde8dcedb715a20cdd0aa9705ea94be7",
        "commit_message": "Fix encoding errors for parametrized tests with unicode parameters in py2\n\nFix #1085",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8633c4cefde8dcedb715a20cdd0aa9705ea94be7",
        "buggy_code": "except UnicodeDecodeError:",
        "fixed_code": "except UnicodeError:",
        "patch": "@@ -1093,7 +1093,7 @@ def _idval(val, argname, idx, idfn):\n         # convertible to ascii, return it as an str() object instead\n         try:\n             return str(val)\n-        except UnicodeDecodeError:\n+        except UnicodeError:\n             # fallthrough\n             pass\n     return str(argname)+str(idx)"
    },
    {
        "commit_id": "95245b935c49e1b79fe666a645e43aede7a1992c",
        "commit_message": "- fix a flaky test on py35-xdist by calling\n  importlib.invalidate_caches()\n\n- bump version to 2.8.1\n\n- regen docs\n\n- amend changelog, authors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/95245b935c49e1b79fe666a645e43aede7a1992c",
        "buggy_code": "__version__ = '2.8.1.dev1'",
        "fixed_code": "__version__ = '2.8.1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.8.1.dev1'\n+__version__ = '2.8.1'"
    },
    {
        "commit_id": "c0c685a5de6f643c688a84228f27d5eb84ca26b6",
        "commit_message": "Merge pull request #1055 from nicoddemus/fix-help-pytest-warnings\n\n(w)warnings -> (w)pytest-warnings in \"-r chars\" help",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c0c685a5de6f643c688a84228f27d5eb84ca26b6",
        "buggy_code": "\"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings (a)all.\")",
        "fixed_code": "\"(E)error, (s)skipped, (x)failed, (X)passed (w)pytest-warnings (a)all.\")",
        "patch": "@@ -22,7 +22,7 @@ def pytest_addoption(parser):\n     group._addoption('-r',\n          action=\"store\", dest=\"reportchars\", default=None, metavar=\"chars\",\n          help=\"show extra test summary info as specified by chars (f)ailed, \"\n-              \"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings (a)all.\")\n+              \"(E)error, (s)skipped, (x)failed, (X)passed (w)pytest-warnings (a)all.\")\n     group._addoption('-l', '--showlocals',\n          action=\"store_true\", dest=\"showlocals\", default=False,\n          help=\"show locals in tracebacks (disabled by default).\")"
    },
    {
        "commit_id": "e4d5f8825733697a2ae816f8a0e8265ac4f188c3",
        "commit_message": "Fix install cx_freeze",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e4d5f8825733697a2ae816f8a0e8265ac4f188c3",
        "buggy_code": "os.chdir('%s/%s' % (basename, rootdir))",
        "fixed_code": "os.chdir('%s/%s' % (rootdir, basename))",
        "patch": "@@ -56,7 +56,7 @@\n     with open(setup_py_filename, 'w') as f:\r\n         f.writelines(lines)\r\n \r\n-    os.chdir('%s/%s' % (basename, rootdir))\r\n+    os.chdir('%s/%s' % (rootdir, basename))\r\n     res = os.system('python setup.py install')\r\n     if res != 0:\r\n         sys.exit(res)\r"
    },
    {
        "commit_id": "3a8e375efeac2c2f2a87d678606c76d1424650c6",
        "commit_message": "Fix import",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3a8e375efeac2c2f2a87d678606c76d1424650c6",
        "buggy_code": "rootdir = py.path.make_numbered_dir(prefix='cx_freeze')",
        "fixed_code": "rootdir = py.path.local.make_numbered_dir(prefix='cx_freeze')",
        "patch": "@@ -21,7 +21,7 @@\n             sys.exit(res)\r\n         sys.exit(0)\r\n \r\n-    rootdir = py.path.make_numbered_dir(prefix='cx_freeze')\r\n+    rootdir = py.path.local.make_numbered_dir(prefix='cx_freeze')\r\n \r\n     res = os.system('pip install --download %s --no-use-wheel '\r\n                     'cx_freeze' % rootdir)\r"
    },
    {
        "commit_id": "9c19728d2ba9da18b7face1e3b97fe3012ecfbb2",
        "commit_message": "Fix checking for args",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9c19728d2ba9da18b7face1e3b97fe3012ecfbb2",
        "buggy_code": "return inspect.getargspec(func)[0] is not None",
        "fixed_code": "return bool(inspect.getargspec(func).args)",
        "patch": "@@ -46,7 +46,7 @@ def _format_args(func):\n         return str(inspect.signature(func))\n else:\n     def _has_positional_arg(func):\n-        return inspect.getargspec(func)[0] is not None\n+        return bool(inspect.getargspec(func).args)\n \n     def _format_args(func):\n         return inspect.formatargspec(*inspect.getargspec(func))"
    },
    {
        "commit_id": "16720b96b4e3eeeed232afbdf87b6bed78fa7806",
        "commit_message": "fix a few issues with pytest-2.7 branch and bump version number\n- importorskip: skip a test if we have a minversion but cannot parse\n  version numbers due to pkg_resources not present\n- make runner tests work with latest xdist",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/16720b96b4e3eeeed232afbdf87b6bed78fa7806",
        "buggy_code": "__version__ = '2.7.2'",
        "fixed_code": "__version__ = '2.7.3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.7.2'\n+__version__ = '2.7.3'"
    },
    {
        "commit_id": "16720b96b4e3eeeed232afbdf87b6bed78fa7806",
        "commit_message": "fix a few issues with pytest-2.7 branch and bump version number\n- importorskip: skip a test if we have a minversion but cannot parse\n  version numbers due to pkg_resources not present\n- make runner tests work with latest xdist",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/16720b96b4e3eeeed232afbdf87b6bed78fa7806",
        "buggy_code": "xplugin = pytest.importorskip(\"xdist.plugin\")",
        "fixed_code": "xplugin = pytest.importorskip(\"xdist.boxed\")",
        "patch": "@@ -293,7 +293,7 @@ class TestExecutionForked(BaseFunctionalTests):\n \n     def getrunner(self):\n         # XXX re-arrange this test to live in pytest-xdist\n-        xplugin = pytest.importorskip(\"xdist.plugin\")\n+        xplugin = pytest.importorskip(\"xdist.boxed\")\n         return xplugin.forked_run_report\n \n     def test_suicide(self, testdir):"
    },
    {
        "commit_id": "dd6939459826001fd75de76787372d112143ff12",
        "commit_message": "Added testcase and help for report option\n\nFix added to show help of new reporting option 'a'.\nAlso, added testcase for checking reporting functionality\nwith option 'a'.\n\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd6939459826001fd75de76787372d112143ff12",
        "buggy_code": "\"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings.\")",
        "fixed_code": "\"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings (a)all.\")",
        "patch": "@@ -19,7 +19,7 @@ def pytest_addoption(parser):\n     group._addoption('-r',\n          action=\"store\", dest=\"reportchars\", default=None, metavar=\"chars\",\n          help=\"show extra test summary info as specified by chars (f)ailed, \"\n-              \"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings.\")\n+              \"(E)error, (s)skipped, (x)failed, (X)passed (w)warnings (a)all.\")\n     group._addoption('-l', '--showlocals',\n          action=\"store_true\", dest=\"showlocals\", default=False,\n          help=\"show locals in tracebacks (disabled by default).\")"
    },
    {
        "commit_id": "e59471766a00378912ebf403443e97f5efd8e199",
        "commit_message": "Rename \"warnings\" to \"pytest-warnings\" in terminal output\n\nFix #970",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e59471766a00378912ebf403443e97f5efd8e199",
        "buggy_code": "rex_outcome = re.compile(\"(\\d+) (\\w+)\")",
        "fixed_code": "rex_outcome = re.compile(\"(\\d+) ([\\w-]+)\")",
        "patch": "@@ -326,7 +326,7 @@ def testdir(request, tmpdir_factory):\n     return Testdir(request, tmpdir_factory)\n \n \n-rex_outcome = re.compile(\"(\\d+) (\\w+)\")\n+rex_outcome = re.compile(\"(\\d+) ([\\w-]+)\")\n class RunResult:\n     \"\"\"The result of running a command.\n "
    },
    {
        "commit_id": "a20c6d072d70c535ed1f116fc04016c834ea9c14",
        "commit_message": "Fix getdoctarget to ignore comment lines",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a20c6d072d70c535ed1f116fc04016c834ea9c14",
        "buggy_code": "if \"version\" in line:",
        "fixed_code": "if \"version\" in line and not line.strip().startswith('#'):",
        "patch": "@@ -6,7 +6,7 @@ def get_version_string():\n     fn = py.path.local(__file__).join(\"..\", \"..\", \"..\",\n                                       \"_pytest\", \"__init__.py\")\n     for line in fn.readlines():\n-        if \"version\" in line:\n+        if \"version\" in line and not line.strip().startswith('#'):\n             return eval(line.split(\"=\")[-1])\n \n def get_minor_version_string():"
    },
    {
        "commit_id": "41cef6f5f2a20b918bb9b9204ca6c91b47442d15",
        "commit_message": "Don't skip fixtures that are substrings of params\n\nBug introduced with\nhttps://bitbucket.org/pytest-dev/pytest/pull-requests/257/allow-to-override-parametrized-fixtures\n\nFix #736",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/41cef6f5f2a20b918bb9b9204ca6c91b47442d15",
        "buggy_code": "if argname not in func_params and argname not in func_params[0]:",
        "fixed_code": "if argname not in func_params:",
        "patch": "@@ -1818,7 +1818,7 @@ def pytest_generate_tests(self, metafunc):\n                 if fixturedef.params is not None:\n                     func_params = getattr(getattr(metafunc.function, 'parametrize', None), 'args', [[None]])\n                     # skip directly parametrized arguments\n-                    if argname not in func_params and argname not in func_params[0]:\n+                    if argname not in func_params:\n                         metafunc.parametrize(argname, fixturedef.params,\n                                              indirect=True, scope=fixturedef.scope,\n                                              ids=fixturedef.ids)"
    },
    {
        "commit_id": "4302972c237a17a6b8e834939169bb187ba644bb",
        "commit_message": "Use pytest-of-$user as base directory for tmpdir_factory\n\nBefore tmpdir_factory, pytest used to create a link named \"pytest-$user\" to the current numbered directory. Use\n a different name so there's no conflict when running different pytest versions.\n\nFix #894",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4302972c237a17a6b8e834939169bb187ba644bb",
        "buggy_code": "rootdir = temproot.join('pytest-%s' % getpass.getuser())",
        "fixed_code": "rootdir = temproot.join('pytest-of-%s' % getpass.getuser())",
        "patch": "@@ -56,7 +56,7 @@ def getbasetemp(self):\n                 # make_numbered_dir() call\n                 import getpass\n                 temproot = py.path.local.get_temproot()\n-                rootdir = temproot.join('pytest-%s' % getpass.getuser())\n+                rootdir = temproot.join('pytest-of-%s' % getpass.getuser())\n                 rootdir.ensure(dir=1)\n                 basetemp = py.path.local.make_numbered_dir(prefix='pytest-',\n                                                            rootdir=rootdir)"
    },
    {
        "commit_id": "5098e5fc47d0d7531a7501d0e8e72ea4c629de79",
        "commit_message": "fix version import",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5098e5fc47d0d7531a7501d0e8e72ea4c629de79",
        "buggy_code": "from _pytest import __version__",
        "fixed_code": "from _pytest import version as __version__",
        "patch": "@@ -15,7 +15,7 @@\n     main, UsageError, _preloadplugins, cmdline,\n     hookspec, hookimpl\n )\n-from _pytest import __version__\n+from _pytest import version as __version__\n \n _preloadplugins() # to populate pytest.* namespace so help(pytest) works\n "
    },
    {
        "commit_id": "f38c632635d9a63c8bfaecb822757ca2ac5480c4",
        "commit_message": "Merge branch 'jb-fix-751'",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f38c632635d9a63c8bfaecb822757ca2ac5480c4",
        "buggy_code": "self.kwargs = kwargs",
        "fixed_code": "self.kwargs = kwargs.copy()",
        "patch": "@@ -291,7 +291,7 @@ def __init__(self, name, args, kwargs):\n         #: positional argument list, empty if none specified\n         self.args = args\n         #: keyword argument dictionary, empty if nothing specified\n-        self.kwargs = kwargs\n+        self.kwargs = kwargs.copy()\n         self._arglist = [(args, kwargs.copy())]\n \n     def __repr__(self):"
    },
    {
        "commit_id": "251fc68ef91f2d74519e495bee02b2b2d6af4529",
        "commit_message": "Merge fix for #751\n\nMerge branch 'fix-751' of github.com:JanBednarik/pytest into jb-fix-751",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/251fc68ef91f2d74519e495bee02b2b2d6af4529",
        "buggy_code": "self.kwargs = kwargs",
        "fixed_code": "self.kwargs = kwargs.copy()",
        "patch": "@@ -291,7 +291,7 @@ def __init__(self, name, args, kwargs):\n         #: positional argument list, empty if none specified\n         self.args = args\n         #: keyword argument dictionary, empty if nothing specified\n-        self.kwargs = kwargs\n+        self.kwargs = kwargs.copy()\n         self._arglist = [(args, kwargs.copy())]\n \n     def __repr__(self):"
    },
    {
        "commit_id": "9906a19e295a7ce3710970e69a2b3b2f82b006b3",
        "commit_message": "Issue #751 - fix.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9906a19e295a7ce3710970e69a2b3b2f82b006b3",
        "buggy_code": "self.kwargs = kwargs",
        "fixed_code": "self.kwargs = kwargs.copy()",
        "patch": "@@ -291,7 +291,7 @@ def __init__(self, name, args, kwargs):\n         #: positional argument list, empty if none specified\n         self.args = args\n         #: keyword argument dictionary, empty if nothing specified\n-        self.kwargs = kwargs\n+        self.kwargs = kwargs.copy()\n         self._arglist = [(args, kwargs.copy())]\n \n     def __repr__(self):"
    },
    {
        "commit_id": "81f18f8a0fd29fddef12b4817c7a8f60678ac013",
        "commit_message": "Fix flakes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/81f18f8a0fd29fddef12b4817c7a8f60678ac013",
        "buggy_code": "import py, sys",
        "fixed_code": "import sys",
        "patch": "@@ -1,6 +1,6 @@\n \"\"\" submit failure or test session information to a pastebin service. \"\"\"\n import pytest\n-import py, sys\n+import sys\n import tempfile\n \n "
    },
    {
        "commit_id": "438ea86137b3dde860d940d5eb3997bbbd28ba1f",
        "commit_message": "Fix flaky test_timing_function in Windows\n\nThis tests fails consistently on Windows due to small time\ndifference:\n\n>       assert float(val) >= 0.03\nE       assert 0.0299999713898 >= 0.03\nE        +  where 0.0299999713898 = float('0.0299999713898')\n\nWindows time.time() function is not as accurate as linux's,\nso relaxed the test a bit.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/438ea86137b3dde860d940d5eb3997bbbd28ba1f",
        "buggy_code": "assert float(val) >= 0.03",
        "fixed_code": "assert round(float(val), 2) >= 0.03",
        "patch": "@@ -55,7 +55,7 @@ def test_sleep():\n         node = dom.getElementsByTagName(\"testsuite\")[0]\n         tnode = node.getElementsByTagName(\"testcase\")[0]\n         val = tnode.getAttributeNode(\"time\").value\n-        assert float(val) >= 0.03\n+        assert round(float(val), 2) >= 0.03\n \n     def test_setup_error(self, testdir):\n         testdir.makepyfile(\"\"\""
    },
    {
        "commit_id": "cb21d844d97ff31eeb8dca8c2e66e9d85d14e0fe",
        "commit_message": "Add missing \"error\" status to the list",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb21d844d97ff31eeb8dca8c2e66e9d85d14e0fe",
        "buggy_code": "\"xfailed xpassed warnings\").split()",
        "fixed_code": "\"xfailed xpassed warnings error\").split()",
        "patch": "@@ -527,7 +527,7 @@ def flatten(l):\n \n def build_summary_stats_line(stats):\n     keys = (\"failed passed skipped deselected \"\n-           \"xfailed xpassed warnings\").split()\n+           \"xfailed xpassed warnings error\").split()\n     for key in stats.keys():\n         if key not in keys:\n             if key: # setup/teardown reports have an empty key, ignore them"
    },
    {
        "commit_id": "173bd13ece77e4b88c49fa5c45c89290dca4f10e",
        "commit_message": "backport Y->y fix from floris\n\n--HG--\nbranch : pytest-2.7",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/173bd13ece77e4b88c49fa5c45c89290dca4f10e",
        "buggy_code": "pytest.fail(\"ScopeMismatch: you tried to access the %r scoped \"",
        "fixed_code": "pytest.fail(\"ScopeMismatch: You tried to access the %r scoped \"",
        "patch": "@@ -1451,7 +1451,7 @@ def _check_scope(self, argname, invoking_scope, requested_scope):\n         if scopemismatch(invoking_scope, requested_scope):\n             # try to report something helpful\n             lines = self._factorytraceback()\n-            pytest.fail(\"ScopeMismatch: you tried to access the %r scoped \"\n+            pytest.fail(\"ScopeMismatch: You tried to access the %r scoped \"\n                 \"fixture %r with a %r scoped request object, \"\n                 \"involved factories\\n%s\" %(\n                 (requested_scope, argname, invoking_scope, \"\\n\".join(lines))),"
    },
    {
        "commit_id": "d2a8866bced48411be883fb0fce4f2f7cabe71ec",
        "commit_message": "bump verrsion to python2.7, fix a too precise test for windows, regen docs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d2a8866bced48411be883fb0fce4f2f7cabe71ec",
        "buggy_code": "__version__ = '2.7.0.dev1'",
        "fixed_code": "__version__ = '2.7.0'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.7.0.dev1'\n+__version__ = '2.7.0'"
    },
    {
        "commit_id": "d2a8866bced48411be883fb0fce4f2f7cabe71ec",
        "commit_message": "bump verrsion to python2.7, fix a too precise test for windows, regen docs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d2a8866bced48411be883fb0fce4f2f7cabe71ec",
        "buggy_code": "version='2.7.0.dev1',",
        "fixed_code": "version='2.7.0',",
        "patch": "@@ -28,7 +28,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.7.0.dev1',\n+        version='2.7.0',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "5d6b0a59c0eb5a3c8a216bd6d88054c6b85b4210",
        "commit_message": "Strip docstrings in output with `--fixtures`\n\nFixes https://bitbucket.org/pytest-dev/pytest/issue/550.\n\n--HG--\nbranch : strip-docstrings-from-fixtures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5d6b0a59c0eb5a3c8a216bd6d88054c6b85b4210",
        "buggy_code": "for line in doc.split(\"\\n\"):",
        "fixed_code": "for line in doc.strip().split(\"\\n\"):",
        "patch": "@@ -979,7 +979,7 @@ def _showfixtures_main(config, session):\n         loc = getlocation(fixturedef.func, curdir)\n         doc = fixturedef.func.__doc__ or \"\"\n         if doc:\n-            for line in doc.split(\"\\n\"):\n+            for line in doc.strip().split(\"\\n\"):\n                 tw.line(\"    \" + line.strip())\n         else:\n             tw.line(\"    %s: no docstring available\" %(loc,),"
    },
    {
        "commit_id": "7371d436d21b3828295f4fb05808d43c119b8c7f",
        "commit_message": "Fix assertion.rewrite on read-only filesystem",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7371d436d21b3828295f4fb05808d43c119b8c7f",
        "buggy_code": "elif e == errno.EACCES:",
        "fixed_code": "elif e in [errno.EACCES, errno.EROFS]:",
        "patch": "@@ -122,7 +122,7 @@ def find_module(self, name, path=None):\n                     # One of the path components was not a directory, likely\n                     # because we're in a zip file.\n                     write = False\n-                elif e == errno.EACCES:\n+                elif e in [errno.EACCES, errno.EROFS]:\n                     state.trace(\"read only directory: %r\" % fn_pypath.dirname)\n                     write = False\n                 else:"
    },
    {
        "commit_id": "857db415bcade46119f674a1f575a8a03fa4ee17",
        "commit_message": "fix some spelling mistakes\n\n--HG--\nbranch : some_spelling_fixes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/857db415bcade46119f674a1f575a8a03fa4ee17",
        "buggy_code": "statenemts in an ast.Module and for each ast.Assert statement it",
        "fixed_code": "statements in an ast.Module and for each ast.Assert statement it",
        "patch": "@@ -455,7 +455,7 @@ class AssertionRewriter(ast.NodeVisitor):\n     for an overview of how this works.\n \n     The entry point here is .run() which will iterate over all the\n-    statenemts in an ast.Module and for each ast.Assert statement it\n+    statements in an ast.Module and for each ast.Assert statement it\n     finds call .visit() with it.  Then .visit_Assert() takes over and\n     is responsible for creating new ast statements to replace the\n     original assert statement: it re-writes the test of an assertion"
    },
    {
        "commit_id": "6ab36592ea6f3c0781e7273ef9b9a869211c2a2a",
        "commit_message": "docs for \"pytest_addhooks\" hook.  Thanks Bruno Oliveira.\n\nupdated plugin index docs.  Thanks Bruno Oliveira.\n\nfix issue557: with \"-k\" we only allow the old style \"-\" for negation\nat the beginning of strings and even that is deprecated.  Use \"not\" instead.\nThis should allow to pick parametrized tests where \"-\" appeared in the parameter.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6ab36592ea6f3c0781e7273ef9b9a869211c2a2a",
        "buggy_code": "type=\"args\", default=('.*', 'CVS', '_darcs', '{arch}', '*.egg'))",
        "fixed_code": "type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "patch": "@@ -24,7 +24,7 @@\n \n def pytest_addoption(parser):\n     parser.addini(\"norecursedirs\", \"directory patterns to avoid for recursion\",\n-        type=\"args\", default=('.*', 'CVS', '_darcs', '{arch}', '*.egg'))\n+        type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])\n     #parser.addini(\"dirpatterns\",\n     #    \"patterns specifying possible locations of test files\",\n     #    type=\"linelist\", default=[\"**/test_*.txt\","
    },
    {
        "commit_id": "c45b7012f544d867ebaff8bf113b43c431f4871d",
        "commit_message": "docs for \"pytest_addhooks\" hook.  Thanks Bruno Oliveira.\n\nupdated plugin index docs.  Thanks Bruno Oliveira.\n\nfix issue557: with \"-k\" we only allow the old style \"-\" for negation\nat the beginning of strings and even that is deprecated.  Use \"not\" instead.\nThis should allow to pick parametrized tests where \"-\" appeared in the parameter.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c45b7012f544d867ebaff8bf113b43c431f4871d",
        "buggy_code": "type=\"args\", default=('.*', 'CVS', '_darcs', '{arch}', '*.egg'))",
        "fixed_code": "type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])",
        "patch": "@@ -24,7 +24,7 @@\n \n def pytest_addoption(parser):\n     parser.addini(\"norecursedirs\", \"directory patterns to avoid for recursion\",\n-        type=\"args\", default=('.*', 'CVS', '_darcs', '{arch}', '*.egg'))\n+        type=\"args\", default=['.*', 'CVS', '_darcs', '{arch}', '*.egg'])\n     #parser.addini(\"dirpatterns\",\n     #    \"patterns specifying possible locations of test files\",\n     #    type=\"linelist\", default=[\"**/test_*.txt\","
    },
    {
        "commit_id": "b57545bd21ff6bf30651de1146b8a355a1486c54",
        "commit_message": "fix doc release version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b57545bd21ff6bf30651de1146b8a355a1486c54",
        "buggy_code": "release = \"2.6.2\"",
        "fixed_code": "release = \"2.6.3\"",
        "patch": "@@ -18,7 +18,7 @@\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n version = \"2.6\"\n-release = \"2.6.2\"\n+release = \"2.6.3\"\n \n import sys, os\n "
    },
    {
        "commit_id": "2eef674615f2c243af63418d4cd2316700212f58",
        "commit_message": "regen and fix some docs (tox -e regen)\nbump versions, depend on already released py-1.4.25",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2eef674615f2c243af63418d4cd2316700212f58",
        "buggy_code": "__version__ = '2.6.3.dev3'",
        "fixed_code": "__version__ = '2.6.3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.3.dev3'\n+__version__ = '2.6.3'"
    },
    {
        "commit_id": "7c1dadee51093a0494535c3e79a98ec9f50f5ab5",
        "commit_message": "Merged in conftest-nodeid (pull request #202)\n\nfix conftest related fixture visibility issue",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c1dadee51093a0494535c3e79a98ec9f50f5ab5",
        "buggy_code": "__version__ = '2.6.3.dev'",
        "fixed_code": "__version__ = '2.6.3.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.3.dev'\n+__version__ = '2.6.3.dev3'"
    },
    {
        "commit_id": "7c1dadee51093a0494535c3e79a98ec9f50f5ab5",
        "commit_message": "Merged in conftest-nodeid (pull request #202)\n\nfix conftest related fixture visibility issue",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c1dadee51093a0494535c3e79a98ec9f50f5ab5",
        "buggy_code": "version='2.6.3.dev',",
        "fixed_code": "version='2.6.3.dev3',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.6.3.dev',\n+        version='2.6.3.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "b6dcfd43776003bee3ad3515d5a1970a90a6035e",
        "commit_message": "fix conftest related fixture visibility issue: when running with a\nCWD outside a test package pytest would get fixture discovery wrong.\nThanks to Wolfgang Schnerring for figuring out a reproducable example.\n\n--HG--\nbranch : conftest-nodeid",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b6dcfd43776003bee3ad3515d5a1970a90a6035e",
        "buggy_code": "__version__ = '2.6.3.dev'",
        "fixed_code": "__version__ = '2.6.3.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.3.dev'\n+__version__ = '2.6.3.dev3'"
    },
    {
        "commit_id": "b6dcfd43776003bee3ad3515d5a1970a90a6035e",
        "commit_message": "fix conftest related fixture visibility issue: when running with a\nCWD outside a test package pytest would get fixture discovery wrong.\nThanks to Wolfgang Schnerring for figuring out a reproducable example.\n\n--HG--\nbranch : conftest-nodeid",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b6dcfd43776003bee3ad3515d5a1970a90a6035e",
        "buggy_code": "version='2.6.3.dev',",
        "fixed_code": "version='2.6.3.dev3',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.6.3.dev',\n+        version='2.6.3.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "1a80487e7164533af5e4b70d8f73edf098e22b36",
        "commit_message": "fix issue589: fix bad interaction with numpy and others when showing\nexceptions.  check for precise \"maximum recursion depth exceed\" exception\ninstead of presuming any RuntimeError is that one (implemented in py dep)\nThanks Charles Cloud for analysing the issue.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1a80487e7164533af5e4b70d8f73edf098e22b36",
        "buggy_code": "install_requires = ['py>=1.4.24']",
        "fixed_code": "install_requires = ['py>=1.4.25.dev2']",
        "patch": "@@ -17,7 +17,7 @@\n \n \n def main():\n-    install_requires = ['py>=1.4.24']\n+    install_requires = ['py>=1.4.25.dev2']\n     if sys.version_info < (2, 7) or (3,) <= sys.version_info < (3, 2):\n         install_requires.append('argparse')\n     if sys.platform == 'win32':"
    },
    {
        "commit_id": "09a44f4cac2e54c6dfd658205c3e0ba3127aa95e",
        "commit_message": "fix issue582: fix setuptools example, thanks Laszlo Papp and Ronny\nPfannschmidt.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/09a44f4cac2e54c6dfd658205c3e0ba3127aa95e",
        "buggy_code": "__version__ = '2.6.2'",
        "fixed_code": "__version__ = '2.6.3.dev'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.2'\n+__version__ = '2.6.3.dev'"
    },
    {
        "commit_id": "09a44f4cac2e54c6dfd658205c3e0ba3127aa95e",
        "commit_message": "fix issue582: fix setuptools example, thanks Laszlo Papp and Ronny\nPfannschmidt.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/09a44f4cac2e54c6dfd658205c3e0ba3127aa95e",
        "buggy_code": "version='2.6.2',",
        "fixed_code": "version='2.6.3.dev',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.6.2',\n+        version='2.6.3.dev',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "7760cf18814dd73e77f7c83463e165a268a1c7d3",
        "commit_message": "Fix doctest tox run\n\nThe new failures in the failure demo apparently affect the\ndoctests tox run.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7760cf18814dd73e77f7c83463e165a268a1c7d3",
        "buggy_code": "\"*39 failed*\"",
        "fixed_code": "\"*42 failed*\"",
        "patch": "@@ -9,6 +9,6 @@ def test_failure_demo_fails_properly(testdir):\n     failure_demo.copy(testdir.tmpdir.join(failure_demo.basename))\n     result = testdir.runpytest(target)\n     result.stdout.fnmatch_lines([\n-        \"*39 failed*\"\n+        \"*42 failed*\"\n     ])\n     assert result.ret != 0"
    },
    {
        "commit_id": "e98f77037e794bf805b4dcea2a2726c503c087a9",
        "commit_message": "fix issue561 example adapted to python3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e98f77037e794bf805b4dcea2a2726c503c087a9",
        "buggy_code": "__version__ = '2.6.1'",
        "fixed_code": "__version__ = '2.6.2.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.1'\n+__version__ = '2.6.2.dev1'"
    },
    {
        "commit_id": "e98f77037e794bf805b4dcea2a2726c503c087a9",
        "commit_message": "fix issue561 example adapted to python3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e98f77037e794bf805b4dcea2a2726c503c087a9",
        "buggy_code": "version='2.6.1',",
        "fixed_code": "version='2.6.2.dev1',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.6.1',\n+        version='2.6.2.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "1d7b574b31bc108ff1d49f4496cd96727c855e5e",
        "commit_message": "fix issue555: just add \"errors\" attribute to internal Capture stream.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1d7b574b31bc108ff1d49f4496cd96727c855e5e",
        "buggy_code": "__version__ = '2.6.1.dev2'",
        "fixed_code": "__version__ = '2.6.1.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.1.dev2'\n+__version__ = '2.6.1.dev3'"
    },
    {
        "commit_id": "1d7b574b31bc108ff1d49f4496cd96727c855e5e",
        "commit_message": "fix issue555: just add \"errors\" attribute to internal Capture stream.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1d7b574b31bc108ff1d49f4496cd96727c855e5e",
        "buggy_code": "version='2.6.1.dev2',",
        "fixed_code": "version='2.6.1.dev3',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='pytest: simple powerful testing with Python',\n         long_description=long_description,\n-        version='2.6.1.dev2',\n+        version='2.6.1.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "07e76cbef21522dbed9b83e78ae46f43d97ca62a",
        "commit_message": "fix issue364: shorten and enhance tracebacks representation by default.\nThe new \"--tb=auto\" option (default) will only display long tracebacks\nfor the first and last entry.  You can get the old behaviour of printing\nall entries as long entries with \"--tb=long\".  Also short entries by\ndefault are now printed very similarly to \"--tb=native\" ones.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/07e76cbef21522dbed9b83e78ae46f43d97ca62a",
        "buggy_code": "__version__ = '2.6.0.dev1'",
        "fixed_code": "__version__ = '2.6.0.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.6.0.dev1'\n+__version__ = '2.6.0.dev2'"
    },
    {
        "commit_id": "07e76cbef21522dbed9b83e78ae46f43d97ca62a",
        "commit_message": "fix issue364: shorten and enhance tracebacks representation by default.\nThe new \"--tb=auto\" option (default) will only display long tracebacks\nfor the first and last entry.  You can get the old behaviour of printing\nall entries as long entries with \"--tb=long\".  Also short entries by\ndefault are now printed very similarly to \"--tb=native\" ones.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/07e76cbef21522dbed9b83e78ae46f43d97ca62a",
        "buggy_code": "\">*asd*\",",
        "fixed_code": "\" *asd*\",",
        "patch": "@@ -641,7 +641,7 @@ def test_traceback_error_during_import(self, testdir):\n         assert \"x = 1\" not in out\n         assert \"x = 2\" not in out\n         result.stdout.fnmatch_lines([\n-            \">*asd*\",\n+            \" *asd*\",\n             \"E*NameError*\",\n         ])\n         result = testdir.runpytest(\"--fulltrace\")"
    },
    {
        "commit_id": "c66e9f8f0f51577c91cc44fbc365eb6dc3f93c54",
        "commit_message": "fix typo, thanks @dcramer",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c66e9f8f0f51577c91cc44fbc365eb6dc3f93c54",
        "buggy_code": ":arg nexitem: the scheduled-to-be-next test item (or None if this",
        "fixed_code": ":arg nextitem: the scheduled-to-be-next test item (or None if this",
        "patch": "@@ -152,7 +152,7 @@ def pytest_runtest_protocol(item, nextitem):\n \n     :arg item: test item for which the runtest protocol is performed.\n \n-    :arg nexitem: the scheduled-to-be-next test item (or None if this\n+    :arg nextitem: the scheduled-to-be-next test item (or None if this\n                   is the end my friend).  This argument is passed on to\n                   :py:func:`pytest_runtest_teardown`.\n "
    },
    {
        "commit_id": "fd9055fd116f5c36247a8e913f0f132e361072e6",
        "commit_message": "fix test on Python 3.2",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fd9055fd116f5c36247a8e913f0f132e361072e6",
        "buggy_code": "assert u'\\\\n}' == u''",
        "fixed_code": "assert '\\\\n}' == ''",
        "patch": "@@ -206,7 +206,7 @@ def test_speical_chars_full(self, testdir):\n         # Issue 453, for the bug this would raise IndexError\n         testdir.makepyfile(\"\"\"\n             def test_foo():\n-                assert u'\\\\n}' == u''\n+                assert '\\\\n}' == ''\n         \"\"\")\n         result = testdir.runpytest()\n         assert result.ret == 1"
    },
    {
        "commit_id": "b61ed2cf7ebb28faac79c699d8c5b3aefc692fcc",
        "commit_message": "Merged in jurko/pytest/python 3.1 fix (pull request #168)\n\nuse py.builtin.callable instead of raw callable in _pytest/runner.py",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b61ed2cf7ebb28faac79c699d8c5b3aefc692fcc",
        "buggy_code": "assert callable(finalizer)",
        "fixed_code": "assert py.builtin.callable(finalizer)",
        "patch": "@@ -328,7 +328,7 @@ def addfinalizer(self, finalizer, colitem):\n         is called at the end of teardown_all().\n         \"\"\"\n         assert colitem and not isinstance(colitem, tuple)\n-        assert callable(finalizer)\n+        assert py.builtin.callable(finalizer)\n         #assert colitem in self.stack  # some unit tests don't setup stack :/\n         self._finalizers.setdefault(colitem, []).append(finalizer)\n "
    },
    {
        "commit_id": "9263f30c888ee20742afe2dd727beaa8e6e181bf",
        "commit_message": "use py.builtin.callable instead of raw callable in _pytest/runner.py\n\nThis is consistent with how callable() is called from the rest of pytest code\n(see _pytest/nose.py & _pytest/python.py) plus, as a nice side-effect, it\nmakes pytest work correctly on Python 3.1.\n\n--HG--\nbranch : python 3.1 fix",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9263f30c888ee20742afe2dd727beaa8e6e181bf",
        "buggy_code": "assert callable(finalizer)",
        "fixed_code": "assert py.builtin.callable(finalizer)",
        "patch": "@@ -328,7 +328,7 @@ def addfinalizer(self, finalizer, colitem):\n         is called at the end of teardown_all().\n         \"\"\"\n         assert colitem and not isinstance(colitem, tuple)\n-        assert callable(finalizer)\n+        assert py.builtin.callable(finalizer)\n         #assert colitem in self.stack  # some unit tests don't setup stack :/\n         self._finalizers.setdefault(colitem, []).append(finalizer)\n "
    },
    {
        "commit_id": "84f9f45f984cbf0b4192cae49e51333767bb5576",
        "commit_message": "fix runtox.py failure when 'tox' is not available on the current system path\n\nNow just assumes that the tox module is available in the executing Python\nenvironment.\n\n--HG--\nbranch : jurko/tox_usage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/84f9f45f984cbf0b4192cae49e51333767bb5576",
        "buggy_code": "subprocess.call([\"tox\",",
        "fixed_code": "subprocess.call([sys.executable, \"-m\", \"tox\",",
        "patch": "@@ -4,7 +4,7 @@\n import sys\n \n if __name__ == \"__main__\":\n-    subprocess.call([\"tox\",\n+    subprocess.call([sys.executable, \"-m\", \"tox\",\n                      \"-i\", \"ALL=https://devpi.net/hpk/dev/\",\n                      \"--develop\",] + sys.argv[1:])\n "
    },
    {
        "commit_id": "e6859406f129c2579cf99147f1464e7fdeb4dfa5",
        "commit_message": "fix test on py33, thanks msabramo1",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e6859406f129c2579cf99147f1464e7fdeb4dfa5",
        "buggy_code": "os.write(1, \"hello\\\\n\")",
        "fixed_code": "os.write(1, b\"hello\\\\n\")",
        "patch": "@@ -1017,7 +1017,7 @@ def test_close_and_capture_again(testdir):\n         def test_close():\n             os.close(1)\n         def test_capture_again():\n-            os.write(1, \"hello\\\\n\")\n+            os.write(1, b\"hello\\\\n\")\n             assert 0\n     \"\"\")\n     result = testdir.runpytest()"
    },
    {
        "commit_id": "36288c51341267b2b506e0a2bbdbf20f52a6b2c4",
        "commit_message": "fix issue493: don't run tests in doc directory with ``python setup.py test``\n(use tox -e doctesting for that)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/36288c51341267b2b506e0a2bbdbf20f52a6b2c4",
        "buggy_code": "errno = subprocess.call([sys.executable, 'pytest.py'])",
        "fixed_code": "errno = subprocess.call([sys.executable, 'pytest.py', '--ignore=doc'])",
        "patch": "@@ -75,7 +75,7 @@ def run(self):\n         PPATH=[x for x in os.environ.get(\"PYTHONPATH\", \"\").split(\":\") if x]\n         PPATH.insert(0, os.getcwd())\n         os.environ[\"PYTHONPATH\"] = \":\".join(PPATH)\n-        errno = subprocess.call([sys.executable, 'pytest.py'])\n+        errno = subprocess.call([sys.executable, 'pytest.py', '--ignore=doc'])\n         raise SystemExit(errno)\n \n if __name__ == '__main__':"
    },
    {
        "commit_id": "3bca62e9e44e4b5384890974ad514a60b633a556",
        "commit_message": "fix issue436: improved finding of initial conftest files from command\nline arguments by using the result of parse_known_args rather than\nthe previous flaky heuristics.  Thanks Marc Abramowitz for tests\nand initial fixing approaches in this area.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3bca62e9e44e4b5384890974ad514a60b633a556",
        "buggy_code": "ns = parser.parse_known_args(args)",
        "fixed_code": "ns = early_config.known_args_namespace",
        "patch": "@@ -31,7 +31,7 @@ def pytest_addoption(parser):\n \n @pytest.mark.tryfirst\n def pytest_load_initial_conftests(early_config, parser, args, __multicall__):\n-    ns = parser.parse_known_args(args)\n+    ns = early_config.known_args_namespace\n     pluginmanager = early_config.pluginmanager\n     if ns.capture == \"no\":\n         return"
    },
    {
        "commit_id": "3bca62e9e44e4b5384890974ad514a60b633a556",
        "commit_message": "fix issue436: improved finding of initial conftest files from command\nline arguments by using the result of parse_known_args rather than\nthe previous flaky heuristics.  Thanks Marc Abramowitz for tests\nand initial fixing approaches in this area.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3bca62e9e44e4b5384890974ad514a60b633a556",
        "buggy_code": "config = testdir.parseconfig([str(o)])",
        "fixed_code": "config = testdir.parseconfig(str(o))",
        "patch": "@@ -148,7 +148,7 @@ def test_config_overwrite(self, testdir):\n         assert config.getvalue('x') == 1\n         config.option.x = 2\n         assert config.getvalue('x') == 2\n-        config = testdir.parseconfig([str(o)])\n+        config = testdir.parseconfig(str(o))\n         assert config.getvalue('x') == 1\n \n     def test_getconftest_pathlist(self, testdir, tmpdir):"
    },
    {
        "commit_id": "81f822d528ccfa7e003c70605c50e65331941bef",
        "commit_message": "Only try to remove hook from sys.meta_path if it's present\n\nPrevent error on exit if some code messes with sys.meta_path and removes the\nassertionrewrite hook (CaptureMock seems to do this):\n\n      File \"/Users/marca/dev/hg-repos/pytest/_pytest/assertion/__init__.py\", line 64, in pytest_unconfigure\n        sys.meta_path.remove(hook)\n    ValueError: list.remove(x): x not in list\n\n--HG--\nbranch : sys_meta_path_remove_hook_only_if_present",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/81f822d528ccfa7e003c70605c50e65331941bef",
        "buggy_code": "if hook is not None:",
        "fixed_code": "if hook is not None and hook in sys.meta_path:",
        "patch": "@@ -60,7 +60,7 @@ def pytest_configure(config):\n \n def pytest_unconfigure(config):\n     hook = config._assertstate.hook\n-    if hook is not None:\n+    if hook is not None and hook in sys.meta_path:\n         sys.meta_path.remove(hook)\n \n def pytest_collection(session):"
    },
    {
        "commit_id": "8af265da040494db9fbc8ea551c19d435ab2266c",
        "commit_message": "_pytest/config.py: In --help, show args with `=` instead of space.\n\nThe `=` is better because it encourages folks to use the form that doesn't\nsuffer from issue #436 (https://bitbucket.org/hpk42/pytest/issue/436), which\ncan cause the arg to be treated as an \"anchor\" and used as the (unexpected)\npath for searching for conftest.py files.\n\n--HG--\nbranch : help_show_args_with_equals_instead_of_space",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8af265da040494db9fbc8ea551c19d435ab2266c",
        "buggy_code": "return_list.append(option)",
        "fixed_code": "return_list.append(option.replace(' ', '='))",
        "patch": "@@ -436,7 +436,7 @@ def _format_action_invocation(self, action):\n             if len(option) == 2 or option[2] == ' ':\n                 return_list.append(option)\n             if option[2:] == short_long.get(option.replace('-', '')):\n-                return_list.append(option)\n+                return_list.append(option.replace(' ', '='))\n         action._formatted_action_invocation = ', '.join(return_list)\n         return action._formatted_action_invocation\n "
    },
    {
        "commit_id": "505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "commit_message": "fix flakes failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "buggy_code": "mod = pkg.join('module.py').ensure()",
        "fixed_code": "pkg.join('module.py').ensure()",
        "patch": "@@ -415,7 +415,7 @@ def test_translate_newlines(self, testdir):\n                         reason='packages without __init__.py not supported on python 2')\n     def test_package_without__init__py(self, testdir):\n         pkg = testdir.mkdir('a_package_without_init_py')\n-        mod = pkg.join('module.py').ensure()\n+        pkg.join('module.py').ensure()\n         testdir.makepyfile(\"import a_package_without_init_py.module\")\n         assert testdir.runpytest().ret == 0\n "
    },
    {
        "commit_id": "505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "commit_message": "fix flakes failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "buggy_code": "import py, pytest",
        "fixed_code": "import pytest",
        "patch": "@@ -1,4 +1,4 @@\n-import py, pytest\n+import pytest\n \n def setup_module(mod):\n     mod.nose = pytest.importorskip(\"nose\")"
    },
    {
        "commit_id": "505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "commit_message": "fix flakes failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "buggy_code": "import pytest, py",
        "fixed_code": "import pytest",
        "patch": "@@ -1,4 +1,4 @@\n-import pytest, py\n+import pytest\n \n class SessionTests:\n     def test_basic_testitem_events(self, testdir):"
    },
    {
        "commit_id": "505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "commit_message": "fix flakes failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/505a34bb857675d8c6e5f73fee110a2cf6c151e9",
        "buggy_code": "import py, pytest",
        "fixed_code": "import pytest",
        "patch": "@@ -1,4 +1,4 @@\n-import py, pytest\n+import pytest\n \n from _pytest.tmpdir import tmpdir, TempdirHandler\n "
    },
    {
        "commit_id": "cccfaa81fb677026d45fea640b1a2a1126f29cb9",
        "commit_message": "fix issue413: exceptions with unicode attributes are now printed\ncorrectly also on python2 and with pytest-xdist runs. (the fix\nrequires py-1.4.20)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cccfaa81fb677026d45fea640b1a2a1126f29cb9",
        "buggy_code": "install_requires = [\"py>=1.4.19\"]",
        "fixed_code": "install_requires = [\"py>=1.4.20.dev2\"]",
        "patch": "@@ -17,7 +17,7 @@\n \n long_description = open(\"README.rst\").read()\n def main():\n-    install_requires = [\"py>=1.4.19\"]\n+    install_requires = [\"py>=1.4.20.dev2\"]\n     if sys.version_info < (2,7):\n         install_requires.append(\"argparse\")\n     if sys.platform == \"win32\":"
    },
    {
        "commit_id": "e12fe64b54253f6a19dd98e631e560e8d2bfe6de",
        "commit_message": "Include py version in the terminal output\n\nThis can help to reproduce bugs when looking at the output pasted into\nbug reports.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e12fe64b54253f6a19dd98e631e560e8d2bfe6de",
        "buggy_code": "msg += \" -- pytest-%s\" % (pytest.__version__)",
        "fixed_code": "msg += \" -- py-%s -- pytest-%s\" % (py.__version__, pytest.__version__)",
        "patch": "@@ -259,7 +259,7 @@ def pytest_sessionstart(self, session):\n         if hasattr(sys, 'pypy_version_info'):\n             verinfo = \".\".join(map(str, sys.pypy_version_info[:3]))\n             msg += \"[pypy-%s-%s]\" % (verinfo, sys.pypy_version_info[3])\n-        msg += \" -- pytest-%s\" % (pytest.__version__)\n+        msg += \" -- py-%s -- pytest-%s\" % (py.__version__, pytest.__version__)\n         if self.verbosity > 0 or self.config.option.debug or \\\n            getattr(self.config.option, 'pastebin', None):\n             msg += \" -- \" + str(sys.executable)"
    },
    {
        "commit_id": "657a3958399539c4fe35b8912343ee27a51a1f0f",
        "commit_message": "fix comment typos",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/657a3958399539c4fe35b8912343ee27a51a1f0f",
        "buggy_code": "getcfg([''], ['setup.cfg']) #happens on py.test  \"\"",
        "fixed_code": "getcfg([''], ['setup.cfg']) #happens on py.test \"\"",
        "patch": "@@ -16,7 +16,7 @@ def test_getcfg_and_config(self, testdir, tmpdir):\n         assert config.inicfg['name'] == 'value'\n \n     def test_getcfg_empty_path(self, tmpdir):\n-        getcfg([''], ['setup.cfg']) #happens on py.test  \"\"\n+        getcfg([''], ['setup.cfg']) #happens on py.test \"\"\n \n     def test_append_parse_args(self, testdir, tmpdir):\n         tmpdir.join(\"setup.cfg\").write(py.code.Source(\"\"\""
    },
    {
        "commit_id": "49b9f9091a1b3f8308bbc3f1b073400dedfb8470",
        "commit_message": "Merge pull request #9 from lukaszb/mark-error-message\n\nUpdated error message to be more helpful.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/49b9f9091a1b3f8308bbc3f1b073400dedfb8470",
        "buggy_code": "raise AttributeError(name)",
        "fixed_code": "raise AttributeError(\"Marker name must NOT start with underscore\")",
        "patch": "@@ -169,7 +169,7 @@ def test_function():\n \n     def __getattr__(self, name):\n         if name[0] == \"_\":\n-            raise AttributeError(name)\n+            raise AttributeError(\"Marker name must NOT start with underscore\")\n         if hasattr(self, '_config'):\n             self._check(name)\n         return MarkDecorator(name)"
    },
    {
        "commit_id": "99277be25fdcff387098983b7a29b6fb792b8d73",
        "commit_message": "Updated error message to be more helpful\n\nAlso, added misssing test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/99277be25fdcff387098983b7a29b6fb792b8d73",
        "buggy_code": "raise AttributeError(name)",
        "fixed_code": "raise AttributeError(\"Marker name must NOT start with underscore\")",
        "patch": "@@ -169,7 +169,7 @@ def test_function():\n \n     def __getattr__(self, name):\n         if name[0] == \"_\":\n-            raise AttributeError(name)\n+            raise AttributeError(\"Marker name must NOT start with underscore\")\n         if hasattr(self, '_config'):\n             self._check(name)\n         return MarkDecorator(name)"
    },
    {
        "commit_id": "699892bd035b756740c08c5af1bb933c1983b4f5",
        "commit_message": "fix issue409 -- better interoperate with cx_freeze by not\ntrying to import from collections.abc which causes problems for py27/cx_freeze.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/699892bd035b756740c08c5af1bb933c1983b4f5",
        "buggy_code": "__version__ = '2.5.1'",
        "fixed_code": "__version__ = '2.5.2.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.5.1'\n+__version__ = '2.5.2.dev1'"
    },
    {
        "commit_id": "699892bd035b756740c08c5af1bb933c1983b4f5",
        "commit_message": "fix issue409 -- better interoperate with cx_freeze by not\ntrying to import from collections.abc which causes problems for py27/cx_freeze.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/699892bd035b756740c08c5af1bb933c1983b4f5",
        "buggy_code": "version='2.5.1',",
        "fixed_code": "version='2.5.2.dev1',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.5.1',\n+        version='2.5.2.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "5a13f31bce4f594b05bf67af84689ff8a3b15e6d",
        "commit_message": "fix issue407: fix addoption docstring to point to argparse instead of\noptparse. Thanks Daniel D. Wright.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5a13f31bce4f594b05bf67af84689ff8a3b15e6d",
        "buggy_code": "__version__ = '2.5.0'",
        "fixed_code": "__version__ = '2.5.1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.5.0'\n+__version__ = '2.5.1'"
    },
    {
        "commit_id": "5a13f31bce4f594b05bf67af84689ff8a3b15e6d",
        "commit_message": "fix issue407: fix addoption docstring to point to argparse instead of\noptparse. Thanks Daniel D. Wright.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5a13f31bce4f594b05bf67af84689ff8a3b15e6d",
        "buggy_code": "version='2.5.0',",
        "fixed_code": "version='2.5.1',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.5.0',\n+        version='2.5.1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "fa80b8ad1782f4dc5754e6dc355eb1bc2aba095b",
        "commit_message": "add changelog: fix issue319 - correctly show unicode in assertion errors.  Many\nthanks to Floris Bruynooghe for the complete PR.  Also means\nwe depend on py>=1.4.19 now.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fa80b8ad1782f4dc5754e6dc355eb1bc2aba095b",
        "buggy_code": "__version__ = '2.4.3.dev2'",
        "fixed_code": "__version__ = '2.5.0.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.3.dev2'\n+__version__ = '2.5.0.dev1'"
    },
    {
        "commit_id": "97252a8b66dddae845d23bdff80625c6a8d270bb",
        "commit_message": "fix issues link",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/97252a8b66dddae845d23bdff80625c6a8d270bb",
        "buggy_code": "link = \"https://bitbucket.org/hpk42/pytest/issues/%s/\" % id",
        "fixed_code": "link = \"https://bitbucket.org/hpk42/pytest/issue/%s/\" % id",
        "patch": "@@ -53,7 +53,7 @@ def report(issues):\n         kind = metadata[\"kind\"]\n         status = issue[\"status\"]\n         id = issue[\"local_id\"]\n-        link = \"https://bitbucket.org/hpk42/pytest/issues/%s/\" % id\n+        link = \"https://bitbucket.org/hpk42/pytest/issue/%s/\" % id\n         print(\"----\")\n         print(status, kind, link)\n         print(title)"
    },
    {
        "commit_id": "4eeb1c4f316d9ef0943ec6a2db3f4afbc7ada8fb",
        "commit_message": "Merged in paylogic/pytest/fix-fixturedef-merge (pull request #86)\n\ncorrectly check for fixturedef when  merging",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4eeb1c4f316d9ef0943ec6a2db3f4afbc7ada8fb",
        "buggy_code": "if fixturedefs is not None:",
        "fixed_code": "if fixturedefs:",
        "patch": "@@ -1555,7 +1555,7 @@ def merge(otherlist):\n                     continue\n                 fixturedefs = self.getfixturedefs(argname, parentid)\n                 arg2fixturedefs[argname] = fixturedefs\n-                if fixturedefs is not None:\n+                if fixturedefs:\n                     merge(fixturedefs[-1].argnames)\n         return fixturenames_closure, arg2fixturedefs\n "
    },
    {
        "commit_id": "e2c4730e17bd418a5d26a3112fcfbbe88c7e7d68",
        "commit_message": "correctly check for fixturedef when  merging\n\n--HG--\nbranch : fix-fixturedef-merge",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e2c4730e17bd418a5d26a3112fcfbbe88c7e7d68",
        "buggy_code": "if fixturedefs is not None:",
        "fixed_code": "if fixturedefs:",
        "patch": "@@ -1555,7 +1555,7 @@ def merge(otherlist):\n                     continue\n                 fixturedefs = self.getfixturedefs(argname, parentid)\n                 arg2fixturedefs[argname] = fixturedefs\n-                if fixturedefs is not None:\n+                if fixturedefs:\n                     merge(fixturedefs[-1].argnames)\n         return fixturenames_closure, arg2fixturedefs\n "
    },
    {
        "commit_id": "cf9d34538266de8c55d49f8b391850d746b41426",
        "commit_message": "fix unicode handling with junitxml, fixes issue368.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cf9d34538266de8c55d49f8b391850d746b41426",
        "buggy_code": "__version__ = '2.4.3.dev1'",
        "fixed_code": "__version__ = '2.4.3.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.3.dev1'\n+__version__ = '2.4.3.dev2'"
    },
    {
        "commit_id": "cf9d34538266de8c55d49f8b391850d746b41426",
        "commit_message": "fix unicode handling with junitxml, fixes issue368.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cf9d34538266de8c55d49f8b391850d746b41426",
        "buggy_code": "version='2.4.3.dev1',",
        "fixed_code": "version='2.4.3.dev2',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.3.dev1',\n+        version='2.4.3.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "pluginmanager.config = config = Config(pluginmanager) # XXX attr needed?",
        "fixed_code": "pluginmanager.config = Config(pluginmanager) # XXX attr needed?",
        "patch": "@@ -41,7 +41,7 @@ def get_plugin_manager():\n         return _preinit.pop(0)\n     # subsequent calls to main will create a fresh instance\n     pluginmanager = PytestPluginManager()\n-    pluginmanager.config = config = Config(pluginmanager) # XXX attr needed?\n+    pluginmanager.config = Config(pluginmanager) # XXX attr needed?\n     for spec in default_plugins:\n         pluginmanager.import_plugin(spec)\n     return pluginmanager"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "import pytest, py, sys",
        "fixed_code": "import pytest",
        "patch": "@@ -1,4 +1,4 @@\n-import pytest, py, sys\n+import pytest\n from _pytest import runner\n \n class TestOEJSKITSpecials:"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "from _pytest.assertion.util import BuiltinAssertionError",
        "fixed_code": "from _pytest.assertion.util import BuiltinAssertionError # noqa",
        "patch": "@@ -29,7 +29,7 @@ def __call__(self):\n     def test_raises_flip_builtin_AssertionError(self):\n         # we replace AssertionError on python level\n         # however c code might still raise the builtin one\n-        from _pytest.assertion.util import BuiltinAssertionError\n+        from _pytest.assertion.util import BuiltinAssertionError # noqa\n         pytest.raises(AssertionError,\"\"\"\n             raise BuiltinAssertionError\n         \"\"\")"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "import py, pytest,os",
        "fixed_code": "import py, pytest",
        "patch": "@@ -1,4 +1,4 @@\n-import py, pytest,os\n+import py, pytest\n from _pytest.helpconfig import collectattr\n \n def test_version(testdir, pytestconfig):"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "p = testdir.makepyfile(\"\"\"",
        "fixed_code": "testdir.makepyfile(\"\"\"",
        "patch": "@@ -96,7 +96,7 @@ def test_world():\n \n \n def test_nose_setup_func_failure_2(testdir):\n-    p = testdir.makepyfile(\"\"\"\n+    testdir.makepyfile(\"\"\"\n         l = []\n \n         my_setup = 1"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "config = pytest.raises(ImportError, \"\"\"",
        "fixed_code": "pytest.raises(ImportError, \"\"\"",
        "patch": "@@ -204,7 +204,7 @@ def test_minus_x_import_error(self, testdir):\n \n def test_plugin_specify(testdir):\n     testdir.chdir()\n-    config = pytest.raises(ImportError, \"\"\"\n+    pytest.raises(ImportError, \"\"\"\n             testdir.parseconfig(\"-p\", \"nqweotexistent\")\n     \"\"\")\n     #pytest.raises(ImportError,"
    },
    {
        "commit_id": "8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "commit_message": "fix flakes issues and make --flakes run part of tox runs",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8ac5af289666e023aa4189fb62d28d406b9e6bb6",
        "buggy_code": "testpath=testdir.makepyfile(\"\"\"",
        "fixed_code": "testdir.makepyfile(\"\"\"",
        "patch": "@@ -15,7 +15,7 @@ def test_failing(self):\n     assert reprec.matchreport(\"test_failing\").failed\n \n def test_runTest_method(testdir):\n-    testpath=testdir.makepyfile(\"\"\"\n+    testdir.makepyfile(\"\"\"\n         import unittest\n         pytest_plugins = \"pytest_unittest\"\n         class MyTestCaseWithRunTest(unittest.TestCase):"
    },
    {
        "commit_id": "56e6ae567c85106cdc24d00c8e901126a689f287",
        "commit_message": "fix detection of the coding cookie when it is on the second line of the file (fixes #330)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/56e6ae567c85106cdc24d00c8e901126a689f287",
        "buggy_code": "cookie_re.match(source[end1:end2]) is None):",
        "fixed_code": "cookie_re.match(source[end1 + 1:end2]) is None):",
        "patch": "@@ -221,7 +221,7 @@ def _rewrite_test(state, fn):\n         end2 = source.find(\"\\n\", end1 + 1)\n         if (not source.startswith(BOM_UTF8) and\n             cookie_re.match(source[0:end1]) is None and\n-            cookie_re.match(source[end1:end2]) is None):\n+            cookie_re.match(source[end1 + 1:end2]) is None):\n             if hasattr(state, \"_indecode\"):\n                 return None  # encodings imported us again, we don't rewrite\n             state._indecode = True"
    },
    {
        "commit_id": "cb65c56037dbef55c69e85adf27b843233e2ff34",
        "commit_message": "fix issue365 and depend on a newer py versions which uses colorama\nfor coloring instead of its own ctypes hacks.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cb65c56037dbef55c69e85adf27b843233e2ff34",
        "buggy_code": "__version__ = '2.4.2.dev1'",
        "fixed_code": "__version__ = '2.4.2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.2.dev1'\n+__version__ = '2.4.2'"
    },
    {
        "commit_id": "071960250f6e52d37f8511dd2c5672967cb2e5e2",
        "commit_message": "avoid \"IOError: Bad Filedescriptor\" on pytest shutdown by not closing\nthe internal dupped stdout (fix is slightly hand-wavy but work).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/071960250f6e52d37f8511dd2c5672967cb2e5e2",
        "buggy_code": "__version__ = '2.4.1'",
        "fixed_code": "__version__ = '2.4.2.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.1'\n+__version__ = '2.4.2.dev1'"
    },
    {
        "commit_id": "071960250f6e52d37f8511dd2c5672967cb2e5e2",
        "commit_message": "avoid \"IOError: Bad Filedescriptor\" on pytest shutdown by not closing\nthe internal dupped stdout (fix is slightly hand-wavy but work).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/071960250f6e52d37f8511dd2c5672967cb2e5e2",
        "buggy_code": "version='2.4.1',",
        "fixed_code": "version='2.4.2.dev1',",
        "patch": "@@ -11,7 +11,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.1',\n+        version='2.4.2.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "commit_message": "fix some tests wrt to expecting output now that pytest does no\nintroduce unwanted \"buffering\" on \"-s\" calls.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "buggy_code": "marker.yieldctx,",
        "fixed_code": "yieldctx=marker.yieldctx,",
        "patch": "@@ -1623,7 +1623,7 @@ def parsefactories(self, node_or_obj, nodeid=_dummy, unittest=False):\n                 assert not name.startswith(self._argprefix)\n             fixturedef = FixtureDef(self, nodeid, name, obj,\n                                     marker.scope, marker.params,\n-                                    marker.yieldctx,\n+                                    yieldctx=marker.yieldctx,\n                                     unittest=unittest)\n             faclist = self._arg2fixturedefs.setdefault(name, [])\n             if not fixturedef.has_location:"
    },
    {
        "commit_id": "da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "commit_message": "fix some tests wrt to expecting output now that pytest does no\nintroduce unwanted \"buffering\" on \"-s\" calls.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "buggy_code": "reprec.stdout.fnmatch_lines('Finalized')",
        "fixed_code": "reprec.stdout.fnmatch_lines('*Finalized*')",
        "patch": "@@ -28,4 +28,4 @@ def test_browser(browser):\n     \"\"\"))\n     reprec = testdir.runpytest(\"-s\")\n     for test in ['test_browser']:\n-        reprec.stdout.fnmatch_lines('Finalized')\n+        reprec.stdout.fnmatch_lines('*Finalized*')"
    },
    {
        "commit_id": "da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "commit_message": "fix some tests wrt to expecting output now that pytest does no\nintroduce unwanted \"buffering\" on \"-s\" calls.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da7133d2018ae3aeb58dd4348889e8927ed247ab",
        "buggy_code": "result = testdir.runpytest(\"-s\")",
        "fixed_code": "result = testdir.runpytest()",
        "patch": "@@ -672,7 +672,7 @@ def test_close_kept_alive_file():\n             stdout = k.pop()\n             stdout.close()\n     \"\"\")\n-    result = testdir.runpytest(\"-s\")\n+    result = testdir.runpytest()\n     result.stdout.fnmatch_lines([\n         \"*2 passed*\"\n     ])"
    },
    {
        "commit_id": "2bdd034242d01799bce44d9206a44251e5a192ff",
        "commit_message": "fix issue355: junitxml generates name=\"pytest\" tag.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2bdd034242d01799bce44d9206a44251e5a192ff",
        "buggy_code": "assert_attr(node, errors=0, failures=1, skips=3, tests=2)",
        "fixed_code": "assert_attr(node, name=\"pytest\", errors=0, failures=1, skips=3, tests=2)",
        "patch": "@@ -37,7 +37,7 @@ def test_xpass():\n         result, dom = runandparse(testdir)\n         assert result.ret\n         node = dom.getElementsByTagName(\"testsuite\")[0]\n-        assert_attr(node, errors=0, failures=1, skips=3, tests=2)\n+        assert_attr(node, name=\"pytest\", errors=0, failures=1, skips=3, tests=2)\n \n     def test_timing_function(self, testdir):\n         testdir.makepyfile(\"\"\""
    },
    {
        "commit_id": "94ee37cdb3715cf02bb3918b7cb3aa496f6cbb86",
        "commit_message": "- fix issue181: --pdb now also works on collect errors.  This was\n  implemented by a slight internal refactoring and the introduction\n  of a new hook ``pytest_exception_interact`` hook.\n\n- fix issue341: introduce new experimental hook for IDEs/terminals to\n  intercept debugging: ``pytest_exception_interact(node, call, report)``.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94ee37cdb3715cf02bb3918b7cb3aa496f6cbb86",
        "buggy_code": "__version__ = '2.4.0.dev11'",
        "fixed_code": "__version__ = '2.4.0.dev12'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.0.dev11'\n+__version__ = '2.4.0.dev12'"
    },
    {
        "commit_id": "94ee37cdb3715cf02bb3918b7cb3aa496f6cbb86",
        "commit_message": "- fix issue181: --pdb now also works on collect errors.  This was\n  implemented by a slight internal refactoring and the introduction\n  of a new hook ``pytest_exception_interact`` hook.\n\n- fix issue341: introduce new experimental hook for IDEs/terminals to\n  intercept debugging: ``pytest_exception_interact(node, call, report)``.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/94ee37cdb3715cf02bb3918b7cb3aa496f6cbb86",
        "buggy_code": "version='2.4.0.dev11',",
        "fixed_code": "version='2.4.0.dev12',",
        "patch": "@@ -11,7 +11,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.0.dev11',\n+        version='2.4.0.dev12',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "cbbbfcd1011a7127761663928056e230aecbe3f2",
        "commit_message": "fix collection imports for python2.5",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cbbbfcd1011a7127761663928056e230aecbe3f2",
        "buggy_code": "for name in ('python2.4', 'python2.5', 'python2.6',",
        "fixed_code": "for name in ('python2.5', 'python2.6',",
        "patch": "@@ -65,7 +65,7 @@ def pytest_generate_tests(metafunc):\n             for val in l:\n                 metafunc.addcall(funcargs={name: val})\n     elif 'anypython' in metafunc.fixturenames:\n-        for name in ('python2.4', 'python2.5', 'python2.6',\n+        for name in ('python2.5', 'python2.6',\n                      'python2.7', 'python3.2', \"python3.3\",\n                      'pypy', 'jython'):\n             metafunc.addcall(id=name, param=name)"
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "metavar=\"method\", type=\"choice\", choices=['fd', 'sys', 'no'],",
        "fixed_code": "metavar=\"method\", choices=['fd', 'sys', 'no'],",
        "patch": "@@ -6,7 +6,7 @@\n def pytest_addoption(parser):\n     group = parser.getgroup(\"general\")\n     group._addoption('--capture', action=\"store\", default=None,\n-        metavar=\"method\", type=\"choice\", choices=['fd', 'sys', 'no'],\n+        metavar=\"method\", choices=['fd', 'sys', 'no'],\n         help=\"per-test capturing method: one of fd (default)|sys|no.\")\n     group._addoption('-s', action=\"store_const\", const=\"no\", dest=\"capture\",\n         help=\"shortcut for --capture=no.\")"
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "\"\"\"register optparse-style options and ini-style config values.",
        "fixed_code": "\"\"\"register argparse-style options and ini-style config values.",
        "patch": "@@ -23,7 +23,7 @@ def pytest_cmdline_preparse(config, args):\n     \"\"\"modify command line arguments before option parsing. \"\"\"\n \n def pytest_addoption(parser):\n-    \"\"\"register optparse-style options and ini-style config values.\n+    \"\"\"register argparse-style options and ini-style config values.\n \n     This function must be implemented in a :ref:`plugin <pluginorder>` and is\n     called once at the beginning of a test run."
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "action=\"store\", type=\"int\", dest=\"maxfail\", default=0,",
        "fixed_code": "action=\"store\", type=int, dest=\"maxfail\", default=0,",
        "patch": "@@ -35,7 +35,7 @@ def pytest_addoption(parser):\n                dest=\"exitfirst\",\n                help=\"exit instantly on first error or failed test.\"),\n     group._addoption('--maxfail', metavar=\"num\",\n-               action=\"store\", type=\"int\", dest=\"maxfail\", default=0,\n+               action=\"store\", type=int, dest=\"maxfail\", default=0,\n                help=\"exit after first num failures or errors.\")\n     group._addoption('--strict', action=\"store_true\",\n                help=\"run pytest in strict mode, warnings become errors.\")"
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "type=\"choice\", choices=['failed', 'all'],",
        "fixed_code": "choices=['failed', 'all'],",
        "patch": "@@ -10,7 +10,7 @@ def pytest_addoption(parser):\n     group = parser.getgroup(\"terminal reporting\")\n     group._addoption('--pastebin', metavar=\"mode\",\n         action='store', dest=\"pastebin\", default=None,\n-        type=\"choice\", choices=['failed', 'all'],\n+        choices=['failed', 'all'],\n         help=\"send failed|all info to bpaste.net pastebin service.\")\n \n def pytest_configure(__multicall__, config):"
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "action=\"store\", type=\"int\", default=None, metavar=\"N\",",
        "fixed_code": "action=\"store\", type=int, default=None, metavar=\"N\",",
        "patch": "@@ -18,7 +18,7 @@ def pytest_namespace():\n def pytest_addoption(parser):\n     group = parser.getgroup(\"terminal reporting\", \"reporting\", after=\"general\")\n     group.addoption('--durations',\n-         action=\"store\", type=\"int\", default=None, metavar=\"N\",\n+         action=\"store\", type=int, default=None, metavar=\"N\",\n          help=\"show N slowest setup/test durations (N=0 for all).\"),\n \n def pytest_terminal_summary(terminalreporter):"
    },
    {
        "commit_id": "15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "commit_message": "moving from optparse to argparse. Major difficulty is\nthat argparse does not have Option objects -> added class Argument\nNeeded explicit call of MyOptionParser.format_epilog as argparse\ndoes not have that. The parse_arg epilog argument wraps the text,\nwhich is not the same (could be handled with a special formatter).\n\n- parser.parse() now returns single argument (with positional args in\n  .file_or_dir)\n- \"file_or_dir\" made a class variable Config._file_or_dir and used in help and tests\n- added code for argcomplete (because of which this all started!)\n\naddoption:\n- if option type is a string ('int' or 'string', this converted to\n  int resp. str\n- if option type is 'count' this is changed to the type of choices[0]\n\ntesting:\n- added tests for Argument\n- test_mark.test_keyword_extra split as ['-k', '-mykeyword'] generates argparse\n  error test split in two and one marked as fail\n- testing hints, multiline and more strickt (for if someone moves format_epilog\n  to epilog argument of parse_args without Formatter)\n- test for destination derived from long option with internal dash\n- renamed second test_parseopt.test_parse() to test_parse2 as it was\n  not tested at all (the first was tested.)\n\n--HG--\nbranch : argparse",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/15ec5a898c5e6ba289213ba1ca53564f73783bb5",
        "buggy_code": "type=\"choice\", choices=['long', 'short', 'no', 'line', 'native'],",
        "fixed_code": "choices=['long', 'short', 'no', 'line', 'native'],",
        "patch": "@@ -25,7 +25,7 @@ def pytest_addoption(parser):\n          help=\"(deprecated, use -r)\")\n     group._addoption('--tb', metavar=\"style\",\n                action=\"store\", dest=\"tbstyle\", default='long',\n-               type=\"choice\", choices=['long', 'short', 'no', 'line', 'native'],\n+               choices=['long', 'short', 'no', 'line', 'native'],\n                help=\"traceback print mode (long/short/line/native/no).\")\n     group._addoption('--fulltrace',\n                action=\"store_true\", dest=\"fulltrace\", default=False,"
    },
    {
        "commit_id": "c4c966683c082aedb461f94b49e1ef73e4346037",
        "commit_message": "fix issue323 - parametrize() of many module-scoped params",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c4c966683c082aedb461f94b49e1ef73e4346037",
        "buggy_code": "__version__ = '2.4.0.dev4'",
        "fixed_code": "__version__ = '2.4.0.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.0.dev4'\n+__version__ = '2.4.0.dev5'"
    },
    {
        "commit_id": "c4c966683c082aedb461f94b49e1ef73e4346037",
        "commit_message": "fix issue323 - parametrize() of many module-scoped params",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c4c966683c082aedb461f94b49e1ef73e4346037",
        "buggy_code": "version='2.4.0.dev4',",
        "fixed_code": "version='2.4.0.dev5',",
        "patch": "@@ -12,7 +12,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.0.dev4',\n+        version='2.4.0.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "212f4b4d64247a190ec25fd8c39f34dfa090e406",
        "commit_message": "Issue 306: Used a set for the extra_keywords, and used listchain for parent iteration.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/212f4b4d64247a190ec25fd8c39f34dfa090e406",
        "buggy_code": "item.extra_keyword_matches.append(\"xxx\")",
        "fixed_code": "item.extra_keyword_matches.add(\"xxx\")",
        "patch": "@@ -418,7 +418,7 @@ def test_2(self):\n             def pytest_pycollect_makeitem(__multicall__, name):\n                 if name == \"TestClass\":\n                     item = __multicall__.execute()\n-                    item.extra_keyword_matches.append(\"xxx\")\n+                    item.extra_keyword_matches.add(\"xxx\")\n                     return item\n         \"\"\")\n         reprec = testdir.inline_run(p.dirpath(), '-s', '-k', keyword)"
    },
    {
        "commit_id": "60906f7a46863416b67d329d45e39bcb01d5a28c",
        "commit_message": "Issue 306: Use the names of all the parents in the chain for matching, except the Instance objects.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/60906f7a46863416b67d329d45e39bcb01d5a28c",
        "buggy_code": "if isinstance(item, pytest.Class) or isinstance(item, pytest.Function):",
        "fixed_code": "if not isinstance(item, pytest.Instance):",
        "patch": "@@ -130,7 +130,7 @@ def matchkeyword(colitem, keywordexpr):\n \n     # Add the names of the current item and any parent items\n     for item in colitem.listchain():\n-        if isinstance(item, pytest.Class) or isinstance(item, pytest.Function):\n+        if not isinstance(item, pytest.Instance):\n             mapped_names.append(item.name)\n \n     # Add the names added as extra keywords to current or parent items"
    },
    {
        "commit_id": "e6e86fa462fb4e4f44201afe84c6118e87a1f63a",
        "commit_message": "fix issue307 - use yaml.safe_load instead of yaml.load, thanks Mark Eichin.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e6e86fa462fb4e4f44201afe84c6118e87a1f63a",
        "buggy_code": "raw = yaml.load(self.fspath.open())",
        "fixed_code": "raw = yaml.safe_load(self.fspath.open())",
        "patch": "@@ -9,7 +9,7 @@ def pytest_collect_file(parent, path):\n class YamlFile(pytest.File):\n     def collect(self):\n         import yaml # we need a yaml parser, e.g. PyYAML\n-        raw = yaml.load(self.fspath.open())\n+        raw = yaml.safe_load(self.fspath.open())\n         for name, spec in raw.items():\n             yield YamlItem(name, self, spec)\n "
    },
    {
        "commit_id": "77d2f6adde71d7a545ff5bf6dc8d4ef0bf075a02",
        "commit_message": "fix issue245 by depending on py-1.4.14 which fixes py.io.dupfile\nto not assume file.mode is present.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/77d2f6adde71d7a545ff5bf6dc8d4ef0bf075a02",
        "buggy_code": "__version__ = '2.3.6.dev2'",
        "fixed_code": "__version__ = '2.3.6.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.6.dev2'\n+__version__ = '2.3.6.dev3'"
    },
    {
        "commit_id": "77d2f6adde71d7a545ff5bf6dc8d4ef0bf075a02",
        "commit_message": "fix issue245 by depending on py-1.4.14 which fixes py.io.dupfile\nto not assume file.mode is present.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/77d2f6adde71d7a545ff5bf6dc8d4ef0bf075a02",
        "buggy_code": "version='2.3.6.dev2',",
        "fixed_code": "version='2.3.6.dev3',",
        "patch": "@@ -12,7 +12,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.6.dev2',\n+        version='2.3.6.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "51688270ac48f3fe840691458cec12207a1b95b5",
        "commit_message": "  implemented as context managers.  Thanks Andreas Pelme,\n  ladimir Keleshev.\nfix issue245 by depending on the released py-1.4.14\nwhich fixes py.io.dupfile to work with files with no\nmode. Thanks Jason R. Coombs.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/51688270ac48f3fe840691458cec12207a1b95b5",
        "buggy_code": "install_requires=['py>=1.4.13dev6'],",
        "fixed_code": "install_requires=['py>=1.4.14'],",
        "patch": "@@ -21,7 +21,7 @@ def main():\n         entry_points= make_entry_points(),\n         cmdclass = {'test': PyTest},\n         # the following should be enabled for release\n-        install_requires=['py>=1.4.13dev6'],\n+        install_requires=['py>=1.4.14'],\n         classifiers=['Development Status :: 6 - Mature',\n                      'Intended Audience :: Developers',\n                      'License :: OSI Approved :: MIT License',"
    },
    {
        "commit_id": "69ef7500912d138a5b4c157236f6f70e7a5f7223",
        "commit_message": "fix issue134 - print the collect errors that prevent running specified test items",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69ef7500912d138a5b4c157236f6f70e7a5f7223",
        "buggy_code": "if exitstatus in (0, 1, 2):",
        "fixed_code": "if exitstatus in (0, 1, 2, 4):",
        "patch": "@@ -331,7 +331,7 @@ def _printcollecteditems(self, items):\n     def pytest_sessionfinish(self, exitstatus, __multicall__):\n         __multicall__.execute()\n         self._tw.line(\"\")\n-        if exitstatus in (0, 1, 2):\n+        if exitstatus in (0, 1, 2, 4):\n             self.summary_errors()\n             self.summary_failures()\n             self.config.hook.pytest_terminal_summary(terminalreporter=self)"
    },
    {
        "commit_id": "857c99d3548f6e6972d2023c91f1f0861d091581",
        "commit_message": "fix py32 incompatible syntax",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/857c99d3548f6e6972d2023c91f1f0861d091581",
        "buggy_code": "result = idmaker((u\"a\", \"b\"), [({}, '\\xc3\\xb4')])",
        "fixed_code": "result = idmaker((py.builtin._totext(\"a\"), \"b\"), [({}, '\\xc3\\xb4')])",
        "patch": "@@ -118,7 +118,7 @@ def test_idmaker_autoname(self):\n                                       (object(), object())])\n         assert result == [\"a0-1.0\", \"a1-b1\"]\n         # unicode mixing, issue250\n-        result = idmaker((u\"a\", \"b\"), [({}, '\\xc3\\xb4')])\n+        result = idmaker((py.builtin._totext(\"a\"), \"b\"), [({}, '\\xc3\\xb4')])\n         assert result == ['a0-\\xc3\\xb4']\n \n "
    },
    {
        "commit_id": "296f752ccafaf7c111e5ba07a6b9e65905d7dd48",
        "commit_message": "fix --genscript option to generate standalone scripts that also\nwork with python3.3 (importer ordering)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/296f752ccafaf7c111e5ba07a6b9e65905d7dd48",
        "buggy_code": "sys.meta_path.append(importer)",
        "fixed_code": "sys.meta_path.insert(0, importer)",
        "patch": "@@ -57,7 +57,7 @@ def get_source(self, name):\n         sources = pickle.loads(zlib.decompress(base64.decodestring(sources)))\n \n     importer = DictImporter(sources)\n-    sys.meta_path.append(importer)\n+    sys.meta_path.insert(0, importer)\n \n     entry = \"@ENTRY@\"\n     do_exec(entry, locals())"
    },
    {
        "commit_id": "456731ed0ff7fb0c51660d3389d434b2436661d9",
        "commit_message": "fix issue257 assertion-triggered compilation of source ending in a\ncomment line doesn't blow up in python2.5 (fixed through py>=1.4.13.dev6)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/456731ed0ff7fb0c51660d3389d434b2436661d9",
        "buggy_code": "__version__ = '2.3.5dev5'",
        "fixed_code": "__version__ = '2.3.5dev6'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.5dev5'\n+__version__ = '2.3.5dev6'"
    },
    {
        "commit_id": "68786a6434d554505d28402fd322370645f5cdba",
        "commit_message": "fix bug where using capsys with pytest.set_trace() in a test\nfunction would break when looking at capsys.readouterr()",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/68786a6434d554505d28402fd322370645f5cdba",
        "buggy_code": "__version__ = '2.4.5dev1'",
        "fixed_code": "__version__ = '2.4.5dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.5dev1'\n+__version__ = '2.4.5dev2'"
    },
    {
        "commit_id": "68786a6434d554505d28402fd322370645f5cdba",
        "commit_message": "fix bug where using capsys with pytest.set_trace() in a test\nfunction would break when looking at capsys.readouterr()",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/68786a6434d554505d28402fd322370645f5cdba",
        "buggy_code": "version='2.4.5dev1',",
        "fixed_code": "version='2.4.5dev2',",
        "patch": "@@ -12,7 +12,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.5dev1',\n+        version='2.4.5dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "1c9ef2443f0f077659ed79ff8edc03437d9e712e",
        "commit_message": "bump version, fix -k option help",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1c9ef2443f0f077659ed79ff8edc03437d9e712e",
        "buggy_code": "__version__ = '2.3.4'",
        "fixed_code": "__version__ = '2.4.5dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.4'\n+__version__ = '2.4.5dev1'"
    },
    {
        "commit_id": "1c9ef2443f0f077659ed79ff8edc03437d9e712e",
        "commit_message": "bump version, fix -k option help",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1c9ef2443f0f077659ed79ff8edc03437d9e712e",
        "buggy_code": "version='2.3.4',",
        "fixed_code": "version='2.4.5dev1',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.4',\n+        version='2.4.5dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "b5955c59793b924a14e3ab185f38d690cef32fb3",
        "commit_message": "fix version number, final fixes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b5955c59793b924a14e3ab185f38d690cef32fb3",
        "buggy_code": "__version__ = '2.4.6'",
        "fixed_code": "__version__ = '2.3.4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.6'\n+__version__ = '2.3.4'"
    },
    {
        "commit_id": "b5955c59793b924a14e3ab185f38d690cef32fb3",
        "commit_message": "fix version number, final fixes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b5955c59793b924a14e3ab185f38d690cef32fb3",
        "buggy_code": "version='2.4.6',",
        "fixed_code": "version='2.3.4',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.4.6',\n+        version='2.3.4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d66ff7e63efcba75442a8d02570f63489421b82e",
        "commit_message": "fix autouse invocation (off-by-one error), relates to issue in moinmoin test suite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d66ff7e63efcba75442a8d02570f63489421b82e",
        "buggy_code": "__version__ = '2.3.4.dev5'",
        "fixed_code": "__version__ = '2.3.4.dev6'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.4.dev5'\n+__version__ = '2.3.4.dev6'"
    },
    {
        "commit_id": "d66ff7e63efcba75442a8d02570f63489421b82e",
        "commit_message": "fix autouse invocation (off-by-one error), relates to issue in moinmoin test suite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d66ff7e63efcba75442a8d02570f63489421b82e",
        "buggy_code": "i = len(baseid) + 1",
        "fixed_code": "i = len(baseid)",
        "patch": "@@ -1455,7 +1455,7 @@ def _getautousenames(self, nodeid):\n         for baseid, basenames in self._nodeid_and_autousenames:\n             if nodeid.startswith(baseid):\n                 if baseid:\n-                    i = len(baseid) + 1\n+                    i = len(baseid)\n                     nextchar = nodeid[i:i+1]\n                     if nextchar and nextchar not in \":/\":\n                         continue"
    },
    {
        "commit_id": "d66ff7e63efcba75442a8d02570f63489421b82e",
        "commit_message": "fix autouse invocation (off-by-one error), relates to issue in moinmoin test suite",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d66ff7e63efcba75442a8d02570f63489421b82e",
        "buggy_code": "version='2.3.4.dev5',",
        "fixed_code": "version='2.3.4.dev6',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.4.dev5',\n+        version='2.3.4.dev6',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "b940ed11a084b4a9db2abb4aa7eec97916ffe511",
        "commit_message": "fix issue226 - LIFO ordering for fixture-added teardowns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b940ed11a084b4a9db2abb4aa7eec97916ffe511",
        "buggy_code": "__version__ = '2.3.4.dev4'",
        "fixed_code": "__version__ = '2.3.4.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.4.dev4'\n+__version__ = '2.3.4.dev5'"
    },
    {
        "commit_id": "b940ed11a084b4a9db2abb4aa7eec97916ffe511",
        "commit_message": "fix issue226 - LIFO ordering for fixture-added teardowns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b940ed11a084b4a9db2abb4aa7eec97916ffe511",
        "buggy_code": "version='2.3.4.dev4',",
        "fixed_code": "version='2.3.4.dev5',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.4.dev4',\n+        version='2.3.4.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "c64c567b75fd79917ed591116de6882699436fda",
        "commit_message": "fix issue224 - invocations with >256 char arguments now work",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c64c567b75fd79917ed591116de6882699436fda",
        "buggy_code": "__version__ = '2.3.4.dev3'",
        "fixed_code": "__version__ = '2.3.4.dev4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.4.dev3'\n+__version__ = '2.3.4.dev4'"
    },
    {
        "commit_id": "c64c567b75fd79917ed591116de6882699436fda",
        "commit_message": "fix issue224 - invocations with >256 char arguments now work",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c64c567b75fd79917ed591116de6882699436fda",
        "buggy_code": "version='2.3.4.dev3',",
        "fixed_code": "version='2.3.4.dev4',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.4.dev3',\n+        version='2.3.4.dev4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "664b01ca421ada6b43b9bff565dcd10e2f16a47a",
        "commit_message": "fix misleading typo",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/664b01ca421ada6b43b9bff565dcd10e2f16a47a",
        "buggy_code": "version = release = \"2.3.3.1\"",
        "fixed_code": "version = release = \"2.3.3.2\"",
        "patch": "@@ -17,7 +17,7 @@\n #\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n-version = release = \"2.3.3.1\"\n+version = release = \"2.3.3.2\"\n \n import sys, os\n "
    },
    {
        "commit_id": "476d210d09189abebadba9236c6127f889845573",
        "commit_message": "prolong workaround for jython AST bug http://bugs.jython.org/issue1497\nto make pytest work for post-2.5.1 jython versions",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/476d210d09189abebadba9236c6127f889845573",
        "buggy_code": "__version__ = '2.3.3'",
        "fixed_code": "__version__ = '2.3.4.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.3'\n+__version__ = '2.3.4.dev1'"
    },
    {
        "commit_id": "476d210d09189abebadba9236c6127f889845573",
        "commit_message": "prolong workaround for jython AST bug http://bugs.jython.org/issue1497\nto make pytest work for post-2.5.1 jython versions",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/476d210d09189abebadba9236c6127f889845573",
        "buggy_code": "if sys.platform.startswith(\"java\") and sys.version_info < (2, 5, 2):",
        "fixed_code": "if sys.platform.startswith(\"java\"):",
        "patch": "@@ -11,7 +11,7 @@\n from _pytest.assertion.reinterpret import BuiltinAssertionError\n \n \n-if sys.platform.startswith(\"java\") and sys.version_info < (2, 5, 2):\n+if sys.platform.startswith(\"java\"):\n     # See http://bugs.jython.org/issue1497\n     _exprs = (\"BoolOp\", \"BinOp\", \"UnaryOp\", \"Lambda\", \"IfExp\", \"Dict\",\n               \"ListComp\", \"GeneratorExp\", \"Yield\", \"Compare\", \"Call\","
    },
    {
        "commit_id": "476d210d09189abebadba9236c6127f889845573",
        "commit_message": "prolong workaround for jython AST bug http://bugs.jython.org/issue1497\nto make pytest work for post-2.5.1 jython versions",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/476d210d09189abebadba9236c6127f889845573",
        "buggy_code": "version='2.3.3',",
        "fixed_code": "version='2.3.4.dev1',",
        "patch": "@@ -48,7 +48,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.3',\n+        version='2.3.4.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d6f10d502cab1e488d212ae2f0eed98e6f447741",
        "commit_message": "fix py31 compat, amend setup.py long description",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d6f10d502cab1e488d212ae2f0eed98e6f447741",
        "buggy_code": "if method is not None and not hasattr(method, \"_pytestfixturefunction\") and callable(method):",
        "fixed_code": "if method is not None and not hasattr(method, \"_pytestfixturefunction\") and py.builtin.callable(method):",
        "patch": "@@ -41,7 +41,7 @@ def pytest_make_collect_report(collector):\n \n def call_optional(obj, name):\n     method = getattr(obj, name, None)\n-    if method is not None and not hasattr(method, \"_pytestfixturefunction\") and callable(method):\n+    if method is not None and not hasattr(method, \"_pytestfixturefunction\") and py.builtin.callable(method):\n         # If there's any problems allow the exception to raise rather than\n         # silently ignoring them\n         method()"
    },
    {
        "commit_id": "33cd4144200173f5b06d82d8d5bc1d63c934e1b1",
        "commit_message": "fix issue127 improve pytest_addoption docs, add new config.getoption(name) method for consistency.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/33cd4144200173f5b06d82d8d5bc1d63c934e1b1",
        "buggy_code": "__version__ = '2.3.3.dev4'",
        "fixed_code": "__version__ = '2.3.3.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.3.dev4'\n+__version__ = '2.3.3.dev5'"
    },
    {
        "commit_id": "33cd4144200173f5b06d82d8d5bc1d63c934e1b1",
        "commit_message": "fix issue127 improve pytest_addoption docs, add new config.getoption(name) method for consistency.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/33cd4144200173f5b06d82d8d5bc1d63c934e1b1",
        "buggy_code": "version='2.3.3.dev4',",
        "fixed_code": "version='2.3.3.dev5',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.3.dev4',\n+        version='2.3.3.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "commit_message": "fix issue217 - to support @mock.patch with pytest funcarg-fixtures, also split out python integration tests into python/integration.py and fix nose/mark tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "buggy_code": "__version__ = '2.3.3.dev3'",
        "fixed_code": "__version__ = '2.3.3.dev4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.3.dev3'\n+__version__ = '2.3.3.dev4'"
    },
    {
        "commit_id": "dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "commit_message": "fix issue217 - to support @mock.patch with pytest funcarg-fixtures, also split out python integration tests into python/integration.py and fix nose/mark tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "buggy_code": "version='2.3.3.dev3',",
        "fixed_code": "version='2.3.3.dev4',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.3.dev3',\n+        version='2.3.3.dev4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "commit_message": "fix issue217 - to support @mock.patch with pytest funcarg-fixtures, also split out python integration tests into python/integration.py and fix nose/mark tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dba2a8bc647c73eb9ecf21de18bf56e45a04f115",
        "buggy_code": "print item, item.keywords",
        "fixed_code": "print (item, item.keywords)",
        "patch": "@@ -253,7 +253,7 @@ def test_d(self):\n         \"\"\")\n         items, rec = testdir.inline_genitems(p)\n         for item in items:\n-            print item, item.keywords\n+            print (item, item.keywords)\n             assert 'a' in item.keywords\n \n     def test_mark_with_wrong_marker(self, testdir):"
    },
    {
        "commit_id": "002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "commit_message": "addresses issue209 - avoid error messages from pip on python2.4 related to file, however, never be imported with this interpreter",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "buggy_code": "__version__ = '2.3.3.dev1'",
        "fixed_code": "__version__ = '2.3.3.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.3.dev1'\n+__version__ = '2.3.3.dev2'"
    },
    {
        "commit_id": "002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "commit_message": "addresses issue209 - avoid error messages from pip on python2.4 related to file, however, never be imported with this interpreter",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "buggy_code": "PYC_EXT = \".py\" + (\"c\" if __debug__ else \"o\")",
        "fixed_code": "PYC_EXT = \".py\" + (__debug__ and \"c\" or \"o\")",
        "patch": "@@ -34,7 +34,7 @@\n     PYTEST_TAG = \"%s-%s%s-PYTEST\" % (impl, ver[0], ver[1])\n     del ver, impl\n \n-PYC_EXT = \".py\" + (\"c\" if __debug__ else \"o\")\n+PYC_EXT = \".py\" + (__debug__ and \"c\" or \"o\")\n PYC_TAIL = \".\" + PYTEST_TAG + PYC_EXT\n \n REWRITE_NEWLINES = sys.version_info[:2] != (2, 7) and sys.version_info < (3, 2)"
    },
    {
        "commit_id": "002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "commit_message": "addresses issue209 - avoid error messages from pip on python2.4 related to file, however, never be imported with this interpreter",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/002c5072af54329655e5c4f6dc9381ae8a6cf2ae",
        "buggy_code": "version='2.3.3.dev1',",
        "fixed_code": "version='2.3.3.dev2',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.3.dev1',\n+        version='2.3.3.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d5ad91c64f3cb26e9f0dddde7c0e33507eabf03f",
        "commit_message": "fix issue209 - depend on pylib dev version which again supports python2.4",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d5ad91c64f3cb26e9f0dddde7c0e33507eabf03f",
        "buggy_code": "install_requires=['py>=1.4.11'],",
        "fixed_code": "install_requires=['py>=1.4.12.dev1'],",
        "patch": "@@ -33,7 +33,7 @@ def main():\n         entry_points= make_entry_points(),\n         cmdclass = {'test': PyTest},\n         # the following should be enabled for release\n-        install_requires=['py>=1.4.11'],\n+        install_requires=['py>=1.4.12.dev1'],\n         classifiers=['Development Status :: 6 - Mature',\n                      'Intended Audience :: Developers',\n                      'License :: OSI Approved :: MIT License',"
    },
    {
        "commit_id": "fb173a97a87fde51a57d851b309597a88ed48b98",
        "commit_message": "extended - fix issue214 - ignore attribute-access errors with objects in test modules that can blow up (for example flask's request object)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fb173a97a87fde51a57d851b309597a88ed48b98",
        "buggy_code": "__version__ = '2.3.2'",
        "fixed_code": "__version__ = '2.3.3.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.2'\n+__version__ = '2.3.3.dev1'"
    },
    {
        "commit_id": "fb173a97a87fde51a57d851b309597a88ed48b98",
        "commit_message": "extended - fix issue214 - ignore attribute-access errors with objects in test modules that can blow up (for example flask's request object)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fb173a97a87fde51a57d851b309597a88ed48b98",
        "buggy_code": "version='2.3.2',",
        "fixed_code": "version='2.3.3.dev1',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.2',\n+        version='2.3.3.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "6ebf39e9a64039ae9e616ba071944826b4918299",
        "commit_message": "fix wrong document version on pytest.org (closes #210)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6ebf39e9a64039ae9e616ba071944826b4918299",
        "buggy_code": "version = release = \"2.4.2\"",
        "fixed_code": "version = release = \"2.3.2\"",
        "patch": "@@ -17,7 +17,7 @@\n #\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n-version = release = \"2.4.2\"\n+version = release = \"2.3.2\"\n \n import sys, os\n "
    },
    {
        "commit_id": "bcb8dc71d2a38bbb73efeba2452aabf09c43c5e5",
        "commit_message": "fix issue208 and fix issue29 - avoid long pauses in traceback printing\nby using the new getstatementrange() code of the py lib which uses\nAST-parsing rather than the previous heuristic which had O(n^2) complexity\n(with n = len(sourcelines))\n\n- require new (in-dev) py version to",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bcb8dc71d2a38bbb73efeba2452aabf09c43c5e5",
        "buggy_code": "install_requires=['py>=1.4.10'],",
        "fixed_code": "install_requires=['py>=1.4.11.dev6'],",
        "patch": "@@ -33,7 +33,7 @@ def main():\n         entry_points= make_entry_points(),\n         cmdclass = {'test': PyTest},\n         # the following should be enabled for release\n-        install_requires=['py>=1.4.10'],\n+        install_requires=['py>=1.4.11.dev6'],\n         classifiers=['Development Status :: 6 - Mature',\n                      'Intended Audience :: Developers',\n                      'License :: OSI Approved :: MIT License',"
    },
    {
        "commit_id": "b8277bfed8af60cda03816cbd53b73e705346c9f",
        "commit_message": "fix issue127 - improve pytest_addoption and related documentation",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b8277bfed8af60cda03816cbd53b73e705346c9f",
        "buggy_code": "version = release = \"2.3.1\"",
        "fixed_code": "version = release = \"2.3.2.dev9\"",
        "patch": "@@ -17,7 +17,7 @@\n #\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n-version = release = \"2.3.1\"\n+version = release = \"2.3.2.dev9\"\n \n import sys, os\n "
    },
    {
        "commit_id": "aa79c0a4b9c5ff31dc30532d80529c39ac41755d",
        "commit_message": "fix unittest emulation: TestCase.runTest is now ignored\nif there are test* methods.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/aa79c0a4b9c5ff31dc30532d80529c39ac41755d",
        "buggy_code": "__version__ = '2.3.2.dev7'",
        "fixed_code": "__version__ = '2.3.2.dev8'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.2.dev7'\n+__version__ = '2.3.2.dev8'"
    },
    {
        "commit_id": "aa79c0a4b9c5ff31dc30532d80529c39ac41755d",
        "commit_message": "fix unittest emulation: TestCase.runTest is now ignored\nif there are test* methods.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/aa79c0a4b9c5ff31dc30532d80529c39ac41755d",
        "buggy_code": "version='2.3.2.dev7',",
        "fixed_code": "version='2.3.2.dev8',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.2.dev7',\n+        version='2.3.2.dev8',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "commit_message": "fix teardown-ordering for parametrized setups/teardowns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "buggy_code": "__version__ = '2.3.2.dev5'",
        "fixed_code": "__version__ = '2.3.2.dev6'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.2.dev5'\n+__version__ = '2.3.2.dev6'"
    },
    {
        "commit_id": "f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "commit_message": "fix teardown-ordering for parametrized setups/teardowns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "buggy_code": "for fin in l:",
        "fixed_code": "for fin in reversed(l):",
        "patch": "@@ -1531,7 +1531,7 @@ def pytest_runtest_teardown(self, item, nextitem):\n             item.session._setupstate._callfinalizers((name, param))\n             l = self._arg2finish.get(name)\n             if l is not None:\n-                for fin in l:\n+                for fin in reversed(l):\n                     fin()\n \n     def parsefactories(self, node_or_obj, nodeid=None, unittest=False):"
    },
    {
        "commit_id": "f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "commit_message": "fix teardown-ordering for parametrized setups/teardowns",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f28f073c7c6602e1acddddfcc09732df2d0161cd",
        "buggy_code": "version='2.3.2.dev5',",
        "fixed_code": "version='2.3.2.dev6',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.2.dev5',\n+        version='2.3.2.dev6',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "036557ac183540d78f6a131a34d8f9171144add1",
        "commit_message": "fix issue206 - unset PYTHONDONTWRITEBYTECODE in assertrewrite test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/036557ac183540d78f6a131a34d8f9171144add1",
        "buggy_code": "__version__ = '2.3.2.dev4'",
        "fixed_code": "__version__ = '2.3.2.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.2.dev4'\n+__version__ = '2.3.2.dev5'"
    },
    {
        "commit_id": "036557ac183540d78f6a131a34d8f9171144add1",
        "commit_message": "fix issue206 - unset PYTHONDONTWRITEBYTECODE in assertrewrite test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/036557ac183540d78f6a131a34d8f9171144add1",
        "buggy_code": "version='2.3.2.dev4',",
        "fixed_code": "version='2.3.2.dev5',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.2.dev4',\n+        version='2.3.2.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "1b61fbc8edb7eac55f2e7d31570eb4c85e6cb055",
        "commit_message": "- fix test_nose.py by being more tolerant about the error message\n  (differs between py32 and py33, thanks Arfrever)\n- use pypi again now that py is released",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1b61fbc8edb7eac55f2e7d31570eb4c85e6cb055",
        "buggy_code": "\"*TypeError: <lambda>() takes exactly 1*0 given*\"",
        "fixed_code": "\"*TypeError: <lambda>()*\"",
        "patch": "@@ -85,7 +85,7 @@ def test_world():\n     \"\"\")\n     result = testdir.runpytest(p, '-p', 'nose')\n     result.stdout.fnmatch_lines([\n-        \"*TypeError: <lambda>() takes exactly 1*0 given*\"\n+        \"*TypeError: <lambda>()*\"\n     ])\n \n "
    },
    {
        "commit_id": "97f03edcd6f432c5173056da65103afad55e937f",
        "commit_message": "fix issue205 - nested conftest to pickup pycollect_makemodule - relates to the two\nreports of a failing doc/en/example/py2py3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/97f03edcd6f432c5173056da65103afad55e937f",
        "buggy_code": "__version__ = '2.3.2.dev3'",
        "fixed_code": "__version__ = '2.3.2.dev4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.2.dev3'\n+__version__ = '2.3.2.dev4'"
    },
    {
        "commit_id": "97f03edcd6f432c5173056da65103afad55e937f",
        "commit_message": "fix issue205 - nested conftest to pickup pycollect_makemodule - relates to the two\nreports of a failing doc/en/example/py2py3.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/97f03edcd6f432c5173056da65103afad55e937f",
        "buggy_code": "version='2.3.2.dev3',",
        "fixed_code": "version='2.3.2.dev4',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.2.dev3',\n+        version='2.3.2.dev4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "9ed127b5da1574bc53664915559de29a1f162f6c",
        "commit_message": "fix issue203 - fixture functions with a scope=function should have a \"self\" that points to the actual instance with which the test functions run.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ed127b5da1574bc53664915559de29a1f162f6c",
        "buggy_code": "__version__ = '2.3.1.dev1'",
        "fixed_code": "__version__ = '2.3.1.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.1.dev1'\n+__version__ = '2.3.1.dev2'"
    },
    {
        "commit_id": "9ed127b5da1574bc53664915559de29a1f162f6c",
        "commit_message": "fix issue203 - fixture functions with a scope=function should have a \"self\" that points to the actual instance with which the test functions run.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ed127b5da1574bc53664915559de29a1f162f6c",
        "buggy_code": "version='2.3.1.dev1',",
        "fixed_code": "version='2.3.1.dev2',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.1.dev1',\n+        version='2.3.1.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "commit_message": "fix trial tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "buggy_code": "__version__ = '2.3.0.dev29'",
        "fixed_code": "__version__ = '2.3.0.dev30'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev29'\n+__version__ = '2.3.0.dev30'"
    },
    {
        "commit_id": "64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "commit_message": "fix trial tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "buggy_code": "obj = getattr(holderobj, name)",
        "fixed_code": "obj = getattr(holderobj, name, None)",
        "patch": "@@ -1529,7 +1529,7 @@ def parsefactories(self, node_or_obj, nodeid=None, unittest=False):\n         self._holderobjseen.add(holderobj)\n         autousenames = []\n         for name in dir(holderobj):\n-            obj = getattr(holderobj, name)\n+            obj = getattr(holderobj, name, None)\n             if not callable(obj):\n                 continue\n             # fixture functions have a pytest_funcarg__ prefix (pre-2.3 style)"
    },
    {
        "commit_id": "64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "commit_message": "fix trial tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "buggy_code": "version='2.3.0.dev29',",
        "fixed_code": "version='2.3.0.dev30',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev29',\n+        version='2.3.0.dev30',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "commit_message": "fix trial tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/64544bee1ab5bd66ecd3f9c42b62b834f269d3fe",
        "buggy_code": "\"*4 skipped*3 xfail*1 xpass*\",",
        "fixed_code": "\"*5 skipped*3 xfail*1 xpass*\",",
        "patch": "@@ -313,7 +313,7 @@ def test_method(self):\n             \"*i2wanto*\",\n             \"*sys.version_info*\",\n             \"*skip_in_method*\",\n-            \"*4 skipped*3 xfail*1 xpass*\",\n+            \"*5 skipped*3 xfail*1 xpass*\",\n         ])\n \n     def test_trial_error(self, testdir):"
    },
    {
        "commit_id": "7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "commit_message": "refine docs, fix a marker/keywords bit, and add a test that request.keywords points to node.keywords.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "buggy_code": "__version__ = '2.3.0.dev28'",
        "fixed_code": "__version__ = '2.3.0.dev29'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev28'\n+__version__ = '2.3.0.dev29'"
    },
    {
        "commit_id": "7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "commit_message": "refine docs, fix a marker/keywords bit, and add a test that request.keywords points to node.keywords.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "buggy_code": "version='2.3.0.dev28',",
        "fixed_code": "version='2.3.0.dev29',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev28',\n+        version='2.3.0.dev29',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "commit_message": "refine docs, fix a marker/keywords bit, and add a test that request.keywords points to node.keywords.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7c8755cc89f3b1f0e6117e3943b28f6a1505b150",
        "buggy_code": "result.stderr.fnmatch_lines([",
        "fixed_code": "result.stdout.fnmatch_lines([",
        "patch": "@@ -1805,7 +1805,7 @@ def test_func(app):\n     \"\"\")\n     result = testdir.runpytest()\n     assert result.ret != 0\n-    result.stderr.fnmatch_lines([\n+    result.stdout.fnmatch_lines([\n         \"*3/x*\",\n         \"*ZeroDivisionError*\",\n     ])"
    },
    {
        "commit_id": "cf17f1d6288bc13cd3b35627f48a7172b5849cb8",
        "commit_message": "fixing the fix of the last commit",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cf17f1d6288bc13cd3b35627f48a7172b5849cb8",
        "buggy_code": "nodeid.replace(p.sep, \"/\")",
        "fixed_code": "nodeid = nodeid.replace(p.sep, \"/\")",
        "patch": "@@ -1419,7 +1419,7 @@ def pytest_plugin_registered(self, plugin):\n             if p.basename.startswith(\"conftest.py\"):\n                 nodeid = p.dirpath().relto(self.session.fspath)\n                 if p.sep != \"/\":\n-                    nodeid.replace(p.sep, \"/\")\n+                    nodeid = nodeid.replace(p.sep, \"/\")\n         self.parsefactories(plugin, nodeid)\n         self._seenplugins.add(plugin)\n "
    },
    {
        "commit_id": "67de2c53acdb336ffce02434f8ac736999184f1a",
        "commit_message": "fix issue198 - detection of fixtures from conftest.py files in deeper nested dir structures with certain invocations",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/67de2c53acdb336ffce02434f8ac736999184f1a",
        "buggy_code": "__version__ = '2.3.0.dev26'",
        "fixed_code": "__version__ = '2.3.0.dev27'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev26'\n+__version__ = '2.3.0.dev27'"
    },
    {
        "commit_id": "67de2c53acdb336ffce02434f8ac736999184f1a",
        "commit_message": "fix issue198 - detection of fixtures from conftest.py files in deeper nested dir structures with certain invocations",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/67de2c53acdb336ffce02434f8ac736999184f1a",
        "buggy_code": "version='2.3.0.dev26',",
        "fixed_code": "version='2.3.0.dev27',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev26',\n+        version='2.3.0.dev27',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "26ab80c4cd2bc3987ff12cc4ca690290fcea396d",
        "commit_message": "fix and test --fixtures location information",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/26ab80c4cd2bc3987ff12cc4ca690290fcea396d",
        "buggy_code": "funcargspec = \"%s -- %s\" %(argname, loc,)",
        "fixed_code": "funcargspec = \"%s -- %s\" %(argname, bestrel,)",
        "patch": "@@ -761,7 +761,7 @@ def _showfixtures_main(config, session):\n         if verbose <= 0 and argname[0] == \"_\":\n             continue\n         if verbose > 0:\n-            funcargspec = \"%s -- %s\" %(argname, loc,)\n+            funcargspec = \"%s -- %s\" %(argname, bestrel,)\n         else:\n             funcargspec = argname\n         tw.line(funcargspec, green=True)"
    },
    {
        "commit_id": "26ab80c4cd2bc3987ff12cc4ca690290fcea396d",
        "commit_message": "fix and test --fixtures location information",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/26ab80c4cd2bc3987ff12cc4ca690290fcea396d",
        "buggy_code": "\"*tmpdir*\",",
        "fixed_code": "\"*tmpdir*--*tmpdir.py*\",",
        "patch": "@@ -1590,7 +1590,7 @@ def test_show_fixtures(self, testdir):\n     def test_show_fixtures_verbose(self, testdir):\n         result = testdir.runpytest(\"--fixtures\", \"-v\")\n         result.stdout.fnmatch_lines([\n-                \"*tmpdir*\",\n+                \"*tmpdir*--*tmpdir.py*\",\n                 \"*temporary directory*\",\n             ]\n         )"
    },
    {
        "commit_id": "98513b995a78fc5615b6071cda868f69cd2461f9",
        "commit_message": "simplify/integrate fixturemapper into FixtureManager\nalso fix jstests test failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/98513b995a78fc5615b6071cda868f69cd2461f9",
        "buggy_code": "__version__ = '2.3.0.dev24'",
        "fixed_code": "__version__ = '2.3.0.dev25'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev24'\n+__version__ = '2.3.0.dev25'"
    },
    {
        "commit_id": "98513b995a78fc5615b6071cda868f69cd2461f9",
        "commit_message": "simplify/integrate fixturemapper into FixtureManager\nalso fix jstests test failures",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/98513b995a78fc5615b6071cda868f69cd2461f9",
        "buggy_code": "version='2.3.0.dev24',",
        "fixed_code": "version='2.3.0.dev25',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev24',\n+        version='2.3.0.dev25',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "cc2337af3a8eaebaddf5b2fe49300cb82dc582e0",
        "commit_message": "refine parsefactories interface, fix two_classes test originally reported by Alex Okrushko, also add a few more tests to make sure autouse-fixtures are properly distinguished",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cc2337af3a8eaebaddf5b2fe49300cb82dc582e0",
        "buggy_code": "__version__ = '2.3.0.dev23'",
        "fixed_code": "__version__ = '2.3.0.dev24'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev23'\n+__version__ = '2.3.0.dev24'"
    },
    {
        "commit_id": "cc2337af3a8eaebaddf5b2fe49300cb82dc582e0",
        "commit_message": "refine parsefactories interface, fix two_classes test originally reported by Alex Okrushko, also add a few more tests to make sure autouse-fixtures are properly distinguished",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/cc2337af3a8eaebaddf5b2fe49300cb82dc582e0",
        "buggy_code": "version='2.3.0.dev23',",
        "fixed_code": "version='2.3.0.dev24',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev23',\n+        version='2.3.0.dev24',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "0594265adce86fefceb5587fcd75befad997a721",
        "commit_message": "fix output of --fixtures for @pytest.fixture defined functions.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0594265adce86fefceb5587fcd75befad997a721",
        "buggy_code": "__version__ = '2.3.0.dev20'",
        "fixed_code": "__version__ = '2.3.0.dev21'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev20'\n+__version__ = '2.3.0.dev21'"
    },
    {
        "commit_id": "0594265adce86fefceb5587fcd75befad997a721",
        "commit_message": "fix output of --fixtures for @pytest.fixture defined functions.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0594265adce86fefceb5587fcd75befad997a721",
        "buggy_code": "version='2.3.0.dev20',",
        "fixed_code": "version='2.3.0.dev21',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev20',\n+        version='2.3.0.dev21',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "bfaf8e50b694f85fc577c04100737b08179ec490",
        "commit_message": "fix issue 182: testdir.inprocess_run now considers passed plugins",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bfaf8e50b694f85fc577c04100737b08179ec490",
        "buggy_code": "ret = self.pytestmain(list(args), plugins=[Collect()])",
        "fixed_code": "ret = self.pytestmain(list(args), plugins=plugins)",
        "patch": "@@ -355,7 +355,7 @@ def pytest_itemcollected(self, item):\n         if not plugins:\n             plugins = []\n         plugins.append(Collect())\n-        ret = self.pytestmain(list(args), plugins=[Collect()])\n+        ret = self.pytestmain(list(args), plugins=plugins)\n         reprec = rec[0]\n         reprec.ret = ret\n         assert len(rec) == 1"
    },
    {
        "commit_id": "41ad7dbae1367a0e34a9ad5b48fb9f728def18fc",
        "commit_message": "fix issue185 monkeypatching time.time does not cause pytest to fail",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/41ad7dbae1367a0e34a9ad5b48fb9f728def18fc",
        "buggy_code": "__version__ = '2.3.0.dev10'",
        "fixed_code": "__version__ = '2.3.0.dev11'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev10'\n+__version__ = '2.3.0.dev11'"
    },
    {
        "commit_id": "41ad7dbae1367a0e34a9ad5b48fb9f728def18fc",
        "commit_message": "fix issue185 monkeypatching time.time does not cause pytest to fail",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/41ad7dbae1367a0e34a9ad5b48fb9f728def18fc",
        "buggy_code": "version='2.3.0.dev10',",
        "fixed_code": "version='2.3.0.dev11',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev10',\n+        version='2.3.0.dev11',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "1446b4b4e6f6ff416844f387beefef3f00000bfa",
        "commit_message": "fix issue #178 and extend the failure escape test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1446b4b4e6f6ff416844f387beefef3f00000bfa",
        "buggy_code": "return illegal_xml_re.sub(repl, py.xml.escape(arg))",
        "fixed_code": "return py.xml.raw(illegal_xml_re.sub(repl, py.xml.escape(arg)))",
        "patch": "@@ -57,7 +57,7 @@ def repl(matchobj):\n             return unicode('#x%02X') % i\n         else:\n             return unicode('#x%04X') % i\n-    return illegal_xml_re.sub(repl, py.xml.escape(arg))\n+    return py.xml.raw(illegal_xml_re.sub(repl, py.xml.escape(arg)))\n \n def pytest_addoption(parser):\n     group = parser.getgroup(\"terminal reporting\")"
    },
    {
        "commit_id": "dd268c1b2bccd0813528c40ceefc4ee0dbe3b766",
        "commit_message": "improve error representation for missing factory definitions\nin recursive funcarg reconstruction",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd268c1b2bccd0813528c40ceefc4ee0dbe3b766",
        "buggy_code": "__version__ = '2.3.0.dev9'",
        "fixed_code": "__version__ = '2.3.0.dev10'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev9'\n+__version__ = '2.3.0.dev10'"
    },
    {
        "commit_id": "dd268c1b2bccd0813528c40ceefc4ee0dbe3b766",
        "commit_message": "improve error representation for missing factory definitions\nin recursive funcarg reconstruction",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dd268c1b2bccd0813528c40ceefc4ee0dbe3b766",
        "buggy_code": "version='2.3.0.dev9',",
        "fixed_code": "version='2.3.0.dev10',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev9',\n+        version='2.3.0.dev10',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "172505f7031d559b09f167e25145c033f07f2064",
        "commit_message": "fix/consolidate --junitxml=path construction with relative pathes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/172505f7031d559b09f167e25145c033f07f2064",
        "buggy_code": "__version__ = '2.3.0.dev8'",
        "fixed_code": "__version__ = '2.3.0.dev9'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev8'\n+__version__ = '2.3.0.dev9'"
    },
    {
        "commit_id": "172505f7031d559b09f167e25145c033f07f2064",
        "commit_message": "fix/consolidate --junitxml=path construction with relative pathes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/172505f7031d559b09f167e25145c033f07f2064",
        "buggy_code": "self.logfile = os.path.normpath(logfile)",
        "fixed_code": "self.logfile = os.path.normpath(os.path.abspath(logfile))",
        "patch": "@@ -89,7 +89,7 @@ def mangle_testnames(names):\n class LogXML(object):\n     def __init__(self, logfile, prefix):\n         logfile = os.path.expanduser(os.path.expandvars(logfile))\n-        self.logfile = os.path.normpath(logfile)\n+        self.logfile = os.path.normpath(os.path.abspath(logfile))\n         self.prefix = prefix\n         self.tests = []\n         self.passed = self.skipped = 0"
    },
    {
        "commit_id": "172505f7031d559b09f167e25145c033f07f2064",
        "commit_message": "fix/consolidate --junitxml=path construction with relative pathes",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/172505f7031d559b09f167e25145c033f07f2064",
        "buggy_code": "version='2.3.0.dev8',",
        "fixed_code": "version='2.3.0.dev9',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev8',\n+        version='2.3.0.dev9',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "commit_message": "implement a scope/parametrized examples using the so-far new features\nalso fix a bug with scoping/parametrization",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "buggy_code": "__version__ = '2.3.0.dev2'",
        "fixed_code": "__version__ = '2.3.0.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev2'\n+__version__ = '2.3.0.dev3'"
    },
    {
        "commit_id": "6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "commit_message": "implement a scope/parametrized examples using the so-far new features\nalso fix a bug with scoping/parametrization",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "buggy_code": "version = release = \"2.3.0.dev5\"",
        "fixed_code": "version = release = \"2.3.0.dev3\"",
        "patch": "@@ -17,7 +17,7 @@\n #\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n-version = release = \"2.3.0.dev5\"\n+version = release = \"2.3.0.dev3\"\n \n import sys, os\n "
    },
    {
        "commit_id": "6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "commit_message": "implement a scope/parametrized examples using the so-far new features\nalso fix a bug with scoping/parametrization",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b0f0adf5b5dd97f718f20ba77ecf375528b4bbd",
        "buggy_code": "version='2.3.0.dev2',",
        "fixed_code": "version='2.3.0.dev3',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev2',\n+        version='2.3.0.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "b902c36bfc49ce6441d97d60134e728b99d29d5e",
        "commit_message": "Fix typo in terminal help text",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b902c36bfc49ce6441d97d60134e728b99d29d5e",
        "buggy_code": "dest=\"quiet\", default=0, help=\"decreate verbosity.\"),",
        "fixed_code": "dest=\"quiet\", default=0, help=\"decrease verbosity.\"),",
        "patch": "@@ -12,7 +12,7 @@ def pytest_addoption(parser):\n     group._addoption('-v', '--verbose', action=\"count\",\n                dest=\"verbose\", default=0, help=\"increase verbosity.\"),\n     group._addoption('-q', '--quiet', action=\"count\",\n-               dest=\"quiet\", default=0, help=\"decreate verbosity.\"),\n+               dest=\"quiet\", default=0, help=\"decrease verbosity.\"),\n     group._addoption('-r',\n          action=\"store\", dest=\"reportchars\", default=None, metavar=\"chars\",\n          help=\"show extra test summary info as specified by chars (f)ailed, \""
    },
    {
        "commit_id": "1aca6c9d7cd50cd726222ced084658f955a1adc1",
        "commit_message": "Fix extension of of cached re-written file\n\nWith PYTHONOPTIMIZE set this had the extension of \"o\" instead of \".pyo\".\nFixes issue #168.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1aca6c9d7cd50cd726222ced084658f955a1adc1",
        "buggy_code": "PYC_EXT = \".py\" + \"c\" if __debug__ else \"o\"",
        "fixed_code": "PYC_EXT = \".py\" + (\"c\" if __debug__ else \"o\")",
        "patch": "@@ -34,7 +34,7 @@\n     PYTEST_TAG = \"%s-%s%s-PYTEST\" % (impl, ver[0], ver[1])\n     del ver, impl\n \n-PYC_EXT = \".py\" + \"c\" if __debug__ else \"o\"\n+PYC_EXT = \".py\" + (\"c\" if __debug__ else \"o\")\n PYC_TAIL = \".\" + PYTEST_TAG + PYC_EXT\n \n REWRITE_NEWLINES = sys.version_info[:2] != (2, 7) and sys.version_info < (3, 2)"
    },
    {
        "commit_id": "ecec653e98158a6eb32b9c303527d5de169850eb",
        "commit_message": "fix issue151 - heuristcally lookup conftest files on all command line arguments, not just the first existing dir/file\n\nyou can install the corresponding pytest-2.3.dev2 via\npip install -i http:/pypi.testrun.org -U pytest",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ecec653e98158a6eb32b9c303527d5de169850eb",
        "buggy_code": "__version__ = '2.3.0.dev1'",
        "fixed_code": "__version__ = '2.3.0.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.3.0.dev1'\n+__version__ = '2.3.0.dev2'"
    },
    {
        "commit_id": "ecec653e98158a6eb32b9c303527d5de169850eb",
        "commit_message": "fix issue151 - heuristcally lookup conftest files on all command line arguments, not just the first existing dir/file\n\nyou can install the corresponding pytest-2.3.dev2 via\npip install -i http:/pypi.testrun.org -U pytest",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ecec653e98158a6eb32b9c303527d5de169850eb",
        "buggy_code": "version='2.3.0.dev1',",
        "fixed_code": "version='2.3.0.dev2',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.3.0.dev1',\n+        version='2.3.0.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "commit_message": "fix skip/xfail confusion, reported and discussed on\nhttp://stackoverflow.com/questions/11105828/in-py-test-when-i-explicitly-skip-a-test-that-is-marked-as-xfail-how-can-i-get",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "buggy_code": "__version__ = '2.2.5.dev3'",
        "fixed_code": "__version__ = '2.2.5.dev4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.5.dev3'\n+__version__ = '2.2.5.dev4'"
    },
    {
        "commit_id": "6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "commit_message": "fix skip/xfail confusion, reported and discussed on\nhttp://stackoverflow.com/questions/11105828/in-py-test-when-i-explicitly-skip-a-test-that-is-marked-as-xfail-how-can-i-get",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "buggy_code": "if report.failed and 'xfail' not in getattr(report, 'keywords', []):",
        "fixed_code": "if report.failed and not hasattr(report, 'wasxfail'):",
        "patch": "@@ -387,7 +387,7 @@ def pytest_collectstart(self):\n             raise self.Interrupted(self.shouldstop)\n \n     def pytest_runtest_logreport(self, report):\n-        if report.failed and 'xfail' not in getattr(report, 'keywords', []):\n+        if report.failed and not hasattr(report, 'wasxfail'):\n             self._testsfailed += 1\n             maxfail = self.config.getvalue(\"maxfail\")\n             if maxfail and self._testsfailed >= maxfail:"
    },
    {
        "commit_id": "6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "commit_message": "fix skip/xfail confusion, reported and discussed on\nhttp://stackoverflow.com/questions/11105828/in-py-test-when-i-explicitly-skip-a-test-that-is-marked-as-xfail-how-can-i-get",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6e0c30d67d984d653d9dad79a7c43e3cb21f5c4a",
        "buggy_code": "version='2.2.5.dev3',",
        "fixed_code": "version='2.2.5.dev4',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.5.dev3',\n+        version='2.2.5.dev4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "474b177da8cf8a97250c5ec1b596f0e2997f305e",
        "commit_message": "fix issue129 - improve http://pytest.org/latest/faq.html\nespecially with respect to the \"magic\" history, also mention\npytest-django, trial and unittest integration.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/474b177da8cf8a97250c5ec1b596f0e2997f305e",
        "buggy_code": "version = release = \"2.2.4.2\"",
        "fixed_code": "version = release = \"2.2.4.3\"",
        "patch": "@@ -17,7 +17,7 @@\n #\n # The full version, including alpha/beta/rc tags.\n # The short X.Y version.\n-version = release = \"2.2.4.2\"\n+version = release = \"2.2.4.3\"\n \n import sys, os\n "
    },
    {
        "commit_id": "3f17784386eecd758170973c573774a5564c70a8",
        "commit_message": "fix issue128 - show captured output when capsys/capfd are in use",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3f17784386eecd758170973c573774a5564c70a8",
        "buggy_code": "__version__ = '2.2.4'",
        "fixed_code": "__version__ = '2.2.5.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.4'\n+__version__ = '2.2.5.dev1'"
    },
    {
        "commit_id": "3f17784386eecd758170973c573774a5564c70a8",
        "commit_message": "fix issue128 - show captured output when capsys/capfd are in use",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3f17784386eecd758170973c573774a5564c70a8",
        "buggy_code": "version='2.2.4',",
        "fixed_code": "version='2.2.5.dev1',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.4',\n+        version='2.2.5.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "971f96468c922cc466fee596c1a56f501e01ecdf",
        "commit_message": "fix py2py3 example tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/971f96468c922cc466fee596c1a56f501e01ecdf",
        "buggy_code": "assert 0, e",
        "fixed_code": "pass",
        "patch": "@@ -3,5 +3,5 @@ def test_exception_syntax():\n     try:\n         0/0\n     except ZeroDivisionError, e:\n-        assert 0, e\n+        pass\n "
    },
    {
        "commit_id": "971f96468c922cc466fee596c1a56f501e01ecdf",
        "commit_message": "fix py2py3 example tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/971f96468c922cc466fee596c1a56f501e01ecdf",
        "buggy_code": "assert 0, e",
        "fixed_code": "pass",
        "patch": "@@ -3,5 +3,5 @@ def test_exception_syntax():\n     try:\n         0/0\n     except ZeroDivisionError as e:\n-        assert 0, e\n+        pass\n "
    },
    {
        "commit_id": "1bf1cfd07a34ea19feecad8e6b90a84ee597b8a6",
        "commit_message": "fix help string for --paste",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1bf1cfd07a34ea19feecad8e6b90a84ee597b8a6",
        "buggy_code": "help=\"send failed|all info to Pocoo pastebin service.\")",
        "fixed_code": "help=\"send failed|all info to bpaste.net pastebin service.\")",
        "patch": "@@ -11,7 +11,7 @@ def pytest_addoption(parser):\n     group._addoption('--pastebin', metavar=\"mode\",\n         action='store', dest=\"pastebin\", default=None,\n         type=\"choice\", choices=['failed', 'all'],\n-        help=\"send failed|all info to Pocoo pastebin service.\")\n+        help=\"send failed|all info to bpaste.net pastebin service.\")\n \n def pytest_configure(__multicall__, config):\n     import tempfile"
    },
    {
        "commit_id": "e18abfd013c3bcea7903758624a244dcf4ca8d5e",
        "commit_message": "fix issue143 - call unconfigure/sessionfinish always when\nconfigure/sessionstart where called\n\nuse exitcode 4 (instead of 3 which signaled an internal error)\nwhen an initial directory/file was not found",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e18abfd013c3bcea7903758624a244dcf4ca8d5e",
        "buggy_code": "assert result.ret == 3",
        "fixed_code": "assert result.ret == 4",
        "patch": "@@ -262,7 +262,7 @@ def test_collectonly_missing_path(self, testdir):\n             not to have the items attribute\n         \"\"\"\n         result = testdir.runpytest(\"--collectonly\", \"uhm_missing_path\")\n-        assert result.ret == 3\n+        assert result.ret == 4\n         result.stderr.fnmatch_lines([\n             '*ERROR: file not found*',\n         ])"
    },
    {
        "commit_id": "6c7ea8191fe94f101d6b45d09a562a1e83391c17",
        "commit_message": "fix wrong release version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6c7ea8191fe94f101d6b45d09a562a1e83391c17",
        "buggy_code": "__version__ = '2.4.4'",
        "fixed_code": "__version__ = '2.2.4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.4.4'\n+__version__ = '2.2.4'"
    },
    {
        "commit_id": "4d21274a29f89c925922c5535166046e40c5a5b7",
        "commit_message": "release 2.2.3 to fix package contents (2.2.2 contained too many files)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d21274a29f89c925922c5535166046e40c5a5b7",
        "buggy_code": "__version__ = '2.2.2'",
        "fixed_code": "__version__ = '2.2.3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.2'\n+__version__ = '2.2.3'"
    },
    {
        "commit_id": "4d21274a29f89c925922c5535166046e40c5a5b7",
        "commit_message": "release 2.2.3 to fix package contents (2.2.2 contained too many files)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4d21274a29f89c925922c5535166046e40c5a5b7",
        "buggy_code": "version='2.2.2',",
        "fixed_code": "version='2.2.3',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.2',\n+        version='2.2.3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "dfa273dc2596645be45e3c58a0634d3ffd0ff6a2",
        "commit_message": "fix issue177 - actually perform session scope finalization",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dfa273dc2596645be45e3c58a0634d3ffd0ff6a2",
        "buggy_code": "__version__ = '2.2.2.dev6'",
        "fixed_code": "__version__ = '2.2.2.dev7'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.2.dev6'\n+__version__ = '2.2.2.dev7'"
    },
    {
        "commit_id": "c126cac98d2e9fe522c1b9b474b30e0f2d3d53d4",
        "commit_message": "fix unittest/marker integration",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c126cac98d2e9fe522c1b9b474b30e0f2d3d53d4",
        "buggy_code": "__version__ = '2.2.2.dev4'",
        "fixed_code": "__version__ = '2.2.2.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.2.dev4'\n+__version__ = '2.2.2.dev5'"
    },
    {
        "commit_id": "c126cac98d2e9fe522c1b9b474b30e0f2d3d53d4",
        "commit_message": "fix unittest/marker integration",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c126cac98d2e9fe522c1b9b474b30e0f2d3d53d4",
        "buggy_code": "version='2.2.2.dev4',",
        "fixed_code": "version='2.2.2.dev5',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.2.dev4',\n+        version='2.2.2.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f2791988f98560a03c791768c79ff6b61ac16807",
        "commit_message": "fix issue102: report more useful errors and hints for when a\ntest directory was renamed and some pyc/__pycache__ remain",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f2791988f98560a03c791768c79ff6b61ac16807",
        "buggy_code": "__version__ = '2.2.2.dev2'",
        "fixed_code": "__version__ = '2.2.2.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.2.dev2'\n+__version__ = '2.2.2.dev3'"
    },
    {
        "commit_id": "8e83af1c3358864f40436f80fc98482834d0736e",
        "commit_message": "fix spacing",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8e83af1c3358864f40436f80fc98482834d0736e",
        "buggy_code": "assert numentries >3",
        "fixed_code": "assert numentries > 3",
        "patch": "@@ -477,7 +477,7 @@ def pytest_funcarg__hello(request):\n         out = result.stdout.str()\n         assert out.find(\"conftest.py:2: ValueError\") != -1\n         numentries = out.count(\"_ _ _ _\") # separator for traceback entries\n-        assert numentries >3\n+        assert numentries > 3\n \n     def test_traceback_error_during_import(self, testdir):\n         testdir.makepyfile(\"\"\""
    },
    {
        "commit_id": "d5c3265763ddca8bdbdbc39bf29028ce16423e38",
        "commit_message": "fix issue101: wrong args to unittest.TestCase test function now\nproduce better output",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d5c3265763ddca8bdbdbc39bf29028ce16423e38",
        "buggy_code": "__version__ = '2.2.2.dev1'",
        "fixed_code": "__version__ = '2.2.2.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.2.dev1'\n+__version__ = '2.2.2.dev2'"
    },
    {
        "commit_id": "d5c3265763ddca8bdbdbc39bf29028ce16423e38",
        "commit_message": "fix issue101: wrong args to unittest.TestCase test function now\nproduce better output",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d5c3265763ddca8bdbdbc39bf29028ce16423e38",
        "buggy_code": "version='2.2.2.dev1',",
        "fixed_code": "version='2.2.2.dev2',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.2.dev1',\n+        version='2.2.2.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "82ba764bb6d04835eb59079640e36e780d6262db",
        "commit_message": "fix unorderable types as reported by Ralf Schmitt",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82ba764bb6d04835eb59079640e36e780d6262db",
        "buggy_code": "__version__ = '2.2.1.dev4'",
        "fixed_code": "__version__ = '2.2.1.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.1.dev4'\n+__version__ = '2.2.1.dev5'"
    },
    {
        "commit_id": "a94a6b42822ed660361ec8bd0ca01d98ae565ba9",
        "commit_message": "fix issue99 - internalerror with --resultlog now produce better output.\nthe fix depends on another change in the py lib which unifies\nthe output for native and non-native traceback formatting styles",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a94a6b42822ed660361ec8bd0ca01d98ae565ba9",
        "buggy_code": "__version__ = '2.2.1.dev2'",
        "fixed_code": "__version__ = '2.2.1.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.1.dev2'\n+__version__ = '2.2.1.dev3'"
    },
    {
        "commit_id": "c4fe622b82e56c21c2b951214a548337f92cda16",
        "commit_message": "fix issue93 - avoid \"delayed\" teardowns for distributed testing by\nsimplifying handling of teardowns.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c4fe622b82e56c21c2b951214a548337f92cda16",
        "buggy_code": "__version__ = '2.2.0'",
        "fixed_code": "__version__ = '2.2.1.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0'\n+__version__ = '2.2.1.dev1'"
    },
    {
        "commit_id": "c4fe622b82e56c21c2b951214a548337f92cda16",
        "commit_message": "fix issue93 - avoid \"delayed\" teardowns for distributed testing by\nsimplifying handling of teardowns.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c4fe622b82e56c21c2b951214a548337f92cda16",
        "buggy_code": "ss.teardown_exact(item)",
        "fixed_code": "ss.teardown_exact(item, None)",
        "patch": "@@ -689,7 +689,7 @@ def test_func(something): pass\n         teardownlist = item.getparent(pytest.Module).obj.teardownlist\n         ss = item.session._setupstate\n         assert not teardownlist\n-        ss.teardown_exact(item)\n+        ss.teardown_exact(item, None)\n         print(ss.stack)\n         assert teardownlist == [1]\n "
    },
    {
        "commit_id": "6b4e6eee094224aa1050a50f88944efd3782f188",
        "commit_message": "improve release announcement, shift and fix examples a bit. Bump version to 2.2.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b4e6eee094224aa1050a50f88944efd3782f188",
        "buggy_code": "__version__ = '2.2.0.dev11'",
        "fixed_code": "__version__ = '2.2.0'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0.dev11'\n+__version__ = '2.2.0'"
    },
    {
        "commit_id": "6b4e6eee094224aa1050a50f88944efd3782f188",
        "commit_message": "improve release announcement, shift and fix examples a bit. Bump version to 2.2.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b4e6eee094224aa1050a50f88944efd3782f188",
        "buggy_code": "\"@parametrize(arg1, [1,2]) would lead to two calls of the decorated \"",
        "fixed_code": "\"@parametrize('arg1', [1,2]) would lead to two calls of the decorated \"",
        "patch": "@@ -39,7 +39,7 @@ def pytest_configure(config):\n     config.addinivalue_line(\"markers\",\n         \"parametrize(argnames, argvalues): call a test function multiple \"\n         \"times passing in multiple different argument value sets. Example: \"\n-        \"@parametrize(arg1, [1,2]) would lead to two calls of the decorated \"\n+        \"@parametrize('arg1', [1,2]) would lead to two calls of the decorated \"\n         \"test function, one with arg1=1 and another with arg1=2.\"\n     )\n "
    },
    {
        "commit_id": "6b4e6eee094224aa1050a50f88944efd3782f188",
        "commit_message": "improve release announcement, shift and fix examples a bit. Bump version to 2.2.0",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b4e6eee094224aa1050a50f88944efd3782f188",
        "buggy_code": "version='2.2.0.dev11',",
        "fixed_code": "version='2.2.0',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.0.dev11',\n+        version='2.2.0',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "7bb7d1205c4a0dfb5c09d2079fb4f7b6c0118115",
        "commit_message": "finally fixing a bug that resulted in sometimes-failing duration tests (doh)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7bb7d1205c4a0dfb5c09d2079fb4f7b6c0118115",
        "buggy_code": "__version__ = '2.2.0.dev10'",
        "fixed_code": "__version__ = '2.2.0.dev11'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0.dev10'\n+__version__ = '2.2.0.dev11'"
    },
    {
        "commit_id": "7bb7d1205c4a0dfb5c09d2079fb4f7b6c0118115",
        "commit_message": "finally fixing a bug that resulted in sometimes-failing duration tests (doh)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7bb7d1205c4a0dfb5c09d2079fb4f7b6c0118115",
        "buggy_code": "version='2.2.0.dev10',",
        "fixed_code": "version='2.2.0.dev11',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.0.dev10',\n+        version='2.2.0.dev11',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "a5e7b2760db81c1dec6e68c9a74edca5381925fd",
        "commit_message": "fix issue90 - perform teardown after its actual test function/item.  This is implemented by modifying the runtestprotocol to remember \"pending\" teardowns and call them before the setup of the next item.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a5e7b2760db81c1dec6e68c9a74edca5381925fd",
        "buggy_code": "__version__ = '2.2.0.dev8'",
        "fixed_code": "__version__ = '2.2.0.dev9'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0.dev8'\n+__version__ = '2.2.0.dev9'"
    },
    {
        "commit_id": "a5e7b2760db81c1dec6e68c9a74edca5381925fd",
        "commit_message": "fix issue90 - perform teardown after its actual test function/item.  This is implemented by modifying the runtestprotocol to remember \"pending\" teardowns and call them before the setup of the next item.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a5e7b2760db81c1dec6e68c9a74edca5381925fd",
        "buggy_code": "version='2.2.0.dev8',",
        "fixed_code": "version='2.2.0.dev9',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.0.dev8',\n+        version='2.2.0.dev9',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f7c1b9087ac11eccaa2218b8c97a50e7d1acc2fa",
        "commit_message": "fix test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f7c1b9087ac11eccaa2218b8c97a50e7d1acc2fa",
        "buggy_code": "\"=* 1 test*deselected by 'test_two:'*=\",",
        "fixed_code": "\"=* 1 test*deselected by*test_two:*=\",",
        "patch": "@@ -340,7 +340,7 @@ def test_three():\n         result = testdir.runpytest(\"-k\", \"test_two:\", testpath)\n         result.stdout.fnmatch_lines([\n             \"*test_deselected.py ..\",\n-            \"=* 1 test*deselected by 'test_two:'*=\",\n+            \"=* 1 test*deselected by*test_two:*=\",\n         ])\n         assert result.ret == 0\n "
    },
    {
        "commit_id": "0b18b6094ed83e4c3f10b865d4d043823cd0c166",
        "commit_message": "fix duration option in case of collection errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0b18b6094ed83e4c3f10b865d4d043823cd0c166",
        "buggy_code": "__version__ = '2.2.0.dev3'",
        "fixed_code": "__version__ = '2.2.0.dev4'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0.dev3'\n+__version__ = '2.2.0.dev4'"
    },
    {
        "commit_id": "0b18b6094ed83e4c3f10b865d4d043823cd0c166",
        "commit_message": "fix duration option in case of collection errors",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0b18b6094ed83e4c3f10b865d4d043823cd0c166",
        "buggy_code": "version='2.2.0.dev3',",
        "fixed_code": "version='2.2.0.dev4',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.0.dev3',\n+        version='2.2.0.dev4',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "ae53d04780e203c0ca232f4f13856575c3b86de5",
        "commit_message": "fix py3 compat",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ae53d04780e203c0ca232f4f13856575c3b86de5",
        "buggy_code": "__version__ = '2.2.0.dev2'",
        "fixed_code": "__version__ = '2.2.0.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.2.0.dev2'\n+__version__ = '2.2.0.dev3'"
    },
    {
        "commit_id": "ae53d04780e203c0ca232f4f13856575c3b86de5",
        "commit_message": "fix py3 compat",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ae53d04780e203c0ca232f4f13856575c3b86de5",
        "buggy_code": "version='2.2.0.dev2',",
        "fixed_code": "version='2.2.0.dev3',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.2.0.dev2',\n+        version='2.2.0.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "78438db75294ef8dd50167581d9d33498b6ac0f6",
        "commit_message": "fix py3 failure",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/78438db75294ef8dd50167581d9d33498b6ac0f6",
        "buggy_code": "args = map(str, args)",
        "fixed_code": "args = [str(x) for x in args]",
        "patch": "@@ -360,7 +360,7 @@ def pytest_itemcollected(self, item):\n         return items, rec[0]\n \n     def parseconfig(self, *args):\n-        args = map(str, args)\n+        args = [str(x) for x in args]\n         for x in args:\n             if str(x).startswith('--basetemp'):\n                 break"
    },
    {
        "commit_id": "a2f4a11301906040304c7a9f69609b1606828f8f",
        "commit_message": "refine lsof/FD leakage testing and rework test setup and some of pytest own tests.   Note that the actual diff to non-test code is small.  Also remove some redundant tests (introduced by a copy-paste-error apparently in test_mark.py).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a2f4a11301906040304c7a9f69609b1606828f8f",
        "buggy_code": "__version__ = '2.1.4.dev2'",
        "fixed_code": "__version__ = '2.1.4.dev3'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.4.dev2'\n+__version__ = '2.1.4.dev3'"
    },
    {
        "commit_id": "a2f4a11301906040304c7a9f69609b1606828f8f",
        "commit_message": "refine lsof/FD leakage testing and rework test setup and some of pytest own tests.   Note that the actual diff to non-test code is small.  Also remove some redundant tests (introduced by a copy-paste-error apparently in test_mark.py).",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a2f4a11301906040304c7a9f69609b1606828f8f",
        "buggy_code": "version='2.1.4.dev2',",
        "fixed_code": "version='2.1.4.dev3',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.4.dev2',\n+        version='2.1.4.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "commit_message": "fix FD leakage during pytest's own test run and add \"--lsof\" option to tox default test runs.\n\nthe leakage came down to a problematic bit of the stdlib logging module: it takes ownerships of stdout/stderr making it hard for pytest to implement clean capturing.  The current work around is to add some extra code in the setup machinery of pytest's own tests which actually closes sub-FDs.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "buggy_code": "__version__ = '2.1.3'",
        "fixed_code": "__version__ = '2.1.4.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.3'\n+__version__ = '2.1.4.dev1'"
    },
    {
        "commit_id": "d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "commit_message": "fix FD leakage during pytest's own test run and add \"--lsof\" option to tox default test runs.\n\nthe leakage came down to a problematic bit of the stdlib logging module: it takes ownerships of stdout/stderr making it hard for pytest to implement clean capturing.  The current work around is to add some extra code in the setup machinery of pytest's own tests which actually closes sub-FDs.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "buggy_code": "version='2.1.3',",
        "fixed_code": "version='2.1.4.dev1',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.3',\n+        version='2.1.4.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "commit_message": "fix FD leakage during pytest's own test run and add \"--lsof\" option to tox default test runs.\n\nthe leakage came down to a problematic bit of the stdlib logging module: it takes ownerships of stdout/stderr making it hard for pytest to implement clean capturing.  The current work around is to add some extra code in the setup machinery of pytest's own tests which actually closes sub-FDs.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d4fe273b2fbda2592bd1238791e782c50c4fa1c2",
        "buggy_code": "assert len2 < config._numfiles + 7, out2",
        "fixed_code": "assert len2 < config._numfiles + 15, out2",
        "patch": "@@ -35,7 +35,7 @@ def pytest_unconfigure(config, __multicall__):\n     __multicall__.execute()\n     out2 = py.process.cmdexec(\"lsof -p %d\" % pid)\n     len2 = getopenfiles(out2)\n-    assert len2 < config._numfiles + 7, out2\n+    assert len2 < config._numfiles + 15, out2\n \n \n def pytest_runtest_setup(item):"
    },
    {
        "commit_id": "ad785a476ce2d5e8567f695ab1340036a49c85df",
        "commit_message": "going for 2.1.2 bug fix release",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ad785a476ce2d5e8567f695ab1340036a49c85df",
        "buggy_code": "__version__ = '2.1.2.dev2'",
        "fixed_code": "__version__ = '2.1.2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.2.dev2'\n+__version__ = '2.1.2'"
    },
    {
        "commit_id": "ad785a476ce2d5e8567f695ab1340036a49c85df",
        "commit_message": "going for 2.1.2 bug fix release",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ad785a476ce2d5e8567f695ab1340036a49c85df",
        "buggy_code": "version='2.1.2.dev2',",
        "fixed_code": "version='2.1.2',",
        "patch": "@@ -24,7 +24,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.2.dev2',\n+        version='2.1.2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "eaec527a608dd06a9a4e2f84a4c5d44c8ff2a838",
        "commit_message": "relax error string matching",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eaec527a608dd06a9a4e2f84a4c5d44c8ff2a838",
        "buggy_code": "\"*file*not*found*test_hello*\",",
        "fixed_code": "\"*not*found*test_hello*\",",
        "patch": "@@ -411,7 +411,7 @@ def test_cmdline_python_package(self, testdir, monkeypatch):\n         result = testdir.runpytest(\"--pyargs\", \"tpkg.test_hello\")\n         assert result.ret != 0\n         result.stderr.fnmatch_lines([\n-            \"*file*not*found*test_hello*\",\n+            \"*not*found*test_hello*\",\n         ])\n \n     def test_cmdline_python_package_not_exists(self, testdir):"
    },
    {
        "commit_id": "c426a67b0ebf832d4d279a6b6d99d40fa85a46f4",
        "commit_message": "make test skipping more precise to fix a py32 test failure",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c426a67b0ebf832d4d279a6b6d99d40fa85a46f4",
        "buggy_code": "@pytest.mark.skipif(\"not hasattr(os, 'symlink')\")",
        "fixed_code": "@pytest.mark.skipif(\"not hasattr(py.path.local, 'mksymlinkto')\")",
        "patch": "@@ -155,7 +155,7 @@ def test_conftest_printing_shows_if_error(self, testdir):\n         assert result.ret != 0\n         assert \"should be seen\" in result.stdout.str()\n \n-    @pytest.mark.skipif(\"not hasattr(os, 'symlink')\")\n+    @pytest.mark.skipif(\"not hasattr(py.path.local, 'mksymlinkto')\")\n     def test_chdir(self, testdir):\n         testdir.tmpdir.join(\"py\").mksymlinkto(py._pydir)\n         p = testdir.tmpdir.join(\"main.py\")"
    },
    {
        "commit_id": "7576b3c7d091c174924f20fcfd81cb73a41b19d9",
        "commit_message": "fix assertion rewriting on calls with a double-star arg",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7576b3c7d091c174924f20fcfd81cb73a41b19d9",
        "buggy_code": "new_kwarg, expl = self.visit(call.kwarg)",
        "fixed_code": "new_kwarg, expl = self.visit(call.kwargs)",
        "patch": "@@ -514,7 +514,7 @@ def visit_Call(self, call):\n             new_star, expl = self.visit(call.starargs)\n             arg_expls.append(\"*\" + expl)\n         if call.kwargs:\n-            new_kwarg, expl = self.visit(call.kwarg)\n+            new_kwarg, expl = self.visit(call.kwargs)\n             arg_expls.append(\"**\" + expl)\n         expl = \"%s(%s)\" % (func_expl, ', '.join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)"
    },
    {
        "commit_id": "f3bc197afbe9201ea8b867e151499520d55678eb",
        "commit_message": "fix #59: provide better Jenkins stdout and stderr sections",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f3bc197afbe9201ea8b867e151499520d55678eb",
        "buggy_code": "__version__ = '2.1.1.dev1'",
        "fixed_code": "__version__ = '2.1.1.dev2'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.1.dev1'\n+__version__ = '2.1.1.dev2'"
    },
    {
        "commit_id": "6096aeca538be79ceea02268e56e93d1c50433ca",
        "commit_message": "Fix a typo in assertion rewriting.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6096aeca538be79ceea02268e56e93d1c50433ca",
        "buggy_code": "cond = ast.Boolop(ast.And(), chain)",
        "fixed_code": "cond = ast.BoolOp(ast.And(), list(chain))",
        "patch": "@@ -421,7 +421,7 @@ def visit_Assert(self, assert_):\n             if chain:\n                 where = []\n                 if len(chain) > 1:\n-                    cond = ast.Boolop(ast.And(), chain)\n+                    cond = ast.BoolOp(ast.And(), list(chain))\n                 else:\n                     cond = chain[0]\n                 self.statements.append(ast.If(cond, where, []))"
    },
    {
        "commit_id": "8713f4ba60e1413e61cbce837643f29ac08c28c5",
        "commit_message": "fix issue 35 - provide download link and improved PDF version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8713f4ba60e1413e61cbce837643f29ac08c28c5",
        "buggy_code": "__version__ = '2.1.0.dev11'",
        "fixed_code": "__version__ = '2.1.0.dev12'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.0.dev11'\n+__version__ = '2.1.0.dev12'"
    },
    {
        "commit_id": "8713f4ba60e1413e61cbce837643f29ac08c28c5",
        "commit_message": "fix issue 35 - provide download link and improved PDF version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8713f4ba60e1413e61cbce837643f29ac08c28c5",
        "buggy_code": "version='2.1.0.dev11',",
        "fixed_code": "version='2.1.0.dev12',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.0.dev11',\n+        version='2.1.0.dev12',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "758b5e3511e8208b8c875cf2938c12c8dca37f4f",
        "commit_message": "fix issue53: nose-style setup now called with the correct ordering",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/758b5e3511e8208b8c875cf2938c12c8dca37f4f",
        "buggy_code": "__version__ = '2.1.0.dev8'",
        "fixed_code": "__version__ = '2.1.0.dev9'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.0.dev8'\n+__version__ = '2.1.0.dev9'"
    },
    {
        "commit_id": "758b5e3511e8208b8c875cf2938c12c8dca37f4f",
        "commit_message": "fix issue53: nose-style setup now called with the correct ordering",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/758b5e3511e8208b8c875cf2938c12c8dca37f4f",
        "buggy_code": "version='2.1.0.dev8',",
        "fixed_code": "version='2.1.0.dev9',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.0.dev8',\n+        version='2.1.0.dev9',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "d105e75d8714d6208d33a482053ed9020320cbdd",
        "commit_message": "fix pytest-xdist breakage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d105e75d8714d6208d33a482053ed9020320cbdd",
        "buggy_code": "__version__ = '2.1.0.dev6'",
        "fixed_code": "__version__ = '2.1.0.dev7'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.0.dev6'\n+__version__ = '2.1.0.dev7'"
    },
    {
        "commit_id": "d105e75d8714d6208d33a482053ed9020320cbdd",
        "commit_message": "fix pytest-xdist breakage",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d105e75d8714d6208d33a482053ed9020320cbdd",
        "buggy_code": "version='2.1.0.dev6',",
        "fixed_code": "version='2.1.0.dev7',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.0.dev6',\n+        version='2.1.0.dev7',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "407ca5b120741bff8b2dd8974b81952404ddc55d",
        "commit_message": "fix python2.5 compatibility",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/407ca5b120741bff8b2dd8974b81952404ddc55d",
        "buggy_code": "__version__ = '2.1.0.dev4'",
        "fixed_code": "__version__ = '2.1.0.dev5'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.1.0.dev4'\n+__version__ = '2.1.0.dev5'"
    },
    {
        "commit_id": "407ca5b120741bff8b2dd8974b81952404ddc55d",
        "commit_message": "fix python2.5 compatibility",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/407ca5b120741bff8b2dd8974b81952404ddc55d",
        "buggy_code": "version='2.1.0.dev4',",
        "fixed_code": "version='2.1.0.dev5',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.1.0.dev4',\n+        version='2.1.0.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "8772b8c9285bb26486b9064d0e76a3ef9022eafa",
        "commit_message": "fix name",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8772b8c9285bb26486b9064d0e76a3ef9022eafa",
        "buggy_code": "lines[0] += \"  << %s\" % (e.value,)",
        "fixed_code": "lines[0] += \"  << %s\" % (value,)",
        "patch": "@@ -65,7 +65,7 @@ def getfailure(e):\n     value = e.cause[1]\n     if str(value):\n         lines = explanation.split('\\n')\n-        lines[0] += \"  << %s\" % (e.value,)\n+        lines[0] += \"  << %s\" % (value,)\n         explanation = '\\n'.join(lines)\n     text = \"%s: %s\" % (e.cause[0].__name__, explanation)\n     if text.startswith('AssertionError: assert '):"
    },
    {
        "commit_id": "2618e3640fa6ea5e0bef02003dc04a35d8e9c87c",
        "commit_message": "account for quotes in error messages",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2618e3640fa6ea5e0bef02003dc04a35d8e9c87c",
        "buggy_code": "\"E   ImportError: No module named does_not_work\",",
        "fixed_code": "\"E   ImportError: No module named *does_not_work*\",",
        "patch": "@@ -89,7 +89,7 @@ def test_this():\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines([\n             #XXX on jython this fails:  \">   import import_fails\",\n-            \"E   ImportError: No module named does_not_work\",\n+            \"E   ImportError: No module named *does_not_work*\",\n         ])\n         assert result.ret == 1\n "
    },
    {
        "commit_id": "2618e3640fa6ea5e0bef02003dc04a35d8e9c87c",
        "commit_message": "account for quotes in error messages",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2618e3640fa6ea5e0bef02003dc04a35d8e9c87c",
        "buggy_code": "\"E   ImportError: No module named xyz\",",
        "fixed_code": "\"E   ImportError: No module named *xyz*\",",
        "patch": "@@ -533,7 +533,7 @@ def test_collect_fail(self, testdir, option):\n         result = testdir.runpytest(*option.args)\n         result.stdout.fnmatch_lines([\n             \">   import xyz\",\n-            \"E   ImportError: No module named xyz\",\n+            \"E   ImportError: No module named *xyz*\",\n             \"*1 error*\",\n         ])\n "
    },
    {
        "commit_id": "67859158d4257095a2a86be71f9474e2d6c0ade1",
        "commit_message": "fix issue48 - test and fix typo in MarkInfo repr",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/67859158d4257095a2a86be71f9474e2d6c0ade1",
        "buggy_code": "self._name, self.args, self.kwargs)",
        "fixed_code": "self.name, self.args, self.kwargs)",
        "patch": "@@ -153,7 +153,7 @@ def __init__(self, name, args, kwargs):\n \n     def __repr__(self):\n         return \"<MarkInfo %r args=%r kwargs=%r>\" % (\n-                self._name, self.args, self.kwargs)\n+                self.name, self.args, self.kwargs)\n \n def pytest_itemcollected(item):\n     if not isinstance(item, pytest.Function):"
    },
    {
        "commit_id": "8bc9fdc8d37fee7d2360cc89db7bf10db9914859",
        "commit_message": "fix a buffering issue that i think/hope only occurs during internal tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8bc9fdc8d37fee7d2360cc89db7bf10db9914859",
        "buggy_code": "result = testdir.runpytest(p)",
        "fixed_code": "result = testdir.runpytest(p, \"-s\")",
        "patch": "@@ -114,7 +114,7 @@ def test_txtfile_failing(self, testdir):\n             >>> i + 1\n             2\n         \"\"\")\n-        result = testdir.runpytest(p)\n+        result = testdir.runpytest(p, \"-s\")\n         result.stdout.fnmatch_lines([\n             '001 >>> i = 0',\n             '002 >>> i + 1',"
    },
    {
        "commit_id": "5e311d3bfc6b02465fd5ef097bcde28f5c6ce310",
        "commit_message": "fix timing float comparison",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5e311d3bfc6b02465fd5ef097bcde28f5c6ce310",
        "buggy_code": "assert float(val) >= 0.01",
        "fixed_code": "assert float(val) >= 0.001",
        "patch": "@@ -49,7 +49,7 @@ def test_sleep():\n         node = dom.getElementsByTagName(\"testsuite\")[0]\n         tnode = node.getElementsByTagName(\"testcase\")[0]\n         val = tnode.getAttributeNode(\"time\").value\n-        assert float(val) >= 0.01\n+        assert float(val) >= 0.001\n \n     def test_setup_error(self, testdir):\n         testdir.makepyfile(\"\"\""
    },
    {
        "commit_id": "4c885cf0d2b2a6ddb593aa82d22a581d5fa0e8e8",
        "commit_message": "hopefully final win32 fix for the junitxml path expansion",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c885cf0d2b2a6ddb593aa82d22a581d5fa0e8e8",
        "buggy_code": "home_var = os.path.expandvars('$HOME/test.xml')",
        "fixed_code": "home_var = os.path.normpath(os.path.expandvars('$HOME/test.xml'))",
        "patch": "@@ -369,7 +369,7 @@ def test_logxml_path_expansion():\n \n     home_tilde = os.path.expanduser('~/test.xml')\n     # this is here for when $HOME is not set correct\n-    home_var = os.path.expandvars('$HOME/test.xml')\n+    home_var = os.path.normpath(os.path.expandvars('$HOME/test.xml'))\n \n     xml_tilde = LogXML('~/test.xml', None)\n     assert xml_tilde.logfile == home_tilde"
    },
    {
        "commit_id": "8dc4e732f073354039e0ea7bfa4446c94025c6ca",
        "commit_message": "fix issue47 - fix time-per-test timing output for junitxml",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8dc4e732f073354039e0ea7bfa4446c94025c6ca",
        "buggy_code": "__version__ = '2.0.4.dev'",
        "fixed_code": "__version__ = '2.1.0.dev1'",
        "patch": "@@ -1,2 +1,2 @@\n #\n-__version__ = '2.0.4.dev'\n+__version__ = '2.1.0.dev1'"
    },
    {
        "commit_id": "8dc4e732f073354039e0ea7bfa4446c94025c6ca",
        "commit_message": "fix issue47 - fix time-per-test timing output for junitxml",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8dc4e732f073354039e0ea7bfa4446c94025c6ca",
        "buggy_code": "version='2.0.4.dev',",
        "fixed_code": "version='2.1.0.dev1',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.4.dev',\n+        version='2.1.0.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "ee64da4badece9f2151b8a005b769a81c90f1940",
        "commit_message": "fix grammar",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ee64da4badece9f2151b8a005b769a81c90f1940",
        "buggy_code": "support for presented detailed information in failing assertions.",
        "fixed_code": "support for presenting detailed information in failing assertions.",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-support for presented detailed information in failing assertions.\n+support for presenting detailed information in failing assertions.\n \"\"\"\n import py\n import imp"
    },
    {
        "commit_id": "06ca7090f9ff6024ced4ed012ee07f773f7aefa1",
        "commit_message": "fix issue38 - nicer tracebacks on sessionstart/configure (and other internal/custom hook failures)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/06ca7090f9ff6024ced4ed012ee07f773f7aefa1",
        "buggy_code": "config.pluginmanager.notify_exception(excinfo)",
        "fixed_code": "config.pluginmanager.notify_exception(excinfo, config.option)",
        "patch": "@@ -71,7 +71,7 @@ def pytest_cmdline_main(config):\n         session.exitstatus = EXIT_INTERRUPTED\n     except:\n         excinfo = py.code.ExceptionInfo()\n-        config.pluginmanager.notify_exception(excinfo)\n+        config.pluginmanager.notify_exception(excinfo, config.option)\n         session.exitstatus = EXIT_INTERNALERROR\n         if excinfo.errisinstance(SystemExit):\n             sys.stderr.write(\"mainloop: caught Spurious SystemExit!\\n\")"
    },
    {
        "commit_id": "3a9788fc6f19c53e665e7bdcb4c43907d0320a27",
        "commit_message": "fix missing reason/name information for skipped tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3a9788fc6f19c53e665e7bdcb4c43907d0320a27",
        "buggy_code": "__version__ = '2.0.3.dev2'",
        "fixed_code": "__version__ = '2.0.3.dev3'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.3.dev2'\n+__version__ = '2.0.3.dev3'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "3a9788fc6f19c53e665e7bdcb4c43907d0320a27",
        "commit_message": "fix missing reason/name information for skipped tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3a9788fc6f19c53e665e7bdcb4c43907d0320a27",
        "buggy_code": "version='2.0.3.dev2',",
        "fixed_code": "version='2.0.3.dev3',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.3.dev2',\n+        version='2.0.3.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "ed6d2537bc08e052fcc2fd0084bbf8bb8f50f4ac",
        "commit_message": "fix issue33 - no collection error for classes prefixed \"test\" deriving from object",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed6d2537bc08e052fcc2fd0084bbf8bb8f50f4ac",
        "buggy_code": "__version__ = '2.0.3.dev1'",
        "fixed_code": "__version__ = '2.0.3.dev2'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.3.dev1'\n+__version__ = '2.0.3.dev2'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "ed6d2537bc08e052fcc2fd0084bbf8bb8f50f4ac",
        "commit_message": "fix issue33 - no collection error for classes prefixed \"test\" deriving from object",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed6d2537bc08e052fcc2fd0084bbf8bb8f50f4ac",
        "buggy_code": "version='2.0.3.dev1',",
        "fixed_code": "version='2.0.3.dev2',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.3.dev1',\n+        version='2.0.3.dev2',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "5470cadbff5c7b543a3bb4f3cbc9a5c6535c87a7",
        "commit_message": "fix issue25 --pdb and win32/python encodings cause a crash in certain situations.\n\nThe reason is not clear but avoiding a fresh copy of the terminal writer\nhelps, maybe because the underlying file object has some state?",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5470cadbff5c7b543a3bb4f3cbc9a5c6535c87a7",
        "buggy_code": "__version__ = '2.0.2.dev5'",
        "fixed_code": "__version__ = '2.0.2.dev6'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.2.dev5'\n+__version__ = '2.0.2.dev6'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "5470cadbff5c7b543a3bb4f3cbc9a5c6535c87a7",
        "commit_message": "fix issue25 --pdb and win32/python encodings cause a crash in certain situations.\n\nThe reason is not clear but avoiding a fresh copy of the terminal writer\nhelps, maybe because the underlying file object has some state?",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5470cadbff5c7b543a3bb4f3cbc9a5c6535c87a7",
        "buggy_code": "version='2.0.2.dev5',",
        "fixed_code": "version='2.0.2.dev6',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.2.dev5',\n+        version='2.0.2.dev6',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "c552b58dc5e2f1cba7c1e8db9e2d666aeff78db9",
        "commit_message": "fix issue27 - --collectonly and -k keyword selection now work together.\ninternally, collectonly and terminal reporting has been unified.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c552b58dc5e2f1cba7c1e8db9e2d666aeff78db9",
        "buggy_code": "__version__ = '2.0.2.dev4'",
        "fixed_code": "__version__ = '2.0.2.dev5'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.2.dev4'\n+__version__ = '2.0.2.dev5'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "c552b58dc5e2f1cba7c1e8db9e2d666aeff78db9",
        "commit_message": "fix issue27 - --collectonly and -k keyword selection now work together.\ninternally, collectonly and terminal reporting has been unified.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c552b58dc5e2f1cba7c1e8db9e2d666aeff78db9",
        "buggy_code": "version='2.0.2.dev4',",
        "fixed_code": "version='2.0.2.dev5',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.2.dev4',\n+        version='2.0.2.dev5',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "318e8a404be53763ac952515ca78af041878a1a0",
        "commit_message": "fix and improve error reporting for parametrizing funcargs (originally reported by antlong)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/318e8a404be53763ac952515ca78af041878a1a0",
        "buggy_code": "__version__ = '2.0.2.dev2'",
        "fixed_code": "__version__ = '2.0.2.dev3'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.2.dev2'\n+__version__ = '2.0.2.dev3'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "318e8a404be53763ac952515ca78af041878a1a0",
        "commit_message": "fix and improve error reporting for parametrizing funcargs (originally reported by antlong)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/318e8a404be53763ac952515ca78af041878a1a0",
        "buggy_code": "version='2.0.2.dev2',",
        "fixed_code": "version='2.0.2.dev3',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.2.dev2',\n+        version='2.0.2.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "070c73ff2f8cad56bde41eaae9ea49876d213951",
        "commit_message": "fix issue30 (the second time)\nput module globals into namespace for xfail and skipif expressions",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/070c73ff2f8cad56bde41eaae9ea49876d213951",
        "buggy_code": "__version__ = '2.0.2.dev1'",
        "fixed_code": "__version__ = '2.0.2.dev2'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.2.dev1'\n+__version__ = '2.0.2.dev2'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "6f3b84da9f4447b481a44763be6641c514ec9a73",
        "commit_message": "fix issue 28 - setup_method now works with pytest_generate_tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f3b84da9f4447b481a44763be6641c514ec9a73",
        "buggy_code": "__version__ = '2.0.2.dev0'",
        "fixed_code": "__version__ = '2.0.2.dev1'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.2.dev0'\n+__version__ = '2.0.2.dev1'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "6f3b84da9f4447b481a44763be6641c514ec9a73",
        "commit_message": "fix issue 28 - setup_method now works with pytest_generate_tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f3b84da9f4447b481a44763be6641c514ec9a73",
        "buggy_code": "version='2.0.2.dev0',",
        "fixed_code": "version='2.0.2.dev1',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.2.dev0',\n+        version='2.0.2.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f1b5dae1fbb0b325a42b7ad169a9d6341f76d039",
        "commit_message": "fix help string",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f1b5dae1fbb0b325a42b7ad169a9d6341f76d039",
        "buggy_code": "help=\"traceback print mode (long/short/line/no).\")",
        "fixed_code": "help=\"traceback print mode (long/short/line/native/no).\")",
        "patch": "@@ -25,7 +25,7 @@ def pytest_addoption(parser):\n     group._addoption('--tb', metavar=\"style\",\n                action=\"store\", dest=\"tbstyle\", default='long',\n                type=\"choice\", choices=['long', 'short', 'no', 'line', 'native'],\n-               help=\"traceback print mode (long/short/line/no).\")\n+               help=\"traceback print mode (long/short/line/native/no).\")\n     group._addoption('--fulltrace',\n                action=\"store_true\", dest=\"fulltrace\", default=False,\n                help=\"don't cut any tracebacks (default is to cut).\")"
    },
    {
        "commit_id": "3004fe3915223598c6af5c0a9ce0156d63532e29",
        "commit_message": "fix the last committed laxation of a test",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3004fe3915223598c6af5c0a9ce0156d63532e29",
        "buggy_code": "\"*file*not*found*test_hello\",",
        "fixed_code": "\"*file*not*found*test_hello*\",",
        "patch": "@@ -350,7 +350,7 @@ def test_cmdline_python_package(self, testdir, monkeypatch):\n         result = testdir.runpytest(\"--pyargs\", \"tpkg.test_hello\")\n         assert result.ret != 0\n         result.stderr.fnmatch_lines([\n-            \"*file*not*found*test_hello\",\n+            \"*file*not*found*test_hello*\",\n         ])\n \n     def test_cmdline_python_package_not_exists(self, testdir):"
    },
    {
        "commit_id": "762ea71f676cc52819d63be3dfee47b424a05586",
        "commit_message": "fix error reporting issue when a \"pyc\" file has no relating \"py\"",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/762ea71f676cc52819d63be3dfee47b424a05586",
        "buggy_code": "return p",
        "fixed_code": "return str(p)",
        "patch": "@@ -449,7 +449,7 @@ def _tryconvertpyarg(self, x):\n             p = p.dirpath()\n         else:\n             p = p.new(basename=p.purebasename+\".py\")\n-        return p\n+        return str(p)\n \n     def _parsearg(self, arg):\n         \"\"\" return (fspath, names) tuple after checking the file exists. \"\"\""
    },
    {
        "commit_id": "762ea71f676cc52819d63be3dfee47b424a05586",
        "commit_message": "fix error reporting issue when a \"pyc\" file has no relating \"py\"",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/762ea71f676cc52819d63be3dfee47b424a05586",
        "buggy_code": "__version__ = '2.0.1.dev9'",
        "fixed_code": "__version__ = '2.0.1.dev10'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.1.dev9'\n+__version__ = '2.0.1.dev10'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "88cfaebbcbdd80bc01ad44834a1bb37bfa2c38e6",
        "commit_message": "fix issue12 - show plugin versions with \"--version\" and \"--traceconfig\" and also document how to add extra information to reporting test header",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88cfaebbcbdd80bc01ad44834a1bb37bfa2c38e6",
        "buggy_code": "__version__ = '2.0.1.dev7'",
        "fixed_code": "__version__ = '2.0.1.dev8'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.1.dev7'\n+__version__ = '2.0.1.dev8'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "88cfaebbcbdd80bc01ad44834a1bb37bfa2c38e6",
        "commit_message": "fix issue12 - show plugin versions with \"--version\" and \"--traceconfig\" and also document how to add extra information to reporting test header",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/88cfaebbcbdd80bc01ad44834a1bb37bfa2c38e6",
        "buggy_code": "version='2.0.1.dev7',",
        "fixed_code": "version='2.0.1.dev8',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.1.dev7',\n+        version='2.0.1.dev8',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "647b56614ab709159f322e034b0fe31f98d40f9e",
        "commit_message": "fix issue17 by requiring an update to pylib which helps to fix it",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/647b56614ab709159f322e034b0fe31f98d40f9e",
        "buggy_code": "__version__ = '2.0.1.dev6'",
        "fixed_code": "__version__ = '2.0.1.dev7'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.1.dev6'\n+__version__ = '2.0.1.dev7'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "1b3fb3d2292ed2dd046f1721cce9128aa4317112",
        "commit_message": "fix issue15 - tests for python3/nose-1.0 combo work now",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1b3fb3d2292ed2dd046f1721cce9128aa4317112",
        "buggy_code": "__version__ = '2.0.1.dev5'",
        "fixed_code": "__version__ = '2.0.1.dev6'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.1.dev5'\n+__version__ = '2.0.1.dev6'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "1b3fb3d2292ed2dd046f1721cce9128aa4317112",
        "commit_message": "fix issue15 - tests for python3/nose-1.0 combo work now",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1b3fb3d2292ed2dd046f1721cce9128aa4317112",
        "buggy_code": "version='2.0.1.dev5',",
        "fixed_code": "version='2.0.1.dev6',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.1.dev5',\n+        version='2.0.1.dev6',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "e6541ed14e945d8f49e91268b2c5fcc85b766df9",
        "commit_message": "bump version and fix changelog issue reference",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e6541ed14e945d8f49e91268b2c5fcc85b766df9",
        "buggy_code": "__version__ = '2.0.1.dev1'",
        "fixed_code": "__version__ = '2.0.1.dev3'",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n unit and functional testing with Python.\n \"\"\"\n-__version__ = '2.0.1.dev1'\n+__version__ = '2.0.1.dev3'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "e6541ed14e945d8f49e91268b2c5fcc85b766df9",
        "commit_message": "bump version and fix changelog issue reference",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e6541ed14e945d8f49e91268b2c5fcc85b766df9",
        "buggy_code": "version='2.0.1.dev1',",
        "fixed_code": "version='2.0.1.dev3',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.1.dev1',\n+        version='2.0.1.dev3',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "9be1cd80070132dec423dc394866ec6b98f66b0e",
        "commit_message": "fix #6 : allow skip/xfail/pdb with trial by hacking the raw exception info out from trial",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9be1cd80070132dec423dc394866ec6b98f66b0e",
        "buggy_code": "__version__ = '2.0.0.dev36'",
        "fixed_code": "__version__ = '2.0.0.dev37'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = '2.0.0.dev36'\n+__version__ = '2.0.0.dev37'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "9be1cd80070132dec423dc394866ec6b98f66b0e",
        "commit_message": "fix #6 : allow skip/xfail/pdb with trial by hacking the raw exception info out from trial",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9be1cd80070132dec423dc394866ec6b98f66b0e",
        "buggy_code": "version='2.0.0.dev36',",
        "fixed_code": "version='2.0.0.dev37',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.0.dev36',\n+        version='2.0.0.dev37',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "4accc4aa68bc526e33a3d75755ea3bd2860a4075",
        "commit_message": "fix the py version check",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4accc4aa68bc526e33a3d75755ea3bd2860a4075",
        "buggy_code": "assert py.__version__.split(\".\")[:2] >= ['2', '0'], (\"installation problem: \"",
        "fixed_code": "assert py.__version__.split(\".\")[:2] >= ['1', '4'], (\"installation problem: \"",
        "patch": "@@ -8,7 +8,7 @@\n import py\n from _pytest import hookspec # the extension point definitions\n \n-assert py.__version__.split(\".\")[:2] >= ['2', '0'], (\"installation problem: \"\n+assert py.__version__.split(\".\")[:2] >= ['1', '4'], (\"installation problem: \"\n     \"%s is too old, remove or upgrade 'py'\" % (py.__version__))\n \n default_plugins = ("
    },
    {
        "commit_id": "4accc4aa68bc526e33a3d75755ea3bd2860a4075",
        "commit_message": "fix the py version check",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4accc4aa68bc526e33a3d75755ea3bd2860a4075",
        "buggy_code": "__version__ = '2.0.0.dev34'",
        "fixed_code": "__version__ = '2.0.0.dev35'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = '2.0.0.dev34'\n+__version__ = '2.0.0.dev35'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "4fa7a2e8ceaa8819964ecfc0a44665f78b4d0fb3",
        "commit_message": "fix #128 show tracebacks for all failures and errors that haven't beed PDB-debugged",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4fa7a2e8ceaa8819964ecfc0a44665f78b4d0fb3",
        "buggy_code": "__version__ = '2.0.0.dev32'",
        "fixed_code": "__version__ = '2.0.0.dev33'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = '2.0.0.dev32'\n+__version__ = '2.0.0.dev33'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "4fa7a2e8ceaa8819964ecfc0a44665f78b4d0fb3",
        "commit_message": "fix #128 show tracebacks for all failures and errors that haven't beed PDB-debugged",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4fa7a2e8ceaa8819964ecfc0a44665f78b4d0fb3",
        "buggy_code": "version='2.0.0.dev32',",
        "fixed_code": "version='2.0.0.dev33',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.0.dev32',\n+        version='2.0.0.dev33',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "6e6b0ab5d9df01fbd327229ef2bdbcdb23490e1c",
        "commit_message": "nice-fy error reporting of self-tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6e6b0ab5d9df01fbd327229ef2bdbcdb23490e1c",
        "buggy_code": "pytest.raises(ValueError, \"rec.popcall('abc')\")",
        "fixed_code": "pytest.raises(pytest.fail.Exception, \"rec.popcall('abc')\")",
        "patch": "@@ -82,7 +82,7 @@ def pytest_xyz(self, arg):\n     call = rec.popcall(\"pytest_xyz\")\n     assert call.arg == 123\n     assert call._name == \"pytest_xyz\"\n-    pytest.raises(ValueError, \"rec.popcall('abc')\")\n+    pytest.raises(pytest.fail.Exception, \"rec.popcall('abc')\")\n \n def test_hookrecorder_basic_no_args_hook():\n     rec = HookRecorder(PluginManager())"
    },
    {
        "commit_id": "2458c139e40d875cb19c7f173c6e0ad2562ad2f0",
        "commit_message": "fix bug on windows",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2458c139e40d875cb19c7f173c6e0ad2562ad2f0",
        "buggy_code": "script = pytest.__file__.strip(\"co\")",
        "fixed_code": "script = pytest.__file__.rstrip(\"co\")",
        "patch": "@@ -454,7 +454,7 @@ def runpybin(self, scriptname, *args):\n     def _getpybinargs(self, scriptname):\n         if not self.request.config.getvalue(\"notoolsonpath\"):\n             import pytest\n-            script = pytest.__file__.strip(\"co\")\n+            script = pytest.__file__.rstrip(\"co\")\n             assert script, \"script %r not found\" % scriptname\n             # XXX we rely on script refering to the correct environment\n             # we cannot use \"(py.std.sys.executable,script)\""
    },
    {
        "commit_id": "582486d5314e5785b3a36df8466d49afaf37ab47",
        "commit_message": "refine docs and docstrings, fix some small bits here and there while doing that.",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/582486d5314e5785b3a36df8466d49afaf37ab47",
        "buggy_code": "\"\"\"run test suites written for nose. \"\"\"",
        "fixed_code": "\"\"\" run test suites written for nose. \"\"\"",
        "patch": "@@ -1,4 +1,4 @@\n-\"\"\"run test suites written for nose. \"\"\"\n+\"\"\" run test suites written for nose. \"\"\"\n \n import pytest, py\n import inspect"
    },
    {
        "commit_id": "82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "commit_message": "fix skip reporting over distributed testing.  if we have a \"skip\" report\nrep.longrepr will now be a 3-tuple (path, lineno, message)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "buggy_code": "msg = str(report.longrepr.longrepr)",
        "fixed_code": "msg = str(report.longrepr[2])",
        "patch": "@@ -389,7 +389,7 @@ def pytest_collectreport(self, report):\n                 msg = report.longrepr.reprcrash.message\n             else:\n                 # XXX unify (we have CollectErrorRepr here)\n-                msg = str(report.longrepr.longrepr)\n+                msg = str(report.longrepr[2])\n             self.outindent(\"!!! %s !!!\" % msg)\n             #self.outindent(\"!!! error !!!\")\n             self._failed.append(report)"
    },
    {
        "commit_id": "82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "commit_message": "fix skip reporting over distributed testing.  if we have a \"skip\" report\nrep.longrepr will now be a 3-tuple (path, lineno, message)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "buggy_code": "__version__ = '2.0.0.dev27'",
        "fixed_code": "__version__ = '2.0.0.dev28'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = '2.0.0.dev27'\n+__version__ = '2.0.0.dev28'\n __all__ = ['main']\n \n from _pytest.core import main, UsageError, _preloadplugins"
    },
    {
        "commit_id": "82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "commit_message": "fix skip reporting over distributed testing.  if we have a \"skip\" report\nrep.longrepr will now be a 3-tuple (path, lineno, message)",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/82ba645a2ec1c64a588c58d1b12239136ee4b99f",
        "buggy_code": "version='2.0.0.dev27',",
        "fixed_code": "version='2.0.0.dev28',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.0.dev27',\n+        version='2.0.0.dev28',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "fefac6607931f938074d4830e25c1e0682645fae",
        "commit_message": "remove duplicate code, normalize relative path names to fix windows running tests",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fefac6607931f938074d4830e25c1e0682645fae",
        "buggy_code": "names[0] = names[0].replace(os.sep, '.')",
        "fixed_code": "names[0] = names[0].replace(\"/\", '.')",
        "patch": "@@ -39,7 +39,7 @@ def __init__(self, logfile, prefix):\n \n     def _opentestcase(self, report):\n         names = report.nodeid.split(\"::\")\n-        names[0] = names[0].replace(os.sep, '.')\n+        names[0] = names[0].replace(\"/\", '.')\n         names = tuple(names)\n         d = {'time': self._durations.pop(names, \"0\")}\n         names = [x.replace(\".py\", \"\") for x in names if x != \"()\"]"
    },
    {
        "commit_id": "582a2100b1975db084f10530de28355d306b4a39",
        "commit_message": "fix test, bump version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/582a2100b1975db084f10530de28355d306b4a39",
        "buggy_code": "__version__ = '2.0.0.dev20'",
        "fixed_code": "__version__ = '2.0.0.dev21'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = '2.0.0.dev20'\n+__version__ = '2.0.0.dev21'\n \n __all__ = ['config', 'cmdline']\n "
    },
    {
        "commit_id": "582a2100b1975db084f10530de28355d306b4a39",
        "commit_message": "fix test, bump version",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/582a2100b1975db084f10530de28355d306b4a39",
        "buggy_code": "version='2.0.0.dev20',",
        "fixed_code": "version='2.0.0.dev21',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.0.dev20',\n+        version='2.0.0.dev21',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "9bed4bb31c821fe86b95b946082a73bf3af1bcbc",
        "commit_message": "fix bug showing up on windows",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9bed4bb31c821fe86b95b946082a73bf3af1bcbc",
        "buggy_code": "relpath = str(path).replace(os.sep, \"/\")",
        "fixed_code": "relpath = relpath.replace(os.sep, \"/\")",
        "patch": "@@ -323,7 +323,7 @@ def _makeid(self):\n             return \".\"\n         relpath = self.collection.fspath.bestrelpath(self.fspath)\n         if os.sep != \"/\":\n-            relpath = str(path).replace(os.sep, \"/\")\n+            relpath = relpath.replace(os.sep, \"/\")\n         return relpath\n \n class File(FSCollector):"
    },
    {
        "commit_id": "56168748234bf4b50b25b8b2d1153fff5683b105",
        "commit_message": "streamline some hook docs and option handling, remove cruft bits, fix doc links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/56168748234bf4b50b25b8b2d1153fff5683b105",
        "buggy_code": "def pytest_log_itemcollect(item):",
        "fixed_code": "def pytest_itemcollected(item):",
        "patch": "@@ -155,7 +155,7 @@ def __repr__(self):\n         return \"<MarkInfo %r args=%r kwargs=%r>\" % (\n                 self._name, self.args, self.kwargs)\n \n-def pytest_log_itemcollect(item):\n+def pytest_itemcollected(item):\n     if not isinstance(item, py.test.collect.Function):\n         return\n     try:"
    },
    {
        "commit_id": "56168748234bf4b50b25b8b2d1153fff5683b105",
        "commit_message": "streamline some hook docs and option handling, remove cruft bits, fix doc links",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/56168748234bf4b50b25b8b2d1153fff5683b105",
        "buggy_code": "if not item.config.getvalue(\"runxfail\"):",
        "fixed_code": "if not item.config.option.runxfail:",
        "patch": "@@ -213,7 +213,7 @@ def pytest_pyfunc_call(pyfuncitem):\n     check_xfail_no_run(pyfuncitem)\n \n def check_xfail_no_run(item):\n-    if not item.config.getvalue(\"runxfail\"):\n+    if not item.config.option.runxfail:\n         evalxfail = item._evalxfail\n         if evalxfail.istrue():\n             if not evalxfail.get('run', True):"
    },
    {
        "commit_id": "868670b5f226fddd85452187621f6e610fff918e",
        "commit_message": "fix --help output for ini-options",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/868670b5f226fddd85452187621f6e610fff918e",
        "buggy_code": "for name, help in sorted(config._parser._inidict.items()):",
        "fixed_code": "for name, (help, type) in sorted(config._parser._inidict.items()):",
        "patch": "@@ -44,7 +44,7 @@ def showhelp(config):\n     tw.line(\"setup.cfg or tox.ini options to be put into [pytest] section:\")\n     tw.line()\n \n-    for name, help in sorted(config._parser._inidict.items()):\n+    for name, (help, type) in sorted(config._parser._inidict.items()):\n         line = \"   %-15s  %s\" %(name, help)\n         tw.line(line[:tw.fullwidth])\n "
    },
    {
        "commit_id": "b4210f3ae00a1be4157b6a0ddccbc119d0919445",
        "commit_message": "fix issue93 - hide output of code in early-loaded conftest files\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b4210f3ae00a1be4157b6a0ddccbc119d0919445",
        "buggy_code": "__version__ = \"2.0.0.dev4\"",
        "fixed_code": "__version__ = '2.0.0.dev6'",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = \"2.0.0.dev4\"\n+__version__ = '2.0.0.dev6'\n \n __all__ = ['config', 'cmdline']\n "
    },
    {
        "commit_id": "b4210f3ae00a1be4157b6a0ddccbc119d0919445",
        "commit_message": "fix issue93 - hide output of code in early-loaded conftest files\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b4210f3ae00a1be4157b6a0ddccbc119d0919445",
        "buggy_code": "version='2.0.0.dev5',",
        "fixed_code": "version='2.0.0.dev6',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version='2.0.0.dev5',\n+        version='2.0.0.dev6',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "c2c8471f3d4356d71880b0541dd13d981e825f0f",
        "commit_message": "fix broken tests / last checkin\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c2c8471f3d4356d71880b0541dd13d981e825f0f",
        "buggy_code": "if report.failed and 'xfail' not in report.keywords:",
        "fixed_code": "if report.failed and 'xfail' not in getattr(report, 'keywords', []):",
        "patch": "@@ -106,7 +106,7 @@ def __init__(self, config):\n         self.collection = Collection(config) # XXX move elswehre\n \n     def pytest_runtest_logreport(self, report):\n-        if report.failed and 'xfail' not in report.keywords:\n+        if report.failed and 'xfail' not in getattr(report, 'keywords', []):\n             self._testsfailed += 1\n             maxfail = self.config.getvalue(\"maxfail\")\n             if maxfail and self._testsfailed >= maxfail:"
    },
    {
        "commit_id": "76a1bf391eacd236a67b14f291191b7ff57fb802",
        "commit_message": "fix some doc bits\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/76a1bf391eacd236a67b14f291191b7ff57fb802",
        "buggy_code": "exclude_patterns = ['_build', 'test', 'announce'] # XXX",
        "fixed_code": "exclude_patterns = ['links.inc', '_build', 'test', 'announce'] # XXX",
        "patch": "@@ -64,7 +64,7 @@\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n-exclude_patterns = ['_build', 'test', 'announce'] # XXX\n+exclude_patterns = ['links.inc', '_build', 'test', 'announce'] # XXX\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n #default_role = None"
    },
    {
        "commit_id": "dc5e2f5ed316e8fc873e1944cbf3ff3dbb72ae2e",
        "commit_message": "bump version, fix readme\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dc5e2f5ed316e8fc873e1944cbf3ff3dbb72ae2e",
        "buggy_code": "__version__ = \"2.0.0dev0\"",
        "fixed_code": "__version__ = \"2.0.0.dev1\"",
        "patch": "@@ -5,7 +5,7 @@\n \n (c) Holger Krekel and others, 2004-2010\n \"\"\"\n-__version__ = \"2.0.0dev0\"\n+__version__ = \"2.0.0.dev1\"\n \n __all__ = ['config', 'cmdline']\n "
    },
    {
        "commit_id": "dc5e2f5ed316e8fc873e1944cbf3ff3dbb72ae2e",
        "commit_message": "bump version, fix readme\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/dc5e2f5ed316e8fc873e1944cbf3ff3dbb72ae2e",
        "buggy_code": "version= '2.0.0.dev0',",
        "fixed_code": "version= '2.0.0.dev1',",
        "patch": "@@ -22,7 +22,7 @@ def main():\n         name='pytest',\n         description='py.test: simple powerful testing with Python',\n         long_description = long_description,\n-        version= '2.0.0.dev0',\n+        version= '2.0.0.dev1',\n         url='http://pytest.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "3a5d28f3fe9ea2d02accd6435cdc265f667c3f7f",
        "commit_message": "removed unnccessary indirections in the PluginManager,\nalso fixed a bug in _core.varnames(), which probably considerably\nspeeds up hook calls.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3a5d28f3fe9ea2d02accd6435cdc265f667c3f7f",
        "buggy_code": "self.pluginmanager = pluginmanager or PluginManager()",
        "fixed_code": "self.pluginmanager = pluginmanager or PluginManager(load=True)",
        "patch": "@@ -246,7 +246,7 @@ def __init__(self, pluginmanager=None):\n             processopt=self._processopt,\n         )\n         #: a pluginmanager instance\n-        self.pluginmanager = pluginmanager or PluginManager()\n+        self.pluginmanager = pluginmanager or PluginManager(load=True)\n         self._conftest = Conftest(onimport=self._onimportconftest)\n         self.hook = self.pluginmanager.hook\n "
    },
    {
        "commit_id": "7a461a2f3bf64a1399e3c047bc6de11ba4487f65",
        "commit_message": "fix dep\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7a461a2f3bf64a1399e3c047bc6de11ba4487f65",
        "buggy_code": "install_requires=['pylib>=1.3.9'],",
        "fixed_code": "install_requires=['pylib>=1.9.9'],",
        "patch": "@@ -33,7 +33,7 @@ def main():\n         author='holger krekel, Guido Wesdorp, Carl Friedrich Bolz, Armin Rigo, Maciej Fijalkowski & others',\n         author_email='holger at merlinux.eu',\n         entry_points= make_entry_points(),\n-        install_requires=['pylib>=1.3.9'],\n+        install_requires=['pylib>=1.9.9'],\n         classifiers=['Development Status :: 6 - Mature',\n                      'Intended Audience :: Developers',\n                      'License :: OSI Approved :: MIT License',"
    },
    {
        "commit_id": "652d0ca636db2e6b69b39844c3375ade876f27de",
        "commit_message": "fix tox.ini and dependencies, various fixes all around, tests pass.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/652d0ca636db2e6b69b39844c3375ade876f27de",
        "buggy_code": "msg += \" -- pytest-%s\" % (py.__version__)",
        "fixed_code": "msg += \" -- pytest-%s\" % (py.test.__version__)",
        "patch": "@@ -205,7 +205,7 @@ def pytest_sessionstart(self, session):\n         self._sessionstarttime = py.std.time.time()\n         verinfo = \".\".join(map(str, sys.version_info[:3]))\n         msg = \"platform %s -- Python %s\" % (sys.platform, verinfo)\n-        msg += \" -- pytest-%s\" % (py.__version__)\n+        msg += \" -- pytest-%s\" % (py.test.__version__)\n         if self.config.option.verbose or self.config.option.debug or \\\n            getattr(self.config.option, 'pastebin', None):\n             msg += \" -- \" + str(sys.executable)"
    },
    {
        "commit_id": "e2c11f1ddb1e64c9a154b59c0af5b3afe7833e01",
        "commit_message": "fix python3 issues, add py32 environment\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e2c11f1ddb1e64c9a154b59c0af5b3afe7833e01",
        "buggy_code": "@py.test.mark.xfail(\"sys.version_info[:2] != (2,7)\")",
        "fixed_code": "@py.test.mark.xfail(\"sys.version_info[:2] != (2,7) and sys.version_info[:2]<(3,2)\")",
        "patch": "@@ -348,7 +348,7 @@ def g():\n     lines = deindent(source.splitlines())\n     assert lines == ['', 'def f():', '    def g():', '        pass', '    ']\n \n-@py.test.mark.xfail(\"sys.version_info[:2] != (2,7)\")\n+@py.test.mark.xfail(\"sys.version_info[:2] != (2,7) and sys.version_info[:2]<(3,2)\")\n def test_source_of_class_at_eof_without_newline(tmpdir):\n     # this test fails because the implicit inspect.getsource(A) below\n     # does not return the \"x = 1\" last line."
    },
    {
        "commit_id": "81ec29a597c345eb8085a21b6763971f6268dca7",
        "commit_message": "fix python3 bugs\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/81ec29a597c345eb8085a21b6763971f6268dca7",
        "buggy_code": "names = filter(None, id.split(\"::\"))",
        "fixed_code": "names = [x for x in id.split(\"::\") if x]",
        "patch": "@@ -138,7 +138,7 @@ def getid(self, node):\n \n     def getbyid(self, id):\n         \"\"\" return one or more nodes matching the id. \"\"\"\n-        names = filter(None, id.split(\"::\"))\n+        names = [x for x in id.split(\"::\") if x]\n         if names and '/' in names[0]:\n             names[:1] = names[0].split(\"/\")\n         return self._match([self._topcollector], names)"
    },
    {
        "commit_id": "c3166ee84a5b0529c5e1a4f4db391b0b82a65fd0",
        "commit_message": "Fix bug when the right list was longer then the left\n\nThanks to Holger for finding this.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c3166ee84a5b0529c5e1a4f4db391b0b82a65fd0",
        "buggy_code": "'first extra item: %s' % right[len(right)]]",
        "fixed_code": "'first extra item: %s' % right[len(left)]]",
        "patch": "@@ -89,7 +89,7 @@ def _compare_eq_sequence(left, right):\n                         'first extra item: %s' % left[len(right)]]\n     elif len(left) < len(right):\n         explanation += ['Right contains more items, '\n-                        'first extra item: %s' % right[len(right)]]\n+                        'first extra item: %s' % right[len(left)]]\n     return explanation + _pprint_diff(left, right)\n \n "
    },
    {
        "commit_id": "e2683f4538d8faf663be5acc3874051c3486adde",
        "commit_message": "refactor all collection related logic\n- drop all pickling support (for now)\n- perform collection completely ahead of test running (no iterativity)\n- introduce new collection related hooks\n- shift all keyword-selection code to pytest_keyword plugin\n- simplify session object\n- besides: fix issue88\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e2683f4538d8faf663be5acc3874051c3486adde",
        "buggy_code": "\"junitxml doctest\").split()",
        "fixed_code": "\"junitxml doctest keyword\").split()",
        "patch": "@@ -8,7 +8,7 @@\n default_plugins = (\n     \"default runner pdb capture mark terminal skipping tmpdir monkeypatch \"\n     \"recwarn pastebin unittest helpconfig nose assertion genscript \"\n-    \"junitxml doctest\").split()\n+    \"junitxml doctest keyword\").split()\n \n def check_old_use(mod, modname):\n     clsname = modname[len('pytest_'):].capitalize() + \"Plugin\""
    },
    {
        "commit_id": "e2683f4538d8faf663be5acc3874051c3486adde",
        "commit_message": "refactor all collection related logic\n- drop all pickling support (for now)\n- perform collection completely ahead of test running (no iterativity)\n- introduce new collection related hooks\n- shift all keyword-selection code to pytest_keyword plugin\n- simplify session object\n- besides: fix issue88\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e2683f4538d8faf663be5acc3874051c3486adde",
        "buggy_code": "version= '1.3.4',",
        "fixed_code": "version= '1.4.0a1',",
        "patch": "@@ -30,7 +30,7 @@ def main():\n         name='py',\n         description='py.test and pylib: rapid testing and development utils.',\n         long_description = long_description,\n-        version= '1.3.4',\n+        version= '1.4.0a1',\n         url='http://pylib.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "a2f9fbb178d6ec39d31939042fc8012629edbc3c",
        "commit_message": "Added a test and fix for nose compatible setup/teardown functions so that even less errors are ignored\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a2f9fbb178d6ec39d31939042fc8012629edbc3c",
        "buggy_code": "if method and callable(method):",
        "fixed_code": "if method:",
        "patch": "@@ -90,7 +90,7 @@ def pytest_make_collect_report(collector):\n \n def call_optional(obj, name):\n     method = getattr(obj, name, None)\n-    if method and callable(method):\n+    if method:\n         # If there's any problems allow the exception to raise rather than\n         # silently ignoring them\n         method()"
    },
    {
        "commit_id": "faf0fe888719977d3141bbfc9eb66a513c7157be",
        "commit_message": "Added a test and fix for nose compatible setup/teardown functions that contain a variable\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/faf0fe888719977d3141bbfc9eb66a513c7157be",
        "buggy_code": "if not rawcode.co_varnames[ismethod:]:",
        "fixed_code": "if not rawcode.co_varnames[ismethod:rawcode.co_argcount]:",
        "patch": "@@ -93,6 +93,6 @@ def call_optional(obj, name):\n     if method:\n         ismethod = inspect.ismethod(method)\n         rawcode = py.code.getrawcode(method)\n-        if not rawcode.co_varnames[ismethod:]:\n+        if not rawcode.co_varnames[ismethod:rawcode.co_argcount]:\n             method()\n             return True"
    },
    {
        "commit_id": "b14f8505d0e9abe1db9353ec4b53b20d9e2a254e",
        "commit_message": "fix test on python2.4\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b14f8505d0e9abe1db9353ec4b53b20d9e2a254e",
        "buggy_code": "except struct.error:",
        "fixed_code": "except (TypeError, struct.error):",
        "patch": "@@ -13,7 +13,7 @@ def test_getdimensions(monkeypatch):\n     monkeypatch.setattr(fcntl, 'ioctl', lambda *args: l.append(args))\n     try:\n         terminalwriter._getdimensions()\n-    except struct.error:\n+    except (TypeError, struct.error):\n         pass\n     assert len(l) == 1\n     assert l[0][0] == 1"
    },
    {
        "commit_id": "ed8e24312c22e0716750698335544df4d0e0be12",
        "commit_message": "fix terminal dimension detection to work with stdout\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed8e24312c22e0716750698335544df4d0e0be12",
        "buggy_code": "call = fcntl.ioctl(0,termios.TIOCGWINSZ,\"\\000\"*8)",
        "fixed_code": "call = fcntl.ioctl(1,termios.TIOCGWINSZ,\"\\000\"*8)",
        "patch": "@@ -18,7 +18,7 @@\n \n def _getdimensions():\n     import termios,fcntl,struct\n-    call = fcntl.ioctl(0,termios.TIOCGWINSZ,\"\\000\"*8)\n+    call = fcntl.ioctl(1,termios.TIOCGWINSZ,\"\\000\"*8)\n     height,width = struct.unpack( \"hhhh\", call ) [:2]\n     return height, width \n "
    },
    {
        "commit_id": "ed8e24312c22e0716750698335544df4d0e0be12",
        "commit_message": "fix terminal dimension detection to work with stdout\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed8e24312c22e0716750698335544df4d0e0be12",
        "buggy_code": "version= '1.3.2',",
        "fixed_code": "version= '1.3.3a1',",
        "patch": "@@ -26,7 +26,7 @@ def main():\n         name='py',\n         description='py.test and pylib: rapid testing and development utils.',\n         long_description = long_description,\n-        version= '1.3.2',\n+        version= '1.3.3a1',\n         url='http://pylib.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "e98b15eb67132e7c687ac401a8a3e5dc1914da18",
        "commit_message": "fix windows homedir detection\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e98b15eb67132e7c687ac401a8a3e5dc1914da18",
        "buggy_code": "x = os.environ['HOMEPATH']",
        "fixed_code": "x = os.environ[\"HOMEDRIVE\"] + os.environ['HOMEPATH']",
        "patch": "@@ -618,7 +618,7 @@ def _gethomedir(cls):\n         try:\n             x = os.environ['HOME']\n         except KeyError:\n-            x = os.environ['HOMEPATH']\n+            x = os.environ[\"HOMEDRIVE\"] + os.environ['HOMEPATH']\n         return cls(x)\n     _gethomedir = classmethod(_gethomedir)\n "
    },
    {
        "commit_id": "af5e18e26c4403d0d6c1fe03e4b191d6ea66a453",
        "commit_message": "small fix\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/af5e18e26c4403d0d6c1fe03e4b191d6ea66a453",
        "buggy_code": "return self.longrepr.reprcrash",
        "fixed_code": "return str(self.longrepr.reprcrash)",
        "patch": "@@ -124,7 +124,7 @@ def __repr__(self):\n \n     def _getcrashline(self):\n         try:\n-            return self.longrepr.reprcrash\n+            return str(self.longrepr.reprcrash)\n         except AttributeError:\n             try:\n                 return str(self.longrepr)[:50]"
    },
    {
        "commit_id": "2664230fadbd012dfe8639fda5bc7ed709ecd316",
        "commit_message": "fix test for python2.7\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2664230fadbd012dfe8639fda5bc7ed709ecd316",
        "buggy_code": "def test_extra_python_files_and_functions(testdir):",
        "fixed_code": "def test_extra_python_files_and_functions(testdir, recwarn):",
        "patch": "@@ -292,7 +292,7 @@ def consider_file(self, fspath):\n     assert item.name == \"hello.xxx\"\n     assert item.__class__.__name__ == \"CustomItem\"\n \n-def test_extra_python_files_and_functions(testdir):\n+def test_extra_python_files_and_functions(testdir, recwarn):\n     testdir.makepyfile(conftest=\"\"\"\n         import py\n         class MyFunction(py.test.collect.Function):"
    },
    {
        "commit_id": "f9c5b00ffa4652726a0a4d2d80e257679cb85e7a",
        "commit_message": "refine and extend custom error reporting particularly for collection-related errors\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f9c5b00ffa4652726a0a4d2d80e257679cb85e7a",
        "buggy_code": "out = l[0].longrepr.reprcrash.message",
        "fixed_code": "out = str(l[0].longrepr)",
        "patch": "@@ -74,7 +74,7 @@ def test_syntax_error_module(self, testdir):\n         reprec = testdir.inline_runsource(\"this is really not python\")\n         l = reprec.getfailedcollections()\n         assert len(l) == 1\n-        out = l[0].longrepr.reprcrash.message\n+        out = str(l[0].longrepr)\n         assert out.find(str('not python')) != -1\n \n     def test_exit_first_problem(self, testdir): "
    },
    {
        "commit_id": "b66b5e2715c098338bc8f6461c41dc48d78c29fb",
        "commit_message": "fix issue 57 - make --looponfail work with xpassing tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b66b5e2715c098338bc8f6461c41dc48d78c29fb",
        "buggy_code": "version= '1.3.1',",
        "fixed_code": "version= '1.3.2a1',",
        "patch": "@@ -26,7 +26,7 @@ def main():\n         name='py',\n         description='py.test and pylib: rapid testing and development utils.',\n         long_description = long_description,\n-        version= '1.3.1',\n+        version= '1.3.2a1',\n         url='http://pylib.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "c953c7d31315850077c13ee64554c2ae7cb45e01",
        "commit_message": "fix issue102 by introducing a --maxfailures=NUM option\nalso print an informative line about \"stopped/interrupted\" test runs\nnear the end.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c953c7d31315850077c13ee64554c2ae7cb45e01",
        "buggy_code": "if not opt._long_opts:",
        "fixed_code": "if not opt._long_opts or not opt.dest:",
        "patch": "@@ -45,7 +45,7 @@ def pytest_configure(__multicall__, config):\n     options = [opt for opt in options if opt._long_opts]\n     options.sort(key=lambda x: x._long_opts)\n     for opt in options:\n-        if not opt._long_opts:\n+        if not opt._long_opts or not opt.dest:\n             continue\n         optstrings = list(opt._long_opts) # + list(opt._short_opts)\n         optstrings = filter(None, optstrings)"
    },
    {
        "commit_id": "c953c7d31315850077c13ee64554c2ae7cb45e01",
        "commit_message": "fix issue102 by introducing a --maxfailures=NUM option\nalso print an informative line about \"stopped/interrupted\" test runs\nnear the end.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c953c7d31315850077c13ee64554c2ae7cb45e01",
        "buggy_code": "\"*KEYBOARD INTERRUPT*\"",
        "fixed_code": "\"*KeyboardInterrupt*\"",
        "patch": "@@ -347,7 +347,7 @@ def test_hello(capfd):\n         \"\"\")\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines([\n-            \"*KEYBOARD INTERRUPT*\"\n+            \"*KeyboardInterrupt*\"\n         ])\n         assert result.ret == 2\n "
    },
    {
        "commit_id": "eac0345689df993def3c78c63f10c68519683991",
        "commit_message": "fix wrong test invocation\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/eac0345689df993def3c78c63f10c68519683991",
        "buggy_code": "result = testdir.runpytest(p, '-rX')",
        "fixed_code": "result = testdir.runpytest(p, '-rP')",
        "patch": "@@ -162,7 +162,7 @@ def test_xfail_xpass(self, testdir):\n             def test_that():\n                 assert 1\n         \"\"\")\n-        result = testdir.runpytest(p, '-rX')\n+        result = testdir.runpytest(p, '-rP')\n         result.stdout.fnmatch_lines([\n             \"*XPASS*test_that*\",\n             \"*1 xpassed*\""
    },
    {
        "commit_id": "20424a9c762acd723789ac4292756b2f3640596b",
        "commit_message": "fix and test \"-rP\" option to show xpass-test ids\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/20424a9c762acd723789ac4292756b2f3640596b",
        "buggy_code": "elif char == \"X\":",
        "fixed_code": "elif char == \"P\":",
        "patch": "@@ -234,7 +234,7 @@ def pytest_terminal_summary(terminalreporter):\n     for char in tr.reportchars:\n         if char == \"x\":\n             show_xfailed(terminalreporter, lines)\n-        elif char == \"X\":\n+        elif char == \"P\":\n             show_xpassed(terminalreporter, lines)\n         elif char == \"f\":\n             show_failed(terminalreporter, lines)"
    },
    {
        "commit_id": "1a97c5943978f1432c7ff1c2c64206c3efea908e",
        "commit_message": "fix test to account for earlier capfd skipping (on jython)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1a97c5943978f1432c7ff1c2c64206c3efea908e",
        "buggy_code": "def test_hello(capfd, missingarg):",
        "fixed_code": "def test_hello(capsys, missingarg):",
        "patch": "@@ -358,7 +358,7 @@ def test_hello(capfd):\n \n     def test_partial_setup_failure(self, testdir):        \n         p = testdir.makepyfile(\"\"\"\n-            def test_hello(capfd, missingarg):\n+            def test_hello(capsys, missingarg):\n                 pass\n         \"\"\")\n         result = testdir.runpytest(p)"
    },
    {
        "commit_id": "3d709177588de23141715e8bb22d23cec90f3f4d",
        "commit_message": "merge with issue-commits\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3d709177588de23141715e8bb22d23cec90f3f4d",
        "buggy_code": "if not isinstance(init, type(object.__init__)):",
        "fixed_code": "if init != object.__init__:",
        "patch": "@@ -393,5 +393,5 @@ def __hash__(self):\n def hasinit(obj):\n     init = getattr(obj, '__init__', None)\n     if init:\n-        if not isinstance(init, type(object.__init__)):\n+        if init != object.__init__:\n             return True"
    },
    {
        "commit_id": "3d709177588de23141715e8bb22d23cec90f3f4d",
        "commit_message": "merge with issue-commits\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3d709177588de23141715e8bb22d23cec90f3f4d",
        "buggy_code": "version= '1.3.0',",
        "fixed_code": "version= '1.3.1a1',",
        "patch": "@@ -26,7 +26,7 @@ def main():\n         name='py',\n         description='py.test and pylib: rapid testing and development utils.',\n         long_description = long_description,\n-        version= '1.3.0',\n+        version= '1.3.1a1',\n         url='http://pylib.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f266c8f92f1267f5f2834ab548dc5feda08b90db",
        "commit_message": "fix init-check to work also on pypy-c (armin around)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f266c8f92f1267f5f2834ab548dc5feda08b90db",
        "buggy_code": "if not isinstance(init, type(object.__init__)):",
        "fixed_code": "if init != object.__init__:",
        "patch": "@@ -393,5 +393,5 @@ def __hash__(self):\n def hasinit(obj):\n     init = getattr(obj, '__init__', None)\n     if init:\n-        if not isinstance(init, type(object.__init__)):\n+        if init != object.__init__:\n             return True"
    },
    {
        "commit_id": "ed7a2d2da34ddeffd70735875803c0d966b4fdce",
        "commit_message": "refine/fix isimportable-logic and ensure that 'tmpdir' has a python-importable name\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed7a2d2da34ddeffd70735875803c0d966b4fdce",
        "buggy_code": "return py.path.local.make_numbered_dir(prefix=basename + \"-\",",
        "fixed_code": "return py.path.local.make_numbered_dir(prefix=basename,",
        "patch": "@@ -151,7 +151,7 @@ def mktemp(self, basename, numbered=False):\n         if not numbered:\n             return basetemp.mkdir(basename)\n         else:\n-            return py.path.local.make_numbered_dir(prefix=basename + \"-\", \n+            return py.path.local.make_numbered_dir(prefix=basename,\n                 keep=0, rootdir=basetemp, lock_timeout=None)\n \n     def getinitialnodes(self):"
    },
    {
        "commit_id": "ed7a2d2da34ddeffd70735875803c0d966b4fdce",
        "commit_message": "refine/fix isimportable-logic and ensure that 'tmpdir' has a python-importable name\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ed7a2d2da34ddeffd70735875803c0d966b4fdce",
        "buggy_code": "bn = p.basename.strip(\"0123456789-\")",
        "fixed_code": "bn = p.basename.strip(\"0123456789\")",
        "patch": "@@ -5,5 +5,5 @@ def test_funcarg(testdir):\n     item = testdir.getitem(\"def test_func(tmpdir): pass\")\n     p = pytest_funcarg__tmpdir(FuncargRequest(item))\n     assert p.check()\n-    bn = p.basename.strip(\"0123456789-\")\n+    bn = p.basename.strip(\"0123456789\")\n     assert bn.endswith(\"test_func\")"
    },
    {
        "commit_id": "0b24a7027990097f6915b605331d89b9461a8906",
        "commit_message": "this should test and fix the same issue that was committed in\nthe pypy svn-repo as r72534\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0b24a7027990097f6915b605331d89b9461a8906",
        "buggy_code": "expr = '%s(%r%s)' %(func.__name__, args, k)",
        "fixed_code": "expr = '%s(%r%s)' %(getattr(func, '__name__', func), args, k)",
        "patch": "@@ -100,7 +100,7 @@ def raises(ExpectedException, *args, **kwargs):\n         k = \", \".join([\"%s=%r\" % x for x in kwargs.items()])\n         if k:\n             k = ', ' + k\n-        expr = '%s(%r%s)' %(func.__name__, args, k)\n+        expr = '%s(%r%s)' %(getattr(func, '__name__', func), args, k)\n     raise ExceptionFailure(msg=\"DID NOT RAISE\", \n                            expr=args, expected=ExpectedException) \n "
    },
    {
        "commit_id": "10f6c3a432b790af92dfe6ab73eb13818eef27e9",
        "commit_message": "fix check to work when there is no jython\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/10f6c3a432b790af92dfe6ab73eb13818eef27e9",
        "buggy_code": "and not (os._name == 'nt' and sys.platform.startswith('java'))",
        "fixed_code": "and not (sys.platform.startswith('java') and os._name == 'nt')",
        "patch": "@@ -134,7 +134,7 @@ def ansi_print(text, esc, file=None, newline=True, flush=False):\n def should_do_markup(file):\n     return hasattr(file, 'isatty') and file.isatty() \\\n            and os.environ.get('TERM') != 'dumb' \\\n-           and not (os._name == 'nt' and sys.platform.startswith('java'))\n+           and not (sys.platform.startswith('java') and os._name == 'nt')\n \n class TerminalWriter(object):\n     _esctable = dict(black=30, red=31, green=32, yellow=33, "
    },
    {
        "commit_id": "fe95ad0aa6fb961313284eccbc9607282a71b88b",
        "commit_message": "fix typo\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/fe95ad0aa6fb961313284eccbc9607282a71b88b",
        "buggy_code": "Like _assertion.py but using builtin AST.  It should replace _assertion.py",
        "fixed_code": "Like _assertion.py but using builtin AST.  It should replace _assertionold.py",
        "patch": "@@ -1,5 +1,5 @@\n \"\"\"\n-Like _assertion.py but using builtin AST.  It should replace _assertion.py\n+Like _assertion.py but using builtin AST.  It should replace _assertionold.py\n eventually.\n \"\"\"\n "
    },
    {
        "commit_id": "02c129df7a8cbb9a4e5bf5731d32cde3ebb12ddf",
        "commit_message": "fix a test\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/02c129df7a8cbb9a4e5bf5731d32cde3ebb12ddf",
        "buggy_code": "py.test.raises(req.Error, req.getfuncargvalue, \"notexists\")",
        "fixed_code": "py.test.raises(req.LookupError, req.getfuncargvalue, \"notexists\")",
        "patch": "@@ -160,7 +160,7 @@ def pytest_funcarg__other(request):\n             def test_func(something): pass\n         \"\"\")\n         req = funcargs.FuncargRequest(item)\n-        py.test.raises(req.Error, req.getfuncargvalue, \"notexists\")\n+        py.test.raises(req.LookupError, req.getfuncargvalue, \"notexists\")\n         val = req.getfuncargvalue(\"something\") \n         assert val == 1\n         val = req.getfuncargvalue(\"something\") "
    },
    {
        "commit_id": "14feeb9ca153a9ca73f50fb01873e2afb3803acf",
        "commit_message": "fix doc links, bump to dev version\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/14feeb9ca153a9ca73f50fb01873e2afb3803acf",
        "buggy_code": "\"py/plugin/%s\" %(pyversion, basename)))",
        "fixed_code": "\"py/_plugin/%s\" %(pyversion, basename)))",
        "patch": "@@ -217,7 +217,7 @@ def emit_source(self, plugin, hg_changeset):\n         #    \"py/test/plugin/%s\" %(hg_changeset, basename)))\n         self.links.append((basename, \n             \"http://bitbucket.org/hpk42/py-trunk/raw/%s/\" \n-            \"py/plugin/%s\" %(pyversion, basename)))\n+            \"py/_plugin/%s\" %(pyversion, basename)))\n         self.links.append(('customize', '../customize.html'))\n         self.links.append(('plugins', 'index.html'))\n         self.links.append(('get in contact', '../../contact.html'))"
    },
    {
        "commit_id": "14feeb9ca153a9ca73f50fb01873e2afb3803acf",
        "commit_message": "fix doc links, bump to dev version\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/14feeb9ca153a9ca73f50fb01873e2afb3803acf",
        "buggy_code": "version= trunk or '1.2.0',",
        "fixed_code": "version= trunk or '1.2.0post1',",
        "patch": "@@ -27,7 +27,7 @@ def main():\n         name='py',\n         description='py.test and pylib: rapid testing and development utils.',\n         long_description = long_description,\n-        version= trunk or '1.2.0',\n+        version= trunk or '1.2.0post1',\n         url='http://pylib.org',\n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'],"
    },
    {
        "commit_id": "f5e9d91f7bbe8da68a0e383396182110c501c497",
        "commit_message": "fix deprecation warnings\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f5e9d91f7bbe8da68a0e383396182110c501c497",
        "buggy_code": "failure_demo = py.magic.autopath().dirpath('failure_demo.py')",
        "fixed_code": "failure_demo = py.path.local(__file__).dirpath('failure_demo.py')",
        "patch": "@@ -1,6 +1,6 @@\n \n import py\n-failure_demo = py.magic.autopath().dirpath('failure_demo.py')\n+failure_demo = py.path.local(__file__).dirpath('failure_demo.py')\n \n pytest_plugins = \"pytest_pytester\"\n "
    },
    {
        "commit_id": "4a568f43fe2598ca6f521eb7424ecc50a7f2efd3",
        "commit_message": "get rid of the funccollector node, which nice-ifies names of funcarg-generated tests nodes, also test and fix one anomaly wrt to funcarg setups and instance uniqueness\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4a568f43fe2598ca6f521eb7424ecc50a7f2efd3",
        "buggy_code": "assert failed == 4",
        "fixed_code": "assert failed == 3",
        "patch": "@@ -11,4 +11,4 @@ def test_failure_demo_fails_properly(testdir):\n     assert failed == 20, failed\n     colreports = reprec.getreports(\"pytest_collectreport\")\n     failed = len([x.failed for x in colreports])\n-    assert failed == 4\n+    assert failed == 3"
    },
    {
        "commit_id": "e0dd171e4569031c1938116a5d22c1484537767f",
        "commit_message": "fix standalone script generation on windows, make tests not do a chdir() so that distributed testing discovers the transferred lib\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e0dd171e4569031c1938116a5d22c1484537767f",
        "buggy_code": "k = f.replace(\"/\", \".\")[:-3]",
        "fixed_code": "k = f.replace(os.sep, \".\")[:-3]",
        "patch": "@@ -40,7 +40,7 @@ def main(pybasedir, outfile, infile):\n \n     name2src = {}\n     for f in files:\n-        k = f.replace(\"/\", \".\")[:-3]\n+        k = f.replace(os.sep, \".\")[:-3]\n         name2src[k] = open(f, \"rb\").read()\n \n     data = pickle.dumps(name2src, 2)"
    },
    {
        "commit_id": "77b640d1b7416dcffebfaa7d1ba11b491d89bc3a",
        "commit_message": "streamline some tests and overall reduce py.test.ensuretemp usage, note down issue about deprecation .\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/77b640d1b7416dcffebfaa7d1ba11b491d89bc3a",
        "buggy_code": "basedir = d = request.config.ensuretemp(request.param)",
        "fixed_code": "basedir = d = request.getfuncargvalue(\"tmpdir\")",
        "patch": "@@ -8,7 +8,7 @@ def pytest_generate_tests(metafunc):\n \n def pytest_funcarg__basedir(request): \n     def basedirmaker(request):\n-        basedir = d = request.config.ensuretemp(request.param) \n+        basedir = d = request.getfuncargvalue(\"tmpdir\")\n         d.ensure(\"adir/conftest.py\").write(\"a=1 ; Directory = 3\")\n         d.ensure(\"adir/b/conftest.py\").write(\"b=2 ; a = 1.5\")\n         if request.param == \"inpackage\": "
    },
    {
        "commit_id": "9239d2dd069b641eac3c209eb01182109be9564a",
        "commit_message": "another fix for windows\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9239d2dd069b641eac3c209eb01182109be9564a",
        "buggy_code": "args = [self._cmd(\"python\"), self._cmd(\"py.test\")] + list(args)",
        "fixed_code": "args = [self._cmd(\"py.test\")] + list(args)",
        "patch": "@@ -94,7 +94,7 @@ def pcall(self, cmd, *args, **kw):\n \n     def pytest_getouterr(self, *args):\n         self.ensure()\n-        args = [self._cmd(\"python\"), self._cmd(\"py.test\")] + list(args)\n+        args = [self._cmd(\"py.test\")] + list(args)\n         popen = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n         out, err = popen.communicate()\n         return out"
    },
    {
        "commit_id": "0bfd3819c888cda8faa101f61100ff2101524eeb",
        "commit_message": "fix typo\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0bfd3819c888cda8faa101f61100ff2101524eeb",
        "buggy_code": "import os",
        "fixed_code": "import os, sys",
        "patch": "@@ -1,6 +1,6 @@\n import py\n import subprocess\n-import os\n+import os, sys\n \n execnet = py.test.importorskip(\"execnet\")\n "
    },
    {
        "commit_id": "56c1391a16b99017bf07224b8ce7354bc80b6070",
        "commit_message": "fix keyword calling\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/56c1391a16b99017bf07224b8ce7354bc80b6070",
        "buggy_code": "keyword_source = \"%s=%%s\" % (keyword.id)",
        "fixed_code": "keyword_source = \"%s=%%s\" % (keyword.arg)",
        "patch": "@@ -234,7 +234,7 @@ def visit_Call(self, call):\n             arg_explanation, arg_result = self.visit(keyword.value)\n             arg_name = \"__exprinfo_%s\" % (len(ns),)\n             ns[arg_name] = arg_result\n-            keyword_source = \"%s=%%s\" % (keyword.id)\n+            keyword_source = \"%s=%%s\" % (keyword.arg)\n             arguments.append(keyword_source % (arg_name,))\n             arg_explanations.append(keyword_source % (arg_explanation,))\n         if call.starargs:"
    },
    {
        "commit_id": "bcede77e45e7a4388dfcc29e5aac33593cceec66",
        "commit_message": "fix a flaky test\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/bcede77e45e7a4388dfcc29e5aac33593cceec66",
        "buggy_code": "assert hm.group[\"1\"] == call.gateways[0]",
        "fixed_code": "assert call.gateways[0] in hm.group",
        "patch": "@@ -82,7 +82,7 @@ def test_rsync_same_popen_twice(self, hook, mysetup, hookrecorder):\n         call = hookrecorder.popcall(\"pytest_gwmanage_rsyncstart\") \n         assert call.source == source \n         assert len(call.gateways) == 1\n-        assert hm.group[\"1\"] == call.gateways[0]\n+        assert call.gateways[0] in hm.group\n         call = hookrecorder.popcall(\"pytest_gwmanage_rsyncfinish\") \n \n class pytest_funcarg__mysetup:"
    },
    {
        "commit_id": "452ce50d7d23c22c88360fe34e90649af2f2c93e",
        "commit_message": "fix compatibility issue with svnwc.update and put CHANGELOG to rootlevel\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/452ce50d7d23c22c88360fe34e90649af2f2c93e",
        "buggy_code": "wccopy.update()",
        "fixed_code": "wccopy.update(interactive=False)",
        "patch": "@@ -176,7 +176,7 @@ def test_status_conflict(self, path1, tmpdir):\n         p.write('bar')\n         wc.commit('wrote some data')\n         wccopy.join('conflictsamplefile').write('baz')\n-        wccopy.update()\n+        wccopy.update(interactive=False)\n         s = wccopy.status()\n         assert [x.basename for x in s.conflict] == ['conflictsamplefile']\n "
    },
    {
        "commit_id": "e584892c12341ce84716a08174b541928ba66d7e",
        "commit_message": "update and fix docs for installation\n- rework installation\n- add a new FAQ entry related to issue58 Windows/setuptools/multiprocess\n- strike api/source references\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e584892c12341ce84716a08174b541928ba66d7e",
        "buggy_code": "'../../download.html#checkout'))",
        "fixed_code": "'../../install.html#checkout'))",
        "patch": "@@ -217,7 +217,7 @@ def emit_source(self, plugin, hg_changeset):\n         self.links.append(('plugins', 'index.html'))\n         self.links.append(('get in contact', '../../contact.html'))\n         self.links.append(('checkout the py.test development version', \n-            '../../download.html#checkout'))\n+            '../../install.html#checkout'))\n        \n         if 0: # this breaks the page layout and makes large doc files\n             #self.h2(\"plugin source code\") "
    },
    {
        "commit_id": "e584892c12341ce84716a08174b541928ba66d7e",
        "commit_message": "update and fix docs for installation\n- rework installation\n- add a new FAQ entry related to issue58 Windows/setuptools/multiprocess\n- strike api/source references\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e584892c12341ce84716a08174b541928ba66d7e",
        "buggy_code": "self.a_docref(\"install\", \"download.html\"),",
        "fixed_code": "self.a_docref(\"install\", \"install.html\"),",
        "patch": "@@ -57,7 +57,7 @@ def a_apigenref(self, name, relhtmlpath):\n         \n     def fill_menubar(self):\n         items = [\n-            self.a_docref(\"install\", \"download.html\"),\n+            self.a_docref(\"install\", \"install.html\"),\n             self.a_docref(\"contact\", \"contact.html\"),\n             self.a_docref(\"changelog\", \"changelog.html\"),\n             self.a_docref(\"faq\", \"faq.html\"),"
    },
    {
        "commit_id": "6a82cdb37fc8f39dee64cc5275df7a2c2ce9945e",
        "commit_message": "fix jython issue, flexibilize sysexec params\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6a82cdb37fc8f39dee64cc5275df7a2c2ce9945e",
        "buggy_code": "ModuleType = type(py.std.sys)",
        "fixed_code": "ModuleType = type(py.std.os)",
        "patch": "@@ -338,7 +338,7 @@ def test_pyimport_and_import(self, tmpdir):\n \n     def test_pyimport_check_filepath_consistency(self, monkeypatch, tmpdir):\n         name = 'pointsback123'\n-        ModuleType = type(py.std.sys)\n+        ModuleType = type(py.std.os)\n         p = tmpdir.ensure(name + '.py')\n         for ending in ('.pyc', '$py.class', '.pyo'):\n             mod = ModuleType(name)"
    },
    {
        "commit_id": "30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "commit_message": "fix windows32 issues, introduce a simplistic path.samefile for it, fix tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "buggy_code": "return py.std.os.path.samefile(str(self), str(other))",
        "fixed_code": "return py.error.checked_call(os.path.samefile, str(self), str(other))",
        "patch": "@@ -70,7 +70,7 @@ def mksymlinkto(self, value, absolute=1):\n \n     def samefile(self, other):\n         \"\"\" return True if other refers to the same stat object as self. \"\"\"\n-        return py.std.os.path.samefile(str(self), str(other))\n+        return py.error.checked_call(os.path.samefile, str(self), str(other))\n \n def getuserid(user):\n     import pwd"
    },
    {
        "commit_id": "30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "commit_message": "fix windows32 issues, introduce a simplistic path.samefile for it, fix tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "buggy_code": "assert l[0] == msg.encode(encoding)",
        "fixed_code": "assert l[0].strip() == msg.encode(encoding)",
        "patch": "@@ -42,7 +42,7 @@ def test_unicode_encoding():\n         l = []\n         tw = py.io.TerminalWriter(l.append, encoding=encoding)\n         tw.line(msg)\n-        assert l[0] == msg.encode(encoding)\n+        assert l[0].strip() == msg.encode(encoding)\n \n class BaseTests:\n     def test_line(self):    "
    },
    {
        "commit_id": "30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "commit_message": "fix windows32 issues, introduce a simplistic path.samefile for it, fix tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30710a9cd60cd407edfb0f843e117fd9d3b62507",
        "buggy_code": "py.log.setconsumer(\"default\", open(str(customlog), 'w', buffering=1))",
        "fixed_code": "py.log.setconsumer(\"default\", open(str(customlog), 'w', buffering=0))",
        "patch": "@@ -118,7 +118,7 @@ def test_log_stderr(self):\n \n     def test_log_file(self):\n         customlog = tempdir.join('log.out')\n-        py.log.setconsumer(\"default\", open(str(customlog), 'w', buffering=1))\n+        py.log.setconsumer(\"default\", open(str(customlog), 'w', buffering=0))\n         py.log.Producer(\"default\")(\"hello world #1\") \n         assert customlog.readlines() == ['[default] hello world #1\\n']\n "
    },
    {
        "commit_id": "69dd2d7a78eddc764c46b28879657dd1d8cc2def",
        "commit_message": "fix three python3 issues\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/69dd2d7a78eddc764c46b28879657dd1d8cc2def",
        "buggy_code": "fullwidth = getattr(self._tw, 'fullwidth', sys.maxint)",
        "fixed_code": "fullwidth = getattr(self._tw, 'fullwidth', 65000)",
        "patch": "@@ -272,7 +272,7 @@ def pytest_sessionstart(self, session):\n             items = self.config.pluginmanager._name2plugin.items()\n             for name, plugin in items:\n                 repr_plugin = repr(plugin)\n-                fullwidth = getattr(self._tw, 'fullwidth', sys.maxint)\n+                fullwidth = getattr(self._tw, 'fullwidth', 65000)\n                 if len(repr_plugin)+26 > fullwidth:\n                     repr_plugin = repr_plugin[:(fullwidth-30)] + '...'\n                 self.write_line(\"    %-20s: %s\" %(name, repr_plugin))"
    },
    {
        "commit_id": "6f5918f03b991dfb76edebc8c90678b2821b9396",
        "commit_message": "fix formatting of session log output\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f5918f03b991dfb76edebc8c90678b2821b9396",
        "buggy_code": "sys.stderr.write(\"session-log: %s\" % pastebinurl)",
        "fixed_code": "sys.stderr.write(\"pastebin session-log: %s\\n\" % pastebinurl)",
        "patch": "@@ -53,7 +53,7 @@ def pytest_unconfigure(config):\n         del config._pastebinfile\n         proxyid = getproxy().newPaste(\"python\", sessionlog)\n         pastebinurl = \"%s%s\" % (url.show, proxyid)\n-        sys.stderr.write(\"session-log: %s\" % pastebinurl)\n+        sys.stderr.write(\"pastebin session-log: %s\\n\" % pastebinurl)\n         tr = config.pluginmanager.impname2plugin['terminalreporter']\n         del tr._tw.__dict__['write']\n         "
    },
    {
        "commit_id": "3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "commit_message": "generalize skipping\n- rename pytest_xfail to pytest_skip\n- dynamic \"skipif\" and \"xfail\" decorators\n- move most skipping code to the plugin\n\nalso coming with this commit:\n- extend mark keyword to accept positional args + docs\n- fix a few documentation related issues\n- leave version as \"trunk\" for now\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "buggy_code": "pytest_plugins = \"default runner capture terminal keyword xfail tmpdir monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()",
        "fixed_code": "pytest_plugins = \"default runner capture terminal keyword skipping tmpdir monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()",
        "patch": "@@ -10,5 +10,5 @@\n Function = py.test.collect.Function\n Instance = py.test.collect.Instance\n \n-pytest_plugins = \"default runner capture terminal keyword xfail tmpdir monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()\n+pytest_plugins = \"default runner capture terminal keyword skipping tmpdir monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()\n "
    },
    {
        "commit_id": "3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "commit_message": "generalize skipping\n- rename pytest_xfail to pytest_skip\n- dynamic \"skipif\" and \"xfail\" decorators\n- move most skipping code to the plugin\n\nalso coming with this commit:\n- extend mark keyword to accept positional args + docs\n- fix a few documentation related issues\n- leave version as \"trunk\" for now\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "buggy_code": "pkgroot = py.__pkg__.getpath()",
        "fixed_code": "pkgroot = py.path.local(py._py.__file__).dirpath()",
        "patch": "@@ -175,7 +175,7 @@ def resolve_linkrole(self, name, text, check=True):\n                                             'to the py package') % (text,)\n             relpath = '/'.join(text.split('/')[1:])\n             if check:\n-                pkgroot = py.__pkg__.getpath()\n+                pkgroot = py.path.local(py._py.__file__).dirpath()\n                 abspath = pkgroot.join(relpath)\n                 assert pkgroot.join(relpath).check(), (\n                         'problem with linkrole :source:`%s`: '"
    },
    {
        "commit_id": "3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "commit_message": "generalize skipping\n- rename pytest_xfail to pytest_skip\n- dynamic \"skipif\" and \"xfail\" decorators\n- move most skipping code to the plugin\n\nalso coming with this commit:\n- extend mark keyword to accept positional args + docs\n- fix a few documentation related issues\n- leave version as \"trunk\" for now\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "buggy_code": "if item == self.stack[-1]:",
        "fixed_code": "if self.stack and item == self.stack[-1]:",
        "patch": "@@ -276,7 +276,7 @@ def teardown_all(self):\n         assert not self._finalizers\n \n     def teardown_exact(self, item):\n-        if item == self.stack[-1]:\n+        if self.stack and item == self.stack[-1]:\n             self._pop_and_teardown()\n         else:\n             self._callfinalizers(item)"
    },
    {
        "commit_id": "3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "commit_message": "generalize skipping\n- rename pytest_xfail to pytest_skip\n- dynamic \"skipif\" and \"xfail\" decorators\n- move most skipping code to the plugin\n\nalso coming with this commit:\n- extend mark keyword to accept positional args + docs\n- fix a few documentation related issues\n- leave version as \"trunk\" for now\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "buggy_code": "from py.__.rest.resthtml import convert_rest_html, strip_html_header",
        "fixed_code": "from _py.rest.resthtml import convert_rest_html, strip_html_header",
        "patch": "@@ -1,5 +1,5 @@\n import py\n-from py.__.rest.resthtml import convert_rest_html, strip_html_header \n+from _py.rest.resthtml import convert_rest_html, strip_html_header \n \n html = py.xml.html \n "
    },
    {
        "commit_id": "3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "commit_message": "generalize skipping\n- rename pytest_xfail to pytest_skip\n- dynamic \"skipif\" and \"xfail\" decorators\n- move most skipping code to the plugin\n\nalso coming with this commit:\n- extend mark keyword to accept positional args + docs\n- fix a few documentation related issues\n- leave version as \"trunk\" for now\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ca770b42040eca7ac1fb884e098d41bbe2e564b",
        "buggy_code": "pytest_plugins = \"pytest_xfail\", \"pytest_pytester\", \"pytest_tmpdir\"",
        "fixed_code": "pytest_plugins = \"skipping\", \"pytester\", \"tmpdir\"",
        "patch": "@@ -1,3 +1,3 @@\n \n-pytest_plugins = \"pytest_xfail\", \"pytest_pytester\", \"pytest_tmpdir\"\n+pytest_plugins = \"skipping\", \"pytester\", \"tmpdir\"\n "
    },
    {
        "commit_id": "1f29529a2450dfea7bc77fc47f09b44041645958",
        "commit_message": "* don't add distributed command line options when 'execnet' is not\n  installed, report a nice message.\n\n* fix tests and code to work with non-existing execnet\n\n* point execnet doc to the new package\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/1f29529a2450dfea7bc77fc47f09b44041645958",
        "buggy_code": "if self.config.option.dist != \"no\":",
        "fixed_code": "if getattr(self.config.option, 'dist', 'no') != \"no\":",
        "patch": "@@ -165,7 +165,7 @@ def pytest_deselected(self, items):\n         self.stats.setdefault('deselected', []).append(items)\n \n     def pytest_itemstart(self, item, node=None):\n-        if self.config.option.dist != \"no\":\n+        if getattr(self.config.option, 'dist', 'no') != \"no\":\n             # for dist-testing situations itemstart means we \n             # queued the item for sending, not interesting (unless debugging) \n             if self.config.option.debug:"
    },
    {
        "commit_id": "aed66120a2e5e3e6ab1816d6551d2288217f2ead",
        "commit_message": "fix typo, add ronny to authors, normalize email addresses\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/aed66120a2e5e3e6ab1816d6551d2288217f2ead",
        "buggy_code": "def test_with_explicit_path(self, testxbdir):",
        "fixed_code": "def test_with_explicit_path(self, testdir):",
        "patch": "@@ -16,7 +16,7 @@ def test_search_in_filename(self, testdir):\n             ['*%s:*' %(p.basename)]\n         )\n \n-    def test_with_explicit_path(self, testxbdir):\n+    def test_with_explicit_path(self, testdir):\n         sub1 = testdir.mkdir(\"things\")\n         sub2 = testdir.mkdir(\"foo\")\n         sub1.join(\"pyfile.py\").write(\"def stuff(): pass\")"
    },
    {
        "commit_id": "8f69d23f18741c4a90bd9a1bff95ad2be0038f73",
        "commit_message": "merging jarko'S fixes, resolves issue #45, resolves issue #46\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8f69d23f18741c4a90bd9a1bff95ad2be0038f73",
        "buggy_code": "packagedir = os.path.abspath(os.path.dirname(progpath))",
        "fixed_code": "packagedir = os.path.dirname(os.path.dirname(os.path.abspath(progpath)))",
        "patch": "@@ -3,7 +3,7 @@\n import sys, os, os.path\n \n progpath = sys.argv[0]\n-packagedir = os.path.abspath(os.path.dirname(progpath))\n+packagedir = os.path.dirname(os.path.dirname(os.path.abspath(progpath)))\n packagename = os.path.basename(packagedir)\n bindir = os.path.join(packagedir, 'bin')\n if sys.platform == 'win32':"
    },
    {
        "commit_id": "8f69d23f18741c4a90bd9a1bff95ad2be0038f73",
        "commit_message": "merging jarko'S fixes, resolves issue #45, resolves issue #46\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8f69d23f18741c4a90bd9a1bff95ad2be0038f73",
        "buggy_code": "cls = self._geterrnoclass(_winerrnomap[eno])",
        "fixed_code": "cls = self._geterrnoclass(_winerrnomap[errno])",
        "patch": "@@ -74,7 +74,7 @@ def checked_call(self, func, *args):\n                 cls = self._geterrnoclass(errno)\n             else: \n                 try: \n-                    cls = self._geterrnoclass(_winerrnomap[eno]) \n+                    cls = self._geterrnoclass(_winerrnomap[errno]) \n                 except KeyError:    \n                     raise value \n             raise cls(\"%s%r\" % (func.__name__, args))"
    },
    {
        "commit_id": "6ddea4a1bc4feb96bb41d84ed55532fb6e0dc7ab",
        "commit_message": "visit() now returns paths in depth-first order.  fixes issue #47\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6ddea4a1bc4feb96bb41d84ed55532fb6e0dc7ab",
        "buggy_code": "target.ensure(dir=1)",
        "fixed_code": "newx.dirpath().ensure(dir=1)",
        "patch": "@@ -334,12 +334,12 @@ def copy(self, target, archive=False):\n             assert self!=target\n             copychunked(self, target)\n         else:\n-            target.ensure(dir=1)\n             def rec(p):\n                 return p.check(link=0)\n             for x in self.visit(rec=rec):\n                 relpath = x.relto(self)\n                 newx = target.join(relpath)\n+                newx.dirpath().ensure(dir=1)\n                 if x.check(link=1):\n                     newx.mksymlinkto(x.readlink())\n                 elif x.check(file=1):"
    },
    {
        "commit_id": "e3b34c9da3078725a054ceac6a37f529a48012c3",
        "commit_message": "* allowing arbitrary keys for xspecs but adding some sanity checks to xspec-parsing and makegateway.\n* fixing a python3 IO issue - we need to retain sys.stdout/stdin\n  references to keep the underlying byte stream open.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e3b34c9da3078725a054ceac6a37f529a48012c3",
        "buggy_code": "str(py.code.Source(stdouterrin_setnull)),",
        "fixed_code": "inspect.getsource(stdouterrin_setnull),",
        "patch": "@@ -226,7 +226,7 @@ def _remote_bootstrap_gateway(self, io, extra=''):\n         s = \"\\n\".join([extra, \n             \"import sys ; sys.path[:0] = %r\" % (plist,), \n             \"import os ; os.environ['PYTHONPATH'] = %r\" % ppath, \n-            str(py.code.Source(stdouterrin_setnull)), \n+            inspect.getsource(stdouterrin_setnull), \n             \"stdouterrin_setnull()\", \n             \"\"\n             ])"
    },
    {
        "commit_id": "62a4cf68e8584193cf62243e11c02be9613cc8b1",
        "commit_message": "Fixed a typo in error.py causing it to fail on Windows.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/62a4cf68e8584193cf62243e11c02be9613cc8b1",
        "buggy_code": "cls = self._geterrnoclass(_winerrnomap[eno])",
        "fixed_code": "cls = self._geterrnoclass(_winerrnomap[errno])",
        "patch": "@@ -74,7 +74,7 @@ def checked_call(self, func, *args):\n                 cls = self._geterrnoclass(errno)\n             else: \n                 try: \n-                    cls = self._geterrnoclass(_winerrnomap[eno]) \n+                    cls = self._geterrnoclass(_winerrnomap[errno]) \n                 except KeyError:    \n                     raise value \n             raise cls(\"%s%r\" % (func.__name__, args))"
    },
    {
        "commit_id": "22c1ad9f7b097e3016a26a36083c44de2addc0cb",
        "commit_message": "fix a bug with funcarg setup and remove XXX comment because \"scope=module\" now would work but leaving it as session for now.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/22c1ad9f7b097e3016a26a36083c44de2addc0cb",
        "buggy_code": "scope = \"session\" # XXX module causes problems with -n 3!",
        "fixed_code": "scope = \"session\"",
        "patch": "@@ -10,7 +10,7 @@ def pytest_generate_tests(metafunc):\n             metafunc.addcall(id=gwtype, param=gwtype)\n \n def pytest_funcarg__gw(request):\n-    scope = \"session\" # XXX module causes problems with -n 3!\n+    scope = \"session\"\n     if request.param == \"popen\":\n         return request.cached_setup(\n                 setup=py.execnet.PopenGateway,"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "rsyncdirs = ['.', '../doc']",
        "fixed_code": "rsyncdirs = ['conftest.py', 'py', 'doc', 'testing']",
        "patch": "@@ -1,6 +1,6 @@\n pytest_plugins = '_pytest doctest pytester'.split()\n \n-rsyncdirs = ['.', '../doc']\n+rsyncdirs = ['conftest.py', 'py', 'doc', 'testing']\n \n import py\n def pytest_addoption(parser):"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "self.id = eval(method.func_name[5:])",
        "fixed_code": "self.id = eval(method.__name__[5:])",
        "patch": "@@ -9,7 +9,7 @@ def teardown_class(cls):\n         cls.classcount -= 1\n \n     def setup_method(self, method):\n-        self.id = eval(method.func_name[5:])\n+        self.id = eval(method.__name__[5:])\n \n     def test_42(self):\n         assert self.classcount == 1"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from myapp import MyApp",
        "fixed_code": "from mysetup.myapp import MyApp",
        "patch": "@@ -1,5 +1,5 @@\n \n-from myapp import MyApp\n+from mysetup.myapp import MyApp\n \n def pytest_funcarg__mysetup(request):\n     return MySetup()"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from myapp import MyApp",
        "fixed_code": "from mysetup2.myapp import MyApp",
        "patch": "@@ -1,5 +1,5 @@\n import py\n-from myapp import MyApp\n+from mysetup2.myapp import MyApp\n \n def pytest_funcarg__mysetup(request):\n     return MySetup(request)"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.conftest import getspecssh",
        "fixed_code": "from conftest import getspecssh",
        "patch": "@@ -512,7 +512,7 @@ class TestSocketGateway(SocketGatewaySetup, BasicRemoteExecution):\n \n class TestSshGateway(BasicRemoteExecution):\n     def setup_class(cls): \n-        from py.__.conftest import getspecssh\n+        from conftest import getspecssh\n         cls.sshhost = getspecssh().ssh\n         cls.gw = py.execnet.SshGateway(cls.sshhost)\n "
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.path.testing.common import CommonFSTests",
        "fixed_code": "from testing.path.common import CommonFSTests",
        "patch": "@@ -1,7 +1,7 @@\n import sys\n import py\n-from py.__.path.testing.common import CommonFSTests\n from py.__.path import svnwc as svncommon\n+from testing.path.common import CommonFSTests\n \n class CommonSvnTests(CommonFSTests):\n "
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.path.testing import common",
        "fixed_code": "from testing.path import common",
        "patch": "@@ -1,7 +1,7 @@\n import py\n import sys\n from py.path import local\n-from py.__.path.testing import common\n+from testing.path import common\n \n def pytest_funcarg__path1(request):\n     def setup():"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.path.testing import svntestbase",
        "fixed_code": "from testing.path import svntestbase",
        "patch": "@@ -1,5 +1,5 @@\n import py\n-from py.__.path.testing import svntestbase\n+from testing.path import svntestbase\n from py.path import SvnAuth\n import time\n import sys"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.path.testing.svntestbase import CommonSvnTests",
        "fixed_code": "from testing.path.svntestbase import CommonSvnTests",
        "patch": "@@ -1,8 +1,8 @@\n import py\n from py.__.path.svnurl import InfoSvnCommand\n-from py.__.path.testing.svntestbase import CommonSvnTests\n import datetime\n import time\n+from testing.path.svntestbase import CommonSvnTests\n \n def pytest_funcarg__path1(request):\n     repo, wc = request.getfuncargvalue(\"repowc1\")"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.path.testing.svntestbase import CommonSvnTests",
        "fixed_code": "from testing.path.svntestbase import CommonSvnTests",
        "patch": "@@ -1,8 +1,8 @@\n import py\n import sys\n-from py.__.path.testing.svntestbase import CommonSvnTests\n from py.__.path.svnwc import InfoSvnWCCommand, XMLWCStatus, parse_wcinfotime\n from py.__.path import svnwc as svncommon\n+from testing.path.svntestbase import CommonSvnTests\n \n if sys.platform == 'win32':\n     def normpath(p):"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.rest.testing.setup import getdata",
        "fixed_code": "from testing.rest.setup import getdata",
        "patch": "@@ -1,6 +1,6 @@\n import py\n from py.__.rest.convert import convert_dot, latexformula2png\n-from py.__.rest.testing.setup import getdata\n+from testing.rest.setup import getdata\n \n def setup_module(mod):\n     required = 'gs', 'dot', 'latex', 'epstopdf', "
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "from py.__.rest.testing.setup import getdata",
        "fixed_code": "from testing.rest.setup import getdata",
        "patch": "@@ -1,9 +1,9 @@\n import py\n \n-from py.__.rest.testing.setup import getdata\n docutils = py.test.importorskip(\"docutils\")\n from py.__.rest import directive, resthtml\n from py.__.rest.latex import process_rest_file\n+from testing.rest.setup import getdata\n \n def setup_module(mod):\n     mod.datadir = getdata()"
    },
    {
        "commit_id": "c8119d89b62c07bcd3abf013e42631c34aee3923",
        "commit_message": "move test files out of py lib proper\n* separate all tests from plugins\n* simplify implicit inclusion of plugins under test\n* have test_initpkg perform direct checks instead of yielding tests\n* fix example tests for 3k\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c8119d89b62c07bcd3abf013e42631c34aee3923",
        "buggy_code": "yield check_import, modpath",
        "fixed_code": "check_import(modpath)",
        "patch": "@@ -79,7 +79,7 @@ def recurse(p):\n             else:\n                 relpath = relpath.replace(base.sep, '.')\n                 modpath = 'py.__.%s' % relpath\n-                yield check_import, modpath \n+                check_import(modpath)\n \n def check_import(modpath): \n     py.builtin.print_(\"checking import\", modpath)"
    },
    {
        "commit_id": "518194537e3a2faab140452be929ba8807658e74",
        "commit_message": "* refactor some setup/teardown/ensuretemp usages to use funcargs\n* introduce monkeypatch.syspath_prepend for safe monkey patching of module import path\n* fix monkeypatch naming\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/518194537e3a2faab140452be929ba8807658e74",
        "buggy_code": "monkeypatch.finalize()",
        "fixed_code": "monkeypatch.undo()",
        "patch": "@@ -10,7 +10,7 @@ def test_getmethod_default_no_fd(self, testdir, monkeypatch):\n         try:\n             assert capman._getmethod(config, None) == \"sys\" \n         finally:\n-            monkeypatch.finalize()\n+            monkeypatch.undo()\n \n     def test_configure_per_fspath(self, testdir):\n         config = testdir.parseconfig(testdir.tmpdir)"
    },
    {
        "commit_id": "585147100908b9c6e0c98dbe000e4d902e124f98",
        "commit_message": "fix remaining execnet 3k issues until all tests pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/585147100908b9c6e0c98dbe000e4d902e124f98",
        "buggy_code": "name = \"%s.%s\" %(self.__class__.__name__, method.func_name)",
        "fixed_code": "name = \"%s.%s\" %(self.__class__.__name__, method.__name__)",
        "patch": "@@ -13,7 +13,7 @@ def teardown_module(mod):\n \n class DirSetup:\n     def setup_method(self, method):\n-        name = \"%s.%s\" %(self.__class__.__name__, method.func_name)\n+        name = \"%s.%s\" %(self.__class__.__name__, method.__name__)\n         self.tmpdir = t = py.test.ensuretemp(name)\n         self.source = t.join(\"source\")\n         self.dest1 = t.join(\"dest1\")"
    },
    {
        "commit_id": "c7f11745cd4030402d0f691a4f2f765b4b9d501c",
        "commit_message": "* fix various remaining 3k issues until test_gateway.py passes with python3 py/bin/py.test\n* we now wait on gateway initialization until we got a byte back after\n  we sent the bootstrap\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c7f11745cd4030402d0f691a4f2f765b4b9d501c",
        "buggy_code": "assert callback is None or callable(callback)",
        "fixed_code": "assert callback is None or py.builtin.callable(callback)",
        "patch": "@@ -20,7 +20,7 @@ class RSync(object):\n     def __init__(self, sourcedir, callback=None, verbose=True): \n         self._sourcedir = str(sourcedir)\n         self._verbose = verbose \n-        assert callback is None or callable(callback)\n+        assert callback is None or py.builtin.callable(callback)\n         self._callback = callback\n         self._channels = {}\n         self._receivequeue = Queue()"
    },
    {
        "commit_id": "f636ed8ced651d88097b4fdef0acd0d6cd11b3ac",
        "commit_message": "* make Gateway interface more asymetric: remote_* methods\n  and  cleanup/atexit handling now live exclusively with the \"InitiatingGateway\"\n\n* fix some cross-python io related handling\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f636ed8ced651d88097b4fdef0acd0d6cd11b3ac",
        "buggy_code": "(gateway.remoteaddress, remotepath, path))",
        "fixed_code": "(gateway.spec, remotepath, path))",
        "patch": "@@ -123,4 +123,4 @@ def _report_send_file(self, gateway, modified_rel_path):\n             path = os.path.basename(self._sourcedir) + \"/\" + modified_rel_path\n             remotepath = gateway.spec.chdir\n             py.builtin.print_('%s:%s <= %s' %\n-                              (gateway.remoteaddress, remotepath, path))\n+                              (gateway.spec, remotepath, path))"
    },
    {
        "commit_id": "c1fcf9c4d8710d7f204058f1f99677675f838099",
        "commit_message": "* use py.builtin._getimself instead of getattr(..., '*self*') everywhere\n* fix logging to work with 3k, implement buffering manually\n* fix unicode capturing issue - re-introduce EncodedFile for <3K file writes\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1fcf9c4d8710d7f204058f1f99677675f838099",
        "buggy_code": "lineno = function.func_code.co_firstlineno",
        "fixed_code": "lineno = py.code.getrawcode(function).co_firstlineno",
        "patch": "@@ -31,7 +31,7 @@ def _apiwarn(startversion, msg, stacklevel=1, function=None):\n def warn(msg, stacklevel=1, function=None):\n     if function is not None:\n         filename = py.std.inspect.getfile(function)\n-        lineno = function.func_code.co_firstlineno\n+        lineno = py.code.getrawcode(function).co_firstlineno\n     else:\n         try:\n             caller = sys._getframe(stacklevel)"
    },
    {
        "commit_id": "c1fcf9c4d8710d7f204058f1f99677675f838099",
        "commit_message": "* use py.builtin._getimself instead of getattr(..., '*self*') everywhere\n* fix logging to work with 3k, implement buffering manually\n* fix unicode capturing issue - re-introduce EncodedFile for <3K file writes\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1fcf9c4d8710d7f204058f1f99677675f838099",
        "buggy_code": "return filter(None, [self.join(name) for name in names])",
        "fixed_code": "return [x for x in [self.join(name) for name in names] if x]",
        "patch": "@@ -316,7 +316,7 @@ def _deprecated_collect(self):\n         if method is not None and method != Collector.run:\n             warnoldcollect(function=method)\n             names = self.run()\n-            return filter(None, [self.join(name) for name in names])\n+            return [x for x in [self.join(name) for name in names] if x]\n \n     def run(self):\n         \"\"\" DEPRECATED: returns a list of names available from this collector."
    },
    {
        "commit_id": "c1fcf9c4d8710d7f204058f1f99677675f838099",
        "commit_message": "* use py.builtin._getimself instead of getattr(..., '*self*') everywhere\n* fix logging to work with 3k, implement buffering manually\n* fix unicode capturing issue - re-introduce EncodedFile for <3K file writes\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1fcf9c4d8710d7f204058f1f99677675f838099",
        "buggy_code": "testclassinstance = self.request.function.im_self",
        "fixed_code": "testclassinstance = py.builtin._getimself(self.request.function)",
        "patch": "@@ -151,7 +151,7 @@ def runitem(self, source):\n         # used from runner functional tests \n         item = self.getitem(source)\n         # the test class where we are called from wants to provide the runner \n-        testclassinstance = self.request.function.im_self\n+        testclassinstance = py.builtin._getimself(self.request.function)\n         runner = testclassinstance.getrunner()\n         return runner(item)\n "
    },
    {
        "commit_id": "c1fcf9c4d8710d7f204058f1f99677675f838099",
        "commit_message": "* use py.builtin._getimself instead of getattr(..., '*self*') everywhere\n* fix logging to work with 3k, implement buffering manually\n* fix unicode capturing issue - re-introduce EncodedFile for <3K file writes\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1fcf9c4d8710d7f204058f1f99677675f838099",
        "buggy_code": "tmp.ensure(\"sub\", \"conftest.py\").write(\"raise SyntaxError\\n\")",
        "fixed_code": "tmp.ensure(\"sub\", \"conftest.py\").write(\"raise SyntaxError()\\n\")",
        "patch": "@@ -26,7 +26,7 @@ def test_root_conftest_syntax_error(self, testdir):\n        \n     def test_subdir_conftest_error(self, testdir):\n         tmp = testdir.tmpdir\n-        tmp.ensure(\"sub\", \"conftest.py\").write(\"raise SyntaxError\\n\")\n+        tmp.ensure(\"sub\", \"conftest.py\").write(\"raise SyntaxError()\\n\")\n         items, reprec = testdir.inline_genitems(tmp)\n         collectionfailures = reprec.getfailedcollections()\n         assert len(collectionfailures) == 1"
    },
    {
        "commit_id": "c1fcf9c4d8710d7f204058f1f99677675f838099",
        "commit_message": "* use py.builtin._getimself instead of getattr(..., '*self*') everywhere\n* fix logging to work with 3k, implement buffering manually\n* fix unicode capturing issue - re-introduce EncodedFile for <3K file writes\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c1fcf9c4d8710d7f204058f1f99677675f838099",
        "buggy_code": "from cPickle import Pickler, Unpickler",
        "fixed_code": "from pickle import Pickler, Unpickler",
        "patch": "@@ -153,7 +153,7 @@ def test_collector_implicit_config_pickling(self, testdir):\n         assert col2.listnames() == col.listnames()\n \n     def test_config_and_collector_pickling(self, testdir):\n-        from cPickle import Pickler, Unpickler\n+        from pickle import Pickler, Unpickler\n         tmpdir = testdir.tmpdir\n         dir1 = tmpdir.ensure(\"somedir\", dir=1)\n         config = testdir.parseconfig()"
    },
    {
        "commit_id": "4369c65790f4d162bb93a55d7d3f703c9372e8d9",
        "commit_message": "fix some broken things from syntax conversion\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4369c65790f4d162bb93a55d7d3f703c9372e8d9",
        "buggy_code": "sys.stderr.write(\"module (has no __file__): \" + mod)",
        "fixed_code": "sys.stderr.write(\"module (has no __file__): \" + str(mod))",
        "patch": "@@ -18,6 +18,6 @@ def main():\n         try:\n             location = mod.__file__ \n         except AttributeError:\n-            sys.stderr.write(\"module (has no __file__): \" + mod)\n+            sys.stderr.write(\"module (has no __file__): \" + str(mod))\n         else:\n             print(location)"
    },
    {
        "commit_id": "45a9aa536f5e1bb014219450d01276aa919b24ff",
        "commit_message": "fix need for py import\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/45a9aa536f5e1bb014219450d01276aa919b24ff",
        "buggy_code": "exec source, locs\"\"\")",
        "fixed_code": "exec source in locs\"\"\")",
        "patch": "@@ -30,7 +30,7 @@ def print_(*args):\n     exec(source, locs)\"\"\")\n else:\n     exec(\"\"\"def exec_(source, locs):\n-    exec source, locs\"\"\")\n+    exec source in locs\"\"\")\n \n def exec_from_one_connection(serversock):\n     print_(progname, 'Entering Accept loop', serversock.getsockname())"
    },
    {
        "commit_id": "b930565d56d3c46ba8e14b16396013765397fda2",
        "commit_message": "* fix some syntax and 3k issues for py/path and py/process, tests only partially working\n* have py.process.cmdexec return unicode/text (for now)\n* rename py.builtin.basestring to _basestring\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b930565d56d3c46ba8e14b16396013765397fda2",
        "buggy_code": "'builtin.basestring'     : ('./builtin/builtin31.py', 'basestring'),",
        "fixed_code": "'builtin._basestring'    : ('./builtin/builtin31.py', '_basestring'),",
        "patch": "@@ -147,7 +147,7 @@\n     'builtin.print_'         : ('./builtin/builtin31.py', 'print_'),\n     'builtin._reraise'       : ('./builtin/builtin31.py', '_reraise'),\n     'builtin.exec_'          : ('./builtin/builtin31.py', 'exec_'),\n-    'builtin.basestring'     : ('./builtin/builtin31.py', 'basestring'),\n+    'builtin._basestring'    : ('./builtin/builtin31.py', '_basestring'),\n     'builtin._totext'        : ('./builtin/builtin31.py', '_totext'),\n     'builtin.builtins'       : ('./builtin/builtin31.py', 'builtins'),\n "
    },
    {
        "commit_id": "b930565d56d3c46ba8e14b16396013765397fda2",
        "commit_message": "* fix some syntax and 3k issues for py/path and py/process, tests only partially working\n* have py.process.cmdexec return unicode/text (for now)\n* rename py.builtin.basestring to _basestring\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b930565d56d3c46ba8e14b16396013765397fda2",
        "buggy_code": "elif isinstance(part, py.builtin.basestring):",
        "fixed_code": "elif isinstance(part, py.builtin._basestring):",
        "patch": "@@ -25,7 +25,7 @@ def __init__(self, *parts, **kwargs):\n                 partlines = []\n             if isinstance(part, Source):\n                 partlines = part.lines\n-            elif isinstance(part, py.builtin.basestring):\n+            elif isinstance(part, py.builtin._basestring):\n                 partlines = part.split('\\n')\n                 if rstrip:\n                     while partlines: "
    },
    {
        "commit_id": "b930565d56d3c46ba8e14b16396013765397fda2",
        "commit_message": "* fix some syntax and 3k issues for py/path and py/process, tests only partially working\n* have py.process.cmdexec return unicode/text (for now)\n* rename py.builtin.basestring to _basestring\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b930565d56d3c46ba8e14b16396013765397fda2",
        "buggy_code": "elif isinstance(path, str):",
        "fixed_code": "elif isinstance(path, py.builtin._basestring):",
        "patch": "@@ -133,7 +133,7 @@ def __new__(cls, path=None):\n         self = object.__new__(cls)\n         if not path:\n             self.strpath = os.getcwd()\n-        elif isinstance(path, str):\n+        elif isinstance(path, py.builtin._basestring):\n             self.strpath = os.path.abspath(os.path.normpath(str(path)))\n         else:\n             raise ValueError(\"can only pass None, Path instances \""
    },
    {
        "commit_id": "b930565d56d3c46ba8e14b16396013765397fda2",
        "commit_message": "* fix some syntax and 3k issues for py/path and py/process, tests only partially working\n* have py.process.cmdexec return unicode/text (for now)\n* rename py.builtin.basestring to _basestring\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b930565d56d3c46ba8e14b16396013765397fda2",
        "buggy_code": "xml = u'<entry path=\"/home/jean/zope/venv/projectdb/parts/development-products/DataGridField\">\\n<wc-status item=\"incomplete\" props=\"none\" revision=\"784\">\\n</wc-status>\\n</entry>'",
        "fixed_code": "xml = '<entry path=\"/home/jean/zope/venv/projectdb/parts/development-products/DataGridField\">\\n<wc-status item=\"incomplete\" props=\"none\" revision=\"784\">\\n</wc-status>\\n</entry>'",
        "patch": "@@ -247,7 +247,7 @@ def test_status_noauthor(self):\n \n     def test_status_wrong_xml(self):\n         # testing for XML without author - this used to raise an exception\n-        xml = u'<entry path=\"/home/jean/zope/venv/projectdb/parts/development-products/DataGridField\">\\n<wc-status item=\"incomplete\" props=\"none\" revision=\"784\">\\n</wc-status>\\n</entry>'\n+        xml = '<entry path=\"/home/jean/zope/venv/projectdb/parts/development-products/DataGridField\">\\n<wc-status item=\"incomplete\" props=\"none\" revision=\"784\">\\n</wc-status>\\n</entry>'\n         st = XMLWCStatus.fromstring(xml, self.root)\n         assert len(st.incomplete) == 1\n "
    },
    {
        "commit_id": "b930565d56d3c46ba8e14b16396013765397fda2",
        "commit_message": "* fix some syntax and 3k issues for py/path and py/process, tests only partially working\n* have py.process.cmdexec return unicode/text (for now)\n* rename py.builtin.basestring to _basestring\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b930565d56d3c46ba8e14b16396013765397fda2",
        "buggy_code": "if isinstance(obj[0], basestring):",
        "fixed_code": "if isinstance(obj[0], py.builtin._basestring):",
        "patch": "@@ -305,7 +305,7 @@ def getcallargs(self, obj):\n         if not isinstance(obj, (tuple, list)):\n             obj = (obj,)\n         # explict naming\n-        if isinstance(obj[0], basestring):\n+        if isinstance(obj[0], py.builtin._basestring):\n             name = obj[0]\n             obj = obj[1:]\n         else:"
    },
    {
        "commit_id": "c23cc3656c3ca0f21de1eb618013868ece05355f",
        "commit_message": "fix location of magic AssertionError\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c23cc3656c3ca0f21de1eb618013868ece05355f",
        "buggy_code": "'code._AssertionError'   : ('./code/assertion.py', 'AssertionError'),",
        "fixed_code": "'code._AssertionError'   : ('./code/_assertion.py', 'AssertionError'),",
        "patch": "@@ -133,7 +133,7 @@\n     'code.getrawcode'        : ('./code/code.py', 'getrawcode'),\n     'code.patch_builtins'    : ('./code/code.py', 'patch_builtins'),\n     'code.unpatch_builtins'  : ('./code/code.py', 'unpatch_builtins'),\n-    'code._AssertionError'   : ('./code/assertion.py', 'AssertionError'),\n+    'code._AssertionError'   : ('./code/_assertion.py', 'AssertionError'),\n \n     # backports and additions of builtins\n     'builtin.__doc__'        : ('./builtin/__init__.py', '__doc__'),"
    },
    {
        "commit_id": "13932b7f4bebc210dc75164f2e7fbffa7acb5f8a",
        "commit_message": "* deprecate py.magic.invoke/revoke in favour of\n  the new py.code.patch_builtins, py.code.unpatch_builtins\n\n* deprecate py.magic.patch/revert\n\n* deprecate py.magic.AssertionError in favour of py.code._AssertionError\n\n* introduced pytest_assertion plugin.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/13932b7f4bebc210dc75164f2e7fbffa7acb5f8a",
        "buggy_code": "pytest_plugins = \"default runner capture terminal keyword xfail tmpdir execnetcleanup monkeypatch recwarn pdb pastebin unittest helpconfig nose\".split()",
        "fixed_code": "pytest_plugins = \"default runner capture terminal keyword xfail tmpdir execnetcleanup monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()",
        "patch": "@@ -10,5 +10,5 @@\n Function = py.test.collect.Function\n Instance = py.test.collect.Instance\n \n-pytest_plugins = \"default runner capture terminal keyword xfail tmpdir execnetcleanup monkeypatch recwarn pdb pastebin unittest helpconfig nose\".split()\n+pytest_plugins = \"default runner capture terminal keyword xfail tmpdir execnetcleanup monkeypatch recwarn pdb pastebin unittest helpconfig nose assertion\".split()\n "
    },
    {
        "commit_id": "739edc26b4e9894abc932cd225216e0858d9894f",
        "commit_message": "simplifying errno error class creation and introduce a py.error.checked_call helper\nthat creates a proper errno-specific exception instead of OSErrors.  use it from\npy.path.local.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/739edc26b4e9894abc932cd225216e0858d9894f",
        "buggy_code": "'error'                  : ('./misc/error.py', 'error'),",
        "fixed_code": "'error'                  : ('./error.py', 'error'),",
        "patch": "@@ -164,7 +164,7 @@\n     'io.TerminalWriter'      : ('./io/terminalwriter.py', 'TerminalWriter'), \n \n     # error module, defining all errno's as Classes\n-    'error'                  : ('./misc/error.py', 'error'),\n+    'error'                  : ('./error.py', 'error'),\n \n     # small and mean xml/html generation\n     'xml.__doc__'            : ('./xmlobj/__init__.py', '__doc__'),"
    },
    {
        "commit_id": "561fdca3a2d599bf9c8083af19e67c69573b36b2",
        "commit_message": "move localpath implementation to a single file, simplify unix/posix difference and fix a bit\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/561fdca3a2d599bf9c8083af19e67c69573b36b2",
        "buggy_code": "'path.local'             : ('./path/local/local.py', 'LocalPath'),",
        "fixed_code": "'path.local'             : ('./path/local.py', 'LocalPath'),",
        "patch": "@@ -106,7 +106,7 @@\n     'path.__doc__'           : ('./path/__init__.py', '__doc__'),\n     'path.svnwc'             : ('./path/svn/wccommand.py', 'SvnWCCommandPath'),\n     'path.svnurl'            : ('./path/svn/urlcommand.py', 'SvnCommandPath'),\n-    'path.local'             : ('./path/local/local.py', 'LocalPath'),\n+    'path.local'             : ('./path/local.py', 'LocalPath'),\n     'path.SvnAuth'           : ('./path/svn/svncommon.py', 'SvnAuth'),\n \n     # some nice slightly magic APIs"
    },
    {
        "commit_id": "30e87e887d1a649c562fd0a5ba0d3adb8b099e05",
        "commit_message": "shift install test, fix example test, add 1.0.1 release announce\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30e87e887d1a649c562fd0a5ba0d3adb8b099e05",
        "buggy_code": "assert failed == 5",
        "fixed_code": "assert failed == 4",
        "patch": "@@ -11,4 +11,4 @@ def test_failure_demo_fails_properly(testdir):\n     assert failed == 20, failed\n     colreports = reprec.getreports(\"pytest_collectreport\")\n     failed = len([x.failed for x in colreports])\n-    assert failed == 5\n+    assert failed == 4"
    },
    {
        "commit_id": "30e87e887d1a649c562fd0a5ba0d3adb8b099e05",
        "commit_message": "shift install test, fix example test, add 1.0.1 release announce\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30e87e887d1a649c562fd0a5ba0d3adb8b099e05",
        "buggy_code": "\"*test_p2.py <- test_p1.py:2: TestMore.test_p1*\",",
        "fixed_code": "\"*test_p2.py <- *test_p1.py:2: TestMore.test_p1*\",",
        "patch": "@@ -249,7 +249,7 @@ class TestMore(BaseTests):\n         ])\n         result = testdir.runpytest(\"-v\", p2)\n         result.stdout.fnmatch_lines([\n-            \"*test_p2.py <- test_p1.py:2: TestMore.test_p1*\",\n+            \"*test_p2.py <- *test_p1.py:2: TestMore.test_p1*\",\n         ])\n \n     def test_keyboard_interrupt_dist(self, testdir, option):"
    },
    {
        "commit_id": "38180ffa5fb726fd6ec953eecc1a19d230d073c0",
        "commit_message": "fix --version test, set version to 1.0.x rather than 1.0.1 for now, regen setup.py/MANIFEST\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/38180ffa5fb726fd6ec953eecc1a19d230d073c0",
        "buggy_code": "version = trunk or \"1.0.1\"",
        "fixed_code": "version = trunk or \"1.0.x\"",
        "patch": "@@ -20,7 +20,7 @@\n from initpkg import initpkg\n trunk = None\n \n-version = trunk or \"1.0.1\"\n+version = trunk or \"1.0.x\"\n \n initpkg(__name__,\n     description = \"py.test and pylib: advanced testing tool and networking lib\", "
    },
    {
        "commit_id": "38180ffa5fb726fd6ec953eecc1a19d230d073c0",
        "commit_message": "fix --version test, set version to 1.0.x rather than 1.0.1 for now, regen setup.py/MANIFEST\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/38180ffa5fb726fd6ec953eecc1a19d230d073c0",
        "buggy_code": "version= trunk or '1.0.1',",
        "fixed_code": "version= trunk or '1.0.x',",
        "patch": "@@ -31,7 +31,7 @@ def main():\n         name='py',\n         description='py.test and pylib: advanced testing tool and networking lib',\n         long_description = long_description, \n-        version= trunk or '1.0.1', \n+        version= trunk or '1.0.x', \n         url='http://pylib.org', \n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'], "
    },
    {
        "commit_id": "61c53602f2bd58be8e8da08cc327626302cbae53",
        "commit_message": "introduce new \"Error\" outcome and group setup/teardown and collection failures into that category. Report them separately.\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/61c53602f2bd58be8e8da08cc327626302cbae53",
        "buggy_code": "\"*1 failed*1 passed*\"",
        "fixed_code": "\"*1 passed*1 error*\"",
        "patch": "@@ -194,7 +194,7 @@ def test_second():\n         \"\"\")\n         result = testdir.runpytest(p)\n         assert result.stdout.fnmatch_lines([\n-            \"*1 failed*1 passed*\"\n+            \"*1 passed*1 error*\"\n             ])\n \n     def test_request_getmodulepath(self, testdir):"
    },
    {
        "commit_id": "2603a0b76ede575243a009ef2ff3f9587f660012",
        "commit_message": "fix figleaf plugin import\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2603a0b76ede575243a009ef2ff3f9587f660012",
        "buggy_code": "figleaf = py.test.importorskip(\"figleaf.annote_html\")",
        "fixed_code": "figleaf = py.test.importorskip(\"figleaf.annotate_html\")",
        "patch": "@@ -3,7 +3,7 @@\n \"\"\"\n import py\n \n-figleaf = py.test.importorskip(\"figleaf.annote_html\")\n+figleaf = py.test.importorskip(\"figleaf.annotate_html\")\n \n def pytest_addoption(parser):\n     group = parser.addgroup('figleaf options')"
    },
    {
        "commit_id": "183af955263382481296a70ecf247428c11bf2da",
        "commit_message": "* refined funcarg docs and CHANGELOG\n* fixed funcarg setup and error-raising issue\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/183af955263382481296a70ecf247428c11bf2da",
        "buggy_code": "raise LookupError(msg)",
        "fixed_code": "raise self.Error(msg)",
        "patch": "@@ -165,7 +165,7 @@ def _raiselookupfailed(self, argname):\n         line = \"%s:%s\" %(fspath, lineno)\n         msg = \"funcargument %r not found for: %s\" %(argname, line)\n         msg += \"\\n available funcargs: %s\" %(\", \".join(available),)\n-        raise LookupError(msg)\n+        raise self.Error(msg)\n \n \n         "
    },
    {
        "commit_id": "7cb096373bc2a3312ed4c1ebdfde1a0d35a7dbb8",
        "commit_message": "fix typo\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/7cb096373bc2a3312ed4c1ebdfde1a0d35a7dbb8",
        "buggy_code": "\"\"\" make ItemTestReport for the specified test outcome. \"\"\"",
        "fixed_code": "\"\"\" make ItemTestReport for the given item and call outcome. \"\"\"",
        "patch": "@@ -90,7 +90,7 @@ def pytest_runtest_protocol(item):\n pytest_runtest_protocol.firstresult = True\n \n def pytest_runtest_makereport(item, call):\n-    \"\"\" make ItemTestReport for the specified test outcome. \"\"\"\n+    \"\"\" make ItemTestReport for the given item and call outcome. \"\"\" \n pytest_runtest_makereport.firstresult = True\n \n def pytest_runtest_logreport(rep):"
    },
    {
        "commit_id": "c491a708e0b07a08e052fc52d78d1467d1f1f965",
        "commit_message": "add test and fix keyword recogniation, thanks Andreas Kloeckner\n\n--HG--\nbranch : 1.0.x",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c491a708e0b07a08e052fc52d78d1467d1f1f965",
        "buggy_code": "chain = [item._keywords() for item in chain if item._keywords()]",
        "fixed_code": "chain = [item.readkeywords() for item in chain if item._keywords()]",
        "patch": "@@ -204,7 +204,7 @@ def _skipbykeyword(self, keywordexpr):\n     def _matchonekeyword(self, key, chain):\n         elems = key.split(\".\")\n         # XXX O(n^2), anyone cares?\n-        chain = [item._keywords() for item in chain if item._keywords()]\n+        chain = [item.readkeywords() for item in chain if item._keywords()]\n         for start, _ in enumerate(chain):\n             if start + len(elems) > len(chain):\n                 return False"
    },
    {
        "commit_id": "53dc59511391a8a7d4cf2f9a3ce0b0fb8adc31df",
        "commit_message": "b3, fix (likelY) windows-path-comparison related issue at plugin registration\nlink to PyPI\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/53dc59511391a8a7d4cf2f9a3ce0b0fb8adc31df",
        "buggy_code": "version = \"1.0.0b2\"",
        "fixed_code": "version = \"1.0.0b3\"",
        "patch": "@@ -19,7 +19,7 @@\n \"\"\"\n from initpkg import initpkg\n \n-version = \"1.0.0b2\"\n+version = \"1.0.0b3\"\n \n initpkg(__name__,\n     description = \"py.test and pylib: advanced testing tool and networking lib\", "
    },
    {
        "commit_id": "53dc59511391a8a7d4cf2f9a3ce0b0fb8adc31df",
        "commit_message": "b3, fix (likelY) windows-path-comparison related issue at plugin registration\nlink to PyPI\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/53dc59511391a8a7d4cf2f9a3ce0b0fb8adc31df",
        "buggy_code": "version='1.0.0b2',",
        "fixed_code": "version='1.0.0b3',",
        "patch": "@@ -35,7 +35,7 @@ def main():\n         name='py',\n         description='py.test and pylib: advanced testing tool and networking lib',\n         long_description = long_description, \n-        version='1.0.0b2', \n+        version='1.0.0b3', \n         url='http://pylib.org', \n         license='MIT license',\n         platforms=['unix', 'linux', 'osx', 'cygwin', 'win32'], "
    },
    {
        "commit_id": "4bc352cc7df659d17bbb7ba84b25d8a551585cfa",
        "commit_message": "merging pedronis-branch changes to resolve issue 15 for now.\nThis introduces py.test.collect._fillfuncargs which can\noperate on Function like objects.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4bc352cc7df659d17bbb7ba84b25d8a551585cfa",
        "buggy_code": "assert not self._pyfuncitem._args, \"yielded functions cannot have funcargs\"",
        "fixed_code": "assert not getattr(self._pyfuncitem, '_args', None), \"yielded functions cannot have funcargs\"",
        "patch": "@@ -95,7 +95,7 @@ def __init__(self, pyfuncitem):\n     def _fillfuncargs(self):\n         argnames = getfuncargnames(self.function)\n         if argnames:\n-            assert not self._pyfuncitem._args, \"yielded functions cannot have funcargs\" \n+            assert not getattr(self._pyfuncitem, '_args', None), \"yielded functions cannot have funcargs\" \n         for argname in argnames:\n             if argname not in self._pyfuncitem.funcargs:\n                 self._pyfuncitem.funcargs[argname] = self.getfuncargvalue(argname)"
    },
    {
        "commit_id": "a58292b4731c769fc13f28b8d7c29eef93a5f6b8",
        "commit_message": "* streamline hookrecording and global py._com.comregistry patching\n* this fixes a reporting bug where events from inner test runs would\n  mix with the outer test run\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a58292b4731c769fc13f28b8d7c29eef93a5f6b8",
        "buggy_code": "registry = comregistry",
        "fixed_code": "registry = py._com.comregistry",
        "patch": "@@ -101,7 +101,7 @@ class Hooks:\n     def __init__(self, hookspecs, registry=None):\n         self._hookspecs = hookspecs\n         if registry is None:\n-            registry = comregistry\n+            registry = py._com.comregistry\n         self.registry = registry\n         for name, method in vars(hookspecs).items():\n             if name[:2] != \"__\":"
    },
    {
        "commit_id": "a58292b4731c769fc13f28b8d7c29eef93a5f6b8",
        "commit_message": "* streamline hookrecording and global py._com.comregistry patching\n* this fixes a reporting bug where events from inner test runs would\n  mix with the outer test run\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a58292b4731c769fc13f28b8d7c29eef93a5f6b8",
        "buggy_code": "sorter = testdir.getreportrecorder(item.config.pluginmanager)",
        "fixed_code": "sorter = testdir.getreportrecorder(item)",
        "patch": "@@ -208,7 +208,7 @@ def test_pytest_item_setup_and_runtest(self, testdir):\n         item = testdir.getitem(\"\"\"def test_func(): pass\"\"\")\n         plugin = RunnerPlugin()\n         plugin.pytest_configure(item.config)\n-        sorter = testdir.getreportrecorder(item.config.pluginmanager)\n+        sorter = testdir.getreportrecorder(item)\n         plugin.pytest_item_setup_and_runtest(item)\n         rep = sorter.getcall(\"pytest_itemtestreport\").rep\n         assert rep.passed "
    },
    {
        "commit_id": "286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "commit_message": "merge samuele's metainfo() branch\nalso fix a test after broken rename\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "buggy_code": "def metainfo(self):",
        "fixed_code": "def reportinfo(self):",
        "patch": "@@ -439,7 +439,7 @@ def execute(self, obj, *args):\n         \"\"\" deprecated, here because subclasses might call it. \"\"\"\n         return obj(*args)\n \n-    def metainfo(self):\n+    def reportinfo(self):\n         return self.fspath, None, \"\"\n         \n def warnoldcollect(function=None):"
    },
    {
        "commit_id": "286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "commit_message": "merge samuele's metainfo() branch\nalso fix a test after broken rename\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "buggy_code": "fspath, lineno, msg = self._pyfuncitem.metainfo()",
        "fixed_code": "fspath, lineno, msg = self._pyfuncitem.reportinfo()",
        "patch": "@@ -111,7 +111,7 @@ def _raiselookupfailed(self):\n                     name = name[len(self._argprefix):]\n                     if name not in available:\n                         available.append(name) \n-        fspath, lineno, msg = self._pyfuncitem.metainfo()\n+        fspath, lineno, msg = self._pyfuncitem.reportinfo()\n         line = \"%s:%s\" %(fspath, lineno)\n         msg = \"funcargument %r not found for: %s\" %(self.argname, line)\n         msg += \"\\n available funcargs: %s\" %(\", \".join(available),)"
    },
    {
        "commit_id": "286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "commit_message": "merge samuele's metainfo() branch\nalso fix a test after broken rename\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/286460b94e7d3fb1d5933e7f1d41ba87b4e3bc77",
        "buggy_code": "path, lineno = item.getfslineno()",
        "fixed_code": "path, lineno = item._getfslineno()",
        "patch": "@@ -76,7 +76,7 @@ def runforked():\n         return report_process_crash(item, result)\n \n def report_process_crash(item, result):\n-    path, lineno = item.getfslineno()\n+    path, lineno = item._getfslineno()\n     longrepr = [\n         (\"X\", \"CRASHED\"), \n         (\"%s:%s: CRASHED with signal %d\" %(path, lineno, result.signal)),"
    },
    {
        "commit_id": "d9ad2cf7618ebd1985c4ba267a65efc95a271aa6",
        "commit_message": "merging the new function generators, addresses issue 2\n- introduce a new pytest_genfuncruns hook for generating tests with multiple funcargs\n- new and extended docs: doc/test/funcargs.txt\n- factor all funcargs related code into py/test/funcargs.py\n- remove request.maketempdir call (you can use request.config.mktemp)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d9ad2cf7618ebd1985c4ba267a65efc95a271aa6",
        "buggy_code": "tmp = request.maketempdir()",
        "fixed_code": "tmp = request.config.mktemp(request.function.__name__, numbered=True)",
        "patch": "@@ -114,7 +114,7 @@ def test_multi_chdir_popen(self, testdir):\n \n class pytest_funcarg__mysetup:\n     def __init__(self, request):\n-        tmp = request.maketempdir()\n+        tmp = request.config.mktemp(request.function.__name__, numbered=True)\n         self.source = tmp.mkdir(\"source\")\n         self.dest = tmp.mkdir(\"dest\")\n "
    },
    {
        "commit_id": "d9ad2cf7618ebd1985c4ba267a65efc95a271aa6",
        "commit_message": "merging the new function generators, addresses issue 2\n- introduce a new pytest_genfuncruns hook for generating tests with multiple funcargs\n- new and extended docs: doc/test/funcargs.txt\n- factor all funcargs related code into py/test/funcargs.py\n- remove request.maketempdir call (you can use request.config.mktemp)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d9ad2cf7618ebd1985c4ba267a65efc95a271aa6",
        "buggy_code": "apigen_relpath = self.project.hookgen_relpath",
        "fixed_code": "apigen_relpath = self.project.apigen_relpath",
        "patch": "@@ -142,7 +142,7 @@ def pygments_directive(name, arguments, options, content, lineno,\n         directives.register_directive('sourcecode', pygments_directive)\n \n     def resolve_linkrole(self, name, text, check=True):\n-        apigen_relpath = self.project.hookgen_relpath\n+        apigen_relpath = self.project.apigen_relpath\n     \n         if name == 'api':\n             if text == 'py':"
    },
    {
        "commit_id": "b7fe3ee2b3bb5db09e30a59d0c8ed9ba894a8b93",
        "commit_message": "fixes issue 6 by reverting back to issuing attributeerror\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b7fe3ee2b3bb5db09e30a59d0c8ed9ba894a8b93",
        "buggy_code": "except ImportError:",
        "fixed_code": "except AttributeError:",
        "patch": "@@ -49,7 +49,7 @@ class Syslog:\n     for priority in \"LOG_EMERG LOG_ALERT LOG_CRIT LOG_ERR LOG_WARNING LOG_NOTICE LOG_INFO LOG_DEBUG\".split():\n         try:\n             exec(\"%s = py.std.syslog.%s\" % (priority, priority))\n-        except ImportError:\n+        except AttributeError:\n             pass\n     \n     def __init__(self, priority = None):"
    },
    {
        "commit_id": "b7fe3ee2b3bb5db09e30a59d0c8ed9ba894a8b93",
        "commit_message": "fixes issue 6 by reverting back to issuing attributeerror\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/b7fe3ee2b3bb5db09e30a59d0c8ed9ba894a8b93",
        "buggy_code": "py.test.raises(ImportError, \"py.std.xyzalskdj\")",
        "fixed_code": "py.test.raises(AttributeError, \"py.std.xyzalskdj\")",
        "patch": "@@ -6,7 +6,7 @@ def test_os():\n     assert py.std.os is os\n \n def test_import_error_converts_to_attributeerror():\n-    py.test.raises(ImportError, \"py.std.xyzalskdj\")\n+    py.test.raises(AttributeError, \"py.std.xyzalskdj\")\n \n def test_std_gets_it():\n     for x in py.std.sys.modules:"
    },
    {
        "commit_id": "46be553c25683fd23db4e8beaa79f3111cabacaf",
        "commit_message": "better error messages as discussed here:\nhttp://codespeak.net/pipermail/py-dev/2009q2/001113.html\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/46be553c25683fd23db4e8beaa79f3111cabacaf",
        "buggy_code": "assert s.find(\"re-evaluating\")",
        "fixed_code": "assert s.find(\"re-run\") != -1",
        "patch": "@@ -129,5 +129,5 @@ def f(l=[1,0]):\n     \"\"\")\n     result = testdir.runpytest(p)\n     s = result.stdout.str()\n-    assert s.find(\"re-evaluating\") \n+    assert s.find(\"re-run\") != -1\n "
    },
    {
        "commit_id": "9620583e826de2ac9caf4105f2760312d4065b3a",
        "commit_message": "remove unused import, fix failing test mode\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9620583e826de2ac9caf4105f2760312d4065b3a",
        "buggy_code": "self.queueevent(pytest_rescheduleitems, tosend)",
        "fixed_code": "self.queueevent(\"pytest_rescheduleitems\", items=tosend)",
        "patch": "@@ -203,7 +203,7 @@ def senditems_each(self, tosend):\n         tosend[:] = tosend[room:]  # update inplace\n         if tosend:\n             # we have some left, give it to the main loop\n-            self.queueevent(pytest_rescheduleitems, tosend)\n+            self.queueevent(\"pytest_rescheduleitems\", items=tosend)\n \n     def senditems_load(self, tosend):\n         if not tosend:"
    },
    {
        "commit_id": "945c72ddf3a8b6a94ebbe0b09d017c4673da9a23",
        "commit_message": "[svn r64263] fix failing test on windows\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/945c72ddf3a8b6a94ebbe0b09d017c4673da9a23",
        "buggy_code": "except AttributeError:",
        "fixed_code": "except ImportError:",
        "patch": "@@ -49,7 +49,7 @@ class Syslog:\n     for priority in \"LOG_EMERG LOG_ALERT LOG_CRIT LOG_ERR LOG_WARNING LOG_NOTICE LOG_INFO LOG_DEBUG\".split():\n         try:\n             exec(\"%s = py.std.syslog.%s\" % (priority, priority))\n-        except AttributeError:\n+        except ImportError:\n             pass\n     \n     def __init__(self, priority = None):"
    },
    {
        "commit_id": "6b1b3a349461e189069245edf8c72df53d4df3fc",
        "commit_message": "fix funcarg usage in execnet, regen setup\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6b1b3a349461e189069245edf8c72df53d4df3fc",
        "buggy_code": "https://codespeak.net/svn/py/trunk, revision=63999",
        "fixed_code": "https://codespeak.net/svn/py/trunk, revision=64076",
        "patch": "@@ -1,7 +1,7 @@\n \"\"\"\n     setup file for 'py' package based on:\n \n-        https://codespeak.net/svn/py/trunk, revision=63999\n+        https://codespeak.net/svn/py/trunk, revision=64076\n \n     autogenerated by gensetup.py\n \"\"\""
    },
    {
        "commit_id": "c6606d9d8f58b041e6993f567ce7d77ae059069e",
        "commit_message": "[svn r63846] fix bug\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c6606d9d8f58b041e6993f567ce7d77ae059069e",
        "buggy_code": "def pytest_pyfunc_call(self, call, pyfuncitem, args, kwargs):",
        "fixed_code": "def pytest_pyfunc_call(self, pyfuncitem, args, kwargs):",
        "patch": "@@ -48,7 +48,7 @@ def pytest_item_runtest_finished(self, item, excinfo, outerr):\n     # runtest related hooks \n     # ------------------------------------------------------------------------------\n \n-    def pytest_pyfunc_call(self, call, pyfuncitem, args, kwargs):\n+    def pytest_pyfunc_call(self, pyfuncitem, args, kwargs):\n         \"\"\" return True if we consumed/did the call to the python function item. \"\"\"\n \n     def pytest_item_makereport(self, item, excinfo, when, outerr):"
    },
    {
        "commit_id": "c6606d9d8f58b041e6993f567ce7d77ae059069e",
        "commit_message": "[svn r63846] fix bug\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c6606d9d8f58b041e6993f567ce7d77ae059069e",
        "buggy_code": "from outcome import Skipped",
        "fixed_code": "from py.__.test.outcome import Skipped",
        "patch": "@@ -1,5 +1,5 @@\n import py\n-from outcome import Skipped\n+from py.__.test.outcome import Skipped\n \n class RunnerPlugin:\n     def pytest_configure(self, config):"
    },
    {
        "commit_id": "e84337d7cd32432a9a97e28f5d15ecd54940e6bc",
        "commit_message": "[svn r63521] fix py.std docs and simplify its implementation (which is a 5 liner, anyway).\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e84337d7cd32432a9a97e28f5d15ecd54940e6bc",
        "buggy_code": "py.test.raises(AttributeError, \"py.std.xyzalskdj\")",
        "fixed_code": "py.test.raises(ImportError, \"py.std.xyzalskdj\")",
        "patch": "@@ -6,7 +6,7 @@ def test_os():\n     assert py.std.os is os\n \n def test_import_error_converts_to_attributeerror():\n-    py.test.raises(AttributeError, \"py.std.xyzalskdj\")\n+    py.test.raises(ImportError, \"py.std.xyzalskdj\")\n \n def test_std_gets_it():\n     for x in py.std.sys.modules:"
    },
    {
        "commit_id": "422635ea4787393511bc35b4e386ae518ef56e32",
        "commit_message": "[svn r63195] * fix rsyncdir usages all around\n* rename looponfailing to looponfail\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/422635ea4787393511bc35b4e386ae518ef56e32",
        "buggy_code": "result = testdir.runpytest(\"-d\", \"--rsyncdirs=%(subdir)s\" % locals(),",
        "fixed_code": "result = testdir.runpytest(\"-d\", \"--rsyncdir=%(subdir)s\" % locals(),",
        "patch": "@@ -64,7 +64,7 @@ def test_distribution_rsyncdirs_example(self, testdir):\n         subdir.ensure(\"__init__.py\")\n         p = subdir.join(\"test_one.py\")\n         p.write(\"def test_5(): assert not __file__.startswith(%r)\" % str(p))\n-        result = testdir.runpytest(\"-d\", \"--rsyncdirs=%(subdir)s\" % locals(), \n+        result = testdir.runpytest(\"-d\", \"--rsyncdir=%(subdir)s\" % locals(), \n             \"--tx=popen//chdir=%(dest)s\" % locals(), p)\n         assert result.ret == 0\n         result.stdout.fnmatch_lines(["
    },
    {
        "commit_id": "422635ea4787393511bc35b4e386ae518ef56e32",
        "commit_message": "[svn r63195] * fix rsyncdir usages all around\n* rename looponfailing to looponfail\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/422635ea4787393511bc35b4e386ae518ef56e32",
        "buggy_code": "def pyevent_looponfailinginfo(self, event):",
        "fixed_code": "def pyevent_looponfailinfo(self, event):",
        "patch": "@@ -209,7 +209,7 @@ def pyevent_testnodedown(self, node, error):\n     def pyevent_rescheduleitems(self, event):\n         \"\"\" Items from a node that went down. \"\"\"\n \n-    def pyevent_looponfailinginfo(self, event):\n+    def pyevent_looponfailinfo(self, event):\n         \"\"\" info for repeating failing tests. \"\"\"\n \n     def pyevent_plugin_registered(self, plugin):"
    },
    {
        "commit_id": "5740cfebd6426f119c3eca08267b0d20f3504b5d",
        "commit_message": "[svn r63150] fix hostmanager to work with new xspecs\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/5740cfebd6426f119c3eca08267b0d20f3504b5d",
        "buggy_code": "if host.type == \"popen\":",
        "fixed_code": "if host.popen:",
        "patch": "@@ -71,7 +71,7 @@ def install_slave(host, gateway, config):\n     \"\"\")\n     channel = PickleChannel(channel)\n     basetemp = None\n-    if host.type == \"popen\":\n+    if host.popen:\n         popenbase = config.ensuretemp(\"popen\")\n         basetemp = py.path.local.make_numbered_dir(prefix=\"slave-\", \n             keep=0, rootdir=popenbase)"
    },
    {
        "commit_id": "6ba07a82ba335123bc1dd83106a9ef7088450e1a",
        "commit_message": "[svn r63048] fix windows issues\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6ba07a82ba335123bc1dd83106a9ef7088450e1a",
        "buggy_code": "assert len(s.split(\":\")) == 3",
        "fixed_code": "assert len(s.split(\":\")) >= 3 # on windows it's 4",
        "patch": "@@ -212,7 +212,7 @@ def test_excinfo_str():\n     print s\n     assert s.startswith(__file__[:-1]) # pyc file \n     assert s.endswith(\"ValueError\")\n-    assert len(s.split(\":\")) == 3\n+    assert len(s.split(\":\")) >= 3 # on windows it's 4\n \n def test_excinfo_errisinstance():\n     excinfo = py.test.raises(ValueError, h)"
    },
    {
        "commit_id": "772658d6168f69e684d11d27d3b8390f071b8d3a",
        "commit_message": "[svn r63028] allow py.test --exec=python2.4 -n 3 to work\nand fix some bugs from doing so.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/772658d6168f69e684d11d27d3b8390f071b8d3a",
        "buggy_code": "return self.run(script, *args)",
        "fixed_code": "return self.run(py.std.sys.executable, script, *args)",
        "patch": "@@ -232,7 +232,7 @@ def runpybin(self, scriptname, *args):\n         else:\n             script = bindir.join(scriptname)\n         assert script.check()\n-        return self.run(script, *args)\n+        return self.run(py.std.sys.executable, script, *args)\n \n     def runpytest(self, *args):\n         p = py.path.local.make_numbered_dir(prefix=\"runpytest-\", "
    },
    {
        "commit_id": "6f93561002c451da469f09cef318122a27fedf07",
        "commit_message": "[svn r63020] allow to specify python executable in gatewayspecs, fix a few tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f93561002c451da469f09cef318122a27fedf07",
        "buggy_code": "if python is None:",
        "fixed_code": "if not python:",
        "patch": "@@ -76,7 +76,7 @@ def __init__(self, python=None):\n         \"\"\" instantiate a gateway to a subprocess \n             started with the given 'python' executable. \n         \"\"\"\n-        if python is None:\n+        if not python:\n             python = sys.executable\n         cmd = '%s -u -c \"exec input()\"' % python\n         super(PopenGateway, self).__init__(cmd)"
    },
    {
        "commit_id": "6f93561002c451da469f09cef318122a27fedf07",
        "commit_message": "[svn r63020] allow to specify python executable in gatewayspecs, fix a few tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f93561002c451da469f09cef318122a27fedf07",
        "buggy_code": "assert tw.fullwidth == os.environ.get('COLUMNS', 80)-1",
        "fixed_code": "assert tw.fullwidth == int(os.environ.get('COLUMNS', 80)) -1",
        "patch": "@@ -18,7 +18,7 @@ def test_terminalwriter_defaultwidth_80():\n     py.magic.patch(terminalwriter, '_getdimensions', lambda: 0/0)\n     try:\n         tw = py.io.TerminalWriter()  \n-        assert tw.fullwidth == os.environ.get('COLUMNS', 80)-1\n+        assert tw.fullwidth == int(os.environ.get('COLUMNS', 80)) -1\n     finally:         \n         py.magic.revert(terminalwriter, '_getdimensions')\n         "
    },
    {
        "commit_id": "6f93561002c451da469f09cef318122a27fedf07",
        "commit_message": "[svn r63020] allow to specify python executable in gatewayspecs, fix a few tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/6f93561002c451da469f09cef318122a27fedf07",
        "buggy_code": "\"--gateways=popen:%(dest)s\" % locals(), p)",
        "fixed_code": "\"--gateways=popen::%(dest)s\" % locals(), p)",
        "patch": "@@ -65,7 +65,7 @@ def test_distribution_rsyncdirs_example(self, testdir):\n         p = subdir.join(\"test_one.py\")\n         p.write(\"def test_5(): assert not __file__.startswith(%r)\" % str(p))\n         result = testdir.runpytest(\"-d\", \"--rsyncdirs=%(subdir)s\" % locals(), \n-                                   \"--gateways=popen:%(dest)s\" % locals(), p)\n+                                   \"--gateways=popen::%(dest)s\" % locals(), p)\n         assert result.ret == 0\n         result.stdout.fnmatch_lines([\n             \"*1 passed*\""
    },
    {
        "commit_id": "e1086ab7f9b4882ce170d542c412ae1bd1c25b7b",
        "commit_message": "[svn r62967] fix mock object\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e1086ab7f9b4882ce170d542c412ae1bd1c25b7b",
        "buggy_code": "def line(self, line):",
        "fixed_code": "def line(self, line, **kw):",
        "patch": "@@ -6,7 +6,7 @@ def __init__(self):\n         self.lines = []\n     def sep(self, sep, line=None):\n         self.lines.append((sep, line))\n-    def line(self, line):\n+    def line(self, line, **kw):\n         self.lines.append(line)\n     def markup(self, text, **kw):\n         return text"
    },
    {
        "commit_id": "e9f275b176b0f478514788947c880eb02e048a27",
        "commit_message": "[svn r62633] fix path bugs, don't feel like writing a test for this, currently.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e9f275b176b0f478514788947c880eb02e048a27",
        "buggy_code": "return Project(parent.dirpath())",
        "fixed_code": "return Project(parent)",
        "patch": "@@ -24,7 +24,7 @@ def getproject(path):\n         confrest = parent.join(\"confrest.py\")\n         if confrest.check():\n             Project = confrest.pyimport().Project\n-            return Project(parent.dirpath())\n+            return Project(parent)\n \n class ReSTFile(py.test.collect.File):\n     def __init__(self, fspath, parent, project=None):"
    },
    {
        "commit_id": "30149574c7352c28272c13f7b2fa9b44a4e53804",
        "commit_message": "[svn r62491] fix a typo\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/30149574c7352c28272c13f7b2fa9b44a4e53804",
        "buggy_code": "extra = \"-> \" + event.host.hostid",
        "fixed_code": "extra = \"-> \" + str(event.host)",
        "patch": "@@ -121,7 +121,7 @@ def pyevent_itemstart(self, event):\n             line = info.verboseline(basedir=self.curdir) + \" \"\n             extra = \"\"\n             if event.host:\n-                extra = \"-> \" + event.host.hostid\n+                extra = \"-> \" + str(event.host)\n             self.write_ensure_prefix(line, extra)\n         else:\n             # ensure that the path is printed before the 1st test of"
    },
    {
        "commit_id": "05f2d6441d5bf9bb054ac4e2c1e1d2069802ecbd",
        "commit_message": "[svn r58012] fix imports so that tests pass against pypy-dist\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/05f2d6441d5bf9bb054ac4e2c1e1d2069802ecbd",
        "buggy_code": "from py.__.test.dsession.web import exported_methods",
        "fixed_code": "from py.__.test.report.web import exported_methods",
        "patch": "@@ -3,7 +3,7 @@\n \"\"\"\n \n import py\n-from py.__.test.dsession.web import exported_methods\n+from py.__.test.report.web import exported_methods\n try:\n     from pypy.translator.js.modules import dom\n     from pypy.translator.js.helper import __show_traceback"
    },
    {
        "commit_id": "573daf741b7820d51d0620919d661e1b2671065a",
        "commit_message": "[svn r57979] fix 2.3 compat\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/573daf741b7820d51d0620919d661e1b2671065a",
        "buggy_code": "@property",
        "fixed_code": "fullsource = property(fullsource)",
        "patch": "@@ -325,9 +325,9 @@ class FakeCode(object):\n             path = '?'\n             firstlineno = 5\n \n-            @property\n             def fullsource(self):\n                 raise fail\n+            fullsource = property(fullsource)\n \n         class FakeFrame(object):\n             code = FakeCode()"
    },
    {
        "commit_id": "9eb1d55380ae7c25ffc600b65e348dca85f99221",
        "commit_message": "[svn r57762] * settle on using suptest for supporting test runs\n* fix a bug in getmodpath\n* remove redundant functions/files\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9eb1d55380ae7c25ffc600b65e348dca85f99221",
        "buggy_code": "from py.__.test.report.base import getrelpath, repr_pythonversion, getmodpath",
        "fixed_code": "from py.__.test.report.base import getrelpath, repr_pythonversion",
        "patch": "@@ -2,7 +2,7 @@\n import sys\n from py.__.test import event\n from py.__.test.report.base import BaseReporter\n-from py.__.test.report.base import getrelpath, repr_pythonversion, getmodpath\n+from py.__.test.report.base import getrelpath, repr_pythonversion\n \n class TerminalReporter(BaseReporter):\n     def __init__(self, config, file=None, bus=None):"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "return super(Directory, self).run()",
        "fixed_code": "return super(Directory, self).collect()",
        "patch": "@@ -5,4 +5,4 @@ def collect(self):\n         if os.name == 'nt':\n             py.test.skip(\"Cannot test green layer on windows\")\n         else:\n-            return super(Directory, self).run()\n+            return super(Directory, self).collect()"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green import greensock2",
        "fixed_code": "from pygreen import greensock2",
        "patch": "@@ -1,4 +1,4 @@\n-from py.__.green import greensock2\n+from pygreen import greensock2\n \n VERBOSE = True\n "
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green import greensock2",
        "fixed_code": "from pygreen import greensock2",
        "patch": "@@ -1,5 +1,5 @@\n import os\n-from py.__.green import greensock2\n+from pygreen import greensock2\n \n \n class FDInput(object):"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green import greensock2",
        "fixed_code": "from pygreen import greensock2",
        "patch": "@@ -1,4 +1,4 @@\n-from py.__.green import greensock2\n+from pygreen import greensock2\n import socket, errno, os\n \n error = socket.error"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green.pipe.common import BufferedInput",
        "fixed_code": "from pygreen.pipe.common import BufferedInput",
        "patch": "@@ -1,4 +1,4 @@\n-from py.__.green.pipe.common import BufferedInput\n+from pygreen.pipe.common import BufferedInput\n \n \n class MeetingPointInput(BufferedInput):"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green.greensock2 import *",
        "fixed_code": "from pygreen.greensock2 import *",
        "patch": "@@ -1,6 +1,6 @@\n import py\n from socket import *\n-from py.__.green.greensock2 import *\n+from pygreen.greensock2 import *\n \n def test_meetingpoint():\n     giv1, acc1 = meetingpoint()"
    },
    {
        "commit_id": "4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "commit_message": "[svn r57756] * create new contrib directory\n* move py/green to contrib/pygreen,\n  fix tests and code to pass\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4c38ff30ee426c1c6ceb4ea25a4a93751589c24d",
        "buggy_code": "from py.__.green.pipelayer import PipeLayer, pipe_over_udp, PipeOverUdp",
        "fixed_code": "from pygreen.pipelayer import PipeLayer, pipe_over_udp, PipeOverUdp",
        "patch": "@@ -1,5 +1,5 @@\n import os, random\n-from py.__.green.pipelayer import PipeLayer, pipe_over_udp, PipeOverUdp\n+from pygreen.pipelayer import PipeLayer, pipe_over_udp, PipeOverUdp\n \n def test_simple():\n     data1 = os.urandom(1000)"
    },
    {
        "commit_id": "d7f09cfc0a636ccb1d5b7b96e41033ef9d0ddae6",
        "commit_message": "[svn r57550] * fixing syntax error\n* removing setup.cfg\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/d7f09cfc0a636ccb1d5b7b96e41033ef9d0ddae6",
        "buggy_code": "from py.__.io.terminalwriter",
        "fixed_code": "from py.__.io.terminalwriter import ansi_print, terminal_width",
        "patch": "@@ -9,7 +9,7 @@\n \n import sys, os\n import py\n-from py.__.io.terminalwriter\n+from py.__.io.terminalwriter import ansi_print, terminal_width\n import re\n \n curdir = py.path.local()"
    },
    {
        "commit_id": "a8571daac848cebb7c1822d4028d955f4a943f1b",
        "commit_message": "[svn r57481] fix a few things, seems to work again.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a8571daac848cebb7c1822d4028d955f4a943f1b",
        "buggy_code": "self.channel.send(path.get(spec))",
        "fixed_code": "self.channel.send(path._getbyspec(spec))",
        "patch": "@@ -25,7 +25,7 @@ def command_DEL(self, id):\n \n     def command_GET(self, id, spec):\n         path = self.C2P[id]\n-        self.channel.send(path.get(spec))\n+        self.channel.send(path._getbyspec(spec))\n \n     def command_READ(self, id):\n         path = self.C2P[id]"
    },
    {
        "commit_id": "a8571daac848cebb7c1822d4028d955f4a943f1b",
        "commit_message": "[svn r57481] fix a few things, seems to work again.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a8571daac848cebb7c1822d4028d955f4a943f1b",
        "buggy_code": "def get(self, spec):",
        "fixed_code": "def _getbyspec(self, spec):",
        "patch": "@@ -33,7 +33,7 @@ def join(self, *args):\n         self._channel.send(('JOIN', self._id, id) + args)\n         return RemotePath(self._channel, id)\n \n-    def get(self, spec):\n+    def _getbyspec(self, spec):\n         parts = spec.split(',')\n         ask = [x for x in parts  if x not in self._specs]\n         if ask:"
    },
    {
        "commit_id": "353ce8d0ce1e7f295ead62866cbae4675d453928",
        "commit_message": "[svn r57480] fix changed namespace\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/353ce8d0ce1e7f295ead62866cbae4675d453928",
        "buggy_code": "channel = gw.channelfactory.new()",
        "fixed_code": "channel = gw._channelfactory.new()",
        "patch": "@@ -53,7 +53,7 @@ def serve(self):\n if __name__ == '__main__':\n     import py\n     gw = py.execnet.PopenGateway()\n-    channel = gw.channelfactory.new()\n+    channel = gw._channelfactory.new()\n     srv = PathServer(channel)\n     c = gw.remote_exec(\"\"\"\n         import remotepath"
    },
    {
        "commit_id": "353ce8d0ce1e7f295ead62866cbae4675d453928",
        "commit_message": "[svn r57480] fix changed namespace\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/353ce8d0ce1e7f295ead62866cbae4675d453928",
        "buggy_code": "subchannel = gw.channelfactory.new()",
        "fixed_code": "subchannel = gw._channelfactory.new()",
        "patch": "@@ -14,7 +14,7 @@\n #gw = py.execnet.SshGateway('codespeak.net')\n gw = py.execnet.PopenGateway()\n c = gw.remote_exec(SRC)\n-subchannel = gw.channelfactory.new()\n+subchannel = gw._channelfactory.new()\n c.send(subchannel)\n \n p = RemotePath(subchannel, c.receive())"
    },
    {
        "commit_id": "4fce886def18f6a1a584eb5b982ff015b270673c",
        "commit_message": "[svn r54623] A test for 54622\nFix for running tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/4fce886def18f6a1a584eb5b982ff015b270673c",
        "buggy_code": "if session.config.option.keyword_oneshot:",
        "fixed_code": "if session and session.config.option.keyword_oneshot:",
        "patch": "@@ -33,7 +33,7 @@ def itemgen(session, colitems, reporter, keyword=None):\n         if isinstance(next, stopitems):\n             try:\n                 next._skipbykeyword(keyword)\n-                if session.config.option.keyword_oneshot:\n+                if session and session.config.option.keyword_oneshot:\n                     keyword = None\n                 yield next\n             except Skipped:"
    },
    {
        "commit_id": "ba91810a1735627e99e877f5837ccb2d9d200bac",
        "commit_message": "[svn r51285] Fix _docgen.py documentation building.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/ba91810a1735627e99e877f5837ccb2d9d200bac",
        "buggy_code": "testargs + ' --forcegen --apigenrelpath=\"apigen/\"')",
        "fixed_code": "testargs + ' --forcegen --apigen=\"%s/apigen/apigen.py\"' % (pypath,))",
        "patch": "@@ -28,7 +28,7 @@ def build_apigen_docs(targetpath, testargs=''):\n def build_docs(targetpath, testargs):\n     docpath = pypath.join('doc')\n     run_tests(docpath, '',\n-              testargs + ' --forcegen --apigenrelpath=\"apigen/\"')\n+              testargs + ' --forcegen --apigen=\"%s/apigen/apigen.py\"' % (pypath,))\n     docpath.copy(targetpath)\n \n def build_nav(targetpath, docs=True, api=True):"
    },
    {
        "commit_id": "9ca5974f0a40eddf73e32cb64f27543fcbed5894",
        "commit_message": "[svn r50645] Fix for \"utestconvert.py < input\".\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/9ca5974f0a40eddf73e32cb64f27543fcbed5894",
        "buggy_code": "for block in blocksplitter(sys.stdin.read()):",
        "fixed_code": "for block in blocksplitter(sys.stdin):",
        "patch": "@@ -225,7 +225,7 @@ def select_output (option, opt, value, optparser, **kw):\n \n     if not args:\n         s = ''\n-        for block in blocksplitter(sys.stdin.read()):\n+        for block in blocksplitter(sys.stdin):\n             s += rewrite_utest(block)\n         sys.stdout.write(s)\n "
    },
    {
        "commit_id": "150a396f66558a8cb7fd41efcfa755d4d7610943",
        "commit_message": "[svn r49423] (naro) Fix for list.append() obviously, has no single test.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/150a396f66558a8cb7fd41efcfa755d4d7610943",
        "buggy_code": "args.append('-r', str(rev))",
        "fixed_code": "args.append('-r' + str(rev))",
        "patch": "@@ -118,7 +118,7 @@ def checkout(self, url=None, rev=None):\n             if svncommon._getsvnversion() == '1.3':\n                 url += \"@%d\" % rev\n             else:\n-                args.append('-r', str(rev))\n+                args.append('-r' + str(rev))\n         self._svn('co', url, *args)\n \n     def update(self, rev = 'HEAD'):"
    },
    {
        "commit_id": "aabae96514cc1ac5cfce0fbabef3c48ac9bb8497",
        "commit_message": "[svn r47277] Argh. Fix -d -x\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/aabae96514cc1ac5cfce0fbabef3c48ac9bb8497",
        "buggy_code": "return len(self.failed) > 0",
        "fixed_code": "return sum(self.failed.values()) > 0",
        "patch": "@@ -311,7 +311,7 @@ def report_Nodes(self, event):\n         self.nodes = event.nodes\n \n     def was_failure(self):\n-        return len(self.failed) > 0\n+        return sum(self.failed.values()) > 0\n \n class RemoteReporter(AbstractReporter):    \n     def get_item_name(self, event, colitem):"
    },
    {
        "commit_id": "8cbb41521c3f0289aa4cba225fe4ff085d7fe11f",
        "commit_message": "[svn r45295] Fix rsession tests\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/8cbb41521c3f0289aa4cba225fe4ff085d7fe11f",
        "buggy_code": "source = rpython2javascript(webjs, FUNCTION_LIST)",
        "fixed_code": "source = rpython2javascript(webjs, FUNCTION_LIST, use_pdb=False)",
        "patch": "@@ -24,7 +24,7 @@ def test_js_generate():\n     from py.__.test.rsession import webjs\n     from py.__.test.rsession.web import FUNCTION_LIST, IMPORTED_PYPY\n     \n-    source = rpython2javascript(webjs, FUNCTION_LIST)\n+    source = rpython2javascript(webjs, FUNCTION_LIST, use_pdb=False)\n     assert source\n \n def test_parse_args():"
    },
    {
        "commit_id": "da26d914c882f95fe2fd7a0cdc876d6383fbb12a",
        "commit_message": "[svn r39975] Fix imports\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da26d914c882f95fe2fd7a0cdc876d6383fbb12a",
        "buggy_code": "import greensock2",
        "fixed_code": "from py.__.net import greensock2",
        "patch": "@@ -1,4 +1,4 @@\n-import greensock2\n+from py.__.net import greensock2\n import socket, errno, os\n \n error = socket.error"
    },
    {
        "commit_id": "da26d914c882f95fe2fd7a0cdc876d6383fbb12a",
        "commit_message": "[svn r39975] Fix imports\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/da26d914c882f95fe2fd7a0cdc876d6383fbb12a",
        "buggy_code": "from pypeers.stream.common import BufferedInput",
        "fixed_code": "from py.__.net.pipe.common import BufferedInput",
        "patch": "@@ -1,4 +1,4 @@\n-from pypeers.stream.common import BufferedInput\n+from py.__.net.pipe.common import BufferedInput\n \n \n class MeetingPointInput(BufferedInput):"
    },
    {
        "commit_id": "2cd886f442284b81a34024e9ede8f48a63b3e6fa",
        "commit_message": "[svn r39340] A fix and a test. Thanks Marian Shubert for reporting problem\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/2cd886f442284b81a34024e9ede8f48a63b3e6fa",
        "buggy_code": "if isinstance(e, Failed):",
        "fixed_code": "if isinstance(e, Failed) and e.excinfo:",
        "patch": "@@ -40,7 +40,7 @@ def execute(self, capture=True):\n             raise\n         except:\n             e = sys.exc_info()[1]\n-            if isinstance(e, Failed):\n+            if isinstance(e, Failed) and e.excinfo:\n                 excinfo = e.excinfo\n             else:\n                 excinfo = py.code.ExceptionInfo()"
    },
    {
        "commit_id": "a3dd6dfd7cef344b44e3a3dcb176a81b40b7d236",
        "commit_message": "[svn r38755] fix reporting of duplicate remote host rsyncs\nand adding an XXX test (not easy to test ssh hosts\nbecause it modifies remote state)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a3dd6dfd7cef344b44e3a3dcb176a81b40b7d236",
        "buggy_code": "hostrepr, item.root)",
        "fixed_code": "hostrepr, item.remotepath)",
        "patch": "@@ -65,7 +65,7 @@ def report_HostRSyncing(self, item):\n                         hostrepr, item.remotepath)\n             else: \n                 print \"%15s: skip duplicate rsync to %r\" % (\n-                        hostrepr, item.root)\n+                        hostrepr, item.remotepath)\n         else:\n             print \"%15s: rsync %r to remote %r\" % (hostrepr, \n                                                    item.root.basename, "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "Function = py.test.Function",
        "fixed_code": "Function = py.test.collect.Function",
        "patch": "@@ -5,7 +5,7 @@\n Directory = py.test.collect.Directory\n Class = py.test.collect.Class\n Generator = py.test.collect.Generator\n-Function = py.test.Function\n+Function = py.test.collect.Function\n Instance = py.test.collect.Instance\n \n conf_iocapture = \"fd\" # overridable from conftest.py "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "class DoctestText(py.test.Item):",
        "fixed_code": "class DoctestText(py.test.collect.Item):",
        "patch": "@@ -1,6 +1,6 @@\n import py\n \n-class DoctestText(py.test.Item):\n+class DoctestText(py.test.collect.Item):\n \n     def _setcontent(self, content):\n         self._content = content "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "\"\"\" This method represents py.test.Item info (path and module)",
        "fixed_code": "\"\"\" This method represents py.test.collect.Item info (path and module)",
        "patch": "@@ -40,7 +40,7 @@ def repr_source(self, source, marker=\">\", marker_location=-1):\n             self.out.line(prefix + source[i])\n \n     def repr_item_info(self, item):\n-        \"\"\" This method represents py.test.Item info (path and module)\n+        \"\"\" This method represents py.test.collect.Item info (path and module)\n         \"\"\"\n         root = item.fspath \n         modpath = item._getmodpath() "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "class Item(py.test.Item):",
        "fixed_code": "class Item(py.test.collect.Item):",
        "patch": "@@ -12,7 +12,7 @@ def setup_module(mod):\n     if py.std.sys.platform == \"win32\":\n         py.test.skip(\"skipping executor tests (some require os.fork)\")\n \n-class Item(py.test.Item):\n+class Item(py.test.collect.Item):\n     def __init__(self, name, config):\n         super(Item, self).__init__(name)\n         self._config = config"
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "class Item(py.test.Item):",
        "fixed_code": "class Item(py.test.collect.Item):",
        "patch": "@@ -49,7 +49,7 @@ def send(self, item):\n     def _getremoteerror(self):\n         return \"blah\"\n \n-class Item(py.test.Item):\n+class Item(py.test.collect.Item):\n     def _get_collector_trail(self):\n         return (self.name,)\n "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "items = list(col._tryiter(py.test.Item))",
        "fixed_code": "items = list(col._tryiter(py.test.collect.Item))",
        "patch": "@@ -37,7 +37,7 @@ def test_collect_doctest_files_with_test_prefix():\n         #print \"checking that %s returns custom items\" % (x,) \n         config = py.test.config._reparse([x])\n         col = config._getcollector(x)\n-        items = list(col._tryiter(py.test.Item))\n+        items = list(col._tryiter(py.test.collect.Item))\n         assert len(items) == 1\n         assert isinstance(items[0], DoctestText)\n    "
    },
    {
        "commit_id": "3ab95e5672b3000c37b4af538893a77d72fcefba",
        "commit_message": "[svn r38747] hum, a last-minute namespace change: i missed\nthat fijal didn't move py.test.Item|Function to the py.test.collect namespace\nat the time.  a pypy fix will follow shortly after i merged the dist.\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/3ab95e5672b3000c37b4af538893a77d72fcefba",
        "buggy_code": "class Function(py.test.Function):",
        "fixed_code": "class Function(py.test.collect.Function):",
        "patch": "@@ -192,7 +192,7 @@ def test_capturing_error():\n         \"\"\"))\n         conftest = o.join('conftest.py').write(py.code.Source(\"\"\"\n             import py\n-            class Function(py.test.Function): \n+            class Function(py.test.collect.Function): \n                 def startcapture(self): \n                     self._mycapture = None\n                     "
    },
    {
        "commit_id": "a07cceca9f3eeec315b67bbc80a1daa9dffd3939",
        "commit_message": "[svn r38621] * fix for linking problems: move future.txt one level up\n* be slightly more defensive about apigen_relpath\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/a07cceca9f3eeec315b67bbc80a1daa9dffd3939",
        "buggy_code": "return py.test.config.option.apigen_relpath + \"/\"",
        "fixed_code": "return py.test.config.option.apigen_relpath.rstrip('\\/') + \"/\"",
        "patch": "@@ -21,7 +21,7 @@\n ) \n \n def get_apigen_relpath():\n-    return py.test.config.option.apigen_relpath + \"/\"\n+    return py.test.config.option.apigen_relpath.rstrip('\\/') + \"/\"\n \n def deindent(s, sep='\\n'):\n     leastspaces = -1"
    },
    {
        "commit_id": "479aa2e03f34709aabdd9effbffe135709961a99",
        "commit_message": "[svn r38197] slight reporting fix\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/479aa2e03f34709aabdd9effbffe135709961a99",
        "buggy_code": "reporter(repevent.HostRSyncing(host, self._sourcedir,",
        "fixed_code": "reporter(repevent.HostRSyncing(host, py.path.local(self._sourcedir),",
        "patch": "@@ -95,7 +95,7 @@ def add_target_host(self, host, destrelpath=\"\", reporter=lambda x: None):\n         if host.hostname == \"localhost\" and remotepath == self._sourcedir:\n             self._synced[key] = True\n         synced = key in self._synced \n-        reporter(repevent.HostRSyncing(host, self._sourcedir, \n+        reporter(repevent.HostRSyncing(host, py.path.local(self._sourcedir), \n                                        remotepath, synced))\n         def hostrsynced(host=host):\n             reporter(repevent.HostRSyncRootReady(host, self._sourcedir))"
    },
    {
        "commit_id": "479aa2e03f34709aabdd9effbffe135709961a99",
        "commit_message": "[svn r38197] slight reporting fix\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/479aa2e03f34709aabdd9effbffe135709961a99",
        "buggy_code": "hostrepr, str(item.root))",
        "fixed_code": "hostrepr, item.root)",
        "patch": "@@ -65,7 +65,7 @@ def report_HostRSyncing(self, item):\n                         hostrepr, item.remotepath)\n             else: \n                 print \"%15s: skip duplicate rsync to %r\" % (\n-                        hostrepr, str(item.root))\n+                        hostrepr, item.root)\n         else:\n             print \"%15s: rsync %r to remote %r\" % (hostrepr, \n                                                    item.root.basename, "
    },
    {
        "commit_id": "c18ab8fd7e6575b5385a956cd06cdfda0a38bb4c",
        "commit_message": "[svn r38175] Fix\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/c18ab8fd7e6575b5385a956cd06cdfda0a38bb4c",
        "buggy_code": "rsync.send_if_targets()",
        "fixed_code": "rsync.send(raises=False)",
        "patch": "@@ -143,7 +143,7 @@ def donecallback(host, root):\n                     host, reporter, destrelpath, finishedcallback=\n                     lambda host=host, root=root: donecallback(host, root))\n                 reporter(repevent.HostRSyncing(host, root, remotepath))\n-            rsync.send_if_targets()\n+            rsync.send(raises=False)\n \n     def setup_hosts(self, reporter):\n         self.init_rsync(reporter)"
    },
    {
        "commit_id": "0fb86b2b906df268c83ed8c7d581fb89c6a62f45",
        "commit_message": "[svn r38074] fix typo\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/0fb86b2b906df268c83ed8c7d581fb89c6a62f45",
        "buggy_code": "assert len(l), 1",
        "fixed_code": "assert len(l)",
        "patch": "@@ -135,7 +135,7 @@ def test_listdir(self):\n \n     def test_listdir_fnmatchstring(self):\n         l = self.root.listdir('s*dir')\n-        assert len(l), 1\n+        assert len(l)\n         assert l[0], self.root.join('sampledir')\n \n     def test_listdir_filter(self):"
    },
    {
        "commit_id": "63bbe18a7e85c12aeffbcba2388934fef83b8f26",
        "commit_message": "[svn r38025] Fix a bit web reporter (still not perfect)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/63bbe18a7e85c12aeffbcba2388934fef83b8f26",
        "buggy_code": "elif msg['type'] == 'HostReady':",
        "fixed_code": "elif msg['type'] == 'HostRSyncRootReady':",
        "patch": "@@ -185,7 +185,7 @@ def process(msg):\n         host_elem.childNodes[0].nodeValue = '%s[%s]' % (\n                             glob.host_dict[msg['hostkey']], count)\n         \n-    elif msg['type'] == 'HostReady':\n+    elif msg['type'] == 'HostRSyncRootReady':\n         host_elem = dom.document.getElementById(msg['hostkey'])\n         host_elem.style.background = \\\n             \"#00ff00\""
    },
    {
        "commit_id": "99661844dd7aeae793faac157081ef08b1c120a8",
        "commit_message": "[svn r37948] fix for win32\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/99661844dd7aeae793faac157081ef08b1c120a8",
        "buggy_code": "homedir = py.path.local(py.std.os.environ['HOME'])",
        "fixed_code": "homedir = py.path.local._gethomedir()",
        "patch": "@@ -43,7 +43,7 @@ def test_initgateway_localhost_relpath(self):\n         x.initgateway()\n         assert x.gw\n         try:\n-            homedir = py.path.local(py.std.os.environ['HOME'])\n+            homedir = py.path.local._gethomedir() \n             expected = homedir.join(name) \n             assert x.gw_remotepath == str(expected)\n             assert x.localdest == expected "
    },
    {
        "commit_id": "e0a1612d51f6e79a8f9879cd890af96199eea5b3",
        "commit_message": "[svn r37824] fix typo\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/e0a1612d51f6e79a8f9879cd890af96199eea5b3",
        "buggy_code": "\"\"\" instantiate a gateway to a processed accessed",
        "fixed_code": "\"\"\" instantiate a gateway to a process accessed",
        "patch": "@@ -86,7 +86,7 @@ class SocketGateway(InstallableGateway):\n         SocketGateway connections. \n     \"\"\"\n     def __init__(self, host, port):\n-        \"\"\" instantiate a gateway to a processed accessed\n+        \"\"\" instantiate a gateway to a process accessed\n             via a host/port specified socket. \n         \"\"\"\n         self.host = host = str(host)"
    },
    {
        "commit_id": "f21df1b45541de95958f594a9fa68d50d35c31c8",
        "commit_message": "[svn r37751] fix two other places that used capturing\n(although the greenlet fix is not really\nrelated, but i first saw it now on win32)\n\n--HG--\nbranch : trunk",
        "commit_url": "https://github.com/pytest-dev/pytest/commit/f21df1b45541de95958f594a9fa68d50d35c31c8",
        "buggy_code": "except RuntimeError, e:",
        "fixed_code": "except (ImportError, RuntimeError), e:",
        "patch": "@@ -1,7 +1,7 @@\n import py\n try:\n     from py.magic import greenlet\n-except RuntimeError, e:\n+except (ImportError, RuntimeError), e:\n     py.test.skip(str(e))\n \n "
    }
]