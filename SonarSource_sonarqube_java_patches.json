[
    {
        "commit_id": "3f12a5dd5f24a0bb7d86b58d98ec4182c0908f32",
        "commit_message": "SGB-312 Fix MigratePortfoliosLiveMeasuresToMeasuresIT test failures",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3f12a5dd5f24a0bb7d86b58d98ec4182c0908f32",
        "buggy_code": "\"json_value_hash\", \"1234\",",
        "fixed_code": "\"json_value_hash\", 1234,",
        "patch": "@@ -282,7 +282,7 @@ private void insertMigratedMeasure(String branch, String componentUuid) {\n       \"component_uuid\", componentUuid,\n       \"branch_uuid\", branch,\n       \"json_value\", \"{\\\"any\\\":\\\"thing\\\"}\",\n-      \"json_value_hash\", \"1234\",\n+      \"json_value_hash\", 1234,\n       \"created_at\", 12,\n       \"updated_at\", 12);\n   }"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import java.sql.SQLException;\n import org.junit.jupiter.api.Test;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import java.sql.SQLException;\n import org.junit.jupiter.api.Test;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import java.sql.SQLException;\n import org.sonar.db.Database;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import java.sql.SQLException;\n import org.sonar.db.Database;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import java.sql.Connection;\n import java.sql.SQLException;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import org.sonar.db.Database;\n import org.sonar.server.platform.db.migration.step.DropIndexChange;"
    },
    {
        "commit_id": "3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "commit_message": "SCA-125 fix migration numbers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3cb54cd0f2ce1d6fb2dc0bc6f156809aae98c490",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v202503;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v202502;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v202503;\n+package org.sonar.server.platform.db.migration.version.v202502;\n \n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;"
    },
    {
        "commit_id": "fa177566668e6d98c7cae8ba588983d03bc5415a",
        "commit_message": "SONAR-24605 Fix quality gate issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa177566668e6d98c7cae8ba588983d03bc5415a",
        "buggy_code": "internalProperties.write(I_PROP_LAST_PING, String.valueOf(now));",
        "fixed_code": "writeLastPing(now);",
        "patch": "@@ -136,7 +136,7 @@ private Runnable telemetryCommand() {\n   }\n \n   private void updateTelemetryProps(long now) {\n-    internalProperties.write(I_PROP_LAST_PING, String.valueOf(now));\n+    writeLastPing(now);\n \n     Optional<String> currentSequence = internalProperties.read(I_PROP_MESSAGE_SEQUENCE);\n     if (currentSequence.isEmpty()) {"
    },
    {
        "commit_id": "6c4b2ac4963116291355c9b08d5470063a159fb1",
        "commit_message": "SONAR-24578 Fix flaky test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6c4b2ac4963116291355c9b08d5470063a159fb1",
        "buggy_code": "verify(internalProperties, timeout(4_000)).write(\"telemetry.lastPing\", String.valueOf(today));",
        "fixed_code": "verify(internalProperties, timeout(4_000).atLeastOnce()).write(\"telemetry.lastPing\", String.valueOf(today));",
        "patch": "@@ -140,7 +140,7 @@ void start_whenExceptionThrown_shouldNotRepeatedlySendDataAndLastPingPropIsStill\n     underTest.start();\n \n     verify(client, after(2_000).never()).upload(anyString());\n-    verify(internalProperties, timeout(4_000)).write(\"telemetry.lastPing\", String.valueOf(today));\n+    verify(internalProperties, timeout(4_000).atLeastOnce()).write(\"telemetry.lastPing\", String.valueOf(today));\n   }\n \n   @Test"
    },
    {
        "commit_id": "cfbf8f422492b50cf789680013c2dcbda9cc043c",
        "commit_message": "SGB-298 Fix IT on PostgreSQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfbf8f422492b50cf789680013c2dcbda9cc043c",
        "buggy_code": "\"json_value_hash\", \"1234\",",
        "fixed_code": "\"json_value_hash\", 1234,",
        "patch": "@@ -427,7 +427,7 @@ private void insertMigratedMeasure(String branch, String componentUuid) {\n       \"component_uuid\", componentUuid,\n       \"branch_uuid\", branch,\n       \"json_value\", \"{\\\"any\\\":\\\"thing\\\"}\",\n-      \"json_value_hash\", \"1234\",\n+      \"json_value_hash\", 1234,\n       \"created_at\", 12,\n       \"updated_at\", 12);\n   }"
    },
    {
        "commit_id": "4f7051b278ab5649241ed742bc1fe1bfddf9e355",
        "commit_message": "SQRP-272 Fix negative duration metric",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4f7051b278ab5649241ed742bc1fe1bfddf9e355",
        "buggy_code": "telemetryCache.put(\"scanner.sca.execution.cli.duration\", String.valueOf(startTime - system2.now()));",
        "fixed_code": "telemetryCache.put(\"scanner.sca.execution.cli.duration\", String.valueOf(system2.now() - startTime));",
        "patch": "@@ -79,7 +79,7 @@ public File generateManifestsZip(DefaultInputModule module, File cliExecutable)\n       success = true;\n       return zipPath.toFile();\n     } finally {\n-      telemetryCache.put(\"scanner.sca.execution.cli.duration\", String.valueOf(startTime - system2.now()));\n+      telemetryCache.put(\"scanner.sca.execution.cli.duration\", String.valueOf(system2.now() - startTime));\n       telemetryCache.put(\"scanner.sca.execution.cli.success\", String.valueOf(success));\n     }\n   }"
    },
    {
        "commit_id": "950207ef015888e6167be672c06a9f3a51fc87ba",
        "commit_message": "SONAR-23111 fixed the issue where logs were not downloaded when SonarQube was deployed with web context",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/950207ef015888e6167be672c06a9f3a51fc87ba",
        "buggy_code": "when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", 9000)));",
        "fixed_code": "when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", \"\", 9000)));",
        "patch": "@@ -86,7 +86,7 @@ public void before() throws InterruptedException, IOException {\n \n     DistributedAnswer<Object> answer = mock();\n     when(hazelcastMember.call(any(), any(), anyLong())).thenReturn(answer);\n-    when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", 9000)));\n+    when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", \"\", 9000)));\n     when(hazelcastMember.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));\n     when(member1.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000001\"));\n     when(member2.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000002\"));"
    },
    {
        "commit_id": "950207ef015888e6167be672c06a9f3a51fc87ba",
        "commit_message": "SONAR-23111 fixed the issue where logs were not downloaded when SonarQube was deployed with web context",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/950207ef015888e6167be672c06a9f3a51fc87ba",
        "buggy_code": "when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", 9000)));",
        "fixed_code": "when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", \"/any\", 9000)));",
        "patch": "@@ -118,7 +118,7 @@ public void before() throws InterruptedException, IOException {\n     when(cluster.getMembers()).thenReturn(members);\n     when(configuration.get(ProcessProperties.Property.WEB_HOST.getKey())).thenReturn(Optional.of(\"anyhost\"));\n     when(hazelcastMember.call(any(), any(), anyLong())).thenReturn(answer);\n-    when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", 9000)));\n+    when(answer.getSingleAnswer()).thenReturn(Optional.of(new DistributedServerLogging.WebAddress(\"anyhost\", \"/any\", 9000)));\n     when(hazelcastMember.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000001\"));\n     when(member1.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000002\"));\n     when(member2.getUuid()).thenReturn(UUID.fromString(\"00000000-0000-0000-0000-000000000003\"));"
    },
    {
        "commit_id": "157e00ce92a383048ce48cc76e10731064129b86",
        "commit_message": "SONAR-24300 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157e00ce92a383048ce48cc76e10731064129b86",
        "buggy_code": "private void insertAdditionalIssueData(IssueDao issueDao, DbSession dbSession, IssueDto issueDto) {",
        "fixed_code": "private static void insertAdditionalIssueData(IssueDao issueDao, DbSession dbSession, IssueDto issueDto) {",
        "patch": "@@ -149,7 +149,7 @@ private void persistNewIssues(IssueStatistics statistics, List<DefaultIssue> add\n     issueDtos.forEach(issueDto -> insertAdditionalIssueData(issueDao, dbSession, issueDto));\n   }\n \n-  private void insertAdditionalIssueData(IssueDao issueDao, DbSession dbSession, IssueDto issueDto) {\n+  private static void insertAdditionalIssueData(IssueDao issueDao, DbSession dbSession, IssueDto issueDto) {\n     issueDao.insertIssueImpacts(dbSession, issueDto);\n   }\n "
    },
    {
        "commit_id": "7233fccd87550601b48591166795c382073f782b",
        "commit_message": "SONAR-24166 Fix flaky TelemetryDaemonTest.start_shouldCheckIfDataSentPeriodically",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7233fccd87550601b48591166795c382073f782b",
        "buggy_code": "verify(dataJsonWriter).writeTelemetryData(any(JsonWriter.class), same(SOME_TELEMETRY_DATA));",
        "fixed_code": "verify(dataJsonWriter, timeout(2_000)).writeTelemetryData(any(JsonWriter.class), same(SOME_TELEMETRY_DATA));",
        "patch": "@@ -131,8 +131,8 @@ void start_shouldCheckIfDataSentPeriodically() throws IOException {\n \n     internalProperties.write(\"telemetry.lastPing\", String.valueOf(oneDayAgo));\n \n+    verify(dataJsonWriter, timeout(2_000)).writeTelemetryData(any(JsonWriter.class), same(SOME_TELEMETRY_DATA));\n     verify(client, timeout(2_000)).upload(anyString());\n-    verify(dataJsonWriter).writeTelemetryData(any(JsonWriter.class), same(SOME_TELEMETRY_DATA));\n   }\n \n   @Test"
    },
    {
        "commit_id": "baf3f9fdc2dec8ab15c7e3527a1149e23dc8747e",
        "commit_message": "SONAR-23944 Do not throw error is contains_ai_code is missing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baf3f9fdc2dec8ab15c7e3527a1149e23dc8747e",
        "buggy_code": "if (metrics.size() < metricKeys.size()) {",
        "fixed_code": "if (metrics.size() < metricKeys.stream().filter(key -> !key.equals(\"contains_ai_code\")).count()) {",
        "patch": "@@ -556,7 +556,7 @@ private List<ComponentDto> searchComponents(DbSession dbSession, ComponentTreeQu\n \n   private List<MetricDto> searchMetrics(DbSession dbSession, Set<String> metricKeys) {\n     List<MetricDto> metrics = dbClient.metricDao().selectByKeys(dbSession, metricKeys);\n-    if (metrics.size() < metricKeys.size()) {\n+    if (metrics.size() < metricKeys.stream().filter(key -> !key.equals(\"contains_ai_code\")).count()) {\n       List<String> foundMetricKeys = Lists.transform(metrics, MetricDto::getKey);\n       Set<String> missingMetricKeys = Sets.difference(\n         new LinkedHashSet<>(metricKeys),"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -53,7 +53,7 @@\n import org.sonar.auth.github.GithubBinding.GsonRepositorySearch;\n import org.sonar.auth.github.GsonRepositoryCollaborator;\n import org.sonar.auth.github.GsonRepositoryTeam;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.auth.github.security.AccessToken;\n import org.sonar.auth.github.security.UserAccessToken;\n import org.sonar.server.exceptions.ServerException;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.config.internal.Settings;\n import org.sonar.api.server.ServerSide;\n import org.sonar.auth.github.GithubAppConfiguration;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.db.alm.setting.AlmSettingDto;\n \n import static org.apache.commons.lang3.StringUtils.isBlank;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -24,7 +24,7 @@\n import java.util.Optional;\n import org.sonar.auth.github.GithubAppConfiguration;\n import org.sonar.auth.github.GithubAppInstallation;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.auth.github.GithubBinding.Permissions;\n import org.sonar.api.ce.ComputeEngineSide;\n import org.sonar.api.server.ServerSide;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -53,7 +53,7 @@\n import org.sonar.auth.github.GsonRepositoryCollaborator;\n import org.sonar.auth.github.GsonRepositoryPermissions;\n import org.sonar.auth.github.GsonRepositoryTeam;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.auth.github.security.AccessToken;\n import org.sonar.auth.github.security.UserAccessToken;\n import org.sonarqube.ws.client.HttpException;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -29,7 +29,7 @@\n import org.mockito.junit.MockitoJUnitRunner;\n import org.sonar.auth.github.GithubAppConfiguration;\n import org.sonar.auth.github.GithubAppInstallation;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.auth.github.GithubBinding.GsonApp;\n import org.sonar.auth.github.GithubBinding.Permissions;\n import org.sonar.auth.github.GitHubSettings;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import static org.sonar.auth.github.client.GithubApplicationClient.Repository;",
        "fixed_code": "import static org.sonar.auth.github.GithubApplicationClient.Repository;",
        "patch": "@@ -24,7 +24,7 @@\n import javax.annotation.CheckForNull;\n import javax.annotation.Nullable;\n \n-import static org.sonar.auth.github.client.GithubApplicationClient.Repository;\n+import static org.sonar.auth.github.GithubApplicationClient.Repository;\n \n public class GithubBinding {\n "
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.common.almsettings.github;\n \n import org.sonar.api.server.ServerSide;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.auth.github.security.AccessToken;\n import org.sonar.auth.github.security.UserAccessToken;\n import org.sonar.db.DbClient;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.auth.github.GsonRepositoryCollaborator;\n import org.sonar.auth.github.GsonRepositoryPermissions;\n import org.sonar.auth.github.GsonRepositoryTeam;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.db.DbClient;\n import org.sonar.db.provisioning.DevOpsPermissionsMappingDto;\n import org.sonar.db.user.GroupDto;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.auth.github.AppInstallationToken;\n import org.sonar.auth.github.GitHubSettings;\n import org.sonar.auth.github.GithubAppConfiguration;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.alm.setting.ALM;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.auth.github.AppInstallationToken;\n import org.sonar.auth.github.ExpiringAppInstallationToken;\n import org.sonar.auth.github.GitHubSettings;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.alm.pat.AlmPatDto;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -35,7 +35,7 @@\n import org.sonar.auth.github.GsonRepositoryCollaborator;\n import org.sonar.auth.github.GsonRepositoryPermissions;\n import org.sonar.auth.github.GsonRepositoryTeam;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.db.DbClient;\n import org.sonar.db.alm.setting.ALM;\n import org.sonar.db.alm.setting.AlmSettingDto;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.auth.github.GitHubSettings;\n import org.sonar.auth.github.GsonRepositoryCollaborator;\n import org.sonar.auth.github.GsonRepositoryPermissions;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.core.i18n.I18n;\n import org.sonar.core.platform.EditionProvider;\n import org.sonar.core.platform.PlatformEditionProvider;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -24,7 +24,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.alm.client.github.GithubApplicationClientImpl;\n import org.sonar.auth.github.security.UserAccessToken;\n import org.sonar.api.config.internal.Encryption;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.stream.Stream;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.alm.client.github.GithubApplicationClientImpl;\n import org.sonar.api.utils.System2;\n import org.sonar.db.DbTester;"
    },
    {
        "commit_id": "928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "commit_message": "SONAR-24091 Fix quality gate on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928e495ba84502a6b95a1bd64ae725f94de89bb6",
        "buggy_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.GithubApplicationClient;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.alm.client.github.GithubGlobalSettingsValidator;\n import org.sonar.api.utils.System2;\n import org.sonar.auth.github.GitHubSettings;\n-import org.sonar.auth.github.client.GithubApplicationClient;\n+import org.sonar.auth.github.GithubApplicationClient;\n import org.sonar.ce.queue.CeQueue;\n import org.sonar.ce.queue.CeQueueImpl;\n import org.sonar.ce.queue.CeTaskSubmit;"
    },
    {
        "commit_id": "5c4ea71c1b02c1765c613eeb8582cd36de69804d",
        "commit_message": "SONAR-24082 Fix quality gate status",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c4ea71c1b02c1765c613eeb8582cd36de69804d",
        "buggy_code": "public class RegisterServletFiltersTest {",
        "fixed_code": "class RegisterServletFiltersTest {",
        "patch": "@@ -27,7 +27,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n \n-public class RegisterServletFiltersTest {\n+class RegisterServletFiltersTest {\n   @Test\n   void should_not_fail_if_master_filter_is_not_up() {\n     MasterServletFilter.setInstance(null);"
    },
    {
        "commit_id": "c770ccb9dfb7e1e023cb7e63bb76c8ab1002f27e",
        "commit_message": "SONAR-24024 Fix diagnostic tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c770ccb9dfb7e1e023cb7e63bb76c8ab1002f27e",
        "buggy_code": "private static List<String> generateMissingMappingMessages( Map<String, String> mappings, Saml2AuthenticatedPrincipal principal) {",
        "fixed_code": "private static List<String> generateMissingMappingMessages(Map<String, String> mappings, Saml2AuthenticatedPrincipal principal) {",
        "patch": "@@ -112,7 +112,7 @@ private static List<String> generateMappingErrors(Saml2AuthenticatedPrincipal pr\n     return mappingErrors;\n   }\n \n-  private static List<String> generateMissingMappingMessages( Map<String, String> mappings, Saml2AuthenticatedPrincipal principal) {\n+  private static List<String> generateMissingMappingMessages(Map<String, String> mappings, Saml2AuthenticatedPrincipal principal) {\n     return mappings.entrySet()\n       .stream()\n       .filter(entry -> !entry.getValue().isEmpty() && (principal.getAttribute(entry.getValue()) == null || principal.getAttribute(entry.getValue()).isEmpty()))"
    },
    {
        "commit_id": "15c484a407483be8a9f7ec7725cc72d2b3ddd274",
        "commit_message": "NO JIRA fix quality gate status.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/15c484a407483be8a9f7ec7725cc72d2b3ddd274",
        "buggy_code": "org.sonar.api.issue.impact.Severity impactSeverity = ImpactMapper.getBestImpactForBackmapping(rule.getDefaultImpacts()).getValue();",
        "fixed_code": "Severity impactSeverity = ImpactMapper.getBestImpactForBackmapping(rule.getDefaultImpacts()).getValue();",
        "patch": "@@ -392,7 +392,7 @@ private static String determineDeprecatedSeverity(ScannerReport.ExternalIssue re\n       } else if (rule.getSeverity() != null) {\n         return rule.getSeverity();\n       } else if (!rule.getDefaultImpacts().isEmpty()) {\n-        org.sonar.api.issue.impact.Severity impactSeverity = ImpactMapper.getBestImpactForBackmapping(rule.getDefaultImpacts()).getValue();\n+        Severity impactSeverity = ImpactMapper.getBestImpactForBackmapping(rule.getDefaultImpacts()).getValue();\n         return ImpactMapper.convertToDeprecatedSeverity(impactSeverity);\n       } else {\n         throw new IllegalArgumentException(\"Cannot determine the severity for issue of rule %s\".formatted(reportExternalIssue.getRuleId()));"
    },
    {
        "commit_id": "827296fce978e766332fc0e7527da42032d877fb",
        "commit_message": "SONAR-22471 issue search API should search all descendants for components parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/827296fce978e766332fc0e7527da42032d877fb",
        "buggy_code": "assertThatSearchReturnsOnly(IssueQuery.builder().directories(singletonList(\"/\")), \"I2\");",
        "fixed_code": "assertThatSearchReturnsOnly(IssueQuery.builder().directories(singletonList(\"/\")), \"I1\", \"I2\");",
        "patch": "@@ -139,7 +139,7 @@ void filter_by_directories() {\n       newDoc(\"I2\", project.uuid(), file2).setDirectoryPath(\"/\"));\n \n     assertThatSearchReturnsOnly(IssueQuery.builder().directories(singletonList(\"/src/main/xoo\")), \"I1\");\n-    assertThatSearchReturnsOnly(IssueQuery.builder().directories(singletonList(\"/\")), \"I2\");\n+    assertThatSearchReturnsOnly(IssueQuery.builder().directories(singletonList(\"/\")), \"I1\", \"I2\");\n     assertThatSearchReturnsEmpty(IssueQuery.builder().directories(singletonList(\"unknown\")));\n   }\n "
    },
    {
        "commit_id": "827296fce978e766332fc0e7527da42032d877fb",
        "commit_message": "SONAR-22471 issue search API should search all descendants for components parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/827296fce978e766332fc0e7527da42032d877fb",
        "buggy_code": ".assertJson(this.getClass(), \"no_issue.json\");",
        "fixed_code": ".assertJson(this.getClass(), \"search_by_file_uuid.json\");",
        "patch": "@@ -252,7 +252,7 @@ void search_by_directory_path() {\n     ws.newRequest()\n       .setParam(PARAM_DIRECTORIES, \"src/main/java\")\n       .execute()\n-      .assertJson(this.getClass(), \"no_issue.json\");\n+      .assertJson(this.getClass(), \"search_by_file_uuid.json\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "745818998a1d73e9f50caacea56d89f6e0f01bb6",
        "commit_message": "SONAR-23432 Fix failing tests on Windows in scanner-engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/745818998a1d73e9f50caacea56d89f6e0f01bb6",
        "buggy_code": "LOG.debug(\"'{}' indexed {}{}\", projectRelativePath, type == Type.TEST ? \"as test \" : \"\", langStr);",
        "fixed_code": "LOG.debug(\"'{}' indexed {}{}\", inputFile, type == Type.TEST ? \"as test \" : \"\", langStr);",
        "patch": "@@ -118,7 +118,7 @@ void indexFile(DefaultInputModule module, ModuleCoverageAndDuplicationExclusions\n     issueExclusionsLoader.addMulticriteriaPatterns(inputFile);\n     String langStr = inputFile.language() != null ? format(\"with language '%s'\", inputFile.language()) : \"with no language\";\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"'{}' indexed {}{}\", projectRelativePath, type == Type.TEST ? \"as test \" : \"\", langStr);\n+      LOG.debug(\"'{}' indexed {}{}\", inputFile, type == Type.TEST ? \"as test \" : \"\", langStr);\n     }\n     evaluateCoverageExclusions(moduleCoverageAndDuplicationExclusions, inputFile);\n     evaluateDuplicationExclusions(moduleCoverageAndDuplicationExclusions, inputFile);"
    },
    {
        "commit_id": "00091f1badff7a94fbec1642d4103671fa844d1a",
        "commit_message": "SGB-224 Fix MigrateAiSuggestionEnabledValuesTest failing with all the DB vendors (#12331)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/00091f1badff7a94fbec1642d4103671fa844d1a",
        "buggy_code": "\"is_empty\", \"false\",",
        "fixed_code": "\"is_empty\", false,",
        "patch": "@@ -96,7 +96,7 @@ private void insertProjects() {\n   private void addAISuggestionEnabledProperty(boolean enabled) {\n     db.executeInsert(\"properties\",\n       \"prop_key\", AI_CODEFIX_ENABLED_PROP_KEY,\n-      \"is_empty\", \"false\",\n+      \"is_empty\", false,\n       \"uuid\", \"uuid2\",\n       \"text_value\", enabled,\n       \"created_at\", 1L);"
    },
    {
        "commit_id": "60d28c06f872cfa30bd2399a977dfbc02063079d",
        "commit_message": "SONAR-23287 add issue changed event and bulk action changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/60d28c06f872cfa30bd2399a977dfbc02063079d",
        "buggy_code": "verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any());",
        "fixed_code": "verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any(), any());",
        "patch": "@@ -127,7 +127,7 @@ public void do_transition() {\n \n     verify(responseWriter).write(eq(issue.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     verifyContentOfPreloadedSearchResponseData(issue);\n-    verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any());\n+    verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any(), any());\n     IssueDto issueReloaded = db.getDbClient().issueDao().selectByKey(db.getSession(), issue.getKey()).get();\n     assertThat(issueReloaded.getStatus()).isEqualTo(STATUS_CONFIRMED);\n     assertThat(issueChangePostProcessor.calledComponents()).containsExactlyInAnyOrder(file);"
    },
    {
        "commit_id": "82ba1f6654402ade21476396ea717f07f31a67bd",
        "commit_message": "NO-JIRA Fix quality issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82ba1f6654402ade21476396ea717f07f31a67bd",
        "buggy_code": "import static org.junit.Assert.fail;",
        "fixed_code": "import static org.assertj.core.api.Assertions.fail;",
        "patch": "@@ -27,7 +27,7 @@\n import java.util.Objects;\n import java.util.Set;\n \n-import static org.junit.Assert.fail;\n+import static org.assertj.core.api.Assertions.fail;\n import static org.sonar.test.JsonAssert.assertJson;\n \n /**"
    },
    {
        "commit_id": "aff39a4a01010cd4e6425ecd6f17146dd3274f89",
        "commit_message": "SONAR-23258 fix bug with custom rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aff39a4a01010cd4e6425ecd6f17146dd3274f89",
        "buggy_code": "return db.ruleDao().selectByKeys(dbSession, ruleCreator.create(dbSession, customRulesToCreate).stream().map(RuleDto::getKey).toList())",
        "fixed_code": "return db.ruleDao().selectByKeys(dbSession, ruleCreator.restore(dbSession, customRulesToCreate).stream().map(RuleDto::getKey).toList())",
        "patch": "@@ -204,7 +204,7 @@ private Map<RuleKey, RuleDto> createCustomRulesIfNotExist(DbSession dbSession, L\n       .toList();\n \n     if (!customRulesToCreate.isEmpty()) {\n-      return db.ruleDao().selectByKeys(dbSession, ruleCreator.create(dbSession, customRulesToCreate).stream().map(RuleDto::getKey).toList())\n+      return db.ruleDao().selectByKeys(dbSession, ruleCreator.restore(dbSession, customRulesToCreate).stream().map(RuleDto::getKey).toList())\n         .stream()\n         .collect(Collectors.toMap(RuleDto::getKey, identity()));\n     }"
    },
    {
        "commit_id": "52ce30d1fffd1383ee05b4833f34ab6a5bdfa711",
        "commit_message": "SONAR-23250 Fix issues raised by the scan",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/52ce30d1fffd1383ee05b4833f34ab6a5bdfa711",
        "buggy_code": "String ruleKey = secure().randomAlphanumeric(5);",
        "fixed_code": "String ruleKey = secure().nextAlphanumeric(5);",
        "patch": "@@ -275,7 +275,7 @@ private void verifyRule(RuleDto rule, RuleType type, String expectedSeverity) {\n \n   @Test\n   void insert_then_remove_rule() {\n-    String ruleKey = secure().randomAlphanumeric(5);\n+    String ruleKey = secure().nextAlphanumeric(5);\n \n     // register one rule\n     executeWithPluginRules(context -> {"
    },
    {
        "commit_id": "c6168aa2917eeef83c3383c7eddf35e84394b499",
        "commit_message": "NO-JIRA Fix the Quality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6168aa2917eeef83c3383c7eddf35e84394b499",
        "buggy_code": "public class SafeModeHealthActionTest {",
        "fixed_code": "class SafeModeHealthActionTest {",
        "patch": "@@ -45,7 +45,7 @@\n import static org.mockito.Mockito.when;\n import static org.sonar.test.JsonAssert.assertJson;\n \n-public class SafeModeHealthActionTest {\n+class SafeModeHealthActionTest {\n \n   private final HealthChecker healthChecker = mock(HealthChecker.class);\n   private final SystemPasscode systemPasscode = mock(SystemPasscode.class);"
    },
    {
        "commit_id": "c6168aa2917eeef83c3383c7eddf35e84394b499",
        "commit_message": "NO-JIRA Fix the Quality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6168aa2917eeef83c3383c7eddf35e84394b499",
        "buggy_code": "Files.write(this.file, RandomStringUtils.random(3).getBytes());",
        "fixed_code": "Files.write(this.file, RandomStringUtils.secure().next(3).getBytes());",
        "patch": "@@ -276,7 +276,7 @@ private class FileAndMd5 {\n \n     FileAndMd5() throws IOException {\n       this.file = Files.createTempFile(tempDir, \"jar\", null);\n-      Files.write(this.file, RandomStringUtils.random(3).getBytes());\n+      Files.write(this.file, RandomStringUtils.secure().next(3).getBytes());\n       try (InputStream fis = Files.newInputStream(this.file)) {\n         this.md5 = DigestUtils.md5Hex(fis);\n       } catch (IOException e) {"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -113,7 +113,7 @@ public void add_comment() {\n \n     call(issueDto.getKey(), \"please fix it\");\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     verifyContentOfPreloadedSearchResponseData(issueDto);\n \n     IssueChangeDto issueComment = dbClient.issueChangeDao().selectByTypeAndIssueKeys(dbTester.getSession(), singletonList(issueDto.getKey()), TYPE_COMMENT).get(0);"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -75,7 +75,7 @@ public void delete_comment() {\n \n     call(commentDto.getKey());\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     assertThat(dbClient.issueChangeDao().selectCommentByKey(dbTester.getSession(), commentDto.getKey())).isNotPresent();\n     verifyContentOfPreloadedSearchResponseData(issueDto);\n   }"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issue.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issue.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -125,7 +125,7 @@ public void do_transition() {\n \n     call(issue.getKey(), \"confirm\");\n \n-    verify(responseWriter).write(eq(issue.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issue.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     verifyContentOfPreloadedSearchResponseData(issue);\n     verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any());\n     IssueDto issueReloaded = db.getDbClient().issueDao().selectByKey(db.getSession(), issue.getKey()).get();"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -86,7 +86,7 @@ public void edit_comment() {\n \n     call(commentDto.getKey(), \"please have a look\");\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n \n     verifyContentOfPreloadedSearchResponseData(issueDto);\n     IssueChangeDto issueComment = dbClient.issueChangeDao().selectCommentByKey(dbTester.getSession(), commentDto.getKey()).get();"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -111,7 +111,7 @@ public void set_severity() {\n \n     call(issueDto.getKey(), MINOR);\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     verifyContentOfPreloadedSearchResponseData(issueDto);\n     verify(issueChangeEventService).distributeIssueChangeEvent(any(), any(), any(), any(), any(), any());\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -102,7 +102,7 @@ public void set_tags() {\n \n     call(issueDto.getKey(), \"bug\", \"todo\");\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     verifyContentOfPreloadedSearchResponseData(issueDto);\n     IssueDto issueReloaded = dbClient.issueDao().selectByKey(db.getSession(), issueDto.getKey()).get();\n     assertThat(issueReloaded.getTags()).containsOnly(\"bug\", \"todo\");"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));",
        "fixed_code": "verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));",
        "patch": "@@ -127,7 +127,7 @@ public void set_type(RuleType from, RuleType to) {\n \n     call(issueDto.getKey(), to.name());\n \n-    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class));\n+    verify(responseWriter).write(eq(issueDto.getKey()), preloadedSearchResponseDataCaptor.capture(), any(Request.class), any(Response.class), eq(true));\n     IssueDto issueReloaded = dbClient.issueDao().selectByKey(dbTester.getSession(), issueDto.getKey()).get();\n     assertThat(issueReloaded.getType()).isEqualTo(to.getDbConstant());\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response);",
        "fixed_code": "responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response, true);",
        "patch": "@@ -105,7 +105,7 @@ public void handle(Request request, Response response) {\n       DefaultIssue defaultIssue = issueDto.toDefaultIssue();\n       issueFieldsSetter.addComment(defaultIssue, wsRequest.getText(), context);\n       SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issueDto, defaultIssue, context);\n-      responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response);\n+      responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(key, preloadedResponseData, request, response);",
        "fixed_code": "responseWriter.write(key, preloadedResponseData, request, response, true);",
        "patch": "@@ -102,7 +102,7 @@ public void handle(Request request, Response response) throws Exception {\n     String assignee = getAssignee(request);\n     String key = request.mandatoryParam(PARAM_ISSUE);\n     SearchResponseData preloadedResponseData = assign(key, assignee);\n-    responseWriter.write(key, preloadedResponseData, request, response);\n+    responseWriter.write(key, preloadedResponseData, request, response, true);\n   }\n \n   private SearchResponseData assign(String issueKey, @Nullable String login) {"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);",
        "fixed_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response, true);",
        "patch": "@@ -88,7 +88,7 @@ public void handle(Request request, Response response) {\n       CommentData commentData = loadCommentData(dbSession, request);\n       deleteComment(dbSession, commentData);\n       IssueDto issueDto = commentData.getIssueDto();\n-      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);\n+      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(issue, preloadedSearchResponseData, request, response);",
        "fixed_code": "responseWriter.write(issue, preloadedSearchResponseData, request, response, true);",
        "patch": "@@ -119,7 +119,7 @@ public void handle(Request request, Response response) {\n     try (DbSession dbSession = dbClient.openSession(false)) {\n       IssueDto issueDto = issueFinder.getByKey(dbSession, issue);\n       SearchResponseData preloadedSearchResponseData = doTransition(dbSession, issueDto, request.mandatoryParam(PARAM_TRANSITION));\n-      responseWriter.write(issue, preloadedSearchResponseData, request, response);\n+      responseWriter.write(issue, preloadedSearchResponseData, request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);",
        "fixed_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response, true);",
        "patch": "@@ -98,7 +98,7 @@ public void handle(Request request, Response response) {\n       CommentData commentData = loadCommentData(dbSession, toWsRequest(request));\n       updateComment(dbSession, commentData);\n       IssueDto issueDto = commentData.getIssueDto();\n-      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);\n+      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "return searchResponseFormat.formatList(additionalFields, data, paging);",
        "fixed_code": "return searchResponseFormat.formatList(additionalFields, data, paging, userSession.isLoggedIn());",
        "patch": "@@ -242,7 +242,7 @@ private Issues.ListWsResponse formatResponse(WsRequest request, List<String> iss\n     Paging paging = forPageIndex(request.page)\n       .withPageSize(request.pageSize)\n       .andTotal(request.pageSize);\n-    return searchResponseFormat.formatList(additionalFields, data, paging);\n+    return searchResponseFormat.formatList(additionalFields, data, paging, userSession.isLoggedIn());\n   }\n \n   private void collectLoggedInUser(SearchResponseLoader.Collector collector) {"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(issueKey, preloadedSearchResponseData, request, response);",
        "fixed_code": "responseWriter.write(issueKey, preloadedSearchResponseData, request, response, true);",
        "patch": "@@ -109,7 +109,7 @@ public void handle(Request request, Response response) throws Exception {\n     String severity = request.mandatoryParam(PARAM_SEVERITY);\n     try (DbSession session = dbClient.openSession(false)) {\n       SearchResponseData preloadedSearchResponseData = setType(session, issueKey, severity);\n-      responseWriter.write(issueKey, preloadedSearchResponseData, request, response);\n+      responseWriter.write(issueKey, preloadedSearchResponseData, request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(key, preloadedSearchResponseData, request, response);",
        "fixed_code": "responseWriter.write(key, preloadedSearchResponseData, request, response, true);",
        "patch": "@@ -100,7 +100,7 @@ public void handle(Request request, Response response) throws Exception {\n     String key = request.mandatoryParam(PARAM_ISSUE);\n     List<String> tags = MoreObjects.firstNonNull(request.paramAsStrings(PARAM_TAGS), Collections.emptyList());\n     SearchResponseData preloadedSearchResponseData = setTags(key, tags);\n-    responseWriter.write(key, preloadedSearchResponseData, request, response);\n+    responseWriter.write(key, preloadedSearchResponseData, request, response, true);\n   }\n \n   private SearchResponseData setTags(String issueKey, List<String> tags) {"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "responseWriter.write(issueKey, preloadedSearchResponseData, request, response);",
        "fixed_code": "responseWriter.write(issueKey, preloadedSearchResponseData, request, response, true);",
        "patch": "@@ -113,7 +113,7 @@ public void handle(Request request, Response response) throws Exception {\n     RuleType ruleType = RuleType.valueOf(request.mandatoryParam(PARAM_TYPE));\n     try (DbSession session = dbClient.openSession(false)) {\n       SearchResponseData preloadedSearchResponseData = setType(session, issueKey, ruleType);\n-      responseWriter.write(issueKey, preloadedSearchResponseData, request, response);\n+      responseWriter.write(issueKey, preloadedSearchResponseData, request, response, true);\n     }\n   }\n "
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "linesJsonWriter.writeSource(lineSources, writer, periodDateSupplier);",
        "fixed_code": "linesJsonWriter.writeSource(lineSources, writer, periodDateSupplier, userSession.isLoggedIn());",
        "patch": "@@ -147,7 +147,7 @@ private void writeSnippet(DbSession dbSession, JsonWriter writer, ProjectDto pro\n     componentViewerJsonWriter.writeComponentWithoutFav(writer, projectDto, fileDto, branch, pullRequest);\n     componentViewerJsonWriter.writeMeasures(writer, fileDto, dbSession);\n     writer.endObject();\n-    linesJsonWriter.writeSource(lineSources, writer, periodDateSupplier);\n+    linesJsonWriter.writeSource(lineSources, writer, periodDateSupplier, userSession.isLoggedIn());\n \n     writer.endObject();\n   }"
    },
    {
        "commit_id": "6a29a994884242a240f7385957903bb278504e17",
        "commit_message": "SONAR-23142 Fix SSF (#12040)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a29a994884242a240f7385957903bb278504e17",
        "buggy_code": "linesJsonWriter.writeSource(lines, json, periodDateSupplier);",
        "fixed_code": "linesJsonWriter.writeSource(lines, json, periodDateSupplier, userSession.isLoggedIn());",
        "patch": "@@ -150,7 +150,7 @@ public void handle(Request request, Response response) {\n         \"No source found for file '%s' (uuid: %s)\", file.getKey(), file.uuid());\n       try (JsonWriter json = response.newJsonWriter()) {\n         json.beginObject();\n-        linesJsonWriter.writeSource(lines, json, periodDateSupplier);\n+        linesJsonWriter.writeSource(lines, json, periodDateSupplier, userSession.isLoggedIn());\n         json.endObject();\n       }\n     }"
    },
    {
        "commit_id": "747d4ede9457dcf3dd0e89d080913f3e24396361",
        "commit_message": "SONAR-23070 Fix SSF-635",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/747d4ede9457dcf3dd0e89d080913f3e24396361",
        "buggy_code": "public  <T extends EntityDto>  List<T> keepAuthorizedEntities(String permission, Collection<T> projects) {",
        "fixed_code": "public final <T extends EntityDto>  List<T> keepAuthorizedEntities(String permission, Collection<T> projects) {",
        "patch": "@@ -142,7 +142,7 @@ public final List<ComponentDto> keepAuthorizedComponents(String permission, Coll\n   }\n \n   @Override\n-  public  <T extends EntityDto>  List<T> keepAuthorizedEntities(String permission, Collection<T> projects) {\n+  public final <T extends EntityDto>  List<T> keepAuthorizedEntities(String permission, Collection<T> projects) {\n     return doKeepAuthorizedEntities(permission, projects);\n   }\n "
    },
    {
        "commit_id": "daf512d755a7c23a426b297ff7a43b57b33048f3",
        "commit_message": "SONAR-23029 fix ssf",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/daf512d755a7c23a426b297ff7a43b57b33048f3",
        "buggy_code": "verify(response).setHeader(\"X-XSS-Protection\", \"1; mode=block\");",
        "fixed_code": "verify(response).setHeader(\"X-XSS-Protection\", \"0\");",
        "patch": "@@ -54,7 +54,7 @@ public void invoke(Request request, Response response) {\n     underTest.invoke(request, response);\n \n     verify(response).setHeader(\"X-Frame-Options\", \"SAMEORIGIN\");\n-    verify(response).setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n+    verify(response).setHeader(\"X-XSS-Protection\", \"0\");\n     verify(response).setHeader(\"X-Content-Type-Options\", \"nosniff\");\n     verify(response).setHeader(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains;\");\n   }"
    },
    {
        "commit_id": "7ca382eedb1038d7b87378e3ab0099107f0fc039",
        "commit_message": "SONAR-22807 Make MigrationDbTester final to fix migration QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7ca382eedb1038d7b87378e3ab0099107f0fc039",
        "buggy_code": "public static MigrationDbTester db = MigrationDbTester.createForMigrationStep(DropGithubPermsMappingTableIfDevopsPermsMappingTableExists.class);",
        "fixed_code": "public final MigrationDbTester db = MigrationDbTester.createForMigrationStep(DropGithubPermsMappingTableIfDevopsPermsMappingTableExists.class);",
        "patch": "@@ -30,7 +30,7 @@\n class DropGithubPermsMappingTableIfDevopsPermsMappingTableExistsIT {\n \n   @RegisterExtension\n-  public static MigrationDbTester db = MigrationDbTester.createForMigrationStep(DropGithubPermsMappingTableIfDevopsPermsMappingTableExists.class);\n+  public final MigrationDbTester db = MigrationDbTester.createForMigrationStep(DropGithubPermsMappingTableIfDevopsPermsMappingTableExists.class);\n \n   private final DropGithubPermsMappingTableIfDevopsPermsMappingTableExists underTest = new DropGithubPermsMappingTableIfDevopsPermsMappingTableExists(db.database());\n "
    },
    {
        "commit_id": "b80a57a23ecf821ce3b5c78b77bce4a20ef235e1",
        "commit_message": "SONAR-22807 Implement get and patch gitlab permissions mapping endpoint",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b80a57a23ecf821ce3b5c78b77bce4a20ef235e1",
        "buggy_code": "Set<DevOpsPermissionsMappingDto> forRole2 = underTest.findAllForRole(dbSession, DEV_OPS_PLATFORM, \"GH_role2\");",
        "fixed_code": "Set<DevOpsPermissionsMappingDto> forRole2 = underTest.findAllForDevopsRole(dbSession, DEV_OPS_PLATFORM, \"GH_role2\");",
        "patch": "@@ -152,7 +152,7 @@ void findAllForGithubRole_shouldReturnPermissionsForTheRole() {\n     underTest.insert(dbSession, mapping2);\n     underTest.insert(dbSession, mapping3);\n \n-    Set<DevOpsPermissionsMappingDto> forRole2 = underTest.findAllForRole(dbSession, DEV_OPS_PLATFORM, \"GH_role2\");\n+    Set<DevOpsPermissionsMappingDto> forRole2 = underTest.findAllForDevopsRole(dbSession, DEV_OPS_PLATFORM, \"GH_role2\");\n     assertThat(forRole2).hasSize(2)\n       .containsExactlyInAnyOrder(mapping2, mapping3);\n "
    },
    {
        "commit_id": "b80a57a23ecf821ce3b5c78b77bce4a20ef235e1",
        "commit_message": "SONAR-22807 Implement get and patch gitlab permissions mapping endpoint",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b80a57a23ecf821ce3b5c78b77bce4a20ef235e1",
        "buggy_code": "public Set<DevOpsPermissionsMappingDto> findAllForRole(DbSession dbSession, String devOpsPlatform, String role) {",
        "fixed_code": "public Set<DevOpsPermissionsMappingDto> findAllForDevopsRole(DbSession dbSession, String devOpsPlatform, String role) {",
        "patch": "@@ -37,7 +37,7 @@ public Set<DevOpsPermissionsMappingDto> findAll(DbSession dbSession, String devO\n     return mapper(dbSession).selectAll(devOpsPlatform);\n   }\n \n-  public Set<DevOpsPermissionsMappingDto> findAllForRole(DbSession dbSession, String devOpsPlatform, String role) {\n+  public Set<DevOpsPermissionsMappingDto> findAllForDevopsRole(DbSession dbSession, String devOpsPlatform, String role) {\n     return mapper(dbSession).selectAllForRole(devOpsPlatform, role);\n   }\n "
    },
    {
        "commit_id": "18368ef34d3a5ed844a6c0645e035e665f7a39c8",
        "commit_message": "SONAR-22521 fixed the issue where sometimes the upgrade warning text was not clear to the users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/18368ef34d3a5ed844a6c0645e035e665f7a39c8",
        "buggy_code": ".hasMessage(\"The version of SonarQube is too old. Please upgrade to the Long-Term Active version first.\");",
        "fixed_code": ".hasMessage(\"The version of SonarQube you are trying to upgrade from is too old. Please upgrade to the 9.9 Long-Term Active version first.\");",
        "patch": "@@ -56,7 +56,7 @@ public void fail_if_requires_firstly_to_upgrade_to_lta() {\n     var compatibility = new DatabaseServerCompatibility(version);\n     assertThatThrownBy(compatibility::start)\n       .isInstanceOf(MessageException.class)\n-      .hasMessage(\"The version of SonarQube is too old. Please upgrade to the Long-Term Active version first.\");\n+      .hasMessage(\"The version of SonarQube you are trying to upgrade from is too old. Please upgrade to the 9.9 Long-Term Active version first.\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "e68701d1fa03f425013eacc8b6023be359c9ad24",
        "commit_message": "SONAR-22785 Fix description of API docs in users and groups search (#11536)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e68701d1fa03f425013eacc8b6023be359c9ad24",
        "buggy_code": "+ \"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\")",
        "fixed_code": "+ \"This parameter performs a partial match (contains), it is case insensitive.\")",
        "patch": "@@ -29,7 +29,7 @@ public record GroupsSearchRestRequest(\n \n   @Nullable\n   @Schema(description = \"Filter on name.\\n\"\n-                        + \"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\")\n+                        + \"This parameter performs a partial match (contains), it is case insensitive.\")\n   String q\n \n ) {"
    },
    {
        "commit_id": "e68701d1fa03f425013eacc8b6023be359c9ad24",
        "commit_message": "SONAR-22785 Fix description of API docs in users and groups search (#11536)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e68701d1fa03f425013eacc8b6023be359c9ad24",
        "buggy_code": "+ \"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\")",
        "fixed_code": "+ \"This parameter performs a partial match (contains), it is case insensitive.\")",
        "patch": "@@ -34,7 +34,7 @@ public record UsersSearchRestRequest(\n \n   @Nullable\n   @Schema(description = \"Filter on login, name and email.\\n\"\n-    + \"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\")\n+    + \"This parameter performs a partial match (contains), it is case insensitive.\")\n   String q,\n \n   @Nullable"
    },
    {
        "commit_id": "e68701d1fa03f425013eacc8b6023be359c9ad24",
        "commit_message": "SONAR-22785 Fix description of API docs in users and groups search (#11536)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e68701d1fa03f425013eacc8b6023be359c9ad24",
        "buggy_code": "\"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\");",
        "fixed_code": "\"This parameter performs a partial match (contains), it is case insensitive.\");",
        "patch": "@@ -106,7 +106,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(TEXT_QUERY)\n       .setMinimumLength(2)\n       .setDescription(\"Filter on login, name and email.<br />\" +\n-        \"This parameter can either perform an exact match, or a partial match (contains), it is case insensitive.\");\n+        \"This parameter performs a partial match (contains), it is case insensitive.\");\n     action.createParam(DEACTIVATED_PARAM)\n       .setSince(\"9.7\")\n       .setDescription(\"Return deactivated users instead of active users\")"
    },
    {
        "commit_id": "078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "commit_message": "SONAR-22365 Fix SSF-571",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "buggy_code": "package org.sonarqube.ws.client.githubprovisioning;",
        "fixed_code": "package org.sonar.server.common.github.config;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonarqube.ws.client.githubprovisioning;\n+package org.sonar.server.common.github.config;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "commit_message": "SONAR-22365 Fix SSF-571",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "buggy_code": "import org.sonar.server.v2.api.gitlab.config.resource.ProvisioningType;",
        "fixed_code": "import org.sonar.server.v2.api.model.ProvisioningType;",
        "patch": "@@ -25,7 +25,7 @@\n import javax.annotation.Nullable;\n import javax.validation.constraints.NotEmpty;\n import javax.validation.constraints.NotNull;\n-import org.sonar.server.v2.api.gitlab.config.resource.ProvisioningType;\n+import org.sonar.server.v2.api.model.ProvisioningType;\n \n public record GitlabConfigurationCreateRestRequest(\n "
    },
    {
        "commit_id": "078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "commit_message": "SONAR-22365 Fix SSF-571",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "buggy_code": "import org.sonar.server.v2.api.gitlab.config.resource.ProvisioningType;",
        "fixed_code": "import org.sonar.server.v2.api.model.ProvisioningType;",
        "patch": "@@ -23,7 +23,7 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.List;\n import javax.validation.constraints.Size;\n-import org.sonar.server.v2.api.gitlab.config.resource.ProvisioningType;\n+import org.sonar.server.v2.api.model.ProvisioningType;\n import org.sonar.server.v2.common.model.UpdateField;\n \n public class GitlabConfigurationUpdateRestRequest {"
    },
    {
        "commit_id": "078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "commit_message": "SONAR-22365 Fix SSF-571",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/078306d53ad53ba38d5d4b06e6e8958a0c2c6595",
        "buggy_code": "package org.sonar.server.v2.api.gitlab.config.resource;",
        "fixed_code": "package org.sonar.server.v2.api.model;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.v2.api.gitlab.config.resource;\n+package org.sonar.server.v2.api.model;\n \n public enum ProvisioningType {\n   JIT, AUTO_PROVISIONING"
    },
    {
        "commit_id": "ee412f8f2d795cefe08c05cdf3d3a06572776095",
        "commit_message": "SONAR-22035 Fix json returned by api/v2/analysis/engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee412f8f2d795cefe08c05cdf3d3a06572776095",
        "buggy_code": "public record EngineInfoRestResponse(String filename, String checksum) {",
        "fixed_code": "public record EngineInfoRestResponse(String filename, String sha256) {",
        "patch": "@@ -19,5 +19,5 @@\n  */\n package org.sonar.server.v2.api.analysis.response;\n \n-public record EngineInfoRestResponse(String filename, String checksum) {\n+public record EngineInfoRestResponse(String filename, String sha256) {\n }"
    },
    {
        "commit_id": "ee412f8f2d795cefe08c05cdf3d3a06572776095",
        "commit_message": "SONAR-22035 Fix json returned by api/v2/analysis/engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee412f8f2d795cefe08c05cdf3d3a06572776095",
        "buggy_code": "String expectedJson = format(\"{\\\"filename\\\":\\\"%s\\\",\\\"checksum\\\":\\\"%s\\\"}\", anyName, anyChecksum);",
        "fixed_code": "String expectedJson = format(\"{\\\"filename\\\":\\\"%s\\\",\\\"sha256\\\":\\\"%s\\\"}\", anyName, anyChecksum);",
        "patch": "@@ -53,7 +53,7 @@ void getEngine_shouldReturnScannerMetadataAsJson() throws Exception {\n     String anyName = \"anyName\";\n     String anyChecksum = \"anyChecksum\";\n     when(scannerEngineHandler.getScannerEngineMetadata()).thenReturn(new ScannerEngineMetadata(anyName, anyChecksum));\n-    String expectedJson = format(\"{\\\"filename\\\":\\\"%s\\\",\\\"checksum\\\":\\\"%s\\\"}\", anyName, anyChecksum);\n+    String expectedJson = format(\"{\\\"filename\\\":\\\"%s\\\",\\\"sha256\\\":\\\"%s\\\"}\", anyName, anyChecksum);\n \n     mockMvc.perform(get(SCANNER_ENGINE_ENDPOINT))\n       .andExpectAll("
    },
    {
        "commit_id": "f8755ae02ed58f5b3ce55e33d90589202aadd15e",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8755ae02ed58f5b3ce55e33d90589202aadd15e",
        "buggy_code": "void setUp(@TempDir Path sonarUserHomeDir) throws Exception {",
        "fixed_code": "void setUp(@TempDir Path sonarUserHomeDir) {",
        "patch": "@@ -78,7 +78,7 @@ class PluginFilesTest {\n   private PluginFiles underTest;\n \n   @BeforeEach\n-  void setUp(@TempDir Path sonarUserHomeDir) throws Exception {\n+  void setUp(@TempDir Path sonarUserHomeDir) {\n     when(sonarUserHome.getPath()).thenReturn(sonarUserHomeDir);\n \n     HttpConnector connector = HttpConnector.newBuilder().acceptGzip(true).url(sonarqube.url(\"/\")).build();"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "CeTaskDtoLight oldest = (CeTaskDtoLight) ObjectUtils.min(eligibleForPeek, eligibleForPeekInParallel);",
        "fixed_code": "CeTaskDtoLight oldest = ObjectUtils.min(eligibleForPeek, eligibleForPeekInParallel);",
        "patch": "@@ -74,7 +74,7 @@ Optional<CeQueueDto> findPendingTask(String workerUuid, DbSession dbSession, boo\n    * priority is always given to the task that is waiting longer - to avoid starvation\n    */\n   private Optional<CeQueueDto> submitOldest(DbSession session, String workerUuid, @Nullable CeTaskDtoLight eligibleForPeek, @Nullable CeTaskDtoLight eligibleForPeekInParallel) {\n-    CeTaskDtoLight oldest = (CeTaskDtoLight) ObjectUtils.min(eligibleForPeek, eligibleForPeekInParallel);\n+    CeTaskDtoLight oldest = ObjectUtils.min(eligibleForPeek, eligibleForPeekInParallel);\n     Optional<CeQueueDto> ceQueueDto = ceQueueDao.tryToPeek(session, oldest.getCeTaskUuid(), workerUuid);\n     if (!Objects.equals(oldest, eligibleForPeek)) {\n       ceQueueDto.ifPresent(t -> LOG.info(\"Task [uuid = \" + t.getUuid() + \"] will be run concurrently with other tasks for the same project\"));"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "+ StringUtils.defaultString(emailMessage.getSubject(), SUBJECT_DEFAULT);",
        "fixed_code": "+ Objects.toString(emailMessage.getSubject(), SUBJECT_DEFAULT);",
        "patch": "@@ -246,7 +246,7 @@ private static Email createEmailWithMessage(EmailMessage emailMessage) throws Em\n \n   private void setSubject(Email email, EmailMessage emailMessage) {\n     String subject = StringUtils.defaultIfBlank(StringUtils.trimToEmpty(configuration.getPrefix()) + \" \", \"\")\n-      + StringUtils.defaultString(emailMessage.getSubject(), SUBJECT_DEFAULT);\n+      + Objects.toString(emailMessage.getSubject(), SUBJECT_DEFAULT);\n     email.setSubject(subject);\n   }\n "
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);",
        "fixed_code": "int to = ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);",
        "patch": "@@ -98,7 +98,7 @@ public void define(WebService.NewController controller) {\n   public void handle(Request request, Response response) {\n     String fileKey = request.mandatoryParam(\"key\");\n     int from = Math.max(request.mandatoryParamAsInt(\"from\"), 1);\n-    int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);\n+    int to = ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);\n     boolean commitsByLine = request.mandatoryParamAsBoolean(\"commits_by_line\");\n \n     try (DbSession dbSession = dbClient.openSession(false)) {"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);",
        "fixed_code": "int to = ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);",
        "patch": "@@ -84,7 +84,7 @@ public void define(WebService.NewController controller) {\n   public void handle(Request request, Response response) {\n     String fileKey = request.mandatoryParam(\"key\");\n     int from = Math.max(request.paramAsInt(\"from\"), 1);\n-    int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);\n+    int to = ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);\n \n     try (DbSession dbSession = dbClient.openSession(false)) {\n       ComponentDto file = componentFinder.getByKey(dbSession, fileKey);"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "this.status = (RuleStatus) ObjectUtils.defaultIfNull(s, RuleStatus.defaultStatus());",
        "fixed_code": "this.status = ObjectUtils.defaultIfNull(s, RuleStatus.defaultStatus());",
        "patch": "@@ -66,7 +66,7 @@ public NewRule setType(@Nullable String type) {\n   }\n \n   public NewRule setStatus(@Nullable RuleStatus s) {\n-    this.status = (RuleStatus) ObjectUtils.defaultIfNull(s, RuleStatus.defaultStatus());\n+    this.status = ObjectUtils.defaultIfNull(s, RuleStatus.defaultStatus());\n     return this;\n   }\n "
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "import org.apache.commons.lang3.StringEscapeUtils;",
        "fixed_code": "import org.apache.commons.text.StringEscapeUtils;",
        "patch": "@@ -29,7 +29,7 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n import javax.annotation.Nullable;\n-import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.commons.text.StringEscapeUtils;\n import org.sonar.api.impl.utils.ScannerUtils;\n import org.sonar.api.utils.log.Logger;\n import org.sonar.api.utils.log.Loggers;"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": "String[] patterns = (String[]) ArrayUtils.addAll(",
        "fixed_code": "String[] patterns = ArrayUtils.addAll(",
        "patch": "@@ -179,7 +179,7 @@ private static PathPattern[] prepareTestInclusions(String[] testInclusions) {\n   }\n \n   static PathPattern[] prepareMainExclusions(String[] sourceExclusions, String[] testInclusions) {\n-    String[] patterns = (String[]) ArrayUtils.addAll(\n+    String[] patterns = ArrayUtils.addAll(\n       sourceExclusions, testInclusions);\n     return PathPattern.create(patterns);\n   }"
    },
    {
        "commit_id": "7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "commit_message": "NO JIRA fix code smells after moving to lang3 library",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f3f44f830868197b19cbd8a6e151cb7885d0213",
        "buggy_code": ".takeWhile(NumberUtils::isNumber)",
        "fixed_code": ".takeWhile(NumberUtils::isCreatable)",
        "patch": "@@ -199,7 +199,7 @@ private static boolean isCompatibleGitVersion(String gitVersionCommandOutput) {\n   private static String formatGitSemanticVersion(String version) {\n     return semanticVersionDelimiter\n       .splitAsStream(version)\n-      .takeWhile(NumberUtils::isNumber)\n+      .takeWhile(NumberUtils::isCreatable)\n       .collect(Collectors.joining(\".\"));\n   }\n "
    },
    {
        "commit_id": "417e619701c2a58f547310fc400347b2e062ff2c",
        "commit_message": "SONAR-21882 Fix SSF-570",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/417e619701c2a58f547310fc400347b2e062ff2c",
        "buggy_code": "public void update_with_url_change_needs_path() {",
        "fixed_code": "public void update_with_url_change_needs_pat() {",
        "patch": "@@ -105,7 +105,7 @@ public void fail_when_url_updated_without_pat() {\n   }\n \n   @Test\n-  public void update_with_url_change_needs_path() {\n+  public void update_with_url_change_needs_pat() {\n     UserDto user = db.users().insertUser();\n     userSession.logIn(user).setSystemAdministrator();\n "
    },
    {
        "commit_id": "917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "commit_message": "SONAR-21857 fix ssf",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "buggy_code": "HttpConnector.Builder connectorBuilder = HttpConnector.newBuilder();",
        "fixed_code": "HttpConnector.Builder connectorBuilder = HttpConnector.newBuilder().acceptGzip(true);",
        "patch": "@@ -44,7 +44,7 @@ public class ScannerWsClientProvider {\n   public DefaultScannerWsClient provide(ScannerProperties scannerProps, EnvironmentInformation env, GlobalAnalysisMode globalMode,\n     System2 system, AnalysisWarnings analysisWarnings) {\n     String url = defaultIfBlank(scannerProps.property(\"sonar.host.url\"), \"http://localhost:9000\");\n-    HttpConnector.Builder connectorBuilder = HttpConnector.newBuilder();\n+    HttpConnector.Builder connectorBuilder = HttpConnector.newBuilder().acceptGzip(true);\n \n     String timeoutSec = defaultIfBlank(scannerProps.property(READ_TIMEOUT_SEC_PROPERTY), valueOf(DEFAULT_READ_TIMEOUT_SEC));\n     String envVarToken = defaultIfBlank(system.envVariable(TOKEN_ENV_VARIABLE), null);"
    },
    {
        "commit_id": "917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "commit_message": "SONAR-21857 fix ssf",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "buggy_code": "HttpConnector connector = HttpConnector.newBuilder().url(server.url(\"/\").toString()).build();",
        "fixed_code": "HttpConnector connector = HttpConnector.newBuilder().acceptGzip(true).url(server.url(\"/\").toString()).build();",
        "patch": "@@ -65,7 +65,7 @@ public class PluginFilesTest {\n \n   @Before\n   public void setUp() throws Exception {\n-    HttpConnector connector = HttpConnector.newBuilder().url(server.url(\"/\").toString()).build();\n+    HttpConnector connector = HttpConnector.newBuilder().acceptGzip(true).url(server.url(\"/\").toString()).build();\n     GlobalAnalysisMode analysisMode = new GlobalAnalysisMode(new ScannerProperties(Collections.emptyMap()));\n     DefaultScannerWsClient wsClient = new DefaultScannerWsClient(WsClientFactories.getDefault().newClient(connector), false,\n       analysisMode, analysisWarnings);"
    },
    {
        "commit_id": "917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "commit_message": "SONAR-21857 fix ssf",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/917a1f424307557ab9f6fbc2dcb1a8320774e511",
        "buggy_code": "assertThat(okHttpClient.networkInterceptors()).hasSize(1);",
        "fixed_code": "assertThat(okHttpClient.networkInterceptors()).hasSize(2);",
        "patch": "@@ -37,7 +37,7 @@ public void build_default_instance_of_OkHttpClient() {\n     OkHttpClient okHttpClient = underTest.build();\n \n     assertThat(okHttpClient.proxy()).isNull();\n-    assertThat(okHttpClient.networkInterceptors()).hasSize(1);\n+    assertThat(okHttpClient.networkInterceptors()).hasSize(2);\n     assertThat(okHttpClient.sslSocketFactory()).isNotNull();\n     assertThat(okHttpClient.followRedirects()).isTrue();\n     assertThat(okHttpClient.followSslRedirects()).isTrue();"
    },
    {
        "commit_id": "11f875035fa31bc81a55bebffa13f18653425981",
        "commit_message": "SONAR-21738 Fix issues blocking Quality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/11f875035fa31bc81a55bebffa13f18653425981",
        "buggy_code": "public class LoadQualityProfilesStepTest {",
        "fixed_code": "class LoadQualityProfilesStepTest {",
        "patch": "@@ -38,7 +38,7 @@\n import static org.sonar.db.rule.RuleTesting.XOO_X1;\n import static org.sonar.db.rule.RuleTesting.XOO_X2;\n \n-public class LoadQualityProfilesStepTest {\n+class LoadQualityProfilesStepTest {\n \n   @RegisterExtension\n   private final BatchReportReaderRule batchReportReader = new BatchReportReaderRule();"
    },
    {
        "commit_id": "b50db984f07fdfce6a5c8c053d8a86394681463a",
        "commit_message": "SONAR-21165 Fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b50db984f07fdfce6a5c8c053d8a86394681463a",
        "buggy_code": "private void setCleanCodeAttributeAndImpacts(NewCustomRule newRule, RuleDto ruleDto, RuleDto templateRuleDto) {",
        "fixed_code": "private static void setCleanCodeAttributeAndImpacts(NewCustomRule newRule, RuleDto ruleDto, RuleDto templateRuleDto) {",
        "patch": "@@ -230,7 +230,7 @@ private RuleDto createCustomRule(NewCustomRule newRule, RuleDto templateRuleDto,\n     return ruleDto;\n   }\n \n-  private void setCleanCodeAttributeAndImpacts(NewCustomRule newRule, RuleDto ruleDto, RuleDto templateRuleDto) {\n+  private static void setCleanCodeAttributeAndImpacts(NewCustomRule newRule, RuleDto ruleDto, RuleDto templateRuleDto) {\n     RuleType ruleType = newRule.type();\n     int type = ruleType == null ? templateRuleDto.getType() : ruleType.getDbConstant();\n     String severity = ofNullable(newRule.severity()).orElse(Severity.MAJOR);"
    },
    {
        "commit_id": "f35c863133c22bdc7d5a63dd914e10eda1ad04dc",
        "commit_message": "Fix test depending on user locale",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f35c863133c22bdc7d5a63dd914e10eda1ad04dc",
        "buggy_code": "assertThat(logTester.logs(Level.DEBUG).get(0)).contains(\"fatal: not a git repository\");",
        "fixed_code": "assertThat(logTester.logs(Level.DEBUG).get(0)).startsWith(\"fatal:\");",
        "patch": "@@ -45,7 +45,7 @@ public void should_log_error_output_in_debug_mode() throws IOException {\n     assertThatThrownBy(() -> processWrapper.execute())\n       .isInstanceOf(IllegalStateException.class);\n \n-    assertThat(logTester.logs(Level.DEBUG).get(0)).contains(\"fatal: not a git repository\");\n+    assertThat(logTester.logs(Level.DEBUG).get(0)).startsWith(\"fatal:\");\n   }\n \n }"
    },
    {
        "commit_id": "d72acd5707f3ac1234f60a326dffbb197b1e103f",
        "commit_message": "SONAR-21559 Fix failing QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d72acd5707f3ac1234f60a326dffbb197b1e103f",
        "buggy_code": "new GetRequest(path(\"encrypt\"))",
        "fixed_code": "new PostRequest(path(\"encrypt\"))",
        "patch": "@@ -64,7 +64,7 @@ public CheckSecretKeyWsResponse checkSecretKey() {\n    */\n   public EncryptWsResponse encrypt(EncryptRequest request) {\n     return call(\n-      new GetRequest(path(\"encrypt\"))\n+      new PostRequest(path(\"encrypt\"))\n         .setParam(\"value\", request.getValue()),\n       EncryptWsResponse.parser());\n   }"
    },
    {
        "commit_id": "13af20dce3f2252aac9e9e1c4d3d75a0bdb779d5",
        "commit_message": "SONAR-21059 Fix incorrect character encoding in email subject",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/13af20dce3f2252aac9e9e1c4d3d75a0bdb779d5",
        "buggy_code": "assertThat(emailMessage.getSubject()).isEqualTo(\"Analysis has changed some of your issues in \" + project.getProjectName() + \", \" + project.getBranchName().get());",
        "fixed_code": "assertThat(emailMessage.getSubject()).isEqualTo(\"Analysis has changed some of your issues in \" + project.getProjectName() + \" (\" + project.getBranchName().get() + \")\");",
        "patch": "@@ -137,7 +137,7 @@ public void format_sets_subject_with_project_name_and_branch_name_of_first_issue\n     EmailMessage emailMessage = underTest.format(new ChangesOnMyIssuesNotification(analysisChange, changedIssues));\n \n     Project project = changedIssues.iterator().next().getProject();\n-    assertThat(emailMessage.getSubject()).isEqualTo(\"Analysis has changed some of your issues in \" + project.getProjectName() + \", \" + project.getBranchName().get());\n+    assertThat(emailMessage.getSubject()).isEqualTo(\"Analysis has changed some of your issues in \" + project.getProjectName() + \" (\" + project.getBranchName().get() + \")\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "48f43d6a3bf9bbd7c9b58eb5cde635572184ad01",
        "commit_message": "SONAR-21559 Fix SSF-553",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/48f43d6a3bf9bbd7c9b58eb5cde635572184ad01",
        "buggy_code": "assertThat(definition.isPost()).isFalse();",
        "fixed_code": "assertThat(definition.isPost()).isTrue();",
        "patch": "@@ -76,7 +76,7 @@ public void definition() {\n     WebService.Action definition = ws.getDef();\n \n     assertThat(definition.key()).isEqualTo(\"encrypt\");\n-    assertThat(definition.isPost()).isFalse();\n+    assertThat(definition.isPost()).isTrue();\n     assertThat(definition.isInternal()).isTrue();\n     assertThat(definition.responseExampleAsString()).isNotEmpty();\n     assertThat(definition.params()).hasSize(1);"
    },
    {
        "commit_id": "e0a8c04f21a62de3a60fa0824efb57044b7f16a8",
        "commit_message": "SONAR-21413 Fix Gitlab form field descriptions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8c04f21a62de3a60fa0824efb57044b7f16a8",
        "buggy_code": ".name(\"Groups allowed\")",
        "fixed_code": ".name(\"Allowed groups\")",
        "patch": "@@ -155,7 +155,7 @@ static List<PropertyDefinition> definitions() {\n         .index(5)\n         .build(),\n       PropertyDefinition.builder(GITLAB_AUTH_ALLOWED_GROUPS)\n-        .name(\"Groups allowed\")\n+        .name(\"Allowed groups\")\n         .description(\"Only members of these groups (and sub-groups) will be allowed to authenticate. \" +\n           \"Please enter the group slug as it appears in the GitLab URL, for instance `my-gitlab-group`. \" +\n           \"If you use Auto-provisioning, only members of these groups (and sub-groups) will be provisioned\")"
    },
    {
        "commit_id": "adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "commit_message": "SONAR-21393 Fix article: \"an\" instead of \"a\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "buggy_code": "\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to a HTTPS URL.\");",
        "fixed_code": "\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to an HTTPS URL.\");",
        "patch": "@@ -53,7 +53,7 @@ public void start() {\n     String publicRootUrl = server.getPublicRootUrl();\n     if (StringUtils.startsWithIgnoreCase(publicRootUrl, \"http:\")) {\n       LoggerFactory.getLogger(getClass()).warn(\n-        \"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to a HTTPS URL.\");\n+        \"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to an HTTPS URL.\");\n     }\n   }\n "
    },
    {
        "commit_id": "adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "commit_message": "SONAR-21393 Fix article: \"an\" instead of \"a\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "buggy_code": "assertThat(logTester.logs(Level.WARN)).containsOnly(\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to a HTTPS URL.\");",
        "fixed_code": "assertThat(logTester.logs(Level.WARN)).containsOnly(\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to an HTTPS URL.\");",
        "patch": "@@ -47,7 +47,7 @@ public void log_warning_at_startup_if_non_secured_base_url_and_oauth_is_installe\n \n     underTest.start();\n \n-    assertThat(logTester.logs(Level.WARN)).containsOnly(\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to a HTTPS URL.\");\n+    assertThat(logTester.logs(Level.WARN)).containsOnly(\"For security reasons, OAuth authentication should use HTTPS. You should set the property 'Administration > Configuration > Server base URL' to an HTTPS URL.\");\n \n     underTest.stop();\n   }"
    },
    {
        "commit_id": "adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "commit_message": "SONAR-21393 Fix article: \"an\" instead of \"a\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/adac0feada5e2e4500994a752bb950cee3e4a4c9",
        "buggy_code": "\"a HTML page with all information available in the assertion.\")",
        "fixed_code": "\"an HTML page with all information available in the assertion.\")",
        "patch": "@@ -105,7 +105,7 @@ public void define(WebService.NewController controller) {\n       .setPost(true)\n       .setHandler(ServletFilterHandler.INSTANCE)\n       .setDescription(\"Handle the callback of a SAML assertion from the identity Provider and produces \" +\n-        \"a HTML page with all information available in the assertion.\")\n+        \"an HTML page with all information available in the assertion.\")\n       .setSince(\"9.7\");\n     action.createParam(\"SAMLResponse\")\n       .setDescription(\"SAML assertion value\")"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -21,7 +21,7 @@\n \n import java.io.IOException;\n import java.util.Optional;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n import org.sonar.api.ce.ComputeEngineSide;\n import org.sonar.api.server.ServerSide;\n "
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -37,7 +37,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n import org.sonarqube.ws.client.OkHttpClientBuilder;\n \n import static com.google.common.base.Preconditions.checkArgument;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -26,7 +26,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.sonar.alm.client.ApplicationHttpClient.GetResponse;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n \n import static java.lang.String.format;\n "
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -21,7 +21,7 @@\n \n import java.util.List;\n import java.util.function.Function;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n \n public interface PaginatedHttpClient {\n   <E> List<E> get(String appUrl, AccessToken token, String query, Function<String, List<E>> responseDeserializer);"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.alm.client.gitlab;\n \n import java.util.Objects;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n \n public class GitlabToken implements AccessToken {\n   private final String token;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.security.AccessToken;",
        "fixed_code": "import org.sonar.auth.github.security.AccessToken;",
        "patch": "@@ -33,7 +33,7 @@\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n import org.slf4j.event.Level;\n-import org.sonar.alm.client.github.security.AccessToken;\n+import org.sonar.auth.github.security.AccessToken;\n import org.sonar.api.testfixtures.log.LogTester;\n \n import static org.assertj.core.api.Assertions.assertThat;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.config.GithubAppConfiguration;",
        "fixed_code": "import org.sonar.auth.github.GithubAppConfiguration;",
        "patch": "@@ -23,7 +23,7 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-import org.sonar.alm.client.github.config.GithubAppConfiguration;\n+import org.sonar.auth.github.GithubAppConfiguration;\n import org.sonar.api.config.internal.Encryption;\n import org.sonar.api.config.internal.Settings;\n import org.sonar.db.alm.setting.ALM;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.config.GithubAppConfiguration;",
        "fixed_code": "import org.sonar.auth.github.GithubAppConfiguration;",
        "patch": "@@ -28,7 +28,7 @@\n import java.util.Random;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.sonar.alm.client.github.config.GithubAppConfiguration;\n+import org.sonar.auth.github.GithubAppConfiguration;\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.config;",
        "fixed_code": "package org.sonar.auth.github;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.config;\n+package org.sonar.auth.github;\n \n import com.google.common.base.MoreObjects;\n import java.util.regex.Pattern;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.api;",
        "fixed_code": "package org.sonar.auth.github;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.api;\n+package org.sonar.auth.github;\n \n import com.google.gson.annotations.SerializedName;\n import org.sonar.auth.github.GsonRepositoryPermissions;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.api;",
        "fixed_code": "package org.sonar.auth.github;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.api;\n+package org.sonar.auth.github;\n \n import com.google.gson.annotations.SerializedName;\n import org.sonar.auth.github.GsonRepositoryPermissions;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.api;",
        "fixed_code": "package org.sonar.auth.github.client;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.alm.client.github.api;\n+package org.sonar.auth.github.client;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.security;",
        "fixed_code": "package org.sonar.auth.github.security;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.security;\n+package org.sonar.auth.github.security;\n \n /**\n  * Token used to authenticate requests to Github API"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.security;",
        "fixed_code": "package org.sonar.auth.github.security;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.security;\n+package org.sonar.auth.github.security;\n \n public class UserAccessToken implements AccessToken {\n "
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github;",
        "fixed_code": "package org.sonar.auth.github;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github;\n+package org.sonar.auth.github;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "assertThat(container.getAddedObjects()).hasSize(15);",
        "fixed_code": "assertThat(container.getAddedObjects()).hasSize(16);",
        "patch": "@@ -30,7 +30,7 @@ public class GitHubModuleTest {\n   public void verify_count_of_added_components() {\n     ListContainer container = new ListContainer();\n     new GitHubModule().configure(container);\n-    assertThat(container.getAddedObjects()).hasSize(15);\n+    assertThat(container.getAddedObjects()).hasSize(16);\n   }\n \n }"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "package org.sonar.alm.client.github.config;",
        "fixed_code": "package org.sonar.auth.github;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.alm.client.github.config;\n+package org.sonar.auth.github;\n \n import com.tngtech.java.junit.dataprovider.DataProvider;\n import com.tngtech.java.junit.dataprovider.DataProviderRunner;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.stream.Stream;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.sonar.alm.client.github.GithubApplicationClient;\n+import org.sonar.auth.github.client.GithubApplicationClient;\n import org.sonar.alm.client.github.GithubApplicationClientImpl;\n import org.sonar.api.utils.System2;\n import org.sonar.db.DbTester;"
    },
    {
        "commit_id": "e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "commit_message": "SONAR-21088 Fix SSF-434",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e9fa96f54d2e21bafde5dcd9fb9d388df914cd08",
        "buggy_code": "import org.sonar.alm.client.github.GithubApplicationClient;",
        "fixed_code": "import org.sonar.auth.github.client.GithubApplicationClient;",
        "patch": "@@ -27,7 +27,7 @@\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.sonar.alm.client.github.GithubApplicationClient;\n+import org.sonar.auth.github.client.GithubApplicationClient;\n import org.sonar.alm.client.github.GithubGlobalSettingsValidator;\n import org.sonar.api.utils.System2;\n import org.sonar.auth.github.GitHubSettings;"
    },
    {
        "commit_id": "529b1f2c82ae59db5cf8eb10f16ce286d2b7c8b3",
        "commit_message": "SONAR-21259 Fix code issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/529b1f2c82ae59db5cf8eb10f16ce286d2b7c8b3",
        "buggy_code": ".hasMessage(\"Pull request with key 'wrongPullRequest' does not exist for a project \" + project.projectKey());",
        "fixed_code": ".hasMessage(\"Pull request with key 'wrongPullRequest' does not exist for project \" + project.projectKey());",
        "patch": "@@ -2228,7 +2228,7 @@ public void search_whenWrongFixedInPullRequestSet_throwException() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessage(\"Pull request with key 'wrongPullRequest' does not exist for a project \" + project.projectKey());\n+      .hasMessage(\"Pull request with key 'wrongPullRequest' does not exist for project \" + project.projectKey());\n   }\n \n   @Test"
    },
    {
        "commit_id": "f1dfcc61c643d3c13be6b9743722ed36784569ab",
        "commit_message": "SONAR-21121 Add PATCH /dop-translation/gitlab-configurations/",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f1dfcc61c643d3c13be6b9743722ed36784569ab",
        "buggy_code": "RestSearchResponse<T> search(@Valid @ParameterObject U searchRequest, @Valid @ParameterObject RestPage restPage);",
        "fixed_code": "RestSearchResponse<T> searchGitlabConfiguration(@Valid @ParameterObject U searchRequest, @Valid @ParameterObject RestPage restPage);",
        "patch": "@@ -27,6 +27,6 @@\n \n public interface Searchable<T, U extends RestSearchRequest> {\n \n-  RestSearchResponse<T> search(@Valid @ParameterObject U searchRequest, @Valid @ParameterObject RestPage restPage);\n+  RestSearchResponse<T> searchGitlabConfiguration(@Valid @ParameterObject U searchRequest, @Valid @ParameterObject RestPage restPage);\n \n }"
    },
    {
        "commit_id": "d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "commit_message": "SONAR-21174 Fix code smells raised after dropping JDK11 support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "buggy_code": "return activeRulesByRepository.entrySet().stream().flatMap(x -> x.getValue().stream()).collect(Collectors.toList());",
        "fixed_code": "return activeRulesByRepository.entrySet().stream().flatMap(x -> x.getValue().stream()).toList();",
        "patch": "@@ -79,7 +79,7 @@ public ActiveRule find(RuleKey ruleKey) {\n \n   @Override\n   public Collection<ActiveRule> findAll() {\n-    return activeRulesByRepository.entrySet().stream().flatMap(x -> x.getValue().stream()).collect(Collectors.toList());\n+    return activeRulesByRepository.entrySet().stream().flatMap(x -> x.getValue().stream()).toList();\n   }\n \n   @Override"
    },
    {
        "commit_id": "d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "commit_message": "SONAR-21174 Fix code smells raised after dropping JDK11 support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "buggy_code": ".collect(Collectors.toList());",
        "fixed_code": ".toList();",
        "patch": "@@ -457,7 +457,7 @@ public Settings removeProperty(String key) {\n   public List<String> getKeysStartingWith(String prefix) {\n     return getProperties().keySet().stream()\n       .filter(key -> StringUtils.startsWith(key, prefix))\n-      .collect(Collectors.toList());\n+      .toList();\n   }\n \n }"
    },
    {
        "commit_id": "d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "commit_message": "SONAR-21174 Fix code smells raised after dropping JDK11 support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "buggy_code": "if (value == null || (value instanceof String && ((String) value).isEmpty())) {",
        "fixed_code": "if (value == null || (value instanceof String string && string.isEmpty())) {",
        "patch": "@@ -140,7 +140,7 @@ private static void mandatoryFieldSecondaryLocation(@Nullable Object value, Stri\n   }\n \n   private static void mandatoryField(@Nullable Object value, String fieldName, Path reportPath) {\n-    if (value == null || (value instanceof String && ((String) value).isEmpty())) {\n+    if (value == null || (value instanceof String string && string.isEmpty())) {\n       throw new IllegalStateException(String.format(\"Failed to parse report '%s': missing mandatory field '%s'.\", reportPath, fieldName));\n     }\n   }"
    },
    {
        "commit_id": "d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "commit_message": "SONAR-21174 Fix code smells raised after dropping JDK11 support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "buggy_code": "inputFile.addIgnoreIssuesOnLineRanges(lineRanges.stream().map(r -> new int[] {r.from(), r.to()}).collect(Collectors.toList()));",
        "fixed_code": "inputFile.addIgnoreIssuesOnLineRanges(lineRanges.stream().map(r -> new int[] {r.from(), r.to()}).toList());",
        "patch": "@@ -89,7 +89,7 @@ public void eof() {\n     if (!lineExclusions.isEmpty()) {\n       Set<LineRange> lineRanges = convertLineExclusionsToLineRanges();\n       LOG.debug(\"  - Line exclusions found: {}\", lineRanges.stream().map(LineRange::toString).collect(Collectors.joining(\",\")));\n-      inputFile.addIgnoreIssuesOnLineRanges(lineRanges.stream().map(r -> new int[] {r.from(), r.to()}).collect(Collectors.toList()));\n+      inputFile.addIgnoreIssuesOnLineRanges(lineRanges.stream().map(r -> new int[] {r.from(), r.to()}).toList());\n     }\n   }\n "
    },
    {
        "commit_id": "d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "commit_message": "SONAR-21174 Fix code smells raised after dropping JDK11 support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d62a56ecfd4cf2f183873900fd32cffc4743c7fb",
        "buggy_code": "if (t instanceof HttpException && ((HttpException) t).code() == HttpURLConnection.HTTP_NOT_FOUND) {",
        "fixed_code": "if (t instanceof HttpException httpException && httpException.code() == HttpURLConnection.HTTP_NOT_FOUND) {",
        "patch": "@@ -77,7 +77,7 @@ private static boolean shouldThrow(Exception e) {\n     Throwable t = e;\n \n     do {\n-      if (t instanceof HttpException && ((HttpException) t).code() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      if (t instanceof HttpException httpException && httpException.code() == HttpURLConnection.HTTP_NOT_FOUND) {\n         return false;\n       }\n       t = t.getCause();"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);",
        "fixed_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, hotspot, defaultIssue, context);",
        "patch": "@@ -85,7 +85,7 @@ public void handle(Request request, Response response) throws Exception {\n       DefaultIssue defaultIssue = hotspot.toDefaultIssue();\n       IssueChangeContext context = hotspotWsSupport.newIssueChangeContextWithoutMeasureRefresh();\n       issueFieldsSetter.addComment(defaultIssue, comment, context);\n-      issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);\n+      issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, hotspot, defaultIssue, context);\n       response.noContent();\n     }\n   }"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);",
        "fixed_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, hotspotDto, defaultIssue, context);",
        "patch": "@@ -126,7 +126,7 @@ private void assign(String hotspotKey, String login, @Nullable String comment) {\n       }\n \n       if (issueFieldsSetter.assign(defaultIssue, assignee, context)) {\n-        issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);\n+        issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, hotspotDto, defaultIssue, context);\n \n         BranchDto branch = issueUpdater.getBranch(dbSession, defaultIssue);\n         if (BRANCH.equals(branch.getBranchType())) {"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(session, defaultIssue, context);",
        "fixed_code": "issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, defaultIssue, context);",
        "patch": "@@ -162,7 +162,7 @@ private void doTransition(DbSession session, IssueDto issueDto, String transitio\n         issueFieldsSetter.addComment(defaultIssue, comment, context);\n       }\n \n-      issueUpdater.saveIssueAndPreloadSearchResponseData(session, defaultIssue, context);\n+      issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, defaultIssue, context);\n \n       BranchDto branch = issueUpdater.getBranch(session, defaultIssue);\n       if (BRANCH.equals(branch.getBranchType())) {"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);",
        "fixed_code": "SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issueDto, defaultIssue, context);",
        "patch": "@@ -103,7 +103,7 @@ public void handle(Request request, Response response) {\n       IssueChangeContext context = issueChangeContextByUserBuilder(new Date(system2.now()), userSession.getUuid()).build();\n       DefaultIssue defaultIssue = issueDto.toDefaultIssue();\n       issueFieldsSetter.addComment(defaultIssue, wsRequest.getText(), context);\n-      SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context);\n+      SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issueDto, defaultIssue, context);\n       responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response);\n     }\n   }"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issue, context);",
        "fixed_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issueDto, issue, context);",
        "patch": "@@ -111,7 +111,7 @@ private SearchResponseData assign(String issueKey, @Nullable String login) {\n       UserDto user = getUser(dbSession, login);\n       IssueChangeContext context = issueChangeContextByUserBuilder(new Date(system2.now()), userSession.getUuid()).build();\n       if (issueFieldsSetter.assign(issue, user, context)) {\n-        return issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issue, context);\n+        return issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, issueDto, issue, context);\n       }\n       return new SearchResponseData(issueDto);\n     }"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, defaultIssue, context, branch);",
        "fixed_code": "SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, defaultIssue, context, branch);",
        "patch": "@@ -128,7 +128,7 @@ private SearchResponseData doTransition(DbSession session, IssueDto issueDto, St\n     transitionService.checkTransitionPermission(transitionKey, defaultIssue);\n     if (transitionService.doTransition(defaultIssue, context, transitionKey)) {\n       BranchDto branch = issueUpdater.getBranch(session, defaultIssue);\n-      SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, defaultIssue, context, branch);\n+      SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, defaultIssue, context, branch);\n \n       if (branch.getBranchType().equals(BRANCH) && response.getComponentByUuid(defaultIssue.projectUuid()) != null) {\n         issueChangeEventService.distributeIssueChangeEvent(defaultIssue, null, null, transitionKey, branch,"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context);",
        "fixed_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, issue, context);",
        "patch": "@@ -109,7 +109,7 @@ private SearchResponseData setTags(String issueKey, List<String> tags) {\n       DefaultIssue issue = issueDto.toDefaultIssue();\n       IssueChangeContext context = issueChangeContextByUserBuilder(new Date(), userSession.getUuid()).build();\n       if (issueFieldsSetter.setTags(issue, tags, context)) {\n-        return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context);\n+        return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, issue, context);\n       }\n       return new SearchResponseData(issueDto);\n     }"
    },
    {
        "commit_id": "d3c85d42409248e8e0fed7c103358c522d2de193",
        "commit_message": "SONAR-20977 Fix notifications sent twice for FP or accepted issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3c85d42409248e8e0fed7c103358c522d2de193",
        "buggy_code": "SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, branch);",
        "fixed_code": "SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, issue, context, branch);",
        "patch": "@@ -126,7 +126,7 @@ private SearchResponseData setType(DbSession session, String issueKey, RuleType\n     IssueChangeContext context = issueChangeContextByUserBuilder(new Date(system2.now()), userSession.getUuid()).withRefreshMeasures().build();\n     if (issueFieldsSetter.setType(issue, ruleType, context)) {\n       BranchDto branch = issueUpdater.getBranch(session, issue);\n-      SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, branch);\n+      SearchResponseData response = issueUpdater.saveIssueAndPreloadSearchResponseData(session, issueDto, issue, context, branch);\n       if (branch.getBranchType().equals(BRANCH) && response.getComponentByUuid(issue.projectUuid()) != null) {\n         issueChangeEventService.distributeIssueChangeEvent(issue, null, ruleType.name(), null, branch,\n           response.getComponentByUuid(issue.projectUuid()).getKey());"
    },
    {
        "commit_id": "081fbbc6d906b6eebb9098ee0a925a11d5bd6029",
        "commit_message": "NOJIRA Fix a code smell",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/081fbbc6d906b6eebb9098ee0a925a11d5bd6029",
        "buggy_code": "ldapServer.setSaslHost(\"localhost\");",
        "fixed_code": "ldapServer.setSaslHost(HOSTNAME_LOCALHOST);",
        "patch": "@@ -186,7 +186,7 @@ private ApacheDS startLdapServer(int port) throws Exception {\n     mechanismHandlerMap.put(SupportedSaslMechanisms.GSSAPI, new GssapiMechanismHandler());\n     ldapServer.setSaslMechanismHandlers(mechanismHandlerMap);\n \n-    ldapServer.setSaslHost(\"localhost\");\n+    ldapServer.setSaslHost(HOSTNAME_LOCALHOST);\n     ldapServer.setSaslRealms(Collections.singletonList(realm));\n     // TODO ldapServer.setSaslPrincipal();\n     // The base DN containing users that can be SASL authenticated."
    },
    {
        "commit_id": "0bc3c36c61a82eb18a66e2433164d06d548d127a",
        "commit_message": "SONAR-20871 Add simple status to the issue index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0bc3c36c61a82eb18a66e2433164d06d548d127a",
        "buggy_code": "issueBuilder.setSimpleStatus(SimpleStatus.of(dto.getStatus(), dto.getResolution()).name());",
        "fixed_code": "Optional.ofNullable(SimpleStatus.of(dto.getStatus(), dto.getResolution())).map(SimpleStatus::name).ifPresent(issueBuilder::setSimpleStatus);",
        "patch": "@@ -205,7 +205,7 @@ private void addMandatoryFieldsToIssueBuilder(Issue.Builder issueBuilder, IssueD\n     ofNullable(data.getUserByUuid(dto.getAssigneeUuid())).ifPresent(assignee -> issueBuilder.setAssignee(assignee.getLogin()));\n     ofNullable(emptyToNull(dto.getResolution())).ifPresent(issueBuilder::setResolution);\n     issueBuilder.setStatus(dto.getStatus());\n-    issueBuilder.setSimpleStatus(SimpleStatus.of(dto.getStatus(), dto.getResolution()).name());\n+    Optional.ofNullable(SimpleStatus.of(dto.getStatus(), dto.getResolution())).map(SimpleStatus::name).ifPresent(issueBuilder::setSimpleStatus);\n     issueBuilder.setMessage(nullToEmpty(dto.getMessage()));\n     issueBuilder.addAllMessageFormattings(MessageFormattingUtils.dbMessageFormattingToWs(dto.parseMessageFormattings()));\n     issueBuilder.addAllTags(dto.getTags());"
    },
    {
        "commit_id": "b9e8aa28897bda114fd36ae6dbbea57aa7df6ec4",
        "commit_message": "SONAR-20875 Clean up module concept issue integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b9e8aa28897bda114fd36ae6dbbea57aa7df6ec4",
        "buggy_code": "RulesDefinition.Rule rule = repo.rule(OneVulnerabilityIssuePerModuleSensor.RULE_KEY);",
        "fixed_code": "RulesDefinition.Rule rule = repo.rule(OneVulnerabilityIssuePerProjectSensor.RULE_KEY);",
        "patch": "@@ -88,7 +88,7 @@ public void define_xoo_hotspot_rule_with_contexts() {\n   public void define_xoo_vulnerability_rule() {\n     RulesDefinition.Repository repo = getRepository();\n \n-    RulesDefinition.Rule rule = repo.rule(OneVulnerabilityIssuePerModuleSensor.RULE_KEY);\n+    RulesDefinition.Rule rule = repo.rule(OneVulnerabilityIssuePerProjectSensor.RULE_KEY);\n     assertThat(rule.name()).isNotEmpty();\n     assertThat(rule.securityStandards())\n       .isNotEmpty()"
    },
    {
        "commit_id": "b9e8aa28897bda114fd36ae6dbbea57aa7df6ec4",
        "commit_message": "SONAR-20875 Clean up module concept issue integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b9e8aa28897bda114fd36ae6dbbea57aa7df6ec4",
        "buggy_code": ".addActiveRule(\"xoo\", \"OneIssuePerModule\", null, \"One issue per module\", \"MINOR\", \"xoo\", \"xoo\");",
        "fixed_code": ".addActiveRule(\"xoo\", \"OneIssuePerProject\", null, \"One issue per module\", \"MINOR\", \"xoo\", \"xoo\");",
        "patch": "@@ -43,7 +43,7 @@ public class IssuesOnModuleMediumIT {\n     .registerPlugin(\"xoo\", new XooPlugin())\n     .addDefaultQProfile(\"xoo\", \"Sonar Way\")\n     .addRules(new XooRulesDefinition())\n-    .addActiveRule(\"xoo\", \"OneIssuePerModule\", null, \"One issue per module\", \"MINOR\", \"xoo\", \"xoo\");\n+    .addActiveRule(\"xoo\", \"OneIssuePerProject\", null, \"One issue per module\", \"MINOR\", \"xoo\", \"xoo\");\n \n   @Test\n   public void scanTempProject() throws IOException {"
    },
    {
        "commit_id": "2795319a14d807340954ee81a14fff07fafed27a",
        "commit_message": "NO-JIRA Fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2795319a14d807340954ee81a14fff07fafed27a",
        "buggy_code": ".map(c -> c.isNullable() ? \"COALESCE(%s, '')\".formatted(c.name()) : c.name())",
        "fixed_code": ".map(c -> Boolean.TRUE.equals(c.isNullable()) ? \"COALESCE(%s, '')\".formatted(c.name()) : c.name())",
        "patch": "@@ -136,7 +136,7 @@ private String createSqlStatement() {\n      */\n     if (unique && !dialect.supportsNullNotDistinct() && PostgreSql.ID.equals(dialect.getId())) {\n       sql.append(columns.stream()\n-        .map(c -> c.isNullable() ? \"COALESCE(%s, '')\".formatted(c.name()) : c.name())\n+        .map(c -> Boolean.TRUE.equals(c.isNullable()) ? \"COALESCE(%s, '')\".formatted(c.name()) : c.name())\n         .collect(Collectors.joining(\", \")));\n     } else {\n       sql.append(columns.stream()"
    },
    {
        "commit_id": "feece88ecc51ea26e3373c3f51160e8c804c6493",
        "commit_message": "SONAR-20661 Return functional issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/feece88ecc51ea26e3373c3f51160e8c804c6493",
        "buggy_code": ".setCreatedAt(NOW)",
        "fixed_code": ".setIssueCreationTime(NOW)",
        "patch": "@@ -185,7 +185,7 @@ public void wsExecution_whenValidProjectKeyAndOneHotspotOnBranch_shouldReturnOne\n     IssueDto issueDto = issueDbTester.insertHotspot(p -> p.setSeverity(\"MINOR\")\n       .setMessage(\"message\")\n       .setAssigneeUuid(assignee.getUuid())\n-      .setCreatedAt(NOW)\n+      .setIssueCreationTime(NOW)\n       .setStatus(Issue.STATUS_TO_REVIEW)\n       .setLocations(mainLocation.build()));\n "
    },
    {
        "commit_id": "feece88ecc51ea26e3373c3f51160e8c804c6493",
        "commit_message": "SONAR-20661 Return functional issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/feece88ecc51ea26e3373c3f51160e8c804c6493",
        "buggy_code": ".setCreatedAt(NOW)",
        "fixed_code": ".setIssueCreationTime(NOW)",
        "patch": "@@ -201,7 +201,7 @@ public void givenValidProjectKeyAndOneIssueOnBranch_returnOneIssue() throws IOEx\n     IssueDto issueDto = issueDbTester.insertIssue(rule, p -> p.setSeverity(\"MINOR\")\n       .setManualSeverity(true)\n       .setMessage(\"message\")\n-      .setCreatedAt(NOW)\n+      .setIssueCreationTime(NOW)\n       .setStatus(Issue.STATUS_RESOLVED)\n       .setLocations(mainLocation.build())\n       .setType(Common.RuleType.BUG.getNumber()));"
    },
    {
        "commit_id": "feece88ecc51ea26e3373c3f51160e8c804c6493",
        "commit_message": "SONAR-20661 Return functional issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/feece88ecc51ea26e3373c3f51160e8c804c6493",
        "buggy_code": ".setCreatedAt(NOW)",
        "fixed_code": ".setIssueCreationTime(NOW)",
        "patch": "@@ -233,7 +233,7 @@ public void givenValidProjectKeyAndOneTaintOnBranch_returnOneTaint_WithMetadataS\n       .setManualSeverity(true)\n       .setMessage(\"message\")\n       .setMessageFormattings(DbIssues.MessageFormattings.newBuilder().addMessageFormatting(MESSAGE_FORMATTING).build())\n-      .setCreatedAt(NOW)\n+      .setIssueCreationTime(NOW)\n       .setStatus(Issue.STATUS_OPEN)\n       .setLocations(mainLocation.build())\n       .setType(Common.RuleType.VULNERABILITY.getNumber()));"
    },
    {
        "commit_id": "53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "commit_message": "SONAR-20317 fixed the issue where creating a portfolio would insert two entries into audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "buggy_code": "dbClient.componentDao().insertOnMainBranch(db.getSession(), fileDto);",
        "fixed_code": "dbClient.componentDao().insertWithAudit(db.getSession(), fileDto);",
        "patch": "@@ -94,7 +94,7 @@ public void giveProjectBranchAvailable_projectUuidShouldBeCalculatedFromThere()\n     dbClient.branchDao().insert(db.getSession(), branchDto);\n \n     ComponentDto fileDto = getComponentDto(projectKey + \":\" + mainFile, branchDto.getUuid());\n-    dbClient.componentDao().insertOnMainBranch(db.getSession(), fileDto);\n+    dbClient.componentDao().insertWithAudit(db.getSession(), fileDto);\n \n     insertAnticipatedTransition(projectUuid, mainFile);\n     insertAnticipatedTransition(projectUuid, \"file2.js\");"
    },
    {
        "commit_id": "53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "commit_message": "SONAR-20317 fixed the issue where creating a portfolio would insert two entries into audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "buggy_code": "dbClient.portfolioDao().insert(dbSession, portfolioDto);",
        "fixed_code": "dbClient.portfolioDao().insertWithAudit(dbSession, portfolioDto);",
        "patch": "@@ -270,7 +270,7 @@ public ComponentDto insertComponentAndPortfolio(ComponentDto componentDto, boole\n \n     PortfolioDto portfolioDto = toPortfolioDto(componentDto, System2.INSTANCE.now());\n     portfolioPopulator.accept(portfolioDto);\n-    dbClient.portfolioDao().insert(dbSession, portfolioDto);\n+    dbClient.portfolioDao().insertWithAudit(dbSession, portfolioDto);\n     db.commit();\n     return componentDto;\n   }"
    },
    {
        "commit_id": "53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "commit_message": "SONAR-20317 fixed the issue where creating a portfolio would insert two entries into audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "buggy_code": "dbClient.componentDao().insertOnMainBranch(dbSession, new ComponentDto()",
        "fixed_code": "dbClient.componentDao().insertWithAudit(dbSession, new ComponentDto()",
        "patch": "@@ -136,7 +136,7 @@ public void throws_NotFoundException_if_component_does_not_exist() {\n   public void fails_with_BRE_if_component_is_not_root() {\n     String uuid = \"uuid\";\n     String key = \"key\";\n-    dbClient.componentDao().insertOnMainBranch(dbSession, new ComponentDto()\n+    dbClient.componentDao().insertWithAudit(dbSession, new ComponentDto()\n       .setUuid(uuid)\n       .setUuidPath(uuid + \".\")\n       .setBranchUuid(\"branchUuid\")"
    },
    {
        "commit_id": "53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "commit_message": "SONAR-20317 fixed the issue where creating a portfolio would insert two entries into audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "buggy_code": "dbClient.componentDao().insertOnMainBranch(dbTester.getSession(), file);",
        "fixed_code": "dbClient.componentDao().insertWithAudit(dbTester.getSession(), file);",
        "patch": "@@ -67,7 +67,7 @@ public class ScmActionIT {\n   public void setUp() {\n     project = dbTester.components().insertPrivateProject(PROJECT_UUID);\n     file = ComponentTesting.newFileDto(project.getMainBranchComponent(), null, FILE_UUID).setKey(FILE_KEY);\n-    dbClient.componentDao().insertOnMainBranch(dbTester.getSession(), file);\n+    dbClient.componentDao().insertWithAudit(dbTester.getSession(), file);\n     dbTester.getSession().commit();\n   }\n "
    },
    {
        "commit_id": "53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "commit_message": "SONAR-20317 fixed the issue where creating a portfolio would insert two entries into audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d745f5ab9fee51e251d3f0c8998b18b1a34ab4",
        "buggy_code": "dbClient.portfolioDao().insert(dbSession, portfolioDto);",
        "fixed_code": "dbClient.portfolioDao().insert(dbSession, portfolioDto, false);",
        "patch": "@@ -138,7 +138,7 @@ public ComponentCreationData createWithoutCommit(DbSession dbSession, ComponentC\n       }\n     } else if (isPortfolio(componentDto)) {\n       portfolioDto = toPortfolioDto(componentDto, now);\n-      dbClient.portfolioDao().insert(dbSession, portfolioDto);\n+      dbClient.portfolioDao().insert(dbSession, portfolioDto, false);\n       permissionTemplateService.applyDefaultToNewComponent(dbSession, portfolioDto, componentCreationParameters.userUuid());\n     } else {\n       throw new IllegalArgumentException(\"Component \" + componentDto + \" is not a top level entity\");"
    },
    {
        "commit_id": "f770797718c5952131f344aeda00a2a03420f05d",
        "commit_message": " SONAR-20758 fix FP log pollution",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f770797718c5952131f344aeda00a2a03420f05d",
        "buggy_code": ".containsExactly(\"Emails for token expiration notification have not been sent because email settings are not configured.\");",
        "fixed_code": ".contains(\"Emails for token expiration notification have not been sent because email settings are not configured.\");",
        "patch": "@@ -54,7 +54,7 @@ public void no_notification_when_email_setting_is_not_set() {\n     underTest.sendNotifications();\n     assertThat(logTester.getLogs(Level.DEBUG))\n       .extracting(LogAndArguments::getFormattedMsg)\n-      .containsExactly(\"Emails for token expiration notification have not been sent because email settings are not configured.\");\n+      .contains(\"Emails for token expiration notification have not been sent because email settings are not configured.\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "c18b48ce701d7b9f646681a3c1cc707e34abce2d",
        "commit_message": "SONAR-20601 Fix `returns_first_page_with_100_results_by_default` test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c18b48ce701d7b9f646681a3c1cc707e34abce2d",
        "buggy_code": ".setKee(\"uuid_\" + randomAlphabetic(5))",
        "fixed_code": ".setKee(Uuids.createFast())",
        "patch": "@@ -60,7 +60,7 @@ public static IssueDto newIssue(RuleDto rule, String branchUuid, String projectK\n     //checkArgument(file.branchUuid().equals(branchUuid), \"The file doesn't belong to the project\");\n \n     return new IssueDto()\n-      .setKee(\"uuid_\" + randomAlphabetic(5))\n+      .setKee(Uuids.createFast())\n       .setRule(rule)\n       .setType(rule.getType())\n       .setProjectUuid(branchUuid)"
    },
    {
        "commit_id": "a3e3f905dc3231d48beb5b9abb5ae27120ef7b61",
        "commit_message": "SONAR-20552 Introduce new generic issue import format in scanner",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a3e3f905dc3231d48beb5b9abb5ae27120ef7b61",
        "buggy_code": "assertThat(repo.rules()).hasSize(1);",
        "fixed_code": "assertThat(repo.rules()).hasSize(2);",
        "patch": "@@ -102,7 +102,7 @@ public void define_xooExternal_rules() {\n     assertThat(repo).isNotNull();\n     assertThat(repo.name()).isEqualTo(\"XooEngine\");\n     assertThat(repo.language()).isEqualTo(\"xoo\");\n-    assertThat(repo.rules()).hasSize(1);\n+    assertThat(repo.rules()).hasSize(2);\n   }\n \n   @Test"
    },
    {
        "commit_id": "2654a0b37db47aa3a2581198728c44fa30430d00",
        "commit_message": "SONAR-20591 Fix notification daemon test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2654a0b37db47aa3a2581198728c44fa30430d00",
        "buggy_code": "verify(notificationService, timeout(2000)).deliver(notification1);",
        "fixed_code": "verify(notificationService, timeout(2000)).deliver(notification4);",
        "patch": "@@ -94,7 +94,7 @@ public void notifications_are_processed_one_by_one_even_with_new_API() {\n       .thenReturn(null);\n \n     underTest.start();\n-    verify(notificationService, timeout(2000)).deliver(notification1);\n+    verify(notificationService, timeout(2000)).deliver(notification4);\n \n     inOrder.verify(notificationService).deliverEmails(singleton(notification1));\n     inOrder.verify(notificationService).deliver(notification1);"
    },
    {
        "commit_id": "e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "commit_message": "SONAR-20424 Store and populate within issue `clean_code_attribute`",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "buggy_code": "assertThat(dto.getCleanCodeAttribute()).isEqualTo(CleanCodeAttribute.CLEAR);",
        "fixed_code": "assertThat(dto.getEffectiveCleanCodeAttribute()).isEqualTo(CleanCodeAttribute.CLEAR);",
        "patch": "@@ -138,7 +138,7 @@ public void set_rule() {\n     assertThat(dto.getRuleRepo()).isEqualTo(\"java\");\n     assertThat(dto.getRule()).isEqualTo(\"AvoidCycle\");\n     assertThat(dto.getRuleKey()).hasToString(\"java:AvoidCycle\");\n-    assertThat(dto.getCleanCodeAttribute()).isEqualTo(CleanCodeAttribute.CLEAR);\n+    assertThat(dto.getEffectiveCleanCodeAttribute()).isEqualTo(CleanCodeAttribute.CLEAR);\n     assertThat(dto.getLanguage()).isEqualTo(\"xoo\");\n     assertThat(dto.isExternal()).isTrue();\n   }"
    },
    {
        "commit_id": "e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "commit_message": "SONAR-20424 Store and populate within issue `clean_code_attribute`",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "buggy_code": "CleanCodeAttribute cleanCodeAttribute = dto.getCleanCodeAttribute();",
        "fixed_code": "CleanCodeAttribute cleanCodeAttribute = dto.getEffectiveCleanCodeAttribute();",
        "patch": "@@ -174,7 +174,7 @@ private void addMandatoryFieldsToIssueBuilder(Issue.Builder issueBuilder, IssueD\n     issueBuilder.setKey(dto.getKey());\n     issueBuilder.setType(Common.RuleType.forNumber(dto.getType()));\n \n-    CleanCodeAttribute cleanCodeAttribute = dto.getCleanCodeAttribute();\n+    CleanCodeAttribute cleanCodeAttribute = dto.getEffectiveCleanCodeAttribute();\n     if (cleanCodeAttribute != null) {\n       issueBuilder.setCleanCodeAttribute(Common.CleanCodeAttribute.valueOf(cleanCodeAttribute.name()));\n       issueBuilder.setCleanCodeAttributeCategory(Common.CleanCodeAttributeCategory.valueOf(cleanCodeAttribute.getAttributeCategory().name()));"
    },
    {
        "commit_id": "e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "commit_message": "SONAR-20424 Store and populate within issue `clean_code_attribute`",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e01e97bcbcd8716eca619fdec233de5b2f5e7be2",
        "buggy_code": "CleanCodeAttribute cleanCodeAttribute = issueDto.getCleanCodeAttribute();",
        "fixed_code": "CleanCodeAttribute cleanCodeAttribute = issueDto.getEffectiveCleanCodeAttribute();",
        "patch": "@@ -96,7 +96,7 @@ public TaintVulnerabilityLite generateIssueMessage(IssueDto issueDto, RuleDto ru\n       taintBuilder.setSeverity(Common.Severity.valueOf(issueDto.getSeverity()));\n     }\n     taintBuilder.setType(Common.RuleType.forNumber(issueDto.getType()));\n-    CleanCodeAttribute cleanCodeAttribute = issueDto.getCleanCodeAttribute();\n+    CleanCodeAttribute cleanCodeAttribute = issueDto.getEffectiveCleanCodeAttribute();\n     String cleanCodeAttributeString = cleanCodeAttribute != null ? cleanCodeAttribute.name() : null;\n     String cleanCodeAttributeCategoryString = cleanCodeAttribute != null ? cleanCodeAttribute.getAttributeCategory().name() : null;\n     if (cleanCodeAttributeString != null) {"
    },
    {
        "commit_id": "510538b082c3fab1f64112ec59985420b1affa73",
        "commit_message": "NO-JIRA fix json merge patch content type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/510538b082c3fab1f64112ec59985420b1affa73",
        "buggy_code": "public static final String JSON_MERGE_PATCH_CONTENT_TYPE = \"application/json-merge-patch+json\";",
        "fixed_code": "public static final String JSON_MERGE_PATCH_CONTENT_TYPE = \"application/merge-patch+json\";",
        "patch": "@@ -25,7 +25,7 @@ public class WebApiEndpoints {\n   public static final String HEALTH_ENDPOINT = SYSTEM_ENDPOINTS + \"/health\";\n   public static final String USER_ENDPOINT = \"/users\";\n   public static final String GITHUB_PERMISSIONS_ENDPOINT = \"/github-permission-mappings\";\n-  public static final String JSON_MERGE_PATCH_CONTENT_TYPE = \"application/json-merge-patch+json\";\n+  public static final String JSON_MERGE_PATCH_CONTENT_TYPE = \"application/merge-patch+json\";\n \n   private WebApiEndpoints() {\n   }"
    },
    {
        "commit_id": "a2e9af8f2ed602ccc96eebe74a007c4b8a4e8ca2",
        "commit_message": "SONAR-20285 PATCH endpoint to update users\n\nCo-authored-by: Aurelien Poscia <aurelien.poscia@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a2e9af8f2ed602ccc96eebe74a007c4b8a4e8ca2",
        "buggy_code": "public record UserSearchResult(UserDto userDto, boolean managed, Optional<String> avatar, Collection<String> groups, int tokensCount) {",
        "fixed_code": "public record UserInformation(UserDto userDto, boolean managed, Optional<String> avatar, Collection<String> groups, int tokensCount) {",
        "patch": "@@ -23,5 +23,5 @@\n import java.util.Optional;\n import org.sonar.db.user.UserDto;\n \n-public record UserSearchResult(UserDto userDto, boolean managed, Optional<String> avatar, Collection<String> groups, int tokensCount) {\n+public record UserInformation(UserDto userDto, boolean managed, Optional<String> avatar, Collection<String> groups, int tokensCount) {\n }"
    },
    {
        "commit_id": "a2e9af8f2ed602ccc96eebe74a007c4b8a4e8ca2",
        "commit_message": "SONAR-20285 PATCH endpoint to update users\n\nCo-authored-by: Aurelien Poscia <aurelien.poscia@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a2e9af8f2ed602ccc96eebe74a007c4b8a4e8ca2",
        "buggy_code": "return String.format(\"Value %s for field %s was rejected. Error: %s\", rejectedValueAsString, fieldName, defaultMessage);",
        "fixed_code": "return String.format(\"Value %s for field %s was rejected. Error: %s.\", rejectedValueAsString, fieldName, defaultMessage);",
        "patch": "@@ -63,7 +63,7 @@ private static String handleFieldError(FieldError fieldError) {\n     String fieldName = fieldError.getField();\n     String rejectedValueAsString = Optional.ofNullable(fieldError.getRejectedValue()).map(Object::toString).orElse(\"{}\");\n     String defaultMessage = fieldError.getDefaultMessage();\n-    return String.format(\"Value %s for field %s was rejected. Error: %s\", rejectedValueAsString, fieldName, defaultMessage);\n+    return String.format(\"Value %s for field %s was rejected. Error: %s.\", rejectedValueAsString, fieldName, defaultMessage);\n   }\n \n   @ExceptionHandler({ServerException.class, ForbiddenException.class, UnauthorizedException.class, BadRequestException.class})"
    },
    {
        "commit_id": "c0f1b62dc8628db19cc418e361ca4c14c9a700f8",
        "commit_message": "SONAR-19888 Fix tests usage on PermissionIndexerTester",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c0f1b62dc8628db19cc418e361ca4c14c9a700f8",
        "buggy_code": "allowAnyoneOnPortfolios(view, subView);",
        "fixed_code": "allowAnyoneOnPortfolios(view);",
        "patch": "@@ -282,7 +282,7 @@ public void search_by_sub_view_uuid() {\n     ComponentDto subView = db.components().insertComponent(ComponentTesting.newSubPortfolio(view, \"SV1\", \"MySubView\"));\n     db.components().insertComponent(newProjectCopy(project, subView));\n     allowAnyoneOnProjects(projectData.getProjectDto());\n-    allowAnyoneOnPortfolios(view, subView);\n+    allowAnyoneOnPortfolios(view);\n     indexIssuesAndViews();\n \n     ws.newRequest()"
    },
    {
        "commit_id": "41ab6192d3d537d75f37994bf9c223d365366ce1",
        "commit_message": "SONAR-19324 Fix api/projects/search low performances",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41ab6192d3d537d75f37994bf9c223d365366ce1",
        "buggy_code": "List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, 0, CeTaskQuery.MAX_COMPONENT_UUIDS);",
        "fixed_code": "List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, forPage(1).andSize(CeTaskQuery.MAX_COMPONENT_UUIDS));",
        "patch": "@@ -298,7 +298,7 @@ private List<EntityDto> loadEntities(DbSession dbSession, String componentQuery)\n       .setNameOrKeyQuery(componentQuery)\n       .setQualifiers(POSSIBLE_QUALIFIERS)\n       .build();\n-    List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, 0, CeTaskQuery.MAX_COMPONENT_UUIDS);\n+    List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, forPage(1).andSize(CeTaskQuery.MAX_COMPONENT_UUIDS));\n     return dbClient.entityDao().selectByKeys(dbSession, componentDtos.stream().map(ComponentDto::getKey).collect(toSet()));\n   }\n "
    },
    {
        "commit_id": "e8ff3e583a093ba12feb631b0c2bc290cf411e82",
        "commit_message": "SONAR-20040 Fix response example for api/sources/issue_snippets",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8ff3e583a093ba12feb631b0c2bc290cf411e82",
        "buggy_code": ".setResponseExample(getResource(getClass(), \"example-show.json\"))",
        "fixed_code": ".setResponseExample(getResource(getClass(), \"example-issue-snippets.json\"))",
        "patch": "@@ -72,7 +72,7 @@ public void define(WebService.NewController controller) {\n       .setDescription(\"Get code snippets involved in an issue or hotspot. Requires 'See Source Code permission' permission on the project<br/>\")\n       .setSince(\"7.8\")\n       .setInternal(true)\n-      .setResponseExample(getResource(getClass(), \"example-show.json\"))\n+      .setResponseExample(getResource(getClass(), \"example-issue-snippets.json\"))\n       .setHandler(this);\n \n     action"
    },
    {
        "commit_id": "30abc015459aecb07ea2e3fba2b4bba52a652f74",
        "commit_message": "SONAR-19372 Add a new issue visitor in order to apply anticipated transitions to issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30abc015459aecb07ea2e3fba2b4bba52a652f74",
        "buggy_code": "} else if (!issue.isNew() && diffs != null) {",
        "fixed_code": "} else if ((!issue.isNew() || issue.hasAnticipatedTransitions()) && diffs != null) {",
        "patch": "@@ -44,7 +44,7 @@ public void insertChanges(IssueChangeMapper mapper, DefaultIssue issue, UuidFact\n         changeDto.setProjectUuid(issue.projectUuid());\n         mapper.insert(changeDto);\n       }\n-    } else if (!issue.isNew() && diffs != null) {\n+    } else if ((!issue.isNew() || issue.hasAnticipatedTransitions()) && diffs != null) {\n       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs, issue.projectUuid());\n       changeDto.setUuid(uuidFactory.create());\n       changeDto.setProjectUuid(issue.projectUuid());"
    },
    {
        "commit_id": "554fd8eb15f00f07886129d71922d202f8dda96b",
        "commit_message": "SONAR-19850 Fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/554fd8eb15f00f07886129d71922d202f8dda96b",
        "buggy_code": "String defaultBranchName, String newCodeDefinitionType, String newCodeDefinitionValue) {",
        "fixed_code": "String defaultBranchName, String newCodeDefinitionType, @Nullable String newCodeDefinitionValue) {",
        "patch": "@@ -71,7 +71,7 @@ public NewCodeDefinitionResolver(DbClient dbClient, PlatformEditionProvider edit\n   }\n \n   public void createNewCodeDefinition(DbSession dbSession, String projectUuid, String mainBranchUuid,\n-    String defaultBranchName, String newCodeDefinitionType, String newCodeDefinitionValue) {\n+    String defaultBranchName, String newCodeDefinitionType, @Nullable String newCodeDefinitionValue) {\n \n     boolean isCommunityEdition = editionProvider.get().filter(EditionProvider.Edition.COMMUNITY::equals).isPresent();\n     NewCodePeriodType newCodePeriodType = parseNewCodeDefinitionType(newCodeDefinitionType);"
    },
    {
        "commit_id": "d5110d4477e869f5318a63b20b5385ac84416666",
        "commit_message": "SONAR-19850 Apply validation fixes\n\nSONAR-19850 Fix an issue where main branch was treated as orphan branch\nSONAR-19850 Fix an issue where emails with reports were not sent to any receipients\nSONAR-19850 Fix bug with reference branch as main branch\nSONAR-19850 Add warning on unanalyzed branches\nSONAR-19850 Fix portfolio refresh when change of main branch of project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5110d4477e869f5318a63b20b5385ac84416666",
        "buggy_code": "void onProjectBranchesChanged(Set<Project> projects);",
        "fixed_code": "void onProjectBranchesChanged(Set<Project> projects, Set<String> impactedBranches);",
        "patch": "@@ -32,7 +32,7 @@ public interface ProjectLifeCycleListener {\n   /**\n    * This method is called after the specified projects have branches deleted or main branch changed.\n    */\n-  void onProjectBranchesChanged(Set<Project> projects);\n+  void onProjectBranchesChanged(Set<Project> projects, Set<String> impactedBranches);\n \n   /**\n    * This method is called after the specified projects' keys have been modified."
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "defaultBranchNameResolver, true);",
        "fixed_code": "defaultBranchNameResolver);",
        "patch": "@@ -93,7 +93,7 @@ public class ImportAzureProjectActionIT {\n \n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), i18n, System2.INSTANCE,\n     mock(PermissionTemplateService.class), new FavoriteUpdater(db.getDbClient()), new TestIndexers(), new SequenceUuidFactory(),\n-    defaultBranchNameResolver, true);\n+    defaultBranchNameResolver);\n \n   private final Encryption encryption = mock(Encryption.class);\n   private final ImportHelper importHelper = new ImportHelper(db.getDbClient(), userSession);"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "defaultBranchNameResolver, true);",
        "fixed_code": "defaultBranchNameResolver);",
        "patch": "@@ -93,7 +93,7 @@ public class ImportBitbucketCloudRepoActionIT {\n   DefaultBranchNameResolver defaultBranchNameResolver = mock(DefaultBranchNameResolver.class);\n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), i18n, System2.INSTANCE,\n     mock(PermissionTemplateService.class), new FavoriteUpdater(db.getDbClient()), new TestIndexers(), new SequenceUuidFactory(),\n-    defaultBranchNameResolver, true);\n+    defaultBranchNameResolver);\n \n   private final ImportHelper importHelper = new ImportHelper(db.getDbClient(), userSession);\n   private final ProjectKeyGenerator projectKeyGenerator = mock(ProjectKeyGenerator.class);"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "defaultBranchNameResolver, true);",
        "fixed_code": "defaultBranchNameResolver);",
        "patch": "@@ -100,7 +100,7 @@ public class ImportBitbucketServerProjectActionIT {\n \n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), i18n, System2.INSTANCE,\n     mock(PermissionTemplateService.class), new FavoriteUpdater(db.getDbClient()), new TestIndexers(), new SequenceUuidFactory(),\n-    defaultBranchNameResolver, true);\n+    defaultBranchNameResolver);\n \n   private final ImportHelper importHelper = new ImportHelper(db.getDbClient(), userSession);\n   private final ProjectKeyGenerator projectKeyGenerator = mock(ProjectKeyGenerator.class);"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "defaultBranchNameResolver, true);",
        "fixed_code": "defaultBranchNameResolver);",
        "patch": "@@ -94,7 +94,7 @@ public class ImportGithubProjectActionIT {\n   private final PermissionTemplateService permissionTemplateService = mock(PermissionTemplateService.class);\n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), mock(I18n.class), System2.INSTANCE,\n     permissionTemplateService, new FavoriteUpdater(db.getDbClient()), new TestIndexers(), new SequenceUuidFactory(),\n-    defaultBranchNameResolver, true);\n+    defaultBranchNameResolver);\n \n   private final ImportHelper importHelper = new ImportHelper(db.getDbClient(), userSession);\n   private final ProjectKeyGenerator projectKeyGenerator = mock(ProjectKeyGenerator.class);"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "defaultBranchNameResolver, true);",
        "fixed_code": "defaultBranchNameResolver);",
        "patch": "@@ -84,7 +84,7 @@ public class ImportGitLabProjectActionIT {\n \n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), mock(I18n.class), System2.INSTANCE,\n     mock(PermissionTemplateService.class), new FavoriteUpdater(db.getDbClient()), new TestIndexers(), new SequenceUuidFactory(),\n-    defaultBranchNameResolver, true);\n+    defaultBranchNameResolver);\n \n   private final GitlabHttpClient gitlabHttpClient = mock(GitlabHttpClient.class);\n   private final ImportHelper importHelper = new ImportHelper(db.getDbClient(), userSession);"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "new FavoriteUpdater(db.getDbClient()), projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true);",
        "fixed_code": "new FavoriteUpdater(db.getDbClient()), projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver);",
        "patch": "@@ -93,7 +93,7 @@ public class ReportSubmitterIT {\n   private final PermissionTemplateService permissionTemplateService = mock(PermissionTemplateService.class);\n \n   private final ComponentUpdater componentUpdater = new ComponentUpdater(db.getDbClient(), mock(I18n.class), mock(System2.class), permissionTemplateService,\n-    new FavoriteUpdater(db.getDbClient()), projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true);\n+    new FavoriteUpdater(db.getDbClient()), projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver);\n   private final BranchSupport ossEditionBranchSupport = new BranchSupport(null);\n \n   private final ReportSubmitter underTest = new ReportSubmitter(queue, userSession, componentUpdater, permissionTemplateService, db.getDbClient(), ossEditionBranchSupport,"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true);",
        "fixed_code": "projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver);",
        "patch": "@@ -80,7 +80,7 @@ public class ComponentUpdaterIT {\n   private final ComponentUpdater underTest = new ComponentUpdater(db.getDbClient(), i18n, system2,\n     permissionTemplateService,\n     new FavoriteUpdater(db.getDbClient()),\n-    projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true);\n+    projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver);\n \n   @Before\n   public void before() {"
    },
    {
        "commit_id": "f83091c81a09ba469e1e6b53f1da77c726d28336",
        "commit_message": "SONAR-19850 Fix tests after enabling different uuids for project and branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f83091c81a09ba469e1e6b53f1da77c726d28336",
        "buggy_code": "projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true),",
        "fixed_code": "projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver),",
        "patch": "@@ -107,7 +107,7 @@ public class CreateActionIT {\n     new CreateAction(\n       db.getDbClient(), userSession,\n       new ComponentUpdater(db.getDbClient(), i18n, system2, permissionTemplateService, new FavoriteUpdater(db.getDbClient()),\n-        projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver, true),\n+        projectIndexers, new SequenceUuidFactory(), defaultBranchNameResolver),\n       projectDefaultVisibility, defaultBranchNameResolver, newCodeDefinitionResolver));\n \n   @Before"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "void onProjectBranchesDeleted(Set<Project> projects);",
        "fixed_code": "void onProjectBranchesChanged(Set<Project> projects);",
        "patch": "@@ -40,7 +40,7 @@ public interface ProjectLifeCycleListeners {\n    * This method ensures all {@link ProjectLifeCycleListener} implementations are called, even if one or more of\n    * them fail with an exception.\n    */\n-  void onProjectBranchesDeleted(Set<Project> projects);\n+  void onProjectBranchesChanged(Set<Project> projects);\n \n   /**\n    * This method is called after the specified project's key has been changed and will call method"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "public void onProjectBranchesDeleted(Set<Project> projects) {",
        "fixed_code": "public void onProjectBranchesChanged(Set<Project> projects) {",
        "patch": "@@ -61,7 +61,7 @@ public void onProjectsDeleted(Set<DeletedProject> projects) {\n   }\n \n   @Override\n-  public void onProjectBranchesDeleted(Set<Project> projects) {\n+  public void onProjectBranchesChanged(Set<Project> projects) {\n     checkNotNull(projects, \"projects can't be null\");\n     if (projects.isEmpty()) {\n       return;"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "verify(projectLifeCycleListeners).onProjectBranchesDeleted(singleton(Project.fromProjectDtoWithTags(project)));",
        "fixed_code": "verify(projectLifeCycleListeners).onProjectBranchesChanged(singleton(Project.fromProjectDtoWithTags(project)));",
        "patch": "@@ -72,7 +72,7 @@ public void delete_branch() {\n       .execute();\n \n     verifyDeletedKey(\"branch1\");\n-    verify(projectLifeCycleListeners).onProjectBranchesDeleted(singleton(Project.fromProjectDtoWithTags(project)));\n+    verify(projectLifeCycleListeners).onProjectBranchesChanged(singleton(Project.fromProjectDtoWithTags(project)));\n   }\n \n   @Test"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "verify(projectLifeCycleListeners).onProjectBranchesDeleted(Set.of(project));",
        "fixed_code": "verify(projectLifeCycleListeners).onProjectBranchesChanged(Set.of(project));",
        "patch": "@@ -230,7 +230,7 @@ public void setNewMainBranch_shouldConfigureNewBranchAsMainBranchAndKeepThePrevi\n \n   private void checkCallToProjectLifeCycleListenersOnProjectBranchesChanges(ProjectDto projectDto) {\n     Project project = Project.from(projectDto);\n-    verify(projectLifeCycleListeners).onProjectBranchesDeleted(Set.of(project));\n+    verify(projectLifeCycleListeners).onProjectBranchesChanged(Set.of(project));\n   }\n \n   private void checkNewMainBranch(String projectUuid, String newBranchUuid) {"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "projectLifeCycleListeners.onProjectBranchesDeleted(singleton(Project.fromProjectDtoWithTags(project)));",
        "fixed_code": "projectLifeCycleListeners.onProjectBranchesChanged(singleton(Project.fromProjectDtoWithTags(project)));",
        "patch": "@@ -86,7 +86,7 @@ public void handle(Request request, Response response) throws Exception {\n         \"Branch '%s' not found for project '%s'\", branchKey, projectKey);\n \n       componentCleanerService.deleteBranch(dbSession, branch);\n-      projectLifeCycleListeners.onProjectBranchesDeleted(singleton(Project.fromProjectDtoWithTags(project)));\n+      projectLifeCycleListeners.onProjectBranchesChanged(singleton(Project.fromProjectDtoWithTags(project)));\n       response.noContent();\n     }\n   }"
    },
    {
        "commit_id": "963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "commit_message": "SONAR-19850 Fix name of method in ProjectLifeCycleListeners",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/963ebc53266c3ebf6ec7a52b67a933adaaf3cf89",
        "buggy_code": "projectLifeCycleListeners.onProjectBranchesDeleted(singleton(Project.from(projectDto)));",
        "fixed_code": "projectLifeCycleListeners.onProjectBranchesChanged(singleton(Project.from(projectDto)));",
        "patch": "@@ -122,7 +122,7 @@ private static boolean checkAndLogIfNewBranchIsAlreadyMainBranch(BranchDto oldMa\n   }\n \n   private void refreshApplicationsAndPortfoliosComputedByProject(ProjectDto projectDto) {\n-    projectLifeCycleListeners.onProjectBranchesDeleted(singleton(Project.from(projectDto)));\n+    projectLifeCycleListeners.onProjectBranchesChanged(singleton(Project.from(projectDto)));\n   }\n \n   private void updateNewMainBranch(DbSession dbSession, BranchDto newMainBranch) {"
    },
    {
        "commit_id": "4bd314ed8127bed0795021dbd01a5ca9c6dc0b45",
        "commit_message": "SONAR-19728 Remove ordering from query, fetch issue keys",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4bd314ed8127bed0795021dbd01a5ca9c6dc0b45",
        "buggy_code": "List<IssueDto> selectByQuery(@Param(\"query\") IssueListQuery issueListQuery, @Param(\"pagination\") Pagination pagination);",
        "fixed_code": "List<String> selectIssueKeysByQuery(@Param(\"query\") IssueListQuery issueListQuery, @Param(\"pagination\") Pagination pagination);",
        "patch": "@@ -77,5 +77,5 @@ List<IssueDto> selectByComponentUuidPaginated(@Param(\"componentUuid\") String com\n \n   List<String> selectRecentlyClosedIssues(@Param(\"queryParams\") IssueQueryParams issueQueryParams);\n \n-  List<IssueDto> selectByQuery(@Param(\"query\") IssueListQuery issueListQuery, @Param(\"pagination\") Pagination pagination);\n+  List<String> selectIssueKeysByQuery(@Param(\"query\") IssueListQuery issueListQuery, @Param(\"pagination\") Pagination pagination);\n }"
    },
    {
        "commit_id": "9d22c3b21728bff64833e66087fa15e87c2d6a7d",
        "commit_message": "SONAR-19971 Fix custom logo width",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9d22c3b21728bff64833e66087fa15e87c2d6a7d",
        "buggy_code": ".description(\"Width in pixels, given that the height of the the image is constrained to 30px.\")",
        "fixed_code": ".description(\"Width in pixels, constrained to 150px (the height of the image is constrained to 40px).\")",
        "patch": "@@ -141,7 +141,7 @@ public static List<PropertyDefinition> all() {\n       PropertyDefinition.builder(WebConstants.SONAR_LF_LOGO_WIDTH_PX)\n         .deprecatedKey(\"sonar.branding.image.width\")\n         .name(\"Width of image in pixels\")\n-        .description(\"Width in pixels, given that the height of the the image is constrained to 30px.\")\n+        .description(\"Width in pixels, constrained to 150px (the height of the image is constrained to 40px).\")\n         .category(CoreProperties.CATEGORY_GENERAL)\n         .subCategory(CoreProperties.SUBCATEGORY_LOOKNFEEL)\n         .build(),"
    },
    {
        "commit_id": "9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "commit_message": "SONAR-19850 Fix permissions on tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "buggy_code": "ComponentDto project = db.components().insertPrivateProject().getMainBranchComponent();",
        "fixed_code": "ProjectDto project = db.components().insertPrivateProject().getProjectDto();",
        "patch": "@@ -369,7 +369,7 @@ public void return_error_on_directory() throws ParseException {\n \n   @Test\n   public void return_error_on_private_project_without_token() throws ParseException {\n-    ComponentDto project = db.components().insertPrivateProject().getMainBranchComponent();\n+    ProjectDto project = db.components().insertPrivateProject().getProjectDto();\n     UserDto user = db.users().insertUser();\n     userSession.logIn(user).addProjectPermission(USER, project);\n     MetricDto metric = db.measures().insertMetric(m -> m.setKey(BUGS_KEY).setValueType(INT.name()));"
    },
    {
        "commit_id": "9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "commit_message": "SONAR-19850 Fix permissions on tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "buggy_code": "ComponentDto project = db.components().insertPrivateProject().getMainBranchComponent();",
        "fixed_code": "ProjectDto project = db.components().insertPrivateProject().getProjectDto();",
        "patch": "@@ -272,7 +272,7 @@ public void return_error_on_directory() throws ParseException {\n \n   @Test\n   public void return_error_on_private_project() throws ParseException {\n-    ComponentDto project = db.components().insertPrivateProject().getMainBranchComponent();\n+    ProjectDto project = db.components().insertPrivateProject().getProjectDto();\n     UserDto user = db.users().insertUser();\n     userSession.logIn(user).addProjectPermission(USER, project);\n "
    },
    {
        "commit_id": "9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "commit_message": "SONAR-19850 Fix permissions on tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9b9c60eda5772ab10d6367a523d5f9238b9202a6",
        "buggy_code": "userSession.logIn().addProjectPermission(UserRole.ADMIN, view.getRootComponent());",
        "fixed_code": "userSession.logIn().addPortfolioPermission(UserRole.ADMIN, view.getPortfolioDto());",
        "patch": "@@ -381,7 +381,7 @@ public void search_by_task_id_returns_403_if_project_admin_but_not_root() {\n     // is reserved to roots\n     PortfolioData view = db.components().insertPrivatePortfolioData();\n     insertActivity(\"T1\", view, SUCCESS);\n-    userSession.logIn().addProjectPermission(UserRole.ADMIN, view.getRootComponent());\n+    userSession.logIn().addPortfolioPermission(UserRole.ADMIN, view.getPortfolioDto());\n \n     TestRequest request = ws.newRequest().setParam(TEXT_QUERY, \"T1\");\n     assertThatThrownBy(() -> call(request))"
    },
    {
        "commit_id": "cb1d5a94c220a335f43b7eda501f31ab723c9a0b",
        "commit_message": "SONAR-19558 Fix issue with test framework",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cb1d5a94c220a335f43b7eda501f31ab723c9a0b",
        "buggy_code": "public DbTester db = DbTester.create(system2);",
        "fixed_code": "public DbTester db = DbTester.create(system2, true);",
        "patch": "@@ -43,7 +43,7 @@ public class PurgeDaoWithAuditIT {\n   private final System2 system2 = mock(System2.class);\n \n   @Rule\n-  public DbTester db = DbTester.create(system2);\n+  public DbTester db = DbTester.create(system2, true);\n \n   @Captor\n   ArgumentCaptor<ComponentNewValue> newValueCaptor;"
    },
    {
        "commit_id": "f4de3eec318ad76a4398adec70655e5ee6a1ab9f",
        "commit_message": "(code smell fix): removing variables and exception that are not being thrown",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4de3eec318ad76a4398adec70655e5ee6a1ab9f",
        "buggy_code": "public static void main(String[] args) throws Exception {",
        "fixed_code": "public static void main(String[] args) {",
        "patch": "@@ -77,7 +77,7 @@ public void start(String[] cliArguments) {\n     systemExit.exit(0);\n   }\n \n-  public static void main(String[] args) throws Exception {\n+  public static void main(String[] args) {\n     new App().start(args);\n   }\n "
    },
    {
        "commit_id": "50324c4ab7e55dfd8293dd9ac21afe751ac7e345",
        "commit_message": "SONAR-19558 Fix duplication indexes tests to support",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50324c4ab7e55dfd8293dd9ac21afe751ac7e345",
        "buggy_code": "public DbTester db = DbTester.create(System2.INSTANCE);",
        "fixed_code": "public DbTester db = DbTester.create(System2.INSTANCE, true);",
        "patch": "@@ -42,7 +42,7 @@\n public class DuplicationDaoIT {\n \n   @Rule\n-  public DbTester db = DbTester.create(System2.INSTANCE);\n+  public DbTester db = DbTester.create(System2.INSTANCE, true);\n \n   private final DbSession dbSession = db.getSession();\n   private final DuplicationDao dao = db.getDbClient().duplicationDao();"
    },
    {
        "commit_id": "92a86d4caf583a8778d2355d4bc11080f9edb093",
        "commit_message": "SONAR-19556 Fix usage of branchDao in tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92a86d4caf583a8778d2355d4bc11080f9edb093",
        "buggy_code": "public DbTester db = DbTester.create(System2.INSTANCE);",
        "fixed_code": "public DbTester db = DbTester.create(System2.INSTANCE, true);",
        "patch": "@@ -57,7 +57,7 @@ public class CurrentActionIT {\n   @Rule\n   public UserSessionRule userSession = UserSessionRule.standalone();\n   @Rule\n-  public DbTester db = DbTester.create(System2.INSTANCE);\n+  public DbTester db = DbTester.create(System2.INSTANCE, true);\n \n   private final PlatformEditionProvider platformEditionProvider = mock(PlatformEditionProvider.class);\n   private final HomepageTypesImpl homepageTypes = new HomepageTypesImpl();"
    },
    {
        "commit_id": "41af3865464536e459a746325689edd0736277b3",
        "commit_message": "SONAR-19454 fix code smell",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41af3865464536e459a746325689edd0736277b3",
        "buggy_code": "public static void checkNewCodeDefinitionParam(String newCodeDefinitionType, String newCodeDefinitionValue) {",
        "fixed_code": "public static void checkNewCodeDefinitionParam(@Nullable String newCodeDefinitionType, @Nullable String newCodeDefinitionValue) {",
        "patch": "@@ -93,7 +93,7 @@ public void createNewCodeDefinition(DbSession dbSession, String projectUuid, Str\n     dbClient.newCodePeriodDao().insert(dbSession, dto);\n   }\n \n-  public static void checkNewCodeDefinitionParam(String newCodeDefinitionType, String newCodeDefinitionValue) {\n+  public static void checkNewCodeDefinitionParam(@Nullable String newCodeDefinitionType, @Nullable String newCodeDefinitionValue) {\n     if (newCodeDefinitionType == null && newCodeDefinitionValue != null) {\n       throw new IllegalArgumentException(\"New code definition type is required when new code definition value is provided\");\n     }"
    },
    {
        "commit_id": "08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "commit_message": "SONAR-19556 Fix DB migration and increase test coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "buggy_code": "public CreateIndexOnColumn(Database db, String table, String columnName, boolean unique) {",
        "fixed_code": "protected CreateIndexOnColumn(Database db, String table, String columnName, boolean unique) {",
        "patch": "@@ -31,7 +31,7 @@ public abstract class CreateIndexOnColumn extends DdlChange {\n   private final String columnName;\n   private final boolean unique;\n \n-  public CreateIndexOnColumn(Database db, String table, String columnName, boolean unique) {\n+  protected CreateIndexOnColumn(Database db, String table, String columnName, boolean unique) {\n     super(db);\n     this.table = table;\n     this.columnName = columnName;"
    },
    {
        "commit_id": "08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "commit_message": "SONAR-19556 Fix DB migration and increase test coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "buggy_code": "private static final String TABLE_NAME = \"group_roles\";",
        "fixed_code": "private static final String TABLE_NAME = \"user_roles\";",
        "patch": "@@ -24,7 +24,7 @@\n \n public class CreateIndexEntityUuidInUserRoles extends CreateIndexOnColumn {\n \n-  private static final String TABLE_NAME = \"group_roles\";\n+  private static final String TABLE_NAME = \"user_roles\";\n   private static final String COLUMN_NAME = \"entity_uuid\";\n \n   public CreateIndexEntityUuidInUserRoles(Database db) {"
    },
    {
        "commit_id": "08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "commit_message": "SONAR-19556 Fix DB migration and increase test coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/08158412b69bab7eb3fbbc28ca584d121ba9fff3",
        "buggy_code": "@Deprecated",
        "fixed_code": "@Deprecated(since = \"10.2\")",
        "patch": "@@ -49,7 +49,7 @@ public Project(String uuid, String key, String name, @Nullable String descriptio\n   /**\n    * Should use {@link org.sonar.server.project.Project#fromProjectDtoWithTags(org.sonar.db.project.ProjectDto)} instead\n    */\n-  @Deprecated\n+  @Deprecated(since = \"10.2\")\n   public static Project from(ComponentDto project) {\n     return new Project(project.uuid(), project.getKey(), project.name(), project.description(), emptyList());\n   }"
    },
    {
        "commit_id": "02f3b4f569001b840bebdefc28dac44f8d52a973",
        "commit_message": "SONAR-19556 Add DB migration tests and fix drop of index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/02f3b4f569001b840bebdefc28dac44f8d52a973",
        "buggy_code": "private static final String INDEX_NAME = \"ce_activity_component\";",
        "fixed_code": "private static final String INDEX_NAME = \"ce_activity_main_component\";",
        "patch": "@@ -25,7 +25,7 @@\n public class DropIndexMainComponentUuidInCeActivity extends DropIndexChange {\n \n   private static final String TABLE_NAME = \"ce_activity\";\n-  private static final String INDEX_NAME = \"ce_activity_component\";\n+  private static final String INDEX_NAME = \"ce_activity_main_component\";\n \n   public DropIndexMainComponentUuidInCeActivity(Database db) {\n     super(db, INDEX_NAME, TABLE_NAME);"
    },
    {
        "commit_id": "b7a5beda61e4d041c73b9eba1395e6e4370578e9",
        "commit_message": "SONAR-19445 Fix new mapper query from master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b7a5beda61e4d041c73b9eba1395e6e4370578e9",
        "buggy_code": "Set<String> selectGroupUuidsWithPermissionOnProject(@Param(\"projectUuid\") String projectUuid, @Param(\"role\") String permission);",
        "fixed_code": "Set<String> selectGroupUuidsWithPermissionOnEntity(@Param(\"entityUuid\") String entityUuid, @Param(\"role\") String permission);",
        "patch": "@@ -58,7 +58,7 @@ public interface GroupPermissionMapper {\n    */\n   Set<String> selectGroupUuidsWithPermissionOnEntityBut(@Param(\"entityUuid\") String entityUuid, @Param(\"role\") String permission);\n \n-  Set<String> selectGroupUuidsWithPermissionOnProject(@Param(\"projectUuid\") String projectUuid, @Param(\"role\") String permission);\n+  Set<String> selectGroupUuidsWithPermissionOnEntity(@Param(\"entityUuid\") String entityUuid, @Param(\"role\") String permission);\n \n   int deleteByEntityUuid(@Param(\"entityUuid\") String entityUuid);\n "
    },
    {
        "commit_id": "c1b811da429ce068a15b21d87aa969dd6d956a72",
        "commit_message": "NO-JIRA (code smell fix): using isEmpty, isTrue, isNegative for better readability",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1b811da429ce068a15b21d87aa969dd6d956a72",
        "buggy_code": ".isEqualTo(true));",
        "fixed_code": ".isTrue());",
        "patch": "@@ -464,7 +464,7 @@ public void persists_existing_components_with_visibility_of_root_in_db_out_of_fu\n     Stream.of(project.uuid(), dir.uuid())\n       .forEach(uuid -> assertThat(dbClient.componentDao().selectByUuid(db.getSession(), uuid).get().isPrivate())\n         .describedAs(\"for uuid \" + uuid)\n-        .isEqualTo(true));\n+        .isTrue());\n   }\n \n   private ReportComponent createSampleProjectComponentTree(ComponentDto project) {"
    },
    {
        "commit_id": "c1b811da429ce068a15b21d87aa969dd6d956a72",
        "commit_message": "NO-JIRA (code smell fix): using isEmpty, isTrue, isNegative for better readability",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1b811da429ce068a15b21d87aa969dd6d956a72",
        "buggy_code": "assertThat(properties.size()).isZero();",
        "fixed_code": "assertThat(properties).isEmpty();",
        "patch": "@@ -127,7 +127,7 @@ private static Props newProps(String... propertyKeysAndValues) {\n \n   private void verifyProperties(Properties properties, String... expectedPropertyKeysAndValuesOrdered) {\n     if (expectedPropertyKeysAndValuesOrdered.length == 0) {\n-      assertThat(properties.size()).isZero();\n+      assertThat(properties).isEmpty();\n     } else {\n       assertThat(expectedPropertyKeysAndValuesOrdered.length % 2).describedAs(\"Number of parameters must be even\").isZero();\n       Set<String> keys = new HashSet<>(expectedPropertyKeysAndValuesOrdered.length / 2 + 1);"
    },
    {
        "commit_id": "c1b811da429ce068a15b21d87aa969dd6d956a72",
        "commit_message": "NO-JIRA (code smell fix): using isEmpty, isTrue, isNegative for better readability",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1b811da429ce068a15b21d87aa969dd6d956a72",
        "buggy_code": "assertThat(underTest.get(key)).isEqualTo(Optional.empty());",
        "fixed_code": "assertThat(underTest.get(key)).isEmpty();",
        "patch": "@@ -100,7 +100,7 @@ public void remove_should_remove_value() {\n     assertThat(underTest.get(key)).isEqualTo(Optional.of(childValue));\n \n     underTest.remove(key);\n-    assertThat(underTest.get(key)).isEqualTo(Optional.empty());\n+    assertThat(underTest.get(key)).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "c1b811da429ce068a15b21d87aa969dd6d956a72",
        "commit_message": "NO-JIRA (code smell fix): using isEmpty, isTrue, isNegative for better readability",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1b811da429ce068a15b21d87aa969dd6d956a72",
        "buggy_code": "assertThat(compare(s1, s2)).isLessThan(0);",
        "fixed_code": "assertThat(compare(s1, s2)).isNegative();",
        "patch": "@@ -35,7 +35,7 @@ public void sameHashCode() {\n     String s2 = \"PE\";\n \n     assertThat(s1).hasSameHashCodeAs(s2);\n-    assertThat(compare(s1, s2)).isLessThan(0);\n+    assertThat(compare(s1, s2)).isNegative();\n     assertThat(compare(s2, s1)).isPositive();\n   }\n "
    },
    {
        "commit_id": "4cebb56b86de09dd8b829bed908e0881c03030e4",
        "commit_message": "No-JIRA Code smell fix: Logs are expecting args, but weren't being passed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cebb56b86de09dd8b829bed908e0881c03030e4",
        "buggy_code": "LOG.debug(\"Grace period of hard stop has been interrupted: {}\", e);",
        "fixed_code": "LOG.debug(\"Grace period of hard stop has been interrupted: {}\", e.getMessage(), e);",
        "patch": "@@ -111,7 +111,7 @@ public void hardStopScheduling() {\n     try {\n       waitForInProgressWorkersToFinish(350);\n     } catch (InterruptedException e) {\n-      LOG.debug(\"Grace period of hard stop has been interrupted: {}\", e);\n+      LOG.debug(\"Grace period of hard stop has been interrupted: {}\", e.getMessage(), e);\n       Thread.currentThread().interrupt();\n     }\n "
    },
    {
        "commit_id": "4cebb56b86de09dd8b829bed908e0881c03030e4",
        "commit_message": "No-JIRA Code smell fix: Logs are expecting args, but weren't being passed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cebb56b86de09dd8b829bed908e0881c03030e4",
        "buggy_code": "LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e);",
        "fixed_code": "LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e.getMessage(), e);",
        "patch": "@@ -69,7 +69,7 @@ private static void ensureAutoCommitFalse(DbSession dbSession) {\n         checkState(!((boolean) f.get(sqlSession)), \"Autocommit must be false\");\n       }\n     } catch (NoSuchFieldException | IllegalAccessException e) {\n-      LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e);\n+      LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e.getMessage(), e);\n     }\n   }\n "
    },
    {
        "commit_id": "4cebb56b86de09dd8b829bed908e0881c03030e4",
        "commit_message": "No-JIRA Code smell fix: Logs are expecting args, but weren't being passed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cebb56b86de09dd8b829bed908e0881c03030e4",
        "buggy_code": "LOG.error(\"Error updating number of projects in warning: {}\", e);",
        "fixed_code": "LOG.error(\"Error updating number of projects in warning: {}\", e.getMessage(), e);",
        "patch": "@@ -104,7 +104,7 @@ private Runnable countProjectsInWarning() {\n       try (DbSession dbSession = dbClient.openSession(false)) {\n         updateProjectsInWarningInDb(dbSession, nbProjectsInWarning);\n       } catch (Exception e) {\n-        LOG.error(\"Error updating number of projects in warning: {}\", e);\n+        LOG.error(\"Error updating number of projects in warning: {}\", e.getMessage(), e);\n       }\n       projectsInWarning.update(nbProjectsInWarning);\n       if (nbProjectsInWarning == 0L) {"
    },
    {
        "commit_id": "4cebb56b86de09dd8b829bed908e0881c03030e4",
        "commit_message": "No-JIRA Code smell fix: Logs are expecting args, but weren't being passed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cebb56b86de09dd8b829bed908e0881c03030e4",
        "buggy_code": "LOG.debug(\"Error while checking SonarQube statistics: {}\", e);",
        "fixed_code": "LOG.debug(\"Error while checking SonarQube statistics: {}\", e.getMessage());",
        "patch": "@@ -114,7 +114,7 @@ private Runnable telemetryCommand() {\n           updateTelemetryProps(now);\n         }\n       } catch (Exception e) {\n-        LOG.debug(\"Error while checking SonarQube statistics: {}\", e);\n+        LOG.debug(\"Error while checking SonarQube statistics: {}\", e.getMessage());\n       }\n       // do not check at start up to exclude test instance which are not up for a long time\n     };"
    },
    {
        "commit_id": "4cebb56b86de09dd8b829bed908e0881c03030e4",
        "commit_message": "No-JIRA Code smell fix: Logs are expecting args, but weren't being passed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cebb56b86de09dd8b829bed908e0881c03030e4",
        "buggy_code": "LOGGER.trace(\"DB connection is down: {}\", e);",
        "fixed_code": "LOGGER.trace(\"DB connection is down: {}\", e.getMessage(), e);",
        "patch": "@@ -50,7 +50,7 @@ private boolean isConnectedToDB() {\n     try (DbSession dbSession = dbClient.openSession(false)) {\n       return dbSession.getMapper(IsAliveMapper.class).isAlive() == IsAliveMapper.IS_ALIVE_RETURNED_VALUE;\n     } catch (RuntimeException e) {\n-      LOGGER.trace(\"DB connection is down: {}\", e);\n+      LOGGER.trace(\"DB connection is down: {}\", e.getMessage(), e);\n       return false;\n     }\n   }"
    },
    {
        "commit_id": "3663eaea80abc474d9ba3a2582b3bff033a49d4c",
        "commit_message": "SONAR-19003 Fix error when retrieving multiple components with the same key and different case.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3663eaea80abc474d9ba3a2582b3bff033a49d4c",
        "buggy_code": "ComponentDto selectByKeyCaseInsensitive(@Param(\"key\") String key);",
        "fixed_code": "List<ComponentDto> selectByKeyCaseInsensitive(@Param(\"key\") String key);",
        "patch": "@@ -30,7 +30,7 @@\n \n public interface ComponentMapper {\n   @CheckForNull\n-  ComponentDto selectByKeyCaseInsensitive(@Param(\"key\") String key);\n+  List<ComponentDto> selectByKeyCaseInsensitive(@Param(\"key\") String key);\n \n   @CheckForNull\n   ComponentDto selectByKeyAndBranchOrPr(@Param(\"key\") String key, @Nullable @Param(\"branch\") String branch, @Nullable @Param(\"pullRequest\") String pullRequest);"
    },
    {
        "commit_id": "3246470e8134258859b1e98eab0604bb9ea789b6",
        "commit_message": "SONAR-19340 Fix hotspot propagation issue for branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3246470e8134258859b1e98eab0604bb9ea789b6",
        "buggy_code": "verify(hotspotChangeEventService).distributeHotspotChangedEvent(eq(project.uuid()), any(HotspotChangedEvent.class));",
        "fixed_code": "verify(hotspotChangeEventService).distributeHotspotChangedEvent(eq(project.getMainBranchProjectUuid()), any(HotspotChangedEvent.class));",
        "patch": "@@ -352,7 +352,7 @@ public void wsExecution_whenBranchTypeIsBranch_shouldDistributeEvents() {\n     when(issueFieldsSetter.assign(eq(hotspot.toDefaultIssue()), userMatcher(assignee), any(IssueChangeContext.class))).thenReturn(true);\n \n     executeRequest(hotspot, assignee.getLogin(), null);\n-    verify(hotspotChangeEventService).distributeHotspotChangedEvent(eq(project.uuid()), any(HotspotChangedEvent.class));\n+    verify(hotspotChangeEventService).distributeHotspotChangedEvent(eq(project.getMainBranchProjectUuid()), any(HotspotChangedEvent.class));\n   }\n \n   @Test"
    },
    {
        "commit_id": "3246470e8134258859b1e98eab0604bb9ea789b6",
        "commit_message": "SONAR-19340 Fix hotspot propagation issue for branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3246470e8134258859b1e98eab0604bb9ea789b6",
        "buggy_code": "hotspotChangeEventService.distributeHotspotChangedEvent(defaultIssue.projectUuid(), hotspotChangedEvent);",
        "fixed_code": "hotspotChangeEventService.distributeHotspotChangedEvent(branch.getProjectUuid(), hotspotChangedEvent);",
        "patch": "@@ -131,7 +131,7 @@ private void assign(String hotspotKey, String login, @Nullable String comment) {\n         BranchDto branch = issueUpdater.getBranch(dbSession, defaultIssue);\n         if (BRANCH.equals(branch.getBranchType())) {\n           HotspotChangedEvent hotspotChangedEvent = buildEventData(defaultIssue, assignee, hotspotDto.getFilePath());\n-          hotspotChangeEventService.distributeHotspotChangedEvent(defaultIssue.projectUuid(), hotspotChangedEvent);\n+          hotspotChangeEventService.distributeHotspotChangedEvent(branch.getProjectUuid(), hotspotChangedEvent);\n         }\n       }\n     }"
    },
    {
        "commit_id": "3246470e8134258859b1e98eab0604bb9ea789b6",
        "commit_message": "SONAR-19340 Fix hotspot propagation issue for branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3246470e8134258859b1e98eab0604bb9ea789b6",
        "buggy_code": "hotspotChangeEventService.distributeHotspotChangedEvent(defaultIssue.projectUuid(), hotspotChangedEvent);",
        "fixed_code": "hotspotChangeEventService.distributeHotspotChangedEvent(branch.getProjectUuid(), hotspotChangedEvent);",
        "patch": "@@ -167,7 +167,7 @@ private void doTransition(DbSession session, IssueDto issueDto, String transitio\n       BranchDto branch = issueUpdater.getBranch(session, defaultIssue);\n       if (BRANCH.equals(branch.getBranchType())) {\n         HotspotChangedEvent hotspotChangedEvent = buildEventData(defaultIssue, issueDto);\n-        hotspotChangeEventService.distributeHotspotChangedEvent(defaultIssue.projectUuid(), hotspotChangedEvent);\n+        hotspotChangeEventService.distributeHotspotChangedEvent(branch.getProjectUuid(), hotspotChangedEvent);\n       }\n     }\n   }"
    },
    {
        "commit_id": "bedbb8c52bff124c9e1ab33d3e7b16a1270990a2",
        "commit_message": "SONAR-18856 Fix SonarQube issues and BTT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bedbb8c52bff124c9e1ab33d3e7b16a1270990a2",
        "buggy_code": ".collect(Collectors.toList());",
        "fixed_code": ".toList();",
        "patch": "@@ -61,7 +61,7 @@ public List<EntityDto> list() {\n \n       return entities.stream()\n         .sorted(Comparator.comparing(EntityDto::getName))\n-        .collect(Collectors.toList());\n+        .toList();\n     }\n   }\n }"
    },
    {
        "commit_id": "92c132a13f46f23a5ecc5dee5dfdfb619e6fa65f",
        "commit_message": "SONAR-18856 Refactor subportfolios and fix build and tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92c132a13f46f23a5ecc5dee5dfdfb619e6fa65f",
        "buggy_code": "this.enableSource = enableSource;",
        "fixed_code": "this.enableSource = true;",
        "patch": "@@ -56,7 +56,7 @@ public class ComponentIndexDefinition implements IndexDefinition {\n \n   private ComponentIndexDefinition(Configuration config, boolean enableSource) {\n     this.config = config;\n-    this.enableSource = enableSource;\n+    this.enableSource = true;\n   }\n \n   @Inject"
    },
    {
        "commit_id": "c5a49895107750a74f6e0eff57f11ecccaca8bba",
        "commit_message": "NO-JIRA fix code smell",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5a49895107750a74f6e0eff57f11ecccaca8bba",
        "buggy_code": "String[] uuids = IntStream.range(0, 2 + new Random().nextInt(5))",
        "fixed_code": "String[] uuids = IntStream.range(0, 7)",
        "patch": "@@ -315,7 +315,7 @@ public void massSubmit_with_UNIQUE_QUEUE_PER_MAIN_COMPONENT_does_not_create_task\n   public void massSubmit_with_UNIQUE_QUEUE_PER_MAIN_COMPONENT_does_not_create_task_when_there_is_many_pending_task_for_same_main_component() {\n     String mainComponentUuid = randomAlphabetic(5);\n     CeTaskSubmit taskSubmit = createTaskSubmit(\"with_component\", newComponent(mainComponentUuid), null);\n-    String[] uuids = IntStream.range(0, 2 + new Random().nextInt(5))\n+    String[] uuids = IntStream.range(0, 7)\n       .mapToObj(i -> insertPendingInQueue(newComponent(mainComponentUuid)))\n       .map(CeQueueDto::getUuid)\n       .toArray(String[]::new);"
    },
    {
        "commit_id": "8a3bfc11ba83a3072a0bf48a1649ba0006611475",
        "commit_message": "SONAR-18856 Fix ce/Analysis/status endpoint",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8a3bfc11ba83a3072a0bf48a1649ba0006611475",
        "buggy_code": "return dbClient.branchDao().selectByUuid(dbSession, projectUuid)",
        "fixed_code": "return dbClient.branchDao().selectMainBranchByProjectUuid(dbSession, projectUuid)",
        "patch": "@@ -145,7 +145,7 @@ public BranchDto getBranchOrPullRequest(DbSession dbSession, String projectUuid,\n       return dbClient.branchDao().selectByPullRequestKey(dbSession, projectUuid, pullRequestKey)\n         .orElseThrow(() -> new NotFoundException(String.format(\"Pull request '%s' in project '%s' not found\", pullRequestKey, projectKey)));\n     }\n-    return dbClient.branchDao().selectByUuid(dbSession, projectUuid)\n+    return dbClient.branchDao().selectMainBranchByProjectUuid(dbSession, projectUuid)\n       .orElseThrow(() -> new NotFoundException(String.format(\"Main branch in project '%s' not found\", projectKey)));\n   }\n "
    },
    {
        "commit_id": "cc1d563b233d7099b2430e247e44c25b53fa8a74",
        "commit_message": "SONAR-18856 Fix RenameAction endpoint to support project uuid",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc1d563b233d7099b2430e247e44c25b53fa8a74",
        "buggy_code": "public DbTester dbTester = DbTester.create(System2.INSTANCE);",
        "fixed_code": "public DbTester dbTester = DbTester.create(System2.INSTANCE, true);",
        "patch": "@@ -37,7 +37,7 @@ public class IgnoreOrphanBranchStepIT {\n   private String BRANCH_UUID = \"branch_uuid\";\n \n   @Rule\n-  public DbTester dbTester = DbTester.create(System2.INSTANCE);\n+  public DbTester dbTester = DbTester.create(System2.INSTANCE, true);\n \n   private CeTask.Component component = new CeTask.Component(BRANCH_UUID, \"component key\", \"component name\");\n   private CeTask ceTask = new CeTask.Builder()"
    },
    {
        "commit_id": "cc1d563b233d7099b2430e247e44c25b53fa8a74",
        "commit_message": "SONAR-18856 Fix RenameAction endpoint to support project uuid",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc1d563b233d7099b2430e247e44c25b53fa8a74",
        "buggy_code": "public final DbTester db = DbTester.create(system2);",
        "fixed_code": "public final DbTester db = DbTester.create(system2, true);",
        "patch": "@@ -76,7 +76,7 @@ public class CreateActionIT {\n   private final System2 system2 = System2.INSTANCE;\n \n   @Rule\n-  public final DbTester db = DbTester.create(system2);\n+  public final DbTester db = DbTester.create(system2, true);\n   @Rule\n   public final UserSessionRule userSession = UserSessionRule.standalone();\n   @Rule"
    },
    {
        "commit_id": "834abe51824bb5864a049cb90de24915fe155669",
        "commit_message": " SONAR-18856 Fix Import branches / BranchSupportDelegate to support projectuuid instead of component uuid",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/834abe51824bb5864a049cb90de24915fe155669",
        "buggy_code": "public final DbTester db = DbTester.create();",
        "fixed_code": "public final DbTester db = DbTester.create(true);",
        "patch": "@@ -82,7 +82,7 @@ public class ReportSubmitterIT {\n   @Rule\n   public final UserSessionRule userSession = UserSessionRule.standalone();\n   @Rule\n-  public final DbTester db = DbTester.create();\n+  public final DbTester db = DbTester.create(true);\n \n   private final ProjectDefaultVisibility projectDefaultVisibility = mock(ProjectDefaultVisibility.class);\n   private final DefaultBranchNameResolver defaultBranchNameResolver = mock(DefaultBranchNameResolver.class);"
    },
    {
        "commit_id": "6a464448365f76f318527260cb109388a5f93be5",
        "commit_message": "[NO JIRA] Fix ComponentdbTester to support different main branch UUIDs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a464448365f76f318527260cb109388a5f93be5",
        "buggy_code": "ComponentDto project = insertComponent(ComponentTesting.newPrivateProjectDto(\"PROJECT_1\"));",
        "fixed_code": "ComponentDto project = db.components().insertPublicProject(p -> p.setUuid(\"PROJECT_1\").setBranchUuid(\"PROJECT_1\")).getMainBranchComponent();",
        "patch": "@@ -239,7 +239,7 @@ public void massSubmit_populates_component_name_and_key_of_CeTask_if_project_exi\n \n   @Test\n   public void massSubmit_populates_component_name_and_key_of_CeTask_if_project_and_branch_exists() {\n-    ComponentDto project = insertComponent(ComponentTesting.newPrivateProjectDto(\"PROJECT_1\"));\n+    ComponentDto project = db.components().insertPublicProject(p -> p.setUuid(\"PROJECT_1\").setBranchUuid(\"PROJECT_1\")).getMainBranchComponent();\n     ComponentDto branch1 = db.components().insertProjectBranch(project);\n     ComponentDto branch2 = db.components().insertProjectBranch(project);\n     CeTaskSubmit taskSubmit1 = createTaskSubmit(CeTaskTypes.REPORT, Component.fromDto(branch1.uuid(), project.uuid()), null);"
    },
    {
        "commit_id": "6a464448365f76f318527260cb109388a5f93be5",
        "commit_message": "[NO JIRA] Fix ComponentdbTester to support different main branch UUIDs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a464448365f76f318527260cb109388a5f93be5",
        "buggy_code": "projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID)).getMainBranchComponent();",
        "fixed_code": "projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID).setBranchUuid(PROJECT_UUID)).getMainBranchComponent();",
        "patch": "@@ -105,7 +105,7 @@ public void setUp() {\n     copier = new SiblingsIssueMerger(new SiblingsIssuesLoader(new SiblingComponentsWithOpenIssues(treeRootHolder, metadataHolder, dbClient), dbClient, componentIssuesLoader),\n       tracker,\n       issueLifecycle);\n-    projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID)).getMainBranchComponent();\n+    projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID).setBranchUuid(PROJECT_UUID)).getMainBranchComponent();\n     branch1Dto = db.components().insertProjectBranch(projectDto, b -> b.setKey(\"myBranch1\")\n       .setBranchType(BranchType.PULL_REQUEST)\n       .setMergeBranchUuid(projectDto.uuid()));"
    },
    {
        "commit_id": "6a464448365f76f318527260cb109388a5f93be5",
        "commit_message": "[NO JIRA] Fix ComponentdbTester to support different main branch UUIDs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a464448365f76f318527260cb109388a5f93be5",
        "buggy_code": "ComponentDto projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID)).getMainBranchComponent();",
        "fixed_code": "ComponentDto projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID).setBranchUuid(PROJECT_UUID)).getMainBranchComponent();",
        "patch": "@@ -88,7 +88,7 @@ public void setUp() {\n       issueLifecycle,\n       sourceBranchInputFactory);\n \n-    ComponentDto projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID)).getMainBranchComponent();\n+    ComponentDto projectDto = db.components().insertPublicProject(p -> p.setKey(PROJECT_KEY).setUuid(PROJECT_UUID).setBranchUuid(PROJECT_UUID)).getMainBranchComponent();\n     ComponentDto branch1Dto = db.components().insertProjectBranch(projectDto, b -> b.setKey(\"myBranch1\")\n       .setBranchType(BranchType.PULL_REQUEST)\n       .setMergeBranchUuid(projectDto.uuid()));"
    },
    {
        "commit_id": "c30b211250742d402f0167f2ea74fa0cc34d5585",
        "commit_message": "SONAR-19091 Fix SSF-383",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c30b211250742d402f0167f2ea74fa0cc34d5585",
        "buggy_code": "connector.setProperty(\"compressableMimeType\", \"text/html,text/xml,text/plain,text/css,application/json,application/javascript\");",
        "fixed_code": "connector.setProperty(\"compressibleMimeType\", \"text/html,text/xml,text/plain,text/css,application/json,application/javascript,text/javascript\");",
        "patch": "@@ -89,7 +89,7 @@ private static void configurePool(Props props, Connector connector) {\n   private static void configureCompression(Connector connector) {\n     connector.setProperty(\"compression\", \"on\");\n     connector.setProperty(\"compressionMinSize\", \"1024\");\n-    connector.setProperty(\"compressableMimeType\", \"text/html,text/xml,text/plain,text/css,application/json,application/javascript\");\n+    connector.setProperty(\"compressibleMimeType\", \"text/html,text/xml,text/plain,text/css,application/json,application/javascript,text/javascript\");\n   }\n \n   private static void setConnectorAttribute(Connector c, String key, @Nullable Object value) {"
    },
    {
        "commit_id": "c30b211250742d402f0167f2ea74fa0cc34d5585",
        "commit_message": "SONAR-19091 Fix SSF-383",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c30b211250742d402f0167f2ea74fa0cc34d5585",
        "buggy_code": "public static final String JAVASCRIPT = \"application/javascript\";",
        "fixed_code": "public static final String JAVASCRIPT = \"text/javascript\";",
        "patch": "@@ -32,7 +32,7 @@ public final class MediaTypes {\n   public static final String CSV = \"text/csv\";\n   public static final String DEFAULT = \"application/octet-stream\";\n   public static final String HTML = \"text/html\";\n-  public static final String JAVASCRIPT = \"application/javascript\";\n+  public static final String JAVASCRIPT = \"text/javascript\";\n   public static final String JSON = \"application/json\";\n   public static final String PROTOBUF = \"application/x-protobuf\";\n   public static final String SVG = \"image/svg+xml\";"
    },
    {
        "commit_id": "20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "commit_message": "[NO JIRA] Fix DB migration name for v10.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v110;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v101;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v110;\n+package org.sonar.server.platform.db.migration.version.v101;\n \n import com.google.common.annotations.VisibleForTesting;\n import java.sql.Connection;"
    },
    {
        "commit_id": "20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "commit_message": "[NO JIRA] Fix DB migration name for v10.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v110;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v101;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v110;\n+package org.sonar.server.platform.db.migration.version.v101;\n \n import com.google.common.annotations.VisibleForTesting;\n import java.sql.SQLException;"
    },
    {
        "commit_id": "20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "commit_message": "[NO JIRA] Fix DB migration name for v10.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v110;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v101;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v110;\n+package org.sonar.server.platform.db.migration.version.v101;\n \n import org.sonar.db.Database;\n import org.sonar.server.platform.db.migration.step.DropColumnChange;"
    },
    {
        "commit_id": "20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "commit_message": "[NO JIRA] Fix DB migration name for v10.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20a6c300ac45549d2f77ae9175d71d9def91b30e",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v110;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v101;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v110;\n+package org.sonar.server.platform.db.migration.version.v101;\n \n import com.google.common.annotations.VisibleForTesting;\n import java.sql.SQLException;"
    },
    {
        "commit_id": "dce81ae3d053265749704f714112d0b6ffb8956a",
        "commit_message": "SONAR-18955 fix the description of qualitygates endpoints",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dce81ae3d053265749704f714112d0b6ffb8956a",
        "buggy_code": "\"Either 'gateId' or 'gateName' must be provided. Requires the 'Administer Quality Gates' permission.\")",
        "fixed_code": "\"Parameter 'gateName' must be provided. Requires the 'Administer Quality Gates' permission.\")",
        "patch": "@@ -55,7 +55,7 @@ public void define(WebService.NewController controller) {\n     WebService.NewAction createCondition = controller.createAction(ACTION_CREATE_CONDITION)\n       .setPost(true)\n       .setDescription(\"Add a new condition to a quality gate.<br>\" +\n-        \"Either 'gateId' or 'gateName' must be provided. Requires the 'Administer Quality Gates' permission.\")\n+        \"Parameter 'gateName' must be provided. Requires the 'Administer Quality Gates' permission.\")\n       .setSince(\"4.3\")\n       .setResponseExample(getClass().getResource(\"create-condition-example.json\"))\n       .setChangelog("
    },
    {
        "commit_id": "dce81ae3d053265749704f714112d0b6ffb8956a",
        "commit_message": "SONAR-18955 fix the description of qualitygates endpoints",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dce81ae3d053265749704f714112d0b6ffb8956a",
        "buggy_code": "\"Either 'id' or 'name' must be specified. Requires the 'Administer Quality Gates' permission.\")",
        "fixed_code": "\"Parameter 'name' must be specified. Requires the 'Administer Quality Gates' permission.\")",
        "patch": "@@ -50,7 +50,7 @@ public SetAsDefaultAction(DbClient dbClient, UserSession userSession, QualityGat\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"set_as_default\")\n       .setDescription(\"Set a quality gate as the default quality gate.<br>\" +\n-        \"Either 'id' or 'name' must be specified. Requires the 'Administer Quality Gates' permission.\")\n+        \"Parameter 'name' must be specified. Requires the 'Administer Quality Gates' permission.\")\n       .setSince(\"4.3\")\n       .setChangelog(\n         new Change(\"10.0\", \"Parameter 'id' is removed. Use 'name' instead.\"),"
    },
    {
        "commit_id": "d6bd659df4ab570421273f5d30facb8334cf87be",
        "commit_message": "SONAR-17705 fix description of qualitygates/copy and qualitygates/rename endpoints",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d6bd659df4ab570421273f5d30facb8334cf87be",
        "buggy_code": "\"Either 'sourceName' or 'id' must be provided. Requires the 'Administer Quality Gates' permission.\")",
        "fixed_code": "\"'sourceName' must be provided. Requires the 'Administer Quality Gates' permission.\")",
        "patch": "@@ -55,7 +55,7 @@ public CopyAction(DbClient dbClient, UserSession userSession, QualityGateUpdater\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"copy\")\n       .setDescription(\"Copy a Quality Gate.<br>\" +\n-        \"Either 'sourceName' or 'id' must be provided. Requires the 'Administer Quality Gates' permission.\")\n+        \"'sourceName' must be provided. Requires the 'Administer Quality Gates' permission.\")\n       .setPost(true)\n       .setChangelog(\n         new Change(\"10.0\", \"Field 'id' in the response is deprecated\"),"
    },
    {
        "commit_id": "d6bd659df4ab570421273f5d30facb8334cf87be",
        "commit_message": "SONAR-17705 fix description of qualitygates/copy and qualitygates/rename endpoints",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d6bd659df4ab570421273f5d30facb8334cf87be",
        "buggy_code": "\"Either 'id' or 'currentName' must be specified. Requires the 'Administer Quality Gates' permission.\")",
        "fixed_code": "\"'currentName' must be specified. Requires the 'Administer Quality Gates' permission.\")",
        "patch": "@@ -49,7 +49,7 @@ public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"rename\")\n       .setPost(true)\n       .setDescription(\"Rename a Quality Gate.<br>\" +\n-        \"Either 'id' or 'currentName' must be specified. Requires the 'Administer Quality Gates' permission.\")\n+        \"'currentName' must be specified. Requires the 'Administer Quality Gates' permission.\")\n       .setSince(\"4.3\")\n       .setChangelog(\n         new Change(\"10.0\", \"Field 'id' in the response is deprecated\"),"
    },
    {
        "commit_id": "db3900134887a2aefebada2ac3e09c440434c3c4",
        "commit_message": "NO-JIRA fix unstable test in local",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db3900134887a2aefebada2ac3e09c440434c3c4",
        "buggy_code": "DefaultHttpDownloader downloader = new DefaultHttpDownloader(new MapSettings().asConfig(), 10, 50000);",
        "fixed_code": "DefaultHttpDownloader downloader = new DefaultHttpDownloader(new MapSettings().asConfig(), 10, 10);",
        "patch": "@@ -130,7 +130,7 @@ public void openStream_network_errors() throws IOException, URISyntaxException {\n     String url = \"http://10.255.255.1\";\n \n     assertThatThrownBy(() -> {\n-      DefaultHttpDownloader downloader = new DefaultHttpDownloader(new MapSettings().asConfig(), 10, 50000);\n+      DefaultHttpDownloader downloader = new DefaultHttpDownloader(new MapSettings().asConfig(), 10, 10);\n       downloader.openStream(new URI(url));\n     })\n       .isInstanceOf(SonarException.class)"
    },
    {
        "commit_id": "ede5afcbdd39d74064abe0ff84c11c50b102d276",
        "commit_message": "SONAR-18809 fix SSF-358\n\nCo-authored-by: Ambroise C <ambroise.christea@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ede5afcbdd39d74064abe0ff84c11c50b102d276",
        "buggy_code": "cspPolicies.add(\"script-src 'self' 'unsafe-inline' 'unsafe-eval'\");",
        "fixed_code": "cspPolicies.add(\"script-src 'self'\");",
        "patch": "@@ -47,7 +47,7 @@ public void init(FilterConfig filterConfig) throws ServletException {\n     cspPolicies.add(\"connect-src 'self' http: https:\");\n     cspPolicies.add(\"img-src * data: blob:\");\n     cspPolicies.add(\"object-src 'none'\");\n-    cspPolicies.add(\"script-src 'self' 'unsafe-inline' 'unsafe-eval'\");\n+    cspPolicies.add(\"script-src 'self'\");\n     cspPolicies.add(\"style-src 'self' 'unsafe-inline'\");\n     cspPolicies.add(\"worker-src 'none'\");\n     this.policies = String.join(\"; \", cspPolicies).trim();"
    },
    {
        "commit_id": "ede5afcbdd39d74064abe0ff84c11c50b102d276",
        "commit_message": "SONAR-18809 fix SSF-358\n\nCo-authored-by: Ambroise C <ambroise.christea@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ede5afcbdd39d74064abe0ff84c11c50b102d276",
        "buggy_code": "\"script-src 'self' 'unsafe-inline' 'unsafe-eval'; \" +",
        "fixed_code": "\"script-src 'self'; \" +",
        "patch": "@@ -41,7 +41,7 @@ public class CspFilterTest {\n     \"connect-src 'self' http: https:; \" +\n     \"img-src * data: blob:; \" +\n     \"object-src 'none'; \" +\n-    \"script-src 'self' 'unsafe-inline' 'unsafe-eval'; \" +\n+    \"script-src 'self'; \" +\n     \"style-src 'self' 'unsafe-inline'; \" +\n     \"worker-src 'none'\";\n   private final ServletContext servletContext = mock(ServletContext.class, RETURNS_MOCKS);"
    },
    {
        "commit_id": "b4e39aba5fa94abf8406c59797ffc0a8a3b7891f",
        "commit_message": "SONAR-18462 - Fix ALM PR decoration not using ad hoc type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b4e39aba5fa94abf8406c59797ffc0a8a3b7891f",
        "buggy_code": "return null;",
        "fixed_code": "return addHocRule.getRuleType();",
        "patch": "@@ -182,7 +182,7 @@ public RuleStatus getStatus() {\n     @Override\n     @CheckForNull\n     public RuleType getType() {\n-      return null;\n+      return addHocRule.getRuleType();\n     }\n \n     @Override"
    },
    {
        "commit_id": "2760f7f89bb81ffbfc572f7f183aaf6a5c3367cd",
        "commit_message": "SONAR-18629 Drop deprecated test utility methods in Issue and Rule testing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2760f7f89bb81ffbfc572f7f183aaf6a5c3367cd",
        "buggy_code": "RuleDto templateRule = RuleTesting.newDto(RuleKey.of(\"java\", \"S001\"))",
        "fixed_code": "RuleDto templateRule = RuleTesting.newRule(RuleKey.of(\"java\", \"S001\"))",
        "patch": "@@ -562,7 +562,7 @@ public void fail_to_create_custom_rule_when_unknown_template() {\n   }\n \n   private RuleDto createTemplateRule() {\n-    RuleDto templateRule = RuleTesting.newDto(RuleKey.of(\"java\", \"S001\"))\n+    RuleDto templateRule = RuleTesting.newRule(RuleKey.of(\"java\", \"S001\"))\n       .setIsTemplate(true)\n       .setLanguage(\"java\")\n       .setPluginKey(\"sonarjava\")"
    },
    {
        "commit_id": "00eed0b04d2d4c55bf156c484bea378acf79caf6",
        "commit_message": "[SONAR-18510] Fix typo in Administration page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/00eed0b04d2d4c55bf156c484bea378acf79caf6",
        "buggy_code": ".description(\"For each team they belong to, the user will be associated to a group named 'Organisation/Team' (if it exists) in SonarQube.\")",
        "fixed_code": ".description(\"For each team they belong to, the user will be associated to a group named 'Organization/Team' (if it exists) in SonarQube.\")",
        "patch": "@@ -130,7 +130,7 @@ public static List<PropertyDefinition> definitions() {\n         .build(),\n       PropertyDefinition.builder(GROUPS_SYNC)\n         .name(\"Synchronize teams as groups\")\n-        .description(\"For each team they belong to, the user will be associated to a group named 'Organisation/Team' (if it exists) in SonarQube.\")\n+        .description(\"For each team they belong to, the user will be associated to a group named 'Organization/Team' (if it exists) in SonarQube.\")\n         .category(CATEGORY)\n         .subCategory(SUBCATEGORY)\n         .type(BOOLEAN)"
    },
    {
        "commit_id": "00eed0b04d2d4c55bf156c484bea378acf79caf6",
        "commit_message": "[SONAR-18510] Fix typo in Administration page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/00eed0b04d2d4c55bf156c484bea378acf79caf6",
        "buggy_code": "\" If enabled, the GitLab Oauth2 application will need to provide the api scope\")",
        "fixed_code": "\" If enabled, the GitLab Oauth2 application will need to provide the api scope.\")",
        "patch": "@@ -122,7 +122,7 @@ static List<PropertyDefinition> definitions() {\n         .deprecatedKey(\"sonar.auth.gitlab.sync_user_groups\")\n         .name(\"Synchronize user groups\")\n         .description(\"For each GitLab group they belong to, the user will be associated to a group with the same name (if it exists) in SonarQube.\" +\n-          \" If enabled, the GitLab Oauth2 application will need to provide the api scope\")\n+          \" If enabled, the GitLab Oauth2 application will need to provide the api scope.\")\n         .category(CATEGORY)\n         .subCategory(SUBCATEGORY)\n         .type(PropertyType.BOOLEAN)"
    },
    {
        "commit_id": "fba12617210b4fda3f97fed9491f111588443d70",
        "commit_message": "SONAR-17714 Update ES binaries\n\n- use no-jdk for local development and jdk for open source part\n- use ES cli tool to start Elasticsearch - platform agnostic\n- fix query issue with dates\n- disable security autoconfiguration on a single node environment\n- fix single-node settings\n- Use Elasticsearch CLI java tool to run keystore cli and Elasticsearch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fba12617210b4fda3f97fed9491f111588443d70",
        "buggy_code": "hash.put(\"format\", \"date_time||epoch_second\");",
        "fixed_code": "hash.put(\"format\", \"date_time||epoch_millis\");",
        "patch": "@@ -67,7 +67,7 @@ public U createByteField(String fieldName) {\n   public U createDateTimeField(String fieldName) {\n     Map<String, String> hash = new TreeMap<>();\n     hash.put(\"type\", \"date\");\n-    hash.put(\"format\", \"date_time||epoch_second\");\n+    hash.put(\"format\", \"date_time||epoch_millis\");\n     return setField(fieldName, hash);\n   }\n "
    },
    {
        "commit_id": "04b407fcbb9835a1228eb130c3edce5e61341510",
        "commit_message": "SONAR-18242 Clarify error message when creating new project without permissions during scan",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/04b407fcbb9835a1228eb130c3edce5e61341510",
        "buggy_code": ".hasMessage(\"You're not authorized to run analysis. Please contact the project administrator.\");",
        "fixed_code": ".hasMessage(\"You're not authorized to analyze this project or the project doesn't exist on SonarQube and you're not authorized to create it. Please contact an administrator.\");",
        "patch": "@@ -127,7 +127,7 @@ public void fail_if_requires_permission() {\n     assertThatThrownBy(() -> new DefaultScannerWsClient(wsClient, true,\n       new GlobalAnalysisMode(new ScannerProperties(Collections.emptyMap())), analysisWarnings).call(request))\n         .isInstanceOf(MessageException.class)\n-        .hasMessage(\"You're not authorized to run analysis. Please contact the project administrator.\");\n+        .hasMessage(\"You're not authorized to analyze this project or the project doesn't exist on SonarQube and you're not authorized to create it. Please contact an administrator.\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "dfa0c725dca19a6c8e26cf13dc93597d7dcad5c9",
        "commit_message": "NO-JIRA fix error message when migration path is incorrect",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dfa0c725dca19a6c8e26cf13dc93597d7dcad5c9",
        "buggy_code": "throw MessageException.of(\"Current version is too old. Please upgrade to Long Term Support version firstly.\");",
        "fixed_code": "throw MessageException.of(\"The version of SonarQube is too old. Please upgrade to the Long Term Support version first.\");",
        "patch": "@@ -52,7 +52,7 @@ public void start() {\n     if (status == DatabaseVersion.Status.REQUIRES_UPGRADE) {\n       Optional<Long> currentVersion = this.version.getVersion();\n       if (currentVersion.isPresent() && currentVersion.get() < DatabaseVersion.MIN_UPGRADE_VERSION) {\n-        throw MessageException.of(\"Current version is too old. Please upgrade to Long Term Support version firstly.\");\n+        throw MessageException.of(\"The version of SonarQube is too old. Please upgrade to the Long Term Support version first.\");\n       }\n       boolean blueGreen = configuration.getBoolean(ProcessProperties.Property.BLUE_GREEN_ENABLED.getKey()).orElse(false);\n       if (!blueGreen) {"
    },
    {
        "commit_id": "dfa0c725dca19a6c8e26cf13dc93597d7dcad5c9",
        "commit_message": "NO-JIRA fix error message when migration path is incorrect",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dfa0c725dca19a6c8e26cf13dc93597d7dcad5c9",
        "buggy_code": ".hasMessage(\"Current version is too old. Please upgrade to Long Term Support version firstly.\");",
        "fixed_code": ".hasMessage(\"The version of SonarQube is too old. Please upgrade to the Long Term Support version first.\");",
        "patch": "@@ -60,7 +60,7 @@ public void fail_if_requires_firstly_to_upgrade_to_lts() {\n     var compatibility = new DatabaseServerCompatibility(version, config);\n     assertThatThrownBy(compatibility::start)\n       .isInstanceOf(MessageException.class)\n-      .hasMessage(\"Current version is too old. Please upgrade to Long Term Support version firstly.\");\n+      .hasMessage(\"The version of SonarQube is too old. Please upgrade to the Long Term Support version first.\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "a3cecf868ea072b90e74b3ad1305c578eb86c2fe",
        "commit_message": "[NO JIRA] fix test incorrect assertion of positivity",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a3cecf868ea072b90e74b3ad1305c578eb86c2fe",
        "buggy_code": "assertThat(now).isPositive();",
        "fixed_code": "assertThat(now).isNotNegative();",
        "patch": "@@ -97,7 +97,7 @@ private void verifyValuesReturnedByNow(AlwaysIncreasingSystem2 underTest, @Nulla\n         if (initialValue != null) {\n           assertThat(now).isEqualTo(initialValue);\n         } else {\n-          assertThat(now).isPositive();\n+          assertThat(now).isNotNegative();\n         }\n         previousValue = now;\n       } else {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(Measure.Level.toLevel(level.name()).get()).isEqualTo(level);",
        "fixed_code": "assertThat(Measure.Level.toLevel(level.name())).contains(level);",
        "patch": "@@ -32,7 +32,7 @@ public void toLevel_return_absent_for_null_arg() {\n   @Test\n   public void verify_toLevel_supports_all_Level_values() {\n     for (Measure.Level level : Measure.Level.values()) {\n-      assertThat(Measure.Level.toLevel(level.name()).get()).isEqualTo(level);\n+      assertThat(Measure.Level.toLevel(level.name())).contains(level);\n     }\n   }\n "
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(ReportAnalysisFailureNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(ReportAnalysisFailureNotificationHandler.newMetadata());",
        "patch": "@@ -57,7 +57,7 @@ public class ReportAnalysisFailureNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(ReportAnalysisFailureNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(ReportAnalysisFailureNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(taskResultHolder.getResult().getAnalysisUuid().get()).isEqualTo(AN_ANALYSIS_UUID);",
        "fixed_code": "assertThat(taskResultHolder.getResult().getAnalysisUuid()).contains(AN_ANALYSIS_UUID);",
        "patch": "@@ -50,6 +50,6 @@ public void execute_populate_TaskResultHolder_with_a_TaskResult_with_snapshot_id\n \n     underTest.execute(new TestComputationStepContext());\n \n-    assertThat(taskResultHolder.getResult().getAnalysisUuid().get()).isEqualTo(AN_ANALYSIS_UUID);\n+    assertThat(taskResultHolder.getResult().getAnalysisUuid()).contains(AN_ANALYSIS_UUID);\n   }\n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(jsonObject.size()).isEqualTo(3);",
        "fixed_code": "assertThat(jsonObject).hasSize(3);",
        "patch": "@@ -34,6 +34,6 @@ public void toString_generatesValidJson() throws ParseException {\n \n     JSONObject jsonObject = (JSONObject) new JSONParser().parse(newValue.toString());\n \n-    assertThat(jsonObject.size()).isEqualTo(3);\n+    assertThat(jsonObject).hasSize(3);\n   }\n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(jsonObject.size()).isEqualTo(5);",
        "fixed_code": "assertThat(jsonObject).hasSize(5);",
        "patch": "@@ -34,7 +34,7 @@ public void toString_generatesValidJson() throws ParseException {\n \n     JSONObject jsonObject = (JSONObject) new JSONParser().parse(newValue.toString());\n \n-    assertThat(jsonObject.size()).isEqualTo(5);\n+    assertThat(jsonObject).hasSize(5);\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.toString()).isEqualTo(\"[-foo, -bar]\");",
        "fixed_code": "assertThat(underTest).hasToString(\"[-foo, -bar]\");",
        "patch": "@@ -338,7 +338,7 @@ public void addFromMandatoryProperty_accepts_property_equal_to_mandatory_option_\n   public void toString_prints_all_jvm_options() {\n     underTest.add(\"-foo\").add(\"-bar\");\n \n-    assertThat(underTest.toString()).isEqualTo(\"[-foo, -bar]\");\n+    assertThat(underTest).hasToString(\"[-foo, -bar]\");\n   }\n \n   private void expectJvmOptionNotNullNPE(ThrowingCallable callback) {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(ChangesOnMyIssueNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(ChangesOnMyIssueNotificationHandler.newMetadata());",
        "patch": "@@ -81,7 +81,7 @@ public class ChangesOnMyIssueNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(ChangesOnMyIssueNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(ChangesOnMyIssueNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(FPOrWontFixNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(FPOrWontFixNotificationHandler.newMetadata());",
        "patch": "@@ -81,7 +81,7 @@ public class FPOrWontFixNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(FPOrWontFixNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(FPOrWontFixNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(MyNewIssuesNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(MyNewIssuesNotificationHandler.newMetadata());",
        "patch": "@@ -57,7 +57,7 @@ public class MyNewIssuesNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(MyNewIssuesNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(MyNewIssuesNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(NewIssuesNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(NewIssuesNotificationHandler.newMetadata());",
        "patch": "@@ -55,7 +55,7 @@ public class NewIssuesNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(NewIssuesNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(NewIssuesNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(t1.toString()).isEqualTo(\"OPEN->resolve->RESOLVED\");",
        "fixed_code": "assertThat(t1).hasToString(\"OPEN->resolve->RESOLVED\");",
        "patch": "@@ -138,7 +138,7 @@ public void test_equals_and_hashCode() {\n   @Test\n   public void test_toString() {\n     Transition t1 = Transition.create(\"resolve\", \"OPEN\", \"RESOLVED\");\n-    assertThat(t1.toString()).isEqualTo(\"OPEN->resolve->RESOLVED\");\n+    assertThat(t1).hasToString(\"OPEN->resolve->RESOLVED\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(metrics.size()).isEqualTo(2);",
        "fixed_code": "assertThat(metrics).hasSize(2);",
        "patch": "@@ -31,7 +31,7 @@ public class UnanalyzedLanguageMetricsTest {\n   public void count_metrics() {\n     UnanalyzedLanguageMetrics coreCustomMetrics = new UnanalyzedLanguageMetrics();\n     List<Metric> metrics = coreCustomMetrics.getMetrics();\n-    assertThat(metrics.size()).isEqualTo(2);\n+    assertThat(metrics).hasSize(2);\n   }\n \n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(new EmailRecipient(login, email).toString()).isEqualTo(\"EmailRecipient{'\" + login + \"':'\" + email + \"'}\");",
        "fixed_code": "assertThat(new EmailRecipient(login, email)).hasToString(\"EmailRecipient{'\" + login + \"':'\" + email + \"'}\");",
        "patch": "@@ -82,6 +82,6 @@ public void verify_to_String() {\n     String login = randomAlphabetic(11);\n     String email = randomAlphabetic(12);\n \n-    assertThat(new EmailRecipient(login, email).toString()).isEqualTo(\"EmailRecipient{'\" + login + \"':'\" + email + \"'}\");\n+    assertThat(new EmailRecipient(login, email)).hasToString(\"EmailRecipient{'\" + login + \"':'\" + email + \"'}\");\n   }\n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.toString()).isEqualTo(\"QualityGate{id=qg_id, name='qg_name', conditions=[\" +",
        "fixed_code": "assertThat(underTest).hasToString(\"QualityGate{id=qg_id, name='qg_name', conditions=[\" +",
        "patch": "@@ -89,7 +89,7 @@ public void verify_getters() {\n   public void toString_is_override() {\n     QualityGate underTest = new QualityGate(QUALIGATE_ID, QUALIGATE_NAME, ImmutableSet.of(CONDITION_2));\n \n-    assertThat(underTest.toString()).isEqualTo(\"QualityGate{id=qg_id, name='qg_name', conditions=[\" +\n+    assertThat(underTest).hasToString(\"QualityGate{id=qg_id, name='qg_name', conditions=[\" +\n       \"Condition{metricKey='m2', operator=LESS_THAN, errorThreshold='2'}\" +\n       \"]}\");\n   }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getMetadata().get()).isSameAs(QGChangeNotificationHandler.newMetadata());",
        "fixed_code": "assertThat(underTest.getMetadata()).containsSame(QGChangeNotificationHandler.newMetadata());",
        "patch": "@@ -53,7 +53,7 @@ public class QGChangeNotificationHandlerTest {\n \n   @Test\n   public void getMetadata_returns_same_instance_as_static_method() {\n-    assertThat(underTest.getMetadata().get()).isSameAs(QGChangeNotificationHandler.newMetadata());\n+    assertThat(underTest.getMetadata()).containsSame(QGChangeNotificationHandler.newMetadata());\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(QUALITY_PROFILE.toString()).isEqualTo(\"QualityProfile{key=qpKey, name=qpName, language=languageKey, rulesUpdatedAt=1274194245000}\");",
        "fixed_code": "assertThat(QUALITY_PROFILE).hasToString(\"QualityProfile{key=qpKey, name=qpName, language=languageKey, rulesUpdatedAt=1274194245000}\");",
        "patch": "@@ -88,6 +88,6 @@ public void verify_equals() {\n \n   @Test\n   public void verify_toString() {\n-    assertThat(QUALITY_PROFILE.toString()).isEqualTo(\"QualityProfile{key=qpKey, name=qpName, language=languageKey, rulesUpdatedAt=1274194245000}\");\n+    assertThat(QUALITY_PROFILE).hasToString(\"QualityProfile{key=qpKey, name=qpName, language=languageKey, rulesUpdatedAt=1274194245000}\");\n   }\n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(delivery.getErrorMessage().get()).isEqualTo(\"fail to connect\");",
        "fixed_code": "assertThat(delivery.getErrorMessage()).contains(\"fail to connect\");",
        "patch": "@@ -70,7 +70,7 @@ public void getErrorMessage_returns_root_cause_message_if_error() {\n       .setError(cause)\n       .build();\n \n-    assertThat(delivery.getErrorMessage().get()).isEqualTo(\"fail to connect\");\n+    assertThat(delivery.getErrorMessage()).contains(\"fail to connect\");\n   }\n \n   private static WebhookDelivery.Builder newBuilderTemplate() {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.toString()).isEqualTo(\"RekeyedProject{project=Project{uuid='A', key='B', name='C', description='D'}, previousKey='E'}\");",
        "fixed_code": "assertThat(underTest).hasToString(\"RekeyedProject{project=Project{uuid='A', key='B', name='C', description='D'}, previousKey='E'}\");",
        "patch": "@@ -89,7 +89,7 @@ public void verify_toString() {\n     String previousKey = \"E\";\n     RekeyedProject underTest = new RekeyedProject(project, previousKey);\n \n-    assertThat(underTest.toString()).isEqualTo(\"RekeyedProject{project=Project{uuid='A', key='B', name='C', description='D'}, previousKey='E'}\");\n+    assertThat(underTest).hasToString(\"RekeyedProject{project=Project{uuid='A', key='B', name='C', description='D'}, previousKey='E'}\");\n   }\n \n   private static Project newRandomProject() {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(channel.toString()).isEqualTo(\"FakeNotificationChannel\");",
        "fixed_code": "assertThat(channel).hasToString(\"FakeNotificationChannel\");",
        "patch": "@@ -31,7 +31,7 @@ public class NotificationChannelTest {\n   public void defaultMethods() {\n     NotificationChannel channel = new FakeNotificationChannel();\n     assertThat(channel.getKey()).isEqualTo(\"FakeNotificationChannel\");\n-    assertThat(channel.toString()).isEqualTo(\"FakeNotificationChannel\");\n+    assertThat(channel).hasToString(\"FakeNotificationChannel\");\n   }\n \n   private static class FakeNotificationChannel extends NotificationChannel {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.getQualityGateStatus().get()).isEqualTo(Level.OK);",
        "fixed_code": "assertThat(underTest.getQualityGateStatus()).contains(Level.OK);",
        "patch": "@@ -70,7 +70,7 @@ public void isNoData_returns_false_when_data_exists() {\n   public void set_quality_gate_status() {\n     underTest.setQualityGateStatus(OK);\n \n-    assertThat(underTest.getQualityGateStatus().get()).isEqualTo(Level.OK);\n+    assertThat(underTest.getQualityGateStatus()).contains(Level.OK);\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(underTest.toString()).isEqualTo(\"ClusterHealth{health=\" + health + \", nodes=\" + nodeHealths + \"}\");",
        "fixed_code": "assertThat(underTest).hasToString(\"ClusterHealth{health=\" + health + \", nodes=\" + nodeHealths + \"}\");",
        "patch": "@@ -103,7 +103,7 @@ public void verify_toString() {\n \n     ClusterHealth underTest = new ClusterHealth(health, nodeHealths);\n \n-    assertThat(underTest.toString()).isEqualTo(\"ClusterHealth{health=\" + health + \", nodes=\" + nodeHealths + \"}\");\n+    assertThat(underTest).hasToString(\"ClusterHealth{health=\" + health + \", nodes=\" + nodeHealths + \"}\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(Health.GREEN.toString()).isEqualTo(\"Health{GREEN, causes=[]}\");",
        "fixed_code": "assertThat(Health.GREEN).hasToString(\"Health{GREEN, causes=[]}\");",
        "patch": "@@ -142,7 +142,7 @@ public void hashcode_is_based_on_status_and_causes() {\n \n   @Test\n   public void verify_toString() {\n-    assertThat(Health.GREEN.toString()).isEqualTo(\"Health{GREEN, causes=[]}\");\n+    assertThat(Health.GREEN).hasToString(\"Health{GREEN, causes=[]}\");\n     Health.Builder builder = Health.builder().setStatus(anyStatus);\n     randomCauses.forEach(builder::addCause);\n "
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(writer.toString()).isEqualTo(\"content\");",
        "fixed_code": "assertThat(writer).hasToString(\"content\");",
        "patch": "@@ -40,7 +40,7 @@ public void write_content_when_closing_resource() throws IOException {\n \n     underTest.close();\n \n-    assertThat(writer.toString()).isEqualTo(\"content\");\n+    assertThat(writer).hasToString(\"content\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(outputStream.toString()).isEqualTo(\"test\");",
        "fixed_code": "assertThat(outputStream).hasToString(\"test\");",
        "patch": "@@ -67,7 +67,7 @@ public void return_web_page_content() throws Exception {\n     verify(response).setContentType(\"text/html\");\n     verify(response).setCharacterEncoding(\"utf-8\");\n     verify(response).setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n-    assertThat(outputStream.toString()).isEqualTo(\"test\");\n+    assertThat(outputStream).hasToString(\"test\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(i18nClassloader.toString()).isEqualTo(\"i18n-classloader\");",
        "fixed_code": "assertThat(i18nClassloader).hasToString(\"i18n-classloader\");",
        "patch": "@@ -65,7 +65,7 @@ public void not_support_lookup_of_java_classes() throws ClassNotFoundException {\n \n   @Test\n   public void override_toString() {\n-    assertThat(i18nClassloader.toString()).isEqualTo(\"i18n-classloader\");\n+    assertThat(i18nClassloader).hasToString(\"i18n-classloader\");\n   }\n \n   private static URLClassLoader newCheckstyleClassloader() {"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(pluginInfo.toString()).isEqualTo(\"[java / 1.1]\");",
        "fixed_code": "assertThat(pluginInfo).hasToString(\"[java / 1.1]\");",
        "patch": "@@ -287,7 +287,7 @@ public void create_from_file_with_documentation() {\n   @Test\n   public void test_toString() {\n     PluginInfo pluginInfo = new PluginInfo(\"java\").setVersion(Version.create(\"1.1\"));\n-    assertThat(pluginInfo.toString()).isEqualTo(\"[java / 1.1]\");\n+    assertThat(pluginInfo).hasToString(\"[java / 1.1]\");\n \n     pluginInfo.setImplementationBuild(\"SHA1\");\n     assertThat(pluginInfo).hasToString(\"[java / 1.1 / SHA1]\");"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(env.toString()).isEqualTo(\"Maven Plugin/2.0\");",
        "fixed_code": "assertThat(env).hasToString(\"Maven Plugin/2.0\");",
        "patch": "@@ -36,6 +36,6 @@ public void test_bean() {\n   public void test_toString() {\n     EnvironmentInformation env = new EnvironmentInformation(\"Maven Plugin\", \"2.0\");\n \n-    assertThat(env.toString()).isEqualTo(\"Maven Plugin/2.0\");\n+    assertThat(env).hasToString(\"Maven Plugin/2.0\");\n   }\n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(extensions.size()).isEqualTo(2);",
        "fixed_code": "assertThat(extensions).hasSize(2);",
        "patch": "@@ -130,7 +130,7 @@ public void useMethodAnnotationsToSortExtensions() {\n     ModuleSensorExtensionDictionary selector = newSelector(Marker.class, a, b);\n     List<Object> extensions = new ArrayList<>(selector.select(Marker.class, true, null));\n \n-    assertThat(extensions.size()).isEqualTo(2);\n+    assertThat(extensions).hasSize(2);\n     assertThat(extensions.get(0)).isEqualTo(a);\n     assertThat(extensions.get(1)).isEqualTo(b);\n "
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(new IssuePattern(\"*\", \"*:Foo*IllegalRegexp\").toString()).isEqualTo(\"IssuePattern{filePattern=*, rulePattern=*:Foo*IllegalRegexp}\");",
        "fixed_code": "assertThat(new IssuePattern(\"*\", \"*:Foo*IllegalRegexp\")).hasToString(\"IssuePattern{filePattern=*, rulePattern=*:Foo*IllegalRegexp}\");",
        "patch": "@@ -59,7 +59,7 @@ public void shouldMatchRule() {\n \n   @Test\n   public void toString_should_include_all_fields() {\n-    assertThat(new IssuePattern(\"*\", \"*:Foo*IllegalRegexp\").toString()).isEqualTo(\"IssuePattern{filePattern=*, rulePattern=*:Foo*IllegalRegexp}\");\n+    assertThat(new IssuePattern(\"*\", \"*:Foo*IllegalRegexp\")).hasToString(\"IssuePattern{filePattern=*, rulePattern=*:Foo*IllegalRegexp}\");\n   }\n \n }"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(new LineRange(12, 15).toString()).isEqualTo(\"[12-15]\");",
        "fixed_code": "assertThat(new LineRange(12, 15)).hasToString(\"[12-15]\");",
        "patch": "@@ -51,7 +51,7 @@ public void shouldTestInclusionInRangeOfLines() {\n \n   @Test\n   public void testToString() {\n-    assertThat(new LineRange(12, 15).toString()).isEqualTo(\"[12-15]\");\n+    assertThat(new LineRange(12, 15)).hasToString(\"[12-15]\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "118a3ed166799831e097748f2ce8e113298ad14e",
        "commit_message": "[NO JIRA] Fix quality issues related to assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118a3ed166799831e097748f2ce8e113298ad14e",
        "buggy_code": "assertThat(scanner.toString()).isEqualTo(\"Issues Exclusions - Source Scanner\");",
        "fixed_code": "assertThat(scanner).hasToString(\"Issues Exclusions - Source Scanner\");",
        "patch": "@@ -56,7 +56,7 @@ public void before() {\n \n   @Test\n   public void testToString() {\n-    assertThat(scanner.toString()).isEqualTo(\"Issues Exclusions - Source Scanner\");\n+    assertThat(scanner).hasToString(\"Issues Exclusions - Source Scanner\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Manage ALM Integrations\")",
        "fixed_code": ".setDescription(\"Manage DevOps Platform Integrations\")",
        "patch": "@@ -32,7 +32,7 @@ public AlmIntegrationsWs(List<AlmIntegrationsWsAction> actions) {\n   @Override\n   public void define(Context context) {\n     NewController controller = context.createController(\"api/alm_integrations\")\n-      .setDescription(\"Manage ALM Integrations\")\n+      .setDescription(\"Manage DevOps Platform Integrations\")\n       .setSince(\"8.2\");\n \n     actions.forEach(a -> a.define(controller));"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".orElseThrow(() -> new NotFoundException(String.format(\"ALM Setting '%s' not found\", almSettingKey)));",
        "fixed_code": ".orElseThrow(() -> new NotFoundException(String.format(\"DevOps Platform Setting '%s' not found\", almSettingKey)));",
        "patch": "@@ -55,7 +55,7 @@ public AlmSettingDto getAlmSetting(Request request) {\n     String almSettingKey = request.mandatoryParam(PARAM_ALM_SETTING);\n     try (DbSession dbSession = dbClient.openSession(false)) {\n       return dbClient.almSettingDao().selectByKey(dbSession, almSettingKey)\n-        .orElseThrow(() -> new NotFoundException(String.format(\"ALM Setting '%s' not found\", almSettingKey)));\n+        .orElseThrow(() -> new NotFoundException(String.format(\"DevOps Platform Setting '%s' not found\", almSettingKey)));\n     }\n   }\n "
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"ALM setting key\");",
        "fixed_code": ".setDescription(\"DevOps Platform setting key\");",
        "patch": "@@ -90,7 +90,7 @@ public void define(WebService.NewController context) {\n     action.createParam(PARAM_ALM_SETTING)\n       .setRequired(true)\n       .setMaximumLength(200)\n-      .setDescription(\"ALM setting key\");\n+      .setDescription(\"DevOps Platform setting key\");\n \n   }\n "
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Manage ALM Settings\")",
        "fixed_code": ".setDescription(\"Manage DevOps Platform Settings\")",
        "patch": "@@ -32,7 +32,7 @@ public AlmSettingsWs(List<AlmSettingsWsAction> actions) {\n   @Override\n   public void define(Context context) {\n     NewController controller = context.createController(\"api/alm_settings\")\n-      .setDescription(\"Manage ALM Settings\")\n+      .setDescription(\"Manage DevOps Platform Settings\")\n       .setSince(\"8.1\");\n \n     actions.forEach(a -> a.define(controller));"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Create Azure ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Create Azure instance Setting. <br/>\" +",
        "patch": "@@ -49,7 +49,7 @@ public CreateAzureAction(DbClient dbClient, UserSession userSession, AlmSettings\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"create_azure\")\n-      .setDescription(\"Create Azure ALM instance Setting. <br/>\" +\n+      .setDescription(\"Create Azure instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Create Bitbucket ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Create Bitbucket instance Setting. <br/>\" +",
        "patch": "@@ -49,7 +49,7 @@ public CreateBitBucketAction(DbClient dbClient, UserSession userSession, AlmSett\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"create_bitbucket\")\n-      .setDescription(\"Create Bitbucket ALM instance Setting. <br/>\" +\n+      .setDescription(\"Create Bitbucket instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Create GitHub ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Create GitHub instance Setting. <br/>\" +",
        "patch": "@@ -55,7 +55,7 @@ public CreateGithubAction(DbClient dbClient, UserSession userSession,\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"create_github\")\n-      .setDescription(\"Create GitHub ALM instance Setting. <br/>\" +\n+      .setDescription(\"Create GitHub instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setChangelog(new Change(\"9.7\", String.format(\"Optional parameter '%s' was added\", PARAM_WEBHOOK_SECRET)))\n       .setPost(true)"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Create GitLab ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Create GitLab instance Setting. <br/>\" +",
        "patch": "@@ -50,7 +50,7 @@ public CreateGitlabAction(DbClient dbClient, UserSession userSession, AlmSetting\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"create_gitlab\")\n-      .setDescription(\"Create GitLab ALM instance Setting. <br/>\" +\n+      .setDescription(\"Create GitLab instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"List ALM setting available for a given project, sorted by ALM key<br/>\" +",
        "fixed_code": ".setDescription(\"List DevOps Platform setting available for a given project, sorted by DevOps Platform key<br/>\" +",
        "patch": "@@ -58,7 +58,7 @@ public ListAction(DbClient dbClient, UserSession userSession, ComponentFinder co\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"list\")\n-      .setDescription(\"List ALM setting available for a given project, sorted by ALM key<br/>\" +\n+      .setDescription(\"List DevOps Platform setting available for a given project, sorted by DevOps Platform key<br/>\" +\n         \"Requires the 'Administer project' permission if the '\" + PARAM_PROJECT + \"' parameter is provided, requires the 'Create Projects' permission otherwise.\")\n       .setSince(\"8.1\")\n       .setResponseExample(getClass().getResource(\"example-list.json\"))"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Update Azure ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Update Azure instance Setting. <br/>\" +",
        "patch": "@@ -50,7 +50,7 @@ public UpdateAzureAction(DbClient dbClient, UserSession userSession, AlmSettings\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"update_azure\")\n-      .setDescription(\"Update Azure ALM instance Setting. <br/>\" +\n+      .setDescription(\"Update Azure instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Update Bitbucket ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Update Bitbucket instance Setting. <br/>\" +",
        "patch": "@@ -50,7 +50,7 @@ public UpdateBitbucketAction(DbClient dbClient, UserSession userSession, AlmSett\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"update_bitbucket\")\n-      .setDescription(\"Update Bitbucket ALM instance Setting. <br/>\" +\n+      .setDescription(\"Update Bitbucket instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Update GitHub ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Update GitHub instance Setting. <br/>\" +",
        "patch": "@@ -56,7 +56,7 @@ public UpdateGithubAction(DbClient dbClient, UserSession userSession, AlmSetting\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"update_github\")\n-      .setDescription(\"Update GitHub ALM instance Setting. <br/>\" +\n+      .setDescription(\"Update GitHub instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".setDescription(\"Update GitLab ALM instance Setting. <br/>\" +",
        "fixed_code": ".setDescription(\"Update GitLab instance Setting. <br/>\" +",
        "patch": "@@ -51,7 +51,7 @@ public UpdateGitlabAction(DbClient dbClient, UserSession userSession, AlmSetting\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"update_gitlab\")\n-      .setDescription(\"Update GitLab ALM instance Setting. <br/>\" +\n+      .setDescription(\"Update GitLab instance Setting. <br/>\" +\n         \"Requires the 'Administer System' permission\")\n       .setPost(true)\n       .setSince(\"8.1\")"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'key' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'key' not found\");",
        "patch": "@@ -68,7 +68,7 @@ public void it_throws_exception_on_get_alm_setting_when_key_is_not_found() {\n     when(request.mandatoryParam(\"almSetting\")).thenReturn(\"key\");\n     assertThatThrownBy(() -> underTest.getAlmSetting(request))\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'key' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'key' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -235,7 +235,7 @@ public void fail_check_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -128,7 +128,7 @@ public void fail_check_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -308,7 +308,7 @@ public void fail_check_pat_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessageContaining(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -207,7 +207,7 @@ public void fail_check_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessageContaining(\"ALM Setting 'testKey' not found\");\n+      .hasMessageContaining(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessageContaining(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -155,7 +155,7 @@ public void fail_check_pat_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessageContaining(\"ALM Setting 'testKey' not found\");\n+      .hasMessageContaining(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -226,7 +226,7 @@ public void fail_check_alm_setting_not_found() {\n         .execute();\n     })\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -120,7 +120,7 @@ public void fail_check_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -207,7 +207,7 @@ public void fail_check_pat_alm_setting_not_found() {\n         .execute();\n     })\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"Github ALM Setting 'unknown' not found\");",
        "fixed_code": ".hasMessage(\"Github Setting 'unknown' not found\");",
        "patch": "@@ -77,7 +77,7 @@ public void fail_when_almSetting_does_not_exist() {\n     TestRequest request = ws.newRequest().setParam(GetGithubClientIdAction.PARAM_ALM_SETTING, \"unknown\");\n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"Github ALM Setting 'unknown' not found\");\n+      .hasMessage(\"Github Setting 'unknown' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'unknown' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'unknown' not found\");",
        "patch": "@@ -171,7 +171,7 @@ public void fail_when_almSetting_does_not_exist() {\n       .setParam(PARAM_REPOSITORY_KEY, \"test/repo\");\n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'unknown' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'unknown' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"GitHub ALM Setting 'unknown' not found\");",
        "fixed_code": ".hasMessage(\"GitHub Setting 'unknown' not found\");",
        "patch": "@@ -96,7 +96,7 @@ public void fail_when_almSetting_does_not_exist() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"GitHub ALM Setting 'unknown' not found\");\n+      .hasMessage(\"GitHub Setting 'unknown' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"GitHub ALM Setting 'unknown' not found\");",
        "fixed_code": ".hasMessage(\"GitHub Setting 'unknown' not found\");",
        "patch": "@@ -85,7 +85,7 @@ public void fail_when_almSetting_does_not_exist() {\n         .setParam(ListGithubRepositoriesAction.PARAM_ORGANIZATION, \"test\");\n     assertThatThrownBy(request::execute)\n         .isInstanceOf(NotFoundException.class)\n-        .hasMessage(\"GitHub ALM Setting 'unknown' not found\");\n+        .hasMessage(\"GitHub Setting 'unknown' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM Setting 'testKey' not found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform Setting 'testKey' not found\");",
        "patch": "@@ -204,7 +204,7 @@ public void fail_when_alm_setting_not_found() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM Setting 'testKey' not found\");\n+      .hasMessage(\"DevOps Platform Setting 'testKey' not found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(\"ALM setting with key 'unknown' cannot be found\");",
        "fixed_code": ".hasMessageContaining(\"DevOps Platform setting with key 'unknown' cannot be found\");",
        "patch": "@@ -94,7 +94,7 @@ public void fail_when_alm_setting_does_not_exist() {\n       .setParam(\"almSetting\", \"unknown\")\n       .execute())\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessageContaining(\"ALM setting with key 'unknown' cannot be found\");\n+      .hasMessageContaining(\"DevOps Platform setting with key 'unknown' cannot be found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", azureAlmSetting.getKey()));",
        "fixed_code": ".hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", azureAlmSetting.getKey()));",
        "patch": "@@ -90,7 +90,7 @@ public void fail_when_key_is_already_used() {\n       .setParam(\"url\", \"https://ado.sonarqube.com/\")\n       .execute())\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", azureAlmSetting.getKey()));\n+      .hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", azureAlmSetting.getKey()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));",
        "fixed_code": ".hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));",
        "patch": "@@ -88,7 +88,7 @@ public void fail_when_key_is_already_used() {\n       .setParam(\"personalAccessToken\", \"98765432100\")\n       .execute())\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));\n+      .hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));",
        "fixed_code": ".hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));",
        "patch": "@@ -92,7 +92,7 @@ public void fail_when_key_is_already_used() {\n       .setParam(\"clientSecret\", \"secret\")\n       .execute())\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));\n+      .hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", bitbucketAlmSetting.getKey()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", gitHubAlmSetting.getKey()));",
        "fixed_code": ".hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", gitHubAlmSetting.getKey()));",
        "patch": "@@ -127,7 +127,7 @@ public void fail_when_key_is_already_used() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", gitHubAlmSetting.getKey()));\n+      .hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", gitHubAlmSetting.getKey()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", gitlabAlmSetting.getKey()));",
        "fixed_code": ".hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", gitlabAlmSetting.getKey()));",
        "patch": "@@ -120,7 +120,7 @@ public void fail_when_key_is_already_used() {\n       .setParam(\"url\", GITLAB_URL)\n       .execute())\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessageContaining(String.format(\"An ALM setting with key '%s' already exist\", gitlabAlmSetting.getKey()));\n+      .hasMessageContaining(String.format(\"An DevOps Platform setting with key '%s' already exist\", gitlabAlmSetting.getKey()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessageContaining(\"ALM setting with key 'unknown' cannot be found\");",
        "fixed_code": ".hasMessageContaining(\"DevOps Platform setting with key 'unknown' cannot be found\");",
        "patch": "@@ -108,7 +108,7 @@ public void fail_when_key_does_not_match_existing_alm_setting() {\n       .setParam(\"key\", \"unknown\")\n       .execute())\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessageContaining(\"ALM setting with key 'unknown' cannot be found\");\n+      .hasMessageContaining(\"DevOps Platform setting with key 'unknown' cannot be found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eba80bd6547e1eaf284b92d340b072fefa969169",
        "commit_message": "SONAR-14901 Fix \"ALM\" term in product+doc",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eba80bd6547e1eaf284b92d340b072fefa969169",
        "buggy_code": ".hasMessage(\"ALM setting with key 'unknown' cannot be found\");",
        "fixed_code": ".hasMessage(\"DevOps Platform setting with key 'unknown' cannot be found\");",
        "patch": "@@ -92,7 +92,7 @@ public void fail_when_key_does_not_match_existing_alm_setting() {\n \n     assertThatThrownBy(request::execute)\n       .isInstanceOf(NotFoundException.class)\n-      .hasMessage(\"ALM setting with key 'unknown' cannot be found\");\n+      .hasMessage(\"DevOps Platform setting with key 'unknown' cannot be found\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "146e8dc7937fdc768961039db90f53613521abb1",
        "commit_message": "SONAR-17775 fixed a bug where old portfolio and app XMLs could not be sometimes imported",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/146e8dc7937fdc768961039db90f53613521abb1",
        "buggy_code": "NewComponent.newComponentBuilder().setName(componentNameAndKey).setKey(componentNameAndKey).setQualifier(\"APP\").build(), null, null);",
        "fixed_code": "NewComponent.newComponentBuilder().setName(componentNameAndKey).setKey(componentNameAndKey).setQualifier(\"APP\").build(), null, null, null);",
        "patch": "@@ -340,7 +340,7 @@ public void create_shouldFail_whenCreatingProjectWithExistingKeyButDifferentCase\n   public void createApplicationOrPortfolio_createsComponentWithMasterBranchName() {\n     String componentNameAndKey = \"createApplicationOrPortfolio\";\n     ComponentDto app = underTest.createApplicationOrPortfolio(db.getSession(),\n-      NewComponent.newComponentBuilder().setName(componentNameAndKey).setKey(componentNameAndKey).setQualifier(\"APP\").build(), null, null);\n+      NewComponent.newComponentBuilder().setName(componentNameAndKey).setKey(componentNameAndKey).setQualifier(\"APP\").build(), null, null, null);\n \n     Optional<BranchDto> branch = db.getDbClient().branchDao().selectByUuid(db.getSession(), app.branchUuid());\n     assertThat(branch).isPresent();"
    },
    {
        "commit_id": "db1874af5166749a7259d1f26b6e646ce9db3502",
        "commit_message": "[NO-JIRA] Fix unittest that relies on no longer existing domain",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db1874af5166749a7259d1f26b6e646ce9db3502",
        "buggy_code": "Assertions.assertThatThrownBy(() -> underTest.lookup(\"good-url.com\"))",
        "fixed_code": "Assertions.assertThatThrownBy(() -> underTest.lookup(\"sonarsource.com\"))",
        "patch": "@@ -108,7 +108,7 @@ public void lookup_fail_on_network_interface_throwing_socket_exception() throws\n     when(networkInterfaceProvider.getNetworkInterfaceAddresses())\n       .thenThrow(new SocketException());\n \n-    Assertions.assertThatThrownBy(() -> underTest.lookup(\"good-url.com\"))\n+    Assertions.assertThatThrownBy(() -> underTest.lookup(\"sonarsource.com\"))\n       .hasMessageContaining(\"Network interfaces could not be fetched.\")\n       .isInstanceOf(IllegalArgumentException.class);\n   }"
    },
    {
        "commit_id": "db1874af5166749a7259d1f26b6e646ce9db3502",
        "commit_message": "[NO-JIRA] Fix unittest that relies on no longer existing domain",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db1874af5166749a7259d1f26b6e646ce9db3502",
        "buggy_code": "assertThatThrownBy(() -> underTest.checkUrlPattern(\"https://good-url.com\", \"msg\"))",
        "fixed_code": "assertThatThrownBy(() -> underTest.checkUrlPattern(\"https://sonarsource.com\", \"msg\"))",
        "patch": "@@ -111,7 +111,7 @@ public void checkUrlPatternSuccessfulForLoopbackAddressWhenSonarValidateWebhooks\n   public void itThrowsIllegalExceptionIfGettingNetworkInterfaceAddressesFails() throws SocketException {\n     when(networkInterfaceProvider.getNetworkInterfaceAddresses()).thenThrow(new SocketException());\n \n-    assertThatThrownBy(() -> underTest.checkUrlPattern(\"https://good-url.com\", \"msg\"))\n+    assertThatThrownBy(() -> underTest.checkUrlPattern(\"https://sonarsource.com\", \"msg\"))\n       .hasMessageContaining(\"Can not retrieve a network interfaces\")\n       .isInstanceOf(IllegalStateException.class);\n "
    },
    {
        "commit_id": "0f36fac2f8ab63502cc77f5105386d68052dcc11",
        "commit_message": "SONAR-14829 Allow bulk adding tags on resolved issue.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f36fac2f8ab63502cc77f5105386d68052dcc11",
        "buggy_code": "public Action(String key) {",
        "fixed_code": "protected Action(String key) {",
        "patch": "@@ -43,7 +43,7 @@ public abstract class Action {\n   private final String key;\n   private final List<Condition> conditions;\n \n-  public Action(String key) {\n+  protected Action(String key) {\n     Preconditions.checkArgument(!Strings.isNullOrEmpty(key), \"Action key must be set\");\n     this.key = key;\n     this.conditions = newArrayList();"
    },
    {
        "commit_id": "60e4b88e4567c1af3051b6cdc4c8858f8b0fca21",
        "commit_message": "SONAR-17508 - Fix SSF-327",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/60e4b88e4567c1af3051b6cdc4c8858f8b0fca21",
        "buggy_code": "boolean doAuthenticate(LdapAuthenticator.Context context);",
        "fixed_code": "LdapAuthenticationResult doAuthenticate(LdapAuthenticator.Context context);",
        "patch": "@@ -30,7 +30,7 @@ public interface LdapAuthenticator {\n    * @return true if user was successfully authenticated with specified credentials, false otherwise\n    * @throws RuntimeException in case of unexpected error such as connection failure\n    */\n-  boolean doAuthenticate(LdapAuthenticator.Context context);\n+  LdapAuthenticationResult doAuthenticate(LdapAuthenticator.Context context);\n \n   final class Context {\n     private String username;"
    },
    {
        "commit_id": "60e4b88e4567c1af3051b6cdc4c8858f8b0fca21",
        "commit_message": "SONAR-17508 - Fix SSF-327",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/60e4b88e4567c1af3051b6cdc4c8858f8b0fca21",
        "buggy_code": "private static final String DEFAULT_LDAP_SERVER_KEY = \"<default>\";",
        "fixed_code": "public static final String DEFAULT_LDAP_SERVER_KEY = \"default\";",
        "patch": "@@ -37,11 +37,11 @@\n @ServerSide\n public class LdapSettingsManager {\n \n+  public static final String DEFAULT_LDAP_SERVER_KEY = \"default\";\n   private static final Logger LOG = Loggers.get(LdapSettingsManager.class);\n \n   private static final String LDAP_SERVERS_PROPERTY = \"ldap.servers\";\n   private static final String LDAP_PROPERTY_PREFIX = \"ldap\";\n-  private static final String DEFAULT_LDAP_SERVER_KEY = \"<default>\";\n   private final Configuration config;\n   private final LdapAutodiscovery ldapAutodiscovery;\n   private Map<String, LdapUserMapping> userMappings = null;"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "if (!(o instanceof SingleDeprecatedRuleKey)) {",
        "fixed_code": "if (o == null || getClass() != o.getClass()) {",
        "patch": "@@ -106,7 +106,7 @@ public boolean equals(Object o) {\n     if (this == o) {\n       return true;\n     }\n-    if (!(o instanceof SingleDeprecatedRuleKey)) {\n+    if (o == null || getClass() != o.getClass()) {\n       return false;\n     }\n     SingleDeprecatedRuleKey that = (SingleDeprecatedRuleKey) o;"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "return (obj instanceof Terminator) && (((Terminator) obj).stringNumber == stringNumber);",
        "fixed_code": "return obj != null && getClass() == obj.getClass() && ((Terminator) obj).stringNumber == stringNumber;",
        "patch": "@@ -89,7 +89,7 @@ public Terminator(int i) {\n \n     @Override\n     public boolean equals(Object obj) {\n-      return (obj instanceof Terminator) && (((Terminator) obj).stringNumber == stringNumber);\n+      return obj != null && getClass() == obj.getClass() && ((Terminator) obj).stringNumber == stringNumber;\n     }\n \n     @Override"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "if (!(object instanceof CloneGroup)) {",
        "fixed_code": "if (object == null || getClass() != object.getClass()) {",
        "patch": "@@ -131,7 +131,7 @@ public String toString() {\n    */\n   @Override\n   public boolean equals(Object object) {\n-    if (!(object instanceof CloneGroup)) {\n+    if (object == null || getClass() != object.getClass()) {\n       return false;\n     }\n     CloneGroup another = (CloneGroup) object;"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "if (obj instanceof ClonePart) {",
        "fixed_code": "if (obj != null && getClass() == obj.getClass()) {",
        "patch": "@@ -60,7 +60,7 @@ public int getLines() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (obj instanceof ClonePart) {\n+    if (obj != null && getClass() == obj.getClass()) {\n       ClonePart another = (ClonePart) obj;\n       return another.resourceId.equals(resourceId)\n         && another.startLine == startLine"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "if (!(obj instanceof Statement)) {",
        "fixed_code": "if (obj == null || getClass() != obj.getClass()) {",
        "patch": "@@ -79,7 +79,7 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (!(obj instanceof Statement)) {\n+    if (obj == null || getClass() != obj.getClass()) {\n       return false;\n     }\n     Statement other = (Statement) obj;"
    },
    {
        "commit_id": "ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "commit_message": "[NO-JIRA] Fix reported code smells & bugs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ce409098feab4f5f5ca8168cd995775e1fa32cbb",
        "buggy_code": "if (object instanceof Token) {",
        "fixed_code": "if (object != null && getClass() == object.getClass()) {",
        "patch": "@@ -50,7 +50,7 @@ public String getValue() {\n \n   @Override\n   public boolean equals(Object object) {\n-    if (object instanceof Token) {\n+    if (object != null && getClass() == object.getClass()) {\n       Token anotherToken = (Token) object;\n       return anotherToken.line == line && anotherToken.column == column && anotherToken.value.equals(value);\n     }"
    },
    {
        "commit_id": "342f7a1caf70e329f92466f07424406fbc424ee9",
        "commit_message": "SONAR-13579 Ensure issue tracking between new file on Pull Request and original file on target branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/342f7a1caf70e329f92466f07424406fbc424ee9",
        "buggy_code": "TrackerTargetBranchInputFactory targetInputFactory = new TrackerTargetBranchInputFactory(issuesLoader, targetBranchComponentUuids, dbClient);",
        "fixed_code": "TrackerTargetBranchInputFactory targetInputFactory = new TrackerTargetBranchInputFactory(issuesLoader, targetBranchComponentUuids, dbClient, movedFilesRepository);",
        "patch": "@@ -154,7 +154,7 @@ public void setUp() throws Exception {\n       ruleRepositoryRule, activeRulesHolder);\n     TrackerBaseInputFactory baseInputFactory = new TrackerBaseInputFactory(issuesLoader, dbClient, movedFilesRepository, mock(ReportModulesPath.class), analysisMetadataHolder,\n       new IssueFieldsSetter(), mock(ComponentsWithUnprocessedIssues.class));\n-    TrackerTargetBranchInputFactory targetInputFactory = new TrackerTargetBranchInputFactory(issuesLoader, targetBranchComponentUuids, dbClient);\n+    TrackerTargetBranchInputFactory targetInputFactory = new TrackerTargetBranchInputFactory(issuesLoader, targetBranchComponentUuids, dbClient, movedFilesRepository);\n     TrackerReferenceBranchInputFactory mergeInputFactory = new TrackerReferenceBranchInputFactory(issuesLoader, mergeBranchComponentsUuids, dbClient);\n     ClosedIssuesInputFactory closedIssuesInputFactory = new ClosedIssuesInputFactory(issuesLoader, dbClient, movedFilesRepository);\n     tracker = new TrackerExecution(baseInputFactory, closedIssuesInputFactory, new Tracker<>(), issuesLoader, analysisMetadataHolder);"
    },
    {
        "commit_id": "7586590b46ab25a70d6effee855a65390ba89d9d",
        "commit_message": "NO-JIRA - Fix dbKey not existing anymore",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7586590b46ab25a70d6effee855a65390ba89d9d",
        "buggy_code": "ProjectDto project5 = db.components().insertPublicProjectDto(p -> p.setDbKey(\"Project the fifth\"));",
        "fixed_code": "ProjectDto project5 = db.components().insertPublicProjectDto(p -> p.setKey(\"Project the fifth\"));",
        "patch": "@@ -247,7 +247,7 @@ public void filter_on_name_and_key() {\n     ProjectDto project2 = db.components().insertPublicProjectDto(p -> p.setName(\"Project Two\"));\n     ProjectDto project3 = db.components().insertPublicProjectDto(p -> p.setName(\"Project Three\"));\n     db.components().insertPublicProjectDto(p -> p.setName(\"Project Four\"));\n-    ProjectDto project5 = db.components().insertPublicProjectDto(p -> p.setDbKey(\"Project the fifth\"));\n+    ProjectDto project5 = db.components().insertPublicProjectDto(p -> p.setKey(\"Project the fifth\"));\n \n     QProfileDto qualityProfile = db.qualityProfiles().insert();\n     associateProjectsWithProfile(qualityProfile, project1, project2);"
    },
    {
        "commit_id": "e33830f707d30bfbdbd08a6a58a12f4387b0f5e5",
        "commit_message": "NO-JIRA fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e33830f707d30bfbdbd08a6a58a12f4387b0f5e5",
        "buggy_code": "private static final Pattern CONTAINS_ONLY_AUTHORIZED_CHARACTERS = Pattern.compile(\"\\\\A\\\\w[\\\\w\\\\.\\\\-_@]+\\\\z\");",
        "fixed_code": "private static final Pattern CONTAINS_ONLY_AUTHORIZED_CHARACTERS = Pattern.compile(\"\\\\A\\\\w[\\\\w\\\\.\\\\-@]+\\\\z\");",
        "patch": "@@ -68,7 +68,7 @@ public class UserUpdater {\n   private static final String NAME_PARAM = \"Name\";\n   private static final String EMAIL_PARAM = \"Email\";\n   private static final Pattern START_WITH_SPECIFIC_AUTHORIZED_CHARACTERS = Pattern.compile(\"^[\\\\.\\\\-_@].*$\");\n-  private static final Pattern CONTAINS_ONLY_AUTHORIZED_CHARACTERS = Pattern.compile(\"\\\\A\\\\w[\\\\w\\\\.\\\\-_@]+\\\\z\");\n+  private static final Pattern CONTAINS_ONLY_AUTHORIZED_CHARACTERS = Pattern.compile(\"\\\\A\\\\w[\\\\w\\\\.\\\\-@]+\\\\z\");\n \n   public static final int LOGIN_MIN_LENGTH = 2;\n   public static final int LOGIN_MAX_LENGTH = 255;"
    },
    {
        "commit_id": "53ac6897483485e2a5811c79e9104f50940b6822",
        "commit_message": "[NOJIRA] Fix build on master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53ac6897483485e2a5811c79e9104f50940b6822",
        "buggy_code": "Deque<PushEventDto> events = getProjectEvents(project.projectUuid());",
        "fixed_code": "Deque<PushEventDto> events = getProjectEvents(project.branchUuid());",
        "patch": "@@ -115,7 +115,7 @@ public void distributeRuleChangeEvent_when_project_has_only_default_quality_prof\n \n     underTest.distributeRuleChangeEvent(List.of(defaultQualityProfile), of(activeRuleChange), language);\n \n-    Deque<PushEventDto> events = getProjectEvents(project.projectUuid());\n+    Deque<PushEventDto> events = getProjectEvents(project.branchUuid());\n \n     assertThat(events)\n       .hasSize(1);"
    },
    {
        "commit_id": "b6bffded1c8e125cb2621b47ddcb9ddb0799b98f",
        "commit_message": "SONAR-17352 Fix quality issues\n\nCo-authored-by: Duarte Meneses <duarte.meneses@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b6bffded1c8e125cb2621b47ddcb9ddb0799b98f",
        "buggy_code": "public void setPrivateForRootComponentUuid(DbSession session, String branchUuid, boolean isPrivate, @Nullable String qualifier, String componentKey, String componentName) {",
        "fixed_code": "public void setPrivateForRootComponentUuid(DbSession session, String branchUuid, boolean isPrivate, String qualifier, String componentKey, String componentName) {",
        "patch": "@@ -392,7 +392,7 @@ public void setPrivateForRootComponentUuidWithoutAudit(DbSession session, String\n     mapper(session).setPrivateForRootComponentUuid(branchUuid, isPrivate);\n   }\n \n-  public void setPrivateForRootComponentUuid(DbSession session, String branchUuid, boolean isPrivate, @Nullable String qualifier, String componentKey, String componentName) {\n+  public void setPrivateForRootComponentUuid(DbSession session, String branchUuid, boolean isPrivate, String qualifier, String componentKey, String componentName) {\n     ComponentNewValue componentNewValue = new ComponentNewValue(branchUuid, componentName, componentKey, isPrivate, qualifier);\n     auditPersister.updateComponentVisibility(session, componentNewValue);\n     mapper(session).setPrivateForRootComponentUuid(branchUuid, isPrivate);"
    },
    {
        "commit_id": "e259319f06382315f7c276bb3c603b15e812f914",
        "commit_message": "SONAR-17343 Add security headers in error HTTP code responses",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e259319f06382315f7c276bb3c603b15e812f914",
        "buggy_code": "ErrorReportValve valve = new ErrorReportValve();",
        "fixed_code": "ErrorReportValve valve = new SecureErrorReportValve();",
        "patch": "@@ -24,7 +24,7 @@\n \n public class TomcatErrorHandling {\n   void configure(Tomcat tomcat) {\n-    ErrorReportValve valve = new ErrorReportValve();\n+    ErrorReportValve valve = new SecureErrorReportValve();\n     valve.setShowServerInfo(false);\n     valve.setShowReport(false);\n     tomcat.getHost().getPipeline().addValve(valve);"
    },
    {
        "commit_id": "2030fa060a172f6e6eae760ed0abb993efb32755",
        "commit_message": "SONAR-17271 update issue changelog with information about webhook",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2030fa060a172f6e6eae760ed0abb993efb32755",
        "buggy_code": "dto.setUserUuid(diffs.userUuid());",
        "fixed_code": "dto.setUserUuid(diffs.userUuid().orElse(null));",
        "patch": "@@ -81,7 +81,7 @@ public static IssueChangeDto of(String issueKey, FieldDiffs diffs, String projec\n     IssueChangeDto dto = newDto(issueKey);\n     dto.setChangeType(IssueChangeDto.TYPE_FIELD_CHANGE);\n     dto.setChangeData(diffs.toEncodedString());\n-    dto.setUserUuid(diffs.userUuid());\n+    dto.setUserUuid(diffs.userUuid().orElse(null));\n     Date createdAt = requireNonNull(diffs.creationDate(), \"Diffs created at must not be null\");\n     dto.setIssueChangeCreationDate(createdAt.getTime());\n     dto.setProjectUuid(projectUuid);"
    },
    {
        "commit_id": "9d1fe387d11c2f27c8463b7bd05497ee1418c31d",
        "commit_message": "SONAR-17271 - Add origin on issue update from ALM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9d1fe387d11c2f27c8463b7bd05497ee1418c31d",
        "buggy_code": "void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components);",
        "fixed_code": "void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components, boolean fromAlm);",
        "patch": "@@ -34,6 +34,6 @@ public interface IssueChangePostProcessor {\n    *\n    * @param components the components of changed issues\n    */\n-  void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components);\n+  void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components, boolean fromAlm);\n \n }"
    },
    {
        "commit_id": "9d1fe387d11c2f27c8463b7bd05497ee1418c31d",
        "commit_message": "SONAR-17271 - Add origin on issue update from ALM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9d1fe387d11c2f27c8463b7bd05497ee1418c31d",
        "buggy_code": "public void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components) {",
        "fixed_code": "public void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components, boolean fromAlm) {",
        "patch": "@@ -32,7 +32,7 @@ public class TestIssueChangePostProcessor implements IssueChangePostProcessor {\n   private final List<ComponentDto> calledComponents = new ArrayList<>();\n \n   @Override\n-  public void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components) {\n+  public void process(DbSession dbSession, List<DefaultIssue> changedIssues, Collection<ComponentDto> components, boolean fromAlm) {\n     called = true;\n     calledComponents.addAll(components);\n   }"
    },
    {
        "commit_id": "26638c09235a2ca3e5c32179f4de9c39771827eb",
        "commit_message": "SONAR-17296 Return an error status if the SAML login and name are not found in the response attributes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26638c09235a2ca3e5c32179f4de9c39771827eb",
        "buggy_code": "throw new IllegalStateException(\"Error in parsing service provider private key, please make sure that it is in PKCS 8 format.\");",
        "fixed_code": "LOGGER.error(\"Error in parsing service provider private key, please make sure that it is in PKCS 8 format.\");",
        "patch": "@@ -127,7 +127,7 @@ private Saml2Settings initSettings(@Nullable String callbackUrl) {\n \n     var saml2Settings = new SettingsBuilder().fromValues(samlData).build();\n     if (samlSettings.getServiceProviderPrivateKey().isPresent() && saml2Settings.getSPkey() == null) {\n-      throw new IllegalStateException(\"Error in parsing service provider private key, please make sure that it is in PKCS 8 format.\");\n+      LOGGER.error(\"Error in parsing service provider private key, please make sure that it is in PKCS 8 format.\");\n     }\n     return saml2Settings;\n   }"
    },
    {
        "commit_id": "dd3697084fd2adec4791c613306615e060aceb74",
        "commit_message": "fix some typos\n\nSigned-off-by: cui fliter <imcusg@gmail.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd3697084fd2adec4791c613306615e060aceb74",
        "buggy_code": "throw new UnsupportedOperationException(\"Not implemented because hasNext() and next() are overriden\");",
        "fixed_code": "throw new UnsupportedOperationException(\"Not implemented because hasNext() and next() are overridden\");",
        "patch": "@@ -90,7 +90,7 @@ public String next() {\n \n     @Override\n     protected String doNext() {\n-      throw new UnsupportedOperationException(\"Not implemented because hasNext() and next() are overriden\");\n+      throw new UnsupportedOperationException(\"Not implemented because hasNext() and next() are overridden\");\n     }\n \n     @Override"
    },
    {
        "commit_id": "dd3697084fd2adec4791c613306615e060aceb74",
        "commit_message": "fix some typos\n\nSigned-off-by: cui fliter <imcusg@gmail.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd3697084fd2adec4791c613306615e060aceb74",
        "buggy_code": "fail(\"Unknwon call of scheduleWithFixedDelay\");",
        "fixed_code": "fail(\"Unknown call of scheduleWithFixedDelay\");",
        "patch": "@@ -127,7 +127,7 @@ public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initDela\n             assertThat(unit).isEqualTo(TimeUnit.MINUTES);\n             break;\n           default:\n-            fail(\"Unknwon call of scheduleWithFixedDelay\");\n+            fail(\"Unknown call of scheduleWithFixedDelay\");\n         }\n         // synchronously execute command\n         command.run();"
    },
    {
        "commit_id": "056ad753c9c766a2441f66f181624c79227541a3",
        "commit_message": "SONAR-17150 fix SSF-39",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/056ad753c9c766a2441f66f181624c79227541a3",
        "buggy_code": "private static final Pattern ENCRYPTED_PATTERN = Pattern.compile(\"\\\\{(.*?)\\\\}(.*)\");",
        "fixed_code": "private static final Pattern ENCRYPTED_PATTERN = Pattern.compile(\"^\\\\{([^{^}]*)}(.*)$\");",
        "patch": "@@ -30,6 +30,7 @@\n  * @since 3.0\n  */\n public final class Encryption {\n+  private static final Pattern ENCRYPTED_PATTERN = Pattern.compile(\"^\\\\{([^{^}]*)}(.*)$\");\n \n   private static final String BASE64_ALGORITHM = \"b64\";\n   private static final String AES_ECB_ALGORITHM = \"aes\";\n@@ -39,7 +40,6 @@ public final class Encryption {\n   private final AesGCMCipher aesGCMCipher;\n \n   private final Map<String, Cipher> ciphers;\n-  private static final Pattern ENCRYPTED_PATTERN = Pattern.compile(\"\\\\{(.*?)\\\\}(.*)\");\n \n   public Encryption(@Nullable String pathToSecretKey) {\n     aesECBCipher = new AesECBCipher(pathToSecretKey);"
    },
    {
        "commit_id": "6cb9527dbe6311b6cf6a4d1622e7ba2f402bcf9c",
        "commit_message": "SONAR-16583 Fix location hashing to happen right before caching",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cb9527dbe6311b6cf6a4d1622e7ba2f402bcf9c",
        "buggy_code": "public void afterComponent(Component component) {",
        "fixed_code": "public void beforeCaching(Component component) {",
        "patch": "@@ -67,7 +67,7 @@ public void onIssue(Component component, DefaultIssue issue) {\n   }\n \n   @Override\n-  public void afterComponent(Component component) {\n+  public void beforeCaching(Component component) {\n     Map<Component, List<Location>> locationsByComponent = new HashMap<>();\n     List<LocationToSet> locationsToSet = new LinkedList<>();\n "
    },
    {
        "commit_id": "f3191d8b198d71a263b273271194992b47b3b84a",
        "commit_message": "SONAR-12077 Do not record file move events in issue changelog",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f3191d8b198d71a263b273271194992b47b3b84a",
        "buggy_code": "private IssueChangeDao underTest = db.getDbClient().issueChangeDao();",
        "fixed_code": "private final IssueChangeDao underTest = db.getDbClient().issueChangeDao();",
        "patch": "@@ -48,7 +48,7 @@ public class IssueChangeDaoTest {\n   @Rule\n   public DbTester db = DbTester.create(System2.INSTANCE);\n \n-  private IssueChangeDao underTest = db.getDbClient().issueChangeDao();\n+  private final IssueChangeDao underTest = db.getDbClient().issueChangeDao();\n \n   @Test\n   public void select_issue_changelog_from_issue_key() {"
    },
    {
        "commit_id": "f3191d8b198d71a263b273271194992b47b3b84a",
        "commit_message": "SONAR-12077 Do not record file move events in issue changelog",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f3191d8b198d71a263b273271194992b47b3b84a",
        "buggy_code": "return newFormattingContext(dbSession, dtos, load, ImmutableSet.of(), ImmutableSet.of());",
        "fixed_code": "return newFormattingContext(dbSession, dtos, load, Set.of(), Set.of());",
        "patch": "@@ -96,7 +96,7 @@ public interface FormattingContext {\n   }\n \n   public FormattingContext newFormattingContext(DbSession dbSession, Set<IssueDto> dtos, Load load) {\n-    return newFormattingContext(dbSession, dtos, load, ImmutableSet.of(), ImmutableSet.of());\n+    return newFormattingContext(dbSession, dtos, load, Set.of(), Set.of());\n   }\n \n   public FormattingContext newFormattingContext(DbSession dbSession, Set<IssueDto> dtos, Load load, Set<UserDto> preloadedUsers, Set<ComponentDto> preloadedComponents) {"
    },
    {
        "commit_id": "0fb5e45d935ad212aa3fe32202c33dd8395078c5",
        "commit_message": "SONAR-17044 Optimize Compute Engine issue tracking and persisting of measures when file is marked as unchanged",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fb5e45d935ad212aa3fe32202c33dd8395078c5",
        "buggy_code": "private static final FileAttributes DEFAULT_FILE_ATTRIBUTES = new FileAttributes(false, null, 1);",
        "fixed_code": "private static final FileAttributes DEFAULT_FILE_ATTRIBUTES = new FileAttributes(false, null, 1, false);",
        "patch": "@@ -36,7 +36,7 @@\n  */\n public class ReportComponent implements Component {\n \n-  private static final FileAttributes DEFAULT_FILE_ATTRIBUTES = new FileAttributes(false, null, 1);\n+  private static final FileAttributes DEFAULT_FILE_ATTRIBUTES = new FileAttributes(false, null, 1, false);\n \n   public static final Component DUMB_PROJECT = builder(Type.PROJECT, 1)\n     .setKey(\"PROJECT_KEY\")"
    },
    {
        "commit_id": "2fd25861cb2fc208a7404d1d29e637a984e37569",
        "commit_message": "SONAR-16642 fix race condition on HealthReducer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fd25861cb2fc208a7404d1d29e637a984e37569",
        "buggy_code": "private Health health = Health.newHealthCheckBuilder().setStatus(Health.Status.GREEN).build();",
        "fixed_code": "private Health health = Health.builder().setStatus(Health.Status.GREEN).build();",
        "patch": "@@ -21,7 +21,7 @@\n \n public class TestStandaloneHealthChecker implements HealthChecker {\n \n-  private Health health = Health.newHealthCheckBuilder().setStatus(Health.Status.GREEN).build();\n+  private Health health = Health.builder().setStatus(Health.Status.GREEN).build();\n \n   public void setHealth(Health h) {\n     this.health = h;"
    },
    {
        "commit_id": "2fd25861cb2fc208a7404d1d29e637a984e37569",
        "commit_message": "SONAR-16642 fix race condition on HealthReducer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fd25861cb2fc208a7404d1d29e637a984e37569",
        "buggy_code": "Health health = Health.newHealthCheckBuilder().setStatus(Health.Status.GREEN).build();",
        "fixed_code": "Health health = Health.builder().setStatus(Health.Status.GREEN).build();",
        "patch": "@@ -56,7 +56,7 @@ public void before() throws InterruptedException {\n     when(globalInfoLoader.load()).thenReturn(Collections.singletonList(createSection(\"globalInfo\")));\n     when(appNodesInfoLoader.load()).thenReturn(Collections.singletonList(createNodeInfo(\"appNodes\")));\n     when(searchNodesInfoLoader.load()).thenReturn(Collections.singletonList(createNodeInfo(\"searchNodes\")));\n-    Health health = Health.newHealthCheckBuilder().setStatus(Health.Status.GREEN).build();\n+    Health health = Health.builder().setStatus(Health.Status.GREEN).build();\n     when(healthChecker.checkCluster()).thenReturn(new ClusterHealth(health, Collections.emptySet()));\n   }\n "
    },
    {
        "commit_id": "2fd25861cb2fc208a7404d1d29e637a984e37569",
        "commit_message": "SONAR-16642 fix race condition on HealthReducer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fd25861cb2fc208a7404d1d29e637a984e37569",
        "buggy_code": "public static final Health RED = Health.newHealthCheckBuilder().setStatus(Health.Status.RED).build();",
        "fixed_code": "public static final Health RED = Health.builder().setStatus(Health.Status.RED).build();",
        "patch": "@@ -32,7 +32,7 @@\n \n public class LivenessCheckerImplTest {\n \n-  public static final Health RED = Health.newHealthCheckBuilder().setStatus(Health.Status.RED).build();\n+  public static final Health RED = Health.builder().setStatus(Health.Status.RED).build();\n \n   private final DbConnectionNodeCheck dbConnectionNodeCheck = mock(DbConnectionNodeCheck.class);\n   private final WebServerStatusNodeCheck webServerStatusNodeCheck = mock(WebServerStatusNodeCheck.class);"
    },
    {
        "commit_id": "2fd25861cb2fc208a7404d1d29e637a984e37569",
        "commit_message": "SONAR-16642 fix race condition on HealthReducer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fd25861cb2fc208a7404d1d29e637a984e37569",
        "buggy_code": "public static final Health RED = Health.newHealthCheckBuilder().setStatus(Health.Status.RED).build();",
        "fixed_code": "public static final Health RED = Health.builder().setStatus(Health.Status.RED).build();",
        "patch": "@@ -29,7 +29,7 @@\n \n public class SafeModeLivenessCheckerImplTest {\n \n-  public static final Health RED = Health.newHealthCheckBuilder().setStatus(Health.Status.RED).build();\n+  public static final Health RED = Health.builder().setStatus(Health.Status.RED).build();\n   private final DbConnectionNodeCheck dbConnectionNodeCheck = mock(DbConnectionNodeCheck.class);\n   private final SafeModeLivenessCheckerImpl underTest = new SafeModeLivenessCheckerImpl(dbConnectionNodeCheck);\n "
    },
    {
        "commit_id": "308e3b537734beb775c9dff31f67b7cbadba8b08",
        "commit_message": "SONAR-16542 fixed an issue where rule repo key was not returned",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/308e3b537734beb775c9dff31f67b7cbadba8b08",
        "buggy_code": "issueBuilder.setRuleKey(issueDto.getRuleKey().rule());",
        "fixed_code": "issueBuilder.setRuleKey(issueDto.getRuleKey().toString());",
        "patch": "@@ -54,7 +54,7 @@ Issues.IssueLite generateIssueMessage(IssueDto issueDto) {\n     issueBuilder.setKey(issueDto.getKey());\n     issueBuilder.setCreationDate(issueDto.getCreatedAt());\n     issueBuilder.setResolved(issueDto.getStatus().equals(org.sonar.api.issue.Issue.STATUS_RESOLVED));\n-    issueBuilder.setRuleKey(issueDto.getRuleKey().rule());\n+    issueBuilder.setRuleKey(issueDto.getRuleKey().toString());\n     if (issueDto.isManualSeverity() && issueDto.getSeverity() != null) {\n       issueBuilder.setUserSeverity(issueDto.getSeverity());\n     }"
    },
    {
        "commit_id": "928f60ac3377552bce626154e3b23139fafd22b6",
        "commit_message": "SONAR-11401 Performance hotspot when changing state of issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928f60ac3377552bce626154e3b23139fafd22b6",
        "buggy_code": "assertThat(container.getAddedObjects()).hasSize(3);",
        "fixed_code": "assertThat(container.getAddedObjects()).isNotEmpty();",
        "patch": "@@ -29,6 +29,6 @@ public class LiveMeasureModuleTest {\n   public void verify_count_of_added_components() {\n     ListContainer container = new ListContainer();\n     new LiveMeasureModule().configure(container);\n-    assertThat(container.getAddedObjects()).hasSize(3);\n+    assertThat(container.getAddedObjects()).isNotEmpty();\n   }\n }"
    },
    {
        "commit_id": "c1ffad259a8bc6287a963748a4e6663009ea55b7",
        "commit_message": "SONAR-16447 Fix AuditLogs download error due to JSONException",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1ffad259a8bc6287a963748a4e6663009ea55b7",
        "buggy_code": "userDto.setScmAccounts(\"github-account\");",
        "fixed_code": "userDto.setScmAccounts(\"\\ngithub-account\\n\");",
        "patch": "@@ -35,7 +35,7 @@ public void toString_givenAllFieldsWithValue_returnValidJSON() {\n     userDto.setName(\"name\");\n     userDto.setEmail(\"name@email.com\");\n     userDto.setActive(true);\n-    userDto.setScmAccounts(\"github-account\");\n+    userDto.setScmAccounts(\"\\ngithub-account\\n\");\n     userDto.setExternalId(\"name\");\n     userDto.setExternalLogin(\"name\");\n     userDto.setExternalIdentityProvider(\"github\");"
    },
    {
        "commit_id": "c1ffad259a8bc6287a963748a4e6663009ea55b7",
        "commit_message": "SONAR-16447 Fix AuditLogs download error due to JSONException",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1ffad259a8bc6287a963748a4e6663009ea55b7",
        "buggy_code": "auditDto.setNewValue(\"{ \\\"someKey\\\": \\\"someValue\\\" }\");",
        "fixed_code": "auditDto.setNewValue(\"{ \\\"someKey\\\": \\\"someValue\\\",  \\\"anotherKey\\\": \\\"anotherValue\\\\\\n\\t\\b\\f\\r\\\"}\");",
        "patch": "@@ -44,7 +44,7 @@ public static AuditDto newAuditDto(long createdAt, String operation) {\n     auditDto.setUuid(randomAlphanumeric(20));\n     auditDto.setUserUuid(randomAlphanumeric(40));\n     auditDto.setUserLogin(randomAlphanumeric(40));\n-    auditDto.setNewValue(\"{ \\\"someKey\\\": \\\"someValue\\\" }\");\n+    auditDto.setNewValue(\"{ \\\"someKey\\\": \\\"someValue\\\",  \\\"anotherKey\\\": \\\"anotherValue\\\\\\n\\t\\b\\f\\r\\\"}\");\n     auditDto.setOperation(operation);\n     auditDto.setCategory(\"category\");\n     auditDto.setCreatedAt(createdAt);"
    },
    {
        "commit_id": "eb6741754b2b35172012bc5b30f5b0d53a61f7be",
        "commit_message": "SONAR-16177 fix SSF-206",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb6741754b2b35172012bc5b30f5b0d53a61f7be",
        "buggy_code": "public interface UsersWsAction extends WsAction {",
        "fixed_code": "public interface UsersWsAction extends WsAction, BaseUsersWsAction {",
        "patch": "@@ -21,6 +21,6 @@\n \n import org.sonar.server.ws.WsAction;\n \n-public interface UsersWsAction extends WsAction {\n+public interface UsersWsAction extends WsAction, BaseUsersWsAction {\n   // Marker interface for UsersWs actions\n }"
    },
    {
        "commit_id": "f82dbec738e0bc90fe652d144baf91bb73414433",
        "commit_message": "SONAR-16416 Fix SSF-266",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f82dbec738e0bc90fe652d144baf91bb73414433",
        "buggy_code": "nativeGitEnabled = nativeCmd.isEnabled();",
        "fixed_code": "nativeGitEnabled = nativeCmd.checkIfEnabled();",
        "patch": "@@ -71,7 +71,7 @@ public void blame(BlameInput input, BlameOutput output) {\n       profiler.startDebug(\"Collecting committed files\");\n       Set<String> committedFiles = collectAllCommittedFiles(repo);\n       profiler.stopDebug();\n-      nativeGitEnabled = nativeCmd.isEnabled();\n+      nativeGitEnabled = nativeCmd.checkIfEnabled();\n       ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), new GitThreadFactory());\n \n       for (InputFile inputFile : input.filesToBlame()) {"
    },
    {
        "commit_id": "f82dbec738e0bc90fe652d144baf91bb73414433",
        "commit_message": "SONAR-16416 Fix SSF-266",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f82dbec738e0bc90fe652d144baf91bb73414433",
        "buggy_code": "GitBlameCommand nativeBlameCommand = new GitBlameCommand();",
        "fixed_code": "GitBlameCommand nativeBlameCommand = new GitBlameCommand(System2.INSTANCE, new ProcessWrapperFactory());",
        "patch": "@@ -138,7 +138,7 @@ public void sanityCheck() {\n   @Test\n   public void returnImplem() {\n     JGitBlameCommand jblameCommand = new JGitBlameCommand();\n-    GitBlameCommand nativeBlameCommand = new GitBlameCommand();\n+    GitBlameCommand nativeBlameCommand = new GitBlameCommand(System2.INSTANCE, new ProcessWrapperFactory());\n     CompositeBlameCommand compositeBlameCommand = new CompositeBlameCommand(analysisWarnings, new PathResolver(), jblameCommand, nativeBlameCommand);\n     GitScmProvider gitScmProvider = new GitScmProvider(compositeBlameCommand, analysisWarnings, gitIgnoreCommand, system2);\n "
    },
    {
        "commit_id": "03b0d005728f605f9fe0af2a9c3f2f6eee545978",
        "commit_message": "SONAR-16419 Fix rule metadata migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/03b0d005728f605f9fe0af2a9c3f2f6eee545978",
        "buggy_code": "update.setBytes(1, row.getBytes(1)); // note_data",
        "fixed_code": "update.setString(1, row.getString(1)); // note_data",
        "patch": "@@ -45,7 +45,7 @@ protected void execute(Context context) throws SQLException {\n         \" tags = ?, ad_hoc_name = ?, ad_hoc_description = ?, ad_hoc_severity = ?, ad_hoc_type = ? where uuid = ?\");\n \n       massUpdate.execute((row, update) -> {\n-        update.setBytes(1, row.getBytes(1)); // note_data\n+        update.setString(1, row.getString(1)); // note_data\n         update.setString(2, row.getString(2)); // note_user_uuid\n         update.setLong(3, row.getLong(3)); // note_created_at\n         update.setLong(4, row.getLong(4)); // note_updated_at"
    },
    {
        "commit_id": "b66ff887e1ad3a81ef438a3832818e61c03eebd7",
        "commit_message": "SONAR-16431 Fix project recomputation failure when project is part of large portfolio",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b66ff887e1ad3a81ef438a3832818e61c03eebd7",
        "buggy_code": "return mapper(session).selectByUuids(uuids);",
        "fixed_code": "return executeLargeInputs(uuids, partition -> mapper(session).selectByUuids(partition));",
        "patch": "@@ -98,7 +98,7 @@ public List<ProjectDto> selectByUuids(DbSession session, Set<String> uuids) {\n     if (uuids.isEmpty()) {\n       return Collections.emptyList();\n     }\n-    return mapper(session).selectByUuids(uuids);\n+    return executeLargeInputs(uuids, partition -> mapper(session).selectByUuids(partition));\n   }\n \n   public void updateVisibility(DbSession session, String uuid, boolean isPrivate) {"
    },
    {
        "commit_id": "00520fc1d9a9c5cb0e7b75a0c703b8cecc6d9f6e",
        "commit_message": "SONAR-16260 Fix typo endpoint for analysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/00520fc1d9a9c5cb0e7b75a0c703b8cecc6d9f6e",
        "buggy_code": "\"api/analysis_cache/get\",",
        "fixed_code": "\"/api/analysis_cache/get\",",
        "patch": "@@ -35,7 +35,7 @@ public class UserTokenAuthentication {\n   private static final Set<String> SCANNER_ENDPOINTS = Set.of(\n     \"/api/settings/values\",\n     \"/api/plugins/installed\",\n-    \"api/analysis_cache/get\",\n+    \"/api/analysis_cache/get\",\n     \"/api/project_branches/list\",\n     \"/api/project_pull_requests/list\",\n     \"/api/qualityprofiles/search\","
    },
    {
        "commit_id": "3b11814268cb11ebcaa7a4c231d2bdb642122518",
        "commit_message": "SONAR-16232 Fix version metadata",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b11814268cb11ebcaa7a4c231d2bdb642122518",
        "buggy_code": "private static final String SONARQUBE_VERSION_PATH = \"/sonarqube-version.txt\";",
        "fixed_code": "private static final String SONARQUBE_VERSION_PATH = \"/sq-version.txt\";",
        "patch": "@@ -27,7 +27,7 @@\n import static java.lang.String.format;\n \n public class SonarQubeVersionHelper {\n-  private static final String SONARQUBE_VERSION_PATH = \"/sonarqube-version.txt\";\n+  private static final String SONARQUBE_VERSION_PATH = \"/sq-version.txt\";\n \n   private static String sonarqubeVersion;\n "
    },
    {
        "commit_id": "3b11814268cb11ebcaa7a4c231d2bdb642122518",
        "commit_message": "SONAR-16232 Fix version metadata",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b11814268cb11ebcaa7a4c231d2bdb642122518",
        "buggy_code": ".hasMessageContaining(\"Can not load /sonar-api-version.txt from classpath\");",
        "fixed_code": ".hasMessageContaining(\"Can not load /sq-version.txt from classpath\");",
        "patch": "@@ -68,7 +68,7 @@ public void throw_ISE_if_fail_to_load_version() throws Exception {\n \n     assertThatThrownBy(() -> MetadataLoader.loadVersion(system))\n       .isInstanceOf(IllegalStateException.class)\n-      .hasMessageContaining(\"Can not load /sonar-api-version.txt from classpath\");\n+      .hasMessageContaining(\"Can not load /sq-version.txt from classpath\");\n   }\n \n }"
    },
    {
        "commit_id": "b2b5d2819ab9d8bc1804641762d6f397c605a582",
        "commit_message": "SONAR-16232 Add dependencies to new sonar-plugin-api\n\n- fix tests\n- use plugin api from artifactory",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b2b5d2819ab9d8bc1804641762d6f397c605a582",
        "buggy_code": "public interface I18n extends org.sonar.api.i18n.I18n {",
        "fixed_code": "public interface I18n {",
        "patch": "@@ -27,7 +27,7 @@\n \n @ServerSide\n @ComputeEngineSide\n-public interface I18n extends org.sonar.api.i18n.I18n {\n+public interface I18n {\n \n   /**\n    * Searches the message of the <code>key</code> for the <code>locale</code> in the list of available bundles."
    },
    {
        "commit_id": "9eac13aaa5b3c6151e1c1954573a80e01c12b564",
        "commit_message": "SONAR-16290 Minor fix for unit-tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9eac13aaa5b3c6151e1c1954573a80e01c12b564",
        "buggy_code": "assertThat(gitScmProvider.blameCommand()).isEqualTo(jblameCommand);",
        "fixed_code": "assertThat(gitScmProvider.blameCommand()).isEqualTo(compositeBlameCommand);",
        "patch": "@@ -142,7 +142,7 @@ public void returnImplem() {\n     CompositeBlameCommand compositeBlameCommand = new CompositeBlameCommand(analysisWarnings, new PathResolver(), jblameCommand, nativeBlameCommand);\n     GitScmProvider gitScmProvider = new GitScmProvider(compositeBlameCommand, analysisWarnings, gitIgnoreCommand, system2);\n \n-    assertThat(gitScmProvider.blameCommand()).isEqualTo(jblameCommand);\n+    assertThat(gitScmProvider.blameCommand()).isEqualTo(compositeBlameCommand);\n   }\n \n   /**"
    },
    {
        "commit_id": "7b234b4d750332c7e14feded399482264827fd81",
        "commit_message": "Fix SSF-238",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b234b4d750332c7e14feded399482264827fd81",
        "buggy_code": "class EmailValidator {",
        "fixed_code": "public class EmailValidator {",
        "patch": "@@ -25,7 +25,7 @@\n \n import static org.apache.commons.lang.StringUtils.isEmpty;\n \n-class EmailValidator {\n+public class EmailValidator {\n \n   private EmailValidator() {\n     // Hide constructor"
    },
    {
        "commit_id": "6abdf0edd97aa76ccc42d65ed0e30f401d75f79f",
        "commit_message": "Fix SonarQube quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6abdf0edd97aa76ccc42d65ed0e30f401d75f79f",
        "buggy_code": ".map(new ConditionToCondition(statusPerConditions)::apply)",
        "fixed_code": ".map(new ConditionToCondition(statusPerConditions))",
        "patch": "@@ -212,7 +212,7 @@ private static QualityGate.Status convert(QualityGateStatus status) {\n \n   private static Collection<QualityGate.Condition> convert(Set<Condition> conditions, Map<Condition, ConditionStatus> statusPerConditions) {\n     return conditions.stream()\n-      .map(new ConditionToCondition(statusPerConditions)::apply)\n+      .map(new ConditionToCondition(statusPerConditions))\n       .collect(MoreCollectors.toList(statusPerConditions.size()));\n   }\n "
    },
    {
        "commit_id": "34fe977c3fb083ef1f1ae0fd077b6c75b7cc89f8",
        "commit_message": "SONAR-16129 Handle Owasp Top 10 2021 facet in issue search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/34fe977c3fb083ef1f1ae0fd077b6c75b7cc89f8",
        "buggy_code": "public static final String PARAM_OWASP_TOP_10_2021 = \"owaspTop10_2021\";",
        "fixed_code": "public static final String PARAM_OWASP_TOP_10_2021 = \"owaspTop10-2021\";",
        "patch": "@@ -78,7 +78,7 @@ public class IssuesWsParameters {\n   public static final String PARAM_TAGS = \"tags\";\n   public static final String PARAM_TYPES = \"types\";\n   public static final String PARAM_OWASP_TOP_10 = \"owaspTop10\";\n-  public static final String PARAM_OWASP_TOP_10_2021 = \"owaspTop10_2021\";\n+  public static final String PARAM_OWASP_TOP_10_2021 = \"owaspTop10-2021\";\n   @Deprecated\n   public static final String PARAM_SANS_TOP_25 = \"sansTop25\";\n   public static final String PARAM_CWE_TOP_25 = \"cweTop25\";"
    },
    {
        "commit_id": "c361760aa2c86f0beac22d50f4d8ec836a5142ae",
        "commit_message": "SONAR-16159 Fix SSF-235",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c361760aa2c86f0beac22d50f4d8ec836a5142ae",
        "buggy_code": "private static final Set<String> SERVER_SETTING_KEYS = ImmutableSet.of(SERVER_STARTTIME, SERVER_ID);",
        "fixed_code": "private static final Set<String> SERVER_SETTING_KEYS = Set.of(SERVER_STARTTIME, SERVER_ID);",
        "patch": "@@ -72,7 +72,7 @@ public class ValuesAction implements SettingsWsAction {\n   private static final Splitter COMMA_SPLITTER = Splitter.on(\",\");\n   private static final String COMMA_ENCODED_VALUE = \"%2C\";\n   private static final Splitter DOT_SPLITTER = Splitter.on(\".\").omitEmptyStrings();\n-  private static final Set<String> SERVER_SETTING_KEYS = ImmutableSet.of(SERVER_STARTTIME, SERVER_ID);\n+  private static final Set<String> SERVER_SETTING_KEYS = Set.of(SERVER_STARTTIME, SERVER_ID);\n \n   private final DbClient dbClient;\n   private final ComponentFinder componentFinder;"
    },
    {
        "commit_id": "2c055ed41035e4b42733c2cdb6f66c84ff74409b",
        "commit_message": "SONAR-12693 fix wording in scanner success message log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2c055ed41035e4b42733c2cdb6f66c84ff74409b",
        "buggy_code": "LOG.info(\"ANALYSIS SUCCESSFUL, you can browse {}\", ceTaskReportDataHolder.getDashboardUrl());",
        "fixed_code": "LOG.info(\"ANALYSIS SUCCESSFUL, you can find the results at: {}\", ceTaskReportDataHolder.getDashboardUrl());",
        "patch": "@@ -150,7 +150,7 @@ private void logSuccess() {\n     if (analysisMode.isMediumTest()) {\n       LOG.info(\"ANALYSIS SUCCESSFUL\");\n     } else if (!properties.shouldWaitForQualityGate()) {\n-      LOG.info(\"ANALYSIS SUCCESSFUL, you can browse {}\", ceTaskReportDataHolder.getDashboardUrl());\n+      LOG.info(\"ANALYSIS SUCCESSFUL, you can find the results at: {}\", ceTaskReportDataHolder.getDashboardUrl());\n       LOG.info(\"Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report\");\n       LOG.info(\"More about the report processing at {}\", ceTaskReportDataHolder.getCeTaskUrl());\n     }"
    },
    {
        "commit_id": "20afbdaec8a746a8d07624f5927f8ee14b32cf7f",
        "commit_message": "[NO-JIRA] Fix reported code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20afbdaec8a746a8d07624f5927f8ee14b32cf7f",
        "buggy_code": "private Period resolveByReferenceBranch(String value) {",
        "fixed_code": "private static Period resolveByReferenceBranch(String value) {",
        "patch": "@@ -84,7 +84,7 @@ private Period toPeriod(NewCodePeriodType type, @Nullable String value, DbSessio\n     }\n   }\n \n-  private Period resolveByReferenceBranch(String value) {\n+  private static Period resolveByReferenceBranch(String value) {\n     return newPeriod(NewCodePeriodType.REFERENCE_BRANCH, value, null);\n   }\n "
    },
    {
        "commit_id": "e2ee8eeba4e3c7b08cd929c56d0fb136d1cdf372",
        "commit_message": "SONAR-14929 - Handle Issue no longer being new on feature branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ee8eeba4e3c7b08cd929c56d0fb136d1cdf372",
        "buggy_code": "if (issue.isNew() || issue.isChanged() || issue.isCopied()) {",
        "fixed_code": "if (issue.isNew() || issue.isChanged() || issue.isCopied() || issue.isNoLongerNewCodeReferenceIssue()) {",
        "patch": "@@ -127,7 +127,7 @@ private void closeIssues(Component component, Stream<DefaultIssue> issues, Cache\n   private void process(Component component, DefaultIssue issue, CacheAppender<DefaultIssue> cacheAppender) {\n     issueLifecycle.doAutomaticTransition(issue);\n     issueVisitors.onIssue(component, issue);\n-    if (issue.isNew() || issue.isChanged() || issue.isCopied()) {\n+    if (issue.isNew() || issue.isChanged() || issue.isCopied() || issue.isNoLongerNewCodeReferenceIssue()) {\n       cacheAppender.append(issue);\n     }\n   }"
    },
    {
        "commit_id": "e2ee8eeba4e3c7b08cd929c56d0fb136d1cdf372",
        "commit_message": "SONAR-14929 - Handle Issue no longer being new on feature branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ee8eeba4e3c7b08cd929c56d0fb136d1cdf372",
        "buggy_code": "db.getDbClient().issueDao().insertAsNewOnReferenceBranch(db.getSession(), dto);",
        "fixed_code": "db.getDbClient().issueDao().insertAsNewCodeOnReferenceBranch(db.getSession(), dto);",
        "patch": "@@ -222,7 +222,7 @@ public void insertFieldDiffs(IssueDto issueDto, FieldDiffs... diffs) {\n    * Inserts an issue as new code in a branch using reference branch for new code\n    */\n   public void insertNewCodeReferenceIssue(NewCodeReferenceIssueDto dto) {\n-    db.getDbClient().issueDao().insertAsNewOnReferenceBranch(db.getSession(), dto);\n+    db.getDbClient().issueDao().insertAsNewCodeOnReferenceBranch(db.getSession(), dto);\n     db.commit();\n   }\n "
    },
    {
        "commit_id": "c46b02c711f77fc57088f357fcfaf85f3a737cae",
        "commit_message": "[NO-JIRA] Fix Bugs, Code Smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c46b02c711f77fc57088f357fcfaf85f3a737cae",
        "buggy_code": "new ValidateAction(db.getDbClient(), settings, userSession, almSettingsSupport, azureDevOpsHttpClient, githubGlobalSettingsValidator,",
        "fixed_code": "new ValidateAction(db.getDbClient(), userSession, almSettingsSupport, githubGlobalSettingsValidator,",
        "patch": "@@ -75,7 +75,7 @@ public class ValidateActionTest {\n   private final BitbucketCloudValidator bitbucketCloudValidator = new BitbucketCloudValidator(bitbucketCloudRestClient, settings);\n   private final AzureDevOpsValidator azureDevOpsValidator = new AzureDevOpsValidator(azureDevOpsHttpClient, settings);\n   private final WsActionTester ws = new WsActionTester(\n-    new ValidateAction(db.getDbClient(), settings, userSession, almSettingsSupport, azureDevOpsHttpClient, githubGlobalSettingsValidator,\n+    new ValidateAction(db.getDbClient(), userSession, almSettingsSupport, githubGlobalSettingsValidator,\n       gitlabSettingsValidator, bitbucketServerSettingsValidator, bitbucketCloudValidator, azureDevOpsValidator));\n \n   @BeforeClass"
    },
    {
        "commit_id": "55912d58e4028c8e8f72b64ff335d27656446d71",
        "commit_message": "SONAR-15840 Fix SSF-219",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55912d58e4028c8e8f72b64ff335d27656446d71",
        "buggy_code": "+ \" ccsMinimizeRoundtrips=true, source={}}' on indices '[index]' on types '[type]'\");",
        "fixed_code": "+ \" ccsMinimizeRoundtrips=true, enableFieldsEmulation=false, source={}}' on indices '[index]' on types '[type]'\");",
        "patch": "@@ -50,7 +50,7 @@ public void should_format_SearchRequest() {\n           + \" ignore_throttled=true], types=[type], routing='null', preference='null', requestCache=null,\"\n           + \" scroll=null, maxConcurrentShardRequests=0, batchedReduceSize=512, preFilterShardSize=null,\"\n           + \" allowPartialSearchResults=null, localClusterAlias=null, getOrCreateAbsoluteStartMillis=-1,\"\n-          + \" ccsMinimizeRoundtrips=true, source={}}' on indices '[index]' on types '[type]'\");\n+          + \" ccsMinimizeRoundtrips=true, enableFieldsEmulation=false, source={}}' on indices '[index]' on types '[type]'\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "a50b8b55b714fb0feb8e95abe44149ed82db9a04",
        "commit_message": "Fix unstable UT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a50b8b55b714fb0feb8e95abe44149ed82db9a04",
        "buggy_code": "private static final Set<String> AUTHORIZED_CATEGORIES = Set.of(VERSION.name(), OTHER.name());",
        "fixed_code": "private static final Set<String> AUTHORIZED_CATEGORIES = ImmutableSet.of(VERSION.name(), OTHER.name());",
        "patch": "@@ -33,7 +33,7 @@\n import static org.sonar.server.projectanalysis.ws.EventCategory.fromLabel;\n \n class EventValidator {\n-  private static final Set<String> AUTHORIZED_CATEGORIES = Set.of(VERSION.name(), OTHER.name());\n+  private static final Set<String> AUTHORIZED_CATEGORIES = ImmutableSet.of(VERSION.name(), OTHER.name());\n   private static final String AUTHORIZED_CATEGORIES_INLINED = Joiner.on(\", \").join(AUTHORIZED_CATEGORIES);\n \n   private EventValidator() {"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(new GsonEmail().getEmail()).isEqualTo(\"\");",
        "fixed_code": "assertThat(new GsonEmail().getEmail()).isEmpty();",
        "patch": "@@ -54,7 +54,7 @@ public void parse() {\n \n   @Test\n   public void should_have_no_arg_constructor() {\n-    assertThat(new GsonEmail().getEmail()).isEqualTo(\"\");\n+    assertThat(new GsonEmail().getEmail()).isEmpty();\n   }\n \n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(groupMapping.toString()).isEqualTo(\"LdapGroupMapping{\" +",
        "fixed_code": "assertThat(groupMapping).hasToString(\"LdapGroupMapping{\" +",
        "patch": "@@ -35,7 +35,7 @@ public void defaults() {\n     assertThat(groupMapping.getRequest()).isEqualTo(\"(&(objectClass=groupOfUniqueNames)(uniqueMember={0}))\");\n     assertThat(groupMapping.getRequiredUserAttributes()).isEqualTo(new String[] {\"dn\"});\n \n-    assertThat(groupMapping.toString()).isEqualTo(\"LdapGroupMapping{\" +\n+    assertThat(groupMapping).hasToString(\"LdapGroupMapping{\" +\n       \"baseDn=null,\" +\n       \" idAttribute=cn,\" +\n       \" requiredUserAttributes=[dn],\" +"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "return 0d;",
        "fixed_code": "return 0D;",
        "patch": "@@ -50,7 +50,7 @@ static long getLongMeasureValue(CounterInitializationContext counterContext, Str\n   static double getMeasureVariations(CounterInitializationContext counterContext, String metricKey) {\n     Optional<Measure> measure = counterContext.getMeasure(metricKey);\n     if (!measure.isPresent() || !measure.get().hasVariation()) {\n-      return 0d;\n+      return 0D;\n     }\n     return measure.get().getVariation();\n   }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "double previous = MoreObjects.firstNonNull(this.newEffort, 0d);",
        "fixed_code": "double previous = MoreObjects.firstNonNull(this.newEffort, 0D);",
        "patch": "@@ -149,7 +149,7 @@ private static class EffortSum {\n     private boolean isEmpty = true;\n \n     void add(long newEffort) {\n-      double previous = MoreObjects.firstNonNull(this.newEffort, 0d);\n+      double previous = MoreObjects.firstNonNull(this.newEffort, 0D);\n       this.newEffort = previous + newEffort;\n       isEmpty = false;\n     }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "return compare(variation, 0d) == 0 || compare(variation, bestValue) == 0;",
        "fixed_code": "return compare(variation, 0D) == 0 || compare(variation, bestValue) == 0;",
        "patch": "@@ -67,7 +67,7 @@ private static boolean hasNoVariation(Measure measure, Double bestValue) {\n   }\n \n   private static boolean isVariationEmptyOrBestValue(double variation, Double bestValue) {\n-    return compare(variation, 0d) == 0 || compare(variation, bestValue) == 0;\n+    return compare(variation, 0D) == 0 || compare(variation, bestValue) == 0;\n   }\n \n   private static boolean isBestValue(Measure measure, Double bestValue) {"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "return createInternal(ValueType.LONG, (double) value, data);",
        "fixed_code": "return createInternal(ValueType.LONG, value, data);",
        "patch": "@@ -470,7 +470,7 @@ public Measure create(int value) {\n     }\n \n     public Measure create(long value, @Nullable String data) {\n-      return createInternal(ValueType.LONG, (double) value, data);\n+      return createInternal(ValueType.LONG, value, data);\n     }\n \n     public Measure create(long value) {"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "return measure.getBooleanValue() ? 1.0d : 0.0d;",
        "fixed_code": "return measure.getBooleanValue() ? 1.0D : 0.0D;",
        "patch": "@@ -96,7 +96,7 @@ private static String data(Measure in) {\n   private static Double valueAsDouble(Measure measure) {\n     switch (measure.getValueType()) {\n       case BOOLEAN:\n-        return measure.getBooleanValue() ? 1.0d : 0.0d;\n+        return measure.getBooleanValue() ? 1.0D : 0.0D;\n       case INT:\n         return (double) measure.getIntValue();\n       case LONG:"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": ".filter(d -> d instanceof InnerDuplicate)",
        "fixed_code": ".filter(InnerDuplicate.class::isInstance)",
        "patch": "@@ -87,7 +87,7 @@ private static List<TextBlock> extractAllDuplicatedTextBlocks(Iterable<Duplicati\n     for (Duplication duplication : duplications) {\n       duplicatedBlock.add(duplication.getOriginal());\n       Arrays.stream(duplication.getDuplicates())\n-        .filter(d -> d instanceof InnerDuplicate)\n+        .filter(InnerDuplicate.class::isInstance)\n         .forEach(duplicate -> duplicatedBlock.add(duplicate.getTextBlock()));\n     }\n     return duplicatedBlock;"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(rawMeasures.get(METRIC_KEY_1)).isEqualTo(addedMeasure);",
        "fixed_code": "assertThat(rawMeasures).containsEntry(METRIC_KEY_1, addedMeasure);",
        "patch": "@@ -399,7 +399,7 @@ public void getRawMeasures_returns_added_measures_over_batch_measures() {\n     Map<String, Measure> rawMeasures = underTest.getRawMeasures(FILE_COMPONENT);\n \n     assertThat(rawMeasures.keySet()).hasSize(2);\n-    assertThat(rawMeasures.get(METRIC_KEY_1)).isEqualTo(addedMeasure);\n+    assertThat(rawMeasures).containsEntry(METRIC_KEY_1, addedMeasure);\n     assertThat(rawMeasures.get(METRIC_KEY_2)).extracting(Measure::getStringValue).isEqualTo(\"some value\");\n   }\n "
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(underTest.selectByKey(dbSession, almSettingDto.getKey()).isPresent()).isFalse();",
        "fixed_code": "assertThat(underTest.selectByKey(dbSession, almSettingDto.getKey())).isNotPresent();",
        "patch": "@@ -182,7 +182,7 @@ public void delete() {\n \n     underTest.delete(dbSession, almSettingDto);\n \n-    assertThat(underTest.selectByKey(dbSession, almSettingDto.getKey()).isPresent()).isFalse();\n+    assertThat(underTest.selectByKey(dbSession, almSettingDto.getKey())).isNotPresent();\n   }\n \n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(underTest.selectByUuid(db.getSession(), \"DOES_NOT_EXIST\").isPresent()).isFalse();",
        "fixed_code": "assertThat(underTest.selectByUuid(db.getSession(), \"DOES_NOT_EXIST\")).isNotPresent();",
        "patch": "@@ -104,7 +104,7 @@ public void selectByUuid() {\n     assertThat(result.getCreatedAt()).isEqualTo(1403042400000L);\n     assertThat(result.getRevision()).isEqualTo(\"sha1\");\n \n-    assertThat(underTest.selectByUuid(db.getSession(), \"DOES_NOT_EXIST\").isPresent()).isFalse();\n+    assertThat(underTest.selectByUuid(db.getSession(), \"DOES_NOT_EXIST\")).isNotPresent();\n   }\n \n   @Test"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(reloaded.isPresent()).isTrue();",
        "fixed_code": "assertThat(reloaded).isPresent();",
        "patch": "@@ -102,7 +102,7 @@ public void selectDefinitionByKey() {\n     assertThat(underTest.selectDefinitionByKey(db.getSession(), RuleKey.of(\"NOT\", \"FOUND\")).isPresent()).isFalse();\n \n     Optional<RuleDefinitionDto> reloaded = underTest.selectDefinitionByKey(db.getSession(), rule.getKey());\n-    assertThat(reloaded.isPresent()).isTrue();\n+    assertThat(reloaded).isPresent();\n   }\n \n   @Test"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(result.get(user.getUuid())).isEqualTo(2);",
        "fixed_code": "assertThat(result).containsEntry(user.getUuid(), 2);",
        "patch": "@@ -134,7 +134,7 @@ public void count_tokens_by_user() {\n \n     Map<String, Integer> result = underTest.countTokensByUsers(dbSession, singletonList(user));\n \n-    assertThat(result.get(user.getUuid())).isEqualTo(2);\n+    assertThat(result).containsEntry(user.getUuid(), 2);\n     assertThat(result.get(\"unknown-user_uuid\")).isNull();\n   }\n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "ratingBounds.put(A, new Bounds(0d, gridValues[0]));",
        "fixed_code": "ratingBounds.put(A, new Bounds(0D, gridValues[0]));",
        "patch": "@@ -62,7 +62,7 @@ public DebtRatingGrid(double[] gridValues) {\n   private static EnumMap<Rating, Bounds> buildRatingBounds(double[] gridValues) {\n     checkState(gridValues.length == 4, \"Rating grid should contains 4 values\");\n     EnumMap<Rating, Bounds> ratingBounds = new EnumMap<>(Rating.class);\n-    ratingBounds.put(A, new Bounds(0d, gridValues[0]));\n+    ratingBounds.put(A, new Bounds(0D, gridValues[0]));\n     ratingBounds.put(B, new Bounds(gridValues[0], gridValues[1]));\n     ratingBounds.put(C, new Bounds(gridValues[1], gridValues[2]));\n     ratingBounds.put(D, new Bounds(gridValues[2], gridValues[3]));"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "StringUtils.left(token, DefaultIndexSettings.MAXIMUM_NGRAM_LENGTH)).boost(20f))",
        "fixed_code": "StringUtils.left(token, DefaultIndexSettings.MAXIMUM_NGRAM_LENGTH)).boost(20F))",
        "patch": "@@ -217,7 +217,7 @@ private static QueryBuilder buildQuery(RuleQuery query) {\n       .stream().map(token -> boolQuery().should(\n       matchQuery(\n         SEARCH_GRAMS_ANALYZER.subField(FIELD_RULE_NAME),\n-        StringUtils.left(token, DefaultIndexSettings.MAXIMUM_NGRAM_LENGTH)).boost(20f))\n+        StringUtils.left(token, DefaultIndexSettings.MAXIMUM_NGRAM_LENGTH)).boost(20F))\n       .should(\n         matchPhraseQuery(\n           ENGLISH_HTML_ANALYZER.subField(FIELD_RULE_HTML_DESCRIPTION),"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(issue.effort().toMinutes()).isGreaterThan(0L);",
        "fixed_code": "assertThat(issue.effort().toMinutes()).isPositive();",
        "patch": "@@ -91,7 +91,7 @@ public void iterator_over_one_issue() {\n     assertThat(issue.directoryPath()).isEqualTo(\"src/main/java\");\n     assertThat(issue.filePath()).isEqualTo(\"src/main/java/Action.java\");\n     assertThat(issue.getTags()).containsOnly(\"tag1\", \"tag2\", \"tag3\");\n-    assertThat(issue.effort().toMinutes()).isGreaterThan(0L);\n+    assertThat(issue.effort().toMinutes()).isPositive();\n     assertThat(issue.type().getDbConstant()).isEqualTo(2);\n   }\n "
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "private String hash(byte[] salt, String password, int iterations) {",
        "fixed_code": "private static String hash(byte[] salt, String password, int iterations) {",
        "patch": "@@ -244,7 +244,7 @@ public void storeHashPassword(UserDto user, String password) {\n         .setSalt(saltStr);\n     }\n \n-    private String hash(byte[] salt, String password, int iterations) {\n+    private static String hash(byte[] salt, String password, int iterations) {\n       try {\n         SecretKeyFactory skf = SecretKeyFactory.getInstance(ALGORITHM);\n         PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, KEY_LEN);"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "verify(oAuthParameters).delete(eq(request), eq(response));",
        "fixed_code": "verify(oAuthParameters).delete(request, response);",
        "patch": "@@ -209,7 +209,7 @@ public void delete_oauth2_parameters_during_redirection() {\n \n     callback.redirectToRequestedPage();\n \n-    verify(oAuthParameters).delete(eq(request), eq(response));\n+    verify(oAuthParameters).delete(request, response);\n   }\n \n   private OAuth2IdentityProvider.InitContext newInitContext() {"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(login.get()).isEqualTo(user1.getUuid());",
        "fixed_code": "assertThat(login).contains(user1.getUuid());",
        "patch": "@@ -62,7 +62,7 @@ public void return_login_when_token_hash_found_in_db() {\n     Optional<String> login = underTest.authenticate(token);\n \n     assertThat(login.isPresent()).isTrue();\n-    assertThat(login.get()).isEqualTo(user1.getUuid());\n+    assertThat(login).contains(user1.getUuid());\n     verify(userLastConnectionDatesUpdater).updateLastConnectionDateIfNeeded(any(UserTokenDto.class));\n   }\n "
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "private void writeSection(ProtobufSystemInfo.Section section, JsonWriter json) {",
        "fixed_code": "private static void writeSection(ProtobufSystemInfo.Section section, JsonWriter json) {",
        "patch": "@@ -51,7 +51,7 @@ protected void writeSections(Collection<ProtobufSystemInfo.Section> sections, Js\n       .forEach(section -> writeSection(section, json));\n   }\n \n-  private void writeSection(ProtobufSystemInfo.Section section, JsonWriter json) {\n+  private static void writeSection(ProtobufSystemInfo.Section section, JsonWriter json) {\n     json.name(section.getName());\n     json.beginObject();\n     for (ProtobufSystemInfo.Attribute attribute : section.getAttributesList()) {"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(linesOpt.isPresent()).isTrue();",
        "fixed_code": "assertThat(linesOpt).isPresent();",
        "patch": "@@ -67,7 +67,7 @@ public void injectFakeLines() {\n   public void get_range_of_lines() {\n     Set<Integer> lineNumbers = new HashSet<>(Arrays.asList(1, 5, 6));\n     Optional<Iterable<DbFileSources.Line>> linesOpt = underTest.getLines(dbTester.getSession(), FILE_UUID, lineNumbers);\n-    assertThat(linesOpt.isPresent()).isTrue();\n+    assertThat(linesOpt).isPresent();\n     List<DbFileSources.Line> lines = Lists.newArrayList(linesOpt.get());\n     assertThat(lines).hasSize(3);\n     assertThat(lines.get(0).getLine()).isEqualTo(1);"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "AnalysisWarnings analysisWarnings = (warning) -> {};",
        "fixed_code": "AnalysisWarnings analysisWarnings = warning -> {};",
        "patch": "@@ -208,7 +208,7 @@ public TestInputFileBuilder setMetadata(Metadata metadata) {\n   }\n \n   public TestInputFileBuilder initMetadata(String content) {\n-    AnalysisWarnings analysisWarnings = (warning) -> {};\n+    AnalysisWarnings analysisWarnings = warning -> {};\n     return setMetadata(new FileMetadata(analysisWarnings).readMetadata(new StringReader(content)));\n   }\n "
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(def.getOriginalVersion()).isEqualTo(\"\");",
        "fixed_code": "assertThat(def.getOriginalVersion()).isEmpty();",
        "patch": "@@ -47,7 +47,7 @@ public void shouldSupportNoVersion() {\n     ProjectDefinition def = ProjectDefinition.create();\n     def.setProjectVersion(null);\n     assertThat(def.getVersion()).isEqualTo(\"not provided\");\n-    assertThat(def.getOriginalVersion()).isEqualTo(\"\");\n+    assertThat(def.getOriginalVersion()).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(defaultRule.toString()).isEqualTo(\"[repository=repo, key=key]\");",
        "fixed_code": "assertThat(defaultRule).hasToString(\"[repository=repo, key=key]\");",
        "patch": "@@ -80,6 +80,6 @@ public void to_string() {\n     DefaultNewRule rule = new DefaultNewRule(\"plugin\", \"repo\", \"key\");\n     DefaultRule defaultRule = new DefaultRule(repo, rule);\n \n-    assertThat(defaultRule.toString()).isEqualTo(\"[repository=repo, key=key]\");\n+    assertThat(defaultRule).hasToString(\"[repository=repo, key=key]\");\n   }\n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "private static final Logger LOG = Loggers.get(ExternalIssuesImportSensor.class);",
        "fixed_code": "private static final Logger LOG = Loggers.get(ExternalIssueImporter.class);",
        "patch": "@@ -37,7 +37,7 @@\n import org.sonar.scanner.externalissue.ReportParser.Report;\n \n public class ExternalIssueImporter {\n-  private static final Logger LOG = Loggers.get(ExternalIssuesImportSensor.class);\n+  private static final Logger LOG = Loggers.get(ExternalIssueImporter.class);\n   private static final int MAX_UNKNOWN_FILE_PATHS_TO_PRINT = 5;\n \n   private final SensorContext context;"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(fileLineMeasures.toString()).isEqualTo(\"DefaultFileLinesContext{{hits={1=2, 3=0}}}\");",
        "fixed_code": "assertThat(fileLineMeasures).hasToString(\"DefaultFileLinesContext{{hits={1=2, 3=0}}}\");",
        "patch": "@@ -83,7 +83,7 @@ public void shouldSave() {\n     fileLineMeasures.setIntValue(HITS_METRIC_KEY, 3, 0);\n     fileLineMeasures.save();\n \n-    assertThat(fileLineMeasures.toString()).isEqualTo(\"DefaultFileLinesContext{{hits={1=2, 3=0}}}\");\n+    assertThat(fileLineMeasures).hasToString(\"DefaultFileLinesContext{{hits={1=2, 3=0}}}\");\n \n     ArgumentCaptor<DefaultMeasure> captor = ArgumentCaptor.forClass(DefaultMeasure.class);\n     verify(sensorStorage).store(captor.capture());"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(temp.getRoot().list()).isEmpty();",
        "fixed_code": "assertThat(temp.getRoot()).isEmptyDirectory();",
        "patch": "@@ -183,7 +183,7 @@ private void assertPublished(DefaultInputFile file, Set<Integer> lines) {\n   }\n \n   private void assertNotPublished() {\n-    assertThat(temp.getRoot().list()).isEmpty();\n+    assertThat(temp.getRoot()).isEmptyDirectory();\n   }\n \n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(rootProtobuf.getName()).isEqualTo(\"\");",
        "fixed_code": "assertThat(rootProtobuf.getName()).isEmpty();",
        "patch": "@@ -193,7 +193,7 @@ public void publish_project_without_version_and_name() throws IOException {\n     ScannerReportReader reader = new ScannerReportReader(outputDir);\n     Component rootProtobuf = reader.readComponent(1);\n     assertThat(rootProtobuf.getKey()).isEqualTo(\"foo\");\n-    assertThat(rootProtobuf.getName()).isEqualTo(\"\");\n+    assertThat(rootProtobuf.getName()).isEmpty();\n     assertThat(rootProtobuf.getDescription()).isEqualTo(\"Root description\");\n     assertThat(rootProtobuf.getLinkCount()).isZero();\n   }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(moduleHierarchy.relativePathToRoot(root)).isEqualTo(\"\");",
        "fixed_code": "assertThat(moduleHierarchy.relativePathToRoot(root)).isEmpty();",
        "patch": "@@ -102,7 +102,7 @@ public void testRelativePathToRoot() throws IOException {\n \n     moduleHierarchy = new DefaultInputModuleHierarchy(root, parents);\n \n-    assertThat(moduleHierarchy.relativePathToRoot(root)).isEqualTo(\"\");\n+    assertThat(moduleHierarchy.relativePathToRoot(root)).isEmpty();\n     assertThat(moduleHierarchy.relativePathToRoot(mod1)).isEqualTo(\"mod1\");\n     assertThat(moduleHierarchy.relativePathToRoot(mod2)).isEqualTo(\"mod2\");\n     assertThat(moduleHierarchy.relativePathToRoot(mod3)).isNull();"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(temp.getRoot().list()).isEmpty();",
        "fixed_code": "assertThat(temp.getRoot()).isEmptyDirectory();",
        "patch": "@@ -42,7 +42,7 @@ public void setUp() {\n \n   @Test\n   public void tryLock() {\n-    assertThat(temp.getRoot().list()).isEmpty();\n+    assertThat(temp.getRoot()).isEmptyDirectory();\n     lock.tryLock();\n     assertThat(temp.getRoot().toPath().resolve(\".sonar_lock\")).exists();\n     lock.unlock();"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(ProjectExclusionFilters.prepareMainExclusions(new String[] {\"   **/*Dao.java   \"}, new String[0])[0].toString()).isEqualTo(\"**/*Dao.java\");",
        "fixed_code": "assertThat(ProjectExclusionFilters.prepareMainExclusions(new String[] {\"   **/*Dao.java   \"}, new String[0])[0]).hasToString(\"**/*Dao.java\");",
        "patch": "@@ -118,7 +118,7 @@ public void match_exclusion_by_absolute_path() {\n \n   @Test\n   public void trim_pattern() {\n-    assertThat(ProjectExclusionFilters.prepareMainExclusions(new String[] {\"   **/*Dao.java   \"}, new String[0])[0].toString()).isEqualTo(\"**/*Dao.java\");\n+    assertThat(ProjectExclusionFilters.prepareMainExclusions(new String[] {\"   **/*Dao.java   \"}, new String[0])[0]).hasToString(\"**/*Dao.java\");\n   }\n \n }"
    },
    {
        "commit_id": "6519110cd4f98fabf3bef46896eecbead3eb646a",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6519110cd4f98fabf3bef46896eecbead3eb646a",
        "buggy_code": "assertThat(output.blame.keySet()).contains(inputFile);",
        "fixed_code": "assertThat(output.blame).containsKey(inputFile);",
        "patch": "@@ -322,7 +322,7 @@ public void return_early_when_clone_with_reference_detected() throws IOException\n       .matches(s -> s.contains(\"This git repository references another local repository which is not well supported\"));\n \n     // contains commits referenced from the old clone and commits in the new clone\n-    assertThat(output.blame.keySet()).contains(inputFile);\n+    assertThat(output.blame).containsKey(inputFile);\n     assertThat(output.blame.get(inputFile).stream().map(BlameLine::revision))\n       .containsOnly(\"6b3aab35a3ea32c1636fee56f996e677653c48ea\", \"843c7c30d7ebd9a479e8f1daead91036c75cbc4e\", \"0d269c1acfb8e6d4d33f3c43041eb87e0df0f5e7\");\n     verifyZeroInteractions(analysisWarnings);"
    },
    {
        "commit_id": "233a760898a0f33891381e4a0e80553c91c17b45",
        "commit_message": "SONAR-15517 fixed an issue when sometimes audit logs could not be downloaded",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/233a760898a0f33891381e4a0e80553c91c17b45",
        "buggy_code": "\"\" : DateUtils.formatDateTime(this.lastConnectionDate), false);",
        "fixed_code": "\"\" : DateUtils.formatDateTime(this.lastConnectionDate), true);",
        "patch": "@@ -164,7 +164,7 @@ public String toString() {\n     addField(sb, \"\\\"onboarded\\\": \", ObjectUtils.toString(this.onboarded), false);\n     addField(sb, \"\\\"root\\\": \", ObjectUtils.toString(this.root), false);\n     addField(sb, \"\\\"lastConnectionDate\\\": \", this.lastConnectionDate == null ?\n-      \"\" : DateUtils.formatDateTime(this.lastConnectionDate), false);\n+      \"\" : DateUtils.formatDateTime(this.lastConnectionDate), true);\n     endString(sb);\n     return sb.toString();\n   }"
    },
    {
        "commit_id": "b5fbdff6d4c84c5fbc26adc5a07170fc7ba5acf4",
        "commit_message": "SONAR-15487 added unit test for quickFixAvailable added in Issue and DefaultIssue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b5fbdff6d4c84c5fbc26adc5a07170fc7ba5acf4",
        "buggy_code": "issue.setQuickFixAvailable(quickFixAvailable != null ? quickFixAvailable : false);",
        "fixed_code": "issue.setQuickFixAvailable(quickFixAvailable != null && quickFixAvailable);",
        "patch": "@@ -758,7 +758,7 @@ public DefaultIssue toDefaultIssue() {\n     issue.setSelectedAt(selectedAt);\n     issue.setLocations(parseLocations());\n     issue.setIsFromExternalRuleEngine(isExternal);\n-    issue.setQuickFixAvailable(quickFixAvailable != null ? quickFixAvailable : false);\n+    issue.setQuickFixAvailable(quickFixAvailable != null && quickFixAvailable);\n     return issue;\n   }\n }"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private Optional<CeQueueDto> findPendingTask(String workerUuid, DbSession dbSession, CeQueueDao ceQueueDao, boolean excludeIndexationJob) {",
        "fixed_code": "private static Optional<CeQueueDto> findPendingTask(String workerUuid, DbSession dbSession, CeQueueDao ceQueueDao, boolean excludeIndexationJob) {",
        "patch": "@@ -102,7 +102,7 @@ public Optional<CeTask> peek(String workerUuid, boolean excludeIndexationJob) {\n     }\n   }\n \n-  private Optional<CeQueueDto> findPendingTask(String workerUuid, DbSession dbSession, CeQueueDao ceQueueDao, boolean excludeIndexationJob) {\n+  private static Optional<CeQueueDto> findPendingTask(String workerUuid, DbSession dbSession, CeQueueDao ceQueueDao, boolean excludeIndexationJob) {\n     // try to find tasks including indexation job & excluding app/portfolio\n     // and if no match, try the opposite\n     // when excludeIndexationJob is false, search first excluding indexation jobs and including app/portfolio, then the opposite"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void failIfContainsIncompatiblePlugins(List<? extends PluginInfo> plugins) {",
        "fixed_code": "private static void failIfContainsIncompatiblePlugins(List<? extends PluginInfo> plugins) {",
        "patch": "@@ -238,7 +238,7 @@ private <T extends PluginInfo> List<T> loadPluginsFromDir(File pluginsDir, Funct\n     return list;\n   }\n \n-  private void failIfContainsIncompatiblePlugins(List<? extends PluginInfo> plugins) {\n+  private static void failIfContainsIncompatiblePlugins(List<? extends PluginInfo> plugins) {\n     List<String> incompatiblePlugins = plugins.stream()\n       .filter(p -> FORBIDDEN_INCOMPATIBLE_PLUGINS.contains(p.getKey()))\n       .map(p -> \"'\" + p.getKey() + \"'\")"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void writeAttribute(ProtobufSystemInfo.Attribute attribute, JsonWriter json) {",
        "fixed_code": "private static void writeAttribute(ProtobufSystemInfo.Attribute attribute, JsonWriter json) {",
        "patch": "@@ -60,7 +60,7 @@ private void writeSection(ProtobufSystemInfo.Section section, JsonWriter json) {\n     json.endObject();\n   }\n \n-  private void writeAttribute(ProtobufSystemInfo.Attribute attribute, JsonWriter json) {\n+  private static void writeAttribute(ProtobufSystemInfo.Attribute attribute, JsonWriter json) {\n     switch (attribute.getValueCase()) {\n       case BOOLEAN_VALUE:\n         json.prop(attribute.getKey(), attribute.getBooleanValue());"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void checkMetrics(Map<String, Metrics> metricsByRepository, Metrics metrics) {",
        "fixed_code": "private static void checkMetrics(Map<String, Metrics> metricsByRepository, Metrics metrics) {",
        "patch": "@@ -124,7 +124,7 @@ List<Metric> getPluginMetrics() {\n     return metricsToRegister;\n   }\n \n-  private void checkMetrics(Map<String, Metrics> metricsByRepository, Metrics metrics) {\n+  private static void checkMetrics(Map<String, Metrics> metricsByRepository, Metrics metrics) {\n     for (Metric metric : metrics.getMetrics()) {\n       String metricKey = metric.getKey();\n       if (CoreMetrics.getMetrics().contains(metric)) {"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void checkPermission(boolean hasScanPerm) {",
        "fixed_code": "private static void checkPermission(boolean hasScanPerm) {",
        "patch": "@@ -112,7 +112,7 @@ private static void addFileData(SingleProjectRepository data, List<FilePathWithH\n     }\n   }\n \n-  private void checkPermission(boolean hasScanPerm) {\n+  private static void checkPermission(boolean hasScanPerm) {\n     if (!hasScanPerm) {\n       throw new ForbiddenException(\"You're not authorized to push analysis results to the SonarQube server. \" +\n         \"Please contact your SonarQube administrator.\");"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private Ce.WorkersPauseStatus convert(CeQueue.WorkersPauseStatus status) {",
        "fixed_code": "private static Ce.WorkersPauseStatus convert(CeQueue.WorkersPauseStatus status) {",
        "patch": "@@ -65,7 +65,7 @@ public void handle(Request request, Response response) throws Exception {\n     WsUtils.writeProtobuf(builder.build(), request, response);\n   }\n \n-  private Ce.WorkersPauseStatus convert(CeQueue.WorkersPauseStatus status) {\n+  private static Ce.WorkersPauseStatus convert(CeQueue.WorkersPauseStatus status) {\n     switch (status) {\n       case PAUSING:\n         return Ce.WorkersPauseStatus.PAUSING;"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private Set<String> parseTags(Map<String, Object> properties) {",
        "fixed_code": "private static Set<String> parseTags(Map<String, Object> properties) {",
        "patch": "@@ -65,7 +65,7 @@ public boolean shouldRefreshMeasures() {\n     return false;\n   }\n \n-  private Set<String> parseTags(Map<String, Object> properties) {\n+  private static Set<String> parseTags(Map<String, Object> properties) {\n     Set<String> result = new HashSet<>();\n     String tagsString = (String) properties.get(TAGS_PARAMETER);\n     if (!Strings.isNullOrEmpty(tagsString)) {"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private boolean isPR(@Nullable String pullRequest) {",
        "fixed_code": "private static boolean isPR(@Nullable String pullRequest) {",
        "patch": "@@ -215,7 +215,7 @@ private static void addBestValuesToMeasures(List<LiveMeasureDto> measures, Compo\n     }\n   }\n \n-  private boolean isPR(@Nullable String pullRequest) {\n+  private static boolean isPR(@Nullable String pullRequest) {\n     return pullRequest != null;\n   }\n "
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "new ProjectBadgesSupport(userSession, db.getDbClient(), new ComponentFinder(db.getDbClient(), null)),",
        "fixed_code": "new ProjectBadgesSupport(userSession, new ComponentFinder(db.getDbClient(), null)),",
        "patch": "@@ -84,7 +84,7 @@ public class MeasureActionTest {\n   private WsActionTester ws = new WsActionTester(\n     new MeasureAction(\n       db.getDbClient(),\n-      new ProjectBadgesSupport(userSession, db.getDbClient(), new ComponentFinder(db.getDbClient(), null)),\n+      new ProjectBadgesSupport(userSession, new ComponentFinder(db.getDbClient(), null)),\n       new SvgGenerator(mapSettings.asConfig())));\n \n   @Test"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "new ProjectBadgesSupport(userSession, db.getDbClient(), new ComponentFinder(db.getDbClient(), null)),",
        "fixed_code": "new ProjectBadgesSupport(userSession, new ComponentFinder(db.getDbClient(), null)),",
        "patch": "@@ -64,7 +64,7 @@ public class QualityGateActionTest {\n \n   private WsActionTester ws = new WsActionTester(\n     new QualityGateAction(db.getDbClient(),\n-      new ProjectBadgesSupport(userSession, db.getDbClient(), new ComponentFinder(db.getDbClient(), null)),\n+      new ProjectBadgesSupport(userSession, new ComponentFinder(db.getDbClient(), null)),\n       new SvgGenerator(mapSettings.asConfig())));\n \n   @Test"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void stopQuietly() {",
        "fixed_code": "private static void stopQuietly() {",
        "patch": "@@ -53,7 +53,7 @@ public void contextInitialized(ServletContextEvent event) {\n     }\n   }\n \n-  private void stopQuietly() {\n+  private static void stopQuietly() {\n     try {\n       PlatformImpl.getInstance().doStop();\n     } catch (Exception e) {"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void initProxy(AuthenticatorFacade system, Configuration config) {",
        "fixed_code": "private static void initProxy(AuthenticatorFacade system, Configuration config) {",
        "patch": "@@ -177,7 +177,7 @@ static class BaseHttpDownloader {\n       initUserAgent(userAgent, config);\n     }\n \n-    private void initProxy(AuthenticatorFacade system, Configuration config) {\n+    private static void initProxy(AuthenticatorFacade system, Configuration config) {\n       // register credentials\n       Optional<String> login = config.get(HTTP_PROXY_USER);\n       if (login.isPresent()) {"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "return durationInMinutes / 60d / hoursInDay;",
        "fixed_code": "return durationInMinutes / 60D / hoursInDay;",
        "patch": "@@ -110,7 +110,7 @@ static WorkDuration createFromMinutes(long duration, int hoursInDay) {\n    * For instance, 3 days and 4 hours will return 3.5 days (if hoursIndDay is 8).\n    */\n   public double toWorkingDays() {\n-    return durationInMinutes / 60d / hoursInDay;\n+    return durationInMinutes / 60D / hoursInDay;\n   }\n \n   /**"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void appendMeasure(InputFile inputFile, ScannerReportWriter writer, DefaultMeasure measure) {",
        "fixed_code": "private static void appendMeasure(InputFile inputFile, ScannerReportWriter writer, DefaultMeasure measure) {",
        "patch": "@@ -81,7 +81,7 @@ private void updateTestExecutionFromTestPlan(final InputFile inputFile, ScannerR\n     appendMeasure(inputFile, writer, new DefaultMeasure<Integer>().forMetric(TEST_FAILURES).withValue((int) failedTests));\n   }\n \n-  private void appendMeasure(InputFile inputFile, ScannerReportWriter writer, DefaultMeasure measure) {\n+  private static void appendMeasure(InputFile inputFile, ScannerReportWriter writer, DefaultMeasure measure) {\n     writer.appendComponentMeasure(((DefaultInputComponent) inputFile).scannerId(), toReportMeasure(measure));\n   }\n "
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private String getUrl(String qualityProfileKey, int page, int pageSize) {",
        "fixed_code": "private static String getUrl(String qualityProfileKey, int page, int pageSize) {",
        "patch": "@@ -73,7 +73,7 @@ public List<LoadedActiveRule> load(String qualityProfileKey) {\n     return ruleList;\n   }\n \n-  private String getUrl(String qualityProfileKey, int page, int pageSize) {\n+  private static String getUrl(String qualityProfileKey, int page, int pageSize) {\n     StringBuilder builder = new StringBuilder(1024);\n     builder.append(RULES_SEARCH_URL);\n     builder.append(\"&qprofile=\").append(ScannerUtils.encodeForUrl(qualityProfileKey));"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,",
        "fixed_code": "private static void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,",
        "patch": "@@ -360,7 +360,7 @@ interface LineCoverageOperation {\n     void apply(Integer value, ScannerReport.LineCoverage.Builder builder);\n   }\n \n-  private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,\n+  private static void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,\n     LineCoverageOperation op) {\n     for (Map.Entry<Integer, Integer> lineMeasure : valueByLine.entrySet()) {\n       int lineIdx = lineMeasure.getKey();"
    },
    {
        "commit_id": "215f8403a6c4a131b9592457fd95a280274237de",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/215f8403a6c4a131b9592457fd95a280274237de",
        "buggy_code": "private void print(String title, SortedMap<String, String> translations, StringBuilder to) {",
        "fixed_code": "private static void print(String title, SortedMap<String, String> translations, StringBuilder to) {",
        "patch": "@@ -105,7 +105,7 @@ private StringBuilder prepareDetailsMessage(File dumpFile) {\n     return details;\n   }\n \n-  private void print(String title, SortedMap<String, String> translations, StringBuilder to) {\n+  private static void print(String title, SortedMap<String, String> translations, StringBuilder to) {\n     if (!translations.isEmpty()) {\n       to.append(title);\n       for (Map.Entry<String, String> entry : translations.entrySet()) {"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;",
        "fixed_code": "import static org.elasticsearch.core.TimeValue.timeValueSeconds;",
        "patch": "@@ -41,7 +41,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;\n+import static org.elasticsearch.core.TimeValue.timeValueSeconds;\n \n public class EsConnectorImpl implements EsConnector {\n   private static final String ES_USERNAME = \"elastic\";"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -52,7 +52,7 @@\n import org.elasticsearch.common.document.DocumentField;\n import org.elasticsearch.common.unit.ByteSizeUnit;\n import org.elasticsearch.common.unit.ByteSizeValue;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.sort.SortOrder;\n import org.sonar.api.utils.log.Logger;"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -35,7 +35,7 @@\n import javax.annotation.Nullable;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.search.SearchScrollRequest;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.SearchHits;\n import org.elasticsearch.search.aggregations.bucket.terms.Terms;"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -33,7 +33,7 @@\n import org.apache.lucene.search.join.ScoreMode;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.index.query.BoolQueryBuilder;\n import org.elasticsearch.index.query.Operator;\n import org.elasticsearch.index.query.QueryBuilder;"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.search.SearchScrollRequest;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.SortOrder;"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -31,7 +31,7 @@\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.indices.CreateIndexRequest;\n import org.elasticsearch.client.indices.GetIndexRequest;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.junit.Test;\n \n import static org.assertj.core.api.Assertions.assertThat;"
    },
    {
        "commit_id": "86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "commit_message": "SONAR-15375 Fix SSF-191",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86f2c502104fbc03eb5aac19598e9b5c2e7290b8",
        "buggy_code": "import org.elasticsearch.common.unit.TimeValue;",
        "fixed_code": "import org.elasticsearch.core.TimeValue;",
        "patch": "@@ -65,7 +65,7 @@\n import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;\n import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.discovery.DiscoveryModule;\n import org.elasticsearch.env.Environment;\n import org.elasticsearch.env.NodeEnvironment;"
    },
    {
        "commit_id": "44e331c87ff60c386455f60476958577f512152c",
        "commit_message": "SONAR-15259 Fix resolution of references and improve code quality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44e331c87ff60c386455f60476958577f512152c",
        "buggy_code": "public CreateTableChange(Database db, String tableName) {",
        "fixed_code": "protected CreateTableChange(Database db, String tableName) {",
        "patch": "@@ -26,7 +26,7 @@\n public abstract class CreateTableChange extends DdlChange {\n   protected final String tableName;\n \n-  public CreateTableChange(Database db, String tableName) {\n+  protected CreateTableChange(Database db, String tableName) {\n     super(db);\n     this.tableName = tableName;\n   }"
    },
    {
        "commit_id": "11a4c829eb81f895f3b19b892e002071b8608316",
        "commit_message": "SONAR-15286 fixing a bug where sometimes we didnt pass information about component key to the audit table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/11a4c829eb81f895f3b19b892e002071b8608316",
        "buggy_code": "dbClient.groupPermissionDao().insert(dbSession, dto, null, template);",
        "fixed_code": "dbClient.groupPermissionDao().insert(dbSession, dto, project, template);",
        "patch": "@@ -154,7 +154,7 @@ private void copyPermissions(DbSession dbSession, PermissionTemplateDto template\n           .setRole(gp.getPermission())\n           .setComponentUuid(project.uuid())\n           .setComponentName(project.name());\n-        dbClient.groupPermissionDao().insert(dbSession, dto, null, template);\n+        dbClient.groupPermissionDao().insert(dbSession, dto, project, template);\n       });\n \n     List<PermissionTemplateCharacteristicDto> characteristics = dbClient.permissionTemplateCharacteristicDao().selectByTemplateUuids(dbSession, singletonList(template.getUuid()));"
    },
    {
        "commit_id": "dacad140041d2533e6dc9efd1824f6641e681f78",
        "commit_message": "SONAR-15133 Fix for Gitlab project onboarding",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dacad140041d2533e6dc9efd1824f6641e681f78",
        "buggy_code": "null, 1, 10);",
        "fixed_code": "null, null, null);",
        "patch": "@@ -116,7 +116,7 @@ private void doHandle(Request request) {\n           gitlabHttpClient.searchProjects(\n             requireNonNull(almSettingDto.getUrl(), URL_CANNOT_BE_NULL),\n             requireNonNull(almPatDto.getPersonalAccessToken(), PAT_CANNOT_BE_NULL),\n-            null, 1, 10);\n+            null, null, null);\n           break;\n         case BITBUCKET_CLOUD:\n           bitbucketCloudRestClient.validateAppPassword("
    },
    {
        "commit_id": "69b5eb175180dc486505e9b9db9ae0cd0eb86a11",
        "commit_message": "SONAR-14836 fix hotspots api doc example",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/69b5eb175180dc486505e9b9db9ae0cd0eb86a11",
        "buggy_code": ".setExampleValue(KEY_PROJECT_EXAMPLE_001);",
        "fixed_code": ".setExampleValue(\"AWhXpLoInp4On-Y3xc8x\");",
        "patch": "@@ -198,7 +198,7 @@ public void define(WebService.NewController controller) {\n       .setDescription(format(\n         \"Comma-separated list of Security Hotspot keys. This parameter is required unless %s is provided.\",\n         PARAM_PROJECT_KEY))\n-      .setExampleValue(KEY_PROJECT_EXAMPLE_001);\n+      .setExampleValue(\"AWhXpLoInp4On-Y3xc8x\");\n     action.createParam(PARAM_STATUS)\n       .setDescription(\"If '%s' is provided, only Security Hotspots with the specified status are returned.\", PARAM_PROJECT_KEY)\n       .setPossibleValues(STATUSES)"
    },
    {
        "commit_id": "e451875e4ba85ae989a5f1a84ca4f9e5de465431",
        "commit_message": "SONAR-15035 Fix SQ quality issues related to the use of ImmutableList",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e451875e4ba85ae989a5f1a84ca4f9e5de465431",
        "buggy_code": "this.columns = ImmutableList.copyOf(columns);",
        "fixed_code": "this.columns = List.copyOf(columns);",
        "patch": "@@ -484,7 +484,7 @@ private static class PK {\n \n     private PK(@Nullable String name, List<String> columns) {\n       this.name = name;\n-      this.columns = ImmutableList.copyOf(columns);\n+      this.columns = List.copyOf(columns);\n     }\n \n     @CheckForNull"
    },
    {
        "commit_id": "97f2c01fdd4ae863134d4aa1bf32b7dcd512b10c",
        "commit_message": "SONAR-14792 Fix issue on Oracle DB by recreating PK for 'snapshots' table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f2c01fdd4ae863134d4aa1bf32b7dcd512b10c",
        "buggy_code": "verifyMigrationCount(underTest, 9);",
        "fixed_code": "verifyMigrationCount(underTest, 12);",
        "patch": "@@ -41,7 +41,7 @@ public void migrationNumber_starts_at_5001() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 9);\n+    verifyMigrationCount(underTest, 12);\n   }\n \n }"
    },
    {
        "commit_id": "25815e935522f4e7c7826d9617ae0a381998f88b",
        "commit_message": "SONAR-14792 Fix issue on Oracle DB by recreating PK for 'issues' table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/25815e935522f4e7c7826d9617ae0a381998f88b",
        "buggy_code": "verifyMigrationCount(underTest, 6);",
        "fixed_code": "verifyMigrationCount(underTest, 9);",
        "patch": "@@ -41,7 +41,7 @@ public void migrationNumber_starts_at_5001() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 6);\n+    verifyMigrationCount(underTest, 9);\n   }\n \n }"
    },
    {
        "commit_id": "49bdd58117f8f7a7de087d63e936475ce94f7f60",
        "commit_message": "SONAR-14792 Fix issue on Oracle DB by recreating PK for 'events' table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49bdd58117f8f7a7de087d63e936475ce94f7f60",
        "buggy_code": "verifyMigrationCount(underTest, 3);",
        "fixed_code": "verifyMigrationCount(underTest, 6);",
        "patch": "@@ -41,7 +41,7 @@ public void migrationNumber_starts_at_5001() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 3);\n+    verifyMigrationCount(underTest, 6);\n   }\n \n }"
    },
    {
        "commit_id": "a9ff34a88b68a2f1df68bc1fe54ebf5b17f4e70a",
        "commit_message": "SONAR-14871 Basic project binding validation endpoint\n- Add 'scope' field to HTTP error messages",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a9ff34a88b68a2f1df68bc1fe54ebf5b17f4e70a",
        "buggy_code": "private BadRequestException(List<String> errors) {",
        "fixed_code": "BadRequestException(List<String> errors) {",
        "patch": "@@ -34,7 +34,7 @@ public class BadRequestException extends ServerException {\n \n   private final transient List<String> errors;\n \n-  private BadRequestException(List<String> errors) {\n+  BadRequestException(List<String> errors) {\n     super(HTTP_BAD_REQUEST, errors.get(0));\n     this.errors = errors;\n   }"
    },
    {
        "commit_id": "1ab6f27ecd8e432967960cfa819e52859884ccd9",
        "commit_message": "SONAR-14731 - Fix GitScmProvider log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1ab6f27ecd8e432967960cfa819e52859884ccd9",
        "buggy_code": "LOG.warn(COULD_NOT_FIND_REF, targetBranchName);",
        "fixed_code": "LOG.warn(String.format(COULD_NOT_FIND_REF, targetBranchName));",
        "patch": "@@ -254,7 +254,7 @@ private Ref resolveTargetRef(String targetBranchName, Repository repo) throws IO\n     }\n \n     if (targetRef == null) {\n-      LOG.warn(COULD_NOT_FIND_REF, targetBranchName);\n+      LOG.warn(String.format(COULD_NOT_FIND_REF, targetBranchName));\n     }\n \n     return targetRef;"
    },
    {
        "commit_id": "c1a09c7964cb3e000ba992c97a592d8e4110c256",
        "commit_message": "SONAR-14683 fix cannot delete an ALM configuration in Community",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1a09c7964cb3e000ba992c97a592d8e4110c256",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 15);",
        "fixed_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 16);",
        "patch": "@@ -31,7 +31,7 @@ public class AlmSettingsWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new AlmSettingsWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 15);\n+    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 16);\n   }\n \n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "a4c77c9e985f237777e9d1865361d2b909d5b1f4",
        "commit_message": "SONAR-14646 copy issue state on branch merge",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a4c77c9e985f237777e9d1865361d2b909d5b1f4",
        "buggy_code": "issueLifecycle.mergeConfirmedOrResolvedFromPr(e.getKey(), defaultIssues.get(issue), issue.getPrKey());",
        "fixed_code": "issueLifecycle.mergeConfirmedOrResolvedFromPrOrBranch(e.getKey(), defaultIssues.get(issue), issue.getBranchType(), issue.getPrKey());",
        "patch": "@@ -55,7 +55,7 @@ public void tryMerge(Component component, Collection<DefaultIssue> newIssues) {\n \n     for (Map.Entry<DefaultIssue, SiblingIssue> e : matchedRaws.entrySet()) {\n       SiblingIssue issue = e.getValue();\n-      issueLifecycle.mergeConfirmedOrResolvedFromPr(e.getKey(), defaultIssues.get(issue), issue.getPrKey());\n+      issueLifecycle.mergeConfirmedOrResolvedFromPrOrBranch(e.getKey(), defaultIssues.get(issue), issue.getBranchType(), issue.getPrKey());\n     }\n   }\n }"
    },
    {
        "commit_id": "a4c77c9e985f237777e9d1865361d2b909d5b1f4",
        "commit_message": "SONAR-14646 copy issue state on branch merge",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a4c77c9e985f237777e9d1865361d2b909d5b1f4",
        "buggy_code": "underTest.mergeConfirmedOrResolvedFromPr(raw, fromShort, \"2\");",
        "fixed_code": "underTest.mergeConfirmedOrResolvedFromPrOrBranch(raw, fromShort, BranchType.PULL_REQUEST, \"2\");",
        "patch": "@@ -145,7 +145,7 @@ public void mergeIssueFromPRIntoBranch() {\n     when(branch.getName()).thenReturn(\"master\");\n     analysisMetadataHolder.setBranch(branch);\n \n-    underTest.mergeConfirmedOrResolvedFromPr(raw, fromShort, \"2\");\n+    underTest.mergeConfirmedOrResolvedFromPrOrBranch(raw, fromShort, BranchType.PULL_REQUEST, \"2\");\n \n     assertThat(raw.resolution()).isEqualTo(\"resolution\");\n     assertThat(raw.status()).isEqualTo(\"status\");"
    },
    {
        "commit_id": "3c46dd59414cbaff3b861bc76e6da59a5eacfca8",
        "commit_message": "SONAR-12902 Reword unsufficient coverage issue description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c46dd59414cbaff3b861bc76e6da59a5eacfca8",
        "buggy_code": "return format(\"%d more branches need to be covered by tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);",
        "fixed_code": "return format(\"%d more conditions need to be covered by tests to reach the minimum threshold of %s%% condition coverage.\", effortToFix, minCoverage);",
        "patch": "@@ -40,6 +40,6 @@ public BranchCoverageRule(ActiveRulesHolder activeRulesHolder, MetricRepository\n   @Override\n   protected String formatMessage(int effortToFix, double minCoverage) {\n     // FIXME declare min threshold as int but not float ?\n-    return format(\"%d more branches need to be covered by tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);\n+    return format(\"%d more conditions need to be covered by tests to reach the minimum threshold of %s%% condition coverage.\", effortToFix, minCoverage);\n   }\n }"
    },
    {
        "commit_id": "3c46dd59414cbaff3b861bc76e6da59a5eacfca8",
        "commit_message": "SONAR-12902 Reword unsufficient coverage issue description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c46dd59414cbaff3b861bc76e6da59a5eacfca8",
        "buggy_code": "return \"23 more branches need to be covered by tests to reach the minimum threshold of 65.0% branch coverage.\";",
        "fixed_code": "return \"23 more conditions need to be covered by tests to reach the minimum threshold of 65.0% condition coverage.\";",
        "patch": "@@ -57,6 +57,6 @@ protected String getUncoveredMetricKey() {\n \n   @Override\n   protected String getExpectedIssueMessage() {\n-    return \"23 more branches need to be covered by tests to reach the minimum threshold of 65.0% branch coverage.\";\n+    return \"23 more conditions need to be covered by tests to reach the minimum threshold of 65.0% condition coverage.\";\n   }\n }"
    },
    {
        "commit_id": "891ed0cbda954290bbe2ce13e605506c9eb01353",
        "commit_message": "SONAR-14258 Pull requests inherit issue state from the source branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/891ed0cbda954290bbe2ce13e605506c9eb01353",
        "buggy_code": "private static final long DEFAULT_EXTERNAL_ISSUE_EFFORT = 0l;",
        "fixed_code": "private static final long DEFAULT_EXTERNAL_ISSUE_EFFORT = 0L;",
        "patch": "@@ -54,7 +54,7 @@\n import static org.sonar.api.issue.Issue.STATUS_TO_REVIEW;\n \n public class TrackerRawInputFactory {\n-  private static final long DEFAULT_EXTERNAL_ISSUE_EFFORT = 0l;\n+  private static final long DEFAULT_EXTERNAL_ISSUE_EFFORT = 0L;\n   private final TreeRootHolder treeRootHolder;\n   private final BatchReportReader reportReader;\n   private final CommonRuleEngine commonRuleEngine;"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(enumerationToArrayList(search.find()).size()).isEqualTo(0);",
        "fixed_code": "assertThat(enumerationToArrayList(search.find()).size()).isZero();",
        "patch": "@@ -83,7 +83,7 @@ public void oneLevelSearch() throws Exception {\n     assertThat(search.getParameters()).isEqualTo(new String[] {\"inetOrgPerson\"});\n     assertThat(search.getReturningAttributes()).isEqualTo(new String[] {\"cn\"});\n     assertThat(search.toString()).isEqualTo(\"LdapSearch{baseDn=dc=example,dc=org, scope=onelevel, request=(objectClass={0}), parameters=[inetOrgPerson], attributes=[cn]}\");\n-    assertThat(enumerationToArrayList(search.find()).size()).isEqualTo(0);\n+    assertThat(enumerationToArrayList(search.find()).size()).isZero();\n     assertThat(search.findUnique()).isNull();\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(matchesByScore.getSize()).isEqualTo(0);",
        "fixed_code": "assertThat(matchesByScore.getSize()).isZero();",
        "patch": "@@ -43,7 +43,7 @@ public void creates_returns_always_the_same_instance_of_maxScore_is_less_than_mi\n     ScoreMatrix scoreMatrix1 = new ScoreMatrix(doesNotMatterRemovedFiles, doesNotMatterNewFiles, doesNotMatterScores, MIN_REQUIRED_SCORE - 1);\n     MatchesByScore matchesByScore = MatchesByScore.create(scoreMatrix1);\n \n-    assertThat(matchesByScore.getSize()).isEqualTo(0);\n+    assertThat(matchesByScore.getSize()).isZero();\n     assertThat(matchesByScore).isEmpty();\n \n     ScoreMatrix scoreMatrix2 = new ScoreMatrix(doesNotMatterRemovedFiles, doesNotMatterNewFiles, doesNotMatterScores, MIN_REQUIRED_SCORE - 5);"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(variationValue.getValue()).isEqualTo(0);",
        "fixed_code": "assertThat(variationValue.getValue()).isZero();",
        "patch": "@@ -72,7 +72,7 @@ public void multiples_calls_to_increment_double_increment_the_value() {\n \n   private static void verifyUnsetVariationValue(DoubleValue variationValue) {\n     assertThat(variationValue.isSet()).isFalse();\n-    assertThat(variationValue.getValue()).isEqualTo(0);\n+    assertThat(variationValue.getValue()).isZero();\n   }\n \n   private static void verifySetVariationValue(DoubleValue variationValue, double expected) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(variationValue.getValue()).isEqualTo(0);",
        "fixed_code": "assertThat(variationValue.getValue()).isZero();",
        "patch": "@@ -72,7 +72,7 @@ public void multiples_calls_to_increment_int_increment_the_value() {\n \n   private static void verifyUnsetVariationValue(IntValue variationValue) {\n     assertThat(variationValue.isSet()).isFalse();\n-    assertThat(variationValue.getValue()).isEqualTo(0);\n+    assertThat(variationValue.getValue()).isZero();\n   }\n \n   private static void verifySetVariationValue(IntValue variationValue, int expected) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(issues).hasSize(0);",
        "fixed_code": "assertThat(issues).isEmpty();",
        "patch": "@@ -264,7 +264,7 @@ public void close_unmatched_base_issue() {\n     underTest.visitAny(FILE);\n \n     List<DefaultIssue> issues = newArrayList(protoIssueCache.traverse());\n-    assertThat(issues).hasSize(0);\n+    assertThat(issues).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(input.getLineHashSequence().length()).isEqualTo(0);",
        "fixed_code": "assertThat(input.getLineHashSequence().length()).isZero();",
        "patch": "@@ -76,6 +76,6 @@ public void gets_nothing_when_there_is_no_matching_component() {\n     Input<DefaultIssue> input = underTest.create(component);\n \n     assertThat(input.getIssues()).isEmpty();\n-    assertThat(input.getLineHashSequence().length()).isEqualTo(0);\n+    assertThat(input.getLineHashSequence().length()).isZero();\n   }\n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(contextArgumentCaptor.getValue().getNcloc()).isEqualTo(0);",
        "fixed_code": "assertThat(contextArgumentCaptor.getValue().getNcloc()).isZero();",
        "patch": "@@ -103,7 +103,7 @@ public void ncloc_is_zero_in_context_when_not_available() {\n \n     ArgumentCaptor<Context> contextArgumentCaptor = ArgumentCaptor.forClass(Context.class);\n     verify(check).onCheck(contextArgumentCaptor.capture());\n-    assertThat(contextArgumentCaptor.getValue().getNcloc()).isEqualTo(0);\n+    assertThat(contextArgumentCaptor.getValue().getNcloc()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(data.getLines(2).getScmDate()).isEqualTo(0);",
        "fixed_code": "assertThat(data.getLines(2).getScmDate()).isZero();",
        "patch": "@@ -220,7 +220,7 @@ public void persist_scm_some_lines() {\n     assertThat(data.getLines(1).getScmRevision()).isEmpty();\n \n     assertThat(data.getLines(2).getScmAuthor()).isEmpty();\n-    assertThat(data.getLines(2).getScmDate()).isEqualTo(0);\n+    assertThat(data.getLines(2).getScmDate()).isZero();\n     assertThat(data.getLines(2).getScmRevision()).isEmpty();\n     verify(fileSourceDataWarnings).commitWarnings();\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(lineBuilder.getLineHits()).isEqualTo(0);",
        "fixed_code": "assertThat(lineBuilder.getLineHits()).isZero();",
        "patch": "@@ -73,7 +73,7 @@ public void set_coverage_on_uncovered_lines() {\n     assertThat(computeCoverageLine.read(lineBuilder)).isEmpty();\n \n     assertThat(lineBuilder.hasLineHits()).isTrue();\n-    assertThat(lineBuilder.getLineHits()).isEqualTo(0);\n+    assertThat(lineBuilder.getLineHits()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(reloaded.getType()).isEqualTo(0);",
        "fixed_code": "assertThat(reloaded.getType()).isZero();",
        "patch": "@@ -87,7 +87,7 @@ public void persist_and_index_new_ad_hoc_rules() {\n     assertThat(reloaded.getRepositoryKey()).isEqualTo(\"external_eslint\");\n     assertThat(reloaded.isExternal()).isTrue();\n     assertThat(reloaded.isAdHoc()).isTrue();\n-    assertThat(reloaded.getType()).isEqualTo(0);\n+    assertThat(reloaded.getType()).isZero();\n     assertThat(reloaded.getSeverity()).isNull();\n     assertThat(reloaded.getName()).isEqualTo(\"eslint:no-cond-assign\");\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(db.getSession(), \"live_measures\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(db.getSession(), \"live_measures\")).isZero();",
        "patch": "@@ -165,7 +165,7 @@ private PersistDuplicationDataStep underTest() {\n   }\n \n   private void assertThatNothingPersisted() {\n-    assertThat(db.countRowsOfTable(db.getSession(), \"live_measures\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(db.getSession(), \"live_measures\")).isZero();\n   }\n \n   private Optional<String> selectMeasureData(String componentUuid) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(notification.getFieldValue(\"branch\")).isEqualTo(null);",
        "fixed_code": "assertThat(notification.getFieldValue(\"branch\")).isNull();",
        "patch": "@@ -265,7 +265,7 @@ public void verify_branch_name_is_not_set_in_notification_when_main() {\n     assertThat(notification.getFieldValue(\"projectKey\")).isEqualTo(PROJECT_COMPONENT.getKey());\n     assertThat(notification.getFieldValue(\"projectName\")).isEqualTo(PROJECT_COMPONENT.getName());\n     assertThat(notification.getFieldValue(\"projectVersion\")).isEqualTo(PROJECT_COMPONENT.getProjectAttributes().getProjectVersion());\n-    assertThat(notification.getFieldValue(\"branch\")).isEqualTo(null);\n+    assertThat(notification.getFieldValue(\"branch\")).isNull();\n \n     reset(measureRepository, eventRepository, notificationService);\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(SqlLogFormatter.countArguments(\"select * from issues\")).isEqualTo(0);",
        "fixed_code": "assertThat(SqlLogFormatter.countArguments(\"select * from issues\")).isZero();",
        "patch": "@@ -74,7 +74,7 @@ public void reformatParams_returns_blank_if_zero_params() {\n \n   @Test\n   public void countArguments() {\n-    assertThat(SqlLogFormatter.countArguments(\"select * from issues\")).isEqualTo(0);\n+    assertThat(SqlLogFormatter.countArguments(\"select * from issues\")).isZero();\n     assertThat(SqlLogFormatter.countArguments(\"select * from issues where id=?\")).isEqualTo(1);\n     assertThat(SqlLogFormatter.countArguments(\"select * from issues where id=? and kee=?\")).isEqualTo(2);\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(underTest.selectByUuid(dbSession, tasks[1].getUuid()).get().getWarningCount()).isEqualTo(0);",
        "fixed_code": "assertThat(underTest.selectByUuid(dbSession, tasks[1].getUuid()).get().getWarningCount()).isZero();",
        "patch": "@@ -129,7 +129,7 @@ public void selectByUuid_populates_warning_count() {\n     insertWarnings(tasks[2], 1);\n \n     assertThat(underTest.selectByUuid(dbSession, tasks[0].getUuid()).get().getWarningCount()).isEqualTo(moreThan1);\n-    assertThat(underTest.selectByUuid(dbSession, tasks[1].getUuid()).get().getWarningCount()).isEqualTo(0);\n+    assertThat(underTest.selectByUuid(dbSession, tasks[1].getUuid()).get().getWarningCount()).isZero();\n     assertThat(underTest.selectByUuid(dbSession, tasks[2].getUuid()).get().getWarningCount()).isEqualTo(1);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countRowsOfTable(TABLE_NAME)).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countRowsOfTable(TABLE_NAME)).isZero();",
        "patch": "@@ -104,7 +104,7 @@ public void deleteByUuids() {\n \n     underTest.deleteByUuids(dbTester.getSession(), singleton(A_UUID));\n     dbTester.commit();\n-    assertThat(dbTester.countRowsOfTable(TABLE_NAME)).isEqualTo(0);\n+    assertThat(dbTester.countRowsOfTable(TABLE_NAME)).isZero();\n   }\n \n   private void insertData(String uuid) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(\"project_links\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(\"project_links\")).isZero();",
        "patch": "@@ -160,7 +160,7 @@ public void delete() {\n     underTest.delete(db.getSession(), link.getUuid());\n     db.getSession().commit();\n \n-    assertThat(db.countRowsOfTable(\"project_links\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(\"project_links\")).isZero();\n   }\n \n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countRowsOfTable(\"events\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countRowsOfTable(\"events\")).isZero();",
        "patch": "@@ -214,7 +214,7 @@ public void delete_by_uuid() {\n     underTest.delete(dbTester.getSession(), \"E1\");\n     dbTester.commit();\n \n-    assertThat(dbTester.countRowsOfTable(\"events\")).isEqualTo(0);\n+    assertThat(dbTester.countRowsOfTable(\"events\")).isZero();\n   }\n \n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(count).isEqualTo(0);",
        "fixed_code": "assertThat(count).isZero();",
        "patch": "@@ -224,7 +224,7 @@ public void updateBeforeSelectedDate_with_conflict() {\n     dto.setSelectedAt(1400000000000L);\n \n     int count = underTest.updateIfBeforeSelectedDate(dto);\n-    assertThat(count).isEqualTo(0);\n+    assertThat(count).isZero();\n     dbTester.getSession().commit();\n \n     // No change"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dao.count()).isEqualTo(0);",
        "fixed_code": "assertThat(dao.count()).isZero();",
        "patch": "@@ -59,7 +59,7 @@ public void should_insert_new_notification_queue() throws Exception {\n   public void should_count_notification_queue() {\n     NotificationQueueDto notificationQueueDto = toNotificationQueueDto(new Notification(\"email\"));\n \n-    assertThat(dao.count()).isEqualTo(0);\n+    assertThat(dao.count()).isZero();\n \n     dao.insert(Arrays.asList(notificationQueueDto));\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(query.getPageOffset()).isEqualTo(0);",
        "fixed_code": "assertThat(query.getPageOffset()).isZero();",
        "patch": "@@ -65,7 +65,7 @@ public void create_query_with_default_pagination() {\n     PermissionQuery query = PermissionQuery.builder()\n       .build();\n \n-    assertThat(query.getPageOffset()).isEqualTo(0);\n+    assertThat(query.getPageOffset()).isZero();\n     assertThat(query.getPageSize()).isEqualTo(20);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(projectsByUuids).hasSize(0);",
        "fixed_code": "assertThat(projectsByUuids).isEmpty();",
        "patch": "@@ -172,7 +172,7 @@ public void select_empty_by_uuids() {\n     projectDao.insert(db.getSession(), dto3);\n \n     List<ProjectDto> projectsByUuids = projectDao.selectByUuids(db.getSession(), Collections.emptySet());\n-    assertThat(projectsByUuids).hasSize(0);\n+    assertThat(projectsByUuids).isEmpty();\n   }\n \n   private void assertProject(ProjectDto dto, String name, String kee, String org, String uuid, String desc, @Nullable String tags, boolean isPrivate) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(underTest.deleteByComponentUuid(dbSession, \"other_component\")).isEqualTo(0);",
        "fixed_code": "assertThat(underTest.deleteByComponentUuid(dbSession, \"other_component\")).isZero();",
        "patch": "@@ -165,7 +165,7 @@ public void delete_by_component_uuid_deletes_all_properties_with_given_component\n   public void delete_by_component_uuid_and_key_does_nothing_if_property_doesnt_exist() {\n     saveDto();\n \n-    assertThat(underTest.deleteByComponentUuid(dbSession, \"other_component\")).isEqualTo(0);\n+    assertThat(underTest.deleteByComponentUuid(dbSession, \"other_component\")).isZero();\n     assertThat(underTest.selectByComponentUuidAndKey(dbSession, SOME_COMPONENT, SOME_KEY)).isNotEmpty();\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(underTest.selectByLanguage(dbSession, \"missing\")).hasSize(0);",
        "fixed_code": "assertThat(underTest.selectByLanguage(dbSession, \"missing\")).isEmpty();",
        "patch": "@@ -141,7 +141,7 @@ public void selectByLanguage_returns_empty_list_if_no_results() {\n     RuleRepositoryDto dto1 = new RuleRepositoryDto(\"findbugs\", \"java\", \"Findbugs\");\n     underTest.insertOrUpdate(dbSession, asList(dto1));\n \n-    assertThat(underTest.selectByLanguage(dbSession, \"missing\")).hasSize(0);\n+    assertThat(underTest.selectByLanguage(dbSession, \"missing\")).isEmpty();\n   }\n \n   private long selectCreatedAtByKey(DbSession dbSession, String key) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(res.getLineCount()).isEqualTo(0);",
        "fixed_code": "assertThat(res.getLineCount()).isZero();",
        "patch": "@@ -163,7 +163,7 @@ public void selectSourceByFileUuid_reads_source_without_line_hashes() {\n \n     FileSourceDto res = underTest.selectByFileUuid(dbSession, fileSourceDto.getFileUuid());\n \n-    assertThat(res.getLineCount()).isEqualTo(0);\n+    assertThat(res.getLineCount()).isZero();\n     assertThat(res.getLineHashes()).isEmpty();\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(dbSession, \"groups\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(dbSession, \"groups\")).isZero();",
        "patch": "@@ -216,6 +216,6 @@ public void deleteByUuid() {\n \n     underTest.deleteByUuid(dbSession, aGroup.getUuid());\n \n-    assertThat(db.countRowsOfTable(dbSession, \"groups\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(dbSession, \"groups\")).isZero();\n   }\n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countRowsOfTable(dbSession, \"webhook_deliveries\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countRowsOfTable(dbSession, \"webhook_deliveries\")).isZero();",
        "patch": "@@ -225,7 +225,7 @@ public void deleteComponentBeforeDate_deletes_rows_before_date() {\n   public void deleteComponentBeforeDate_does_nothing_on_empty_table() {\n     underTest.deleteComponentBeforeDate(dbSession, \"COMPONENT_1\", 1_500_000L);\n \n-    assertThat(dbTester.countRowsOfTable(dbSession, \"webhook_deliveries\")).isEqualTo(0);\n+    assertThat(dbTester.countRowsOfTable(dbSession, \"webhook_deliveries\")).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(StartCallCounter.startCalls).isEqualTo(0);",
        "fixed_code": "assertThat(StartCallCounter.startCalls).isZero();",
        "patch": "@@ -48,7 +48,7 @@ public void pico_container_of_migration_container_is_started_in_constructor() {\n \n   @Test\n   public void migration_container_lazily_instance_components() {\n-    assertThat(StartCallCounter.startCalls).isEqualTo(0);\n+    assertThat(StartCallCounter.startCalls).isZero();\n \n     StartCallCounter startCallCounter = underTest.getComponentByType(StartCallCounter.class);\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countRowsOfTable(TABLE_SCHEMA_MIGRATIONS)).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countRowsOfTable(TABLE_SCHEMA_MIGRATIONS)).isZero();",
        "patch": "@@ -68,7 +68,7 @@ private void executeDdl(String sql) throws SQLException {\n   }\n \n   private void verifyTable() {\n-    assertThat(dbTester.countRowsOfTable(TABLE_SCHEMA_MIGRATIONS)).isEqualTo(0);\n+    assertThat(dbTester.countRowsOfTable(TABLE_SCHEMA_MIGRATIONS)).isZero();\n     dbTester.assertColumnDefinition(TABLE_SCHEMA_MIGRATIONS, \"version\", Types.VARCHAR, 255, false);\n   }\n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(underTest.getMaxBatchSize()).isEqualTo(0);",
        "fixed_code": "assertThat(underTest.getMaxBatchSize()).isZero();",
        "patch": "@@ -48,7 +48,7 @@ public void setBatchSize_accepts_zero() throws Exception {\n \n     underTest.setBatchSize(0);\n \n-    assertThat(underTest.getMaxBatchSize()).isEqualTo(0);\n+    assertThat(underTest.getMaxBatchSize()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where exclude_from_purge = true\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where exclude_from_purge = true\")).isZero();",
        "patch": "@@ -75,7 +75,7 @@ public void execute_migration() throws SQLException {\n   }\n \n   private void verifyMigrationResult() {\n-    assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where exclude_from_purge = true\")).isEqualTo(0);\n+    assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where exclude_from_purge = true\")).isZero();\n     assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where exclude_from_purge = false\")).isEqualTo(8);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countSql(\"select count(*) from \" + PROPS_TABLE + \" where prop_key = 'sonar.branch.longLivedBranches.regex'\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countSql(\"select count(*) from \" + PROPS_TABLE + \" where prop_key = 'sonar.branch.longLivedBranches.regex'\")).isZero();",
        "patch": "@@ -126,7 +126,7 @@ private void verifyMigrationOfOverriddenSetting() {\n \n   private void verifyMigrationOfDefaultSetting(String expectedValue) {\n     assertThat(dbTester.countRowsOfTable(PROPS_TABLE)).isEqualTo(4);\n-    assertThat(dbTester.countSql(\"select count(*) from \" + PROPS_TABLE + \" where prop_key = 'sonar.branch.longLivedBranches.regex'\")).isEqualTo(0);\n+    assertThat(dbTester.countSql(\"select count(*) from \" + PROPS_TABLE + \" where prop_key = 'sonar.branch.longLivedBranches.regex'\")).isZero();\n     assertThat(dbTester.countSql(\"select count(*) from \" + PROPS_TABLE + \" where prop_key = 'sonar.dbcleaner.branchesToKeepWhenInactive'\")).isEqualTo(1);\n     assertThat(dbTester.select(\"select resource_id, text_value from \" + PROPS_TABLE + \" where prop_key = 'sonar.dbcleaner.branchesToKeepWhenInactive'\")\n       .stream()"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where kee = 'branchType' and text_value in ('LONG', 'SHORT')\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where kee = 'branchType' and text_value in ('LONG', 'SHORT')\")).isZero();",
        "patch": "@@ -73,7 +73,7 @@ public void migration_is_re_entrant() throws SQLException {\n \n   private void verifyMigrationResult() {\n     assertThat(dbTester.countRowsOfTable(TABLE)).isEqualTo(8);\n-    assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where kee = 'branchType' and text_value in ('LONG', 'SHORT')\")).isEqualTo(0);\n+    assertThat(dbTester.countSql(\"select count(*) from \" + TABLE + \" where kee = 'branchType' and text_value in ('LONG', 'SHORT')\")).isZero();\n     assertThat(dbTester.select(\"select uuid from \" + TABLE + \" where kee = 'branchType' and text_value = 'BRANCH'\")\n       .stream()\n       .map(e -> e.get(\"UUID\"))"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(dbTester.countSql(\"select count(*) from project_branches where branch_type = 'LONG' or branch_type = 'SHORT'\")).isEqualTo(0);",
        "fixed_code": "assertThat(dbTester.countSql(\"select count(*) from project_branches where branch_type = 'LONG' or branch_type = 'SHORT'\")).isZero();",
        "patch": "@@ -80,7 +80,7 @@ public void migration_is_re_entrant() throws SQLException {\n \n   private void verifyMigrationResult() {\n     assertThat(dbTester.countRowsOfTable(BRANCHES_TABLE)).isEqualTo(8);\n-    assertThat(dbTester.countSql(\"select count(*) from project_branches where branch_type = 'LONG' or branch_type = 'SHORT'\")).isEqualTo(0);\n+    assertThat(dbTester.countSql(\"select count(*) from project_branches where branch_type = 'LONG' or branch_type = 'SHORT'\")).isZero();\n     assertThat(dbTester.select(\"select uuid from \" + BRANCHES_TABLE + \" where branch_type = 'BRANCH'\")\n       .stream()\n       .map(e -> e.get(\"UUID\"))"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(numberOfPropsWithOldName).isEqualTo(0);",
        "fixed_code": "assertThat(numberOfPropsWithOldName).isZero();",
        "patch": "@@ -82,7 +82,7 @@ private void verifyResult() {\n     int numberOfPropsWithNewName = dbTester.countSql(\"select count(*) from \" + TABLE + \" where prop_key = '\" + NEW_PROPERTY_NAME + \"'\");\n     int numberOfPropsWithOldName = dbTester.countSql(\"select count(*) from \" + TABLE + \" where prop_key = '\" + OLD_PROPERTY_NAME + \"'\");\n     assertThat(numberOfPropsWithNewName).isEqualTo(TOTAL_NUMBER_OF_PROJECT_LEVEL_PROPERTIES + 1);\n-    assertThat(numberOfPropsWithOldName).isEqualTo(0);\n+    assertThat(numberOfPropsWithOldName).isZero();\n   }\n \n   private void insertProperty(@Nullable Long projectId, String propertyKey, String propertyValue) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(\"issues\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(\"issues\")).isZero();",
        "patch": "@@ -55,7 +55,7 @@ public class EnsureHotspotDefaultStatusIsToReviewTest {\n   public void does_not_fail_if_table_is_empty() throws SQLException {\n     underTest.execute();\n \n-    assertThat(db.countRowsOfTable(\"issues\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(\"issues\")).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(FileUtils2.sizeOf(file.toPath())).isEqualTo(0);",
        "fixed_code": "assertThat(FileUtils2.sizeOf(file.toPath())).isZero();",
        "patch": "@@ -268,7 +268,7 @@ public void sizeOf_sums_sizes_of_all_files_in_directory() throws IOException {\n   public void sizeOf_is_zero_on_empty_files() throws IOException {\n     File file = temporaryFolder.newFile();\n \n-    assertThat(FileUtils2.sizeOf(file.toPath())).isEqualTo(0);\n+    assertThat(FileUtils2.sizeOf(file.toPath())).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(memoryAppender.getLogs()).hasSize(0);",
        "fixed_code": "assertThat(memoryAppender.getLogs()).isEmpty();",
        "patch": "@@ -165,7 +165,7 @@ public void verify_jul_initialization() {\n     julLogger.severe(\"Message1\");\n \n     // JUL bridge has not been initialized, nothing in logs\n-    assertThat(memoryAppender.getLogs()).hasSize(0);\n+    assertThat(memoryAppender.getLogs()).isEmpty();\n \n     // Enabling JUL bridge\n     LoggerContextListener propagator = underTest.enableJulChangePropagation(ctx);"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(es.countDocuments(TYPE_COMPONENT)).isEqualTo(0);",
        "fixed_code": "assertThat(es.countDocuments(TYPE_COMPONENT)).isZero();",
        "patch": "@@ -228,7 +228,7 @@ public void errors_during_indexing_are_recovered() {\n     result = recover();\n     assertThat(result.getTotal()).isEqualTo(1L);\n     assertThat(result.getFailures()).isEqualTo(1L);\n-    assertThat(es.countDocuments(TYPE_COMPONENT)).isEqualTo(0);\n+    assertThat(es.countDocuments(TYPE_COMPONENT)).isZero();\n \n     es.unlockWrites(TYPE_COMPONENT);\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(underTest.search(query, options).getTotal()).isEqualTo(0);",
        "fixed_code": "assertThat(underTest.search(query, options).getTotal()).isZero();",
        "patch": "@@ -324,7 +324,7 @@ public void tags_facet_supports_selected_value_with_regexp_special_characters()\n     SearchOptions options = new SearchOptions().addFacets(FACET_TAGS);\n \n     // do not fail\n-    assertThat(underTest.search(query, options).getTotal()).isEqualTo(0);\n+    assertThat(underTest.search(query, options).getTotal()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(pluginDownloader.getDownloadedPlugins()).hasSize(0);",
        "fixed_code": "assertThat(pluginDownloader.getDownloadedPlugins()).isEmpty();",
        "patch": "@@ -252,7 +252,7 @@ public void read_download_folder() throws Exception {\n   @Test\n   public void getDownloadedPluginFilenames_reads_plugin_info_of_files_in_download_folder() throws Exception {\n     pluginDownloader.start();\n-    assertThat(pluginDownloader.getDownloadedPlugins()).hasSize(0);\n+    assertThat(pluginDownloader.getDownloadedPlugins()).isEmpty();\n \n     File file1 = new File(downloadDir, \"file1.jar\");\n     file1.createNewFile();"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(cookie.getMaxAge()).isEqualTo(0);",
        "fixed_code": "assertThat(cookie.getMaxAge()).isZero();",
        "patch": "@@ -167,7 +167,7 @@ public void remove_state() {\n     verify(response).addCookie(cookieArgumentCaptor.capture());\n     Cookie cookie = cookieArgumentCaptor.getValue();\n     assertThat(cookie.getValue()).isNull();\n-    assertThat(cookie.getMaxAge()).isEqualTo(0);\n+    assertThat(cookie.getMaxAge()).isZero();\n   }\n \n   private void verifyCookie(Cookie cookie) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(updatedCookie.getMaxAge()).isEqualTo(0);",
        "fixed_code": "assertThat(updatedCookie.getMaxAge()).isZero();",
        "patch": "@@ -191,6 +191,6 @@ public void delete() {\n     assertThat(updatedCookie.getName()).isEqualTo(AUTHENTICATION_COOKIE_NAME);\n     assertThat(updatedCookie.getValue()).isNull();\n     assertThat(updatedCookie.getPath()).isEqualTo(\"/\");\n-    assertThat(updatedCookie.getMaxAge()).isEqualTo(0);\n+    assertThat(updatedCookie.getMaxAge()).isZero();\n   }\n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(info.get().getSectionsCount()).isEqualTo(0);",
        "fixed_code": "assertThat(info.get().getSectionsCount()).isZero();",
        "patch": "@@ -77,7 +77,7 @@ public void retrieveSystemInfo_get_information_if_process_is_up() {\n     setUpWithHttpUrl(ProcessId.COMPUTE_ENGINE);\n \n     Optional<ProtobufSystemInfo.SystemInfo> info = underTest.retrieveSystemInfo();\n-    assertThat(info.get().getSectionsCount()).isEqualTo(0);\n+    assertThat(info.get().getSectionsCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(service.getDispatchers()).hasSize(0);",
        "fixed_code": "assertThat(service.getDispatchers()).isEmpty();",
        "patch": "@@ -208,7 +208,7 @@ public void getDispatchers_empty() {\n     Settings settings = new MapSettings().setProperty(\"sonar.notifications.delay\", 1L);\n \n     service = new NotificationService(dbClient);\n-    assertThat(service.getDispatchers()).hasSize(0);\n+    assertThat(service.getDispatchers()).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(es.countDocuments(FakeIndexDefinition.INDEX_TYPE)).isEqualTo(0);",
        "fixed_code": "assertThat(es.countDocuments(FakeIndexDefinition.INDEX_TYPE)).isZero();",
        "patch": "@@ -245,7 +245,7 @@ private void testDeleteOnDbChange(String expectedLog, Consumer<TestEsDbCompatibi\n       // keep existing metadata\n       .doesNotContain(\"Create type metadatas/metadata\");\n     // index has been dropped and re-created\n-    assertThat(es.countDocuments(FakeIndexDefinition.INDEX_TYPE)).isEqualTo(0);\n+    assertThat(es.countDocuments(FakeIndexDefinition.INDEX_TYPE)).isZero();\n   }\n \n   private ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetadata>> mappings() {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(db.getSession(), \"es_queue\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(db.getSession(), \"es_queue\")).isZero();",
        "patch": "@@ -105,7 +105,7 @@ public void deletion_resilience_will_deindex_projects() {\n \n     underTest.index(db.getSession(), esQueueDtos);\n \n-    assertThat(db.countRowsOfTable(db.getSession(), \"es_queue\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(db.getSession(), \"es_queue\")).isZero();\n     assertThat(es.countDocuments(INDEX_TYPE_FOO_AUTH)).isEqualTo(1);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(activityResponse.getTasksCount()).isEqualTo(0);",
        "fixed_code": "assertThat(activityResponse.getTasksCount()).isZero();",
        "patch": "@@ -161,7 +161,7 @@ public void filter_by_max_executed_at_exclude() {\n       .setParam(\"status\", \"FAILED,IN_PROGRESS,SUCCESS\")\n       .setParam(PARAM_MAX_EXECUTED_AT, \"2016-02-15\"));\n \n-    assertThat(activityResponse.getTasksCount()).isEqualTo(0);\n+    assertThat(activityResponse.getTasksCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(response.getPaging().getTotal()).isEqualTo(0);",
        "fixed_code": "assertThat(response.getPaging().getTotal()).isZero();",
        "patch": "@@ -308,7 +308,7 @@ public void response_is_empty_on_provisioned_projects() {\n \n     assertThat(response.getBaseComponent().getKey()).isEqualTo(project.getDbKey());\n     assertThat(response.getComponentsList()).isEmpty();\n-    assertThat(response.getPaging().getTotal()).isEqualTo(0);\n+    assertThat(response.getPaging().getTotal()).isZero();\n     assertThat(response.getPaging().getPageSize()).isEqualTo(100);\n     assertThat(response.getPaging().getPageIndex()).isEqualTo(1);\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(result.getFavoritesCount()).isEqualTo(0);",
        "fixed_code": "assertThat(result.getFavoritesCount()).isZero();",
        "patch": "@@ -98,7 +98,7 @@ public void return_favorites() {\n   public void empty_list() {\n     SearchResponse result = call();\n \n-    assertThat(result.getFavoritesCount()).isEqualTo(0);\n+    assertThat(result.getFavoritesCount()).isZero();\n     assertThat(result.getFavoritesList()).isEmpty();\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(\"issue_changes\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(\"issue_changes\")).isZero();",
        "patch": "@@ -164,7 +164,7 @@ public void update_issues() {\n     underTest.save(db.getSession(), singletonList(issue));\n \n     assertThat(db.countRowsOfTable(\"issues\")).isEqualTo(1);\n-    assertThat(db.countRowsOfTable(\"issue_changes\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(\"issue_changes\")).isZero();\n \n     DefaultIssue updated = new DefaultIssue()\n       .setKey(issue.key())"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(response.getPeriods().getPeriodsCount()).isEqualTo(0);",
        "fixed_code": "assertThat(response.getPeriods().getPeriodsCount()).isZero();",
        "patch": "@@ -98,7 +98,7 @@ public void provided_project() {\n \n     assertThat(response.getMetrics().getMetricsCount()).isEqualTo(1);\n     assertThat(response.hasPeriod()).isFalse();\n-    assertThat(response.getPeriods().getPeriodsCount()).isEqualTo(0);\n+    assertThat(response.getPeriods().getPeriodsCount()).isZero();\n     assertThat(response.getComponent().getKey()).isEqualTo(project.getDbKey());\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(result.getComponentsCount()).isEqualTo(0);",
        "fixed_code": "assertThat(result.getComponentsCount()).isZero();",
        "patch": "@@ -524,7 +524,7 @@ public void load_measures_when_no_leave_qualifier() {\n       .executeProtobuf(ComponentTreeWsResponse.class);\n \n     assertThat(result.getBaseComponent().getKey()).isEqualTo(project.getKey());\n-    assertThat(result.getComponentsCount()).isEqualTo(0);\n+    assertThat(result.getComponentsCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(result.getMeasuresCount()).isEqualTo(0);",
        "fixed_code": "assertThat(result.getMeasuresCount()).isZero();",
        "patch": "@@ -269,7 +269,7 @@ public void do_not_verify_permissions_if_user_is_root() {\n \n     userSession.setNonRoot();\n     SearchWsResponse result = call(singletonList(project1.getDbKey()), singletonList(metric.getKey()));\n-    assertThat(result.getMeasuresCount()).isEqualTo(0);\n+    assertThat(result.getMeasuresCount()).isZero();\n \n     userSession.setRoot();\n     result = call(singletonList(project1.getDbKey()), singletonList(metric.getKey()));"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(result.getMeasures(0).getHistoryCount()).isEqualTo(0);",
        "fixed_code": "assertThat(result.getMeasures(0).getHistoryCount()).isZero();",
        "patch": "@@ -119,7 +119,7 @@ public void empty_response() {\n     SearchHistoryResponse result = call(request);\n \n     assertThat(result.getMeasuresList()).hasSize(1);\n-    assertThat(result.getMeasures(0).getHistoryCount()).isEqualTo(0);\n+    assertThat(result.getMeasures(0).getHistoryCount()).isZero();\n \n     assertThat(result.getPaging()).extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal)\n       // pagination is applied to the number of analyses"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(metric.getDirection()).isEqualTo(0);",
        "fixed_code": "assertThat(metric.getDirection()).isZero();",
        "patch": "@@ -88,7 +88,7 @@ public void insert_new_minimalist_metric() {\n     assertThat(metric.getDomain()).isNull();\n     assertThat(metric.isUserManaged()).isTrue();\n     assertThat(metric.isEnabled()).isTrue();\n-    assertThat(metric.getDirection()).isEqualTo(0);\n+    assertThat(metric.getDirection()).isZero();\n     assertThat(metric.isQualitative()).isFalse();\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(db.countRowsOfTable(dbSession, \"new_code_periods\")).isEqualTo(0);",
        "fixed_code": "assertThat(db.countRowsOfTable(dbSession, \"new_code_periods\")).isZero();",
        "patch": "@@ -218,7 +218,7 @@ public void delete_branch_and_project_period_in_community_edition() {\n   }\n \n   private void assertTableEmpty() {\n-    assertThat(db.countRowsOfTable(dbSession, \"new_code_periods\")).isEqualTo(0);\n+    assertThat(db.countRowsOfTable(dbSession, \"new_code_periods\")).isZero();\n   }\n \n   private void assertTableContainsOnly(@Nullable String projectUuid, @Nullable String branchUuid, NewCodePeriodType type, @Nullable String value) {"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(userIndex.search(UserQuery.builder().setOrganizationUuid(org.getUuid()).build(), new SearchOptions()).getTotal()).isEqualTo(0);",
        "fixed_code": "assertThat(userIndex.search(UserQuery.builder().setOrganizationUuid(org.getUuid()).build(), new SearchOptions()).getTotal()).isZero();",
        "patch": "@@ -217,7 +217,7 @@ public void delete_members() {\n     assertThat(db.getDbClient().organizationMemberDao().select(db.getSession(), org.getUuid(), user1.getUuid())).isNotPresent();\n     assertThat(db.getDbClient().organizationMemberDao().select(db.getSession(), org.getUuid(), user2.getUuid())).isNotPresent();\n     assertThat(db.getDbClient().organizationMemberDao().select(db.getSession(), otherOrg.getUuid(), user1.getUuid())).isPresent();\n-    assertThat(userIndex.search(UserQuery.builder().setOrganizationUuid(org.getUuid()).build(), new SearchOptions()).getTotal()).isEqualTo(0);\n+    assertThat(userIndex.search(UserQuery.builder().setOrganizationUuid(org.getUuid()).build(), new SearchOptions()).getTotal()).isZero();\n     assertThat(userIndex.search(UserQuery.builder().setOrganizationUuid(otherOrg.getUuid()).build(), new SearchOptions()).getTotal()).isEqualTo(1);\n     verify(projectLifeCycleListeners).onProjectsDeleted(emptySet());\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(permission.getUsersCount()).isEqualTo(0);",
        "fixed_code": "assertThat(permission.getUsersCount()).isZero();",
        "patch": "@@ -68,7 +68,7 @@ public void search() {\n       if (permission.getKey().equals(SCAN_EXECUTION)) {\n         assertThat(permission.getUsersCount()).isEqualTo(1);\n       } else {\n-        assertThat(permission.getUsersCount()).isEqualTo(0);\n+        assertThat(permission.getUsersCount()).isZero();\n       }\n     }\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(result.getAnalysesCount()).isEqualTo(0);",
        "fixed_code": "assertThat(result.getAnalysesCount()).isZero();",
        "patch": "@@ -612,7 +612,7 @@ public void empty_response() {\n \n     assertThat(result.hasPaging()).isTrue();\n     assertThat(result.getPaging()).extracting(Paging::getPageIndex, Paging::getPageSize, Paging::getTotal).containsExactly(1, 100, 0);\n-    assertThat(result.getAnalysesCount()).isEqualTo(0);\n+    assertThat(result.getAnalysesCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(response.getRulesCount()).isEqualTo(0);",
        "fixed_code": "assertThat(response.getRulesCount()).isZero();",
        "patch": "@@ -147,7 +147,7 @@ public void return_empty_result() {\n \n     assertThat(response.getTotal()).isEqualTo(0L);\n     assertThat(response.getP()).isEqualTo(1);\n-    assertThat(response.getRulesCount()).isEqualTo(0);\n+    assertThat(response.getRulesCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(definition.params()).hasSize(0);",
        "fixed_code": "assertThat(definition.params()).isEmpty();",
        "patch": "@@ -83,7 +83,7 @@ public void definition() {\n     assertThat(definition.isInternal()).isTrue();\n     assertThat(definition.since()).isEqualTo(\"6.1\");\n     assertThat(definition.responseExampleAsString()).isNotEmpty();\n-    assertThat(definition.params()).hasSize(0);\n+    assertThat(definition.params()).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(definition.params()).hasSize(0);",
        "fixed_code": "assertThat(definition.params()).isEmpty();",
        "patch": "@@ -71,7 +71,7 @@ public void definition() {\n     assertThat(definition.isPost()).isFalse();\n     assertThat(definition.isInternal()).isTrue();\n     assertThat(definition.responseExampleAsString()).isNotEmpty();\n-    assertThat(definition.params()).hasSize(0);\n+    assertThat(definition.params()).isEmpty();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(issue.changes()).hasSize(0);",
        "fixed_code": "assertThat(issue.changes()).isEmpty();",
        "patch": "@@ -219,6 +219,6 @@ public void adding_null_change_has_no_effect() {\n \n     issue.addChange(null);\n \n-    assertThat(issue.changes()).hasSize(0);\n+    assertThat(issue.changes()).isEmpty();\n   }\n }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(compute(seq(\"bcde\"), seq(\"abcde\"), 4, 4)).isEqualTo(0);",
        "fixed_code": "assertThat(compute(seq(\"bcde\"), seq(\"abcde\"), 4, 4)).isZero();",
        "patch": "@@ -37,7 +37,7 @@ public void lengthOfMaximalBlock() {\n     assertThat(compute(seq(\"abcde\"), seq(\"abcde\"), 4, 4)).isEqualTo(5);\n \n     assertThat(compute(seq(\"abcde\"), seq(\"abcd\"), 4, 4)).isEqualTo(4);\n-    assertThat(compute(seq(\"bcde\"), seq(\"abcde\"), 4, 4)).isEqualTo(0);\n+    assertThat(compute(seq(\"bcde\"), seq(\"abcde\"), 4, 4)).isZero();\n     assertThat(compute(seq(\"bcde\"), seq(\"abcde\"), 3, 4)).isEqualTo(4);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(tracking.getUnmatchedBases()).hasSize(0);",
        "fixed_code": "assertThat(tracking.getUnmatchedBases()).isEmpty();",
        "patch": "@@ -444,7 +444,7 @@ public void match_issues_with_same_rule_key_on_project_level() {\n     Issue raw2 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");\n \n     Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n-    assertThat(tracking.getUnmatchedBases()).hasSize(0);\n+    assertThat(tracking.getUnmatchedBases()).isEmpty();\n     assertThat(tracking.baseFor(raw1)).isEqualTo(base2);\n     assertThat(tracking.baseFor(raw2)).isEqualTo(base1);\n   }"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(metadata.nonBlankLines()).isEqualTo(0);",
        "fixed_code": "assertThat(metadata.nonBlankLines()).isZero();",
        "patch": "@@ -64,7 +64,7 @@ public void empty_file() throws Exception {\n \n     Metadata metadata = new FileMetadata(analysisWarnings).readMetadata(new FileInputStream(tempFile), StandardCharsets.UTF_8, tempFile.getName());\n     assertThat(metadata.lines()).isEqualTo(1);\n-    assertThat(metadata.nonBlankLines()).isEqualTo(0);\n+    assertThat(metadata.nonBlankLines()).isZero();\n     assertThat(metadata.hash()).isNotEmpty();\n     assertThat(metadata.originalLineStartOffsets()).containsOnly(0);\n     assertThat(metadata.originalLineEndOffsets()).containsOnly(0);"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(limits[2]).isEqualTo(0);",
        "fixed_code": "assertThat(limits[2]).isZero();",
        "patch": "@@ -33,7 +33,7 @@ public void work_on_an_limits_array_copy() {\n \n     assertThat(limits[0]).isEqualTo(4);\n     assertThat(limits[1]).isEqualTo(2);\n-    assertThat(limits[2]).isEqualTo(0);\n+    assertThat(limits[2]).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(foo.compareTo(foo)).isEqualTo(0);",
        "fixed_code": "assertThat(foo).isEqualByComparingTo(foo);",
        "patch": "@@ -61,7 +61,7 @@ public void test_compare() {\n     TaskDefinition bar = TaskDefinition.builder().key(\"bar\").taskClass(FooTask.class).description(\"Bar\").build();\n \n     assertThat(foo.compareTo(bar)).isGreaterThan(0);\n-    assertThat(foo.compareTo(foo)).isEqualTo(0);\n+    assertThat(foo).isEqualByComparingTo(foo);\n     assertThat(bar.compareTo(foo)).isLessThan(0);\n   }\n "
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(DateUtils.dateToLong(null)).isEqualTo(null);",
        "fixed_code": "assertThat(DateUtils.dateToLong(null)).isNull();",
        "patch": "@@ -134,7 +134,7 @@ public void long_to_date() {\n   public void date_to_long() {\n     Date date = new Date();\n     assertThat(DateUtils.dateToLong(date)).isEqualTo(date.getTime());\n-    assertThat(DateUtils.dateToLong(null)).isEqualTo(null);\n+    assertThat(DateUtils.dateToLong(null)).isNull();\n   }\n \n   @DataProvider"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(out.size()).isEqualTo(0);",
        "fixed_code": "assertThat(out.size()).isZero();",
        "patch": "@@ -107,7 +107,7 @@ public void testNoStdout() throws UnsupportedEncodingException {\n     logger.error(TEST_STR);\n     logger.info(TEST_STR);\n     logger.debug(TEST_STR);\n-    assertThat(out.size()).isEqualTo(0);\n+    assertThat(out.size()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(server.getRequestCount()).isEqualTo(0);",
        "fixed_code": "assertThat(server.getRequestCount()).isZero();",
        "patch": "@@ -91,7 +91,7 @@ public void get_jar_from_cache_if_present() throws Exception {\n \n     verifySameContent(result, jar);\n     // no requests to server\n-    assertThat(server.getRequestCount()).isEqualTo(0);\n+    assertThat(server.getRequestCount()).isZero();\n   }\n \n   @Test"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(d.getDuplicate(0).getOtherFileRef()).isEqualTo(0);",
        "fixed_code": "assertThat(d.getDuplicate(0).getOtherFileRef()).isZero();",
        "patch": "@@ -275,7 +275,7 @@ private void assertDuplication(Duplication d, int originStartLine, int originEnd\n     if (otherFileRef != null) {\n       assertThat(d.getDuplicate(0).getOtherFileRef()).isEqualTo(otherFileRef);\n     } else {\n-      assertThat(d.getDuplicate(0).getOtherFileRef()).isEqualTo(0);\n+      assertThat(d.getDuplicate(0).getOtherFileRef()).isZero();\n     }\n     assertThat(d.getDuplicate(0).getRange().getStartLine()).isEqualTo(rangeStartLine);\n     assertThat(d.getDuplicate(0).getRange().getEndLine()).isEqualTo(rangeEndLine);"
    },
    {
        "commit_id": "ffcea568c79640227b2fd9c562f642b9d087ea10",
        "commit_message": "fix code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffcea568c79640227b2fd9c562f642b9d087ea10",
        "buggy_code": "assertThat(got.start().lineOffset()).isEqualTo(0);",
        "fixed_code": "assertThat(got.start().lineOffset()).isZero();",
        "patch": "@@ -132,7 +132,7 @@ public void import_issue_with_no_columns() {\n     assertThat(context.allExternalIssues()).hasSize(1);\n     TextRange got = context.allExternalIssues().iterator().next().primaryLocation().textRange();\n     assertThat(got.start().line()).isEqualTo(input.startLine);\n-    assertThat(got.start().lineOffset()).isEqualTo(0);\n+    assertThat(got.start().lineOffset()).isZero();\n     assertThat(got.end().line()).isEqualTo(input.startLine);\n     assertThat(got.end().lineOffset()).isEqualTo(sourceFile.selectLine(input.startLine).end().lineOffset());\n   }"
    },
    {
        "commit_id": "d4a6de2b1520c99bba1d4d97c70a904498baf43b",
        "commit_message": "Fix various code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4a6de2b1520c99bba1d4d97c70a904498baf43b",
        "buggy_code": "private void addProjectDeletionToBulkIndexer(BulkIndexer bulkIndexer, String projectUuid) {",
        "fixed_code": "private static void addProjectDeletionToBulkIndexer(BulkIndexer bulkIndexer, String projectUuid) {",
        "patch": "@@ -156,7 +156,7 @@ private void doIndexByProjectUuid(@Nullable String projectUuid, Size bulkSize) {\n     bulk.stop();\n   }\n \n-  private void addProjectDeletionToBulkIndexer(BulkIndexer bulkIndexer, String projectUuid) {\n+  private static void addProjectDeletionToBulkIndexer(BulkIndexer bulkIndexer, String projectUuid) {\n     SearchRequest searchRequest = EsClient.prepareSearch(TYPE_COMPONENT.getMainType())\n       .source(new SearchSourceBuilder().query(QueryBuilders.termQuery(ComponentIndexDefinition.FIELD_PROJECT_UUID, projectUuid)))\n       .routing(AuthorizationDoc.idOf(projectUuid));"
    },
    {
        "commit_id": "d4a6de2b1520c99bba1d4d97c70a904498baf43b",
        "commit_message": "Fix various code smells",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4a6de2b1520c99bba1d4d97c70a904498baf43b",
        "buggy_code": "private Optional<ZoneId> parseTimeZone(@Nullable String timeZone) {",
        "fixed_code": "private static Optional<ZoneId> parseTimeZone(@Nullable String timeZone) {",
        "patch": "@@ -148,7 +148,7 @@ public IssueQuery create(SearchRequest request) {\n     }\n   }\n \n-  private Optional<ZoneId> parseTimeZone(@Nullable String timeZone) {\n+  private static Optional<ZoneId> parseTimeZone(@Nullable String timeZone) {\n     if (timeZone == null) {\n       return Optional.empty();\n     }"
    },
    {
        "commit_id": "bebc9fdb1fed6713073517eb1fa9b003c7bd34ae",
        "commit_message": "Fix optional get without ifPresent check",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bebc9fdb1fed6713073517eb1fa9b003c7bd34ae",
        "buggy_code": "delegate.add(component, metric, batchMeasureToMeasure.toMeasure(batchMeasure, metric).get(), OverridePolicy.DO_NOT_OVERRIDE);",
        "fixed_code": "batchMeasureToMeasure.toMeasure(batchMeasure, metric).ifPresent(measure -> delegate.add(component, metric, measure, OverridePolicy.DO_NOT_OVERRIDE));",
        "patch": "@@ -113,7 +113,7 @@ private void loadBatchMeasuresForComponent(Component component) {\n         String metricKey = batchMeasure.getMetricKey();\n         if (reportMetricValidator.validate(metricKey)) {\n           Metric metric = metricRepository.getByKey(metricKey);\n-          delegate.add(component, metric, batchMeasureToMeasure.toMeasure(batchMeasure, metric).get(), OverridePolicy.DO_NOT_OVERRIDE);\n+          batchMeasureToMeasure.toMeasure(batchMeasure, metric).ifPresent(measure -> delegate.add(component, metric, measure, OverridePolicy.DO_NOT_OVERRIDE));\n         }\n       }\n     }"
    },
    {
        "commit_id": "296343a51973cf51be21c66964aad2dce7fe7f1e",
        "commit_message": "fix floating point equality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/296343a51973cf51be21c66964aad2dce7fe7f1e",
        "buggy_code": "if (reportIssue.getGap() != 0) {",
        "fixed_code": "if (Double.compare(reportIssue.getGap(), 0D) != 0) {",
        "patch": "@@ -180,7 +180,7 @@ private DefaultIssue toIssue(LineHashSequence lineHashSeq, ScannerReport.Issue r\n       if (reportIssue.getSeverity() != Severity.UNSET_SEVERITY) {\n         issue.setSeverity(reportIssue.getSeverity().name());\n       }\n-      if (reportIssue.getGap() != 0) {\n+      if (Double.compare(reportIssue.getGap(), 0D) != 0) {\n         issue.setGap(reportIssue.getGap());\n       }\n       DbIssues.Locations.Builder dbLocationsBuilder = DbIssues.Locations.newBuilder();"
    },
    {
        "commit_id": "296343a51973cf51be21c66964aad2dce7fe7f1e",
        "commit_message": "fix floating point equality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/296343a51973cf51be21c66964aad2dce7fe7f1e",
        "buggy_code": "return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto).create(value == 1.0d, data));",
        "fixed_code": "return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto).create(Double.compare(value, 1.0D) == 0, data));",
        "patch": "@@ -84,7 +84,7 @@ private static Optional<Measure> toBooleanMeasure(LiveMeasureDto measureDto, @Nu\n     if (value == null) {\n       return toNoValueMeasure(measureDto);\n     }\n-    return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto).create(value == 1.0d, data));\n+    return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto).create(Double.compare(value, 1.0D) == 0, data));\n   }\n \n   private static Optional<Measure> toStringMeasure(LiveMeasureDto measureDto, @Nullable String data) {"
    },
    {
        "commit_id": "296343a51973cf51be21c66964aad2dce7fe7f1e",
        "commit_message": "fix floating point equality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/296343a51973cf51be21c66964aad2dce7fe7f1e",
        "buggy_code": "this.isLowerBoundInclusive = lowerBound == 0;",
        "fixed_code": "this.isLowerBoundInclusive = Double.compare(lowerBound, 0D) == 0;",
        "patch": "@@ -98,7 +98,7 @@ private static class Bounds {\n     private Bounds(double lowerBound, double higherBound) {\n       this.lowerBound = lowerBound;\n       this.higherBound = higherBound;\n-      this.isLowerBoundInclusive = lowerBound == 0;\n+      this.isLowerBoundInclusive = Double.compare(lowerBound, 0D) == 0;\n     }\n \n     boolean match(double value) {"
    },
    {
        "commit_id": "296343a51973cf51be21c66964aad2dce7fe7f1e",
        "commit_message": "fix floating point equality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/296343a51973cf51be21c66964aad2dce7fe7f1e",
        "buggy_code": "return doubleValue == 1.0d ? \"true\" : \"false\";",
        "fixed_code": "return Double.compare(doubleValue, 1.0D) == 0 ? \"true\" : \"false\";",
        "patch": "@@ -88,7 +88,7 @@ private static String measureValue(CustomMeasureDto measure, MetricDto metric) {\n \n     switch (metricType) {\n       case BOOL:\n-        return doubleValue == 1.0d ? \"true\" : \"false\";\n+        return Double.compare(doubleValue, 1.0D) == 0 ? \"true\" : \"false\";\n       case INT:\n       case MILLISEC:\n         return String.valueOf((int) doubleValue);"
    },
    {
        "commit_id": "296343a51973cf51be21c66964aad2dce7fe7f1e",
        "commit_message": "fix floating point equality",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/296343a51973cf51be21c66964aad2dce7fe7f1e",
        "buggy_code": "return rawIssue.getGap() != 0 ? rawIssue.getGap() : null;",
        "fixed_code": "return Double.compare(rawIssue.getGap(), 0D) != 0 ? rawIssue.getGap() : null;",
        "patch": "@@ -82,7 +82,7 @@ public TextRange textRange() {\n \n   @Override\n   public Double gap() {\n-    return rawIssue.getGap() != 0 ? rawIssue.getGap() : null;\n+    return Double.compare(rawIssue.getGap(), 0D) != 0 ? rawIssue.getGap() : null;\n   }\n \n   @Override"
    },
    {
        "commit_id": "91c611fe568a94170adb174e63940db060932bb8",
        "commit_message": "fix assertions on incompatible types on overall code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91c611fe568a94170adb174e63940db060932bb8",
        "buggy_code": "assertThat(dto.getCreatedAt()).isEqualTo(dto.getUpdatedAt()).isNotNull();",
        "fixed_code": "assertThat(dto.getCreatedAt()).isEqualTo(dto.getUpdatedAt());",
        "patch": "@@ -665,7 +665,7 @@ private void verifyCeQueueDtoForTaskSubmit(CeTaskSubmit taskSubmit) {\n       assertThat(dto.getComponentUuid()).isNull();\n     }\n     assertThat(dto.getSubmitterUuid()).isEqualTo(taskSubmit.getSubmitterUuid());\n-    assertThat(dto.getCreatedAt()).isEqualTo(dto.getUpdatedAt()).isNotNull();\n+    assertThat(dto.getCreatedAt()).isEqualTo(dto.getUpdatedAt());\n   }\n \n   private ComponentDto newProjectDto(String uuid) {"
    },
    {
        "commit_id": "91c611fe568a94170adb174e63940db060932bb8",
        "commit_message": "fix assertions on incompatible types on overall code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91c611fe568a94170adb174e63940db060932bb8",
        "buggy_code": "assertThat(new Category(\"Licenses\")).isNotEqualTo(\"Licenses\");",
        "fixed_code": "assertThat(new Category(\"Licenses\").key()).isNotEqualTo(\"Licenses\");",
        "patch": "@@ -30,7 +30,7 @@ public void category_key_is_case_insentive() {\n     assertThat(new Category(\"Licenses\")).isEqualTo(new Category(\"licenses\"));\n \n     // Just to raise coverage\n-    assertThat(new Category(\"Licenses\")).isNotEqualTo(\"Licenses\");\n+    assertThat(new Category(\"Licenses\").key()).isNotEqualTo(\"Licenses\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "EsConnectorImpl esConnector = new EsConnectorImpl(esInstallation.getClusterName(), singleton(HostAndPort.fromParts(esInstallation.getHost(), esInstallation.getPort())));",
        "fixed_code": "EsConnectorImpl esConnector = new EsConnectorImpl(singleton(HostAndPort.fromParts(esInstallation.getHost(), esInstallation.getHttpPort())));",
        "patch": "@@ -97,7 +97,7 @@ public ManagedProcess launch(AbstractCommand command) {\n     try {\n       if (processId == ProcessId.ELASTICSEARCH) {\n         checkArgument(esInstallation != null, \"Incorrect configuration EsInstallation is null\");\n-        EsConnectorImpl esConnector = new EsConnectorImpl(esInstallation.getClusterName(), singleton(HostAndPort.fromParts(esInstallation.getHost(), esInstallation.getPort())));\n+        EsConnectorImpl esConnector = new EsConnectorImpl(singleton(HostAndPort.fromParts(esInstallation.getHost(), esInstallation.getHttpPort())));\n         return new EsManagedProcess(process, processId, esConnector);\n       } else {\n         ProcessCommands commands = allProcessesCommands.createAfterClean(processId.getIpcIndex());"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "private static NodeType toNodeType(Props props) {",
        "fixed_code": "public static NodeType toNodeType(Props props) {",
        "patch": "@@ -138,7 +138,7 @@ private AddressAndPort parseAndCheckHost(Property property, String value) {\n     return addressAndPort;\n   }\n \n-  private static NodeType toNodeType(Props props) {\n+  public static NodeType toNodeType(Props props) {\n     String nodeTypeValue = requireValue(props, CLUSTER_NODE_TYPE);\n     if (!NodeType.isValid(nodeTypeValue)) {\n       throw new MessageException(format(\"Invalid value for property %s: [%s], only [%s] are allowed\", CLUSTER_NODE_TYPE.getKey(), nodeTypeValue,"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "settings.set(CLUSTER_SEARCH_HOSTS.getKey(), \"localhost:9001\");",
        "fixed_code": "settings.set(CLUSTER_SEARCH_HOSTS.getKey(), \"localhost:9002\");",
        "patch": "@@ -51,7 +51,7 @@ public void create_cluster_implementation_if_cluster_is_enabled() {\n     settings.set(CLUSTER_NODE_HOST.getKey(), ip.get().getHostAddress());\n     settings.set(CLUSTER_HZ_HOSTS.getKey(), ip.get().getHostAddress());\n     settings.set(CLUSTER_NAME.getKey(), \"foo\");\n-    settings.set(CLUSTER_SEARCH_HOSTS.getKey(), \"localhost:9001\");\n+    settings.set(CLUSTER_SEARCH_HOSTS.getKey(), \"localhost:9002\");\n \n     AppState appState = underTest.create();\n     assertThat(appState).isInstanceOf(ClusterAppStateImpl.class);"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "import org.elasticsearch.search.aggregations.metrics.sum.Sum;",
        "fixed_code": "import org.elasticsearch.search.aggregations.metrics.Sum;",
        "patch": "@@ -38,7 +38,7 @@\n import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;\n import org.elasticsearch.search.aggregations.bucket.missing.Missing;\n import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n-import org.elasticsearch.search.aggregations.metrics.sum.Sum;\n+import org.elasticsearch.search.aggregations.metrics.Sum;\n \n import static org.sonar.api.utils.DateUtils.parseDateTime;\n import static org.sonarqube.ws.client.issue.IssuesWsParameters.FACET_MODE_EFFORT;"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "this.total = response.getHits().getTotalHits();",
        "fixed_code": "this.total = response.getHits().getTotalHits().value;",
        "patch": "@@ -36,7 +36,7 @@ public class SearchIdResult<ID> {\n \n   public SearchIdResult(SearchResponse response, Function<String, ID> converter, TimeZone timeZone) {\n     this.facets = new Facets(response, timeZone);\n-    this.total = response.getHits().getTotalHits();\n+    this.total = response.getHits().getTotalHits().value;\n     this.uuids = convertToIds(response.getHits(), converter);\n   }\n "
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "this.total = response.getHits().getTotalHits();",
        "fixed_code": "this.total = response.getHits().getTotalHits().value;",
        "patch": "@@ -34,7 +34,7 @@ public class SearchResult<DOC extends BaseDoc> {\n \n   public SearchResult(SearchResponse response, Function<Map<String, Object>, DOC> converter, TimeZone timeZone) {\n     this.facets = new Facets(response, timeZone);\n-    this.total = response.getHits().getTotalHits();\n+    this.total = response.getHits().getTotalHits().value;\n     this.docs = EsUtils.convertToDocs(response.getHits(), converter);\n   }\n "
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "import org.elasticsearch.search.aggregations.metrics.min.MinAggregationBuilder;",
        "fixed_code": "import org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;",
        "patch": "@@ -29,7 +29,7 @@\n import org.elasticsearch.search.aggregations.AggregationBuilders;\n import org.elasticsearch.search.aggregations.bucket.filter.FilterAggregationBuilder;\n import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n-import org.elasticsearch.search.aggregations.metrics.min.MinAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n import org.junit.Test;\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;"
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "Paging paging = forPageIndex(wsRequest.getPage()).withPageSize(wsRequest.getIndex()).andTotal((int) result.getHits().getTotalHits());",
        "fixed_code": "Paging paging = forPageIndex(wsRequest.getPage()).withPageSize(wsRequest.getIndex()).andTotal((int) result.getHits().getTotalHits().value);",
        "patch": "@@ -293,7 +293,7 @@ private SearchResponseData searchHotspots(WsRequest wsRequest, DbSession dbSessi\n \n     List<IssueDto> hotspots = toIssueDtos(dbSession, issueKeys);\n \n-    Paging paging = forPageIndex(wsRequest.getPage()).withPageSize(wsRequest.getIndex()).andTotal((int) result.getHits().getTotalHits());\n+    Paging paging = forPageIndex(wsRequest.getPage()).withPageSize(wsRequest.getIndex()).andTotal((int) result.getHits().getTotalHits().value);\n     return new SearchResponseData(paging, hotspots);\n   }\n "
    },
    {
        "commit_id": "f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "commit_message": "SONAR-12686 upgrade es client to 7.9.3 and move to HTTP\n\n- add should minimum match eq 1 to user index queries\nES 7.X changed behaviour in case filter query with bool it defaults to '0'\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/breaking-changes-7.0.html#_the_filter_context_has_been_removed\n\n- fix issue index routing param\nES 7.X helped discover this bug as new setting has been auto configured which is 'index.number_of_routing_shards'.\nThis has changed how documents are distributed across shards depending on how many shards the index has.\n\nWithout that change issues docs has been incorrectly routed to the same shard hash as projects and it worked no matter what routing key you used projectUuid or auth_projectUuid.\n\n- update ngram and edge_ngram names to match with es 7.x\nnGram and edgeNgram has been deprecated in favour of ngram and edge_ngram\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#deprecated-ngram-edgengram-token-filter-cannot-be-used\n\n- remove `_all : enabled` usage from UT\nThis field was already deprecated in 6.X, now it has been removed.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#all-meta-field-removed\n\n- add Elasticsearch High Level REST client dependency\n\n- use sonar.search.port for ES HTTP\n\n- main process use ES Rest client to check ES status\n\n- sonar.cluster.search.hosts has HTTP ports on APP nodes\nalso sonar.search.port and sonar.search.host MUST be configured on each Search node with the host and HTTP port of the current node\n\n- use Elasticsearch high level rest client\n\n- use in EsTester\n\n- use as primary es client\n\n- use indices api to get all indices name instead of cluster api\n\n- use cluster health api to check cluster state\n\n- support raw requests for 'nodes/_stats' and '_cluster/stats'\n\n- support raw requests for 'indices/_stats'\n\n- leave netty4plugin as testCompile dependency it is used in UTs\n\n- all ES non-test calls go through EsClient class\n\n- add rest client ES profiling",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4751bd13509f8d325d17cb4cf4ed9d85025f65f",
        "buggy_code": "Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits());",
        "fixed_code": "Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits().value);",
        "patch": "@@ -426,7 +426,7 @@ private SearchWsResponse doHandle(SearchRequest request) {\n     SearchResponseData data = searchResponseLoader.load(preloadedData, collector, additionalFields, facets);\n \n     // FIXME allow long in Paging\n-    Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits());\n+    Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits().value);\n     return searchResponseFormat.formatSearch(additionalFields, data, paging, facets);\n   }\n "
    },
    {
        "commit_id": "ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "commit_message": "SONAR-13936 Fix quality flaws after merge to master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "buggy_code": "WebService.NewAction action = context.createAction(ACTION)",
        "fixed_code": "context.createAction(ACTION)",
        "patch": "@@ -57,7 +57,7 @@ public SearchGlobalPermissionsAction(DbClient dbClient, UserSession userSession,\n \n   @Override\n   public void define(WebService.NewController context) {\n-    WebService.NewAction action = context.createAction(ACTION)\n+    context.createAction(ACTION)\n       .setDescription(\"List global permissions. <br />\" +\n         \"Requires the following permission: 'Administer System'\")\n       .setResponseExample(getClass().getResource(\"search_global_permissions-example.json\"))"
    },
    {
        "commit_id": "ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "commit_message": "SONAR-13936 Fix quality flaws after merge to master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "buggy_code": "CountPerProjectPermission row = (CountPerProjectPermission) context.getResultObject();",
        "fixed_code": "CountPerProjectPermission row = context.getResultObject();",
        "patch": "@@ -256,7 +256,7 @@ private Table<String, String, Integer> groupCountByRootComponentIdAndPermission(\n     final Table<String, String, Integer> userCountByRootComponentUuidAndPermission = TreeBasedTable.create();\n \n     dbClient.groupPermissionDao().groupsCountByComponentUuidAndPermission(dbSession, rootComponentUuids, context -> {\n-      CountPerProjectPermission row = (CountPerProjectPermission) context.getResultObject();\n+      CountPerProjectPermission row = context.getResultObject();\n       userCountByRootComponentUuidAndPermission.put(row.getComponentUuid(), row.getPermission(), row.getCount());\n     });\n "
    },
    {
        "commit_id": "ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "commit_message": "SONAR-13936 Fix quality flaws after merge to master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "buggy_code": "WebService.NewAction action = controller.createAction(\"app\")",
        "fixed_code": "controller.createAction(\"app\")",
        "patch": "@@ -44,7 +44,7 @@ public AppAction(Languages languages, DbClient dbClient, UserSession userSession\n \n   @Override\n   public void define(WebService.NewController controller) {\n-    WebService.NewAction action = controller.createAction(\"app\")\n+    controller.createAction(\"app\")\n       .setDescription(\"Get data required for rendering the page 'Coding Rules'.\")\n       .setResponseExample(getClass().getResource(\"app-example.json\"))\n       .setSince(\"4.5\")"
    },
    {
        "commit_id": "ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "commit_message": "SONAR-13936 Fix quality flaws after merge to master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "buggy_code": "void checkPermission(OrganizationDto organizationDto) {",
        "fixed_code": "void checkPermission() {",
        "patch": "@@ -47,7 +47,7 @@ void checkPermission(ProjectDto projectDto) {\n     userSession.checkProjectPermission(ADMIN, projectDto);\n   }\n \n-  void checkPermission(OrganizationDto organizationDto) {\n+  void checkPermission() {\n     userSession.checkPermission(ADMINISTER);\n   }\n "
    },
    {
        "commit_id": "ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "commit_message": "SONAR-13936 Fix quality flaws after merge to master",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb1cacdaf1695537ec59013c9fe8881914c66d9",
        "buggy_code": "private ChangelogAction underTest = new ChangelogAction(db.getDbClient(), issueFinder, userSession, issueChangeSupport);",
        "fixed_code": "private ChangelogAction underTest = new ChangelogAction(db.getDbClient(), issueFinder, issueChangeSupport);",
        "patch": "@@ -75,7 +75,7 @@ public class ChangelogActionTest {\n   private ComponentDto file;\n   private IssueFinder issueFinder = new IssueFinder(db.getDbClient(), userSession);\n   private IssueChangeWSSupport issueChangeSupport = new IssueChangeWSSupport(db.getDbClient(), new AvatarResolverImpl(), userSession);\n-  private ChangelogAction underTest = new ChangelogAction(db.getDbClient(), issueFinder, userSession, issueChangeSupport);\n+  private ChangelogAction underTest = new ChangelogAction(db.getDbClient(), issueFinder, issueChangeSupport);\n   private WsActionTester tester = new WsActionTester(underTest);\n \n   @Before"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "List<OrganizationPermission> getAllOrganizationPermissions();",
        "fixed_code": "List<OrganizationPermission> getGlobalPermissions();",
        "patch": "@@ -24,7 +24,7 @@\n \n public interface PermissionService {\n \n-  List<OrganizationPermission> getAllOrganizationPermissions();\n+  List<OrganizationPermission> getGlobalPermissions();\n   List<String> getAllProjectPermissions();\n \n }"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "public List<OrganizationPermission> getAllOrganizationPermissions() {",
        "fixed_code": "public List<OrganizationPermission> getGlobalPermissions() {",
        "patch": "@@ -55,7 +55,7 @@ public PermissionServiceImpl(ResourceTypes resourceTypes) {\n    * Return an immutable Set of all organization permissions\n    */\n   @Override\n-  public List<OrganizationPermission> getAllOrganizationPermissions() {\n+  public List<OrganizationPermission> getGlobalPermissions() {\n     return globalPermissions;\n   }\n "
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "assertThat(underTest.getAllOrganizationPermissions())",
        "fixed_code": "assertThat(underTest.getGlobalPermissions())",
        "patch": "@@ -32,7 +32,7 @@ public class PermissionServiceImplTest {\n \n   @Test\n   public void organizationPermissions_must_be_ordered() {\n-    assertThat(underTest.getAllOrganizationPermissions())\n+    assertThat(underTest.getGlobalPermissions())\n       .extracting(OrganizationPermission::getKey)\n       .containsExactly(\"admin\", \"gateadmin\", \"profileadmin\", \"provisioning\", \"scan\", \"applicationcreator\", \"portfoliocreator\");\n   }"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "return permissionService.getAllOrganizationPermissions().stream()",
        "fixed_code": "return permissionService.getGlobalPermissions().stream()",
        "patch": "@@ -133,7 +133,7 @@ private CurrentWsResponse toWsResponse(DbSession dbSession, String userLogin) {\n \n   private List<String> getGlobalPermissions() {\n     String defaultOrganizationUuid = defaultOrganizationProvider.get().getUuid();\n-    return permissionService.getAllOrganizationPermissions().stream()\n+    return permissionService.getGlobalPermissions().stream()\n       .filter(permission -> userSession.hasPermission(permission))\n       .map(OrganizationPermission::getKey)\n       .collect(toList());"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "public void fail_if_not_admin_of_default_organization() {",
        "fixed_code": "public void fail_if_not_admin() {",
        "patch": "@@ -158,7 +158,7 @@ public void fail_if_not_a_project_permission() {\n   }\n \n   @Test\n-  public void fail_if_not_admin_of_default_organization() {\n+  public void fail_if_not_admin() {\n     userSession.logIn();\n \n     expectedException.expect(ForbiddenException.class);"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "public void fail_if_not_admin_of_default_organization() {",
        "fixed_code": "public void fail_if_not_admin() {",
        "patch": "@@ -129,7 +129,7 @@ public void fail_if_permission_is_not_a_project_permission() {\n   }\n \n   @Test\n-  public void fail_if_not_admin_of_default_organization() {\n+  public void fail_if_not_admin() {\n     userSession.logIn().addPermission(ADMINISTER_QUALITY_GATES);\n \n     expectedException.expect(ForbiddenException.class);"
    },
    {
        "commit_id": "276abb42335b4609f922bbf7c289cc26bb98f302",
        "commit_message": "SONAR-13936 Remove use of organizations in Permissions WS and DB\n\n* SONAR-13936 Remove organization parameters from permissions WS\n\n* SONAR-13936 Remove organization_uuid column from user_roles table\n\n* SONAR-13936 Fix developer ITs\n\n* SONAR-13936 Remove organization_uuid column from group_roles table\n\n* SONAR-13936 Remove organization_uuid column from permission_templates table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/276abb42335b4609f922bbf7c289cc26bb98f302",
        "buggy_code": "PermissionTemplateTesting.newPermissionTemplateDto().setOrganizationUuid(db.getDefaultOrganization().getUuid()));",
        "fixed_code": "PermissionTemplateTesting.newPermissionTemplateDto());",
        "patch": "@@ -154,7 +154,7 @@ public void delete_group_from_permission_templates() {\n     insertDefaultGroup();\n     GroupDto group = db.users().insertGroup();\n     PermissionTemplateDto template = db.getDbClient().permissionTemplateDao().insert(db.getSession(),\n-      PermissionTemplateTesting.newPermissionTemplateDto().setOrganizationUuid(db.getDefaultOrganization().getUuid()));\n+      PermissionTemplateTesting.newPermissionTemplateDto());\n     db.getDbClient().permissionTemplateDao().insertGroupPermission(db.getSession(), template.getUuid(), group.getUuid(), \"perm\");\n     db.commit();\n     loginAsAdmin();"
    },
    {
        "commit_id": "4e2c7f4e37f3f1263a44a5e7fd612f553ec916ed",
        "commit_message": "SONAR-13770 Fix user group update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e2c7f4e37f3f1263a44a5e7fd612f553ec916ed",
        "buggy_code": ".setUuid(group.getUuid())",
        "fixed_code": ".setId(group.getUuid())",
        "patch": "@@ -147,7 +147,7 @@ void checkGroupIsNotDefault(DbSession dbSession, GroupDto groupDto) {\n \n   static UserGroups.Group.Builder toProtobuf(OrganizationDto organization, GroupDto group, int membersCount, boolean isDefault) {\n     UserGroups.Group.Builder wsGroup = UserGroups.Group.newBuilder()\n-      .setUuid(group.getUuid())\n+      .setId(group.getUuid())\n       .setOrganization(organization.getKey())\n       .setName(group.getName())\n       .setMembersCount(membersCount)"
    },
    {
        "commit_id": "4e2c7f4e37f3f1263a44a5e7fd612f553ec916ed",
        "commit_message": "SONAR-13770 Fix user group update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e2c7f4e37f3f1263a44a5e7fd612f553ec916ed",
        "buggy_code": ".setUuid(group.getUuid())",
        "fixed_code": ".setId(group.getUuid())",
        "patch": "@@ -141,7 +141,7 @@ private static SearchWsResponse buildResponse(List<GroupDto> groups, Map<String,\n \n   private static Group toWsGroup(GroupDto group, Integer memberCount, Set<String> fields, boolean isDefault) {\n     Group.Builder groupBuilder = Group.newBuilder()\n-      .setUuid(group.getUuid())\n+      .setId(group.getUuid())\n       .setDefault(isDefault);\n     if (fields.contains(FIELD_NAME)) {\n       groupBuilder.setName(group.getName());"
    },
    {
        "commit_id": "a59e6e96ad22300a795b4b6b5122da06b9623922",
        "commit_message": "Fix unstable unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a59e6e96ad22300a795b4b6b5122da06b9623922",
        "buggy_code": ".add(3650, \"Drop index on 'user_id', 'group_id' columns of 'ORGANIZATION_MEMBERS' table\", DropPrimaryKeyOnUserIdAndOrganizationUuidOfOrganizationMembersTable.class)",
        "fixed_code": ".add(3650, \"Drop primary key on 'user_id' column of 'ORGANIZATION_MEMBERS' table\", DropPrimaryKeyOnUserIdAndOrganizationUuidOfOrganizationMembersTable.class)",
        "patch": "@@ -694,7 +694,7 @@ public void addSteps(MigrationStepRegistry registry) {\n       .add(3647, \"Make 'user_uuid' not-null for 'ORGANIZATION_MEMBERS'\", MakeOrganizationMembersUserUuidColumnNotNullable.class)\n       .add(3648, \"Drop index on 'user_id' column of 'ORGANIZATION_MEMBERS' table\", DropIndexOnUserIdOfOrganizationMembersTable.class)\n       .add(3649, \"Add index on 'user_uuid' column of 'ORGANIZATION_MEMBERS' table\", AddIndexOnUserUuidOfOrganizationMembersTable.class)\n-      .add(3650, \"Drop index on 'user_id', 'group_id' columns of 'ORGANIZATION_MEMBERS' table\", DropPrimaryKeyOnUserIdAndOrganizationUuidOfOrganizationMembersTable.class)\n+      .add(3650, \"Drop primary key on 'user_id' column of 'ORGANIZATION_MEMBERS' table\", DropPrimaryKeyOnUserIdAndOrganizationUuidOfOrganizationMembersTable.class)\n       .add(3651, \"Add PK on 'user_uuid', 'organization_uuid' columns of 'ORGANIZATION_MEMBERS' table\", AddPrimaryKeyOnUserUuidAndOrganizationUuidColumnsOfUserRolesTable.class)\n       .add(3652, \"Drop column on 'user_id' column of 'ORGANIZATION_MEMBERS' table\", DropUserIdColumnOfOrganizationMembersTable.class)\n "
    },
    {
        "commit_id": "721de262d732560c98256e7935017f6d5dd142a3",
        "commit_message": "SONAR-13341 improved error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/721de262d732560c98256e7935017f6d5dd142a3",
        "buggy_code": "throw new IllegalArgumentException(\"Invalid URL\");",
        "fixed_code": "throw new IllegalArgumentException(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");",
        "patch": "@@ -60,7 +60,7 @@ void checkUrlPattern(String url, String message, Object... messageArguments) {\n       InetAddress address = InetAddress.getByName(okUrl.host());\n       if (configuration.getBoolean(SONAR_VALIDATE_WEBHOOKS.getKey()).orElse(true)\n         && (address.isLoopbackAddress() || address.isAnyLocalAddress())) {\n-        throw new IllegalArgumentException(\"Invalid URL\");\n+        throw new IllegalArgumentException(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");\n       }\n     } catch (UnknownHostException e) {\n       // if a host can not be resolved the deliveries will fail - no need to block it from being set"
    },
    {
        "commit_id": "721de262d732560c98256e7935017f6d5dd142a3",
        "commit_message": "SONAR-13341 improved error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/721de262d732560c98256e7935017f6d5dd142a3",
        "buggy_code": ".hasMessage(\"Invalid URL\");",
        "fixed_code": ".hasMessage(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");",
        "patch": "@@ -78,7 +78,7 @@ public void checkUrlPatternSuccessfulForValidAddress(String url) {\n   public void checkUrlPatternFailsForLoopbackAddress(String url) {\n     assertThatThrownBy(() -> underTest.checkUrlPattern(url, \"msg\"))\n       .isInstanceOf(IllegalArgumentException.class)\n-      .hasMessage(\"Invalid URL\");\n+      .hasMessage(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "commit_message": "SONAR-13461 fix SSF-112",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "buggy_code": "import ch.qos.logback.classic.encoder.PatternLayoutEncoder;",
        "fixed_code": "import org.sonar.process.logging.PatternLayoutEncoder;",
        "patch": "@@ -22,7 +22,6 @@\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n-import ch.qos.logback.classic.encoder.PatternLayoutEncoder;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.core.Appender;\n import ch.qos.logback.core.ConsoleAppender;\n@@ -40,6 +39,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.sonar.process.Props;\n import org.sonar.process.logging.LogbackHelper;\n+import org.sonar.process.logging.PatternLayoutEncoder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.slf4j.Logger.ROOT_LOGGER_NAME;"
    },
    {
        "commit_id": "9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "commit_message": "SONAR-13461 fix SSF-112",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "buggy_code": "import ch.qos.logback.classic.encoder.PatternLayoutEncoder;",
        "fixed_code": "import org.sonar.process.logging.PatternLayoutEncoder;",
        "patch": "@@ -22,7 +22,6 @@\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n-import ch.qos.logback.classic.encoder.PatternLayoutEncoder;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.core.ConsoleAppender;\n import ch.qos.logback.core.FileAppender;\n@@ -32,6 +31,7 @@\n import org.sonar.process.ProcessId;\n import org.sonar.process.logging.LogLevelConfig;\n import org.sonar.process.logging.LogbackHelper;\n+import org.sonar.process.logging.PatternLayoutEncoder;\n import org.sonar.process.logging.RootLoggerConfig;\n \n import static org.slf4j.Logger.ROOT_LOGGER_NAME;"
    },
    {
        "commit_id": "9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "commit_message": "SONAR-13461 fix SSF-112",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9112c817aaf6d3273888cc3ef82245f4fcda3b4b",
        "buggy_code": "import ch.qos.logback.classic.encoder.PatternLayoutEncoder;",
        "fixed_code": "import org.sonar.process.logging.PatternLayoutEncoder;",
        "patch": "@@ -22,7 +22,6 @@\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n-import ch.qos.logback.classic.encoder.PatternLayoutEncoder;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.core.Appender;\n import ch.qos.logback.core.ConsoleAppender;\n@@ -44,6 +43,7 @@\n import org.sonar.application.config.TestAppSettings;\n import org.sonar.process.logging.LogbackHelper;\n import org.sonar.process.logging.LogbackJsonLayout;\n+import org.sonar.process.logging.PatternLayoutEncoder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.slf4j.Logger.ROOT_LOGGER_NAME;"
    },
    {
        "commit_id": "db0776c59be1a09d9923ec62bc940798be432aef",
        "commit_message": "Fix oracle selects with case for issue sync progress",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db0776c59be1a09d9923ec62bc940798be432aef",
        "buggy_code": "return mapper(dbSession).hasAnyIssueSyncTaskPendingOrInProgress() > 0;",
        "fixed_code": "return mapper(dbSession).hasAnyIssueSyncTaskPendingOrInProgress();",
        "patch": "@@ -191,7 +191,7 @@ private Optional<CeQueueDto> tryToPeek(DbSession session, String eligibleTaskUui\n   }\n \n   public boolean hasAnyIssueSyncTaskPendingOrInProgress(DbSession dbSession) {\n-    return mapper(dbSession).hasAnyIssueSyncTaskPendingOrInProgress() > 0;\n+    return mapper(dbSession).hasAnyIssueSyncTaskPendingOrInProgress();\n   }\n \n   private static CeQueueMapper mapper(DbSession session) {"
    },
    {
        "commit_id": "db0776c59be1a09d9923ec62bc940798be432aef",
        "commit_message": "Fix oracle selects with case for issue sync progress",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db0776c59be1a09d9923ec62bc940798be432aef",
        "buggy_code": "short hasAnyIssueSyncTaskPendingOrInProgress();",
        "fixed_code": "boolean hasAnyIssueSyncTaskPendingOrInProgress();",
        "patch": "@@ -85,6 +85,6 @@ int updateIf(@Param(\"uuid\") String uuid,\n \n   int deleteByUuid(@Param(\"uuid\") String uuid, @Nullable @Param(\"deleteIf\") DeleteIf deleteIf);\n \n-  short hasAnyIssueSyncTaskPendingOrInProgress();\n+  boolean hasAnyIssueSyncTaskPendingOrInProgress();\n \n }"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "List<String> selectEligibleForPeek(@Param(\"pagination\") Pagination pagination);",
        "fixed_code": "List<String> selectEligibleForPeek(@Param(\"pagination\") Pagination pagination, @Param(\"excludeIndexationJob\") boolean excludeIndexationJob);",
        "patch": "@@ -36,7 +36,7 @@ public interface CeQueueMapper {\n \n   int countByQuery(@Param(\"query\") CeTaskQuery query);\n \n-  List<String> selectEligibleForPeek(@Param(\"pagination\") Pagination pagination);\n+  List<String> selectEligibleForPeek(@Param(\"pagination\") Pagination pagination, @Param(\"excludeIndexationJob\") boolean excludeIndexationJob);\n \n   @CheckForNull\n   CeQueueDto selectByUuid(@Param(\"uuid\") String uuid);"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -66,7 +66,7 @@ public class IssueIndexDebtTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n   private IssueIndex underTest = new IssueIndex(es.client(), system2, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));\n "
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -82,7 +82,7 @@ public class IssueIndexFacetsTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(es.client(), system2, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -78,7 +78,7 @@ public class IssueIndexFiltersTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private ViewIndexer viewIndexer = new ViewIndexer(db.getDbClient(), es.client());\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n "
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), null, new IssueIteratorFactory(null));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), null, new IssueIteratorFactory(null), null);",
        "patch": "@@ -57,7 +57,7 @@ public class IssueIndexProjectStatisticsTest {\n   @Rule\n   public UserSessionRule userSessionRule = UserSessionRule.standalone();\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), null, new IssueIteratorFactory(null));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), null, new IssueIteratorFactory(null), null);\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(es.client(), system2, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -73,7 +73,7 @@ public class IssueIndexSecurityHotspotsTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(es.client(), system2, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -71,7 +71,7 @@ public class IssueIndexSecurityReportsTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private ViewIndexer viewIndexer = new ViewIndexer(db.getDbClient(), es.client());\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n "
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -66,7 +66,7 @@ public class IssueIndexSortTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(es.client(), system2, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -84,7 +84,7 @@ public class IssueIndexTest {\n   @Rule\n   public DbTester db = DbTester.create(system2);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), db.getDbClient(), new IssueIteratorFactory(db.getDbClient()), null);\n   private RuleIndexer ruleIndexer = new RuleIndexer(es.client(), db.getDbClient());\n   private PermissionIndexerTester authorizationIndexer = new PermissionIndexerTester(es, issueIndexer);\n "
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -94,7 +94,7 @@ public class AddCommentActionTest {\n \n   private IssueDbTester issueDbTester = new IssueDbTester(dbTester);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private WebIssueStorage serverIssueStorage = new WebIssueStorage(system2, dbClient, new DefaultRuleFinder(dbClient, defaultOrganizationProvider), issueIndexer,\n     new SequenceUuidFactory());\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -86,7 +86,7 @@ public class AssignActionTest {\n   private NotificationManager notificationManager = mock(NotificationManager.class);\n \n   private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);\n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private OperationResponseWriter responseWriter = mock(OperationResponseWriter.class);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient)), new SequenceUuidFactory());",
        "fixed_code": "new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null), new SequenceUuidFactory());",
        "patch": "@@ -120,7 +120,7 @@ public class BulkChangeActionTest {\n   private IssueWorkflow issueWorkflow = new IssueWorkflow(new FunctionExecutor(issueFieldsSetter), issueFieldsSetter);\n   private WebIssueStorage issueStorage = new WebIssueStorage(system2, dbClient,\n     new DefaultRuleFinder(dbClient, TestDefaultOrganizationProvider.from(db)),\n-    new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient)), new SequenceUuidFactory());\n+    new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null), new SequenceUuidFactory());\n   private NotificationManager notificationManager = mock(NotificationManager.class);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -98,7 +98,7 @@ public class DoTransitionActionTest {\n   private IssueWorkflow workflow = new IssueWorkflow(new FunctionExecutor(updater), updater);\n   private TransitionService transitionService = new TransitionService(userSession, workflow);\n   private OperationResponseWriter responseWriter = mock(OperationResponseWriter.class);\n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();\n   private IssueUpdater issueUpdater = new IssueUpdater(dbClient,"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -86,7 +86,7 @@ public class IssueUpdaterTest {\n   private NotificationManager notificationManager = mock(NotificationManager.class);\n   private ArgumentCaptor<IssuesChangesNotification> notificationArgumentCaptor = ArgumentCaptor.forClass(IssuesChangesNotification.class);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();\n   private IssueUpdater underTest = new IssueUpdater(dbClient,"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -89,7 +89,7 @@ public class SetSeverityActionTest {\n   private OperationResponseWriter responseWriter = mock(OperationResponseWriter.class);\n   private ArgumentCaptor<SearchResponseData> preloadedSearchResponseDataCaptor = ArgumentCaptor.forClass(SearchResponseData.class);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();\n   private WsActionTester tester = new WsActionTester(new SetSeverityAction(userSession, dbClient, new IssueFinder(dbClient, userSession), new IssueFieldsSetter(),"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -88,7 +88,7 @@ public class SetTagsActionTest {\n   private DbClient dbClient = db.getDbClient();\n   private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);\n   private OperationResponseWriter responseWriter = mock(OperationResponseWriter.class);\n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private ArgumentCaptor<SearchResponseData> preloadedSearchResponseDataCaptor = ArgumentCaptor.forClass(SearchResponseData.class);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();"
    },
    {
        "commit_id": "e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "commit_message": "SONAR-13444 background tasks for issue indexation implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4b519ed129dbc7b76eab00d6c48166a8993e35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);",
        "patch": "@@ -102,7 +102,7 @@ public class SetTypeActionTest {\n   private OperationResponseWriter responseWriter = mock(OperationResponseWriter.class);\n   private ArgumentCaptor<SearchResponseData> preloadedSearchResponseDataCaptor = ArgumentCaptor.forClass(SearchResponseData.class);\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));\n+  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient), null);\n   private TestIssueChangePostProcessor issueChangePostProcessor = new TestIssueChangePostProcessor();\n   private IssuesChangesNotificationSerializer issuesChangesSerializer = new IssuesChangesNotificationSerializer();\n   private WsActionTester tester = new WsActionTester(new SetTypeAction(userSession, dbClient, new IssueFinder(dbClient, userSession), new IssueFieldsSetter(),"
    },
    {
        "commit_id": "ac3abae6429931aa5065b9f1ac359ff9a4ca78fd",
        "commit_message": "SONAR-13398 add ws api/ce/indexation_status to track progress of issue indexation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ac3abae6429931aa5065b9f1ac359ff9a4ca78fd",
        "buggy_code": "assertThat(container.size()).isEqualTo(18 + COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);",
        "fixed_code": "assertThat(container.size()).isEqualTo(19 + COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);",
        "patch": "@@ -31,6 +31,6 @@ public class CeWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new CeWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(18 + COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);\n+    assertThat(container.size()).isEqualTo(19 + COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);\n   }\n }"
    },
    {
        "commit_id": "8c7e9ded9ad3f8f9aca79558320f319d229c547c",
        "commit_message": "SONAR-13327 Fix SSF-107\n\n* SONAR-13327 Create 'SAML_MESSAGE_IDS' table and DAO\r\n* SONAR-13327 Check SAML Message id not already exist during auth\r\n* SONAR-13327 Clean expired SAML Message ids daily",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8c7e9ded9ad3f8f9aca79558320f319d229c547c",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 12);",
        "fixed_code": "assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);",
        "patch": "@@ -31,6 +31,6 @@ public class SamlModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new SamlModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 12);\n+    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);\n   }\n }"
    },
    {
        "commit_id": "8c7e9ded9ad3f8f9aca79558320f319d229c547c",
        "commit_message": "SONAR-13327 Fix SSF-107\n\n* SONAR-13327 Create 'SAML_MESSAGE_IDS' table and DAO\r\n* SONAR-13327 Check SAML Message id not already exist during auth\r\n* SONAR-13327 Clean expired SAML Message ids daily",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8c7e9ded9ad3f8f9aca79558320f319d229c547c",
        "buggy_code": "public interface SessionTokensCleanerExecutorService extends ScheduledExecutorService {",
        "fixed_code": "public interface ExpiredSessionsCleanerExecutorService extends ScheduledExecutorService {",
        "patch": "@@ -23,5 +23,5 @@\n import org.sonar.api.server.ServerSide;\n \n @ServerSide\n-public interface SessionTokensCleanerExecutorService extends ScheduledExecutorService {\n+public interface ExpiredSessionsCleanerExecutorService extends ScheduledExecutorService {\n }"
    },
    {
        "commit_id": "46a49f0b5ef205f5632b44dc07221eed79ec803d",
        "commit_message": "SONAR-13472 Fix SSF-113\n\n* SONAR-13472 Create 'SESSION_TOKENS' table\r\n* SONAR-13472 Remove 'SESSION_TOKENS' from user when disabling an user\r\n* SONAR-13472 Replace JwtSession expiration duration by a time\r\n* SONAR-13472 Create, update and delete SessionToken during authentication lifecycle\r\n* SONAR-13472 Purge expired session tokens at start-up and every day\r\n* SONAR-13472 Improve log during session tokens cleaning\r\n* Add example to start a Keycloak server already configured",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/46a49f0b5ef205f5632b44dc07221eed79ec803d",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 20);",
        "fixed_code": "assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);",
        "patch": "@@ -31,7 +31,7 @@ public class AuthenticationModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new AuthenticationModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 20);\n+    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);\n   }\n \n }"
    },
    {
        "commit_id": "46a49f0b5ef205f5632b44dc07221eed79ec803d",
        "commit_message": "SONAR-13472 Fix SSF-113\n\n* SONAR-13472 Create 'SESSION_TOKENS' table\r\n* SONAR-13472 Remove 'SESSION_TOKENS' from user when disabling an user\r\n* SONAR-13472 Replace JwtSession expiration duration by a time\r\n* SONAR-13472 Create, update and delete SessionToken during authentication lifecycle\r\n* SONAR-13472 Purge expired session tokens at start-up and every day\r\n* SONAR-13472 Improve log during session tokens cleaning\r\n* Add example to start a Keycloak server already configured",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/46a49f0b5ef205f5632b44dc07221eed79ec803d",
        "buggy_code": "String userLogin = token.isPresent() ? token.get().getUserDto().getLogin() : null;",
        "fixed_code": "String userLogin = token.map(value -> value.getUserDto().getLogin()).orElse(null);",
        "patch": "@@ -87,7 +87,7 @@ private void logout(HttpServletRequest request, HttpServletResponse response) {\n   private void generateAuthenticationEvent(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       Optional<JwtHttpHandler.Token> token = jwtHttpHandler.getToken(request, response);\n-      String userLogin = token.isPresent() ? token.get().getUserDto().getLogin() : null;\n+      String userLogin = token.map(value -> value.getUserDto().getLogin()).orElse(null);\n       authenticationEvent.logoutSuccess(request, userLogin);\n     } catch (AuthenticationException e) {\n       authenticationEvent.logoutFailure(request, e.getMessage());"
    },
    {
        "commit_id": "ffd176a905d758ebcbf120a60e7bec1a96cdd559",
        "commit_message": "SONAR-13221 Fix permission template tables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffd176a905d758ebcbf120a60e7bec1a96cdd559",
        "buggy_code": "requireNonNull(templatePermissionDto.getId());",
        "fixed_code": "requireNonNull(templatePermissionDto.getUuid());",
        "patch": "@@ -46,7 +46,7 @@ public PermissionTemplateCharacteristicDto insert(DbSession dbSession, Permissio\n   }\n \n   public PermissionTemplateCharacteristicDto update(DbSession dbSession, PermissionTemplateCharacteristicDto templatePermissionDto) {\n-    requireNonNull(templatePermissionDto.getId());\n+    requireNonNull(templatePermissionDto.getUuid());\n     mapper(dbSession).update(templatePermissionDto);\n     return templatePermissionDto;\n   }"
    },
    {
        "commit_id": "ffd176a905d758ebcbf120a60e7bec1a96cdd559",
        "commit_message": "SONAR-13221 Fix permission template tables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffd176a905d758ebcbf120a60e7bec1a96cdd559",
        "buggy_code": "PermissionTemplateCharacteristicDto selectById(@Param(\"id\") long id);",
        "fixed_code": "PermissionTemplateCharacteristicDto selectByUuid(@Param(\"uuid\") String uuid);",
        "patch": "@@ -24,7 +24,7 @@\n \n public interface PermissionTemplateCharacteristicMapper {\n \n-  PermissionTemplateCharacteristicDto selectById(@Param(\"id\") long id);\n+  PermissionTemplateCharacteristicDto selectByUuid(@Param(\"uuid\") String uuid);\n \n   List<PermissionTemplateCharacteristicDto> selectByTemplateIds(@Param(\"templateIds\") List<Long> templateId);\n "
    },
    {
        "commit_id": "719183146b22ffef5b26f4c77698b2d3e35385b5",
        "commit_message": "docs: Fix \"createdBefore\" param description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/719183146b22ffef5b26f4c77698b2d3e35385b5",
        "buggy_code": ".setDescription(\"To retrieve issues created before the given date (inclusive). <br>\" +",
        "fixed_code": ".setDescription(\"To retrieve issues created before the given date (exclusive). <br>\" +",
        "patch": "@@ -297,7 +297,7 @@ public void define(WebService.NewController controller) {\n         \"If this parameter is set, createdSince must not be set\")\n       .setExampleValue(\"2017-10-19 or 2017-10-19T13:00:00+0200\");\n     action.createParam(PARAM_CREATED_BEFORE)\n-      .setDescription(\"To retrieve issues created before the given date (inclusive). <br>\" +\n+      .setDescription(\"To retrieve issues created before the given date (exclusive). <br>\" +\n         \"Either a date (server timezone) or datetime can be provided.\")\n       .setExampleValue(\"2017-10-19 or 2017-10-19T13:00:00+0200\");\n     action.createParam(PARAM_CREATED_IN_LAST)"
    },
    {
        "commit_id": "d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "commit_message": "SONAR-13272 fix issue with setting some properties through env variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "buggy_code": "private PropertyDefinitions propertyDefinitions = new PropertyDefinitions();",
        "fixed_code": "private PropertyDefinitions propertyDefinitions = new PropertyDefinitions(System2.INSTANCE);",
        "patch": "@@ -85,7 +85,7 @@ public class ListDefinitionsActionTest {\n   private DbClient dbClient = db.getDbClient();\n   private ComponentDbTester componentDb = new ComponentDbTester(db);\n   private ComponentDto project;\n-  private PropertyDefinitions propertyDefinitions = new PropertyDefinitions();\n+  private PropertyDefinitions propertyDefinitions = new PropertyDefinitions(System2.INSTANCE);\n   private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);\n   private SettingsWsSupport support = new SettingsWsSupport(defaultOrganizationProvider, userSession);\n   private WsActionTester ws = new WsActionTester("
    },
    {
        "commit_id": "d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "commit_message": "SONAR-13272 fix issue with setting some properties through env variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "buggy_code": "private PropertyDefinitions definitions = new PropertyDefinitions();",
        "fixed_code": "private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);",
        "patch": "@@ -81,7 +81,7 @@ public class ResetActionTest {\n   private DbClient dbClient = db.getDbClient();\n   private DbSession dbSession = db.getSession();\n   private ComponentFinder componentFinder = TestComponentFinder.from(db);\n-  private PropertyDefinitions definitions = new PropertyDefinitions();\n+  private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);\n   private SettingsUpdater settingsUpdater = new SettingsUpdater(dbClient, definitions);\n   private SettingValidations settingValidations = new SettingValidations(definitions, dbClient, i18n);\n   private ComponentDto project;"
    },
    {
        "commit_id": "d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "commit_message": "SONAR-13272 fix issue with setting some properties through env variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "buggy_code": "private PropertyDefinitions definitions = new PropertyDefinitions();",
        "fixed_code": "private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);",
        "patch": "@@ -91,7 +91,7 @@ public class SetActionTest {\n   private ComponentFinder componentFinder = TestComponentFinder.from(db);\n \n   private I18nRule i18n = new I18nRule();\n-  private PropertyDefinitions definitions = new PropertyDefinitions();\n+  private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);\n   private FakeSettingsNotifier settingsChangeNotifier = new FakeSettingsNotifier(dbClient);\n   private SettingsUpdater settingsUpdater = new SettingsUpdater(dbClient, definitions);\n   private SettingValidations validations = new SettingValidations(definitions, dbClient, i18n);"
    },
    {
        "commit_id": "d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "commit_message": "SONAR-13272 fix issue with setting some properties through env variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "buggy_code": "PropertyDefinitions definitions = new PropertyDefinitions();",
        "fixed_code": "PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);",
        "patch": "@@ -59,7 +59,7 @@ public class SettingsUpdaterTest {\n   PropertyDbTester propertyDb = new PropertyDbTester(db);\n   ComponentDbTester componentDb = new ComponentDbTester(db);\n \n-  PropertyDefinitions definitions = new PropertyDefinitions();\n+  PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);\n   ComponentDto project;\n \n   SettingsUpdater underTest= new SettingsUpdater(dbClient, definitions);"
    },
    {
        "commit_id": "d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "commit_message": "SONAR-13272 fix issue with setting some properties through env variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d662d0c0269e1a12da0c3ecdb8f9d33b765ccdcc",
        "buggy_code": "private PropertyDefinitions definitions = new PropertyDefinitions();",
        "fixed_code": "private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);",
        "patch": "@@ -89,7 +89,7 @@ public class ValuesActionTest {\n   private DbClient dbClient = db.getDbClient();\n   private PropertyDbTester propertyDb = new PropertyDbTester(db);\n   private ComponentDbTester componentDb = new ComponentDbTester(db);\n-  private PropertyDefinitions definitions = new PropertyDefinitions();\n+  private PropertyDefinitions definitions = new PropertyDefinitions(System2.INSTANCE);\n   private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);\n   private SettingsWsSupport support = new SettingsWsSupport(defaultOrganizationProvider, userSession);\n   private ComponentDto project;"
    },
    {
        "commit_id": "d57aeee822d83a3b5fe22229e9865af52ae71ea3",
        "commit_message": "SONAR-13117 Fix SSF-103",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d57aeee822d83a3b5fe22229e9865af52ae71ea3",
        "buggy_code": "userSession.checkComponentPermission(UserRole.USER, project);",
        "fixed_code": "userSession.checkComponentPermission(UserRole.CODEVIEWER, project);",
        "patch": "@@ -89,7 +89,7 @@ public void handle(Request request, Response response) throws Exception {\n         .orElseThrow(() -> new NotFoundException(format(\"Issue with key '%s' does not exist\", issueKey)));\n       ComponentDto project = dbClient.componentDao().selectByUuid(dbSession, issueDto.getProjectUuid())\n         .orElseThrow(() -> new NotFoundException(format(\"Project with uuid '%s' does not exist\", issueDto.getProjectUuid())));\n-      userSession.checkComponentPermission(UserRole.USER, project);\n+      userSession.checkComponentPermission(UserRole.CODEVIEWER, project);\n \n       DbIssues.Locations locations = issueDto.parseLocations();\n       String componentUuid = issueDto.getComponentUuid();"
    },
    {
        "commit_id": "5cb5deb5e5f41648120e8757104c0fd412483e26",
        "commit_message": "SONAR-12802 SONAR-12927 Fix moved file detection for cobol and when calculating new lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cb5deb5e5f41648120e8757104c0fd412483e26",
        "buggy_code": "return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());",
        "fixed_code": "return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));",
        "patch": "@@ -39,7 +39,7 @@ public ClosedIssuesInputFactory(ComponentIssuesLoader issuesLoader, DbClient dbC\n   }\n \n   public Input<DefaultIssue> create(Component component) {\n-    return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());\n+    return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));\n   }\n \n   private class ClosedIssuesLazyInput extends BaseLazyInput {"
    },
    {
        "commit_id": "5cb5deb5e5f41648120e8757104c0fd412483e26",
        "commit_message": "SONAR-12802 SONAR-12927 Fix moved file detection for cobol and when calculating new lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cb5deb5e5f41648120e8757104c0fd412483e26",
        "buggy_code": "import com.google.common.base.Optional;",
        "fixed_code": "import java.util.Optional;",
        "patch": "@@ -19,8 +19,8 @@\n  */\n package org.sonar.ce.task.projectanalysis.issue;\n \n-import com.google.common.base.Optional;\n import java.util.Date;\n+import java.util.Optional;\n import org.sonar.ce.task.projectanalysis.component.Component;\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.IssueChangeContext;"
    },
    {
        "commit_id": "5cb5deb5e5f41648120e8757104c0fd412483e26",
        "commit_message": "SONAR-12802 SONAR-12927 Fix moved file detection for cobol and when calculating new lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cb5deb5e5f41648120e8757104c0fd412483e26",
        "buggy_code": "import com.google.common.base.Optional;",
        "fixed_code": "import java.util.Optional;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.ce.task.projectanalysis.issue;\n \n-import com.google.common.base.Optional;\n+import java.util.Optional;\n import org.sonar.ce.task.projectanalysis.component.Component;\n import org.sonar.ce.task.projectanalysis.filemove.MovedFilesRepository;\n "
    },
    {
        "commit_id": "5cb5deb5e5f41648120e8757104c0fd412483e26",
        "commit_message": "SONAR-12802 SONAR-12927 Fix moved file detection for cobol and when calculating new lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cb5deb5e5f41648120e8757104c0fd412483e26",
        "buggy_code": "return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());",
        "fixed_code": "return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));",
        "patch": "@@ -63,7 +63,7 @@ public Input<DefaultIssue> create(Component component) {\n       // Folders have no issues\n       return new EmptyTrackerBaseLazyInput(dbClient, component);\n     }\n-    return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());\n+    return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));\n   }\n \n   private class FileTrackerBaseLazyInput extends BaseLazyInput {"
    },
    {
        "commit_id": "5cb5deb5e5f41648120e8757104c0fd412483e26",
        "commit_message": "SONAR-12802 SONAR-12927 Fix moved file detection for cobol and when calculating new lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cb5deb5e5f41648120e8757104c0fd412483e26",
        "buggy_code": "import com.google.common.base.Optional;",
        "fixed_code": "import java.util.Optional;",
        "patch": "@@ -19,8 +19,8 @@\n  */\n package org.sonar.ce.task.projectanalysis.filemove;\n \n-import com.google.common.base.Optional;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import javax.annotation.CheckForNull;\n import org.junit.rules.ExternalResource;"
    },
    {
        "commit_id": "cab124f7448c71702fb2ff455ca5528ac9bcffcc",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cab124f7448c71702fb2ff455ca5528ac9bcffcc",
        "buggy_code": "private RuleDoc ruleDocOf(RuleForIndexingDto dto) {",
        "fixed_code": "private static RuleDoc ruleDocOf(RuleForIndexingDto dto) {",
        "patch": "@@ -197,7 +197,7 @@ private Optional<IndexingResult> doIndexRuleExtensions(DbSession dbSession, List\n     return Optional.of(bulkIndexer.stop());\n   }\n \n-  private RuleDoc ruleDocOf(RuleForIndexingDto dto) {\n+  private static RuleDoc ruleDocOf(RuleForIndexingDto dto) {\n     SecurityStandards securityStandards = SecurityStandards.fromSecurityStandards(dto.getSecurityStandards());\n     if (!securityStandards.getIgnoredSQCategories().isEmpty()) {\n       LOG.warn("
    },
    {
        "commit_id": "26604f21a73191ad70cfe85076644268039a771a",
        "commit_message": "SONAR-12723 text fixtures enforce split of issue from secu hotspot",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26604f21a73191ad70cfe85076644268039a771a",
        "buggy_code": "return issueDbTester.insertIssue(newDto(rule, file, project));",
        "fixed_code": "return issueDbTester.insert(newDto(rule, file, project));",
        "patch": "@@ -92,7 +92,7 @@ private IssueDto insertIssue() {\n     RuleDto rule = ruleDbTester.insertRule(newRuleDto());\n     ComponentDto project = componentDbTester.insertPrivateProject();\n     ComponentDto file = componentDbTester.insertComponent(newFileDto(project));\n-    return issueDbTester.insertIssue(newDto(rule, file, project));\n+    return issueDbTester.insert(newDto(rule, file, project));\n   }\n \n   private void addProjectPermission(IssueDto issueDto, String permission) {"
    },
    {
        "commit_id": "26604f21a73191ad70cfe85076644268039a771a",
        "commit_message": "SONAR-12723 text fixtures enforce split of issue from secu hotspot",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26604f21a73191ad70cfe85076644268039a771a",
        "buggy_code": "IssueDto issueDto = issueDbTester.insertIssue(newIssue().setType(SECURITY_HOTSPOT));",
        "fixed_code": "IssueDto issueDto = issueDbTester.insertHotspot();",
        "patch": "@@ -192,7 +192,7 @@ public void fail_type_except_hotspot_when_missing_administer_issue_permission(Ru\n   public void fail_if_trying_to_change_type_of_a_hotspot(RuleType type) {\n     long now = 1_999_777_234L;\n     when(system2.now()).thenReturn(now);\n-    IssueDto issueDto = issueDbTester.insertIssue(newIssue().setType(SECURITY_HOTSPOT));\n+    IssueDto issueDto = issueDbTester.insertHotspot();\n     setUserWithBrowseAndAdministerIssuePermission(issueDto);\n \n     expectedException.expect(IllegalArgumentException.class);"
    },
    {
        "commit_id": "ec1f6fbe740e121bbf14d4138663e353144d54a2",
        "commit_message": "SONAR-12745 Adjust `changes on my issue` email notification for Security Hotspots",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec1f6fbe740e121bbf14d4138663e353144d54a2",
        "buggy_code": ".map(t -> new IssuesChangesNotificationBuilder.Rule(ruleKey, t.getName()))",
        "fixed_code": ".map(t -> new IssuesChangesNotificationBuilder.Rule(ruleKey, t.getType(), t.getName()))",
        "patch": "@@ -111,7 +111,7 @@ public User getAssignee(@Nullable String assigneeUuid, Map<String, UserDto> assi\n \n   private IssuesChangesNotificationBuilder.Rule getRuleByRuleKey(RuleKey ruleKey) {\n     return ruleRepository.findByKey(ruleKey)\n-      .map(t -> new IssuesChangesNotificationBuilder.Rule(ruleKey, t.getName()))\n+      .map(t -> new IssuesChangesNotificationBuilder.Rule(ruleKey, t.getType(), t.getName()))\n       .orElseThrow(() -> new IllegalStateException(\"Can not find rule \" + ruleKey + \" in RuleRepository\"));\n   }\n "
    },
    {
        "commit_id": "ec1f6fbe740e121bbf14d4138663e353144d54a2",
        "commit_message": "SONAR-12745 Adjust `changes on my issue` email notification for Security Hotspots",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec1f6fbe740e121bbf14d4138663e353144d54a2",
        "buggy_code": ".setRule(new IssuesChangesNotificationBuilder.Rule(ruleDefinitionDto.getKey(), ruleDefinitionDto.getName()))",
        "fixed_code": ".setRule(new IssuesChangesNotificationBuilder.Rule(ruleDefinitionDto.getKey(), RuleType.valueOfNullable(ruleDefinitionDto.getType()), ruleDefinitionDto.getName()))",
        "patch": "@@ -306,7 +306,7 @@ private ChangedIssue toNotification(BulkChangeData bulkChangeData, Map<String, U\n       .setNewStatus(issue.status())\n       .setNewResolution(issue.resolution())\n       .setAssignee(assignee.map(u -> new User(u.getUuid(), u.getLogin(), u.getName())).orElse(null))\n-      .setRule(new IssuesChangesNotificationBuilder.Rule(ruleDefinitionDto.getKey(), ruleDefinitionDto.getName()))\n+      .setRule(new IssuesChangesNotificationBuilder.Rule(ruleDefinitionDto.getKey(), RuleType.valueOfNullable(ruleDefinitionDto.getType()), ruleDefinitionDto.getName()))\n       .setProject(new Project.Builder(projectDto.uuid())\n         .setKey(projectDto.getKey())\n         .setProjectName(projectDto.name())"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "checks.addAnnotatedChecks((Object[]) Check.ALL);",
        "fixed_code": "checks.addAnnotatedChecks(Check.ALL);",
        "patch": "@@ -50,7 +50,7 @@ public void describe(SensorDescriptor descriptor) {\n   @Override\n   public void execute(SensorContext context) {\n     Checks<Check> checks = checkFactory.create(XooRulesDefinition.XOO_REPOSITORY);\n-    checks.addAnnotatedChecks((Object[]) Check.ALL);\n+    checks.addAnnotatedChecks(Check.ALL);\n     FilePredicates p = context.fileSystem().predicates();\n     for (InputFile file : context.fileSystem().inputFiles(p.and(p.hasLanguages(Xoo.KEY), p.hasType(Type.MAIN)))) {\n       for (Check check : checks.all()) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "CONFIG_LIST[0] = new AppConfigurationEntry(loginModule, flag, new HashMap<String, Object>());",
        "fixed_code": "CONFIG_LIST[0] = new AppConfigurationEntry(loginModule, flag, new HashMap<>());",
        "patch": "@@ -32,7 +32,7 @@ public class Krb5LoginConfiguration extends Configuration {\n   static {\n     String loginModule = \"com.sun.security.auth.module.Krb5LoginModule\";\n     AppConfigurationEntry.LoginModuleControlFlag flag = AppConfigurationEntry.LoginModuleControlFlag.REQUIRED;\n-    CONFIG_LIST[0] = new AppConfigurationEntry(loginModule, flag, new HashMap<String, Object>());\n+    CONFIG_LIST[0] = new AppConfigurationEntry(loginModule, flag, new HashMap<>());\n   }\n \n   /**"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "when(context.getAttributes(Mockito.anyString(), Mockito.<String[]>anyObject())).thenReturn(attributes);",
        "fixed_code": "when(context.getAttributes(Mockito.anyString(), Mockito.anyObject())).thenReturn(attributes);",
        "patch": "@@ -73,7 +73,7 @@ public void testGetLdapServer() throws NamingException {\n     Attribute attribute = mock(Attribute.class);\n     NamingEnumeration namingEnumeration = mock(NamingEnumeration.class);\n \n-    when(context.getAttributes(Mockito.anyString(), Mockito.<String[]>anyObject())).thenReturn(attributes);\n+    when(context.getAttributes(Mockito.anyString(), Mockito.anyObject())).thenReturn(attributes);\n     when(attributes.get(Mockito.eq(\"srv\"))).thenReturn(attribute);\n     when(attribute.getAll()).thenReturn(namingEnumeration);\n     when(namingEnumeration.hasMore()).thenReturn(true, true, true, true, true, false);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void defaults() throws Exception {",
        "fixed_code": "public void defaults() {",
        "patch": "@@ -44,7 +44,7 @@ public class LdapGroupsProviderTest {\n   public static LdapServer infosupportServer = new LdapServer(USERS_INFOSUPPORT_COM_LDIF, \"infosupport.com\", \"dc=infosupport,dc=com\");\n \n   @Test\n-  public void defaults() throws Exception {\n+  public void defaults() {\n     MapSettings settings = LdapSettingsFactory.generateSimpleAnonymousAccessSettings(exampleServer, null);\n \n     LdapSettingsManager settingsManager = new LdapSettingsManager(settings, new LdapAutodiscovery());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void test() throws Exception {",
        "fixed_code": "public void test() {",
        "patch": "@@ -43,7 +43,7 @@ public class LdapUsersProviderTest {\n   public static LdapServer infosupportServer = new LdapServer(USERS_INFOSUPPORT_COM_LDIF, \"infosupport.com\", \"dc=infosupport,dc=com\");\n \n   @Test\n-  public void test() throws Exception {\n+  public void test() {\n     Settings settings = LdapSettingsFactory.generateSimpleAnonymousAccessSettings(exampleServer, infosupportServer);\n     LdapSettingsManager settingsManager = new LdapSettingsManager(settings, new LdapAutodiscovery());\n     LdapUsersProvider usersProvider = new LdapUsersProvider(settingsManager.getContextFactories(), settingsManager.getUserMappings());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());",
        "fixed_code": "throw new IllegalStateException(\"Unknown change type: \" + c.getChangeType());",
        "patch": "@@ -196,7 +196,7 @@ private static void addChangeOrComment(DefaultIssue i, IssueChangeDto c) {\n         i.addComment(c.toComment());\n         break;\n       default:\n-        throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());\n+        throw new IllegalStateException(\"Unknown change type: \" + c.getChangeType());\n     }\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".create(value.doubleValue(), org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));",
        "fixed_code": ".create(value, org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));",
        "patch": "@@ -77,7 +77,7 @@ private static Optional<Measure> toDoubleMeasure(LiveMeasureDto measureDto, @Nul\n     }\n \n     return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto)\n-      .create(value.doubleValue(), org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));\n+      .create(value, org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));\n   }\n \n   private static Optional<Measure> toBooleanMeasure(LiveMeasureDto measureDto, @Nullable Double value, @Nullable String data) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return createInternal(ValueType.INT, (double) value, data);",
        "fixed_code": "return createInternal(ValueType.INT, value, data);",
        "patch": "@@ -458,7 +458,7 @@ public Measure create(boolean value) {\n     }\n \n     public Measure create(int value, @Nullable String data) {\n-      return createInternal(ValueType.INT, (double) value, data);\n+      return createInternal(ValueType.INT, value, data);\n     }\n \n     public Measure create(int value) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".create(value.doubleValue(), org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));",
        "fixed_code": ".create(value, org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));",
        "patch": "@@ -77,7 +77,7 @@ private static Optional<Measure> toDoubleMeasure(MeasureDto measureDto, @Nullabl\n     }\n \n     return of(setCommonProperties(Measure.newMeasureBuilder(), measureDto)\n-      .create(value.doubleValue(), org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));\n+      .create(value, org.sonar.api.measures.Metric.MAX_DECIMAL_SCALE, data));\n   }\n \n   private static Optional<Measure> toBooleanMeasure(MeasureDto measureDto, @Nullable Double value, String data) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -109,7 +109,7 @@ public class PostProjectAnalysisTasksExecutorTest {\n     new PostProjectAnalysisTask[] {postProjectAnalysisTask});\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     qualityGateHolder.setQualityGate(new QualityGate(QUALITY_GATE_ID, QUALITY_GATE_NAME, of(CONDITION_1, CONDITION_2)));\n     qualityGateStatusHolder.setStatus(QualityGateStatus.OK, ImmutableMap.of(\n       CONDITION_1, ConditionStatus.create(ConditionStatus.EvaluationStatus.OK, \"value\"),"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -53,7 +53,7 @@ public class SumFormulaExecutionTest {\n   FormulaExecutorComponentVisitor underTest;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     underTest = FormulaExecutorComponentVisitor.newBuilder(metricRepository, measureRepository)\n       .buildFor(Lists.newArrayList(createIntSumFormula(LINES_KEY)));\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -57,7 +57,7 @@ public class IssuesRepositoryVisitorTest {\n   IssuesRepositoryVisitor underTest = new IssuesRepositoryVisitor(componentIssuesRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(PROJECT);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -60,7 +60,7 @@ public class MovedIssueVisitorTest {\n   private MovedIssueVisitor underTest = new MovedIssueVisitor(analysisMetadataHolder, movedFilesRepository, new IssueFieldsSetter());\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     analysisMetadataHolder.setAnalysisDate(ANALYSIS_DATE);\n     when(movedFilesRepository.getOriginalFile(any(Component.class)))\n       .thenReturn(Optional.absent());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -66,7 +66,7 @@ public class PullRequestTrackerExecutionTest {\n   private List<DefaultIssue> baseIssues = new ArrayList<>();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(rawFactory.create(FILE)).thenReturn(createInput(rawIssues));\n     when(baseFactory.create(FILE)).thenReturn(createInput(baseIssues));\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -81,7 +81,7 @@ public class RuleRepositoryImplTest {\n   private RuleRepositoryImpl underTest = new RuleRepositoryImpl(adHocRuleCreator, dbClient, analysisMetadataHolder);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.openSession(anyBoolean())).thenReturn(dbSession);\n     when(dbClient.ruleDao()).thenReturn(ruleDao);\n     when(ruleDao.selectAll(any(DbSession.class), eq(ORGANIZATION_UUID))).thenReturn(ImmutableList.of(AB_RULE));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "rulesById.put(requireNonNull(rule.getId()), rule);",
        "fixed_code": "rulesById.put(rule.getId(), rule);",
        "patch": "@@ -81,7 +81,7 @@ public DumbRule add(RuleKey key) {\n \n   public RuleRepositoryRule add(DumbRule rule) {\n     rulesByKey.put(requireNonNull(rule.getKey()), rule);\n-    rulesById.put(requireNonNull(rule.getId()), rule);\n+    rulesById.put(rule.getId(), rule);\n     return this;\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -61,7 +61,7 @@ public class TrackerBaseInputFactoryTest {\n     new IssueFieldsSetter(), mock(ComponentsWithUnprocessedIssues.class));\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.openSession(false)).thenReturn(dbSession);\n     when(dbClient.fileSourceDao()).thenReturn(fileSourceDao);\n     when(movedFilesRepository.getOriginalFile(any(Component.class)))"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -60,7 +60,7 @@ public class QualityGateServiceImplTest {\n   private QualityGateServiceImpl underTest = new QualityGateServiceImpl(dbClient, metricRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.qualityGateDao()).thenReturn(qualityGateDao);\n     when(dbClient.gateConditionDao()).thenReturn(qualityGateConditionDao);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -92,7 +92,7 @@ public class NewMaintainabilityMeasuresVisitorTest {\n   private VisitorsCrawler underTest;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(ratingSettings.getDebtRatingGrid()).thenReturn(new DebtRatingGrid(RATING_GRID));\n     underTest = new VisitorsCrawler(Arrays.asList(new NewMaintainabilityMeasuresVisitor(metricRepository, measureRepository, newLinesRepository, ratingSettings)));\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "scmInfoByFileRef.put(fileRef, new ScmInfoImpl(changesets.values().stream().toArray(Changeset[]::new)));",
        "fixed_code": "scmInfoByFileRef.put(fileRef, new ScmInfoImpl(changesets.values().toArray(new Changeset[0])));",
        "patch": "@@ -49,7 +49,7 @@ public ScmInfoRepositoryRule setScmInfo(int fileRef, Changeset... changesetList)\n   }\n \n   public ScmInfoRepositoryRule setScmInfo(int fileRef, Map<Integer, Changeset> changesets) {\n-    scmInfoByFileRef.put(fileRef, new ScmInfoImpl(changesets.values().stream().toArray(Changeset[]::new)));\n+    scmInfoByFileRef.put(fileRef, new ScmInfoImpl(changesets.values().toArray(new Changeset[0])));\n     return this;\n   }\n }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -62,7 +62,7 @@ public class SourceLinesDiffImplTest {\n   };\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.openSession(false)).thenReturn(dbSession);\n     when(dbClient.componentDao()).thenReturn(componentDao);\n     when(dbClient.fileSourceDao()).thenReturn(fileSourceDao);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "InOrder inOrder = Mockito.inOrder((Object[]) dataChanges);",
        "fixed_code": "InOrder inOrder = Mockito.inOrder(dataChanges);",
        "patch": "@@ -52,7 +52,7 @@ public void execute_calls_execute_on_DataChange_instances_in_order_provided_by_P\n     ProjectAnalysisDataChange[] dataChanges = IntStream.range(0, 5 + new Random().nextInt(5))\n       .mapToObj(i -> mock(ProjectAnalysisDataChange.class))\n       .toArray(ProjectAnalysisDataChange[]::new);\n-    InOrder inOrder = Mockito.inOrder((Object[]) dataChanges);\n+    InOrder inOrder = Mockito.inOrder(dataChanges);\n     when(projectAnalysisDataChanges.getDataChanges()).thenReturn(Arrays.asList(dataChanges));\n \n     underTest.execute(new TestComputationStepContext());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public class Counter {",
        "fixed_code": "public static class Counter {",
        "patch": "@@ -207,7 +207,7 @@ private void increaseParentValue(Path<Counter> path) {\n     }\n   }\n \n-  public class Counter {\n+  public static class Counter {\n     private int value = 0;\n \n     public void add(int value) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -103,7 +103,7 @@ public class LoadCrossProjectDuplicationsRepositoryStepTest {\n     integrateCrossProjectDuplications, dbClient);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     ComponentDto project = ComponentTesting.newPrivateProjectDto(dbTester.organizations().insert());\n     dbClient.componentDao().insert(dbSession, project);\n     SnapshotDto projectSnapshot = SnapshotTesting.newAnalysis(project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -101,7 +101,7 @@ protected ComputationStep step() {\n   }\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     organization = dbTester.organizations().insert();\n     project = dbTester.components().insertMainBranch(organization);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -84,7 +84,7 @@ public class PersistCrossProjectDuplicationIndexStepTest {\n   private ComputationStep underTest;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(baseAnalysis.getUuid()).thenReturn(BASE_ANALYSIS_UUID);\n     analysisMetadataHolder.setUuid(ANALYSIS_UUID);\n     analysisMetadataHolder.setBaseAnalysis(baseAnalysis);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -79,7 +79,7 @@ public class PersistDuplicationDataStepTest extends BaseStepTest {\n   public MetricRepositoryRule metricRepository = new MetricRepositoryRule();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     MetricDto metric = db.measures().insertMetric(m -> m.setKey(DUPLICATIONS_DATA_KEY).setValueType(Metric.ValueType.STRING.name()));\n     insertComponent(PROJECT_KEY, PROJECT_UUID);\n     insertComponent(FILE_1_KEY, FILE_1_UUID);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -72,7 +72,7 @@ public class ReportCommentMeasuresStepTest {\n   ComputationStep underTest = new CommentMeasuresStep(treeRootHolder, metricRepository, measureRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(\n       builder(PROJECT, ROOT_REF)\n         .addChildren("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -75,7 +75,7 @@ public class ReportCoverageMeasuresStepTest {\n   CoverageMeasuresStep underTest = new CoverageMeasuresStep(treeRootHolder, metricRepository, measureRepository, reportReader);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(\n       builder(PROJECT, ROOT_REF)\n         .addChildren("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -66,7 +66,7 @@ public class ReportLanguageDistributionMeasuresStepTest {\n   ComputationStep underTest = new LanguageDistributionMeasuresStep(treeRootHolder, metricRepository, measureRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(\n       builder(PROJECT, ROOT_REF)\n         .addChildren("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -74,7 +74,7 @@ public class ViewsCommentMeasuresStepTest {\n   ComputationStep underTest = new CommentMeasuresStep(treeRootHolder, metricRepository, measureRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(\n       builder(VIEW, ROOT_REF)\n         .addChildren("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -65,7 +65,7 @@ public class ViewsCoverageMeasuresStepTest {\n   CoverageMeasuresStep underTest = new CoverageMeasuresStep(treeRootHolder, metricRepository, measureRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(\n       builder(VIEW, ROOT_REF)\n         .addChildren("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class DumbFileSystem implements ServerFileSystem {",
        "fixed_code": "private static class DumbFileSystem implements ServerFileSystem {",
        "patch": "@@ -89,7 +89,7 @@ private File plugin2Jar() {\n     return new File(\"src/test/plugins/sonar-test2-plugin/target/sonar-test2-plugin-0.1-SNAPSHOT.jar\");\n   }\n \n-  private class DumbFileSystem implements ServerFileSystem {\n+  private static class DumbFileSystem implements ServerFileSystem {\n     private final TemporaryFolder temp;\n     private File tempDir;\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "(Class) StandaloneCeDistributedInformation.class);",
        "fixed_code": "StandaloneCeDistributedInformation.class);",
        "patch": "@@ -138,7 +138,7 @@ public void test_real_start() throws IOException {\n           .map(ComponentAdapter::getComponentImplementation)\n           .collect(Collectors.toList())).doesNotContain(\n             (Class) CeDistributedInformationImpl.class).contains(\n-              (Class) StandaloneCeDistributedInformation.class);\n+              StandaloneCeDistributedInformation.class);\n       assertThat(picoContainer.getParent().getParent().getParent().getParent()).isNull();\n     } finally {\n       underTest.stop();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class TestCeWorkerFactory implements CeWorkerFactory {",
        "fixed_code": "private static class TestCeWorkerFactory implements CeWorkerFactory {",
        "patch": "@@ -281,7 +281,7 @@ private void startSchedulingAndRun() throws ExecutionException, InterruptedExcep\n     processingExecutorService.runFutures();\n   }\n \n-  private class TestCeWorkerFactory implements CeWorkerFactory {\n+  private static class TestCeWorkerFactory implements CeWorkerFactory {\n     private final Iterator<CeWorker> ceWorkers;\n \n     private TestCeWorkerFactory(CeWorker... ceWorkers) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "Object result = null;",
        "fixed_code": "Object result;",
        "patch": "@@ -40,7 +40,7 @@ class ProfilingPreparedStatementHandler implements InvocationHandler {\n   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n     if (method.getName().startsWith(\"execute\")) {\n       Profiler profiler = Profiler.create(ProfiledDataSource.SQL_LOGGER).start();\n-      Object result = null;\n+      Object result;\n       try {\n         result = InvocationUtils.invokeQuietly(statement, method, args);\n       } finally {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "Object result = null;",
        "fixed_code": "Object result;",
        "patch": "@@ -36,7 +36,7 @@ class ProfilingStatementHandler implements InvocationHandler {\n   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n     if (method.getName().startsWith(\"execute\")) {\n       Profiler profiler = Profiler.create(ProfiledDataSource.SQL_LOGGER).start();\n-      Object result = null;\n+      Object result;\n       try {\n         result = InvocationUtils.invokeQuietly(statement, method, args);\n       } finally {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "toUniqueAndSortedList(new HashSet<>(asList(\"A\", (String) null, \"C\")));",
        "fixed_code": "toUniqueAndSortedList(new HashSet<>(asList(\"A\", null, \"C\")));",
        "patch": "@@ -146,7 +146,7 @@ public void toUniqueAndSortedList_throws_NPE_if_arg_contains_a_null() {\n   public void toUniqueAndSortedList_throws_NPE_if_arg_is_a_set_containing_a_null() {\n     expectedException.expect(NullPointerException.class);\n \n-    toUniqueAndSortedList(new HashSet<>(asList(\"A\", (String) null, \"C\")));\n+    toUniqueAndSortedList(new HashSet<>(asList(\"A\", null, \"C\")));\n   }\n \n   @Test"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".extracting(ProjectAlmBindingDto::getUuid, t -> t.getAlm(), ProjectAlmBindingDto::getRepoId, ProjectAlmBindingDto::getProjectUuid,",
        "fixed_code": ".extracting(ProjectAlmBindingDto::getUuid, ProjectAlmBindingDto::getAlm, ProjectAlmBindingDto::getRepoId, ProjectAlmBindingDto::getProjectUuid,",
        "patch": "@@ -236,7 +236,7 @@ public void select_by_repo_ids() {\n     underTest.insertOrUpdate(dbSession, BITBUCKETCLOUD, ANOTHER_REPO, \"foo\", null, \"http://foo\");\n \n     assertThat(underTest.selectByRepoIds(dbSession, GITHUB, Arrays.asList(A_REPO, ANOTHER_REPO, \"foo\")))\n-      .extracting(ProjectAlmBindingDto::getUuid, t -> t.getAlm(), ProjectAlmBindingDto::getRepoId, ProjectAlmBindingDto::getProjectUuid,\n+      .extracting(ProjectAlmBindingDto::getUuid, ProjectAlmBindingDto::getAlm, ProjectAlmBindingDto::getRepoId, ProjectAlmBindingDto::getProjectUuid,\n         ProjectAlmBindingDto::getUrl, ProjectAlmBindingDto::getGithubSlug)\n       .containsExactlyInAnyOrder(\n         tuple(\"uuid1\", GITHUB, A_REPO, A_UUID, A_URL, A_GITHUB_SLUG),"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -58,7 +58,7 @@ public class LiveMeasureDaoTest {\n   private MetricDto metric;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     metric = db.measures().insertMetric();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -77,7 +77,7 @@ public class AuthorizationDaoTest {\n   private String randomPermission = \"p\" + random.nextInt();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     organization = db.organizations().insert();\n     user = db.users().insertUser();\n     group1 = db.users().insertGroup(organization, \"group1\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -66,7 +66,7 @@ public class GroupPermissionDaoTest {\n   private String defaultOrganizationUuid;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     defaultOrganizationUuid = db.getDefaultOrganization().getUuid();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -65,7 +65,7 @@ public class PermissionTemplateDaoTest {\n   private PermissionTemplateDao underTest = new PermissionTemplateDao(system2);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(system2.now()).thenReturn(NOW.getTime());\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -83,7 +83,7 @@ public void resetAnalysisProperties() {\n   }\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n \n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".extracting(t -> ((Long) t.get(\"METRIC\")).intValue(), t -> (String) t.get(\"ANALYSIS\"))",
        "fixed_code": ".extracting(t -> ((Long) t.get(\"METRIC\")).intValue(), t -> t.get(\"ANALYSIS\"))",
        "patch": "@@ -237,7 +237,7 @@ public void shouldDeleteHistoricalDataOfDirectoriesAndFiles() {\n     dbSession.commit();\n \n     assertThat(db.select(\"select metric_id as \\\"METRIC\\\",analysis_uuid as \\\"ANALYSIS\\\" from project_measures\"))\n-      .extracting(t -> ((Long) t.get(\"METRIC\")).intValue(), t -> (String) t.get(\"ANALYSIS\"))\n+      .extracting(t -> ((Long) t.get(\"METRIC\")).intValue(), t -> t.get(\"ANALYSIS\"))\n       .containsOnly(\n         tuple(metricWithHistory.getId(), lastAnalysis.getUuid()),\n         tuple(metricWithoutHistory.getId(), lastAnalysis.getUuid()),"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -41,7 +41,7 @@ public class PurgeMapperTest {\n   private PurgeMapper purgeMapper;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbSession = db.getDbClient().openSession(false);\n     purgeMapper = dbSession.getMapper(PurgeMapper.class);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class MockedClock extends PurgeProfiler.Clock {",
        "fixed_code": "private static class MockedClock extends PurgeProfiler.Clock {",
        "patch": "@@ -80,7 +80,7 @@ public void shouldResetPurgeProfiling() {\n     verify(logger).info(contains(\"bar: 5ms\"));\n   }\n \n-  private class MockedClock extends PurgeProfiler.Clock {\n+  private static class MockedClock extends PurgeProfiler.Clock {\n     private long now = 0;\n \n     @Override"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -51,7 +51,7 @@ public class GroupMembershipDaoTest {\n   private GroupMembershipDao underTest = db.getDbClient().groupMembershipDao();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     organizationDto = db.organizations().insert();\n     user1 = db.users().insertUser(u -> u.setLogin(\"admin login\").setName(\"Admin name\").setEmail(\"admin@email.com\"));\n     user2 = db.users().insertUser(u -> u.setLogin(\"not.admin\").setName(\"Not Admin\").setEmail(\"Not Admin\"));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "Long date = DateUtils.parseDate(\"2014-06-20\").getTime();",
        "fixed_code": "long date = DateUtils.parseDate(\"2014-06-20\").getTime();",
        "patch": "@@ -320,7 +320,7 @@ private UserDto insertNonRootUser(UserDto dto) {\n \n   @Test\n   public void insert_user() {\n-    Long date = DateUtils.parseDate(\"2014-06-20\").getTime();\n+    long date = DateUtils.parseDate(\"2014-06-20\").getTime();\n \n     UserDto userDto = new UserDto()\n       .setId(1)"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class NoopDatabase implements Database {",
        "fixed_code": "private static class NoopDatabase implements Database {",
        "patch": "@@ -172,7 +172,7 @@ private void createMigrationHistoryTable(NoopDatabase noopDatabase) {\n     new MigrationHistoryTableImpl(noopDatabase).start();\n   }\n \n-  private class NoopDatabase implements Database {\n+  private static class NoopDatabase implements Database {\n     private final Dialect dialect;\n     private final DataSource dataSource;\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "defaultSchemaBaseTestDb = new TestDbImpl((String) null);",
        "fixed_code": "defaultSchemaBaseTestDb = new TestDbImpl(null);",
        "patch": "@@ -89,7 +89,7 @@ static TestDbImpl create(@Nullable String schemaPath, MyBatisConfExtension... co\n     MyBatisConfExtension[] extensionArray = confExtensions.length == 0 ? null : confExtensions;\n     if (schemaPath == null) {\n       if (defaultSchemaBaseTestDb == null) {\n-        defaultSchemaBaseTestDb = new TestDbImpl((String) null);\n+        defaultSchemaBaseTestDb = new TestDbImpl(null);\n       }\n       if (extensionArray != null) {\n         return defaultSchemaTestDbsWithExtensions.computeIfAbsent("
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return res.stream().toArray(Object[][]::new);",
        "fixed_code": "return res.toArray(new Object[0][]);",
        "patch": "@@ -152,7 +152,7 @@ public static Object[][] combinationsOfCsAsAndSuffix() {\n         });\n       }\n     }\n-    return res.stream().toArray(Object[][]::new);\n+    return res.toArray(new Object[0][]);\n   }\n \n   @Test"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "ProcessLauncher underTest = new ProcessLauncherImpl(tempDir, commands, () -> new TestProcessBuilder());",
        "fixed_code": "ProcessLauncher underTest = new ProcessLauncherImpl(tempDir, commands, TestProcessBuilder::new);",
        "patch": "@@ -164,7 +164,7 @@ public void do_not_fail_if_outdated_es_directory_does_not_exist() throws Excepti\n     File homeDir = temp.newFolder();\n     File dataDir = temp.newFolder();\n     File logDir = temp.newFolder();\n-    ProcessLauncher underTest = new ProcessLauncherImpl(tempDir, commands, () -> new TestProcessBuilder());\n+    ProcessLauncher underTest = new ProcessLauncherImpl(tempDir, commands, TestProcessBuilder::new);\n     EsScriptCommand command = createEsScriptCommand(tempDir, homeDir, dataDir, logDir);\n \n     File outdatedEsDir = new File(dataDir, \"es\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class TestHazelcastMember implements HazelcastMember {",
        "fixed_code": "private static class TestHazelcastMember implements HazelcastMember {",
        "patch": "@@ -144,7 +144,7 @@ private Member newLocalHostMember(int port, boolean localMember) throws UnknownH\n     return member;\n   }\n \n-  private class TestHazelcastMember implements HazelcastMember {\n+  private static class TestHazelcastMember implements HazelcastMember {\n     private final Map<Member, List<String>> hostsPerMember;\n     private final Cluster cluster = mock(Cluster.class);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void constructor_sets_mandatory_JVM_options_for_java11() throws IOException {",
        "fixed_code": "public void constructor_sets_mandatory_JVM_options_for_java11() {",
        "patch": "@@ -52,7 +52,7 @@ public void constructor_sets_mandatory_JVM_options_before_java11() {\n   }\n \n   @Test\n-  public void constructor_sets_mandatory_JVM_options_for_java11() throws IOException {\n+  public void constructor_sets_mandatory_JVM_options_for_java11() {\n     when(javaVersion.isAtLeastJava11()).thenReturn(true);\n     underTest = new WebJvmOptions(tmpDir, javaVersion);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class MemoryAppender<E> extends AppenderBase<E> {",
        "fixed_code": "private static class MemoryAppender<E> extends AppenderBase<E> {",
        "patch": "@@ -125,7 +125,7 @@ public void isOperational_must_log_once_when_master_is_not_elected() {\n       );\n   }\n \n-  private class MemoryAppender<E> extends AppenderBase<E> {\n+  private static class MemoryAppender<E> extends AppenderBase<E> {\n     private final List<E> events = new ArrayList();\n \n     @Override"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "putLevel(loggerKey, resolveLevel(props, properties.stream().toArray(String[]::new)));",
        "fixed_code": "putLevel(loggerKey, resolveLevel(props, properties.toArray(new String[0])));",
        "patch": "@@ -150,7 +150,7 @@ public void apply(LogLevelConfig logLevelConfig) {\n   }\n \n   private void applyLevelByProperty(Props props, String loggerKey, List<String> properties) {\n-    putLevel(loggerKey, resolveLevel(props, properties.stream().toArray(String[]::new)));\n+    putLevel(loggerKey, resolveLevel(props, properties.toArray(new String[0])));\n   }\n \n   private void applyHardcodedLevel(String loggerName, Level newLevel) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".containsOnly(expected.values().stream().toArray(NodeHealth[]::new));",
        "fixed_code": ".containsOnly(expected.values().toArray(new NodeHealth[0]));",
        "patch": "@@ -115,7 +115,7 @@ public void readAll_returns_all_NodeHealth_in_map_sq_health_state_for_existing_c\n     when(hazelcastMember.getClusterTime()).thenReturn(clusterTime);\n \n     assertThat(underTest.readAll())\n-      .containsOnly(expected.values().stream().toArray(NodeHealth[]::new));\n+      .containsOnly(expected.values().toArray(new NodeHealth[0]));\n     assertThat(logging.getLogs()).isEmpty();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "this.date = requireNonNull(date, \"date can't be null\");",
        "fixed_code": "this.date = date;",
        "patch": "@@ -371,7 +371,7 @@ public abstract static class Change {\n     protected final long date;\n \n     private Change(long date) {\n-      this.date = requireNonNull(date, \"date can't be null\");\n+      this.date = date;\n     }\n \n     public long getDate() {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "String expectedUuids[] = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);",
        "fixed_code": "String[] expectedUuids = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);",
        "patch": "@@ -112,7 +112,7 @@ private void assertThatEsTableContainsOnly(EsQueueDto... expected) {\n     try (DbSession otherSession = db.getDbClient().openSession(false)) {\n       List<String> uuidsInDb = db.getDbClient().esQueueDao().selectForRecovery(otherSession, Long.MAX_VALUE, 10)\n         .stream().map(EsQueueDto::getUuid).collect(toList());\n-      String expectedUuids[] = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);\n+      String[] expectedUuids = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);\n       assertThat(uuidsInDb).containsExactlyInAnyOrder(expectedUuids);\n     }\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "String expectedUuids[] = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);",
        "fixed_code": "String[] expectedUuids = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);",
        "patch": "@@ -107,7 +107,7 @@ private void assertThatEsTableContainsOnly(EsQueueDto... expected) {\n     try (DbSession otherSession = db.getDbClient().openSession(false)) {\n       List<String> uuidsInDb = db.getDbClient().esQueueDao().selectForRecovery(otherSession, Long.MAX_VALUE, 10)\n         .stream().map(EsQueueDto::getUuid).collect(toList());\n-      String expectedUuids[] = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);\n+      String[] expectedUuids = Arrays.stream(expected).map(EsQueueDto::getUuid).toArray(String[]::new);\n       assertThat(uuidsInDb).containsExactlyInAnyOrder(expectedUuids);\n     }\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -53,7 +53,7 @@ public class MyNewIssuesEmailTemplateTest {\n   private MyNewIssuesEmailTemplate underTest = new MyNewIssuesEmailTemplate(new EmailSettings(settings.asConfig(), server), i18n);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getPublicRootUrl()).thenReturn(\"http://nemo.sonarsource.org\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -54,7 +54,7 @@ public class NewIssuesEmailTemplateTest {\n   private NewIssuesEmailTemplate template = new NewIssuesEmailTemplate(new EmailSettings(settings.asConfig(), server), i18n);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getPublicRootUrl()).thenReturn(\"http://nemo.sonarsource.org\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -47,7 +47,7 @@ public class InternalPropertiesImplTest {\n   private InternalPropertiesImpl underTest = new InternalPropertiesImpl(dbClient);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.openSession(false)).thenReturn(dbSession);\n     when(dbClient.internalPropertiesDao()).thenReturn(internalPropertiesDao);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class CacheCaptorThread extends Thread {",
        "fixed_code": "private static class CacheCaptorThread extends Thread {",
        "patch": "@@ -375,7 +375,7 @@ private void verifyValueInNewThread(ThreadLocalSettings settings, @Nullable Stri\n     captor.verifyValue(settings, expectedValue);\n   }\n \n-  private class CacheCaptorThread extends Thread {\n+  private static class CacheCaptorThread extends Thread {\n     private final CountDownLatch latch = new CountDownLatch(1);\n     private ThreadLocalSettings settings;\n     private String value;"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -49,7 +49,7 @@ public class WebhookPayloadFactoryImplTest {\n   private WebhookPayloadFactory underTest = new WebhookPayloadFactoryImpl(server, system2);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getPublicRootUrl()).thenReturn(\"http://foo\");\n     when(system2.now()).thenReturn(1_500_999L);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "class HasFileName implements ArgumentMatcher<File> {",
        "fixed_code": "static class HasFileName implements ArgumentMatcher<File> {",
        "patch": "@@ -306,7 +306,7 @@ public void download_common_transitive_dependency() {\n     assertThat(new File(downloadDir, \"testdep-1.0.jar\")).exists();\n   }\n \n-  class HasFileName implements ArgumentMatcher<File> {\n+  static class HasFileName implements ArgumentMatcher<File> {\n     private final String name;\n \n     HasFileName(String name) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -54,7 +54,7 @@ public class ProjectConfigurationLoaderImplTest {\n   private ProjectConfigurationLoaderImpl underTest = new ProjectConfigurationLoaderImpl(globalSettings, dbClient);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.openSession(anyBoolean()))\n       .thenThrow(new IllegalStateException(\"ProjectConfigurationLoaderImpl should not open DB session\"));\n     when(dbClient.propertiesDao()).thenReturn(propertiesDao);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return headerValuesByNames.keySet().contains(settingsByKey.get(settingKey).toLowerCase(Locale.ENGLISH));",
        "fixed_code": "return headerValuesByNames.containsKey(settingsByKey.get(settingKey).toLowerCase(Locale.ENGLISH));",
        "patch": "@@ -185,7 +185,7 @@ private static Map<String, String> getHeaders(HttpServletRequest request) {\n   }\n \n   private boolean hasHeader(Map<String, String> headerValuesByNames, String settingKey) {\n-    return headerValuesByNames.keySet().contains(settingsByKey.get(settingKey).toLowerCase(Locale.ENGLISH));\n+    return headerValuesByNames.containsKey(settingsByKey.get(settingKey).toLowerCase(Locale.ENGLISH));\n   }\n \n   private static class SsoIdentityProvider implements IdentityProvider {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".setDefault(profile.getDefaultProfile().booleanValue());",
        "fixed_code": ".setDefault(profile.getDefaultProfile());",
        "patch": "@@ -73,7 +73,7 @@ public void define(Context context) {\n \n   private static void define(Context context, RulesProfile profile) {\n     NewBuiltInQualityProfile newQp = context.createBuiltInQualityProfile(profile.getName(), profile.getLanguage())\n-      .setDefault(profile.getDefaultProfile().booleanValue());\n+      .setDefault(profile.getDefaultProfile());\n \n     for (org.sonar.api.rules.ActiveRule ar : profile.getActiveRules()) {\n       NewBuiltInActiveRule newActiveRule = newQp.activateRule(ar.getRepositoryKey(), ar.getRuleKey());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -65,7 +65,7 @@ public class BaseContextFactoryTest {\n   private BaseContextFactory underTest = new BaseContextFactory(userIdentityAuthenticator, server, jwtHttpHandler, threadLocalUserSession, userSessionFactory);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getPublicRootUrl()).thenReturn(PUBLIC_ROOT_URL);\n     when(identityProvider.getName()).thenReturn(\"GitHub\");\n     when(identityProvider.getKey()).thenReturn(\"github\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -54,7 +54,7 @@ public class JwtCsrfVerifierTest {\n   private JwtCsrfVerifier underTest = new JwtCsrfVerifier();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(request.getContextPath()).thenReturn(\"\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -84,7 +84,7 @@ public class JwtHttpHandlerTest {\n   private JwtHttpHandler underTest = new JwtHttpHandler(system2, dbClient, settings.asConfig(), jwtSerializer, jwtCsrfVerifier);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(system2.now()).thenReturn(NOW);\n     when(request.getSession()).thenReturn(httpSession);\n     when(jwtSerializer.encode(any(JwtSerializer.JwtSession.class))).thenReturn(JWT_TOKEN);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -45,7 +45,7 @@ public class OAuth2AuthenticationParametersImplTest {\n   private OAuth2AuthenticationParameters underTest = new OAuth2AuthenticationParametersImpl();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(request.getContextPath()).thenReturn(\"\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -78,7 +78,7 @@ public class OAuth2CallbackFilterTest {\n     threadLocalUserSession);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(oAuth2ContextFactory.newCallback(request, response, oAuth2IdentityProvider)).thenReturn(mock(OAuth2IdentityProvider.CallbackContext.class));\n     when(request.getContextPath()).thenReturn(\"\");\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -78,7 +78,7 @@ public class OAuth2ContextFactoryTest {\n     oAuthParameters);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(request.getSession()).thenReturn(session);\n     when(identityProvider.getKey()).thenReturn(PROVIDER_KEY);\n     when(identityProvider.getName()).thenReturn(PROVIDER_NAME);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -55,7 +55,7 @@ public class OAuthCsrfVerifierTest {\n   private OAuthCsrfVerifier underTest = new OAuthCsrfVerifier();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getContextPath()).thenReturn(\"\");\n     when(identityProvider.getName()).thenReturn(PROVIDER_NAME);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -56,7 +56,7 @@ public class RequestAuthenticatorImplTest {\n     new CustomAuthentication[]{customAuthentication1, customAuthentication2});\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(sessionFactory.create(A_USER)).thenReturn(new MockUserSession(A_USER));\n     when(sessionFactory.createAnonymous()).thenReturn(new AnonymousMockUserSession());\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -64,7 +64,7 @@ public class UserSessionInitializerTest {\n   private UserSessionInitializer underTest = new UserSessionInitializer(settings.asConfig(), threadLocalSession, authenticationEvent, authenticator);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(request.getContextPath()).thenReturn(\"\");\n     when(request.getRequestURI()).thenReturn(\"/measures\");\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -53,7 +53,7 @@ public class AuthenticationEventImplTest {\n   private AuthenticationEventImpl underTest = new AuthenticationEventImpl();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     logTester.setLevel(LoggerLevel.DEBUG);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -39,7 +39,7 @@ public class BuiltInQPChangeNotificationTemplateTest {\n   private BuiltInQPChangeNotificationTemplate underTest = new BuiltInQPChangeNotificationTemplate(server);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(server.getPublicRootUrl()).thenReturn(\"http://\" + randomAlphanumeric(10));\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "new DefaultGroupFinder(dbClient), settings.asConfig(), localAuthentication);;",
        "fixed_code": "new DefaultGroupFinder(dbClient), settings.asConfig(), localAuthentication);",
        "patch": "@@ -70,7 +70,7 @@ public class UserUpdaterReactivateTest {\n   private MapSettings settings = new MapSettings();\n   private CredentialsLocalAuthentication localAuthentication = new CredentialsLocalAuthentication(db.getDbClient());\n   private UserUpdater underTest = new UserUpdater(system2, newUserNotifier, dbClient, userIndexer, organizationFlags, defaultOrganizationProvider,\n-    new DefaultGroupFinder(dbClient), settings.asConfig(), localAuthentication);;\n+    new DefaultGroupFinder(dbClient), settings.asConfig(), localAuthentication);\n \n   @Test\n   public void reactivate_user() {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -47,7 +47,7 @@ public class IndexerStartupTaskTest {\n   private final IndexerStartupTask underTest = new IndexerStartupTask(es.client(), settings.asConfig(), metadataIndex, indexer);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     doReturn(ImmutableSet.of(TYPE_FAKE)).when(indexer).getIndexTypes();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class FakeNotificationChannel extends NotificationChannel {",
        "fixed_code": "private static class FakeNotificationChannel extends NotificationChannel {",
        "patch": "@@ -34,7 +34,7 @@ public void defaultMethods() {\n     assertThat(channel.toString()).isEqualTo(\"FakeNotificationChannel\");\n   }\n \n-  private class FakeNotificationChannel extends NotificationChannel {\n+  private static class FakeNotificationChannel extends NotificationChannel {\n     @Override\n     public boolean deliver(Notification notification, String username) {\n       return true;"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -42,7 +42,7 @@ public class NotificationDaemonTest {\n   private InOrder inOrder;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     MapSettings settings = new MapSettings(new PropertyDefinitions(NotificationDaemon.class)).setProperty(\"sonar.notifications.delay\", 1L);\n \n     underTest = new NotificationDaemon(settings.asConfig(), manager, notificationService);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -39,7 +39,7 @@ public class DefaultServerUpgradeStatusTest {\n   private DefaultServerUpgradeStatus underTest = new DefaultServerUpgradeStatus(dbVersion, migrationSteps, new ConfigurationBridge(settings));\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(migrationSteps.getMaxMigrationNumber()).thenReturn(LAST_VERSION);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(CoreProperties.SERVER_ID).setValue(serverId.toString()));",
        "fixed_code": "dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(CoreProperties.SERVER_ID).setValue(serverId));",
        "patch": "@@ -346,7 +346,7 @@ private void insertServerId(ServerId serverId) {\n   }\n \n   private void insertServerId(String serverId) {\n-    dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(CoreProperties.SERVER_ID).setValue(serverId.toString()));\n+    dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(CoreProperties.SERVER_ID).setValue(serverId));\n     dbSession.commit();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "assertThat(rule.getSystemTags()).isEqualTo(ruleDefinition.getSystemTags().stream().toArray(String[]::new));",
        "fixed_code": "assertThat(rule.getSystemTags()).isEqualTo(ruleDefinition.getSystemTags().toArray(new String[0]));",
        "patch": "@@ -408,7 +408,7 @@ private void verifyRule(Rule rule, RuleDefinitionDto ruleDefinition, RuleParamDt\n     assertThat(rule.getUpdatedAt().getTime()).isEqualTo(ruleDefinition.getUpdatedAt());\n     assertThat(rule.getRepositoryKey()).isEqualTo(ruleDefinition.getRepositoryKey());\n     assertThat(rule.getSeverity().name()).isEqualTo(ruleDefinition.getSeverityString());\n-    assertThat(rule.getSystemTags()).isEqualTo(ruleDefinition.getSystemTags().stream().toArray(String[]::new));\n+    assertThat(rule.getSystemTags()).isEqualTo(ruleDefinition.getSystemTags().toArray(new String[0]));\n     assertThat(rule.getTags()).isEmpty();\n     assertThat(rule.getId()).isEqualTo(ruleDefinition.getId());\n     assertThat(rule.getDescription()).isEqualTo(ruleDefinition.getDescription());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -37,7 +37,7 @@ public class WebServerRuleFinderImplTest {\n   private WebServerRuleFinderImpl underTest = new WebServerRuleFinderImpl(dbClient, defaultOrganizationProvider);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(dbClient.ruleDao()).thenReturn(mock(RuleDao.class));\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class TestMetrics implements Metrics {",
        "fixed_code": "private static class TestMetrics implements Metrics {",
        "patch": "@@ -196,7 +196,7 @@ public void fail_if_plugin_duplicates_core_metric() {\n     new RegisterMetrics(dbClient, new Metrics[] {plugin}).start();\n   }\n \n-  private class TestMetrics implements Metrics {\n+  private static class TestMetrics implements Metrics {\n     private final List<Metric> metrics;\n \n     public TestMetrics(Metric... metrics) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return readOnly != null && \"true\".equalsIgnoreCase(readOnly);",
        "fixed_code": "return \"true\".equalsIgnoreCase(readOnly);",
        "patch": "@@ -114,7 +114,7 @@ private boolean isReadOnly(IndexType.IndexMainType mainType) {\n     String indexName = mainType.getIndex().getName();\n     String readOnly = client.nativeClient().admin().indices().getSettings(new GetSettingsRequest().indices(indexName)).actionGet()\n       .getSetting(indexName, \"index.blocks.read_only_allow_delete\");\n-    return readOnly != null && \"true\".equalsIgnoreCase(readOnly);\n+    return \"true\".equalsIgnoreCase(readOnly);\n   }\n \n   private void removeReadOnly(IndexType.IndexMainType mainType) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private T object = null;",
        "fixed_code": "private T object;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class Result<T> {\n \n-  private T object = null;\n+  private T object;\n   private final List<Message> errors = newArrayList();\n \n   private Result(@Nullable T object) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".setPossibleValues((Object[]) RuleType.values())",
        "fixed_code": ".setPossibleValues(RuleType.values())",
        "patch": "@@ -258,7 +258,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(PARAM_TYPES)\n       .setDescription(\"Comma-separated list of types.\")\n       .setSince(\"5.5\")\n-      .setPossibleValues((Object[]) RuleType.values())\n+      .setPossibleValues(RuleType.values())\n       .setExampleValue(format(\"%s,%s\", RuleType.CODE_SMELL, RuleType.BUG));\n     action.createParam(PARAM_OWASP_TOP_10)\n       .setDescription(\"Comma-separated list of OWASP Top 10 lowercase categories.\")"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "List<String> tags = MoreObjects.firstNonNull(request.paramAsStrings(PARAM_TAGS), Collections.<String>emptyList());",
        "fixed_code": "List<String> tags = MoreObjects.firstNonNull(request.paramAsStrings(PARAM_TAGS), Collections.emptyList());",
        "patch": "@@ -92,7 +92,7 @@ public void define(WebService.NewController controller) {\n   @Override\n   public void handle(Request request, Response response) throws Exception {\n     String key = request.mandatoryParam(PARAM_ISSUE);\n-    List<String> tags = MoreObjects.firstNonNull(request.paramAsStrings(PARAM_TAGS), Collections.<String>emptyList());\n+    List<String> tags = MoreObjects.firstNonNull(request.paramAsStrings(PARAM_TAGS), Collections.emptyList());\n     SearchResponseData preloadedSearchResponseData = setTags(key, tags);\n     responseWriter.write(key, preloadedSearchResponseData, request, response);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "throw new NotFoundException(format(\"Organization not found for key '%s'\", (Object) key));",
        "fixed_code": "throw new NotFoundException(format(\"Organization not found for key '%s'\", key));",
        "patch": "@@ -119,7 +119,7 @@ private static String emptyAsNull(@Nullable String value) {\n   private OrganizationDto getDto(DbSession dbSession, String key) {\n     Optional<OrganizationDto> organizationDto = dbClient.organizationDao().selectByKey(dbSession, key);\n     if (!organizationDto.isPresent()) {\n-      throw new NotFoundException(format(\"Organization not found for key '%s'\", (Object) key));\n+      throw new NotFoundException(format(\"Organization not found for key '%s'\", key));\n     }\n     return organizationDto.get();\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void handle(Request request, Response response) throws Exception {",
        "fixed_code": "public void handle(Request request, Response response) {",
        "patch": "@@ -68,7 +68,7 @@ public void define(WebService.NewController controller) {\n   }\n \n   @Override\n-  public void handle(Request request, Response response) throws Exception {\n+  public void handle(Request request, Response response) {\n     userSession.checkIsSystemAdministrator();\n \n     JsonWriter jsonWriter = response.newJsonWriter();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -98,7 +98,7 @@ public class ReportSubmitterTest {\n   private ReportSubmitter underTest = new ReportSubmitter(queue, userSession, componentUpdater, permissionTemplateService, db.getDbClient(), ossEditionBranchSupport);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     defaultOrganizationKey = db.getDefaultOrganization().getKey();\n     defaultOrganizationUuid = db.getDefaultOrganization().getUuid();\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class TestActivityDto extends CeActivityDto {",
        "fixed_code": "private static class TestActivityDto extends CeActivityDto {",
        "patch": "@@ -292,7 +292,7 @@ private CeActivityDto newActivity(String taskUuid, String componentUuid, CeActiv\n       .setAnalysisUuid(\"U1\");\n   }\n \n-  private class TestActivityDto extends CeActivityDto {\n+  private static class TestActivityDto extends CeActivityDto {\n \n     public TestActivityDto(CeQueueDto queueDto) {\n       super(queueDto);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -138,7 +138,7 @@ public static Object[][] new_rating_metric_keys() {\n   private RequestBuilder request = SearchProjectsRequest.builder();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     projectsInWarning.update(0L);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -137,7 +137,7 @@ public void fail_when_user_is_not_authenticated() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     ComponentDto branch = db.components().insertProjectBranch(project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -106,7 +106,7 @@ public void fail_when_user_is_not_authenticated() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "String[] expectedCauses = causesGroups.stream().flatMap(Arrays::stream).collect(Collectors.toSet()).stream().toArray(String[]::new);",
        "fixed_code": "String[] expectedCauses = causesGroups.stream().flatMap(Arrays::stream).toArray(String[]::new);",
        "patch": "@@ -202,7 +202,7 @@ public void checkCluster_returns_causes_of_all_ClusterHealthChecks_whichever_the\n       .map(HardcodedHealthClusterCheck::new)\n       .map(ClusterHealthCheck.class::cast)\n       .toArray(ClusterHealthCheck[]::new);\n-    String[] expectedCauses = causesGroups.stream().flatMap(Arrays::stream).collect(Collectors.toSet()).stream().toArray(String[]::new);\n+    String[] expectedCauses = causesGroups.stream().flatMap(Arrays::stream).toArray(String[]::new);\n \n     HealthCheckerImpl underTest = new HealthCheckerImpl(webServer, new NodeHealthCheck[0], clusterHealthChecks, sharedHealthState);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -66,7 +66,7 @@ public class TransitionActionTest {\n   private TransitionAction action = new TransitionAction(transitionService);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     workflow.start();\n     when(context.issue()).thenReturn(issue);\n     when(context.issueChangeContext()).thenReturn(IssueChangeContext.createUser(new Date(), \"user_uuid\"));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -58,7 +58,7 @@ public class TransitionServiceTest {\n   private TransitionService underTest = new TransitionService(userSession, workflow);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     workflow.start();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -103,7 +103,7 @@ public class AddCommentActionTest {\n     new AddCommentAction(system2, userSession, dbClient, new IssueFinder(dbClient, userSession), issueUpdater, new IssueFieldsSetter(), responseWriter));\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(system2.now()).thenReturn(NOW);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -72,7 +72,7 @@ public class ChangelogActionTest {\n   private WsActionTester tester = new WsActionTester(new ChangelogAction(db.getDbClient(), new IssueFinder(db.getDbClient(), userSession), new AvatarResolverImpl(), userSession));\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     project = db.components().insertPrivateProject();\n     file = db.components().insertComponent(newFileDto(project));\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -64,7 +64,7 @@ public class MetricsActionTest {\n   private WsActionTester tester = new WsActionTester(underTest);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     defaultProject = insertDefaultProject();\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, defaultProject);\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -395,7 +395,7 @@ public void fail_if_branch_does_not_exist() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -341,7 +341,7 @@ public void pull_request() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -327,7 +327,7 @@ public void fail_when_not_authenticated() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     UserDto user = db.users().insertUser();\n     userSession.logIn(user);\n     when(dispatchers.getProjectDispatchers()).thenReturn(singletonList(NOTIF_MY_NEW_ISSUES));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -307,7 +307,7 @@ public void fail_when_not_authenticated() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     UserDto user = db.users().insertUser();\n     userSession.logIn(user);\n     when(dispatchers.getGlobalDispatchers()).thenReturn(singletonList(NOTIF_MY_NEW_ISSUES));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -61,7 +61,7 @@ public class GroupPermissionChangerTest {\n   private ComponentDto publicProject;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     org = db.organizations().insert();\n     group = db.users().insertGroup(org, \"a-group\");\n     privateProject = db.components().insertPrivateProject(org);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -68,7 +68,7 @@ public class UserPermissionChangerTest {\n   private ComponentDto publicProject;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     org1 = db.organizations().insert();\n     org2 = db.organizations().insert();\n     user1 = db.users().insertUser();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -404,7 +404,7 @@ public void no_effect_when_adding_CODEVIEWER_permission_on_a_public_project() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     addUserAsMemberOfOrganization(organization);\n     ComponentDto project = db.components().insertMainBranch(organization);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -353,7 +353,7 @@ public void fail_when_removing_CODEVIEWER_permission_on_a_public_project() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -291,7 +291,7 @@ public void display_all_project_permissions() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     ComponentDto project = db.components().insertMainBranch();\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);\n     ComponentDto branch = db.components().insertProjectBranch(project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": ".containsOnly(nodeHealth.getCauses().stream().toArray(String[]::new));",
        "fixed_code": ".containsOnly(nodeHealth.getCauses().toArray(new String[0]));",
        "patch": "@@ -264,7 +264,7 @@ public void response_contains_information_of_nodes_when_clustered() {\n     assertThat(node.getHealth().name()).isEqualTo(nodeHealth.getStatus().name());\n     assertThat(node.getCausesList())\n       .extracting(System.Cause::getMessage)\n-      .containsOnly(nodeHealth.getCauses().stream().toArray(String[]::new));\n+      .containsOnly(nodeHealth.getCauses().toArray(new String[0]));\n     assertThat(node.getName()).isEqualTo(nodeHealth.getDetails().getName());\n     assertThat(node.getHost()).isEqualTo(nodeHealth.getDetails().getHost());\n     assertThat(node.getPort()).isEqualTo(nodeHealth.getDetails().getPort());"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -124,7 +124,7 @@ public void fail_if_project_does_not_exist() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     ComponentDto project = db.components().insertMainBranch();\n     ComponentDto branch = db.components().insertProjectBranch(project);\n     userSessionRule.addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -625,7 +625,7 @@ public void does_not_fail_to_update_visibility_to_public_when_organization_is_no\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     ComponentDto project = dbTester.components().insertMainBranch();\n     userSessionRule.logIn().addProjectPermission(UserRole.USER, project);\n     ComponentDto branch = dbTester.components().insertProjectBranch(project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -220,7 +220,7 @@ public void fail_if_view() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -238,7 +238,7 @@ public void fail_when_no_id_nor_key_are_provided() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -175,7 +175,7 @@ public void fail_if_component_is_a_file() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.USER, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -243,7 +243,7 @@ public void fail_when_missing_project_parameter() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -411,7 +411,7 @@ public void fail_if_no_parameter_provided() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -304,7 +304,7 @@ public void fail_when_not_quality_gates_admin() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     QGateWithOrgDto qualityGate = db.qualityGates().insertQualityGate(organization);\n     ComponentDto project = db.components().insertMainBranch(organization);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -199,7 +199,7 @@ public void fail_if_profile_does_not_exist() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -92,7 +92,7 @@ public class ListDefinitionsActionTest {\n     new ListDefinitionsAction(dbClient, TestComponentFinder.from(db), userSession, propertyDefinitions, support));\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     project = componentDb.insertComponent(ComponentTesting.newPrivateProjectDto(db.organizations().insert()));\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -906,7 +906,7 @@ public void fail_when_property_set_on_component_of_global_setting() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     OrganizationDto organization = db.organizations().insert();\n     ComponentDto project = db.components().insertMainBranch(organization);\n     userSession.logIn().addProjectPermission(UserRole.ADMIN, project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -65,7 +65,7 @@ public class SettingsUpdaterTest {\n   SettingsUpdater underTest= new SettingsUpdater(dbClient, definitions);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     project = componentDb.insertComponent(ComponentTesting.newPrivateProjectDto(db.organizations().insert()));\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_when_using_branch_db_key() throws Exception {",
        "fixed_code": "public void fail_when_using_branch_db_key() {",
        "patch": "@@ -122,7 +122,7 @@ public void fail_on_unknown_branch() {\n   }\n \n   @Test\n-  public void fail_when_using_branch_db_key() throws Exception {\n+  public void fail_when_using_branch_db_key() {\n     ComponentDto project = db.components().insertMainBranch();\n     userSession.addProjectPermission(UserRole.CODEVIEWER, project);\n     ComponentDto branch = db.components().insertProjectBranch(project);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_if_not_administrator() throws Exception {",
        "fixed_code": "public void fail_if_not_administrator() {",
        "patch": "@@ -210,7 +210,7 @@ public void fail_if_user_does_not_exist() {\n   }\n \n   @Test\n-  public void fail_if_not_administrator() throws Exception {\n+  public void fail_if_not_administrator() {\n     GroupDto group = db.users().insertGroup();\n     UserDto user = db.users().insertUser();\n     db.organizations().addMember(db.getDefaultOrganization(), user);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void fail_if_not_logged_in() throws Exception {",
        "fixed_code": "public void fail_if_not_logged_in() {",
        "patch": "@@ -152,7 +152,7 @@ public void fail_if_webhook_does_not_exist() {\n   }\n \n   @Test\n-  public void fail_if_not_logged_in() throws Exception {\n+  public void fail_if_not_logged_in() {\n \n     OrganizationDto organization = organizationDbTester.insert();\n     WebhookDto dto = webhookDbTester.insertWebhook(organization);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -31,7 +31,7 @@ public class ResponseExampleActionTest {\n   private WebService.Action action;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     WebService.NewController newController = context.createController(\"api/ws\");\n     underTest.define(newController);\n     newController.done();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void throw_server_exception() throws Exception {",
        "fixed_code": "public void throw_server_exception() {",
        "patch": "@@ -36,7 +36,7 @@ public class RemovedWebServiceHandlerTest {\n   public ExpectedException expectedException = ExpectedException.none();\n \n   @Test\n-  public void throw_server_exception() throws Exception {\n+  public void throw_server_exception() {\n     Request request = mock(Request.class);\n     when(request.getPath()).thenReturn(\"/api/resources/index\");\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void configure_root_webapp() throws Exception {",
        "fixed_code": "public void configure_root_webapp() {",
        "patch": "@@ -61,7 +61,7 @@ public void setUp() throws Exception {\n   }\n \n   @Test\n-  public void configure_root_webapp() throws Exception {\n+  public void configure_root_webapp() {\n     props.setProperty(\"foo\", \"bar\");\n     StandardContext context = mock(StandardContext.class);\n     when(tomcat.addWebapp(anyString(), anyString())).thenReturn(context);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void display_servlet_filter_patterns_in_INFO_log() throws Exception {",
        "fixed_code": "public void display_servlet_filter_patterns_in_INFO_log() {",
        "patch": "@@ -129,7 +129,7 @@ public void should_keep_filter_ordering() throws Exception {\n   }\n \n   @Test\n-  public void display_servlet_filter_patterns_in_INFO_log() throws Exception {\n+  public void display_servlet_filter_patterns_in_INFO_log() {\n     ServletFilter filter = new PatternFilter(UrlPattern.builder().includes(\"/api/issues\").excludes(\"/batch/projects\").build());\n     FilterConfig config = mock(FilterConfig.class);\n     MasterServletFilter master = new MasterServletFilter();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -44,7 +44,7 @@ public class RedirectFilterTest {\n   private RedirectFilter underTest = new RedirectFilter();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(request.getContextPath()).thenReturn(\"/sonarqube\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void just_for_fun_and_coverage() throws ServletException {",
        "fixed_code": "public void just_for_fun_and_coverage() {",
        "patch": "@@ -220,7 +220,7 @@ public void doFilter_unloads_DefaultOrganizationCache_even_if_UserSessionInitial\n   }\n \n   @Test\n-  public void just_for_fun_and_coverage() throws ServletException {\n+  public void just_for_fun_and_coverage() {\n     UserSessionFilter filter = new UserSessionFilter();\n     filter.init(mock(FilterConfig.class));\n     filter.destroy();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "if (encoding != null && \"gzip\".equalsIgnoreCase(encoding)) {",
        "fixed_code": "if (\"gzip\".equalsIgnoreCase(encoding)) {",
        "patch": "@@ -292,7 +292,7 @@ public InputStream getInput() throws IOException {\n \n         InputStream resultingInputStream;\n         // create the appropriate stream wrapper based on the encoding type\n-        if (encoding != null && \"gzip\".equalsIgnoreCase(encoding)) {\n+        if (\"gzip\".equalsIgnoreCase(encoding)) {\n           resultingInputStream = new GZIPInputStream(connection.getInputStream());\n         } else {\n           resultingInputStream = connection.getInputStream();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "when(proxySelector.select(any(URI.class))).thenReturn(Arrays.<Proxy>asList(new FakeProxy()));",
        "fixed_code": "when(proxySelector.select(any(URI.class))).thenReturn(Arrays.asList(new FakeProxy()));",
        "patch": "@@ -268,7 +268,7 @@ public void shouldGetDirectProxySynthesis() throws URISyntaxException {\n   @Test\n   public void shouldGetProxySynthesis() throws URISyntaxException {\n     ProxySelector proxySelector = mock(ProxySelector.class);\n-    when(proxySelector.select(any(URI.class))).thenReturn(Arrays.<Proxy>asList(new FakeProxy()));\n+    when(proxySelector.select(any(URI.class))).thenReturn(Arrays.asList(new FakeProxy()));\n     assertThat(DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(new URI(\"http://an_url\"), proxySelector)).isEqualTo(\"HTTP proxy: /123.45.67.89:4040\");\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return logTester.logs(LoggerLevel.INFO).stream().filter(s -> s.startsWith(expectedLog)).findFirst().isPresent();",
        "fixed_code": "return logTester.logs(LoggerLevel.INFO).stream().anyMatch(s -> s.startsWith(expectedLog));",
        "patch": "@@ -69,6 +69,6 @@ public void create() {\n   }\n \n   private boolean hasInfoLog(String expectedLog) {\n-    return logTester.logs(LoggerLevel.INFO).stream().filter(s -> s.startsWith(expectedLog)).findFirst().isPresent();\n+    return logTester.logs(LoggerLevel.INFO).stream().anyMatch(s -> s.startsWith(expectedLog));\n   }\n }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "this.identifier = i.intValue();",
        "fixed_code": "this.identifier = i;",
        "patch": "@@ -67,7 +67,7 @@ public TokenEntry(String image, String tokenSrcID, int beginLine) {\n       i = TOKENS.size() + 1;\n       TOKENS.put(image, i);\n     }\n-    this.identifier = i.intValue();\n+    this.identifier = i;\n     this.tokenSrcID = tokenSrcID;\n     this.beginLine = beginLine;\n     this.index = tokenCount++;"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "class SimpleSortable implements DataUtils.Sortable {",
        "fixed_code": "static class SimpleSortable implements DataUtils.Sortable {",
        "patch": "@@ -63,7 +63,7 @@ public void testSearch() {\n     assertThat(DataUtils.binarySearch(sortable), is(2));\n   }\n \n-  class SimpleSortable implements DataUtils.Sortable {\n+  static class SimpleSortable implements DataUtils.Sortable {\n     private final int[] a;\n     private final int size;\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "new Statement(new ArrayList<Token>());",
        "fixed_code": "new Statement(new ArrayList<>());",
        "patch": "@@ -37,7 +37,7 @@ public void shouldNotAcceptNull() {\n \n   @Test(expected = IllegalArgumentException.class)\n   public void shouldNotAcceptEmpty() {\n-    new Statement(new ArrayList<Token>());\n+    new Statement(new ArrayList<>());\n   }\n \n   @Test"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();",
        "fixed_code": "return f != null ? Arrays.asList(f) : Collections.emptyList();",
        "patch": "@@ -53,7 +53,7 @@ public Iterable<InputFile> get(Index index) {\n       return Collections.emptyList();\n     }\n     InputFile f = index.inputFile(relative);\n-    return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();\n+    return f != null ? Arrays.asList(f) : Collections.emptyList();\n   }\n \n   @Override"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();",
        "fixed_code": "return f != null ? Arrays.asList(f) : Collections.emptyList();",
        "patch": "@@ -55,7 +55,7 @@ public Iterable<InputFile> get(Index index) {\n       return Collections.emptyList();\n     }\n     InputFile f = index.inputFile(relative.get());\n-    return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();\n+    return f != null ? Arrays.asList(f) : Collections.emptyList();\n   }\n \n   @Override"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "return (long) Math.abs(new Random().nextInt(2_000_000));",
        "fixed_code": "return Math.abs(new Random().nextInt(2_000_000));",
        "patch": "@@ -66,6 +66,6 @@ public long now() {\n   }\n \n   private static long randomInitialValue() {\n-    return (long) Math.abs(new Random().nextInt(2_000_000));\n+    return Math.abs(new Random().nextInt(2_000_000));\n   }\n }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void testEqualsAndHashCode() throws Exception {",
        "fixed_code": "public void testEqualsAndHashCode() {",
        "patch": "@@ -47,7 +47,7 @@ public void test() throws Exception {\n   }\n \n   @Test\n-  public void testEqualsAndHashCode() throws Exception {\n+  public void testEqualsAndHashCode() {\n     DefaultInputDir inputDir1 = new DefaultInputDir(\"ABCDE\", \"src\");\n \n     DefaultInputDir inputDir2 = new DefaultInputDir(\"ABCDE\", \"src\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "class TestClass {",
        "fixed_code": "static class TestClass {",
        "patch": "@@ -43,7 +43,7 @@ public void describe() {\n     assertThat(ScannerUtils.describe(new TestClass())).isEqualTo(\"overridden\");\n   }\n \n-  class TestClass {\n+  static class TestClass {\n     @Override\n     public String toString() {\n       return \"overridden\";"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "OVERALL;",
        "fixed_code": "OVERALL",
        "patch": "@@ -30,6 +30,6 @@ public enum CoverageType {\n \n   UNIT,\n   IT,\n-  OVERALL;\n+  OVERALL\n \n }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "measure.booleanValue = requireNonNull(booleanValue, \"Value cannot be null\");",
        "fixed_code": "measure.booleanValue = booleanValue;",
        "patch": "@@ -60,7 +60,7 @@ public static TestMeasure createMeasure(String stringValue) {\n \n   public static TestMeasure createMeasure(boolean booleanValue) {\n     TestMeasure measure = new TestMeasure();\n-    measure.booleanValue = requireNonNull(booleanValue, \"Value cannot be null\");\n+    measure.booleanValue = booleanValue;\n     return measure;\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "sb.append(Boolean.toString(multiple));",
        "fixed_code": "sb.append(multiple);",
        "patch": "@@ -64,7 +64,7 @@ private RuleParamType(String type, boolean multiple, String... values) {\n     if (multiple) {\n       sb.append(OPTION_SEPARATOR);\n       sb.append(MULTIPLE_PARAM + PARAMETER_SEPARATOR);\n-      sb.append(Boolean.toString(multiple));\n+      sb.append(multiple);\n     }\n     if (values.length > 0) {\n       sb.append(OPTION_SEPARATOR);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "A1, A2, A3, A4, A5, A6, A7, A8, A9, A10;",
        "fixed_code": "A1, A2, A3, A4, A5, A6, A7, A8, A9, A10",
        "patch": "@@ -499,7 +499,7 @@ interface NewRepository extends NewExtendedRepository {\n   }\n \n   enum OwaspTop10 {\n-    A1, A2, A3, A4, A5, A6, A7, A8, A9, A10;\n+    A1, A2, A3, A4, A5, A6, A7, A8, A9, A10\n   }\n \n   interface ExtendedRepository {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public Rule answer(InvocationOnMock iom) throws Throwable {",
        "fixed_code": "public Rule answer(InvocationOnMock iom) {",
        "patch": "@@ -92,7 +92,7 @@ private String getResourcePath(String resource) {\n   private RuleFinder newRuleFinder() {\n     RuleFinder ruleFinder = mock(RuleFinder.class);\n     when(ruleFinder.findByKey(anyString(), anyString())).thenAnswer(new Answer<Rule>() {\n-      public Rule answer(InvocationOnMock iom) throws Throwable {\n+      public Rule answer(InvocationOnMock iom) {\n         Rule rule = Rule.create((String) iom.getArguments()[0], (String) iom.getArguments()[1], (String) iom.getArguments()[1]);\n         rule.createParameter(\"format\");\n         rule.createParameter(\"message\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private void assertSimilarXml(String fileWithExpectedXml, String xml) throws IOException, SAXException {",
        "fixed_code": "private void assertSimilarXml(String fileWithExpectedXml, String xml) throws IOException {",
        "patch": "@@ -70,7 +70,7 @@ public void exportRuleParameters() throws IOException, SAXException {\n     assertSimilarXml(\"exportRuleParameters.xml\", writer.toString());\n   }\n \n-  private void assertSimilarXml(String fileWithExpectedXml, String xml) throws IOException, SAXException {\n+  private void assertSimilarXml(String fileWithExpectedXml, String xml) throws IOException {\n     String pathToExpectedXml = \"XMLProfileSerializerTest/\" + fileWithExpectedXml;\n     assertThat(xml).isXmlEqualTo(IOUtils.toString(getClass().getResource(pathToExpectedXml)));\n   }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "class TooLongKeyLanguage extends AbstractLanguage {",
        "fixed_code": "static class TooLongKeyLanguage extends AbstractLanguage {",
        "patch": "@@ -69,7 +69,7 @@ public void should_not_define_language_with_too_long_key() {\n     new TooLongKeyLanguage();\n   }\n \n-  class TooLongKeyLanguage extends AbstractLanguage {\n+  static class TooLongKeyLanguage extends AbstractLanguage {\n     public TooLongKeyLanguage() {\n       super(\"aKeyWhichIsVeryVeryVeryVeryVeryLong\");\n     }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class FakeProfile implements BuiltInQualityProfilesDefinition {",
        "fixed_code": "private static class FakeProfile implements BuiltInQualityProfilesDefinition {",
        "patch": "@@ -158,7 +158,7 @@ private Map<String, Map<String, BuiltInQualityProfile>> define(Consumer<BuiltInQ\n     return context.profilesByLanguageAndName();\n   }\n \n-  private class FakeProfile implements BuiltInQualityProfilesDefinition {\n+  private static class FakeProfile implements BuiltInQualityProfilesDefinition {\n \n     private Consumer<Context> consumer;\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "assertThat(convert(Collections.<String>emptyList())).isEqualTo(RuleType.CODE_SMELL);",
        "fixed_code": "assertThat(convert(Collections.emptyList())).isEqualTo(RuleType.CODE_SMELL);",
        "patch": "@@ -45,7 +45,7 @@ public void type_is_vulnerability_if_has_tag_security() {\n   @Test\n   public void default_is_code_smell() {\n     assertThat(convert(asList(\"clumsy\", \"spring\"))).isEqualTo(RuleType.CODE_SMELL);\n-    assertThat(convert(Collections.<String>emptyList())).isEqualTo(RuleType.CODE_SMELL);\n+    assertThat(convert(Collections.emptyList())).isEqualTo(RuleType.CODE_SMELL);\n   }\n \n   @Test"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void test_levels() throws Exception {",
        "fixed_code": "public void test_levels() {",
        "patch": "@@ -33,7 +33,7 @@ public class DefaultProfilerTest {\n   Profiler underTest = Profiler.create(Loggers.get(\"DefaultProfilerTest\"));\n \n   @Test\n-  public void test_levels() throws Exception {\n+  public void test_levels() {\n     // info by default\n     assertThat(underTest.isDebugEnabled()).isFalse();\n     assertThat(underTest.isTraceEnabled()).isFalse();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "ERROR, WARN, INFO, DEBUG, TRACE;",
        "fixed_code": "ERROR, WARN, INFO, DEBUG, TRACE",
        "patch": "@@ -29,6 +29,6 @@ public interface LogOutput {\n   void log(String formattedMessage, Level level);\n \n   enum Level {\n-    ERROR, WARN, INFO, DEBUG, TRACE;\n+    ERROR, WARN, INFO, DEBUG, TRACE\n   }\n }"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private final void loadFileContentPatterns() {",
        "fixed_code": "private void loadFileContentPatterns() {",
        "patch": "@@ -49,7 +49,7 @@ public boolean hasConfiguredPatterns() {\n     return hasFileContentPattern() || hasMulticriteriaPatterns();\n   }\n \n-  private final void loadFileContentPatterns() {\n+  private void loadFileContentPatterns() {\n     // Patterns Block\n     blockPatterns = new ArrayList<>();\n     for (String id : getSettings().getStringArray(IssueExclusionProperties.PATTERNS_BLOCK_KEY)) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "UNSUPPORTED_PROPS_FOR_MODULES.stream().forEach(p -> {",
        "fixed_code": "UNSUPPORTED_PROPS_FOR_MODULES.forEach(p -> {",
        "patch": "@@ -185,7 +185,7 @@ protected ProjectDefinition createModuleDefinition(Map<String, String> modulePro\n   }\n \n   private void checkUnsupportedIssueExclusions(Map<String, String> moduleProperties, Map<String, String> parentProps) {\n-    UNSUPPORTED_PROPS_FOR_MODULES.stream().forEach(p -> {\n+    UNSUPPORTED_PROPS_FOR_MODULES.forEach(p -> {\n       if (moduleProperties.containsKey(p) && !Objects.equals(moduleProperties.get(p), parentProps.get(p))) {\n         warnOnceUnsupportedIssueExclusions(\n           \"Specifying issue exclusions at module level is not supported anymore. Configure the property '\" + p + \"' and any other issue exclusions at project level.\");"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "executor.saveDuplications(batchComponent1, Collections.<CloneGroup>emptyList());",
        "fixed_code": "executor.saveDuplications(batchComponent1, Collections.emptyList());",
        "patch": "@@ -101,7 +101,7 @@ public void setUp() throws IOException {\n \n   @Test\n   public void dont_fail_if_nothing_to_save() {\n-    executor.saveDuplications(batchComponent1, Collections.<CloneGroup>emptyList());\n+    executor.saveDuplications(batchComponent1, Collections.emptyList());\n     assertThat(reader.readComponentDuplications(batchComponent1.scannerId())).isExhausted();\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private void parseCoverageReportFile(String reportLocation) throws Exception {",
        "fixed_code": "private void parseCoverageReportFile(String reportLocation) {",
        "patch": "@@ -222,7 +222,7 @@ private void parseCoverageReport(String string) throws Exception {\n     new GenericCoverageReportParser().parse(report, context);\n   }\n \n-  private void parseCoverageReportFile(String reportLocation) throws Exception {\n+  private void parseCoverageReportFile(String reportLocation) {\n     new GenericCoverageReportParser().parse(new File(reportLocation), context);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private class XooPluginWithBuilder extends XooPlugin {",
        "fixed_code": "private static class XooPluginWithBuilder extends XooPlugin {",
        "patch": "@@ -63,7 +63,7 @@ public class ProjectBuilderMediumTest {\n     .addDefaultQProfile(\"xoo\", \"Sonar Way\")\n     .addActiveRule(\"xoo\", \"OneIssuePerLine\", null, \"One issue per line\", \"MAJOR\", \"OneIssuePerLine.internal\", \"xoo\");\n \n-  private class XooPluginWithBuilder extends XooPlugin {\n+  private static class XooPluginWithBuilder extends XooPlugin {\n     private ProjectBuilder builder;\n \n     XooPluginWithBuilder(ProjectBuilder builder) {"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "private File prepareProject() throws IOException, URISyntaxException {",
        "fixed_code": "private File prepareProject() throws IOException {",
        "patch": "@@ -317,7 +317,7 @@ private String getNonAsciiAuthor() {\n \n   }\n \n-  private File prepareProject() throws IOException, URISyntaxException {\n+  private File prepareProject() throws IOException {\n     File baseDir = temp.getRoot();\n     File srcDir = new File(baseDir, \"src\");\n     srcDir.mkdir();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void deserializeResponse() throws IOException {",
        "fixed_code": "public void deserializeResponse() {",
        "patch": "@@ -101,7 +101,7 @@ public void failFastHttpErrorMessageException() {\n   }\n \n   @Test\n-  public void deserializeResponse() throws IOException {\n+  public void deserializeResponse() {\n     loader.load(PROJECT_KEY, null);\n   }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void load_throws_MessageException_if_organization_is_not_found_after_trying_default() throws IOException {",
        "fixed_code": "public void load_throws_MessageException_if_organization_is_not_found_after_trying_default() {",
        "patch": "@@ -106,7 +106,7 @@ public void load_throws_MessageException_if_no_profiles_are_available_for_specif\n   }\n \n   @Test\n-  public void load_throws_MessageException_if_organization_is_not_found_after_trying_default() throws IOException {\n+  public void load_throws_MessageException_if_organization_is_not_found_after_trying_default() {\n     HttpException e = new HttpException(\"\", 404, \"{\\\"errors\\\":[{\\\"msg\\\":\\\"No organization with key 'myorg'\\\"}]}\");\n     WsTestUtil.mockException(wsClient, e);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "InputStream is = ByteSource.wrap(new String(\"trash\").getBytes()).openBufferedStream();",
        "fixed_code": "InputStream is = ByteSource.wrap(\"trash\".getBytes()).openBufferedStream();",
        "patch": "@@ -50,7 +50,7 @@ public void testParseServerResponse() throws IOException {\n   @Test\n   public void testError() throws IOException {\n     DefaultScannerWsClient wsClient = mock(DefaultScannerWsClient.class);\n-    InputStream is = ByteSource.wrap(new String(\"trash\").getBytes()).openBufferedStream();\n+    InputStream is = ByteSource.wrap(\"trash\".getBytes()).openBufferedStream();\n     WsTestUtil.mockStream(wsClient, is);\n     DefaultRulesLoader loader = new DefaultRulesLoader(wsClient);\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void before() throws Exception {",
        "fixed_code": "public void before() {",
        "patch": "@@ -41,7 +41,7 @@ public class QProfileVerifierTest {\n   private QualityProfiles profiles;\n \n   @Before\n-  public void before() throws Exception {\n+  public void before() {\n     store = new InputComponentStore(mock(BranchConfiguration.class));\n     profiles = mock(QualityProfiles.class);\n     QProfile javaProfile = new QProfile(\"p1\", \"My Java profile\", \"java\", null);"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "class MyProjectBuilder extends ProjectBuilder {",
        "fixed_code": "static class MyProjectBuilder extends ProjectBuilder {",
        "patch": "@@ -64,7 +64,7 @@ public void testProjectBuilderFailsWithoutToString() {\n     new ProjectBuildersExecutor(projectBuilders).execute(reactor);\n   }\n \n-  class MyProjectBuilder extends ProjectBuilder {\n+  static class MyProjectBuilder extends ProjectBuilder {\n     @Override\n     public void build(Context context) {\n       throw new IllegalStateException();"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "InputComponentStoreTester() throws IOException {",
        "fixed_code": "InputComponentStoreTester() {",
        "patch": "@@ -95,7 +95,7 @@ public void should_add_input_file() throws Exception {\n   }\n \n   static class InputComponentStoreTester extends InputComponentStore {\n-    InputComponentStoreTester() throws IOException {\n+    InputComponentStoreTester() {\n       super(mock(BranchConfiguration.class));\n     }\n "
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void testExtractDefaultBundleName() throws Exception {",
        "fixed_code": "public void testExtractDefaultBundleName() {",
        "patch": "@@ -104,7 +104,7 @@ public void testGetDefaultBundleFileFromClasspath() {\n   }\n \n   @Test\n-  public void testExtractDefaultBundleName() throws Exception {\n+  public void testExtractDefaultBundleName() {\n     // OK\n     assertThat(BundleSynchronizedMatcher.extractDefaultBundleName(\"myPlugin_fr.properties\"), is(\"myPlugin.properties\"));\n     assertThat(BundleSynchronizedMatcher.extractDefaultBundleName(\"myPlugin_fr_QB.properties\"), is(\"myPlugin.properties\"));"
    },
    {
        "commit_id": "d1fd889554bccbb50122550899dbb66b90b04f78",
        "commit_message": "Fix code quality issues and reduce dependency on Guava",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1fd889554bccbb50122550899dbb66b90b04f78",
        "buggy_code": "public void test_exception() throws Exception {",
        "fixed_code": "public void test_exception() {",
        "patch": "@@ -25,7 +25,7 @@\n \n public class HttpExceptionTest {\n   @Test\n-  public void test_exception() throws Exception {\n+  public void test_exception() {\n     HttpException exception = new HttpException(\"http://localhost:9000/api/search\", 500, \"error\");\n     assertThat(exception.code()).isEqualTo(500);\n     assertThat(exception.url()).isEqualTo(\"http://localhost:9000/api/search\");"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "|| !metadata.getMergeBranchName().isEmpty()",
        "fixed_code": "|| !metadata.getReferenceBranchName().isEmpty()",
        "patch": "@@ -52,7 +52,7 @@ public void load(ScannerReport.Metadata metadata) {\n   private static boolean hasBranchProperties(ScannerReport.Metadata metadata) {\n     return !metadata.getBranchName().isEmpty()\n       || !metadata.getPullRequestKey().isEmpty()\n-      || !metadata.getMergeBranchName().isEmpty()\n+      || !metadata.getReferenceBranchName().isEmpty()\n       || metadata.getBranchType() != UNSET;\n   }\n "
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "dto.setMergeBranchUuid(branch.getMergeBranchUuid());",
        "fixed_code": "dto.setMergeBranchUuid(branch.getReferenceBranchUuid());",
        "patch": "@@ -87,7 +87,7 @@ protected BranchDto toBranchDto(ComponentDto componentDto, Branch branch, boolea\n \n     // merge branch is only present if it's not a main branch and not an application\n     if (!branch.isMain() && !Qualifiers.APP.equals(componentDto.qualifier())) {\n-      dto.setMergeBranchUuid(branch.getMergeBranchUuid());\n+      dto.setMergeBranchUuid(branch.getReferenceBranchUuid());\n     }\n \n     if (branch.getType() == BranchType.PULL_REQUEST) {"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "public String getMergeBranchUuid() {",
        "fixed_code": "public String getReferenceBranchUuid() {",
        "patch": "@@ -50,7 +50,7 @@ public boolean isMain() {\n   }\n \n   @Override\n-  public String getMergeBranchUuid() {\n+  public String getReferenceBranchUuid() {\n     throw new IllegalStateException(\"Not valid for the main branch\");\n   }\n "
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "this.originalKey = requireNonNull(originalKey, \"projectKey can't be null\");;",
        "fixed_code": "this.originalKey = requireNonNull(originalKey, \"projectKey can't be null\");",
        "patch": "@@ -35,7 +35,7 @@ public class ProjectViewAttributes {\n \n   public ProjectViewAttributes(String projectUuid, String originalKey, @Nullable Long analysisDate, @Nullable String branchName) {\n     this.projectUuid = requireNonNull(projectUuid, \"projectUuid can't be null\");\n-    this.originalKey = requireNonNull(originalKey, \"projectKey can't be null\");;\n+    this.originalKey = requireNonNull(originalKey, \"projectKey can't be null\");\n     this.analysisDate = analysisDate;\n     this.branchName = branchName;\n   }"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "public String getMergeBranchUuid() {",
        "fixed_code": "public String getReferenceBranchUuid() {",
        "patch": "@@ -289,7 +289,7 @@ public boolean isMain() {\n       }\n \n       @Override\n-      public String getMergeBranchUuid() {\n+      public String getReferenceBranchUuid() {\n         throw new UnsupportedOperationException();\n       }\n "
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "when(branch.getMergeBranchUuid()).thenReturn(mergeBranchUuid);",
        "fixed_code": "when(branch.getReferenceBranchUuid()).thenReturn(mergeBranchUuid);",
        "patch": "@@ -224,7 +224,7 @@ private static Branch createBranch(BranchType type, boolean isMain, String name,\n     when(branch.getType()).thenReturn(type);\n     when(branch.getName()).thenReturn(name);\n     when(branch.isMain()).thenReturn(isMain);\n-    when(branch.getMergeBranchUuid()).thenReturn(mergeBranchUuid);\n+    when(branch.getReferenceBranchUuid()).thenReturn(mergeBranchUuid);\n     when(branch.getTargetBranchName()).thenReturn(mergeBranchUuid);\n     return branch;\n   }"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "public String getMergeBranchUuid() {",
        "fixed_code": "public String getReferenceBranchUuid() {",
        "patch": "@@ -671,7 +671,7 @@ public boolean isMain() {\n     }\n \n     @Override\n-    public String getMergeBranchUuid() {\n+    public String getReferenceBranchUuid() {\n       throw new UnsupportedOperationException();\n     }\n "
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "when(branch.getMergeBranchUuid()).thenReturn(mergeBranchUuid);",
        "fixed_code": "when(branch.getReferenceBranchUuid()).thenReturn(mergeBranchUuid);",
        "patch": "@@ -101,7 +101,7 @@ public void dont_fail_for_long_forked_from_master_with_modules() {\n   private void setBranch(BranchType type, @Nullable String mergeBranchUuid) {\n     Branch branch = mock(Branch.class);\n     when(branch.getType()).thenReturn(type);\n-    when(branch.getMergeBranchUuid()).thenReturn(mergeBranchUuid);\n+    when(branch.getReferenceBranchUuid()).thenReturn(mergeBranchUuid);\n     analysisMetadataHolder.setBranch(branch);\n   }\n "
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "Long sumNclocOfBiggestLongLivingBranch(",
        "fixed_code": "Long sumNclocOfBiggestBranch(",
        "patch": "@@ -52,7 +52,7 @@ void selectTreeByQuery(\n     @Param(\"baseUuidPath\") String baseUuidPath,\n     ResultHandler<LiveMeasureDto> resultHandler);\n \n-  Long sumNclocOfBiggestLongLivingBranch(\n+  Long sumNclocOfBiggestBranch(\n     @Param(\"ncloc\") String nclocKey,\n     @Param(\"branch\") KeyType branchOrPullRequest,\n     @Param(\"branchType\") BranchType branchType,"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "LONG, SHORT, PULL_REQUEST, BRANCH",
        "fixed_code": "PULL_REQUEST, BRANCH",
        "patch": "@@ -49,7 +49,7 @@ public Type getType() {\n   }\n \n   public enum Type {\n-    LONG, SHORT, PULL_REQUEST, BRANCH\n+    PULL_REQUEST, BRANCH\n   }\n \n   @Override"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "data.setNcloc(dbClient.liveMeasureDao().sumNclocOfBiggestLongLivingBranch(dbSession, query));",
        "fixed_code": "data.setNcloc(dbClient.liveMeasureDao().sumNclocOfBiggestBranch(dbSession, query));",
        "patch": "@@ -114,7 +114,7 @@ public TelemetryData load() {\n         .setOnlyPrivateProjects(false)\n         .setOrganizationUuid(defaultOrganizationProvider.get().getUuid())\n         .build();\n-      data.setNcloc(dbClient.liveMeasureDao().sumNclocOfBiggestLongLivingBranch(dbSession, query));\n+      data.setNcloc(dbClient.liveMeasureDao().sumNclocOfBiggestBranch(dbSession, query));\n     }\n \n     Optional<String> installationDateProperty = internalProperties.read(InternalProperties.INSTALLATION_DATE);"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": ".setDescription(\"List the New Code Periods for all long lived branches in a project.<br>\" +",
        "fixed_code": ".setDescription(\"List the New Code Periods for all branches in a project.<br>\" +",
        "patch": "@@ -66,7 +66,7 @@ public ListAction(DbClient dbClient, UserSession userSession, ComponentFinder co\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"list\")\n-      .setDescription(\"List the New Code Periods for all long lived branches in a project.<br>\" +\n+      .setDescription(\"List the New Code Periods for all branches in a project.<br>\" +\n         \"Requires the permission to browse the project\")\n       .setSince(\"8.0\")\n       .setResponseExample(getClass().getResource(\"list-example.json\"))"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": ".setDescription(\"Set an analysis as the baseline of the New Code Period on a project or a long-lived branch.<br/>\" +",
        "fixed_code": ".setDescription(\"Set an analysis as the baseline of the New Code Period on a project or a branch.<br/>\" +",
        "patch": "@@ -60,7 +60,7 @@ public SetBaselineAction(DbClient dbClient, UserSession userSession, ComponentFi\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"set_baseline\")\n-      .setDescription(\"Set an analysis as the baseline of the New Code Period on a project or a long-lived branch.<br/>\" +\n+      .setDescription(\"Set an analysis as the baseline of the New Code Period on a project or a branch.<br/>\" +\n         \"This manually set baseline.<br/>\" +\n         \"Requires one of the following permissions:\" +\n         \"<ul>\" +"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": ".setDescription(\"Unset any manually-set New Code Period baseline on a project or a long-lived branch.<br/>\" +",
        "fixed_code": ".setDescription(\"Unset any manually-set New Code Period baseline on a project or a branch.<br/>\" +",
        "patch": "@@ -53,7 +53,7 @@ public UnsetBaselineAction(DbClient dbClient, UserSession userSession, Component\n   @Override\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"unset_baseline\")\n-      .setDescription(\"Unset any manually-set New Code Period baseline on a project or a long-lived branch.<br/>\" +\n+      .setDescription(\"Unset any manually-set New Code Period baseline on a project or a branch.<br/>\" +\n         \"Unsetting a manual baseline restores the use of the default new code period setting.<br/>\" +\n         \"Requires one of the following permissions:\" +\n         \"<ul>\" +"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "return dbClient.liveMeasureDao().sumNclocOfBiggestLongLivingBranch(dbSession, query);",
        "fixed_code": "return dbClient.liveMeasureDao().sumNclocOfBiggestBranch(dbSession, query);",
        "patch": "@@ -75,7 +75,7 @@ private long computeNcloc() {\n         .setOnlyPrivateProjects(false)\n         .setOrganizationUuid(defaultOrganizationProvider.get().getUuid())\n         .build();\n-      return dbClient.liveMeasureDao().sumNclocOfBiggestLongLivingBranch(dbSession, query);\n+      return dbClient.liveMeasureDao().sumNclocOfBiggestBranch(dbSession, query);\n     }\n   }\n }"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "public void measure_on_long_living_branch() {",
        "fixed_code": "public void measure_on_non_main_branch() {",
        "patch": "@@ -215,7 +215,7 @@ public void display_deprecated_warning_quality_gate() {\n   }\n \n   @Test\n-  public void measure_on_long_living_branch() {\n+  public void measure_on_non_main_branch() {\n     ComponentDto project = db.components().insertMainBranch(p -> p.setPrivate(false));\n     userSession.registerComponents(project);\n     MetricDto metric = db.measures().insertMetric(m -> m.setKey(BUGS_KEY).setValueType(INT.name()));"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "public void set_baseline_on_long_living_branch() {",
        "fixed_code": "public void set_baseline_on_non_main_branch() {",
        "patch": "@@ -105,7 +105,7 @@ public static Object[][] nullOrEmpty() {\n   }\n \n   @Test\n-  public void set_baseline_on_long_living_branch() {\n+  public void set_baseline_on_non_main_branch() {\n     ComponentDto project = ComponentTesting.newPrivateProjectDto(db.organizations().insert());\n     BranchDto branch = ComponentTesting.newBranchDto(project.projectUuid(), BranchType.BRANCH);\n     db.components().insertProjectBranch(project, branch);"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "LONG, SHORT, BRANCH, PULL_REQUEST",
        "fixed_code": "BRANCH, PULL_REQUEST",
        "patch": "@@ -27,7 +27,7 @@\n public interface Branch {\n \n   enum Type {\n-    LONG, SHORT, BRANCH, PULL_REQUEST\n+    BRANCH, PULL_REQUEST\n   }\n \n   boolean isMain();"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "builder.setMergeBranchName(referenceBranch);",
        "fixed_code": "builder.setReferenceBranchName(referenceBranch);",
        "patch": "@@ -158,7 +158,7 @@ private void addBranchInformation(ScannerReport.Metadata.Builder builder) {\n     builder.setBranchType(branchType);\n     String referenceBranch = branchConfiguration.referenceBranchName();\n     if (referenceBranch != null) {\n-      builder.setMergeBranchName(referenceBranch);\n+      builder.setReferenceBranchName(referenceBranch);\n     }\n     String targetBranchName = branchConfiguration.targetBranchName();\n     if (targetBranchName != null) {"
    },
    {
        "commit_id": "ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "commit_message": "SONAR-12673 Fix issue management",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebdae1d5b7916abb7e919c560b04841f0dfd21c6",
        "buggy_code": "assertThat(metadata.getMergeBranchName()).isEmpty();",
        "fixed_code": "assertThat(metadata.getReferenceBranchName()).isEmpty();",
        "patch": "@@ -236,7 +236,7 @@ public void write_branch_info() throws Exception {\n     ScannerReport.Metadata metadata = reader.readMetadata();\n     assertThat(metadata.getBranchName()).isEqualTo(branchName);\n     assertThat(metadata.getBranchType()).isEqualTo(ScannerReport.Metadata.BranchType.BRANCH);\n-    assertThat(metadata.getMergeBranchName()).isEmpty();\n+    assertThat(metadata.getReferenceBranchName()).isEmpty();\n     assertThat(metadata.getTargetBranchName()).isEqualTo(targetName);\n   }\n "
    },
    {
        "commit_id": "0dcc152f6804e619c042cea729c166c37e897607",
        "commit_message": "SONAR-12736 Fix loading of QProfile using deprecated rule keys",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0dcc152f6804e619c042cea729c166c37e897607",
        "buggy_code": "builder.addRule(rule, ruleDefinition.getId());",
        "fixed_code": "builder.addRule(new BuiltInQProfile.ActiveRule(ruleDefinition.getId(), rule));",
        "patch": "@@ -95,7 +95,7 @@ public BuiltInQProfile create(BuiltInQualityProfilesDefinition.BuiltInQualityPro\n       RuleKey ruleKey = RuleKey.of(rule.repoKey(), rule.ruleKey());\n       RuleDefinitionDto ruleDefinition = rulesByRuleKey.get(ruleKey);\n       Preconditions.checkState(ruleDefinition != null, \"Rule '%s' not found\", ruleKey);\n-      builder.addRule(rule, ruleDefinition.getId());\n+      builder.addRule(new BuiltInQProfile.ActiveRule(ruleDefinition.getId(), rule));\n     });\n     return builder\n       .build();"
    },
    {
        "commit_id": "9cf2e943944b8c11a775ff91871bbf63641aa668",
        "commit_message": "SONAR-12512 SONAR-12514 SONAR-12515 Fix ordering of lists WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9cf2e943944b8c11a775ff91871bbf63641aa668",
        "buggy_code": "long getCreatedAt() {",
        "fixed_code": "public long getCreatedAt() {",
        "patch": "@@ -155,7 +155,7 @@ void setUpdatedAt(long updatedAt) {\n     this.updatedAt = updatedAt;\n   }\n \n-  long getCreatedAt() {\n+  public long getCreatedAt() {\n     return createdAt;\n   }\n "
    },
    {
        "commit_id": "9cb64b2772e551ca81632ae8b1798456853bdd76",
        "commit_message": "Improve plugin incompatibility error messages",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9cb64b2772e551ca81632ae8b1798456853bdd76",
        "buggy_code": "throw MessageException.of(format(\"Plugins '%s' are no more compatible with SonarQube\", String.join(\", \", noMoreCompatiblePluginNames)));",
        "fixed_code": "throw MessageException.of(format(\"Plugins '%s' are no longer compatible with this version of SonarQube. Refer to https://docs.sonarqube.org/latest/instance-administration/plugin-version-matrix/\", String.join(\", \", noMoreCompatiblePluginNames)));",
        "patch": "@@ -110,7 +110,7 @@ private void failWhenNoMoreCompatiblePlugins() {\n       .map(PluginInfo::getName)\n       .collect(Collectors.toCollection(TreeSet::new));\n     if (!noMoreCompatiblePluginNames.isEmpty()) {\n-      throw MessageException.of(format(\"Plugins '%s' are no more compatible with SonarQube\", String.join(\", \", noMoreCompatiblePluginNames)));\n+      throw MessageException.of(format(\"Plugins '%s' are no longer compatible with this version of SonarQube. Refer to https://docs.sonarqube.org/latest/instance-administration/plugin-version-matrix/\", String.join(\", \", noMoreCompatiblePluginNames)));\n     }\n   }\n "
    },
    {
        "commit_id": "933b1ba56d517d71c03e917fd02d249363422829",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/933b1ba56d517d71c03e917fd02d249363422829",
        "buggy_code": "public Rule setSeverity(RulePriority severity) {",
        "fixed_code": "public Rule setSeverity(@Nullable RulePriority severity) {",
        "patch": "@@ -226,7 +226,7 @@ public RulePriority getSeverity() {\n    * @param severity severity to set, if null, uses the default priority.\n    * @since 2.5\n    */\n-  public Rule setSeverity(RulePriority severity) {\n+  public Rule setSeverity(@Nullable RulePriority severity) {\n     if (severity == null) {\n       this.priority = DEFAULT_PRIORITY;\n     } else {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private String[] outputMetrics;",
        "fixed_code": "private String[] outputMetrics = null;",
        "patch": "@@ -84,7 +84,7 @@ public static class BuilderImpl implements Builder {\n \n     private String[] inputMetricKeys = new String[] {};\n     @CheckForNull\n-    private String[] outputMetrics;\n+    private String[] outputMetrics = null;\n \n     @Override\n     public Builder setInputMetrics(String... inputMetrics) {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private File directory;",
        "fixed_code": "private File directory = null;",
        "patch": "@@ -24,7 +24,7 @@\n \n public class BatchReportDirectoryHolderImpl implements MutableBatchReportDirectoryHolder {\n \n-  private File directory;\n+  private File directory = null;\n \n   @Override\n   public void setDirectory(File newDirectory) {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private ScannerReport.Component reportComponent;",
        "fixed_code": "private ScannerReport.Component reportComponent = null;",
        "patch": "@@ -351,7 +351,7 @@ private static FileAttributes createFileAttributes(ScannerReport.Component compo\n \n   private static class Node {\n     private final Map<String, Node> children = new LinkedHashMap<>();\n-    private ScannerReport.Component reportComponent;\n+    private ScannerReport.Component reportComponent = null;\n \n     private Map<String, Node> children() {\n       return children;"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private Set<String> uuids;",
        "fixed_code": "private Set<String> uuids = null;",
        "patch": "@@ -25,7 +25,7 @@\n \n public class DisabledComponentsHolderImpl implements MutableDisabledComponentsHolder {\n \n-  private Set<String> uuids;\n+  private Set<String> uuids = null;\n \n   @Override\n   public Set<String> getUuids() {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private DefaultTempFolder tempFolder;",
        "fixed_code": "private DefaultTempFolder tempFolder = null;",
        "patch": "@@ -38,7 +38,7 @@\n public class ComputationTempFolderProvider extends ProviderAdapter implements ComponentLifecycle<TempFolder> {\n   private boolean started = false;\n   @CheckForNull\n-  private DefaultTempFolder tempFolder;\n+  private DefaultTempFolder tempFolder = null;\n \n   public TempFolder provide(ServerFileSystem fs) {\n     if (this.tempFolder == null) {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private String currentPluginKey;",
        "fixed_code": "private String currentPluginKey = null;",
        "patch": "@@ -36,7 +36,7 @@\n \n public class RulesDefinitionContext extends RulesDefinition.Context {\n   private final Map<String, RulesDefinition.Repository> repositoriesByKey = new HashMap<>();\n-  private String currentPluginKey;\n+  private String currentPluginKey = null;\n \n   @Override\n   public RulesDefinition.NewRepository createRepository(String key, String language) {"
    },
    {
        "commit_id": "ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "commit_message": "fix missing class constructor (mostly GSon serialized classes)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab6fd46a1f0936c3d8e05ada5b984819dae4283b",
        "buggy_code": "private String currentPluginKey;",
        "fixed_code": "private String currentPluginKey = null;",
        "patch": "@@ -359,7 +359,7 @@ private SubCharacteristics() {\n    */\n   class Context extends AbstractContext {\n     private final Map<String, Repository> repositoriesByKey = new HashMap<>();\n-    private String currentPluginKey;\n+    private String currentPluginKey = null;\n \n     @Override\n     public RulesDefinition.NewRepository createRepository(String key, String language) {"
    },
    {
        "commit_id": "7d2b20e368c4d680bf40b1b5b1b48fad8f205fab",
        "commit_message": "fix missing package-info.java files",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d2b20e368c4d680bf40b1b5b1b48fad8f205fab",
        "buggy_code": "package org.sonar.server.user;",
        "fixed_code": "package org.sonar.api.rules;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.server.user;\n+package org.sonar.api.rules;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "commit_message": "fix some quality flaws on the new code period",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "buggy_code": "private Map<Integer, List<ExportRuleParamDto>> selectParamsByActiveRuleIds(DbSession dbSession, Collection<Integer> activeRuleIds) {",
        "fixed_code": "private static Map<Integer, List<ExportRuleParamDto>> selectParamsByActiveRuleIds(DbSession dbSession, Collection<Integer> activeRuleIds) {",
        "patch": "@@ -44,7 +44,7 @@ public List<ExportRuleDto> selectRulesByProfile(DbSession dbSession, QProfileDto\n     return exportRules;\n   }\n \n-  private Map<Integer, List<ExportRuleParamDto>> selectParamsByActiveRuleIds(DbSession dbSession, Collection<Integer> activeRuleIds) {\n+  private static Map<Integer, List<ExportRuleParamDto>> selectParamsByActiveRuleIds(DbSession dbSession, Collection<Integer> activeRuleIds) {\n     return executeLargeInputs(activeRuleIds, ids -> mapper(dbSession).selectParamsByActiveRuleIds(ids))\n       .stream()\n       .collect(Collectors.groupingBy(ExportRuleParamDto::getActiveRuleId));"
    },
    {
        "commit_id": "140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "commit_message": "fix some quality flaws on the new code period",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "buggy_code": "log4JPropertiesBuilder.configureGlobalStdoutLog(config, logPattern);",
        "fixed_code": "log4JPropertiesBuilder.configureGlobalStdoutLog(logPattern);",
        "patch": "@@ -41,7 +41,7 @@ public Properties createProperties(Props props, File logDir) {\n     log4JPropertiesBuilder.internalLogLevel(Level.ERROR);\n     log4JPropertiesBuilder.configureGlobalFileLog(config, logDir, logPattern);\n     if (isAllLogsToConsoleEnabled(props)) {\n-      log4JPropertiesBuilder.configureGlobalStdoutLog(config, logPattern);\n+      log4JPropertiesBuilder.configureGlobalStdoutLog(logPattern);\n     }\n     log4JPropertiesBuilder.apply(\n       LogLevelConfig.newBuilder(log4JPropertiesBuilder.getRootLoggerName())"
    },
    {
        "commit_id": "140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "commit_message": "fix some quality flaws on the new code period",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "buggy_code": "underTest.configureGlobalStdoutLog(esRootLoggerConfig, logPattern);",
        "fixed_code": "underTest.configureGlobalStdoutLog(logPattern);",
        "patch": "@@ -275,7 +275,7 @@ public void configureGlobalFileLog_sets_properties_for_no_rolling_policy_when_pr\n   public void name() {\n     String logPattern = randomAlphanumeric(15);\n     Log4JPropertiesBuilder underTest = newLog4JPropertiesBuilder();\n-    underTest.configureGlobalStdoutLog(esRootLoggerConfig, logPattern);\n+    underTest.configureGlobalStdoutLog(logPattern);\n \n     verifyProperties(underTest.get(),\n       \"appender.stdout.type\", \"Console\","
    },
    {
        "commit_id": "140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "commit_message": "fix some quality flaws on the new code period",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "buggy_code": "this.organizationUuid = requireNonNull(organizationUuid);",
        "fixed_code": "this.organizationUuid = requireNonNull(organizationUuid, \"organizationUuid can't be null\");",
        "patch": "@@ -41,7 +41,7 @@ public class GroupIdOrAnyone {\n \n   private GroupIdOrAnyone(String organizationUuid, @Nullable Integer id) {\n     this.id = id;\n-    this.organizationUuid = requireNonNull(organizationUuid);\n+    this.organizationUuid = requireNonNull(organizationUuid, \"organizationUuid can't be null\");\n   }\n \n   public boolean isAnyone() {"
    },
    {
        "commit_id": "140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "commit_message": "fix some quality flaws on the new code period",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/140e84fbdfd4ec9ddc15a7574d984ff1c059f6a0",
        "buggy_code": "private Organizations.PreventUserDeletionWsResponse buildResponse(List<OrganizationDto> organizations) {",
        "fixed_code": "private static Organizations.PreventUserDeletionWsResponse buildResponse(List<OrganizationDto> organizations) {",
        "patch": "@@ -68,7 +68,7 @@ public void handle(Request request, Response response) throws Exception {\n     }\n   }\n \n-  private Organizations.PreventUserDeletionWsResponse buildResponse(List<OrganizationDto> organizations) {\n+  private static Organizations.PreventUserDeletionWsResponse buildResponse(List<OrganizationDto> organizations) {\n     Organizations.PreventUserDeletionWsResponse.Builder response = Organizations.PreventUserDeletionWsResponse.newBuilder();\n     Organizations.PreventUserDeletionWsResponse.Organization.Builder wsOrganization = Organizations.PreventUserDeletionWsResponse.Organization.newBuilder();\n     organizations.forEach(o -> {"
    },
    {
        "commit_id": "831fc476ad09259bfbac416f99647630993eb337",
        "commit_message": "Fix UT for components count",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/831fc476ad09259bfbac416f99647630993eb337",
        "buggy_code": "+ 62 // content of DaoModule",
        "fixed_code": "+ 63 // content of DaoModule",
        "patch": "@@ -128,7 +128,7 @@ public void test_real_start() throws IOException {\n       assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize(\n         COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION\n           + 26 // level 1\n-          + 62 // content of DaoModule\n+          + 63 // content of DaoModule\n           + 3 // content of EsModule\n           + 51 // content of CorePropertyDefinitions\n           + 1 // StopFlagContainer"
    },
    {
        "commit_id": "831fc476ad09259bfbac416f99647630993eb337",
        "commit_message": "Fix UT for components count",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/831fc476ad09259bfbac416f99647630993eb337",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 62);",
        "fixed_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 63);",
        "patch": "@@ -30,6 +30,6 @@ public class DaoModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new DaoModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 62);\n+    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 63);\n   }\n }"
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": "void deleteByProjectAndBranch(@Param(\"projectUuid\") String projectUuid, @Param(\"branchUuid\") String branchUuid);",
        "fixed_code": "void deleteByBranch(@Param(\"projectUuid\") String projectUuid, @Param(\"branchUuid\") String branchUuid);",
        "patch": "@@ -34,7 +34,7 @@ public interface NewCodePeriodMapper {\n \n   NewCodePeriodDto selectByProject(String projectUuid);\n \n-  void deleteByProjectAndBranch(@Param(\"projectUuid\") String projectUuid, @Param(\"branchUuid\") String branchUuid);\n+  void deleteByBranch(@Param(\"projectUuid\") String projectUuid, @Param(\"branchUuid\") String branchUuid);\n \n   NewCodePeriodDto selectByBranch(@Param(\"projectUuid\") String projectUuid, @Param(\"branchUuid\") String branchUuid);\n "
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": "manualBaselineAnalysisUuid = Optional.ofNullable(mapper.selectManualBaseline(componentUuid))",
        "fixed_code": "manualBaselineAnalysisUuid = Optional.ofNullable(mapper.selectSpecificAnalysisNewCodePeriod(componentUuid))",
        "patch": "@@ -203,7 +203,7 @@ private ManualBaselineAnalysisFilter(PurgeMapper mapper, String componentUuid) {\n     @Override\n     public boolean test(PurgeableAnalysisDto purgeableAnalysisDto) {\n       if (manualBaselineAnalysisUuid == null) {\n-        manualBaselineAnalysisUuid = Optional.ofNullable(mapper.selectManualBaseline(componentUuid))\n+        manualBaselineAnalysisUuid = Optional.ofNullable(mapper.selectSpecificAnalysisNewCodePeriod(componentUuid))\n           .map(t -> new String[] {t})\n           .orElse(NO_BASELINE);\n       }"
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": "String selectManualBaseline(@Param(\"projectUuid\") String projectUuid);",
        "fixed_code": "String selectSpecificAnalysisNewCodePeriod(@Param(\"projectUuid\") String projectUuid);",
        "patch": "@@ -99,7 +99,7 @@ public interface PurgeMapper {\n   List<String> selectStaleShortLivingBranchesAndPullRequests(@Param(\"projectUuid\") String projectUuid, @Param(\"toDate\") Long toDate);\n \n   @CheckForNull\n-  String selectManualBaseline(@Param(\"projectUuid\") String projectUuid);\n+  String selectSpecificAnalysisNewCodePeriod(@Param(\"projectUuid\") String projectUuid);\n \n   List<IdUuidPair> selectDisabledComponentsWithoutIssues(@Param(\"projectUuid\") String projectUuid);\n "
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": ".setResponseExample(getClass().getResource(\"generate_secret_key-example.json\"))",
        "fixed_code": ".setResponseExample(getClass().getResource(\"show_new_code_period-example.json\"))",
        "patch": "@@ -70,7 +70,7 @@ public void define(WebService.NewController context) {\n         \"<li>'Administer' rights on the specified component</li>\" +\n         \"</ul>\")\n       .setSince(\"8.0\")\n-      .setResponseExample(getClass().getResource(\"generate_secret_key-example.json\"))\n+      .setResponseExample(getClass().getResource(\"show_new_code_period-example.json\"))\n       .setHandler(this);\n \n     action.createParam(PARAM_PROJECT)"
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": "public void throw_NFE_if_no_project_permission() {",
        "fixed_code": "public void throw_FE_if_no_project_permission() {",
        "patch": "@@ -126,7 +126,7 @@ public void throw_IAE_if_branch_is_a_SLB() {\n   }\n \n   @Test\n-  public void throw_NFE_if_no_project_permission() {\n+  public void throw_FE_if_no_project_permission() {\n     ComponentDto project = componentDb.insertMainBranch();\n     expectedException.expect(ForbiddenException.class);\n     expectedException.expectMessage(\"Insufficient privileges\");"
    },
    {
        "commit_id": "14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "commit_message": "SONAR-12364 Fix update of values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14bd90f47ee950d4ee780cbd2a030cac5cb034c0",
        "buggy_code": "dbClient.newCodePeriodDao().deleteByProjectUuidAndBranchUuid(dbSession, projectUuid, branchUuid);",
        "fixed_code": "dbClient.newCodePeriodDao().deleteByBranch(dbSession, projectUuid, branchUuid);",
        "patch": "@@ -92,7 +92,7 @@ private void doHandle(Request request) {\n \n       String projectUuid = projectBranch.getMainBranchProjectUuid() != null ? projectBranch.getMainBranchProjectUuid() : projectBranch.uuid();\n       String branchUuid = projectBranch.uuid();\n-      dbClient.newCodePeriodDao().deleteByProjectUuidAndBranchUuid(dbSession, projectUuid, branchUuid);\n+      dbClient.newCodePeriodDao().deleteByBranch(dbSession, projectUuid, branchUuid);\n       dbSession.commit();\n     }\n   }"
    },
    {
        "commit_id": "c8d43ec36a4a541406da2dbbaa74c6f033226dcd",
        "commit_message": "Remove reference to sonar-vsts from backend and fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8d43ec36a4a541406da2dbbaa74c6f033226dcd",
        "buggy_code": "private static final Set<String> HTML_PATHS = ImmutableSet.of(INDEX_HTML_PATH, \"/integration/vsts/index.html\");",
        "fixed_code": "private static final Set<String> HTML_PATHS = ImmutableSet.of(INDEX_HTML_PATH);",
        "patch": "@@ -50,7 +50,7 @@ public class WebPagesCache {\n \n   private static final String INDEX_HTML_PATH = \"/index.html\";\n \n-  private static final Set<String> HTML_PATHS = ImmutableSet.of(INDEX_HTML_PATH, \"/integration/vsts/index.html\");\n+  private static final Set<String> HTML_PATHS = ImmutableSet.of(INDEX_HTML_PATH);\n \n   private final Platform platform;\n   private final Configuration configuration;"
    },
    {
        "commit_id": "0443794329122f49b910eb58cb505349ab116414",
        "commit_message": "Fix mssql CE activity query and incorrect usage of AlwaysIncreasingSystem2 (#2077)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0443794329122f49b910eb58cb505349ab116414",
        "buggy_code": "public DbTester db = DbTester.create(AlwaysIncreasingSystem2.INSTANCE);",
        "fixed_code": "public DbTester db = DbTester.create(new AlwaysIncreasingSystem2());",
        "patch": "@@ -44,7 +44,7 @@\n public class QualityProfileExportDaoTest {\n \n   @Rule\n-  public DbTester db = DbTester.create(AlwaysIncreasingSystem2.INSTANCE);\n+  public DbTester db = DbTester.create(new AlwaysIncreasingSystem2());\n \n   private DbSession dbSession = db.getSession();\n   private QualityProfileExportDao underTest = db.getDbClient().qualityProfileExportDao();"
    },
    {
        "commit_id": "0443794329122f49b910eb58cb505349ab116414",
        "commit_message": "Fix mssql CE activity query and incorrect usage of AlwaysIncreasingSystem2 (#2077)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0443794329122f49b910eb58cb505349ab116414",
        "buggy_code": "private System2 system2 = AlwaysIncreasingSystem2.INSTANCE;",
        "fixed_code": "private System2 system2 = new AlwaysIncreasingSystem2();",
        "patch": "@@ -71,7 +71,7 @@\n \n public class DeactivateActionTest {\n \n-  private System2 system2 = AlwaysIncreasingSystem2.INSTANCE;\n+  private System2 system2 = new AlwaysIncreasingSystem2();\n \n   @Rule\n   public ExpectedException expectedException = ExpectedException.none();"
    },
    {
        "commit_id": "2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "commit_message": "Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "buggy_code": "return DbScmInfo.create(dto.getSourceData().getLinesList(), dto.getSrcHash());",
        "fixed_code": "return DbScmInfo.create(dto.getSourceData().getLinesList(), dto.getLineCount(), dto.getSrcHash());",
        "patch": "@@ -55,7 +55,7 @@ public Optional<DbScmInfo> getScmInfo(Component file) {\n       if (dto == null) {\n         return Optional.empty();\n       }\n-      return DbScmInfo.create(dto.getSourceData().getLinesList(), dto.getSrcHash());\n+      return DbScmInfo.create(dto.getSourceData().getLinesList(), dto.getLineCount(), dto.getSrcHash());\n     }\n   }\n "
    },
    {
        "commit_id": "2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "commit_message": "Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "buggy_code": "return Optional.of(new ReportScmInfo(changesets));",
        "fixed_code": "return Optional.of(ReportScmInfo.create(changesets));",
        "patch": "@@ -84,7 +84,7 @@ private Optional<ScmInfo> getScmInfoForComponent(Component component) {\n \n   private static Optional<ScmInfo> getScmInfoFromReport(Component file, ScannerReport.Changesets changesets) {\n     LOGGER.trace(\"Reading SCM info from report for file '{}'\", file.getDbKey());\n-    return Optional.of(new ReportScmInfo(changesets));\n+    return Optional.of(ReportScmInfo.create(changesets));\n   }\n \n   private Optional<ScmInfo> generateScmInfoForAllFile(Component file) {"
    },
    {
        "commit_id": "2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "commit_message": "Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2ffcee0a0511334fb5920a78832eae3ef6c74efe",
        "buggy_code": "DbScmInfo scmInfo = DbScmInfo.create(Collections.singleton(line1), hash).get();",
        "fixed_code": "DbScmInfo scmInfo = DbScmInfo.create(Collections.singletonList(line1), 1, hash).get();",
        "patch": "@@ -287,7 +287,7 @@ private DbScmInfo createDbScmInfoWithOneLine(String hash) {\n       .setScmAuthor(\"author1\")\n       .setScmDate(10L)\n       .build();\n-    DbScmInfo scmInfo = DbScmInfo.create(Collections.singleton(line1), hash).get();\n+    DbScmInfo scmInfo = DbScmInfo.create(Collections.singletonList(line1), 1, hash).get();\n     when(dbLoader.getScmInfo(FILE)).thenReturn(Optional.of(scmInfo));\n     return scmInfo;\n   }"
    },
    {
        "commit_id": "8871e8c1249b5ff2a12b42101dd1c8ea5af46b40",
        "commit_message": "Attempt to fix FP in SchedulerImplTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8871e8c1249b5ff2a12b42101dd1c8ea5af46b40",
        "buggy_code": "public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(60));",
        "fixed_code": "public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(300));",
        "patch": "@@ -63,7 +63,7 @@\n public class SchedulerImplTest {\n \n   @Rule\n-  public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(60));\n+  public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(300));\n   @Rule\n   public ExpectedException expectedException = ExpectedException.none();\n   @Rule"
    },
    {
        "commit_id": "7a9b72c6a4eb7134e03cb81f0e6176efd90b0bdd",
        "commit_message": "fix some (old) quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7a9b72c6a4eb7134e03cb81f0e6176efd90b0bdd",
        "buggy_code": "MasterServletFilter.INSTANCE = null;",
        "fixed_code": "MasterServletFilter.setInstance(null);",
        "patch": "@@ -56,7 +56,7 @@ public class MasterServletFilterTest {\n \n   @Before\n   public void resetSingleton() {\n-    MasterServletFilter.INSTANCE = null;\n+    MasterServletFilter.setInstance(null);\n   }\n \n   @Test"
    },
    {
        "commit_id": "09534faa716dc27bdcc9597cbe27cbae672267f5",
        "commit_message": "SONAR-12370 Prevent potential vulnerability with web API api/l10n/index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/09534faa716dc27bdcc9597cbe27cbae672267f5",
        "buggy_code": "checkArgument(!locale.getISO3Language().isEmpty(), \"'%s' cannot be parsed as a BCP47 language tag\", localeParam);",
        "fixed_code": "checkArgument(!locale.getISO3Language().isEmpty(), \"Locale cannot be parsed as a BCP47 language tag\");",
        "patch": "@@ -71,7 +71,7 @@ public void handle(Request request, Response response) throws Exception {\n     }\n     String localeParam = request.mandatoryParam(LOCALE_PARAM);\n     Locale locale = Locale.forLanguageTag(localeParam);\n-    checkArgument(!locale.getISO3Language().isEmpty(), \"'%s' cannot be parsed as a BCP47 language tag\", localeParam);\n+    checkArgument(!locale.getISO3Language().isEmpty(), \"Locale cannot be parsed as a BCP47 language tag\");\n \n     try (JsonWriter json = response.newJsonWriter()) {\n       json.beginObject();"
    },
    {
        "commit_id": "09534faa716dc27bdcc9597cbe27cbae672267f5",
        "commit_message": "SONAR-12370 Prevent potential vulnerability with web API api/l10n/index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/09534faa716dc27bdcc9597cbe27cbae672267f5",
        "buggy_code": "expectedException.expectMessage(\"'en_GB' cannot be parsed as a BCP47 language tag\");",
        "fixed_code": "expectedException.expectMessage(\"Locale cannot be parsed as a BCP47 language tag\");",
        "patch": "@@ -134,7 +134,7 @@ public void fail_when_java_formatted_language_tags() {\n     when(i18n.getEffectiveLocale(UK)).thenReturn(UK);\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"'en_GB' cannot be parsed as a BCP47 language tag\");\n+    expectedException.expectMessage(\"Locale cannot be parsed as a BCP47 language tag\");\n     call(\"en_GB\", null);\n   }\n "
    },
    {
        "commit_id": "45d3a6430c5baa30721c57207e06c9823bc7d775",
        "commit_message": "SONAR-12271 require SQ 7.9 installed to upgrade to 8.0 and later\n\ndrop IT for module upgrade since 7.9 has no module\nfix UpgradeTest:\n - explicitly fail if run on H2\n - fix all URL tests which were victimes of false negatives",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/45d3a6430c5baa30721c57207e06c9823bc7d775",
        "buggy_code": "public static final long MIN_UPGRADE_VERSION = 1_830;",
        "fixed_code": "public static final long MIN_UPGRADE_VERSION = 2_800;",
        "patch": "@@ -30,7 +30,7 @@ public class DatabaseVersion {\n    * versions must be previously upgraded to LTS version.\n    * Note that the value can't be less than current LTS version.\n    */\n-  public static final long MIN_UPGRADE_VERSION = 1_830;\n+  public static final long MIN_UPGRADE_VERSION = 2_800;\n \n   private final MigrationSteps migrationSteps;\n   private final MigrationHistory migrationHistory;"
    },
    {
        "commit_id": "0500f966a3ea0763d87ae4138210ada78dd4f33c",
        "commit_message": "SONAR-8520 index on DEPRECATED_RULE_KEYS.RULE_ID must not be unique\n\nthis is an old error which slipped through the radar because H2 schema was correct",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0500f966a3ea0763d87ae4138210ada78dd4f33c",
        "buggy_code": "verifyMigrationCount(underTest, 2);",
        "fixed_code": "verifyMigrationCount(underTest, 3);",
        "patch": "@@ -35,7 +35,7 @@ public void migrationNumber_starts_at_3000() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 2);\n+    verifyMigrationCount(underTest, 3);\n   }\n \n }"
    },
    {
        "commit_id": "12bfa39dec602d97178c9c9967bb2a367dc2c5fc",
        "commit_message": "SONAR-8776 remove deprecated params, fields from api/components (#1894)\n\n* remove componentId, uuid params and associated documentation\r\n\r\n* remove deprecated params from api/components/search_projects\r\n\r\n* remove deprecated params from api/components/show\r\n\r\n* remove request parameters: key, componentId, id\r\n\r\n* remove deprecated params from api/components/suggestions\r\n\r\n* remove deprecated params from api/components/tree\r\n\r\n* remove deprecated request parameters: baseComponentKey, componentId, baseComponentId\r\n\r\n* remove `id` field response from api/components/search, api/components/search_projects\r\n\r\n* fix description in api/components/show",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12bfa39dec602d97178c9c9967bb2a367dc2c5fc",
        "buggy_code": ".setParam(\"sort\", IssueQuery.SORT_BY_UPDATE_DATE)",
        "fixed_code": ".setParam(\"s\", IssueQuery.SORT_BY_UPDATE_DATE)",
        "patch": "@@ -671,7 +671,7 @@ public void sort_by_updated_at() {\n     indexIssues();\n \n     TestResponse response = ws.newRequest()\n-      .setParam(\"sort\", IssueQuery.SORT_BY_UPDATE_DATE)\n+      .setParam(\"s\", IssueQuery.SORT_BY_UPDATE_DATE)\n       .setParam(\"asc\", \"false\")\n       .execute();\n "
    },
    {
        "commit_id": "0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "buggy_code": "if (!(o instanceof DefaultIndexedFile)) {",
        "fixed_code": "if (o == null || o.getClass() != this.getClass()) {",
        "patch": "@@ -126,7 +126,7 @@ public boolean equals(Object o) {\n       return true;\n     }\n \n-    if (!(o instanceof DefaultIndexedFile)) {\n+    if (o == null || o.getClass() != this.getClass()) {\n       return false;\n     }\n "
    },
    {
        "commit_id": "0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "buggy_code": "if (!(obj instanceof DefaultTextPointer)) {",
        "fixed_code": "if (obj == null || obj.getClass() != this.getClass()) {",
        "patch": "@@ -51,7 +51,7 @@ public String toString() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (!(obj instanceof DefaultTextPointer)) {\n+    if (obj == null || obj.getClass() != this.getClass()) {\n       return false;\n     }\n     DefaultTextPointer other = (DefaultTextPointer) obj;"
    },
    {
        "commit_id": "0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "buggy_code": "if (!(obj instanceof DefaultTextRange)) {",
        "fixed_code": "if (obj == null || obj.getClass() != this.getClass()) {",
        "patch": "@@ -59,7 +59,7 @@ public String toString() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (!(obj instanceof DefaultTextRange)) {\n+    if (obj == null || obj.getClass() != this.getClass()) {\n       return false;\n     }\n     DefaultTextRange other = (DefaultTextRange) obj;"
    },
    {
        "commit_id": "0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "commit_message": "Fix code quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0621ff4a475e52aeb0a3d770a339a5d59a1991e6",
        "buggy_code": "expectedException.expectMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");",
        "fixed_code": "expectedException.expectMessage(\"Parameter 'unknown' not found for action 'my_action'\");",
        "patch": "@@ -591,7 +591,7 @@ public void fail_if_param_is_not_defined() {\n   @Test\n   public void fail_if_multi_param_is_not_defined() {\n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");\n+    expectedException.expectMessage(\"Parameter 'unknown' not found for action 'my_action'\");\n \n     underTest.multiParam(\"unknown\");\n   }"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -22,8 +22,8 @@\n import org.junit.Test;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n import org.sonar.api.batch.sensor.internal.SensorStorage;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.fail;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -27,8 +27,8 @@\n import org.junit.rules.ExpectedException;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.TextRange;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n import org.sonar.api.batch.sensor.internal.SensorStorage;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.scanner.fs.PathPattern;",
        "fixed_code": "import org.sonar.api.batch.fs.internal.PathPattern;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.api.batch.fs.FilePredicates;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.InputFile.Status;\n-import org.sonar.scanner.fs.PathPattern;\n+import org.sonar.api.batch.fs.internal.PathPattern;\n \n /**\n  * Factory of {@link FilePredicate}"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.scanner.fs.PathPattern;",
        "fixed_code": "import org.sonar.api.batch.fs.internal.PathPattern;",
        "patch": "@@ -21,7 +21,7 @@\n \n import java.nio.file.Paths;\n import org.sonar.api.batch.fs.InputFile;\n-import org.sonar.scanner.fs.PathPattern;\n+import org.sonar.api.batch.fs.internal.PathPattern;\n \n /**\n  * @since 4.2"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.postjob.internal;",
        "fixed_code": "package org.sonar.scanner.postjob;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.postjob.internal;\n+package org.sonar.scanner.postjob;\n \n import java.util.Arrays;\n import java.util.Collection;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.sensor.highlighting.internal;",
        "fixed_code": "package org.sonar.scanner.sensor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.sensor.highlighting.internal;\n+package org.sonar.scanner.sensor;\n \n import java.util.ArrayList;\n import java.util.Collections;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.sensor.highlighting.internal;",
        "fixed_code": "package org.sonar.scanner.sensor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.sensor.highlighting.internal;\n+package org.sonar.scanner.sensor;\n \n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -26,7 +26,7 @@\n import org.junit.rules.ExpectedException;\n import org.mockito.ArgumentCaptor;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.batch.measure.MetricFinder;\n import org.sonar.api.batch.sensor.internal.SensorStorage;\n import org.sonar.scanner.sensor.DefaultMeasure;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor;",
        "fixed_code": "import org.sonar.scanner.sensor.DefaultSensorDescriptor;",
        "patch": "@@ -33,8 +33,8 @@\n import org.sonar.api.batch.sensor.Sensor;\n import org.sonar.api.batch.sensor.SensorContext;\n import org.sonar.api.batch.sensor.SensorDescriptor;\n-import org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor;\n import org.sonar.core.platform.ComponentContainer;\n+import org.sonar.scanner.sensor.DefaultSensorDescriptor;\n import org.sonar.scanner.sensor.ModuleSensorContext;\n import org.sonar.scanner.sensor.ModuleSensorExtensionDictionnary;\n import org.sonar.scanner.sensor.ModuleSensorOptimizer;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor;",
        "fixed_code": "import org.sonar.scanner.postjob.DefaultPostJobDescriptor;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.api.batch.postjob.PostJob;\n import org.sonar.api.batch.postjob.PostJobContext;\n import org.sonar.api.batch.postjob.PostJobDescriptor;\n-import org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor;\n+import org.sonar.scanner.postjob.DefaultPostJobDescriptor;\n import org.sonar.api.batch.sensor.Sensor;\n import org.sonar.api.batch.sensor.SensorContext;\n import org.sonar.api.batch.sensor.SensorDescriptor;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -38,7 +38,7 @@\n import org.mockito.ArgumentMatchers;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.utils.log.LogTester;\n import org.sonar.api.utils.log.LoggerLevel;\n import org.sonar.core.util.CloseableIterator;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.fs.internal;",
        "fixed_code": "package org.sonar.scanner.fs;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.fs.internal;\n+package org.sonar.scanner.fs;\n \n import java.io.File;\n import java.nio.charset.Charset;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.fs.internal;",
        "fixed_code": "package org.sonar.scanner.fs.predicates;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.fs.internal;\n+package org.sonar.scanner.fs.predicates;\n \n import java.io.IOException;\n import java.util.Collections;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.fs.internal;",
        "fixed_code": "package org.sonar.scanner.fs.predicates;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.fs.internal;\n+package org.sonar.scanner.fs.predicates;\n \n import org.junit.Test;\n import org.sonar.api.batch.fs.InputFile;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.sensor.internal.SensorContextTester;",
        "fixed_code": "import org.sonar.scanner.sensor.SensorContextTester;",
        "patch": "@@ -28,14 +28,14 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n-import org.sonar.api.batch.sensor.internal.SensorContextTester;\n import org.sonar.api.config.Encryption;\n import org.sonar.api.config.PropertyDefinitions;\n import org.sonar.api.utils.log.LogTester;\n import org.sonar.api.utils.log.LoggerLevel;\n import org.sonar.scanner.config.DefaultConfiguration;\n import org.sonar.scanner.deprecated.test.TestPlanBuilder;\n import org.sonar.scanner.scan.ProjectConfiguration;\n+import org.sonar.scanner.sensor.SensorContextTester;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.api.batch.fs.InputComponent;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.rule.ActiveRulesBuilder;\n import org.sonar.scanner.rule.NewActiveRule;\n import org.sonar.scanner.rule.RulesBuilder;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -26,7 +26,7 @@\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.batch.fs.InputComponent;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.notifications.AnalysisWarnings;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.scan.issue.filter.IssueFilterChain;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -28,7 +28,7 @@\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.notifications.AnalysisWarnings;\n import org.sonar.scanner.issue.ignore.IgnoreIssuesFilter;\n import org.sonar.scanner.issue.ignore.pattern.IssueExclusionPatternInitializer;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.FileMetadata;",
        "fixed_code": "import org.sonar.scanner.fs.FileMetadata;",
        "patch": "@@ -31,7 +31,7 @@\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.FileMetadata;\n+import org.sonar.scanner.fs.FileMetadata;\n import org.sonar.scanner.mediumtest.AnalysisResult;\n import org.sonar.scanner.mediumtest.ScannerMediumTester;\n import org.sonar.scanner.protocol.output.ScannerReport;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -26,7 +26,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.CoreProperties;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.scan.ModuleConfiguration;\n import org.sonar.scanner.scan.filesystem.ModuleCoverageAndDuplicationExclusions;\n "
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.api.batch.fs.internal.DefaultInputModule;\n import org.sonar.api.batch.fs.internal.InputModuleHierarchy;\n import org.sonar.api.batch.fs.internal.SensorStrategy;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.batch.sensor.Sensor;\n import org.sonar.scanner.sensor.ModuleSensorExtensionDictionnary;\n import org.sonar.scanner.bootstrap.ScannerPluginRepository;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -26,7 +26,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.CoreProperties;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.scan.ProjectConfiguration;\n import org.sonar.scanner.scan.filesystem.ProjectCoverageAndDuplicationExclusions;\n "
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n import org.sonar.api.batch.fs.internal.InputModuleHierarchy;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.batch.scm.ScmProvider;\n import org.sonar.scanner.protocol.output.ScannerReportReader;\n import org.sonar.scanner.protocol.output.ScannerReportWriter;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.api.batch.fs.InputFile.Type;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.utils.DateUtils;\n import org.sonar.scanner.ProjectInfo;\n import org.sonar.scanner.protocol.output.FileStructure;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -41,7 +41,7 @@\n import org.sonar.api.batch.bootstrap.ProjectDefinition;\n import org.sonar.api.batch.fs.internal.DefaultInputModule;\n import org.sonar.api.batch.fs.internal.InputModuleHierarchy;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.batch.scm.ScmProvider;\n import org.sonar.scanner.ProjectInfo;\n import org.sonar.scanner.bootstrap.ScannerPlugin;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -29,7 +29,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.protocol.output.ScannerReportWriter;\n import org.sonar.scanner.scan.branch.BranchConfiguration;\n import org.sonar.scanner.scan.filesystem.InputComponentStore;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.rule.internal;",
        "fixed_code": "package org.sonar.scanner.rule;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.rule.internal;\n+package org.sonar.scanner.rule;\n \n import org.junit.Rule;\n import org.junit.Test;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.rule.internal;",
        "fixed_code": "package org.sonar.scanner.rule;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.rule.internal;\n+package org.sonar.scanner.rule;\n \n import org.sonar.api.rule.RuleKey;\n import org.junit.Test;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.rule.internal;",
        "fixed_code": "package org.sonar.scanner.rule;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.rule.internal;\n+package org.sonar.scanner.rule;\n \n import com.google.common.collect.ImmutableMap;\n import org.junit.Before;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.rule.internal;",
        "fixed_code": "package org.sonar.scanner.rule;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.rule.internal;\n+package org.sonar.scanner.rule;\n \n import org.junit.Test;\n import org.junit.rules.ExpectedException;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.api.batch.fs.FilePredicate;\n import org.sonar.api.batch.fs.InputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n "
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -35,7 +35,7 @@\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputModule;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.scan.branch.BranchConfiguration;\n \n import static org.assertj.core.api.Assertions.assertThat;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.api.batch.fs.InputModule;\n import org.sonar.api.batch.fs.internal.DefaultInputProject;\n import org.sonar.api.batch.fs.internal.SensorStrategy;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.scan.branch.BranchConfiguration;\n \n import static org.assertj.core.api.Assertions.assertThat;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -27,7 +27,7 @@\n import org.junit.Test;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.scanner.repository.FileData;\n import org.sonar.scanner.repository.ProjectRepositoriesSupplier;\n import org.sonar.scanner.repository.SingleProjectRepository;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "import org.sonar.api.batch.fs.internal.TestInputFileBuilder;",
        "fixed_code": "import org.sonar.scanner.fs.TestInputFileBuilder;",
        "patch": "@@ -25,7 +25,7 @@\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.sonar.api.batch.fs.InputFile;\n-import org.sonar.api.batch.fs.internal.TestInputFileBuilder;\n+import org.sonar.scanner.fs.TestInputFileBuilder;\n import org.sonar.api.batch.scm.BlameLine;\n \n public class DefaultBlameOutputTest {"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.sensor.internal;",
        "fixed_code": "package org.sonar.scanner.sensor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.sensor.internal;\n+package org.sonar.scanner.sensor;\n \n import org.junit.Test;\n import org.sonar.api.batch.fs.InputFile;"
    },
    {
        "commit_id": "e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "commit_message": "Extract implementation from plugin API - fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e020f1425d815ae48e9b5c39bc0eaf92382c3c06",
        "buggy_code": "package org.sonar.api.batch.sensor.internal;",
        "fixed_code": "package org.sonar.scanner.sensor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.sensor.internal;\n+package org.sonar.scanner.sensor;\n \n import org.junit.Rule;\n import org.junit.Test;"
    },
    {
        "commit_id": "421174b8456db3bd16471e636a79a0cf997c02ad",
        "commit_message": "SONAR-12260 fix failing DeleteFileMeasures on MsSQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/421174b8456db3bd16471e636a79a0cf997c02ad",
        "buggy_code": "massUpdate.update(\"delete from project_measures pm where pm.component_uuid=?\")",
        "fixed_code": "massUpdate.update(\"delete from project_measures where component_uuid=?\")",
        "patch": "@@ -35,7 +35,7 @@ protected void execute(Context context) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"select c.uuid from projects c where c.qualifier = 'UTS' or  c.qualifier = 'FIL'\");\n     massUpdate.rowPluralName(\"files\");\n-    massUpdate.update(\"delete from project_measures pm where pm.component_uuid=?\")\n+    massUpdate.update(\"delete from project_measures where component_uuid=?\")\n       .setBatchSize(10);\n \n     massUpdate.execute((row, update) -> {"
    },
    {
        "commit_id": "fbcd3b7693d858542eb778baf6e85ebedea3b51a",
        "commit_message": "MMF-1737 Analyze Bitbucket repositories with Azure Pipelines (#1879)\n\n* SC-762-  Tutorial for new BbC projects should mention support of Azure Pipelines\r\n\r\n* Updated tutorial for bitbucketcloud\r\n\r\n* SC-801 - Organization and its eventual app install related entity are now mandatory while targeting a bound project on ALMs.\r\n\r\n* SC-801 --TEMP Added INFO logs\r\n\r\n* SC-801 - Added back return of alm binding if no project alm is present.\r\n\r\n* SC-801 - Fixed added log, failing unit tests before.\r\n\r\n* SC-801 - Added extra logs (TEMP)\r\n\r\n* SC-801 - Reverted unwanted imports.\r\n\r\n* SC-801 - Adaptation of UT following the add of logs TO BE REVERTED ONCE OK\r\n\r\n* SC-801 - Changed newly added log levels to debug to see if they are popping in the CE logs.\r\n\r\n* SC-801 - Add constant for Bitbucket API Version in its REST client.\r\n\r\n* SC-760 - Updated documentation to support Azure Pipelines.\r\n\r\n* SC-801 - Reverted all temporary logs\r\n\r\n* fixup! SC-760 - remove inside file links to avoid failing of unint tests.\r\n\r\n* SC-801 - Fixes after review\r\n\r\n* SC-760 - Splited documentation to 3 in total, with azure pipelines and bitbucket pipelines.\r\n\r\n* SC-762 - Updated Snapshot\r\n\r\n* SC-762 - Updated onboarding tutorial + documentation\r\n\r\n* SC-762 - Updated formating of .tsx following yarn validate.\r\n\r\n* SC-801 - Added unit tests + removed codesmell\r\n\r\n* SC-760 - Updated documentation markdowns for Bitbucket.\r\n\r\n* SC-801 - Removed unused import.\r\n\r\n* SC-801 - Updated failing unit tests.\r\n\r\n* SC-801 - Fix typo\r\n\r\n* SC-801 - Resolving issues following analysis by SQ",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbcd3b7693d858542eb778baf6e85ebedea3b51a",
        "buggy_code": "AlmAppInstallDto selectByOrganizationUuid(@Param(\"alm\") String alm, @Param(\"organizationUuid\") String organizationUuid);",
        "fixed_code": "AlmAppInstallDto selectByOrganizationUuid(@Param(\"organizationUuid\") String organizationUuid);",
        "patch": "@@ -37,7 +37,7 @@ public interface AlmAppInstallMapper {\n   AlmAppInstallDto selectByUuid(@Param(\"uuid\") String uuid);\n \n   @CheckForNull\n-  AlmAppInstallDto selectByOrganizationUuid(@Param(\"alm\") String alm, @Param(\"organizationUuid\") String organizationUuid);\n+  AlmAppInstallDto selectByOrganizationUuid(@Param(\"organizationUuid\") String organizationUuid);\n \n   List<AlmAppInstallDto> selectUnboundByUserExternalId(@Param(\"userExternalId\") String userExternalId);\n "
    },
    {
        "commit_id": "97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "commit_message": "Merge pull request #1789 from SonarSource/fix/md/SONAR-11845-project-import-should-handle-external-issues\n\nSONAR-11845 project import should handle external issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "buggy_code": "Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto, adHoc.getKey());",
        "fixed_code": "Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto.getUuid(), adHoc.getKey());",
        "patch": "@@ -58,7 +58,7 @@ public AdHocRuleCreator(DbClient dbClient, System2 system2, RuleIndexer ruleInde\n    */\n   public RuleDto persistAndIndex(DbSession dbSession, NewAdHocRule adHoc, OrganizationDto organizationDto) {\n     RuleDao dao = dbClient.ruleDao();\n-    Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto, adHoc.getKey());\n+    Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto.getUuid(), adHoc.getKey());\n     RuleMetadataDto metadata;\n     long now = system2.now();\n     if (!existingRuleDtoOpt.isPresent()) {"
    },
    {
        "commit_id": "97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "commit_message": "Merge pull request #1789 from SonarSource/fix/md/SONAR-11845-project-import-should-handle-external-issues\n\nSONAR-11845 project import should handle external issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "buggy_code": "Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization, key);",
        "fixed_code": "Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization.getUuid(), key);",
        "patch": "@@ -79,7 +79,7 @@ public org.sonar.api.rules.Rule findByKey(RuleKey key) {\n       String defaultOrganizationUuid = defaultOrganizationProvider.get().getUuid();\n       OrganizationDto defaultOrganization = dbClient.organizationDao().selectByUuid(dbSession, defaultOrganizationUuid)\n         .orElseThrow(() -> new IllegalStateException(String.format(\"Cannot find default organization '%s'\", defaultOrganizationUuid)));\n-      Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization, key);\n+      Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization.getUuid(), key);\n       if (rule.isPresent() && rule.get().getStatus() != RuleStatus.REMOVED) {\n         return toRule(rule.get(), ruleDao.selectRuleParamsByRuleKey(dbSession, rule.get().getKey()));\n       } else {"
    },
    {
        "commit_id": "97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "commit_message": "Merge pull request #1789 from SonarSource/fix/md/SONAR-11845-project-import-should-handle-external-issues\n\nSONAR-11845 project import should handle external issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "buggy_code": "RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization, templateKey)",
        "fixed_code": "RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization.getUuid(), templateKey)",
        "patch": "@@ -74,7 +74,7 @@ public RuleKey create(DbSession dbSession, NewCustomRule newRule) {\n     String defaultOrganizationUuid = defaultOrganizationProvider.get().getUuid();\n     OrganizationDto defaultOrganization = dbClient.organizationDao().selectByUuid(dbSession, defaultOrganizationUuid)\n       .orElseThrow(() -> new IllegalStateException(format(\"Could not find default organization for uuid '%s'\", defaultOrganizationUuid)));\n-    RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization, templateKey)\n+    RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization.getUuid(), templateKey)\n       .orElseThrow(() -> new IllegalArgumentException(format(\"The template key doesn't exist: %s\", templateKey)));\n     checkArgument(templateRule.isTemplate(), \"This rule is not a template rule: %s\", templateKey.toString());\n     checkArgument(templateRule.getStatus() != RuleStatus.REMOVED, \"The template key doesn't exist: %s\", templateKey.toString());"
    },
    {
        "commit_id": "97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "commit_message": "Merge pull request #1789 from SonarSource/fix/md/SONAR-11845-project-import-should-handle-external-issues\n\nSONAR-11845 project import should handle external issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97a815175c48fbd63bebb607ff4a4a6d12e5164c",
        "buggy_code": "RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization, key)",
        "fixed_code": "RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization.getUuid(), key)",
        "patch": "@@ -104,7 +104,7 @@ public void handle(Request request, Response response) throws Exception {\n     RuleKey key = RuleKey.parse(request.mandatoryParam(PARAM_KEY));\n     try (DbSession dbSession = dbClient.openSession(false)) {\n       OrganizationDto organization = ruleWsSupport.getOrganizationByKey(dbSession, request.param(PARAM_ORGANIZATION));\n-      RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization, key)\n+      RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization.getUuid(), key)\n         .orElseThrow(() -> new NotFoundException(String.format(\"Rule not found: %s\", key)));\n \n       List<RuleDefinitionDto> templateRules = ofNullable(rule.getTemplateId())"
    },
    {
        "commit_id": "9669c6d690b5ced80d0b9b80feeb8b9813284ebe",
        "commit_message": "SONAR-12148 Generate cookie in case of authentication error or email update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9669c6d690b5ced80d0b9b80feeb8b9813284ebe",
        "buggy_code": "handleAuthenticationError(e, response, request.getContextPath());",
        "fixed_code": "handleAuthenticationError(e, request, response);",
        "patch": "@@ -103,7 +103,7 @@ public boolean initUserSession(HttpServletRequest request, HttpServletResponse r\n       }\n       if (isNotLocalOrJwt(e.getSource())) {\n         // redirect to Unauthorized error page\n-        handleAuthenticationError(e, response, request.getContextPath());\n+        handleAuthenticationError(e, request, response);\n         return false;\n       }\n       // Web pages should redirect to the index.html file"
    },
    {
        "commit_id": "3a1a6e9107f42b4689a1b5d3ce09f770dbb46bda",
        "commit_message": "fix vararg warnings in RemoveOrphansFromProjectBranchesTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a1a6e9107f42b4689a1b5d3ce09f770dbb46bda",
        "buggy_code": "assertThat(db.select(\"select uuid as \\\"UUID\\\" from project_branches\").stream().map(t -> t.get(\"UUID\")))",
        "fixed_code": "assertThat(db.select(\"select uuid as \\\"UUID\\\" from project_branches\").stream().map(t -> (String) t.get(\"UUID\")))",
        "patch": "@@ -52,7 +52,7 @@ public void migration_has_no_effect_on_empty_tables() throws SQLException {\n \n     underTest.execute();\n \n-    assertThat(db.select(\"select uuid as \\\"UUID\\\" from project_branches\").stream().map(t -> t.get(\"UUID\")))\n+    assertThat(db.select(\"select uuid as \\\"UUID\\\" from project_branches\").stream().map(t -> (String) t.get(\"UUID\")))\n       .containsOnly(keeps)\n       .doesNotContain(deletes);\n   }"
    },
    {
        "commit_id": "bc1e2754d1d79c50e029d7d78fa2c654ccfad2e6",
        "commit_message": "SONAR-11923 resolve issue as fixed now requires \"administer issue\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bc1e2754d1d79c50e029d7d78fa2c654ccfad2e6",
        "buggy_code": "assertThat(result).extracting(Transition::key).containsOnly(\"confirm\", \"resolve\");",
        "fixed_code": "assertThat(result).extracting(Transition::key).containsOnly(\"confirm\");",
        "patch": "@@ -98,7 +98,7 @@ public void list_transitions_returns_only_transitions_that_do_not_requires_issue\n \n     List<Transition> result = underTest.listTransitions(issue.toDefaultIssue());\n \n-    assertThat(result).extracting(Transition::key).containsOnly(\"confirm\", \"resolve\");\n+    assertThat(result).extracting(Transition::key).containsOnly(\"confirm\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "9c3628f7f4d5745c010cb2f958129495fdcda632",
        "commit_message": "SONAR-12186 Fix SSF-78",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c3628f7f4d5745c010cb2f958129495fdcda632",
        "buggy_code": "+ 22 // MigrationConfigurationModule",
        "fixed_code": "+ 23 // MigrationConfigurationModule",
        "patch": "@@ -122,7 +122,7 @@ public void test_real_start() throws IOException {\n       );\n       assertThat(picoContainer.getParent().getParent().getComponentAdapters()).hasSize(\n         CONTAINER_ITSELF\n-          + 22 // MigrationConfigurationModule\n+          + 23 // MigrationConfigurationModule\n           + 17 // level 2\n       );\n       assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize("
    },
    {
        "commit_id": "9c3628f7f4d5745c010cb2f958129495fdcda632",
        "commit_message": "SONAR-12186 Fix SSF-78",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c3628f7f4d5745c010cb2f958129495fdcda632",
        "buggy_code": "+ 19",
        "fixed_code": "+ 20",
        "patch": "@@ -37,7 +37,7 @@ public void verify_component_count() {\n     assertThat(container.getPicoContainer().getComponentAdapters())\n       .hasSize(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER\n         // DbVersion classes\n-        + 19\n+        + 20\n         // Others\n         + 3);\n   }"
    },
    {
        "commit_id": "fd0b1a9c43ff7e50d3b817cb0f0359b6db4c6206",
        "commit_message": "SONAR-11027 Fix the documentation of api/qualityprofiles/inheritance",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fd0b1a9c43ff7e50d3b817cb0f0359b6db4c6206",
        "buggy_code": "expectedException.expectMessage(\"If no quality profile key is specified, language and name must be set\");",
        "fixed_code": "expectedException.expectMessage(\"If 'key' is not specified, 'qualityProfile' and 'language' must be set\");",
        "patch": "@@ -138,7 +138,7 @@ public void from_reads_request_parameters_and_throws_IAE_if_language_is_missing(\n     req.setParam(\"profileName\", \"the name\");\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"If no quality profile key is specified, language and name must be set\");\n+    expectedException.expectMessage(\"If 'key' is not specified, 'qualityProfile' and 'language' must be set\");\n \n     QProfileReference.from(req);\n   }"
    },
    {
        "commit_id": "fd0b1a9c43ff7e50d3b817cb0f0359b6db4c6206",
        "commit_message": "SONAR-11027 Fix the documentation of api/qualityprofiles/inheritance",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fd0b1a9c43ff7e50d3b817cb0f0359b6db4c6206",
        "buggy_code": "expectedException.expectMessage(\"When providing a quality profile key, neither of organization/language/name must be set\");",
        "fixed_code": "expectedException.expectMessage(\"When a quality profile key is set, 'organization' 'language' and 'qualityProfile' can't be set\");",
        "patch": "@@ -233,7 +233,7 @@ public void fail_if_parameter_profile_key_is_combined_with_parameter_organizatio\n     userSessionRule.logIn();\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"When providing a quality profile key, neither of organization/language/name must be set\");\n+    expectedException.expectMessage(\"When a quality profile key is set, 'organization' 'language' and 'qualityProfile' can't be set\");\n \n     ws.newRequest().setMethod(\"POST\")\n       .setParam(PARAM_KEY, xoo2Profile.getKee())"
    },
    {
        "commit_id": "34f303b0866eb0d69971878265c0890568befa64",
        "commit_message": "SONAR-12120 Fix users duplicated values on EXTERNAL_LOGIN and EXTERNAL_ID",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/34f303b0866eb0d69971878265c0890568befa64",
        "buggy_code": ".add(2112, \"Populate EXTERNAL_ID on table users\", PopulateExternalIdOnUsers.class)",
        "fixed_code": ".add(2112, \"Fix duplication in EXTERNAL_ID and EXTERNAL_LOGIN on table users\", FixDuplicationInExternalLoginOnUsers.class)",
        "patch": "@@ -39,7 +39,7 @@ public void addSteps(MigrationStepRegistry registry) {\n       .add(2109, \"Add EXTERNAL_ID on table users\", AddExternalIdToUsers.class)\n       .add(2110, \"Rename EXTERNAL_IDENTITY to EXTERNAL_LOGIN on table users\", RenameExternalIdentityToExternalLoginOnUsers.class)\n       .add(2111, \"Update null values from external columns and login of users\", UpdateNullValuesFromExternalColumnsAndLoginOfUsers.class)\n-      .add(2112, \"Populate EXTERNAL_ID on table users\", PopulateExternalIdOnUsers.class)\n+      .add(2112, \"Fix duplication in EXTERNAL_ID and EXTERNAL_LOGIN on table users\", FixDuplicationInExternalLoginOnUsers.class)\n       .add(2113, \"Makes same columns of table users not nullable\", MakeSomeColumnsOfUsersNotNullable.class)\n       .add(2114, \"Add unique indexes on table users\", AddUniqueIndexesOnUsers.class)\n       .add(2115, \"Add ORGANIZATION_UUID on table users\", AddOrganizationUuidToUsers.class)"
    },
    {
        "commit_id": "d5b454babf688705a9cd4c8fd862b0fc0a9898d2",
        "commit_message": "SONAR-11898 Fix quality issues and improve coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5b454babf688705a9cd4c8fd862b0fc0a9898d2",
        "buggy_code": "IssueSnippetsAction issueSnippetsAction = new IssueSnippetsAction(mock(SourceService.class), mock(DbClient.class), userSessionRule, mock(IssueFinder.class),",
        "fixed_code": "IssueSnippetsAction issueSnippetsAction = new IssueSnippetsAction(mock(SourceService.class), mock(DbClient.class), mock(IssueFinder.class),",
        "patch": "@@ -41,7 +41,7 @@ public class SourcesWsTest {\n   RawAction rawAction = new RawAction(mock(DbClient.class), mock(SourceService.class), userSessionRule, mock(ComponentFinder.class));\n   LinesAction linesAction = new LinesAction(mock(ComponentFinder.class), mock(DbClient.class), mock(SourceService.class), mock(LinesJsonWriter.class), userSessionRule);\n   HashAction hashAction = new HashAction(mock(DbClient.class), userSessionRule, mock(ComponentFinder.class));\n-  IssueSnippetsAction issueSnippetsAction = new IssueSnippetsAction(mock(SourceService.class), mock(DbClient.class), userSessionRule, mock(IssueFinder.class),\n+  IssueSnippetsAction issueSnippetsAction = new IssueSnippetsAction(mock(SourceService.class), mock(DbClient.class), mock(IssueFinder.class),\n     mock(LinesJsonWriter.class), mock(ComponentViewerJsonWriter.class));\n   WsTester tester = new WsTester(new SourcesWs(showAction, rawAction, linesAction, hashAction, issueSnippetsAction));\n "
    },
    {
        "commit_id": "1db79bf4bbe449422be80848e2431ee8e036f9a7",
        "commit_message": "SONAR-12000 Fix migration test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1db79bf4bbe449422be80848e2431ee8e036f9a7",
        "buggy_code": "verifyMigrationCount(underTest, 2);",
        "fixed_code": "verifyMigrationCount(underTest, 3);",
        "patch": "@@ -35,7 +35,7 @@ public void migrationNumber_starts_at_2700() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 2);\n+    verifyMigrationCount(underTest, 3);\n   }\n \n }"
    },
    {
        "commit_id": "4f885e88db04134cea9d500e89f28e6a09b65db2",
        "commit_message": "SONAR-11886 Highlight Hotspots in issues page\n\n* Update see rule button style in issues\n* Update selected and hover styling of concise issues\n* Update issues selected and hover styling\n* Issues type facet don't filter out hotspots by default anymore\n* Update issue box styling for hotspots\n* Automatically open severity & standard facet based on the issue type\n* Add security hotspots newsbox on issues page\n* Update clear icon and close buttons\n* Allow to dismiss hotspots newsbox on issues page\n* Display help tooltip on hotspots entry of the types facet",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4f885e88db04134cea9d500e89f28e6a09b65db2",
        "buggy_code": ".setPossibleValues(\"notifications.optOut\", UserUpdater.NOTIFICATIONS_READ_DATE);",
        "fixed_code": ".setPossibleValues(\"notifications.optOut\", UserUpdater.NOTIFICATIONS_READ_DATE, \"newsbox.dismiss.hotspots\");",
        "patch": "@@ -57,7 +57,7 @@ public void define(WebService.NewController controller) {\n       .setRequired(true)\n       .setMaximumLength(100)\n       .setDescription(\"Setting key\")\n-      .setPossibleValues(\"notifications.optOut\", UserUpdater.NOTIFICATIONS_READ_DATE);\n+      .setPossibleValues(\"notifications.optOut\", UserUpdater.NOTIFICATIONS_READ_DATE, \"newsbox.dismiss.hotspots\");\n \n     action.createParam(PARAM_VALUE)\n       .setRequired(true)"
    },
    {
        "commit_id": "0d17e454b4a6adbb1f7ff38293a0966d0306c3bd",
        "commit_message": "SONAR-11859 Fix issue changelog",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0d17e454b4a6adbb1f7ff38293a0966d0306c3bd",
        "buggy_code": "issueLifecycle.mergeConfirmedOrResolvedFromShortLivingBranch(e.getKey(), defaultIssues.get(issue), issue.getBranchName());",
        "fixed_code": "issueLifecycle.mergeConfirmedOrResolvedFromShortLivingBranchOrPr(e.getKey(), defaultIssues.get(issue), issue.getBranchType(), issue.getBranchKey());",
        "patch": "@@ -55,7 +55,7 @@ public void tryMerge(Component component, Collection<DefaultIssue> newIssues) {\n \n     for (Map.Entry<DefaultIssue, SiblingIssue> e : matchedRaws.entrySet()) {\n       SiblingIssue issue = e.getValue();\n-      issueLifecycle.mergeConfirmedOrResolvedFromShortLivingBranch(e.getKey(), defaultIssues.get(issue), issue.getBranchName());\n+      issueLifecycle.mergeConfirmedOrResolvedFromShortLivingBranchOrPr(e.getKey(), defaultIssues.get(issue), issue.getBranchType(), issue.getBranchKey());\n     }\n   }\n }"
    },
    {
        "commit_id": "0d17e454b4a6adbb1f7ff38293a0966d0306c3bd",
        "commit_message": "SONAR-11859 Fix issue changelog",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0d17e454b4a6adbb1f7ff38293a0966d0306c3bd",
        "buggy_code": "return new SiblingIssue(dto.getKey(), dto.getLine(), dto.getMessage(), dto.getChecksum(), dto.getRuleKey(), dto.getStatus(), dto.getBranchName(),",
        "fixed_code": "return new SiblingIssue(dto.getKey(), dto.getLine(), dto.getMessage(), dto.getChecksum(), dto.getRuleKey(), dto.getStatus(), dto.getBranchKey(), dto.getKeyType(),",
        "patch": "@@ -67,7 +67,7 @@ public Collection<SiblingIssue> loadCandidateSiblingIssuesForMerging(Component c\n   }\n \n   private static SiblingIssue toSiblingIssue(ShortBranchIssueDto dto) {\n-    return new SiblingIssue(dto.getKey(), dto.getLine(), dto.getMessage(), dto.getChecksum(), dto.getRuleKey(), dto.getStatus(), dto.getBranchName(),\n+    return new SiblingIssue(dto.getKey(), dto.getLine(), dto.getMessage(), dto.getChecksum(), dto.getRuleKey(), dto.getStatus(), dto.getBranchKey(), dto.getKeyType(),\n       longToDate(dto.getIssueUpdateDate()));\n   }\n "
    },
    {
        "commit_id": "2a87f9a8efb518b1a5b6fa611bb0a694503c559c",
        "commit_message": "SONAR-11858 Fix quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2a87f9a8efb518b1a5b6fa611bb0a694503c559c",
        "buggy_code": "BranchPersister underTest = new BranchPersisterImpl(dbTester.getDbClient(), treeRootHolder, analysisMetadataHolder);",
        "fixed_code": "private BranchPersister underTest = new BranchPersisterImpl(dbTester.getDbClient(), treeRootHolder, analysisMetadataHolder);",
        "patch": "@@ -62,7 +62,7 @@ public class BranchPersisterImplTest {\n   @Rule\n   public ExpectedException exception = ExpectedException.none();\n \n-  BranchPersister underTest = new BranchPersisterImpl(dbTester.getDbClient(), treeRootHolder, analysisMetadataHolder);\n+  private BranchPersister underTest = new BranchPersisterImpl(dbTester.getDbClient(), treeRootHolder, analysisMetadataHolder);\n \n   @Test\n   public void persist_fails_with_ISE_if_no_component_for_main_branches() {"
    },
    {
        "commit_id": "afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "commit_message": "SONAR-11858 Apply light issue tracking with siblings for all branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "buggy_code": "raw.setFieldChange(changeContext, IssueFieldsSetter.FROM_SHORT_BRANCH, fromShortBranchName, analysisMetadataHolder.getBranch().getName());",
        "fixed_code": "raw.setFieldChange(changeContext, IssueFieldsSetter.FROM_SHORT_BRANCH, fromShortBranchName, analysisMetadataHolder.isPullRequest() ? analysisMetadataHolder.getPullRequestKey() : analysisMetadataHolder.getBranch().getName());",
        "patch": "@@ -94,7 +94,7 @@ public void copyExistingOpenIssueFromLongLivingBranch(DefaultIssue raw, DefaultI\n \n   public void mergeConfirmedOrResolvedFromShortLivingBranch(DefaultIssue raw, DefaultIssue base, String fromShortBranchName) {\n     copyAttributesOfIssueFromOtherBranch(raw, base);\n-    raw.setFieldChange(changeContext, IssueFieldsSetter.FROM_SHORT_BRANCH, fromShortBranchName, analysisMetadataHolder.getBranch().getName());\n+    raw.setFieldChange(changeContext, IssueFieldsSetter.FROM_SHORT_BRANCH, fromShortBranchName, analysisMetadataHolder.isPullRequest() ? analysisMetadataHolder.getPullRequestKey() : analysisMetadataHolder.getBranch().getName());\n   }\n \n   private void copyAttributesOfIssueFromOtherBranch(DefaultIssue to, DefaultIssue from) {"
    },
    {
        "commit_id": "afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "commit_message": "SONAR-11858 Apply light issue tracking with siblings for all branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "buggy_code": "private ShortBranchIssueMerger issueStatusCopier = mock(ShortBranchIssueMerger.class);",
        "fixed_code": "private SiblingsIssueMerger issueStatusCopier = mock(SiblingsIssueMerger.class);",
        "patch": "@@ -117,7 +117,7 @@ public class IntegrateIssuesVisitorTest {\n   private IssueLifecycle issueLifecycle = mock(IssueLifecycle.class);\n   private IssueVisitor issueVisitor = mock(IssueVisitor.class);\n   private MergeBranchComponentUuids mergeBranchComponentsUuids = mock(MergeBranchComponentUuids.class);\n-  private ShortBranchIssueMerger issueStatusCopier = mock(ShortBranchIssueMerger.class);\n+  private SiblingsIssueMerger issueStatusCopier = mock(SiblingsIssueMerger.class);\n   private MergeBranchComponentUuids mergeBranchComponentUuids = mock(MergeBranchComponentUuids.class);\n   private SourceLinesHashRepository sourceLinesHash = mock(SourceLinesHashRepository.class);\n   private NewLinesRepository newLinesRepository = mock(NewLinesRepository.class);"
    },
    {
        "commit_id": "afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "commit_message": "SONAR-11858 Apply light issue tracking with siblings for all branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/afe312e4cbf9ac88676d526ff6da0b641aef4ae8",
        "buggy_code": "assertThat(fp.getIssueCreationDate()).isNotNull();",
        "fixed_code": "assertThat(fp.getIssueUpdateDate()).isNotNull();",
        "patch": "@@ -235,7 +235,7 @@ public void selectOpenByComponentUuid_should_correctly_map_required_fields() {\n     assertThat(fp.getRuleKey()).isNotNull();\n     assertThat(fp.getStatus()).isNotNull();\n     assertThat(fp.getBranchName()).isEqualTo(\"feature/foo\");\n-    assertThat(fp.getIssueCreationDate()).isNotNull();\n+    assertThat(fp.getIssueUpdateDate()).isNotNull();\n   }\n \n   @Test"
    },
    {
        "commit_id": "0a302ac9af19485e0eb713776c1435bc64dbf8fd",
        "commit_message": "SONAR-11753 fix DB incompatibility in EmailSubscriberDto",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0a302ac9af19485e0eb713776c1435bc64dbf8fd",
        "buggy_code": "return new EmailSubscriberDto(userDto.getLogin(), true, emailOf(userDto));",
        "fixed_code": "return EmailSubscriberDto.create(userDto.getLogin(), true, emailOf(userDto));",
        "patch": "@@ -1261,7 +1261,7 @@ public void keepAuthorizedLoginsOnProject_return_correct_users_on_branch() {\n   }\n \n   private static EmailSubscriberDto globalEmailSubscriberOf(UserDto userDto) {\n-    return new EmailSubscriberDto(userDto.getLogin(), true, emailOf(userDto));\n+    return EmailSubscriberDto.create(userDto.getLogin(), true, emailOf(userDto));\n   }\n \n   private static Consumer<UserDto> withEmail(String login) {"
    },
    {
        "commit_id": "0a302ac9af19485e0eb713776c1435bc64dbf8fd",
        "commit_message": "SONAR-11753 fix DB incompatibility in EmailSubscriberDto",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0a302ac9af19485e0eb713776c1435bc64dbf8fd",
        "buggy_code": ".mapToObj(i -> new EmailSubscriberDto(\"login_\" + i, true, \"login_\" + i + \"@foo\"))",
        "fixed_code": ".mapToObj(i -> EmailSubscriberDto.create(\"login_\" + i, true, \"login_\" + i + \"@foo\"))",
        "patch": "@@ -109,7 +109,7 @@ public void deliver_create_emailRequest_for_each_notification_and_for_each_globa\n       .mapToObj(i -> mock(BuiltInQPChangeNotification.class))\n       .collect(toSet());\n     Set<EmailSubscriberDto> emailSubscribers = IntStream.range(0, 1 + new Random().nextInt(10))\n-      .mapToObj(i -> new EmailSubscriberDto(\"login_\" + i, true, \"login_\" + i + \"@foo\"))\n+      .mapToObj(i -> EmailSubscriberDto.create(\"login_\" + i, true, \"login_\" + i + \"@foo\"))\n       .collect(toSet());\n     when(authorizationDao.selectQualityProfileAdministratorLogins(dbSession))\n       .thenReturn(emailSubscribers);"
    },
    {
        "commit_id": "7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "commit_message": "SONAR-11929 do not send issue notifications on PRs and short branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "buggy_code": "ComponentDto project = db.components().insertPrivateProject(organizationDto);",
        "fixed_code": "ComponentDto project = db.components().insertMainBranch(organizationDto);",
        "patch": "@@ -63,7 +63,7 @@ public final IssueDto insertIssue(Consumer<IssueDto>... populateIssueDto) {\n   @SafeVarargs\n   public final IssueDto insertIssue(OrganizationDto organizationDto, Consumer<IssueDto>... populators) {\n     RuleDefinitionDto rule = db.rules().insert();\n-    ComponentDto project = db.components().insertPrivateProject(organizationDto);\n+    ComponentDto project = db.components().insertMainBranch(organizationDto);\n     ComponentDto file = db.components().insertComponent(newFileDto(project));\n     IssueDto issue = newIssue(rule, project, file);\n     stream(populators).forEach(p -> p.accept(issue));"
    },
    {
        "commit_id": "7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "commit_message": "SONAR-11929 do not send issue notifications on PRs and short branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "buggy_code": "ComponentDto project = db.components().insertPrivateProject();",
        "fixed_code": "ComponentDto project = db.components().insertMainBranch();",
        "patch": "@@ -111,7 +111,7 @@ public void setUp() throws Exception {\n \n   @Test\n   public void do_transition() {\n-    ComponentDto project = db.components().insertPrivateProject();\n+    ComponentDto project = db.components().insertMainBranch();\n     ComponentDto file = db.components().insertComponent(newFileDto(project));\n     RuleDefinitionDto rule = db.rules().insert();\n     IssueDto issue = db.issues().insert(rule, project, file, i -> i.setStatus(STATUS_OPEN).setResolution(null));"
    },
    {
        "commit_id": "7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "commit_message": "SONAR-11929 do not send issue notifications on PRs and short branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "buggy_code": "ComponentDto project = dbTester.components().insertPrivateProject();",
        "fixed_code": "ComponentDto project = dbTester.components().insertMainBranch();",
        "patch": "@@ -181,7 +181,7 @@ private TestResponse call(@Nullable String issueKey, @Nullable String severity)\n \n   private IssueDto newIssue() {\n     RuleDto rule = dbTester.rules().insertRule(newRuleDto());\n-    ComponentDto project = dbTester.components().insertPrivateProject();\n+    ComponentDto project = dbTester.components().insertMainBranch();\n     ComponentDto file = dbTester.components().insertComponent(newFileDto(project));\n     return newDto(rule, file, project);\n   }"
    },
    {
        "commit_id": "7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "commit_message": "SONAR-11929 do not send issue notifications on PRs and short branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fc90932dcb356e1f4078f1e2c07bf7a4f27bc23",
        "buggy_code": "ComponentDto project = dbTester.components().insertPrivateProject();",
        "fixed_code": "ComponentDto project = dbTester.components().insertMainBranch();",
        "patch": "@@ -200,7 +200,7 @@ private TestResponse call(@Nullable String issueKey, @Nullable String type) {\n \n   private IssueDto newIssue() {\n     RuleDto rule = dbTester.rules().insertRule(newRuleDto());\n-    ComponentDto project = dbTester.components().insertPrivateProject();\n+    ComponentDto project = dbTester.components().insertMainBranch();\n     ComponentDto file = dbTester.components().insertComponent(newFileDto(project));\n     return newDto(rule, file, project);\n   }"
    },
    {
        "commit_id": "a8aa40bd9bd4fea44111def143fa792b07b6013d",
        "commit_message": "SONAR-11802 fix description of metric \"sqale_index\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a8aa40bd9bd4fea44111def143fa792b07b6013d",
        "buggy_code": "DefaultI18n underTest;",
        "fixed_code": "private DefaultI18n underTest;",
        "patch": "@@ -41,7 +41,7 @@ public class DefaultI18nTest {\n \n   private TestSystem2 system2 = new TestSystem2();\n \n-  DefaultI18n underTest;\n+  private DefaultI18n underTest;\n \n   @Before\n   public void before() {"
    },
    {
        "commit_id": "a8aa40bd9bd4fea44111def143fa792b07b6013d",
        "commit_message": "SONAR-11802 fix description of metric \"sqale_index\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a8aa40bd9bd4fea44111def143fa792b07b6013d",
        "buggy_code": ".setDescription(\"Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements.\")",
        "fixed_code": ".setDescription(\"Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements.\")",
        "patch": "@@ -1935,7 +1935,7 @@ public final class CoreMetrics {\n    */\n   // TODO should be renamed to MAINTAINABILITY_REMEDIATION_EFFORT\n   public static final Metric<Long> TECHNICAL_DEBT = new Metric.Builder(TECHNICAL_DEBT_KEY, \"Technical Debt\", Metric.ValueType.WORK_DUR)\n-    .setDescription(\"Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements.\")\n+    .setDescription(\"Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements.\")\n     .setDomain(DOMAIN_MAINTAINABILITY)\n     .setDirection(Metric.DIRECTION_WORST)\n     .setOptimizedBestValue(true)"
    },
    {
        "commit_id": "694f338829f274917811f490c3b300e71ce8fe77",
        "commit_message": "SONAR-11677 Simple issue reporting on PR/SLB with no reference analysis\n\nOnly keep issues having at least a location on a changed line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/694f338829f274917811f490c3b300e71ce8fe77",
        "buggy_code": "private ShortBranchTrackerExecution shortBranchTracker;",
        "fixed_code": "private ShortBranchOrPullRequestTrackerExecution shortBranchTracker;",
        "patch": "@@ -37,7 +37,7 @@\n \n public class IssueTrackingDelegatorTest {\n   @Mock\n-  private ShortBranchTrackerExecution shortBranchTracker;\n+  private ShortBranchOrPullRequestTrackerExecution shortBranchTracker;\n   @Mock\n   private MergeBranchTrackerExecution mergeBranchTracker;\n   @Mock"
    },
    {
        "commit_id": "0f580cd4d12411346be5c5de801207c847457099",
        "commit_message": "SONAR-11683 Do not resolve version for SLB and PR",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f580cd4d12411346be5c5de801207c847457099",
        "buggy_code": "if (analysisMetadataHolder.isFirstAnalysis()) {",
        "fixed_code": "if (analysisMetadataHolder.isFirstAnalysis() || !analysisMetadataHolder.isLongLivingBranch()) {",
        "patch": "@@ -100,7 +100,7 @@ public String getDescription() {\n \n   @Override\n   public void execute(ComputationStep.Context context) {\n-    if (analysisMetadataHolder.isFirstAnalysis()) {\n+    if (analysisMetadataHolder.isFirstAnalysis() || !analysisMetadataHolder.isLongLivingBranch()) {\n       periodsHolder.setPeriod(null);\n       return;\n     }"
    },
    {
        "commit_id": "db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "commit_message": "fix Request.mandatoryParam not failing on blank parameter value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "buggy_code": "expectedException.expectMessage(\"A non empty name is required\");",
        "fixed_code": "expectedException.expectMessage(\"The 'name' parameter is missing\");",
        "patch": "@@ -212,7 +212,7 @@ public void fail_if_not_blank_name() {\n     logInAsProjectAdministrator(project);\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"A non empty name is required\");\n+    expectedException.expectMessage(\"The 'name' parameter is missing\");\n \n     call(OTHER.name(), \"    \", analysis.getUuid());\n   }"
    },
    {
        "commit_id": "db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "commit_message": "fix Request.mandatoryParam not failing on blank parameter value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "buggy_code": "expectedException.expectMessage(\"Name can't be empty\");",
        "fixed_code": "expectedException.expectMessage(\"The 'name' parameter is missing\");",
        "patch": "@@ -154,7 +154,7 @@ public void fail_on_empty_name() {\n     QGateWithOrgDto qualityGate = db.qualityGates().insertQualityGate(organization);\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Name can't be empty\");\n+    expectedException.expectMessage(\"The 'name' parameter is missing\");\n \n     ws.newRequest()\n       .setParam(\"id\", qualityGate.getId().toString())"
    },
    {
        "commit_id": "db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "commit_message": "fix Request.mandatoryParam not failing on blank parameter value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "buggy_code": "expectedException.expectMessage(\"Setting key is mandatory and must not be empty\");",
        "fixed_code": "expectedException.expectMessage(\"The 'key' parameter is missing\");",
        "patch": "@@ -434,7 +434,7 @@ public void fail_when_no_key() {\n   @Test\n   public void fail_when_empty_key_value() {\n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Setting key is mandatory and must not be empty\");\n+    expectedException.expectMessage(\"The 'key' parameter is missing\");\n \n     callForGlobalSetting(\"  \", \"my value\");\n   }"
    },
    {
        "commit_id": "db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "commit_message": "fix Request.mandatoryParam not failing on blank parameter value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db18af0468a0c79a104afcc5cd9bcca8e30704c9",
        "buggy_code": "checkArgument(value != null, format(MSG_PARAMETER_MISSING, key));",
        "fixed_code": "checkArgument(value != null && !value.isEmpty(), format(MSG_PARAMETER_MISSING, key));",
        "patch": "@@ -77,7 +77,7 @@ public BufferedReader getReader() {\n    */\n   public String mandatoryParam(String key) {\n     String value = param(key);\n-    checkArgument(value != null, format(MSG_PARAMETER_MISSING, key));\n+    checkArgument(value != null && !value.isEmpty(), format(MSG_PARAMETER_MISSING, key));\n     return value;\n   }\n "
    },
    {
        "commit_id": "321bbc90919cc7c1c0e56d1dbcd0c526fc81d44b",
        "commit_message": "SONAR-11519 Fix description of api/users/update WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/321bbc90919cc7c1c0e56d1dbcd0c526fc81d44b",
        "buggy_code": ".setDescription(\"Update a user. If a deactivated user account exists with the given login, it will be reactivated. \" +",
        "fixed_code": ".setDescription(\"Update a user.<br/>\" +",
        "patch": "@@ -74,7 +74,7 @@ public UpdateAction(UserUpdater userUpdater, UserSession userSession, UserJsonWr\n   @Override\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(ACTION_UPDATE)\n-      .setDescription(\"Update a user. If a deactivated user account exists with the given login, it will be reactivated. \" +\n+      .setDescription(\"Update a user.<br/>\" +\n         \"Requires Administer System permission\")\n       .setSince(\"3.7\")\n       .setChangelog(new Change(\"5.2\", \"User's password can only be changed using the 'change_password' action.\"))"
    },
    {
        "commit_id": "bbff7949d06677e808d7c6f2cf4fd7cfc1f1a079",
        "commit_message": "SONAR-11587 Rework issue exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbff7949d06677e808d7c6f2cf4fd7cfc1f1a079",
        "buggy_code": "if (filters.accept(inputComponent.key(), rawIssue)) {",
        "fixed_code": "if (filters.accept(inputComponent, rawIssue)) {",
        "patch": "@@ -70,7 +70,7 @@ public boolean initAndAddIssue(Issue issue) {\n \n     ScannerReport.Issue rawIssue = createReportIssue(issue, inputComponent.scannerId(), activeRule.severity());\n \n-    if (filters.accept(inputComponent.key(), rawIssue)) {\n+    if (filters.accept(inputComponent, rawIssue)) {\n       write(inputComponent.scannerId(), rawIssue);\n       return true;\n     }"
    },
    {
        "commit_id": "bbff7949d06677e808d7c6f2cf4fd7cfc1f1a079",
        "commit_message": "SONAR-11587 Rework issue exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbff7949d06677e808d7c6f2cf4fd7cfc1f1a079",
        "buggy_code": "Metadata metadata = fileMetadata.readMetadata(is, charset, inputFile.absolutePath(), exclusionsScanner.createCharHandlerFor(inputFile.key()));",
        "fixed_code": "Metadata metadata = fileMetadata.readMetadata(is, charset, inputFile.absolutePath(), exclusionsScanner.createCharHandlerFor(inputFile));",
        "patch": "@@ -64,7 +64,7 @@ public void setMetadata(String moduleKeyWithBranch, final DefaultInputFile input\n       }\n       InputStream is = charsetDetector.inputStream();\n       inputFile.setCharset(charset);\n-      Metadata metadata = fileMetadata.readMetadata(is, charset, inputFile.absolutePath(), exclusionsScanner.createCharHandlerFor(inputFile.key()));\n+      Metadata metadata = fileMetadata.readMetadata(is, charset, inputFile.absolutePath(), exclusionsScanner.createCharHandlerFor(inputFile));\n       inputFile.setMetadata(metadata);\n       inputFile.setStatus(statusDetection.status(moduleKeyWithBranch, inputFile, metadata.hash()));\n       LOG.debug(\"'{}' generated metadata{} with charset '{}'\", inputFile, inputFile.type() == Type.TEST ? \" as test \" : \"\", charset);"
    },
    {
        "commit_id": "532850a387e483592e6f2f80a5e833bcf218a58f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/532850a387e483592e6f2f80a5e833bcf218a58f",
        "buggy_code": "public interface Sensor {",
        "fixed_code": "public interface ProjectSensor {",
        "patch": "@@ -38,7 +38,7 @@\n @ScannerSide\n @SonarLintSide\n @ExtensionPoint\n-public interface Sensor {\n+public interface ProjectSensor {\n \n   /**\n    * Populate {@link SensorDescriptor} of this sensor."
    },
    {
        "commit_id": "3a9fc2f40564404749d501d354b79a91e3df3a49",
        "commit_message": "SONAR-11463 Don't migrate root folders and fix component key migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a9fc2f40564404749d501d354b79a91e3df3a49",
        "buggy_code": "ComponentUuidFactory componentUuidFactory = new ComponentUuidFactory(dbClient, dbSession, rootKey, reportModulesPath);",
        "fixed_code": "ComponentUuidFactory componentUuidFactory = new ComponentUuidFactory(dbClient, dbSession, rootKey, reportModulesPath.get());",
        "patch": "@@ -79,7 +79,7 @@ public void execute(ComputationStep.Context context) {\n       String rootKey = keyGenerator.generateKey(reportProject, null);\n \n       // loads the UUIDs from database. If they don't exist, then generate new ones\n-      ComponentUuidFactory componentUuidFactory = new ComponentUuidFactory(dbClient, dbSession, rootKey, reportModulesPath);\n+      ComponentUuidFactory componentUuidFactory = new ComponentUuidFactory(dbClient, dbSession, rootKey, reportModulesPath.get());\n \n       String rootUuid = componentUuidFactory.getOrCreateForKey(rootKey);\n       SnapshotDto baseAnalysis = loadBaseAnalysis(dbSession, rootUuid);"
    },
    {
        "commit_id": "aec83bafc952d4786fa9552fb8749c9efce517b5",
        "commit_message": "SONAR-11465 Introduce a new annotation for project level extensions\n\nand deprecate issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aec83bafc952d4786fa9552fb8749c9efce517b5",
        "buggy_code": "package org.sonar.api.batch.sensor;",
        "fixed_code": "package org.sonar.api.batch;",
        "patch": "@@ -18,4 +18,4 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @javax.annotation.ParametersAreNonnullByDefault\n-package org.sonar.api.batch.sensor;\n+package org.sonar.api.batch;"
    },
    {
        "commit_id": "6a653cd1091bb549fc5043b3066b7bfb45da2883",
        "commit_message": "Fix Quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a653cd1091bb549fc5043b3066b7bfb45da2883",
        "buggy_code": "return value == 1.0D;",
        "fixed_code": "return value != null && value.intValue() == 1;",
        "patch": "@@ -238,7 +238,7 @@ public ValueType getValueType() {\n    */\n   public boolean getBooleanValue() {\n     checkValueType(ValueType.BOOLEAN);\n-    return value == 1.0D;\n+    return value != null && value.intValue() == 1;\n   }\n \n   /**"
    },
    {
        "commit_id": "5b69e096962a17caba0385a72daa032a5a978f85",
        "commit_message": "SONAR-11577 Fix direction of certain metrics\n\nmetrics: tests, conditions_to_cover, new_conditions_to_cover",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b69e096962a17caba0385a72daa032a5a978f85",
        "buggy_code": "verifyMigrationCount(underTest, 3);",
        "fixed_code": "verifyMigrationCount(underTest, 4);",
        "patch": "@@ -35,7 +35,7 @@ public void migrationNumber_starts_at_2500() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 3);\n+    verifyMigrationCount(underTest, 4);\n   }\n \n }"
    },
    {
        "commit_id": "c1caffa9fb8cabe9659d81372d82481edc00b545",
        "commit_message": "SONARCLOUD-213 fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1caffa9fb8cabe9659d81372d82481edc00b545",
        "buggy_code": "private PermissionTemplateService underTest = new PermissionTemplateService(dbTester.getDbClient(), projectIndexers, userSession, defaultTemplatesResolver, permissionService);",
        "fixed_code": "private PermissionTemplateService underTest = new PermissionTemplateService(dbTester.getDbClient(), projectIndexers, userSession, defaultTemplatesResolver);",
        "patch": "@@ -66,7 +66,7 @@ public class PermissionTemplateServiceTest {\n   private DbSession session = dbTester.getSession();\n   private ProjectIndexers projectIndexers = new TestProjectIndexers();\n \n-  private PermissionTemplateService underTest = new PermissionTemplateService(dbTester.getDbClient(), projectIndexers, userSession, defaultTemplatesResolver, permissionService);\n+  private PermissionTemplateService underTest = new PermissionTemplateService(dbTester.getDbClient(), projectIndexers, userSession, defaultTemplatesResolver);\n \n   @Test\n   public void apply_does_not_insert_permission_to_group_AnyOne_when_applying_template_on_private_project() {"
    },
    {
        "commit_id": "c1caffa9fb8cabe9659d81372d82481edc00b545",
        "commit_message": "SONARCLOUD-213 fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1caffa9fb8cabe9659d81372d82481edc00b545",
        "buggy_code": "private UpdateVisibilityAction underTest = new UpdateVisibilityAction(dbClient, TestComponentFinder.from(dbTester), userSessionRule, projectIndexers, wsSupport, permissionService);",
        "fixed_code": "private UpdateVisibilityAction underTest = new UpdateVisibilityAction(dbClient, TestComponentFinder.from(dbTester), userSessionRule, projectIndexers, wsSupport);",
        "patch": "@@ -106,7 +106,7 @@ public class UpdateVisibilityActionTest {\n   private BillingValidationsProxy billingValidations = mock(BillingValidationsProxy.class);\n \n   private ProjectsWsSupport wsSupport = new ProjectsWsSupport(dbClient, TestDefaultOrganizationProvider.from(dbTester), billingValidations);\n-  private UpdateVisibilityAction underTest = new UpdateVisibilityAction(dbClient, TestComponentFinder.from(dbTester), userSessionRule, projectIndexers, wsSupport, permissionService);\n+  private UpdateVisibilityAction underTest = new UpdateVisibilityAction(dbClient, TestComponentFinder.from(dbTester), userSessionRule, projectIndexers, wsSupport);\n   private WsActionTester ws = new WsActionTester(underTest);\n \n   private final Random random = new Random();"
    },
    {
        "commit_id": "877852948a91285c86b277853d911fe86c3f826d",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/877852948a91285c86b277853d911fe86c3f826d",
        "buggy_code": "return executeLargeInputs(repoIds, partionnedIds -> getMapper(session).selectByRepoIds(alm.getId(), partionnedIds));",
        "fixed_code": "return executeLargeInputs(repoIds, partitionedIds -> getMapper(session).selectByRepoIds(alm.getId(), partitionedIds));",
        "patch": "@@ -67,7 +67,7 @@ public Optional<ProjectAlmBindingDto> selectByProjectUuid(DbSession session, Str\n    * <p>Results may be in a different order as input ids.</p>\n    */\n   public List<ProjectAlmBindingDto> selectByRepoIds(final DbSession session, ALM alm, Collection<String> repoIds) {\n-    return executeLargeInputs(repoIds, partionnedIds -> getMapper(session).selectByRepoIds(alm.getId(), partionnedIds));\n+    return executeLargeInputs(repoIds, partitionedIds -> getMapper(session).selectByRepoIds(alm.getId(), partitionedIds));\n   }\n \n   public Optional<ProjectAlmBindingDto> selectByRepoId(final DbSession session, ALM alm, String repoId) {"
    },
    {
        "commit_id": "8be4454cd37014235a372dba54caea9ae25a5722",
        "commit_message": "SONAR-11494 prevent loading of closed issue changes to OOM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8be4454cd37014235a372dba54caea9ae25a5722",
        "buggy_code": "componentIssuesLoader.loadChanges(matchesClosedIssues);",
        "fixed_code": "componentIssuesLoader.loadLatestDiffChangesForReopeningOfClosedIssues(matchesClosedIssues);",
        "patch": "@@ -67,7 +67,7 @@ public Tracking<DefaultIssue, DefaultIssue> track(Component component) {\n     Set<DefaultIssue> matchesClosedIssues = closedIssuesTracking.getMatchedRaws().values().stream()\n       .filter(t -> Issue.STATUS_CLOSED.equals(t.getStatus()))\n       .collect(MoreCollectors.toSet());\n-    componentIssuesLoader.loadChanges(matchesClosedIssues);\n+    componentIssuesLoader.loadLatestDiffChangesForReopeningOfClosedIssues(matchesClosedIssues);\n \n     return closedIssuesTracking;\n   }"
    },
    {
        "commit_id": "8be4454cd37014235a372dba54caea9ae25a5722",
        "commit_message": "SONAR-11494 prevent loading of closed issue changes to OOM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8be4454cd37014235a372dba54caea9ae25a5722",
        "buggy_code": "verify(componentIssuesLoader).loadChanges(mappedClosedIssues);",
        "fixed_code": "verify(componentIssuesLoader).loadLatestDiffChangesForReopeningOfClosedIssues(mappedClosedIssues);",
        "patch": "@@ -139,7 +139,7 @@ public void track_loadChanges_on_matched_closed_issues() {\n     assertThat(tracking).isSameAs(closedTracking);\n     verify(tracker).trackNonClosed(rawInput, openIssuesInput);\n     verify(tracker).trackClosed(nonClosedTracking, closedIssuesInput);\n-    verify(componentIssuesLoader).loadChanges(mappedClosedIssues);\n+    verify(componentIssuesLoader).loadLatestDiffChangesForReopeningOfClosedIssues(mappedClosedIssues);\n     verifyNoMoreInteractions(tracker);\n   }\n }"
    },
    {
        "commit_id": "eaac2bf87391734b95368e0645bd2a215f21f62a",
        "commit_message": "SONAR-11515 Backdate issue when QP has changed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eaac2bf87391734b95368e0645bd2a215f21f62a",
        "buggy_code": "activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null));",
        "fixed_code": "activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null, \"qp1\"));",
        "patch": "@@ -367,6 +367,6 @@ private void assertInitializedExternalIssue(DefaultIssue issue) {\n   }\n \n   private void markRuleAsActive(RuleKey ruleKey) {\n-    activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null));\n+    activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null, \"qp1\"));\n   }\n }"
    },
    {
        "commit_id": "eaac2bf87391734b95368e0645bd2a215f21f62a",
        "commit_message": "SONAR-11515 Backdate issue when QP has changed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eaac2bf87391734b95368e0645bd2a215f21f62a",
        "buggy_code": "return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null));",
        "fixed_code": "return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null, \"qp1\"));",
        "patch": "@@ -28,7 +28,7 @@\n public class AlwaysActiveRulesHolderImpl implements ActiveRulesHolder {\n   @Override\n   public Optional<ActiveRule> get(RuleKey ruleKey) {\n-    return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null));\n+    return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null, \"qp1\"));\n   }\n \n }"
    },
    {
        "commit_id": "40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "commit_message": "SONAR-11514 Backdate issue when rule parameter is updated (#971)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "buggy_code": "return new ActiveRule(key, input.getSeverity().name(), params, input.getCreatedAt(), rule.getPluginKey());",
        "fixed_code": "return new ActiveRule(key, input.getSeverity().name(), params, input.getCreatedAt(), input.getUpdatedAt(), rule.getPluginKey());",
        "patch": "@@ -72,6 +72,6 @@ public String getDescription() {\n   private static ActiveRule convert(ScannerReport.ActiveRule input, Rule rule) {\n     RuleKey key = RuleKey.of(input.getRuleRepository(), input.getRuleKey());\n     Map<String, String> params = new HashMap<>(input.getParamsByKeyMap());\n-    return new ActiveRule(key, input.getSeverity().name(), params, input.getCreatedAt(), rule.getPluginKey());\n+    return new ActiveRule(key, input.getSeverity().name(), params, input.getCreatedAt(), input.getUpdatedAt(), rule.getPluginKey());\n   }\n }"
    },
    {
        "commit_id": "40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "commit_message": "SONAR-11514 Backdate issue when rule parameter is updated (#971)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "buggy_code": "activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null));",
        "fixed_code": "activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, 1_000L, null));",
        "patch": "@@ -367,6 +367,6 @@ private void assertInitializedExternalIssue(DefaultIssue issue) {\n   }\n \n   private void markRuleAsActive(RuleKey ruleKey) {\n-    activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, null));\n+    activeRulesHolder.put(new ActiveRule(ruleKey, Severity.CRITICAL, emptyMap(), 1_000L, 1_000L, null));\n   }\n }"
    },
    {
        "commit_id": "40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "commit_message": "SONAR-11514 Backdate issue when rule parameter is updated (#971)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40c58462ac2260d53bc517f18236a1cdbcc4572b",
        "buggy_code": "return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null));",
        "fixed_code": "return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, 1_000L, null));",
        "patch": "@@ -28,7 +28,7 @@\n public class AlwaysActiveRulesHolderImpl implements ActiveRulesHolder {\n   @Override\n   public Optional<ActiveRule> get(RuleKey ruleKey) {\n-    return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, null));\n+    return Optional.of(new ActiveRule(ruleKey, Severity.MAJOR, emptyMap(), 1_000L, 1_000L, null));\n   }\n \n }"
    },
    {
        "commit_id": "4a1aaab8cc4d0db84f06389093b7bfa3d8e70abd",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a1aaab8cc4d0db84f06389093b7bfa3d8e70abd",
        "buggy_code": ".filter(settingsWsSupport.isDefinitionVisible(component))",
        "fixed_code": ".filter(definition -> settingsWsSupport.isVisible(definition.key(), definition, component))",
        "patch": "@@ -100,7 +100,7 @@ private ListDefinitionsWsResponse doHandle(Request request) {\n     propertyDefinitions.getAll().stream()\n       .filter(definition -> qualifier.map(s -> definition.qualifiers().contains(s)).orElseGet(definition::global))\n       .filter(definition -> wsRequest.getBranch() == null || SETTING_ON_BRANCHES.contains(definition.key()))\n-      .filter(settingsWsSupport.isDefinitionVisible(component))\n+      .filter(definition -> settingsWsSupport.isVisible(definition.key(), definition, component))\n       .sorted(comparing(PropertyDefinition::category, String::compareToIgnoreCase)\n         .thenComparingInt(PropertyDefinition::index)\n         .thenComparing(PropertyDefinition::name, String::compareToIgnoreCase))"
    },
    {
        "commit_id": "4a1aaab8cc4d0db84f06389093b7bfa3d8e70abd",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a1aaab8cc4d0db84f06389093b7bfa3d8e70abd",
        "buggy_code": "assertThat(container.size()).isEqualTo(12 + 2);",
        "fixed_code": "assertThat(container.size()).isEqualTo(11 + 2);",
        "patch": "@@ -29,6 +29,6 @@ public class SettingsWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new SettingsWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(12 + 2);\n+    assertThat(container.size()).isEqualTo(11 + 2);\n   }\n }"
    },
    {
        "commit_id": "f3b6552a3620962f3dde1b1e449e7925c883e4fa",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f3b6552a3620962f3dde1b1e449e7925c883e4fa",
        "buggy_code": "double density = Math.min(100d, 100d * duplicatedLines / nbLines);",
        "fixed_code": "double density = Math.min(100.0, 100.0 * duplicatedLines / nbLines);",
        "patch": "@@ -189,7 +189,7 @@ private Optional<Measure> createDuplicatedLinesDensityMeasure(DuplicationCounter\n       int duplicatedLines = counter.dupLineCount;\n       int nbLines = counter.lineCount;\n       if (nbLines > 0) {\n-        double density = Math.min(100d, 100d * duplicatedLines / nbLines);\n+        double density = Math.min(100.0, 100.0 * duplicatedLines / nbLines);\n         return Optional.of(Measure.newMeasureBuilder().create(density, context.getMetric().getDecimalScale()));\n       }\n       return Optional.empty();"
    },
    {
        "commit_id": "bdd538eb0c2b5937c565480ecab58908d095aad2",
        "commit_message": "SONAR-10361 Handle assigning issue to a user with commas in name (#903)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdd538eb0c2b5937c565480ecab58908d095aad2",
        "buggy_code": "dto.setChangeData(diffs.toString());",
        "fixed_code": "dto.setChangeData(diffs.toEncodedString());",
        "patch": "@@ -72,7 +72,7 @@ public static IssueChangeDto of(DefaultIssueComment comment) {\n   public static IssueChangeDto of(String issueKey, FieldDiffs diffs) {\n     IssueChangeDto dto = newDto(issueKey);\n     dto.setChangeType(IssueChangeDto.TYPE_FIELD_CHANGE);\n-    dto.setChangeData(diffs.toString());\n+    dto.setChangeData(diffs.toEncodedString());\n     dto.setUserUuid(diffs.userUuid());\n     Date createdAt = requireNonNull(diffs.creationDate(), \"Diffs created at must not be null\");\n     dto.setIssueChangeCreationDate(createdAt.getTime());"
    },
    {
        "commit_id": "f4938183c113286d7e785637452616661e457be5",
        "commit_message": "Fix scanner test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4938183c113286d7e785637452616661e457be5",
        "buggy_code": "adaptor = new DefaultSensorContext(mock(InputModule.class), settings.asConfig(), settings, fs, activeRules, analysisMode, sensorStorage, runtime, branchConfig);",
        "fixed_code": "adaptor = new DefaultSensorContext(mock(InputModule.class), settings.asConfig(), settings, fs, activeRules, analysisMode, sensorStorage, runtime);",
        "patch": "@@ -72,7 +72,7 @@ public void prepare() throws Exception {\n     sensorStorage = mock(SensorStorage.class);\n     analysisMode = mock(AnalysisMode.class);\n     runtime = SonarRuntimeImpl.forSonarQube(Version.parse(\"5.5\"), SonarQubeSide.SCANNER);\n-    adaptor = new DefaultSensorContext(mock(InputModule.class), settings.asConfig(), settings, fs, activeRules, analysisMode, sensorStorage, runtime, branchConfig);\n+    adaptor = new DefaultSensorContext(mock(InputModule.class), settings.asConfig(), settings, fs, activeRules, analysisMode, sensorStorage, runtime);\n   }\n \n   @Test"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "Double unresolvedVariations = (double) currentCounters.counterForPeriod().unresolved;",
        "fixed_code": "double unresolvedVariations = (double) currentCounters.counterForPeriod().unresolved;",
        "patch": "@@ -185,7 +185,7 @@ private void addMeasuresByPeriod(Component component) {\n     if (!periodHolder.hasPeriod()) {\n       return;\n     }\n-    Double unresolvedVariations = (double) currentCounters.counterForPeriod().unresolved;\n+    double unresolvedVariations = (double) currentCounters.counterForPeriod().unresolved;\n     measureRepository.add(component, metricRepository.getByKey(NEW_VIOLATIONS_KEY), Measure.newMeasureBuilder()\n       .setVariation(unresolvedVariations)\n       .createNoValue());"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "boolean lineHashesVersionUpdated = !previousDto.getLineHashesVersion().equals(lineHashesVersion);",
        "fixed_code": "boolean lineHashesVersionUpdated = previousDto.getLineHashesVersion() != lineHashesVersion;",
        "patch": "@@ -136,7 +136,7 @@ private void persistSource(FileSourceDataComputer.Data fileSourceData, Component\n         boolean srcHashUpdated = !srcHash.equals(previousDto.getSrcHash());\n         String revision = computeRevision(latestChangeWithRevision);\n         boolean revisionUpdated = !ObjectUtils.equals(revision, previousDto.getRevision());\n-        boolean lineHashesVersionUpdated = !previousDto.getLineHashesVersion().equals(lineHashesVersion);\n+        boolean lineHashesVersionUpdated = previousDto.getLineHashesVersion() != lineHashesVersion;\n         if (binaryDataUpdated || srcHashUpdated || revisionUpdated || lineHashesVersionUpdated) {\n           previousDto\n             .setBinaryData(binaryData)"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "Integer ruleId = ruleRepository.getByKey(issue.ruleKey()).getId();",
        "fixed_code": "int ruleId = ruleRepository.getByKey(issue.ruleKey()).getId();",
        "patch": "@@ -92,7 +92,7 @@ private boolean persistIssueIfRequired(IssueMapper mapper, DefaultIssue issue, I\n   }\n \n   private void persistNewIssue(IssueMapper mapper, DefaultIssue issue) {\n-    Integer ruleId = ruleRepository.getByKey(issue.ruleKey()).getId();\n+    int ruleId = ruleRepository.getByKey(issue.ruleKey()).getId();\n     IssueDto dto = IssueDto.toDtoForComputationInsert(issue, ruleId, system2.now());\n     mapper.insert(dto);\n   }"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "public void startInternal() throws LifecycleException {",
        "fixed_code": "public synchronized void startInternal() throws LifecycleException {",
        "patch": "@@ -33,7 +33,7 @@\n public class ProgrammaticLogbackValve extends LogbackValve {\n \n   @Override\n-  public void startInternal() throws LifecycleException {\n+  public synchronized void startInternal() throws LifecycleException {\n     try {\n       // direct coupling with LogbackValve implementation\n       FieldUtils.writeField(this, \"scheduledExecutorService\", ExecutorServiceUtil.newScheduledExecutorService(), true);"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1000))",
        "fixed_code": "jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1_000L))",
        "patch": "@@ -128,7 +128,7 @@ String refresh(Claims token, int expirationTimeInSeconds) {\n     for (Map.Entry<String, Object> entry : token.entrySet()) {\n       jwtBuilder.claim(entry.getKey(), entry.getValue());\n     }\n-    jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1000))\n+    jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1_000L))\n       .signWith(SIGNATURE_ALGORITHM, secretKey);\n     return jwtBuilder.compact();\n   }"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "return format(Locale.ENGLISH, \"%.1f%%\", 100 * amount * 1.0D / 100L);",
        "fixed_code": "return format(Locale.ENGLISH, \"%.1f%%\", 100.0 * amount * 1.0 / 100.0);",
        "patch": "@@ -101,6 +101,6 @@ private ClusterStatsResponse clusterStats() {\n   }\n \n   private static String formatPercent(long amount) {\n-    return format(Locale.ENGLISH, \"%.1f%%\", 100 * amount * 1.0D / 100L);\n+    return format(Locale.ENGLISH, \"%.1f%%\", 100.0 * amount * 1.0 / 100.0);\n   }\n }"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "Boolean changeToPrivate = visibility == null ? dbClient.organizationDao().getNewProjectPrivate(dbSession, organization) : \"private\".equals(visibility);",
        "fixed_code": "boolean changeToPrivate = visibility == null ? dbClient.organizationDao().getNewProjectPrivate(dbSession, organization) : \"private\".equals(visibility);",
        "patch": "@@ -117,7 +117,7 @@ private CreateWsResponse doHandle(CreateRequest request) {\n       OrganizationDto organization = support.getOrganization(dbSession, request.getOrganization());\n       userSession.checkPermission(PROVISION_PROJECTS, organization);\n       String visibility = request.getVisibility();\n-      Boolean changeToPrivate = visibility == null ? dbClient.organizationDao().getNewProjectPrivate(dbSession, organization) : \"private\".equals(visibility);\n+      boolean changeToPrivate = visibility == null ? dbClient.organizationDao().getNewProjectPrivate(dbSession, organization) : \"private\".equals(visibility);\n       support.checkCanUpdateProjectsVisibility(organization, changeToPrivate);\n \n       ComponentDto componentDto = componentUpdater.create(dbSession, newComponentBuilder()"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "Long componentId = Long.parseLong(component);",
        "fixed_code": "long componentId = Long.parseLong(component);",
        "patch": "@@ -124,7 +124,7 @@ private List<ComponentDto> searchComponents(DbSession dbSession, Request request\n \n   private Optional<ComponentDto> getProjectByKeyOrId(DbSession dbSession, String component) {\n     try {\n-      Long componentId = Long.parseLong(component);\n+      long componentId = Long.parseLong(component);\n       return ofNullable(dbClient.componentDao().selectById(dbSession, componentId).orElse(null));\n     } catch (NumberFormatException e) {\n       return ofNullable(dbClient.componentDao().selectByKey(dbSession, component).orElse(null));"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "Long componentId = Long.parseLong(component);",
        "fixed_code": "long componentId = Long.parseLong(component);",
        "patch": "@@ -120,7 +120,7 @@ private Optional<ComponentDto> loadComponent(DbSession dbSession, Request reques\n \n   private Optional<ComponentDto> loadComponent(DbSession dbSession, String component) {\n     try {\n-      Long componentId = Long.parseLong(component);\n+      long componentId = Long.parseLong(component);\n       return Optional.ofNullable(dbClient.componentDao().selectById(dbSession, componentId).orElse(null));\n     } catch (NumberFormatException e) {\n       return Optional.ofNullable(dbClient.componentDao().selectByKey(dbSession, component).orElse(null));"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": ".setHtmlDescription(\"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.\"",
        "fixed_code": ".setHtmlDescription(\"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. \"",
        "patch": "@@ -60,7 +60,7 @@ private static void defineBranchCoverageRule(RulesDefinition.NewRepository repo)\n     RulesDefinition.NewRule rule = repo.createRule(CommonRuleKeys.INSUFFICIENT_BRANCH_COVERAGE);\n     rule.setName(\"Branches should have sufficient coverage by tests\")\n       .addTags(\"bad-practice\")\n-      .setHtmlDescription(\"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.\"\n+      .setHtmlDescription(\"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. \"\n         + \"It gives the number of branches to be covered in order to reach the required threshold.\")\n       .setDebtRemediationFunction(rule.debtRemediationFunctions().linear(\"5min\"))\n       .setGapDescription(\"number of uncovered conditions\")"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "OrganizationDto organization = checkFoundWithOptional(dbClient.organizationDao().selectByUuid(dbSession, profile.getOrganizationUuid()), \"No organization with UUID \",",
        "fixed_code": "OrganizationDto organization = checkFoundWithOptional(dbClient.organizationDao().selectByUuid(dbSession, profile.getOrganizationUuid()), \"No organization with UUID %s\",",
        "patch": "@@ -131,7 +131,7 @@ private void setOrganization(DbSession dbSession, RuleQuery query, Request reque\n       query.setOrganization(wsSupport.getOrganizationByKey(dbSession, organizationKey));\n       return;\n     }\n-    OrganizationDto organization = checkFoundWithOptional(dbClient.organizationDao().selectByUuid(dbSession, profile.getOrganizationUuid()), \"No organization with UUID \",\n+    OrganizationDto organization = checkFoundWithOptional(dbClient.organizationDao().selectByUuid(dbSession, profile.getOrganizationUuid()), \"No organization with UUID %s\",\n       profile.getOrganizationUuid());\n     if (organizationKey != null) {\n       OrganizationDto inputOrganization = checkFoundWithOptional(dbClient.organizationDao().selectByKey(dbSession, organizationKey), \"No organization with key '%s'\","
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": ".setDescription(\"Optional note in markdown format. Use empty value to remove current note. Note is not changed\" +",
        "fixed_code": ".setDescription(\"Optional note in markdown format. Use empty value to remove current note. Note is not changed \" +",
        "patch": "@@ -111,7 +111,7 @@ public void define(WebService.NewController controller) {\n       .setExampleValue(\"java8,security\");\n \n     action.createParam(PARAM_MARKDOWN_NOTE)\n-      .setDescription(\"Optional note in markdown format. Use empty value to remove current note. Note is not changed\" +\n+      .setDescription(\"Optional note in markdown format. Use empty value to remove current note. Note is not changed \" +\n         \"if the parameter is not set.\")\n       .setExampleValue(\"my *note*\");\n "
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "\"Requires 'Browse' permission when a component is specified<br/>\",",
        "fixed_code": "\"Requires 'Browse' permission when a component is specified<br/>\" +",
        "patch": "@@ -69,7 +69,7 @@ public ListDefinitionsAction(DbClient dbClient, ComponentFinder componentFinder,\n   public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(\"list_definitions\")\n       .setDescription(\"List settings definitions.<br>\" +\n-        \"Requires 'Browse' permission when a component is specified<br/>\",\n+        \"Requires 'Browse' permission when a component is specified<br/>\" +\n         \"To access licensed settings, authentication is required<br/>\" +\n           \"To access secured settings, one of the following permissions is required: \" +\n           \"<ul>\" +"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "\"Requires 'Browse' or 'Execute Analysis' permission when a component is specified<br/>\",",
        "fixed_code": "\"Requires 'Browse' or 'Execute Analysis' permission when a component is specified.<br/>\" +",
        "patch": "@@ -92,7 +92,7 @@ public void define(WebService.NewController context) {\n       .setDescription(\"List settings values.<br>\" +\n         \"If no value has been set for a setting, then the default value is returned.<br>\" +\n         \"The settings from conf/sonar.properties are excluded from results.<br>\" +\n-        \"Requires 'Browse' or 'Execute Analysis' permission when a component is specified<br/>\",\n+        \"Requires 'Browse' or 'Execute Analysis' permission when a component is specified.<br/>\" +\n         \"To access licensed settings, authentication is required<br/>\" +\n           \"To access secured settings, one of the following permissions is required: \" +\n           \"<ul>\" +"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": ".setDescription(\"The key of the webhook to be deleted,\"+",
        "fixed_code": ".setDescription(\"The key of the webhook to be deleted, \"+",
        "patch": "@@ -63,7 +63,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(KEY_PARAM)\n       .setRequired(true)\n       .setMaximumLength(KEY_PARAM_MAXIMUN_LENGTH)\n-      .setDescription(\"The key of the webhook to be deleted,\"+\n+      .setDescription(\"The key of the webhook to be deleted, \"+\n         \"auto-generated value can be obtained through api/webhooks/create or api/webhooks/list\")\n       .setExampleValue(KEY_PROJECT_EXAMPLE_001);\n "
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": ".setDescription(\"The key of the webhook to be updated,\"+",
        "fixed_code": ".setDescription(\"The key of the webhook to be updated, \"+",
        "patch": "@@ -69,7 +69,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(KEY_PARAM)\n       .setRequired(true)\n       .setMaximumLength(KEY_PARAM_MAXIMUN_LENGTH)\n-      .setDescription(\"The key of the webhook to be updated,\"+\n+      .setDescription(\"The key of the webhook to be updated, \"+\n         \"auto-generated value can be obtained through api/webhooks/create or api/webhooks/list\")\n       .setExampleValue(KEY_PROJECT_EXAMPLE_001);\n "
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": ".setDescription(\"Key of the webhook that triggered those deliveries,\" +",
        "fixed_code": ".setDescription(\"Key of the webhook that triggered those deliveries, \" +",
        "patch": "@@ -84,7 +84,7 @@ public void define(WebService.NewController controller) {\n \n     action.createParam(PARAM_WEBHOOK)\n       .setSince(\"7.1\")\n-      .setDescription(\"Key of the webhook that triggered those deliveries,\" +\n+      .setDescription(\"Key of the webhook that triggered those deliveries, \" +\n         \"auto-generated value that can be obtained through api/webhooks/create or api/webhooks/list\")\n       .setExampleValue(UUID_EXAMPLE_02);\n "
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "\"Forcing user authentication prevents anonymous users from accessing the SonarQube UI, or project data via the Web API.\"",
        "fixed_code": "\"Forcing user authentication prevents anonymous users from accessing the SonarQube UI, or project data via the Web API. \"",
        "patch": "@@ -38,7 +38,7 @@ static List<PropertyDefinition> all() {\n         .defaultValue(Boolean.toString(CoreProperties.CORE_FORCE_AUTHENTICATION_DEFAULT_VALUE))\n         .name(\"Force user authentication\")\n         .description(\n-          \"Forcing user authentication prevents anonymous users from accessing the SonarQube UI, or project data via the Web API.\"\n+          \"Forcing user authentication prevents anonymous users from accessing the SonarQube UI, or project data via the Web API. \"\n             + \"Some specific read-only Web APIs, including those required to prompt authentication, are still available anonymously.\")\n         .type(PropertyType.BOOLEAN)\n         .category(CoreProperties.CATEGORY_SECURITY)"
    },
    {
        "commit_id": "bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "commit_message": "Fix bugs, mainly about type casts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bee3ce3d74bc9143c56a3aeb68dcbb4ba3d06513",
        "buggy_code": "int loaded = 0;",
        "fixed_code": "long loaded = 0;",
        "patch": "@@ -70,7 +70,7 @@ public List<LoadedActiveRule> load(String qualityProfileKey) {\n     List<LoadedActiveRule> ruleList = new LinkedList<>();\n     int page = 1;\n     int pageSize = 500;\n-    int loaded = 0;\n+    long loaded = 0;\n \n     while (true) {\n       GetRequest getRequest = new GetRequest(getUrl(qualityProfileKey, page, pageSize));"
    },
    {
        "commit_id": "619214a968a6887d14da7f3eee66ecaba85145ee",
        "commit_message": "SONAR-10820 fix api/ce/activity search by name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/619214a968a6887d14da7f3eee66ecaba85145ee",
        "buggy_code": "private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW, \"DEV\", Qualifiers.MODULE};",
        "fixed_code": "private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW};",
        "patch": "@@ -73,7 +73,7 @@\n \n public class ActivityAction implements CeWsAction {\n   private static final int MAX_PAGE_SIZE = 1000;\n-  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW, \"DEV\", Qualifiers.MODULE};\n+  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW};\n \n   private final UserSession userSession;\n   private final DbClient dbClient;"
    },
    {
        "commit_id": "e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "commit_message": "SONAR-11365 Fix PR on PR",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "buggy_code": "project = loader.load(projectKey.get(), isIssuesMode, branchConfig.branchBase());",
        "fixed_code": "project = loader.load(projectKey.get(), isIssuesMode, branchConfig.longLivingSonarReferenceBranch());",
        "patch": "@@ -36,7 +36,7 @@ public ProjectRepositories provide(ProjectRepositoriesLoader loader, ProjectKey\n     if (project == null) {\n       boolean isIssuesMode = mode.isIssues();\n       Profiler profiler = Profiler.create(LOG).startInfo(LOG_MSG);\n-      project = loader.load(projectKey.get(), isIssuesMode, branchConfig.branchBase());\n+      project = loader.load(projectKey.get(), isIssuesMode, branchConfig.longLivingSonarReferenceBranch());\n       checkProject(isIssuesMode);\n       profiler.stopInfo();\n     }"
    },
    {
        "commit_id": "e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "commit_message": "SONAR-11365 Fix PR on PR",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "buggy_code": "LOG.info(\"Pull request {} for merge into {} from {}\", branchConfig.pullRequestKey(), pullRequestBaseToDisplayName(branchConfig.branchBase()), branchConfig.branchName());",
        "fixed_code": "LOG.info(\"Pull request {} for merge into {} from {}\", branchConfig.pullRequestKey(), pullRequestBaseToDisplayName(branchConfig.targetScmBranch()), branchConfig.branchName());",
        "patch": "@@ -279,7 +279,7 @@ protected void doAfterStart() {\n \n     BranchConfiguration branchConfig = getComponentByType(BranchConfiguration.class);\n     if (branchConfig.branchType() == BranchType.PULL_REQUEST) {\n-      LOG.info(\"Pull request {} for merge into {} from {}\", branchConfig.pullRequestKey(), pullRequestBaseToDisplayName(branchConfig.branchBase()), branchConfig.branchName());\n+      LOG.info(\"Pull request {} for merge into {} from {}\", branchConfig.pullRequestKey(), pullRequestBaseToDisplayName(branchConfig.targetScmBranch()), branchConfig.branchName());\n     } else if (branchConfig.branchName() != null) {\n       LOG.info(\"Branch name: {}, type: {}\", branchConfig.branchName(), branchTypeToDisplayName(branchConfig.branchType()));\n     }"
    },
    {
        "commit_id": "e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "commit_message": "SONAR-11365 Fix PR on PR",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e481af9138fa10ce01b0dfe9f7b0bd961f8408d7",
        "buggy_code": "assertThat(result.branchTarget()).isNull();",
        "fixed_code": "assertThat(result.targetScmBranch()).isNull();",
        "patch": "@@ -98,7 +98,7 @@ public void settings_should_include_command_line_args_with_highest_priority() {\n   public void should_return_default_if_no_loader() {\n     BranchConfiguration result = provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests);\n \n-    assertThat(result.branchTarget()).isNull();\n+    assertThat(result.targetScmBranch()).isNull();\n     assertThat(result.branchType()).isEqualTo(BranchType.LONG);\n   }\n }"
    },
    {
        "commit_id": "357067b1cb44bcb96e1f8c29d54a4f2da536d921",
        "commit_message": "SONAR-10642 fix ce table data of branch/pr not purged",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/357067b1cb44bcb96e1f8c29d54a4f2da536d921",
        "buggy_code": "verifyMigrationCount(underTest, 16);",
        "fixed_code": "verifyMigrationCount(underTest, 17);",
        "patch": "@@ -35,6 +35,6 @@ public void migrationNumber_starts_at_2300() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 16);\n+    verifyMigrationCount(underTest, 17);\n   }\n }"
    },
    {
        "commit_id": "2419aab5bd60db808c9136b5dabda1d1d6d2adcb",
        "commit_message": "SONAR-11238 debug log instead of warn when highlighting data error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2419aab5bd60db808c9136b5dabda1d1d6d2adcb",
        "buggy_code": "LOG.warn(format(\"Inconsistency detected in Highlighting data. Highlighting will be ignored for file '%s'\", file.getDbKey()), e);",
        "fixed_code": "LOG.debug(format(\"Inconsistency detected in Highlighting data. Highlighting will be ignored for file '%s'\", file.getDbKey()), e);",
        "patch": "@@ -83,7 +83,7 @@ public Optional<ReadError> read(DbFileSources.Line.Builder lineBuilder) {\n         processHighlightings(lineBuilder);\n       } catch (RangeOffsetConverterException e) {\n         readError = new ReadError(HIGHLIGHTING, lineBuilder.getLine());\n-        LOG.warn(format(\"Inconsistency detected in Highlighting data. Highlighting will be ignored for file '%s'\", file.getDbKey()), e);\n+        LOG.debug(format(\"Inconsistency detected in Highlighting data. Highlighting will be ignored for file '%s'\", file.getDbKey()), e);\n       }\n     }\n     return Optional.ofNullable(readError);"
    },
    {
        "commit_id": "26fd94b9079e74ada689df7fe6b61d22a58ec05d",
        "commit_message": "SONAR-8368 fix unstable unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fd94b9079e74ada689df7fe6b61d22a58ec05d",
        "buggy_code": "int line = new Random().nextInt(500);",
        "fixed_code": "int line = 1 + new Random().nextInt(500);",
        "patch": "@@ -213,7 +213,7 @@ public void not_change_manual_severity() {\n \n   @Test\n   public void unset_line() {\n-    int line = new Random().nextInt(500);\n+    int line = 1 + new Random().nextInt(500);\n     issue.setLine(line);\n \n     boolean updated = underTest.unsetLine(issue, context);"
    },
    {
        "commit_id": "92b3cb4a98fb8ecc6d1583fd35514805cab21fba",
        "commit_message": "Fix javadoc encoding",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92b3cb4a98fb8ecc6d1583fd35514805cab21fba",
        "buggy_code": "logWarningIf(isNullOrEmpty(this.description), \"Description\u00a0is not set on action \" + path);",
        "fixed_code": "logWarningIf(isNullOrEmpty(this.description), \"Description is not set on action \" + path);",
        "patch": "@@ -523,7 +523,7 @@ private Action(Controller controller, NewAction newAction) {\n       this.changelog = newAction.changelog;\n \n       checkState(this.handler != null, \"RequestHandler is not set on action %s\", path);\n-      logWarningIf(isNullOrEmpty(this.description), \"Description\u00a0is not set on action \" + path);\n+      logWarningIf(isNullOrEmpty(this.description), \"Description is not set on action \" + path);\n       logWarningIf(isNullOrEmpty(this.since), \"Since is not set on action \" + path);\n       logWarningIf(!this.post && this.responseExample == null, \"The response example is not set on action \" + path);\n "
    },
    {
        "commit_id": "19107a98d5248a1556ac76b3d9263f1e69fbcefc",
        "commit_message": "Fix test with FPs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19107a98d5248a1556ac76b3d9263f1e69fbcefc",
        "buggy_code": "assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBefore(new Date());",
        "fixed_code": "assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBeforeOrEqualsTo(new Date());",
        "patch": "@@ -444,7 +444,7 @@ private void checkError(TestResponse response, String expectedError) throws Pars\n     assertThat(response.getHeader(\"Cache-Control\")).contains(\"no-cache\");\n     assertThat(response.getHeader(\"Expires\")).isNotNull();\n     assertThat(response.getHeader(\"ETag\")).isNull();\n-    assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBefore(new Date());\n+    assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBeforeOrEqualsTo(new Date());\n     assertThat(response.getInput()).contains(\"<text\", \">\" + expectedError + \"</text>\");\n   }\n "
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "package org.sonar.api.issue.condition;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue.condition;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n import org.sonar.api.issue.Issue;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "package org.sonar.api.issue.condition;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue.condition;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n import org.sonar.api.issue.Issue;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "import org.sonar.api.issue.condition.IsUnResolved;",
        "fixed_code": "import org.sonar.server.issue.workflow.IsUnResolved;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-import org.sonar.api.issue.condition.IsUnResolved;\n+import org.sonar.server.issue.workflow.IsUnResolved;\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.server.rule.RuleTagFormat;\n import org.sonar.core.issue.DefaultIssue;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "import org.sonar.api.issue.condition.Condition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Condition;",
        "patch": "@@ -25,11 +25,11 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import org.sonar.api.issue.condition.Condition;\n import org.sonar.api.server.ServerSide;\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.IssueChangeContext;\n import org.sonar.db.component.ComponentDto;\n+import org.sonar.server.issue.workflow.Condition;\n import org.sonar.server.user.UserSession;\n \n import static com.google.common.collect.Lists.newArrayList;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "import org.sonar.api.issue.condition.IsUnResolved;",
        "fixed_code": "import org.sonar.server.issue.workflow.IsUnResolved;",
        "patch": "@@ -24,13 +24,13 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Nullable;\n-import org.sonar.api.issue.condition.IsUnResolved;\n import org.sonar.api.rules.RuleType;\n import org.sonar.api.server.ServerSide;\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.user.UserDto;\n+import org.sonar.server.issue.workflow.IsUnResolved;\n import org.sonar.server.user.UserSession;\n \n import static com.google.common.base.Preconditions.checkArgument;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "import org.sonar.api.issue.condition.IsUnResolved;",
        "fixed_code": "import org.sonar.server.issue.workflow.IsUnResolved;",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.Collection;\n import java.util.Map;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.condition.IsUnResolved;\n+import org.sonar.server.issue.workflow.IsUnResolved;\n import org.sonar.api.rules.RuleType;\n import org.sonar.api.server.ServerSide;\n import org.sonar.core.issue.DefaultIssue;"
    },
    {
        "commit_id": "61c813392f60ec29e4b628e7244593c627058b5b",
        "commit_message": "SONAR-8368 move package org.sonar.api.issue.condition to server-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c813392f60ec29e4b628e7244593c627058b5b",
        "buggy_code": "import org.sonar.api.issue.condition.IsUnResolved;",
        "fixed_code": "import org.sonar.server.issue.workflow.IsUnResolved;",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.Collection;\n import java.util.Map;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.condition.IsUnResolved;\n+import org.sonar.server.issue.workflow.IsUnResolved;\n import org.sonar.api.rules.RuleType;\n import org.sonar.api.web.UserRole;\n import org.sonar.core.issue.DefaultIssue;"
    },
    {
        "commit_id": "736c4964ccfff0c5a94098804f0d53db4c8da4bb",
        "commit_message": "SONAR-8368 add line remove changelog when closing issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/736c4964ccfff0c5a94098804f0d53db4c8da4bb",
        "buggy_code": "updater.unsetLine(issue);",
        "fixed_code": "updater.unsetLine(issue, changeContext);",
        "patch": "@@ -90,7 +90,7 @@ public Function.Context unsetCloseDate() {\n \n     @Override\n     public Function.Context unsetLine() {\n-      updater.unsetLine(issue);\n+      updater.unsetLine(issue, changeContext);\n       return this;\n     }\n "
    },
    {
        "commit_id": "e20b703430b7c270d81d1d4f14b5ccdc79a7a7ca",
        "commit_message": "SONAR-8368 fix misleading Function.Context.setLine(Integer)\n\nby replacing it by method unsetLine() as it was only used with null parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e20b703430b7c270d81d1d4f14b5ccdc79a7a7ca",
        "buggy_code": "Context setLine(@Nullable Integer line);",
        "fixed_code": "Context unsetLine();",
        "patch": "@@ -36,7 +36,7 @@ interface Context {\n \n     Context unsetCloseDate();\n \n-    Context setLine(@Nullable Integer line);\n+    Context unsetLine();\n \n     Context setType(@Nullable RuleType type);\n   }"
    },
    {
        "commit_id": "e20b703430b7c270d81d1d4f14b5ccdc79a7a7ca",
        "commit_message": "SONAR-8368 fix misleading Function.Context.setLine(Integer)\n\nby replacing it by method unsetLine() as it was only used with null parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e20b703430b7c270d81d1d4f14b5ccdc79a7a7ca",
        "buggy_code": "context.setLine(null);",
        "fixed_code": "context.unsetLine();",
        "patch": "@@ -37,6 +37,6 @@ public void execute(Context context) {\n     // closed issues are not \"tracked\" -> the line number does not evolve anymore\n     // when code changes. That's misleading for end-users, so line number\n     // is unset.\n-    context.setLine(null);\n+    context.unsetLine();\n   }\n }"
    },
    {
        "commit_id": "29b5f4a0ebf686f9dee7f1d6c6eab65fe381654d",
        "commit_message": "fix misleading error message in ReportComponent when type is not report",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29b5f4a0ebf686f9dee7f1d6c6eab65fe381654d",
        "buggy_code": "checkArgument(type.isReportType(), \"Component type must not be a report type\");",
        "fixed_code": "checkArgument(type.isReportType(), \"Component type must be a report type\");",
        "patch": "@@ -195,7 +195,7 @@ public static final class Builder {\n     private final List<Component> children = new ArrayList<>();\n \n     private Builder(Type type, int ref) {\n-      checkArgument(type.isReportType(), \"Component type must not be a report type\");\n+      checkArgument(type.isReportType(), \"Component type must be a report type\");\n       this.type = type;\n       this.ref = ref;\n     }"
    },
    {
        "commit_id": "2f41a476c33b01877cec62468de3b0292f06e66b",
        "commit_message": "SONAR-10991 Don't display error responses containing HTML content",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f41a476c33b01877cec62468de3b0292f06e66b",
        "buggy_code": "throw MessageException.of(String.format(\"Failed to upload report - %d: %s\", e.code(), ScannerWsClient.tryParseAsJsonError(e.content())));",
        "fixed_code": "throw MessageException.of(String.format(\"Failed to upload report - %s\", ScannerWsClient.createErrorMessage(e)));",
        "patch": "@@ -193,7 +193,7 @@ String upload(File report) {\n     try {\n       response = wsClient.call(post).failIfNotSuccessful();\n     } catch (HttpException e) {\n-      throw MessageException.of(String.format(\"Failed to upload report - %d: %s\", e.code(), ScannerWsClient.tryParseAsJsonError(e.content())));\n+      throw MessageException.of(String.format(\"Failed to upload report - %s\", ScannerWsClient.createErrorMessage(e)));\n     }\n \n     try (InputStream protobuf = response.contentStream()) {"
    },
    {
        "commit_id": "2f41a476c33b01877cec62468de3b0292f06e66b",
        "commit_message": "SONAR-10991 Don't display error responses containing HTML content",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f41a476c33b01877cec62468de3b0292f06e66b",
        "buggy_code": "exception.expectMessage(\"Failed to upload report - 404: Organization with key 'MyOrg' does not exist\");",
        "fixed_code": "exception.expectMessage(\"Failed to upload report - Organization with key 'MyOrg' does not exist\");",
        "patch": "@@ -121,7 +121,7 @@ public void parse_upload_error_message() throws IOException {\n     when(wsClient.call(any(WsRequest.class))).thenReturn(response);\n \n     exception.expect(MessageException.class);\n-    exception.expectMessage(\"Failed to upload report - 404: Organization with key 'MyOrg' does not exist\");\n+    exception.expectMessage(\"Failed to upload report - Organization with key 'MyOrg' does not exist\");\n     underTest.upload(temp.newFile());\n   }\n "
    },
    {
        "commit_id": "992d1a0b2a5c3d074e6053992c384a2b50c9b2e7",
        "commit_message": "SONAR-11077 fix DEBUG log in FileMoveDetectionStep",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/992d1a0b2a5c3d074e6053992c384a2b50c9b2e7",
        "buggy_code": "LOG.debug(\"max score in matrix is less than min required score (%s). Do nothing.\", MIN_REQUIRED_SCORE);",
        "fixed_code": "LOG.debug(\"max score in matrix is less than min required score ({}). Do nothing.\", MIN_REQUIRED_SCORE);",
        "patch": "@@ -138,7 +138,7 @@ public void execute(ComputationStep.Context context) {\n \n     // not a single match with score higher than MIN_REQUIRED_SCORE => abort\n     if (scoreMatrix.getMaxScore() < MIN_REQUIRED_SCORE) {\n-      LOG.debug(\"max score in matrix is less than min required score (%s). Do nothing.\", MIN_REQUIRED_SCORE);\n+      LOG.debug(\"max score in matrix is less than min required score ({}). Do nothing.\", MIN_REQUIRED_SCORE);\n       return;\n     }\n "
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "import org.sonar.ce.taskprocessor.MutableTaskResultHolderImpl;",
        "fixed_code": "import org.sonar.ce.task.taskprocessor.MutableTaskResultHolderImpl;",
        "patch": "@@ -123,7 +123,7 @@\n import org.sonar.ce.task.setting.SettingsLoader;\n import org.sonar.ce.task.step.ComputationStepExecutor;\n import org.sonar.ce.task.step.ComputationSteps;\n-import org.sonar.ce.taskprocessor.MutableTaskResultHolderImpl;\n+import org.sonar.ce.task.taskprocessor.MutableTaskResultHolderImpl;\n import org.sonar.core.issue.tracking.Tracker;\n import org.sonar.core.platform.ContainerPopulator;\n import org.sonar.server.view.index.ViewIndex;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.task.dbcleaner;",
        "fixed_code": "package org.sonar.ce.task.projectanalysis.purge;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.task.dbcleaner;\n+package org.sonar.ce.task.projectanalysis.purge;\n \n import java.util.Collection;\n import java.util.List;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.task.dbcleaner;",
        "fixed_code": "package org.sonar.ce.task.projectanalysis.purge;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.task.dbcleaner;\n+package org.sonar.ce.task.projectanalysis.purge;\n \n import java.util.Collection;\n import org.sonar.api.CoreProperties;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "import org.sonar.ce.taskprocessor.MutableTaskResultHolder;",
        "fixed_code": "import org.sonar.ce.task.taskprocessor.MutableTaskResultHolder;",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.ce.task.CeTaskResult;\n import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolder;\n import org.sonar.ce.task.step.ComputationStep;\n-import org.sonar.ce.taskprocessor.MutableTaskResultHolder;\n+import org.sonar.ce.task.taskprocessor.MutableTaskResultHolder;\n \n public class PublishTaskResultStep implements ComputationStep {\n   private final MutableTaskResultHolder taskResultHolder;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "import org.sonar.ce.taskprocessor.TaskResultHolder;",
        "fixed_code": "import org.sonar.ce.task.taskprocessor.TaskResultHolder;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.ce.task.projectanalysis.container.ContainerFactory;\n import org.sonar.ce.task.step.ComputationStepExecutor;\n import org.sonar.ce.task.taskprocessor.CeTaskProcessor;\n-import org.sonar.ce.taskprocessor.TaskResultHolder;\n+import org.sonar.ce.task.taskprocessor.TaskResultHolder;\n import org.sonar.core.platform.ComponentContainer;\n import org.sonar.db.ce.CeTaskTypes;\n import org.sonar.ce.task.projectanalysis.container.ReportAnalysisComponentProvider;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.task.dbcleaner;",
        "fixed_code": "package org.sonar.ce.task.projectanalysis.purge;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.task.dbcleaner;\n+package org.sonar.ce.task.projectanalysis.purge;\n \n import org.junit.Before;\n import org.junit.Test;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.task.settings;",
        "fixed_code": "package org.sonar.ce.task.setting;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.ce.task.settings;\n+package org.sonar.ce.task.setting;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.taskprocessor;",
        "fixed_code": "package org.sonar.ce.task.taskprocessor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.taskprocessor;\n+package org.sonar.ce.task.taskprocessor;\n \n import org.sonar.ce.task.CeTaskResult;\n "
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.taskprocessor;",
        "fixed_code": "package org.sonar.ce.task.taskprocessor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.taskprocessor;\n+package org.sonar.ce.task.taskprocessor;\n \n import javax.annotation.CheckForNull;\n import org.sonar.ce.task.CeTaskResult;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.taskprocessor;",
        "fixed_code": "package org.sonar.ce.task.taskprocessor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.taskprocessor;\n+package org.sonar.ce.task.taskprocessor;\n \n import org.sonar.ce.task.CeTaskResult;\n "
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.taskprocessor;",
        "fixed_code": "package org.sonar.ce.task.taskprocessor;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.ce.taskprocessor;\n+package org.sonar.ce.task.taskprocessor;\n \n import org.assertj.core.api.Assertions;\n import org.junit.Rule;"
    },
    {
        "commit_id": "c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "commit_message": "Fix incorrect package names in Compute Engine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8cb65a2b1b3d7f1603b77a9ef46087b5940c398",
        "buggy_code": "package org.sonar.ce.task.projectanalysis.notification;",
        "fixed_code": "package org.sonar.ce.notification;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.ce.task.projectanalysis.notification;\n+package org.sonar.ce.notification;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "dba703a9b1c3b69c46674bd8b203ec52ccde7a09",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dba703a9b1c3b69c46674bd8b203ec52ccde7a09",
        "buggy_code": "return Base64.encodeBase64String(cipher.doFinal(clearText.getBytes(\"UTF-8\")));",
        "fixed_code": "return Base64.encodeBase64String(cipher.doFinal(clearText.getBytes(UTF_8)));",
        "patch": "@@ -58,7 +58,7 @@ public String encrypt(String clearText) {\n     try {\n       javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(CRYPTO_KEY);\n       cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, loadSecretFile());\n-      return Base64.encodeBase64String(cipher.doFinal(clearText.getBytes(\"UTF-8\")));\n+      return Base64.encodeBase64String(cipher.doFinal(clearText.getBytes(UTF_8)));\n     } catch (RuntimeException e) {\n       throw e;\n     } catch (Exception e) {"
    },
    {
        "commit_id": "dba703a9b1c3b69c46674bd8b203ec52ccde7a09",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dba703a9b1c3b69c46674bd8b203ec52ccde7a09",
        "buggy_code": "private String measureValue(CustomMeasureDto measure, MetricDto metric) {",
        "fixed_code": "private static String measureValue(CustomMeasureDto measure, MetricDto metric) {",
        "patch": "@@ -81,7 +81,7 @@ public void write(JsonWriter json, CustomMeasureDto measure, MetricDto metric, C\n     json.endObject();\n   }\n \n-  private String measureValue(CustomMeasureDto measure, MetricDto metric) {\n+  private static String measureValue(CustomMeasureDto measure, MetricDto metric) {\n     Metric.ValueType metricType = Metric.ValueType.valueOf(metric.getValueType());\n     Double doubleValue = measure.getValue();\n     String stringValue = measure.getTextValue();"
    },
    {
        "commit_id": "41b5565d7a89650390386d7f5a87e4d2febebb88",
        "commit_message": "Fix package name of DefaultOrganizationLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41b5565d7a89650390386d7f5a87e4d2febebb88",
        "buggy_code": "import org.sonar.server.computation.organization.DefaultOrganizationLoader;",
        "fixed_code": "import org.sonar.ce.task.projectanalysis.organization.DefaultOrganizationLoader;",
        "patch": "@@ -95,6 +95,7 @@\n import org.sonar.ce.task.projectanalysis.measure.MeasureRepositoryImpl;\n import org.sonar.ce.task.projectanalysis.measure.MeasureToMeasureDto;\n import org.sonar.ce.task.projectanalysis.metric.MetricModule;\n+import org.sonar.ce.task.projectanalysis.organization.DefaultOrganizationLoader;\n import org.sonar.ce.task.projectanalysis.period.PeriodHolderImpl;\n import org.sonar.ce.task.projectanalysis.qualitygate.EvaluationResultTextConverterImpl;\n import org.sonar.ce.task.projectanalysis.qualitygate.QualityGateHolderImpl;\n@@ -125,7 +126,6 @@\n import org.sonar.ce.taskprocessor.MutableTaskResultHolderImpl;\n import org.sonar.core.issue.tracking.Tracker;\n import org.sonar.core.platform.ContainerPopulator;\n-import org.sonar.server.computation.organization.DefaultOrganizationLoader;\n import org.sonar.server.view.index.ViewIndex;\n \n public final class ProjectAnalysisTaskContainerPopulator implements ContainerPopulator<TaskContainer> {"
    },
    {
        "commit_id": "41b5565d7a89650390386d7f5a87e4d2febebb88",
        "commit_message": "Fix package name of DefaultOrganizationLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41b5565d7a89650390386d7f5a87e4d2febebb88",
        "buggy_code": "package org.sonar.server.computation.organization;",
        "fixed_code": "package org.sonar.ce.task.projectanalysis.organization;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.computation.organization;\n+package org.sonar.ce.task.projectanalysis.organization;\n \n import org.picocontainer.Startable;\n import org.sonar.api.ce.ComputeEngineSide;"
    },
    {
        "commit_id": "41b5565d7a89650390386d7f5a87e4d2febebb88",
        "commit_message": "Fix package name of DefaultOrganizationLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41b5565d7a89650390386d7f5a87e4d2febebb88",
        "buggy_code": "package org.sonar.server.computation.organization;",
        "fixed_code": "package org.sonar.ce.task.projectanalysis.organization;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.computation.organization;\n+package org.sonar.ce.task.projectanalysis.organization;\n \n import org.junit.Test;\n import org.sonar.server.organization.DefaultOrganizationCache;"
    },
    {
        "commit_id": "d227e41a03496f3df46254313efedde8c58096b7",
        "commit_message": "Fix false-positive in unit test QualityGateActionTest\n\njava.lang.AssertionError:\nExpecting:\n  <2018-07-20T00:12:15.000>\nto be strictly before:\n  <2018-07-20T00:12:15.000>\n\tat org.sonar.server.badge.ws.QualityGateActionTest.checkError(QualityGateActionTest.java:347)\n\tat org.sonar.server.badge.ws.QualityGateActionTest.return_error_on_private_project(QualityGateActionTest.java:242)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d227e41a03496f3df46254313efedde8c58096b7",
        "buggy_code": "assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBefore(new Date());",
        "fixed_code": "assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBeforeOrEqualsTo(new Date());",
        "patch": "@@ -344,7 +344,7 @@ private void checkError(TestResponse response, String expectedError) throws Pars\n     assertThat(response.getHeader(\"Cache-Control\")).contains(\"no-cache\");\n     assertThat(response.getHeader(\"Expires\")).isNotNull();\n     assertThat(response.getHeader(\"ETag\")).isNull();\n-    assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBefore(new Date());\n+    assertThat(expiresDateFormat.parse(response.getHeader(\"Expires\"))).isBeforeOrEqualsTo(new Date());\n     assertThat(response.getInput()).contains(\"<text\", \">\" + expectedError + \"</text>\");\n   }\n "
    },
    {
        "commit_id": "7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "commit_message": "fix varargs and unchecked called warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "buggy_code": "Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};",
        "fixed_code": "Class[] ALL = new Class[] {TemplateRuleCheck.class};",
        "patch": "@@ -25,7 +25,7 @@\n \n public interface Check {\n \n-  Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};\n+  Class[] ALL = new Class[] {TemplateRuleCheck.class};\n \n   void execute(SensorContext context, InputFile file, RuleKey ruleKey);\n "
    },
    {
        "commit_id": "7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "commit_message": "fix varargs and unchecked called warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "buggy_code": "toUniqueAndSortedList(new HashSet<Comparable>(asList(\"A\", null, \"C\")));",
        "fixed_code": "toUniqueAndSortedList(new HashSet<>(asList(\"A\", (String) null, \"C\")));",
        "patch": "@@ -141,7 +141,7 @@ public void toUniqueAndSortedList_throws_NPE_if_arg_contains_a_null() {\n   public void toUniqueAndSortedList_throws_NPE_if_arg_is_a_set_containing_a_null() {\n     expectedException.expect(NullPointerException.class);\n \n-    toUniqueAndSortedList(new HashSet<Comparable>(asList(\"A\", null, \"C\")));\n+    toUniqueAndSortedList(new HashSet<>(asList(\"A\", (String) null, \"C\")));\n   }\n \n   @Test"
    },
    {
        "commit_id": "7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "commit_message": "fix varargs and unchecked called warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7945610fd5eb08165568cbcdf74adb45e8b2fd83",
        "buggy_code": "errors.add(format(message, args));",
        "fixed_code": "errors.add(format(message, (Object[]) args));",
        "patch": "@@ -236,7 +236,7 @@ private static boolean isValidRating(@Nullable String value) {\n   @SuppressWarnings(\"unchecked\")\n   private static boolean check(boolean expression, List<String> errors, String message, String... args) {\n     if (!expression) {\n-      errors.add(format(message, args));\n+      errors.add(format(message, (Object[]) args));\n     }\n     return expression;\n   }"
    },
    {
        "commit_id": "bcb9937aa3d92eb934c089d59b0ddcb6ca28f864",
        "commit_message": "SONAR-10868 Fix from_hotspot for external issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bcb9937aa3d92eb934c089d59b0ddcb6ca28f864",
        "buggy_code": "public DumbRule setIsExtenral(boolean isExternal) {",
        "fixed_code": "public DumbRule setIsExternal(boolean isExternal) {",
        "patch": "@@ -125,7 +125,7 @@ public DumbRule setPluginKey(String pluginKey) {\n     return this;\n   }\n \n-  public DumbRule setIsExtenral(boolean isExternal) {\n+  public DumbRule setIsExternal(boolean isExternal) {\n     this.isExternal = isExternal;\n     return this;\n   }"
    },
    {
        "commit_id": "b497380a7647d69e6c2cb486faccce34121da08b",
        "commit_message": "SONAR-10874 New issue transitions for security hotspots",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b497380a7647d69e6c2cb486faccce34121da08b",
        "buggy_code": "public void addActions(String issueKey, List<String> actions) {",
        "fixed_code": "public void addActions(String issueKey, Iterable<String> actions) {",
        "patch": "@@ -144,7 +144,7 @@ public void addComponents(@Nullable Collection<ComponentDto> dtos) {\n     }\n   }\n \n-  public void addActions(String issueKey, List<String> actions) {\n+  public void addActions(String issueKey, Iterable<String> actions) {\n     actionsByIssueKey.putAll(issueKey, actions);\n   }\n "
    },
    {
        "commit_id": "d42307dd484ab82daecddb4e98b2085ba711b34f",
        "commit_message": "SONAR-10867 Add security hotspot new issue type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d42307dd484ab82daecddb4e98b2085ba711b34f",
        "buggy_code": "expectedException.expectMessage(\"Value of parameter 'type' (unknown) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");",
        "fixed_code": "expectedException.expectMessage(\"Value of parameter 'type' (unknown) must be one of: [CODE_SMELL, BUG, VULNERABILITY, SECURITY_HOTSPOT]\");",
        "patch": "@@ -138,7 +138,7 @@ public void fail_if_bad_type_value() {\n     setUserWithBrowseAndAdministerIssuePermission(issueDto);\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Value of parameter 'type' (unknown) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");\n+    expectedException.expectMessage(\"Value of parameter 'type' (unknown) must be one of: [CODE_SMELL, BUG, VULNERABILITY, SECURITY_HOTSPOT]\");\n     call(issueDto.getKey(), \"unknown\");\n   }\n "
    },
    {
        "commit_id": "d42307dd484ab82daecddb4e98b2085ba711b34f",
        "commit_message": "SONAR-10867 Add security hotspot new issue type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d42307dd484ab82daecddb4e98b2085ba711b34f",
        "buggy_code": "CODE_SMELL(1), BUG(2), VULNERABILITY(3);",
        "fixed_code": "CODE_SMELL(1), BUG(2), VULNERABILITY(3), SECURITY_HOTSPOT(4);",
        "patch": "@@ -29,7 +29,7 @@\n import static java.util.stream.Collectors.toList;\n \n public enum RuleType {\n-  CODE_SMELL(1), BUG(2), VULNERABILITY(3);\n+  CODE_SMELL(1), BUG(2), VULNERABILITY(3), SECURITY_HOTSPOT(4);\n \n   private static final Set<String> ALL_NAMES = unmodifiableSet(new LinkedHashSet<>(stream(values())\n     .map(Enum::name)"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.ce.settings.ProjectConfigurationFactory;",
        "fixed_code": "import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;",
        "patch": "@@ -57,7 +57,7 @@\n import org.sonar.ce.platform.ComputeEngineExtensionInstaller;\n import org.sonar.ce.queue.CeQueueCleaner;\n import org.sonar.ce.queue.PurgeCeActivities;\n-import org.sonar.ce.settings.ProjectConfigurationFactory;\n+import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;\n import org.sonar.ce.taskprocessor.CeProcessingScheduler;\n import org.sonar.ce.taskprocessor.CeTaskProcessorModule;\n import org.sonar.ce.user.CeUserSession;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.ce.settings.ProjectConfigurationFactory;",
        "fixed_code": "import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;",
        "patch": "@@ -22,7 +22,7 @@\n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n import org.sonar.api.config.Configuration;\n-import org.sonar.ce.settings.ProjectConfigurationFactory;\n+import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;\n import org.sonar.server.computation.task.projectanalysis.analysis.AnalysisMetadataHolder;\n \n /**"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "fixed_code": "import org.sonar.server.measure.Rating;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.computation.task.projectanalysis.formula.counter;\n \n import javax.annotation.Nullable;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n+import org.sonar.server.measure.Rating;\n \n /**\n  * Convenience class wrapping a rating to compute the value and know it is has ever been set."
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "package org.sonar.server.computation.task.step;",
        "fixed_code": "package org.sonar.server.computation.task.projectanalysis.measure;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.computation.task.step;\n+package org.sonar.server.computation.task.projectanalysis.measure;\n \n import org.sonar.api.ExtensionPoint;\n import org.sonar.api.ce.ComputeEngineSide;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.step.PostMeasuresComputationChecksStep;",
        "fixed_code": "import org.sonar.server.computation.task.projectanalysis.measure.PostMeasuresComputationChecksStep;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.server.computation.task.projectanalysis.filemove.FileMoveDetectionStep;\n import org.sonar.server.computation.task.step.ComputationStep;\n import org.sonar.server.computation.task.step.ExecuteStatelessInitExtensionsStep;\n-import org.sonar.server.computation.task.step.PostMeasuresComputationChecksStep;\n+import org.sonar.server.computation.task.projectanalysis.measure.PostMeasuresComputationChecksStep;\n \n /**\n  * Ordered list of steps classes and instances to be executed for batch processing"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "package org.sonar.server.computation.task.projectanalysis.qualitymodel;",
        "fixed_code": "package org.sonar.server.measure;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.computation.task.projectanalysis.qualitymodel;\n+package org.sonar.server.measure;\n \n import com.google.common.collect.ImmutableMap;\n import java.util.Map;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "fixed_code": "import org.sonar.server.measure.Rating;",
        "patch": "@@ -36,7 +36,7 @@\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.measure.LiveMeasureDto;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n+import org.sonar.server.measure.Rating;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "fixed_code": "import org.sonar.server.measure.Rating;",
        "patch": "@@ -39,7 +39,7 @@\n import org.sonar.db.qualitygate.QualityGateConditionDto;\n import org.sonar.db.qualitygate.QualityGateDao;\n import org.sonar.db.qualitygate.QualityGateDto;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n+import org.sonar.server.measure.Rating;\n \n import static java.util.Arrays.asList;\n import static java.util.stream.Collectors.toMap;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "fixed_code": "import org.sonar.server.measure.Rating;",
        "patch": "@@ -44,7 +44,7 @@\n import org.sonar.db.user.UserDto;\n import org.sonar.server.badge.ws.SvgGenerator.Color;\n import org.sonar.server.component.ComponentFinder;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n+import org.sonar.server.measure.Rating;\n import org.sonar.server.tester.UserSessionRule;\n import org.sonar.server.ws.TestResponse;\n import org.sonar.server.ws.WsActionTester;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.ce.settings.ProjectConfigurationFactory;",
        "fixed_code": "import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.api.config.Configuration;\n import org.sonar.api.config.internal.MapSettings;\n import org.sonar.api.utils.System2;\n-import org.sonar.ce.settings.ProjectConfigurationFactory;\n+import org.sonar.server.computation.task.projectanalysis.analysis.ProjectConfigurationFactory;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbTester;\n import org.sonar.db.component.ComponentDto;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.issue.NewExternalRule;",
        "fixed_code": "import org.sonar.server.rule.NewExternalRule;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.db.rule.RuleDao;\n import org.sonar.db.rule.RuleDefinitionDto;\n import org.sonar.server.computation.task.projectanalysis.analysis.AnalysisMetadataHolderRule;\n-import org.sonar.server.computation.task.projectanalysis.issue.NewExternalRule;\n+import org.sonar.server.rule.NewExternalRule;\n import org.sonar.server.computation.task.projectanalysis.issue.RuleRepositoryImpl;\n import org.sonar.server.computation.task.step.ComputationStep;\n import org.sonar.server.es.EsTester;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "fixed_code": "import org.sonar.server.measure.Rating;",
        "patch": "@@ -47,7 +47,7 @@\n import org.sonar.db.measure.LiveMeasureDto;\n import org.sonar.db.metric.MetricDto;\n import org.sonar.db.organization.OrganizationDto;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n+import org.sonar.server.measure.Rating;\n import org.sonar.server.es.ProjectIndexer;\n import org.sonar.server.es.TestProjectIndexers;\n import org.sonar.server.qualitygate.EvaluatedQualityGate;"
    },
    {
        "commit_id": "abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "commit_message": "fix wrong dependencies onto package computation.task.projectanalysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abac7619c39e0e24aa86bb1150ce00b4063fa241",
        "buggy_code": "package org.sonar.server.computation.task.projectanalysis.issue;",
        "fixed_code": "package org.sonar.server.rule;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.computation.task.projectanalysis.issue;\n+package org.sonar.server.rule;\n \n import org.junit.Test;\n import org.junit.rules.ExpectedException;"
    },
    {
        "commit_id": "3c04430ca109e171b5981940b9348635837ec18d",
        "commit_message": "SONAR-10674 Fix max ages caches for plugins static resources\n\nMax ages cache was wrongly set to 5 hours instead of 5 minutes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c04430ca109e171b5981940b9348635837ec18d",
        "buggy_code": "private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60 * 60;",
        "fixed_code": "private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60;",
        "patch": "@@ -46,7 +46,7 @@ public class CacheControlFilter implements Filter {\n    */\n   private static final int ONE_YEAR_IN_SECONDS = 365 * 24 * 60 * 60;\n \n-  private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60 * 60;\n+  private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60;\n \n   private static final String MAX_AGE_TEMPLATE = \"max-age=%d\";\n "
    },
    {
        "commit_id": "3c04430ca109e171b5981940b9348635837ec18d",
        "commit_message": "SONAR-10674 Fix max ages caches for plugins static resources\n\nMax ages cache was wrongly set to 5 hours instead of 5 minutes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c04430ca109e171b5981940b9348635837ec18d",
        "buggy_code": "private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60 * 60;",
        "fixed_code": "private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60;",
        "patch": "@@ -37,7 +37,7 @@\n public class HttpHeadersTest {\n \n   private static final int ONE_YEAR_IN_SECONDS = 365 * 24 * 60 * 60;\n-  private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60 * 60;\n+  private static final int FIVE_MINUTES_IN_SECONDS = 5 * 60;\n \n   @ClassRule\n   public static final Orchestrator orchestrator = Category4Suite.ORCHESTRATOR;"
    },
    {
        "commit_id": "63947f4bf774b4dd224c5697f72e0527d14eb720",
        "commit_message": "SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUID\n\n* SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUD in DB\n\n* SONAR-10597 Update UserTokenDao to return user uuid\n\n* SONAR-10597 Fix api/user_tokens/generate to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/revoke to correctly use user uuid\n\n* SONAR-10597 Fix authentication by token to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/search to correctly use user uuid\n\n* SONAR-10597 Fix api/users/search to correctly use user uuid\n\n* SONAR-10597 Add ITs to check user tokens after login update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63947f4bf774b4dd224c5697f72e0527d14eb720",
        "buggy_code": "verifyMigrationCount(underTest, 19);",
        "fixed_code": "verifyMigrationCount(underTest, 20);",
        "patch": "@@ -34,7 +34,7 @@ public void migrationNumber_starts_at_2100() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 19);\n+    verifyMigrationCount(underTest, 20);\n   }\n \n }"
    },
    {
        "commit_id": "63947f4bf774b4dd224c5697f72e0527d14eb720",
        "commit_message": "SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUID\n\n* SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUD in DB\n\n* SONAR-10597 Update UserTokenDao to return user uuid\n\n* SONAR-10597 Fix api/user_tokens/generate to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/revoke to correctly use user uuid\n\n* SONAR-10597 Fix authentication by token to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/search to correctly use user uuid\n\n* SONAR-10597 Fix api/users/search to correctly use user uuid\n\n* SONAR-10597 Add ITs to check user tokens after login update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63947f4bf774b4dd224c5697f72e0527d14eb720",
        "buggy_code": "dbClient.userTokenDao().deleteByLogin(dbSession, login);",
        "fixed_code": "dbClient.userTokenDao().deleteByUser(dbSession, user);",
        "patch": "@@ -94,7 +94,7 @@ public void handle(Request request, Response response) throws Exception {\n       ensureNotLastAdministrator(dbSession, user);\n \n       Integer userId = user.getId();\n-      dbClient.userTokenDao().deleteByLogin(dbSession, login);\n+      dbClient.userTokenDao().deleteByUser(dbSession, user);\n       dbClient.propertiesDao().deleteByKeyAndValue(dbSession, DEFAULT_ISSUE_ASSIGNEE, user.getLogin());\n       dbClient.propertiesDao().deleteByQuery(dbSession, PropertyQuery.builder().setUserId(userId).build());\n       dbClient.userGroupDao().deleteByUserId(dbSession, userId);"
    },
    {
        "commit_id": "63947f4bf774b4dd224c5697f72e0527d14eb720",
        "commit_message": "SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUID\n\n* SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUD in DB\n\n* SONAR-10597 Update UserTokenDao to return user uuid\n\n* SONAR-10597 Fix api/user_tokens/generate to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/revoke to correctly use user uuid\n\n* SONAR-10597 Fix authentication by token to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/search to correctly use user uuid\n\n* SONAR-10597 Fix api/users/search to correctly use user uuid\n\n* SONAR-10597 Add ITs to check user tokens after login update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63947f4bf774b4dd224c5697f72e0527d14eb720",
        "buggy_code": "import static org.sonar.server.usertoken.ws.UserTokensWsParameters.CONTROLLER;",
        "fixed_code": "import static org.sonar.server.usertoken.ws.UserTokenSupport.CONTROLLER;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.api.server.ws.WebService;\n \n-import static org.sonar.server.usertoken.ws.UserTokensWsParameters.CONTROLLER;\n+import static org.sonar.server.usertoken.ws.UserTokenSupport.CONTROLLER;\n \n public class UserTokensWs implements WebService {\n   private final UserTokensWsAction[] actions;"
    },
    {
        "commit_id": "63947f4bf774b4dd224c5697f72e0527d14eb720",
        "commit_message": "SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUID\n\n* SONAR-10597 Update USER_TOKENS#LOGIN to USER_UUD in DB\n\n* SONAR-10597 Update UserTokenDao to return user uuid\n\n* SONAR-10597 Fix api/user_tokens/generate to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/revoke to correctly use user uuid\n\n* SONAR-10597 Fix authentication by token to correctly use user uuid\n\n* SONAR-10597 Fix api/user_tokens/search to correctly use user uuid\n\n* SONAR-10597 Fix api/users/search to correctly use user uuid\n\n* SONAR-10597 Add ITs to check user tokens after login update",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63947f4bf774b4dd224c5697f72e0527d14eb720",
        "buggy_code": "assertThat(container.size()).isEqualTo(8);",
        "fixed_code": "assertThat(container.size()).isEqualTo(9);",
        "patch": "@@ -29,6 +29,6 @@ public class UserTokenModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new UserTokenModule().configure(container);\n-    assertThat(container.size()).isEqualTo(8);\n+    assertThat(container.size()).isEqualTo(9);\n   }\n }"
    },
    {
        "commit_id": "bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "commit_message": "SONAR-10597 Update QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Refactor ChangelogActionTest\n\nImprove unit tests to really check JSON response\nAdd some tests on not covered use cases\n\n* SONAR-10597 Rename QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Fix ChangelogAction to not return user uuid\n\n* SONAR-10597 Add ITs to check qProfile changes after login update\n\n* SONAR-10597 Set user uuid instead of login when saving qprofile changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "buggy_code": ".setLogin(randomAlphanumeric(10));",
        "fixed_code": ".setUserUuid(\"userUuid_\" + randomAlphanumeric(10));",
        "patch": "@@ -57,7 +57,7 @@ public static QProfileChangeDto newQProfileChangeDto() {\n       .setRulesProfileUuid(randomAlphanumeric(40))\n       .setCreatedAt(nextLong())\n       .setChangeType(\"ACTIVATED\")\n-      .setLogin(randomAlphanumeric(10));\n+      .setUserUuid(\"userUuid_\" + randomAlphanumeric(10));\n   }\n \n   /**"
    },
    {
        "commit_id": "bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "commit_message": "SONAR-10597 Update QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Refactor ChangelogActionTest\n\nImprove unit tests to really check JSON response\nAdd some tests on not covered use cases\n\n* SONAR-10597 Rename QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Fix ChangelogAction to not return user uuid\n\n* SONAR-10597 Add ITs to check qProfile changes after login update\n\n* SONAR-10597 Set user uuid instead of login when saving qprofile changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "buggy_code": "verifyMigrationCount(underTest, 18);",
        "fixed_code": "verifyMigrationCount(underTest, 19);",
        "patch": "@@ -34,7 +34,7 @@ public void migrationNumber_starts_at_2100() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 18);\n+    verifyMigrationCount(underTest, 19);\n   }\n \n }"
    },
    {
        "commit_id": "bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "commit_message": "SONAR-10597 Update QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Refactor ChangelogActionTest\n\nImprove unit tests to really check JSON response\nAdd some tests on not covered use cases\n\n* SONAR-10597 Rename QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Fix ChangelogAction to not return user uuid\n\n* SONAR-10597 Add ITs to check qProfile changes after login update\n\n* SONAR-10597 Set user uuid instead of login when saving qprofile changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "buggy_code": "db.qProfileChangeDao().insert(dbSession, change.toDto(userSession.getLogin()));",
        "fixed_code": "db.qProfileChangeDao().insert(dbSession, change.toDto(userSession.getUuid()));",
        "patch": "@@ -242,7 +242,7 @@ private void persist(ActiveRuleChange change, RuleActivationContext context, DbS\n       activeRule = doUpdate(change, context, dbSession);\n     }\n     change.setActiveRule(activeRule);\n-    db.qProfileChangeDao().insert(dbSession, change.toDto(userSession.getLogin()));\n+    db.qProfileChangeDao().insert(dbSession, change.toDto(userSession.getUuid()));\n   }\n \n   private ActiveRuleDto doInsert(ActiveRuleChange change, RuleActivationContext context, DbSession dbSession) {"
    },
    {
        "commit_id": "bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "commit_message": "SONAR-10597 Update QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Refactor ChangelogActionTest\n\nImprove unit tests to really check JSON response\nAdd some tests on not covered use cases\n\n* SONAR-10597 Rename QPROFILE_CHANGES#USER_LOGIN to USER_UUID\n\n* SONAR-10597 Fix ChangelogAction to not return user uuid\n\n* SONAR-10597 Add ITs to check qProfile changes after login update\n\n* SONAR-10597 Set user uuid instead of login when saving qprofile changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bef8258c5216b14ab0b635d261ef6fe0f1e75fda",
        "buggy_code": "assertThat(change.getLogin()).isNull();",
        "fixed_code": "assertThat(change.getUserUuid()).isNull();",
        "patch": "@@ -193,7 +193,7 @@ private void verifyActiveRuleInDb(QProfileDto profile, RuleDefinitionDto rule, S\n     assertThat(change.getChangeType()).isEqualTo(ActiveRuleChange.Type.ACTIVATED.name());\n     assertThat(change.getCreatedAt()).isPositive();\n     assertThat(change.getUuid()).isNotEmpty();\n-    assertThat(change.getLogin()).isNull();\n+    assertThat(change.getUserUuid()).isNull();\n     assertThat(change.getRulesProfileUuid()).isEqualTo(profile.getRulesProfileUuid());\n     assertThat(change.getDataAsMap().get(\"severity\")).isEqualTo(expectedSeverity);\n   }"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": ".setAssignee(\"assignee_\" + randomAlphabetic(5))",
        "fixed_code": ".setAssigneeUuid(\"assignee-uuid_\" + randomAlphabetic(26))",
        "patch": "@@ -57,7 +57,7 @@ public static IssueDto newIssue(RuleDefinitionDto rule, ComponentDto project, Co\n       .setResolution(null)\n       .setSeverity(Severity.ALL.get(nextInt(Severity.ALL.size())))\n       .setEffort((long) RandomUtils.nextInt(10))\n-      .setAssignee(\"assignee_\" + randomAlphabetic(5))\n+      .setAssigneeUuid(\"assignee-uuid_\" + randomAlphabetic(26))\n       .setAuthorLogin(\"author_\" + randomAlphabetic(5))\n       // Adding one to the generated random value in order to never get 0 (as it's a forbidden value)\n       .setLine(nextInt(1_000) + 1)"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": ".setAssignee(\"perceval\")",
        "fixed_code": ".setAssigneeUuid(\"perceval\")",
        "patch": "@@ -77,7 +77,7 @@ public void set_issue_fields() {\n       .setSeverity(\"BLOCKER\")\n       .setMessage(\"message\")\n       .setManualSeverity(true)\n-      .setAssignee(\"perceval\")\n+      .setAssigneeUuid(\"perceval\")\n       .setIssueAttributes(\"key=value\")\n       .setAuthorLogin(\"pierre\")\n       .setIssueCreationDate(createdAt)"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "toIssue.setAssignee(fromIssue.assignee());",
        "fixed_code": "toIssue.setAssigneeUuid(fromIssue.assignee());",
        "patch": "@@ -166,7 +166,7 @@ private void copyFields(DefaultIssue toIssue, DefaultIssue fromIssue) {\n     toIssue.setCloseDate(fromIssue.closeDate());\n     toIssue.setResolution(fromIssue.resolution());\n     toIssue.setStatus(fromIssue.status());\n-    toIssue.setAssignee(fromIssue.assignee());\n+    toIssue.setAssigneeUuid(fromIssue.assignee());\n     toIssue.setAuthorLogin(fromIssue.authorLogin());\n     toIssue.setTags(fromIssue.tags());\n     toIssue.setAttributes(fromIssue.attributes());"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "return users.get(0).login();",
        "fixed_code": "return users.get(0).uuid();",
        "patch": "@@ -51,7 +51,7 @@ public ScmAccountToUserLoader(UserIndex index, AnalysisMetadataHolder analysisMe\n   public String load(String scmAccount) {\n     List<UserDoc> users = index.getAtMostThreeActiveUsersForScmAccount(scmAccount, analysisMetadataHolder.getOrganization().getUuid());\n     if (users.size() == 1) {\n-      return users.get(0).login();\n+      return users.get(0).uuid();\n     }\n     if (!users.isEmpty()) {\n       // multiple users are associated to the same SCM account, for example"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "issue.setAssignee(dbIssue.getAssignee());",
        "fixed_code": "issue.setAssigneeUuid(dbIssue.getAssigneeUuid());",
        "patch": "@@ -74,6 +74,6 @@ private void resolveSeverity(IssueDto dbIssue, DefaultIssue issue) {\n   }\n \n   private void resolveAssignee(IssueDto dbIssue, DefaultIssue issue) {\n-    issue.setAssignee(dbIssue.getAssignee());\n+    issue.setAssigneeUuid(dbIssue.getAssigneeUuid());\n   }\n }"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "return issueDto.getAssignee();",
        "fixed_code": "return issueDto.getAssigneeUuid();",
        "patch": "@@ -109,7 +109,7 @@ public Ordering sortFieldOrdering(boolean ascending) {\n   static class AssigneeSortIssueProcessor extends TextSortIssueProcessor {\n     @Override\n     String sortField(IssueDto issueDto) {\n-      return issueDto.getAssignee();\n+      return issueDto.getAssigneeUuid();\n     }\n   }\n "
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "doc.setAssignee(rs.getString(2));",
        "fixed_code": "doc.setAssigneeUuid(rs.getString(2));",
        "patch": "@@ -190,7 +190,7 @@ protected IssueDoc read(ResultSet rs) throws SQLException {\n \n       // all the fields must be present, even if value is null\n       doc.setKey(key);\n-      doc.setAssignee(rs.getString(2));\n+      doc.setAssigneeUuid(rs.getString(2));\n       doc.setLine(DatabaseUtils.getInt(rs, 3));\n       doc.setResolution(rs.getString(4));\n       doc.setSeverity(rs.getString(5));"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": "doc.setAssignee(\"assignee_\" + randomAlphabetic(5));",
        "fixed_code": "doc.setAssigneeUuid(\"assignee_uuid_\" + randomAlphabetic(26));",
        "patch": "@@ -58,7 +58,7 @@ public static IssueDoc newDoc() {\n     doc.setKey(Uuids.createFast());\n     doc.setRuleId(nextInt(1000));\n     doc.setType(RuleType.CODE_SMELL);\n-    doc.setAssignee(\"assignee_\" + randomAlphabetic(5));\n+    doc.setAssigneeUuid(\"assignee_uuid_\" + randomAlphabetic(26));\n     doc.setAuthorLogin(\"author_\" + randomAlphabetic(5));\n     doc.setLanguage(\"language_\" + randomAlphabetic(5));\n     doc.setComponentUuid(Uuids.createFast());"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": ".setAssignee(\"loic\")",
        "fixed_code": ".setAssigneeUuid(\"loic\")",
        "patch": "@@ -133,7 +133,7 @@ public void should_update_issues() {\n       .setEffort(Duration.create(10L))\n       .setChecksum(\"FFFFF\")\n       .setAuthorLogin(\"simon\")\n-      .setAssignee(\"loic\")\n+      .setAssigneeUuid(\"loic\")\n       .setFieldChange(context, \"severity\", \"INFO\", \"BLOCKER\")\n       .setResolution(\"FIXED\")\n       .setStatus(\"RESOLVED\")"
    },
    {
        "commit_id": "26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "commit_message": "SONAR-10597 Use user UUID for ISSUES#ASSIGNEE\n\n* SONAR-10597 add getUuid() on user Session\n* SONAR-10597 renames ISSUES.ASSIGNEE to ASSIGNEE_UUID\n* SONAR-10597 use assigneeUuid when assigning an Issue from ws\n* SONAR-10597 use assigneeUuid when assigning an Issue from ce\n* SONAR-10597 use assigneeUuid in issue search\n* SONAR-10597 use assigneeUuid in batch issue\n* SONAR-10597 Ignoring Tests failing in IssueChange",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26fb4f056bbe071d6732cbf3bac67655faa2c663",
        "buggy_code": ".setAssignee(\"julien\")",
        "fixed_code": ".setAssigneeUuid(\"julien\")",
        "patch": "@@ -53,7 +53,7 @@ public void test_setters_and_getters() throws Exception {\n       .setEffort(Duration.create(28800L))\n       .setStatus(Issue.STATUS_CLOSED)\n       .setResolution(Issue.RESOLUTION_FIXED)\n-      .setAssignee(\"julien\")\n+      .setAssigneeUuid(\"julien\")\n       .setAuthorLogin(\"steph\")\n       .setChecksum(\"c7b5db46591806455cf082bb348631e8\")\n       .setNew(true)"
    },
    {
        "commit_id": "cc711ea11add2c301f5ffa48674e9250923c74c3",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc711ea11add2c301f5ffa48674e9250923c74c3",
        "buggy_code": "Integer lineHashesVersion = sourceLinesHash.getLineHashesVersion(file);",
        "fixed_code": "int lineHashesVersion = sourceLinesHash.getLineHashesVersion(file);",
        "patch": "@@ -137,7 +137,7 @@ private void persistSource(ComputeFileSourceData.Data fileSourceData, Component\n       String srcHash = fileSourceData.getSrcHash();\n       String lineHashes = fileSourceData.getLineHashes();\n       FileSourceDto previousDto = previousFileSourcesByUuid.get(file.getUuid());\n-      Integer lineHashesVersion = sourceLinesHash.getLineHashesVersion(file);\n+      int lineHashesVersion = sourceLinesHash.getLineHashesVersion(file);\n \n       if (previousDto == null) {\n         FileSourceDto dto = new FileSourceDto()"
    },
    {
        "commit_id": "5097d1877b4d9d49a5a35a57ba4002ceb30b839e",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5097d1877b4d9d49a5a35a57ba4002ceb30b839e",
        "buggy_code": "Map<String, String> params = new HashMap<>(input.getParamsByKey());",
        "fixed_code": "Map<String, String> params = new HashMap<>(input.getParamsByKeyMap());",
        "patch": "@@ -71,7 +71,7 @@ public String getDescription() {\n \n   private static ActiveRule convert(ScannerReport.ActiveRule input, Rule rule) {\n     RuleKey key = RuleKey.of(input.getRuleRepository(), input.getRuleKey());\n-    Map<String, String> params = new HashMap<>(input.getParamsByKey());\n+    Map<String, String> params = new HashMap<>(input.getParamsByKeyMap());\n     return new ActiveRule(key, input.getSeverity().name(), params, input.getCreatedAt(), rule.getPluginKey());\n   }\n }"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -44,7 +44,7 @@\n import static java.util.Objects.requireNonNull;\n import static org.apache.commons.lang.StringUtils.isBlank;\n import static org.sonar.core.util.stream.MoreCollectors.toList;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.DatabaseUtils.checkThatNotTooManyConditions;\n import static org.sonar.db.DatabaseUtils.executeLargeInputs;\n import static org.sonar.db.DatabaseUtils.executeLargeInputsIntoSet;"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -34,7 +34,7 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;\n import static org.apache.commons.lang.StringUtils.substringBeforeLast;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.component.ComponentValidator.checkComponentKey;\n import static org.sonar.db.component.ComponentValidator.checkComponentLongName;\n import static org.sonar.db.component.ComponentValidator.checkComponentName;"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.db.WildcardPosition;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n \n public class ComponentQuery {\n   private final String nameOrKeyQuery;"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -28,7 +28,7 @@\n \n import static com.google.common.collect.Lists.newArrayList;\n import static java.util.Objects.requireNonNull;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.WildcardPosition.BEFORE_AND_AFTER;\n \n public class ComponentTreeQuery {"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.db.WildcardPosition;\n import org.sonar.db.component.ComponentDto;\n \n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.DatabaseUtils.executeLargeInputs;\n \n public class IssueDao implements Dao {"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -28,7 +28,7 @@\n \n import static com.google.common.collect.Lists.newArrayList;\n import static java.util.Objects.requireNonNull;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.WildcardPosition.BEFORE_AND_AFTER;\n \n public class MeasureTreeQuery {"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -30,7 +30,7 @@\n import static java.util.Objects.requireNonNull;\n import static org.apache.commons.lang.StringUtils.defaultIfBlank;\n import static org.sonar.api.utils.Paging.offset;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n \n /**\n  * Query used to get users and groups permissions"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -29,7 +29,7 @@\n \n import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.WildcardPosition.BEFORE_AND_AFTER;\n \n public class SearchGroupsQuery {"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -30,7 +30,7 @@\n import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.WildcardPosition.BEFORE_AND_AFTER;\n \n public class SearchUsersQuery {"
    },
    {
        "commit_id": "e582be977c992d38fff928388bb1f1ae928fd146",
        "commit_message": "Fix Quality flaws\n\nmainly by removing unused code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e582be977c992d38fff928388bb1f1ae928fd146",
        "buggy_code": "import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;",
        "fixed_code": "import static org.sonar.db.DaoUtils.buildLikeValue;",
        "patch": "@@ -29,7 +29,7 @@\n import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n-import static org.sonar.db.DaoDatabaseUtils.buildLikeValue;\n+import static org.sonar.db.DaoUtils.buildLikeValue;\n import static org.sonar.db.WildcardPosition.BEFORE_AND_AFTER;\n \n public class UserMembershipQuery {"
    },
    {
        "commit_id": "56f312c22751268126bc3a5e60cd3c7a83b0c696",
        "commit_message": "fix QualityGateUiTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56f312c22751268126bc3a5e60cd3c7a83b0c696",
        "buggy_code": "$(\".js-confirm\").click();",
        "fixed_code": "$(\".modal form\").submit();",
        "patch": "@@ -44,7 +44,7 @@ public QualityGatePage createQG(String name) {\n     $(\"#quality-gate-add\").click();\n     $(\".modal-head\").should(exist).shouldHave(text(\"Create Quality Gate\"));\n     $(\"#quality-gate-form-name\").sendKeys(name);\n-    $(\".js-confirm\").click();\n+    $(\".modal form\").submit();\n     return this;\n   }\n "
    },
    {
        "commit_id": "126f70ea1f80a6a74d1734655c1da799df07f774",
        "commit_message": "SONAR-10575 fix flag to include external rules in rules search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/126f70ea1f80a6a74d1734655c1da799df07f774",
        "buggy_code": ".setChangelog(new Change(\"7.2\", \"The field 'isExternal' has been added to the 'f' parameter\"));",
        "fixed_code": ".setChangelog(new Change(\"7.2\", \"The field 'includeExternal' has been added to the 'f' parameter\"));",
        "patch": "@@ -135,7 +135,7 @@ public void define(WebService.NewController controller) {\n       .setChangelog(new Change(\"7.1\", \"The field 'scope' has been added to the response\"))\n       .setChangelog(new Change(\"7.1\", \"The field 'scope' has been added to the 'f' parameter\"))\n       .setChangelog(new Change(\"7.2\", \"The field 'isExternal' has been added to the response\"))\n-      .setChangelog(new Change(\"7.2\", \"The field 'isExternal' has been added to the 'f' parameter\"));\n+      .setChangelog(new Change(\"7.2\", \"The field 'includeExternal' has been added to the 'f' parameter\"));\n \n     action.createParam(FACETS)\n       .setDescription(\"Comma-separated list of the facets to be computed. No facet is computed by default.\")"
    },
    {
        "commit_id": "4373ca61250f094d623bc951c90978118e2179c1",
        "commit_message": "SONAR-10543 Fix external issues effort",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4373ca61250f094d623bc951c90978118e2179c1",
        "buggy_code": "assertThat(report.issues[0].effortMinutes).isEqualTo(20);",
        "fixed_code": "assertThat(report.issues[0].effortMinutes).isEqualTo(40);",
        "patch": "@@ -43,7 +43,7 @@ public void parse_sample() {\n     assertThat(report.issues[0].engineId).isEqualTo(\"eslint\");\n     assertThat(report.issues[0].ruleId).isEqualTo(\"rule1\");\n     assertThat(report.issues[0].severity).isEqualTo(\"MAJOR\");\n-    assertThat(report.issues[0].effortMinutes).isEqualTo(20);\n+    assertThat(report.issues[0].effortMinutes).isEqualTo(40);\n     assertThat(report.issues[0].type).isEqualTo(\"CODE_SMELL\");\n     assertThat(report.issues[0].primaryLocation.filePath).isEqualTo(\"file1.js\");\n     assertThat(report.issues[0].primaryLocation.message).isEqualTo(\"fix the issue here\");"
    },
    {
        "commit_id": "4373ca61250f094d623bc951c90978118e2179c1",
        "commit_message": "SONAR-10543 Fix external issues effort",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4373ca61250f094d623bc951c90978118e2179c1",
        "buggy_code": "assertThat(issuesList.get(0).getEffort()).isEqualTo(\"20min\");",
        "fixed_code": "assertThat(issuesList.get(0).getEffort()).isEqualTo(\"50min\");",
        "patch": "@@ -101,7 +101,7 @@ public void should_import_external_issues_from_json_report_and_create_external_r\n     assertThat(issuesList.get(0).getType()).isEqualTo(RuleType.CODE_SMELL);\n     assertThat(issuesList.get(0).getComponent()).isEqualTo(\"sample:src/main/xoo/sample/Sample.xoo\");\n     assertThat(issuesList.get(0).getStatus()).isEqualTo(\"OPEN\");\n-    assertThat(issuesList.get(0).getEffort()).isEqualTo(\"20min\");\n+    assertThat(issuesList.get(0).getEffort()).isEqualTo(\"50min\");\n     assertThat(issuesList.get(0).getExternalRuleEngine()).isEqualTo(\"externalXoo\");\n \n     issuesList = tester.wsClient().issues().search(new SearchRequest()"
    },
    {
        "commit_id": "1d2e8b2aea50ff5ff440fb8600341cf9f77312a8",
        "commit_message": "Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1d2e8b2aea50ff5ff440fb8600341cf9f77312a8",
        "buggy_code": "private NewIssueLocation fillLocation(SensorContext context, NewIssueLocation newLocation, Location location) {",
        "fixed_code": "private static NewIssueLocation fillLocation(SensorContext context, NewIssueLocation newLocation, Location location) {",
        "patch": "@@ -103,7 +103,7 @@ private static String pluralize(String msg, int count) {\n   }\n \n   @CheckForNull\n-  private NewIssueLocation fillLocation(SensorContext context, NewIssueLocation newLocation, Location location) {\n+  private static NewIssueLocation fillLocation(SensorContext context, NewIssueLocation newLocation, Location location) {\n     InputFile file = findFile(context, location.filePath);\n     if (file != null) {\n       newLocation"
    },
    {
        "commit_id": "2552e0dcff500d999401cce943a87dcc766eb623",
        "commit_message": "SONAR-10544 fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2552e0dcff500d999401cce943a87dcc766eb623",
        "buggy_code": ".remediationEffort(EFFORT)",
        "fixed_code": ".remediationEffortMinutes(EFFORT)",
        "patch": "@@ -75,7 +75,7 @@ private void createIssues(InputFile file, SensorContext context, String repo) {\n           .at(file.selectLine(line))\n           .message(\"This issue is generated on each line\"))\n         .severity(Severity.valueOf(SEVERITY))\n-        .remediationEffort(EFFORT)\n+        .remediationEffortMinutes(EFFORT)\n         .type(type)\n         .save();\n     }"
    },
    {
        "commit_id": "2552e0dcff500d999401cce943a87dcc766eb623",
        "commit_message": "SONAR-10544 fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2552e0dcff500d999401cce943a87dcc766eb623",
        "buggy_code": "NewExternalIssue remediationEffort(@Nullable Long effort);",
        "fixed_code": "NewExternalIssue remediationEffortMinutes(@Nullable Long effortInMinutes);",
        "patch": "@@ -45,7 +45,7 @@ public interface NewExternalIssue {\n   /**\n    * Effort to fix the issue, in minutes.\n    */\n-  NewExternalIssue remediationEffort(@Nullable Long effort);\n+  NewExternalIssue remediationEffortMinutes(@Nullable Long effortInMinutes);\n \n   /**\n    * Set the severity of the issue."
    },
    {
        "commit_id": "2552e0dcff500d999401cce943a87dcc766eb623",
        "commit_message": "SONAR-10544 fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2552e0dcff500d999401cce943a87dcc766eb623",
        "buggy_code": "public DefaultExternalIssue remediationEffort(@Nullable Long effort) {",
        "fixed_code": "public DefaultExternalIssue remediationEffortMinutes(@Nullable Long effort) {",
        "patch": "@@ -45,7 +45,7 @@ public DefaultExternalIssue(@Nullable SensorStorage storage) {\n   }\n \n   @Override\n-  public DefaultExternalIssue remediationEffort(@Nullable Long effort) {\n+  public DefaultExternalIssue remediationEffortMinutes(@Nullable Long effort) {\n     Preconditions.checkArgument(effort == null || effort >= 0, format(\"effort must be greater than or equal 0 (got %s)\", effort));\n     this.effort = effort;\n     return this;"
    },
    {
        "commit_id": "7dd669b81713f335758d9a0673c45a4cf28f9d1f",
        "commit_message": "SONAR-10577 Fix quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7dd669b81713f335758d9a0673c45a4cf28f9d1f",
        "buggy_code": "private String engineNameFrom(RuleKey ruleKey) {",
        "fixed_code": "private static String engineNameFrom(RuleKey ruleKey) {",
        "patch": "@@ -200,7 +200,7 @@ private void formatIssue(Issue.Builder issueBuilder, IssueDto dto, SearchRespons\n     setNullable(dto.getIssueCloseDate(), issueBuilder::setCloseDate, DateUtils::formatDateTime);\n   }\n \n-  private String engineNameFrom(RuleKey ruleKey) {\n+  private static String engineNameFrom(RuleKey ruleKey) {\n     checkState(ruleKey.repository().startsWith(EXTERNAL_RULE_REPO_PREFIX));\n     return ruleKey.repository().replace(EXTERNAL_RULE_REPO_PREFIX, \"\");\n   }"
    },
    {
        "commit_id": "69cee931cd9c181019812107637d9686d8b13ef1",
        "commit_message": "SONAR-10577 return if an issue is from an external analyser in issue search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/69cee931cd9c181019812107637d9686d8b13ef1",
        "buggy_code": "\"locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,isCopied=false,\" +",
        "fixed_code": "\"locations=<null>,isFromExternalRuleEngine=false,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,isCopied=false,\" +",
        "patch": "@@ -213,7 +213,7 @@ public void display_warning_when_line_is_above_max_size() {\n         \"moduleUuid=<null>,moduleUuidPath=<null>,projectUuid=<null>,projectKey=<null>,ruleKey=<null>,language=<null>,severity=<null>,\" +\n         \"manualSeverity=false,message=<null>,line=2,gap=<null>,effort=<null>,status=<null>,resolution=<null>,\" +\n         \"assignee=<null>,checksum=<null>,attributes=<null>,authorLogin=<null>,comments=<null>,tags=<null>,\" +\n-        \"locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,isCopied=false,\" +\n+        \"locations=<null>,isFromExternalRuleEngine=false,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,isCopied=false,\" +\n         \"beingClosed=false,onDisabledRule=false,isChanged=false,sendNotifications=false,selectedAt=<null>]\");\n   }\n "
    },
    {
        "commit_id": "0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "commit_message": "SONAR-10544 Fix tests handling of external rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "buggy_code": "assertThat(def.params()).hasSize(23);",
        "fixed_code": "assertThat(def.params()).hasSize(24);",
        "patch": "@@ -132,7 +132,7 @@ public void test_definition() {\n     assertThat(def.since()).isEqualTo(\"4.4\");\n     assertThat(def.isInternal()).isFalse();\n     assertThat(def.responseExampleAsString()).isNotEmpty();\n-    assertThat(def.params()).hasSize(23);\n+    assertThat(def.params()).hasSize(24);\n \n     WebService.Param compareToProfile = def.param(\"compareToProfile\");\n     assertThat(compareToProfile.since()).isEqualTo(\"6.5\");"
    },
    {
        "commit_id": "0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "commit_message": "SONAR-10544 Fix tests handling of external rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "buggy_code": "public DefaultExternalIssue(SensorStorage storage) {",
        "fixed_code": "public DefaultExternalIssue(@Nullable SensorStorage storage) {",
        "patch": "@@ -42,7 +42,7 @@ public DefaultExternalIssue() {\n     super(null);\n   }\n \n-  public DefaultExternalIssue(SensorStorage storage) {\n+  public DefaultExternalIssue(@Nullable SensorStorage storage) {\n     super(storage);\n   }\n "
    },
    {
        "commit_id": "0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "commit_message": "SONAR-10544 Fix tests handling of external rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "buggy_code": "public DefaultIssue(SensorStorage storage) {",
        "fixed_code": "public DefaultIssue(@Nullable SensorStorage storage) {",
        "patch": "@@ -39,7 +39,7 @@ public DefaultIssue() {\n     super(null);\n   }\n \n-  public DefaultIssue(SensorStorage storage) {\n+  public DefaultIssue(@Nullable SensorStorage storage) {\n     super(storage);\n   }\n "
    },
    {
        "commit_id": "0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "commit_message": "SONAR-10544 Fix tests handling of external rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0672145e58ce28f8fb475bc53f095f16dfaeeb1d",
        "buggy_code": "String primaryMessage = issue.primaryLocation().message();",
        "fixed_code": "String primaryMessage = Strings.isNullOrEmpty(issue.primaryLocation().message()) ? issue.ruleTitle() : issue.primaryLocation().message();",
        "patch": "@@ -111,7 +111,7 @@ private static ScannerReport.Issue createReportIssue(Issue issue, int componentR\n   }\n \n   private static ScannerReport.ExternalIssue createReportExternalIssue(ExternalIssue issue, int componentRef) {\n-    String primaryMessage = issue.primaryLocation().message();\n+    String primaryMessage = Strings.isNullOrEmpty(issue.primaryLocation().message()) ? issue.ruleTitle() : issue.primaryLocation().message();\n     Severity severity = Severity.valueOf(issue.severity().name());\n \n     ScannerReport.ExternalIssue.Builder builder = ScannerReport.ExternalIssue.newBuilder();"
    },
    {
        "commit_id": "b92c2b10a48954be8b8af7e02c01f6f39001074f",
        "commit_message": "SONAR-10544 Fix handling of external rules in CE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b92c2b10a48954be8b8af7e02c01f6f39001074f",
        "buggy_code": "try (DbSession dbSession = dbClient.openSession(true)) {",
        "fixed_code": "try (DbSession dbSession = dbClient.openSession(false)) {",
        "patch": "@@ -37,7 +37,7 @@ public PersistExternalRulesStep(DbClient dbClient, RuleRepository ruleRepository\n   @Override\n   public void execute() {\n \n-    try (DbSession dbSession = dbClient.openSession(true)) {\n+    try (DbSession dbSession = dbClient.openSession(false)) {\n       ruleRepository.persistNewExternalRules(dbSession);\n       dbSession.flushStatements();\n       dbSession.commit();"
    },
    {
        "commit_id": "29c541dc4886e8f5b1023401caf4144847b20a7b",
        "commit_message": "SONAR-10543 Fix mandatory fields",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29c541dc4886e8f5b1023401caf4144847b20a7b",
        "buggy_code": ".setName(reportIssue.getRuleName());",
        "fixed_code": ".setName(reportIssue.getRuleTitle());",
        "patch": "@@ -219,7 +219,7 @@ private NewExternalRule toExternalRule(ScannerReport.ExternalIssue reportIssue)\n         .setType(toRuleType(reportIssue.getType()))\n         .setKey(RuleKey.of(RuleKey.EXTERNAL_RULE_REPO_PREFIX + reportIssue.getRuleRepository(), reportIssue.getRuleKey()))\n         .setPluginKey(reportIssue.getRuleRepository())\n-        .setName(reportIssue.getRuleName());\n+        .setName(reportIssue.getRuleTitle());\n \n       if (reportIssue.getSeverity() != Severity.UNSET_SEVERITY) {\n         builder.setSeverity(reportIssue.getSeverity().name());"
    },
    {
        "commit_id": "3a4cd557bc1448a83e1f8bcd0c2fe3de1a698ca7",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a4cd557bc1448a83e1f8bcd0c2fe3de1a698ca7",
        "buggy_code": "private String hash(String salt, String password) {",
        "fixed_code": "private static String hash(String salt, String password) {",
        "patch": "@@ -172,7 +172,7 @@ public void storeHashPassword(UserDto user, String password) {\n         .setSalt(salt);\n     }\n \n-    private String hash(String salt, String password) {\n+    private static String hash(String salt, String password) {\n       return DigestUtils.sha1Hex(\"--\" + salt + \"--\" + password + \"--\");\n     }\n   }"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public Tester tester = new Tester(orchestrator);",
        "fixed_code": "public Tester tester = new Tester(orchestrator).disableOrganizations();",
        "patch": "@@ -42,7 +42,7 @@ public class BranchTest {\n   public static Orchestrator orchestrator = ComponentSuite.ORCHESTRATOR;\n \n   @Rule\n-  public Tester tester = new Tester(orchestrator);\n+  public Tester tester = new Tester(orchestrator).disableOrganizations();\n \n   @Test\n   public void list_branches_contains_main_branch() {"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public Tester tester = new Tester(orchestrator);",
        "fixed_code": "public Tester tester = new Tester(orchestrator).disableOrganizations();",
        "patch": "@@ -35,7 +35,7 @@ public class CodePageTest {\n   public static Orchestrator orchestrator = ComponentSuite.ORCHESTRATOR;\n \n   @Rule\n-  public Tester tester = new Tester(orchestrator);\n+  public Tester tester = new Tester(orchestrator).disableOrganizations();\n \n   @Test\n   public void code_page() {"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "private static Tester tester = new Tester(orchestrator);",
        "fixed_code": "private static Tester tester = new Tester(orchestrator).disableOrganizations();",
        "patch": "@@ -39,7 +39,7 @@ public class ComponentsWsTest {\n   @ClassRule\n   public static final Orchestrator orchestrator = ComponentSuite.ORCHESTRATOR;\n \n-  private static Tester tester = new Tester(orchestrator);\n+  private static Tester tester = new Tester(orchestrator).disableOrganizations();\n \n   @ClassRule\n   public static RuleChain ruleChain = RuleChain.outerRule(orchestrator).around(tester);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "String userAdmin = tester.users().generateAdministratorOnDefaultOrganization().getLogin();",
        "fixed_code": "String userAdmin = tester.users().generateAdministrator().getLogin();",
        "patch": "@@ -76,7 +76,7 @@ public void delete_analysis() {\n   }\n \n   private ProjectActivityPage openPage() {\n-    String userAdmin = tester.users().generateAdministratorOnDefaultOrganization().getLogin();\n+    String userAdmin = tester.users().generateAdministrator().getLogin();\n     return tester.openBrowser()\n       .logIn()\n       .submitCredentials(userAdmin, userAdmin)"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "adminUser = tester.users().generateAdministratorOnDefaultOrganization().getLogin();",
        "fixed_code": "adminUser = tester.users().generateAdministrator().getLogin();",
        "patch": "@@ -48,7 +48,7 @@ public class ProjectDashboardTest {\n \n   @Before\n   public void setUp() {\n-    adminUser = tester.users().generateAdministratorOnDefaultOrganization().getLogin();\n+    adminUser = tester.users().generateAdministrator().getLogin();\n   }\n \n   @Test"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -36,7 +36,7 @@\n public class ProjectBulkDeletionPageTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -38,7 +38,7 @@\n public class ProjectBulkDeletionTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -53,7 +53,7 @@\n public class ProjectFilterTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -39,7 +39,7 @@\n public class ProjectKeyUpdatePageTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -42,7 +42,7 @@\n public class ProjectLeakPageTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -44,7 +44,7 @@\n public class ProjectLinksTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   private static Tester tester = new Tester(orchestrator);\n "
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static final Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static final Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -34,7 +34,7 @@\n public class ProjectListTest {\n \n   @ClassRule\n-  public static final Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static final Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -41,7 +41,7 @@\n public class ProjectSearchTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -38,7 +38,7 @@\n public class ProjectVisibilityPageTest {\n \n   @ClassRule\n-  public static Orchestrator orchestrator = ProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "3136ecae882db65db856b5f6f9e0a19a9781763f",
        "commit_message": "Fix QA",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3136ecae882db65db856b5f6f9e0a19a9781763f",
        "buggy_code": "public static Orchestrator orchestrator = SonarCloudProjectSuite.ORCHESTRATOR;",
        "fixed_code": "public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;",
        "patch": "@@ -46,7 +46,7 @@ public class SonarCloudProjectBadgesTest {\n   private static final String SONAR_CLOUD_ORANGE_BADGE = \"images/project_badges/sonarcloud-orange.svg\";\n \n   @ClassRule\n-  public static Orchestrator orchestrator = SonarCloudProjectSuite.ORCHESTRATOR;\n+  public static Orchestrator orchestrator = OrganizationProjectSuite.ORCHESTRATOR;\n \n   @Rule\n   public Tester tester = new Tester(orchestrator);"
    },
    {
        "commit_id": "6ab3e013a2cc0f3c90c6cff8f89ab015977a561f",
        "commit_message": "Fix WS routing\n\nWhen a regular WS path is a suffix of a \"ServletFilter\" path, the regular WS can't be reached.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ab3e013a2cc0f3c90c6cff8f89ab015977a561f",
        "buggy_code": "return action -> \"/\" + action.path() + \"/*\";",
        "fixed_code": "return action -> \"/\" + action.path() + \".*\";",
        "patch": "@@ -95,7 +95,7 @@ public void destroy() {\n   }\n \n   private static Function<WebService.Action, String> toPath() {\n-    return action -> \"/\" + action.path() + \"/*\";\n+    return action -> \"/\" + action.path() + \".*\";\n   }\n \n }"
    },
    {
        "commit_id": "b4125add7a55db6d2dc71a1bd0b2cadbe5ff7887",
        "commit_message": "Fix issues with daylight saving time",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b4125add7a55db6d2dc71a1bd0b2cadbe5ff7887",
        "buggy_code": "import org.apache.commons.lang.time.DateUtils;",
        "fixed_code": "import org.sonar.api.utils.DateUtils;",
        "patch": "@@ -25,9 +25,9 @@\n import java.util.Date;\n import java.util.Optional;\n import javax.annotation.CheckForNull;\n-import org.apache.commons.lang.time.DateUtils;\n import org.sonar.api.config.Configuration;\n import org.sonar.api.resources.Scopes;\n+import org.sonar.api.utils.DateUtils;\n import org.sonar.api.utils.System2;\n import org.sonar.core.config.PurgeConstants;\n "
    },
    {
        "commit_id": "b3cf89af7b9fede43d0b23739b28dc762eb3e2ad",
        "commit_message": "SONAR-10502 Fix concurrency error during initial indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b3cf89af7b9fede43d0b23739b28dc762eb3e2ad",
        "buggy_code": "throw new IllegalStateException(\"Unrecoverable indexation failures\");",
        "fixed_code": "throw new IllegalStateException(String.format(\"Unrecoverable indexation failures: %d errors among %d requests\", result.getFailures(), result.getTotal()));",
        "patch": "@@ -36,7 +36,7 @@ public void onSuccess(List<DocId> docIds) {\n     @Override\n     public void onFinish(IndexingResult result) {\n       if (result.getFailures() > 0) {\n-        throw new IllegalStateException(\"Unrecoverable indexation failures\");\n+        throw new IllegalStateException(String.format(\"Unrecoverable indexation failures: %d errors among %d requests\", result.getFailures(), result.getTotal()));\n       }\n     }\n   };"
    },
    {
        "commit_id": "be8a0a7d407f9bbd6333e4fe09110b45b0450bf3",
        "commit_message": "Fix BranchPersisterImplTest.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/be8a0a7d407f9bbd6333e4fe09110b45b0450bf3",
        "buggy_code": "analysisMetadataHolder.setProject(Project.copyOf(dto));",
        "fixed_code": "analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getKey(), dto.name(), dto.description()));",
        "patch": "@@ -92,7 +92,7 @@ public void persist_pull_request_data() {\n \n     // add main branch in project table and in metadata\n     ComponentDto dto = ComponentTesting.newPrivateProjectDto(dbTester.organizations().insert(), MAIN.getUuid()).setDbKey(MAIN.getKey());\n-    analysisMetadataHolder.setProject(Project.copyOf(dto));\n+    analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getKey(), dto.name(), dto.description()));\n     dbTester.getDbClient().componentDao().insert(dbTester.getSession(), dto);\n \n     // this should add new columns in project and project_branches"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "+ 57 // content of CorePropertyDefinitions",
        "fixed_code": "+ 59 // content of CorePropertyDefinitions",
        "patch": "@@ -120,7 +120,7 @@ public void test_real_start() throws IOException {\n         + 26 // level 1\n         + 53 // content of DaoModule\n         + 3 // content of EsModule\n-        + 57 // content of CorePropertyDefinitions\n+        + 59 // content of CorePropertyDefinitions\n         + 1 // StopFlagContainer\n     );\n     assertThat("
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "BranchDto selectByKey(@Param(\"projectUuid\") String projectUuid, @Param(\"key\") String key);",
        "fixed_code": "BranchDto selectByKey(@Param(\"projectUuid\") String projectUuid, @Param(\"key\") String key, @Param(\"keyType\") KeyType keyType);",
        "patch": "@@ -31,7 +31,7 @@ public interface BranchMapper {\n \n   int updateMainBranchName(@Param(\"projectUuid\") String projectUuid, @Param(\"newBranchName\") String newBranchName, @Param(\"now\") long now);\n \n-  BranchDto selectByKey(@Param(\"projectUuid\") String projectUuid, @Param(\"key\") String key);\n+  BranchDto selectByKey(@Param(\"projectUuid\") String projectUuid, @Param(\"key\") String key, @Param(\"keyType\") KeyType keyType);\n \n   BranchDto selectByUuid(@Param(\"uuid\") String uuid);\n "
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "ComponentDto selectByKeyAndBranch(@Param(\"key\") String key, @Param(\"dbKey\") String dbKey, @Param(\"branch\") String branch);",
        "fixed_code": "ComponentDto selectByKeyAndBranchKey(@Param(\"key\") String key, @Param(\"dbKey\") String dbKey, @Param(\"branch\") String branch);",
        "patch": "@@ -33,7 +33,7 @@ public interface ComponentMapper {\n   ComponentDto selectByKey(String key);\n \n   @CheckForNull\n-  ComponentDto selectByKeyAndBranch(@Param(\"key\") String key, @Param(\"dbKey\") String dbKey, @Param(\"branch\") String branch);\n+  ComponentDto selectByKeyAndBranchKey(@Param(\"key\") String key, @Param(\"dbKey\") String dbKey, @Param(\"branch\") String branch);\n \n   @CheckForNull\n   ComponentDto selectById(long id);"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "verifyMigrationCount(underTest, 16);",
        "fixed_code": "verifyMigrationCount(underTest, 22);",
        "patch": "@@ -36,7 +36,7 @@ public void migrationNumber_starts_at_2000() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 16);\n+    verifyMigrationCount(underTest, 22);\n   }\n \n }"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "Optional<BranchDto> existingBranch = dbClient.branchDao().selectByKey(dbSession, project.uuid(), newBranchName);",
        "fixed_code": "Optional<BranchDto> existingBranch = dbClient.branchDao().selectByBranchKey(dbSession, project.uuid(), newBranchName);",
        "patch": "@@ -77,7 +77,7 @@ public void handle(Request request, Response response) throws Exception {\n       ComponentDto project = componentFinder.getRootComponentByUuidOrKey(dbSession, null, projectKey);\n       checkPermission(project);\n \n-      Optional<BranchDto> existingBranch = dbClient.branchDao().selectByKey(dbSession, project.uuid(), newBranchName);\n+      Optional<BranchDto> existingBranch = dbClient.branchDao().selectByBranchKey(dbSession, project.uuid(), newBranchName);\n       checkArgument(!existingBranch.filter(b -> !b.isMain()).isPresent(),\n         \"Impossible to update branch name: a branch with name \\\"%s\\\" already exists in the project.\", newBranchName);\n "
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "if (analysisMetadataHolder.isShortLivingBranch()) {",
        "fixed_code": "if (analysisMetadataHolder.isShortLivingBranch() || analysisMetadataHolder.isPullRequest()) {",
        "patch": "@@ -44,7 +44,7 @@ public IssueTrackingDelegator(ShortBranchTrackerExecution shortBranchTracker, Me\n   }\n \n   public TrackingResult track(Component component) {\n-    if (analysisMetadataHolder.isShortLivingBranch()) {\n+    if (analysisMetadataHolder.isShortLivingBranch() || analysisMetadataHolder.isPullRequest()) {\n       return standardResult(shortBranchTracker.track(component));\n     } else if (isFirstAnalysisSecondaryLongLivingBranch()) {\n       Tracking<DefaultIssue, DefaultIssue> tracking = mergeBranchTracker.track(component);"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "String componentKey = ComponentDto.removeBranchFromKey(component.getKey());",
        "fixed_code": "String componentKey = ComponentDto.removeBranchAndPullRequestFromKey(component.getKey());",
        "patch": "@@ -50,7 +50,7 @@ public ShortBranchIssuesLoader(ShortBranchComponentsWithIssues shortBranchCompon\n   }\n \n   public Collection<ShortBranchIssue> loadCandidateIssuesForMergingInTargetBranch(Component component) {\n-    String componentKey = ComponentDto.removeBranchFromKey(component.getKey());\n+    String componentKey = ComponentDto.removeBranchAndPullRequestFromKey(component.getKey());\n     Set<String> uuids = shortBranchComponentsWithIssues.getUuids(componentKey);\n     if (uuids.isEmpty()) {\n       return Collections.emptyList();"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "if (analysisMetadataHolder.isShortLivingBranch()) {",
        "fixed_code": "if (analysisMetadataHolder.isShortLivingBranch() || analysisMetadataHolder.isPullRequest()) {",
        "patch": "@@ -67,7 +67,7 @@ public void execute() {\n   }\n \n   private Optional<QualityGate> getShortLivingBranchQualityGate() {\n-    if (analysisMetadataHolder.isShortLivingBranch()) {\n+    if (analysisMetadataHolder.isShortLivingBranch() || analysisMetadataHolder.isPullRequest()) {\n       Optional<QualityGate> qualityGate = qualityGateService.findById(ShortLivingBranchQualityGate.ID);\n       if (qualityGate.isPresent()) {\n         return qualityGate;"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "if (branch.getBranchType() == BranchType.SHORT) {",
        "fixed_code": "if (branch.getBranchType() == BranchType.SHORT || branch.getBranchType() == BranchType.PULL_REQUEST) {",
        "patch": "@@ -63,7 +63,7 @@ public LiveQualityGateComputerImpl(DbClient dbClient, QualityGateFinder qGateFin\n \n   @Override\n   public QualityGate loadQualityGate(DbSession dbSession, OrganizationDto organization, ComponentDto project, BranchDto branch) {\n-    if (branch.getBranchType() == BranchType.SHORT) {\n+    if (branch.getBranchType() == BranchType.SHORT || branch.getBranchType() == BranchType.PULL_REQUEST) {\n       return ShortLivingBranchQualityGate.GATE;\n     }\n "
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "return componentFinder.getByKeyAndOptionalBranch(dbSession, componentParameter, branchParameter).uuid();",
        "fixed_code": "return componentFinder.getByKeyAndOptionalBranchOrPullRequest(dbSession, componentParameter, branchParameter, null).uuid();",
        "patch": "@@ -122,7 +122,7 @@ private String getHomepageParameter(DbSession dbSession, HomepageTypes.Type type\n     switch (type) {\n       case PROJECT:\n         checkArgument(isNotBlank(componentParameter), PARAMETER_REQUIRED, type.name(), PARAM_COMPONENT);\n-        return componentFinder.getByKeyAndOptionalBranch(dbSession, componentParameter, branchParameter).uuid();\n+        return componentFinder.getByKeyAndOptionalBranchOrPullRequest(dbSession, componentParameter, branchParameter, null).uuid();\n       case PORTFOLIO:\n       case APPLICATION:\n         checkArgument(isNotBlank(componentParameter), PARAMETER_REQUIRED, type.name(), PARAM_COMPONENT);"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "LONG, SHORT",
        "fixed_code": "LONG, SHORT, PULL_REQUEST",
        "patch": "@@ -49,7 +49,7 @@ public Type getType() {\n   }\n \n   public enum Type {\n-    LONG, SHORT\n+    LONG, SHORT, PULL_REQUEST\n   }\n \n   @Override"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "import static org.sonarqube.ws.ProjectBranches.Branch.Status;",
        "fixed_code": "import static org.sonarqube.ws.ProjectBranches.Status;",
        "patch": "@@ -70,7 +70,7 @@\n import static org.sonar.api.utils.DateUtils.parseDateTime;\n import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;\n import static org.sonar.test.JsonAssert.assertJson;\n-import static org.sonarqube.ws.ProjectBranches.Branch.Status;\n+import static org.sonarqube.ws.ProjectBranches.Status;\n \n public class ListActionTest {\n "
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "\"organization\",",
        "fixed_code": "\"pullRequest\", \"organization\",",
        "patch": "@@ -135,7 +135,7 @@ public void test_definition() {\n \n     assertThat(def.params()).extracting(\"key\").containsExactlyInAnyOrder(\n       \"additionalFields\", \"asc\", \"assigned\", \"assignees\", \"authors\", \"componentKeys\", \"componentRootUuids\", \"componentRoots\", \"componentUuids\", \"components\", \"branch\",\n-      \"organization\",\n+      \"pullRequest\", \"organization\",\n       \"createdAfter\", \"createdAt\", \"createdBefore\", \"createdInLast\", \"directories\", \"facetMode\", \"facets\", \"fileUuids\", \"issues\", \"languages\", \"moduleUuids\", \"onComponentOnly\",\n       \"p\", \"projectUuids\", \"projects\", \"ps\", \"resolutions\", \"resolved\", \"rules\", \"s\", \"severities\", \"sinceLeakPeriod\",\n       \"statuses\", \"tags\", \"types\");"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "BranchDto branch = db.getDbClient().branchDao().selectByKey(db.getSession(), project.projectUuid(), \"master\")",
        "fixed_code": "BranchDto branch = db.getDbClient().branchDao().selectByBranchKey(db.getSession(), project.projectUuid(), \"master\")",
        "patch": "@@ -332,7 +332,7 @@ public void event_contains_newQualityGate_computed_by_LiveQualityGateComputer()\n     markProjectAsAnalyzed(project);\n     db.measures().insertLiveMeasure(project, alertStatusMetric, m -> m.setData(Metric.Level.WARN.name()));\n     db.measures().insertLiveMeasure(project, intMetric, m -> m.setVariation(42.0).setValue(null));\n-    BranchDto branch = db.getDbClient().branchDao().selectByKey(db.getSession(), project.projectUuid(), \"master\")\n+    BranchDto branch = db.getDbClient().branchDao().selectByBranchKey(db.getSession(), project.projectUuid(), \"master\")\n       .orElseThrow(() -> new IllegalStateException(\"Can't find master branch\"));\n \n     List<QGChangeEvent> result = run(file1, newQualifierBasedIntLeakFormula());"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"component\", \"branch\");",
        "fixed_code": "assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"component\", \"branch\", \"pullRequest\");",
        "patch": "@@ -456,7 +456,7 @@ public void test_ws_definition() {\n     assertThat(action.isInternal()).isFalse();\n     assertThat(action.isPost()).isFalse();\n     assertThat(action.responseExampleAsString()).isNotEmpty();\n-    assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"component\", \"branch\");\n+    assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"component\", \"branch\", \"pullRequest\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\");",
        "fixed_code": "assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\", \"pullRequest\");",
        "patch": "@@ -238,7 +238,7 @@ public void test_ws_definition() {\n     assertThat(action.isInternal()).isFalse();\n     assertThat(action.isPost()).isTrue();\n     assertThat(action.responseExampleAsString()).isNull();\n-    assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\");\n+    assertThat(action.params()).extracting(Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\", \"pullRequest\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": ".containsOnly(\"key\", \"value\", \"values\", \"fieldValues\", \"component\", \"branch\");",
        "fixed_code": ".containsOnly(\"key\", \"value\", \"values\", \"fieldValues\", \"component\", \"branch\", \"pullRequest\");",
        "patch": "@@ -1015,7 +1015,7 @@ public void definition() {\n     assertThat(definition.isInternal()).isFalse();\n     assertThat(definition.since()).isEqualTo(\"6.1\");\n     assertThat(definition.params()).extracting(Param::key)\n-      .containsOnly(\"key\", \"value\", \"values\", \"fieldValues\", \"component\", \"branch\");\n+      .containsOnly(\"key\", \"value\", \"values\", \"fieldValues\", \"component\", \"branch\", \"pullRequest\");\n \n     Param branch = definition.param(\"branch\");\n     assertThat(branch.isInternal()).isTrue();"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "assertThat(action.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\");",
        "fixed_code": "assertThat(action.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\", \"pullRequest\");",
        "patch": "@@ -871,7 +871,7 @@ public void test_ws_definition() {\n     assertThat(action.isInternal()).isFalse();\n     assertThat(action.isPost()).isFalse();\n     assertThat(action.responseExampleAsString()).isNotEmpty();\n-    assertThat(action.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\");\n+    assertThat(action.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"keys\", \"component\", \"branch\", \"pullRequest\");\n   }\n \n   private ValuesWsResponse executeRequestForComponentProperties(ComponentDto componentDto, String... keys) {"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "assertThat(defs).hasSize(57);",
        "fixed_code": "assertThat(defs).hasSize(59);",
        "patch": "@@ -30,7 +30,7 @@ public class CorePropertyDefinitionsTest {\n   @Test\n   public void all() {\n     List<PropertyDefinition> defs = CorePropertyDefinitions.all();\n-    assertThat(defs).hasSize(57);\n+    assertThat(defs).hasSize(59);\n   }\n \n   @Test"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "LONG, SHORT",
        "fixed_code": "LONG, SHORT, PULL_REQUEST",
        "patch": "@@ -27,7 +27,7 @@\n public interface Branch {\n \n   enum Type {\n-    LONG, SHORT\n+    LONG, SHORT, PULL_REQUEST\n   }\n \n   boolean isMain();"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "if (branchConfiguration.isShortLivingBranch()) {",
        "fixed_code": "if (branchConfiguration.isShortOrPullRequest()) {",
        "patch": "@@ -55,7 +55,7 @@ public TestExecutionAndCoveragePublisher(InputComponentStore componentStore, Tes\n \n   @Override\n   public void publish(ScannerReportWriter writer) {\n-    if (branchConfiguration.isShortLivingBranch()) {\n+    if (branchConfiguration.isShortOrPullRequest()) {\n       return;\n     }\n     final ScannerReport.Test.Builder testBuilder = ScannerReport.Test.newBuilder();"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches);",
        "fixed_code": "BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests);",
        "patch": "@@ -27,5 +27,5 @@\n @ScannerSide\n @InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public interface BranchConfigurationLoader {\n-  BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches);\n+  BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests);\n }"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "SHORT, LONG",
        "fixed_code": "SHORT, LONG, PULL_REQUEST",
        "patch": "@@ -20,5 +20,5 @@\n package org.sonar.scanner.scan.branch;\n \n public enum BranchType {\n-  SHORT, LONG\n+  SHORT, LONG, PULL_REQUEST\n }"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "if (branchConfiguration.isShortLivingBranch() && branchConfiguration.branchTarget() != null) {",
        "fixed_code": "if (branchConfiguration.isShortOrPullRequest() && branchConfiguration.branchTarget() != null) {",
        "patch": "@@ -62,7 +62,7 @@ private static void validatePaths(@javax.annotation.Nullable Collection<Path> pa\n \n   @CheckForNull\n   private static Collection<Path> loadChangedFilesIfNeeded(ScmConfiguration scmConfiguration, BranchConfiguration branchConfiguration, Path rootBaseDir) {\n-    if (branchConfiguration.isShortLivingBranch() && branchConfiguration.branchTarget() != null) {\n+    if (branchConfiguration.isShortOrPullRequest() && branchConfiguration.branchTarget() != null) {\n       ScmProvider scmProvider = scmConfiguration.provider();\n       if (scmProvider != null) {\n         Profiler profiler = Profiler.create(LOG).startInfo(LOG_MSG);"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "} else if (!branchConfiguration.isShortLivingBranch()) {",
        "fixed_code": "} else if (!branchConfiguration.isShortOrPullRequest()) {",
        "patch": "@@ -103,7 +103,7 @@ private List<InputFile> collectFilesToBlame(ScannerReportWriter writer) {\n       }\n       if (configuration.forceReloadAll() || f.status() != Status.SAME) {\n         addIfNotEmpty(filesToBlame, f);\n-      } else if (!branchConfiguration.isShortLivingBranch()) {\n+      } else if (!branchConfiguration.isShortOrPullRequest()) {\n         // File status is SAME so that mean fileData exists\n         FileData fileData = projectRepositories.fileData(inputModule.definition().getKeyWithBranch(), inputFile.getModuleRelativePath());\n         if (StringUtils.isEmpty(fileData.revision())) {"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": "return branchConfiguration.isShortLivingBranch() && defaultInputFile.status() == InputFile.Status.SAME;",
        "fixed_code": "return branchConfiguration.isShortOrPullRequest() && defaultInputFile.status() == InputFile.Status.SAME;",
        "patch": "@@ -355,7 +355,7 @@ private static void validatePositiveLine(Map<Integer, Integer> m, String filePat\n   }\n \n   private boolean shouldSkipStorage(DefaultInputFile defaultInputFile) {\n-    return branchConfiguration.isShortLivingBranch() && defaultInputFile.status() == InputFile.Status.SAME;\n+    return branchConfiguration.isShortOrPullRequest() && defaultInputFile.status() == InputFile.Status.SAME;\n   }\n \n   /**"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": ".setScmAccounts(asList(scmAccounts)));",
        "fixed_code": ".setScmAccount(asList(scmAccounts)));",
        "patch": "@@ -185,7 +185,7 @@ private static void createUser(String login, String name, String email, String..\n         .setName(name)\n         .setEmail(email)\n         .setPassword(\"xxxxxxx\")\n-        .setScmAccounts(asList(scmAccounts)));\n+        .setScmAccount(asList(scmAccounts)));\n   }\n \n   private static void deleteAllUsers() {"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": ".setScmAccounts(ImmutableList.of(\"jhenry\")));",
        "fixed_code": ".setScmAccount(ImmutableList.of(\"jhenry\")));",
        "patch": "@@ -95,7 +95,7 @@ public void before() {\n \n     // Create a user and register her to receive notification on NewIssues\n     tester.users().generate(t -> t.setLogin(USER_LOGIN).setPassword(USER_PASSWORD).setEmail(USER_EMAIL)\n-      .setScmAccounts(ImmutableList.of(\"jhenry\")));\n+      .setScmAccount(ImmutableList.of(\"jhenry\")));\n     // Add notifications to the test user\n     WsClient wsClient = newUserWsClient(ORCHESTRATOR, USER_LOGIN, USER_PASSWORD);\n     wsClient.wsConnector().call(new PostRequest(\"api/notifications/add\")"
    },
    {
        "commit_id": "751e4000e40a4af66b80767d632b1bef64dc5647",
        "commit_message": "MMF-1134 Make pull request a 1st class citizen\n\nSONAR-10366 Add pull request object to api/project_branches/list and api/ce/activity\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nSONAR-10366 SONAR-10367 Create WS api/projet_pull_requests/list and delete\n\nSONAR-10383 Add Pull Request information when listing CE tasks\n\nSONAR-10365 Add key type in PROJECT_BRANCHES (#3063)\n\nSONAR-10371 Add pullRequest parameter in the Web API (#3076)\n\n* ComponentFinder searches by branch or pull request\n* Add pullRequest parameter to WS api/issues/* WS\n* Add pullRequest parameter to api/settings/* WS\n* Add pullRequest parameter to api/badges/* WS\n* Add pullRequest parameter to api/components/* WS\n* Add pullRequest parameter to api/sources/* WS\n\nSONAR-10368 Copy issue states from pull request after it's merged\n\nSONAR-10373 Send notifications for events on issues of a pull request\n\nSONAR-10365 Add pull_request_binary column in project_branches (#3073)\n\nSONAR-10433 Store pull request in projects table\n\nSONAR-10371 Add pullRequest field in the Web API\n\nSONAR-10365 Analyze pull requests as 1st class citizen\n\nBRANCH-45 Expose issue resolution for PR decoration\n\nBRANCH-49 Basic support of pull request analysis on pull request branch\n\nBRANCH-47 Fail when user tries to analyze a pull request and the plugin is not available\n\nSONAR-10366 update pull request decorated links to project and issues\n\nSONAR-10365 Use pull request id as key instead of branch name\n\nSONAR-10454 Update embedded Git 1.4 and SVN 1.7\n\nSONAR-10365 rename sonar.pullrequest.id to sonar.pullrequest.key\n\nSONAR-10383 api/navigation/component returns the pull request key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/751e4000e40a4af66b80767d632b1bef64dc5647",
        "buggy_code": ".setScmAccounts(asList(\"test1\", \"test2\"))",
        "fixed_code": ".setScmAccount(asList(\"test1\", \"test2\"))",
        "patch": "@@ -241,7 +241,7 @@ public void authenticate_on_user_that_was_disabled() {\n       .setLogin(\"test\")\n       .setName(\"Test\")\n       .setEmail(\"test@email.com\")\n-      .setScmAccounts(asList(\"test1\", \"test2\"))\n+      .setScmAccount(asList(\"test1\", \"test2\"))\n       .setPassword(\"password\"));\n \n     assertThat(checkAuthenticationWithAuthenticateWebService(\"test\", \"password\")).isTrue();"
    },
    {
        "commit_id": "23e4b51cde3ed0dc76ca1d73aa6cc31715dd25d4",
        "commit_message": "Fix tests on Windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23e4b51cde3ed0dc76ca1d73aa6cc31715dd25d4",
        "buggy_code": "assertThat(file.absolutePath()).isEqualTo(new File(\"baseDir\", \"path\").toString());",
        "fixed_code": "assertThat(file.absolutePath()).isEqualTo(\"baseDir/path\");",
        "patch": "@@ -58,7 +58,7 @@ public void testGetters() {\n     assertThat(file.isPublished()).isTrue();\n     assertThat(file.type()).isEqualTo(Type.MAIN);\n     assertThat(file.relativePath()).isEqualTo(\"path\");\n-    assertThat(file.absolutePath()).isEqualTo(new File(\"baseDir\", \"path\").toString());\n+    assertThat(file.absolutePath()).isEqualTo(\"baseDir/path\");\n \n   }\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "checks.addAnnotatedChecks(Check.ALL);",
        "fixed_code": "checks.addAnnotatedChecks((Object[]) Check.ALL);",
        "patch": "@@ -50,7 +50,7 @@ public void describe(SensorDescriptor descriptor) {\n   @Override\n   public void execute(SensorContext context) {\n     Checks<Check> checks = checkFactory.create(XooRulesDefinition.XOO_REPOSITORY);\n-    checks.addAnnotatedChecks(Check.ALL);\n+    checks.addAnnotatedChecks((Object[]) Check.ALL);\n     FilePredicates p = context.fileSystem().predicates();\n     for (InputFile file : context.fileSystem().inputFiles(p.and(p.hasLanguages(Xoo.KEY), p.hasType(Type.MAIN)))) {\n       for (Check check : checks.all()) {"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n \n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -44,7 +44,7 @@\n import static java.lang.Math.abs;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.times;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.contains;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.contains;",
        "patch": "@@ -23,7 +23,7 @@\n import org.junit.Test;\n import org.sonar.api.utils.log.Logger;\n \n-import static org.mockito.Matchers.contains;\n+import static org.mockito.ArgumentMatchers.contains;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.server.platform.db.migration.version.DbVersion;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "Set<Object> result = rows.stream().map(cols -> cols.get(\"PROP_KEY\")).collect(Collectors.toSet());",
        "fixed_code": "Set<String> result = rows.stream().map(cols -> (String)cols.get(\"PROP_KEY\")).collect(Collectors.toSet());",
        "patch": "@@ -155,7 +155,7 @@ private void insertProperty(String key, @Nullable Integer componentId) {\n \n   private void verifyPropertyKeys(String... propertyKeys) {\n     List<Map<String, Object>> rows = db.select(\"select prop_key from \" + TABLE_PROPERTIES);\n-    Set<Object> result = rows.stream().map(cols -> cols.get(\"PROP_KEY\")).collect(Collectors.toSet());\n+    Set<String> result = rows.stream().map(cols -> (String)cols.get(\"PROP_KEY\")).collect(Collectors.toSet());\n     assertThat(result).containsOnly(propertyKeys);\n   }\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -40,7 +40,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.entry;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.when;\n \n public class CommandFactoryImplTest {"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -41,7 +41,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -27,7 +27,7 @@\n import org.mockito.ArgumentCaptor;\n \n import static org.assertj.core.api.Assertions.fail;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.argThat;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.argThat;",
        "patch": "@@ -30,7 +30,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.argThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyInt;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyInt;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.db.user.UserDto;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -41,7 +41,7 @@\n import org.sonar.server.authentication.event.AuthenticationException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonar.server.authentication.event.AuthenticationException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -42,7 +42,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.rules.ExpectedException.none;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -36,7 +36,7 @@\n import org.sonar.server.authentication.event.AuthenticationException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonarqube.ws.Batch.WsProjectResponse;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.test.JsonAssert.assertJson;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -39,7 +39,7 @@\n import org.sonar.server.ws.WsActionTester;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -42,7 +42,7 @@\n \n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.db.component.ComponentTesting.newFileDto;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -35,7 +35,7 @@\n \n import static java.util.Collections.emptyList;\n import static org.mockito.ArgumentMatchers.anyLong;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -59,7 +59,7 @@\n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.data.MapEntry.entry;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.server.computation.task.projectanalysis.period.PeriodHolder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.api.measures.CoreMetrics.COMPLEXITY_IN_FUNCTIONS_KEY;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -26,7 +26,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.guava.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -26,7 +26,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.guava.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.server.computation.task.projectanalysis.issue;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -45,7 +45,7 @@\n import org.sonar.server.computation.task.projectanalysis.component.TreeRootHolderRule;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;\n import static org.sonar.db.component.ComponentTesting.newFileDto;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.server.computation.task.projectanalysis.component.ReportComponent;\n import org.sonar.server.computation.task.projectanalysis.filemove.MovedFilesRepository;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -50,7 +50,7 @@\n import static com.google.common.collect.FluentIterable.from;\n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.db.component.ComponentTesting.newDirectory;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -34,7 +34,7 @@\n \n import static java.util.Collections.emptyList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -49,7 +49,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -37,7 +37,7 @@\n import org.sonar.server.computation.task.projectanalysis.event.EventRepository;\n import org.sonar.server.computation.task.step.ComputationStep;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.server.computation.task.projectanalysis.component.Component.Type.DIRECTORY;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -45,7 +45,7 @@\n \n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -44,7 +44,7 @@\n import org.sonar.server.notification.NotificationService;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -53,7 +53,7 @@\n import org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGateStatusHolder;\n \n import static com.google.common.collect.ImmutableList.of;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.api.measures.CoreMetrics.ALERT_STATUS_KEY;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -61,7 +61,7 @@\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -32,7 +32,7 @@\n import org.sonar.server.organization.BillingValidationsProxy;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -31,7 +31,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.fail;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -39,7 +39,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -56,7 +56,7 @@\n \n import static java.util.Collections.singleton;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -34,7 +34,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.api.config.internal.MapSettings;\n import org.sonar.server.es.metadata.MetadataIndex;\n \n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "assertThat(Message.of(\"key1\", null).toString()).isEqualTo(\"key1\");",
        "fixed_code": "assertThat(Message.of(\"key1\", (Object[])null).toString()).isEqualTo(\"key1\");",
        "patch": "@@ -83,6 +83,6 @@ public void test_equals_and_hashcode() {\n   public void to_string() {\n     assertThat(Message.of(\"key1 %s\", \"param1\").toString()).isEqualTo(\"key1 param1\");\n     assertThat(Message.of(\"key1\").toString()).isEqualTo(\"key1\");\n-    assertThat(Message.of(\"key1\", null).toString()).isEqualTo(\"key1\");\n+    assertThat(Message.of(\"key1\", (Object[])null).toString()).isEqualTo(\"key1\");\n   }\n }"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.db.IsAliveMapper;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.same;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.same;",
        "patch": "@@ -38,7 +38,7 @@\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.same;\n+import static org.mockito.ArgumentMatchers.same;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -56,7 +56,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n import static org.sonar.db.permission.OrganizationPermission.ADMINISTER;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.argThat;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.argThat;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.config.GlobalPropertyChangeHandler;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.argThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -40,7 +40,7 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -28,7 +28,7 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -33,7 +33,7 @@\n import org.mockito.ArgumentCaptor;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -34,7 +34,7 @@\n import org.junit.rules.ExpectedException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -32,7 +32,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.fail;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -53,7 +53,7 @@\n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.api.utils.DateUtils.formatDateTime;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -39,7 +39,7 @@\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.server.health.Health.newHealthCheckBuilder;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -38,7 +38,7 @@\n \n import static com.google.common.collect.ImmutableList.of;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.test.JsonAssert.assertJson;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyInt;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyInt;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.core.platform.PluginRepository;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.updatecenter.common.UpdateCenter;\n \n import static org.assertj.guava.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -32,7 +32,7 @@\n import org.sonar.updatecenter.common.UpdateCenter;\n import org.sonar.updatecenter.common.Version;\n \n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.updatecenter.common.PluginUpdate.Status.COMPATIBLE;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -36,7 +36,7 @@\n \n import static com.google.common.collect.ImmutableList.of;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.when;\n import static org.sonar.test.JsonAssert.assertJson;\n import static org.sonar.updatecenter.common.PluginUpdate.Status.COMPATIBLE;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -42,7 +42,7 @@\n import org.sonar.updatecenter.common.Version;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -40,7 +40,7 @@\n import org.sonar.updatecenter.common.Version;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -48,7 +48,7 @@\n import org.sonar.server.ws.WsActionTester;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -45,7 +45,7 @@\n import org.sonar.server.ws.WsTester;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.sonar.api.resources.Qualifiers.PROJECT;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -52,7 +52,7 @@\n import static org.apache.commons.io.IOUtils.toInputStream;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -43,7 +43,7 @@\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.sonar.db.permission.OrganizationPermission.ADMINISTER_QUALITY_PROFILES;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -42,7 +42,7 @@\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -42,7 +42,7 @@\n import static java.util.stream.Collectors.toList;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -75,7 +75,7 @@\n import static java.util.Collections.singletonList;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -47,7 +47,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.AdditionalAnswers.returnsFirstArg;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.sonar.api.rules.RuleType.BUG;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -78,7 +78,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n import static org.assertj.guava.api.Assertions.entry;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n import static org.sonar.api.rule.Severity.BLOCKER;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -54,7 +54,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.AdditionalAnswers.returnsFirstArg;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.sonar.api.server.debt.DebtRemediationFunction.Type.LINEAR;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyBoolean;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyBoolean;",
        "patch": "@@ -38,7 +38,7 @@\n import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -44,7 +44,7 @@\n import org.sonar.server.ws.WsTester;\n \n import static java.lang.String.format;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.db.component.ComponentTesting.newFileDto;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -55,7 +55,7 @@\n import static java.util.Collections.emptySet;\n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.after;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.reset;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -33,7 +33,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.api.web.page.Page.Scope.COMPONENT;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -42,7 +42,7 @@\n import org.sonar.server.ws.WsActionTester;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.server.ui.PageRepository;\n import org.sonar.server.ws.WsActionTester;\n \n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.test.JsonAssert.assertJson;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -56,7 +56,7 @@\n \n import static java.util.Collections.singletonList;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.sonar.core.util.Protobuf.setNullable;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonarqube.ws.UserTokens.GenerateWsResponse;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.db.user.UserTesting.newUserDto;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -36,7 +36,7 @@\n \n import static java.util.Objects.requireNonNull;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -32,7 +32,7 @@\n import org.sonar.server.organization.DefaultOrganizationProvider;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -35,7 +35,7 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyInt;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyInt;",
        "patch": "@@ -39,7 +39,7 @@\n import static org.apache.commons.lang.StringUtils.substringAfterLast;\n import static org.apache.commons.lang.StringUtils.substringBeforeLast;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -35,7 +35,7 @@\n import org.sonar.api.server.ws.WebService;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -31,7 +31,7 @@\n import org.mockito.ArgumentCaptor;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.startsWith;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.startsWith;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.utils.log.Logger;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.startsWith;\n+import static org.mockito.ArgumentMatchers.startsWith;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "add(null);",
        "fixed_code": "add((Object)null);",
        "patch": "@@ -54,7 +54,7 @@ public void add_method_supports_null_and_adds_nothing_to_container() {\n     new Module() {\n       @Override\n       protected void configureModule() {\n-        add(null);\n+        add((Object)null);\n       }\n     }.configure(container);\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "CloseableIterator.wrap(new SimpleCloseableIterator(), null);",
        "fixed_code": "CloseableIterator.wrap(new SimpleCloseableIterator(), (AutoCloseable)null);",
        "patch": "@@ -167,7 +167,7 @@ public void wrap_fails_if_iterator_declared_in_other_closeables() {\n \n   @Test(expected = NullPointerException.class)\n   public void wrap_fails_if_null_closeable() {\n-    CloseableIterator.wrap(new SimpleCloseableIterator(), null);\n+    CloseableIterator.wrap(new SimpleCloseableIterator(), (AutoCloseable)null);\n   }\n \n   private static class CloseableIt implements Iterator<String>, AutoCloseable {"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -28,7 +28,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "private List<Object> symbols = new ArrayList();",
        "fixed_code": "private List<Object> symbols = new ArrayList<>();",
        "patch": "@@ -32,7 +32,7 @@ public final class TextSet extends AbstractText {\n \n   public static final class Builder {\n \n-    private List<Object> symbols = new ArrayList();\n+    private List<Object> symbols = new ArrayList<>();\n     private Integer lengthOfOrigin;\n     private int count;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -29,7 +29,7 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -29,7 +29,7 @@\n import org.junit.rules.TemporaryFolder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verifyZeroInteractions;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.api.utils.Version;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.isA;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.isA;",
        "patch": "@@ -32,7 +32,7 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.isA;\n+import static org.mockito.ArgumentMatchers.isA;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.api.issue.Issue;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.check.Priority;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.api.utils.ValidationMessages;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -28,7 +28,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.api.config.Configuration;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -42,7 +42,7 @@\n import org.sonar.scanner.cpd.index.SonarCpdBlockIndex;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -41,7 +41,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.argThat;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.argThat;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.scanner.repository.ContextPropertiesCache;\n \n import static java.util.Collections.emptyList;\n-import static org.mockito.Matchers.argThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -39,7 +39,7 @@\n import org.sonar.scanner.scan.measure.MeasureCache;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -45,7 +45,7 @@\n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -54,7 +54,7 @@\n import static java.util.Collections.emptyMap;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.entry;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -55,7 +55,7 @@\n import static org.apache.commons.io.FileUtils.readFileToString;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.entry;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -36,7 +36,7 @@\n import org.sonarqube.ws.client.WsRequest;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonarqube.ws.Qualityprofiles.SearchWsResponse.QualityProfile;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.api.batch.bootstrap.ProjectReactor;\n import org.sonar.api.utils.MessageException;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.anyString;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.anyString;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.scanner.bootstrap.GlobalConfiguration;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.anyString;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.eq;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.eq;",
        "patch": "@@ -56,7 +56,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.data.MapEntry.entry;\n-import static org.mockito.Matchers.eq;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;"
    },
    {
        "commit_id": "35749faa8b9f588b3269f3bcf09a776c0889e883",
        "commit_message": "Fix some Java compiler warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/35749faa8b9f588b3269f3bcf09a776c0889e883",
        "buggy_code": "import static org.mockito.Matchers.any;",
        "fixed_code": "import static org.mockito.ArgumentMatchers.any;",
        "patch": "@@ -34,7 +34,7 @@\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.spy;\n "
    },
    {
        "commit_id": "718a90d0e954cb4f1cbb1c1392bc5726a7857e1a",
        "commit_message": "SONAR-10313 fix error when displaying rule facet",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/718a90d0e954cb4f1cbb1c1392bc5726a7857e1a",
        "buggy_code": "if (fields.contains(SearchAdditionalField.RULES)) {",
        "fixed_code": "if (fields.contains(SearchAdditionalField.RULE_IDS_AND_KEYS)) {",
        "patch": "@@ -89,7 +89,7 @@ public SearchWsResponse formatSearch(Set<SearchAdditionalField> fields, SearchRe\n     if (facets != null) {\n       formatFacets(facets, response);\n     }\n-    if (fields.contains(SearchAdditionalField.RULES)) {\n+    if (fields.contains(SearchAdditionalField.RULE_IDS_AND_KEYS)) {\n       response.setRules(formatRules(data));\n     }\n     if (fields.contains(SearchAdditionalField.USERS)) {"
    },
    {
        "commit_id": "4afbe622115f89d933ae77842d75754a3bf4522d",
        "commit_message": "SONAR-10313 Use issue ID for ES ISSUES.ISSUE\n\nPreviously RuleKey was used, in order to allow renaming of the key\nwe must store the ID of the rule.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4afbe622115f89d933ae77842d75754a3bf4522d",
        "buggy_code": "public List<RuleDefinitionDto> selectDefinitionByIds(DbSession session, List<Integer> ids) {",
        "fixed_code": "public List<RuleDefinitionDto> selectDefinitionByIds(DbSession session, Collection<Integer> ids) {",
        "patch": "@@ -87,7 +87,7 @@ public List<RuleDto> selectByIds(DbSession session, String organizationUuid, Lis\n       executeLargeInputs(ids, chunk -> mapper(session).selectByIds(organizationUuid, chunk)));\n   }\n \n-  public List<RuleDefinitionDto> selectDefinitionByIds(DbSession session, List<Integer> ids) {\n+  public List<RuleDefinitionDto> selectDefinitionByIds(DbSession session, Collection<Integer> ids) {\n     return executeLargeInputs(ids, mapper(session)::selectDefinitionByIds);\n   }\n "
    },
    {
        "commit_id": "4afbe622115f89d933ae77842d75754a3bf4522d",
        "commit_message": "SONAR-10313 Use issue ID for ES ISSUES.ISSUE\n\nPreviously RuleKey was used, in order to allow renaming of the key\nwe must store the ID of the rule.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4afbe622115f89d933ae77842d75754a3bf4522d",
        "buggy_code": "indexIssues(IssueDocTesting.newDoc(\"I1\", file).setRuleKey(ruleKey.toString()).setLanguage(\"xoo\").setEffort(10L));",
        "fixed_code": "indexIssues(IssueDocTesting.newDoc(\"I1\", file).setLanguage(\"xoo\").setEffort(10L));",
        "patch": "@@ -183,7 +183,7 @@ public void facets_on_languages() {\n     ComponentDto file = ComponentTesting.newFileDto(project, null);\n     RuleKey ruleKey = RuleKey.of(\"repo\", \"X1\");\n \n-    indexIssues(IssueDocTesting.newDoc(\"I1\", file).setRuleKey(ruleKey.toString()).setLanguage(\"xoo\").setEffort(10L));\n+    indexIssues(IssueDocTesting.newDoc(\"I1\", file).setLanguage(\"xoo\").setEffort(10L));\n \n     Facets facets = search(\"languages\");\n     assertThat(facets.getNames()).containsOnly(\"languages\", FACET_MODE_EFFORT);"
    },
    {
        "commit_id": "d7f67c0e568176cda6dd4f213c24bba2e066f7ed",
        "commit_message": "SONAR-10257 Fix ITs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d7f67c0e568176cda6dd4f213c24bba2e066f7ed",
        "buggy_code": "tuple(\"*-1000.0\", 1L),",
        "fixed_code": "tuple(\"*-1000.0\", 2L),",
        "patch": "@@ -263,7 +263,7 @@ public void should_return_facets_on_leak() throws Exception {\n       tuple(\"10.0-20.0\", 0L),\n       tuple(\"20.0-*\", 0L));\n     checkFacet(response, \"new_lines\",\n-      tuple(\"*-1000.0\", 1L),\n+      tuple(\"*-1000.0\", 2L),\n       tuple(\"1000.0-10000.0\", 0L),\n       tuple(\"10000.0-100000.0\", 0L),\n       tuple(\"100000.0-500000.0\", 0L),"
    },
    {
        "commit_id": "bb70f75c1c0d8dd2221009b7fcc779ed70f196c6",
        "commit_message": "fix flacky test in RegisterQualityProfilesNotificationTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bb70f75c1c0d8dd2221009b7fcc779ed70f196c6",
        "buggy_code": "db.qualityProfiles().activateRule(builtInProfile, rule);",
        "fixed_code": "db.qualityProfiles().activateRule(builtInProfile, rule, ar -> ar.setSeverity(Severity.MINOR));",
        "patch": "@@ -229,7 +229,7 @@ public void notification_does_not_include_inherited_profiled_when_rule_is_change\n     OrganizationDto organization = db.organizations().insert();\n \n     QProfileDto builtInProfile = insertProfile(organization, orgQProfile -> orgQProfile.setIsBuiltIn(true).setLanguage(language));\n-    db.qualityProfiles().activateRule(builtInProfile, rule);\n+    db.qualityProfiles().activateRule(builtInProfile, rule, ar -> ar.setSeverity(Severity.MINOR));\n     QProfileDto childProfile = insertProfile(organization, orgQProfile -> orgQProfile.setIsBuiltIn(false).setLanguage(language).setParentKee(builtInProfile.getKee()));\n     db.qualityProfiles().activateRule(childProfile, rule, ar -> ar.setInheritance(ActiveRuleDto.INHERITED).setSeverity(Severity.MINOR));\n     addPluginProfile(builtInProfile, rule);"
    },
    {
        "commit_id": "a42e0a794703ef9b8c9c0ab7d849df3b720fdc43",
        "commit_message": "SONAR-10052 fix N+1 syndrome when loading profile descendants",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a42e0a794703ef9b8c9c0ab7d849df3b720fdc43",
        "buggy_code": "List<QProfileDto> selectChildren(String uuid);",
        "fixed_code": "List<QProfileDto> selectChildren(@Param(\"uuids\") Collection<String> uuids);",
        "patch": "@@ -76,7 +76,7 @@ List<QProfileDto> selectByLanguage(\n \n   // INHERITANCE\n \n-  List<QProfileDto> selectChildren(String uuid);\n+  List<QProfileDto> selectChildren(@Param(\"uuids\") Collection<String> uuids);\n \n   // PROJECTS\n "
    },
    {
        "commit_id": "bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "commit_message": "Fix bad imports of Java6Assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.tuple;",
        "fixed_code": "import static org.assertj.core.api.Assertions.tuple;",
        "patch": "@@ -45,7 +45,7 @@\n import org.sonarqube.ws.MediaTypes;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Java6Assertions.tuple;\n+import static org.assertj.core.api.Assertions.tuple;\n import static org.sonar.db.ce.CeActivityDto.Status.SUCCESS;\n import static org.sonar.db.ce.CeQueueDto.Status.IN_PROGRESS;\n import static org.sonar.db.ce.CeQueueDto.Status.PENDING;"
    },
    {
        "commit_id": "bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "commit_message": "Fix bad imports of Java6Assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.api.config.internal.MapSettings;\n \n import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;\n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class ChildSettingsTest {\n   private static final Random RANDOM = new Random();"
    },
    {
        "commit_id": "bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "commit_message": "Fix bad imports of Java6Assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bc735cf09cb0017ab5a8acce87d36240cc0acb28",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonarqube.ws.client.projectbranches.ListRequest;\n import util.ItUtils;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static util.ItUtils.runProjectAnalysis;\n \n public class BranchTest {"
    },
    {
        "commit_id": "ff49002afd726123d6ed894c5a151cef2c250ffb",
        "commit_message": "Remove unused and conflicting dependency on securemock in unit tests\n\nsecuremock is a fork of an old version of mockito. By removing it\nsome tests must be fixed to correctly support the latest version of\nmockito:\n- signature of ArgumentMatcher implementations (Object -> T). That's the\nreason why they have been fixed and replaced by lambda\n- any(Class) supports null values in securemock but not in mockito.\nReplacing calls by any() fixes the issue.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ff49002afd726123d6ed894c5a151cef2c250ffb",
        "buggy_code": "when(branch.generateKey(any(ScannerReport.Component.class), any(ScannerReport.Component.class))).thenReturn(\"generated\");",
        "fixed_code": "when(branch.generateKey(any(), any())).thenReturn(\"generated\");",
        "patch": "@@ -207,7 +207,7 @@ public void generate_keys_when_using_branch() {\n     when(branch.getName()).thenReturn(\"origin/feature\");\n     when(branch.isMain()).thenReturn(false);\n     when(branch.isLegacyFeature()).thenReturn(false);\n-    when(branch.generateKey(any(ScannerReport.Component.class), any(ScannerReport.Component.class))).thenReturn(\"generated\");\n+    when(branch.generateKey(any(), any())).thenReturn(\"generated\");\n     analysisMetadataHolder.setRootComponentRef(ROOT_REF)\n       .setAnalysisDate(ANALYSIS_DATE)\n       .setProject(new Project(\"U1\", REPORT_PROJECT_KEY, REPORT_PROJECT_KEY))"
    },
    {
        "commit_id": "5e5fc1731d0e99ab4a457fb9eeee121f342d1f33",
        "commit_message": "SONAR-10122 fix misleading error message for multivalue properties\n\nwhen parsing fails in ProjectReactor\nit concerns only sonar.sources, sonar.tests and sonar.modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e5fc1731d0e99ab4a457fb9eeee121f342d1f33",
        "buggy_code": "return DefaultConfiguration.parseAsCsv(ProjectDefinition.SOURCES_PROPERTY, propValue);",
        "fixed_code": "return DefaultConfiguration.parseAsCsv(key, propValue);",
        "patch": "@@ -408,7 +408,7 @@ protected static File resolvePath(File baseDir, String path) {\n   static String[] getListFromProperty(Map<String, String> properties, String key) {\n     String propValue = properties.get(key);\n     if (propValue != null) {\n-      return DefaultConfiguration.parseAsCsv(ProjectDefinition.SOURCES_PROPERTY, propValue);\n+      return DefaultConfiguration.parseAsCsv(key, propValue);\n     }\n     return new String[0];\n   }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "public List<MetricDto> selectByKeys(final DbSession session, List<String> keys) {",
        "fixed_code": "public List<MetricDto> selectByKeys(final DbSession session, Collection<String> keys) {",
        "patch": "@@ -47,7 +47,7 @@ public MetricDto selectByKey(DbSession session, String key) {\n     return mapper(session).selectByKey(key);\n   }\n \n-  public List<MetricDto> selectByKeys(final DbSession session, List<String> keys) {\n+  public List<MetricDto> selectByKeys(final DbSession session, Collection<String> keys) {\n     return executeLargeInputs(keys, mapper(session)::selectByKeys);\n   }\n "
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": ".selectByComponentUuids(dbSession, Collections.singletonList(component.uuid()), metricsById.keySet());",
        "fixed_code": ".selectByComponentUuidsAndMetricIds(dbSession, Collections.singletonList(component.uuid()), metricsById.keySet());",
        "patch": "@@ -190,7 +190,7 @@ private Map<String, LiveMeasureDto> loadMeasuresGroupedByMetricKey(ComponentDto\n     List<MetricDto> metrics = dbClient.metricDao().selectByKeys(dbSession, METRIC_KEYS);\n     Map<Integer, MetricDto> metricsById = Maps.uniqueIndex(metrics, MetricDto::getId);\n     List<LiveMeasureDto> measures = dbClient.liveMeasureDao()\n-      .selectByComponentUuids(dbSession, Collections.singletonList(component.uuid()), metricsById.keySet());\n+      .selectByComponentUuidsAndMetricIds(dbSession, Collections.singletonList(component.uuid()), metricsById.keySet());\n     return Maps.uniqueIndex(measures, m -> metricsById.get(m.getMetricId()).getKey());\n   }\n "
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "com.google.common.base.Optional<org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGate> qualityGateOptional = this.qualityGateHolder.getQualityGate();",
        "fixed_code": "Optional<org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGate> qualityGateOptional = this.qualityGateHolder.getQualityGate();",
        "patch": "@@ -163,7 +163,7 @@ private Long getAnalysisDate() {\n \n   @CheckForNull\n   private QualityGateImpl createQualityGate() {\n-    com.google.common.base.Optional<org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGate> qualityGateOptional = this.qualityGateHolder.getQualityGate();\n+    Optional<org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGate> qualityGateOptional = this.qualityGateHolder.getQualityGate();\n     if (qualityGateOptional.isPresent()) {\n       org.sonar.server.computation.task.projectanalysis.qualitygate.QualityGate qualityGate = qualityGateOptional.get();\n "
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.RatingGrid.Rating;",
        "fixed_code": "import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.computation.task.projectanalysis.formula.counter;\n \n import javax.annotation.Nullable;\n-import org.sonar.server.computation.task.projectanalysis.qualitymodel.RatingGrid.Rating;\n+import org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating;\n \n /**\n  * Convenience class wrapping a rating to compute the value and know it is has ever been set."
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context, wsRequest.getText());",
        "fixed_code": "SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context, wsRequest.getText(), false);",
        "patch": "@@ -98,7 +98,7 @@ public void handle(Request request, Response response) {\n       IssueChangeContext context = IssueChangeContext.createUser(new Date(system2.now()), userSession.getLogin());\n       DefaultIssue defaultIssue = issueDto.toDefaultIssue();\n       issueFieldsSetter.addComment(defaultIssue, wsRequest.getText(), context);\n-      SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context, wsRequest.getText());\n+      SearchResponseData preloadedSearchResponseData = issueUpdater.saveIssueAndPreloadSearchResponseData(dbSession, defaultIssue, context, wsRequest.getText(), false);\n       responseWriter.write(defaultIssue.key(), preloadedSearchResponseData, request, response);\n     }\n   }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null);",
        "fixed_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null, true);",
        "patch": "@@ -107,7 +107,7 @@ private SearchResponseData setType(DbSession session, String issueKey, String se\n \n     IssueChangeContext context = IssueChangeContext.createUser(new Date(), userSession.getLogin());\n     if (issueFieldsSetter.setManualSeverity(issue, severity, context)) {\n-      return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null);\n+      return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null, true);\n     }\n     return new SearchResponseData(issueDto);\n   }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null);",
        "fixed_code": "return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null, false);",
        "patch": "@@ -105,7 +105,7 @@ private SearchResponseData setTags(String issueKey, List<String> tags) {\n       DefaultIssue issue = issueDto.toDefaultIssue();\n       IssueChangeContext context = IssueChangeContext.createUser(new Date(), userSession.getLogin());\n       if (issueFieldsSetter.setTags(issue, tags, context)) {\n-        return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null);\n+        return issueUpdater.saveIssueAndPreloadSearchResponseData(session, issue, context, null, false);\n       }\n       return new SearchResponseData(issueDto);\n     }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "List<LiveMeasureDto> measures = dbClient.liveMeasureDao().selectByComponentUuids(dbSession, singletonList(component.uuid()), metricIds);",
        "fixed_code": "List<LiveMeasureDto> measures = dbClient.liveMeasureDao().selectByComponentUuidsAndMetricIds(dbSession, singletonList(component.uuid()), metricIds);",
        "patch": "@@ -216,7 +216,7 @@ private List<MetricDto> searchMetrics(DbSession dbSession, ComponentRequest requ\n \n   private List<LiveMeasureDto> searchMeasures(DbSession dbSession, ComponentDto component, List<MetricDto> metrics) {\n     List<Integer> metricIds = Lists.transform(metrics, MetricDto::getId);\n-    List<LiveMeasureDto> measures = dbClient.liveMeasureDao().selectByComponentUuids(dbSession, singletonList(component.uuid()), metricIds);\n+    List<LiveMeasureDto> measures = dbClient.liveMeasureDao().selectByComponentUuidsAndMetricIds(dbSession, singletonList(component.uuid()), metricIds);\n     addBestValuesToMeasures(measures, component, metrics);\n     return measures;\n   }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "return dbClient.liveMeasureDao().selectByComponentUuids(dbSession,",
        "fixed_code": "return dbClient.liveMeasureDao().selectByComponentUuidsAndMetricIds(dbSession,",
        "patch": "@@ -162,7 +162,7 @@ private List<String> difference(Collection<String> expected, Collection<String>\n     }\n \n     private List<LiveMeasureDto> searchMeasures() {\n-      return dbClient.liveMeasureDao().selectByComponentUuids(dbSession,\n+      return dbClient.liveMeasureDao().selectByComponentUuidsAndMetricIds(dbSession,\n         projects.stream().map(ComponentDto::uuid).collect(MoreCollectors.toArrayList(projects.size())),\n         metrics.stream().map(MetricDto::getId).collect(MoreCollectors.toArrayList(metrics.size())));\n     }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "QualityGateData data = qualityGateFinder.getQualityGate(dbSession, organization, project.getId());",
        "fixed_code": "QualityGateData data = qualityGateFinder.getQualityGate(dbSession, organization, project);",
        "patch": "@@ -99,7 +99,7 @@ public void handle(Request request, Response response) throws Exception {\n         throw insufficientPrivilegesException();\n       }\n \n-      QualityGateData data = qualityGateFinder.getQualityGate(dbSession, organization, project.getId());\n+      QualityGateData data = qualityGateFinder.getQualityGate(dbSession, organization, project);\n \n       writeProtobuf(buildResponse(data), request, response);\n     }"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "QualityGateFinder.QualityGateData qualityGateData = qualityGateFinder.getQualityGate(session, organization, component.getId());",
        "fixed_code": "QualityGateFinder.QualityGateData qualityGateData = qualityGateFinder.getQualityGate(session, organization, component);",
        "patch": "@@ -207,7 +207,7 @@ private void writeProfiles(JsonWriter json, DbSession dbSession, ComponentDto co\n   }\n \n   private void writeQualityGate(JsonWriter json, DbSession session, OrganizationDto organization, ComponentDto component) {\n-    QualityGateFinder.QualityGateData qualityGateData = qualityGateFinder.getQualityGate(session, organization, component.getId());\n+    QualityGateFinder.QualityGateData qualityGateData = qualityGateFinder.getQualityGate(session, organization, component);\n     QualityGateDto qualityGateDto = qualityGateData.getQualityGate();\n     json.name(\"qualityGate\").beginObject()\n       .prop(\"key\", qualityGateDto.getId())"
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 33);",
        "fixed_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 31);",
        "patch": "@@ -30,7 +30,7 @@ public class IssueWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new IssueWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 33);\n+    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 31);\n   }\n }\n "
    },
    {
        "commit_id": "baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "commit_message": "SONAR-10117 SONAR-1018 Update measures after relevant issue changes and send webhooks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/baccb26f1aecd27b7d7fc06a185e7fdeaf03ea83",
        "buggy_code": "assertThat(container.size()).isEqualTo(20 + 2);",
        "fixed_code": "assertThat(container.size()).isEqualTo(21 + 2);",
        "patch": "@@ -29,6 +29,6 @@ public class QualityGateModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new QualityGateModule().configure(container);\n-    assertThat(container.size()).isEqualTo(20 + 2);\n+    assertThat(container.size()).isEqualTo(21 + 2);\n   }\n }"
    },
    {
        "commit_id": "dc3d831194f360a17b235958b0a38c09b24b3072",
        "commit_message": "Automatic merge from branch-6.7\n\n* origin/branch-6.7:\n  Fix ProjectBuilderTest IT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dc3d831194f360a17b235958b0a38c09b24b3072",
        "buggy_code": "assertThat(measures.get(\"files\")).isEqualTo(2);",
        "fixed_code": "assertThat(measures.get(\"files\")).isEqualTo(3);",
        "patch": "@@ -65,7 +65,7 @@ private void checkProject() {\n     assertThat(getComponent(orchestrator, \"com.sonarsource.it.projects.batch:project-builder\").getName()).isEqualTo(\"Name changed by plugin\");\n \n     Map<String, Double> measures = getMeasures(\"com.sonarsource.it.projects.batch:project-builder\");\n-    assertThat(measures.get(\"files\")).isEqualTo(2);\n+    assertThat(measures.get(\"files\")).isEqualTo(3);\n     assertThat(measures.get(\"lines\")).isGreaterThan(10);\n   }\n "
    },
    {
        "commit_id": "48e68a05f6868756c243b8aa948d9312d3aecca3",
        "commit_message": "Fix ProjectBuilderTest IT\n\nSonarJava 5.0 introduces a behavior change on the list of files\nto be analyzed. Our integration test is impacted because\nit installs automatically the latest version of this plugin.\nSee https://jira.sonarsource.com/browse/SONARJAVA-2509",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/48e68a05f6868756c243b8aa948d9312d3aecca3",
        "buggy_code": "assertThat(measures.get(\"files\")).isEqualTo(2);",
        "fixed_code": "assertThat(measures.get(\"files\")).isEqualTo(3);",
        "patch": "@@ -65,7 +65,7 @@ private void checkProject() {\n     assertThat(getComponent(orchestrator, \"com.sonarsource.it.projects.batch:project-builder\").getName()).isEqualTo(\"Name changed by plugin\");\n \n     Map<String, Double> measures = getMeasures(\"com.sonarsource.it.projects.batch:project-builder\");\n-    assertThat(measures.get(\"files\")).isEqualTo(2);\n+    assertThat(measures.get(\"files\")).isEqualTo(3);\n     assertThat(measures.get(\"lines\")).isGreaterThan(10);\n   }\n "
    },
    {
        "commit_id": "3acbe2a620ec2a188987047e456e925e7fd9f559",
        "commit_message": "SONAR-10218 Fix permissions document of api/custom_measures/create",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3acbe2a620ec2a188987047e456e925e7fd9f559",
        "buggy_code": "\"Requires 'Administer System' permission or 'Administer' permission on the project.\")",
        "fixed_code": "\"Requires 'Administer' permission on the project.\")",
        "patch": "@@ -72,7 +72,7 @@ public void define(WebService.NewController context) {\n     WebService.NewAction action = context.createAction(ACTION)\n       .setDescription(\"Create a custom measure.<br /> \" +\n         \"The project id or the project key must be provided (only project and module custom measures can be created). The metric id or the metric key must be provided.<br/>\" +\n-        \"Requires 'Administer System' permission or 'Administer' permission on the project.\")\n+        \"Requires 'Administer' permission on the project.\")\n       .setSince(\"5.2\")\n       .setPost(true)\n       .setHandler(this);"
    },
    {
        "commit_id": "6a03f934fdd4d1f6700ff825d44e58a0d77c620d",
        "commit_message": "SONAR-10154 No streaming of web services response by default\n\n- most of the WS rely on protobuf with one encapsulating object. In effect, streaming is useless in this case\n- for WS relying on JsonWriter directly, if an exception was thrown when it has started writing, the WebServiceEngine error handling cannot work properly (clear response and format an error message with an appropriate HTTP response code)\n- a new factory method is added to JsonWriter to have a non streamable JsonWriter. The response is effectively written when the JsonWriter is closed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a03f934fdd4d1f6700ff825d44e58a0d77c620d",
        "buggy_code": "try (JsonWriter writer = JsonWriter.of(new OutputStreamWriter(output, UTF_8))) {",
        "fixed_code": "try (JsonWriter writer = JsonWriter.of(new CacheWriter(new OutputStreamWriter(output, UTF_8)))) {",
        "patch": "@@ -52,7 +52,7 @@ public static void writeProtobuf(Message msg, Request request, Response response\n         msg.writeTo(output);\n       } else {\n         response.stream().setMediaType(JSON);\n-        try (JsonWriter writer = JsonWriter.of(new OutputStreamWriter(output, UTF_8))) {\n+        try (JsonWriter writer = JsonWriter.of(new CacheWriter(new OutputStreamWriter(output, UTF_8)))) {\n           ProtobufJsonFormat.write(msg, writer);\n         }\n       }"
    },
    {
        "commit_id": "05b31a29f72998d141956bbf58c72932daf28f47",
        "commit_message": "Automatic merge from branch-6.7\n\n* origin/branch-6.7:\n  SONAR-10217 Fix 500 error when branch is incorrect\n  Deactivate instable test in NewIssuesMeasureTest\n  Upgrade to version 6.7.2-SNAPSHOT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05b31a29f72998d141956bbf58c72932daf28f47",
        "buggy_code": "builder.mainBranch(branch == null || !branch.equals(component.getBranch()));",
        "fixed_code": "builder.mainBranch(branch == null || component.equals(UNKNOWN_COMPONENT) || !branch.equals(component.getBranch()));",
        "patch": "@@ -393,6 +393,6 @@ private static String toProjectUuid(ComponentDto componentDto) {\n \n   private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch) {\n     builder.branchUuid(branch == null ? null : component.projectUuid());\n-    builder.mainBranch(branch == null || !branch.equals(component.getBranch()));\n+    builder.mainBranch(branch == null || component.equals(UNKNOWN_COMPONENT) || !branch.equals(component.getBranch()));\n   }\n }"
    },
    {
        "commit_id": "652bcc1cd8f6cb2d6281694a74300ef3b24fbc11",
        "commit_message": "SONAR-10217 Fix 500 error when branch is incorrect",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/652bcc1cd8f6cb2d6281694a74300ef3b24fbc11",
        "buggy_code": "builder.mainBranch(branch == null || !branch.equals(component.getBranch()));",
        "fixed_code": "builder.mainBranch(branch == null || component.equals(UNKNOWN_COMPONENT) || !branch.equals(component.getBranch()));",
        "patch": "@@ -394,6 +394,6 @@ private static String toProjectUuid(ComponentDto componentDto) {\n \n   private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch) {\n     builder.branchUuid(branch == null ? null : component.projectUuid());\n-    builder.mainBranch(branch == null || !branch.equals(component.getBranch()));\n+    builder.mainBranch(branch == null || component.equals(UNKNOWN_COMPONENT) || !branch.equals(component.getBranch()));\n   }\n }"
    },
    {
        "commit_id": "54bd71a3ec3ed02c62ae65e3196e76d3a859bda1",
        "commit_message": "Automatic merge from branch-6.7\n\n* origin/branch-6.7:\n  SONAR-10216 Tests with long names can't be indexed\n  SONAR-10216 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/54bd71a3ec3ed02c62ae65e3196e76d3a859bda1",
        "buggy_code": "mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().build();",
        "fixed_code": "mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().disableSortingAndAggregating().build();",
        "patch": "@@ -66,7 +66,7 @@ public void define(IndexDefinitionContext context) {\n     mapping.keywordFieldBuilder(FIELD_PROJECT_UUID).disableNorms().build();\n     mapping.keywordFieldBuilder(FIELD_FILE_UUID).disableNorms().build();\n     mapping.keywordFieldBuilder(FIELD_TEST_UUID).disableNorms().build();\n-    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().build();\n+    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().disableSortingAndAggregating().build();\n     mapping.keywordFieldBuilder(FIELD_STATUS).disableNorms().disableSearch().build();\n     mapping.createLongField(FIELD_DURATION_IN_MS);\n     mapping.keywordFieldBuilder(FIELD_MESSAGE).disableNorms().disableSearch().disableSortingAndAggregating().build();"
    },
    {
        "commit_id": "ee34917caa43092fa45b51481035febb926f6738",
        "commit_message": "SONAR-10116 Fix insert of LOB in batch statements of migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee34917caa43092fa45b51481035febb926f6738",
        "buggy_code": "update.setString(6, row.getString(5));",
        "fixed_code": "update.setString(6, row.getNullableString(5));",
        "patch": "@@ -60,7 +60,7 @@ protected void execute(Context context) throws SQLException {\n       update.setString(3, row.getString(2));\n       update.setInt(4, row.getInt(3));\n       update.setDouble(5, row.getNullableDouble(4));\n-      update.setString(6, row.getString(5));\n+      update.setString(6, row.getNullableString(5));\n       update.setDouble(7, row.getNullableDouble(6));\n       update.setBytes(8, row.getNullableBytes(7));\n       update.setLong(9, now);"
    },
    {
        "commit_id": "6c78e87993ddadfcf90ca5b752264a1baf626264",
        "commit_message": "fix logback configuration in UTs to drastically reduce build verbosity",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6c78e87993ddadfcf90ca5b752264a1baf626264",
        "buggy_code": "LOG.info(\"Test Database: \" + db);",
        "fixed_code": "LOG.debug(\"Test Database: \" + db);",
        "patch": "@@ -94,7 +94,7 @@ static CoreTestDb create(@Nullable String schemaPath) {\n         }\n       }\n       isDefault = (schemaPath == null);\n-      LOG.info(\"Test Database: \" + db);\n+      LOG.debug(\"Test Database: \" + db);\n \n       commands = DatabaseCommands.forDialect(db.getDialect());\n       tester = new DataSourceDatabaseTester(db.getDataSource(), commands.useLoginAsSchema() ? login : null);"
    },
    {
        "commit_id": "013c10ada9d0e4328872914bb21749439cd7ae7f",
        "commit_message": "SONAR-10085 add Quality Gate Change event API\n\nand use it for webhook on issue changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/013c10ada9d0e4328872914bb21749439cd7ae7f",
        "buggy_code": "package org.sonar.server.issue.webhook;",
        "fixed_code": "package org.sonar.server.qualitygate.changeevent;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.server.issue.webhook;\n+package org.sonar.server.qualitygate.changeevent;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "013c10ada9d0e4328872914bb21749439cd7ae7f",
        "commit_message": "SONAR-10085 add Quality Gate Change event API\n\nand use it for webhook on issue changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/013c10ada9d0e4328872914bb21749439cd7ae7f",
        "buggy_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 30);",
        "fixed_code": "assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 32);",
        "patch": "@@ -30,7 +30,7 @@ public class IssueWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new IssueWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 30);\n+    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 32);\n   }\n }\n "
    },
    {
        "commit_id": "30b3fee0d53040738b6106b905642310737e6618",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30b3fee0d53040738b6106b905642310737e6618",
        "buggy_code": "return new RuleDetails(Selenide.$(\".coding-rules-details\"));",
        "fixed_code": "return new RuleDetails();",
        "patch": "@@ -60,7 +60,7 @@ public RulesPage selectFacetItemByText(String facet, String itemText) {\n   public RuleDetails openFirstRule() {\n     Selenide.$$(\".js-rule\").first().click();\n     Selenide.$(\".coding-rules-details\").shouldBe(Condition.visible);\n-    return new RuleDetails(Selenide.$(\".coding-rules-details\"));\n+    return new RuleDetails();\n   }\n \n }"
    },
    {
        "commit_id": "b0deb0d52985ce94e4afe28f4378f14e4dae4713",
        "commit_message": "SONAR-9946 Fix local copy of edition plugins for tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b0deb0d52985ce94e4afe28f4378f14e4dae4713",
        "buggy_code": "Files.copy(file.toPath(), tmpDir);",
        "fixed_code": "Files.copy(file.toPath(), tmpDir.resolve(file.getName()));",
        "patch": "@@ -95,7 +95,7 @@ private void downloadRelease(Release release) throws URISyntaxException, IOExcep\n     if (url.startsWith(\"file:\")) {\n       // used for tests\n       File file = toFile(uri.toURL());\n-      Files.copy(file.toPath(), tmpDir);\n+      Files.copy(file.toPath(), tmpDir.resolve(file.getName()));\n     } else {\n       String filename = substringAfterLast(uri.getPath(), \"/\");\n       if (!filename.endsWith(\".\" + PLUGIN_EXTENSION)) {"
    },
    {
        "commit_id": "af7359271037ddcf327e0d9f76b0f6171a8e5840",
        "commit_message": "Fix quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/af7359271037ddcf327e0d9f76b0f6171a8e5840",
        "buggy_code": "WebService.NewAction action = controller.createAction(\"clear_error_message\")",
        "fixed_code": "controller.createAction(\"clear_error_message\")",
        "patch": "@@ -36,7 +36,7 @@ public ClearErrorMessageAction(UserSession userSession, MutableEditionManagement\n \n   @Override\n   public void define(WebService.NewController controller) {\n-    WebService.NewAction action = controller.createAction(\"clear_error_message\")\n+    controller.createAction(\"clear_error_message\")\n       .setSince(\"6.7\")\n       .setPost(true)\n       .setDescription(\"Clear error message of last install of an edition (if any). Require 'Administer System' permission.\")"
    },
    {
        "commit_id": "af7359271037ddcf327e0d9f76b0f6171a8e5840",
        "commit_message": "Fix quality issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/af7359271037ddcf327e0d9f76b0f6171a8e5840",
        "buggy_code": "throw new RuntimeException(e.getMessage(), e);",
        "fixed_code": "throw new IllegalStateException(e.getMessage(), e);",
        "patch": "@@ -70,7 +70,7 @@ public void downloadEditionPlugins(Set<String> pluginKeys, UpdateCenter updateCe\n       FileUtils.deleteDirectory(downloadDir);\n       Files.move(tmpDir, downloadDir);\n     } catch (IOException e) {\n-      throw new RuntimeException(e.getMessage(), e);\n+      throw new IllegalStateException(e.getMessage(), e);\n     } finally {\n       FileUtils.deleteQuietly(tmpDir);\n     }"
    },
    {
        "commit_id": "dd4f70dcfab97cb1c14d49aa28a0c63b166c1131",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4f70dcfab97cb1c14d49aa28a0c63b166c1131",
        "buggy_code": "if (date != null && analysisUuid != null) {",
        "fixed_code": "if (analysisUuid != null) {",
        "patch": "@@ -193,7 +193,7 @@ public PostProjectAnalysisTask.ProjectAnalysis execute() {\n     requireNonNull(date, DATE_CAN_NOT_BE_NULL);\n \n     Analysis analysis = null;\n-    if (date != null && analysisUuid != null) {\n+    if (analysisUuid != null) {\n       analysis = new AnalysisBuilder()\n         .setDate(date)\n         .setAnalysisUuid(analysisUuid)"
    },
    {
        "commit_id": "43e50a260031cd9a0eb7638b6136e6208a8783ca",
        "commit_message": "SONAR-9970 Copy issue changes when creating an long living branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43e50a260031cd9a0eb7638b6136e6208a8783ca",
        "buggy_code": "return mergeIssuesLoader.loadForComponentUuid(mergeBranchComponentUuid);",
        "fixed_code": "return mergeIssuesLoader.loadForComponentUuidWithChanges(mergeBranchComponentUuid);",
        "patch": "@@ -79,7 +79,7 @@ protected List<DefaultIssue> loadIssues() {\n       if (mergeBranchComponentUuid == null) {\n         return Collections.emptyList();\n       }\n-      return mergeIssuesLoader.loadForComponentUuid(mergeBranchComponentUuid);\n+      return mergeIssuesLoader.loadForComponentUuidWithChanges(mergeBranchComponentUuid);\n     }\n   }\n "
    },
    {
        "commit_id": "43e50a260031cd9a0eb7638b6136e6208a8783ca",
        "commit_message": "SONAR-9970 Copy issue changes when creating an long living branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43e50a260031cd9a0eb7638b6136e6208a8783ca",
        "buggy_code": "underTest.mergeIssueFromShortLivingBranch(raw, fromShort);",
        "fixed_code": "underTest.copyIssueAttributes(raw, fromShort);",
        "patch": "@@ -81,7 +81,7 @@ public void mergeIssueFromShortLivingBranch() {\n     DefaultIssue fromShort = new DefaultIssue();\n     fromShort.setResolution(\"resolution\");\n     fromShort.setStatus(\"status\");\n-    underTest.mergeIssueFromShortLivingBranch(raw, fromShort);\n+    underTest.copyIssueAttributes(raw, fromShort);\n     assertThat(raw.resolution()).isEqualTo(\"resolution\");\n     assertThat(raw.status()).isEqualTo(\"status\");\n   }"
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "Loggers.get(ChangeLogLevelHttpAction.class).debug(\"Value '{}' for parameter '{}' is invalid\", levelStr, PARAM_LEVEL, e);",
        "fixed_code": "Loggers.get(ChangeLogLevelHttpAction.class).debug(\"Value '{}' for parameter '\" + PARAM_LEVEL + \"' is invalid: {}\", levelStr, e);",
        "patch": "@@ -63,7 +63,7 @@ public NanoHTTPD.Response serve(NanoHTTPD.IHTTPSession session) {\n       logging.changeLevel(level);\n       return newFixedLengthResponse(OK, MIME_PLAINTEXT, null);\n     } catch (IllegalArgumentException e) {\n-      Loggers.get(ChangeLogLevelHttpAction.class).debug(\"Value '{}' for parameter '{}' is invalid\", levelStr, PARAM_LEVEL, e);\n+      Loggers.get(ChangeLogLevelHttpAction.class).debug(\"Value '{}' for parameter '\" + PARAM_LEVEL + \"' is invalid: {}\", levelStr, e);\n       return newFixedLengthResponse(BAD_REQUEST, MIME_PLAINTEXT, format(\"Value '%s' for parameter '%s' is invalid\", levelStr, PARAM_LEVEL));\n     }\n   }"
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "LOG.debug(\"Graceful stop period has been interrupted\", e);",
        "fixed_code": "LOG.debug(\"Graceful stop period has been interrupted: {}\", e);",
        "patch": "@@ -87,7 +87,7 @@ public void stopScheduling() {\n       try {\n         Thread.sleep(200L);\n       } catch (InterruptedException e) {\n-        LOG.debug(\"Graceful stop period has been interrupted\", e);\n+        LOG.debug(\"Graceful stop period has been interrupted: {}\", e);\n         Thread.currentThread().interrupt();\n         break;\n       }"
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "LOG.debug(\"Failed to check the autocommit status of SqlSession\", e);",
        "fixed_code": "LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e);",
        "patch": "@@ -69,7 +69,7 @@ private static void ensureAutoCommitFalse(DbSession dbSession) {\n         checkState(!((boolean) f.get(sqlSession)), \"Autocommit must be false\");\n       }\n     } catch (NoSuchFieldException | IllegalAccessException e) {\n-      LOG.debug(\"Failed to check the autocommit status of SqlSession\", e);\n+      LOG.debug(\"Failed to check the autocommit status of SqlSession: {}\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "LOGGER.trace(\"DB connection is down\", e);",
        "fixed_code": "LOGGER.trace(\"DB connection is down: {}\", e);",
        "patch": "@@ -52,7 +52,7 @@ private boolean isConnectedToDB() {\n     try (DbSession dbSession = dbClient.openSession(false)) {\n       return dbSession.getMapper(IsAliveMapper.class).isAlive() == IsAliveMapper.IS_ALIVE_RETURNED_VALUE;\n     } catch (RuntimeException e) {\n-      LOGGER.trace(\"DB connection is down\", e);\n+      LOGGER.trace(\"DB connection is down: {}\", e);\n       return false;\n     }\n   }"
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "LOG.debug(\"Fail to send test email to: \" + toAddress, e);",
        "fixed_code": "LOG.debug(\"Fail to send test email to {}: {}\", toAddress, e);",
        "patch": "@@ -217,7 +217,7 @@ public void sendTestEmail(String toAddress, String subject, String message) thro\n       emailMessage.setMessage(message);\n       send(emailMessage);\n     } catch (EmailException e) {\n-      LOG.debug(\"Fail to send test email to: \" + toAddress, e);\n+      LOG.debug(\"Fail to send test email to {}: {}\", toAddress, e);\n       throw e;\n     }\n   }"
    },
    {
        "commit_id": "4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "commit_message": "Fix some logger calls",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4188e3483809fd0d5d836f74cf8ee8a46089836e",
        "buggy_code": "LOG.debug(message, e);",
        "fixed_code": "LOG.debug(message);",
        "patch": "@@ -132,7 +132,7 @@ public void download(String pluginKey, Version version) {\n         } catch (Exception e) {\n           String message = String.format(\"Fail to download the plugin (%s, version %s) from %s (error is : %s)\",\n             release.getArtifact().getKey(), release.getVersion().getName(), release.getDownloadUrl(), e.getMessage());\n-          LOG.debug(message, e);\n+          LOG.debug(message);\n           throw new SonarException(message, e);\n         }\n       }"
    },
    {
        "commit_id": "f0f885748a2c1442690970de335c64fdd30791b4",
        "commit_message": "SONAR-9869 Fix changedAt value when a webhook is triggered from Web",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0f885748a2c1442690970de335c64fdd30791b4",
        "buggy_code": "writer.propDateTime(\"changedAt\", analysis.getAnalysis().map(Analysis::getDate).orElseGet(() -> new Date(system2.now())));",
        "fixed_code": "writer.propDateTime(\"changedAt\", new Date(analysis.getUpdatedAt().orElse(system2.now())));",
        "patch": "@@ -69,7 +69,7 @@ private void writeServer(JsonWriter writer) {\n \n   private static void writeDates(JsonWriter writer, ProjectAnalysis analysis, System2 system2) {\n     analysis.getAnalysis().ifPresent(a -> writer.propDateTime(\"analysedAt\", a.getDate()));\n-    writer.propDateTime(\"changedAt\", analysis.getAnalysis().map(Analysis::getDate).orElseGet(() -> new Date(system2.now())));\n+    writer.propDateTime(\"changedAt\", new Date(analysis.getUpdatedAt().orElse(system2.now())));\n   }\n \n   private void writeProject(ProjectAnalysis analysis, JsonWriter writer, Project project) {"
    },
    {
        "commit_id": "f0f885748a2c1442690970de335c64fdd30791b4",
        "commit_message": "SONAR-9869 Fix changedAt value when a webhook is triggered from Web",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0f885748a2c1442690970de335c64fdd30791b4",
        "buggy_code": "\"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name'}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=QualityGate{id='id', name='name', status=WARN, conditions=[]}, date=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");",
        "fixed_code": "\"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name'}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=QualityGate{id='id', name='name', status=WARN, conditions=[]}, updatedAt=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");",
        "patch": "@@ -134,6 +134,6 @@ public void defines_hashcode_based_on_all_fields() {\n   @Test\n   public void verify_toString() {\n     assertThat(underTest.toString()).isEqualTo(\n-      \"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name'}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=QualityGate{id='id', name='name', status=WARN, conditions=[]}, date=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");\n+      \"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name'}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=QualityGate{id='id', name='name', status=WARN, conditions=[]}, updatedAt=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");\n   }\n }"
    },
    {
        "commit_id": "e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "commit_message": "SONAR-9880 Fix missing migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v66;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v67;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform.db.migration.version.v66;\n+package org.sonar.server.platform.db.migration.version.v67;\n \n import java.sql.SQLException;\n import org.sonar.db.Database;"
    },
    {
        "commit_id": "e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "commit_message": "SONAR-9880 Fix missing migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v66;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v67;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.server.platform.db.migration.version.v66;\n+package org.sonar.server.platform.db.migration.version.v67;\n \n import java.sql.SQLException;\n import org.sonar.db.Database;"
    },
    {
        "commit_id": "e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "commit_message": "SONAR-9880 Fix missing migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "buggy_code": "verifyMigrationCount(underTest, 4);",
        "fixed_code": "verifyMigrationCount(underTest, 6);",
        "patch": "@@ -36,7 +36,7 @@ public void migrationNumber_starts_at_1830() {\n \n   @Test\n   public void verify_migration_count() {\n-    verifyMigrationCount(underTest, 4);\n+    verifyMigrationCount(underTest, 6);\n   }\n \n }"
    },
    {
        "commit_id": "e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "commit_message": "SONAR-9880 Fix missing migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v66;/*",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v67;/*",
        "patch": "@@ -1,4 +1,4 @@\n-package org.sonar.server.platform.db.migration.version.v66;/*\n+package org.sonar.server.platform.db.migration.version.v67;/*\n  * SonarQube\n  * Copyright (C) 2009-2017 SonarSource SA\n  * mailto:info AT sonarsource DOT com"
    },
    {
        "commit_id": "e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "commit_message": "SONAR-9880 Fix missing migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2ad7bfa29d60b725b45917397a61a74453a1b97",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v66;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v67;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.server.platform.db.migration.version.v66;\n+package org.sonar.server.platform.db.migration.version.v67;\n \n import java.sql.SQLException;\n import java.sql.Types;"
    },
    {
        "commit_id": "2fad0bfc3b20e8effb7e192d1eab210419149236",
        "commit_message": "Set branches WS as public and fix description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fad0bfc3b20e8effb7e192d1eab210419149236",
        "buggy_code": "assertThat(definition.isInternal()).isTrue();",
        "fixed_code": "assertThat(definition.isInternal()).isFalse();",
        "patch": "@@ -63,7 +63,7 @@ public void test_definition() {\n     WebService.Action definition = tester.getDef();\n     assertThat(definition.key()).isEqualTo(\"delete\");\n     assertThat(definition.isPost()).isTrue();\n-    assertThat(definition.isInternal()).isTrue();\n+    assertThat(definition.isInternal()).isFalse();\n     assertThat(definition.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"project\", \"branch\");\n     assertThat(definition.since()).isEqualTo(\"6.6\");\n   }"
    },
    {
        "commit_id": "2fad0bfc3b20e8effb7e192d1eab210419149236",
        "commit_message": "Set branches WS as public and fix description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fad0bfc3b20e8effb7e192d1eab210419149236",
        "buggy_code": "assertThat(definition.isInternal()).isTrue();",
        "fixed_code": "assertThat(definition.isInternal()).isFalse();",
        "patch": "@@ -102,7 +102,7 @@ public void test_definition() {\n     WebService.Action definition = ws.getDef();\n     assertThat(definition.key()).isEqualTo(\"list\");\n     assertThat(definition.isPost()).isFalse();\n-    assertThat(definition.isInternal()).isTrue();\n+    assertThat(definition.isInternal()).isFalse();\n     assertThat(definition.params()).extracting(WebService.Param::key).containsExactlyInAnyOrder(\"project\");\n     assertThat(definition.since()).isEqualTo(\"6.6\");\n   }"
    },
    {
        "commit_id": "df058fb1983f9ef60fa3c467c209db5c0f08050b",
        "commit_message": "SONAR-9871 call webhook on single issue change on short lived branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/df058fb1983f9ef60fa3c467c209db5c0f08050b",
        "buggy_code": "assertThat(container.size()).isEqualTo(2 + 29);",
        "fixed_code": "assertThat(container.size()).isEqualTo(ComponentContainer.COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 30);",
        "patch": "@@ -29,6 +29,6 @@ public class IssueWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new IssueWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(2 + 29);\n+    assertThat(container.size()).isEqualTo(ComponentContainer.COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 30);\n   }\n }"
    },
    {
        "commit_id": "3bbc146b7e21bf7874c45dedfd9c9584338644d6",
        "commit_message": "fix description of api/qualityprofiles/search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3bbc146b7e21bf7874c45dedfd9c9584338644d6",
        "buggy_code": "\"specified, the default organization will be used.\")",
        "fixed_code": "\" specified, the default organization will be used.\")",
        "patch": "@@ -104,7 +104,7 @@ public void define(WebService.NewController controller) {\n     action\n       .createParam(ComponentsWsParameters.PARAM_ORGANIZATION)\n       .setDescription(\"Organization key. If no organization key is provided, this defaults to the organization of the specified project. If neither organization nor project are\" +\n-        \"specified, the default organization will be used.\")\n+        \" specified, the default organization will be used.\")\n       .setRequired(false)\n       .setInternal(true)\n       .setExampleValue(\"my-org\")"
    },
    {
        "commit_id": "b288d75a62a336d3bf11fc7641cd07e66f8eabc2",
        "commit_message": "Fix package of class CopyDeprecatedServerId",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b288d75a62a336d3bf11fc7641cd07e66f8eabc2",
        "buggy_code": "package org.sonar.server.platform.db.migration.version.v66;",
        "fixed_code": "package org.sonar.server.platform.db.migration.version.v67;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.server.platform.db.migration.version.v66;\n+package org.sonar.server.platform.db.migration.version.v67;\n \n import java.sql.SQLException;\n import org.sonar.db.Database;"
    },
    {
        "commit_id": "cba2b53e32d1b4d812ce346656e6658d62ea4aed",
        "commit_message": "Upgrade logback and SLF4j\n\nLogback 1.1.x suffers from https://nvd.nist.gov/vuln/detail/CVE-2017-5929,\nwhich has been fixed in 1.2.0. This vulnerability can't be exploited\nbecause the Logback socket server is not enabled. Nevertheless\nupgrading is a best practice.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cba2b53e32d1b4d812ce346656e6658d62ea4aed",
        "buggy_code": "FieldUtils.writeField(this, \"executorService\", ExecutorServiceUtil.newExecutorService(), true);",
        "fixed_code": "FieldUtils.writeField(this, \"scheduledExecutorService\", ExecutorServiceUtil.newScheduledExecutorService(), true);",
        "patch": "@@ -36,7 +36,7 @@ public class ProgrammaticLogbackValve extends LogbackValve {\n   public void startInternal() throws LifecycleException {\n     try {\n       // direct coupling with LogbackValve implementation\n-      FieldUtils.writeField(this, \"executorService\", ExecutorServiceUtil.newExecutorService(), true);\n+      FieldUtils.writeField(this, \"scheduledExecutorService\", ExecutorServiceUtil.newScheduledExecutorService(), true);\n       FieldUtils.writeField(this, \"started\", true, true);\n       setState(LifecycleState.STARTING);\n     } catch (IllegalAccessException e) {"
    },
    {
        "commit_id": "3ab664433645b5e752c2447ce278617611aa9759",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ab664433645b5e752c2447ce278617611aa9759",
        "buggy_code": "Function<List<INPUT>, RESULT> function, java.util.function.Function<Integer, RESULT> outputInitializer, IntFunction<Integer> partitionSizeManipulations) {",
        "fixed_code": "Function<List<INPUT>, RESULT> function, java.util.function.IntFunction<RESULT> outputInitializer, IntFunction<Integer> partitionSizeManipulations) {",
        "patch": "@@ -123,7 +123,7 @@ public static <OUTPUT, INPUT extends Comparable<INPUT>> Set<OUTPUT> executeLarge\n   }\n \n   private static <OUTPUT, INPUT extends Comparable<INPUT>, RESULT extends Collection<OUTPUT>> RESULT executeLargeInputs(Collection<INPUT> input,\n-    Function<List<INPUT>, RESULT> function, java.util.function.Function<Integer, RESULT> outputInitializer, IntFunction<Integer> partitionSizeManipulations) {\n+    Function<List<INPUT>, RESULT> function, java.util.function.IntFunction<RESULT> outputInitializer, IntFunction<Integer> partitionSizeManipulations) {\n     if (input.isEmpty()) {\n       return outputInitializer.apply(0);\n     }"
    },
    {
        "commit_id": "3ab664433645b5e752c2447ce278617611aa9759",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ab664433645b5e752c2447ce278617611aa9759",
        "buggy_code": "inputDir = new DefaultInputDir(module.key(), parentRelativePath, batchIdGenerator.get());",
        "fixed_code": "inputDir = new DefaultInputDir(module.key(), parentRelativePath, batchIdGenerator.getAsInt());",
        "patch": "@@ -198,7 +198,7 @@ private String getParentRelativePath(Path filePath) {\n   private void indexFileAndParentDir(InputFile inputFile, String parentRelativePath) {\n     DefaultInputDir inputDir = (DefaultInputDir) componentStore.getDir(module.key(), parentRelativePath);\n     if (inputDir == null) {\n-      inputDir = new DefaultInputDir(module.key(), parentRelativePath, batchIdGenerator.get());\n+      inputDir = new DefaultInputDir(module.key(), parentRelativePath, batchIdGenerator.getAsInt());\n       inputDir.setModuleBaseDir(module.getBaseDir());\n       componentTree.index(inputDir, module);\n       defaultModuleFileSystem.add(inputDir);"
    },
    {
        "commit_id": "3ab664433645b5e752c2447ce278617611aa9759",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ab664433645b5e752c2447ce278617611aa9759",
        "buggy_code": "type, language, idGenerator.get(), sensorStrategy);",
        "fixed_code": "type, language, idGenerator.getAsInt(), sensorStrategy);",
        "patch": "@@ -57,7 +57,7 @@ DefaultInputFile create(InputFile.Type type, Path absolutePath, @Nullable String\n     DefaultIndexedFile indexedFile = new DefaultIndexedFile(absolutePath, moduleKey,\n       PathUtils.sanitize(projectBaseDir.relativize(absolutePath).toString()),\n       PathUtils.sanitize(moduleBaseDir.relativize(absolutePath).toString()),\n-      type, language, idGenerator.get(), sensorStrategy);\n+      type, language, idGenerator.getAsInt(), sensorStrategy);\n     DefaultInputFile inputFile = new DefaultInputFile(indexedFile, f -> metadataGenerator.setMetadata(f, moduleFileSystemInitializer.defaultEncoding()));\n     if (language != null) {\n       inputFile.setPublished(true);"
    },
    {
        "commit_id": "61c8a63a9cd8a04c2bc9fd228d12e7d6544ded13",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c8a63a9cd8a04c2bc9fd228d12e7d6544ded13",
        "buggy_code": "setFieldValue(metric + DOT + i + \".label\", tagStats.getKey());",
        "fixed_code": "setFieldValue(metric + DOT + i + LABEL, tagStats.getKey());",
        "patch": "@@ -159,7 +159,7 @@ private void setTagsStatistics(NewIssuesStatistics.Stats stats) {\n     int i = 1;\n     for (Map.Entry<String, MetricStatsInt> tagStats : fiveBiggest(stats.getDistributedMetricStats(metric), MetricStatsInt::getOnLeak)) {\n       setFieldValue(metric + DOT + i + COUNT, String.valueOf(tagStats.getValue().getOnLeak()));\n-      setFieldValue(metric + DOT + i + \".label\", tagStats.getKey());\n+      setFieldValue(metric + DOT + i + LABEL, tagStats.getKey());\n       i++;\n     }\n   }"
    },
    {
        "commit_id": "61c8a63a9cd8a04c2bc9fd228d12e7d6544ded13",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61c8a63a9cd8a04c2bc9fd228d12e7d6544ded13",
        "buggy_code": "checkRequest(this.uuid != null ^ this.key != null, \"Project id or project key can be provided, not both.\");",
        "fixed_code": "checkRequest(this.uuid != null ^ this.key != null, MSG_ID_OR_KEY_MUST_BE_PROVIDED);",
        "patch": "@@ -39,7 +39,7 @@ public class ProjectWsRef {\n   private ProjectWsRef(@Nullable String uuid, @Nullable String key) {\n     this.uuid = uuid;\n     this.key = key;\n-    checkRequest(this.uuid != null ^ this.key != null, \"Project id or project key can be provided, not both.\");\n+    checkRequest(this.uuid != null ^ this.key != null, MSG_ID_OR_KEY_MUST_BE_PROVIDED);\n   }\n \n   public static Optional<ProjectWsRef> newOptionalWsProjectRef(@Nullable String uuid, @Nullable String key) {"
    },
    {
        "commit_id": "ba47e7fd393657a540cdee36df8ba362b671069d",
        "commit_message": "Automatic merge from branch-6.6\n\n* origin/branch-6.6:\n  Prepare for next development iteration\n  SONAR-9721 Fix potential OkHttpClient connection leak\n  Publish 6.6 Release Candidate 1\n  fix quality flaws\n  Propagate parameters of SQ analysis required by burgr\n  fix unwanted text wrapping in the header in ie11\n  SONAR-9908 on Windows, launch Elasticsearch directly, without batch files (#2642)\n  SONAR-9694 Ignore when secondary locations are out of current file for backdating\n  Fix sidebar position helper in IE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ba47e7fd393657a540cdee36df8ba362b671069d",
        "buggy_code": "EsCommand createEsCommand();",
        "fixed_code": "AbstractCommand createEsCommand();",
        "patch": "@@ -21,7 +21,7 @@\n \n public interface CommandFactory {\n \n-  EsCommand createEsCommand();\n+  AbstractCommand createEsCommand();\n \n   JavaCommand createWebCommand(boolean leader);\n "
    },
    {
        "commit_id": "ba47e7fd393657a540cdee36df8ba362b671069d",
        "commit_message": "Automatic merge from branch-6.6\n\n* origin/branch-6.6:\n  Prepare for next development iteration\n  SONAR-9721 Fix potential OkHttpClient connection leak\n  Publish 6.6 Release Candidate 1\n  fix quality flaws\n  Propagate parameters of SQ analysis required by burgr\n  fix unwanted text wrapping in the header in ie11\n  SONAR-9908 on Windows, launch Elasticsearch directly, without batch files (#2642)\n  SONAR-9694 Ignore when secondary locations are out of current file for backdating\n  Fix sidebar position helper in IE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ba47e7fd393657a540cdee36df8ba362b671069d",
        "buggy_code": "requireNonNull(component, \"Component cannot be bull\");",
        "fixed_code": "requireNonNull(component, \"Component cannot be null\");",
        "patch": "@@ -45,7 +45,7 @@ public ScmInfoRepositoryImpl(BatchReportReader batchReportReader, ScmInfoDbLoade\n \n   @Override\n   public Optional<ScmInfo> getScmInfo(Component component) {\n-    requireNonNull(component, \"Component cannot be bull\");\n+    requireNonNull(component, \"Component cannot be null\");\n     return initializeScmInfoForComponent(component);\n   }\n "
    },
    {
        "commit_id": "ba47e7fd393657a540cdee36df8ba362b671069d",
        "commit_message": "Automatic merge from branch-6.6\n\n* origin/branch-6.6:\n  Prepare for next development iteration\n  SONAR-9721 Fix potential OkHttpClient connection leak\n  Publish 6.6 Release Candidate 1\n  fix quality flaws\n  Propagate parameters of SQ analysis required by burgr\n  fix unwanted text wrapping in the header in ie11\n  SONAR-9908 on Windows, launch Elasticsearch directly, without batch files (#2642)\n  SONAR-9694 Ignore when secondary locations are out of current file for backdating\n  Fix sidebar position helper in IE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ba47e7fd393657a540cdee36df8ba362b671069d",
        "buggy_code": "thrown.expectMessage(\"Component cannot be bull\");",
        "fixed_code": "thrown.expectMessage(\"Component cannot be null\");",
        "patch": "@@ -120,7 +120,7 @@ public void return_nothing_when_nothing_in_report_and_db_has_no_scm() throws Exc\n   @Test\n   public void fail_with_NPE_when_component_is_null() throws Exception {\n     thrown.expect(NullPointerException.class);\n-    thrown.expectMessage(\"Component cannot be bull\");\n+    thrown.expectMessage(\"Component cannot be null\");\n \n     underTest.getScmInfo(null);\n   }"
    },
    {
        "commit_id": "a2451079763bfc04f0e0bcdbd2ee158da3446fe4",
        "commit_message": "Fix two logger calls\n\nOne logger call was using incorrect syntax for a formatting anchor\n('%s' should be '{}').\n\nThe other logger call had three formatting anchors, but only passed two\nvalues.\n\nThese issues were found by SLF4J Helper for NetBeans IDE:\nhttp://plugins.netbeans.org/plugin/72557/",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a2451079763bfc04f0e0bcdbd2ee158da3446fe4",
        "buggy_code": "logger.debug(\"%s ...\", name);",
        "fixed_code": "logger.debug(\"{} ...\", name);",
        "patch": "@@ -55,7 +55,7 @@ public TimeProfiler start(String name) {\n     this.name = name;\n     this.start = System.currentTimeMillis();\n     if (debug) {\n-      logger.debug(\"%s ...\", name);\n+      logger.debug(\"{} ...\", name);\n     } else {\n       logger.info(\"{}...\", name);\n     }"
    },
    {
        "commit_id": "b8a42fed352a0349caf85393b2e4c60ceb647e72",
        "commit_message": "SONAR-9887 Reuse information from issues in short living branches targeting current branch\n\n* Add ShortBranchComponentsWithIssues\r\n\r\n* Load only required component fields from dto\r\n\r\n* Keep only uuid and branch from analysisMetadataHolder\r\n\r\n* No need for branch in ShortBranchComponentsWithIssues\r\n\r\n* Add IssueDao.selectResolvedOrConfirmedByComponentUuid\r\n\r\n* Add ResolvedShortBranchIssuesFactory\r\n\r\n* Add components to ProjectAnalysisTaskContainerPopulator\r\n\r\n* issue info from short branches\r\n\r\n* Do not open db session for nothing\r\n\r\n* Get issues for all uuids at once\r\n\r\n* Select only fields required for issue tracking\r\n\r\n* Improvements\r\n\r\n* Add ShortBranchIssue with only the fields needed for issue tracking\r\n\r\n* fix test\r\n\r\n* Add missed license\r\n\r\n* minor improvements\r\n\r\n* Fix IssueStatusCopierTest and move ShortBranchIssue class\r\n\r\n* Clean up ShortBranchIssueDto and its query\r\n\r\n* Fix mapping of dto class\r\n\r\n* Verify that required fields are correctly mapped\r\n\r\n* fixes\r\n\r\n* Fix issues loader\r\n\r\n* Do not use \"key\" as field name in db operations\r\n\r\n* Should find issues to merge only in short branches\r\n\r\n* Strip branch from component key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8a42fed352a0349caf85393b2e4c60ceb647e72",
        "buggy_code": "checkArgument(lineNumber > 0 && lineNumber <= lineChangesets.length, String.format(\"There's no changeset on line %s\", lineNumber));",
        "fixed_code": "checkArgument(lineNumber > 0 && lineNumber <= lineChangesets.length, \"There's no changeset on line %s\", lineNumber);",
        "patch": "@@ -63,7 +63,7 @@ public Changeset getLatestChangeset() {\n \n   @Override\n   public Changeset getChangesetForLine(int lineNumber) {\n-    checkArgument(lineNumber > 0 && lineNumber <= lineChangesets.length, String.format(\"There's no changeset on line %s\", lineNumber));\n+    checkArgument(lineNumber > 0 && lineNumber <= lineChangesets.length, \"There's no changeset on line %s\", lineNumber);\n     return lineChangesets[lineNumber - 1];\n   }\n "
    },
    {
        "commit_id": "bd5ee214d49c00a887a560f27ede91078ffbbce6",
        "commit_message": "SONAR-8730 use existing L18n for types in new issue notifications",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd5ee214d49c00a887a560f27ede91078ffbbce6",
        "buggy_code": "String ruleTypeLabel = i18n.message(getLocale(), \"rule_type.\" + ruleType, ruleType.name());",
        "fixed_code": "String ruleTypeLabel = i18n.message(getLocale(), \"issue.type.\" + ruleType, ruleType.name());",
        "patch": "@@ -179,7 +179,7 @@ protected void appendRuleType(StringBuilder message, Notification notification)\n \n     for (Iterator<RuleType> ruleTypeIterator = Arrays.asList(RuleType.BUG, RuleType.VULNERABILITY, RuleType.CODE_SMELL).iterator(); ruleTypeIterator.hasNext();) {\n       RuleType ruleType = ruleTypeIterator.next();\n-      String ruleTypeLabel = i18n.message(getLocale(), \"rule_type.\" + ruleType, ruleType.name());\n+      String ruleTypeLabel = i18n.message(getLocale(), \"issue.type.\" + ruleType, ruleType.name());\n       message.append(ruleTypeLabel).append(\": \").append(notification.getFieldValue(Metric.RULE_TYPE + DOT + ruleType + COUNT));\n       if (ruleTypeIterator.hasNext()) {\n         message.append(TAB);"
    },
    {
        "commit_id": "019c8f30e8259fbf768a4c5c5f9a583733cf40d7",
        "commit_message": "Fix incorrect id type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/019c8f30e8259fbf768a4c5c5f9a583733cf40d7",
        "buggy_code": "private long id;",
        "fixed_code": "private Long id;",
        "patch": "@@ -63,7 +63,7 @@ public static Builder builder() {\n   }\n \n   public static class Builder {\n-    private long id;\n+    private Long id;\n     private String name;\n     private String login;\n     private String organization;"
    },
    {
        "commit_id": "2c819392f3d7d67d100e51cc2afa30b32a48cb6e",
        "commit_message": "SONAR-9811 fix quality flaws\n\nRenamed variable to avoid misunderstandings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2c819392f3d7d67d100e51cc2afa30b32a48cb6e",
        "buggy_code": "esFileSystem.getOutdatedDataDirectories().forEach(outdatedDir -> {",
        "fixed_code": "esFileSystem.getOutdatedSearchDirectories().forEach(outdatedDir -> {",
        "patch": "@@ -92,7 +92,7 @@ public ProcessMonitor launch(EsCommand esCommand) {\n \n   private static void cleanupOutdatedEsData(EsCommand esCommand) {\n     EsFileSystem esFileSystem = esCommand.getFileSystem();\n-    esFileSystem.getOutdatedDataDirectories().forEach(outdatedDir -> {\n+    esFileSystem.getOutdatedSearchDirectories().forEach(outdatedDir -> {\n       if (outdatedDir.exists()) {\n         LOG.info(\"Deleting outdated search index data directory {}\", outdatedDir.getAbsolutePath());\n         try {"
    },
    {
        "commit_id": "c1fc4905203f88ca85e33a0f65ab7068100a9a02",
        "commit_message": "SONAR-9890 fix startup issue with Turkish locale",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1fc4905203f88ca85e33a0f65ab7068100a9a02",
        "buggy_code": "this.name = name().toLowerCase(Locale.getDefault());",
        "fixed_code": "this.name = name().toLowerCase(Locale.ENGLISH);",
        "patch": "@@ -301,7 +301,7 @@ protected void setup() {\n \n   DefaultIndexSettingsElement(String type) {\n     this.type = type;\n-    this.name = name().toLowerCase(Locale.getDefault());\n+    this.name = name().toLowerCase(Locale.ENGLISH);\n     setup();\n   }\n "
    },
    {
        "commit_id": "c563b8daf42fc8e81db08ce8cc5d27d48b2346b5",
        "commit_message": "Fix StartupIndexationTest false-positive",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c563b8daf42fc8e81db08ce8cc5d27d48b2346b5",
        "buggy_code": "sonarQubeIsUpWatcher.waitForLog(10, TimeUnit.SECONDS);",
        "fixed_code": "sonarQubeIsUpWatcher.waitForLog(20, TimeUnit.SECONDS);",
        "patch": "@@ -63,7 +63,7 @@ public void elasticsearch_error_at_startup_must_shutdown_node() throws Exception\n     try (SonarQube sonarQube = new SonarQube();\n          LogsTailer.Watch sonarQubeIsUpWatcher = sonarQube.logsTailer.watch(\"SonarQube is up\")) {\n       sonarQube.resume();\n-      sonarQubeIsUpWatcher.waitForLog(10, TimeUnit.SECONDS);\n+      sonarQubeIsUpWatcher.waitForLog(20, TimeUnit.SECONDS);\n       SearchRequest searchRequest = SearchRequest.builder().setQuery(\"admin\").build();\n       WsUsers.SearchWsResponse searchWsResponse = sonarQube.tester.wsClient().users().search(searchRequest);\n       assertThat(searchWsResponse.getUsersCount()).isEqualTo(1);"
    },
    {
        "commit_id": "8914046411fa6a16d5f15997436e955313ab13f4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8914046411fa6a16d5f15997436e955313ab13f4",
        "buggy_code": "this.total = response.getHits().totalHits();",
        "fixed_code": "this.total = response.getHits().getTotalHits();",
        "patch": "@@ -33,7 +33,7 @@ public class SearchResult<DOC extends BaseDoc> {\n \n   public SearchResult(SearchResponse response, Function<Map<String, Object>, DOC> converter) {\n     this.facets = new Facets(response);\n-    this.total = response.getHits().totalHits();\n+    this.total = response.getHits().getTotalHits();\n     this.docs = EsUtils.convertToDocs(response.getHits(), converter);\n   }\n "
    },
    {
        "commit_id": "8914046411fa6a16d5f15997436e955313ab13f4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8914046411fa6a16d5f15997436e955313ab13f4",
        "buggy_code": "Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().totalHits());",
        "fixed_code": "Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits());",
        "patch": "@@ -344,7 +344,7 @@ private SearchWsResponse doHandle(SearchWsRequest request, Request wsRequest) {\n     facets = reorderFacets(facets, options.getFacets());\n \n     // FIXME allow long in Paging\n-    Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().totalHits());\n+    Paging paging = forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) result.getHits().getTotalHits());\n \n     return searchResponseFormat.formatSearch(additionalFields, data, paging, facets);\n   }"
    },
    {
        "commit_id": "8914046411fa6a16d5f15997436e955313ab13f4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8914046411fa6a16d5f15997436e955313ab13f4",
        "buggy_code": "return client().prepareSearch(indexType).setSize(0).get().getHits().totalHits();",
        "fixed_code": "return client().prepareSearch(indexType).setSize(0).get().getHits().getTotalHits();",
        "patch": "@@ -291,7 +291,7 @@ public long countDocuments(String index, String type) {\n   }\n \n   public long countDocuments(IndexType indexType) {\n-    return client().prepareSearch(indexType).setSize(0).get().getHits().totalHits();\n+    return client().prepareSearch(indexType).setSize(0).get().getHits().getTotalHits();\n   }\n \n   /**"
    },
    {
        "commit_id": "01e5043f41214d8ca652436b47025e15588b81f0",
        "commit_message": "SONAR-9802 fix NPE in EsStatusCheck",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/01e5043f41214d8ca652436b47025e15588b81f0",
        "buggy_code": "when(esClient.prepareClusterStats()).thenThrow(new RuntimeException(\"Faking an exception occuring while using the EsClient\"));",
        "fixed_code": "when(esClient.prepareClusterStats()).thenThrow(new RuntimeException(\"Faking an exception occurring while using the EsClient\"));",
        "patch": "@@ -38,7 +38,7 @@ public class EsStatusNodeCheckTest {\n   @Test\n   public void check_ignores_NodeHealth_arg_and_returns_RED_with_cause_if_an_exception_occurs_checking_ES_cluster_status() {\n     EsClient esClient = Mockito.mock(EsClient.class);\n-    when(esClient.prepareClusterStats()).thenThrow(new RuntimeException(\"Faking an exception occuring while using the EsClient\"));\n+    when(esClient.prepareClusterStats()).thenThrow(new RuntimeException(\"Faking an exception occurring while using the EsClient\"));\n \n     Health health = new EsStatusNodeCheck(esClient).check();\n "
    },
    {
        "commit_id": "0d049321178a98f46a1739f1c2817098064f1475",
        "commit_message": "SONAR-9802 Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0d049321178a98f46a1739f1c2817098064f1475",
        "buggy_code": "props.set(portPropertyKey, String.valueOf(NetworkUtils.INSTANCE.getNextAvailablePort(InetAddress.getByName(address))));",
        "fixed_code": "props.set(portPropertyKey, String.valueOf(NetworkUtilsImpl.INSTANCE.getNextAvailablePort(InetAddress.getByName(address))));",
        "patch": "@@ -135,7 +135,7 @@ private static void fixPortIfZero(Props props, String addressPropertyKey, String\n     if (\"0\".equals(port)) {\n       String address = props.nonNullValue(addressPropertyKey);\n       try {\n-        props.set(portPropertyKey, String.valueOf(NetworkUtils.INSTANCE.getNextAvailablePort(InetAddress.getByName(address))));\n+        props.set(portPropertyKey, String.valueOf(NetworkUtilsImpl.INSTANCE.getNextAvailablePort(InetAddress.getByName(address))));\n       } catch (UnknownHostException e) {\n         throw new IllegalStateException(\"Cannot resolve address [\" + address + \"] set by property [\" + addressPropertyKey + \"]\", e);\n       }"
    },
    {
        "commit_id": "f6226c06c40855028ae7f8266e9ae36c8eeca618",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f6226c06c40855028ae7f8266e9ae36c8eeca618",
        "buggy_code": "if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings) == false",
        "fixed_code": "if (!NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings)",
        "patch": "@@ -111,7 +111,7 @@ static class MinimalTransportClient extends TransportClient {\n     @Override\n     public void close() {\n       super.close();\n-      if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings) == false\n+      if (!NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings)\n           || NetworkModule.TRANSPORT_TYPE_SETTING.get(settings).equals(Netty4Plugin.NETTY_TRANSPORT_NAME)) {\n         try {\n           GlobalEventExecutor.INSTANCE.awaitInactivity(5, TimeUnit.SECONDS);"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(666));",
        "fixed_code": ".setStartedAt(1 + random.nextInt(666));",
        "patch": "@@ -71,7 +71,7 @@ NodeDetails.Builder randomNodeDetailsBuilder() {\n       .setName(randomAlphanumeric(3))\n       .setHost(randomAlphanumeric(10))\n       .setPort(1 + random.nextInt(10))\n-      .setStarted(1 + random.nextInt(666));\n+      .setStartedAt(1 + random.nextInt(666));\n   }\n \n   NodeDetails.Type randomType() {"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(852))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(852))",
        "patch": "@@ -245,7 +245,7 @@ private NodeHealth randomNodeHealth() {\n         .setName(randomAlphanumeric(30))\n         .setHost(randomAlphanumeric(10))\n         .setPort(1 + random.nextInt(666))\n-        .setStarted(1 + random.nextInt(852))\n+        .setStartedAt(1 + random.nextInt(852))\n         .build())\n       .build();\n   }"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(system2.now())",
        "fixed_code": ".setStartedAt(system2.now())",
        "patch": "@@ -43,7 +43,7 @@ public SearchNodeHealthProvider(Props props, System2 system2, ClusterAppState cl\n       .setName(props.nonNullValue(CLUSTER_NODE_NAME))\n       .setHost(getHost(props, networkUtils))\n       .setPort(Integer.valueOf(props.nonNullValue(CLUSTER_NODE_PORT)))\n-      .setStarted(system2.now())\n+      .setStartedAt(system2.now())\n       .build();\n   }\n "
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(server.getStartedAt().getTime())",
        "fixed_code": ".setStartedAt(server.getStartedAt().getTime())",
        "patch": "@@ -47,7 +47,7 @@ public NodeHealthProviderImpl(Configuration configuration, HealthChecker healthC\n       .setType(NodeDetails.Type.APPLICATION)\n       .setHost(computeHost(configuration, networkUtils))\n       .setPort(computePort(configuration))\n-      .setStarted(server.getStartedAt().getTime())\n+      .setStartedAt(server.getStartedAt().getTime())\n       .build();\n   }\n "
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(54))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(54))",
        "patch": "@@ -277,7 +277,7 @@ private NodeHealth appNodeHealth(NodeDetails.Type type, NodeHealth.Status status\n         .setHost(randomAlphanumeric(32))\n         .setName(randomAlphanumeric(32))\n         .setPort(1 + random.nextInt(88))\n-        .setStarted(1 + random.nextInt(54))\n+        .setStartedAt(1 + random.nextInt(54))\n         .build())\n       .build();\n   }"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(999))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(999))",
        "patch": "@@ -116,7 +116,7 @@ private Set<NodeHealth> randomNodeHealths() {\n           .setName(randomAlphanumeric(3))\n           .setHost(randomAlphanumeric(4))\n           .setPort(1 + random.nextInt(344))\n-          .setStarted(1 + random.nextInt(999))\n+          .setStartedAt(1 + random.nextInt(999))\n           .build())\n       .build()).collect(Collectors.toSet());\n   }"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(966))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(966))",
        "patch": "@@ -50,7 +50,7 @@ public void check_ignores_NodeHealth_arg_and_returns_GREEN_without_cause_if_ES_c\n           .setName(randomAlphanumeric(23))\n           .setHost(randomAlphanumeric(23))\n           .setPort(1 + random.nextInt(96))\n-          .setStarted(1 + random.nextInt(966))\n+          .setStartedAt(1 + random.nextInt(966))\n           .build())\n         .build())\n       .collect(Collectors.toSet());"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(444))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(444))",
        "patch": "@@ -249,7 +249,7 @@ private NodeHealth randomNodeHealth() {\n         .setName(randomAlphanumeric(10))\n         .setHost(randomAlphanumeric(5))\n         .setPort(1 + random.nextInt(333))\n-        .setStarted(1 + random.nextInt(444))\n+        .setStartedAt(1 + random.nextInt(444))\n         .build())\n       .build();\n   }"
    },
    {
        "commit_id": "58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "commit_message": "SONAR-9741 fix types of fields in response of WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58678f9db7ff90dc4c591c467b96e416cfe1303e",
        "buggy_code": ".setStarted(1 + random.nextInt(54))",
        "fixed_code": ".setStartedAt(1 + random.nextInt(54))",
        "patch": "@@ -513,7 +513,7 @@ private NodeHealth nodeHealth(NodeDetails.Type type, NodeHealth.Status status) {\n         .setHost(randomAlphanumeric(32))\n         .setName(randomAlphanumeric(32))\n         .setPort(1 + random.nextInt(88))\n-        .setStarted(1 + random.nextInt(54))\n+        .setStartedAt(1 + random.nextInt(54))\n         .build())\n       .build();\n   }"
    },
    {
        "commit_id": "68476d8a6de04982314b7a9d83af829a14d548c8",
        "commit_message": "Fix typo\n[skip ci]",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/68476d8a6de04982314b7a9d83af829a14d548c8",
        "buggy_code": ".add(1800, \"Add incremental column to snapthots table\", AddIncrementalColumnToSnapshotsTable.class)",
        "fixed_code": ".add(1800, \"Add incremental column to snapshots table\", AddIncrementalColumnToSnapshotsTable.class)",
        "patch": "@@ -27,7 +27,7 @@ public class DbVersion66 implements DbVersion {\n   @Override\n   public void addSteps(MigrationStepRegistry registry) {\n     registry\n-      .add(1800, \"Add incremental column to snapthots table\", AddIncrementalColumnToSnapshotsTable.class)\n+      .add(1800, \"Add incremental column to snapshots table\", AddIncrementalColumnToSnapshotsTable.class)\n       .add(1801, \"Create table CE task characteristics\", CreateTableCeTaskCharacteristics.class)\n       .add(1802, \"Delete leak settings on views\", DeleteLeakSettingsOnViews.class)\n       .add(1803, \"Fix empty USERS.EXTERNAL_IDENTITY and USERS.EXTERNAL_IDENTITY_PROVIDER\", FixEmptyIdentityProviderInUsers.class)"
    },
    {
        "commit_id": "9f58cea8fb7b4ba2fbe1d8b8d905010632466152",
        "commit_message": "Fix renamed field in test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f58cea8fb7b4ba2fbe1d8b8d905010632466152",
        "buggy_code": "TestResponse result = underTest.newRequest()",
        "fixed_code": "TestResponse result = ws.newRequest()",
        "patch": "@@ -198,7 +198,7 @@ public void does_not_return_branches() {\n     ComponentDto ghostBranchProject = db.components().insertProjectBranch(ghostProject);\n     userSessionRule.logIn().addPermission(ADMINISTER, organization);\n \n-    TestResponse result = underTest.newRequest()\n+    TestResponse result = ws.newRequest()\n       .setParam(\"organization\", organization.getKey())\n       .execute();\n "
    },
    {
        "commit_id": "d75d2ff0e82714871bfe28cf5e6ae736e7dd30ce",
        "commit_message": "SONAR-9616 Issue#componentKey should be the public key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d75d2ff0e82714871bfe28cf5e6ae736e7dd30ce",
        "buggy_code": "issue.setComponentKey(component.getKey());",
        "fixed_code": "issue.setComponentKey(component.getPublicKey());",
        "patch": "@@ -59,7 +59,7 @@ public void onIssue(Component component, DefaultIssue issue) {\n     // changes the issue's component uuid, add a change and set issue as changed to enforce it is persisted to DB\n     issueUpdater.setIssueMoved(issue, component.getUuid(), IssueChangeContext.createUser(new Date(analysisMetadataHolder.getAnalysisDate()), null));\n     // other fields (such as module, modulePath, componentKey) are read-only and set/reset for consistency only\n-    issue.setComponentKey(component.getKey());\n+    issue.setComponentKey(component.getPublicKey());\n     issue.setModuleUuid(null);\n     issue.setModuleUuidPath(null);\n   }"
    },
    {
        "commit_id": "7adee5ee96b30672fbdebd0f80981faa4aa4cf0d",
        "commit_message": "SONAR-9616 Fix api/projectbranches/show when invalid branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7adee5ee96b30672fbdebd0f80981faa4aa4cf0d",
        "buggy_code": "checkState(branch != null, \"Branch uuid '%s' not found\", uuid);",
        "fixed_code": "checkState(branch.isPresent(), \"Branch uuid '%s' not found\", uuid);",
        "patch": "@@ -122,7 +122,7 @@ public void handle(Request request, Response response) throws Exception {\n \n   private BranchDto getBranch(DbSession dbSession, String uuid) {\n     Optional<BranchDto> branch = dbClient.branchDao().selectByUuid(dbSession, uuid);\n-    checkState(branch != null, \"Branch uuid '%s' not found\", uuid);\n+    checkState(branch.isPresent(), \"Branch uuid '%s' not found\", uuid);\n     return branch.get();\n   }\n "
    },
    {
        "commit_id": "7696ef7a87b0c72d8236be8f7cdae143514b62aa",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7696ef7a87b0c72d8236be8f7cdae143514b62aa",
        "buggy_code": "this.organizationUuid = requireNonNull(organizationUuid, \"Organization UUID cannot be null\");",
        "fixed_code": "requireNonNull(organizationUuid, \"Organization UUID cannot be null\");",
        "patch": "@@ -183,7 +183,7 @@ public Builder withAtLeastOnePermission() {\n     }\n \n     public PermissionQuery build() {\n-      this.organizationUuid = requireNonNull(organizationUuid, \"Organization UUID cannot be null\");\n+      requireNonNull(organizationUuid, \"Organization UUID cannot be null\");\n       this.pageIndex = firstNonNull(pageIndex, DEFAULT_PAGE_INDEX);\n       this.pageSize = firstNonNull(pageSize, DEFAULT_PAGE_SIZE);\n       checkArgument(searchQuery == null || searchQuery.length() >= SEARCH_QUERY_MIN_LENGTH, \"Search query should contains at least %s characters\", SEARCH_QUERY_MIN_LENGTH);"
    },
    {
        "commit_id": "7696ef7a87b0c72d8236be8f7cdae143514b62aa",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7696ef7a87b0c72d8236be8f7cdae143514b62aa",
        "buggy_code": "dateHistogram = addEffortAggregationIfNeeded(query, dateHistogram);",
        "fixed_code": "addEffortAggregationIfNeeded(query, dateHistogram);",
        "patch": "@@ -543,7 +543,7 @@ private Optional<AggregationBuilder> getCreatedAtFacet(IssueQuery query, Map<Str\n       .offset(offsetInSeconds + \"s\")\n       // ES dateHistogram bounds are inclusive while createdBefore parameter is exclusive\n       .extendedBounds(new ExtendedBounds(startTime, endTime - (offsetInSeconds*1_000L) -1L));\n-    dateHistogram = addEffortAggregationIfNeeded(query, dateHistogram);\n+    addEffortAggregationIfNeeded(query, dateHistogram);\n     return Optional.of(dateHistogram);\n   }\n "
    },
    {
        "commit_id": "24afdb04fb172ef2ff3fe23760513fc16e42e42a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/24afdb04fb172ef2ff3fe23760513fc16e42e42a",
        "buggy_code": "this.total = response.getHits().totalHits();",
        "fixed_code": "this.total = response.getHits().getTotalHits();",
        "patch": "@@ -35,7 +35,7 @@ public class SearchIdResult<ID> {\n \n   public SearchIdResult(SearchResponse response, Function<String, ID> converter) {\n     this.facets = new Facets(response);\n-    this.total = response.getHits().totalHits();\n+    this.total = response.getHits().getTotalHits();\n     this.ids = convertToIds(response.getHits(), converter);\n   }\n "
    },
    {
        "commit_id": "6608409f23925f430a75203f05454bc60e4ebf9b",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6608409f23925f430a75203f05454bc60e4ebf9b",
        "buggy_code": "private static Logger LOGGER = LoggerFactory.getLogger(HazelcastCluster.class);",
        "fixed_code": "private static final Logger LOGGER = LoggerFactory.getLogger(HazelcastCluster.class);",
        "patch": "@@ -66,7 +66,7 @@\n import static org.sonar.process.cluster.ClusterObjectKeys.SONARQUBE_VERSION;\n \n public class HazelcastCluster implements AutoCloseable {\n-  private static Logger LOGGER = LoggerFactory.getLogger(HazelcastCluster.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(HazelcastCluster.class);\n \n   private final List<AppStateListener> listeners = new ArrayList<>();\n   private final ReplicatedMap<ClusterProcess, Boolean> operationalProcesses;"
    },
    {
        "commit_id": "71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "commit_message": "Use VARCHAR2 on Oracle instead of VARCHAR\n\nThe type VARCHAR has been badly introduced when implementing\nthe Java DB migration tool.\n\nKeeping VARCHAR on some installations should not be a problem. A fix\nwill be done if needed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "buggy_code": "return format(\"VARCHAR (%d%s)\", columnSize, ignoreOracleUnit ? \"\" : \" CHAR\");",
        "fixed_code": "return format(\"VARCHAR2 (%d%s)\", columnSize, ignoreOracleUnit ? \"\" : \" CHAR\");",
        "patch": "@@ -66,7 +66,7 @@ public String generateSqlType(Dialect dialect) {\n       case MsSql.ID:\n         return format(\"NVARCHAR (%d)\", columnSize);\n       case Oracle.ID:\n-        return format(\"VARCHAR (%d%s)\", columnSize, ignoreOracleUnit ? \"\" : \" CHAR\");\n+        return format(\"VARCHAR2 (%d%s)\", columnSize, ignoreOracleUnit ? \"\" : \" CHAR\");\n       default:\n         return format(\"VARCHAR (%d)\", columnSize);\n     }"
    },
    {
        "commit_id": "71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "commit_message": "Use VARCHAR2 on Oracle instead of VARCHAR\n\nThe type VARCHAR has been badly introduced when implementing\nthe Java DB migration tool.\n\nKeeping VARCHAR on some installations should not be a problem. A fix\nwill be done if needed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "buggy_code": ".isEqualTo(\"ALTER TABLE issues ADD (date_in_ms NUMBER (38) NULL, name VARCHAR (10 CHAR) NOT NULL, col_with_default NUMBER(1) DEFAULT 0 NOT NULL, varchar_col_with_default VARCHAR (3 CHAR) DEFAULT 'foo' NOT NULL)\");",
        "fixed_code": ".isEqualTo(\"ALTER TABLE issues ADD (date_in_ms NUMBER (38) NULL, name VARCHAR2 (10 CHAR) NOT NULL, col_with_default NUMBER(1) DEFAULT 0 NOT NULL, varchar_col_with_default VARCHAR2 (3 CHAR) DEFAULT 'foo' NOT NULL)\");",
        "patch": "@@ -57,7 +57,7 @@ public void add_columns_on_mysql() {\n   @Test\n   public void add_columns_on_oracle() {\n     assertThat(createSampleBuilder(new Oracle()).build())\n-      .isEqualTo(\"ALTER TABLE issues ADD (date_in_ms NUMBER (38) NULL, name VARCHAR (10 CHAR) NOT NULL, col_with_default NUMBER(1) DEFAULT 0 NOT NULL, varchar_col_with_default VARCHAR (3 CHAR) DEFAULT 'foo' NOT NULL)\");\n+      .isEqualTo(\"ALTER TABLE issues ADD (date_in_ms NUMBER (38) NULL, name VARCHAR2 (10 CHAR) NOT NULL, col_with_default NUMBER(1) DEFAULT 0 NOT NULL, varchar_col_with_default VARCHAR2 (3 CHAR) DEFAULT 'foo' NOT NULL)\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "commit_message": "Use VARCHAR2 on Oracle instead of VARCHAR\n\nThe type VARCHAR has been badly introduced when implementing\nthe Java DB migration tool.\n\nKeeping VARCHAR on some installations should not be a problem. A fix\nwill be done if needed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71291b751aed27c2b62effcd2852e5e89dd4a9e9",
        "buggy_code": "verifyDefaultClauseOnVarcharColumn(ORACLE, \"CREATE TABLE table_42 (status VARCHAR (1 CHAR) DEFAULT 'P' NOT NULL)\");",
        "fixed_code": "verifyDefaultClauseOnVarcharColumn(ORACLE, \"CREATE TABLE table_42 (status VARCHAR2 (1 CHAR) DEFAULT 'P' NOT NULL)\");",
        "patch": "@@ -528,7 +528,7 @@ public void build_adds_DEFAULT_clause_on_varchar_column_on_MySQL() {\n \n   @Test\n   public void build_adds_DEFAULT_clause_on_varchar_column_on_Oracle() {\n-    verifyDefaultClauseOnVarcharColumn(ORACLE, \"CREATE TABLE table_42 (status VARCHAR (1 CHAR) DEFAULT 'P' NOT NULL)\");\n+    verifyDefaultClauseOnVarcharColumn(ORACLE, \"CREATE TABLE table_42 (status VARCHAR2 (1 CHAR) DEFAULT 'P' NOT NULL)\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "01c4425665bd30983197a22c4ce035cdfa821a3e",
        "commit_message": "SONAR-9734 fix log level when fail to delete temp directory",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/01c4425665bd30983197a22c4ce035cdfa821a3e",
        "buggy_code": "LOG.trace(\"Failed to delete temp folder\", e);",
        "fixed_code": "LOG.error(\"Failed to delete temp folder\", e);",
        "patch": "@@ -95,7 +95,7 @@ public void clean() {\n     try {\n       Files.walkFileTree(tempDir.toPath(), DeleteRecursivelyFileVisitor.INSTANCE);\n     } catch (IOException e) {\n-      LOG.trace(\"Failed to delete temp folder\", e);\n+      LOG.error(\"Failed to delete temp folder\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "c0ad2f9a1be5a558adb927d59c524793b67e6bba",
        "commit_message": "SONAR-9734 fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c0ad2f9a1be5a558adb927d59c524793b67e6bba",
        "buggy_code": "import com.google.common.base.Optional;",
        "fixed_code": "import java.util.Optional;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.server.computation.task.projectanalysis.batch;\n \n-import com.google.common.base.Optional;\n+import java.util.Optional;\n import javax.annotation.CheckForNull;\n import org.sonar.core.util.CloseableIterator;\n import org.sonar.scanner.protocol.output.ScannerReport;"
    },
    {
        "commit_id": "c0ad2f9a1be5a558adb927d59c524793b67e6bba",
        "commit_message": "SONAR-9734 fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c0ad2f9a1be5a558adb927d59c524793b67e6bba",
        "buggy_code": "import com.google.common.base.Optional;",
        "fixed_code": "import java.util.Optional;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.server.computation.task.projectanalysis.source;\n \n-import com.google.common.base.Optional;\n+import java.util.Optional;\n import org.sonar.core.util.CloseableIterator;\n import org.sonar.server.computation.task.projectanalysis.batch.BatchReportReader;\n import org.sonar.server.computation.task.projectanalysis.component.Component;"
    },
    {
        "commit_id": "26e48e66d0e5497118e2d1593ba68fd2d08f6f53",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26e48e66d0e5497118e2d1593ba68fd2d08f6f53",
        "buggy_code": "private ListMultimap<String, EventDto> buildEvents(List<EventDto> events) {",
        "fixed_code": "private static ListMultimap<String, EventDto> buildEvents(List<EventDto> events) {",
        "patch": "@@ -47,7 +47,7 @@ private SearchData(Builder builder) {\n       .andTotal(builder.countAnalyses);\n   }\n \n-  private ListMultimap<String, EventDto> buildEvents(List<EventDto> events) {\n+  private static ListMultimap<String, EventDto> buildEvents(List<EventDto> events) {\n     return events.stream().collect(MoreCollectors.index(EventDto::getAnalysisUuid));\n   }\n "
    },
    {
        "commit_id": "fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "commit_message": "SONAR-8798 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "buggy_code": "private static final Logger LOG = LoggerFactory.getLogger(EsProcessMonitor.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(AbstractProcessMonitor.class);",
        "patch": "@@ -30,7 +30,7 @@\n \n abstract class AbstractProcessMonitor implements ProcessMonitor {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(EsProcessMonitor.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AbstractProcessMonitor.class);\n   private static final int EXPECTED_EXIT_VALUE = 0;\n \n   protected final Process process;"
    },
    {
        "commit_id": "fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "commit_message": "SONAR-8798 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "buggy_code": "private void configureAction(Map<String, String> builder) {",
        "fixed_code": "private static void configureAction(Map<String, String> builder) {",
        "patch": "@@ -173,7 +173,7 @@ private void configureMarvel(Map<String, String> builder) {\n     }\n   }\n \n-  private void configureAction(Map<String, String> builder) {\n+  private static void configureAction(Map<String, String> builder) {\n     builder.put(\"action.auto_create_index\", String.valueOf(false));\n   }\n }"
    },
    {
        "commit_id": "fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "commit_message": "SONAR-8798 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbbb1a0ebed1211229fdb010111d1b8d99ad4ca8",
        "buggy_code": "result.add(new UserDoc(hit.sourceAsMap()));",
        "fixed_code": "result.add(new UserDoc(hit.getSourceAsMap()));",
        "patch": "@@ -90,7 +90,7 @@ public List<UserDoc> getAtMostThreeActiveUsersForScmAccount(String scmAccount) {\n             .should(matchQuery(SORTABLE_ANALYZER.subField(FIELD_SCM_ACCOUNTS), scmAccount))))\n         .setSize(3);\n       for (SearchHit hit : request.get().getHits().getHits()) {\n-        result.add(new UserDoc(hit.sourceAsMap()));\n+        result.add(new UserDoc(hit.getSourceAsMap()));\n       }\n     }\n     return result;"
    },
    {
        "commit_id": "d51a060fe56d7a9c9ed9f1d3544228a445a92e25",
        "commit_message": "SONAR-8798 fix date histogram bounds\n\nit seems to internally use UTC",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d51a060fe56d7a9c9ed9f1d3544228a445a92e25",
        "buggy_code": ".extendedBounds(new ExtendedBounds(startTime, endTime - 1_000L));",
        "fixed_code": ".extendedBounds(new ExtendedBounds(startTime, endTime - (offsetInSeconds*1_000L) -1L));",
        "patch": "@@ -542,7 +542,7 @@ private Optional<AggregationBuilder> getCreatedAtFacet(IssueQuery query, Map<Str\n       .timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT\")))\n       .offset(offsetInSeconds + \"s\")\n       // ES dateHistogram bounds are inclusive while createdBefore parameter is exclusive\n-      .extendedBounds(new ExtendedBounds(startTime, endTime - 1_000L));\n+      .extendedBounds(new ExtendedBounds(startTime, endTime - (offsetInSeconds*1_000L) -1L));\n     dateHistogram = addEffortAggregationIfNeeded(query, dateHistogram);\n     return Optional.of(dateHistogram);\n   }"
    },
    {
        "commit_id": "0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "commit_message": "SONAR-8798 fix unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "buggy_code": "return new StickyFacetBuilder(query, filters);",
        "fixed_code": "return new StickyFacetBuilder(query, filters, null, Terms.Order.compound(Terms.Order.count(false), Terms.Order.term(true)));",
        "patch": "@@ -461,7 +461,7 @@ private static void addActiveSeverityFacetIfNeeded(RuleQuery query, SearchOption\n   }\n \n   private static StickyFacetBuilder stickyFacetBuilder(QueryBuilder query, Map<String, QueryBuilder> filters) {\n-    return new StickyFacetBuilder(query, filters);\n+    return new StickyFacetBuilder(query, filters, null, Terms.Order.compound(Terms.Order.count(false), Terms.Order.term(true)));\n   }\n \n   private static void setSorting(RuleQuery query, SearchRequestBuilder esSearch) {"
    },
    {
        "commit_id": "0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "commit_message": "SONAR-8798 fix unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "buggy_code": "assertThat(props.get(\"type\")).isEqualTo(\"multi_field\");",
        "fixed_code": "assertThat(props.get(\"type\")).isEqualTo(\"keyword\");",
        "patch": "@@ -112,7 +112,7 @@ public void define_string_field() {\n     assertThat(props.get(\"fields\")).isNull();\n \n     props = (Map) mapping.getProperty(\"all_capabilities_field\");\n-    assertThat(props.get(\"type\")).isEqualTo(\"multi_field\");\n+    assertThat(props.get(\"type\")).isEqualTo(\"keyword\");\n     // no need to test values, it's not the scope of this test\n     assertThat((Map) props.get(\"fields\")).isNotEmpty();\n   }"
    },
    {
        "commit_id": "0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "commit_message": "SONAR-8798 fix unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0cc935bc71cda905fbfa65ea4becaf23afdda35f",
        "buggy_code": "assertThat(e.getMessage()).contains(\"Fail to execute ES search request '{\").contains(\"}' on indices '[fakes]'\");",
        "fixed_code": "assertThat(e.getMessage()).contains(\"Fail to execute ES search request 'SearchRequest{\").contains(\"}' on indices '[non-existing-index]'\");",
        "patch": "@@ -67,7 +67,7 @@ public void fail_to_search_bad_query() {\n       fail();\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(IllegalStateException.class);\n-      assertThat(e.getMessage()).contains(\"Fail to execute ES search request '{\").contains(\"}' on indices '[fakes]'\");\n+      assertThat(e.getMessage()).contains(\"Fail to execute ES search request 'SearchRequest{\").contains(\"}' on indices '[non-existing-index]'\");\n     }\n   }\n "
    },
    {
        "commit_id": "c9212b7924101f9c4c54bf12efb46df5724d77eb",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c9212b7924101f9c4c54bf12efb46df5724d77eb",
        "buggy_code": "ComponentDto project = newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID).setKey(PROJECT_KEY);",
        "fixed_code": "ComponentDto project = newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID).setDbKey(PROJECT_KEY);",
        "patch": "@@ -124,7 +124,7 @@ public void submit_inserts_characteristics() {\n       .addPermission(PROVISION_PROJECTS, db.getDefaultOrganization());\n \n     mockSuccessfulPrepareSubmitCall();\n-    ComponentDto project = newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID).setKey(PROJECT_KEY);\n+    ComponentDto project = newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID).setDbKey(PROJECT_KEY);\n     when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), eq(null))).thenReturn(project);\n     when(permissionTemplateService.wouldUserHaveScanPermissionWithDefaultTemplate(any(DbSession.class), eq(defaultOrganizationUuid), anyInt(), anyString(),\n       eq(PROJECT_KEY), eq(Qualifiers.PROJECT)))"
    },
    {
        "commit_id": "b25e08a9c06e14d84bbe84d624289961550fdb02",
        "commit_message": "Fix tests and missing components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b25e08a9c06e14d84bbe84d624289961550fdb02",
        "buggy_code": "+ 46 // content of DaoModule",
        "fixed_code": "+ 47 // content of DaoModule",
        "patch": "@@ -135,7 +135,7 @@ public void real_start_without_cluster() throws IOException {\n     assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize(\n       COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION\n         + 25 // level 1\n-        + 46 // content of DaoModule\n+        + 47 // content of DaoModule\n         + 3 // content of EsSearchModule\n         + 58 // content of CorePropertyDefinitions\n     );"
    },
    {
        "commit_id": "9ad1582eadfd88239c359bd4cad50d589f65c2a3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ad1582eadfd88239c359bd4cad50d589f65c2a3",
        "buggy_code": "checkState(line <= inputFile.lines(), \"Line %s is out of range in the file %s (lines: %s)\", line, inputFile.relativePath(), inputFile.lines());",
        "fixed_code": "checkState(line <= inputFile.lines(), \"Line %s is out of range in the file %s (lines: %s)\", line, inputFile, inputFile.lines());",
        "patch": "@@ -90,7 +90,7 @@ public NewCoverage lineHits(int line, int hits) {\n   }\n \n   private void validateLine(int line) {\n-    checkState(line <= inputFile.lines(), \"Line %s is out of range in the file %s (lines: %s)\", line, inputFile.relativePath(), inputFile.lines());\n+    checkState(line <= inputFile.lines(), \"Line %s is out of range in the file %s (lines: %s)\", line, inputFile, inputFile.lines());\n     checkState(line > 0, \"Line number must be strictly positive: %s\", line);\n   }\n "
    },
    {
        "commit_id": "9ad1582eadfd88239c359bd4cad50d589f65c2a3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ad1582eadfd88239c359bd4cad50d589f65c2a3",
        "buggy_code": "issueExclusionsLoader.addMulticriteriaPatterns(inputFile.relativePath(), inputFile.key());",
        "fixed_code": "issueExclusionsLoader.addMulticriteriaPatterns(((DefaultInputFile) inputFile).getModuleRelativePath(), inputFile.key());",
        "patch": "@@ -126,7 +126,7 @@ private void initIssueExclusions() {\n       eventBus.fireEvent(new BatchStepEvent(stepName, true));\n \n       for (InputFile inputFile : fs.inputFiles(fs.predicates().all())) {\n-        issueExclusionsLoader.addMulticriteriaPatterns(inputFile.relativePath(), inputFile.key());\n+        issueExclusionsLoader.addMulticriteriaPatterns(((DefaultInputFile) inputFile).getModuleRelativePath(), inputFile.key());\n       }\n \n       eventBus.fireEvent(new BatchStepEvent(stepName, false));"
    },
    {
        "commit_id": "bcae3c079bef995afef0ffc4dbe774fbdf0bf9ed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bcae3c079bef995afef0ffc4dbe774fbdf0bf9ed",
        "buggy_code": "public String forcedLanguage() {",
        "fixed_code": "public String getForcedLanguage() {",
        "patch": "@@ -92,7 +92,7 @@ public LanguageDetection(Configuration settings, LanguagesRepository languages)\n     patternsByLanguage = Collections.unmodifiableMap(patternsByLanguageBuilder);\n   }\n \n-  public String forcedLanguage() {\n+  public String getForcedLanguage() {\n     return forcedLanguage;\n   }\n "
    },
    {
        "commit_id": "bcae3c079bef995afef0ffc4dbe774fbdf0bf9ed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bcae3c079bef995afef0ffc4dbe774fbdf0bf9ed",
        "buggy_code": "FileData fileData = projectRepositories.fileData(inputModule.definition().getKeyWithBranch(), f.relativePath());",
        "fixed_code": "FileData fileData = projectRepositories.fileData(inputModule.definition().getKeyWithBranch(), inputFile.getModuleRelativePath());",
        "patch": "@@ -102,7 +102,7 @@ private List<InputFile> collectFilesToBlame(ScannerReportWriter writer) {\n         addIfNotEmpty(filesToBlame, f);\n       } else {\n         // File status is SAME so that mean fileData exists\n-        FileData fileData = projectRepositories.fileData(inputModule.definition().getKeyWithBranch(), f.relativePath());\n+        FileData fileData = projectRepositories.fileData(inputModule.definition().getKeyWithBranch(), inputFile.getModuleRelativePath());\n         if (StringUtils.isEmpty(fileData.revision())) {\n           addIfNotEmpty(filesToBlame, f);\n         } else {"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "inputFile.setPublish(publish);",
        "fixed_code": "inputFile.setPublished(publish);",
        "patch": "@@ -198,7 +198,7 @@ public DefaultInputFile build() {\n       contents);\n     inputFile.setStatus(status);\n     inputFile.setCharset(charset);\n-    inputFile.setPublish(publish);\n+    inputFile.setPublished(publish);\n     return inputFile;\n   }\n "
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "file.setPublish(true);",
        "fixed_code": "file.setPublished(true);",
        "patch": "@@ -352,6 +352,6 @@ public Map<String, String> getContextProperties() {\n   @Override\n   public void markForPublishing(InputFile inputFile) {\n     DefaultInputFile file = (DefaultInputFile) inputFile;\n-    file.setPublish(true);\n+    file.setPublished(true);\n   }\n }"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "assertThat(file.publish()).isTrue();",
        "fixed_code": "assertThat(file.isPublished()).isTrue();",
        "patch": "@@ -55,7 +55,7 @@ public void testGetters() {\n \n     assertThat(file.type()).isEqualTo(Type.MAIN);\n     assertThat(file.status()).isEqualTo(Status.SAME);\n-    assertThat(file.publish()).isTrue();\n+    assertThat(file.isPublished()).isTrue();\n     assertThat(file.type()).isEqualTo(Type.MAIN);\n     assertThat(file.relativePath()).isEqualTo(\"path\");\n     assertThat(file.absolutePath()).isEqualTo(new File(\"baseDir\", \"path\").toString());"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "inputFile.setPublish(true);",
        "fixed_code": "inputFile.setPublished(true);",
        "patch": "@@ -43,7 +43,7 @@ public MutableTestPlan loadPerspective(Class<MutableTestPlan> perspectiveClass,\n     if (component.isFile()) {\n       DefaultInputFile inputFile = (DefaultInputFile) component;\n       if (inputFile.type() == Type.TEST) {\n-        inputFile.setPublish(true);\n+        inputFile.setPublished(true);\n         if (!testPlanByFile.containsKey(inputFile)) {\n           testPlanByFile.put(inputFile, new DefaultTestPlan());\n         }"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "return !inputFile.publish();",
        "fixed_code": "return !inputFile.isPublished();",
        "patch": "@@ -140,7 +140,7 @@ private boolean shouldSkipComponent(DefaultInputComponent component, Collection<\n     } else if (component instanceof DefaultInputFile) {\n       // skip files not marked for publishing\n       DefaultInputFile inputFile = (DefaultInputFile) component;\n-      return !inputFile.publish();\n+      return !inputFile.isPublished();\n     }\n     return false;\n   }"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "import org.sonar.scanner.sensor.coverage.CoverageExclusions;",
        "fixed_code": "import org.sonar.scanner.phases.CoverageExclusions;",
        "patch": "@@ -47,6 +47,7 @@\n import org.sonar.scanner.issue.ignore.pattern.PatternMatcher;\n import org.sonar.scanner.issue.ignore.scanner.IssueExclusionsLoader;\n import org.sonar.scanner.phases.AbstractPhaseExecutor;\n+import org.sonar.scanner.phases.CoverageExclusions;\n import org.sonar.scanner.phases.InitializersExecutor;\n import org.sonar.scanner.phases.IssuesPhaseExecutor;\n import org.sonar.scanner.phases.PostJobsExecutor;\n@@ -70,7 +71,6 @@\n import org.sonar.scanner.sensor.DefaultSensorStorage;\n import org.sonar.scanner.sensor.SensorOptimizer;\n import org.sonar.scanner.sensor.SensorStrategy;\n-import org.sonar.scanner.sensor.coverage.CoverageExclusions;\n import org.sonar.scanner.source.HighlightableBuilder;\n import org.sonar.scanner.source.SymbolizableBuilder;\n "
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": ".filter(DefaultInputFile::publish)::iterator;",
        "fixed_code": ".filter(DefaultInputFile::isPublished)::iterator;",
        "patch": "@@ -78,7 +78,7 @@ public Collection<InputComponent> all() {\n   public Iterable<DefaultInputFile> allFilesToPublish() {\n     return inputFileCache.values().stream()\n       .map(f -> (DefaultInputFile) f)\n-      .filter(DefaultInputFile::publish)::iterator;\n+      .filter(DefaultInputFile::isPublished)::iterator;\n   }\n \n   public Iterable<InputFile> allFiles() {"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "inputFile.setPublish(true);",
        "fixed_code": "inputFile.setPublished(true);",
        "patch": "@@ -68,7 +68,7 @@ DefaultInputFile create(Path file, InputFile.Type type) {\n     DefaultIndexedFile indexedFile = new DefaultIndexedFile(moduleKey, moduleBaseDir, relativePath, type, language, idGenerator.get());\n     DefaultInputFile inputFile = new DefaultInputFile(indexedFile, f -> metadataGenerator.setMetadata(f, moduleFileSystemInitializer.defaultEncoding()));\n     if (language != null) {\n-      inputFile.setPublish(true);\n+      inputFile.setPublished(true);\n     }\n \n     return inputFile;"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "if (!inputFile.publish()) {",
        "fixed_code": "if (!inputFile.isPublished()) {",
        "patch": "@@ -95,7 +95,7 @@ private List<InputFile> collectFilesToBlame(ScannerReportWriter writer) {\n     List<InputFile> filesToBlame = new LinkedList<>();\n     for (InputFile f : componentStore.inputFiles()) {\n       DefaultInputFile inputFile = (DefaultInputFile) f;\n-      if (!inputFile.publish()) {\n+      if (!inputFile.isPublished()) {\n         continue;\n       }\n       if (configuration.forceReloadAll() || f.status() != Status.SAME) {"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "file.setPublish(true);",
        "fixed_code": "file.setPublished(true);",
        "patch": "@@ -175,6 +175,6 @@ public void addContextProperty(String key, String value) {\n   @Override\n   public void markForPublishing(InputFile inputFile) {\n     DefaultInputFile file = (DefaultInputFile) inputFile;\n-    file.setPublish(true);\n+    file.setPublished(true);\n   }\n }"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "assertThat(inputFile.publish()).isFalse();",
        "fixed_code": "assertThat(inputFile.isPublished()).isFalse();",
        "patch": "@@ -70,6 +70,6 @@ public void testBuild() {\n     assertThat(inputFile.moduleKey()).isEqualTo(\"module1\");\n     assertThat(inputFile.absolutePath()).isEqualTo(filePath.toString().replaceAll(\"\\\\\\\\\", \"/\"));\n     assertThat(inputFile.key()).isEqualTo(\"module1:src/File1.xoo\");\n-    assertThat(inputFile.publish()).isFalse();\n+    assertThat(inputFile.isPublished()).isFalse();\n   }\n }"
    },
    {
        "commit_id": "6cedf507a95545611c31813a427f43291beeadfc",
        "commit_message": "SONAR-9557 Fix coverage exclusions for global sensors",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cedf507a95545611c31813a427f43291beeadfc",
        "buggy_code": "inputFile.setPublish(true);",
        "fixed_code": "inputFile.setPublished(true);",
        "patch": "@@ -95,7 +95,7 @@ public void before() throws Exception {\n     DefaultInputFile inputFile = new TestInputFileBuilder(\"struts\", \"src/main/java/org/apache/struts/Action.java\")\n       .setModuleBaseDir(projectBaseDir.toPath()).build();\n     inputFile.setStatus(InputFile.Status.CHANGED);\n-    inputFile.setPublish(true);\n+    inputFile.setPublished(true);\n     inputComponentStore.put(inputFile);\n     inputComponentStore.put(inputDir);\n "
    },
    {
        "commit_id": "3a988bb88a5c66f651682083496159a7495e1acb",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a988bb88a5c66f651682083496159a7495e1acb",
        "buggy_code": "c = diff > 0 ? 1 : (diff < 0 ? -1 : 0);",
        "fixed_code": "c = (diff > 0) ? 1 : ((diff < 0) ? -1 : 0);",
        "patch": "@@ -218,7 +218,7 @@ public int compareTo(Version other) {\n         c = patch - other.patch;\n         if (c == 0) {\n           long diff = buildNumber - other.buildNumber;\n-          c = diff > 0 ? 1 : (diff < 0 ? -1 : 0);\n+          c = (diff > 0) ? 1 : ((diff < 0) ? -1 : 0);\n         }\n       }\n     }"
    },
    {
        "commit_id": "f0c45506162cd3de3c9fc99eeefcdf68485bb35f",
        "commit_message": "Fix IssueIndexProjectStatisticsTest compilation error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0c45506162cd3de3c9fc99eeefcdf68485bb35f",
        "buggy_code": "private IssueIndexer issueIndexer = new IssueIndexer(esTester.client(), new IssueIteratorFactory(null));",
        "fixed_code": "private IssueIndexer issueIndexer = new IssueIndexer(esTester.client(), null, new IssueIteratorFactory(null));",
        "patch": "@@ -54,7 +54,7 @@ public class IssueIndexProjectStatisticsTest {\n   @Rule\n   public UserSessionRule userSessionRule = UserSessionRule.standalone();\n \n-  private IssueIndexer issueIndexer = new IssueIndexer(esTester.client(), new IssueIteratorFactory(null));\n+  private IssueIndexer issueIndexer = new IssueIndexer(esTester.client(), null, new IssueIteratorFactory(null));\n   private PermissionIndexerTester authorizationIndexerTester = new PermissionIndexerTester(esTester, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(esTester.client(), system2, userSessionRule, new AuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "c526a17a16632d4af6db643709457eb5800350ce",
        "commit_message": "SONAR-9567 disable storage of doc source in ES index issues/issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c526a17a16632d4af6db643709457eb5800350ce",
        "buggy_code": "public EsTester esTester = new EsTester(new IssueIndexDefinition(new MapSettings().asConfig()));",
        "fixed_code": "public EsTester esTester = new EsTester(IssueIndexDefinition.createForTest(new MapSettings().asConfig()));",
        "patch": "@@ -54,7 +54,7 @@ public class IssueIndexerTest {\n   private System2 system2 = System2.INSTANCE;\n \n   @Rule\n-  public EsTester esTester = new EsTester(new IssueIndexDefinition(new MapSettings().asConfig()));\n+  public EsTester esTester = new EsTester(IssueIndexDefinition.createForTest(new MapSettings().asConfig()));\n   @Rule\n   public DbTester dbTester = DbTester.create(system2);\n   @Rule"
    },
    {
        "commit_id": "7c1a881ae846e4c9afa22243c4fc5884d1df0d81",
        "commit_message": "SONAR-9480 fix removal of rules from index when too many failures",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c1a881ae846e4c9afa22243c4fc5884d1df0d81",
        "buggy_code": "assertThatLogsContain(INFO, \"Elasticsearch recovery - 3 documents processed [0 failures]\");",
        "fixed_code": "assertThatLogsContain(INFO, \"Elasticsearch recovery - 1 documents processed [0 failures]\");",
        "patch": "@@ -307,7 +307,7 @@ public void recover_multiple_times_the_same_document() {\n       .containsExactlyInAnyOrder(item1.getUuid(), item2.getUuid(), item3.getUuid());\n \n     assertThatLogsContain(TRACE, \"Elasticsearch recovery - processing 3 USER\");\n-    assertThatLogsContain(INFO, \"Elasticsearch recovery - 3 documents processed [0 failures]\");\n+    assertThatLogsContain(INFO, \"Elasticsearch recovery - 1 documents processed [0 failures]\");\n   }\n \n   private class ProxyUserIndexer extends UserIndexer {"
    },
    {
        "commit_id": "5dbc2d97361f2425816402a9ee0519b914833141",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5dbc2d97361f2425816402a9ee0519b914833141",
        "buggy_code": "org.sonar.api.rules.Rule apiRule = new org.sonar.api.rules.Rule();",
        "fixed_code": "Rule apiRule = new Rule();",
        "patch": "@@ -162,7 +162,7 @@ private static Rule toRule(RuleDefinitionDto ruleDefinition, List<RuleParamDto>\n     String description = ruleDefinition.getDescription();\n     RuleDto.Format descriptionFormat = ruleDefinition.getDescriptionFormat();\n \n-    org.sonar.api.rules.Rule apiRule = new org.sonar.api.rules.Rule();\n+    Rule apiRule = new Rule();\n     apiRule\n       .setName(ruleDefinition.getName())\n       .setLanguage(ruleDefinition.getLanguage())"
    },
    {
        "commit_id": "5dbc2d97361f2425816402a9ee0519b914833141",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5dbc2d97361f2425816402a9ee0519b914833141",
        "buggy_code": "public org.sonar.api.rules.Rule findById(int ruleId) {",
        "fixed_code": "public Rule findById(int ruleId) {",
        "patch": "@@ -54,7 +54,7 @@ public void stopCaching() {\n   @Override\n   @CheckForNull\n   @Deprecated\n-  public org.sonar.api.rules.Rule findById(int ruleId) {\n+  public Rule findById(int ruleId) {\n     return delegate.findById(ruleId);\n   }\n "
    },
    {
        "commit_id": "299de1c1b2242ebb445f16942cbef15fb966c812",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/299de1c1b2242ebb445f16942cbef15fb966c812",
        "buggy_code": "return total.get() == 0 ? 1 : (1.0d * getFailures()) / total.get();",
        "fixed_code": "return total.get() == 0 ? 1 : ((1.0d * getFailures()) / total.get());",
        "patch": "@@ -66,7 +66,7 @@ public long getSuccess() {\n    * @see {@link RecoveryIndexer#recover()}\n    */\n   public double getFailureRatio() {\n-    return total.get() == 0 ? 1 : (1.0d * getFailures()) / total.get();\n+    return total.get() == 0 ? 1 : ((1.0d * getFailures()) / total.get());\n   }\n \n   public boolean isSuccess() {"
    },
    {
        "commit_id": "75e926deef21688a74904b1feae2a687309a6ab3",
        "commit_message": "SONAR-9480 fix support of multiple docs to recover with same id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75e926deef21688a74904b1feae2a687309a6ab3",
        "buggy_code": "assertThat(repo.rules()).hasSize(17);",
        "fixed_code": "assertThat(repo.rules()).hasSize(18);",
        "patch": "@@ -42,7 +42,7 @@ public void define_xoo_rules() {\n     assertThat(repo).isNotNull();\n     assertThat(repo.name()).isEqualTo(\"Xoo\");\n     assertThat(repo.language()).isEqualTo(\"xoo\");\n-    assertThat(repo.rules()).hasSize(17);\n+    assertThat(repo.rules()).hasSize(18);\n \n     RulesDefinition.Rule rule = repo.rule(OneIssuePerLineSensor.RULE_KEY);\n     assertThat(rule.name()).isNotEmpty();"
    },
    {
        "commit_id": "75e926deef21688a74904b1feae2a687309a6ab3",
        "commit_message": "SONAR-9480 fix support of multiple docs to recover with same id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75e926deef21688a74904b1feae2a687309a6ab3",
        "buggy_code": "underTest.commitAndIndex(dbTester.getSession(), organization, rule.getKey());",
        "fixed_code": "underTest.commitAndIndex(dbTester.getSession(), rule.getKey(), organization);",
        "patch": "@@ -102,7 +102,7 @@ public void index_rule_extension_with_long_id() {\n     underTest.commitAndIndex(dbTester.getSession(), rule.getKey());\n     OrganizationDto organization = dbTester.organizations().insert();\n     dbTester.rules().insertOrUpdateMetadata(rule, organization, m -> m.setTags(ImmutableSet.of(\"bla\")));\n-    underTest.commitAndIndex(dbTester.getSession(), organization, rule.getKey());\n+    underTest.commitAndIndex(dbTester.getSession(), rule.getKey(), organization);\n \n     RuleExtensionDoc doc = new RuleExtensionDoc()\n       .setRuleKey(rule.getKey())"
    },
    {
        "commit_id": "75e926deef21688a74904b1feae2a687309a6ab3",
        "commit_message": "SONAR-9480 fix support of multiple docs to recover with same id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75e926deef21688a74904b1feae2a687309a6ab3",
        "buggy_code": "ruleIndexer.commitAndIndex(db.getSession(), organization, rule.getKey());",
        "fixed_code": "ruleIndexer.commitAndIndex(db.getSession(), rule.getKey(), organization);",
        "patch": "@@ -738,7 +738,7 @@ private final <T> void checkField(RuleDefinitionDto rule, String fieldName, Extr\n   @SafeVarargs\n   private final RuleMetadataDto insertMetadata(OrganizationDto organization, RuleDefinitionDto rule, Consumer<RuleMetadataDto>... populaters) {\n     RuleMetadataDto metadata = db.rules().insertOrUpdateMetadata(rule, organization, populaters);\n-    ruleIndexer.commitAndIndex(db.getSession(), organization, rule.getKey());\n+    ruleIndexer.commitAndIndex(db.getSession(), rule.getKey(), organization);\n     return metadata;\n   }\n "
    },
    {
        "commit_id": "75e926deef21688a74904b1feae2a687309a6ab3",
        "commit_message": "SONAR-9480 fix support of multiple docs to recover with same id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75e926deef21688a74904b1feae2a687309a6ab3",
        "buggy_code": "ruleIndexer.commitAndIndex(dbTester.getSession(), organization, rule.getKey());",
        "fixed_code": "ruleIndexer.commitAndIndex(dbTester.getSession(), rule.getKey(), organization);",
        "patch": "@@ -236,7 +236,7 @@ private RuleDefinitionDto insertRule() {\n   @SafeVarargs\n   private final RuleMetadataDto insertMetadata(OrganizationDto organization, RuleDefinitionDto rule, Consumer<RuleMetadataDto>... populaters) {\n     RuleMetadataDto metadata = dbTester.rules().insertOrUpdateMetadata(rule, organization, populaters);\n-    ruleIndexer.commitAndIndex(dbTester.getSession(), organization, rule.getKey());\n+    ruleIndexer.commitAndIndex(dbTester.getSession(), rule.getKey(), organization);\n     return metadata;\n   }\n }"
    },
    {
        "commit_id": "75e926deef21688a74904b1feae2a687309a6ab3",
        "commit_message": "SONAR-9480 fix support of multiple docs to recover with same id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75e926deef21688a74904b1feae2a687309a6ab3",
        "buggy_code": "ruleIndexer.commitAndIndex(dbTester.getSession(), organization, r.getKey());",
        "fixed_code": "ruleIndexer.commitAndIndex(dbTester.getSession(), r.getKey(), organization);",
        "patch": "@@ -110,7 +110,7 @@ public void return_tag() throws Exception {\n     RuleDefinitionDto r = dbTester.rules().insert(setSystemTags());\n     ruleIndexer.commitAndIndex(dbTester.getSession(), r.getKey());\n     dbTester.rules().insertOrUpdateMetadata(r, organization, setTags(\"tag\"));\n-    ruleIndexer.commitAndIndex(dbTester.getSession(), organization, r.getKey());\n+    ruleIndexer.commitAndIndex(dbTester.getSession(), r.getKey(), organization);\n \n     String result = tester.newRequest().setParam(\"organization\", organization.getKey()).execute().getInput();\n     assertJson(result).isSimilarTo(\"{\\\"tags\\\":[\\\"tag\\\"]}\");"
    },
    {
        "commit_id": "44023b33d97d874e79ecd11efe745f004063e8b7",
        "commit_message": "Fix tests on Windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44023b33d97d874e79ecd11efe745f004063e8b7",
        "buggy_code": "assertThat(inputFile.absolutePath()).isEqualTo(filePath.toString());",
        "fixed_code": "assertThat(inputFile.absolutePath()).isEqualTo(filePath.toString().replaceAll(\"\\\\\\\\\", \"/\"));",
        "patch": "@@ -64,7 +64,7 @@ public void testBuild() {\n     DefaultInputFile inputFile = builder.create(filePath, Type.MAIN, StandardCharsets.UTF_8);\n \n     assertThat(inputFile.moduleKey()).isEqualTo(\"module1\");\n-    assertThat(inputFile.absolutePath()).isEqualTo(filePath.toString());\n+    assertThat(inputFile.absolutePath()).isEqualTo(filePath.toString().replaceAll(\"\\\\\\\\\", \"/\"));\n     assertThat(inputFile.key()).isEqualTo(\"module1:src/File1.xoo\");\n     assertThat(inputFile.publish()).isFalse();\n   }"
    },
    {
        "commit_id": "cf0653f726df89776688bb25ca8a3b34dec685ec",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cf0653f726df89776688bb25ca8a3b34dec685ec",
        "buggy_code": "List<ProjectDefinition> hierarchy = MutableModuleSettings.getTopDownParentProjects(child);",
        "fixed_code": "List<ProjectDefinition> hierarchy = ModuleSettingsProvider.getTopDownParentProjects(child);",
        "patch": "@@ -76,7 +76,7 @@ public void testOrderedProjects() {\n     grandParent.addSubProject(parent);\n     parent.addSubProject(child);\n \n-    List<ProjectDefinition> hierarchy = MutableModuleSettings.getTopDownParentProjects(child);\n+    List<ProjectDefinition> hierarchy = ModuleSettingsProvider.getTopDownParentProjects(child);\n     assertThat(hierarchy.get(0)).isEqualTo(grandParent);\n     assertThat(hierarchy.get(1)).isEqualTo(parent);\n     assertThat(hierarchy.get(2)).isEqualTo(child);"
    },
    {
        "commit_id": "079e4f78e76c9043243d41f0d60dd9996467a809",
        "commit_message": "Fix excepted time of perf test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/079e4f78e76c9043243d41f0d60dd9996467a809",
        "buggy_code": "perfRule.assertDurationAround(Long.valueOf(prof.getProperty(\"Xoo Highlighting Sensor\")), 9700L);",
        "fixed_code": "perfRule.assertDurationAround(Long.valueOf(prof.getProperty(\"Xoo Highlighting Sensor\")), 8900L);",
        "patch": "@@ -100,7 +100,7 @@ public void computeSyntaxHighlightingOnBigFiles() throws IOException {\n     perfRule.assertDurationAround(MavenLogs.extractTotalTime(result.getLogs()), 25700L);\n \n     Properties prof = readProfiling(baseDir, \"highlighting\");\n-    perfRule.assertDurationAround(Long.valueOf(prof.getProperty(\"Xoo Highlighting Sensor\")), 9700L);\n+    perfRule.assertDurationAround(Long.valueOf(prof.getProperty(\"Xoo Highlighting Sensor\")), 8900L);\n \n   }\n }"
    },
    {
        "commit_id": "90e2bc7b5149d2d64a1987a11cf50dfce1b8457d",
        "commit_message": "SONAR-9489 fix routing of docs in index rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/90e2bc7b5149d2d64a1987a11cf50dfce1b8457d",
        "buggy_code": "return null;",
        "fixed_code": "return getRuleKey().toString();",
        "patch": "@@ -44,7 +44,7 @@ public String getId() {\n \n   @Override\n   public String getRouting() {\n-    return null;\n+    return getRuleKey().toString();\n   }\n \n   @Override"
    },
    {
        "commit_id": "71531284395e2d0f674a2942235b78974dd9a35f",
        "commit_message": "Fix Selenium ITs that were using bundle 'admin' user\n\nThe 'admin' user is replaced by a new random admin user in order to avoid the onboarding tutorial to be displayed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71531284395e2d0f674a2942235b78974dd9a35f",
        "buggy_code": "ProjectsPage page = nav.logIn().asAdmin().openProjects(organization.getKey());",
        "fixed_code": "ProjectsPage page = nav.openProjects(organization.getKey());",
        "patch": "@@ -86,7 +86,7 @@ public void should_display_leak_information() {\n     analyzeProject(projectKey1, \"shared/xoo-sample\", null);\n \n     // Check the facets and project cards\n-    ProjectsPage page = nav.logIn().asAdmin().openProjects(organization.getKey());\n+    ProjectsPage page = nav.openProjects(organization.getKey());\n     page.changePerspective(\"Leak\");\n     assertThat(url()).endsWith(\"/projects?view=leak\");\n     page.shouldHaveTotal(2);"
    },
    {
        "commit_id": "b1984e97578c194302e40377e0b67b82df85c513",
        "commit_message": "Replace 'AnyOne' by 'Anyone' in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1984e97578c194302e40377e0b67b82df85c513",
        "buggy_code": "\"No permission can be granted to AnyOne on a private component\");",
        "fixed_code": "\"No permission can be granted to Anyone on a private component\");",
        "patch": "@@ -83,7 +83,7 @@ private static void ensureConsistencyWithVisibility(GroupPermissionChange change\n       .ifPresent(projectId -> {\n         checkRequest(\n           !isAttemptToAddPermissionToAnyoneOnPrivateComponent(change, projectId),\n-          \"No permission can be granted to AnyOne on a private component\");\n+          \"No permission can be granted to Anyone on a private component\");\n         checkRequest(\n           !isAttemptToRemovePublicPermissionFromPublicComponent(change, projectId),\n           \"Permission %s can't be removed from a public component\", change.getPermission());"
    },
    {
        "commit_id": "b1984e97578c194302e40377e0b67b82df85c513",
        "commit_message": "Replace 'AnyOne' by 'Anyone' in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1984e97578c194302e40377e0b67b82df85c513",
        "buggy_code": "assertThat(e).hasMessage(\"No permission can be granted to AnyOne on a private component\");",
        "fixed_code": "assertThat(e).hasMessage(\"No permission can be granted to Anyone on a private component\");",
        "patch": "@@ -91,7 +91,7 @@ public void apply_fails_with_BadRequestException_when_adding_any_permission_to_g\n           apply(new GroupPermissionChange(PermissionChange.Operation.ADD, perm, new ProjectId(privateProject), anyOneGroupId));\n           fail(\"a BadRequestException should have been thrown\");\n         } catch (BadRequestException e) {\n-          assertThat(e).hasMessage(\"No permission can be granted to AnyOne on a private component\");\n+          assertThat(e).hasMessage(\"No permission can be granted to Anyone on a private component\");\n         }\n       });\n   }"
    },
    {
        "commit_id": "b1984e97578c194302e40377e0b67b82df85c513",
        "commit_message": "Replace 'AnyOne' by 'Anyone' in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1984e97578c194302e40377e0b67b82df85c513",
        "buggy_code": "assertThat(e).hasMessage(\"No permission can be granted to AnyOne on a private component\");",
        "fixed_code": "assertThat(e).hasMessage(\"No permission can be granted to Anyone on a private component\");",
        "patch": "@@ -377,7 +377,7 @@ public void fails_when_adding_any_permission_to_group_AnyOne_on_a_private_projec\n             .execute();\n           fail(\"a BadRequestException should have been raised for \" + permission);\n         } catch (BadRequestException e) {\n-          assertThat(e).hasMessage(\"No permission can be granted to AnyOne on a private component\");\n+          assertThat(e).hasMessage(\"No permission can be granted to Anyone on a private component\");\n         }\n       });\n   }"
    },
    {
        "commit_id": "f410dd2ba64a1b4047bb0d62a71520bfe4c8f1eb",
        "commit_message": "SONAR-9387 Fix usage of /dashboard/index/<PROJECT_KEY> in notification\n\nReplace usage of /dashboard/index/<PROJECT_KEY> by /dashboard?id=<PROJECT_KEY>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f410dd2ba64a1b4047bb0d62a71520bfe4c8f1eb",
        "buggy_code": "assertThat((String) message.getContent()).contains(\"/dashboard/index/sample\");",
        "fixed_code": "assertThat((String) message.getContent()).contains(\"/dashboard?id=sample\");",
        "patch": "@@ -137,7 +137,7 @@ public void status_on_metric_variation_and_send_notifications() throws Exception\n     assertThat(message.getHeader(\"To\", null)).isEqualTo(\"<tester@example.org>\");\n     assertThat((String) message.getContent()).contains(\"Quality gate status: Orange (was Green)\");\n     assertThat((String) message.getContent()).contains(\"Quality gate threshold: Lines of Code variation = 0 since previous analysis\");\n-    assertThat((String) message.getContent()).contains(\"/dashboard/index/sample\");\n+    assertThat((String) message.getContent()).contains(\"/dashboard?id=sample\");\n     assertThat(emails.hasNext()).isFalse();\n   }\n "
    },
    {
        "commit_id": "f410dd2ba64a1b4047bb0d62a71520bfe4c8f1eb",
        "commit_message": "SONAR-9387 Fix usage of /dashboard/index/<PROJECT_KEY> in notification\n\nReplace usage of /dashboard/index/<PROJECT_KEY> by /dashboard?id=<PROJECT_KEY>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f410dd2ba64a1b4047bb0d62a71520bfe4c8f1eb",
        "buggy_code": "messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"/dashboard/index/\").append(projectKey);",
        "fixed_code": "messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"/dashboard?id=\").append(projectKey);",
        "patch": "@@ -99,7 +99,7 @@ private String generateMessageBody(String projectName, String projectKey, String\n       }\n     }\n \n-    messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"/dashboard/index/\").append(projectKey);\n+    messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"/dashboard?id=\").append(projectKey);\n \n     return messageBody.toString();\n   }"
    },
    {
        "commit_id": "71a8cb1e5fd5edcf8b96539c4f49e7648fc1adbd",
        "commit_message": "SONAR-8061 speed up edit issue comment removing duplicate SQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71a8cb1e5fd5edcf8b96539c4f49e7648fc1adbd",
        "buggy_code": "responseWriter.write(issueDto.getKey(), request, response);",
        "fixed_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);",
        "patch": "@@ -100,7 +100,7 @@ public void handle(Request request, Response response) {\n         .peek(updateComment(dbSession))\n         .collect(MoreCollectors.toOneElement())\n         .getIssueDto();\n-      responseWriter.write(issueDto.getKey(), request, response);\n+      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);\n     }\n   }\n "
    },
    {
        "commit_id": "f3aae4bbd59805922341a763aada92904a908046",
        "commit_message": "SONAR-8061 speed up remove issue comment removing duplicate SQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f3aae4bbd59805922341a763aada92904a908046",
        "buggy_code": "responseWriter.write(issueDto.getKey(), request, response);",
        "fixed_code": "responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);",
        "patch": "@@ -89,7 +89,7 @@ public void handle(Request request, Response response) {\n         .peek(deleteComment(dbSession))\n         .collect(MoreCollectors.toOneElement())\n         .getIssueDto();\n-      responseWriter.write(issueDto.getKey(), request, response);\n+      responseWriter.write(issueDto.getKey(), new SearchResponseData(issueDto), request, response);\n     }\n   }\n "
    },
    {
        "commit_id": "a277d41eb8cbf9d59f0d6100065bbde3ac93e29e",
        "commit_message": "fix fix FP in SupportPrivateProjectInDefaultPermissionTemplateTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a277d41eb8cbf9d59f0d6100065bbde3ac93e29e",
        "buggy_code": "String random = RandomStringUtils.randomAscii(20);",
        "fixed_code": "String random = RandomStringUtils.randomAlphanumeric(20);",
        "patch": "@@ -251,7 +251,7 @@ private int insertGroup(String organizationUuid) {\n   }\n \n   private IdAndUuid insertPermissionTemplate(String organizationUuid) {\n-    String random = RandomStringUtils.randomAscii(20);\n+    String random = RandomStringUtils.randomAlphanumeric(20);\n     String uuid = \"ptUuid\" + random;\n     db.executeInsert(\n       \"PERMISSION_TEMPLATES\","
    },
    {
        "commit_id": "fbb0ea8cc6de8057b82ac842e1eadeaa13624ad3",
        "commit_message": "Fix false-positive in SupportPrivateProjectInDefaultPermissionTemplateTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbb0ea8cc6de8057b82ac842e1eadeaa13624ad3",
        "buggy_code": "String random = RandomStringUtils.random(20);",
        "fixed_code": "String random = RandomStringUtils.randomAscii(20);",
        "patch": "@@ -251,7 +251,7 @@ private int insertGroup(String organizationUuid) {\n   }\n \n   private IdAndUuid insertPermissionTemplate(String organizationUuid) {\n-    String random = RandomStringUtils.random(20);\n+    String random = RandomStringUtils.randomAscii(20);\n     String uuid = \"ptUuid\" + random;\n     db.executeInsert(\n       \"PERMISSION_TEMPLATES\","
    },
    {
        "commit_id": "4778559f1a0300c0353a6975284f4469a9b9ae3c",
        "commit_message": "Automatic merge from branch-6.4\n\n* origin/branch-6.4:\n  SONAR-8902 fix creation of table organization_members on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4778559f1a0300c0353a6975284f4469a9b9ae3c",
        "buggy_code": ".addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).setIgnoreOracleUnit(true).build())",
        "fixed_code": ".addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).build())",
        "patch": "@@ -41,7 +41,7 @@ public CreateOrganizationMembersTable(Database db) {\n   public void execute(Context context) throws SQLException {\n     context.execute(\n       new CreateTableBuilder(getDialect(), TABLE_NAME)\n-        .addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).setIgnoreOracleUnit(true).build())\n+        .addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).build())\n         .addPkColumn(newIntegerColumnDefBuilder().setColumnName(\"user_id\").setIsNullable(false).build())\n         .build());\n   }"
    },
    {
        "commit_id": "3a814ce83039f6bbf1dc01640c2a264cd62eb0eb",
        "commit_message": "SONAR-8902 fix creation of table organization_members on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a814ce83039f6bbf1dc01640c2a264cd62eb0eb",
        "buggy_code": ".addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).setIgnoreOracleUnit(true).build())",
        "fixed_code": ".addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).build())",
        "patch": "@@ -41,7 +41,7 @@ public CreateOrganizationMembersTable(Database db) {\n   public void execute(Context context) throws SQLException {\n     context.execute(\n       new CreateTableBuilder(getDialect(), TABLE_NAME)\n-        .addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).setIgnoreOracleUnit(true).build())\n+        .addPkColumn(newVarcharColumnDefBuilder().setColumnName(\"organization_uuid\").setLimit(UUID_SIZE).setIsNullable(false).build())\n         .addPkColumn(newIntegerColumnDefBuilder().setColumnName(\"user_id\").setIsNullable(false).build())\n         .build());\n   }"
    },
    {
        "commit_id": "88b3c97acd9154a1dc16bd1e158a02f2020ca6c8",
        "commit_message": "Automatic merge from branch-6.4\n\n* origin/branch-6.4:\n  Disable AEM Rules plugin\n  SONAR-9287 Fix limited number of returned permissions in api/permissions/users\n  SONAR-9287 Refactor unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/88b3c97acd9154a1dc16bd1e158a02f2020ca6c8",
        "buggy_code": "return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);",
        "fixed_code": "return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);",
        "patch": "@@ -224,6 +224,6 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n \n   private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();\n-    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);\n+    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);\n   }\n }"
    },
    {
        "commit_id": "88b3c97acd9154a1dc16bd1e158a02f2020ca6c8",
        "commit_message": "Automatic merge from branch-6.4\n\n* origin/branch-6.4:\n  Disable AEM Rules plugin\n  SONAR-9287 Fix limited number of returned permissions in api/permissions/users\n  SONAR-9287 Refactor unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/88b3c97acd9154a1dc16bd1e158a02f2020ca6c8",
        "buggy_code": "return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);",
        "fixed_code": "return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);",
        "patch": "@@ -263,6 +263,6 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n \n   private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();\n-    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);\n+    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);\n   }\n }"
    },
    {
        "commit_id": "f91190bf830b3f79fb30a74b087d89dba213762d",
        "commit_message": "SONAR-9287 Fix limited number of returned permissions in api/permissions/users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f91190bf830b3f79fb30a74b087d89dba213762d",
        "buggy_code": "return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);",
        "fixed_code": "return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);",
        "patch": "@@ -224,6 +224,6 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n \n   private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();\n-    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);\n+    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);\n   }\n }"
    },
    {
        "commit_id": "f91190bf830b3f79fb30a74b087d89dba213762d",
        "commit_message": "SONAR-9287 Fix limited number of returned permissions in api/permissions/users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f91190bf830b3f79fb30a74b087d89dba213762d",
        "buggy_code": "return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);",
        "fixed_code": "return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);",
        "patch": "@@ -263,6 +263,6 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n \n   private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();\n-    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);\n+    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);\n   }\n }"
    },
    {
        "commit_id": "475d7778205c434408960be041b52013acfc7ee0",
        "commit_message": "Automatic merge from branch-6.4\n\n* origin/branch-6.4:\n  SONAR-8748 fix typo in UnauthorizedException message\n  SONAR-8888 use DefinedQProfileInsert when creating an organization\n  clear issues selection when refreshing list",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/475d7778205c434408960be041b52013acfc7ee0",
        "buggy_code": "throw new UnauthorizedException(\"User is not authenticate\");",
        "fixed_code": "throw new UnauthorizedException(\"User is not authenticated\");",
        "patch": "@@ -40,7 +40,7 @@ public UserSession get() {\n     if (session != null) {\n       return session;\n     }\n-    throw new UnauthorizedException(\"User is not authenticate\");\n+    throw new UnauthorizedException(\"User is not authenticated\");\n   }\n \n   public void set(UserSession session) {"
    },
    {
        "commit_id": "f89e8102eb8c01a417a9a3fa2a046dcaba18f7d2",
        "commit_message": "SONAR-8748 fix typo in UnauthorizedException message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f89e8102eb8c01a417a9a3fa2a046dcaba18f7d2",
        "buggy_code": "throw new UnauthorizedException(\"User is not authenticate\");",
        "fixed_code": "throw new UnauthorizedException(\"User is not authenticated\");",
        "patch": "@@ -40,7 +40,7 @@ public UserSession get() {\n     if (session != null) {\n       return session;\n     }\n-    throw new UnauthorizedException(\"User is not authenticate\");\n+    throw new UnauthorizedException(\"User is not authenticated\");\n   }\n \n   public void set(UserSession session) {"
    },
    {
        "commit_id": "598cfa5db10725b14821c33826c3a55f63aa1243",
        "commit_message": "Automatic merge from branch-6.4\n\n* origin/branch-6.4:\n  Fix stability of perf test ComputationTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/598cfa5db10725b14821c33826c3a55f63aa1243",
        "buggy_code": "assertComputationDurationAround(340000L);",
        "fixed_code": "assertComputationDurationAround(350_000L);",
        "patch": "@@ -75,7 +75,7 @@ public void analyse_big_project() throws Exception {\n \n     orchestrator.executeBuild(scanner);\n \n-    assertComputationDurationAround(340000L);\n+    assertComputationDurationAround(350_000L);\n   }\n \n   private void assertComputationDurationAround(long expectedDuration) throws IOException {"
    },
    {
        "commit_id": "03d2f36c8ebf9a4161cc63623d49b204d6df0891",
        "commit_message": "Fix stability of perf test ComputationTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/03d2f36c8ebf9a4161cc63623d49b204d6df0891",
        "buggy_code": "assertComputationDurationAround(340000L);",
        "fixed_code": "assertComputationDurationAround(350_000L);",
        "patch": "@@ -75,7 +75,7 @@ public void analyse_big_project() throws Exception {\n \n     orchestrator.executeBuild(scanner);\n \n-    assertComputationDurationAround(340000L);\n+    assertComputationDurationAround(350_000L);\n   }\n \n   private void assertComputationDurationAround(long expectedDuration) throws IOException {"
    },
    {
        "commit_id": "fff73903632519aa70356279a77e8cae2e50db05",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fff73903632519aa70356279a77e8cae2e50db05",
        "buggy_code": "private String readInputStream(String filePath, InputStream input) {",
        "fixed_code": "private static String readInputStream(String filePath, InputStream input) {",
        "patch": "@@ -210,7 +210,7 @@ String messageFromFile(Locale locale, String filename, String relatedProperty) {\n     return result;\n   }\n \n-  private String readInputStream(String filePath, InputStream input) {\n+  private static String readInputStream(String filePath, InputStream input) {\n     String result;\n     try {\n       result = IOUtils.toString(input, \"UTF-8\");"
    },
    {
        "commit_id": "fff73903632519aa70356279a77e8cae2e50db05",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fff73903632519aa70356279a77e8cae2e50db05",
        "buggy_code": "this.moduleBaseDir = moduleBaseDir.normalize().toRealPath(new LinkOption[] {LinkOption.NOFOLLOW_LINKS});",
        "fixed_code": "this.moduleBaseDir = moduleBaseDir.normalize().toRealPath(LinkOption.NOFOLLOW_LINKS);",
        "patch": "@@ -112,7 +112,7 @@ public static int nextBatchId() {\n \n   public TestInputFileBuilder setModuleBaseDir(Path moduleBaseDir) {\n     try {\n-      this.moduleBaseDir = moduleBaseDir.normalize().toRealPath(new LinkOption[] {LinkOption.NOFOLLOW_LINKS});\n+      this.moduleBaseDir = moduleBaseDir.normalize().toRealPath(LinkOption.NOFOLLOW_LINKS);\n     } catch (IOException e) {\n       this.moduleBaseDir = moduleBaseDir.normalize();\n     }"
    },
    {
        "commit_id": "474a8d844d38d7fa47beadea7acf62f35f698d92",
        "commit_message": "Fix safeguard timeout in IT RestartTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/474a8d844d38d7fa47beadea7acf62f35f698d92",
        "buggy_code": "public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(60));",
        "fixed_code": "public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(900));",
        "patch": "@@ -51,7 +51,7 @@ public class RestartTest {\n   @Rule\n   public ExpectedException thrown = ExpectedException.none();\n   @Rule\n-  public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(60));\n+  public TestRule safeguardTimeout = new DisableOnDebug(Timeout.seconds(900));\n \n   @After\n   public void stop() {"
    },
    {
        "commit_id": "996eaef682bd9e8b630e50e2f899a61e6ac64e68",
        "commit_message": "fix project visibility of projects, created by ComponentDbTester",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/996eaef682bd9e8b630e50e2f899a61e6ac64e68",
        "buggy_code": "return insertComponentImpl(newPublicProjectDto(organizationDto), true, dtoPopulators);",
        "fixed_code": "return insertComponentImpl(newPublicProjectDto(organizationDto), false, dtoPopulators);",
        "patch": "@@ -90,7 +90,7 @@ public final ComponentDto insertPrivateProject(OrganizationDto organizationDto,\n \n   @SafeVarargs\n   public final ComponentDto insertPublicProject(OrganizationDto organizationDto, Consumer<ComponentDto>... dtoPopulators) {\n-    return insertComponentImpl(newPublicProjectDto(organizationDto), true, dtoPopulators);\n+    return insertComponentImpl(newPublicProjectDto(organizationDto), false, dtoPopulators);\n   }\n \n   public ComponentDto insertPrivateProject(OrganizationDto organizationDto) {"
    },
    {
        "commit_id": "68acdc5ba2456d2a7b871a1c8f85eebf246f175d",
        "commit_message": "SONAR-9084 auto issue assignment should deal with case sensitivity\n\n- login is case sensitive\n- email and scm accounts match whatever the case",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/68acdc5ba2456d2a7b871a1c8f85eebf246f175d",
        "buggy_code": "mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().build();",
        "fixed_code": "mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().addSubFields(SORTABLE_ANALYZER).build();",
        "patch": "@@ -62,7 +62,7 @@ public void define(IndexDefinitionContext context) {\n     mapping.createDateTimeField(FIELD_CREATED_AT);\n     mapping.createDateTimeField(FIELD_UPDATED_AT);\n     mapping.createBooleanField(FIELD_ACTIVE);\n-    mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().build();\n+    mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().addSubFields(SORTABLE_ANALYZER).build();\n     mapping.stringFieldBuilder(FIELD_ORGANIZATION_UUIDS).disableNorms().build();\n   }\n }"
    },
    {
        "commit_id": "d5beaea2e89b43e08d160dca12b54bde090b6fd0",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5beaea2e89b43e08d160dca12b54bde090b6fd0",
        "buggy_code": "private Map<String, List<DefinedQProfile>> toQualityProfilesByLanguage(ListMultimap<String, RulesProfile> rulesProfilesByLanguage) {",
        "fixed_code": "private static Map<String, List<DefinedQProfile>> toQualityProfilesByLanguage(ListMultimap<String, RulesProfile> rulesProfilesByLanguage) {",
        "patch": "@@ -119,7 +119,7 @@ private void validateAndClean(ListMultimap<String, RulesProfile> byLang) {\n       });\n   }\n \n-  private Map<String, List<DefinedQProfile>> toQualityProfilesByLanguage(ListMultimap<String, RulesProfile> rulesProfilesByLanguage) {\n+  private static Map<String, List<DefinedQProfile>> toQualityProfilesByLanguage(ListMultimap<String, RulesProfile> rulesProfilesByLanguage) {\n     Map<String, List<DefinedQProfile.Builder>> buildersByLanguage = Multimaps.asMap(rulesProfilesByLanguage)\n       .entrySet()\n       .stream()"
    },
    {
        "commit_id": "0274020f896128cbb59e4b716ab9e998011ea3b6",
        "commit_message": "SONAR-9002 Fix incorrect message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0274020f896128cbb59e4b716ab9e998011ea3b6",
        "buggy_code": "LOG.info(\"Waiting for initialization from \" + appState.getLeaderHostName());",
        "fixed_code": "LOG.info(\"Waiting for initialization from \" + leader.get());",
        "patch": "@@ -121,7 +121,7 @@ private void tryToStartWeb() {\n     } else {\n       Optional<String> leader = appState.getLeaderHostName();\n       if (leader.isPresent()) {\n-        LOG.info(\"Waiting for initialization from \" + appState.getLeaderHostName());\n+        LOG.info(\"Waiting for initialization from \" + leader.get());\n       } else {\n         LOG.error(\"Initialization failed. All nodes must be restarted\");\n       }"
    },
    {
        "commit_id": "a1e24b5dc9b1ab138e584e9ef4faeec8f6cb6701",
        "commit_message": "SONAR-9155 Fix HTTPS proxy authentication",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1e24b5dc9b1ab138e584e9ef4faeec8f6cb6701",
        "buggy_code": "if (!System.getProperty(\"http.proxyHost\", \"\").isEmpty() && !proxyUser.isEmpty()) {",
        "fixed_code": "if (!proxyUser.isEmpty()) {",
        "patch": "@@ -55,7 +55,7 @@ public synchronized ScannerWsClient provide(final GlobalProperties settings, fin\n \n       // OkHttp detect 'http.proxyHost' java property, but credentials should be filled\n       final String proxyUser = System.getProperty(\"http.proxyUser\", \"\");\n-      if (!System.getProperty(\"http.proxyHost\", \"\").isEmpty() && !proxyUser.isEmpty()) {\n+      if (!proxyUser.isEmpty()) {\n         connectorBuilder.proxyCredentials(proxyUser, System.getProperty(\"http.proxyPassword\"));\n       }\n "
    },
    {
        "commit_id": "36c9fa041018d7eed91f1d22e0c5eda075737ebc",
        "commit_message": "SONAR-9075 fix quality flaws: ComponentIndexQuery#limit is not nullable",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/36c9fa041018d7eed91f1d22e0c5eda075737ebc",
        "buggy_code": "import static org.sonar.server.component.ws.SuggestionsAction.DEFAULT_LIMIT;",
        "fixed_code": "import static org.sonar.server.component.index.ComponentIndexQuery.DEFAULT_LIMIT;",
        "patch": "@@ -60,7 +60,7 @@\n import static org.mockito.Mockito.mock;\n import static org.sonar.db.component.ComponentTesting.newModuleDto;\n import static org.sonar.db.component.ComponentTesting.newProjectDto;\n-import static org.sonar.server.component.ws.SuggestionsAction.DEFAULT_LIMIT;\n+import static org.sonar.server.component.index.ComponentIndexQuery.DEFAULT_LIMIT;\n import static org.sonar.server.component.ws.SuggestionsAction.EXTENDED_LIMIT;\n import static org.sonar.server.component.ws.SuggestionsAction.SHORT_INPUT_WARNING;\n import static org.sonar.server.component.ws.SuggestionsAction.PARAM_MORE;"
    },
    {
        "commit_id": "033ef4b80248b11a2551068039c217956b08dd3e",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/033ef4b80248b11a2551068039c217956b08dd3e",
        "buggy_code": "private RuleUpdater ruleUpdater = new RuleUpdater(dbClient, ruleIndexer, System2.INSTANCE, defaultOrganizationProvider);",
        "fixed_code": "private RuleUpdater ruleUpdater = new RuleUpdater(dbClient, ruleIndexer, System2.INSTANCE);",
        "patch": "@@ -85,7 +85,7 @@ public class UpdateActionTest {\n   private Languages languages = new Languages();\n   private RuleMapper mapper = new RuleMapper(languages, macroInterpreter);\n   private RuleIndexer ruleIndexer = new RuleIndexer(esClient, dbClient);\n-  private RuleUpdater ruleUpdater = new RuleUpdater(dbClient, ruleIndexer, System2.INSTANCE, defaultOrganizationProvider);\n+  private RuleUpdater ruleUpdater = new RuleUpdater(dbClient, ruleIndexer, System2.INSTANCE);\n   private RuleWsSupport ruleWsSupport = new RuleWsSupport(dbClient, userSession, defaultOrganizationProvider);\n   private WsAction underTest = new UpdateAction(dbClient, ruleUpdater, mapper, userSession, ruleWsSupport, defaultOrganizationProvider);\n   private WsActionTester actionTester = new WsActionTester(underTest);"
    },
    {
        "commit_id": "9514a73e07b0e05a207fc7ededee79710e822d49",
        "commit_message": "SONAR-9023 Fix ITs as 'user' now belongs to 'Members' group when being member of an organization",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9514a73e07b0e05a207fc7ededee79710e822d49",
        "buggy_code": ".shouldHaveGroups(1);",
        "fixed_code": ".shouldHaveGroups(2);",
        "patch": "@@ -225,7 +225,7 @@ public void admin_can_manage_groups() {\n       .manageGroupsOpen()\n       .manageGroupsSelect(\"owners\")\n       .manageGroupsSave()\n-      .shouldHaveGroups(1);\n+      .shouldHaveGroups(2);\n     // admin user\n     page.getMembersByIdx(0)\n       .manageGroupsOpen()"
    },
    {
        "commit_id": "9514a73e07b0e05a207fc7ededee79710e822d49",
        "commit_message": "SONAR-9023 Fix ITs as 'user' now belongs to 'Members' group when being member of an organization",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9514a73e07b0e05a207fc7ededee79710e822d49",
        "buggy_code": "assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName);",
        "fixed_code": "assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName, \"Members\");",
        "patch": "@@ -369,7 +369,7 @@ public void return_groups_belonging_to_a_user_on_an_organization() throws Except\n     List<WsUsers.GroupsWsResponse.Group> result = adminClient.users().groups(\n       GroupsRequest.builder().setLogin(userLogin).setOrganization(KEY).build()).getGroupsList();\n \n-    assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName);\n+    assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName, \"Members\");\n   }\n \n   private WsComponents.SearchWsResponse searchSampleProject(String organizationKey, ComponentsService componentsService) {"
    },
    {
        "commit_id": "bf07e0fb2e61910e83cc098afc1eaeaa75fa6acf",
        "commit_message": "SONAR-9016 Fix example file names in user groups WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf07e0fb2e61910e83cc098afc1eaeaa75fa6acf",
        "buggy_code": ".setResponseExample(getClass().getResource(\"example-create.json\"))",
        "fixed_code": ".setResponseExample(getClass().getResource(\"create-example.json\"))",
        "patch": "@@ -59,7 +59,7 @@ public void define(NewController controller) {\n         \"Requires the following permission: 'Administer System'.\")\n       .setHandler(this)\n       .setPost(true)\n-      .setResponseExample(getClass().getResource(\"example-create.json\"))\n+      .setResponseExample(getClass().getResource(\"create-example.json\"))\n       .setSince(\"5.2\");\n \n     action.createParam(PARAM_ORGANIZATION_KEY)"
    },
    {
        "commit_id": "bf07e0fb2e61910e83cc098afc1eaeaa75fa6acf",
        "commit_message": "SONAR-9016 Fix example file names in user groups WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf07e0fb2e61910e83cc098afc1eaeaa75fa6acf",
        "buggy_code": ".setResponseExample(getClass().getResource(\"example-update.json\"))",
        "fixed_code": ".setResponseExample(getClass().getResource(\"update.example.json\"))",
        "patch": "@@ -65,7 +65,7 @@ public void define(NewController context) {\n         \"Requires the following permission: 'Administer System'.\")\n       .setHandler(this)\n       .setPost(true)\n-      .setResponseExample(getClass().getResource(\"example-update.json\"))\n+      .setResponseExample(getClass().getResource(\"update.example.json\"))\n       .setSince(\"5.2\")\n       .setChangelog(new Change(\"6.4\", \"The default group is no longer editable\"));\n "
    },
    {
        "commit_id": "d019e89214bbc7024f8142c46153e884ccbd078c",
        "commit_message": "SONAR-9129 fix some glitches in doc of api/qualityprofiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d019e89214bbc7024f8142c46153e884ccbd078c",
        "buggy_code": ".setDescription(\"Quality Profile Key. To retrieve a profile key for a given language please see the api/qprofiles documentation\")",
        "fixed_code": ".setDescription(\"Quality Profile Key. To retrieve a profile key for a given language please see the api/qualityprofiles documentation\")",
        "patch": "@@ -66,7 +66,7 @@ public void define(WebService.NewController controller) {\n     defineRuleSearchParameters(activate);\n \n     activate.createParam(PROFILE_KEY)\n-      .setDescription(\"Quality Profile Key. To retrieve a profile key for a given language please see the api/qprofiles documentation\")\n+      .setDescription(\"Quality Profile Key. To retrieve a profile key for a given language please see the api/qualityprofiles documentation\")\n       .setRequired(true)\n       .setExampleValue(\"java:MyProfile\");\n "
    },
    {
        "commit_id": "d019e89214bbc7024f8142c46153e884ccbd078c",
        "commit_message": "SONAR-9129 fix some glitches in doc of api/qualityprofiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d019e89214bbc7024f8142c46153e884ccbd078c",
        "buggy_code": ".setDescription(\"Key of Quality profile, can be obtained through <code>api/profiles/list</code>\")",
        "fixed_code": ".setDescription(\"Key of Quality profile, can be obtained through <code>api/qualityprofiles/search</code>\")",
        "patch": "@@ -59,7 +59,7 @@ public void define(WebService.NewController controller) {\n       .setSince(\"4.4\");\n \n     deactivate.createParam(PARAM_PROFILE_KEY)\n-      .setDescription(\"Key of Quality profile, can be obtained through <code>api/profiles/list</code>\")\n+      .setDescription(\"Key of Quality profile, can be obtained through <code>api/qualityprofiles/search</code>\")\n       .setRequired(true)\n       .setExampleValue(Uuids.UUID_EXAMPLE_01);\n "
    },
    {
        "commit_id": "2f5d9eaccf74c99481b284a2a30016fe600978fc",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f5d9eaccf74c99481b284a2a30016fe600978fc",
        "buggy_code": "private ProjectMeasuresIndexerIterator(PreparedStatement measuresStatement, Map<Long, String> metricKeysByIds, List<Project> projects) throws SQLException {",
        "fixed_code": "private ProjectMeasuresIndexerIterator(PreparedStatement measuresStatement, Map<Long, String> metricKeysByIds, List<Project> projects) {",
        "patch": "@@ -84,7 +84,7 @@ public class ProjectMeasuresIndexerIterator extends CloseableIterator<ProjectMea\n   private final Map<Long, String> metricKeysByIds;\n   private final Iterator<Project> projects;\n \n-  private ProjectMeasuresIndexerIterator(PreparedStatement measuresStatement, Map<Long, String> metricKeysByIds, List<Project> projects) throws SQLException {\n+  private ProjectMeasuresIndexerIterator(PreparedStatement measuresStatement, Map<Long, String> metricKeysByIds, List<Project> projects) {\n     this.measuresStatement = measuresStatement;\n     this.metricKeysByIds = metricKeysByIds;\n     this.projects = projects.iterator();"
    },
    {
        "commit_id": "2f5d9eaccf74c99481b284a2a30016fe600978fc",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f5d9eaccf74c99481b284a2a30016fe600978fc",
        "buggy_code": "assertThat(userDetails.toString()).isEqualTo(\"UserDetails{name=foo, email=foo@example.com, userId=foo@example}\");",
        "fixed_code": "assertThat(userDetails.toString()).isEqualTo(\"UserDetails{name='foo', email='foo@example.com', userId='foo@example'}\");",
        "patch": "@@ -74,6 +74,6 @@ public void toStringTest() {\n     userDetails.setEmail(\"foo@example.com\");\n     userDetails.setUserId(\"foo@example\");\n \n-    assertThat(userDetails.toString()).isEqualTo(\"UserDetails{name=foo, email=foo@example.com, userId=foo@example}\");\n+    assertThat(userDetails.toString()).isEqualTo(\"UserDetails{name='foo', email='foo@example.com', userId='foo@example'}\");\n   }\n }"
    },
    {
        "commit_id": "964fff7ca9f072e6e084c0fac605980f19bc0278",
        "commit_message": "SONAR-9025 Optimize computation issue exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/964fff7ca9f072e6e084c0fac605980f19bc0278",
        "buggy_code": "assertThat(buildResult.getLogs().indexOf(\"SonarException\")).isGreaterThan(0);",
        "fixed_code": "assertThat(buildResult.getLogs().indexOf(\"IllegalStateException\")).isGreaterThan(0);",
        "patch": "@@ -258,6 +258,6 @@ private void checkIssueCountBySeverity(int total, int taggedXoo, int perLine, in\n   private void checkAnalysisFails(String... properties) {\n     BuildResult buildResult = scan(properties);\n     assertThat(buildResult.getStatus()).isNotEqualTo(0);\n-    assertThat(buildResult.getLogs().indexOf(\"SonarException\")).isGreaterThan(0);\n+    assertThat(buildResult.getLogs().indexOf(\"IllegalStateException\")).isGreaterThan(0);\n   }\n }"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "private static final String INDEX = \"rules\";",
        "fixed_code": "static final String INDEX = \"rules\";",
        "patch": "@@ -38,7 +38,7 @@\n  */\n public class RuleIndexDefinition implements IndexDefinition {\n \n-  private static final String INDEX = \"rules\";\n+  static final String INDEX = \"rules\";\n \n   public static final IndexType INDEX_TYPE_RULE = new IndexType(INDEX, \"rule\");\n   public static final String FIELD_RULE_KEY = \"key\";"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "private RuleIndexer ruleIndexer = new RuleIndexer(tester.client(), null);",
        "fixed_code": "private RuleIndexer ruleIndexer = new RuleIndexer(tester.client(), null, null, null);",
        "patch": "@@ -95,7 +95,7 @@ public class IssueIndexTest {\n \n   private IssueIndexer issueIndexer = new IssueIndexer(tester.client(), new IssueIteratorFactory(null));\n   private ViewIndexer viewIndexer = new ViewIndexer(null, tester.client());\n-  private RuleIndexer ruleIndexer = new RuleIndexer(tester.client(), null);\n+  private RuleIndexer ruleIndexer = new RuleIndexer(tester.client(), null, null, null);\n   private PermissionIndexerTester authorizationIndexerTester = new PermissionIndexerTester(tester, issueIndexer);\n \n   private IssueIndex underTest = new IssueIndex(tester.client(), system2, userSessionRule, new AuthorizationTypeSupport(userSessionRule));"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "private RuleIndexer ruleIndexer = new RuleIndexer(es.client(), new RuleIteratorFactory(db.getDbClient()));",
        "fixed_code": "private RuleIndexer ruleIndexer = new RuleIndexer(es.client(), null, new RuleIteratorFactory(db.getDbClient()), null);",
        "patch": "@@ -63,7 +63,7 @@ public class TagsActionTest {\n   public EsTester es = new EsTester(new IssueIndexDefinition(new MapSettings()), new RuleIndexDefinition(new MapSettings()));\n \n   private IssueIndexer issueIndexer = new IssueIndexer(es.client(), new IssueIteratorFactory(db.getDbClient()));\n-  private RuleIndexer ruleIndexer = new RuleIndexer(es.client(), new RuleIteratorFactory(db.getDbClient()));\n+  private RuleIndexer ruleIndexer = new RuleIndexer(es.client(), null, new RuleIteratorFactory(db.getDbClient()), null);\n   private IssueIndex issueIndex = new IssueIndex(es.client(), System2.INSTANCE, userSession, new AuthorizationTypeSupport(userSession));\n \n   private WsActionTester tester = new WsActionTester(new TagsAction(issueIndex));"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "private RuleIndexer ruleIndexer = new RuleIndexer(esTester.client(), new RuleIteratorFactory(dbClient));",
        "fixed_code": "private RuleIndexer ruleIndexer = new RuleIndexer(esTester.client(), null, new RuleIteratorFactory(dbClient), null);",
        "patch": "@@ -94,7 +94,7 @@ public class CreateActionTest {\n   private DbSession dbSession = dbTester.getSession();\n   private RuleIndex ruleIndex = new RuleIndex(esTester.client());\n   private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(dbTester);\n-  private RuleIndexer ruleIndexer = new RuleIndexer(esTester.client(), new RuleIteratorFactory(dbClient));\n+  private RuleIndexer ruleIndexer = new RuleIndexer(esTester.client(), null, new RuleIteratorFactory(dbClient), null);\n   private ActiveRuleIndexer activeRuleIndexer = new ActiveRuleIndexer(system2, dbClient, esTester.client());\n   private ProfileImporter[] profileImporters = createImporters();\n   private QProfileExporters qProfileExporters = new QProfileExporters(dbClient, null,"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "ruleIndexer = new RuleIndexer(esClient, new RuleIteratorFactory(dbClient));",
        "fixed_code": "ruleIndexer = new RuleIndexer(esClient, null, new RuleIteratorFactory(dbClient), null);",
        "patch": "@@ -85,7 +85,7 @@ public void setUp() {\n     dbClient = dbTester.getDbClient();\n     dbSession = dbTester.getSession();\n     esClient = esTester.client();\n-    ruleIndexer = new RuleIndexer(esClient, new RuleIteratorFactory(dbClient));\n+    ruleIndexer = new RuleIndexer(esClient, null, new RuleIteratorFactory(dbClient), null);\n     activeRuleIndexer = new ActiveRuleIndexer(System2.INSTANCE, dbClient, esClient);\n     TestDefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(dbTester);\n     underTest = new InheritanceAction("
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "ruleIndexer = new RuleIndexer(esTester.client(), new RuleIteratorFactory(dbClient));",
        "fixed_code": "ruleIndexer = new RuleIndexer(esTester.client(), null, new RuleIteratorFactory(dbClient), null);",
        "patch": "@@ -86,7 +86,7 @@ public class RegisterRulesTest {\n   @Before\n   public void before() {\n     when(system.now()).thenReturn(DATE1.getTime());\n-    ruleIndexer = new RuleIndexer(esTester.client(), new RuleIteratorFactory(dbClient));\n+    ruleIndexer = new RuleIndexer(esTester.client(), null, new RuleIteratorFactory(dbClient), null);\n     ruleIndex = new RuleIndex(esTester.client());\n     activeRuleIndexer = new ActiveRuleIndexer(system, dbClient, esTester.client());\n   }"
    },
    {
        "commit_id": "7b458e820fa2298aaeef3febac4467bc868965d5",
        "commit_message": "SONAR-8952 fix rules: initialize uninitialized indexes on startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b458e820fa2298aaeef3febac4467bc868965d5",
        "buggy_code": "ruleIndexer = new RuleIndexer(tester.client(), null);",
        "fixed_code": "ruleIndexer = new RuleIndexer(tester.client(), null, null, null);",
        "patch": "@@ -85,7 +85,7 @@ public class RuleIndexTest {\n \n   @Before\n   public void setUp() {\n-    ruleIndexer = new RuleIndexer(tester.client(), null);\n+    ruleIndexer = new RuleIndexer(tester.client(), null, null, null);\n     activeRuleIndexer = new ActiveRuleIndexer(system2, null, tester.client());\n     index = new RuleIndex(tester.client());\n   }"
    },
    {
        "commit_id": "eed2cfd2aba74022bf34884908beaf9c5f94e12b",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eed2cfd2aba74022bf34884908beaf9c5f94e12b",
        "buggy_code": "public MassUpdate prepareMassUpdate() throws SQLException {",
        "fixed_code": "public MassUpdate prepareMassUpdate() {",
        "patch": "@@ -76,7 +76,7 @@ public Upsert prepareUpsert(String sql) throws SQLException {\n       return UpsertImpl.create(writeConnection, sql);\n     }\n \n-    public MassUpdate prepareMassUpdate() throws SQLException {\n+    public MassUpdate prepareMassUpdate() {\n       return new MassUpdate(db, readConnection, writeConnection);\n     }\n   }"
    },
    {
        "commit_id": "eed2cfd2aba74022bf34884908beaf9c5f94e12b",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eed2cfd2aba74022bf34884908beaf9c5f94e12b",
        "buggy_code": "private static void truncateSchemaMigrations(String tableName, Statement ddlStatement, Connection connection) throws SQLException {",
        "fixed_code": "private static void truncateSchemaMigrations(String tableName, Statement ddlStatement, Connection connection) {",
        "patch": "@@ -211,7 +211,7 @@ private static void truncateInternalProperties(String tableName, Statement ddlSt\n   /**\n    * Data in SCHEMA_MIGRATIONS table is inserted when DB is created and should not be altered afterwards.\n    */\n-  private static void truncateSchemaMigrations(String tableName, Statement ddlStatement, Connection connection) throws SQLException {\n+  private static void truncateSchemaMigrations(String tableName, Statement ddlStatement, Connection connection) {\n     // do nothing\n   }\n "
    },
    {
        "commit_id": "1856d055923715759ed71a42ab1ff0deabf809f9",
        "commit_message": "Fix issues integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1856d055923715759ed71a42ab1ff0deabf809f9",
        "buggy_code": "public void bulk_assign_search_all_users_of_in_global_issues() {",
        "fixed_code": "public void bulk_assign_search_all_users_in_global_issues() {",
        "patch": "@@ -194,7 +194,7 @@ public void bulk_assign_search_only_members_of_organization_in_project_issues()\n   }\n \n   @Test\n-  public void bulk_assign_search_all_users_of_in_global_issues() {\n+  public void bulk_assign_search_all_users_in_global_issues() {\n     createOrganization(OTHER_ORGANIZATION_KEY);\n     userRule.createUser(ASSIGNEE_LOGIN, ASSIGNEE_LOGIN);\n     adminClient.organizations().addMember(ORGANIZATION_KEY, ASSIGNEE_LOGIN);"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "public void update(DbSession session, RuleMetadataDto dto) {",
        "fixed_code": "public void insertOrUpdate(DbSession session, RuleMetadataDto dto) {",
        "patch": "@@ -126,7 +126,7 @@ public void update(DbSession session, RuleDefinitionDto dto) {\n     mapper(session).updateDefinition(dto);\n   }\n \n-  public void update(DbSession session, RuleMetadataDto dto) {\n+  public void insertOrUpdate(DbSession session, RuleMetadataDto dto) {\n     if (mapper(session).countMetadata(dto) > 0) {\n       mapper(session).updateMetadata(dto);\n     } else {"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dto.setRule(RuleTesting.newDto(RuleKey.of(\"squid\", \"S001\")).setId(200));",
        "fixed_code": "dto.setRule(RuleTesting.newRule(RuleKey.of(\"squid\", \"S001\")).setId(200));",
        "patch": "@@ -126,7 +126,7 @@ private static IssueDto newIssueDto(String key) {\n     IssueDto dto = new IssueDto();\n     dto.setComponent(new ComponentDto().setKey(\"struts:Action\").setId(123L).setUuid(\"component-uuid\"));\n     dto.setProject(new ComponentDto().setKey(\"struts\").setId(100L).setUuid(\"project-uuid\"));\n-    dto.setRule(RuleTesting.newDto(RuleKey.of(\"squid\", \"S001\")).setId(200));\n+    dto.setRule(RuleTesting.newRule(RuleKey.of(\"squid\", \"S001\")).setId(200));\n     dto.setKee(key);\n     dto.setType(2);\n     dto.setLine(500);"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dbClient.ruleDao().update(dbSession, ruleMetadata);",
        "fixed_code": "dbClient.ruleDao().insertOrUpdate(dbSession, ruleMetadata);",
        "patch": "@@ -183,7 +183,7 @@ private RuleKey createCustomRule(RuleKey ruleKey, NewCustomRule newRule, RuleDto\n         .setTags(tags)\n         .setCreatedAt(system2.now())\n         .setUpdatedAt(system2.now());\n-      dbClient.ruleDao().update(dbSession, ruleMetadata);\n+      dbClient.ruleDao().insertOrUpdate(dbSession, ruleMetadata);\n     }\n \n     for (RuleParamDto templateRuleParamDto : dbClient.ruleDao().selectRuleParamsByRuleKey(dbSession, templateRuleDto.getKey())) {"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dbClient.ruleDao().update(session, rule.getMetadata());",
        "fixed_code": "dbClient.ruleDao().insertOrUpdate(session, rule.getMetadata());",
        "patch": "@@ -348,7 +348,7 @@ public void accept(@Nonnull ActiveRuleParamDto activeRuleParamDto) {\n   private void update(DbSession session, RuleDto rule) {\n     rule.setUpdatedAt(system.now());\n     dbClient.ruleDao().update(session, rule.getDefinition());\n-    dbClient.ruleDao().update(session, rule.getMetadata());\n+    dbClient.ruleDao().insertOrUpdate(session, rule.getMetadata());\n   }\n \n }"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "ruleDao.update(session, rule.getMetadata().setRuleId(rule.getId()));",
        "fixed_code": "ruleDao.insertOrUpdate(session, rule.getMetadata().setRuleId(rule.getId()));",
        "patch": "@@ -183,7 +183,7 @@ private RuleDto newRule(OrganizationDto organization, RuleDto rule) {\n     RuleDao ruleDao = tester.get(RuleDao.class);\n     ruleDao.insert(session, rule.getDefinition());\n     if (rule.getOrganizationUuid() != null) {\n-      ruleDao.update(session, rule.getMetadata().setRuleId(rule.getId()));\n+      ruleDao.insertOrUpdate(session, rule.getMetadata().setRuleId(rule.getId()));\n     }\n     session.commit();\n     ruleIndexer.index(organization, rule.getKey());"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dbClient.ruleDao().update(dbTester.getSession(), rule1.getMetadata());",
        "fixed_code": "dbClient.ruleDao().insertOrUpdate(dbTester.getSession(), rule1.getMetadata());",
        "patch": "@@ -190,7 +190,7 @@ public void update_and_remove_rules_on_changes() {\n     rule1.setTags(newHashSet(\"usertag1\", \"usertag2\"));\n     rule1.setNoteData(\"user *note*\");\n     rule1.setNoteUserLogin(\"marius\");\n-    dbClient.ruleDao().update(dbTester.getSession(), rule1.getMetadata());\n+    dbClient.ruleDao().insertOrUpdate(dbTester.getSession(), rule1.getMetadata());\n     dbTester.getSession().commit();\n \n     when(system.now()).thenReturn(DATE2.getTime());"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dao.update(dbSession, templateRule.getMetadata().setRuleId(templateRule.getId()));",
        "fixed_code": "dao.insertOrUpdate(dbSession, templateRule.getMetadata().setRuleId(templateRule.getId()));",
        "patch": "@@ -515,7 +515,7 @@ private RuleDto createTemplateRule() {\n       .setCreatedAt(new Date().getTime())\n       .setUpdatedAt(new Date().getTime());\n     dao.insert(dbSession, templateRule.getDefinition());\n-    dao.update(dbSession, templateRule.getMetadata().setRuleId(templateRule.getId()));\n+    dao.insertOrUpdate(dbSession, templateRule.getMetadata().setRuleId(templateRule.getId()));\n     RuleParamDto ruleParamDto = RuleParamDto.createFor(templateRule.getDefinition()).setName(\"regex\").setType(\"STRING\").setDescription(\"Reg ex\").setDefaultValue(\".*\");\n     dao.insertRuleParam(dbSession, templateRule.getDefinition(), ruleParamDto);\n     dbSession.commit();"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "dao.update(dbSession, ruleDto.getMetadata().setRuleId(ruleDto.getId()));",
        "fixed_code": "dao.insertOrUpdate(dbSession, ruleDto.getMetadata().setRuleId(ruleDto.getId()));",
        "patch": "@@ -116,7 +116,7 @@ public void listTags_returns_empty_results_if_filter_contains_regexp_special_cha\n   private void insertRule(RuleKey key, Set<String> tags, Set<String> systemTags) {\n     RuleDto ruleDto = RuleTesting.newDto(key, defaultOrganization).setTags(tags).setSystemTags(systemTags);\n     dao.insert(dbSession, ruleDto.getDefinition());\n-    dao.update(dbSession, ruleDto.getMetadata().setRuleId(ruleDto.getId()));\n+    dao.insertOrUpdate(dbSession, ruleDto.getMetadata().setRuleId(ruleDto.getId()));\n     dbSession.commit();\n     ruleIndexer.index(defaultOrganization, ruleDto.getKey());\n   }"
    },
    {
        "commit_id": "a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "commit_message": "Add convenient methods to rule/issue testing utilities",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0ce661a8c0d6674efc9091a5f5ab404ad315bfa",
        "buggy_code": "ruleDao.update(session, templateRule.getMetadata().setRuleId(templateRule.getId()));",
        "fixed_code": "ruleDao.insertOrUpdate(session, templateRule.getMetadata().setRuleId(templateRule.getId()));",
        "patch": "@@ -77,7 +77,7 @@ public void create_custom_rule() throws Exception {\n     // Template rule\n     RuleDto templateRule = RuleTesting.newTemplateRule(RuleKey.of(\"java\", \"S001\"), defaultOrganization);\n     ruleDao.insert(session, templateRule.getDefinition());\n-    ruleDao.update(session, templateRule.getMetadata().setRuleId(templateRule.getId()));\n+    ruleDao.insertOrUpdate(session, templateRule.getMetadata().setRuleId(templateRule.getId()));\n     RuleParamDto param = RuleParamDto.createFor(templateRule.getDefinition()).setName(\"regex\").setType(\"STRING\").setDescription(\"Reg ex\").setDefaultValue(\".*\");\n     ruleDao.insertRuleParam(session, templateRule.getDefinition(), param);\n     session.commit();"
    },
    {
        "commit_id": "664880695e4eaec6608c509cee5b29eca9cb695e",
        "commit_message": "SONAR-8951 fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/664880695e4eaec6608c509cee5b29eca9cb695e",
        "buggy_code": "responseBuilder.setRule(mapper.toWsRule(rule, searchResult, Collections.<String>emptySet()));",
        "fixed_code": "responseBuilder.setRule(mapper.toWsRule(rule, searchResult, Collections.emptySet()));",
        "patch": "@@ -120,7 +120,7 @@ public void handle(Request request, Response response) throws Exception {\n   private ShowResponse buildResponse(DbSession dbSession, Request request, SearchAction.SearchResult searchResult) {\n     ShowResponse.Builder responseBuilder = ShowResponse.newBuilder();\n     RuleDto rule = searchResult.getRules().get(0);\n-    responseBuilder.setRule(mapper.toWsRule(rule, searchResult, Collections.<String>emptySet()));\n+    responseBuilder.setRule(mapper.toWsRule(rule, searchResult, Collections.emptySet()));\n \n     if (request.mandatoryParamAsBoolean(PARAM_ACTIVES)) {\n       activeRuleCompleter.completeShow(dbSession, rule, responseBuilder);"
    },
    {
        "commit_id": "1521346134ebf279258703b8281c7810b6a0efdf",
        "commit_message": "SONAR-8842 Fix typo in api/components/search_projects description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1521346134ebf279258703b8281c7810b6a0efdf",
        "buggy_code": "\"Use the WS api/languages/list to find the key of a language.\" +",
        "fixed_code": "\"Use the WS api/languages/list to find the key of a language.<br> \" +",
        "patch": "@@ -157,7 +157,7 @@ public void define(WebService.NewController context) {\n         \" <li>to filter on a single language you can use 'language = java'</li>\" +\n         \" <li>to filter on several languages you must use 'language IN (java, js)'</li>\" +\n         \"</ul>\" +\n-        \"Use the WS api/languages/list to find the key of a language.\" +\n+        \"Use the WS api/languages/list to find the key of a language.<br> \" +\n         \"To filter on tags use the 'tag' keyword:\" +\n         \"<ul> \" +\n         \" <li>to filter on one tag you can use <code>tag = finance</code></li>\" +"
    },
    {
        "commit_id": "965e41166c68a64f1184cc64bd209ec2d0b0778d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/965e41166c68a64f1184cc64bd209ec2d0b0778d",
        "buggy_code": "private boolean isUserAlreadyMemberOfDefaultGroup(String defaultGroupName, String defOrgUuid, List<GroupDto> userGroups) {",
        "fixed_code": "private static boolean isUserAlreadyMemberOfDefaultGroup(String defaultGroupName, String defOrgUuid, List<GroupDto> userGroups) {",
        "patch": "@@ -401,7 +401,7 @@ private void addDefaultGroup(DbSession dbSession, UserDto userDto) {\n     dbClient.userGroupDao().insert(dbSession, new UserGroupDto().setUserId(userDto.getId()).setGroupId(groupDto.get().getId()));\n   }\n \n-  private boolean isUserAlreadyMemberOfDefaultGroup(String defaultGroupName, String defOrgUuid, List<GroupDto> userGroups) {\n+  private static boolean isUserAlreadyMemberOfDefaultGroup(String defaultGroupName, String defOrgUuid, List<GroupDto> userGroups) {\n     return userGroups.stream().anyMatch(g -> defOrgUuid.equals(g.getOrganizationUuid()) && g.getName().equals(defaultGroupName));\n   }\n "
    },
    {
        "commit_id": "29bcb44528a2bf2d1ac7aa7715f38f5164e498aa",
        "commit_message": "SONAR-8995 Scanner fails when using issue exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29bcb44528a2bf2d1ac7aa7715f38f5164e498aa",
        "buggy_code": "private static final String PRELOAD_FILE_METADATA_KEY = \"sonar.preloadFileMetadata\";",
        "fixed_code": "public static final String PRELOAD_FILE_METADATA_KEY = \"sonar.preloadFileMetadata\";",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.api.scan.filesystem.PathResolver;\n \n public class InputFileBuilder {\n-  private static final String PRELOAD_FILE_METADATA_KEY = \"sonar.preloadFileMetadata\";\n+  public static final String PRELOAD_FILE_METADATA_KEY = \"sonar.preloadFileMetadata\";\n   private static final Logger LOG = LoggerFactory.getLogger(InputFileBuilder.class);\n   private final String moduleKey;\n   private final Path moduleBaseDir;"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": "return Arrays.stream(columns).map(column -> getMsSQLStatement(column)).collect(Collectors.toList(columns.length));",
        "fixed_code": "return Arrays.stream(columns).map(this::getMsSQLStatement).collect(Collectors.toList(columns.length));",
        "patch": "@@ -58,7 +58,7 @@ public List<String> build() {\n       case Oracle.ID:\n         return Collections.singletonList(getOracleStatement());\n       case H2.ID:\n-        return Arrays.stream(columns).map(column -> getMsSQLStatement(column)).collect(Collectors.toList(columns.length));\n+        return Arrays.stream(columns).map(this::getMsSQLStatement).collect(Collectors.toList(columns.length));\n       default:\n         throw new IllegalStateException(String.format(\"Unsupported database '%s'\", dialect.getId()));\n     }"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": ".map(p -> p.getKey())",
        "fixed_code": ".map(QualityProfileDto::getKey)",
        "patch": "@@ -104,7 +104,7 @@ private void checkQualityProfilesConsistency(ScannerReport.Metadata metadata, Or\n       List<QualityProfileDto> profiles = dbClient.qualityProfileDao().selectByKeys(dbSession, profileKeys);\n       String badKeys = profiles.stream()\n         .filter(p -> !p.getOrganizationUuid().equals(organization.getUuid()))\n-        .map(p -> p.getKey())\n+        .map(QualityProfileDto::getKey)\n         .collect(Collectors.join(Joiner.on(\", \")));\n       if (!badKeys.isEmpty()) {\n         throw MessageException.of(format(\"Quality profiles with following keys don't exist in organization [%s]: %s\", organization.getKey(), badKeys));"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": ".map(c -> c.getKey())",
        "fixed_code": ".map(ActiveRuleChange::getKey)",
        "patch": "@@ -87,7 +87,7 @@ private static long doIndex(BulkIndexer bulk, Iterator<ActiveRuleDoc> activeRule\n   public void index(List<ActiveRuleChange> changes) {\n     deleteKeys(changes.stream()\n       .filter(c -> c.getType().equals(ActiveRuleChange.Type.DEACTIVATED))\n-      .map(c -> c.getKey())\n+      .map(ActiveRuleChange::getKey)\n       .collect(Collectors.toList(changes.size())));\n \n     index();"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": "private static void writeErrors(JsonWriter json, List<String> errorMessages) {",
        "fixed_code": "public static void writeErrors(JsonWriter json, List<String> errorMessages) {",
        "patch": "@@ -147,7 +147,7 @@ private static void sendErrors(Response response, int status, List<String> error\n     }\n   }\n \n-  private static void writeErrors(JsonWriter json, List<String> errorMessages) {\n+  public static void writeErrors(JsonWriter json, List<String> errorMessages) {\n     if (errorMessages.isEmpty()) {\n       return;\n     }"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": "QualityProfileDto readDto = db.qualityProfileDao().selectByNameAndLanguage(\"P1\", \"xoo\", dbSession);",
        "fixed_code": "QualityProfileDto readDto = db.qualityProfileDao().selectByNameAndLanguage(organization, \"P1\", \"xoo\", dbSession);",
        "patch": "@@ -79,7 +79,7 @@ public void checkAndCreate() {\n     assertThat(writtenDto.getId()).isNotNull();\n \n     // reload the dto\n-    QualityProfileDto readDto = db.qualityProfileDao().selectByNameAndLanguage(\"P1\", \"xoo\", dbSession);\n+    QualityProfileDto readDto = db.qualityProfileDao().selectByNameAndLanguage(organization, \"P1\", \"xoo\", dbSession);\n     assertEqual(writtenDto, readDto);\n \n     assertThat(db.qualityProfileDao().selectAll(dbSession, organization)).hasSize(1);"
    },
    {
        "commit_id": "eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* reduce duplications\r\n* remove deprecated method\r\n* remove deprecated method\r\n* remove deprecated methods in qprofile dao\r\n* remove unused constant\r\n* use method reference instead of lambda\r\n* remove deprecated QProfileRef\r\n* use method reference instead of lambda\r\n* replace conditional operators by Optionals",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb8cb6831194d5be904d44b9b7bccf009f2d1ab5",
        "buggy_code": "import static org.sonar.server.qualityprofile.QProfileRef.PARAM_PROFILE_KEY;",
        "fixed_code": "import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PROFILE_KEY;",
        "patch": "@@ -44,10 +44,10 @@\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.sonar.api.utils.DateUtils.parseDate;\n-import static org.sonar.server.qualityprofile.QProfileRef.PARAM_PROFILE_KEY;\n import static org.sonar.server.qualityprofile.QProfileTesting.XOO_P1_KEY;\n import static org.sonar.server.qualityprofile.ws.ChangelogAction.PARAM_SINCE;\n import static org.sonar.server.qualityprofile.ws.ChangelogAction.PARAM_TO;\n+import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PROFILE_KEY;\n \n public class ChangelogActionMockTest {\n "
    },
    {
        "commit_id": "87290d15097b2b27cf5945fdb33e3c2a41ada5dc",
        "commit_message": "SONAR-8867 fix too long property identifier in RuleDto for most SGBDs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/87290d15097b2b27cf5945fdb33e3c2a41ada5dc",
        "buggy_code": "assertThat(customRule.getDefaultRemediationFunction()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET.name());",
        "fixed_code": "assertThat(customRule.getDefRemediationFunction()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET.name());",
        "patch": "@@ -298,7 +298,7 @@ public void init(RulesDefinition.NewRepository repository) {\n     assertThat(customRule.getConfigKey()).isEqualTo(\"new_internal\");\n     assertThat(customRule.getSeverityString()).isEqualTo(Severity.BLOCKER);\n     assertThat(customRule.getStatus()).isEqualTo(RuleStatus.BETA);\n-    assertThat(customRule.getDefaultRemediationFunction()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET.name());\n+    assertThat(customRule.getDefRemediationFunction()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET.name());\n     assertThat(customRule.getGapDescription()).isEqualTo(\"Effort\");\n \n     assertThat(ruleIndex.search(new RuleQuery().setKey(customRuleKey.toString()), new SearchOptions()).getTotal()).isEqualTo(1);"
    },
    {
        "commit_id": "9f71376b100d7aae6e83b9f36f898016f1677f41",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* deprecate quality profile dao methods without org parameter\n* remove unused fields in RenameAction\n* change access to wsSupport to static\n* source format\n* reduce complexity of method\n* use constants instead of literals\n* remove redundantly overridden method\n* remove method QProfileFactory.find\n* fix QualityProfileDao.sqlQueryString",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f71376b100d7aae6e83b9f36f898016f1677f41",
        "buggy_code": "qProfileWsSupport",
        "fixed_code": "QProfileWsSupport",
        "patch": "@@ -88,7 +88,7 @@ public void define(WebService.NewController controller) {\n       .setResponseExample(getClass().getResource(\"example-create.json\"))\n       .setHandler(this);\n \n-    qProfileWsSupport\n+    QProfileWsSupport\n       .createOrganizationParam(create)\n       .setSince(\"6.4\");\n "
    },
    {
        "commit_id": "9f71376b100d7aae6e83b9f36f898016f1677f41",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* deprecate quality profile dao methods without org parameter\n* remove unused fields in RenameAction\n* change access to wsSupport to static\n* source format\n* reduce complexity of method\n* use constants instead of literals\n* remove redundantly overridden method\n* remove method QProfileFactory.find\n* fix QualityProfileDao.sqlQueryString",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f71376b100d7aae6e83b9f36f898016f1677f41",
        "buggy_code": "qProfileWsSupport.createOrganizationParam(action)",
        "fixed_code": "QProfileWsSupport.createOrganizationParam(action)",
        "patch": "@@ -57,7 +57,7 @@ public void define(NewController controller) {\n       .setPost(true)\n       .setHandler(this);\n \n-    qProfileWsSupport.createOrganizationParam(action)\n+    QProfileWsSupport.createOrganizationParam(action)\n       .setSince(\"6.4\");\n \n     QProfileReference.defineParams(action, languages);"
    },
    {
        "commit_id": "9f71376b100d7aae6e83b9f36f898016f1677f41",
        "commit_message": "SONAR-8857 fix quality flaws\n\n* deprecate quality profile dao methods without org parameter\n* remove unused fields in RenameAction\n* change access to wsSupport to static\n* source format\n* reduce complexity of method\n* use constants instead of literals\n* remove redundantly overridden method\n* remove method QProfileFactory.find\n* fix QualityProfileDao.sqlQueryString",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f71376b100d7aae6e83b9f36f898016f1677f41",
        "buggy_code": "new RenameAction(null, wsSupport, dbClient, userSessionRule))).controller(QProfilesWs.API_ENDPOINT);",
        "fixed_code": "new RenameAction(dbClient, userSessionRule))).controller(QProfilesWs.API_ENDPOINT);",
        "patch": "@@ -74,7 +74,7 @@ public void setUp() {\n       new DeleteAction(languages, null, null, userSessionRule, wsSupport),\n       new ExportersAction(),\n       new InheritanceAction(null, null, null, null, languages),\n-      new RenameAction(null, wsSupport, dbClient, userSessionRule))).controller(QProfilesWs.API_ENDPOINT);\n+      new RenameAction(dbClient, userSessionRule))).controller(QProfilesWs.API_ENDPOINT);\n   }\n \n   private ProfileImporter[] createImporters(Languages languages) {"
    },
    {
        "commit_id": "eb2e998e0d8efafb211e864d2fc610fdef7df80f",
        "commit_message": "fix pagination in OrganizationDao#selectByQuery",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb2e998e0d8efafb211e864d2fc610fdef7df80f",
        "buggy_code": "@Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);",
        "fixed_code": "@Param(\"pagination\") Pagination pagination);",
        "patch": "@@ -28,7 +28,7 @@ public interface OrganizationMapper {\n   void insert(@Param(\"organization\") OrganizationDto organization);\n \n   List<OrganizationDto> selectByQuery(@Param(\"query\") OrganizationQuery organizationQuery,\n-    @Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);\n+    @Param(\"pagination\") Pagination pagination);\n \n   @CheckForNull\n   OrganizationDto selectByKey(@Param(\"key\") String key);"
    },
    {
        "commit_id": "fdf671551bc17aa79fdaeeaade6125233193c790",
        "commit_message": "SONAR-8857 better error messages for quality profile reference params",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fdf671551bc17aa79fdaeeaade6125233193c790",
        "buggy_code": "expectedException.expectMessage(\"Both profile language and name must be set\");",
        "fixed_code": "expectedException.expectMessage(\"If no quality profile key is specified, language and name must be set\");",
        "patch": "@@ -138,7 +138,7 @@ public void from_reads_request_parameters_and_throws_IAE_if_language_is_missing(\n     req.setParam(\"profileName\", \"the name\");\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Both profile language and name must be set\");\n+    expectedException.expectMessage(\"If no quality profile key is specified, language and name must be set\");\n \n     QProfileReference.from(req);\n   }"
    },
    {
        "commit_id": "817bb7c618063c4d6c7c260258ad77ccc7313d33",
        "commit_message": "Typos fix in the file warning msgs.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/817bb7c618063c4d6c7c260258ad77ccc7313d33",
        "buggy_code": "LOG.warn(\"File '{}' is ignored because it doens't belong to the forced langauge '{}'\", file.toAbsolutePath(), langDetection.forcedLanguage());",
        "fixed_code": "LOG.warn(\"File '{}' is ignored because it doesn't belong to the forced language '{}'\", file.toAbsolutePath(), langDetection.forcedLanguage());",
        "patch": "@@ -65,7 +65,7 @@ DefaultInputFile create(Path file, InputFile.Type type, Charset defaultEncoding)\n     DefaultIndexedFile indexedFile = new DefaultIndexedFile(moduleKey, moduleBaseDir, relativePath, type, idGenerator.get());\n     String language = langDetection.language(indexedFile);\n     if (language == null && langDetection.forcedLanguage() != null) {\n-      LOG.warn(\"File '{}' is ignored because it doens't belong to the forced langauge '{}'\", file.toAbsolutePath(), langDetection.forcedLanguage());\n+      LOG.warn(\"File '{}' is ignored because it doesn't belong to the forced language '{}'\", file.toAbsolutePath(), langDetection.forcedLanguage());\n       return null;\n     }\n     indexedFile.setLanguage(language);"
    },
    {
        "commit_id": "80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "commit_message": "SONAR-8968 Fix example files name in user WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "buggy_code": ".setResponseExample(getClass().getResource(\"example-deactivate.json\"))",
        "fixed_code": ".setResponseExample(getClass().getResource(\"deactivate-example.json\"))",
        "patch": "@@ -69,7 +69,7 @@ public void define(WebService.NewController controller) {\n       .setDescription(\"Deactivate a user. Requires Administer System permission\")\n       .setSince(\"3.7\")\n       .setPost(true)\n-      .setResponseExample(getClass().getResource(\"example-deactivate.json\"))\n+      .setResponseExample(getClass().getResource(\"deactivate-example.json\"))\n       .setHandler(this);\n \n     action.createParam(\"login\")"
    },
    {
        "commit_id": "80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "commit_message": "SONAR-8968 Fix example files name in user WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "buggy_code": ".setResponseExample(getClass().getResource(\"example-groups.json\"))",
        "fixed_code": ".setResponseExample(getClass().getResource(\"groups-example.json\"))",
        "patch": "@@ -60,7 +60,7 @@ public void define(NewController context) {\n     NewAction action = context.createAction(\"groups\")\n       .setDescription(\"Lists the groups a user belongs to. Requires Administer System permission.\")\n       .setHandler(this)\n-      .setResponseExample(getClass().getResource(\"example-groups.json\"))\n+      .setResponseExample(getClass().getResource(\"groups-example.json\"))\n       .setSince(\"5.2\");\n \n     action.createParam(PARAM_LOGIN)"
    },
    {
        "commit_id": "80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "commit_message": "SONAR-8968 Fix example files name in user WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80167039ad5f69fc900bd6eb95d3c9b95658c703",
        "buggy_code": ".setResponseExample(getClass().getResource(\"example-update.json\"));",
        "fixed_code": ".setResponseExample(getClass().getResource(\"update-example.json\"));",
        "patch": "@@ -68,7 +68,7 @@ public void define(WebService.NewController controller) {\n       .setSince(\"3.7\")\n       .setPost(true)\n       .setHandler(this)\n-      .setResponseExample(getClass().getResource(\"example-update.json\"));\n+      .setResponseExample(getClass().getResource(\"update-example.json\"));\n \n     action.createParam(PARAM_LOGIN)\n       .setDescription(\"User login\")"
    },
    {
        "commit_id": "55fa19bcac32824c1780b19375a581ea63f11e72",
        "commit_message": "SONAR-8900 Check membership when bulk assigning issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55fa19bcac32824c1780b19375a581ea63f11e72",
        "buggy_code": "BulkChangeAction.ActionContext context = new BulkChangeAction.ActionContext(issue, IssueChangeContext.createUser(NOW, userSession.getLogin()));",
        "fixed_code": "BulkChangeAction.ActionContext context = new BulkChangeAction.ActionContext(issue, IssueChangeContext.createUser(NOW, userSession.getLogin()), null);",
        "patch": "@@ -69,7 +69,7 @@ public class SetSeverityActionTest {\n   public void set_severity() {\n     DefaultIssue issue = newIssue().setSeverity(MAJOR).toDefaultIssue();\n     setUserWithBrowseAndAdministerIssuePermission(issue.projectUuid());\n-    BulkChangeAction.ActionContext context = new BulkChangeAction.ActionContext(issue, IssueChangeContext.createUser(NOW, userSession.getLogin()));\n+    BulkChangeAction.ActionContext context = new BulkChangeAction.ActionContext(issue, IssueChangeContext.createUser(NOW, userSession.getLogin()), null);\n \n     action.execute(ImmutableMap.of(\"severity\", MINOR), context);\n "
    },
    {
        "commit_id": "67f3e105cc6c32257285e0569b4ff85b161f9abf",
        "commit_message": "SONAR-8899 Fix IT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/67f3e105cc6c32257285e0569b4ff85b161f9abf",
        "buggy_code": "assertThat(ex.code()).isEqualTo(400);",
        "fixed_code": "assertThat(ex.code()).isEqualTo(404);",
        "patch": "@@ -189,7 +189,7 @@ public void fail_assign_if_assignee_does_not_exist() {\n       issuesService.assign(new AssignRequest(randomIssue.getKey(), \"unknown\"));\n       fail();\n     } catch (org.sonarqube.ws.client.HttpException ex) {\n-      assertThat(ex.code()).isEqualTo(400);\n+      assertThat(ex.code()).isEqualTo(404);\n     }\n   }\n "
    },
    {
        "commit_id": "857d12fa9909a5b5fde7a42f231b0b8d42e50303",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/857d12fa9909a5b5fde7a42f231b0b8d42e50303",
        "buggy_code": "this.searchQueryToSqlLowercase = builder.searchQuery == null ? null : searchQueryToSql.toLowerCase(Locale.ENGLISH);",
        "fixed_code": "this.searchQueryToSqlLowercase = searchQueryToSql == null ? null : searchQueryToSql.toLowerCase(Locale.ENGLISH);",
        "patch": "@@ -66,7 +66,7 @@ private PermissionQuery(Builder builder) {\n     this.template = builder.template;\n     this.searchQuery = builder.searchQuery;\n     this.searchQueryToSql = builder.searchQuery == null ? null : buildLikeValue(builder.searchQuery, WildcardPosition.BEFORE_AND_AFTER);\n-    this.searchQueryToSqlLowercase = builder.searchQuery == null ? null : searchQueryToSql.toLowerCase(Locale.ENGLISH);\n+    this.searchQueryToSqlLowercase = searchQueryToSql == null ? null : searchQueryToSql.toLowerCase(Locale.ENGLISH);\n     this.pageSize = builder.pageSize;\n     this.pageOffset = offset(builder.pageIndex, builder.pageSize);\n   }"
    },
    {
        "commit_id": "591eebcfc8c889b61b2e5d43bb93dbe1dbfc4079",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  fix styles on landing page\n  SONAR-8623 Index all source files, even the ones with no supported language",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/591eebcfc8c889b61b2e5d43bb93dbe1dbfc4079",
        "buggy_code": "for (final InputComponent c : componentStore.all()) {",
        "fixed_code": "for (final InputComponent c : componentStore.allFilesToPublish()) {",
        "patch": "@@ -82,7 +82,7 @@ public MeasuresPublisher(InputComponentStore componentStore, MeasureCache measur\n   public void publish(ScannerReportWriter writer) {\n     final ScannerReport.Measure.Builder builder = ScannerReport.Measure.newBuilder();\n \n-    for (final InputComponent c : componentStore.all()) {\n+    for (final InputComponent c : componentStore.allFilesToPublish()) {\n       DefaultInputComponent component = (DefaultInputComponent) c;\n       // Recompute all coverage measures from line data to take into account the possible merge of several reports\n       updateCoverageFromLineData(component);"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"Impossible to sort metric '%s' by measure period.\", metric.getKey()));",
        "fixed_code": "throw BadRequestException.create(format(\"Impossible to sort metric '%s' by measure period.\", metric.getKey()));",
        "patch": "@@ -148,7 +148,7 @@ private static Ordering<ComponentDto> metricPeriodOrdering(ComponentTreeWsReques\n       return numericalMetricPeriodOrdering(wsRequest, metric, measuresByComponentUuidAndMetric);\n     }\n \n-    throw new BadRequestException(format(\"Impossible to sort metric '%s' by measure period.\", metric.getKey()));\n+    throw BadRequestException.create(format(\"Impossible to sort metric '%s' by measure period.\", metric.getKey()));\n   }\n \n   private static Ordering<ComponentDto> numericalMetricOrdering(boolean isAscending, @Nullable MetricDto metric,"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"The '%s' parameter must be a valid Java regular expression. '%s' was passed\", PARAM_PROJECT_KEY_PATTERN, projectPattern));",
        "fixed_code": "throw BadRequestException.create(format(\"The '%s' parameter must be a valid Java regular expression. '%s' was passed\", PARAM_PROJECT_KEY_PATTERN, projectPattern));",
        "patch": "@@ -91,7 +91,7 @@ public static void validateProjectPattern(@Nullable String projectPattern) {\n     try {\n       Pattern.compile(projectPattern);\n     } catch (PatternSyntaxException e) {\n-      throw new BadRequestException(format(\"The '%s' parameter must be a valid Java regular expression. '%s' was passed\", PARAM_PROJECT_KEY_PATTERN, projectPattern));\n+      throw BadRequestException.create(format(\"The '%s' parameter must be a valid Java regular expression. '%s' was passed\", PARAM_PROJECT_KEY_PATTERN, projectPattern));\n     }\n   }\n }"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(MSG_ONE_PARAMETER_ONLY);",
        "fixed_code": "throw BadRequestException.create(MSG_ONE_PARAMETER_ONLY);",
        "patch": "@@ -130,7 +130,7 @@ private ProjectAndSnapshot getProjectAndSnapshot(DbSession dbSession, ProjectSta\n       return getProjectThenSnapshot(dbSession, request);\n     }\n \n-    throw new BadRequestException(MSG_ONE_PARAMETER_ONLY);\n+    throw BadRequestException.create(MSG_ONE_PARAMETER_ONLY);\n   }\n \n   private ProjectAndSnapshot getProjectThenSnapshot(DbSession dbSession, ProjectStatusWsRequest request) {"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(paramName + \" must be a valid long value\");",
        "fixed_code": "throw BadRequestException.create(paramName + \" must be a valid long value\");",
        "patch": "@@ -90,7 +90,7 @@ static Long parseId(Request request, String paramName) {\n     try {\n       return Long.valueOf(request.mandatoryParam(paramName));\n     } catch (NumberFormatException badFormat) {\n-      throw new BadRequestException(paramName + \" must be a valid long value\");\n+      throw BadRequestException.create(paramName + \" must be a valid long value\");\n     }\n   }\n "
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(String.format(\"JSON '%s' does not respect expected format for setting '%s'. Ex: {\\\"field1\\\":\\\"value1\\\", \\\"field2\\\":\\\"value2\\\"}\", json, key));",
        "fixed_code": "throw BadRequestException.create(String.format(\"JSON '%s' does not respect expected format for setting '%s'. Ex: {\\\"field1\\\":\\\"value1\\\", \\\"field2\\\":\\\"value2\\\"}\", json, key));",
        "patch": "@@ -288,7 +288,7 @@ private static Map<String, String> readOneFieldValues(String json, String key) {\n     try {\n       return gson.fromJson(json, type);\n     } catch (JsonSyntaxException e) {\n-      throw new BadRequestException(String.format(\"JSON '%s' does not respect expected format for setting '%s'. Ex: {\\\"field1\\\":\\\"value1\\\", \\\"field2\\\":\\\"value2\\\"}\", json, key));\n+      throw BadRequestException.create(String.format(\"JSON '%s' does not respect expected format for setting '%s'. Ex: {\\\"field1\\\":\\\"value1\\\", \\\"field2\\\":\\\"value2\\\"}\", json, key));\n     }\n   }\n "
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(i18n.message(Locale.ENGLISH, \"property.error.\" + result.getErrorKey(),",
        "fixed_code": "throw BadRequestException.create(i18n.message(Locale.ENGLISH, \"property.error.\" + result.getErrorKey(),",
        "patch": "@@ -112,7 +112,7 @@ private void validateOtherTypes(SettingData data, PropertyDefinition definition)\n         .filter(result -> !result.isValid())\n         .findAny()\n         .ifPresent(result -> {\n-          throw new BadRequestException(i18n.message(Locale.ENGLISH, \"property.error.\" + result.getErrorKey(),\n+          throw BadRequestException.create(i18n.message(Locale.ENGLISH, \"property.error.\" + result.getErrorKey(),\n             format(\"Error when validating setting with key '%s' and value [%s]\", data.key, data.values.stream().collect(Collectors.joining(\", \")))));\n         });\n     }"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"Value '%s' must be an floating point number.\", value));",
        "fixed_code": "throw BadRequestException.create(format(\"Value '%s' must be an floating point number.\", value));",
        "patch": "@@ -38,7 +38,7 @@ public void validate(String value, @Nullable List<String> options) {\n     try {\n       Double.parseDouble(value);\n     } catch (NumberFormatException e) {\n-      throw new BadRequestException(format(\"Value '%s' must be an floating point number.\", value));\n+      throw BadRequestException.create(format(\"Value '%s' must be an floating point number.\", value));\n     }\n   }\n "
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"Value '%s' must be an integer.\", value));",
        "fixed_code": "throw BadRequestException.create(format(\"Value '%s' must be an integer.\", value));",
        "patch": "@@ -38,7 +38,7 @@ public void validate(String value, @Nullable List<String> options) {\n     try {\n       Integer.parseInt(value);\n     } catch (NumberFormatException e) {\n-      throw new BadRequestException(format(\"Value '%s' must be an integer.\", value));\n+      throw BadRequestException.create(format(\"Value '%s' must be an integer.\", value));\n     }\n   }\n "
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"Value '%s' must be a long.\", value));",
        "fixed_code": "throw BadRequestException.create(format(\"Value '%s' must be a long.\", value));",
        "patch": "@@ -37,7 +37,7 @@ public void validate(String value, @Nullable List<String> options) {\n     try {\n       Long.parseLong(value);\n     } catch (NumberFormatException e) {\n-      throw new BadRequestException(format(\"Value '%s' must be a long.\", value));\n+      throw BadRequestException.create(format(\"Value '%s' must be a long.\", value));\n     }\n   }\n }"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "throw new BadRequestException(format(\"Value '%s' must be one of \\\"OK\\\", \\\"WARN\\\", \\\"ERROR\\\".\", value));",
        "fixed_code": "throw BadRequestException.create(format(\"Value '%s' must be one of \\\"OK\\\", \\\"WARN\\\", \\\"ERROR\\\".\", value));",
        "patch": "@@ -38,7 +38,7 @@ public void validate(String value, @Nullable List<String> options) {\n     try {\n       Metric.Level.valueOf(value);\n     } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(format(\"Value '%s' must be one of \\\"OK\\\", \\\"WARN\\\", \\\"ERROR\\\".\", value));\n+      throw BadRequestException.create(format(\"Value '%s' must be one of \\\"OK\\\", \\\"WARN\\\", \\\"ERROR\\\".\", value));\n     }\n   }\n }"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenThrow(new BadRequestException(\"already exists\"));",
        "fixed_code": "when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenThrow(BadRequestException.create(\"already exists\"));",
        "patch": "@@ -133,7 +133,7 @@ public void create_project_with_deprecated_parameter() throws Exception {\n   @Test\n   public void fail_when_project_already_exists() throws Exception {\n     OrganizationDto organization = db.organizations().insert();\n-    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenThrow(new BadRequestException(\"already exists\"));\n+    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenThrow(BadRequestException.create(\"already exists\"));\n     userSession.addPermission(PROVISION_PROJECTS, organization);\n \n     expectedException.expect(BadRequestException.class);"
    },
    {
        "commit_id": "2d898468dc31c97922f1757a308bb891bece4140",
        "commit_message": "Automatic merge from branch-6.3\n\n* origin/branch-6.3:\n  SONAR-8883 Fix Server::getVersion() on scanner side, and reenable IssueJsonReportTest IT\n  SONAR-8622 Fix preview mode/JSON report on branches\n  Remove javaProperties plugin from PluginsTest\n  Remove JSON plugin\n  SONAR-8460 Do not fail to write response when profile not found\n  SONAR-8460 Remove Errors\n  SONAR-8460 Remove creation BadRequestException with Errors\n  SONAR-8460 Fix bundled error messages\n  SONAR-8460 Simplify creation of BadRequestException with one message\n  SONAR-8460 Remove isEmpty from Errors\n  SONAR-8460 Remove check from Errors\n  SONAR-8460 Remove writeJson from Errors\n  fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d898468dc31c97922f1757a308bb891bece4140",
        "buggy_code": "assertThat(e.errors().messages()).hasSize(3);",
        "fixed_code": "assertThat(e.errors()).hasSize(3);",
        "patch": "@@ -357,7 +357,7 @@ public void fail_to_create_user_with_many_errors() {\n         .build());\n       fail();\n     } catch (BadRequestException e) {\n-      assertThat(e.errors().messages()).hasSize(3);\n+      assertThat(e.errors()).hasSize(3);\n     }\n   }\n "
    },
    {
        "commit_id": "9c74dc7710f74e5b60beefdb6949a022a5ed2c6a",
        "commit_message": "SONAR-8783 Improve display of error when uploading scanner report",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c74dc7710f74e5b60beefdb6949a022a5ed2c6a",
        "buggy_code": "private static String tryParseAsJsonError(String responseContent) {",
        "fixed_code": "public static String tryParseAsJsonError(String responseContent) {",
        "patch": "@@ -106,7 +106,7 @@ private void failIfUnauthorized(WsResponse response) {\n     response.failIfNotSuccessful();\n   }\n \n-  private static String tryParseAsJsonError(String responseContent) {\n+  public static String tryParseAsJsonError(String responseContent) {\n     try {\n       JsonParser parser = new JsonParser();\n       JsonObject obj = parser.parse(responseContent).getAsJsonObject();"
    },
    {
        "commit_id": "ee94866db117108ef272d33213fea15c095a7894",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee94866db117108ef272d33213fea15c095a7894",
        "buggy_code": "UserDao userDao = new UserDao(dbTester.myBatis(), system2);",
        "fixed_code": "UserDao userDao = new UserDao(system2);",
        "patch": "@@ -58,7 +58,7 @@ public class GroupsActionTest {\n   @Before\n   public void setUp() {\n     System2 system2 = new System2();\n-    UserDao userDao = new UserDao(dbTester.myBatis(), system2);\n+    UserDao userDao = new UserDao(system2);\n     GroupDao groupDao = new GroupDao(system2);\n     UserGroupDao userGroupDao = new UserGroupDao();\n     GroupMembershipDao groupMembershipDao = new GroupMembershipDao();"
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonarqube.ws.WsComponents.SearchProjectsWsResponse;\n import org.sonarqube.ws.client.component.SearchProjectsRequest;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static util.ItUtils.newAdminWsClient;\n import static util.ItUtils.projectDir;\n "
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.db.qualityprofile.QualityProfileDto;\n import org.sonar.db.qualityprofile.QualityProfileTesting;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -40,7 +40,7 @@\n import org.sonar.server.ws.TestRequest;\n import org.sonar.server.ws.WsActionTester;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.sonar.core.permission.GlobalPermissions.QUALITY_PROFILE_ADMIN;\n import static org.sonar.server.qualityprofile.QProfileTesting.newQProfileDto;\n "
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.server.ws.TestResponse;\n import org.sonar.server.ws.WsActionTester;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n "
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -41,7 +41,7 @@\n import org.sonarqube.ws.MediaTypes;\n import org.sonarqube.ws.ServerId.ShowWsResponse;\n \n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.db.property.PropertyTesting.newGlobalPropertyDto;"
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -56,7 +56,7 @@\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.groups.Tuple.tuple;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;"
    },
    {
        "commit_id": "c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "commit_message": "Fix bad import of org.assertj.core.api.Java6Assertions.assertThat",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c21f9382b1020ffd8328995f5081dae05df4ed5f",
        "buggy_code": "import static org.assertj.core.api.Java6Assertions.assertThat;",
        "fixed_code": "import static org.assertj.core.api.Assertions.assertThat;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.server.ws.WsActionTester;\n \n import static java.nio.file.Files.newInputStream;\n-import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n import static org.sonar.test.ExceptionCauseMatcher.hasType;"
    },
    {
        "commit_id": "f7439fed14d64292cdc391d277457229c3f3ac58",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7439fed14d64292cdc391d277457229c3f3ac58",
        "buggy_code": "return (Map<String, String>) gson.fromJson(json, type);",
        "fixed_code": "return gson.fromJson(json, type);",
        "patch": "@@ -286,7 +286,7 @@ private static Map<String, String> readOneFieldValues(String json, String key) {\n     }.getType();\n     Gson gson = GsonHelper.create();\n     try {\n-      return (Map<String, String>) gson.fromJson(json, type);\n+      return gson.fromJson(json, type);\n     } catch (JsonSyntaxException e) {\n       throw new BadRequestException(String.format(\"JSON '%s' does not respect expected format for setting '%s'. Ex: {\\\"field1\\\":\\\"value1\\\", \\\"field2\\\":\\\"value2\\\"}\", json, key));\n     }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "favoriteUpdater.add(dbSession, componentDto, userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);",
        "fixed_code": "favoriteUpdater.add(dbSession, componentDto, userSession.isLoggedIn() ? userSession.getUserId() : null);",
        "patch": "@@ -75,7 +75,7 @@ private Consumer<Request> addFavorite() {\n         userSession\n           .checkLoggedIn()\n           .checkComponentPermission(UserRole.USER, componentDto);\n-        favoriteUpdater.add(dbSession, componentDto, userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);\n+        favoriteUpdater.add(dbSession, componentDto, userSession.isLoggedIn() ? userSession.getUserId() : null);\n         dbSession.commit();\n       }\n     };"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "favoriteUpdater.remove(dbSession, component, userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);",
        "fixed_code": "favoriteUpdater.remove(dbSession, component, userSession.isLoggedIn() ? userSession.getUserId() : null);",
        "patch": "@@ -73,7 +73,7 @@ private Consumer<Request> removeFavorite() {\n         ComponentDto component = componentFinder.getByKey(dbSession, request.mandatoryParam(PARAM_COMPONENT));\n         userSession\n           .checkLoggedIn();\n-        favoriteUpdater.remove(dbSession, component, userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);\n+        favoriteUpdater.remove(dbSession, component, userSession.isLoggedIn() ? userSession.getUserId() : null);\n         dbSession.commit();\n       }\n     };"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "OrganizationDto create(DbSession dbSession, long createUserId, NewOrganization newOrganization) throws KeyConflictException;",
        "fixed_code": "OrganizationDto create(DbSession dbSession, int createUserId, NewOrganization newOrganization) throws KeyConflictException;",
        "patch": "@@ -62,7 +62,7 @@ public interface OrganizationCreation {\n    * @throws KeyConflictException if an organization with the specified key already exists\n    * @throws IllegalArgumentException if any field of {@code newOrganization} is invalid according to {@link OrganizationValidation}\n    */\n-  OrganizationDto create(DbSession dbSession, long createUserId, NewOrganization newOrganization) throws KeyConflictException;\n+  OrganizationDto create(DbSession dbSession, int createUserId, NewOrganization newOrganization) throws KeyConflictException;\n \n   /**\n    * Create a new guarded organization which details are based on the login of the specified User."
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "userSession.getUserId().longValue(),",
        "fixed_code": "userSession.getUserId(),",
        "patch": "@@ -103,7 +103,7 @@ public void handle(Request request, Response response) throws Exception {\n       organizationFlags.checkEnabled(dbSession);\n       OrganizationDto organization = organizationCreation.create(\n         dbSession,\n-        userSession.getUserId().longValue(),\n+        userSession.getUserId(),\n         newOrganizationBuilder()\n           .setName(name)\n           .setKey(key)"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "Long groupId = request.paramAsLong(PARAM_GROUP_ID);",
        "fixed_code": "Integer groupId = request.paramAsInt(PARAM_GROUP_ID);",
        "patch": "@@ -81,7 +81,7 @@ public ComponentDto getRootComponentOrModule(DbSession dbSession, ProjectWsRef p\n   }\n \n   public GroupIdOrAnyone findGroup(DbSession dbSession, Request request) {\n-    Long groupId = request.paramAsLong(PARAM_GROUP_ID);\n+    Integer groupId = request.paramAsInt(PARAM_GROUP_ID);\n     String orgKey = request.param(PARAM_ORGANIZATION);\n     String groupName = request.param(PARAM_GROUP_NAME);\n     GroupWsRef groupRef = GroupWsRef.create(groupId, orgKey, groupName);"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "Multimap<Long, String> permissionsByUserId = TreeMultimap.create();",
        "fixed_code": "Multimap<Integer, String> permissionsByUserId = TreeMultimap.create();",
        "patch": "@@ -83,7 +83,7 @@ private static PermissionQuery buildQuery(Request wsRequest, PermissionTemplateD\n   }\n \n   private static WsPermissions.UsersWsResponse buildResponse(List<UserDto> users, List<PermissionTemplateUserDto> permissionTemplateUsers, Paging paging) {\n-    Multimap<Long, String> permissionsByUserId = TreeMultimap.create();\n+    Multimap<Integer, String> permissionsByUserId = TreeMultimap.create();\n     permissionTemplateUsers.forEach(userPermission -> permissionsByUserId.put(userPermission.getUserId(), userPermission.getPermission()));\n \n     UsersWsResponse.Builder responseBuilder = UsersWsResponse.newBuilder();"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);",
        "fixed_code": "userSession.isLoggedIn() ? userSession.getUserId() : null);",
        "patch": "@@ -112,7 +112,7 @@ private CreateWsResponse doHandle(CreateRequest request) {\n         .setBranch(request.getBranch())\n         .setQualifier(PROJECT)\n         .build(),\n-        userSession.isLoggedIn() ? userSession.getUserId().longValue() : null);\n+        userSession.isLoggedIn() ? userSession.getUserId() : null);\n       return toCreateResponse(componentDto);\n     }\n   }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "long userId = requireNonNull(userSession.getUserId(), \"Current user must be authenticated\");",
        "fixed_code": "int userId = requireNonNull(userSession.getUserId(), \"Current user must be authenticated\");",
        "patch": "@@ -76,7 +76,7 @@ SearchMyProjectsData load(DbSession dbSession, SearchMyProjectsRequest request)\n \n   @VisibleForTesting\n   ProjectsResult searchProjects(DbSession dbSession, SearchMyProjectsRequest request) {\n-    long userId = requireNonNull(userSession.getUserId(), \"Current user must be authenticated\");\n+    int userId = requireNonNull(userSession.getUserId(), \"Current user must be authenticated\");\n \n     List<Long> componentIds = dbClient.roleDao().selectComponentIdsByPermissionAndUserId(dbSession, UserRole.ADMIN, userId);\n     ComponentQuery dbQuery = ComponentQuery.builder()"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "Long id = request.paramAsLong(PARAM_GROUP_ID);",
        "fixed_code": "Integer id = request.paramAsInt(PARAM_GROUP_ID);",
        "patch": "@@ -72,7 +72,7 @@ public GroupWsSupport(DbClient dbClient, DefaultOrganizationProvider defaultOrga\n    * or if the virtual group \"Anyone\" is requested.\n    */\n   public GroupId findGroup(DbSession dbSession, Request request) {\n-    Long id = request.paramAsLong(PARAM_GROUP_ID);\n+    Integer id = request.paramAsInt(PARAM_GROUP_ID);\n     String organizationKey = request.param(PARAM_ORGANIZATION_KEY);\n     String name = request.param(PARAM_GROUP_NAME);\n     return findGroup(dbSession, GroupWsRef.create(id, organizationKey, name));"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "List<Long> groupIds = groups.stream().map(GroupDto::getId).collect(Collectors.toList(groups.size()));",
        "fixed_code": "List<Integer> groupIds = groups.stream().map(GroupDto::getId).collect(Collectors.toList(groups.size()));",
        "patch": "@@ -96,7 +96,7 @@ public void handle(Request request, Response response) throws Exception {\n \n       int limit = dbClient.groupDao().countByQuery(dbSession, organization.getUuid(), query);\n       List<GroupDto> groups = dbClient.groupDao().selectByQuery(dbSession, organization.getUuid(), query, options.getOffset(), pageSize);\n-      List<Long> groupIds = groups.stream().map(GroupDto::getId).collect(Collectors.toList(groups.size()));\n+      List<Integer> groupIds = groups.stream().map(GroupDto::getId).collect(Collectors.toList(groups.size()));\n       Map<String, Integer> userCountByGroup = dbClient.groupMembershipDao().countUsersByGroups(dbSession, groupIds);\n \n       JsonWriter json = response.newJsonWriter().beginObject();"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "long groupId = request.mandatoryParamAsLong(PARAM_GROUP_ID);",
        "fixed_code": "int groupId = request.mandatoryParamAsInt(PARAM_GROUP_ID);",
        "patch": "@@ -95,7 +95,7 @@ public void define(NewController context) {\n   @Override\n   public void handle(Request request, Response response) throws Exception {\n     try (DbSession dbSession = dbClient.openSession(false)) {\n-      long groupId = request.mandatoryParamAsLong(PARAM_GROUP_ID);\n+      int groupId = request.mandatoryParamAsInt(PARAM_GROUP_ID);\n       GroupDto group = dbClient.groupDao().selectById(dbSession, groupId);\n       checkFound(group, \"Could not find a user group with id '%s'.\", groupId);\n       Optional<OrganizationDto> org = dbClient.organizationDao().selectByUuid(dbSession, group.getOrganizationUuid());"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "assertThat(db.users().selectGroupIdsOfUser(userDto)).containsOnly(stream(expectedGroups).map(GroupDto::getId).collect(Collectors.toList()).toArray(new Long[] {}));",
        "fixed_code": "assertThat(db.users().selectGroupIdsOfUser(userDto)).containsOnly(stream(expectedGroups).map(GroupDto::getId).collect(Collectors.toList()).toArray(new Integer[] {}));",
        "patch": "@@ -424,7 +424,7 @@ private void verityUserGroups(String login, GroupDto... expectedGroups) {\n     if (expectedGroups.length == 0) {\n       assertThat(db.users().selectGroupIdsOfUser(userDto)).isEmpty();\n     } else {\n-      assertThat(db.users().selectGroupIdsOfUser(userDto)).containsOnly(stream(expectedGroups).map(GroupDto::getId).collect(Collectors.toList()).toArray(new Long[] {}));\n+      assertThat(db.users().selectGroupIdsOfUser(userDto)).containsOnly(stream(expectedGroups).map(GroupDto::getId).collect(Collectors.toList()).toArray(new Integer[] {}));\n     }\n   }\n "
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "long userId = 42;",
        "fixed_code": "int userId = 42;",
        "patch": "@@ -107,7 +107,7 @@ public void create_project_with_branch() throws Exception {\n \n   @Test\n   public void should_apply_default_permission_template() throws Exception {\n-    long userId = 42;\n+    int userId = 42;\n     NewComponent project = NewComponent.newComponentBuilder()\n         .setKey(DEFAULT_PROJECT_KEY)\n         .setName(DEFAULT_PROJECT_NAME)"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(Long.valueOf(userSession.getUserId())));",
        "fixed_code": "dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(userSession.getUserId()));",
        "patch": "@@ -440,6 +440,6 @@ private static Map<String, Object> newMeasure(String key, double value) {\n   }\n \n   private void addFavourite(ComponentDto project) {\n-    dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(Long.valueOf(userSession.getUserId())));\n+    dbClient.propertiesDao().saveProperty(dbSession, new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(userSession.getUserId()));\n   }\n }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private static final long USER_ID = 42L;",
        "fixed_code": "private static final int USER_ID = 42;",
        "patch": "@@ -40,7 +40,7 @@ public class FavoriteUpdaterTest {\n   private static final ComponentDto COMPONENT = newProjectDto(OrganizationTesting.newOrganizationDto())\n     .setId(COMPONENT_ID)\n     .setKey(COMPONENT_KEY);\n-  private static final long USER_ID = 42L;\n+  private static final int USER_ID = 42;\n \n   @Rule\n   public ExpectedException expectedException = ExpectedException.none();"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private void checkWouldUserHavePermission(OrganizationDto organization, @Nullable Long userId, String permission, boolean expectedResult) {",
        "fixed_code": "private void checkWouldUserHavePermission(OrganizationDto organization, @Nullable Integer userId, String permission, boolean expectedResult) {",
        "patch": "@@ -149,7 +149,7 @@ public void would_user_have_permission_with_empty_template() {\n     checkWouldUserHavePermission(dbTester.getDefaultOrganization(), null, UserRole.ADMIN, false);\n   }\n \n-  private void checkWouldUserHavePermission(OrganizationDto organization, @Nullable Long userId, String permission, boolean expectedResult) {\n+  private void checkWouldUserHavePermission(OrganizationDto organization, @Nullable Integer userId, String permission, boolean expectedResult) {\n     assertThat(underTest.wouldUserHavePermissionWithDefaultTemplate(session, organization.getUuid(), userId, permission, null, \"PROJECT_KEY\", Qualifiers.PROJECT))\n       .isEqualTo(expectedResult);\n   }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private List<Long> selectProjectPermissionUsers(ComponentDto project, String permission) {",
        "fixed_code": "private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {",
        "patch": "@@ -220,7 +220,7 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n     return db.getDbClient().groupPermissionDao().selectGroupNamesByQuery(db.getSession(), db.getDefaultOrganization().getUuid(), query);\n   }\n \n-  private List<Long> selectProjectPermissionUsers(ComponentDto project, String permission) {\n+  private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setPermission(permission).setComponentUuid(project.uuid()).build();\n     return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), db.getDefaultOrganization().getUuid(), query);\n   }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private List<Long> selectProjectPermissionUsers(ComponentDto project, String permission) {",
        "fixed_code": "private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {",
        "patch": "@@ -223,7 +223,7 @@ private List<String> selectProjectPermissionGroups(ComponentDto project, String\n     return db.getDbClient().groupPermissionDao().selectGroupNamesByQuery(db.getSession(), project.getOrganizationUuid(), query);\n   }\n \n-  private List<Long> selectProjectPermissionUsers(ComponentDto project, String permission) {\n+  private List<Integer> selectProjectPermissionUsers(ComponentDto project, String permission) {\n     PermissionQuery query = PermissionQuery.builder().setPermission(permission).setComponentUuid(project.uuid()).build();\n     return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), project.getOrganizationUuid(), query);\n   }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private void addGroupToTemplate(PermissionTemplateDto template, @Nullable Long groupId, String permission) {",
        "fixed_code": "private void addGroupToTemplate(PermissionTemplateDto template, @Nullable Integer groupId, String permission) {",
        "patch": "@@ -187,7 +187,7 @@ private void newRequest(@Nullable String groupName, @Nullable String templateKey\n     request.execute();\n   }\n \n-  private void addGroupToTemplate(PermissionTemplateDto template, @Nullable Long groupId, String permission) {\n+  private void addGroupToTemplate(PermissionTemplateDto template, @Nullable Integer groupId, String permission) {\n     db.getDbClient().permissionTemplateDao().insertGroupPermission(db.getSession(), template.getId(), groupId, permission);\n     db.commit();\n   }"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private static PermissionTemplateGroupDto newPermissionTemplateGroup(String permission, long templateId, @Nullable Long groupId) {",
        "fixed_code": "private static PermissionTemplateGroupDto newPermissionTemplateGroup(String permission, long templateId, @Nullable Integer groupId) {",
        "patch": "@@ -377,7 +377,7 @@ private void addGroupToTemplate(PermissionTemplateGroupDto permissionTemplateGro\n     db.getDbClient().permissionTemplateDao().insertGroupPermission(db.getSession(), permissionTemplateGroup);\n   }\n \n-  private static PermissionTemplateGroupDto newPermissionTemplateGroup(String permission, long templateId, @Nullable Long groupId) {\n+  private static PermissionTemplateGroupDto newPermissionTemplateGroup(String permission, long templateId, @Nullable Integer groupId) {\n     return newPermissionTemplateGroupDto()\n       .setPermission(permission)\n       .setTemplateId(templateId)"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "long groupId = defaultGroup.getId() + 123;",
        "fixed_code": "int groupId = defaultGroup.getId() + 123;",
        "patch": "@@ -187,7 +187,7 @@ public void delete_group_from_permission_templates() throws Exception {\n   public void fail_if_id_does_not_exist() throws Exception {\n     addAdminToDefaultOrganization();\n     loginAsAdminOnDefaultOrganization();\n-    long groupId = defaultGroup.getId() + 123;\n+    int groupId = defaultGroup.getId() + 123;\n \n     expectedException.expect(NotFoundException.class);\n     expectedException.expectMessage(\"No group with id '\" + groupId + \"'\");"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "String key, @Nullable Long userId, @Nullable Long componentId,",
        "fixed_code": "String key, @Nullable Integer userId, @Nullable Long componentId,",
        "patch": "@@ -183,7 +183,7 @@ public void saveProperty(DbSession session, PropertyDto property) {\n   }\n \n   private void save(PropertiesMapper mapper,\n-    String key, @Nullable Long userId, @Nullable Long componentId,\n+    String key, @Nullable Integer userId, @Nullable Long componentId,\n     @Nullable String value) {\n     checkKey(key);\n "
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "assertThat(new PropertyDto().setKey(\"foo:bar\").setValue(\"value\").setResourceId(123L).setUserId(456L).toString()).isEqualTo(\"PropertyDto{foo:bar, value, 123, 456}\");",
        "fixed_code": "assertThat(new PropertyDto().setKey(\"foo:bar\").setValue(\"value\").setResourceId(123L).setUserId(456).toString()).isEqualTo(\"PropertyDto{foo:bar, value, 123, 456}\");",
        "patch": "@@ -49,7 +49,7 @@ public void testHashCode() {\n \n   @Test\n   public void testToString() {\n-    assertThat(new PropertyDto().setKey(\"foo:bar\").setValue(\"value\").setResourceId(123L).setUserId(456L).toString()).isEqualTo(\"PropertyDto{foo:bar, value, 123, 456}\");\n+    assertThat(new PropertyDto().setKey(\"foo:bar\").setValue(\"value\").setResourceId(123L).setUserId(456).toString()).isEqualTo(\"PropertyDto{foo:bar, value, 123, 456}\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "private static final long MISSING_ID = -1L;",
        "fixed_code": "private static final int MISSING_ID = -1;",
        "patch": "@@ -40,7 +40,7 @@\n public class GroupDaoTest {\n \n   private static final long NOW = 1_500_000L;\n-  private static final long MISSING_ID = -1L;\n+  private static final int MISSING_ID = -1;\n   private static final OrganizationDto AN_ORGANIZATION = new OrganizationDto()\n     .setKey(\"an-org\")\n     .setName(\"An Org\")"
    },
    {
        "commit_id": "33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "commit_message": "Fix integer type of user and group ids\n\nUser IDs are INTEGER in database. The java classes are fixed\nto replace long by int.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33acda7596369ed1bffbcd25b8d0d590fa87be49",
        "buggy_code": "underTest.deleteGroupRolesByGroupId(db.getSession(), 100L);",
        "fixed_code": "underTest.deleteGroupRolesByGroupId(db.getSession(), 100);",
        "patch": "@@ -94,7 +94,7 @@ public void selectComponentIdsByPermissionAndUserId_group_permissions() {\n   public void delete_all_group_permissions_by_group_id() {\n     db.prepareDbUnit(getClass(), \"deleteGroupPermissionsByGroupId.xml\");\n \n-    underTest.deleteGroupRolesByGroupId(db.getSession(), 100L);\n+    underTest.deleteGroupRolesByGroupId(db.getSession(), 100);\n     db.getSession().commit();\n \n     db.assertDbUnit(getClass(), \"deleteGroupPermissionsByGroupId-result.xml\", \"group_roles\");"
    },
    {
        "commit_id": "5c15ad469a628236144e630568da524f6ccfd549",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c15ad469a628236144e630568da524f6ccfd549",
        "buggy_code": "return value.map(s -> \"true\".equals(s)).orElse(false);",
        "fixed_code": "return value.map(\"true\"::equals).orElse(false);",
        "patch": "@@ -39,7 +39,7 @@ public OrganizationFlagsImpl(DbClient dbClient) {\n   @Override\n   public boolean isEnabled(DbSession dbSession) {\n     Optional<String> value = dbClient.internalPropertiesDao().selectByKey(dbSession, InternalProperties.ORGANIZATION_ENABLED);\n-    return value.map(s -> \"true\".equals(s)).orElse(false);\n+    return value.map(\"true\"::equals).orElse(false);\n   }\n \n   @Override"
    },
    {
        "commit_id": "5c15ad469a628236144e630568da524f6ccfd549",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c15ad469a628236144e630568da524f6ccfd549",
        "buggy_code": "import static com.google.common.base.Charsets.UTF_8;",
        "fixed_code": "import static java.nio.charset.StandardCharsets.UTF_8;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.server.authentication.event.AuthenticationEvent;\n import org.sonar.server.usertoken.UserTokenAuthenticator;\n \n-import static com.google.common.base.Charsets.UTF_8;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.assertj.core.api.Java6Assertions.assertThat;\n import static org.junit.rules.ExpectedException.none;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "5c15ad469a628236144e630568da524f6ccfd549",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c15ad469a628236144e630568da524f6ccfd549",
        "buggy_code": "import static com.google.common.base.Charsets.UTF_8;",
        "fixed_code": "import static java.nio.charset.StandardCharsets.UTF_8;",
        "patch": "@@ -49,7 +49,7 @@\n import org.sonar.server.tester.ServerTester;\n import org.sonar.server.tester.UserSessionRule;\n \n-import static com.google.common.base.Charsets.UTF_8;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.apache.commons.io.IOUtils.toInputStream;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;"
    },
    {
        "commit_id": "3779bf3b1e2bb79c614bb8a683d86a4fde788790",
        "commit_message": "SONAR-8761 fix cleanup of db in ITs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3779bf3b1e2bb79c614bb8a683d86a4fde788790",
        "buggy_code": "public void enable_does_enable_feature_by_inserting_internal_property() {",
        "fixed_code": "public void enable_does_enable_support_by_inserting_internal_property() {",
        "patch": "@@ -43,7 +43,7 @@ public void isEnabled_returns_false_by_default() {\n   }\n \n   @Test\n-  public void enable_does_enable_feature_by_inserting_internal_property() {\n+  public void enable_does_enable_support_by_inserting_internal_property() {\n     underTest.enable(db.getSession());\n \n     assertThat(underTest.isEnabled(db.getSession())).isTrue();"
    },
    {
        "commit_id": "b5f6facd4b7070ea08c7a280d1f402ee1ad37373",
        "commit_message": "SONAR-8716 fix fallback of component to organization permission",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b5f6facd4b7070ea08c7a280d1f402ee1ad37373",
        "buggy_code": "PermissionTemplateDto template = findTemplate(dbSession, organizationUuid, new ComponentDto().setKey(effectiveKey).setQualifier(qualifier));",
        "fixed_code": "PermissionTemplateDto template = findTemplate(dbSession, organizationUuid, new ComponentDto().setOrganizationUuid(organizationUuid).setKey(effectiveKey).setQualifier(qualifier));",
        "patch": "@@ -77,7 +77,7 @@ public boolean wouldUserHavePermissionWithDefaultTemplate(DbSession dbSession,\n     }\n \n     String effectiveKey = ComponentKeys.createKey(projectKey, branch);\n-    PermissionTemplateDto template = findTemplate(dbSession, organizationUuid, new ComponentDto().setKey(effectiveKey).setQualifier(qualifier));\n+    PermissionTemplateDto template = findTemplate(dbSession, organizationUuid, new ComponentDto().setOrganizationUuid(organizationUuid).setKey(effectiveKey).setQualifier(qualifier));\n     if (template == null) {\n       return false;\n     }"
    },
    {
        "commit_id": "cdc24875d5f53501231be806f4a81adf8e5b335e",
        "commit_message": "SONAR-8716 fix check of permissions in api/settings\n\n* api/settings/list\n* api/settings/values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cdc24875d5f53501231be806f4a81adf8e5b335e",
        "buggy_code": "import static org.sonar.server.setting.ws.SettingsPermissionPredicates.LICENSE_HASH_SUFFIX;",
        "fixed_code": "import static org.sonar.server.setting.ws.SettingsWsSupport.LICENSE_HASH_SUFFIX;",
        "patch": "@@ -35,7 +35,7 @@\n import static org.sonar.api.CoreProperties.SERVER_ID;\n import static org.sonar.api.CoreProperties.SERVER_STARTTIME;\n import static org.sonar.api.PropertyType.LICENSE;\n-import static org.sonar.server.setting.ws.SettingsPermissionPredicates.LICENSE_HASH_SUFFIX;\n+import static org.sonar.server.setting.ws.SettingsWsSupport.LICENSE_HASH_SUFFIX;\n \n /**\n  * This class returns the list of settings required on scanner side (licenses, license hashes, server ids, etc.)"
    },
    {
        "commit_id": "cdc24875d5f53501231be806f4a81adf8e5b335e",
        "commit_message": "SONAR-8716 fix check of permissions in api/settings\n\n* api/settings/list\n* api/settings/values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cdc24875d5f53501231be806f4a81adf8e5b335e",
        "buggy_code": "SettingsPermissionPredicates.class,",
        "fixed_code": "SettingsWsSupport.class,",
        "patch": "@@ -27,7 +27,7 @@ protected void configureModule() {\n     add(\n       SettingsWs.class,\n       SetAction.class,\n-      SettingsPermissionPredicates.class,\n+      SettingsWsSupport.class,\n       ListDefinitionsAction.class,\n       ValuesAction.class,\n       SettingsFinder.class,"
    },
    {
        "commit_id": "1f59cbf65e3ad5002b8c532a68088ae3befe87d5",
        "commit_message": "SONAR-8716 fix check of permissions in SearchProjectPermissionsAction",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f59cbf65e3ad5002b8c532a68088ae3befe87d5",
        "buggy_code": "userSession.logIn().setGlobalPermissions(GlobalPermissions.SYSTEM_ADMIN);",
        "fixed_code": "userSession.logIn().setRoot();",
        "patch": "@@ -57,7 +57,7 @@ public class SearchProjectPermissionsActionTest extends BasePermissionWsTest<Sea\n   @Before\n   public void setUp() {\n     i18n.setProjectPermissions();\n-    userSession.logIn().setGlobalPermissions(GlobalPermissions.SYSTEM_ADMIN);\n+    userSession.logIn().setRoot();\n   }\n \n   @Override"
    },
    {
        "commit_id": "e1ac8ec6333a266f4838e0564b5d2f8da67093ac",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e1ac8ec6333a266f4838e0564b5d2f8da67093ac",
        "buggy_code": "assertThat(container.size()).isEqualTo(25 + 2);",
        "fixed_code": "assertThat(container.size()).isEqualTo(26 + 2);",
        "patch": "@@ -29,6 +29,6 @@ public class QProfilesWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new QProfilesWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(25 + 2);\n+    assertThat(container.size()).isEqualTo(26 + 2);\n   }\n }"
    },
    {
        "commit_id": "89cfa53e907d2e1554234ff997321c9231a7db9b",
        "commit_message": "SONAR-8716 fix check of permissions in api/users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89cfa53e907d2e1554234ff997321c9231a7db9b",
        "buggy_code": "userSession.checkLoggedIn().checkIsRoot();",
        "fixed_code": "userSession.checkIsRoot();",
        "patch": "@@ -51,7 +51,7 @@ public void define(WebService.NewController context) {\n \n   @Override\n   public void handle(Request request, Response response) throws Exception {\n-    userSession.checkLoggedIn().checkIsRoot();\n+    userSession.checkIsRoot();\n \n     writeProtobuf(CheckSecretKeyWsResponse.newBuilder().setSecretKeyAvailable(settings.getEncryption().hasSecretKey()).build(), request, response);\n   }"
    },
    {
        "commit_id": "89cfa53e907d2e1554234ff997321c9231a7db9b",
        "commit_message": "SONAR-8716 fix check of permissions in api/users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89cfa53e907d2e1554234ff997321c9231a7db9b",
        "buggy_code": "userSession.checkLoggedIn().checkIsRoot();",
        "fixed_code": "userSession.checkIsRoot();",
        "patch": "@@ -59,7 +59,7 @@ public void define(WebService.NewController context) {\n \n   @Override\n   public void handle(Request request, Response response) throws Exception {\n-    userSession.checkLoggedIn().checkIsRoot();\n+    userSession.checkIsRoot();\n \n     String value = request.mandatoryParam(PARAM_VALUE);\n     checkRequest(!value.isEmpty(), \"Parameter '%s' must not be empty\", PARAM_VALUE);"
    },
    {
        "commit_id": "89cfa53e907d2e1554234ff997321c9231a7db9b",
        "commit_message": "SONAR-8716 fix check of permissions in api/users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89cfa53e907d2e1554234ff997321c9231a7db9b",
        "buggy_code": "userSession.checkLoggedIn().checkPermission(SYSTEM_ADMIN);",
        "fixed_code": "userSession.checkLoggedIn().checkIsRoot();",
        "patch": "@@ -80,7 +80,7 @@ public void define(WebService.NewController controller) {\n \n   @Override\n   public void handle(Request request, Response response) throws Exception {\n-    userSession.checkLoggedIn().checkPermission(SYSTEM_ADMIN);\n+    userSession.checkLoggedIn().checkIsRoot();\n \n     String login = request.mandatoryParam(PARAM_LOGIN);\n     checkRequest(!login.equals(userSession.getLogin()), \"Self-deactivation is not possible\");"
    },
    {
        "commit_id": "1c3350a4d10f248c9f83014db8af474e70e9dd6c",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_gates/update_condition",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c3350a4d10f248c9f83014db8af474e70e9dd6c",
        "buggy_code": "userSession.checkLoggedIn().checkOrganizationPermission(defaultOrganizationProvider.get().getUuid(), QUALITY_GATE_ADMIN);",
        "fixed_code": "userSession.checkOrganizationPermission(defaultOrganizationProvider.get().getUuid(), QUALITY_GATE_ADMIN);",
        "patch": "@@ -77,7 +77,7 @@ public void define(WebService.NewController controller) {\n \n   @Override\n   public void handle(Request request, Response response) {\n-    userSession.checkLoggedIn().checkOrganizationPermission(defaultOrganizationProvider.get().getUuid(), QUALITY_GATE_ADMIN);\n+    userSession.checkOrganizationPermission(defaultOrganizationProvider.get().getUuid(), QUALITY_GATE_ADMIN);\n \n     try (DbSession dbSession = dbClient.openSession(false)) {\n       writeProtobuf(doHandle(toWsRequest(request), dbSession), request, response);"
    },
    {
        "commit_id": "1c3350a4d10f248c9f83014db8af474e70e9dd6c",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_gates/update_condition",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c3350a4d10f248c9f83014db8af474e70e9dd6c",
        "buggy_code": "new UpdateConditionAction(null, null, null),",
        "fixed_code": "new UpdateConditionAction(null, null, null, null),",
        "patch": "@@ -77,7 +77,7 @@ public void setUp() {\n       new DestroyAction(qGates), new RenameAction(qGates),\n       new SetAsDefaultAction(qGates), new UnsetDefaultAction(qGates),\n       new CreateConditionAction(null, null, null, null),\n-      new UpdateConditionAction(null, null, null),\n+      new UpdateConditionAction(null, null, null, null),\n       new DeleteConditionAction(qGates),\n       selectAction,\n       new DeselectAction(qGates, mock(DbClient.class), mock(ComponentFinder.class)),"
    },
    {
        "commit_id": "c42e34bea14dcab5e87515d73e43c2241bed9289",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_gates/create_condition",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c42e34bea14dcab5e87515d73e43c2241bed9289",
        "buggy_code": "new CreateConditionAction(null, null, null),",
        "fixed_code": "new CreateConditionAction(null, null, null, null),",
        "patch": "@@ -76,7 +76,7 @@ public void setUp() {\n       new CopyAction(qGates),\n       new DestroyAction(qGates), new RenameAction(qGates),\n       new SetAsDefaultAction(qGates), new UnsetDefaultAction(qGates),\n-      new CreateConditionAction(null, null, null),\n+      new CreateConditionAction(null, null, null, null),\n       new UpdateConditionAction(null, null, null),\n       new DeleteConditionAction(qGates),\n       selectAction,"
    },
    {
        "commit_id": "4a8c3e7543f0ef5414b7def58c6aea19d6dae7d5",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_gates/create",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a8c3e7543f0ef5414b7def58c6aea19d6dae7d5",
        "buggy_code": "new CreateAction(null, null, null),",
        "fixed_code": "new CreateAction(null, null, null, null),",
        "patch": "@@ -72,7 +72,7 @@ public void setUp() {\n       new ListAction(qGates),\n       new ShowAction(qGates),\n       new SearchAction(projectFinder),\n-      new CreateAction(null, null, null),\n+      new CreateAction(null, null, null, null),\n       new CopyAction(qGates),\n       new DestroyAction(qGates), new RenameAction(qGates),\n       new SetAsDefaultAction(qGates), new UnsetDefaultAction(qGates),"
    },
    {
        "commit_id": "fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "commit_message": "SONAR-8716 fix check of permissions in api/user/change_password",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "buggy_code": "userSession.checkPermission(GlobalPermissions.SYSTEM_ADMIN);",
        "fixed_code": "userSession.checkIsRoot();",
        "patch": "@@ -85,7 +85,7 @@ public void handle(Request request, Response response) throws Exception {\n         String previousPassword = request.mandatoryParam(PARAM_PREVIOUS_PASSWORD);\n         checkCurrentPassword(dbSession, login, previousPassword);\n       } else {\n-        userSession.checkPermission(GlobalPermissions.SYSTEM_ADMIN);\n+        userSession.checkIsRoot();\n       }\n \n       String password = request.mandatoryParam(PARAM_PASSWORD);"
    },
    {
        "commit_id": "fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "commit_message": "SONAR-8716 fix check of permissions in api/user/change_password",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "buggy_code": "userSessionRule.login().setRoot();",
        "fixed_code": "userSessionRule.logIn().setRoot();",
        "patch": "@@ -97,7 +97,7 @@ public class DebtModelBackupTest {\n \n   @Before\n   public void setUp() {\n-    userSessionRule.login().setRoot();\n+    userSessionRule.logIn().setRoot();\n \n     when(system2.now()).thenReturn(now.getTime());\n "
    },
    {
        "commit_id": "fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "commit_message": "SONAR-8716 fix check of permissions in api/user/change_password",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "buggy_code": "userSession.login().setRoot();",
        "fixed_code": "userSession.logIn().setRoot();",
        "patch": "@@ -95,7 +95,7 @@ public void initialize() {\n \n     underTest = new QualityGates(dbClient, metricFinder, userSession);\n \n-    userSession.login().setRoot();\n+    userSession.logIn().setRoot();\n   }\n \n   @Test"
    },
    {
        "commit_id": "fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "commit_message": "SONAR-8716 fix check of permissions in api/user/change_password",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc3f8a93860e65c2fc2e58f40ac70e38146ed95e",
        "buggy_code": "userSessionRule.login()",
        "fixed_code": "userSessionRule.logIn()",
        "patch": "@@ -309,7 +309,7 @@ public void return_breadcrumbs_on_module() throws Exception {\n   public void return_configuration_for_quality_profile_admin() throws Exception {\n     init();\n     componentDbTester.insertComponent(project);\n-    userSessionRule.login()\n+    userSessionRule.logIn()\n       .addProjectUuidPermissions(UserRole.USER, project.uuid())\n       .addOrganizationPermission(project.getOrganizationUuid(), QUALITY_PROFILE_ADMIN);\n "
    },
    {
        "commit_id": "f40f9f4725a3a0aa3416c4396bb4940dc845237f",
        "commit_message": "SONAR-8716 fix check of permissions in ReportSubmitter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f40f9f4725a3a0aa3416c4396bb4940dc845237f",
        "buggy_code": "userSession.checkPermission(PROVISIONING);",
        "fixed_code": "userSession.checkOrganizationPermission(organizationUuid, PROVISIONING);",
        "patch": "@@ -95,7 +95,7 @@ private static void ensureOrganizationIsConsistent(Optional<ComponentDto> projec\n   }\n \n   private ComponentDto createProject(DbSession dbSession, String organizationUuid, String projectKey, @Nullable String projectBranch, @Nullable String projectName) {\n-    userSession.checkPermission(PROVISIONING);\n+    userSession.checkOrganizationPermission(organizationUuid, PROVISIONING);\n     Integer userId = userSession.getUserId();\n     Long projectCreatorUserId = userId == null ? null : userId.longValue();\n "
    },
    {
        "commit_id": "2b88e2097436bc439e5fd72923e1c7c4d419694e",
        "commit_message": "SONAR-8716 fix check of permissions in api/license",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b88e2097436bc439e5fd72923e1c7c4d419694e",
        "buggy_code": "userSession.checkPermission(SYSTEM_ADMIN);",
        "fixed_code": "userSession.checkIsRoot();",
        "patch": "@@ -79,7 +79,7 @@ public void define(WebService.NewController controller) {\n \n   @Override\n   public void handle(Request request, Response response) throws Exception {\n-    userSession.checkPermission(SYSTEM_ADMIN);\n+    userSession.checkIsRoot();\n \n     DbSession dbSession = dbClient.openSession(true);\n     try {"
    },
    {
        "commit_id": "43f7af18561d3d2f31bf7c4ff824405843ce1f6f",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43f7af18561d3d2f31bf7c4ff824405843ce1f6f",
        "buggy_code": "if (!userSession.hasPermission(GlobalPermissions.QUALITY_PROFILE_ADMIN) &&",
        "fixed_code": "if (!userSession.hasOrganizationPermission(project.getOrganizationUuid(), GlobalPermissions.QUALITY_PROFILE_ADMIN) &&",
        "patch": "@@ -78,7 +78,7 @@ private QualityProfileDto selectProfileByKey(DbSession session, String profileKe\n   }\n \n   private void checkAdminOnProject(ComponentDto project) {\n-    if (!userSession.hasPermission(GlobalPermissions.QUALITY_PROFILE_ADMIN) &&\n+    if (!userSession.hasOrganizationPermission(project.getOrganizationUuid(), GlobalPermissions.QUALITY_PROFILE_ADMIN) &&\n       !userSession.hasComponentPermission(UserRole.ADMIN, project)) {\n       throw new ForbiddenException(\"Insufficient privileges\");\n     }"
    },
    {
        "commit_id": "0d6d15e60f0404e39046a1ae1d4f736d4a8ce684",
        "commit_message": "SONAR-8716 fix check of permissions in api/quality_gates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0d6d15e60f0404e39046a1ae1d4f736d4a8ce684",
        "buggy_code": "return false;",
        "fixed_code": "return true;",
        "patch": "@@ -94,7 +94,7 @@ public boolean isLoggedIn() {\n \n       @Override\n       public boolean isRoot() {\n-        return false;\n+        return true;\n       }\n \n       @Override"
    },
    {
        "commit_id": "c558d1083c3114ef5a9b698b913c9312cc84818e",
        "commit_message": "SONAR-8716 fix check of permissions in api/ce/cancel_all",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c558d1083c3114ef5a9b698b913c9312cc84818e",
        "buggy_code": "userSession.checkLoggedIn().checkIsRoot();",
        "fixed_code": "userSession.checkIsRoot();",
        "patch": "@@ -56,7 +56,7 @@ public void define(WebService.NewController controller) {\n \n   @Override\n   public void handle(Request wsRequest, Response wsResponse) {\n-    userSession.checkLoggedIn().checkIsRoot();\n+    userSession.checkIsRoot();\n     String taskId = wsRequest.mandatoryParam(PARAM_TASK_ID);\n     queue.cancel(taskId);\n     wsResponse.noContent();"
    },
    {
        "commit_id": "a5a4c240f137a85aba33233c8a9bfa9db627ef5c",
        "commit_message": "SONAR-8608 fix name of constant PARAM_ORGANIZATION_KEY",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5a4c240f137a85aba33233c8a9bfa9db627ef5c",
        "buggy_code": "public static final String PARAM_ORGANIZATION_KEY = \"organization\";",
        "fixed_code": "public static final String PARAM_ORGANIZATION = \"organization\";",
        "patch": "@@ -23,7 +23,7 @@ public class PermissionsWsParameters {\n   public static final String CONTROLLER = \"api/permissions\";\n \n   public static final String PARAM_PERMISSION = \"permission\";\n-  public static final String PARAM_ORGANIZATION_KEY = \"organization\";\n+  public static final String PARAM_ORGANIZATION = \"organization\";\n   public static final String PARAM_GROUP_NAME = \"groupName\";\n   public static final String PARAM_GROUP_ID = \"groupId\";\n   public static final String PARAM_PROJECT_ID = \"projectId\";"
    },
    {
        "commit_id": "194ba7a4bdcf0e0164560a99612e98076180ab28",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/194ba7a4bdcf0e0164560a99612e98076180ab28",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -33,7 +33,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"This web service is removed\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "6358f483146da56ef2893d109d347be10f5b342a",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6358f483146da56ef2893d109d347be10f5b342a",
        "buggy_code": "private void truncateAnalysisTables(Connection connection) throws SQLException {",
        "fixed_code": "private static void truncateAnalysisTables(Connection connection) throws SQLException {",
        "patch": "@@ -120,7 +120,7 @@ public void resetData() {\n     clearIndex(ComponentIndexDefinition.INDEX_COMPONENTS);\n   }\n \n-  private void truncateAnalysisTables(Connection connection) throws SQLException {\n+  private static void truncateAnalysisTables(Connection connection) throws SQLException {\n     try (Statement statement = connection.createStatement()) {\n       // Clear inspection tables\n       for (String table : ANALYSIS_TABLES) {"
    },
    {
        "commit_id": "3028d83ea3505b63ee8741e984c57dfeea0a9946",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3028d83ea3505b63ee8741e984c57dfeea0a9946",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -33,7 +33,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"The web service is removed and you're invited to use the alternatives: \" +\n         \"<ul>\" +"
    },
    {
        "commit_id": "3028d83ea3505b63ee8741e984c57dfeea0a9946",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3028d83ea3505b63ee8741e984c57dfeea0a9946",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -33,7 +33,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"The web service is removed and you're invited to use api/measures/search_history instead\")\n       .setSince(\"2.10\")"
    },
    {
        "commit_id": "75253f80b38dfc106971011e8aacc6ea117b11c4",
        "commit_message": "Fix assertions in Xoo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75253f80b38dfc106971011e8aacc6ea117b11c4",
        "buggy_code": "assertThat(repo.rules()).hasSize(16);",
        "fixed_code": "assertThat(repo.rules()).hasSize(17);",
        "patch": "@@ -42,7 +42,7 @@ public void define_xoo_rules() {\n     assertThat(repo).isNotNull();\n     assertThat(repo.name()).isEqualTo(\"Xoo\");\n     assertThat(repo.language()).isEqualTo(\"xoo\");\n-    assertThat(repo.rules()).hasSize(16);\n+    assertThat(repo.rules()).hasSize(17);\n \n     RulesDefinition.Rule rule = repo.rule(OneIssuePerLineSensor.RULE_KEY);\n     assertThat(rule.name()).isNotEmpty();"
    },
    {
        "commit_id": "75253f80b38dfc106971011e8aacc6ea117b11c4",
        "commit_message": "Fix assertions in Xoo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/75253f80b38dfc106971011e8aacc6ea117b11c4",
        "buggy_code": "Path unknownRelative = Paths.get(\"src/unknown/file.unknown\");",
        "fixed_code": "Path unknownRelative = Paths.get(\"src/unknown/file.notanalyzed\");",
        "patch": "@@ -293,7 +293,7 @@ public void publishDirsWithIssues() throws IOException {\n       .put(\"sonar.projectVersion\", \"1.0-SNAPSHOT\")\n       .put(\"sonar.projectDescription\", \"Description of Foo Project\");\n \n-    Path unknownRelative = Paths.get(\"src/unknown/file.unknown\");\n+    Path unknownRelative = Paths.get(\"src/unknown/file.notanalyzed\");\n     Path unknown = baseDir.toPath().resolve(unknownRelative);\n     Files.createDirectories(unknown.getParent());\n     Files.write(unknown, \"dummy content\".getBytes());"
    },
    {
        "commit_id": "934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "commit_message": "SONAR-8704 Refactor Elasticsearch types \"authorization\"\n\nMultiple indices define a type \"authorization\".\nThe related code was duplicated, and sometimes\nhad some minor differences. This commits share\nall the management of these types in the same\nbunch of classes.\nIt also allows to quickly create a project-related\nindex, without having to fix the different locations\nwhich may require project re-indexing.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "buggy_code": "+ 2 // content of EsSearchModule",
        "fixed_code": "+ 3 // content of EsSearchModule",
        "patch": "@@ -108,7 +108,7 @@ public void real_start() throws IOException {\n       COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION\n         + 25 // level 1\n         + 47 // content of DaoModule\n-        + 2 // content of EsSearchModule\n+        + 3 // content of EsSearchModule\n         + 63 // content of CorePropertyDefinitions\n         + 1 // content of CePropertyDefinitions\n     );"
    },
    {
        "commit_id": "934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "commit_message": "SONAR-8704 Refactor Elasticsearch types \"authorization\"\n\nMultiple indices define a type \"authorization\".\nThe related code was duplicated, and sometimes\nhad some minor differences. This commits share\nall the management of these types in the same\nbunch of classes.\nIt also allows to quickly create a project-related\nindex, without having to fix the different locations\nwhich may require project re-indexing.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "buggy_code": "permissionIndexer.index(dbSession, projectOrViewUuids);",
        "fixed_code": "permissionIndexer.indexProjectsByUuids(dbSession, projectOrViewUuids);",
        "patch": "@@ -150,7 +150,7 @@ private boolean hasProjectCreatorPermission(DbSession dbSession, @Nullable Permi\n   }\n \n   private void indexProjectPermissions(DbSession dbSession, List<String> projectOrViewUuids) {\n-    permissionIndexer.index(dbSession, projectOrViewUuids);\n+    permissionIndexer.indexProjectsByUuids(dbSession, projectOrViewUuids);\n   }\n \n   private void copyPermissions(DbSession dbSession, PermissionTemplateDto template, ComponentDto project, @Nullable Long projectCreatorUserId) {"
    },
    {
        "commit_id": "934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "commit_message": "SONAR-8704 Refactor Elasticsearch types \"authorization\"\n\nMultiple indices define a type \"authorization\".\nThe related code was duplicated, and sometimes\nhad some minor differences. This commits share\nall the management of these types in the same\nbunch of classes.\nIt also allows to quickly create a project-related\nindex, without having to fix the different locations\nwhich may require project re-indexing.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "buggy_code": "permissionIndexer.index(dbSession, projectOrViewUuids);",
        "fixed_code": "permissionIndexer.indexProjectsByUuids(dbSession, projectOrViewUuids);",
        "patch": "@@ -66,7 +66,7 @@ public void apply(DbSession dbSession, Collection<PermissionChange> changes) {\n     dbSession.commit();\n \n     if (!projectIds.isEmpty()) {\n-      permissionIndexer.index(dbSession, projectOrViewUuids);\n+      permissionIndexer.indexProjectsByUuids(dbSession, projectOrViewUuids);\n     }\n   }\n "
    },
    {
        "commit_id": "934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "commit_message": "SONAR-8704 Refactor Elasticsearch types \"authorization\"\n\nMultiple indices define a type \"authorization\".\nThe related code was duplicated, and sometimes\nhad some minor differences. This commits share\nall the management of these types in the same\nbunch of classes.\nIt also allows to quickly create a project-related\nindex, without having to fix the different locations\nwhich may require project re-indexing.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "buggy_code": "private EsClient client = new EsClient(NodeHolder.INSTANCE.node.client());",
        "fixed_code": "private final EsClient client = new EsClient(NodeHolder.INSTANCE.node.client());",
        "patch": "@@ -55,7 +55,7 @@\n public class EsTester extends ExternalResource {\n \n   private final List<IndexDefinition> indexDefinitions;\n-  private EsClient client = new EsClient(NodeHolder.INSTANCE.node.client());\n+  private final EsClient client = new EsClient(NodeHolder.INSTANCE.node.client());\n   private ComponentContainer container;\n \n   public EsTester(IndexDefinition... defs) {"
    },
    {
        "commit_id": "934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "commit_message": "SONAR-8704 Refactor Elasticsearch types \"authorization\"\n\nMultiple indices define a type \"authorization\".\nThe related code was duplicated, and sometimes\nhad some minor differences. This commits share\nall the management of these types in the same\nbunch of classes.\nIt also allows to quickly create a project-related\nindex, without having to fix the different locations\nwhich may require project re-indexing.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/934bf664b8e032c76c9e64e28ddb3ee46d7adbc3",
        "buggy_code": "assertThat(container.size()).isEqualTo(4);",
        "fixed_code": "assertThat(container.size()).isEqualTo(3 + 2);",
        "patch": "@@ -29,7 +29,7 @@ public class EsSearchModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new EsSearchModule().configure(container);\n-    assertThat(container.size()).isEqualTo(4);\n+    assertThat(container.size()).isEqualTo(3 + 2);\n   }\n \n }"
    },
    {
        "commit_id": "999ffec1ea26edbc5934870d0b23e90a4bf88686",
        "commit_message": "SONAR-8574 Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/999ffec1ea26edbc5934870d0b23e90a4bf88686",
        "buggy_code": "throw new ServerException(HTTP_GONE, String.format(\"The web service '%s' doesn't exists anymore, please read its documentation to use alternatives\", request.getPath()));",
        "fixed_code": "throw new ServerException(HTTP_GONE, String.format(\"The web service '%s' doesn't exist anymore, please read its documentation to use alternatives\", request.getPath()));",
        "patch": "@@ -36,6 +36,6 @@ public enum RemovedWebServiceHandler implements RequestHandler {\n \n   @Override\n   public void handle(Request request, Response response) throws Exception {\n-    throw new ServerException(HTTP_GONE, String.format(\"The web service '%s' doesn't exists anymore, please read its documentation to use alternatives\", request.getPath()));\n+    throw new ServerException(HTTP_GONE, String.format(\"The web service '%s' doesn't exist anymore, please read its documentation to use alternatives\", request.getPath()));\n   }\n }"
    },
    {
        "commit_id": "999ffec1ea26edbc5934870d0b23e90a4bf88686",
        "commit_message": "SONAR-8574 Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/999ffec1ea26edbc5934870d0b23e90a4bf88686",
        "buggy_code": "assertThat(e.getMessage()).isEqualTo(\"The web service '/api/resources/index' doesn't exists anymore, please read its documentation to use alternatives\");",
        "fixed_code": "assertThat(e.getMessage()).isEqualTo(\"The web service '/api/resources/index' doesn't exist anymore, please read its documentation to use alternatives\");",
        "patch": "@@ -44,7 +44,7 @@ public void throw_server_exception() throws Exception {\n       RemovedWebServiceHandler.INSTANCE.handle(request, null);\n       fail();\n     } catch (ServerException e) {\n-      assertThat(e.getMessage()).isEqualTo(\"The web service '/api/resources/index' doesn't exists anymore, please read its documentation to use alternatives\");\n+      assertThat(e.getMessage()).isEqualTo(\"The web service '/api/resources/index' doesn't exist anymore, please read its documentation to use alternatives\");\n       assertThat(e.httpCode()).isEqualTo(410);\n     }\n   }"
    },
    {
        "commit_id": "82d291e0327d14bac525979b952a8a45e68c1104",
        "commit_message": "SONAR-8413 Take into account context path during authentication error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82d291e0327d14bac525979b952a8a45e68c1104",
        "buggy_code": "handleAuthenticationError(e, response);",
        "fixed_code": "handleAuthenticationError(e, response, getContextPath());",
        "patch": "@@ -83,7 +83,7 @@ private void handleProvider(HttpServletRequest request, HttpServletResponse resp\n       }\n     } catch (AuthenticationException e) {\n       authenticationEvent.loginFailure(request, e);\n-      handleAuthenticationError(e, response);\n+      handleAuthenticationError(e, response, getContextPath());\n     } catch (Exception e) {\n       handleError(e, response, format(\"Fail to initialize authentication with provider '%s'\", provider.getKey()));\n     }"
    },
    {
        "commit_id": "82d291e0327d14bac525979b952a8a45e68c1104",
        "commit_message": "SONAR-8413 Take into account context path during authentication error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82d291e0327d14bac525979b952a8a45e68c1104",
        "buggy_code": "handleAuthenticationError(e, response);",
        "fixed_code": "handleAuthenticationError(e, response, getContextPath());",
        "patch": "@@ -78,7 +78,7 @@ private void handleProvider(HttpServletRequest request, HttpServletResponse resp\n       }\n     } catch (AuthenticationException e) {\n       authenticationEvent.loginFailure(request, e);\n-      handleAuthenticationError(e, response);\n+      handleAuthenticationError(e, response, getContextPath());\n     } catch (Exception e) {\n       handleError(e, response, format(\"Fail to callback authentication with '%s'\", provider.getKey()));\n     }"
    },
    {
        "commit_id": "82d291e0327d14bac525979b952a8a45e68c1104",
        "commit_message": "SONAR-8413 Take into account context path during authentication error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82d291e0327d14bac525979b952a8a45e68c1104",
        "buggy_code": "handleAuthenticationError(e, response);",
        "fixed_code": "handleAuthenticationError(e, response, request.getContextPath());",
        "patch": "@@ -110,7 +110,7 @@ public boolean initUserSession(HttpServletRequest request, HttpServletResponse r\n       }\n       if (isNotLocalOrJwt(e.getSource())) {\n         // redirect to Unauthorized error page\n-        handleAuthenticationError(e, response);\n+        handleAuthenticationError(e, response, request.getContextPath());\n         return false;\n       }\n       // Rails will redirect to login page"
    },
    {
        "commit_id": "f78f06335e9c6def32e7a4e7bdba897d80eb839d",
        "commit_message": "Remove error-prone params Organization in UserDbTester",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f78f06335e9c6def32e7a4e7bdba897d80eb839d",
        "buggy_code": "db.users().insertPermissionOnUser(org1, user1, QUALITY_GATE_ADMIN);",
        "fixed_code": "db.users().insertPermissionOnUser(user1, QUALITY_GATE_ADMIN);",
        "patch": "@@ -138,7 +138,7 @@ public void remove_global_permission_from_user() {\n   @Test\n   public void remove_project_permission_from_user() {\n     ComponentDto project2 = db.components().insertProject(org1);\n-    db.users().insertPermissionOnUser(org1, user1, QUALITY_GATE_ADMIN);\n+    db.users().insertPermissionOnUser(user1, QUALITY_GATE_ADMIN);\n     db.users().insertProjectPermissionOnUser(user1, ISSUE_ADMIN, project);\n     db.users().insertProjectPermissionOnUser(user1, USER, project);\n     db.users().insertProjectPermissionOnUser(user2, ISSUE_ADMIN, project);"
    },
    {
        "commit_id": "f78f06335e9c6def32e7a4e7bdba897d80eb839d",
        "commit_message": "Remove error-prone params Organization in UserDbTester",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f78f06335e9c6def32e7a4e7bdba897d80eb839d",
        "buggy_code": "db.users().insertProjectPermissionOnAnyone(organizationDto, UserRole.USER, project);",
        "fixed_code": "db.users().insertProjectPermissionOnAnyone(UserRole.USER, project);",
        "patch": "@@ -216,7 +216,7 @@ private ComponentDto newProject(String uuid, String name) {\n \n   private void addBrowsePermissionToAnyone(ComponentDto... projects) {\n     for (ComponentDto project : projects) {\n-      db.users().insertProjectPermissionOnAnyone(organizationDto, UserRole.USER, project);\n+      db.users().insertProjectPermissionOnAnyone(UserRole.USER, project);\n     }\n   }\n "
    },
    {
        "commit_id": "806e0ead74101e2409f4d995128015d0ca6f26b8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/806e0ead74101e2409f4d995128015d0ca6f26b8",
        "buggy_code": "Preconditions.checkState(this.metric.valueType().equals(this.value.getClass()), \"Measure value should be of type \" + this.metric.valueType());",
        "fixed_code": "Preconditions.checkState(this.metric.valueType().equals(this.value.getClass()), \"Measure value should be of type %s\", this.metric.valueType());",
        "patch": "@@ -89,7 +89,7 @@ public DefaultMeasure<G> setFromCore() {\n   public void doSave() {\n     Preconditions.checkNotNull(this.value, \"Measure value can't be null\");\n     Preconditions.checkNotNull(this.metric, \"Measure metric can't be null\");\n-    Preconditions.checkState(this.metric.valueType().equals(this.value.getClass()), \"Measure value should be of type \" + this.metric.valueType());\n+    Preconditions.checkState(this.metric.valueType().equals(this.value.getClass()), \"Measure value should be of type %s\", this.metric.valueType());\n     storage.store(this);\n   }\n "
    },
    {
        "commit_id": "806e0ead74101e2409f4d995128015d0ca6f26b8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/806e0ead74101e2409f4d995128015d0ca6f26b8",
        "buggy_code": "logger.warn(\"No Quality profile found for language \" + lang);",
        "fixed_code": "logger.warn(\"No Quality profile found for language {}\", lang);",
        "patch": "@@ -56,7 +56,7 @@ void execute(Logger logger) {\n     for (String lang : fs.languages()) {\n       QProfile profile = profiles.findByLanguage(lang);\n       if (profile == null) {\n-        logger.warn(\"No Quality profile found for language \" + lang);\n+        logger.warn(\"No Quality profile found for language {}\", lang);\n       } else {\n         logger.info(\"Quality profile for {}: {}\", lang, profile.getName());\n         if (isNotEmpty(defaultName) && defaultName.equals(profile.getName())) {"
    },
    {
        "commit_id": "806e0ead74101e2409f4d995128015d0ca6f26b8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/806e0ead74101e2409f4d995128015d0ca6f26b8",
        "buggy_code": "LOG.info(\"  \" + pattern);",
        "fixed_code": "LOG.info(\"  {}\", pattern);",
        "patch": "@@ -62,7 +62,7 @@ private static void log(String title, PathPattern[] patterns) {\n     if (patterns.length > 0) {\n       LOG.info(title);\n       for (PathPattern pattern : patterns) {\n-        LOG.info(\"  \" + pattern);\n+        LOG.info(\"  {}\", pattern);\n       }\n     }\n   }"
    },
    {
        "commit_id": "806e0ead74101e2409f4d995128015d0ca6f26b8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/806e0ead74101e2409f4d995128015d0ca6f26b8",
        "buggy_code": "LOG.warn(HTML_REPORT_LOCATION_KEY + \" should indicate a directory. Using parent folder.\");",
        "fixed_code": "LOG.warn(\"{} should indicate a directory. Using parent folder.\", HTML_REPORT_LOCATION_KEY);",
        "patch": "@@ -110,7 +110,7 @@ private File getReportFileDir() {\n       reportFileDir = new File(fs.workDir(), reportFileDirStr);\n     }\n     if (StringUtils.endsWith(reportFileDirStr, \".html\")) {\n-      LOG.warn(HTML_REPORT_LOCATION_KEY + \" should indicate a directory. Using parent folder.\");\n+      LOG.warn(\"{} should indicate a directory. Using parent folder.\", HTML_REPORT_LOCATION_KEY);\n       reportFileDir = reportFileDir.getParentFile();\n     }\n     try {"
    },
    {
        "commit_id": "63707f9bd682c936912c6fbce45102337a51ec3f",
        "commit_message": "Fix Quality flaws\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63707f9bd682c936912c6fbce45102337a51ec3f",
        "buggy_code": "LOGGER.info(String.format(\"Elasticsearch Marvel is enabled for %s\", hosts));",
        "fixed_code": "LOGGER.info(\"Elasticsearch Marvel is enabled for %s\", hosts);",
        "patch": "@@ -183,7 +183,7 @@ private void configureMarvel(Settings.Builder builder) {\n     // If we're collecting indexing data send them to the Marvel host(s)\n     if (!marvels.isEmpty()) {\n       String hosts = StringUtils.join(marvels, \",\");\n-      LOGGER.info(String.format(\"Elasticsearch Marvel is enabled for %s\", hosts));\n+      LOGGER.info(\"Elasticsearch Marvel is enabled for %s\", hosts);\n       builder.put(\"marvel.agent.exporter.es.hosts\", hosts);\n     }\n   }"
    },
    {
        "commit_id": "63707f9bd682c936912c6fbce45102337a51ec3f",
        "commit_message": "Fix Quality flaws\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63707f9bd682c936912c6fbce45102337a51ec3f",
        "buggy_code": "checkState(status != NO_VALUE, \"There is no value when status is \" + NO_VALUE);",
        "fixed_code": "checkState(status != NO_VALUE, \"There is no value when status is %s\", NO_VALUE);",
        "patch": "@@ -163,7 +163,7 @@ public boolean isOnLeakPeriod() {\n \n   @Override\n   public String getValue() {\n-    checkState(status != NO_VALUE, \"There is no value when status is \" + NO_VALUE);\n+    checkState(status != NO_VALUE, \"There is no value when status is %s\", NO_VALUE);\n \n     return value;\n   }"
    },
    {
        "commit_id": "6e813f24d7fa019411829e5543fcd1389d1a72e1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6e813f24d7fa019411829e5543fcd1389d1a72e1",
        "buggy_code": "logger.debug(name + \"...\");",
        "fixed_code": "logger.debug(\"%s ...\", name);",
        "patch": "@@ -55,7 +55,7 @@ public TimeProfiler start(String name) {\n     this.name = name;\n     this.start = System.currentTimeMillis();\n     if (debug) {\n-      logger.debug(name + \"...\");\n+      logger.debug(\"%s ...\", name);\n     } else {\n       logger.info(name + \"...\");\n     }"
    },
    {
        "commit_id": "5b0d75e306fd53f81b9452564bdabbedbceeb110",
        "commit_message": "SONAR-7297 Replace usage of Issue by DefaultIssue in Action",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b0d75e306fd53f81b9452564bdabbedbceeb110",
        "buggy_code": "underTest.verify(properties, Lists.<Issue>newArrayList(), new AnonymousMockUserSession());",
        "fixed_code": "underTest.verify(properties, Lists.newArrayList(), new AnonymousMockUserSession());",
        "patch": "@@ -75,7 +75,7 @@ public void should_execute() {\n   public void should_verify_fail_if_parameter_not_found() {\n     Map<String, Object> properties = newHashMap();\n     try {\n-      underTest.verify(properties, Lists.<Issue>newArrayList(), new AnonymousMockUserSession());\n+      underTest.verify(properties, Lists.newArrayList(), new AnonymousMockUserSession());\n       fail();\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Missing parameter: 'type'\");"
    },
    {
        "commit_id": "5b0d75e306fd53f81b9452564bdabbedbceeb110",
        "commit_message": "SONAR-7297 Replace usage of Issue by DefaultIssue in Action",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b0d75e306fd53f81b9452564bdabbedbceeb110",
        "buggy_code": "action.verify(ImmutableMap.of(\"unknwown\", \"reopen\"), Lists.<Issue>newArrayList(), userSession);",
        "fixed_code": "action.verify(ImmutableMap.of(\"unknwown\", \"reopen\"), Lists.newArrayList(), userSession);",
        "patch": "@@ -102,7 +102,7 @@ public void test_verify() throws Exception {\n   public void fail_to_verify_when_parameter_not_found() {\n     expectedException.expect(IllegalArgumentException.class);\n     expectedException.expectMessage(\"Missing parameter : 'transition'\");\n-    action.verify(ImmutableMap.of(\"unknwown\", \"reopen\"), Lists.<Issue>newArrayList(), userSession);\n+    action.verify(ImmutableMap.of(\"unknwown\", \"reopen\"), Lists.newArrayList(), userSession);\n   }\n \n   @Test"
    },
    {
        "commit_id": "e52ca10a4a1b07d05c894e0d8564ffa1b5af3e47",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e52ca10a4a1b07d05c894e0d8564ffa1b5af3e47",
        "buggy_code": "this.name = requireNonNull(name, \"Name is required\");;",
        "fixed_code": "this.name = requireNonNull(name, \"Name is required\");",
        "patch": "@@ -30,7 +30,7 @@ public class UpdateEventRequest {\n \n   public UpdateEventRequest(String event, String name) {\n     this.event = requireNonNull(event, \"Event key is required\");\n-    this.name = requireNonNull(name, \"Name is required\");;\n+    this.name = requireNonNull(name, \"Name is required\");\n   }\n \n   public String getEvent() {"
    },
    {
        "commit_id": "50c625ba5cbd20a0e23d09a9f01623597fb4814a",
        "commit_message": "SONAR-8465 SONAR-8466 WS of analysis event return the correct category in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50c625ba5cbd20a0e23d09a9f01623597fb4814a",
        "buggy_code": "expectedException.expectMessage(\"Event of category 'Profile' cannot be modified. Authorized categories: Version, Other\");",
        "fixed_code": "expectedException.expectMessage(\"Event of category 'QUALITY_PROFILE' cannot be modified. Authorized categories: VERSION, OTHER\");",
        "patch": "@@ -113,7 +113,7 @@ public void fail_if_category_different_than_other_and_version() {\n     db.events().insertEvent(newEvent(analysis).setUuid(\"E1\").setCategory(\"Profile\"));\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Event of category 'Profile' cannot be modified. Authorized categories: Version, Other\");\n+    expectedException.expectMessage(\"Event of category 'QUALITY_PROFILE' cannot be modified. Authorized categories: VERSION, OTHER\");\n \n     call(\"E1\");\n   }"
    },
    {
        "commit_id": "50c625ba5cbd20a0e23d09a9f01623597fb4814a",
        "commit_message": "SONAR-8465 SONAR-8466 WS of analysis event return the correct category in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50c625ba5cbd20a0e23d09a9f01623597fb4814a",
        "buggy_code": "expectedException.expectMessage(\"Event of category 'Profile' cannot be modified. Authorized categories: Version, Other\");",
        "fixed_code": "expectedException.expectMessage(\"Event of category 'QUALITY_PROFILE' cannot be modified. Authorized categories: VERSION, OTHER\");",
        "patch": "@@ -211,7 +211,7 @@ public void fail_if_category_other_than_other_or_version() {\n     db.events().insertEvent(newEvent(analysis).setUuid(\"E1\").setCategory(\"Profile\"));\n \n     expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Event of category 'Profile' cannot be modified. Authorized categories: Version, Other\");\n+    expectedException.expectMessage(\"Event of category 'QUALITY_PROFILE' cannot be modified. Authorized categories: VERSION, OTHER\");\n \n     call(\"E1\", \"name\");\n   }"
    },
    {
        "commit_id": "0e9caf0c013529f14d4e22561c38f050165c6772",
        "commit_message": "SONAR-8416 fix login failure log at OAuth2 successful authent",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0e9caf0c013529f14d4e22561c38f050165c6772",
        "buggy_code": "\"/sessions/*\",",
        "fixed_code": "\"/sessions/*\", \"/oauth2/callback/*\",",
        "patch": "@@ -61,7 +61,7 @@ public class UserSessionInitializer {\n     \"/batch/index\", \"/batch/file\",\n     \"/maintenance/*\",\n     \"/setup/*\",\n-    \"/sessions/*\",\n+    \"/sessions/*\", \"/oauth2/callback/*\",\n     \"/api/system/db_migration_status\", \"/api/system/status\", \"/api/system/migrate_db\",\n     \"/api/server/index\", \"/api/server/setup\", \"/api/server/version\",\n     AUTH_LOGIN_URL, AUTH_VALIDATE_URL);"
    },
    {
        "commit_id": "bd28d90a20a021855fe2754faa1b59272ed4970b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd28d90a20a021855fe2754faa1b59272ed4970b",
        "buggy_code": "org.sonar.api.measures.Measure deprecatedMeasure = new org.sonar.api.measures.Measure((Metric<?>) measure.metric());",
        "fixed_code": "Measure deprecatedMeasure = new Measure((Metric<?>) measure.metric());",
        "patch": "@@ -166,7 +166,7 @@ public <M> M getMeasures(Resource resource, MeasuresFilter<M> filter) {\n   }\n \n   private static Measure toDeprecated(org.sonar.api.batch.sensor.measure.Measure<?> measure) {\n-    org.sonar.api.measures.Measure deprecatedMeasure = new org.sonar.api.measures.Measure((Metric<?>) measure.metric());\n+    Measure deprecatedMeasure = new Measure((Metric<?>) measure.metric());\n     setValueAccordingToMetricType(measure, deprecatedMeasure);\n     return deprecatedMeasure;\n   }"
    },
    {
        "commit_id": "bd28d90a20a021855fe2754faa1b59272ed4970b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd28d90a20a021855fe2754faa1b59272ed4970b",
        "buggy_code": "implements org.sonar.api.batch.events.InitializerExecutionHandler.InitializerExecutionEvent {",
        "fixed_code": "implements InitializerExecutionHandler.InitializerExecutionEvent {",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.batch.events.InitializerExecutionHandler;\n \n class InitializerExecutionEvent extends AbstractPhaseEvent<InitializerExecutionHandler>\n-    implements org.sonar.api.batch.events.InitializerExecutionHandler.InitializerExecutionEvent {\n+  implements InitializerExecutionHandler.InitializerExecutionEvent {\n \n   private final Initializer initializer;\n "
    },
    {
        "commit_id": "bd28d90a20a021855fe2754faa1b59272ed4970b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd28d90a20a021855fe2754faa1b59272ed4970b",
        "buggy_code": "implements org.sonar.api.batch.events.PostJobExecutionHandler.PostJobExecutionEvent {",
        "fixed_code": "implements PostJobExecutionHandler.PostJobExecutionEvent {",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.batch.events.PostJobExecutionHandler;\n \n class PostJobExecutionEvent extends AbstractPhaseEvent<PostJobExecutionHandler>\n-    implements org.sonar.api.batch.events.PostJobExecutionHandler.PostJobExecutionEvent {\n+  implements PostJobExecutionHandler.PostJobExecutionEvent {\n \n   private final PostJob postJob;\n "
    },
    {
        "commit_id": "bd28d90a20a021855fe2754faa1b59272ed4970b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd28d90a20a021855fe2754faa1b59272ed4970b",
        "buggy_code": "implements org.sonar.api.batch.events.ProjectAnalysisHandler.ProjectAnalysisEvent {",
        "fixed_code": "implements ProjectAnalysisHandler.ProjectAnalysisEvent {",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.resources.Project;\n \n class ProjectAnalysisEvent extends AbstractPhaseEvent<ProjectAnalysisHandler>\n-    implements org.sonar.api.batch.events.ProjectAnalysisHandler.ProjectAnalysisEvent {\n+  implements ProjectAnalysisHandler.ProjectAnalysisEvent {\n \n   private final Project project;\n "
    },
    {
        "commit_id": "bd28d90a20a021855fe2754faa1b59272ed4970b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd28d90a20a021855fe2754faa1b59272ed4970b",
        "buggy_code": "implements org.sonar.api.batch.events.SensorExecutionHandler.SensorExecutionEvent {",
        "fixed_code": "implements SensorExecutionHandler.SensorExecutionEvent {",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.batch.events.SensorExecutionHandler;\n \n class SensorExecutionEvent extends AbstractPhaseEvent<SensorExecutionHandler>\n-    implements org.sonar.api.batch.events.SensorExecutionHandler.SensorExecutionEvent {\n+  implements SensorExecutionHandler.SensorExecutionEvent {\n \n   private final Sensor sensor;\n "
    },
    {
        "commit_id": "f684d9e84d40ba03612d8c0f5b649ce84f7d3399",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f684d9e84d40ba03612d8c0f5b649ce84f7d3399",
        "buggy_code": ".forEach(validation -> validation.validate(data));",
        "fixed_code": ".forEach(validation -> validation.accept(data));",
        "patch": "@@ -98,7 +98,7 @@ public void handle(Request request, Response response) throws Exception {\n       resetRequest.getKeys().forEach(key -> {\n         SettingData data = new SettingData(key, emptyList(), component.orElse(null));\n         ImmutableList.of(validations.scope(), validations.qualifier())\n-          .forEach(validation -> validation.validate(data));\n+          .forEach(validation -> validation.accept(data));\n       });\n \n       List<String> keys = getKeys(resetRequest);"
    },
    {
        "commit_id": "f684d9e84d40ba03612d8c0f5b649ce84f7d3399",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f684d9e84d40ba03612d8c0f5b649ce84f7d3399",
        "buggy_code": "assertThat(OTHER.equals(result.getCategory()));",
        "fixed_code": "assertThat(OTHER).isEqualTo(result.getCategory());",
        "patch": "@@ -49,7 +49,7 @@ public void build_request() {\n   public void other_category_by_default() {\n     CreateEventRequest result = underTest.setAnalysis(\"P1\").setName(\"name\").build();\n \n-    assertThat(OTHER.equals(result.getCategory()));\n+    assertThat(OTHER).isEqualTo(result.getCategory());\n   }\n \n   @Test"
    },
    {
        "commit_id": "2acee04f1c45fc78130ca31431de294484e45d3d",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2acee04f1c45fc78130ca31431de294484e45d3d",
        "buggy_code": "jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM));",
        "fixed_code": "jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM), token.getSubject());",
        "patch": "@@ -136,7 +136,7 @@ private Optional<Token> validateToken(String tokenEncoded, HttpServletRequest re\n     if (now.after(addSeconds(token.getIssuedAt(), SESSION_DISCONNECT_IN_SECONDS))) {\n       return Optional.empty();\n     }\n-    jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM));\n+    jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM), token.getSubject());\n \n     if (now.after(addSeconds(getLastRefreshDate(token), SESSION_REFRESH_IN_SECONDS))) {\n       refreshToken(token, request, response);"
    },
    {
        "commit_id": "2acee04f1c45fc78130ca31431de294484e45d3d",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2acee04f1c45fc78130ca31431de294484e45d3d",
        "buggy_code": "authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(provider.getName()));",
        "fixed_code": "authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(oauthProvider));",
        "patch": "@@ -78,7 +78,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n         WrappedContext context = new WrappedContext(oAuth2ContextFactory.newCallback(httpRequest, (HttpServletResponse) response, oauthProvider));\n         oauthProvider.callback(context);\n         if (context.isAuthenticated()) {\n-          authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(provider.getName()));\n+          authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(oauthProvider));\n         }\n       } else {\n         handleError((HttpServletResponse) response, format(\"Not an OAuth2IdentityProvider: %s\", provider.getClass()));"
    },
    {
        "commit_id": "2acee04f1c45fc78130ca31431de294484e45d3d",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2acee04f1c45fc78130ca31431de294484e45d3d",
        "buggy_code": "return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider());",
        "fixed_code": "return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider(), Source.sso());",
        "patch": "@@ -169,7 +169,7 @@ private UserDto doAuthenticate(Map<String, String> headerValuesByNames, String l\n       String groupsValue = getHeaderValue(headerValuesByNames, GROUPS_HEADER_PARAM);\n       userIdentityBuilder.setGroups(groupsValue == null ? Collections.emptySet() : new HashSet<>(COMA_SPLITTER.splitToList(groupsValue)));\n     }\n-    return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider());\n+    return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider(), Source.sso());\n   }\n \n   @CheckForNull"
    },
    {
        "commit_id": "2acee04f1c45fc78130ca31431de294484e45d3d",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2acee04f1c45fc78130ca31431de294484e45d3d",
        "buggy_code": "verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE);",
        "fixed_code": "verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE, USER_LOGIN);",
        "patch": "@@ -279,7 +279,7 @@ public void validate_token_verify_csrf_state() throws Exception {\n \n     underTest.validateToken(request, response);\n \n-    verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE);\n+    verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE, USER_LOGIN);\n   }\n \n   @Test"
    },
    {
        "commit_id": "2acee04f1c45fc78130ca31431de294484e45d3d",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2acee04f1c45fc78130ca31431de294484e45d3d",
        "buggy_code": "verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider.getName()));",
        "fixed_code": "verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider));",
        "patch": "@@ -162,7 +162,7 @@ private void assertCallbackCalled(FakeOAuth2IdentityProvider oAuth2IdentityProvi\n     assertThat(logTester.logs(LoggerLevel.ERROR)).isEmpty();\n     assertThat(oAuth2IdentityProvider.isCallbackCalled()).isTrue();\n     if (expectLoginLog) {\n-      verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider.getName()));\n+      verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider));\n     } else {\n       verifyZeroInteractions(authenticationEvent);\n     }"
    },
    {
        "commit_id": "29beda167202bebddb4f7e09e8e4e6f0a12295a3",
        "commit_message": "SONAR-5471 fix type of INTEGER columns on Oracle\n\nCorrect type is NUMBER(38,0) but not INTEGER\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29beda167202bebddb4f7e09e8e4e6f0a12295a3",
        "buggy_code": ".isEqualTo(\"CREATE TABLE table_42 (id INTEGER NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");",
        "fixed_code": ".isEqualTo(\"CREATE TABLE table_42 (id NUMBER(38,0) NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");",
        "patch": "@@ -253,7 +253,7 @@ public void build_generates_a_create_trigger_statement_when_an_autoincrement_pk_\n       .build();\n     assertThat(stmts).hasSize(3);\n     assertThat(stmts.get(0))\n-      .isEqualTo(\"CREATE TABLE table_42 (id INTEGER NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");\n+      .isEqualTo(\"CREATE TABLE table_42 (id NUMBER(38,0) NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");\n     assertThat(stmts.get(1))\n       .isEqualTo(\"CREATE SEQUENCE table_42_seq START WITH 1 INCREMENT BY 1\");\n     assertThat(stmts.get(2))"
    },
    {
        "commit_id": "29beda167202bebddb4f7e09e8e4e6f0a12295a3",
        "commit_message": "SONAR-5471 fix type of INTEGER columns on Oracle\n\nCorrect type is NUMBER(38,0) but not INTEGER\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29beda167202bebddb4f7e09e8e4e6f0a12295a3",
        "buggy_code": "assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"INTEGER\");",
        "fixed_code": "assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"NUMBER(38,0)\");",
        "patch": "@@ -97,7 +97,7 @@ public void generateSqlType_for_MySql() {\n \n   @Test\n   public void generateSqlType_for_Oracle() {\n-    assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"INTEGER\");\n+    assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"NUMBER(38,0)\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "31ee668ab9f8ed0c998278ceaae422ef91f1b5bf",
        "commit_message": "fix type of INTEGER columns on Oracle\n\nCorrect type is NUMBER(38,0) but not INTEGER\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31ee668ab9f8ed0c998278ceaae422ef91f1b5bf",
        "buggy_code": ".isEqualTo(\"CREATE TABLE table_42 (id INTEGER NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");",
        "fixed_code": ".isEqualTo(\"CREATE TABLE table_42 (id NUMBER(38,0) NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");",
        "patch": "@@ -253,7 +253,7 @@ public void build_generates_a_create_trigger_statement_when_an_autoincrement_pk_\n       .build();\n     assertThat(stmts).hasSize(3);\n     assertThat(stmts.get(0))\n-      .isEqualTo(\"CREATE TABLE table_42 (id INTEGER NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");\n+      .isEqualTo(\"CREATE TABLE table_42 (id NUMBER(38,0) NOT NULL, CONSTRAINT pk_table_42 PRIMARY KEY (id))\");\n     assertThat(stmts.get(1))\n       .isEqualTo(\"CREATE SEQUENCE table_42_seq START WITH 1 INCREMENT BY 1\");\n     assertThat(stmts.get(2))"
    },
    {
        "commit_id": "31ee668ab9f8ed0c998278ceaae422ef91f1b5bf",
        "commit_message": "fix type of INTEGER columns on Oracle\n\nCorrect type is NUMBER(38,0) but not INTEGER\n\nSigned-off-by: Simon Brandhof <simon.brandhof@sonarsource.com>",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31ee668ab9f8ed0c998278ceaae422ef91f1b5bf",
        "buggy_code": "assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"INTEGER\");",
        "fixed_code": "assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"NUMBER(38,0)\");",
        "patch": "@@ -87,7 +87,7 @@ public void generateSqlType_for_MySql() {\n \n   @Test\n   public void generateSqlType_for_Oracle() {\n-    assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"INTEGER\");\n+    assertThat(underTest.generateSqlType(new Oracle())).isEqualTo(\"NUMBER(38,0)\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "ea21e551a7b27ca7c0ababba410941982ffbd523",
        "commit_message": "SONAR-7291 Rename IssueUpdater to IssueFieldsSetter\n\nA new IssueUpdater used to update issue in db needs to be created",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea21e551a7b27ca7c0ababba410941982ffbd523",
        "buggy_code": "private IssueUpdater issueUpdater = mock(IssueUpdater.class);",
        "fixed_code": "private IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);",
        "patch": "@@ -42,7 +42,7 @@ public class CommentActionTest {\n \n   private CommentAction action;\n \n-  private IssueUpdater issueUpdater = mock(IssueUpdater.class);\n+  private IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);\n \n   @Before\n   public void before(){"
    },
    {
        "commit_id": "ea21e551a7b27ca7c0ababba410941982ffbd523",
        "commit_message": "SONAR-7291 Rename IssueUpdater to IssueFieldsSetter\n\nA new IssueUpdater used to update issue in db needs to be created",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea21e551a7b27ca7c0ababba410941982ffbd523",
        "buggy_code": "private IssueUpdater issueUpdater = mock(IssueUpdater.class);",
        "fixed_code": "private IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);",
        "patch": "@@ -51,7 +51,7 @@ public class SetSeverityActionTest {\n \n   private SetSeverityAction action;\n \n-  private IssueUpdater issueUpdater = mock(IssueUpdater.class);\n+  private IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);\n \n   @Before\n   public void before() {"
    },
    {
        "commit_id": "ea21e551a7b27ca7c0ababba410941982ffbd523",
        "commit_message": "SONAR-7291 Rename IssueUpdater to IssueFieldsSetter\n\nA new IssueUpdater used to update issue in db needs to be created",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea21e551a7b27ca7c0ababba410941982ffbd523",
        "buggy_code": "IssueUpdater issueUpdater = mock(IssueUpdater.class);",
        "fixed_code": "IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);",
        "patch": "@@ -48,7 +48,7 @@ public class SetTypeActionTest {\n   public UserSessionRule userSessionRule = UserSessionRule.standalone();\n \n   UserSession userSessionMock = mock(UserSession.class);\n-  IssueUpdater issueUpdater = mock(IssueUpdater.class);\n+  IssueFieldsSetter issueUpdater = mock(IssueFieldsSetter.class);\n   SetTypeAction underTest;\n \n   @Before"
    },
    {
        "commit_id": "81952ca289603e06c150ee04dd9eb199e19d9e35",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81952ca289603e06c150ee04dd9eb199e19d9e35",
        "buggy_code": "} else {",
        "fixed_code": "} else if (conditionOnItCoverage.isPresent()) {",
        "patch": "@@ -119,7 +119,7 @@ private void processConditions(String coverageMetricKey, String overallMetricKey\n           updateQualityGateCondition(conditionOnOverallCoverage.get().getId(), coverageMetricKey);\n         } else if (conditionOnCoverage.isPresent()) {\n           removeQualityGateCondition(conditionOnItCoverage);\n-        } else {\n+        } else if (conditionOnItCoverage.isPresent()) {\n           updateQualityGateCondition(conditionOnItCoverage.get().getId(), coverageMetricKey);\n         }\n       } catch (SQLException e) {"
    },
    {
        "commit_id": "780b00c00c57ed90190eb5eed2799af4095354c7",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780b00c00c57ed90190eb5eed2799af4095354c7",
        "buggy_code": "jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM));",
        "fixed_code": "jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM), token.getSubject());",
        "patch": "@@ -136,7 +136,7 @@ private Optional<Token> validateToken(String tokenEncoded, HttpServletRequest re\n     if (now.after(addSeconds(token.getIssuedAt(), SESSION_DISCONNECT_IN_SECONDS))) {\n       return Optional.empty();\n     }\n-    jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM));\n+    jwtCsrfVerifier.verifyState(request, (String) token.get(CSRF_JWT_PARAM), token.getSubject());\n \n     if (now.after(addSeconds(getLastRefreshDate(token), SESSION_REFRESH_IN_SECONDS))) {\n       refreshToken(token, request, response);"
    },
    {
        "commit_id": "780b00c00c57ed90190eb5eed2799af4095354c7",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780b00c00c57ed90190eb5eed2799af4095354c7",
        "buggy_code": "authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(provider.getName()));",
        "fixed_code": "authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(oauthProvider));",
        "patch": "@@ -78,7 +78,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n         WrappedContext context = new WrappedContext(oAuth2ContextFactory.newCallback(httpRequest, (HttpServletResponse) response, oauthProvider));\n         oauthProvider.callback(context);\n         if (context.isAuthenticated()) {\n-          authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(provider.getName()));\n+          authenticationEvent.login(httpRequest, context.getLogin(), Source.oauth2(oauthProvider));\n         }\n       } else {\n         handleError((HttpServletResponse) response, format(\"Not an OAuth2IdentityProvider: %s\", provider.getClass()));"
    },
    {
        "commit_id": "780b00c00c57ed90190eb5eed2799af4095354c7",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780b00c00c57ed90190eb5eed2799af4095354c7",
        "buggy_code": "return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider());",
        "fixed_code": "return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider(), Source.sso());",
        "patch": "@@ -169,7 +169,7 @@ private UserDto doAuthenticate(Map<String, String> headerValuesByNames, String l\n       String groupsValue = getHeaderValue(headerValuesByNames, GROUPS_HEADER_PARAM);\n       userIdentityBuilder.setGroups(groupsValue == null ? Collections.emptySet() : new HashSet<>(COMA_SPLITTER.splitToList(groupsValue)));\n     }\n-    return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider());\n+    return userIdentityAuthenticator.authenticate(userIdentityBuilder.build(), new SsoIdentityProvider(), Source.sso());\n   }\n \n   @CheckForNull"
    },
    {
        "commit_id": "780b00c00c57ed90190eb5eed2799af4095354c7",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780b00c00c57ed90190eb5eed2799af4095354c7",
        "buggy_code": "verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE);",
        "fixed_code": "verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE, USER_LOGIN);",
        "patch": "@@ -279,7 +279,7 @@ public void validate_token_verify_csrf_state() throws Exception {\n \n     underTest.validateToken(request, response);\n \n-    verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE);\n+    verify(jwtCsrfVerifier).verifyState(request, CSRF_STATE, USER_LOGIN);\n   }\n \n   @Test"
    },
    {
        "commit_id": "780b00c00c57ed90190eb5eed2799af4095354c7",
        "commit_message": "SONAR-8416 add event log in case of error for basic, realm, jwt\n\ngeneric UnauthorizedException thrown in case of login failure is replaced by specific AuthenticationException which includes context information to generate details failure logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780b00c00c57ed90190eb5eed2799af4095354c7",
        "buggy_code": "verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider.getName()));",
        "fixed_code": "verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider));",
        "patch": "@@ -162,7 +162,7 @@ private void assertCallbackCalled(FakeOAuth2IdentityProvider oAuth2IdentityProvi\n     assertThat(logTester.logs(LoggerLevel.ERROR)).isEmpty();\n     assertThat(oAuth2IdentityProvider.isCallbackCalled()).isTrue();\n     if (expectLoginLog) {\n-      verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider.getName()));\n+      verify(authenticationEvent).login(request, LOGIN, Source.oauth2(oAuth2IdentityProvider));\n     } else {\n       verifyZeroInteractions(authenticationEvent);\n     }"
    },
    {
        "commit_id": "669377bdd3398ffb5f415f61ff5ba3c734ab7c3e",
        "commit_message": "SONAR-8333 log must be ERROR when process start fails",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/669377bdd3398ffb5f415f61ff5ba3c734ab7c3e",
        "buggy_code": "LOG.info(\"{} failed to start\", processRef);",
        "fixed_code": "LOG.error(\"{} failed to start\", processRef);",
        "patch": "@@ -153,7 +153,7 @@ private void startAndMonitorProcesses() throws InterruptedException{\n         monitor(processRef);\n       } catch (InterruptedException | RuntimeException e) {\n         if (processRef != null) {\n-          LOG.info(\"{} failed to start\", processRef);\n+          LOG.error(\"{} failed to start\", processRef);\n         }\n         // fail to start or to monitor\n         stop();"
    },
    {
        "commit_id": "85ee9c70111d6a9c85b8d6e70ecbf8ac5c6ae977",
        "commit_message": "fix HttpHeadersTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/85ee9c70111d6a9c85b8d6e70ecbf8ac5c6ae977",
        "buggy_code": "Response response = call(orchestrator.getServer().getUrl() + \"/js/bundles/main.js\");",
        "fixed_code": "Response response = call(orchestrator.getServer().getUrl() + \"/js/bundles/app.js\");",
        "patch": "@@ -87,7 +87,7 @@ public void verify_headers_of_css() throws Exception {\n \n   @Test\n   public void verify_headers_of_js() throws Exception {\n-    Response response = call(orchestrator.getServer().getUrl() + \"/js/bundles/main.js\");\n+    Response response = call(orchestrator.getServer().getUrl() + \"/js/bundles/app.js\");\n \n     verifySecurityHeaders(response);\n     verifyContentType(response, \"application/javascript\");"
    },
    {
        "commit_id": "628f5175ada0d685fd7164baa7c6382c1f25cab4",
        "commit_message": "SONAR-8351 fix link to webhook documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/628f5175ada0d685fd7164baa7c6382c1f25cab4",
        "buggy_code": "\"Learn more in the <a href=\\\"http://docs.sonarqube.org/display/SONARNEXT/Webhooks\\\">Webhooks documentation</a>.\";",
        "fixed_code": "\"Learn more in the <a href=\\\"http://redirect.sonarsource.com/doc/webhooks.html\\\">Webhooks documentation</a>.\";",
        "patch": "@@ -49,7 +49,7 @@ public class WebhookProperties {\n   private static final String CATEGORY = \"webhooks\";\n   private static final String DESCRIPTION = \"Webhooks are used to notify external services when a project analysis is done. \" +\n     \"An HTTP POST request including a JSON payload is sent to each of the first ten provided URLs. <br/>\" +\n-    \"Learn more in the <a href=\\\"http://docs.sonarqube.org/display/SONARNEXT/Webhooks\\\">Webhooks documentation</a>.\";\n+    \"Learn more in the <a href=\\\"http://redirect.sonarsource.com/doc/webhooks.html\\\">Webhooks documentation</a>.\";\n \n   private WebhookProperties() {\n     // only static stuff"
    },
    {
        "commit_id": "1ab47e622a5f138b9d8e060457027a8d2cc30d08",
        "commit_message": "SONAR-8332 fix missing SQ HTTP request ID from Web logs (for good)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1ab47e622a5f138b9d8e060457027a8d2cc30d08",
        "buggy_code": "assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{ID}][%logger{20}] %msg%n\");",
        "fixed_code": "assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{HTTP_REQUEST_ID}][%logger{20}] %msg%n\");",
        "patch": "@@ -85,7 +85,7 @@ public void log_to_web_file() {\n     assertThat(fileAppender.getFile()).isEqualTo(new File(logDir, \"web.log\").getAbsolutePath());\n     assertThat(fileAppender.getEncoder()).isInstanceOf(PatternLayoutEncoder.class);\n     PatternLayoutEncoder encoder = (PatternLayoutEncoder) fileAppender.getEncoder();\n-    assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{ID}][%logger{20}] %msg%n\");\n+    assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{HTTP_REQUEST_ID}][%logger{20}] %msg%n\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "a96c95487b97c7b3cf3161574f85163402bf584a",
        "commit_message": "SONAR-8332 fix missing display of HTTP request ID in Web logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a96c95487b97c7b3cf3161574f85163402bf584a",
        "buggy_code": "super(ProcessId.WEB_SERVER, \"%X{UID}\");",
        "fixed_code": "super(ProcessId.WEB_SERVER, \"%X{ID}\");",
        "patch": "@@ -33,7 +33,7 @@\n public class WebServerProcessLogging extends ServerProcessLogging {\n \n   public WebServerProcessLogging() {\n-    super(ProcessId.WEB_SERVER, \"%X{UID}\");\n+    super(ProcessId.WEB_SERVER, \"%X{ID}\");\n   }\n \n   @Override"
    },
    {
        "commit_id": "a96c95487b97c7b3cf3161574f85163402bf584a",
        "commit_message": "SONAR-8332 fix missing display of HTTP request ID in Web logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a96c95487b97c7b3cf3161574f85163402bf584a",
        "buggy_code": "assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{UID}][%logger{20}] %msg%n\");",
        "fixed_code": "assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{ID}][%logger{20}] %msg%n\");",
        "patch": "@@ -85,7 +85,7 @@ public void log_to_web_file() {\n     assertThat(fileAppender.getFile()).isEqualTo(new File(logDir, \"web.log\").getAbsolutePath());\n     assertThat(fileAppender.getEncoder()).isInstanceOf(PatternLayoutEncoder.class);\n     PatternLayoutEncoder encoder = (PatternLayoutEncoder) fileAppender.getEncoder();\n-    assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{UID}][%logger{20}] %msg%n\");\n+    assertThat(encoder.getPattern()).isEqualTo(\"%d{yyyy.MM.dd HH:mm:ss} %-5level web[%X{ID}][%logger{20}] %msg%n\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "ea69b9b5dba17f416447fc152d6b9f291c04a59e",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea69b9b5dba17f416447fc152d6b9f291c04a59e",
        "buggy_code": "private Level resolveLevel(Props props, String... propertyKeys) {",
        "fixed_code": "private static Level resolveLevel(Props props, String... propertyKeys) {",
        "patch": "@@ -254,7 +254,7 @@ public Level configureRootLogLevel(Props props, String... propertyKeys) {\n     return newLevel;\n   }\n \n-  private Level resolveLevel(Props props, String... propertyKeys) {\n+  private static Level resolveLevel(Props props, String... propertyKeys) {\n     Level newLevel = Level.INFO;\n     for (String propertyKey : propertyKeys) {\n       Level level = getPropertyValueAsLevel(props, propertyKey);"
    },
    {
        "commit_id": "13eb9d2e1287df1244196ef84d659a069c6e25f5",
        "commit_message": "SONAR-8335 better error reporting on property values and UT coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/13eb9d2e1287df1244196ef84d659a069c6e25f5",
        "buggy_code": "helper.configureRootLogLevel(props, \"sonar.log.es.level\");",
        "fixed_code": "helper.configureRootLogLevel(props, \"sonar.log.level.es\");",
        "patch": "@@ -39,7 +39,7 @@ public LoggerContext configure(Props props) {\n     helper.configureGlobalFileLog(props, config, logPattern);\n     helper.configureForSubprocessGobbler(props, logPattern);\n     // SQ's global log level must not change ES's log level\n-    helper.configureRootLogLevel(props, \"sonar.log.es.level\");\n+    helper.configureRootLogLevel(props, \"sonar.log.level.es\");\n \n     return ctx;\n   }"
    },
    {
        "commit_id": "38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "commit_message": "SONAR-8333 use orchestrator 3.13-build783 to fix SQ ITs based on logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "buggy_code": "List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getLogs(), Charsets.UTF_8);",
        "fixed_code": "List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getCeLogs(), Charsets.UTF_8);",
        "patch": "@@ -259,7 +259,7 @@ public void ad_hoc_build_break_strategy() throws IOException {\n   }\n \n   private void verifyQGStatusInPostTask(BuildResult buildResult, String taskStatus, String qgStatus) throws IOException {\n-    List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getLogs(), Charsets.UTF_8);\n+    List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getCeLogs(), Charsets.UTF_8);\n     List<String> postTaskLogLines = extractPosttaskPluginLogs(extractCeTaskId(buildResult), logsLines);\n \n     assertThat(postTaskLogLines).hasSize(1);"
    },
    {
        "commit_id": "38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "commit_message": "SONAR-8333 use orchestrator 3.13-build783 to fix SQ ITs based on logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "buggy_code": "File logs = orchestrator.getServer().getLogs();",
        "fixed_code": "File logs = orchestrator.getServer().getCeLogs();",
        "patch": "@@ -130,7 +130,7 @@ public void download_system_info() throws Exception {\n \n   private static void waitForComputeEngineToBeUp(Orchestrator orchestrator) throws IOException {\n     for (int i = 0; i < 10_000; i++) {\n-      File logs = orchestrator.getServer().getLogs();\n+      File logs = orchestrator.getServer().getCeLogs();\n       if (FileUtils.readFileToString(logs).contains(\"Compute Engine is up\")) {\n         return;\n       }"
    },
    {
        "commit_id": "38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "commit_message": "SONAR-8333 use orchestrator 3.13-build783 to fix SQ ITs based on logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "buggy_code": "File logFile = ORCHESTRATOR.getServer().getLogs();",
        "fixed_code": "File logFile = ORCHESTRATOR.getServer().getWebLogs();",
        "patch": "@@ -193,7 +193,7 @@ public void display_message_in_ui_but_not_in_log_when_unauthorized_exception() t\n     new SeleneseTest(Selenese.builder().setHtmlTestsInClasspath(\"fail_to_authenticate_when_not_allowed_to_sign_up\",\n       \"/user/BaseIdentityProviderTest/fail_to_authenticate_when_not_allowed_to_sign_up.html\").build()).runOn(ORCHESTRATOR);\n \n-    File logFile = ORCHESTRATOR.getServer().getLogs();\n+    File logFile = ORCHESTRATOR.getServer().getWebLogs();\n     assertThat(FileUtils.readFileToString(logFile)).doesNotContain(\"A functional error has happened\");\n     assertThat(FileUtils.readFileToString(logFile)).doesNotContain(\"UnauthorizedException\");\n "
    },
    {
        "commit_id": "38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "commit_message": "SONAR-8333 use orchestrator 3.13-build783 to fix SQ ITs based on logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "buggy_code": "List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getLogs(), Charsets.UTF_8);",
        "fixed_code": "List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getWebLogs(), Charsets.UTF_8);",
        "patch": "@@ -132,7 +132,7 @@ public void display_message_in_ui_but_not_in_log_when_unauthorized_exception() t\n     assertThat(response.code()).isEqualTo(200);\n     assertThat(response.body().string()).contains(\"You're not authorized to access this page. Please contact the administrator\");\n \n-    List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getLogs(), Charsets.UTF_8);\n+    List<String> logsLines = FileUtils.readLines(orchestrator.getServer().getWebLogs(), Charsets.UTF_8);\n     assertThat(logsLines).doesNotContain(\"org.sonar.server.exceptions.BadRequestException: user.bad_login\");\n     USER_RULE.verifyUserDoesNotExist(USER_LOGIN);\n   }"
    },
    {
        "commit_id": "38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "commit_message": "SONAR-8333 use orchestrator 3.13-build783 to fix SQ ITs based on logs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38242dc18f85afbf8a134ffbe48be5cf8e98eceb",
        "buggy_code": "return FileUtils.readLines(orchestrator.getServer().getLogs());",
        "fixed_code": "return FileUtils.readLines(orchestrator.getServer().getCeLogs());",
        "patch": "@@ -106,6 +106,6 @@ private static long extractStopDate(List<String> lines) throws IOException {\n   }\n \n   private static List<String> readLogLines(Orchestrator orchestrator) throws IOException {\n-    return FileUtils.readLines(orchestrator.getServer().getLogs());\n+    return FileUtils.readLines(orchestrator.getServer().getCeLogs());\n   }\n }"
    },
    {
        "commit_id": "513c88cf9eabec3ba2359f642350458fe6dd654c",
        "commit_message": "SONAR-8351 fix link to documentation in webhook settings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/513c88cf9eabec3ba2359f642350458fe6dd654c",
        "buggy_code": "\"Learn more in the <a href=\\\"#\\\">Webhooks documentation</a>.\";",
        "fixed_code": "\"Learn more in the <a href=\\\"http://docs.sonarqube.org/display/SONARNEXT/Webhooks\\\">Webhooks documentation</a>.\";",
        "patch": "@@ -49,7 +49,7 @@ public class WebhookProperties {\n   private static final String CATEGORY = \"webhooks\";\n   private static final String DESCRIPTION = \"Webhooks are used to notify external services when a project analysis is done. \" +\n     \"An HTTP POST request including a JSON payload is sent to each of the first ten provided URLs. <br/>\" +\n-    \"Learn more in the <a href=\\\"#\\\">Webhooks documentation</a>.\";\n+    \"Learn more in the <a href=\\\"http://docs.sonarqube.org/display/SONARNEXT/Webhooks\\\">Webhooks documentation</a>.\";\n \n   private WebhookProperties() {\n     // only static stuff"
    },
    {
        "commit_id": "901b8810a4d2c237395eced14e467be415218249",
        "commit_message": "SONAR-8247 Fix security headers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/901b8810a4d2c237395eced14e467be415218249",
        "buggy_code": "import it.http.HttpHeadersTest;",
        "fixed_code": "import it.serverSystem.HttpHeadersTest;",
        "patch": "@@ -29,7 +29,7 @@\n import it.duplication.CrossProjectDuplicationsTest;\n import it.duplication.DuplicationsTest;\n import it.duplication.NewDuplicationsTest;\n-import it.http.HttpHeadersTest;\n+import it.serverSystem.HttpHeadersTest;\n import it.projectComparison.ProjectComparisonTest;\n import it.projectEvent.EventTest;\n import it.projectSearch.SearchProjectsTest;"
    },
    {
        "commit_id": "129d630f52bd531f070969d806166f8c70593751",
        "commit_message": "Fix Quality flaws around NPE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/129d630f52bd531f070969d806166f8c70593751",
        "buggy_code": "import org.elasticsearch.common.Nullable;",
        "fixed_code": "import javax.annotation.Nullable;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.qualitygate.ws;\n \n import com.google.common.base.Optional;\n-import org.elasticsearch.common.Nullable;\n+import javax.annotation.Nullable;\n import org.sonar.api.server.ws.Request;\n import org.sonar.api.server.ws.Response;\n import org.sonar.api.server.ws.WebService;"
    },
    {
        "commit_id": "129d630f52bd531f070969d806166f8c70593751",
        "commit_message": "Fix Quality flaws around NPE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/129d630f52bd531f070969d806166f8c70593751",
        "buggy_code": "import org.elasticsearch.common.Nullable;",
        "fixed_code": "import javax.annotation.Nullable;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.qualitygate.ws;\n \n import com.google.common.base.Optional;\n-import org.elasticsearch.common.Nullable;\n+import javax.annotation.Nullable;\n import org.sonar.api.server.ws.Request;\n import org.sonar.api.server.ws.Response;\n import org.sonar.api.server.ws.WebService;"
    },
    {
        "commit_id": "787f0f12659ba158028a7a4b5643210852fd4673",
        "commit_message": "SONAR-8377 Drop issue filters tables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/787f0f12659ba158028a7a4b5643210852fd4673",
        "buggy_code": "assertThat(container.size()).isEqualTo(162);",
        "fixed_code": "assertThat(container.size()).isEqualTo(163);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(162);\n+    assertThat(container.size()).isEqualTo(163);\n   }\n }"
    },
    {
        "commit_id": "0962f303a557888bf6f1fcb92e7515eb2cfa02d7",
        "commit_message": "SONAR-8377 Remove issue filters dao",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0962f303a557888bf6f1fcb92e7515eb2cfa02d7",
        "buggy_code": "+ 64 // content of CorePropertyDefinitions",
        "fixed_code": "+ 62 // content of CorePropertyDefinitions",
        "patch": "@@ -108,7 +108,7 @@ public void real_start() throws IOException {\n         + 25 // level 1\n         + 46 // content of DaoModule\n         + 2 // content of EsSearchModule\n-        + 64 // content of CorePropertyDefinitions\n+        + 62 // content of CorePropertyDefinitions\n         + 1 // content of CePropertyDefinitions\n     );\n     assertThat(picoContainer.getParent().getParent().getParent().getParent()).isNull();"
    },
    {
        "commit_id": "0962f303a557888bf6f1fcb92e7515eb2cfa02d7",
        "commit_message": "SONAR-8377 Remove issue filters dao",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0962f303a557888bf6f1fcb92e7515eb2cfa02d7",
        "buggy_code": "assertThat(container.size()).isEqualTo(2 + 46);",
        "fixed_code": "assertThat(container.size()).isEqualTo(2 + 44);",
        "patch": "@@ -29,6 +29,6 @@ public class DaoModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new DaoModule().configure(container);\n-    assertThat(container.size()).isEqualTo(2 + 46);\n+    assertThat(container.size()).isEqualTo(2 + 44);\n   }\n }"
    },
    {
        "commit_id": "5d6c5b2ee60156f4ba8a4329425039d543e50b31",
        "commit_message": "Fix some Quality flaws about nullability of variables",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5d6c5b2ee60156f4ba8a4329425039d543e50b31",
        "buggy_code": "public Collection<ComponentDto> getByUuids(DbSession session, Collection<String> componentUuids) {",
        "fixed_code": "public Collection<ComponentDto> getByUuids(DbSession session, @Nullable Collection<String> componentUuids) {",
        "patch": "@@ -229,7 +229,7 @@ public Set<String> getDistinctQualifiers(DbSession session, @Nullable Collection\n     return componentQualifiers;\n   }\n \n-  public Collection<ComponentDto> getByUuids(DbSession session, Collection<String> componentUuids) {\n+  public Collection<ComponentDto> getByUuids(DbSession session, @Nullable Collection<String> componentUuids) {\n     Set<ComponentDto> directoryPaths = Sets.newHashSet();\n     if (componentUuids != null && !componentUuids.isEmpty()) {\n       List<ComponentDto> components = dbClient.componentDao().selectByUuids(session, componentUuids);"
    },
    {
        "commit_id": "263d54549782fc443c66cf2c483851906bcdb1fb",
        "commit_message": "SONAR-8286 Fix issue message on coverage common rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/263d54549782fc443c66cf2c483851906bcdb1fb",
        "buggy_code": "return format(\"%d more branches need to be covered by unit tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);",
        "fixed_code": "return format(\"%d more branches need to be covered by tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);",
        "patch": "@@ -40,6 +40,6 @@ public BranchCoverageRule(ActiveRulesHolder activeRulesHolder, MetricRepository\n   @Override\n   protected String formatMessage(int effortToFix, double minCoverage) {\n     // FIXME declare min threshold as int but not float ?\n-    return format(\"%d more branches need to be covered by unit tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);\n+    return format(\"%d more branches need to be covered by tests to reach the minimum threshold of %s%% branch coverage.\", effortToFix, minCoverage);\n   }\n }"
    },
    {
        "commit_id": "263d54549782fc443c66cf2c483851906bcdb1fb",
        "commit_message": "SONAR-8286 Fix issue message on coverage common rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/263d54549782fc443c66cf2c483851906bcdb1fb",
        "buggy_code": "return format(\"%d more lines of code need to be covered by unit tests to reach the minimum threshold of %s%% lines coverage.\", effortToFix, minCoverage);",
        "fixed_code": "return format(\"%d more lines of code need to be covered by tests to reach the minimum threshold of %s%% lines coverage.\", effortToFix, minCoverage);",
        "patch": "@@ -40,6 +40,6 @@ public LineCoverageRule(ActiveRulesHolder activeRulesHolder, MetricRepository me\n   @Override\n   protected String formatMessage(int effortToFix, double minCoverage) {\n     // TODO declare min threshold as int but not float ?\n-    return format(\"%d more lines of code need to be covered by unit tests to reach the minimum threshold of %s%% lines coverage.\", effortToFix, minCoverage);\n+    return format(\"%d more lines of code need to be covered by tests to reach the minimum threshold of %s%% lines coverage.\", effortToFix, minCoverage);\n   }\n }"
    },
    {
        "commit_id": "263d54549782fc443c66cf2c483851906bcdb1fb",
        "commit_message": "SONAR-8286 Fix issue message on coverage common rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/263d54549782fc443c66cf2c483851906bcdb1fb",
        "buggy_code": "return \"23 more branches need to be covered by unit tests to reach the minimum threshold of 65.0% branch coverage.\";",
        "fixed_code": "return \"23 more branches need to be covered by tests to reach the minimum threshold of 65.0% branch coverage.\";",
        "patch": "@@ -57,6 +57,6 @@ protected String getUncoveredMetricKey() {\n \n   @Override\n   protected String getExpectedIssueMessage() {\n-    return \"23 more branches need to be covered by unit tests to reach the minimum threshold of 65.0% branch coverage.\";\n+    return \"23 more branches need to be covered by tests to reach the minimum threshold of 65.0% branch coverage.\";\n   }\n }"
    },
    {
        "commit_id": "263d54549782fc443c66cf2c483851906bcdb1fb",
        "commit_message": "SONAR-8286 Fix issue message on coverage common rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/263d54549782fc443c66cf2c483851906bcdb1fb",
        "buggy_code": "return \"23 more lines of code need to be covered by unit tests to reach the minimum threshold of 65.0% lines coverage.\";",
        "fixed_code": "return \"23 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.\";",
        "patch": "@@ -57,6 +57,6 @@ protected String getUncoveredMetricKey() {\n \n   @Override\n   protected String getExpectedIssueMessage() {\n-    return \"23 more lines of code need to be covered by unit tests to reach the minimum threshold of 65.0% lines coverage.\";\n+    return \"23 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.\";\n   }\n }"
    },
    {
        "commit_id": "301b38feda255b3059ad9647bc00c1500e0c87c2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/301b38feda255b3059ad9647bc00c1500e0c87c2",
        "buggy_code": "attributes.put(\"State\", (es.getCause() instanceof ElasticsearchException ? es.getCause().getMessage() : es.getMessage()));",
        "fixed_code": "attributes.put(\"State\", es.getCause() instanceof ElasticsearchException ? es.getCause().getMessage() : es.getMessage());",
        "patch": "@@ -78,7 +78,7 @@ public Map<String, Object> attributes() {\n     } catch (Exception es) {\n       Loggers.get(EsMonitor.class).warn(\"Failed to retrieve ES attributes. There will be only a single \\\"state\\\" attribute.\", es);\n       Map<String, Object> attributes = new LinkedHashMap<>();\n-      attributes.put(\"State\", (es.getCause() instanceof ElasticsearchException ? es.getCause().getMessage() : es.getMessage()));\n+      attributes.put(\"State\", es.getCause() instanceof ElasticsearchException ? es.getCause().getMessage() : es.getMessage());\n       return attributes;\n     }\n   }"
    },
    {
        "commit_id": "e393f5c67d5aa09bc1dfac8902db5302a42207c7",
        "commit_message": "SONAR-8134 fix isolation of organizations when dropping global permissions on user",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e393f5c67d5aa09bc1dfac8902db5302a42207c7",
        "buggy_code": "db.users().insertPermissionOnUser(admin, GlobalPermissions.SYSTEM_ADMIN);",
        "fixed_code": "db.users().insertPermissionOnUser(org, admin, GlobalPermissions.SYSTEM_ADMIN);",
        "patch": "@@ -177,7 +177,7 @@ public void remove_admin_group_if_still_other_admins() {\n     GroupIdOrAnyone groupId = new GroupIdOrAnyone(group);\n     db.users().insertPermissionOnGroup(group, GlobalPermissions.SYSTEM_ADMIN);\n     UserDto admin = db.users().insertUser();\n-    db.users().insertPermissionOnUser(admin, GlobalPermissions.SYSTEM_ADMIN);\n+    db.users().insertPermissionOnUser(org, admin, GlobalPermissions.SYSTEM_ADMIN);\n \n     apply(new GroupPermissionChange(PermissionChange.Operation.REMOVE, GlobalPermissions.SYSTEM_ADMIN, null, groupId));\n "
    },
    {
        "commit_id": "aeb761544c6514a02121693e7312997db65b9f34",
        "commit_message": "SONAR-8134 fix isolation of organizations when dropping global permissions\non user",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aeb761544c6514a02121693e7312997db65b9f34",
        "buggy_code": "int remaining = dbClient.authorizationDao().countRemainingUserIdsWithGlobalPermissionIfExcludeGroup(dbSession,",
        "fixed_code": "int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingGroup(dbSession,",
        "patch": "@@ -106,7 +106,7 @@ private void checkIfRemainingGlobalAdministrators(DbSession dbSession, GroupPerm\n       !change.getGroupIdOrAnyone().isAnyone() &&\n       !change.getProjectId().isPresent()) {\n       // removing global admin permission from group\n-      int remaining = dbClient.authorizationDao().countRemainingUserIdsWithGlobalPermissionIfExcludeGroup(dbSession,\n+      int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingGroup(dbSession,\n         change.getOrganizationUuid(), SYSTEM_ADMIN, change.getGroupIdOrAnyone().getId());\n \n       if (remaining == 0) {"
    },
    {
        "commit_id": "aeb761544c6514a02121693e7312997db65b9f34",
        "commit_message": "SONAR-8134 fix isolation of organizations when dropping global permissions\non user",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aeb761544c6514a02121693e7312997db65b9f34",
        "buggy_code": "int remaining = dbClient.authorizationDao().countRemainingUsersWithGlobalPermissionExcludingUser(dbSession,",
        "fixed_code": "int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingUser(dbSession,",
        "patch": "@@ -92,7 +92,7 @@ private List<String> loadExistingPermissions(DbSession dbSession, UserPermission\n \n   private void checkOtherAdminsExist(DbSession dbSession, UserPermissionChange change) {\n     if (SYSTEM_ADMIN.equals(change.getPermission()) && !change.getProjectId().isPresent()) {\n-      int remaining = dbClient.authorizationDao().countRemainingUsersWithGlobalPermissionExcludingUser(dbSession,\n+      int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingUser(dbSession,\n         change.getOrganizationUuid(), change.getPermission(), change.getUserId().getId());\n       if (remaining == 0) {\n         throw new BadRequestException(String.format(\"Last user with permission '%s'. Permission cannot be removed.\", SYSTEM_ADMIN));"
    },
    {
        "commit_id": "aeb761544c6514a02121693e7312997db65b9f34",
        "commit_message": "SONAR-8134 fix isolation of organizations when dropping global permissions\non user",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aeb761544c6514a02121693e7312997db65b9f34",
        "buggy_code": "int remaining = dbClient.authorizationDao().countRemainingUserIdsWithGlobalPermissionIfExcludeGroup(dbSession,",
        "fixed_code": "int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingGroup(dbSession,",
        "patch": "@@ -105,7 +105,7 @@ private void checkNotTryingToDeleteDefaultGroup(DbSession dbSession, GroupId gro\n   }\n \n   private void checkNotTryingToDeleteLastAdminGroup(DbSession dbSession, GroupId group) {\n-    int remaining = dbClient.authorizationDao().countRemainingUserIdsWithGlobalPermissionIfExcludeGroup(dbSession,\n+    int remaining = dbClient.authorizationDao().countUsersWithGlobalPermissionExcludingGroup(dbSession,\n       group.getOrganizationUuid(), SYSTEM_ADMIN, group.getId());\n \n     checkArgument(remaining > 0, \"The last system admin group cannot be deleted\");"
    },
    {
        "commit_id": "aa2ddb09aaaccda72d510ae260e2cc027caa4583",
        "commit_message": "Improve error message of empty group name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aa2ddb09aaaccda72d510ae260e2cc027caa4583",
        "buggy_code": "checkArgument(!isNullOrEmpty(groupName) && groupName.trim().length() > 0, \"Group cannot contain empty group name\");",
        "fixed_code": "checkArgument(!isNullOrEmpty(groupName) && groupName.trim().length() > 0, \"Group name cannot be empty\");",
        "patch": "@@ -33,7 +33,7 @@ private UserGroupValidation() {\n   }\n \n   public static void validateGroupName(String groupName) {\n-    checkArgument(!isNullOrEmpty(groupName) && groupName.trim().length() > 0, \"Group cannot contain empty group name\");\n+    checkArgument(!isNullOrEmpty(groupName) && groupName.trim().length() > 0, \"Group name cannot be empty\");\n     checkArgument(groupName.length() <= GROUP_NAME_MAX_LENGTH, \"Group name cannot be longer than %s characters\", GROUP_NAME_MAX_LENGTH);\n     checkArgument(!DefaultGroups.isAnyone(groupName), \"Anyone group cannot be used\");\n   }"
    },
    {
        "commit_id": "5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "buggy_code": "public static void main(String[] args) throws Exception {",
        "fixed_code": "public static void main(String[] args) {",
        "patch": "@@ -59,7 +59,7 @@ public void awaitStop() {\n   /**\n    * Can't be started as is. Needs to be bootstrapped by sonar-application\n    */\n-  public static void main(String[] args) throws Exception {\n+  public static void main(String[] args) {\n     ProcessEntryPoint entryPoint = ProcessEntryPoint.createForArguments(args);\n     Props props = entryPoint.getProps();\n     new WebServerProcessLogging().configure(props);"
    },
    {
        "commit_id": "5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "buggy_code": "if (!Files.exists(directory)) {",
        "fixed_code": "if (!directory.toFile().exists()) {",
        "patch": "@@ -35,7 +35,7 @@ public class ProjectLock implements Startable {\n   public ProjectLock(ProjectReactor projectReactor) {\n     Path directory = projectReactor.getRoot().getWorkDir().toPath();\n     try {\n-      if (!Files.exists(directory)) {\n+      if (!directory.toFile().exists()) {\n         Files.createDirectories(directory);\n       }\n     } catch (IOException e) {"
    },
    {
        "commit_id": "5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e0b742ac8299c7ddcd2bf3dfe682482c4d8eda4",
        "buggy_code": "if (!Files.exists(workDir)) {",
        "fixed_code": "if (!workDir.toFile().exists()) {",
        "patch": "@@ -37,7 +37,7 @@ public WorkDirectoryCleaner(ProjectReactor projectReactor) {\n   }\n \n   public void execute() {\n-    if (!Files.exists(workDir)) {\n+    if (!workDir.toFile().exists()) {\n       return;\n     }\n "
    },
    {
        "commit_id": "423d0917eceeb1695196e5d39be401dee2f501ba",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/423d0917eceeb1695196e5d39be401dee2f501ba",
        "buggy_code": ".collect(Collectors.toMap(measure -> measure.getComponentUuid(), MeasureDto::getData)));",
        "fixed_code": ".collect(Collectors.toMap(MeasureDto::getComponentUuid, MeasureDto::getData)));",
        "patch": "@@ -88,7 +88,7 @@ private static Map<String, String> buildAnalysisDates(List<SnapshotDto> snapshot\n \n   private static Map<String, String> buildQualityGateStatuses(List<MeasureDto> measures) {\n     return ImmutableMap.copyOf(measures.stream()\n-      .collect(Collectors.toMap(measure -> measure.getComponentUuid(), MeasureDto::getData)));\n+      .collect(Collectors.toMap(MeasureDto::getComponentUuid, MeasureDto::getData)));\n   }\n \n   static class Builder {"
    },
    {
        "commit_id": "423d0917eceeb1695196e5d39be401dee2f501ba",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/423d0917eceeb1695196e5d39be401dee2f501ba",
        "buggy_code": "dbClient.ruleDao().selectByKeys(dbSession, ruleKeys), input -> input.getKey());",
        "fixed_code": "dbClient.ruleDao().selectByKeys(dbSession, ruleKeys), RuleDto::getKey);",
        "patch": "@@ -354,7 +354,7 @@ protected SearchResult doSearch(DbSession dbSession, RuleQuery query, SearchOpti\n     List<RuleKey> ruleKeys = result.getIds();\n     // rule order is managed by ES\n     Map<RuleKey, RuleDto> rulesByRuleKey = Maps.uniqueIndex(\n-      dbClient.ruleDao().selectByKeys(dbSession, ruleKeys), input -> input.getKey());\n+      dbClient.ruleDao().selectByKeys(dbSession, ruleKeys), RuleDto::getKey);\n     List<RuleDto> rules = new ArrayList<>();\n     for (RuleKey ruleKey : ruleKeys) {\n       RuleDto rule = rulesByRuleKey.get(ruleKey);"
    },
    {
        "commit_id": "9a7b16406681a4bea454525a17bd884e0764ed1f",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a7b16406681a4bea454525a17bd884e0764ed1f",
        "buggy_code": "private SMInputFactory initStax() {",
        "fixed_code": "private static SMInputFactory initStax() {",
        "patch": "@@ -201,7 +201,7 @@ private void readParameters(SMInputCursor propsCursor, Map<String, String> param\n     }\n   }\n \n-  private SMInputFactory initStax() {\n+  private static SMInputFactory initStax() {\n     XMLInputFactory xmlFactory = XMLInputFactory.newInstance();\n     xmlFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n     xmlFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.FALSE);"
    },
    {
        "commit_id": "9a90531e874f179c4b2fc1ded000c1caa1095d22",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a90531e874f179c4b2fc1ded000c1caa1095d22",
        "buggy_code": "public String getGroupName(DbSession dbSession, WsGroupRef groupRef) {",
        "fixed_code": "String getGroupName(DbSession dbSession, WsGroupRef groupRef) {",
        "patch": "@@ -65,7 +65,7 @@ public ComponentDto getRootComponentOrModule(DbSession dbSession, WsProjectRef p\n     return componentFinder.getRootComponentOrModuleByUuidOrKey(dbSession, projectRef.uuid(), projectRef.key(), resourceTypes);\n   }\n \n-  public String getGroupName(DbSession dbSession, WsGroupRef groupRef) {\n+  String getGroupName(DbSession dbSession, WsGroupRef groupRef) {\n     GroupDto group = getGroup(dbSession, groupRef);\n \n     return group == null ? ANYONE : group.getName();"
    },
    {
        "commit_id": "9a90531e874f179c4b2fc1ded000c1caa1095d22",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a90531e874f179c4b2fc1ded000c1caa1095d22",
        "buggy_code": "protected UserGroupMapper mapper(DbSession session) {",
        "fixed_code": "private static UserGroupMapper mapper(DbSession session) {",
        "patch": "@@ -37,7 +37,7 @@ public void deleteMembersByGroupId(DbSession session, long groupId) {\n     mapper(session).deleteMembersByGroup(groupId);\n   }\n \n-  protected UserGroupMapper mapper(DbSession session) {\n+  private static UserGroupMapper mapper(DbSession session) {\n     return session.getMapper(UserGroupMapper.class);\n   }\n }"
    },
    {
        "commit_id": "2c0518b380ddb1933cb16d51bb943965da834ed1",
        "commit_message": "SONAR-8035 Do not display error in logs when web request is aborted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2c0518b380ddb1933cb16d51bb943965da834ed1",
        "buggy_code": "LOGGER.warn(\"Request {} has been aborted by client, error is '{}'\", request, e.getMessage());",
        "fixed_code": "LOGGER.debug(\"Request {} has been aborted by client, error is '{}'\", request, e.getMessage());",
        "patch": "@@ -117,7 +117,7 @@ public void execute(Request request, Response response) {\n       Throwable cause = e.getCause();\n       if (cause != null && cause instanceof ClientAbortException) {\n         // Request has been aborted by the client, nothing can been done as Tomcat has committed the response\n-        LOGGER.warn(\"Request {} has been aborted by client, error is '{}'\", request, e.getMessage());\n+        LOGGER.debug(\"Request {} has been aborted by client, error is '{}'\", request, e.getMessage());\n         return;\n       }\n       LOGGER.error(\"Fail to process request \" + request, e);"
    },
    {
        "commit_id": "2c0518b380ddb1933cb16d51bb943965da834ed1",
        "commit_message": "SONAR-8035 Do not display error in logs when web request is aborted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2c0518b380ddb1933cb16d51bb943965da834ed1",
        "buggy_code": "assertThat(logTester.logs(LoggerLevel.WARN)).isNotEmpty();",
        "fixed_code": "assertThat(logTester.logs(LoggerLevel.DEBUG)).isNotEmpty();",
        "patch": "@@ -295,7 +295,7 @@ public void does_not_fail_when_request_is_aborted() throws Exception {\n     underTest.execute(request, response);\n \n     assertThat(response.stream().outputAsString()).isEmpty();\n-    assertThat(logTester.logs(LoggerLevel.WARN)).isNotEmpty();\n+    assertThat(logTester.logs(LoggerLevel.DEBUG)).isNotEmpty();\n   }\n \n   static class SystemWs implements WebService {"
    },
    {
        "commit_id": "6603e70aa5abee4dd7eccf2b0b1c7ad829a028e4",
        "commit_message": "SONAR-7988 fix mssql collation which was badly defined in 5.x",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6603e70aa5abee4dd7eccf2b0b1c7ad829a028e4",
        "buggy_code": "List<String[]> rows = underTest.executeSelect(connection, \"select login, name from users order by login\", new SqlExecutor.StringsConverter(2));",
        "fixed_code": "List<String[]> rows = underTest.select(connection, \"select login, name from users order by login\", new SqlExecutor.StringsConverter(2));",
        "patch": "@@ -45,7 +45,7 @@ public void testExecuteQuery() throws Exception {\n     session.commit();\n \n     try (Connection connection = dbTester.openConnection()) {\n-      List<String[]> rows = underTest.executeSelect(connection, \"select login, name from users order by login\", new SqlExecutor.StringsConverter(2));\n+      List<String[]> rows = underTest.select(connection, \"select login, name from users order by login\", new SqlExecutor.StringsConverter(2));\n       assertThat(rows).hasSize(2);\n       assertThat(rows.get(0)[0]).isEqualTo(\"her\");\n       assertThat(rows.get(0)[1]).isEqualTo(\"Her\");"
    },
    {
        "commit_id": "93b8bb844bbf4884d2212e5924c0ac2f4b73f857",
        "commit_message": "Fix typo in favourite action name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93b8bb844bbf4884d2212e5924c0ac2f4b73f857",
        "buggy_code": "FavoritesWs.class,",
        "fixed_code": "FavouritesWs.class,",
        "patch": "@@ -35,7 +35,7 @@ protected void configureModule() {\n       SearchAction.class,\n       GroupsAction.class,\n       IdentityProvidersAction.class,\n-      FavoritesWs.class,\n+      FavouritesWs.class,\n       UserPropertiesWs.class,\n       UserJsonWriter.class);\n   }"
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "import org.sonar.server.component.ws.LanguageParamUtils;",
        "fixed_code": "import org.sonar.server.util.LanguageParamUtils;",
        "patch": "@@ -25,8 +25,8 @@\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.qualityprofile.QualityProfileDto;\n-import org.sonar.server.component.ws.LanguageParamUtils;\n import org.sonar.server.exceptions.NotFoundException;\n+import org.sonar.server.util.LanguageParamUtils;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static java.lang.String.format;"
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "import org.sonar.server.component.ws.LanguageParamUtils;",
        "fixed_code": "import org.sonar.server.util.LanguageParamUtils;",
        "patch": "@@ -25,9 +25,9 @@\n import org.sonar.api.server.ws.WebService.NewAction;\n import org.sonar.db.DbSession;\n import org.sonar.db.qualityprofile.QualityProfileDto;\n-import org.sonar.server.component.ws.LanguageParamUtils;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.qualityprofile.QProfileFactory;\n+import org.sonar.server.util.LanguageParamUtils;\n \n import static org.apache.commons.lang.StringUtils.isEmpty;\n "
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "import org.sonar.server.component.ws.LanguageParamUtils;",
        "fixed_code": "import org.sonar.server.util.LanguageParamUtils;",
        "patch": "@@ -27,8 +27,8 @@\n import org.sonar.api.server.ws.Response;\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.server.ws.WebService.NewAction;\n-import org.sonar.server.component.ws.LanguageParamUtils;\n import org.sonar.server.qualityprofile.QProfile;\n+import org.sonar.server.util.LanguageParamUtils;\n import org.sonarqube.ws.QualityProfiles.SearchWsResponse;\n import org.sonarqube.ws.QualityProfiles.SearchWsResponse.QualityProfile;\n import org.sonarqube.ws.client.qualityprofile.SearchWsRequest;"
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "import org.sonar.server.component.ws.LanguageParamUtils;",
        "fixed_code": "import org.sonar.server.util.LanguageParamUtils;",
        "patch": "@@ -26,12 +26,12 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.server.ws.WebService.NewAction;\n import org.sonar.core.permission.GlobalPermissions;\n-import org.sonar.server.component.ws.LanguageParamUtils;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.qualityprofile.QProfile;\n import org.sonar.server.qualityprofile.QProfileFactory;\n import org.sonar.server.qualityprofile.QProfileLookup;\n import org.sonar.server.user.UserSession;\n+import org.sonar.server.util.LanguageParamUtils;\n \n import static org.apache.commons.lang.StringUtils.isEmpty;\n "
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "package org.sonar.server.component.ws;",
        "fixed_code": "package org.sonar.server.util;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.component.ws;\n+package org.sonar.server.util;\n \n import com.google.common.base.Function;\n import com.google.common.collect.Collections2;"
    },
    {
        "commit_id": "d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "commit_message": "SONAR-7737 api/qualityprofiles/restore_built_in throws an error if language does not exist",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1efd83084b271eb1ae3d1bc60f744fe8372b1ab",
        "buggy_code": "new RestoreBuiltInAction(null),",
        "fixed_code": "new RestoreBuiltInAction(null, languages),",
        "patch": "@@ -63,7 +63,7 @@ public void setUp() {\n       new ProjectAssociationActions(null, null, null, languages, userSessionRule),\n       new CreateAction(null, null, null, languages, importers, userSessionRule),\n       new ImportersAction(importers),\n-      new RestoreBuiltInAction(null),\n+      new RestoreBuiltInAction(null, languages),\n       new SearchAction(null, languages),\n       new SetDefaultAction(languages, null, null, userSessionRule),\n       new ProjectsAction(null, userSessionRule),"
    },
    {
        "commit_id": "a56e60d168802ff9dc23ffec978bb412fd501f97",
        "commit_message": "SONAR-7961 Fix association when project is associated to many profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a56e60d168802ff9dc23ffec978bb412fd501f97",
        "buggy_code": "db.qualityProfileDao().updateProjectProfileAssociation(projectUuid, profileKey, session);",
        "fixed_code": "db.qualityProfileDao().updateProjectProfileAssociation(projectUuid, profileKey, currentProfile.getKey(), session);",
        "patch": "@@ -67,7 +67,7 @@ void addProject(String profileKey, String projectUuid, UserSession userSession,\n       db.qualityProfileDao().insertProjectProfileAssociation(project.uuid(), qualityProfile.getKey(), session);\n       updated = true;\n     } else if (!profileKey.equals(currentProfile.getKey())) {\n-      db.qualityProfileDao().updateProjectProfileAssociation(projectUuid, profileKey, session);\n+      db.qualityProfileDao().updateProjectProfileAssociation(projectUuid, profileKey, currentProfile.getKey(), session);\n       updated = true;\n     }\n     if (updated) {"
    },
    {
        "commit_id": "a56e60d168802ff9dc23ffec978bb412fd501f97",
        "commit_message": "SONAR-7961 Fix association when project is associated to many profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a56e60d168802ff9dc23ffec978bb412fd501f97",
        "buggy_code": "void updateProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey);",
        "fixed_code": "void updateProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey, @Param(\"oldProfileKey\") String oldProfileKey);",
        "patch": "@@ -78,7 +78,7 @@ public interface QualityProfileMapper {\n \n   void insertProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey);\n \n-  void updateProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey);\n+  void updateProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey, @Param(\"oldProfileKey\") String oldProfileKey);\n \n   void deleteProjectProfileAssociation(@Param(\"projectUuid\") String projectUuid, @Param(\"profileKey\") String profileKey);\n "
    },
    {
        "commit_id": "547cf0c0b0eac939bc86dd209d06bde348778815",
        "commit_message": "Fix qualify flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/547cf0c0b0eac939bc86dd209d06bde348778815",
        "buggy_code": "SetAction underTest = new SetAction(definitions, i18n, dbClient, componentFinder, userSession, settingsUpdater, settingsChangeNotifier, validations);",
        "fixed_code": "SetAction underTest = new SetAction(definitions, dbClient, componentFinder, userSession, settingsUpdater, settingsChangeNotifier, validations);",
        "patch": "@@ -92,7 +92,7 @@ public class SetActionTest {\n   SettingsUpdater settingsUpdater = new SettingsUpdater(dbClient, definitions);\n   SettingValidations validations = new SettingValidations(definitions, dbClient, i18n);\n \n-  SetAction underTest = new SetAction(definitions, i18n, dbClient, componentFinder, userSession, settingsUpdater, settingsChangeNotifier, validations);\n+  SetAction underTest = new SetAction(definitions, dbClient, componentFinder, userSession, settingsUpdater, settingsChangeNotifier, validations);\n \n   WsActionTester ws = new WsActionTester(underTest);\n "
    },
    {
        "commit_id": "19475814aed64dd6c1f20b12fdb29a5ce90660ab",
        "commit_message": "SONAR-8058 fix DB migration of views definition (wrong key)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19475814aed64dd6c1f20b12fdb29a5ce90660ab",
        "buggy_code": ".setString(1, \"xmlDefinition\")",
        "fixed_code": ".setString(1, \"views.def\")",
        "patch": "@@ -64,7 +64,7 @@ private void addToInternalProperties(Context context, @Nullable String property)\n         \" (?,?,?,?)\")) {\n         long now = system2.now();\n         insert\n-          .setString(1, \"xmlDefinition\")\n+          .setString(1, \"views.def\")\n           .setBoolean(2, false)\n           .setString(3, property)\n           .setLong(4, now)"
    },
    {
        "commit_id": "19475814aed64dd6c1f20b12fdb29a5ce90660ab",
        "commit_message": "SONAR-8058 fix DB migration of views definition (wrong key)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19475814aed64dd6c1f20b12fdb29a5ce90660ab",
        "buggy_code": "assertThat(internalProp.get(\"key\")).isEqualTo(\"xmlDefinition\");",
        "fixed_code": "assertThat(internalProp.get(\"key\")).isEqualTo(\"views.def\");",
        "patch": "@@ -77,7 +77,7 @@ private void executeAndVerify(String xml, boolean isClob) throws SQLException {\n     Map<String, Object> internalProp = db.selectFirst(\"select\" +\n       \" kee as \\\"key\\\", is_empty as \\\"isEmpty\\\", text_value as \\\"textValue\\\", clob_value as \\\"clobValue\\\", created_at as \\\"createdAt\\\"\" +\n       \" from internal_properties\");\n-    assertThat(internalProp.get(\"key\")).isEqualTo(\"xmlDefinition\");\n+    assertThat(internalProp.get(\"key\")).isEqualTo(\"views.def\");\n     assertThat(internalProp.get(\"isEmpty\")).isEqualTo(false);\n     if (isClob) {\n       assertThat(internalProp.get(\"clobValue\")).isEqualTo(xml);"
    },
    {
        "commit_id": "7f9b292fed77d92db09a38b90b1cc7d0de5ec178",
        "commit_message": "fix some quality flaws and lacking coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f9b292fed77d92db09a38b90b1cc7d0de5ec178",
        "buggy_code": "public Match(String dbKey, String reportKey) {",
        "fixed_code": "Match(String dbKey, String reportKey) {",
        "patch": "@@ -28,7 +28,7 @@ final class Match {\n   private final String dbKey;\n   private final String reportKey;\n \n-  public Match(String dbKey, String reportKey) {\n+  Match(String dbKey, String reportKey) {\n     this.dbKey = dbKey;\n     this.reportKey = reportKey;\n   }"
    },
    {
        "commit_id": "7f9b292fed77d92db09a38b90b1cc7d0de5ec178",
        "commit_message": "fix some quality flaws and lacking coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f9b292fed77d92db09a38b90b1cc7d0de5ec178",
        "buggy_code": "private void populateUuidColumns(Context context, Map<Long, String> componentUuidById) throws SQLException {",
        "fixed_code": "private static void populateUuidColumns(Context context, Map<Long, String> componentUuidById) throws SQLException {",
        "patch": "@@ -55,7 +55,7 @@ private static Map<Long, String> buildComponentUuidMap(Context context) throws S\n     return componentUuidById;\n   }\n \n-  private void populateUuidColumns(Context context, Map<Long, String> componentUuidById) throws SQLException {\n+  private static void populateUuidColumns(Context context, Map<Long, String> componentUuidById) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"SELECT sn.id, sn.project_id, sn.root_project_id from snapshots sn where sn.component_uuid is null or sn.root_component_uuid is null\");\n     massUpdate.update(\"UPDATE snapshots SET component_uuid=?, root_component_uuid=? WHERE id=?\");"
    },
    {
        "commit_id": "558f0931a7a98cbbef3933ca941af98128b59672",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/558f0931a7a98cbbef3933ca941af98128b59672",
        "buggy_code": "if (first.getIndexInFile() == j - 2) {",
        "fixed_code": "if (first != null && first.getIndexInFile() == j - 2) {",
        "patch": "@@ -156,7 +156,7 @@ private void findClones(Collection<Block> fileBlocks) {\n           // fixed order) is equal to f(j) and only report in this case.\n \n           Block first = currentBlocksGroup.first(originResourceId);\n-          if (first.getIndexInFile() == j - 2) {\n+          if (first != null && first.getIndexInFile() == j - 2) {\n             // Godin: We report clones, which start in i-1 and end in j-2, so length is j-2-(i-1)+1=j-i\n             reportClones(sameHashBlocksGroups[i], currentBlocksGroup, j - i);\n           }"
    },
    {
        "commit_id": "e34336b3f0be4094883078406ed2fdca1aaa38c8",
        "commit_message": "SONAR-7973 Do not return error 500 when email sending is failing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e34336b3f0be4094883078406ed2fdca1aaa38c8",
        "buggy_code": "LOG.error(\"Fail to send test email to: \" + toAddress, e);",
        "fixed_code": "LOG.debug(\"Fail to send test email to: \" + toAddress, e);",
        "patch": "@@ -217,7 +217,7 @@ public void sendTestEmail(String toAddress, String subject, String message) thro\n       emailMessage.setMessage(message);\n       send(emailMessage);\n     } catch (EmailException e) {\n-      LOG.error(\"Fail to send test email to: \" + toAddress, e);\n+      LOG.debug(\"Fail to send test email to: \" + toAddress, e);\n       throw e;\n     }\n   }"
    },
    {
        "commit_id": "de208873b9be69a92ca00398350fc213187c4220",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/de208873b9be69a92ca00398350fc213187c4220",
        "buggy_code": "private ResourceDto getRootProjectByComponentKey(DbSession session, String componentKey) {",
        "fixed_code": "private static ResourceDto getRootProjectByComponentKey(DbSession session, String componentKey) {",
        "patch": "@@ -114,7 +114,7 @@ public Component selectByKey(String key) {\n    * The implementation should rather use a new column already containing the root project, see https://jira.sonarsource.com/browse/SONAR-5188.\n    */\n   @CheckForNull\n-  private ResourceDto getRootProjectByComponentKey(DbSession session, String componentKey) {\n+  private static ResourceDto getRootProjectByComponentKey(DbSession session, String componentKey) {\n     ResourceDto component = selectResource(ResourceQuery.create().setKey(componentKey), session);\n     if (component != null) {\n       String rootUuid = component.getRootUuid();"
    },
    {
        "commit_id": "ee47277536e2efb0242cd1b8897c88d583f06a03",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee47277536e2efb0242cd1b8897c88d583f06a03",
        "buggy_code": "action.createParam(WebService.Param.TEXT_QUERY)",
        "fixed_code": "action.createParam(TEXT_QUERY)",
        "patch": "@@ -74,7 +74,7 @@ public void define(WebService.NewController context) {\n       .setResponseExample(getClass().getResource(\"template_groups-example.json\"))\n       .setHandler(this);\n \n-    action.createParam(WebService.Param.TEXT_QUERY)\n+    action.createParam(TEXT_QUERY)\n       .setDescription(\"Limit search to group names that contain the supplied string. Must have at least %d characters.<br/>\" +\n         \"When this parameter is not set, only group having at least one permission are returned.\", SEARCH_QUERY_MIN_LENGTH)\n       .setExampleValue(\"eri\");"
    },
    {
        "commit_id": "ee47277536e2efb0242cd1b8897c88d583f06a03",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ee47277536e2efb0242cd1b8897c88d583f06a03",
        "buggy_code": "private void setValue(Setting setting, Settings.Setting.Builder valueBuilder) {",
        "fixed_code": "private static void setValue(Setting setting, Settings.Setting.Builder valueBuilder) {",
        "patch": "@@ -216,7 +216,7 @@ private void setInherited(Setting setting, Settings.Setting.Builder valueBuilder\n       valueBuilder.setInherited(isDefault || !isSet);\n     }\n \n-    private void setValue(Setting setting, Settings.Setting.Builder valueBuilder) {\n+    private static void setValue(Setting setting, Settings.Setting.Builder valueBuilder) {\n       PropertyDefinition definition = setting.getDefinition();\n       String value = setting.getValue();\n       if (definition == null) {"
    },
    {
        "commit_id": "971c84d19547548ca70251d6131018ed0d083179",
        "commit_message": "SONAR-7844 fix ComputationTest using dropped ce_activity.log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/971c84d19547548ca70251d6131018ed0d083179",
        "buggy_code": "File report = new File(orchestrator.getServer().getLogs().getParent(), \"ce_activity.log\");",
        "fixed_code": "File report = orchestrator.getServer().getLogs();",
        "patch": "@@ -65,7 +65,7 @@ public static void clear(Orchestrator orch) throws IOException {\n    * 2015.09.29 16:57:45 INFO ce[o.s.s.c.q.CeWorkerRunnableImpl] Executed task | project=com.github.kevinsawicki:http-request-parent | id=AVAZm9oHIXrp54OmOeQe | time=2283ms\n    */\n   public static Long extractComputationTotalTime(Orchestrator orchestrator) throws IOException {\n-    File report = new File(orchestrator.getServer().getLogs().getParent(), \"ce_activity.log\");\n+    File report = orchestrator.getServer().getLogs();\n     List<String> logsLines = FileUtils.readLines(report, Charsets.UTF_8);\n     return extractComputationTotalTime(logsLines);\n   }"
    },
    {
        "commit_id": "21f1eb81370839656845e1136e8a7f01913c6e05",
        "commit_message": "fix coverage of CeService and TaskWsRequest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/21f1eb81370839656845e1136e8a7f01913c6e05",
        "buggy_code": "return call(new GetRequest(path(\"task\")).setParam(\"id\", id), WsCe.TaskResponse.parser());",
        "fixed_code": "return task(TaskWsRequest.newBuilder(id).build());",
        "patch": "@@ -70,7 +70,7 @@ public TaskTypesWsResponse taskTypes() {\n    * @since 5.5\n    */\n   public WsCe.TaskResponse task(String id) {\n-    return call(new GetRequest(path(\"task\")).setParam(\"id\", id), WsCe.TaskResponse.parser());\n+    return task(TaskWsRequest.newBuilder(id).build());\n   }\n \n   public WsCe.TaskResponse task(TaskWsRequest taskWsRequest) {"
    },
    {
        "commit_id": "9eb83a4ee9e247c4ab8af35b8e30c2f8c220ca68",
        "commit_message": "SONAR-8013 fix bad matche choice in file move detection",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9eb83a4ee9e247c4ab8af35b8e30c2f8c220ca68",
        "buggy_code": "Match match = matches.get(0);",
        "fixed_code": "Match match = matchesToValidate.get(0);",
        "patch": "@@ -256,7 +256,7 @@ private static ElectedMatches electMatches(Set<String> dbFileKeys, Map<String, F\n         continue;\n       }\n       if (matchesToValidate.size() == 1) {\n-        Match match = matches.get(0);\n+        Match match = matchesToValidate.get(0);\n         electedMatches.add(match);\n       } else {\n         matchesPerFileForScore.clear();"
    },
    {
        "commit_id": "4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "commit_message": "SONAR-7966 fix additionalFields desc + restore logs attr in examples",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "buggy_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\", PARAM_COMPONENT_ID))",
        "fixed_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\", PARAM_COMPONENT_ID))",
        "patch": "@@ -99,7 +99,7 @@ public void define(WebService.NewController controller) {\n         \"Requires the system administration permission, \" +\n         \"or project administration permission if %s is set.<br/>\" +\n         \"Since 5.5, it's no more possible to specify the page parameter.<br/>\" +\n-        \"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\", PARAM_COMPONENT_ID))\n+        \"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\", PARAM_COMPONENT_ID))\n       .setResponseExample(getClass().getResource(\"activity-example.json\"))\n       .setHandler(this)\n       .setSince(\"5.2\");"
    },
    {
        "commit_id": "4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "commit_message": "SONAR-7966 fix additionalFields desc + restore logs attr in examples",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "buggy_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\")",
        "fixed_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\")",
        "patch": "@@ -54,7 +54,7 @@ public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"component\")\n       .setDescription(\"Get the pending tasks, in-progress tasks and the last executed task of a given component \" +\n         \"(usually a project). Requires the administration permission on the component.<br/>\" +\n-        \"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\")\n+        \"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\")\n       .setSince(\"5.2\")\n       .setResponseExample(getClass().getResource(\"component-example.json\"))\n       .setHandler(this);"
    },
    {
        "commit_id": "4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "commit_message": "SONAR-7966 fix additionalFields desc + restore logs attr in examples",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4d5436ddb42354fdcc8c95c59f2c21ddf1548261",
        "buggy_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\")",
        "fixed_code": "\"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\")",
        "patch": "@@ -68,7 +68,7 @@ public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(ACTION)\n       .setDescription(\"Give Compute Engine task details such as type, status, duration and associated component.<br />\" +\n         \"Requires 'Administer System' or 'Execute Analysis' permission.<br/>\" +\n-        \"Since 6.1, field \\\"logs\\\" is deprecated and its value will always be false\")\n+        \"Since 6.1, field \\\"logs\\\" is deprecated and its value is always false.\")\n       .setResponseExample(getClass().getResource(\"task-example.json\"))\n       .setSince(\"5.2\")\n       .setHandler(this);"
    },
    {
        "commit_id": "8d0aafd422f93d3b32ac8d07aeab6eb12e0aa0d1",
        "commit_message": "SONAR-7842 add error columns to CE_ACTIVITY",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d0aafd422f93d3b32ac8d07aeab6eb12e0aa0d1",
        "buggy_code": "public static final int LAST_VERSION = 1_306;",
        "fixed_code": "public static final int LAST_VERSION = 1_307;",
        "patch": "@@ -30,7 +30,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 1_306;\n+  public static final int LAST_VERSION = 1_307;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "8d0aafd422f93d3b32ac8d07aeab6eb12e0aa0d1",
        "commit_message": "SONAR-7842 add error columns to CE_ACTIVITY",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d0aafd422f93d3b32ac8d07aeab6eb12e0aa0d1",
        "buggy_code": "assertThat(container.size()).isEqualTo(131);",
        "fixed_code": "assertThat(container.size()).isEqualTo(132);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(131);\n+    assertThat(container.size()).isEqualTo(132);\n   }\n }"
    },
    {
        "commit_id": "12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "commit_message": "SONAR-7833 task start/stop logs in sonar.log only if DEBUG is enabled\n\nstart log is always at DEBUG level\nstop log is at DEBUG level in case of success, at ERROR level in case of error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "buggy_code": "import org.sonar.server.app.CeProcessLogging;",
        "fixed_code": "import org.sonar.ce.log.CeProcessLogging;",
        "patch": "@@ -32,7 +32,7 @@\n import org.sonar.process.Monitored;\n import org.sonar.process.ProcessEntryPoint;\n import org.sonar.process.Props;\n-import org.sonar.server.app.CeProcessLogging;\n+import org.sonar.ce.log.CeProcessLogging;\n \n import static com.google.common.base.Preconditions.checkState;\n import static org.sonar.process.ProcessUtils.awaitTermination;"
    },
    {
        "commit_id": "12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "commit_message": "SONAR-7833 task start/stop logs in sonar.log only if DEBUG is enabled\n\nstart log is always at DEBUG level\nstop log is at DEBUG level in case of success, at ERROR level in case of error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "buggy_code": "ConsoleAppender<?> appender = underTest.newConsoleAppender(ctx, \"MY_APPENDER\", \"%msg%n\", null);",
        "fixed_code": "ConsoleAppender<?> appender = underTest.newConsoleAppender(ctx, \"MY_APPENDER\", \"%msg%n\");",
        "patch": "@@ -82,7 +82,7 @@ public void enableJulChangePropagation() {\n   @Test\n   public void newConsoleAppender() {\n     LoggerContext ctx = underTest.getRootContext();\n-    ConsoleAppender<?> appender = underTest.newConsoleAppender(ctx, \"MY_APPENDER\", \"%msg%n\", null);\n+    ConsoleAppender<?> appender = underTest.newConsoleAppender(ctx, \"MY_APPENDER\", \"%msg%n\");\n \n     assertThat(appender.getName()).isEqualTo(\"MY_APPENDER\");\n     assertThat(appender.getContext()).isSameAs(ctx);"
    },
    {
        "commit_id": "12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "commit_message": "SONAR-7833 task start/stop logs in sonar.log only if DEBUG is enabled\n\nstart log is always at DEBUG level\nstop log is at DEBUG level in case of success, at ERROR level in case of error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "buggy_code": "ConsoleAppender<ILoggingEvent> consoleAppender = helper.newConsoleAppender(ctx, \"CONSOLE\", LOG_FORMAT, null);",
        "fixed_code": "ConsoleAppender<ILoggingEvent> consoleAppender = helper.newConsoleAppender(ctx, \"CONSOLE\", LOG_FORMAT);",
        "patch": "@@ -36,7 +36,7 @@ public LoggerContext configure() {\n     LoggerContext ctx = helper.getRootContext();\n     ctx.reset();\n \n-    ConsoleAppender<ILoggingEvent> consoleAppender = helper.newConsoleAppender(ctx, \"CONSOLE\", LOG_FORMAT, null);\n+    ConsoleAppender<ILoggingEvent> consoleAppender = helper.newConsoleAppender(ctx, \"CONSOLE\", LOG_FORMAT);\n     Logger rootLogger = helper.configureLogger(Logger.ROOT_LOGGER_NAME, Level.INFO);\n     rootLogger.addAppender(consoleAppender);\n     return ctx;"
    },
    {
        "commit_id": "12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "commit_message": "SONAR-7833 task start/stop logs in sonar.log only if DEBUG is enabled\n\nstart log is always at DEBUG level\nstop log is at DEBUG level in case of success, at ERROR level in case of error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12ad1060151fb075c685c104bb9bd60999bb0ef3",
        "buggy_code": "ConsoleAppender<IAccessEvent> appender = helper.newConsoleAppender(valve, \"CONSOLE\", \"combined\", null);",
        "fixed_code": "ConsoleAppender<IAccessEvent> appender = helper.newConsoleAppender(valve, \"CONSOLE\", \"combined\");",
        "patch": "@@ -41,7 +41,7 @@ public void startInternal() throws Exception {\n     ProgrammaticLogbackValve valve = new ProgrammaticLogbackValve();\n     valve.setContainer(mock(Container.class));\n     LogbackHelper helper = new LogbackHelper();\n-    ConsoleAppender<IAccessEvent> appender = helper.newConsoleAppender(valve, \"CONSOLE\", \"combined\", null);\n+    ConsoleAppender<IAccessEvent> appender = helper.newConsoleAppender(valve, \"CONSOLE\", \"combined\");\n     valve.addAppender(appender);\n \n     valve.start();"
    },
    {
        "commit_id": "12345de32a5700fcb7cb80e244b070795984a7d9",
        "commit_message": "Fix typo of api/components description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12345de32a5700fcb7cb80e244b070795984a7d9",
        "buggy_code": ".setDescription(\"Get information about a component (file, directory, project, ...) and its ancestors or descendants.<br>\" +",
        "fixed_code": ".setDescription(\"Get information about a component (file, directory, project, ...) and its ancestors or descendants. \" +",
        "patch": "@@ -39,7 +39,7 @@ public ComponentsWs(AppAction appAction, SearchViewComponentsAction searchViewCo\n   public void define(Context context) {\n     NewController controller = context.createController(\"api/components\")\n       .setSince(\"4.2\")\n-      .setDescription(\"Get information about a component (file, directory, project, ...) and its ancestors or descendants.<br>\" +\n+      .setDescription(\"Get information about a component (file, directory, project, ...) and its ancestors or descendants. \" +\n         \"Update a project or module key.\");\n \n     for (ComponentsWsAction action : actions) {"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(module, FILE_UUID)",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(module, null, FILE_UUID)",
        "patch": "@@ -154,7 +154,7 @@ private void insertComponentsAndAnalysis() {\n     ComponentDto module = ComponentTesting.newModuleDto(MODULE_UUID, project)\n       .setLongName(\"SonarQube :: Plugin API\")\n       .setKey(MODULE_KEY);\n-    ComponentDto file = ComponentTesting.newFileDto(module, FILE_UUID)\n+    ComponentDto file = ComponentTesting.newFileDto(module, null, FILE_UUID)\n       .setKey(FILE_KEY)\n       .setName(\"Plugin.java\")\n       .setLongName(\"src/main/java/org/sonar/api/Plugin.java\")"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "newFileDto(directory, \"AVIF-FffA3Ax6PH2efPD\")",
        "fixed_code": "newFileDto(directory, directory, \"AVIF-FffA3Ax6PH2efPD\")",
        "patch": "@@ -153,7 +153,7 @@ private void insertJsonExampleComponentsAndSnapshots() {\n       .setQualifier(Qualifiers.DIRECTORY);\n     componentDb.insertComponent(directory);\n     componentDb.insertComponent(\n-      newFileDto(directory, \"AVIF-FffA3Ax6PH2efPD\")\n+      newFileDto(directory, directory, \"AVIF-FffA3Ax6PH2efPD\")\n         .setKey(\"com.sonarsource:java-markdown:src/main/java/com/sonarsource/markdown/impl/Rule.java\")\n         .setName(\"Rule.java\")\n         .setPath(\"src/main/java/com/sonarsource/markdown/impl/Rule.java\")"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY);",
        "patch": "@@ -277,7 +277,7 @@ public void remove_uuid_of_original_file_from_componentsWithUnprocessedIssues_if\n \n   private void addBaseIssue(RuleKey ruleKey) {\n     ComponentDto project = ComponentTesting.newProjectDto(PROJECT_UUID).setKey(PROJECT_KEY);\n-    ComponentDto file = ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY);\n+    ComponentDto file = ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY);\n     dbTester.getDbClient().componentDao().insert(dbTester.getSession(), project, file);\n \n     RuleDto ruleDto = RuleTesting.newDto(ruleKey);"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project)",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null)",
        "patch": "@@ -340,7 +340,7 @@ private SnapshotDto createProjectSnapshot(ComponentDto project) {\n   }\n \n   private ComponentDto createFile(String fileKey, ComponentDto project) {\n-    ComponentDto file = ComponentTesting.newFileDto(project)\n+    ComponentDto file = ComponentTesting.newFileDto(project, null)\n       .setKey(fileKey)\n       .setLanguage(XOO_LANGUAGE);\n     dbClient.componentDao().insert(dbSession, file);"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -100,7 +100,7 @@ public void insert_new_issue() {\n     dbClient.ruleDao().insert(session, rule);\n     ComponentDto project = ComponentTesting.newProjectDto();\n     dbClient.componentDao().insert(session, project);\n-    ComponentDto file = ComponentTesting.newFileDto(project);\n+    ComponentDto file = ComponentTesting.newFileDto(project, null);\n     dbClient.componentDao().insert(session, file);\n     session.commit();\n "
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "file = ComponentTesting.newFileDto(project).setKey(\"MyComponent\");",
        "fixed_code": "file = ComponentTesting.newFileDto(project, null).setKey(\"MyComponent\");",
        "patch": "@@ -90,7 +90,7 @@ public void setUp() {\n     SnapshotDto projectSnapshot = SnapshotTesting.newAnalysis(project);\n     tester.get(SnapshotDao.class).insert(session, projectSnapshot);\n \n-    file = ComponentTesting.newFileDto(project).setKey(\"MyComponent\");\n+    file = ComponentTesting.newFileDto(project, null).setKey(\"MyComponent\");\n     tester.get(ComponentDao.class).insert(session, file);\n \n     // project can be seen by anyone"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "file = ComponentTesting.newFileDto(project);",
        "fixed_code": "file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -84,7 +84,7 @@ public void setUp() {\n     SnapshotDto projectSnapshot = SnapshotTesting.newAnalysis(project);\n     tester.get(SnapshotDao.class).insert(session, projectSnapshot);\n \n-    file = ComponentTesting.newFileDto(project);\n+    file = ComponentTesting.newFileDto(project, null);\n     tester.get(ComponentDao.class).insert(session, file);\n \n     // project can be seen by anyone"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -344,7 +344,7 @@ private ComponentDto newProject() {\n   }\n \n   private ComponentDto newFile(ComponentDto project) {\n-    ComponentDto file = ComponentTesting.newFileDto(project);\n+    ComponentDto file = ComponentTesting.newFileDto(project, null);\n     tester.get(ComponentDao.class).insert(session, file);\n     session.commit();\n     return file;"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "insertComponent(ComponentTesting.newFileDto(project, \"file-uuid\"));",
        "fixed_code": "insertComponent(ComponentTesting.newFileDto(project, null, \"file-uuid\"));",
        "patch": "@@ -206,7 +206,7 @@ public void fail_if_component_uuid_is_not_a_project() throws Exception {\n     insertGroup(\"sonar-administrators\");\n     ComponentDto project = newProjectDto(\"project-uuid\").setKey(\"project-key\");\n     insertComponent(project);\n-    insertComponent(ComponentTesting.newFileDto(project, \"file-uuid\"));\n+    insertComponent(ComponentTesting.newFileDto(project, null, \"file-uuid\"));\n     commit();\n \n     newRequest()"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "insertComponent(newFileDto(newProjectDto(\"project-uuid\"), \"file-uuid\"));",
        "fixed_code": "insertComponent(newFileDto(newProjectDto(\"project-uuid\"), null, \"file-uuid\"));",
        "patch": "@@ -169,7 +169,7 @@ public void fail_when_project_permission_without_project() throws Exception {\n   @Test\n   public void fail_when_component_is_not_a_project() throws Exception {\n     expectedException.expect(BadRequestException.class);\n-    insertComponent(newFileDto(newProjectDto(\"project-uuid\"), \"file-uuid\"));\n+    insertComponent(newFileDto(newProjectDto(\"project-uuid\"), null, \"file-uuid\"));\n     commit();\n \n     ws.newPostRequest(CONTROLLER, ACTION)"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "insertComponent(newFileDto(newProjectDto(\"project-uuid\"), \"file-uuid\"));",
        "fixed_code": "insertComponent(newFileDto(newProjectDto(\"project-uuid\"), null, \"file-uuid\"));",
        "patch": "@@ -187,7 +187,7 @@ public void fail_when_project_project_permission_without_project() throws Except\n   @Test\n   public void fail_when_component_is_not_a_project() throws Exception {\n     expectedException.expect(BadRequestException.class);\n-    insertComponent(newFileDto(newProjectDto(\"project-uuid\"), \"file-uuid\"));\n+    insertComponent(newFileDto(newProjectDto(\"project-uuid\"), null, \"file-uuid\"));\n     insertGroup(\"sonar-administrators\");\n     commit();\n "
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "insertComponent(newFileDto(newProjectDto(), \"file-uuid\"));",
        "fixed_code": "insertComponent(newFileDto(newProjectDto(), null, \"file-uuid\"));",
        "patch": "@@ -163,7 +163,7 @@ public void fail_when_project_permission_without_permission() throws Exception {\n   @Test\n   public void fail_when_component_is_not_a_project() throws Exception {\n     expectedException.expect(BadRequestException.class);\n-    insertComponent(newFileDto(newProjectDto(), \"file-uuid\"));\n+    insertComponent(newFileDto(newProjectDto(), null, \"file-uuid\"));\n \n     ws.newPostRequest(CONTROLLER, ACTION)\n       .setParam(PARAM_USER_LOGIN, \"ray.bradbury\")"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), \"file-uuid\"));",
        "fixed_code": "dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), null, \"file-uuid\"));",
        "patch": "@@ -181,7 +181,7 @@ public void fail_if_insufficient_privileges() throws Exception {\n   @Test\n   public void fail_if_scope_is_not_project() throws Exception {\n     expectedException.expect(IllegalArgumentException.class);\n-    dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), \"file-uuid\"));\n+    dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), null, \"file-uuid\"));\n     dbSession.commit();\n \n     ws.newPostRequest(\"api/projects\", ACTION).setParam(PARAM_IDS, \"file-uuid\").execute();"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), \"file-uuid\"));",
        "fixed_code": "dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), null, \"file-uuid\"));",
        "patch": "@@ -200,7 +200,7 @@ public void fail_if_insufficient_privileges() throws Exception {\n   @Test\n   public void fail_if_scope_is_not_project() throws Exception {\n     expectedException.expect(IllegalArgumentException.class);\n-    dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), \"file-uuid\"));\n+    dbClient.componentDao().insert(dbSession, ComponentTesting.newFileDto(ComponentTesting.newProjectDto(), null, \"file-uuid\"));\n     dbSession.commit();\n \n     newRequest().setParam(PARAM_ID, \"file-uuid\").execute();"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -64,7 +64,7 @@ public class IndexActionTest {\n   WsTester tester;\n \n   ComponentDto project = ComponentTesting.newProjectDto();\n-  ComponentDto file = ComponentTesting.newFileDto(project);\n+  ComponentDto file = ComponentTesting.newFileDto(project, null);\n \n   @Before\n   public void setUp() {"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY);",
        "patch": "@@ -174,7 +174,7 @@ public void should_check_permission() throws Exception {\n \n   private void newFile() {\n     ComponentDto project = ComponentTesting.newProjectDto(PROJECT_UUID);\n-    ComponentDto file = ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY);\n+    ComponentDto file = ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY);\n     componentDao.insert(dbTester.getSession(), project, file);\n     dbTester.getSession().commit();\n   }"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -63,7 +63,7 @@ public class RawActionTest {\n   WsTester tester;\n \n   ComponentDto project = ComponentTesting.newProjectDto();\n-  ComponentDto file = ComponentTesting.newFileDto(project);\n+  ComponentDto file = ComponentTesting.newFileDto(project, null);\n \n   @Before\n   public void setUp() {"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "dbClient.componentDao().insert(dbTester.getSession(), project, ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY));",
        "fixed_code": "dbClient.componentDao().insert(dbTester.getSession(), project, ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY));",
        "patch": "@@ -182,7 +182,7 @@ public void fail_without_code_viewer_permission() throws Exception {\n \n   private void initFile() {\n     ComponentDto project = ComponentTesting.newProjectDto(PROJECT_UUID);\n-    dbClient.componentDao().insert(dbTester.getSession(), project, ComponentTesting.newFileDto(project, FILE_UUID).setKey(FILE_KEY));\n+    dbClient.componentDao().insert(dbTester.getSession(), project, ComponentTesting.newFileDto(project, null, FILE_UUID).setKey(FILE_KEY));\n     dbTester.getSession().commit();\n   }\n "
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -65,7 +65,7 @@ public class ShowActionTest {\n   ComponentDao componentDao;\n \n   ComponentDto project = ComponentTesting.newProjectDto();\n-  ComponentDto file = ComponentTesting.newFileDto(project);\n+  ComponentDto file = ComponentTesting.newFileDto(project, null);\n \n   @Before\n   public void setUp() {"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(directory, \"cdef\").setName(\"Source.xoo\")",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(directory, directory, \"cdef\").setName(\"Source.xoo\")",
        "patch": "@@ -319,7 +319,7 @@ public void bread_crumbs_on_several_levels() throws Exception {\n     ComponentDto module = ComponentTesting.newModuleDto(\"bcde\", project)\n       .setKey(\"palap\").setName(\"Palap\");\n     ComponentDto directory = ComponentTesting.newDirectory(module, \"src/main/xoo\");\n-    ComponentDto file = ComponentTesting.newFileDto(directory, \"cdef\").setName(\"Source.xoo\")\n+    ComponentDto file = ComponentTesting.newFileDto(directory, directory, \"cdef\").setName(\"Source.xoo\")\n       .setKey(\"palap:src/main/xoo/Source.xoo\")\n       .setPath(directory.path());\n     dbClient.componentDao().insert(dbTester.getSession(), project, module, directory, file);"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "ComponentDto file = ComponentTesting.newFileDto(project);",
        "fixed_code": "ComponentDto file = ComponentTesting.newFileDto(project, null);",
        "patch": "@@ -185,7 +185,7 @@ public void clear_views_lookup_cache_on_index_view_uuid() {\n \n   private ComponentDto addProjectWithIssue(RuleDto rule) {\n     ComponentDto project = ComponentTesting.newProjectDto();\n-    ComponentDto file = ComponentTesting.newFileDto(project);\n+    ComponentDto file = ComponentTesting.newFileDto(project, null);\n     dbClient.componentDao().insert(dbSession, project, file);\n     dbClient.roleDao().insertGroupRole(dbSession, new GroupRoleDto().setRole(UserRole.USER).setGroupId(null).setResourceId(project.getId()));\n "
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "componentDb.insertComponent(newFileDto(project).setKey(\"old-project-key:file\"));",
        "fixed_code": "componentDb.insertComponent(newFileDto(project, null).setKey(\"old-project-key:file\"));",
        "patch": "@@ -110,7 +110,7 @@ public void shouldNotUpdateAllSubmodules() {\n   public void fail_with_functional_exception_when_sub_component_key_is_longer_than_authorized() {\n     ComponentDto project = newProjectDto(\"project-uuid\").setKey(\"old-project-key\");\n     componentDb.insertComponent(project);\n-    componentDb.insertComponent(newFileDto(project).setKey(\"old-project-key:file\"));\n+    componentDb.insertComponent(newFileDto(project, null).setKey(\"old-project-key:file\"));\n     String newLongProjectKey = Strings.repeat(\"a\", 400);\n     thrown.expect(IllegalArgumentException.class);\n     thrown.expectMessage(\"Component key length (405) is longer than the maximum authorized (400). '\" + newLongProjectKey + \":file' was provided.\");"
    },
    {
        "commit_id": "97f71ab006003c2e627c23032f3b29276909e7d9",
        "commit_message": "SONAR-7958 fix UUID_PATH of file created by ComponentTesting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/97f71ab006003c2e627c23032f3b29276909e7d9",
        "buggy_code": "public static final ComponentDto FILE = ComponentTesting.newFileDto(PROJECT);",
        "fixed_code": "public static final ComponentDto FILE = ComponentTesting.newFileDto(PROJECT, null);",
        "patch": "@@ -39,7 +39,7 @@ public class IssueDaoTest {\n \n   public static final RuleDto RULE = RuleTesting.newXooX1();\n   public static final ComponentDto PROJECT = ComponentTesting.newProjectDto();\n-  public static final ComponentDto FILE = ComponentTesting.newFileDto(PROJECT);\n+  public static final ComponentDto FILE = ComponentTesting.newFileDto(PROJECT, null);\n   public static final String ISSUE_KEY1 = \"I1\";\n   public static final String ISSUE_KEY2 = \"I2\";\n "
    },
    {
        "commit_id": "99d6d35ba7001b4c261927a5114aec204dad3fce",
        "commit_message": "Fix compatibility of ES with KOPF\n\nOnly for DEV purpose !",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/99d6d35ba7001b4c261927a5114aec204dad3fce",
        "buggy_code": "String nodeName = getNodeName();",
        "fixed_code": "builder.put(\"http.cors.allow-origin\", \"*\");",
        "patch": "@@ -134,6 +134,7 @@ private void configureNetwork(Settings.Builder builder) {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ private void configureCluster(Settings.Builder builder) {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);"
    },
    {
        "commit_id": "b710ae53feba2a4d8d2c181a26d5d1163e407d1b",
        "commit_message": "Fix merge of branch-6.0",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b710ae53feba2a4d8d2c181a26d5d1163e407d1b",
        "buggy_code": "+ 22 // level 1",
        "fixed_code": "+ 23 // level 1",
        "patch": "@@ -99,7 +99,7 @@ public void real_start() throws IOException {\n     );\n     assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize(\n       COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION\n-        + 22 // level 1\n+        + 23 // level 1\n         + 46 // content of DaoModule\n         + 1 // content of EsSearchModule\n         + 55 // content of CorePropertyDefinitions"
    },
    {
        "commit_id": "ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "commit_message": "fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "buggy_code": "org.sonar.core.util.FileUtils.deleteQuietly(info.getNonNullJarFile());",
        "fixed_code": "deleteQuietly(info.getNonNullJarFile());",
        "patch": "@@ -170,7 +170,7 @@ private void registerPluginInfo(PluginInfo info) {\n     String pluginKey = info.getKey();\n     if (blacklistedPluginKeys.contains(pluginKey)) {\n       LOG.warn(\"Plugin {} [{}] is blacklisted and is being uninstalled.\", info.getName(), pluginKey);\n-      org.sonar.core.util.FileUtils.deleteQuietly(info.getNonNullJarFile());\n+      deleteQuietly(info.getNonNullJarFile());\n       return;\n     }\n     if (FORBIDDEN_COMPATIBLE_PLUGINS.contains(pluginKey)) {"
    },
    {
        "commit_id": "ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "commit_message": "fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "buggy_code": "private void cleanSnapshotWithIncorrectRoot(Context context) throws SQLException {",
        "fixed_code": "private static void cleanSnapshotWithIncorrectRoot(Context context) throws SQLException {",
        "patch": "@@ -119,7 +119,7 @@ private static void cleanUsurperRootComponents(Context context) throws SQLExcept\n     });\n   }\n \n-  private void cleanSnapshotWithIncorrectRoot(Context context) throws SQLException {\n+  private static void cleanSnapshotWithIncorrectRoot(Context context) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"select\" +\n       \" sn.id\" +"
    },
    {
        "commit_id": "ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "commit_message": "fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae9a6a7ff5a78d8aee765728d8c73f840e7905ff",
        "buggy_code": "public void populateAnalysisUuid(Context context) throws SQLException {",
        "fixed_code": "public static void populateAnalysisUuid(Context context) throws SQLException {",
        "patch": "@@ -58,7 +58,7 @@ private static boolean handleComponentUuid(Select.Row row, SqlStatement update)\n     return true;\n   }\n   \n-  public void populateAnalysisUuid(Context context) throws SQLException {\n+  public static void populateAnalysisUuid(Context context) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"select distinct di.project_snapshot_id, s.uuid from duplications_index di\" +\n         \" inner join snapshots s on s.id=di.project_snapshot_id\" +"
    },
    {
        "commit_id": "84d63b4b2cc9461695f0a892818e2874a8b14650",
        "commit_message": "SONAR-7874 Fix typo in WS descriptions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/84d63b4b2cc9461695f0a892818e2874a8b14650",
        "buggy_code": "\"</ul>.<br/>\" +",
        "fixed_code": "\"</ul>\" +",
        "patch": "@@ -63,7 +63,7 @@ public void define(WebService.NewController controller) {\n         \"<li>INCOMPATIBLE: plugin is not compatible with current SonarQube instance.</li>\" +\n         \"<li>REQUIRES_SYSTEM_UPGRADE: plugin requires SonarQube to be upgraded before being installed.</li>\" +\n         \"<li>DEPS_REQUIRE_SYSTEM_UPGRADE: at least one plugin on which the plugin is dependent requires SonarQube to be upgraded.</li>\" +\n-        \"</ul>.<br/>\" +\n+        \"</ul>\" +\n         \"Require 'Administer System' permission.\")\n       .setSince(\"5.2\")\n       .setHandler(this)"
    },
    {
        "commit_id": "84d63b4b2cc9461695f0a892818e2874a8b14650",
        "commit_message": "SONAR-7874 Fix typo in WS descriptions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/84d63b4b2cc9461695f0a892818e2874a8b14650",
        "buggy_code": "\"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE]<br/>.\" +",
        "fixed_code": "\"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE].<br/>\" +",
        "patch": "@@ -77,7 +77,7 @@ public void define(WebService.NewController controller) {\n         \"<br/>\" +\n         \"Plugin information is retrieved from Update Center. Date and time at which Update Center was last refreshed is provided in the response.\" +\n         \"<br/>\" +\n-        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE]<br/>.\" +\n+        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE].<br/>\" +\n         \"Require 'Administer System' permission.\")\n       .setSince(\"5.2\")\n       .setHandler(this)"
    },
    {
        "commit_id": "82d052e1a5f5fe29d6603ef38435606569dd90fe",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82d052e1a5f5fe29d6603ef38435606569dd90fe",
        "buggy_code": "private String formatCoverageMeasure(Map<String, MeasureDto> measuresByMetricKey) {",
        "fixed_code": "private static String formatCoverageMeasure(Map<String, MeasureDto> measuresByMetricKey) {",
        "patch": "@@ -178,7 +178,7 @@ private ComponentDto retrieveRootIfNotCurrentComponent(ComponentDto componentDto\n   }\n \n   @CheckForNull\n-  private String formatCoverageMeasure(Map<String, MeasureDto> measuresByMetricKey) {\n+  private static String formatCoverageMeasure(Map<String, MeasureDto> measuresByMetricKey) {\n     MeasureDto overallCoverage = measuresByMetricKey.get(CoreMetrics.OVERALL_COVERAGE_KEY);\n     if (overallCoverage != null) {\n       return formatMeasure(overallCoverage, CoreMetrics.OVERALL_COVERAGE);"
    },
    {
        "commit_id": "89369f354b6f52a6dcc488127c1286525e48372a",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89369f354b6f52a6dcc488127c1286525e48372a",
        "buggy_code": "private final Errors errors;",
        "fixed_code": "private final transient Errors errors;",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public class BadRequestException extends ServerException {\n \n-  private final Errors errors;\n+  private final transient Errors errors;\n \n   public BadRequestException(String l10nKey, Object... l10nParams) {\n     super(HTTP_BAD_REQUEST);"
    },
    {
        "commit_id": "89369f354b6f52a6dcc488127c1286525e48372a",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89369f354b6f52a6dcc488127c1286525e48372a",
        "buggy_code": "private final ListMultimap<String, Object> context = LinkedListMultimap.create();",
        "fixed_code": "private final transient ListMultimap<String, Object> context = LinkedListMultimap.create();",
        "patch": "@@ -69,7 +69,7 @@ public class ContextException extends RuntimeException {\n   private static final Joiner COMMA_JOINER = Joiner.on(',');\n \n   // LinkedListMultimap is used to keep order of keys and values\n-  private final ListMultimap<String, Object> context = LinkedListMultimap.create();\n+  private final transient ListMultimap<String, Object> context = LinkedListMultimap.create();\n \n   private ContextException(Throwable t) {\n     super(t);"
    },
    {
        "commit_id": "89369f354b6f52a6dcc488127c1286525e48372a",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/89369f354b6f52a6dcc488127c1286525e48372a",
        "buggy_code": "private final Command command;",
        "fixed_code": "private final transient Command command;",
        "patch": "@@ -21,7 +21,7 @@\n \n public class CommandException extends RuntimeException {\n \n-  private final Command command;\n+  private final transient Command command;\n \n   public CommandException(Command command, String message, Throwable throwable) {\n     super(message + \" [command: \" + command + \"]\", throwable);"
    },
    {
        "commit_id": "7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "buggy_code": "index(lastUpdatedAtParam -> doIndex(lastUpdatedAtParam));",
        "fixed_code": "index(this::doIndex);",
        "patch": "@@ -82,7 +82,7 @@ public void index(final IndexerTask task) {\n   }\n \n   public void index() {\n-    index(lastUpdatedAtParam -> doIndex(lastUpdatedAtParam));\n+    index(this::doIndex);\n   }\n \n   protected abstract long doIndex(long lastUpdatedAt);"
    },
    {
        "commit_id": "7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "buggy_code": "this.limit = 999999;",
        "fixed_code": "this.limit = 999_999;",
        "patch": "@@ -102,7 +102,7 @@ public SearchOptions setLimit(int limit) {\n    */\n   @Deprecated\n   public SearchOptions disableLimit() {\n-    this.limit = 999999;\n+    this.limit = 999_999;\n     return this;\n   }\n "
    },
    {
        "commit_id": "7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7cdbfc9e015093f8f2c58b43a106e6b347728bcf",
        "buggy_code": "class ListInterceptor extends LogInterceptor {",
        "fixed_code": "class ListInterceptor implements LogInterceptor {",
        "patch": "@@ -27,7 +27,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class ListInterceptor extends LogInterceptor {\n+class ListInterceptor implements LogInterceptor {\n \n   private final List<String> logs = new ArrayList<>();\n   private final ListMultimap<LoggerLevel, String> logsByLevel = ArrayListMultimap.create();"
    },
    {
        "commit_id": "b8ef8b4f80219e756f9a0f6a84243104b51387c7",
        "commit_message": "SONAR-7686 Add migration to fix null external identity",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8ef8b4f80219e756f9a0f6a84243104b51387c7",
        "buggy_code": "public static final int LAST_VERSION = 1_152;",
        "fixed_code": "public static final int LAST_VERSION = 1_153;",
        "patch": "@@ -30,7 +30,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 1_152;\n+  public static final int LAST_VERSION = 1_153;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "b8ef8b4f80219e756f9a0f6a84243104b51387c7",
        "commit_message": "SONAR-7686 Add migration to fix null external identity",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8ef8b4f80219e756f9a0f6a84243104b51387c7",
        "buggy_code": "assertThat(container.size()).isEqualTo(65);",
        "fixed_code": "assertThat(container.size()).isEqualTo(66);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(65);\n+    assertThat(container.size()).isEqualTo(66);\n   }\n }"
    },
    {
        "commit_id": "719436a3859b70e47caae4259e77e08916bbe728",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/719436a3859b70e47caae4259e77e08916bbe728",
        "buggy_code": "private PreparedStatement createStatement(DbClient dbClient, DbSession session, long afterDate) throws SQLException {",
        "fixed_code": "private static PreparedStatement createStatement(DbClient dbClient, DbSession session, long afterDate) throws SQLException {",
        "patch": "@@ -166,7 +166,7 @@ Collection<Dto> selectAfterDate(DbClient dbClient, DbSession session, long after\n     }\n   }\n \n-  private PreparedStatement createStatement(DbClient dbClient, DbSession session, long afterDate) throws SQLException {\n+  private static PreparedStatement createStatement(DbClient dbClient, DbSession session, long afterDate) throws SQLException {\n     String sql;\n     if (afterDate > 0L) {\n       sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \" AND projects.authorization_updated_at>? \");"
    },
    {
        "commit_id": "719436a3859b70e47caae4259e77e08916bbe728",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/719436a3859b70e47caae4259e77e08916bbe728",
        "buggy_code": "super(Maps.<String, Object>newHashMap());",
        "fixed_code": "super(Maps.newHashMap());",
        "patch": "@@ -25,7 +25,7 @@\n public class IssueAuthorizationDoc extends BaseDoc {\n \n   public IssueAuthorizationDoc() {\n-    super(Maps.<String, Object>newHashMap());\n+    super(Maps.newHashMap());\n   }\n \n   @Override"
    },
    {
        "commit_id": "719436a3859b70e47caae4259e77e08916bbe728",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/719436a3859b70e47caae4259e77e08916bbe728",
        "buggy_code": "super(Maps.<String, Object>newHashMap());",
        "fixed_code": "super(Maps.newHashMap());",
        "patch": "@@ -44,7 +44,7 @@ public IssueDoc(Map<String, Object> fields) {\n   }\n \n   public IssueDoc() {\n-    super(Maps.<String, Object>newHashMap());\n+    super(Maps.newHashMap());\n   }\n \n   @Override"
    },
    {
        "commit_id": "719436a3859b70e47caae4259e77e08916bbe728",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/719436a3859b70e47caae4259e77e08916bbe728",
        "buggy_code": "IssueDoc doc = new IssueDoc(Maps.<String, Object>newHashMapWithExpectedSize(30));",
        "fixed_code": "IssueDoc doc = new IssueDoc(Maps.newHashMapWithExpectedSize(30));",
        "patch": "@@ -151,7 +151,7 @@ private static String extractModule(String moduleUuidPath) {\n \n   @Override\n   protected IssueDoc read(ResultSet rs) throws SQLException {\n-    IssueDoc doc = new IssueDoc(Maps.<String, Object>newHashMapWithExpectedSize(30));\n+    IssueDoc doc = new IssueDoc(Maps.newHashMapWithExpectedSize(30));\n \n     String key = rs.getString(1);\n     String projectUuid = rs.getString(2);"
    },
    {
        "commit_id": "5c8c616c2bb81abf291e6bac6202aad5bcfaf7a1",
        "commit_message": "Fix message when controller WS cannot be found",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c8c616c2bb81abf291e6bac6202aad5bcfaf7a1",
        "buggy_code": "throw new BadRequestException(format(\"Unknown web service: %s\", controllerPath));",
        "fixed_code": "throw new BadRequestException(format(\"Unknown controller: %s\", controllerPath));",
        "patch": "@@ -128,7 +128,7 @@ public void execute(Request request, Response response) {\n   private WebService.Action getAction(String controllerPath, String actionKey) {\n     WebService.Controller controller = context.controller(controllerPath);\n     if (controller == null) {\n-      throw new BadRequestException(format(\"Unknown web service: %s\", controllerPath));\n+      throw new BadRequestException(format(\"Unknown controller: %s\", controllerPath));\n     }\n     WebService.Action action = controller.action(actionKey);\n     if (action == null) {"
    },
    {
        "commit_id": "5c8c616c2bb81abf291e6bac6202aad5bcfaf7a1",
        "commit_message": "Fix message when controller WS cannot be found",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c8c616c2bb81abf291e6bac6202aad5bcfaf7a1",
        "buggy_code": "assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Unknown web service: api/xxx\\\"}]}\");",
        "fixed_code": "assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Unknown controller: api/xxx\\\"}]}\");",
        "patch": "@@ -126,7 +126,7 @@ public void bad_controller() {\n     DumbResponse response = new DumbResponse();\n     underTest.execute(request, response);\n \n-    assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Unknown web service: api/xxx\\\"}]}\");\n+    assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Unknown controller: api/xxx\\\"}]}\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "31f83fbcab419d16c5911583784d6cf780f8c6cf",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31f83fbcab419d16c5911583784d6cf780f8c6cf",
        "buggy_code": "public void addResolvedIssue(TrackedIssue issue, Rule rule, RulePriority severity) {",
        "fixed_code": "public void addResolvedIssue(Rule rule, RulePriority severity) {",
        "patch": "@@ -63,7 +63,7 @@ public Map<String, IssueVariation> getTotalByRuleKey() {\n     return totalByRuleKey;\n   }\n \n-  public void addResolvedIssue(TrackedIssue issue, Rule rule, RulePriority severity) {\n+  public void addResolvedIssue(Rule rule, RulePriority severity) {\n     ReportRuleKey reportRuleKey = new ReportRuleKey(rule, severity);\n     initMaps(reportRuleKey);\n     total.incrementResolvedIssuesCount();"
    },
    {
        "commit_id": "120442638b90cbe9ca588df6b7e7f6d23480b158",
        "commit_message": "SONAR-3321 Fix bug in file rename algorithm\n\n* Real technical bug causing the error was that matches\nwere not properly filtered so that a file that was already\nmatched could be matched again\n* This also allowed to spot a functional bug: matches candidates were\nprocessed in ascending score order. Means that lowest score got highest priority.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/120442638b90cbe9ca588df6b7e7f6d23480b158",
        "buggy_code": "\"Original file %s already registered for file %s\", existingOriginalFile, file);",
        "fixed_code": "\"Original file %s already registered for file %s. Unable to register %s.\", existingOriginalFile, file, originalFile);",
        "patch": "@@ -39,7 +39,7 @@ public void setOriginalFile(Component file, OriginalFile originalFile) {\n \n     OriginalFile existingOriginalFile = originalFiles.get(file.getKey());\n     checkState(existingOriginalFile == null || existingOriginalFile.equals(originalFile),\n-      \"Original file %s already registered for file %s\", existingOriginalFile, file);\n+      \"Original file %s already registered for file %s. Unable to register %s.\", existingOriginalFile, file, originalFile);\n     if (existingOriginalFile == null) {\n       originalFiles.put(file.getKey(), originalFile);\n     }"
    },
    {
        "commit_id": "3c59e959b8f2ec1cff74734c9494add02bd49bcb",
        "commit_message": "SONAR-7700 Fix column size of b_qualifier",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c59e959b8f2ec1cff74734c9494add02bd49bcb",
        "buggy_code": ".addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_qualifier\").setLimit(3).setIsNullable(true).build())",
        "fixed_code": ".addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_qualifier\").setLimit(10).setIsNullable(true).build())",
        "patch": "@@ -48,7 +48,7 @@ public void execute(Context context) throws SQLException {\n       .addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_module_uuid_path\").setLimit(1500).setIsNullable(true).build())\n       .addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_name\").setLimit(500).setIsNullable(true).build())\n       .addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_path\").setLimit(2000).setIsNullable(true).build())\n-      .addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_qualifier\").setLimit(3).setIsNullable(true).build())\n+      .addColumn(newVarcharColumnDefBuilder().setColumnName(\"b_qualifier\").setLimit(10).setIsNullable(true).build())\n       .build());\n   }\n "
    },
    {
        "commit_id": "3c59e959b8f2ec1cff74734c9494add02bd49bcb",
        "commit_message": "SONAR-7700 Fix column size of b_qualifier",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c59e959b8f2ec1cff74734c9494add02bd49bcb",
        "buggy_code": "db.assertColumnDefinition(TABLE, \"b_qualifier\", Types.VARCHAR, 3, true);",
        "fixed_code": "db.assertColumnDefinition(TABLE, \"b_qualifier\", Types.VARCHAR, 10, true);",
        "patch": "@@ -86,6 +86,6 @@ private void verifyAddedColumns() {\n     db.assertColumnDefinition(TABLE, \"b_module_uuid_path\", Types.VARCHAR, 1500, true);\n     db.assertColumnDefinition(TABLE, \"b_name\", Types.VARCHAR, 500, true);\n     db.assertColumnDefinition(TABLE, \"b_path\", Types.VARCHAR, 2000, true);\n-    db.assertColumnDefinition(TABLE, \"b_qualifier\", Types.VARCHAR, 3, true);\n+    db.assertColumnDefinition(TABLE, \"b_qualifier\", Types.VARCHAR, 10, true);\n   }\n }"
    },
    {
        "commit_id": "ba7353eb7324dc759f7f2238ac94e167b35af473",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ba7353eb7324dc759f7f2238ac94e167b35af473",
        "buggy_code": "private void configurePagination(SearchOptions options, SearchRequestBuilder esSearch) {",
        "fixed_code": "private static void configurePagination(SearchOptions options, SearchRequestBuilder esSearch) {",
        "patch": "@@ -245,7 +245,7 @@ private void configureSorting(IssueQuery query, SearchRequestBuilder esRequest)\n     }\n   }\n \n-  private void configurePagination(SearchOptions options, SearchRequestBuilder esSearch) {\n+  private static void configurePagination(SearchOptions options, SearchRequestBuilder esSearch) {\n     esSearch.setFrom(options.getOffset()).setSize(options.getLimit());\n   }\n "
    },
    {
        "commit_id": "7354f880a619bb286030bb0dc09ddd6b737e3cd8",
        "commit_message": "Fix Xoo UT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7354f880a619bb286030bb0dc09ddd6b737e3cd8",
        "buggy_code": "assertThat(context.getExtensions()).hasSize(41).doesNotContain(CpdTokenizerSensor.class);",
        "fixed_code": "assertThat(context.getExtensions()).hasSize(39).doesNotContain(CpdTokenizerSensor.class);",
        "patch": "@@ -39,6 +39,6 @@ public void provide_extensions_for_5_5() {\n \n     context = new Plugin.Context(new SonarRuntime(Version.parse(\"5.4\"), SonarProduct.SONARLINT, null));\n     new XooPlugin().define(context);\n-    assertThat(context.getExtensions()).hasSize(41).doesNotContain(CpdTokenizerSensor.class);\n+    assertThat(context.getExtensions()).hasSize(39).doesNotContain(CpdTokenizerSensor.class);\n   }\n }"
    },
    {
        "commit_id": "379e9411bc7ec06cca075397dfee36fd42a94ca7",
        "commit_message": "fix various quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/379e9411bc7ec06cca075397dfee36fd42a94ca7",
        "buggy_code": "int match = (left.get(i - 1).equals(right.get(j - 1))) ? 0 : 1;",
        "fixed_code": "int match = left.get(i - 1).equals(right.get(j - 1)) ? 0 : 1;",
        "patch": "@@ -59,7 +59,7 @@ <T extends Object> int levenshteinDistance(List<T> left, List<T> right) {\n       // transformation cost for each letter in s0\n       for (int i = 1; i < len0; i++) {\n         // matching current letters in both strings\n-        int match = (left.get(i - 1).equals(right.get(j - 1))) ? 0 : 1;\n+        int match = left.get(i - 1).equals(right.get(j - 1)) ? 0 : 1;\n \n         // computing cost for each transformation\n         int costReplace = cost[i - 1] + match;"
    },
    {
        "commit_id": "1cc993f6dae7a22df577faa7101d06dc6c594974",
        "commit_message": "SONAR-7780 Fix migration of PROJECTS.UUID_PATH",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1cc993f6dae7a22df577faa7101d06dc6c594974",
        "buggy_code": "public static final int LAST_VERSION = 1_267;",
        "fixed_code": "public static final int LAST_VERSION = 1_268;",
        "patch": "@@ -30,7 +30,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 1_267;\n+  public static final int LAST_VERSION = 1_268;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "1cc993f6dae7a22df577faa7101d06dc6c594974",
        "commit_message": "SONAR-7780 Fix migration of PROJECTS.UUID_PATH",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1cc993f6dae7a22df577faa7101d06dc6c594974",
        "buggy_code": "assertThat(container.size()).isEqualTo(123);",
        "fixed_code": "assertThat(container.size()).isEqualTo(124);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(123);\n+    assertThat(container.size()).isEqualTo(124);\n   }\n }"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "Thread.sleep(10000);",
        "fixed_code": "Thread.sleep(10_000);",
        "patch": "@@ -109,7 +109,7 @@ public void awaitStop() {\n       while (!stopAwait) {\n         try {\n           // wait for a quite long time but we will be interrupted if flag changes anyway\n-          Thread.sleep(10000);\n+          Thread.sleep(10_000);\n         } catch (InterruptedException e) {\n           // continue and check the flag\n         }"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "this(60000L);",
        "fixed_code": "this(60_000L);",
        "patch": "@@ -31,7 +31,7 @@ class Timeouts {\n   }\n \n   public Timeouts() {\n-    this(60000L);\n+    this(60_000L);\n   }\n \n   /**"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "private static final int SOCKET_TIMEOUT = 30000;",
        "fixed_code": "private static final int SOCKET_TIMEOUT = 30_000;",
        "patch": "@@ -53,7 +53,7 @@ public class EmailNotificationChannel extends NotificationChannel {\n    * @see org.apache.commons.mail.Email#setSocketConnectionTimeout(int)\n    * @see org.apache.commons.mail.Email#setSocketTimeout(int)\n    */\n-  private static final int SOCKET_TIMEOUT = 30000;\n+  private static final int SOCKET_TIMEOUT = 30_000;\n \n   /**\n    * Email Header Field: \"List-ID\"."
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "return showFullResult ? 999999 : limit;",
        "fixed_code": "return showFullResult ? 999_999 : limit;",
        "patch": "@@ -127,7 +127,7 @@ public int getPage() {\n    * Limit on the number of results to return. Defaults to {@link #DEFAULT_LIMIT}.\n    */\n   public int getLimit() {\n-    return showFullResult ? 999999 : limit;\n+    return showFullResult ? 999_999 : limit;\n   }\n \n   /**"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "public static final long DEFAULT_PERIOD_MS = 60000L;",
        "fixed_code": "public static final long DEFAULT_PERIOD_MS = 60_000L;",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public class ProgressLogger {\n \n-  public static final long DEFAULT_PERIOD_MS = 60000L;\n+  public static final long DEFAULT_PERIOD_MS = 60_000L;\n \n   private final Timer timer;\n   private final LoggerTimerTask task;"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "private static final int TEMP_DIR_ATTEMPTS = 10000;",
        "fixed_code": "private static final int TEMP_DIR_ATTEMPTS = 10_000;",
        "patch": "@@ -32,7 +32,7 @@\n public class FileCache {\n \n   /** Maximum loop count when creating temp directories. */\n-  private static final int TEMP_DIR_ATTEMPTS = 10000;\n+  private static final int TEMP_DIR_ATTEMPTS = 10_000;\n \n   private final File dir;\n   private final File tmpDir;"
    },
    {
        "commit_id": "e0a8d965788b063262f866062c7bc80d5e582654",
        "commit_message": "Fix some Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0a8d965788b063262f866062c7bc80d5e582654",
        "buggy_code": "static final int DAY_POSITION_IN_LONG = 10000;",
        "fixed_code": "static final int DAY_POSITION_IN_LONG = 10_000;",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public class WorkDuration implements Serializable {\n \n-  static final int DAY_POSITION_IN_LONG = 10000;\n+  static final int DAY_POSITION_IN_LONG = 10_000;\n   static final int HOUR_POSITION_IN_LONG = 100;\n   static final int MINUTE_POSITION_IN_LONG = 1;\n "
    },
    {
        "commit_id": "cbe500cf2057081d5d2bd3c0aafc7a635216e4f8",
        "commit_message": "Fix Quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cbe500cf2057081d5d2bd3c0aafc7a635216e4f8",
        "buggy_code": "massUpdate.execute((row, update) -> this.handle(row, update));",
        "fixed_code": "massUpdate.execute(this::handle);",
        "patch": "@@ -38,7 +38,7 @@ public void execute(Context context) throws SQLException {\n     massUpdate.select(\"SELECT a.id, s.uuid from ce_activity a inner join snapshots s on s.id=a.snapshot_id where a.snapshot_id is not null and a.analysis_uuid is null\");\n     massUpdate.update(\"UPDATE ce_activity SET analysis_uuid=? WHERE id=?\");\n     massUpdate.rowPluralName(\"ce_activity\");\n-    massUpdate.execute((row, update) -> this.handle(row, update));\n+    massUpdate.execute(this::handle);\n   }\n \n   private boolean handle(Select.Row row, SqlStatement update) throws SQLException {"
    },
    {
        "commit_id": "25a13d5f1393c0ac26a068ab8dba3fe27df6891a",
        "commit_message": "Fix typo of WS description api/rules/show",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/25a13d5f1393c0ac26a068ab8dba3fe27df6891a",
        "buggy_code": ".setDescription(\"Get detailed information about a rule\" +",
        "fixed_code": ".setDescription(\"Get detailed information about a rule<br>\" +",
        "patch": "@@ -60,7 +60,7 @@ public ShowAction(DbClient dbClient, RuleMapper mapper, ActiveRuleCompleter acti\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller\n       .createAction(\"show\")\n-      .setDescription(\"Get detailed information about a rule\" +\n+      .setDescription(\"Get detailed information about a rule<br>\" +\n         \"Since 5.5, following fields in the response have been deprecated :\" +\n         \"<ul>\" +\n         \"<li>\\\"effortToFixDescription\\\" becomes \\\"gapDescription\\\"</li>\" +"
    },
    {
        "commit_id": "a159dd8937e7e0174fd03c80a99ae4857504b178",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a159dd8937e7e0174fd03c80a99ae4857504b178",
        "buggy_code": "private void checkAtMostOneMatchForComponentKey(final String componentKey, List<PermissionTemplateDto> matchingTemplates) {",
        "fixed_code": "private static void checkAtMostOneMatchForComponentKey(final String componentKey, List<PermissionTemplateDto> matchingTemplates) {",
        "patch": "@@ -199,7 +199,7 @@ private String getApplicablePermissionTemplateKey(DbSession session, final Strin\n     return defaultTemplateKey;\n   }\n \n-  private void checkAtMostOneMatchForComponentKey(final String componentKey, List<PermissionTemplateDto> matchingTemplates) {\n+  private static void checkAtMostOneMatchForComponentKey(final String componentKey, List<PermissionTemplateDto> matchingTemplates) {\n     if (matchingTemplates.size() > 1) {\n       StringBuilder templatesNames = new StringBuilder();\n       for (Iterator<PermissionTemplateDto> it = matchingTemplates.iterator(); it.hasNext();) {"
    },
    {
        "commit_id": "5f682d84a007b0abe561f63678bef61e8744ca24",
        "commit_message": "Fix Quality flaws in DB migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f682d84a007b0abe561f63678bef61e8744ca24",
        "buggy_code": "private static final int UUID_VARCHAR_SIZE = 50;",
        "fixed_code": "import static org.sonar.db.version.VarcharColumnDef.UUID_VARCHAR_SIZE;",
        "patch": "@@ -24,12 +24,12 @@\n import org.sonar.db.version.AddColumnsBuilder;\n import org.sonar.db.version.DdlChange;\n \n+import static org.sonar.db.version.VarcharColumnDef.UUID_VARCHAR_SIZE;\n import static org.sonar.db.version.VarcharColumnDef.newVarcharColumnDefBuilder;\n \n public class AddUuidColumnsToProjects extends DdlChange {\n \n   private static final String TABLE_PROJECTS = \"projects\";\n-  private static final int UUID_VARCHAR_SIZE = 50;\n \n   public AddUuidColumnsToProjects(Database db) {\n     super(db);"
    },
    {
        "commit_id": "5f682d84a007b0abe561f63678bef61e8744ca24",
        "commit_message": "Fix Quality flaws in DB migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f682d84a007b0abe561f63678bef61e8744ca24",
        "buggy_code": "private static final int UUID_VARCHAR_SIZE = 50;",
        "fixed_code": "import static org.sonar.db.version.VarcharColumnDef.UUID_VARCHAR_SIZE;",
        "patch": "@@ -24,12 +24,12 @@\n import org.sonar.db.version.AlterColumnsBuilder;\n import org.sonar.db.version.DdlChange;\n \n+import static org.sonar.db.version.VarcharColumnDef.UUID_VARCHAR_SIZE;\n import static org.sonar.db.version.VarcharColumnDef.newVarcharColumnDefBuilder;\n \n public class MakeUuidColumnsNotNullOnProjects extends DdlChange {\n \n   private static final String TABLE_PROJECTS = \"projects\";\n-  private static final int UUID_VARCHAR_SIZE = 50;\n \n   public MakeUuidColumnsNotNullOnProjects(Database db) {\n     super(db);"
    },
    {
        "commit_id": "5f682d84a007b0abe561f63678bef61e8744ca24",
        "commit_message": "Fix Quality flaws in DB migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f682d84a007b0abe561f63678bef61e8744ca24",
        "buggy_code": "private Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {",
        "fixed_code": "private static Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {",
        "patch": "@@ -44,7 +44,7 @@ public void execute(Context context) throws SQLException {\n     populateUuidColumns(context, componentUuidById);\n   }\n \n-  private Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {\n+  private static Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {\n     Map<Long, String> componentUuidById = new HashMap<>();\n     context.prepareSelect(\"select distinct p.id, p.uuid from projects p\" +\n       \" join resource_index ri1 on ri1.resource_id = p.id and ri1.component_uuid is null\")"
    },
    {
        "commit_id": "5f682d84a007b0abe561f63678bef61e8744ca24",
        "commit_message": "Fix Quality flaws in DB migrations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f682d84a007b0abe561f63678bef61e8744ca24",
        "buggy_code": "private Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {",
        "fixed_code": "private static Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {",
        "patch": "@@ -44,7 +44,7 @@ public void execute(Context context) throws SQLException {\n     populateUuidColumns(context, componentUuidById);\n   }\n \n-  private Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {\n+  private static Map<Long, String> buildComponentUuidMap(Context context) throws SQLException {\n     Map<Long, String> componentUuidById = new HashMap<>();\n     context.prepareSelect(\"select distinct p.id, p.uuid from projects p\" +\n       \" join snapshots sn1 on sn1.project_id = p.id and sn1.component_uuid is null\")"
    },
    {
        "commit_id": "e0326c65ce7174157dc47c00f26b5e50e93b1883",
        "commit_message": "Fix Quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0326c65ce7174157dc47c00f26b5e50e93b1883",
        "buggy_code": "private void initBootstrap() {",
        "fixed_code": "private static void initBootstrap() {",
        "patch": "@@ -50,7 +50,7 @@ public void start() {\n   }\n \n   // copied from https://github.com/elastic/elasticsearch/blob/v2.3.3/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java\n-  private void initBootstrap() {\n+  private static void initBootstrap() {\n     // init lucene random seed. it will use /dev/urandom where available:\n     StringHelper.randomId();\n   }"
    },
    {
        "commit_id": "5e3dfec6ae098a1396ab537a990c2be4e6927b47",
        "commit_message": "Fix and add tests, fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e3dfec6ae098a1396ab537a990c2be4e6927b47",
        "buggy_code": "assertThat(underTest.doGetPattern().matches(\"/styles/style.css\")).isFalse();",
        "fixed_code": "assertThat(underTest.doGetPattern().matches(\"/js/jquery.js\")).isFalse();",
        "patch": "@@ -59,7 +59,7 @@ public void do_get_pattern() throws Exception {\n     assertThat(underTest.doGetPattern().matches(\"/css/style.css\")).isFalse();\n     assertThat(underTest.doGetPattern().matches(\"/fonts/font.ttf\")).isFalse();\n     assertThat(underTest.doGetPattern().matches(\"/images/logo.png\")).isFalse();\n-    assertThat(underTest.doGetPattern().matches(\"/styles/style.css\")).isFalse();\n+    assertThat(underTest.doGetPattern().matches(\"/js/jquery.js\")).isFalse();\n   }\n \n   @Test"
    },
    {
        "commit_id": "33eabf9e209888af7a96204ae8f62f316eada733",
        "commit_message": "fix MyAccountPageTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/33eabf9e209888af7a96204ae8f62f316eada733",
        "buggy_code": "SonarScanner build = SonarScanner.create(projectDir(\"qualityGate/xoo-sample\"))",
        "fixed_code": "SonarScanner build = SonarScanner.create(projectDir(\"qualitygate/xoo-sample\"))",
        "patch": "@@ -114,7 +114,7 @@ private static void deactivateUser(String login) {\n   }\n \n   private static void analyzeProject(String projectKey) {\n-    SonarScanner build = SonarScanner.create(projectDir(\"qualityGate/xoo-sample\"))\n+    SonarScanner build = SonarScanner.create(projectDir(\"qualitygate/xoo-sample\"))\n       .setProjectKey(projectKey)\n       .setProperty(\"sonar.projectDescription\", \"Description of a project\")\n       .setProperty(\"sonar.links.homepage\", \"http://example.com\");"
    },
    {
        "commit_id": "f48fce0b1f266ecd06bf25f79954b3a2fef923f8",
        "commit_message": "Fix IT - WS api/permissions/search_templates returns all project permissions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f48fce0b1f266ecd06bf25f79954b3a2fef923f8",
        "buggy_code": "public static final List<String> ALL = ImmutableList.of(UserRole.USER, UserRole.ADMIN, UserRole.ISSUE_ADMIN, UserRole.CODEVIEWER, GlobalPermissions.SCAN_EXECUTION);",
        "fixed_code": "public static final List<String> ALL = ImmutableList.of(UserRole.ADMIN,  UserRole.CODEVIEWER, UserRole.ISSUE_ADMIN, GlobalPermissions.SCAN_EXECUTION, UserRole.USER);",
        "patch": "@@ -33,7 +33,7 @@ public final class ProjectPermissions {\n   /**\n    * All the component permissions values, ordered from {@link UserRole#USER} to {@link GlobalPermissions#SCAN_EXECUTION}.\n    */\n-  public static final List<String> ALL = ImmutableList.of(UserRole.USER, UserRole.ADMIN, UserRole.ISSUE_ADMIN, UserRole.CODEVIEWER, GlobalPermissions.SCAN_EXECUTION);\n+  public static final List<String> ALL = ImmutableList.of(UserRole.ADMIN,  UserRole.CODEVIEWER, UserRole.ISSUE_ADMIN, GlobalPermissions.SCAN_EXECUTION, UserRole.USER);\n \n   public static final String ALL_ON_ONE_LINE = Joiner.on(\", \").join(ProjectPermissions.ALL);\n "
    },
    {
        "commit_id": "5644de7a52f856649a283ae1c31eea463d4e25bd",
        "commit_message": "SONAR-7724 WS api/permissions/remove_project_creator_from_template fix WS key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5644de7a52f856649a283ae1c31eea463d4e25bd",
        "buggy_code": "WebService.NewAction action = context.createAction(\"remove_project_creator_to_template\")",
        "fixed_code": "WebService.NewAction action = context.createAction(\"remove_project_creator_from_template\")",
        "patch": "@@ -59,7 +59,7 @@ public RemoveProjectCreatorFromTemplateAction(DbClient dbClient, PermissionDepen\n \n   @Override\n   public void define(WebService.NewController context) {\n-    WebService.NewAction action = context.createAction(\"remove_project_creator_to_template\")\n+    WebService.NewAction action = context.createAction(\"remove_project_creator_from_template\")\n       .setDescription(\"Remove a project creator from a permission template.<br>\" +\n         \"Requires the 'Administer' permission.\")\n       .setSince(\"6.0\")"
    },
    {
        "commit_id": "5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "commit_message": "fix quality flaw: use method references in DAO rather than lamdba",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "buggy_code": "return executeLargeInputs(snapshotIds, (input) -> mapper(dbSession).selectByIds(input));",
        "fixed_code": "return executeLargeInputs(snapshotIds, mapper(dbSession)::selectByIds);",
        "patch": "@@ -55,7 +55,7 @@ public SnapshotDto selectOrFailById(DbSession session, long id) {\n   }\n \n   public List<SnapshotDto> selectByIds(DbSession dbSession, List<Long> snapshotIds) {\n-    return executeLargeInputs(snapshotIds, (input) -> mapper(dbSession).selectByIds(input));\n+    return executeLargeInputs(snapshotIds, mapper(dbSession)::selectByIds);\n   }\n \n   @CheckForNull"
    },
    {
        "commit_id": "5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "commit_message": "fix quality flaw: use method references in DAO rather than lamdba",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "buggy_code": "return executeLargeInputs(keys, partitionOfKeys -> mapper(session).selectByKeys(partitionOfKeys));",
        "fixed_code": "return executeLargeInputs(keys, mapper(session)::selectByKeys);",
        "patch": "@@ -76,7 +76,7 @@ public IssueDto selectOrFailByKey(DbSession session, String key) {\n    * <p>Results may be in a different order as input keys (see {@link #selectByOrderedKeys(DbSession, List)}).</p>\n    */\n   public List<IssueDto> selectByKeys(final DbSession session, List<String> keys) {\n-    return executeLargeInputs(keys, partitionOfKeys -> mapper(session).selectByKeys(partitionOfKeys));\n+    return executeLargeInputs(keys, mapper(session)::selectByKeys);\n   }\n \n   /**"
    },
    {
        "commit_id": "5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "commit_message": "fix quality flaw: use method references in DAO rather than lamdba",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "buggy_code": "return executeLargeInputs(languageKeys, input -> mapper(session).selectDefaultProfiles(input));",
        "fixed_code": "return executeLargeInputs(languageKeys, mapper(session)::selectDefaultProfiles);",
        "patch": "@@ -173,7 +173,7 @@ public List<QualityProfileDto> selectAll() {\n \n   @CheckForNull\n   public List<QualityProfileDto> selectDefaultProfiles(DbSession session, Collection<String> languageKeys) {\n-    return executeLargeInputs(languageKeys, input -> mapper(session).selectDefaultProfiles(input));\n+    return executeLargeInputs(languageKeys, mapper(session)::selectDefaultProfiles);\n   }\n \n   @CheckForNull"
    },
    {
        "commit_id": "5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "commit_message": "fix quality flaw: use method references in DAO rather than lamdba",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "buggy_code": "return executeLargeInputs(developerUuids, partition -> getMapper(session).selectScmAccountsByDeveloperUuids(partition));",
        "fixed_code": "return executeLargeInputs(developerUuids, getMapper(session)::selectScmAccountsByDeveloperUuids);",
        "patch": "@@ -53,7 +53,7 @@ public void insertAuthor(DbSession session, String login, long personId) {\n   }\n \n   public List<String> selectScmAccountsByDeveloperUuids(final DbSession session, Collection<String> developerUuids) {\n-    return executeLargeInputs(developerUuids, partition -> getMapper(session).selectScmAccountsByDeveloperUuids(partition));\n+    return executeLargeInputs(developerUuids, getMapper(session)::selectScmAccountsByDeveloperUuids);\n   }\n \n   private static AuthorMapper getMapper(SqlSession session) {"
    },
    {
        "commit_id": "5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "commit_message": "fix quality flaw: use method references in DAO rather than lamdba",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ea219961b0b8cf1c06616ffdfd8c0ff88bd6be9",
        "buggy_code": "return executeLargeInputs(names, partitionOfNames -> mapper(session).selectByNames(partitionOfNames));",
        "fixed_code": "return executeLargeInputs(names, mapper(session)::selectByNames);",
        "patch": "@@ -58,7 +58,7 @@ public GroupDto selectByName(DbSession session, String key) {\n   }\n \n   public List<GroupDto> selectByNames(DbSession session, Collection<String> names) {\n-    return executeLargeInputs(names, partitionOfNames -> mapper(session).selectByNames(partitionOfNames));\n+    return executeLargeInputs(names, mapper(session)::selectByNames);\n   }\n \n   public GroupDto selectOrFailById(DbSession dbSession, long groupId) {"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": "String.format(\"-Xms%dm -Xmx%dm -XX:+HeapDumpOnOutOfMemoryError -XX:MaxPermSize=160m -Djava.awt.headless=true\", MAX_HEAP_SIZE_IN_MEGA, MAX_HEAP_SIZE_IN_MEGA))",
        "fixed_code": "String.format(\"-Xms%dm -Xmx%dm -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true\", MAX_HEAP_SIZE_IN_MEGA, MAX_HEAP_SIZE_IN_MEGA))",
        "patch": "@@ -48,7 +48,7 @@ public class ComputationTest extends PerfTestCase {\n     .addPlugin(FileLocation.byWildcardMavenFilename(new File(\"../../plugins/sonar-xoo-plugin/target\"), \"sonar-xoo-plugin-*.jar\"))\n     .setServerProperty(\n       \"sonar.web.javaOpts\",\n-      String.format(\"-Xms%dm -Xmx%dm -XX:+HeapDumpOnOutOfMemoryError -XX:MaxPermSize=160m -Djava.awt.headless=true\", MAX_HEAP_SIZE_IN_MEGA, MAX_HEAP_SIZE_IN_MEGA))\n+      String.format(\"-Xms%dm -Xmx%dm -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true\", MAX_HEAP_SIZE_IN_MEGA, MAX_HEAP_SIZE_IN_MEGA))\n     .setServerProperty(\"sonar.log.level\", \"DEBUG\")\n     .restoreProfileAtStartup(FileLocation.ofClasspath(\"/one-xoo-issue-per-line.xml\"))\n     .build();"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": ".setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx\" + xmx + \"m -server -XX:MaxPermSize=64m\")",
        "fixed_code": ".setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx\" + xmx + \"m -server\")",
        "patch": "@@ -79,7 +79,7 @@ private void run(int xmx, long expectedDuration) throws IOException {\n         \"sonar.sources\", \"src\",\n         \"sonar.analysis.mode\", \"issues\",\n         \"sonar.showProfiling\", \"true\")\n-      .setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx\" + xmx + \"m -server -XX:MaxPermSize=64m\")\n+      .setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx\" + xmx + \"m -server\")\n       .setProjectDir(baseDir);\n \n     orchestrator.executeBuild(runner);"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": "scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server -XX:MaxPermSize=64m\")",
        "fixed_code": "scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server\")",
        "patch": "@@ -92,7 +92,7 @@ public void computeSyntaxHighlightingOnBigFiles() throws IOException {\n         \"sonar.projectVersion\", \"1.0\",\n         \"sonar.sources\", \"src\",\n         \"sonar.showProfiling\", \"true\");\n-    scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server -XX:MaxPermSize=64m\")\n+    scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server\")\n       .setProjectDir(baseDir);\n \n     BuildResult result = orchestrator.executeBuild(scanner);"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": "\"-Xmx512m -server -XX:MaxPermSize=64m\",",
        "fixed_code": "\"-Xmx512m -server\",",
        "patch": "@@ -59,7 +59,7 @@ public void issues_mode_scan_xoo_project() throws IOException {\n     orchestrator.getServer().provisionProject(\"sample\", \"xoo-sample\");\n     orchestrator.getServer().associateProjectToQualityProfile(\"sample\", \"xoo\", \"one-xoo-issue-per-line\");\n     SonarScanner runner = newScanner(\n-      \"-Xmx512m -server -XX:MaxPermSize=64m\",\n+      \"-Xmx512m -server\",\n       \"sonar.analysis.mode\", \"issues\",\n       \"sonar.userHome\", userHome.getAbsolutePath(),\n       \"sonar.showProfiling\", \"true\");"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": "scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server -XX:MaxPermSize=64m\")",
        "fixed_code": "scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server\")",
        "patch": "@@ -85,7 +85,7 @@ public void analyzeProjectWithManyModulesAndBigProperties() throws IOException {\n         \"sonar.projectVersion\", \"1.0\",\n         \"sonar.sources\", \"\",\n         \"sonar.showProfiling\", \"true\");\n-    scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server -XX:MaxPermSize=64m\")\n+    scanner.setEnvironmentVariable(\"SONAR_RUNNER_OPTS\", \"-Xmx512m -server\")\n       .setProjectDir(baseDir);\n \n     BuildResult result = orchestrator.executeBuild(scanner);"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": ".setServerProperty(\"sonar.web.javaOpts\", \"-Xmx1G -XX:MaxPermSize=100m -XX:+HeapDumpOnOutOfMemoryError\")",
        "fixed_code": ".setServerProperty(\"sonar.web.javaOpts\", \"-Xmx1G -XX:+HeapDumpOnOutOfMemoryError\")",
        "patch": "@@ -45,7 +45,7 @@ public class ScannerPerfTestSuite {\n     .builderEnv()\n     .addPlugin(FileLocation.byWildcardMavenFilename(new File(\"../../plugins/sonar-xoo-plugin/target\"), \"sonar-xoo-plugin-*.jar\"))\n     // should not be so high, but required as long embedded h2 is used -> requires more memory on server\n-    .setServerProperty(\"sonar.web.javaOpts\", \"-Xmx1G -XX:MaxPermSize=100m -XX:+HeapDumpOnOutOfMemoryError\")\n+    .setServerProperty(\"sonar.web.javaOpts\", \"-Xmx1G -XX:+HeapDumpOnOutOfMemoryError\")\n     // Needed by DuplicationTest::hugeJavaFile\n     .setOrchestratorProperty(\"javaVersion\", \"LATEST_RELEASE\").addPlugin(\"java\")\n     .restoreProfileAtStartup(FileLocation.ofClasspath(\"/one-xoo-issue-per-line.xml\"))"
    },
    {
        "commit_id": "b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  SONAR-7652 fix connection to SQL Azure\n  Upgrade version of java 8 on Travis\n  SONAR-7653 remove useless code\n  SONAR-7653 remove Java option XX:MaxPermSize\n  SONAR-7587 end of support of Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d1599fdce122e247d8bb85ee0daa672616b4db",
        "buggy_code": "String defaultWebJavaOptions = \"-Xmx768m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.management.enabled=false\";",
        "fixed_code": "String defaultWebJavaOptions = \"-Xmx768m -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.management.enabled=false\";",
        "patch": "@@ -40,7 +40,7 @@ public class ServerTest extends PerfTestCase {\n   // ES + TOMCAT\n   @Test\n   public void server_startup_and_shutdown() throws Exception {\n-    String defaultWebJavaOptions = \"-Xmx768m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.management.enabled=false\";\n+    String defaultWebJavaOptions = \"-Xmx768m -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.management.enabled=false\";\n     Orchestrator orchestrator = Orchestrator.builderEnv()\n       .setOrchestratorProperty(\"javaVersion\", \"LATEST_RELEASE\")\n       .addPlugin(\"java\")"
    },
    {
        "commit_id": "dd67aa0a7459397e50a45712667687453f61750e",
        "commit_message": "Automatic merge from branch-5.6\n\n* origin/branch-5.6:\n  Fix version of Oracle driver for QA\n  Fix timeout of server startup perf test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd67aa0a7459397e50a45712667687453f61750e",
        "buggy_code": "assertDurationLessThan(stopDate - firstStopLogDate, 10000);",
        "fixed_code": "assertDurationLessThan(stopDate - firstStopLogDate, 10_000);",
        "patch": "@@ -66,7 +66,7 @@ public void server_startup_and_shutdown() throws Exception {\n       List<String> lines = readLogLines(orchestrator);\n       long firstStopLogDate = ServerLogs.extractFirstDate(lines).getTime();\n       long stopDate = extractStopDate(lines);\n-      assertDurationLessThan(stopDate - firstStopLogDate, 10000);\n+      assertDurationLessThan(stopDate - firstStopLogDate, 10_000);\n \n     } finally {\n       orchestrator.stop();"
    },
    {
        "commit_id": "0b19ba736ef4e9132729c3043e7a783c2b0f22e8",
        "commit_message": "Fix timeout of server startup perf test\n\nFaster thanks to the move to Java 8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0b19ba736ef4e9132729c3043e7a783c2b0f22e8",
        "buggy_code": "assertDurationAround(startedAtDate - firstLogDate, 45000);",
        "fixed_code": "assertDurationAround(startedAtDate - firstLogDate, 38_000);",
        "patch": "@@ -58,7 +58,7 @@ public void server_startup_and_shutdown() throws Exception {\n       // compare dates of first and last log\n       long firstLogDate = ServerLogs.extractFirstDate(readLogLines(orchestrator)).getTime();\n       long startedAtDate = extractStartedAtDate(orchestrator);\n-      assertDurationAround(startedAtDate - firstLogDate, 45000);\n+      assertDurationAround(startedAtDate - firstLogDate, 38_000);\n \n       ServerLogs.clear(orchestrator);\n       orchestrator.stop();"
    },
    {
        "commit_id": "824de62e3f9622fd71d1b278e56b769ce2a70bac",
        "commit_message": "Fix perf test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/824de62e3f9622fd71d1b278e56b769ce2a70bac",
        "buggy_code": "perfRule.assertDurationAround(duration, 4200L);",
        "fixed_code": "perfRule.assertDurationAround(duration, 3600L);",
        "patch": "@@ -68,6 +68,6 @@ public void issues_mode_scan_xoo_project() throws IOException {\n     long duration = System.currentTimeMillis() - start;\n     System.out.println(\"Issues analysis: \" + duration + \"ms\");\n \n-    perfRule.assertDurationAround(duration, 4200L);\n+    perfRule.assertDurationAround(duration, 3600L);\n   }\n }"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -35,7 +35,7 @@\n import org.sonarqube.ws.WsComponents.ShowWsResponse;\n import org.sonarqube.ws.client.component.ShowWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static java.lang.String.format;\n import static java.util.Collections.emptyList;\n import static org.sonar.core.util.Uuids.UUID_EXAMPLE_01;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -51,7 +51,7 @@\n import org.sonarqube.ws.WsComponents.TreeWsResponse;\n import org.sonarqube.ws.client.component.TreeWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.collect.FluentIterable.from;\n import static com.google.common.collect.Sets.newHashSet;\n import static java.lang.String.format;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.db.metric.MetricDto;\n import org.sonar.server.computation.measure.Measure;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n \n enum MetricDtoToMetric implements Function<MetricDto, Metric> {\n   INSTANCE;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.db.issue.IssueFilterDto;\n import org.sonar.server.user.UserSession;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n \n class IssueFilterJsonWriter {\n "
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -54,7 +54,7 @@\n import org.sonarqube.ws.WsMeasures.ComponentWsResponse;\n import org.sonarqube.ws.client.measure.ComponentWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.collect.FluentIterable.from;\n import static java.lang.String.format;\n import static java.util.Collections.emptyList;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -59,7 +59,7 @@\n import org.sonarqube.ws.WsMeasures;\n import org.sonarqube.ws.client.measure.ComponentTreeWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.collect.FluentIterable.from;\n import static com.google.common.collect.Lists.newArrayList;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -39,7 +39,7 @@\n import org.sonarqube.ws.WsPermissions.WsGroupsResponse;\n import org.sonarqube.ws.client.permission.GroupsWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static org.sonar.server.permission.PermissionPrivilegeChecker.checkProjectAdminUserByComponentDto;\n import static org.sonar.server.permission.ws.PermissionQueryParser.fromSelectionModeToMembership;\n import static org.sonar.server.permission.ws.PermissionRequestValidator.validateGlobalPermission;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.api.utils.Paging;\n import org.sonar.db.component.ComponentDto;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.collect.ImmutableList.copyOf;\n import static com.google.common.collect.ImmutableTable.copyOf;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonarqube.ws.WsPermissions.UsersWsResponse;\n import org.sonarqube.ws.client.permission.UsersWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Strings.nullToEmpty;\n import static org.sonar.api.utils.Paging.forPageIndex;\n import static org.sonar.server.permission.PermissionPrivilegeChecker.checkProjectAdminUserByComponentDto;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.db.permission.PermissionTemplateDto;\n import org.sonar.server.permission.ws.template.DefaultPermissionTemplateFinder.TemplateUuidQualifier;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.collect.ImmutableList.copyOf;\n import static com.google.common.collect.ImmutableTable.copyOf;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -36,7 +36,7 @@\n import org.sonarqube.ws.WsPermissions.UpdateTemplateWsResponse;\n import org.sonarqube.ws.client.permission.UpdateTemplateWsRequest;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static java.lang.String.format;\n import static org.sonar.server.permission.PermissionPrivilegeChecker.checkGlobalAdminUser;\n import static org.sonar.server.permission.ws.PermissionRequestValidator.MSG_TEMPLATE_WITH_SAME_NAME;"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.Map;\n import org.sonar.server.qualityprofile.QProfile;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.collect.ImmutableList.copyOf;\n import static com.google.common.collect.ImmutableMap.copyOf;\n "
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -40,7 +40,7 @@\n import org.sonar.server.user.index.UserDoc;\n import org.sonar.server.user.index.UserIndex;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static org.sonar.server.es.SearchOptions.MAX_LIMIT;\n \n public class SearchAction implements UsersWsAction {"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.api.server.ws.internal.ValidatingRequest;\n import org.sonarqube.ws.MediaTypes;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static org.apache.commons.lang.StringUtils.substringAfterLast;\n \n public class ServletRequest extends ValidatingRequest {"
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -25,7 +25,7 @@\n import javax.annotation.Nullable;\n import org.apache.commons.lang.StringUtils;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n "
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -25,7 +25,7 @@\n import javax.annotation.Nullable;\n import org.apache.commons.lang.StringUtils;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n "
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.api.ce.ComputeEngineSide;\n import org.sonar.api.server.ServerSide;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkArgument;\n import static org.apache.commons.lang.StringUtils.isNotBlank;\n "
    },
    {
        "commit_id": "b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b52ebbfbae34bae19438b0dc30782677575bb8f3",
        "buggy_code": "import static com.google.common.base.Objects.firstNonNull;",
        "fixed_code": "import static com.google.common.base.MoreObjects.firstNonNull;",
        "patch": "@@ -27,7 +27,7 @@\n \n import java.util.List;\n \n-import static com.google.common.base.Objects.firstNonNull;\n+import static com.google.common.base.MoreObjects.firstNonNull;\n \n @BatchSide\n public abstract class AbstractPatternInitializer {"
    },
    {
        "commit_id": "f15f2fb8ac99079234984bf4e6ccfe5d4028be01",
        "commit_message": "Fix perf test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f15f2fb8ac99079234984bf4e6ccfe5d4028be01",
        "buggy_code": "perfRule.assertDurationAround(duration, 4200L);",
        "fixed_code": "perfRule.assertDurationAround(duration, 3600L);",
        "patch": "@@ -68,6 +68,6 @@ public void issues_mode_scan_xoo_project() throws IOException {\n     long duration = System.currentTimeMillis() - start;\n     System.out.println(\"Issues analysis: \" + duration + \"ms\");\n \n-    perfRule.assertDurationAround(duration, 4200L);\n+    perfRule.assertDurationAround(duration, 3600L);\n   }\n }"
    },
    {
        "commit_id": "363588ba0d89ce2449a6d93f739cadf86e30618b",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/363588ba0d89ce2449a6d93f739cadf86e30618b",
        "buggy_code": "private void validateCondition(Metric metric, String operator, @Nullable String warningThreshold, @Nullable String errorThreshold, @Nullable Integer period) {",
        "fixed_code": "private static void validateCondition(Metric metric, String operator, @Nullable String warningThreshold, @Nullable String errorThreshold, @Nullable Integer period) {",
        "patch": "@@ -277,7 +277,7 @@ private Collection<QualityGateConditionDto> getConditions(long qGateId, @Nullabl\n     return from(conditionDao.selectForQualityGate(qGateId)).filter(new MatchConditionId(conditionId)).toList();\n   }\n \n-  private void validateCondition(Metric metric, String operator, @Nullable String warningThreshold, @Nullable String errorThreshold, @Nullable Integer period) {\n+  private static void validateCondition(Metric metric, String operator, @Nullable String warningThreshold, @Nullable String errorThreshold, @Nullable Integer period) {\n     Errors errors = new Errors();\n     validateMetric(metric, errors);\n     checkOperator(metric, operator, errors);"
    },
    {
        "commit_id": "f4dce455f68336247653f0a19b346dde105bce37",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4dce455f68336247653f0a19b346dde105bce37",
        "buggy_code": "private void aggregateToParent(Path<FormulaExecutorComponentVisitor.Counters> path, Formula formula, Counter currentCounter) {",
        "fixed_code": "private static void aggregateToParent(Path<FormulaExecutorComponentVisitor.Counters> path, Formula formula, Counter currentCounter) {",
        "patch": "@@ -182,7 +182,7 @@ private void addNewMeasure(Component component, String metricKey, Formula formul\n     }\n   }\n \n-  private void aggregateToParent(Path<FormulaExecutorComponentVisitor.Counters> path, Formula formula, Counter currentCounter) {\n+  private static void aggregateToParent(Path<FormulaExecutorComponentVisitor.Counters> path, Formula formula, Counter currentCounter) {\n     if (!path.isRoot()) {\n       path.parent().aggregate(formula, currentCounter);\n     }"
    },
    {
        "commit_id": "f4dce455f68336247653f0a19b346dde105bce37",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4dce455f68336247653f0a19b346dde105bce37",
        "buggy_code": "private AuthorMapper getMapper(SqlSession session) {",
        "fixed_code": "private static AuthorMapper getMapper(SqlSession session) {",
        "patch": "@@ -61,7 +61,7 @@ public List<String> apply(List<String> partition) {\n     });\n   }\n \n-  private AuthorMapper getMapper(SqlSession session) {\n+  private static AuthorMapper getMapper(SqlSession session) {\n     return session.getMapper(AuthorMapper.class);\n   }\n }"
    },
    {
        "commit_id": "eb1a9511b030194ad70db239fadd087ee9f7bb62",
        "commit_message": "Fix minor quality flaw in FileCache",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb1a9511b030194ad70db239fadd087ee9f7bb62",
        "buggy_code": "private void download(Downloader downloader, String filename, File tempFile) {",
        "fixed_code": "private static void download(Downloader downloader, String filename, File tempFile) {",
        "patch": "@@ -91,7 +91,7 @@ public File get(String filename, String hash, Downloader downloader) {\n     return targetFile;\n   }\n \n-  private void download(Downloader downloader, String filename, File tempFile) {\n+  private static void download(Downloader downloader, String filename, File tempFile) {\n     try {\n       downloader.download(filename, tempFile);\n     } catch (IOException e) {"
    },
    {
        "commit_id": "50bd94942ebec16d01446de78145b54bd4596d0f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50bd94942ebec16d01446de78145b54bd4596d0f",
        "buggy_code": "private CoverageType(Metric linesToCover, Metric uncoveredLines, Metric lineHitsData, Metric conditionsToCover, Metric uncoveredConditions, Metric coveredConditionsByLine,",
        "fixed_code": "CoverageType(Metric linesToCover, Metric uncoveredLines, Metric lineHitsData, Metric conditionsToCover, Metric uncoveredConditions, Metric coveredConditionsByLine,",
        "patch": "@@ -65,7 +65,7 @@ public enum CoverageType {\n   private final Metric conditionsByLine;\n   private final Set<Metric> all;\n \n-  private CoverageType(Metric linesToCover, Metric uncoveredLines, Metric lineHitsData, Metric conditionsToCover, Metric uncoveredConditions, Metric coveredConditionsByLine,\n+  CoverageType(Metric linesToCover, Metric uncoveredLines, Metric lineHitsData, Metric conditionsToCover, Metric uncoveredConditions, Metric coveredConditionsByLine,\n     Metric conditionsByLine) {\n     this.linesToCover = linesToCover;\n     this.uncoveredLines = uncoveredLines;"
    },
    {
        "commit_id": "50bd94942ebec16d01446de78145b54bd4596d0f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50bd94942ebec16d01446de78145b54bd4596d0f",
        "buggy_code": "private TypeOfText(String cssClass) {",
        "fixed_code": "TypeOfText(String cssClass) {",
        "patch": "@@ -45,7 +45,7 @@ public enum TypeOfText {\n \n   private final String cssClass;\n \n-  private TypeOfText(String cssClass) {\n+  TypeOfText(String cssClass) {\n     this.cssClass = cssClass;\n   }\n "
    },
    {
        "commit_id": "50bd94942ebec16d01446de78145b54bd4596d0f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50bd94942ebec16d01446de78145b54bd4596d0f",
        "buggy_code": "private FileType(String typeValue) {",
        "fixed_code": "FileType(String typeValue) {",
        "patch": "@@ -29,7 +29,7 @@ public enum FileType {\n \n   private String typeValue;\n \n-  private FileType(String typeValue) {\n+  FileType(String typeValue) {\n     this.typeValue = typeValue;\n   }\n "
    },
    {
        "commit_id": "50bd94942ebec16d01446de78145b54bd4596d0f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50bd94942ebec16d01446de78145b54bd4596d0f",
        "buggy_code": "private Phase(String label) {",
        "fixed_code": "Phase(String label) {",
        "patch": "@@ -25,7 +25,7 @@ public enum Phase {\n \n   private final String label;\n \n-  private Phase(String label) {\n+  Phase(String label) {\n     this.label = label;\n   }\n "
    },
    {
        "commit_id": "ecd8c71b84b8691dd9c1d40f349f5b11a35c28cf",
        "commit_message": "SONAR-7493 fix size of ISSUES.MESSAGE col on Orale\n\nThe length of this VARCHAR(4000) depends on runtime\n(4000 bytes or 4000 chars) as unit is not enforced\nduring creation of column",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ecd8c71b84b8691dd9c1d40f349f5b11a35c28cf",
        "buggy_code": "public static final int LAST_VERSION = 1150;",
        "fixed_code": "public static final int LAST_VERSION = 1_151;",
        "patch": "@@ -30,7 +30,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 1150;\n+  public static final int LAST_VERSION = 1_151;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "64fa9230e6346dd4bacb1855705630e877fd9f17",
        "commit_message": "SONAR-7150 Fix IT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/64fa9230e6346dd4bacb1855705630e877fd9f17",
        "buggy_code": "assertThat(project.getMeasureIntValue(\"directories\")).isEqualTo(3);",
        "fixed_code": "assertThat(project.getMeasureIntValue(\"directories\")).isEqualTo(2);",
        "patch": "@@ -161,7 +161,7 @@ public void should_support_source_files_with_same_deprecated_key() {\n     Resource project = sonar.find(new ResourceQuery(\"com.sonarsource.it.projects.batch:duplicate-source\").setMetrics(\"files\", \"directories\"));\n     // 2 main files and 1 test file all with same deprecated key\n     assertThat(project.getMeasureIntValue(\"files\")).isEqualTo(2);\n-    assertThat(project.getMeasureIntValue(\"directories\")).isEqualTo(3);\n+    assertThat(project.getMeasureIntValue(\"directories\")).isEqualTo(2);\n   }\n \n   /**"
    },
    {
        "commit_id": "af746806513116025cfea334ad2debfa0f5c34e2",
        "commit_message": "SONAR-7594 fix indexing of component names > 400 characters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/af746806513116025cfea334ad2debfa0f5c34e2",
        "buggy_code": "dto.setKey(substring(key, position, MAXIMUM_KEY_SIZE));",
        "fixed_code": "dto.setKey(substring(key, position, position + MAXIMUM_KEY_SIZE));",
        "patch": "@@ -202,7 +202,7 @@ private static void insertIndexEntries(String key, long resourceId, String quali\n     int maxPosition = key.length() == SINGLE_INDEX_SIZE ? 0 : key.length() - MINIMUM_KEY_SIZE;\n     for (int position = 0; position <= maxPosition; position++) {\n       dto.setPosition(position);\n-      dto.setKey(substring(key, position, MAXIMUM_KEY_SIZE));\n+      dto.setKey(substring(key, position, position + MAXIMUM_KEY_SIZE));\n       mapper.insert(dto);\n     }\n   }"
    },
    {
        "commit_id": "af746806513116025cfea334ad2debfa0f5c34e2",
        "commit_message": "SONAR-7594 fix indexing of component names > 400 characters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/af746806513116025cfea334ad2debfa0f5c34e2",
        "buggy_code": "ComponentDto project = new ComponentDto().setId(1L).setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);",
        "fixed_code": "ComponentDto project = new ComponentDto().setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);",
        "patch": "@@ -158,7 +158,7 @@ public void select_project_ids_from_query_and_view_or_sub_view_uuid() {\n   @Test\n   public void restrict_indexed_combinations_to_400_characters() {\n     String longName = repeat(\"a\", 2_000);\n-    ComponentDto project = new ComponentDto().setId(1L).setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);\n+    ComponentDto project = new ComponentDto().setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);\n     DbSession session = dbTester.getSession();\n     dbTester.getDbClient().componentDao().insert(session, project);\n     dbTester.getDbClient().snapshotDao().insert(session, new SnapshotDto().setComponentId(project.getId()).setRootProjectId(project.getId()).setLast(true));"
    },
    {
        "commit_id": "4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "buggy_code": "private Operator(String code, String sql) {",
        "fixed_code": "Operator(String code, String sql) {",
        "patch": "@@ -30,7 +30,7 @@ public enum Operator {\n     private String code;\n     private String sql;\n \n-    private Operator(String code, String sql) {\n+    Operator(String code, String sql) {\n       this.code = code;\n       this.sql = sql;\n     }"
    },
    {
        "commit_id": "4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "buggy_code": "private SelectionMode(String paramValue) {",
        "fixed_code": "SelectionMode(String paramValue) {",
        "patch": "@@ -694,7 +694,7 @@ public String apply(@Nonnull SelectionMode input) {\n       }\n     });\n \n-    private SelectionMode(String paramValue) {\n+    SelectionMode(String paramValue) {\n       this.paramValue = paramValue;\n     }\n "
    },
    {
        "commit_id": "4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4fc0e09a6029affb5cb5f526387aba12e99065c4",
        "buggy_code": "private DashboardLayout(String code, int columns) {",
        "fixed_code": "DashboardLayout(String code, int columns) {",
        "patch": "@@ -54,7 +54,7 @@ public enum DashboardLayout {\n   private String code;\n   private int columns;\n \n-  private DashboardLayout(String code, int columns) {\n+  DashboardLayout(String code, int columns) {\n     this.code = code;\n     this.columns = columns;\n   }"
    },
    {
        "commit_id": "8d6a28337cf53115c0f08accc7cfe404ff432108",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d6a28337cf53115c0f08accc7cfe404ff432108",
        "buggy_code": "if ((request.getDeveloperId() == null && request.getDeveloperKey() == null)) {",
        "fixed_code": "if (request.getDeveloperId() == null && request.getDeveloperKey() == null) {",
        "patch": "@@ -148,7 +148,7 @@ private ComponentWsResponse doHandle(ComponentWsRequest request) {\n \n   @CheckForNull\n   private Long searchDeveloperId(DbSession dbSession, ComponentWsRequest request) {\n-    if ((request.getDeveloperId() == null && request.getDeveloperKey() == null)) {\n+    if (request.getDeveloperId() == null && request.getDeveloperKey() == null) {\n       return null;\n     }\n "
    },
    {
        "commit_id": "8d6a28337cf53115c0f08accc7cfe404ff432108",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d6a28337cf53115c0f08accc7cfe404ff432108",
        "buggy_code": "private QualityGateConditionMapper mapper(SqlSession session) {",
        "fixed_code": "private static QualityGateConditionMapper mapper(SqlSession session) {",
        "patch": "@@ -118,7 +118,7 @@ public void deleteConditionsWithInvalidMetrics(SqlSession session) {\n     mapper(session).deleteConditionsWithInvalidMetrics();\n   }\n \n-  private QualityGateConditionMapper mapper(SqlSession session) {\n+  private static QualityGateConditionMapper mapper(SqlSession session) {\n     return session.getMapper(QualityGateConditionMapper.class);\n   }\n }"
    },
    {
        "commit_id": "0b15488f6fa67be2c5f6ae626cab8c129b588769",
        "commit_message": "Fix overzealous condition",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0b15488f6fa67be2c5f6ae626cab8c129b588769",
        "buggy_code": "if (exc != null && exc instanceof FileSystemLoopException) {",
        "fixed_code": "if (exc instanceof FileSystemLoopException) {",
        "patch": "@@ -225,7 +225,7 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n \n     @Override\n     public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n-      if (exc != null && exc instanceof FileSystemLoopException) {\n+      if (exc instanceof FileSystemLoopException) {\n         LOG.warn(\"Not indexing due to symlink loop: {}\", file.toFile());\n         return FileVisitResult.CONTINUE;\n       }"
    },
    {
        "commit_id": "d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  Fix malformed javadoc in API\n  Add UserDao.selectByIds\n  SONAR-6948 rename method Request#getLocalConnector() to localConnector()\n  SONAR-6948 add javadoc for org.sonar.api.server.ws.LocalConnector",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "buggy_code": "public LocalConnector getLocalConnector() {",
        "fixed_code": "public LocalConnector localConnector() {",
        "patch": "@@ -82,7 +82,7 @@ public Map<String, String> getParams() {\n   }\n \n   @Override\n-  public LocalConnector getLocalConnector() {\n+  public LocalConnector localConnector() {\n     throw new UnsupportedOperationException();\n   }\n }"
    },
    {
        "commit_id": "d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  Fix malformed javadoc in API\n  Add UserDao.selectByIds\n  SONAR-6948 rename method Request#getLocalConnector() to localConnector()\n  SONAR-6948 add javadoc for org.sonar.api.server.ws.LocalConnector",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "buggy_code": "public LocalConnector getLocalConnector() {",
        "fixed_code": "public LocalConnector localConnector() {",
        "patch": "@@ -53,7 +53,7 @@ public WebService.Action action() {\n   }\n \n   @Override\n-  public LocalConnector getLocalConnector() {\n+  public LocalConnector localConnector() {\n     checkNotNull(localConnector, \"Local connector has not been set\");\n     return localConnector;\n   }"
    },
    {
        "commit_id": "d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  Fix malformed javadoc in API\n  Add UserDao.selectByIds\n  SONAR-6948 rename method Request#getLocalConnector() to localConnector()\n  SONAR-6948 add javadoc for org.sonar.api.server.ws.LocalConnector",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "buggy_code": "LocalConnector getLocalConnector() {",
        "fixed_code": "LocalConnector localConnector() {",
        "patch": "@@ -37,7 +37,7 @@ class LocalWsConnector implements WsConnector {\n   }\n \n   @VisibleForTesting\n-  LocalConnector getLocalConnector() {\n+  LocalConnector localConnector() {\n     return localConnector;\n   }\n "
    },
    {
        "commit_id": "d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  Fix malformed javadoc in API\n  Add UserDao.selectByIds\n  SONAR-6948 rename method Request#getLocalConnector() to localConnector()\n  SONAR-6948 add javadoc for org.sonar.api.server.ws.LocalConnector",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0fd6ac322cab2a2166b7af00d3d1e283f2c7e05",
        "buggy_code": "assertThat(((LocalWsConnector) client.wsConnector()).getLocalConnector()).isSameAs(connector);",
        "fixed_code": "assertThat(((LocalWsConnector) client.wsConnector()).localConnector()).isSameAs(connector);",
        "patch": "@@ -42,6 +42,6 @@ public void create_local_client() {\n \n     assertThat(client).isInstanceOf(DefaultWsClient.class);\n     assertThat(client.wsConnector()).isInstanceOf(LocalWsConnector.class);\n-    assertThat(((LocalWsConnector) client.wsConnector()).getLocalConnector()).isSameAs(connector);\n+    assertThat(((LocalWsConnector) client.wsConnector()).localConnector()).isSameAs(connector);\n   }\n }"
    },
    {
        "commit_id": "8a49482fc8b942ea75ddab4fee58d75a5c6eee9a",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  SONAR-7429 defaults of HTTPS proxy are values of HTTP proxy\n  Add context when failing to map a db measure to a ws measure\n  SONAR-7187 Fix perf issue in selectByQuery\n  Add support of WS api/ce/task to sonar-ws\n  Add partial support of api/projects to sonar-ws\n  SONAR-7427 Remove \"effort_to_reach_reliability_rating_a\" and \"effort_to_reach_security_rating_a\" from js",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8a49482fc8b942ea75ddab4fee58d75a5c6eee9a",
        "buggy_code": "return mapper(dbSession).selectByQuery(query, new RowBounds(offset, pageSize));",
        "fixed_code": "return mapper(dbSession).selectByQuery(query, offset, pageSize);",
        "patch": "@@ -69,7 +69,7 @@ public List<CeActivityDto> selectByQuery(DbSession dbSession, CeTaskQuery query,\n       return Collections.emptyList();\n     }\n \n-    return mapper(dbSession).selectByQuery(query, new RowBounds(offset, pageSize));\n+    return mapper(dbSession).selectByQuery(query, offset, pageSize);\n   }\n \n   public int countByQuery(DbSession dbSession, CeTaskQuery query) {"
    },
    {
        "commit_id": "8a49482fc8b942ea75ddab4fee58d75a5c6eee9a",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  SONAR-7429 defaults of HTTPS proxy are values of HTTP proxy\n  Add context when failing to map a db measure to a ws measure\n  SONAR-7187 Fix perf issue in selectByQuery\n  Add support of WS api/ce/task to sonar-ws\n  Add partial support of api/projects to sonar-ws\n  SONAR-7427 Remove \"effort_to_reach_reliability_rating_a\" and \"effort_to_reach_security_rating_a\" from js",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8a49482fc8b942ea75ddab4fee58d75a5c6eee9a",
        "buggy_code": "List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, RowBounds rowBounds);",
        "fixed_code": "List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, @Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);",
        "patch": "@@ -33,7 +33,7 @@ public interface CeActivityMapper {\n \n   List<CeActivityDto> selectByComponentUuid(@Param(\"componentUuid\") String componentUuid);\n \n-  List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, RowBounds rowBounds);\n+  List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, @Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);\n \n   List<CeActivityDto> selectOlderThan(@Param(\"beforeDate\") long beforeDate);\n "
    },
    {
        "commit_id": "d19b4f0f976a97c6428c8f5fdf7d2c383bf2e760",
        "commit_message": "SONAR-7187 Fix perf issue in selectByQuery\n\nReplace usage of RowBounds by SQL pagination",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d19b4f0f976a97c6428c8f5fdf7d2c383bf2e760",
        "buggy_code": "return mapper(dbSession).selectByQuery(query, new RowBounds(offset, pageSize));",
        "fixed_code": "return mapper(dbSession).selectByQuery(query, offset, pageSize);",
        "patch": "@@ -69,7 +69,7 @@ public List<CeActivityDto> selectByQuery(DbSession dbSession, CeTaskQuery query,\n       return Collections.emptyList();\n     }\n \n-    return mapper(dbSession).selectByQuery(query, new RowBounds(offset, pageSize));\n+    return mapper(dbSession).selectByQuery(query, offset, pageSize);\n   }\n \n   public int countByQuery(DbSession dbSession, CeTaskQuery query) {"
    },
    {
        "commit_id": "d19b4f0f976a97c6428c8f5fdf7d2c383bf2e760",
        "commit_message": "SONAR-7187 Fix perf issue in selectByQuery\n\nReplace usage of RowBounds by SQL pagination",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d19b4f0f976a97c6428c8f5fdf7d2c383bf2e760",
        "buggy_code": "List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, RowBounds rowBounds);",
        "fixed_code": "List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, @Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);",
        "patch": "@@ -33,7 +33,7 @@ public interface CeActivityMapper {\n \n   List<CeActivityDto> selectByComponentUuid(@Param(\"componentUuid\") String componentUuid);\n \n-  List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, RowBounds rowBounds);\n+  List<CeActivityDto> selectByQuery(@Param(\"query\") CeTaskQuery query, @Param(\"offset\") int offset, @Param(\"pageSize\") int pageSize);\n \n   List<CeActivityDto> selectOlderThan(@Param(\"beforeDate\") long beforeDate);\n "
    },
    {
        "commit_id": "54bed58ca48aba47636f8bc025d301e3a8523e6f",
        "commit_message": "Automatic merge from branch-5.5\n\n* origin/branch-5.5:\n  QA: enable deploy on branch-*\n  add l10n names for reliability_rating and security_rating\n  Add PropertiesDao.deleteById\n  SONAR-7533 Hide sonar.login property in analysis.log sent in the scanner report\n  SONAR-7238 do not display identity provider details when it is \"sonarqube\"\n  fix bug which prevents to add a quality gate condition for \"new_\" metric\n  SONAR-7402 clicking on project bubble brings to the project page\n  Fix javadoc errors\n  Exclude protobuf code from SQ analysis\n  Fix some Javadoc warnings\n  Improve javadoc\n  Change return type of Plugin#getSonarQubeVersion()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/54bed58ca48aba47636f8bc025d301e3a8523e6f",
        "buggy_code": "Plugin.Context context = new Plugin.Context(sonarQubeVersion);",
        "fixed_code": "Plugin.Context context = new Plugin.Context(sonarQubeVersion.get());",
        "patch": "@@ -60,7 +60,7 @@ public void installExtensions(ComponentContainer container) {\n         Plugin plugin = pluginRepository.getPluginInstance(pluginKey);\n         container.addExtension(pluginInfo, plugin);\n \n-        Plugin.Context context = new Plugin.Context(sonarQubeVersion);\n+        Plugin.Context context = new Plugin.Context(sonarQubeVersion.get());\n         plugin.define(context);\n         for (Object extension : context.getExtensions()) {\n           if (installExtension(container, pluginInfo, extension, true) != null) {"
    },
    {
        "commit_id": "3b2d595782dca303ed648b818f2810b0e4363de0",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b2d595782dca303ed648b818f2810b0e4363de0",
        "buggy_code": "new TomcatStartupLogs(props, Loggers.get(getClass())).log(tomcat);",
        "fixed_code": "new TomcatStartupLogs(Loggers.get(getClass())).log(tomcat);",
        "patch": "@@ -60,7 +60,7 @@ void start() {\n     webappContext = new TomcatContexts().configure(tomcat, props);\n     try {\n       tomcat.start();\n-      new TomcatStartupLogs(props, Loggers.get(getClass())).log(tomcat);\n+      new TomcatStartupLogs(Loggers.get(getClass())).log(tomcat);\n     } catch (LifecycleException e) {\n       Throwables.propagate(e);\n     }"
    },
    {
        "commit_id": "c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "buggy_code": "Preconditions.checkArgument(RuleType.ALL_NAMES.contains(type), \"Unknown type: %s\", type);",
        "fixed_code": "Preconditions.checkArgument(RuleType.names().contains(type), \"Unknown type: %s\", type);",
        "patch": "@@ -58,7 +58,7 @@ public boolean execute(Map<String, Object> properties, Context context) {\n   private static String newValue(Map<String, Object> properties) {\n     String type = (String) properties.get(TYPE_PARAMETER);\n     Preconditions.checkArgument(!isNullOrEmpty(type), \"Missing parameter: '%s'\", TYPE_PARAMETER);\n-    Preconditions.checkArgument(RuleType.ALL_NAMES.contains(type), \"Unknown type: %s\", type);\n+    Preconditions.checkArgument(RuleType.names().contains(type), \"Unknown type: %s\", type);\n     return type;\n   }\n }"
    },
    {
        "commit_id": "c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "buggy_code": ".setPossibleValues(RuleType.ALL_NAMES)",
        "fixed_code": ".setPossibleValues(RuleType.names())",
        "patch": "@@ -164,7 +164,7 @@ private static void defineBulkChangeAction(NewController controller) {\n     action.createParam(\"set_type.type\")\n       .setDescription(\"To change the type of the list of issues\")\n       .setExampleValue(RuleType.BUG)\n-      .setPossibleValues(RuleType.ALL_NAMES)\n+      .setPossibleValues(RuleType.names())\n       .setSince(\"5.5\");\n     action.createParam(\"plan.plan\")\n       .setDescription(\"In 5.5, action plans are dropped. Has no effect. To plan the list of issues to a specific action plan (key), or unlink all the issues from an action plan\")"
    },
    {
        "commit_id": "c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "buggy_code": "addMandatoryValuesToFacet(facets, TYPES, RuleType.ALL_NAMES);",
        "fixed_code": "addMandatoryValuesToFacet(facets, TYPES, RuleType.names());",
        "patch": "@@ -361,7 +361,7 @@ private void completeFacets(Facets facets, SearchWsRequest request, Request wsRe\n     addMandatoryValuesToFacet(facets, RULES, request.getRules());\n     addMandatoryValuesToFacet(facets, LANGUAGES, request.getLanguages());\n     addMandatoryValuesToFacet(facets, TAGS, request.getTags());\n-    addMandatoryValuesToFacet(facets, TYPES, RuleType.ALL_NAMES);\n+    addMandatoryValuesToFacet(facets, TYPES, RuleType.names());\n     List<String> actionPlans = Lists.newArrayList(\"\");\n     List<String> actionPlansFromRequest = request.getActionPlans();\n     if (actionPlansFromRequest != null) {"
    },
    {
        "commit_id": "c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "buggy_code": ".setPossibleValues(RuleType.ALL_NAMES);",
        "fixed_code": ".setPossibleValues(RuleType.names());",
        "patch": "@@ -53,7 +53,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(\"type\")\n       .setDescription(\"New type\")\n       .setRequired(true)\n-      .setPossibleValues(RuleType.ALL_NAMES);\n+      .setPossibleValues(RuleType.names());\n   }\n \n   @Override"
    },
    {
        "commit_id": "c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7662baa5b3c54e0627f88796728e2e0da1f70fb",
        "buggy_code": "private String convertData(PreparedStatement pstmt, String data) throws SQLException {",
        "fixed_code": "private static String convertData(PreparedStatement pstmt, String data) throws SQLException {",
        "patch": "@@ -82,7 +82,7 @@ public boolean handle(Select.Row row, SqlStatement update) throws SQLException {\n     }\n   }\n \n-  private String convertData(PreparedStatement pstmt, String data) throws SQLException {\n+  private static String convertData(PreparedStatement pstmt, String data) throws SQLException {\n     StringBuilder newFields = new StringBuilder();\n     String[] fields = data.split(\"\\\\|\");\n     for (int i = 0; i < fields.length; i++) {"
    },
    {
        "commit_id": "9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "buggy_code": "private void addAttributeInMb(ProtobufSystemInfo.Section.Builder builder, String key, long valueInBytes) {",
        "fixed_code": "private static void addAttributeInMb(ProtobufSystemInfo.Section.Builder builder, String key, long valueInBytes) {",
        "patch": "@@ -57,7 +57,7 @@ ProtobufSystemInfo.Section toProtobuf(MemoryMXBean memoryBean) {\n     return builder.build();\n   }\n \n-  private void addAttributeInMb(ProtobufSystemInfo.Section.Builder builder, String key, long valueInBytes) {\n+  private static void addAttributeInMb(ProtobufSystemInfo.Section.Builder builder, String key, long valueInBytes) {\n     if (valueInBytes >= 0L) {\n       builder.addAttributesBuilder().setKey(key).setLongValue(valueInBytes / MEGABYTE).build();\n     }"
    },
    {
        "commit_id": "9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "buggy_code": "json.prop(status.toString(), i18n.message(Locale.getDefault(), \"rules.status.\" + status.toString().toLowerCase(), status.toString()));",
        "fixed_code": "json.prop(status.toString(), i18n.message(Locale.getDefault(), \"rules.status.\" + status.toString().toLowerCase(Locale.ENGLISH), status.toString()));",
        "patch": "@@ -125,7 +125,7 @@ private void addStatuses(JsonWriter json) {\n     json.name(\"statuses\").beginObject();\n     for (RuleStatus status : RuleStatus.values()) {\n       if (status != RuleStatus.REMOVED) {\n-        json.prop(status.toString(), i18n.message(Locale.getDefault(), \"rules.status.\" + status.toString().toLowerCase(), status.toString()));\n+        json.prop(status.toString(), i18n.message(Locale.getDefault(), \"rules.status.\" + status.toString().toLowerCase(Locale.ENGLISH), status.toString()));\n       }\n     }\n     json.endObject();"
    },
    {
        "commit_id": "9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e8e346e71b304fcf7aeb4e4f4c9a3c7107e1a53",
        "buggy_code": "int semiColonPos = s.indexOf(\":\");",
        "fixed_code": "int semiColonPos = s.indexOf(':');",
        "patch": "@@ -52,7 +52,7 @@ public static ActiveRuleKey of(String qualityProfileKey, RuleKey ruleKey) {\n    */\n   public static ActiveRuleKey parse(String s) {\n     Preconditions.checkArgument(s.split(\":\").length >= 3, \"Bad format of activeRule key: \" + s);\n-    int semiColonPos = s.indexOf(\":\");\n+    int semiColonPos = s.indexOf(':');\n     String key = s.substring(0, semiColonPos);\n     String ruleKey = s.substring(semiColonPos + 1);\n     return ActiveRuleKey.of(key, RuleKey.parse(ruleKey));"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private ComponentQuery buildQuery(SearchWsRequest request, List<String> qualifiers) {",
        "fixed_code": "private static ComponentQuery buildQuery(SearchWsRequest request, List<String> qualifiers) {",
        "patch": "@@ -155,7 +155,7 @@ private Paging buildPaging(DbSession dbSession, SearchWsRequest request, Compone\n       .andTotal(total);\n   }\n \n-  private ComponentQuery buildQuery(SearchWsRequest request, List<String> qualifiers) {\n+  private static ComponentQuery buildQuery(SearchWsRequest request, List<String> qualifiers) {\n     return ComponentQuery.builder()\n       .setNameOrKeyQuery(request.getQuery())\n       .setLanguage(request.getLanguage())"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": ": new String[] {requestQualifier};",
        "fixed_code": ": (new String[] {requestQualifier});",
        "patch": "@@ -105,7 +105,7 @@ private ComponentQuery toDbQuery(SearchProjectPermissionsWsRequest wsRequest) {\n   private String[] qualifiers(@Nullable String requestQualifier) {\n     return requestQualifier == null\n       ? rootQualifiers\n-      : new String[] {requestQualifier};\n+      : (new String[] {requestQualifier});\n   }\n \n   private Table<Long, String, Integer> userCountByRootComponentIdAndPermission(DbSession dbSession, List<Long> rootComponentIds) {"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": ": new String[] {qualifier};",
        "fixed_code": ": (new String[] {qualifier});",
        "patch": "@@ -121,7 +121,7 @@ private void doHandle(BulkApplyTemplateWsRequest request) {\n   private String[] qualifiers(@Nullable String qualifier) {\n     return qualifier == null\n       ? Collections2.transform(resourceTypes.getRoots(), RESOURCE_TYPE_TO_QUALIFIER).toArray(new String[resourceTypes.getRoots().size()])\n-      : new String[] {qualifier};\n+      : (new String[] {qualifier});\n   }\n \n   private static BulkApplyTemplateWsRequest toBulkApplyTemplateWsRequest(Request request) {"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private SnapshotMapper mapper(DbSession session) {",
        "fixed_code": "private static SnapshotMapper mapper(DbSession session) {",
        "patch": "@@ -150,7 +150,7 @@ public ViewsSnapshotDto selectLatestSnapshot(long componentId, DbSession dbSessi\n     return mapper(dbSession).selectLatestSnapshot(componentId);\n   }\n \n-  private SnapshotMapper mapper(DbSession session) {\n+  private static SnapshotMapper mapper(DbSession session) {\n     return session.getMapper(SnapshotMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private ActiveDashboardMapper mapper(SqlSession session) {",
        "fixed_code": "private static ActiveDashboardMapper mapper(SqlSession session) {",
        "patch": "@@ -88,7 +88,7 @@ public List<DashboardDto> selectProjectDashboardsForUserLogin(SqlSession session\n     return mapper(session).selectProjectDashboardsForUserLogin(login);\n   }\n \n-  private ActiveDashboardMapper mapper(SqlSession session) {\n+  private static ActiveDashboardMapper mapper(SqlSession session) {\n     return session.getMapper(ActiveDashboardMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private IssueFilterMapper mapper(SqlSession session) {",
        "fixed_code": "private static IssueFilterMapper mapper(SqlSession session) {",
        "patch": "@@ -141,7 +141,7 @@ public void delete(long id) {\n     }\n   }\n \n-  private IssueFilterMapper mapper(SqlSession session) {\n+  private static IssueFilterMapper mapper(SqlSession session) {\n     return session.getMapper(IssueFilterMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private IssueFilterFavouriteMapper mapper(SqlSession session) {",
        "fixed_code": "private static IssueFilterFavouriteMapper mapper(SqlSession session) {",
        "patch": "@@ -93,7 +93,7 @@ public void deleteByFilterId(long filterId) {\n     }\n   }\n \n-  private IssueFilterFavouriteMapper mapper(SqlSession session) {\n+  private static IssueFilterFavouriteMapper mapper(SqlSession session) {\n     return session.getMapper(IssueFilterFavouriteMapper.class);\n   }\n "
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private MeasureMapper mapper(DbSession session) {",
        "fixed_code": "private static MeasureMapper mapper(DbSession session) {",
        "patch": "@@ -146,7 +146,7 @@ public List<String> selectMetricKeysForSnapshot(DbSession session, long snapshot\n     return mapper(session).selectMetricKeysForSnapshot(snapshotId);\n   }\n \n-  private MeasureMapper mapper(DbSession session) {\n+  private static MeasureMapper mapper(DbSession session) {\n     return session.getMapper(MeasureMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private CustomMeasureMapper mapper(DbSession session) {",
        "fixed_code": "private static CustomMeasureMapper mapper(DbSession session) {",
        "patch": "@@ -88,7 +88,7 @@ public List<CustomMeasureDto> selectByMetricKeyAndTextValue(DbSession session, S\n     return mapper(session).selectByMetricKeyAndTextValue(metricKey, textValue);\n   }\n \n-  private CustomMeasureMapper mapper(DbSession session) {\n+  private static CustomMeasureMapper mapper(DbSession session) {\n     return session.getMapper(CustomMeasureMapper.class);\n   }\n "
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private MetricMapper mapper(DbSession session) {",
        "fixed_code": "private static MetricMapper mapper(DbSession session) {",
        "patch": "@@ -127,7 +127,7 @@ public boolean apply(@Nonnull String input) {\n     }\n   }\n \n-  private MetricMapper mapper(DbSession session) {\n+  private static MetricMapper mapper(DbSession session) {\n     return session.getMapper(MetricMapper.class);\n   }\n "
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private QualityGateMapper mapper(SqlSession session) {",
        "fixed_code": "private static QualityGateMapper mapper(SqlSession session) {",
        "patch": "@@ -119,7 +119,7 @@ public void update(QualityGateDto qGate, SqlSession session) {\n     mapper(session).update(qGate.setUpdatedAt(new Date()));\n   }\n \n-  private QualityGateMapper mapper(SqlSession session) {\n+  private static QualityGateMapper mapper(SqlSession session) {\n     return session.getMapper(QualityGateMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private QualityProfileMapper mapper(DbSession session) {",
        "fixed_code": "private static QualityProfileMapper mapper(DbSession session) {",
        "patch": "@@ -377,7 +377,7 @@ private String sqlQueryString(String query) {\n     return query == null ? \"%\" : \"%\" + query.toUpperCase() + \"%\";\n   }\n \n-  private QualityProfileMapper mapper(DbSession session) {\n+  private static QualityProfileMapper mapper(DbSession session) {\n     return session.getMapper(QualityProfileMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private FileSourceMapper mapper(DbSession session) {",
        "fixed_code": "private static FileSourceMapper mapper(DbSession session) {",
        "patch": "@@ -134,7 +134,7 @@ public void updateDateWhenUpdatedDateIsZero(DbSession session, String projectUui\n     mapper(session).updateDateWhenUpdatedDateIsZero(projectUuid, updateDate);\n   }\n \n-  private FileSourceMapper mapper(DbSession session) {\n+  private static FileSourceMapper mapper(DbSession session) {\n     return session.getMapper(FileSourceMapper.class);\n   }\n }"
    },
    {
        "commit_id": "a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5db81075b825ee87df9c64e3f1f2a32cdb4d72b",
        "buggy_code": "private GroupMapper mapper(DbSession session) {",
        "fixed_code": "private static GroupMapper mapper(DbSession session) {",
        "patch": "@@ -116,7 +116,7 @@ private static String groupSearchToSql(@Nullable String query) {\n     return DatabaseUtils.buildLikeValue(upperCasedNameQuery, WildcardPosition.BEFORE_AND_AFTER);\n   }\n \n-  private GroupMapper mapper(DbSession session) {\n+  private static GroupMapper mapper(DbSession session) {\n     return session.getMapper(GroupMapper.class);\n   }\n "
    },
    {
        "commit_id": "7c90d26047935985378a3aa0f26ee316acba59e1",
        "commit_message": "Fix ServerSystemTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c90d26047935985378a3aa0f26ee316acba59e1",
        "buggy_code": "\"\\\"Elasticsearch\\\":\", \"\\\"State\\\":\\\"GREEN\\\"\", \"\\\"Elasticsearch State\\\"\");",
        "fixed_code": "\"\\\"Elasticsearch\\\":\", \"\\\"State\\\":\\\"GREEN\\\"\");",
        "patch": "@@ -106,7 +106,7 @@ public void monitor_compute_engine_and_elasticsearch_processes() throws Exceptio\n     assertThat(response.code()).isEqualTo(200);\n     assertThat(response.content()).contains(\n       \"\\\"Compute Engine Database Connection\\\":\", \"\\\"Compute Engine State\\\":\", \"\\\"Compute Engine Tasks\\\":\",\n-      \"\\\"Elasticsearch\\\":\", \"\\\"State\\\":\\\"GREEN\\\"\", \"\\\"Elasticsearch State\\\"\");\n+      \"\\\"Elasticsearch\\\":\", \"\\\"State\\\":\\\"GREEN\\\"\");\n   }\n \n   private static void waitForComputeEngineToBeUp(Orchestrator orchestrator) throws IOException {"
    },
    {
        "commit_id": "b339c83c07217fea7bc5914e9a5e2849a07a01e6",
        "commit_message": "SONAR-7499 Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b339c83c07217fea7bc5914e9a5e2849a07a01e6",
        "buggy_code": "\"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' requires the permission 'Administer Issues'.\")",
        "fixed_code": "\"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' require the permission 'Administer Issues'.\")",
        "patch": "@@ -41,7 +41,7 @@ public DoTransitionAction(IssueService issueService, OperationResponseWriter res\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(ACTION)\n       .setDescription(\"Do workflow transition on an issue. Requires authentication and Browse permission on project.<br/>\" +\n-        \"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' requires the permission 'Administer Issues'.\")\n+        \"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' require the permission 'Administer Issues'.\")\n       .setSince(\"3.6\")\n       .setHandler(this)\n       .setPost(true);"
    },
    {
        "commit_id": "a62a476fe0c818dcdfd22d51e426eca80bf59813",
        "commit_message": "SONAR-7499 Fix typo and add missing transition 'falsepositive'",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a62a476fe0c818dcdfd22d51e426eca80bf59813",
        "buggy_code": "\"The transition 'workflow' requires the permission 'Administer Issues'.\")",
        "fixed_code": "\"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' requires the permission 'Administer Issues'.\")",
        "patch": "@@ -41,7 +41,7 @@ public DoTransitionAction(IssueService issueService, OperationResponseWriter res\n   public void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(ACTION)\n       .setDescription(\"Do workflow transition on an issue. Requires authentication and Browse permission on project.<br/>\" +\n-        \"The transition 'workflow' requires the permission 'Administer Issues'.\")\n+        \"The transitions '\" + DefaultTransitions.WONT_FIX + \"' and '\" + DefaultTransitions.FALSE_POSITIVE + \"' requires the permission 'Administer Issues'.\")\n       .setSince(\"3.6\")\n       .setHandler(this)\n       .setPost(true);"
    },
    {
        "commit_id": "a81d697437999945c1acbd8117bf01b94906941b",
        "commit_message": "SONAR-6717 Drop issue.Action API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a81d697437999945c1acbd8117bf01b94906941b",
        "buggy_code": "+ 76 // level 4",
        "fixed_code": "+ 75 // level 4",
        "patch": "@@ -79,7 +79,7 @@ public void real_start() throws IOException {\n     assertThat(picoContainer.getComponentAdapters())\n       .hasSize(\n         CONTAINER_ITSELF\n-          + 76 // level 4\n+          + 75 // level 4\n           + 5 // content of CeModule\n           + 7 // content of CeQueueModule\n           + 4 // content of ReportProcessingModule"
    },
    {
        "commit_id": "77a92e6307eeced2a950472b082dbb4ecbc4f157",
        "commit_message": "SONAR-7494 Fix IdentityProvider",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/77a92e6307eeced2a950472b082dbb4ecbc4f157",
        "buggy_code": "getResponse().sendRedirect(\"/\");",
        "fixed_code": "getResponse().sendRedirect(server.getContextPath() + \"/\");",
        "patch": "@@ -104,7 +104,7 @@ public void verifyCsrfState() {\n     @Override\n     public void redirectToRequestedPage() {\n       try {\n-        getResponse().sendRedirect(\"/\");\n+        getResponse().sendRedirect(server.getContextPath() + \"/\");\n       } catch (IOException e) {\n         throw new IllegalStateException(\"Fail to redirect to home\", e);\n       }"
    },
    {
        "commit_id": "491644917a5ebb44429ef45ee1885ed9728daf56",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/491644917a5ebb44429ef45ee1885ed9728daf56",
        "buggy_code": "return (DateFormat) ((Reference) cache.get()).get();",
        "fixed_code": "return cache.get().get();",
        "patch": "@@ -175,7 +175,7 @@ public Reference<DateFormat> get() {\n     }\n \n     private DateFormat getDateFormat() {\n-      return (DateFormat) ((Reference) cache.get()).get();\n+      return cache.get().get();\n     }\n \n     @Override"
    },
    {
        "commit_id": "eee6027f6146f4a529a6f3cd14637592a70cf3f2",
        "commit_message": "Fix default mime type of ProfileExporter\n\n\"plain/text\" is not a valid type. It must be \"text/plain\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eee6027f6146f4a529a6f3cd14637592a70cf3f2",
        "buggy_code": "assertThat(exporters.mimeType(\"standard\")).isEqualTo(\"plain/text\");",
        "fixed_code": "assertThat(exporters.mimeType(\"standard\")).isEqualTo(\"text/plain\");",
        "patch": "@@ -98,7 +98,7 @@ public void mimeType() {\n     assertThat(exporters.mimeType(\"xootool\")).isEqualTo(\"plain/custom\");\n \n     // default mime type\n-    assertThat(exporters.mimeType(\"standard\")).isEqualTo(\"plain/text\");\n+    assertThat(exporters.mimeType(\"standard\")).isEqualTo(\"text/plain\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "eee6027f6146f4a529a6f3cd14637592a70cf3f2",
        "commit_message": "Fix default mime type of ProfileExporter\n\n\"plain/text\" is not a valid type. It must be \"text/plain\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eee6027f6146f4a529a6f3cd14637592a70cf3f2",
        "buggy_code": "private String mimeType = \"plain/text\";",
        "fixed_code": "private String mimeType = \"text/plain\";",
        "patch": "@@ -38,7 +38,7 @@ public abstract class ProfileExporter {\n   private String[] supportedLanguages = new String[0];\n   private String key;\n   private String name;\n-  private String mimeType = \"plain/text\";\n+  private String mimeType = \"text/plain\";\n \n   protected ProfileExporter(String key, String name) {\n     this.key = key;"
    },
    {
        "commit_id": "f661a14e2a03a44a9adfe18bb55f76754c9eabda",
        "commit_message": "SONAR-7473 Drop 'reporter' field from issue filter widgets",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f661a14e2a03a44a9adfe18bb55f76754c9eabda",
        "buggy_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",",
        "fixed_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\",",
        "patch": "@@ -32,7 +32,7 @@\n @WidgetProperties({\n   @WidgetProperty(key = IssueFilterWidget.FILTER_PROPERTY, type = WidgetPropertyType.ISSUE_FILTER, optional = false),\n   @WidgetProperty(key = IssueFilterWidget.DISTRIBUTION_AXIS_PROPERTY, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"severities\",\n-    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",\n+    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\",\n       \"authors\", \"languages\", \"createdAt\"}),\n   @WidgetProperty(key = IssueFilterWidget.DISPLAY_FILTER_DESCRIPTION, type = WidgetPropertyType.BOOLEAN, defaultValue = \"false\"),\n   @WidgetProperty(key = IssueFilterWidget.DISPLAY_MODE, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"count\", options = {\"count\", \"debt\"})"
    },
    {
        "commit_id": "f661a14e2a03a44a9adfe18bb55f76754c9eabda",
        "commit_message": "SONAR-7473 Drop 'reporter' field from issue filter widgets",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f661a14e2a03a44a9adfe18bb55f76754c9eabda",
        "buggy_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",",
        "fixed_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"authors\",",
        "patch": "@@ -32,7 +32,7 @@\n @WidgetProperties({\n   @WidgetProperty(key = ProjectIssueFilterWidget.FILTER_PROPERTY, type = WidgetPropertyType.ISSUE_FILTER, optional = false),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISTRIBUTION_AXIS_PROPERTY, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"severities\",\n-    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",\n+    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"authors\",\n       \"languages\", \"createdAt\"}),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISPLAY_FILTER_DESCRIPTION, type = WidgetPropertyType.BOOLEAN, defaultValue = \"false\"),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISPLAY_MODE, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"count\", options = {\"count\", \"debt\"})"
    },
    {
        "commit_id": "52cc88864ac99fe01ef0d473208c7686509b4aee",
        "commit_message": "Fix SystemI Info integration test\n\n JMX section has been renamed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/52cc88864ac99fe01ef0d473208c7686509b4aee",
        "buggy_code": "assertThat(response.content()).contains(\"\\\"Compute Engine Database\\\":\", \"\\\"Compute Engine State\\\":\", \"\\\"Compute Engine Tasks\\\":\");",
        "fixed_code": "assertThat(response.content()).contains(\"\\\"Compute Engine Database Connection\\\":\", \"\\\"Compute Engine State\\\":\", \"\\\"Compute Engine Tasks\\\":\");",
        "patch": "@@ -105,7 +105,7 @@ public void monitor_compute_engine_and_elasticsearch_processes() throws Exceptio\n       new GetRequest(\"api/system/info\"));\n \n     assertThat(response.code()).isEqualTo(200);\n-    assertThat(response.content()).contains(\"\\\"Compute Engine Database\\\":\", \"\\\"Compute Engine State\\\":\", \"\\\"Compute Engine Tasks\\\":\");\n+    assertThat(response.content()).contains(\"\\\"Compute Engine Database Connection\\\":\", \"\\\"Compute Engine State\\\":\", \"\\\"Compute Engine Tasks\\\":\");\n     assertThat(response.content()).contains(\"\\\"Elasticsearch\\\":\", \"\\\"State\\\":\\\"GREEN\\\"\", \"\\\"Elasticsearch State\\\"\");\n   }\n "
    },
    {
        "commit_id": "f8090239d79037bd1d75a7576058c4da042c4070",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8090239d79037bd1d75a7576058c4da042c4070",
        "buggy_code": "private ComponentType getType(Resource r) {",
        "fixed_code": "private static ComponentType getType(Resource r) {",
        "patch": "@@ -159,7 +159,7 @@ private static String getDescription(Resource r) {\n     return ResourceUtils.isProject(r) ? r.getDescription() : null;\n   }\n \n-  private ComponentType getType(Resource r) {\n+  private static ComponentType getType(Resource r) {\n     if (ResourceUtils.isFile(r)) {\n       return ComponentType.FILE;\n     } else if (ResourceUtils.isDirectory(r)) {"
    },
    {
        "commit_id": "f8090239d79037bd1d75a7576058c4da042c4070",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8090239d79037bd1d75a7576058c4da042c4070",
        "buggy_code": "private void log(String title, PathPattern[] patterns) {",
        "fixed_code": "private static void log(String title, PathPattern[] patterns) {",
        "patch": "@@ -58,7 +58,7 @@ public boolean hasPattern() {\n     return mainInclusions.length > 0 || mainExclusions.length > 0 || testInclusions.length > 0 || testExclusions.length > 0;\n   }\n \n-  private void log(String title, PathPattern[] patterns) {\n+  private static void log(String title, PathPattern[] patterns) {\n     if (patterns.length > 0) {\n       LOG.info(title);\n       for (PathPattern pattern : patterns) {"
    },
    {
        "commit_id": "3ede1b35d04dcff7e7c9d1b6c9230bdeae3417c7",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ede1b35d04dcff7e7c9d1b6c9230bdeae3417c7",
        "buggy_code": "private ScannerReport.TextRange toProtobufTextRange(ScannerReport.TextRange.Builder textRangeBuilder, TextRange primaryTextRange) {",
        "fixed_code": "private static ScannerReport.TextRange toProtobufTextRange(ScannerReport.TextRange.Builder textRangeBuilder, TextRange primaryTextRange) {",
        "patch": "@@ -123,7 +123,7 @@ private void applyFlows(ScannerReport.Issue.Builder builder, ScannerReport.Issue\n     }\n   }\n \n-  private ScannerReport.TextRange toProtobufTextRange(ScannerReport.TextRange.Builder textRangeBuilder, TextRange primaryTextRange) {\n+  private static ScannerReport.TextRange toProtobufTextRange(ScannerReport.TextRange.Builder textRangeBuilder, TextRange primaryTextRange) {\n     textRangeBuilder.clear();\n     textRangeBuilder.setStartLine(primaryTextRange.start().line());\n     textRangeBuilder.setStartOffset(primaryTextRange.start().lineOffset());"
    },
    {
        "commit_id": "d9bfbf8d6b5d0cd0df2970a68649e1893b227acb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9bfbf8d6b5d0cd0df2970a68649e1893b227acb",
        "buggy_code": "private ResourceDto selectResource(ResourceQuery query, DbSession session) {",
        "fixed_code": "private static ResourceDto selectResource(ResourceQuery query, DbSession session) {",
        "patch": "@@ -56,7 +56,7 @@ public ResourceDto selectResource(ResourceQuery query) {\n   }\n \n   @CheckForNull\n-  private ResourceDto selectResource(ResourceQuery query, DbSession session) {\n+  private static ResourceDto selectResource(ResourceQuery query, DbSession session) {\n     List<ResourceDto> resources = getResources(query, session);\n     if (!resources.isEmpty()) {\n       return resources.get(0);"
    },
    {
        "commit_id": "d9bfbf8d6b5d0cd0df2970a68649e1893b227acb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9bfbf8d6b5d0cd0df2970a68649e1893b227acb",
        "buggy_code": "private static final int GROUP_NAME_MAX_LENGTH = 255;",
        "fixed_code": "public static final int GROUP_NAME_MAX_LENGTH = 255;",
        "patch": "@@ -26,7 +26,7 @@\n \n public class UserGroupValidation {\n \n-  private static final int GROUP_NAME_MAX_LENGTH = 255;\n+  public static final int GROUP_NAME_MAX_LENGTH = 255;\n \n   private UserGroupValidation() {\n     // Only static methods"
    },
    {
        "commit_id": "7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "buggy_code": "private org.sonar.api.rules.Rule toRule(RuleDto rule, List<RuleParamDto> params) {",
        "fixed_code": "private static org.sonar.api.rules.Rule toRule(RuleDto rule, List<RuleParamDto> params) {",
        "patch": "@@ -163,7 +163,7 @@ private Collection<org.sonar.api.rules.Rule> convertToRuleApi(DbSession dbSessio\n     return rules;\n   }\n \n-  private org.sonar.api.rules.Rule toRule(RuleDto rule, List<RuleParamDto> params) {\n+  private static org.sonar.api.rules.Rule toRule(RuleDto rule, List<RuleParamDto> params) {\n     String severity = rule.getSeverityString();\n     String description = rule.getDescription();\n     RuleDto.Format descriptionFormat = rule.getDescriptionFormat();"
    },
    {
        "commit_id": "7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "buggy_code": "private List<ResourceDto> getResources(ResourceQuery query, SqlSession session) {",
        "fixed_code": "private static List<ResourceDto> getResources(ResourceQuery query, SqlSession session) {",
        "patch": "@@ -64,7 +64,7 @@ private ResourceDto selectResource(ResourceQuery query, DbSession session) {\n     return null;\n   }\n \n-  private List<ResourceDto> getResources(ResourceQuery query, SqlSession session) {\n+  private static List<ResourceDto> getResources(ResourceQuery query, SqlSession session) {\n     return session.getMapper(ResourceMapper.class).selectResources(query);\n   }\n "
    },
    {
        "commit_id": "7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "buggy_code": "private RulesDefinition.NewRule loadRule(RulesDefinition.NewExtendedRepository repo, Class clazz, org.sonar.check.Rule ruleAnnotation) {",
        "fixed_code": "private static RulesDefinition.NewRule loadRule(RulesDefinition.NewExtendedRepository repo, Class clazz, org.sonar.check.Rule ruleAnnotation) {",
        "patch": "@@ -74,7 +74,7 @@ RulesDefinition.NewRule loadRule(RulesDefinition.NewExtendedRepository repo, Cla\n     }\n   }\n \n-  private RulesDefinition.NewRule loadRule(RulesDefinition.NewExtendedRepository repo, Class clazz, org.sonar.check.Rule ruleAnnotation) {\n+  private static RulesDefinition.NewRule loadRule(RulesDefinition.NewExtendedRepository repo, Class clazz, org.sonar.check.Rule ruleAnnotation) {\n     String ruleKey = StringUtils.defaultIfEmpty(ruleAnnotation.key(), clazz.getCanonicalName());\n     String ruleName = StringUtils.defaultIfEmpty(ruleAnnotation.name(), null);\n     String description = StringUtils.defaultIfEmpty(ruleAnnotation.description(), null);"
    },
    {
        "commit_id": "7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b9499e5c765523a97b6cf5d4cc157f08d449e78",
        "buggy_code": "private void processRule(RulesDefinition.NewRepository repo, SMInputCursor ruleC) throws XMLStreamException {",
        "fixed_code": "private static void processRule(RulesDefinition.NewRepository repo, SMInputCursor ruleC) throws XMLStreamException {",
        "patch": "@@ -232,7 +232,7 @@ public void load(RulesDefinition.NewRepository repo, Reader reader) {\n     }\n   }\n \n-  private void processRule(RulesDefinition.NewRepository repo, SMInputCursor ruleC) throws XMLStreamException {\n+  private static void processRule(RulesDefinition.NewRepository repo, SMInputCursor ruleC) throws XMLStreamException {\n     String key = null;\n     String name = null;\n     String description = null;"
    },
    {
        "commit_id": "eec3233505be2d6d9cc95c9bfc8359b91572ac51",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eec3233505be2d6d9cc95c9bfc8359b91572ac51",
        "buggy_code": "String variation = i18n.message(Locale.ENGLISH, VARIATION, VARIATION).toLowerCase();",
        "fixed_code": "String variation = i18n.message(Locale.ENGLISH, VARIATION, VARIATION).toLowerCase(Locale.ENGLISH);",
        "patch": "@@ -75,7 +75,7 @@ private String getAlertLabel(Condition condition, Measure.Level level) {\n     stringBuilder.append(metric);\n \n     if (alertPeriod != null && !condition.getMetric().getKey().startsWith(VARIATION_METRIC_PREFIX)) {\n-      String variation = i18n.message(Locale.ENGLISH, VARIATION, VARIATION).toLowerCase();\n+      String variation = i18n.message(Locale.ENGLISH, VARIATION, VARIATION).toLowerCase(Locale.ENGLISH);\n       stringBuilder.append(\" \").append(variation);\n     }\n "
    },
    {
        "commit_id": "6b29d25a5aeb56e1e73d9e430829bca85c159805",
        "commit_message": "SONAR-6732 fix ServerTest perf test confused by extra JVM\n\norchestrator is using the WS /api/server/index which does not wait for the Compute Engine in its own process to actually finish starting\nstartup time and shutdown time are therefor incorrectly calculated. We now rely on logs to compute them correctly, until the WS is updated",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6b29d25a5aeb56e1e73d9e430829bca85c159805",
        "buggy_code": "static Date extractDate(String line) {",
        "fixed_code": "public static Date extractDate(String line) {",
        "patch": "@@ -29,7 +29,7 @@\n \n public class ServerLogs {\n \n-  static Date extractDate(String line) {\n+  public static Date extractDate(String line) {\n     String pattern = \"yyyy.MM.dd HH:mm:ss\";\n     SimpleDateFormat format = new SimpleDateFormat(pattern);\n     if (line.length() > 19) {"
    },
    {
        "commit_id": "b9a0596ca43b7a80cea784ff7123fca6ba658c3c",
        "commit_message": "SONAR-7487 Fix IT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b9a0596ca43b7a80cea784ff7123fca6ba658c3c",
        "buggy_code": ".setProperties(\"sonar.skippedModules\", \"multi-modules-sample:module_b\"));",
        "fixed_code": ".setProperties(\"sonar.modules\", \"module_a\"));",
        "patch": "@@ -148,7 +148,7 @@ public void new_issues_measures_should_be_correctly_calculated_when_adding_a_new\n     ORCHESTRATOR.getServer().restoreProfile(FileLocation.ofClasspath(\"/issue/NewIssuesMeasureTest/profile1.xml\"));\n     ORCHESTRATOR.getServer().associateProjectToQualityProfile(\"com.sonarsource.it.samples:multi-modules-sample\", \"xoo\", \"profile1\");\n     ORCHESTRATOR.executeBuild(SonarRunner.create(projectDir(\"shared/xoo-multi-modules-sample\"))\n-      .setProperties(\"sonar.skippedModules\", \"multi-modules-sample:module_b\"));\n+      .setProperties(\"sonar.modules\", \"module_a\"));\n \n     // Second analysis with module b and with a new rule activated to have new issues on module a since last analysis\n     ORCHESTRATOR.getServer().restoreProfile(FileLocation.ofClasspath(\"/issue/NewIssuesMeasureTest/profile2.xml\"));"
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "processRef.waitForReady();",
        "fixed_code": "processRef.waitForUp();",
        "patch": "@@ -155,7 +155,7 @@ private void monitor(ProcessRef processRef) {\n     watcherThreads.add(watcherThread);\n \n     // wait for process to be ready (accept requests or so on)\n-    processRef.waitForReady();\n+    processRef.waitForUp();\n \n     LOG.info(\"{} is up\", processRef);\n   }"
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "public boolean isReady() {",
        "fixed_code": "public boolean isUp() {",
        "patch": "@@ -88,7 +88,7 @@ public void handle(String target, Request request, HttpServletRequest httpServle\n   }\n \n   @Override\n-  public boolean isReady() {\n+  public boolean isUp() {\n     if (ready) {\n       return true;\n     }"
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "public boolean isReady() {",
        "fixed_code": "public boolean isUp() {",
        "patch": "@@ -51,7 +51,7 @@ public void start() {\n   }\n \n   @Override\n-  public boolean isReady() {\n+  public boolean isUp() {\n     return state == State.STARTED;\n   }\n "
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "public boolean isReady() {",
        "fixed_code": "public boolean isUp() {",
        "patch": "@@ -51,7 +51,7 @@ public void start() {\n   }\n \n   @Override\n-  public boolean isReady() {\n+  public boolean isUp() {\n     return state == State.STARTED;\n   }\n "
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "public boolean isReady() {",
        "fixed_code": "public boolean isUp() {",
        "patch": "@@ -46,7 +46,7 @@ public void start() {\n   }\n \n   @Override\n-  public boolean isReady() {\n+  public boolean isUp() {\n     return node != null && node.client().admin().cluster().prepareHealth()\n       .setWaitForYellowStatus()\n       .setTimeout(TimeValue.timeValueSeconds(30L))"
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "assertThat(searchServer.isReady()).isTrue();",
        "fixed_code": "assertThat(searchServer.isUp()).isTrue();",
        "patch": "@@ -81,7 +81,7 @@ public void start_stop_server() throws Exception {\n \n     searchServer = new SearchServer(props);\n     searchServer.start();\n-    assertThat(searchServer.isReady()).isTrue();\n+    assertThat(searchServer.isUp()).isTrue();\n \n     Settings settings = ImmutableSettings.settingsBuilder().put(\"cluster.name\", CLUSTER_NAME).build();\n     client = new TransportClient(settings)"
    },
    {
        "commit_id": "eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "commit_message": "SONAR-7435 rename state when process is done starting from ready to up\n\nalso clean up code of DefaultProcessCommands and fix it's Javadoc which was out of sync with implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5e8f7774ee19a58c6796840ec9e71d67bb5a1d",
        "buggy_code": "boolean isReady() {",
        "fixed_code": "boolean isUp() {",
        "patch": "@@ -66,7 +66,7 @@ void start() {\n     }\n   }\n \n-  boolean isReady() {\n+  boolean isUp() {\n     if (webappContext == null) {\n       return false;\n     }"
    },
    {
        "commit_id": "ec0c7a992831804b258d39057a33c8f209d65fa2",
        "commit_message": "SONAR-7330 Fix display of rule when activated with parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec0c7a992831804b258d39057a33c8f209d65fa2",
        "buggy_code": "ActiveRuleKey activeRuleKey = activeRuleIdsByKey.get(activeRuleParamDto.getId());",
        "fixed_code": "ActiveRuleKey activeRuleKey = activeRuleIdsByKey.get(activeRuleParamDto.getActiveRuleId());",
        "patch": "@@ -151,7 +151,7 @@ void completeShow(DbSession dbSession, RuleDto rule, ShowResponse.Builder respon\n     List<ActiveRuleParamDto> activeRuleParamDtos = dbClient.activeRuleDao().selectParamsByActiveRuleIds(dbSession, Lists.transform(activeRuleDtos, ActiveRuleDtoToId.INSTANCE));\n     ListMultimap<ActiveRuleKey, ActiveRuleParamDto> activeRuleParamsByActiveRuleKey = ArrayListMultimap.create(activeRules.size(), 10);\n     for (ActiveRuleParamDto activeRuleParamDto : activeRuleParamDtos) {\n-      ActiveRuleKey activeRuleKey = activeRuleIdsByKey.get(activeRuleParamDto.getId());\n+      ActiveRuleKey activeRuleKey = activeRuleIdsByKey.get(activeRuleParamDto.getActiveRuleId());\n       activeRuleParamsByActiveRuleKey.put(activeRuleKey, activeRuleParamDto);\n     }\n "
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "import org.apache.commons.lang3.StringUtils;",
        "fixed_code": "import org.apache.commons.lang.StringUtils;",
        "patch": "@@ -24,7 +24,7 @@\n import java.io.Serializable;\n import java.util.List;\n import org.apache.commons.io.FileUtils;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.measure.MetricFinder;\n import org.sonar.api.batch.sensor.Sensor;"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "import org.apache.commons.lang3.StringUtils;",
        "fixed_code": "import org.apache.commons.lang.StringUtils;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.io.FileUtils;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.sensor.Sensor;\n import org.sonar.api.batch.sensor.SensorContext;"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "import org.apache.commons.lang3.StringUtils;",
        "fixed_code": "import org.apache.commons.lang.StringUtils;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.io.FileUtils;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.sensor.Sensor;\n import org.sonar.api.batch.sensor.SensorContext;"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "private void evaluateClass(Class extensionClass, Class annotationClass, List<Object> results) {",
        "fixed_code": "private static void evaluateClass(Class extensionClass, Class annotationClass, List<Object> results) {",
        "patch": "@@ -202,7 +202,7 @@ protected List<Object> evaluateAnnotatedClasses(Object extension, Class<? extend\n     return results;\n   }\n \n-  private void evaluateClass(Class extensionClass, Class annotationClass, List<Object> results) {\n+  private static void evaluateClass(Class extensionClass, Class annotationClass, List<Object> results) {\n     Annotation annotation = extensionClass.getAnnotation(annotationClass);\n     if (annotation != null) {\n       if (annotation.annotationType().isAssignableFrom(DependsUpon.class)) {"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "private String toStringOrSimpleName(Object o) {",
        "fixed_code": "private static String toStringOrSimpleName(Object o) {",
        "patch": "@@ -87,7 +87,7 @@ public void dump(Properties props) {\n    * @param o\n    * @return\n    */\n-  private String toStringOrSimpleName(Object o) {\n+  private static String toStringOrSimpleName(Object o) {\n     String toString = o.toString();\n     if (toString == null || toString.startsWith(o.getClass().getName())) {\n       return o.getClass().getSimpleName();"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "private void log(String message) {",
        "fixed_code": "private static void log(String message) {",
        "patch": "@@ -69,7 +69,7 @@ public void stop(String stopMessage) {\n     }\n   }\n \n-  private void log(String message) {\n+  private static void log(String message) {\n     synchronized (LOG) {\n       LOG.info(message);\n       LOG.notifyAll();"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "private String getName(Object extension) {",
        "fixed_code": "private static String getName(Object extension) {",
        "patch": "@@ -244,7 +244,7 @@ public ComponentContainer addExtension(@Nullable PluginInfo pluginInfo, Object e\n     return this;\n   }\n \n-  private String getName(Object extension) {\n+  private static String getName(Object extension) {\n     if (extension instanceof Class) {\n       return ((Class<?>) extension).getName();\n     }"
    },
    {
        "commit_id": "1b09113d16a93c516b03c896202c71205d46134a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b09113d16a93c516b03c896202c71205d46134a",
        "buggy_code": "private void addBlock(int blockId, Block block, Map<Integer, StringBuilder> dupPerLine) {",
        "fixed_code": "private static void addBlock(int blockId, Block block, Map<Integer, StringBuilder> dupPerLine) {",
        "patch": "@@ -139,7 +139,7 @@ private Map<Integer, String> computeDuplicationsPerLine(List<List<Block>> duplic\n     return result;\n   }\n \n-  private void addBlock(int blockId, Block block, Map<Integer, StringBuilder> dupPerLine) {\n+  private static void addBlock(int blockId, Block block, Map<Integer, StringBuilder> dupPerLine) {\n     int currentLine = block.start;\n     for (int i = 0; i < block.length; i++) {\n       if (dupPerLine.get(currentLine) == null) {"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "return rawIssue.hasEffortToFix() ? rawIssue.getEffortToFix() : null;",
        "fixed_code": "return rawIssue.hasGap() ? rawIssue.getGap() : null;",
        "patch": "@@ -88,7 +88,7 @@ public Double effortToFix() {\n \n   @Override\n   public Double gap() {\n-    return rawIssue.hasEffortToFix() ? rawIssue.getEffortToFix() : null;\n+    return rawIssue.hasGap() ? rawIssue.getGap() : null;\n   }\n \n   @Override"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "return issue.effortToFix();",
        "fixed_code": "return issue.gap();",
        "patch": "@@ -79,7 +79,7 @@ public Double effortToFix() {\n \n   @Override\n   public Double gap() {\n-    return issue.effortToFix();\n+    return issue.gap();\n   }\n \n   @Override"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "return wrapped.effortToFix();",
        "fixed_code": "return wrapped.gap();",
        "patch": "@@ -108,7 +108,7 @@ public Integer line() {\n \n     @Override\n     public Double effortToFix() {\n-      return wrapped.effortToFix();\n+      return wrapped.gap();\n     }\n \n     @Override"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": ".prop(\"effortToFix\", issue.effortToFix())",
        "fixed_code": ".prop(\"effortToFix\", issue.gap())",
        "patch": "@@ -148,7 +148,7 @@ private void writeJsonIssues(JsonWriter json, Set<RuleKey> ruleKeys, Set<String>\n           .prop(\"resolution\", issue.resolution())\n           .prop(\"isNew\", issue.isNew())\n           .prop(\"assignee\", issue.assignee())\n-          .prop(\"effortToFix\", issue.effortToFix())\n+          .prop(\"effortToFix\", issue.gap())\n           .propDateTime(\"creationDate\", issue.creationDate());\n         if (!StringUtils.isEmpty(issue.reporter())) {\n           logins.add(issue.reporter());"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "builder.setEffortToFix(3.0);",
        "fixed_code": "builder.setGap(3.0);",
        "patch": "@@ -47,7 +47,7 @@ public void setUp() {\n   private Issue createIssue() {\n     Issue.Builder builder = Issue.newBuilder();\n \n-    builder.setEffortToFix(3.0);\n+    builder.setGap(3.0);\n     builder.setLine(30);\n     builder.setSeverity(Severity.MAJOR);\n     return builder.build();"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": ".setEffortToFix(2.0)",
        "fixed_code": ".setGap(2.0)",
        "patch": "@@ -52,7 +52,7 @@ public void improve_coverage() {\n         .setSeverity(Severity.BLOCKER)\n         .setMsg(\"msg\")\n         .setLine(1)\n-        .setEffortToFix(2.0)\n+        .setGap(2.0)\n         .build(),\n       COMPONENT_KEY);\n "
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": ".setEffortToFix(2.0)",
        "fixed_code": ".setGap(2.0)",
        "patch": "@@ -39,7 +39,7 @@ public void improve_coverage() {\n       .setSeverity(\"MAJOR\")\n       .setMessage(\"msg\")\n       .setStartLine(1)\n-      .setEffortToFix(2.0)\n+      .setGap(2.0)\n       .setStatus(\"RESOLVED\")\n       .setResolution(\"FIXED\")\n       .setReporter(\"toto\")"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "defaultIssue.setEffortToFix(2.0);",
        "fixed_code": "defaultIssue.setGap(2.0);",
        "patch": "@@ -61,7 +61,7 @@ public void test() {\n \n     TrackedIssue defaultIssue = new TrackedIssue();\n     defaultIssue.setComponentKey(\"foo:src/Foo.php\");\n-    defaultIssue.setEffortToFix(2.0);\n+    defaultIssue.setGap(2.0);\n     defaultIssue.setNew(true);\n     defaultIssue.setKey(\"xyz\");\n     defaultIssue.setStartLine(1);"
    },
    {
        "commit_id": "712c66d95af8076fe3b4efd7392a61672dc7b656",
        "commit_message": "SONAR-7414 Change Sensor API to update Issue#effortToFix to Issue#gap",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/712c66d95af8076fe3b4efd7392a61672dc7b656",
        "buggy_code": "issue.setEffortToFix(3.14);",
        "fixed_code": "issue.setGap(3.14);",
        "patch": "@@ -111,7 +111,7 @@ public void should_write_json() throws Exception {\n     issue.setEndLine(2);\n     issue.setStartLineOffset(3);\n     issue.setEndLineOffset(4);\n-    issue.setEffortToFix(3.14);\n+    issue.setGap(3.14);\n     issue.setReporter(\"julien\");\n     issue.setAssignee(\"simon\");\n     issue.setCreationDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-24\"));"
    },
    {
        "commit_id": "1becdaad55517706a85ff5f2efeeac4d6cf42265",
        "commit_message": "SONAR-7396 Improve error message when base url is badly configured",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1becdaad55517706a85ff5f2efeeac4d6cf42265",
        "buggy_code": "return publicRootUrl +  CALLBACK_PATH + \"/\" + identityProvider.getKey();",
        "fixed_code": "return publicRootUrl + CALLBACK_PATH + identityProvider.getKey();",
        "patch": "@@ -69,7 +69,7 @@ public String getCallbackUrl() {\n       if (publicRootUrl.startsWith(\"http:\") && !server.isDev()) {\n         throw MessageException.of(format(\"The server url should be configured in https, please update the property '%s'\", SERVER_BASE_URL));\n       }\n-      return publicRootUrl +  CALLBACK_PATH + \"/\" + identityProvider.getKey();\n+      return publicRootUrl + CALLBACK_PATH + identityProvider.getKey();\n     }\n \n     @Override"
    },
    {
        "commit_id": "4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "buggy_code": "private long calculateFromChangelog(DefaultIssue issue, Collection<IssueChangeDto> debtChangelog, long periodDate) {",
        "fixed_code": "private static long calculateFromChangelog(DefaultIssue issue, Collection<IssueChangeDto> debtChangelog, long periodDate) {",
        "patch": "@@ -55,7 +55,7 @@ public long calculate(DefaultIssue issue, Collection<IssueChangeDto> debtChangel\n     return calculateFromChangelog(issue, debtChangelog, period.getSnapshotDate());\n   }\n \n-  private long calculateFromChangelog(DefaultIssue issue, Collection<IssueChangeDto> debtChangelog, long periodDate) {\n+  private static long calculateFromChangelog(DefaultIssue issue, Collection<IssueChangeDto> debtChangelog, long periodDate) {\n     List<FieldDiffs> debtDiffs = from(debtChangelog).transform(ToFieldDiffs.INSTANCE).filter(HasDebtChange.INSTANCE).toSortedList(CHANGE_ORDERING);\n     FieldDiffs currentChange = issue.currentChange();\n     if (currentChange != null && HasDebtChange.INSTANCE.apply(currentChange)) {"
    },
    {
        "commit_id": "4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "buggy_code": "private boolean mergeTags(RulesDefinition.Rule ruleDef, RuleDto dto) {",
        "fixed_code": "private static boolean mergeTags(RulesDefinition.Rule ruleDef, RuleDto dto) {",
        "patch": "@@ -342,7 +342,7 @@ private boolean mergeParam(RuleParamDto paramDto, RulesDefinition.Param paramDef\n     return changed;\n   }\n \n-  private boolean mergeTags(RulesDefinition.Rule ruleDef, RuleDto dto) {\n+  private static boolean mergeTags(RulesDefinition.Rule ruleDef, RuleDto dto) {\n     boolean changed = false;\n \n     if (RuleStatus.REMOVED == ruleDef.status()) {"
    },
    {
        "commit_id": "4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4bc2b8da3227c3aee75248ee9ee178875e49d386",
        "buggy_code": "private List<String> keepAuthorizedComponentKeys(final DbSession session, final String componentKey, @Nullable final Integer userId, final String role) {",
        "fixed_code": "private static List<String> keepAuthorizedComponentKeys(final DbSession session, final String componentKey, @Nullable final Integer userId, final String role) {",
        "patch": "@@ -73,7 +73,7 @@ public boolean isAuthorizedComponentKey(String componentKey, @Nullable Integer u\n     }\n   }\n \n-  private List<String> keepAuthorizedComponentKeys(final DbSession session, final String componentKey, @Nullable final Integer userId, final String role) {\n+  private static List<String> keepAuthorizedComponentKeys(final DbSession session, final String componentKey, @Nullable final Integer userId, final String role) {\n     if (userId == null) {\n       return session.getMapper(AuthorizationMapper.class).keepAuthorizedComponentKeysForAnonymous(role, Sets.newHashSet(componentKey));\n     } else {"
    },
    {
        "commit_id": "4f8b663b1c61ad831d7cdca20ad3efdcba1cae8e",
        "commit_message": "Fix typo for WS api/measures/component_tree description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4f8b663b1c61ad831d7cdca20ad3efdcba1cae8e",
        "buggy_code": ".setDescription(\"Base component key.The search is based on this component.\")",
        "fixed_code": ".setDescription(\"Base component key. The search is based on this component.\")",
        "patch": "@@ -133,7 +133,7 @@ public void define(WebService.NewController context) {\n       .setExampleValue(UUID_EXAMPLE_02);\n \n     action.createParam(PARAM_BASE_COMPONENT_KEY)\n-      .setDescription(\"Base component key.The search is based on this component.\")\n+      .setDescription(\"Base component key. The search is based on this component.\")\n       .setExampleValue(KEY_PROJECT_EXAMPLE_001);\n \n     action.createParam(PARAM_METRIC_SORT)"
    },
    {
        "commit_id": "5d1d0e52b2fcde16c3ff23adc6ea29752ee5cbd7",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in UI",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5d1d0e52b2fcde16c3ff23adc6ea29752ee5cbd7",
        "buggy_code": "super(\"rules\", \"Issues and Technical Debt\", \"/org/sonar/server/dashboard/widget/issues.html.erb\");",
        "fixed_code": "super(\"rules\", \"Issues and Effort\", \"/org/sonar/server/dashboard/widget/issues.html.erb\");",
        "patch": "@@ -25,6 +25,6 @@\n public class IssuesWidget extends CoreWidget {\n \n   public IssuesWidget() {\n-    super(\"rules\", \"Issues and Technical Debt\", \"/org/sonar/server/dashboard/widget/issues.html.erb\");\n+    super(\"rules\", \"Issues and Effort\", \"/org/sonar/server/dashboard/widget/issues.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "d9d6031a949822c16cbb601975397588bf36cf07",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d6031a949822c16cbb601975397588bf36cf07",
        "buggy_code": "issue.setDebt(1000L);",
        "fixed_code": "issue.setEffort(1000L);",
        "patch": "@@ -189,7 +189,7 @@ public IssueDoc next() {\n       issue.setFuncCreationDate(new Date());\n       issue.setFuncCloseDate(null);\n       issue.setAttributes(null);\n-      issue.setDebt(1000L);\n+      issue.setEffort(1000L);\n       issue.setGap(3.14);\n       issue.setLanguage(\"php\");\n       issue.setReporter(users.next());"
    },
    {
        "commit_id": "d9d6031a949822c16cbb601975397588bf36cf07",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d6031a949822c16cbb601975397588bf36cf07",
        "buggy_code": "doc.setDebt(getLong(rs, 15));",
        "fixed_code": "doc.setEffort(getLong(rs, 15));",
        "patch": "@@ -173,7 +173,7 @@ protected IssueDoc read(ResultSet rs) throws SQLException {\n     doc.setManualSeverity(rs.getBoolean(12));\n     doc.setChecksum(rs.getString(13));\n     doc.setStatus(rs.getString(14));\n-    doc.setDebt(getLong(rs, 15));\n+    doc.setEffort(getLong(rs, 15));\n     doc.setReporter(rs.getString(16));\n     doc.setAuthorLogin(rs.getString(17));\n     doc.setFuncCloseDate(longToDate(getLong(rs, 18)));"
    },
    {
        "commit_id": "d9d6031a949822c16cbb601975397588bf36cf07",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d6031a949822c16cbb601975397588bf36cf07",
        "buggy_code": ".setPossibleValues(IssueFilterParameters.FACET_MODE_COUNT, IssueFilterParameters.FACET_MODE_DEBT);",
        "fixed_code": ".setPossibleValues(IssueFilterParameters.FACET_MODE_COUNT, IssueFilterParameters.DEPRECATED_FACET_MODE_DEBT);",
        "patch": "@@ -130,7 +130,7 @@ public void define(WebService.NewController controller) {\n     action.createParam(IssueFilterParameters.FACET_MODE)\n       .setDefaultValue(IssueFilterParameters.FACET_MODE_COUNT)\n       .setDescription(\"Choose the returned value for facet items, either count of issues or sum of debt.\")\n-      .setPossibleValues(IssueFilterParameters.FACET_MODE_COUNT, IssueFilterParameters.FACET_MODE_DEBT);\n+      .setPossibleValues(IssueFilterParameters.FACET_MODE_COUNT, IssueFilterParameters.DEPRECATED_FACET_MODE_DEBT);\n     action.addSortParams(IssueQuery.SORTS, null, true);\n     action.createParam(IssueFilterParameters.ADDITIONAL_FIELDS)\n       .setSince(\"5.2\")"
    },
    {
        "commit_id": "d9d6031a949822c16cbb601975397588bf36cf07",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d6031a949822c16cbb601975397588bf36cf07",
        "buggy_code": "assertThat(manualIssue.effortToFix()).isNull();",
        "fixed_code": "assertThat(manualIssue.gap()).isNull();",
        "patch": "@@ -341,7 +341,7 @@ public void create_manual_issue_on_line() {\n     assertThat(manualIssue.message()).isEqualTo(\"Fix it\");\n     assertThat(manualIssue.line()).isEqualTo(1);\n     assertThat(manualIssue.severity()).isEqualTo(Severity.MINOR);\n-    assertThat(manualIssue.effortToFix()).isNull();\n+    assertThat(manualIssue.gap()).isNull();\n     assertThat(manualIssue.reporter()).isEqualTo(\"john\");\n     assertThat(manualIssue.assignee()).isEqualTo(\"arthur\");\n   }"
    },
    {
        "commit_id": "d9d6031a949822c16cbb601975397588bf36cf07",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d6031a949822c16cbb601975397588bf36cf07",
        "buggy_code": "doc.setDebt(10L);",
        "fixed_code": "doc.setEffort(10L);",
        "patch": "@@ -83,7 +83,7 @@ public static IssueDoc newDoc() {\n     doc.setResolution(null);\n     doc.setSeverity(Severity.MAJOR);\n     doc.setManualSeverity(true);\n-    doc.setDebt(10L);\n+    doc.setEffort(10L);\n     doc.setChecksum(\"12345\");\n     doc.setFuncCreationDate(DateUtils.parseDate(\"2014-09-04\"));\n     doc.setFuncUpdateDate(DateUtils.parseDate(\"2014-12-04\"));"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "issue.setEffortToFix(3.14);",
        "fixed_code": "issue.setGap(3.14);",
        "patch": "@@ -190,7 +190,7 @@ public IssueDoc next() {\n       issue.setFuncCloseDate(null);\n       issue.setAttributes(null);\n       issue.setDebt(1000L);\n-      issue.setEffortToFix(3.14);\n+      issue.setGap(3.14);\n       issue.setLanguage(\"php\");\n       issue.setReporter(users.next());\n       issue.setRuleKey(rules.next());"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "Long issueEffort = issue.debtInMinutes();",
        "fixed_code": "Long issueEffort = issue.effortInMinutes();",
        "patch": "@@ -126,7 +126,7 @@ private class EffortCounter {\n     private long securityEffort = 0L;\n \n     void add(DefaultIssue issue) {\n-      Long issueEffort = issue.debtInMinutes();\n+      Long issueEffort = issue.effortInMinutes();\n       if (issueEffort != null && issueEffort != 0L) {\n         switch (issue.type()) {\n           case CODE_SMELL :"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "if (issue.resolution() == null && issue.debtInMinutes() != null && !periodsHolder.getPeriods().isEmpty()) {",
        "fixed_code": "if (issue.resolution() == null && issue.effortInMinutes() != null && !periodsHolder.getPeriods().isEmpty()) {",
        "patch": "@@ -94,7 +94,7 @@ public void beforeComponent(Component component) {\n \n   @Override\n   public void onIssue(Component component, DefaultIssue issue) {\n-    if (issue.resolution() == null && issue.debtInMinutes() != null && !periodsHolder.getPeriods().isEmpty()) {\n+    if (issue.resolution() == null && issue.effortInMinutes() != null && !periodsHolder.getPeriods().isEmpty()) {\n       List<IssueChangeDto> changelog = changesByIssueUuid.get(issue.key());\n       for (Period period : periodsHolder.getPeriods()) {\n         counter.add(issue, period, changelog);"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "issue.setEffortToFix(reportIssue.getEffortToFix());",
        "fixed_code": "issue.setGap(reportIssue.getEffortToFix());",
        "patch": "@@ -126,7 +126,7 @@ private DefaultIssue toIssue(LineHashSequence lineHashSeq, BatchReport.Issue rep\n         issue.setSeverity(reportIssue.getSeverity().name());\n       }\n       if (reportIssue.hasEffortToFix()) {\n-        issue.setEffortToFix(reportIssue.getEffortToFix());\n+        issue.setGap(reportIssue.getEffortToFix());\n       }\n       DbIssues.Locations.Builder dbLocationsBuilder = DbIssues.Locations.newBuilder();\n       if (reportIssue.hasTextRange()) {"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "issue.setEffortToFix(dbIssue.getGap());",
        "fixed_code": "issue.setGap(dbIssue.getGap());",
        "patch": "@@ -63,7 +63,7 @@ private void resolveResolution(IssueDto dbIssue, DefaultIssue issue) {\n   }\n \n   private void resolveEffortToFix(IssueDto dbIssue, DefaultIssue issue) {\n-    issue.setEffortToFix(dbIssue.getGap());\n+    issue.setGap(dbIssue.getGap());\n   }\n \n   private void resolveSeverity(IssueDto dbIssue, DefaultIssue issue) {"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "issue.setEffortToFix(cri.effortToFix);",
        "fixed_code": "issue.setGap(cri.effortToFix);",
        "patch": "@@ -49,7 +49,7 @@ public DefaultIssue processFile(Component file, String fileLanguage) {\n       CommonRuleIssue cri = doProcessFile(file, activeRule.get());\n       if (cri != null) {\n         issue = new DefaultIssue();\n-        issue.setEffortToFix(cri.effortToFix);\n+        issue.setGap(cri.effortToFix);\n         issue.setMessage(cri.message);\n         issue.setRuleKey(ruleKey);\n         issue.setSeverity(activeRule.get().getSeverity());"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "doc.setEffortToFix(DatabaseUtils.getDouble(rs, 6));",
        "fixed_code": "doc.setGap(DatabaseUtils.getDouble(rs, 6));",
        "patch": "@@ -164,7 +164,7 @@ protected IssueDoc read(ResultSet rs) throws SQLException {\n     doc.setTechnicalUpdateDate(new Date(rs.getLong(3)));\n     doc.setActionPlanKey(rs.getString(4));\n     doc.setAssignee(rs.getString(5));\n-    doc.setEffortToFix(DatabaseUtils.getDouble(rs, 6));\n+    doc.setGap(DatabaseUtils.getDouble(rs, 6));\n     doc.setAttributes(rs.getString(7));\n     doc.setLine(DatabaseUtils.getInt(rs, 8));\n     doc.setMessage(rs.getString(9));"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "\"No SCM info has been found for issue DefaultIssue[key=<null>,type=VULNERABILITY,componentUuid=<null>,componentKey=<null>,moduleUuid=<null>,moduleUuidPath=<null>,projectUuid=<null>,projectKey=<null>,ruleKey=<null>,language=<null>,severity=<null>,manualSeverity=false,message=<null>,line=2,effortToFix=<null>,debt=<null>,status=<null>,resolution=<null>,reporter=<null>,assignee=<null>,checksum=<null>,attributes=<null>,authorLogin=<null>,actionPlanKey=<null>,comments=<null>,tags=<null>,locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,beingClosed=false,onDisabledRule=false,isChanged=false,sendNotifications=false,selectedAt=<null>]\");",
        "fixed_code": "\"No SCM info has been found for issue DefaultIssue[key=<null>,type=VULNERABILITY,componentUuid=<null>,componentKey=<null>,moduleUuid=<null>,moduleUuidPath=<null>,projectUuid=<null>,projectKey=<null>,ruleKey=<null>,language=<null>,severity=<null>,manualSeverity=false,message=<null>,line=2,gap=<null>,effort=<null>,status=<null>,resolution=<null>,reporter=<null>,assignee=<null>,checksum=<null>,attributes=<null>,authorLogin=<null>,actionPlanKey=<null>,comments=<null>,tags=<null>,locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,beingClosed=false,onDisabledRule=false,isChanged=false,sendNotifications=false,selectedAt=<null>]\");",
        "patch": "@@ -181,7 +181,7 @@ public void display_warning_when_line_is_above_max_size() throws Exception {\n     underTest.onIssue(FILE, issue);\n \n     assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\n-      \"No SCM info has been found for issue DefaultIssue[key=<null>,type=VULNERABILITY,componentUuid=<null>,componentKey=<null>,moduleUuid=<null>,moduleUuidPath=<null>,projectUuid=<null>,projectKey=<null>,ruleKey=<null>,language=<null>,severity=<null>,manualSeverity=false,message=<null>,line=2,effortToFix=<null>,debt=<null>,status=<null>,resolution=<null>,reporter=<null>,assignee=<null>,checksum=<null>,attributes=<null>,authorLogin=<null>,actionPlanKey=<null>,comments=<null>,tags=<null>,locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,beingClosed=false,onDisabledRule=false,isChanged=false,sendNotifications=false,selectedAt=<null>]\");\n+      \"No SCM info has been found for issue DefaultIssue[key=<null>,type=VULNERABILITY,componentUuid=<null>,componentKey=<null>,moduleUuid=<null>,moduleUuidPath=<null>,projectUuid=<null>,projectKey=<null>,ruleKey=<null>,language=<null>,severity=<null>,manualSeverity=false,message=<null>,line=2,gap=<null>,effort=<null>,status=<null>,resolution=<null>,reporter=<null>,assignee=<null>,checksum=<null>,attributes=<null>,authorLogin=<null>,actionPlanKey=<null>,comments=<null>,tags=<null>,locations=<null>,creationDate=<null>,updateDate=<null>,closeDate=<null>,currentChange=<null>,changes=<null>,isNew=true,beingClosed=false,onDisabledRule=false,isChanged=false,sendNotifications=false,selectedAt=<null>]\");\n   }\n \n   private void setSingleChangeset(String author, Long date, String revision) {"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": ".setEffortToFix(10.0);",
        "fixed_code": ".setGap(10.0);",
        "patch": "@@ -137,7 +137,7 @@ public void load_issues_of_compute_engine_common_rules() throws Exception {\n     DefaultIssue ceIssue = new DefaultIssue()\n       .setRuleKey(RuleKey.of(CommonRuleKeys.commonRepositoryForLang(\"java\"), \"InsufficientCoverage\"))\n       .setMessage(\"not enough coverage\")\n-      .setEffortToFix(10.0);\n+      .setGap(10.0);\n     when(commonRuleEngine.process(FILE)).thenReturn(asList(ceIssue));\n \n     Input<DefaultIssue> input = underTest.create(FILE);"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": ".setDebt(Duration.create(10l));",
        "fixed_code": ".setEffort(Duration.create(10l));",
        "patch": "@@ -256,7 +256,7 @@ public void get_issues() throws Exception {\n       .setSeverity(\"MAJOR\")\n       .setStatus(\"CLOSED\")\n       .setResolution(\"FIXED\")\n-      .setDebt(Duration.create(10l));\n+      .setEffort(Duration.create(10l));\n \n     MeasureComputerContextImpl underTest = newContext(PROJECT_REF, Arrays.asList(issue));\n "
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": ".setDebt(Duration.create(effort));",
        "fixed_code": ".setEffort(Duration.create(effort));",
        "patch": "@@ -573,7 +573,7 @@ private static DefaultIssue newCodeSmellIssue(long effort, String severity) {\n \n   private static DefaultIssue newIssue(long effort, String severity, RuleType type) {\n     return newIssue(severity, type)\n-      .setDebt(Duration.create(effort));\n+      .setEffort(Duration.create(effort));\n   }\n \n   private static DefaultIssue newIssue(String severity, RuleType type) {"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "doc.setEffortToFix(3.14);",
        "fixed_code": "doc.setGap(3.14);",
        "patch": "@@ -70,7 +70,7 @@ public static IssueDoc newDoc() {\n     doc.setAuthorLogin(\"roger\");\n     doc.setLanguage(\"xoo\");\n     doc.setComponentUuid(\"FILE_1\");\n-    doc.setEffortToFix(3.14);\n+    doc.setGap(3.14);\n     doc.setFilePath(\"src/Foo.xoo\");\n     doc.setDirectoryPath(\"/src\");\n     doc.setMessage(\"the message\");"
    },
    {
        "commit_id": "79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "commit_message": "SONAR-7345 Rename Issue debt to effort in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79de4ddfda36dd889c6001a1cd509bd48962dbc0",
        "buggy_code": "issue.setEffortToFix(effortToFix);",
        "fixed_code": "issue.setGap(effortToFix);",
        "patch": "@@ -155,7 +155,7 @@ public DefaultIssue build() {\n     issue.setMessage(message);\n     issue.setSeverity(severity);\n     issue.setManualSeverity(false);\n-    issue.setEffortToFix(effortToFix);\n+    issue.setGap(effortToFix);\n     issue.setLine(line);\n     issue.setReporter(reporter);\n     issue.setAssignee(assignee);"
    },
    {
        "commit_id": "5c2cfd0857f5078163484eca820861fc0cabc3f4",
        "commit_message": "SONAR-7455 Update \"Issue Filter\" and \"Project Issue Filter\" widgets to support issue types",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c2cfd0857f5078163484eca820861fc0cabc3f4",
        "buggy_code": "options = {\"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",",
        "fixed_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",",
        "patch": "@@ -32,7 +32,7 @@\n @WidgetProperties({\n   @WidgetProperty(key = IssueFilterWidget.FILTER_PROPERTY, type = WidgetPropertyType.ISSUE_FILTER, optional = false),\n   @WidgetProperty(key = IssueFilterWidget.DISTRIBUTION_AXIS_PROPERTY, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"severities\",\n-    options = {\"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",\n+    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"projectUuids\", \"assignees\", \"reporters\",\n       \"authors\", \"languages\", \"actionPlans\", \"createdAt\"}),\n   @WidgetProperty(key = IssueFilterWidget.DISPLAY_FILTER_DESCRIPTION, type = WidgetPropertyType.BOOLEAN, defaultValue = \"false\"),\n   @WidgetProperty(key = IssueFilterWidget.DISPLAY_MODE, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"count\", options = {\"count\", \"debt\"})"
    },
    {
        "commit_id": "5c2cfd0857f5078163484eca820861fc0cabc3f4",
        "commit_message": "SONAR-7455 Update \"Issue Filter\" and \"Project Issue Filter\" widgets to support issue types",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c2cfd0857f5078163484eca820861fc0cabc3f4",
        "buggy_code": "options = {\"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",",
        "fixed_code": "options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",",
        "patch": "@@ -32,7 +32,7 @@\n @WidgetProperties({\n   @WidgetProperty(key = ProjectIssueFilterWidget.FILTER_PROPERTY, type = WidgetPropertyType.ISSUE_FILTER, optional = false),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISTRIBUTION_AXIS_PROPERTY, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"severities\",\n-    options = {\"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",\n+    options = {\"types\", \"severities\", \"resolutions\", \"statuses\", \"rules\", \"tags\", \"assignees\", \"reporters\", \"authors\",\n       \"languages\", \"actionPlans\", \"createdAt\"}),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISPLAY_FILTER_DESCRIPTION, type = WidgetPropertyType.BOOLEAN, defaultValue = \"false\"),\n   @WidgetProperty(key = ProjectIssueFilterWidget.DISPLAY_MODE, type = WidgetPropertyType.SINGLE_SELECT_LIST, defaultValue = \"count\", options = {\"count\", \"debt\"})"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "private void process(List<RuleDebt> ruleDebts,",
        "fixed_code": "private static void process(List<RuleDebt> ruleDebts,",
        "patch": "@@ -103,7 +103,7 @@ private static SMInputFactory initStax() {\n     return new SMInputFactory(xmlFactory);\n   }\n \n-  private void process(List<RuleDebt> ruleDebts,\n+  private static void process(List<RuleDebt> ruleDebts,\n     ValidationMessages validationMessages, SMInputCursor chcCursor) throws XMLStreamException {\n     SMInputCursor cursor = chcCursor.childElementCursor();\n     while (cursor.getNext() != null) {"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "private List<GroupWithPermissionDto> toGroupQueryResult(List<GroupWithPermissionDto> dtos, PermissionQuery query) {",
        "fixed_code": "private static List<GroupWithPermissionDto> toGroupQueryResult(List<GroupWithPermissionDto> dtos, PermissionQuery query) {",
        "patch": "@@ -82,7 +82,7 @@ private Long componentId(@Nullable String componentKey) {\n     }\n   }\n \n-  private List<GroupWithPermissionDto> toGroupQueryResult(List<GroupWithPermissionDto> dtos, PermissionQuery query) {\n+  private static List<GroupWithPermissionDto> toGroupQueryResult(List<GroupWithPermissionDto> dtos, PermissionQuery query) {\n     addAnyoneGroup(dtos, query);\n     List<GroupWithPermissionDto> filteredDtos = filterMembership(dtos, query);\n "
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "jarPath = root.getPath().substring(5, root.getPath().indexOf(\"!\"));",
        "fixed_code": "jarPath = root.getPath().substring(5, root.getPath().indexOf('!'));",
        "patch": "@@ -105,7 +105,7 @@ static Collection<String> listResources(ClassLoader classLoader, String rootPath\n           rootDirectory = StringUtils.substringBeforeLast(rootPath, \"/\");\n         }\n         //strip out only the JAR file\n-        jarPath = root.getPath().substring(5, root.getPath().indexOf(\"!\"));\n+        jarPath = root.getPath().substring(5, root.getPath().indexOf('!'));\n         jar = new JarFile(URLDecoder.decode(jarPath, CharEncoding.UTF_8));\n         Enumeration<JarEntry> entries = jar.entries();\n         while (entries.hasMoreElements()) {"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "private void updateRuleDebtDefinitions(RulesDefinition.NewRule newRule, String repoKey, String ruleKey, List<RuleDebt> ruleDebts) {",
        "fixed_code": "private static void updateRuleDebtDefinitions(RulesDefinition.NewRule newRule, String repoKey, String ruleKey, List<RuleDebt> ruleDebts) {",
        "patch": "@@ -110,7 +110,7 @@ void complete(RulesDefinition.Context context) {\n     }\n   }\n \n-  private void updateRuleDebtDefinitions(RulesDefinition.NewRule newRule, String repoKey, String ruleKey, List<RuleDebt> ruleDebts) {\n+  private static void updateRuleDebtDefinitions(RulesDefinition.NewRule newRule, String repoKey, String ruleKey, List<RuleDebt> ruleDebts) {\n     RuleDebt ruleDebt = findRequirement(ruleDebts, repoKey, ruleKey);\n     if (ruleDebt != null) {\n       newRule.setDebtRemediationFunction(remediationFunction(DebtRemediationFunction.Type.valueOf(ruleDebt.function()),"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "private void createOrUpdateUsabilityCharacteristicAndItsSubCharacteristic(CharacteristicsContext characteristicsContext, int newUsabilityOrder)",
        "fixed_code": "private static void createOrUpdateUsabilityCharacteristicAndItsSubCharacteristic(CharacteristicsContext characteristicsContext, int newUsabilityOrder)",
        "patch": "@@ -117,7 +117,7 @@ private static int moveCharacteristicsDownToBeAbleToInsertUsability(Characterist\n     return usabilityOder;\n   }\n \n-  private void createOrUpdateUsabilityCharacteristicAndItsSubCharacteristic(CharacteristicsContext characteristicsContext, int newUsabilityOrder)\n+  private static void createOrUpdateUsabilityCharacteristicAndItsSubCharacteristic(CharacteristicsContext characteristicsContext, int newUsabilityOrder)\n     throws SQLException {\n     String usabilityKey = USABILITY_KEY;\n     Characteristic usability = characteristicsContext.findCharacteristicByKey(usabilityKey);"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "int semiColonPos = s.indexOf(\":\");",
        "fixed_code": "int semiColonPos = s.indexOf(':');",
        "patch": "@@ -56,7 +56,7 @@ public static RuleKey of(String repository, String rule) {\n    * if the format is not valid.\n    */\n   public static RuleKey parse(String s) {\n-    int semiColonPos = s.indexOf(\":\");\n+    int semiColonPos = s.indexOf(':');\n     Preconditions.checkArgument(semiColonPos > 0, \"Invalid rule key: \" + s);\n     String key = s.substring(0, semiColonPos);\n     String repo = s.substring(semiColonPos + 1);"
    },
    {
        "commit_id": "524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/524ccdd2cf4e89b0d656ae269c378fd41534e33a",
        "buggy_code": "checkArgument(backgroundColor.length() == 7 && backgroundColor.startsWith(\"#\"),",
        "fixed_code": "checkArgument(backgroundColor.length() == 7 && backgroundColor.indexOf('#') == 0,",
        "patch": "@@ -100,7 +100,7 @@ public Display build() {\n \n     private void validateBackgroundColor() {\n       checkArgument(isNotBlank(backgroundColor), \"Background color must not be blank\");\n-      checkArgument(backgroundColor.length() == 7 && backgroundColor.startsWith(\"#\"),\n+      checkArgument(backgroundColor.length() == 7 && backgroundColor.indexOf('#') == 0,\n         \"Background color must begin with a sharp followed by 6 characters\");\n     }\n   }"
    },
    {
        "commit_id": "18e410a8aa104c75bc3ad8a97747fc18cb5d58a5",
        "commit_message": "SONAR-7336 new WS api/issues/set_type\n\nThe ability to change issue type is also available from api/issues/bulk_change",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/18e410a8aa104c75bc3ad8a97747fc18cb5d58a5",
        "buggy_code": "assertThat(container.size()).isEqualTo(16);",
        "fixed_code": "assertThat(container.size()).isEqualTo(17);",
        "patch": "@@ -29,6 +29,6 @@ public class IssueWsModuleTest {\n   public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new IssueWsModule().configure(container);\n-    assertThat(container.size()).isEqualTo(16);\n+    assertThat(container.size()).isEqualTo(17);\n   }\n }"
    },
    {
        "commit_id": "439960f954249a807ea7c11ba86466c026a84233",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/439960f954249a807ea7c11ba86466c026a84233",
        "buggy_code": "private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {",
        "fixed_code": "private static Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {",
        "patch": "@@ -154,7 +154,7 @@ private static String annotatedEngineKey(Object annotatedClassOrObject) {\n     return StringUtils.defaultIfEmpty(key, clazz.getCanonicalName());\n   }\n \n-  private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n+  private static Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n     try {\n       Object check = checkClassOrInstance;\n       if (check instanceof Class) {"
    },
    {
        "commit_id": "439960f954249a807ea7c11ba86466c026a84233",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/439960f954249a807ea7c11ba86466c026a84233",
        "buggy_code": "private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {",
        "fixed_code": "private static Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {",
        "patch": "@@ -74,7 +74,7 @@ public Object createCheck(ActiveRule activeRule) {\n     return null;\n   }\n \n-  private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n+  private static Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n     try {\n       Object check = checkClassOrInstance;\n       if (check instanceof Class) {"
    },
    {
        "commit_id": "439960f954249a807ea7c11ba86466c026a84233",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/439960f954249a807ea7c11ba86466c026a84233",
        "buggy_code": "private Rule create(String repositoryKey, Class annotatedClass) {",
        "fixed_code": "private static Rule create(String repositoryKey, Class annotatedClass) {",
        "patch": "@@ -55,7 +55,7 @@ public List<Rule> parse(String repositoryKey, Collection<Class> annotatedClasses\n     return rules;\n   }\n \n-  private Rule create(String repositoryKey, Class annotatedClass) {\n+  private static Rule create(String repositoryKey, Class annotatedClass) {\n     org.sonar.check.Rule ruleAnnotation = AnnotationUtils.getAnnotation(annotatedClass, org.sonar.check.Rule.class);\n     if (ruleAnnotation != null) {\n       return toRule(repositoryKey, annotatedClass, ruleAnnotation);"
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private Collection<Component> search(ComponentQuery query, List<? extends Component> allComponents) {",
        "fixed_code": "private static Collection<Component> search(ComponentQuery query, List<? extends Component> allComponents) {",
        "patch": "@@ -58,7 +58,7 @@ public DefaultComponentQueryResult find(ComponentQuery query, List<Component> al\n     }\n   }\n \n-  private Collection<Component> search(ComponentQuery query, List<? extends Component> allComponents) {\n+  private static Collection<Component> search(ComponentQuery query, List<? extends Component> allComponents) {\n     return newArrayList(Iterables.filter(allComponents, new MatchQuery(query)));\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private RuleDebt processRule(ValidationMessages validationMessages, SMInputCursor cursor) throws XMLStreamException {",
        "fixed_code": "private static RuleDebt processRule(ValidationMessages validationMessages, SMInputCursor cursor) throws XMLStreamException {",
        "patch": "@@ -120,7 +120,7 @@ private void process(List<RuleDebt> ruleDebts,\n   }\n \n   @CheckForNull\n-  private RuleDebt processRule(ValidationMessages validationMessages, SMInputCursor cursor) throws XMLStreamException {\n+  private static RuleDebt processRule(ValidationMessages validationMessages, SMInputCursor cursor) throws XMLStreamException {\n     String ruleRepositoryKey = cursor.collectDescendantText().trim();\n     String ruleKey = null;\n     Properties properties = new Properties();"
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private IssueFilterDto findFilterWithSameName(List<IssueFilterDto> dtos, String name) {",
        "fixed_code": "private static IssueFilterDto findFilterWithSameName(List<IssueFilterDto> dtos, String name) {",
        "patch": "@@ -283,7 +283,7 @@ private List<IssueFilterDto> selectSharedFilters() {\n   }\n \n   @CheckForNull\n-  private IssueFilterDto findFilterWithSameName(List<IssueFilterDto> dtos, String name) {\n+  private static IssueFilterDto findFilterWithSameName(List<IssueFilterDto> dtos, String name) {\n     return Iterables.find(dtos, new IssueFilterDtoMatchName(name), null);\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private List<GroupWithPermissionDto> filterMembership(List<GroupWithPermissionDto> dtos, PermissionQuery query) {",
        "fixed_code": "private static List<GroupWithPermissionDto> filterMembership(List<GroupWithPermissionDto> dtos, PermissionQuery query) {",
        "patch": "@@ -99,7 +99,7 @@ private static int offset(PermissionQuery query) {\n     return (pageIndex - 1) * pageSize;\n   }\n \n-  private List<GroupWithPermissionDto> filterMembership(List<GroupWithPermissionDto> dtos, PermissionQuery query) {\n+  private static List<GroupWithPermissionDto> filterMembership(List<GroupWithPermissionDto> dtos, PermissionQuery query) {\n     return newArrayList(Iterables.filter(dtos, new GroupWithPermissionMatchQuery(query)));\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private RuleDebt findRequirement(List<RuleDebt> requirements, final String repoKey, final String ruleKey) {",
        "fixed_code": "private static RuleDebt findRequirement(List<RuleDebt> requirements, final String repoKey, final String ruleKey) {",
        "patch": "@@ -190,7 +190,7 @@ private Collection<String> getContributingPluginListWithoutSqale() {\n   }\n \n   @CheckForNull\n-  private RuleDebt findRequirement(List<RuleDebt> requirements, final String repoKey, final String ruleKey) {\n+  private static RuleDebt findRequirement(List<RuleDebt> requirements, final String repoKey, final String ruleKey) {\n     return Iterables.find(requirements, new RuleDebtMatchRepoKeyAndRuleKey(repoKey, ruleKey), null);\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private ComponentMapper mapper(DbSession session) {",
        "fixed_code": "private static ComponentMapper mapper(DbSession session) {",
        "patch": "@@ -318,7 +318,7 @@ public void delete(DbSession session, long componentId) {\n     mapper(session).delete(componentId);\n   }\n \n-  private ComponentMapper mapper(DbSession session) {\n+  private static ComponentMapper mapper(DbSession session) {\n     return session.getMapper(ComponentMapper.class);\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private ActiveRuleMapper mapper(DbSession session) {",
        "fixed_code": "private static ActiveRuleMapper mapper(DbSession session) {",
        "patch": "@@ -181,7 +181,7 @@ public void deleteParamsByRuleParam(DbSession dbSession, RuleDto rule, String pa\n     }\n   }\n \n-  private ActiveRuleMapper mapper(DbSession session) {\n+  private static ActiveRuleMapper mapper(DbSession session) {\n     return session.getMapper(ActiveRuleMapper.class);\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private RuleMapper mapper(DbSession session) {",
        "fixed_code": "private static RuleMapper mapper(DbSession session) {",
        "patch": "@@ -97,7 +97,7 @@ public void update(DbSession session, RuleDto dto) {\n     mapper(session).update(dto);\n   }\n \n-  private RuleMapper mapper(DbSession session) {\n+  private static RuleMapper mapper(DbSession session) {\n     return session.getMapper(RuleMapper.class);\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private boolean hasParameter(String parameter, Collection<RuleParameter> customRuleParams) {",
        "fixed_code": "private static boolean hasParameter(String parameter, Collection<RuleParameter> customRuleParams) {",
        "patch": "@@ -124,7 +124,7 @@ private void insertCustomRuleParameterIfNotAlreadyExisting(RuleParameter templat\n     }\n   }\n \n-  private boolean hasParameter(String parameter, Collection<RuleParameter> customRuleParams) {\n+  private static boolean hasParameter(String parameter, Collection<RuleParameter> customRuleParams) {\n     return Iterables.any(customRuleParams, new MatchParameter(parameter));\n   }\n "
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private void createSubCharacteristic(CharacteristicsContext characteristicsContext,",
        "fixed_code": "private static void createSubCharacteristic(CharacteristicsContext characteristicsContext,",
        "patch": "@@ -136,7 +136,7 @@ private void createOrUpdateUsabilityCharacteristicAndItsSubCharacteristic(Charac\n     createSubCharacteristic(characteristicsContext, USABILITY_KEY + COMPLIANCE_KEY_SUFFIX, \"Usability \" + COMPLIANCE_NAME, usabilityKey);\n   }\n \n-  private void createSubCharacteristic(CharacteristicsContext characteristicsContext,\n+  private static void createSubCharacteristic(CharacteristicsContext characteristicsContext,\n     String subCharacteristicKey, String subCharacteristicName, String parentKey) throws SQLException {\n     Characteristic parent = characteristicsContext.findCharacteristicByKey(parentKey);\n     if (parent != null) {"
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private List<User> selectUsersFromLoginOrEmail(Context context, Collection<String> authors) throws SQLException {",
        "fixed_code": "private static List<User> selectUsersFromLoginOrEmail(Context context, Collection<String> authors) throws SQLException {",
        "patch": "@@ -95,7 +95,7 @@ public void execute(final Context context) throws SQLException {\n     }\n   }\n \n-  private List<User> selectUsersFromLoginOrEmail(Context context, Collection<String> authors) throws SQLException {\n+  private static List<User> selectUsersFromLoginOrEmail(Context context, Collection<String> authors) throws SQLException {\n     final List<User> users = newArrayList();\n     StringBuilder sql = new StringBuilder(\"SELECT u.id, u.login, u.email, u.scm_accounts FROM users u WHERE u.active=? AND (\");\n     for (int i = 0; i < authors.size(); i++) {"
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private void removeUserRolePermissions(Context context, String tableName, String pluralName) throws SQLException {",
        "fixed_code": "private static void removeUserRolePermissions(Context context, String tableName, String pluralName) throws SQLException {",
        "patch": "@@ -46,7 +46,7 @@ public void execute(Context context) throws SQLException {\n     removeUserRolePermissions(context, \"group_roles\", \"group roles\");\n   }\n \n-  private void removeUserRolePermissions(Context context, String tableName, String pluralName) throws SQLException {\n+  private static void removeUserRolePermissions(Context context, String tableName, String pluralName) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"SELECT r.id \" +\n       \"FROM \" + tableName + \" r \" +"
    },
    {
        "commit_id": "523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/523a2a4eb9fcfaae27f1cfe4730b2d2845cbf416",
        "buggy_code": "private void execute(Context context, String tableName, String displayName) throws SQLException {",
        "fixed_code": "private static void execute(Context context, String tableName, String displayName) throws SQLException {",
        "patch": "@@ -41,7 +41,7 @@ public void execute(Context context) throws SQLException {\n     execute(context, \"user_roles\", \"users\");\n   }\n \n-  private void execute(Context context, String tableName, String displayName) throws SQLException {\n+  private static void execute(Context context, String tableName, String displayName) throws SQLException {\n     MassUpdate update = context.prepareMassUpdate().rowPluralName(displayName);\n     update.select(\"SELECT r.id FROM \" + tableName + \" r WHERE r.role=?\").setString(1, \"dryRunScan\");\n     update.update(\"DELETE FROM \" + tableName + \" WHERE id=?\");"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "unresolvedVariations[period.getIndex() - 1] = new Double(currentCounters.counterForPeriod(period.getIndex()).unresolved);",
        "fixed_code": "unresolvedVariations[period.getIndex() - 1] = (double) currentCounters.counterForPeriod(period.getIndex()).unresolved;",
        "patch": "@@ -184,7 +184,7 @@ private void addMeasuresByPeriod(Component component) {\n     if (!periodsHolder.getPeriods().isEmpty()) {\n       Double[] unresolvedVariations = new Double[PeriodsHolder.MAX_NUMBER_OF_PERIODS];\n       for (Period period : periodsHolder.getPeriods()) {\n-        unresolvedVariations[period.getIndex() - 1] = new Double(currentCounters.counterForPeriod(period.getIndex()).unresolved);\n+        unresolvedVariations[period.getIndex() - 1] = (double) currentCounters.counterForPeriod(period.getIndex()).unresolved;\n       }\n       measureRepository.add(component, metricRepository.getByKey(NEW_VIOLATIONS_KEY), Measure.newMeasureBuilder()\n         .setVariations(new MeasureVariations(unresolvedVariations))"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private IssueProcessor getIssueProcessor(String sort) {",
        "fixed_code": "private static IssueProcessor getIssueProcessor(String sort) {",
        "patch": "@@ -50,7 +50,7 @@ public List<IssueDto> sort() {\n     return issues;\n   }\n \n-  private IssueProcessor getIssueProcessor(String sort) {\n+  private static IssueProcessor getIssueProcessor(String sort) {\n     if (IssueQuery.SORT_BY_ASSIGNEE.equals(sort)) {\n       return new AssigneeSortIssueProcessor();\n     }"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private IssueFilterResult createIssueFilterResult(SearchResult<IssueDoc> issues, SearchOptions options) {",
        "fixed_code": "private static IssueFilterResult createIssueFilterResult(SearchResult<IssueDoc> issues, SearchOptions options) {",
        "patch": "@@ -317,7 +317,7 @@ private boolean isAdmin(String user) {\n     return authorizationDao.selectGlobalPermissions(user).contains(GlobalPermissions.SYSTEM_ADMIN);\n   }\n \n-  private IssueFilterResult createIssueFilterResult(SearchResult<IssueDoc> issues, SearchOptions options) {\n+  private static IssueFilterResult createIssueFilterResult(SearchResult<IssueDoc> issues, SearchOptions options) {\n     Paging paging = Paging.forPageIndex(options.getPage()).withPageSize(options.getLimit()).andTotal((int) issues.getTotal());\n     return new IssueFilterResult(issues.getDocs(), paging);\n   }"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private void processRow(ResultSet rs, Map<String, Dto> dtosByProjectUuid) throws SQLException {",
        "fixed_code": "private static void processRow(ResultSet rs, Map<String, Dto> dtosByProjectUuid) throws SQLException {",
        "patch": "@@ -182,7 +182,7 @@ private PreparedStatement createStatement(DbClient dbClient, DbSession session,\n     return stmt;\n   }\n \n-  private void processRow(ResultSet rs, Map<String, Dto> dtosByProjectUuid) throws SQLException {\n+  private static void processRow(ResultSet rs, Map<String, Dto> dtosByProjectUuid) throws SQLException {\n     String projectUuid = rs.getString(1);\n     String userLogin = rs.getString(2);\n     String group = rs.getString(3);"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private Collection<String> escapeValuesForFacetInclusion(@Nullable Collection<String> values) {",
        "fixed_code": "private static Collection<String> escapeValuesForFacetInclusion(@Nullable Collection<String> values) {",
        "patch": "@@ -541,7 +541,7 @@ private AggregationBuilder createAssigneesFacet(IssueQuery query, Map<String, Fi\n       .subAggregation(facetTopAggregation);\n   }\n \n-  private Collection<String> escapeValuesForFacetInclusion(@Nullable Collection<String> values) {\n+  private static Collection<String> escapeValuesForFacetInclusion(@Nullable Collection<String> values) {\n     return values == null ? Arrays.<String>asList() : Collections2.transform(values, new Function<String, String>() {\n       @Override\n       public String apply(String input) {"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private void addUserToContextIfSubscribed(Context context, @Nullable String user, Multimap<String, NotificationChannel> subscribedRecipients) {",
        "fixed_code": "private static void addUserToContextIfSubscribed(Context context, @Nullable String user, Multimap<String, NotificationChannel> subscribedRecipients) {",
        "patch": "@@ -76,7 +76,7 @@ public void dispatch(Notification notification, Context context) {\n     }\n   }\n \n-  private void addUserToContextIfSubscribed(Context context, @Nullable String user, Multimap<String, NotificationChannel> subscribedRecipients) {\n+  private static void addUserToContextIfSubscribed(Context context, @Nullable String user, Multimap<String, NotificationChannel> subscribedRecipients) {\n     if (user != null) {\n       Collection<NotificationChannel> channels = subscribedRecipients.get(user);\n       for (NotificationChannel channel : channels) {"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private void notify(String author, Context context, Multimap<String, NotificationChannel> subscribedRecipients) {",
        "fixed_code": "private static void notify(String author, Context context, Multimap<String, NotificationChannel> subscribedRecipients) {",
        "patch": "@@ -66,7 +66,7 @@ public void dispatch(Notification notification, Context context) {\n     }\n   }\n \n-  private void notify(String author, Context context, Multimap<String, NotificationChannel> subscribedRecipients) {\n+  private static void notify(String author, Context context, Multimap<String, NotificationChannel> subscribedRecipients) {\n     for (Map.Entry<String, Collection<NotificationChannel>> channelsByRecipients : subscribedRecipients.asMap().entrySet()) {\n       String login = channelsByRecipients.getKey();\n       // Do not notify the person that resolved the issue"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private WidgetPropertyMapper mapper(DbSession session) {",
        "fixed_code": "private static WidgetPropertyMapper mapper(DbSession session) {",
        "patch": "@@ -83,7 +83,7 @@ public List<Void> apply(List<Long> input) {\n     });\n   }\n \n-  private WidgetPropertyMapper mapper(DbSession session) {\n+  private static WidgetPropertyMapper mapper(DbSession session) {\n     return session.getMapper(WidgetPropertyMapper.class);\n   }\n }"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private int countGroups(DbSession session, PermissionQuery query, long templateId, @Nullable String groupName) {",
        "fixed_code": "private static int countGroups(DbSession session, PermissionQuery query, long templateId, @Nullable String groupName) {",
        "patch": "@@ -117,7 +117,7 @@ public int countGroups(DbSession session, PermissionQuery query, long templateId\n     return countGroups(session, query, templateId, null);\n   }\n \n-  private int countGroups(DbSession session, PermissionQuery query, long templateId, @Nullable String groupName) {\n+  private static int countGroups(DbSession session, PermissionQuery query, long templateId, @Nullable String groupName) {\n     Map<String, Object> parameters = groupsParameters(query, templateId);\n     if (groupName != null) {\n       parameters.put(\"groupName\", groupName.toUpperCase());"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private void configureFields(ActiveRule activeRule, Object check) {",
        "fixed_code": "private static void configureFields(ActiveRule activeRule, Object check) {",
        "patch": "@@ -171,7 +171,7 @@ private static RuntimeException failToInstantiateCheck(ActiveRule activeRule, Ob\n     throw new IllegalStateException(String.format(\"Fail to instantiate class %s for rule %s\", checkClassOrInstance, activeRule.ruleKey()), e);\n   }\n \n-  private void configureFields(ActiveRule activeRule, Object check) {\n+  private static void configureFields(ActiveRule activeRule, Object check) {\n     for (Map.Entry<String, String> param : activeRule.params().entrySet()) {\n       Field field = getField(check, param.getKey());\n       if (field == null) {"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private void configureFields(ActiveRule activeRule, Object check) {",
        "fixed_code": "private static void configureFields(ActiveRule activeRule, Object check) {",
        "patch": "@@ -89,7 +89,7 @@ private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n     }\n   }\n \n-  private void configureFields(ActiveRule activeRule, Object check) {\n+  private static void configureFields(ActiveRule activeRule, Object check) {\n     for (ActiveRuleParam param : activeRule.getActiveRuleParams()) {\n       Field field = getField(check, param.getKey());\n       if (field == null) {"
    },
    {
        "commit_id": "902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/902099c8dd84d1e3d845caf8a4b4a445b3903439",
        "buggy_code": "private Rule toRule(String repositoryKey, Class clazz, org.sonar.check.Rule ruleAnnotation) {",
        "fixed_code": "private static Rule toRule(String repositoryKey, Class clazz, org.sonar.check.Rule ruleAnnotation) {",
        "patch": "@@ -64,7 +64,7 @@ private Rule create(String repositoryKey, Class annotatedClass) {\n     return null;\n   }\n \n-  private Rule toRule(String repositoryKey, Class clazz, org.sonar.check.Rule ruleAnnotation) {\n+  private static Rule toRule(String repositoryKey, Class clazz, org.sonar.check.Rule ruleAnnotation) {\n     String ruleKey = StringUtils.defaultIfEmpty(ruleAnnotation.key(), clazz.getCanonicalName());\n     String ruleName = StringUtils.defaultIfEmpty(ruleAnnotation.name(), null);\n     String description = StringUtils.defaultIfEmpty(ruleAnnotation.description(), null);"
    },
    {
        "commit_id": "c287097d62ee14046b4761e493c874da6f1d54da",
        "commit_message": "Fix timings in performance tests due to hardware/OS change",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c287097d62ee14046b4761e493c874da6f1d54da",
        "buggy_code": "assertDurationAround(startupDuration, 46000);",
        "fixed_code": "assertDurationAround(startupDuration, 41000);",
        "patch": "@@ -47,7 +47,7 @@ public void server_startup_and_shutdown() throws Exception {\n       .build();\n     try {\n       long startupDuration = start(orchestrator);\n-      assertDurationAround(startupDuration, 46000);\n+      assertDurationAround(startupDuration, 41000);\n \n       long shutdownDuration = stop(orchestrator);\n       // can't use percent margins because logs are second-grained but not milliseconds"
    },
    {
        "commit_id": "6fc8aaeac828ecb18afa7c2f750b802b038c938b",
        "commit_message": "Fix DB tests on non-H2",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6fc8aaeac828ecb18afa7c2f750b802b038c938b",
        "buggy_code": "assertThat(db.countRowsOfTable(\"ACTIVITIES\")).isEqualTo(1);",
        "fixed_code": "assertThat(db.countRowsOfTable(\"activities\")).isEqualTo(1);",
        "patch": "@@ -42,6 +42,6 @@ public void test() throws Exception {\n \n     underTest.execute();\n \n-    assertThat(db.countRowsOfTable(\"ACTIVITIES\")).isEqualTo(1);\n+    assertThat(db.countRowsOfTable(\"activities\")).isEqualTo(1);\n   }\n }"
    },
    {
        "commit_id": "5acbaf6b0c02a12525b91c87764a967b08bc9ed0",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5acbaf6b0c02a12525b91c87764a967b08bc9ed0",
        "buggy_code": ".setId((rule.getId()));",
        "fixed_code": ".setId(rule.getId());",
        "patch": "@@ -181,7 +181,7 @@ private org.sonar.api.rules.Rule toRule(RuleDto rule, List<RuleParamDto> params)\n       .setSeverity(severity != null ? RulePriority.valueOf(severity) : null)\n       .setStatus(rule.getStatus().name())\n       .setTags(rule.getTags().toArray(new String[rule.getTags().size()]))\n-      .setId((rule.getId()));\n+      .setId(rule.getId());\n     if (description != null && descriptionFormat != null) {\n       if (RuleDto.Format.HTML.equals(descriptionFormat)) {\n         apiRule.setDescription(description);"
    },
    {
        "commit_id": "5acbaf6b0c02a12525b91c87764a967b08bc9ed0",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5acbaf6b0c02a12525b91c87764a967b08bc9ed0",
        "buggy_code": "private org.sonar.server.es.SearchOptions loadCommonContext(Request request) {",
        "fixed_code": "private static org.sonar.server.es.SearchOptions loadCommonContext(Request request) {",
        "patch": "@@ -344,7 +344,7 @@ protected org.sonar.server.es.SearchOptions getQueryContext(Request request) {\n     return searchQueryContext;\n   }\n \n-  private org.sonar.server.es.SearchOptions loadCommonContext(Request request) {\n+  private static org.sonar.server.es.SearchOptions loadCommonContext(Request request) {\n     int pageSize = request.mandatoryParamAsInt(Param.PAGE_SIZE);\n     org.sonar.server.es.SearchOptions context = new org.sonar.server.es.SearchOptions().addFields(request.paramAsStrings(Param.FIELDS));\n     List<String> facets = request.paramAsStrings(Param.FACETS);"
    },
    {
        "commit_id": "79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "commit_message": "SONAR-7330 Fix MediumTests because missing Es indexes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "buggy_code": "query.setAvailableSince(request.paramAsDate(PARAM_AVAILABLE_SINCE));",
        "fixed_code": "query.setAvailableSince(request.hasParam(PARAM_AVAILABLE_SINCE) ? request.paramAsDate(PARAM_AVAILABLE_SINCE).getTime() : null);",
        "patch": "@@ -312,7 +312,7 @@ public static RuleQuery createRuleQuery(RuleQuery query, Request request) {\n     query.setQueryText(request.param(Param.TEXT_QUERY));\n     query.setSeverities(request.paramAsStrings(PARAM_SEVERITIES));\n     query.setRepositories(request.paramAsStrings(PARAM_REPOSITORIES));\n-    query.setAvailableSince(request.paramAsDate(PARAM_AVAILABLE_SINCE));\n+    query.setAvailableSince(request.hasParam(PARAM_AVAILABLE_SINCE) ? request.paramAsDate(PARAM_AVAILABLE_SINCE).getTime() : null);\n     query.setStatuses(request.paramAsEnums(PARAM_STATUSES, RuleStatus.class));\n     query.setLanguages(request.paramAsStrings(PARAM_LANGUAGES));\n     query.setActivation(request.paramAsBoolean(PARAM_ACTIVATION));"
    },
    {
        "commit_id": "79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "commit_message": "SONAR-7330 Fix MediumTests because missing Es indexes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "buggy_code": "public static ServerTester tester = new ServerTester().addXoo();",
        "fixed_code": "public static ServerTester tester = new ServerTester().withEsIndexes().addXoo();",
        "patch": "@@ -58,7 +58,7 @@ public class ProjectDataLoaderMediumTest {\n   public ExpectedException thrown = ExpectedException.none();\n \n   @ClassRule\n-  public static ServerTester tester = new ServerTester().addXoo();\n+  public static ServerTester tester = new ServerTester().withEsIndexes().addXoo();\n \n   @Rule\n   public UserSessionRule userSessionRule = UserSessionRule.forServerTester(tester);"
    },
    {
        "commit_id": "79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "commit_message": "SONAR-7330 Fix MediumTests because missing Es indexes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "buggy_code": "private ServerTester serverTester = new ServerTester();",
        "fixed_code": "private ServerTester serverTester = new ServerTester().withEsIndexes();",
        "patch": "@@ -31,7 +31,7 @@\n public class ViewsIntegrationTest {\n   private final ViewsBridgeSimulator viewsBridgeSimulator = new ViewsBridgeSimulator();\n \n-  private ServerTester serverTester = new ServerTester();\n+  private ServerTester serverTester = new ServerTester().withEsIndexes();\n \n   @After\n   public void tearDown() throws Exception {"
    },
    {
        "commit_id": "79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "commit_message": "SONAR-7330 Fix MediumTests because missing Es indexes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/79d7e818b5d2567cb20e9795a3d374c34a94ca52",
        "buggy_code": "public static ServerTester tester = new ServerTester();",
        "fixed_code": "public static ServerTester tester = new ServerTester().withEsIndexes();",
        "patch": "@@ -32,7 +32,7 @@\n public class SearchClientMediumTest {\n \n   @ClassRule\n-  public static ServerTester tester = new ServerTester();\n+  public static ServerTester tester = new ServerTester().withEsIndexes();\n \n   @Rule\n   public UserSessionRule userSessionRule = UserSessionRule.forServerTester(tester);"
    },
    {
        "commit_id": "09c9b4b254343ae14206fe4fcb850115c94f86c7",
        "commit_message": "Fix IssueDaoTest on MySQL\n\nDBUnit does not correctly handle TINYINT type on MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/09c9b4b254343ae14206fe4fcb850115c94f86c7",
        "buggy_code": "issueBuilder.setComponent(dto.getComponentKey());",
        "fixed_code": "issueBuilder.setComponent(component.key());",
        "patch": "@@ -150,7 +150,7 @@ private void formatIssue(Issues.Issue.Builder issueBuilder, IssueDto dto, Search\n       issueBuilder.setType(type);\n     }\n     ComponentDto component = data.getComponentByUuid(dto.getComponentUuid());\n-    issueBuilder.setComponent(dto.getComponentKey());\n+    issueBuilder.setComponent(component.key());\n     // Only used for the compatibility with the Java WS Client <= 4.4 used by Eclipse\n     issueBuilder.setComponentId(component.getId());\n     ComponentDto project = data.getComponentByUuid(dto.getProjectUuid());"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private CommonRuleIssue generateIssue(Optional<Measure> commentDensityMeasure, Optional<Measure> commentLinesMeasure, Optional<Measure> nclocMeasure, double minCommentDensity) {",
        "fixed_code": "private static CommonRuleIssue generateIssue(Optional<Measure> commentDensityMeasure, Optional<Measure> commentLinesMeasure, Optional<Measure> nclocMeasure, double minCommentDensity) {",
        "patch": "@@ -71,7 +71,7 @@ private double getMinDensity(ActiveRule activeRule) {\n     return min;\n   }\n \n-  private CommonRuleIssue generateIssue(Optional<Measure> commentDensityMeasure, Optional<Measure> commentLinesMeasure, Optional<Measure> nclocMeasure, double minCommentDensity) {\n+  private static CommonRuleIssue generateIssue(Optional<Measure> commentDensityMeasure, Optional<Measure> commentLinesMeasure, Optional<Measure> nclocMeasure, double minCommentDensity) {\n     int commentLines = commentLinesMeasure.isPresent() ? commentLinesMeasure.get().getIntValue() : 0;\n     int ncloc = nclocMeasure.get().getIntValue();\n     int minExpectedCommentLines = (int) Math.ceil(minCommentDensity * ncloc / (100 - minCommentDensity));"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private UnsupportedOperationException unsupported() {",
        "fixed_code": "private static UnsupportedOperationException unsupported() {",
        "patch": "@@ -71,7 +71,7 @@ public ListenableActionFuture<BulkResponse> execute() {\n     throw unsupported();\n   }\n \n-  private UnsupportedOperationException unsupported() {\n+  private static UnsupportedOperationException unsupported() {\n     throw new UnsupportedOperationException(\"See \" + ProxyBulkRequestBuilder.class.getName());\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private boolean hasNextToken(CodeReader code) {",
        "fixed_code": "private static boolean hasNextToken(CodeReader code) {",
        "patch": "@@ -47,7 +47,7 @@ public JavaConstantTokenizer(String tagBefore, String tagAfter) {\n     this.tagAfter = tagAfter;\n   }\n \n-  private boolean hasNextToken(CodeReader code) {\n+  private static boolean hasNextToken(CodeReader code) {\n     int lastChar = code.lastChar();\n     if (isJavaConstantStart(code.peek()) && !Character.isJavaIdentifierPart(lastChar) && !Character.isJavaIdentifierStart(lastChar)\n       && lastChar != DOT) {"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "public static List<String> ALL_NAMES = Lists.transform(Lists.newArrayList(values()), Enums.stringConverter(IssueType.class).reverse());",
        "fixed_code": "public static final List<String> ALL_NAMES = Lists.transform(Lists.newArrayList(values()), Enums.stringConverter(IssueType.class).reverse());",
        "patch": "@@ -51,5 +51,5 @@ public static IssueType valueOf(int dbConstant) {\n     throw new IllegalArgumentException(format(\"Unsupported value for db column ISSUES.ISSUE_TYPE: %d\", dbConstant));\n   }\n \n-  public static List<String> ALL_NAMES = Lists.transform(Lists.newArrayList(values()), Enums.stringConverter(IssueType.class).reverse());\n+  public static final List<String> ALL_NAMES = Lists.transform(Lists.newArrayList(values()), Enums.stringConverter(IssueType.class).reverse());\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private void registerProxyCredentials(Map<String, String> settings) {",
        "fixed_code": "private static void registerProxyCredentials(Map<String, String> settings) {",
        "patch": "@@ -207,7 +207,7 @@ static String getProxySynthesis(URI uri, ProxySelector proxySelector) {\n       return Joiner.on(\", \").join(descriptions);\n     }\n \n-    private void registerProxyCredentials(Map<String, String> settings) {\n+    private static void registerProxyCredentials(Map<String, String> settings) {\n       Authenticator.setDefault(new ProxyAuthenticator(\n         settings.get(HTTP_PROXY_USER),\n         settings.get(HTTP_PROXY_PASSWORD)));"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private CeActivityMapper mapper(DbSession dbSession) {",
        "fixed_code": "private static CeActivityMapper mapper(DbSession dbSession) {",
        "patch": "@@ -79,7 +79,7 @@ public int countByQuery(DbSession dbSession, CeTaskQuery query) {\n     return mapper(dbSession).countByQuery(query);\n   }\n \n-  private CeActivityMapper mapper(DbSession dbSession) {\n+  private static CeActivityMapper mapper(DbSession dbSession) {\n     return dbSession.getMapper(CeActivityMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private CeQueueMapper mapper(DbSession session) {",
        "fixed_code": "private static CeQueueMapper mapper(DbSession session) {",
        "patch": "@@ -128,7 +128,7 @@ private Optional<CeQueueDto> tryToPeek(DbSession session, String taskUuid) {\n     return Optional.of(result);\n   }\n \n-  private CeQueueMapper mapper(DbSession session) {\n+  private static CeQueueMapper mapper(DbSession session) {\n     return session.getMapper(CeQueueMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private DashboardMapper mapper(DbSession session) {",
        "fixed_code": "private static DashboardMapper mapper(DbSession session) {",
        "patch": "@@ -83,7 +83,7 @@ public DashboardDto selectAllowedByKey(DbSession session, Long key, @Nullable Lo\n     return mapper(session).selectAllowedById(key, userId != null ? userId : -1L);\n   }\n \n-  private DashboardMapper mapper(DbSession session) {\n+  private static DashboardMapper mapper(DbSession session) {\n     return session.getMapper(DashboardMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private WidgetMapper mapper(DbSession session) {",
        "fixed_code": "private static WidgetMapper mapper(DbSession session) {",
        "patch": "@@ -67,7 +67,7 @@ public Collection<WidgetDto> findAll(DbSession session) {\n     return mapper(session).selectAll();\n   }\n \n-  private WidgetMapper mapper(DbSession session) {\n+  private static WidgetMapper mapper(DbSession session) {\n     return session.getMapper(WidgetMapper.class);\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private IssueChangeMapper mapper(DbSession session) {",
        "fixed_code": "private static IssueChangeMapper mapper(DbSession session) {",
        "patch": "@@ -140,7 +140,7 @@ public boolean update(IssueChangeDto change) {\n     }\n   }\n \n-  private IssueChangeMapper mapper(DbSession session) {\n+  private static IssueChangeMapper mapper(DbSession session) {\n     return session.getMapper(IssueChangeMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private IssueMapper mapper(DbSession session) {",
        "fixed_code": "private static IssueMapper mapper(DbSession session) {",
        "patch": "@@ -143,7 +143,7 @@ public void update(DbSession session, IssueDto dto) {\n     mapper(session).update(dto);\n   }\n \n-  private IssueMapper mapper(DbSession session) {\n+  private static IssueMapper mapper(DbSession session) {\n     return session.getMapper(IssueMapper.class);\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private PermissionMapper mapper(SqlSession session) {",
        "fixed_code": "private static PermissionMapper mapper(SqlSession session) {",
        "patch": "@@ -140,7 +140,7 @@ private static Map<String, Object> groupsParameters(PermissionQuery query, @Null\n     return params;\n   }\n \n-  private PermissionMapper mapper(SqlSession session) {\n+  private static PermissionMapper mapper(SqlSession session) {\n     return session.getMapper(PermissionMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private PermissionTemplateMapper mapper(SqlSession session) {",
        "fixed_code": "private static PermissionTemplateMapper mapper(SqlSession session) {",
        "patch": "@@ -419,7 +419,7 @@ private Date now() {\n     return new Date(system.now());\n   }\n \n-  private PermissionTemplateMapper mapper(SqlSession session) {\n+  private static PermissionTemplateMapper mapper(SqlSession session) {\n     return session.getMapper(PermissionTemplateMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private Object buildStatementProxy(Class<? extends Statement> stmtClass, InvocationHandler handler) {",
        "fixed_code": "private static Object buildStatementProxy(Class<? extends Statement> stmtClass, InvocationHandler handler) {",
        "patch": "@@ -49,7 +49,7 @@ public Object invoke(Object target, Method method, Object[] args) throws Throwab\n     return result;\n   }\n \n-  private Object buildStatementProxy(Class<? extends Statement> stmtClass, InvocationHandler handler) {\n+  private static Object buildStatementProxy(Class<? extends Statement> stmtClass, InvocationHandler handler) {\n     return Proxy.newProxyInstance(ProfilingConnectionHandler.class.getClassLoader(), new Class[] {stmtClass}, handler);\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private PurgeMapper mapper(DbSession session) {",
        "fixed_code": "private static PurgeMapper mapper(DbSession session) {",
        "patch": "@@ -206,7 +206,7 @@ private List<ResourceDto> getProjects(long rootId, SqlSession session) {\n     return resourceDao.selectWholeTreeForRootId(session, rootId, Scopes.PROJECT);\n   }\n \n-  private PurgeMapper mapper(DbSession session) {\n+  private static PurgeMapper mapper(DbSession session) {\n     return session.getMapper(PurgeMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private ProjectQgateAssociationMapper mapper(SqlSession session) {",
        "fixed_code": "private static ProjectQgateAssociationMapper mapper(SqlSession session) {",
        "patch": "@@ -51,7 +51,7 @@ List<ProjectQgateAssociationDto> selectProjects(ProjectQgateAssociationQuery que\n     return selectProjects(query, gateId, 0, Integer.MAX_VALUE);\n   }\n \n-  private ProjectQgateAssociationMapper mapper(SqlSession session) {\n+  private static ProjectQgateAssociationMapper mapper(SqlSession session) {\n     return session.getMapper(ProjectQgateAssociationMapper.class);\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private RuleMapper mapper(DbSession session) {",
        "fixed_code": "private static RuleMapper mapper(DbSession session) {",
        "patch": "@@ -105,7 +105,7 @@ public void insert(DbSession session, RuleDto dto) {\n     mapper(session).insert(dto);\n   }\n \n-  private RuleMapper mapper(DbSession session) {\n+  private static RuleMapper mapper(DbSession session) {\n     return session.getMapper(RuleMapper.class);\n   }\n "
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private GroupMembershipMapper mapper(SqlSession session) {",
        "fixed_code": "private static GroupMembershipMapper mapper(SqlSession session) {",
        "patch": "@@ -111,7 +111,7 @@ List<GroupMembershipDto> selectGroups(GroupMembershipQuery query, Long userId) {\n     return selectGroups(query, userId, 0, Integer.MAX_VALUE);\n   }\n \n-  private GroupMembershipMapper mapper(SqlSession session) {\n+  private static GroupMembershipMapper mapper(SqlSession session) {\n     return session.getMapper(GroupMembershipMapper.class);\n   }\n }"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private Table<String, String, String> getProfileKeysByLanguageThenName(final Context context) throws SQLException {",
        "fixed_code": "private static Table<String, String, String> getProfileKeysByLanguageThenName(final Context context) throws SQLException {",
        "patch": "@@ -116,7 +116,7 @@ public void execute(Context context) throws SQLException {\n     }\n   }\n \n-  private Table<String, String, String> getProfileKeysByLanguageThenName(final Context context) throws SQLException {\n+  private static Table<String, String, String> getProfileKeysByLanguageThenName(final Context context) throws SQLException {\n     final Table<String, String, String> profilesByLanguageAndName = HashBasedTable.create();\n \n     Select selectProfiles = context.prepareSelect(\"SELECT kee, name, language FROM rules_profiles\");"
    },
    {
        "commit_id": "74e26bd277d246d91a08cd7d51f11bff916ee221",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/74e26bd277d246d91a08cd7d51f11bff916ee221",
        "buggy_code": "private void addRuleProperty(Rule rule, Field field) {",
        "fixed_code": "private static void addRuleProperty(Rule rule, Field field) {",
        "patch": "@@ -82,7 +82,7 @@ private Rule toRule(String repositoryKey, Class clazz, org.sonar.check.Rule rule\n     return rule;\n   }\n \n-  private void addRuleProperty(Rule rule, Field field) {\n+  private static void addRuleProperty(Rule rule, Field field) {\n     org.sonar.check.RuleProperty propertyAnnotation = field.getAnnotation(org.sonar.check.RuleProperty.class);\n     if (propertyAnnotation != null) {\n       String fieldKey = StringUtils.defaultIfEmpty(propertyAnnotation.key(), field.getName());"
    },
    {
        "commit_id": "67fa5e7bb389a76d0109f1f8d8d51aa3388cf5ce",
        "commit_message": "SONAR-7010 Fix IssueBulkChangeTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/67fa5e7bb389a76d0109f1f8d8d51aa3388cf5ce",
        "buggy_code": "private static final String COMMENT_AS_HTML = \"this is my <em>comment</em>\";",
        "fixed_code": "private static final String COMMENT_AS_HTML = \"this is my <strong>comment</strong>\";",
        "patch": "@@ -48,7 +48,7 @@ public class IssueBulkChangeTest extends AbstractIssueTest {\n \n   private static final int BULK_EDITED_ISSUE_COUNT = 3;\n   private static final String COMMENT_AS_MARKDOWN = \"this is my *comment*\";\n-  private static final String COMMENT_AS_HTML = \"this is my <em>comment</em>\";\n+  private static final String COMMENT_AS_HTML = \"this is my <strong>comment</strong>\";\n \n   @Rule\n   public final ProjectAnalysisRule projectAnalysisRule = ProjectAnalysisRule.from(ORCHESTRATOR);"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.IssueWorkflow;",
        "fixed_code": "import org.sonar.server.issue.workflow.IssueWorkflow;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.IssueChangeContext;\n import org.sonar.core.issue.IssueUpdater;\n-import org.sonar.core.issue.workflow.IssueWorkflow;\n+import org.sonar.server.issue.workflow.IssueWorkflow;\n import org.sonar.core.util.Uuids;\n import org.sonar.server.computation.analysis.AnalysisMetadataHolder;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -41,7 +41,7 @@\n import org.sonar.core.issue.DefaultActionPlan;\n import org.sonar.core.issue.DefaultIssueComment;\n import org.sonar.core.issue.FieldDiffs;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.db.component.ResourceDao;\n import org.sonar.db.component.ResourceDto;\n import org.sonar.db.component.ResourceQuery;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import javax.annotation.Nullable;\n import org.sonar.api.issue.Issue;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.Condition;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.Condition;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import java.util.List;\n import org.picocontainer.Startable;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.Condition;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n class SetCloseDate implements Function {\n   private final boolean set;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.sonar.api.issue.Issue;\n import org.sonar.core.issue.DefaultIssue;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ArrayListMultimap;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n enum UnsetAssignee implements Function {\n   INSTANCE;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import javax.annotation.ParametersAreNonnullByDefault;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -22,7 +22,7 @@\n import org.sonar.api.issue.Issue;\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.utils.text.JsonWriter;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.server.issue.ActionService;\n import org.sonar.server.issue.IssueService;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -29,7 +29,7 @@\n import java.util.Set;\n import javax.annotation.CheckForNull;\n import javax.annotation.Nullable;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.issue.ActionPlanDto;\n import org.sonar.db.issue.IssueChangeDto;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -35,7 +35,7 @@\n import org.sonar.api.utils.Duration;\n import org.sonar.api.utils.Durations;\n import org.sonar.api.utils.Paging;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.issue.ActionPlanDto;\n import org.sonar.db.issue.IssueChangeDto;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.IssueWorkflow;",
        "fixed_code": "import org.sonar.server.issue.workflow.IssueWorkflow;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.IssueChangeContext;\n import org.sonar.core.issue.IssueUpdater;\n-import org.sonar.core.issue.workflow.IssueWorkflow;\n+import org.sonar.server.issue.workflow.IssueWorkflow;\n import org.sonar.db.protobuf.DbCommons;\n import org.sonar.db.protobuf.DbIssues;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -36,7 +36,7 @@\n import org.sonar.api.rule.Severity;\n import org.sonar.api.security.DefaultGroups;\n import org.sonar.api.web.UserRole;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.core.permission.GlobalPermissions;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import com.google.common.base.Function;\n import com.google.common.collect.Collections2;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n import org.sonar.api.issue.Issue;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "package org.sonar.core.issue.workflow;",
        "fixed_code": "package org.sonar.server.issue.workflow;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue.workflow;\n+package org.sonar.server.issue.workflow;\n \n import org.junit.Test;\n import org.sonar.api.issue.condition.Condition;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.core.issue.DefaultIssue;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.server.issue.ActionService;\n import org.sonar.server.issue.IssueService;\n import org.sonar.server.tester.UserSessionRule;"
    },
    {
        "commit_id": "2152747f184771c70afcda6ce937eb23b072b300",
        "commit_message": "Move issue workflow from sonar-core to sonar-server",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2152747f184771c70afcda6ce937eb23b072b300",
        "buggy_code": "import org.sonar.core.issue.workflow.Transition;",
        "fixed_code": "import org.sonar.server.issue.workflow.Transition;",
        "patch": "@@ -41,7 +41,7 @@\n import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.DefaultIssueComment;\n import org.sonar.core.issue.FieldDiffs;\n-import org.sonar.core.issue.workflow.Transition;\n+import org.sonar.server.issue.workflow.Transition;\n import org.sonar.core.user.DefaultUser;\n import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;"
    },
    {
        "commit_id": "09f8c753053dbe6e3d70a42a7b59ba49c2991da2",
        "commit_message": "Automatic merge from branch-5.4\n\n* origin/branch-5.4:\n  SONAR-7384 ensure no thread can await its own termination in Monitor\n  SONAR-7316 do not create a builder for each changeset\n  SONAR-7316 DbScmInfo should use a single ChangeSet object per revision\n  SONAR-7316 use String.intern to store ChangeSet#revision\n  SONAR-7316 Use String.intern to store author in ChangeSet\n  fix widgets resizing on the overview page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/09f8c753053dbe6e3d70a42a7b59ba49c2991da2",
        "buggy_code": "if (t == null) {",
        "fixed_code": "if (t == null || Thread.currentThread() == t) {",
        "patch": "@@ -451,7 +451,7 @@ private static void awaitTermination(Thread... threads) {\n   }\n \n   private static void awaitTermination(@Nullable Thread t) {\n-    if (t == null) {\n+    if (t == null || Thread.currentThread() == t) {\n       return;\n     }\n "
    },
    {
        "commit_id": "45ad6ed9b0212c7e542005cb95518bd3f8d52d6f",
        "commit_message": "Automatic merge from branch-5.4\n\n* origin/branch-5.4:\n  Fix shutdown of server after DB migration\n  SONAR-7103 Fix new debt ratio when 5 periods are defined\n  SONAR-7311 fix file leak because CE appenders are closed too late",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/45ad6ed9b0212c7e542005cb95518bd3f8d52d6f",
        "buggy_code": "parent.container.removeChild();",
        "fixed_code": "parent.container.removeChild(container);",
        "patch": "@@ -100,7 +100,7 @@ public PlatformLevel stop() {\n    */\n   public PlatformLevel destroy() {\n     if (parent != null) {\n-      parent.container.removeChild();\n+      parent.container.removeChild(container);\n     }\n     return this;\n   }"
    },
    {
        "commit_id": "45ad6ed9b0212c7e542005cb95518bd3f8d52d6f",
        "commit_message": "Automatic merge from branch-5.4\n\n* origin/branch-5.4:\n  Fix shutdown of server after DB migration\n  SONAR-7103 Fix new debt ratio when 5 periods are defined\n  SONAR-7311 fix file leak because CE appenders are closed too late",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/45ad6ed9b0212c7e542005cb95518bd3f8d52d6f",
        "buggy_code": "assertThat(parent.getChild()).isNull();",
        "fixed_code": "assertThat(parent.getChildren()).isEmpty();",
        "patch": "@@ -54,7 +54,7 @@ public void ce_container_is_not_child_of_specified_container() {\n     ContainerPopulator populator = mock(ContainerPopulator.class);\n     ComputeEngineContainerImpl ceContainer = new ComputeEngineContainerImpl(parent, populator);\n \n-    assertThat(parent.getChild()).isNull();\n+    assertThat(parent.getChildren()).isEmpty();\n     verify(populator).populateContainer(ceContainer);\n   }\n "
    },
    {
        "commit_id": "54cdd41e77bf99b81134435499219eaef4862525",
        "commit_message": "Fix shutdown of server after DB migration\n\nWhen a DB migration is required, two containers are up at the same\ntime (\"safemode\" and \"level 2\"). This is not handled by ComponentContainer,\nso one of the two children is badly dereferenced and can't be stopped.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/54cdd41e77bf99b81134435499219eaef4862525",
        "buggy_code": "parent.container.removeChild();",
        "fixed_code": "parent.container.removeChild(container);",
        "patch": "@@ -100,7 +100,7 @@ public PlatformLevel stop() {\n    */\n   public PlatformLevel destroy() {\n     if (parent != null) {\n-      parent.container.removeChild();\n+      parent.container.removeChild(container);\n     }\n     return this;\n   }"
    },
    {
        "commit_id": "54cdd41e77bf99b81134435499219eaef4862525",
        "commit_message": "Fix shutdown of server after DB migration\n\nWhen a DB migration is required, two containers are up at the same\ntime (\"safemode\" and \"level 2\"). This is not handled by ComponentContainer,\nso one of the two children is badly dereferenced and can't be stopped.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/54cdd41e77bf99b81134435499219eaef4862525",
        "buggy_code": "assertThat(parent.getChild()).isNull();",
        "fixed_code": "assertThat(parent.getChildren()).isEmpty();",
        "patch": "@@ -54,7 +54,7 @@ public void ce_container_is_not_child_of_specified_container() {\n     ContainerPopulator populator = mock(ContainerPopulator.class);\n     ComputeEngineContainerImpl ceContainer = new ComputeEngineContainerImpl(parent, populator);\n \n-    assertThat(parent.getChild()).isNull();\n+    assertThat(parent.getChildren()).isEmpty();\n     verify(populator).populateContainer(ceContainer);\n   }\n "
    },
    {
        "commit_id": "fab948761d972de69b4674f40052f44ca803d120",
        "commit_message": "SONAR-7168 fix quality flaw in AllProcessesCommands",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fab948761d972de69b4674f40052f44ca803d120",
        "buggy_code": "ProcessCommands commands = allProcessesCommands.getProcessCommand(command.getProcessIndex(), true);",
        "fixed_code": "ProcessCommands commands = allProcessesCommands.createAfterClean(command.getProcessIndex());",
        "patch": "@@ -52,7 +52,7 @@ public void close() {\n   ProcessRef launch(JavaCommand command) {\n     Process process = null;\n     try {\n-      ProcessCommands commands = allProcessesCommands.getProcessCommand(command.getProcessIndex(), true);\n+      ProcessCommands commands = allProcessesCommands.createAfterClean(command.getProcessIndex());\n \n       ProcessBuilder processBuilder = create(command);\n       LoggerFactory.getLogger(getClass()).info(\"Launch process[{}]: {}\","
    },
    {
        "commit_id": "fab948761d972de69b4674f40052f44ca803d120",
        "commit_message": "SONAR-7168 fix quality flaw in AllProcessesCommands",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fab948761d972de69b4674f40052f44ca803d120",
        "buggy_code": "this.delegate = allProcessesCommands.getProcessCommand(processNumber, clean);",
        "fixed_code": "this.delegate = clean ? allProcessesCommands.createAfterClean(processNumber) : allProcessesCommands.create(processNumber);",
        "patch": "@@ -36,7 +36,7 @@ public DefaultProcessCommands(File directory, int processNumber) {\n \n   public DefaultProcessCommands(File directory, int processNumber, boolean clean) {\n     this.allProcessesCommands = new AllProcessesCommands(directory);\n-    this.delegate = allProcessesCommands.getProcessCommand(processNumber, clean);\n+    this.delegate = clean ? allProcessesCommands.createAfterClean(processNumber) : allProcessesCommands.create(processNumber);\n   }\n \n   @Override"
    },
    {
        "commit_id": "b16866d9262240e4b0668f2c91cb187b65d88a76",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b16866d9262240e4b0668f2c91cb187b65d88a76",
        "buggy_code": "new SelectAction(qGates), new DeselectAction(qGates), new AppAction(qGates, periods)));",
        "fixed_code": "new SelectAction(qGates), new DeselectAction(qGates), new AppAction(qGates)));",
        "patch": "@@ -67,7 +67,7 @@ public void setUp() {\n       new CreateAction(qGates), new CopyAction(qGates), new DestroyAction(qGates), new RenameAction(qGates),\n       new SetAsDefaultAction(qGates), new UnsetDefaultAction(qGates),\n       new CreateConditionAction(qGates), new UpdateConditionAction(qGates), new DeleteConditionAction(qGates),\n-      new SelectAction(qGates), new DeselectAction(qGates), new AppAction(qGates, periods)));\n+      new SelectAction(qGates), new DeselectAction(qGates), new AppAction(qGates)));\n   }\n \n   @Test"
    },
    {
        "commit_id": "e4c5970f42097fccb0948be068c3f4dda2352b78",
        "commit_message": "Fix quality gates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4c5970f42097fccb0948be068c3f4dda2352b78",
        "buggy_code": "private List<String> sanitizeList(@Nullable List<String> list) {",
        "fixed_code": "private static List<String> sanitizeList(@Nullable List<String> list) {",
        "patch": "@@ -80,7 +80,7 @@ private void parse(Map<String, Object> props, @Nullable String comment) {\n     }\n   }\n \n-  private List<String> sanitizeList(@Nullable List<String> list) {\n+  private static List<String> sanitizeList(@Nullable List<String> list) {\n     if (list == null || list.isEmpty()) {\n       return Collections.emptyList();\n     }"
    },
    {
        "commit_id": "e4c5970f42097fccb0948be068c3f4dda2352b78",
        "commit_message": "Fix quality gates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4c5970f42097fccb0948be068c3f4dda2352b78",
        "buggy_code": "private List<ActionPlan> toActionPlans(List<ActionPlanDto> actionPlanDtos) {",
        "fixed_code": "private static List<ActionPlan> toActionPlans(List<ActionPlanDto> actionPlanDtos) {",
        "patch": "@@ -167,7 +167,7 @@ public boolean isNameAlreadyUsedForProject(String name, String projectKey) {\n     return !actionPlanDao.selectByNameAndProjectId(name, findProject(projectKey).getId()).isEmpty();\n   }\n \n-  private List<ActionPlan> toActionPlans(List<ActionPlanDto> actionPlanDtos) {\n+  private static List<ActionPlan> toActionPlans(List<ActionPlanDto> actionPlanDtos) {\n     return newArrayList(Iterables.transform(actionPlanDtos, ToActionPlan.INSTANCE));\n   }\n "
    },
    {
        "commit_id": "62d2b37bdc4d357198eaec33a1a1caff638244a4",
        "commit_message": "fix typo in description of QualityGateMeasuresStep",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/62d2b37bdc4d357198eaec33a1a1caff638244a4",
        "buggy_code": "return \"Computes Quality Gate measures\";",
        "fixed_code": "return \"Compute Quality Gate measures\";",
        "patch": "@@ -134,7 +134,7 @@ private void addProjectMeasure(Component project, QualityGateDetailsDataBuilder\n \n   @Override\n   public String getDescription() {\n-    return \"Computes Quality Gate measures\";\n+    return \"Compute Quality Gate measures\";\n   }\n \n   private static final class QualityGateDetailsDataBuilder {"
    },
    {
        "commit_id": "126505285b0da87deb27a74492ac072f5b01def4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/126505285b0da87deb27a74492ac072f5b01def4",
        "buggy_code": "private List<String> sortFieldLabels() {",
        "fixed_code": "private static List<String> sortFieldLabels() {",
        "patch": "@@ -127,7 +127,7 @@ private void fillSorting(MeasureFilter filter, Map<String, Object> properties) {\n     }\n   }\n \n-  private List<String> sortFieldLabels() {\n+  private static List<String> sortFieldLabels() {\n     return newArrayList(Iterables.transform(Arrays.asList(MeasureFilterSort.Field.values()), FieldToName.INSTANCE));\n   }\n "
    },
    {
        "commit_id": "d12f2e96085ec80308239f0777c0b0af80ec210e",
        "commit_message": "SONAR-7257 Fix expected time to persist sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d12f2e96085ec80308239f0777c0b0af80ec210e",
        "buggy_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 93700, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "fixed_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 40000L, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -105,7 +105,7 @@ private void persistFileSources(File reportDir) {\n     assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(NUMBER_OF_FILES);\n     LOGGER.info(String.format(\"File sources have been persisted in %d ms\", duration));\n \n-    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 93700, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n+    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 40000L, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n   }\n \n   private File prepareReport() throws IOException {"
    },
    {
        "commit_id": "40b377727fb47c4640d597f4bd3ff192ab143833",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40b377727fb47c4640d597f4bd3ff192ab143833",
        "buggy_code": "private SearchWsResponse buildResponse(List<ComponentDto> components, Paging paging) {",
        "fixed_code": "private static SearchWsResponse buildResponse(List<ComponentDto> components, Paging paging) {",
        "patch": "@@ -133,7 +133,7 @@ private List<ComponentDto> searchComponents(DbSession dbSession, ComponentQuery\n       paging.pageSize());\n   }\n \n-  private SearchWsResponse buildResponse(List<ComponentDto> components, Paging paging) {\n+  private static SearchWsResponse buildResponse(List<ComponentDto> components, Paging paging) {\n     WsComponents.SearchWsResponse.Builder responseBuilder = SearchWsResponse.newBuilder();\n     responseBuilder.getPagingBuilder()\n       .setPageIndex(paging.pageIndex())"
    },
    {
        "commit_id": "40b377727fb47c4640d597f4bd3ff192ab143833",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40b377727fb47c4640d597f4bd3ff192ab143833",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -33,14 +33,14 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.user.User;\n import org.sonar.api.utils.text.JsonWriter;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.component.SnapshotDto;\n import org.sonar.db.measure.custom.CustomMeasureDto;\n import org.sonar.db.metric.MetricDto;\n import org.sonar.server.component.ComponentFinder;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.es.SearchOptions;\n import org.sonar.server.user.UserSession;\n import org.sonar.server.user.index.UserIndex;"
    },
    {
        "commit_id": "40b377727fb47c4640d597f4bd3ff192ab143833",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40b377727fb47c4640d597f4bd3ff192ab143833",
        "buggy_code": "if (wsRequest.getMetricSort()==null) {",
        "fixed_code": "if (wsRequest.getMetricSort() == null) {",
        "patch": "@@ -101,7 +101,7 @@ private static Ordering<ComponentDtoWithSnapshotId> stringOrdering(boolean isAsc\n    */\n   private static Ordering<ComponentDtoWithSnapshotId> metricOrdering(ComponentTreeWsRequest wsRequest, List<MetricDto> metrics,\n     Table<String, MetricDto, MeasureDto> measuresByComponentUuidAndMetric) {\n-    if (wsRequest.getMetricSort()==null) {\n+    if (wsRequest.getMetricSort() == null) {\n       return componentNameOrdering(wsRequest.getAsc());\n     }\n     Map<String, MetricDto> metricsByKey = Maps.uniqueIndex(metrics, MetricDtoFunctions.toKey());"
    },
    {
        "commit_id": "40b377727fb47c4640d597f4bd3ff192ab143833",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40b377727fb47c4640d597f4bd3ff192ab143833",
        "buggy_code": "static List<WsMeasures.Period> snapshotsToPeriods(@Nullable SnapshotDto snapshot) {",
        "fixed_code": "static List<WsMeasures.Period> snapshotToWsPeriods(@Nullable SnapshotDto snapshot) {",
        "patch": "@@ -33,7 +33,7 @@ private SnapshotDtoToWsPeriods() {\n     // prevent instantiation\n   }\n \n-  static List<WsMeasures.Period> snapshotsToPeriods(@Nullable SnapshotDto snapshot) {\n+  static List<WsMeasures.Period> snapshotToWsPeriods(@Nullable SnapshotDto snapshot) {\n     if (snapshot == null) {\n       return emptyList();\n     }"
    },
    {
        "commit_id": "40b377727fb47c4640d597f4bd3ff192ab143833",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40b377727fb47c4640d597f4bd3ff192ab143833",
        "buggy_code": "private boolean shouldSkipPermissionChange(Operation operation, List<String> existingPermissions, PermissionChange permissionChange) {",
        "fixed_code": "private static boolean shouldSkipPermissionChange(Operation operation, List<String> existingPermissions, PermissionChange permissionChange) {",
        "patch": "@@ -177,7 +177,7 @@ private Long getTargetedGroup(DbSession session, String group) {\n     }\n   }\n \n-  private boolean shouldSkipPermissionChange(Operation operation, List<String> existingPermissions, PermissionChange permissionChange) {\n+  private static boolean shouldSkipPermissionChange(Operation operation, List<String> existingPermissions, PermissionChange permissionChange) {\n     return (Operation.ADD == operation && existingPermissions.contains(permissionChange.permission())) ||\n       (Operation.REMOVE == operation && !existingPermissions.contains(permissionChange.permission()));\n   }"
    },
    {
        "commit_id": "b11816776254f69a0dd7a25c32260b2d77aaa358",
        "commit_message": "Fix minor quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b11816776254f69a0dd7a25c32260b2d77aaa358",
        "buggy_code": "String sourceLine = null;",
        "fixed_code": "String sourceLine;",
        "patch": "@@ -89,7 +89,7 @@ String[] getSourceData() {\n     Map<Integer, String> duplicationsPerLine = computeDuplicationsPerLine(duplicationGroups);\n     ByteArrayOutputStream output = new ByteArrayOutputStream();\n     int line = 0;\n-    String sourceLine = null;\n+    String sourceLine;\n     CsvWriter csv = CsvWriter.of(new OutputStreamWriter(output, UTF_8));\n     StringBuilder lineHashes = new StringBuilder();\n     while (sourceSplitter.hasNext()) {"
    },
    {
        "commit_id": "b11816776254f69a0dd7a25c32260b2d77aaa358",
        "commit_message": "Fix minor quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b11816776254f69a0dd7a25c32260b2d77aaa358",
        "buggy_code": "for (int i = (startLine == 0 ? startLine : startLine - 1); i < endLine && i < lines.size(); i++) {",
        "fixed_code": "for (int i = (startLine == 0 ? startLine : (startLine - 1)); i < endLine && i < lines.size(); i++) {",
        "patch": "@@ -144,7 +144,7 @@ public StringBuffer getCodeBuffer() {\n   public String getSlice(int startLine, int endLine) {\n     StringBuffer sb = new StringBuffer();\n     List lines = cl.getCode();\n-    for (int i = (startLine == 0 ? startLine : startLine - 1); i < endLine && i < lines.size(); i++) {\n+    for (int i = (startLine == 0 ? startLine : (startLine - 1)); i < endLine && i < lines.size(); i++) {\n       if (sb.length() != 0) {\n         sb.append(EOL);\n       }"
    },
    {
        "commit_id": "1c73879c6bd7bb325e7e95acfadbb8431adc39f3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c73879c6bd7bb325e7e95acfadbb8431adc39f3",
        "buggy_code": "private void addAnyoneGroup(List<GroupWithPermissionDto> groups, PermissionQuery query) {",
        "fixed_code": "private static void addAnyoneGroup(List<GroupWithPermissionDto> groups, PermissionQuery query) {",
        "patch": "@@ -107,7 +107,7 @@ private List<GroupWithPermissionDto> filterMembership(List<GroupWithPermissionDt\n    * As the anyone group does not exists in db, it's not returned when it has not the permission.\n    * We have to manually add it at the begin of the list, if it matched the search text\n    */\n-  private void addAnyoneGroup(List<GroupWithPermissionDto> groups, PermissionQuery query) {\n+  private static void addAnyoneGroup(List<GroupWithPermissionDto> groups, PermissionQuery query) {\n     boolean hasAnyoneGroup = Iterables.any(groups, IsAnyoneGroup.INSTANCE);\n     if (!hasAnyoneGroup\n       && !GlobalPermissions.SYSTEM_ADMIN.equals(query.permission())"
    },
    {
        "commit_id": "7e920abf329c269075164a0113e0a849981a4248",
        "commit_message": "SONAR-7135 WS api/measures/component_tree fix leaves strategy and qualifiers together",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e920abf329c269075164a0113e0a849981a4248",
        "buggy_code": "resourceTypes.setLeavesQualifiers(Qualifiers.FILE);",
        "fixed_code": "resourceTypes.setLeavesQualifiers(Qualifiers.FILE, Qualifiers.UNIT_TEST_FILE);",
        "patch": "@@ -89,7 +89,7 @@ public void setUp() {\n     userSession.setGlobalPermissions(GlobalPermissions.SYSTEM_ADMIN);\n     ws = new WsActionTester(new TreeAction(dbClient, new ComponentFinder(dbClient), resourceTypes, userSession, Mockito.mock(I18n.class)));\n     resourceTypes.setChildrenQualifiers(Qualifiers.MODULE, Qualifiers.FILE, Qualifiers.DIRECTORY);\n-    resourceTypes.setLeavesQualifiers(Qualifiers.FILE);\n+    resourceTypes.setLeavesQualifiers(Qualifiers.FILE, Qualifiers.UNIT_TEST_FILE);\n   }\n \n   @Test"
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -24,11 +24,11 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.web.UserRole;\n import org.sonar.core.permission.GlobalPermissions;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.measure.custom.CustomMeasureDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.user.UserSession;\n \n public class DeleteAction implements CustomMeasuresWsAction {"
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -26,12 +26,12 @@\n import org.sonar.api.user.User;\n import org.sonar.api.utils.System2;\n import org.sonar.api.utils.text.JsonWriter;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.component.ComponentDto;\n import org.sonar.db.measure.custom.CustomMeasureDto;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.user.UserSession;\n import org.sonar.server.user.index.UserIndex;\n "
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "static String formatDoubleValue(Double value, MetricDto metric) {",
        "fixed_code": "static String formatNumericalValue(Double value, MetricDto metric) {",
        "patch": "@@ -57,7 +57,7 @@ static String formatMeasureValue(MeasureDto measure, MetricDto metric) {\n     }\n   }\n \n-  static String formatDoubleValue(Double value, MetricDto metric) {\n+  static String formatNumericalValue(Double value, MetricDto metric) {\n     Metric.ValueType metricType = Metric.ValueType.valueOf(metric.getValueType());\n \n     switch (metricType) {"
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -27,11 +27,11 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.core.permission.GlobalPermissions;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.measure.custom.CustomMeasureDto;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.exceptions.BadRequestException;\n import org.sonar.server.ruby.RubyBridge;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -27,10 +27,10 @@\n import org.sonar.api.server.ws.Response;\n import org.sonar.api.server.ws.WebService;\n import org.sonar.core.permission.GlobalPermissions;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.ruby.RubyBridge;\n import org.sonar.server.user.UserSession;\n "
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -27,10 +27,10 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.server.ws.WebService.Param;\n import org.sonar.api.utils.text.JsonWriter;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.es.SearchOptions;\n \n import static com.google.common.collect.Sets.newHashSet;"
    },
    {
        "commit_id": "2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2fdae0c4a7b913f9476502998b8645ab07c730bf",
        "buggy_code": "import org.sonar.server.db.DbClient;",
        "fixed_code": "import org.sonar.db.DbClient;",
        "patch": "@@ -27,11 +27,11 @@\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.core.permission.GlobalPermissions;\n+import org.sonar.db.DbClient;\n import org.sonar.db.DbSession;\n import org.sonar.db.MyBatis;\n import org.sonar.db.measure.custom.CustomMeasureDto;\n import org.sonar.db.metric.MetricDto;\n-import org.sonar.server.db.DbClient;\n import org.sonar.server.exceptions.BadRequestException;\n import org.sonar.server.ruby.RubyBridge;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "877dfdc7ef5b0f6368f0da1693501d8e8f71a9c3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/877dfdc7ef5b0f6368f0da1693501d8e8f71a9c3",
        "buggy_code": "private void checkPermission(boolean preview, boolean hasScanPerm, boolean hasPreviewPerm) {",
        "fixed_code": "private static void checkPermission(boolean preview, boolean hasScanPerm, boolean hasPreviewPerm) {",
        "patch": "@@ -182,7 +182,7 @@ private static void addFileData(ProjectRepositories data, List<ComponentDto> mod\n     }\n   }\n \n-  private void checkPermission(boolean preview, boolean hasScanPerm, boolean hasPreviewPerm) {\n+  private static void checkPermission(boolean preview, boolean hasScanPerm, boolean hasPreviewPerm) {\n     if (!hasPreviewPerm && !hasScanPerm) {\n       throw new ForbiddenException(Messages.NO_PERMISSION);\n     }"
    },
    {
        "commit_id": "5db076096966170cde636fa2c41d7777abca193e",
        "commit_message": "SONAR-7168 fix stop during restart not working\n\nlifeCycle transition from RESTARTING to STOPPING should actually _not_ be allowed because it can occur when restarting child processes (the WatcherThreads detects that stop and tries to shutdown all other processes), this fixes the issue by adding a HARD_STOPPING state, representing a not gracefull stop, to which transition from RESTARTING is allowed\nadds class AllProcessesCommands which implements access to sharedMemory for any process and is now used as the underlying implementation of DefaultProcessCommands. This class allows using a single IO to access sharedMemory from App",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5db076096966170cde636fa2c41d7777abca193e",
        "buggy_code": "public interface ProcessCommands {",
        "fixed_code": "public interface ProcessCommands extends AutoCloseable {",
        "patch": "@@ -36,7 +36,7 @@\n  *   <li>execute OS-specific commands (for instance kill on *nix): OS-specific, so hell to support. Moreover how to get identify a process ?</li>\n  * </ul>\n  */\n-public interface ProcessCommands {\n+public interface ProcessCommands extends AutoCloseable {\n \n   int MAX_PROCESSES = 50;\n "
    },
    {
        "commit_id": "255e54d582d02ab72d1b33f440656fb2d5ae9f8c",
        "commit_message": "SONAR-7168 fix stop failing during restart + restart WS call flood issue\n\nstop triggered though shareMemory by Orchestrator did not work when a restart was under way be lifeCycle transition from RESTARTING to STOPPING wasn't allowed\nwhen flooding the restart WS, the restart never occured because the WS erased the shareMemory space of the WebServer when called called, erasing the stop signal sent by the main process",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/255e54d582d02ab72d1b33f440656fb2d5ae9f8c",
        "buggy_code": "nonNullValueAsFile(PROPERTY_SHARED_PATH), nonNullAsInt(PROPERTY_PROCESS_INDEX));",
        "fixed_code": "nonNullValueAsFile(PROPERTY_SHARED_PATH), nonNullAsInt(PROPERTY_PROCESS_INDEX), false);",
        "patch": "@@ -75,7 +75,7 @@ public void handle(Request request, Response response) {\n       LOGGER.info(\"Requesting SonarQube restart\");\n       userSession.checkPermission(UserRole.ADMIN);\n       ProcessCommands commands = new DefaultProcessCommands(\n-        nonNullValueAsFile(PROPERTY_SHARED_PATH), nonNullAsInt(PROPERTY_PROCESS_INDEX));\n+        nonNullValueAsFile(PROPERTY_SHARED_PATH), nonNullAsInt(PROPERTY_PROCESS_INDEX), false);\n       commands.askForRestart();\n     }\n     response.noContent();"
    },
    {
        "commit_id": "10ddbf28d97a7b1626706efdf2cb88893b34ed4a",
        "commit_message": "SONAR-7168 fix Main JVM and ES JVM sharing same space of sharedMemory\n\nMain JVM is using sharedMemory when sonar.enableStopCommand=true is passed to command line (used by orchestrator to stop SQ) and in such case, it used to use the same sharedMemory space as the first child process it started",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/10ddbf28d97a7b1626706efdf2cb88893b34ed4a",
        "buggy_code": "static int nextProcessId = 0;",
        "fixed_code": "static int nextProcessId = 1;",
        "patch": "@@ -48,7 +48,7 @@ public class Monitor {\n   private RestartRequestWatcherThread restartWatcher;\n   @CheckForNull\n   private TerminatorThread terminator;\n-  static int nextProcessId = 0;\n+  static int nextProcessId = 1;\n \n   Monitor(JavaProcessLauncher launcher, SystemExit exit) {\n     this.launcher = launcher;"
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "private Map<String, String> headers = new HashMap<String, String>();",
        "fixed_code": "private Map<String, String> headers = new HashMap<>();",
        "patch": "@@ -34,7 +34,7 @@\n \n public class ServletResponse implements Response {\n \n-  private Map<String, String> headers = new HashMap<String, String>();\n+  private Map<String, String> headers = new HashMap<>();\n \n   public static class ServletStream implements Stream {\n     private String mediaType;"
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "fonts = new HashMap<String, FontMetrics>();",
        "fixed_code": "fonts = new HashMap<>();",
        "patch": "@@ -346,7 +346,7 @@ private int getOffsetY(int rowStartOffset, FontMetrics fontMetrics)\n     } else // We need to check all the attributes for font changes\n     {\n       if (fonts == null)\n-        fonts = new HashMap<String, FontMetrics>();\n+        fonts = new HashMap<>();\n \n       Element root = component.getDocument().getDefaultRootElement();\n       int index = root.getElementIndex(rowStartOffset);"
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "HashMap<String, String> map = new HashMap<String, String>();",
        "fixed_code": "HashMap<String, String> map = new HashMap<>();",
        "patch": "@@ -42,7 +42,7 @@ public class GlobalPersistentCacheProviderTest {\n \n   @Before\n   public void setUp() {\n-    HashMap<String, String> map = new HashMap<String, String>();\n+    HashMap<String, String> map = new HashMap<>();\n     map.put(\"sonar.userHome\", temp.getRoot().getAbsolutePath());\n     globalProperties = new GlobalProperties(map);\n     provider = new GlobalPersistentCacheProvider();"
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "when(wsLoader.loadStream(anyString())).thenReturn(new WSLoaderResult<InputStream>(is, true));",
        "fixed_code": "when(wsLoader.loadStream(anyString())).thenReturn(new WSLoaderResult<>(is, true));",
        "patch": "@@ -126,7 +126,7 @@ private InputStream mockData() throws IOException {\n   @Test\n   public void readRealResponse() throws IOException {\n     InputStream is = getTestResource(\"project.protobuf\");\n-    when(wsLoader.loadStream(anyString())).thenReturn(new WSLoaderResult<InputStream>(is, true));\n+    when(wsLoader.loadStream(anyString())).thenReturn(new WSLoaderResult<>(is, true));\n \n     ProjectRepositories proj = loader.load(\"org.sonarsource.github:sonar-github-plugin\", true, null);\n     FileData fd = proj.fileData(\"org.sonarsource.github:sonar-github-plugin\","
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "when(wsLoader.loadStream(\"/batch/issues.protobuf?key=foo\")).thenReturn(new WSLoaderResult<InputStream>(is, true));",
        "fixed_code": "when(wsLoader.loadStream(\"/batch/issues.protobuf?key=foo\")).thenReturn(new WSLoaderResult<>(is, true));",
        "patch": "@@ -77,7 +77,7 @@ public Void apply(ServerIssue input) {\n   public void testError() throws IOException {\n     InputStream is = mock(InputStream.class);\n     when(is.read()).thenThrow(IOException.class);\n-    when(wsLoader.loadStream(\"/batch/issues.protobuf?key=foo\")).thenReturn(new WSLoaderResult<InputStream>(is, true));\n+    when(wsLoader.loadStream(\"/batch/issues.protobuf?key=foo\")).thenReturn(new WSLoaderResult<>(is, true));\n     loader.load(\"foo\", mock(Function.class));\n   }\n }"
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "response = new ArrayList<QualityProfile>(1);",
        "fixed_code": "response = new ArrayList<>(1);",
        "patch": "@@ -73,7 +73,7 @@ public void setUp() {\n     when(key.get()).thenReturn(\"project\");\n     when(projectRepo.exists()).thenReturn(true);\n \n-    response = new ArrayList<QualityProfile>(1);\n+    response = new ArrayList<>(1);\n     response.add(QualityProfile.newBuilder().setKey(\"profile\").setName(\"profile\").setLanguage(\"lang\").build());\n   }\n "
    },
    {
        "commit_id": "0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fddc5fa4ea33882b60e072eee51f0e1ea585b4c",
        "buggy_code": "private final List<Tokenizer> tokenizers = new ArrayList<Tokenizer>();",
        "fixed_code": "private final List<Tokenizer> tokenizers = new ArrayList<>();",
        "patch": "@@ -195,7 +195,7 @@ public List<Tokenizer> getTokenizers() {\n \n   public class WebCodeColorizerFormat extends CodeColorizerFormat {\n \n-    private final List<Tokenizer> tokenizers = new ArrayList<Tokenizer>();\n+    private final List<Tokenizer> tokenizers = new ArrayList<>();\n \n     public WebCodeColorizerFormat() {\n       super(\"web\");"
    },
    {
        "commit_id": "f9fdd6ac956d820fb5186b992e110d01373513b6",
        "commit_message": "SONAR-7127 Fix ComponentQuery for DevCockpit\n\nCreate ComponentQuery with a Builder\nRestore missing constructor for Dev Cokpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f9fdd6ac956d820fb5186b992e110d01373513b6",
        "buggy_code": "ComponentQuery componentDtoQuery = new ComponentQuery(componentQuery, null, Qualifiers.PROJECT, Qualifiers.VIEW);",
        "fixed_code": "ComponentQuery componentDtoQuery = ComponentQuery.builder().setNameOrKeyQuery(componentQuery).setQualifiers(Qualifiers.PROJECT, Qualifiers.VIEW).build();",
        "patch": "@@ -160,7 +160,7 @@ private void loadComponentUuids(DbSession dbSession, Request wsRequest, CeActivi\n       query.setComponentUuid(componentUuid);\n     }\n     if (componentQuery != null) {\n-      ComponentQuery componentDtoQuery = new ComponentQuery(componentQuery, null, Qualifiers.PROJECT, Qualifiers.VIEW);\n+      ComponentQuery componentDtoQuery = ComponentQuery.builder().setNameOrKeyQuery(componentQuery).setQualifiers(Qualifiers.PROJECT, Qualifiers.VIEW).build();\n       List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, 0, CeActivityQuery.MAX_COMPONENT_UUIDS);\n       query.setComponentUuids(Lists.transform(componentDtos, ComponentDtoFunctions.toUuid()));\n     }"
    },
    {
        "commit_id": "b182a2db0aa5e8027e2f411b61636c8a2d5ed5c3",
        "commit_message": "Fix Map.containsKey call that would never return true",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b182a2db0aa5e8027e2f411b61636c8a2d5ed5c3",
        "buggy_code": "checkState(!metricsById.containsKey(metric.getId()), format(\"Repository already contains a metric for id %s\", metric.getId()));",
        "fixed_code": "checkState(!metricsById.containsKey((long) metric.getId()), format(\"Repository already contains a metric for id %s\", metric.getId()));",
        "patch": "@@ -75,7 +75,7 @@ public MetricRepositoryRule add(Metric metric) {\n     requireNonNull(metric.getId(), \"id can not be null\");\n \n     checkState(!metricsByKey.containsKey(metric.getKey()), format(\"Repository already contains a metric for key %s\", metric.getKey()));\n-    checkState(!metricsById.containsKey(metric.getId()), format(\"Repository already contains a metric for id %s\", metric.getId()));\n+    checkState(!metricsById.containsKey((long) metric.getId()), format(\"Repository already contains a metric for id %s\", metric.getId()));\n \n     metricsByKey.put(metric.getKey(), metric);\n     metricsById.put((long) metric.getId(), metric);"
    },
    {
        "commit_id": "bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "buggy_code": "return componentUuid == null ? that.componentUuid == null : componentUuid.equals(that.componentUuid);",
        "fixed_code": "return componentUuid == null ? (that.componentUuid == null) : componentUuid.equals(that.componentUuid);",
        "patch": "@@ -79,7 +79,7 @@ public boolean equals(@Nullable Object o) {\n     if (!taskUuid.equals(that.taskUuid)) {\n       return false;\n     }\n-    return componentUuid == null ? that.componentUuid == null : componentUuid.equals(that.componentUuid);\n+    return componentUuid == null ? (that.componentUuid == null) : componentUuid.equals(that.componentUuid);\n \n   }\n "
    },
    {
        "commit_id": "bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "buggy_code": "int days = Integer.valueOf(s);",
        "fixed_code": "int days = Integer.parseInt(s);",
        "patch": "@@ -187,7 +187,7 @@ private Date toDate(@Nullable String date) {\n   @CheckForNull\n   private Date toDays(@Nullable String s) {\n     if (s != null) {\n-      int days = Integer.valueOf(s);\n+      int days = Integer.parseInt(s);\n       Date date = org.apache.commons.lang.time.DateUtils.truncate(new Date(system.now()), Calendar.DATE);\n       date = org.apache.commons.lang.time.DateUtils.addDays(date, -days);\n       return date;"
    },
    {
        "commit_id": "bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd0f794ad863cc9e0685b911c5ca93104c69f774",
        "buggy_code": "List<Filter> filterList = Lists.newArrayList();",
        "fixed_code": "List<ServletFilter> filterList = Lists.newArrayList();",
        "patch": "@@ -64,7 +64,7 @@ void init(FilterConfig config, List<ServletFilter> filters) throws ServletExcept\n   }\n \n   public void initFilters(List<ServletFilter> filterExtensions) throws ServletException {\n-    List<Filter> filterList = Lists.newArrayList();\n+    List<ServletFilter> filterList = Lists.newArrayList();\n     for (ServletFilter extension : filterExtensions) {\n       try {\n         Loggers.get(MasterServletFilter.class).info(String.format(\"Initializing servlet filter %s [pattern=%s]\", extension, extension.doGetPattern()));"
    },
    {
        "commit_id": "2f51481f460aa3dee2f34b0aa58ff0a29c43735f",
        "commit_message": "fix perf IT after DuplicationRepository perf improvment",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f51481f460aa3dee2f34b0aa58ff0a29c43735f",
        "buggy_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 109000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "fixed_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 93700, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -106,7 +106,7 @@ private void persistFileSources(File reportDir) {\n     assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(NUMBER_OF_FILES);\n     LOGGER.info(String.format(\"File sources have been persisted in %d ms\", duration));\n \n-    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 109000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n+    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 93700, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n   }\n \n   private File prepareReport() throws IOException {"
    },
    {
        "commit_id": "daf70b2c4c8b962179ecdeec24a8ea5e07e307af",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/daf70b2c4c8b962179ecdeec24a8ea5e07e307af",
        "buggy_code": "private void updateTaskResult(CeActivityDto activityDto, @Nullable CeTaskResult taskResult) {",
        "fixed_code": "private static void updateTaskResult(CeActivityDto activityDto, @Nullable CeTaskResult taskResult) {",
        "patch": "@@ -191,7 +191,7 @@ public void remove(CeTask task, CeActivityDto.Status status, CeTaskResult taskRe\n     }\n   }\n \n-  private void updateTaskResult(CeActivityDto activityDto, @Nullable CeTaskResult taskResult) {\n+  private static void updateTaskResult(CeActivityDto activityDto, @Nullable CeTaskResult taskResult) {\n     if (taskResult != null) {\n       Long snapshotId = taskResult.getSnapshotId();\n       if (snapshotId != null) {"
    },
    {
        "commit_id": "5995432e51e72623804ffe926316b84d18913657",
        "commit_message": "Automatic merge from branch-5.3\n\n* origin/branch-5.3:\n  SONAR-7137 Fix migration on MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5995432e51e72623804ffe926316b84d18913657",
        "buggy_code": "migration = new RemoveDuplicatedComponentKeys(db.database());",
        "fixed_code": "migration = new RemoveDuplicatedComponentKeys(db.database(), db.getDbClient());",
        "patch": "@@ -39,7 +39,7 @@ public void setUp() {\n     db.executeUpdateSql(\"truncate table projects\");\n     db.executeUpdateSql(\"truncate table issues\");\n \n-    migration = new RemoveDuplicatedComponentKeys(db.database());\n+    migration = new RemoveDuplicatedComponentKeys(db.database(), db.getDbClient());\n   }\n \n   @Test"
    },
    {
        "commit_id": "e184f159ade71372942f2840b62f6b71eeefb4c5",
        "commit_message": "SONAR-7137 Fix migration on MySQL\n\nUse another connection to select all duplicated components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e184f159ade71372942f2840b62f6b71eeefb4c5",
        "buggy_code": "migration = new RemoveDuplicatedComponentKeys(db.database());",
        "fixed_code": "migration = new RemoveDuplicatedComponentKeys(db.database(), db.getDbClient());",
        "patch": "@@ -39,7 +39,7 @@ public void setUp() {\n     db.executeUpdateSql(\"truncate table projects\");\n     db.executeUpdateSql(\"truncate table issues\");\n \n-    migration = new RemoveDuplicatedComponentKeys(db.database());\n+    migration = new RemoveDuplicatedComponentKeys(db.database(), db.getDbClient());\n   }\n \n   @Test"
    },
    {
        "commit_id": "a4ed263e412aa7fc37d7e5dac4c231acafb1d1d6",
        "commit_message": "Automatic merge from branch-5.3\n\n* origin/branch-5.3:\n  Fix quality flaws in PathUtils\n  SONAR-6939 decrease maximum nb of decimal digits to 5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a4ed263e412aa7fc37d7e5dac4c231acafb1d1d6",
        "buggy_code": "public static final int MAX_DECIMAL_SCALE = 20;",
        "fixed_code": "public static final int MAX_DECIMAL_SCALE = 5;",
        "patch": "@@ -51,7 +51,7 @@ public class Metric<G extends Serializable> implements Serializable, org.sonar.a\n    * The maximum supported value of scale for decimal metrics\n    * @since 5.3\n    */\n-  public static final int MAX_DECIMAL_SCALE = 20;\n+  public static final int MAX_DECIMAL_SCALE = 5;\n \n   /**\n    * A metric bigger value means a degradation"
    },
    {
        "commit_id": "d547fdddf958c20cddd00cdbf7a280182400f595",
        "commit_message": "Automatic merge from branch-5.3\n\n* origin/branch-5.3:\n  SONAR-6968 Bad error message when analyzer detects that no language plugins are installed\n  SONAR-6905 Batch should dump analysis-related URL into a properties file\n  fix displaying of the workspace on the overview pages\n  SONAR-7030 Remove dashboards bundles\n  Reactivate devcockpit in PluginsTest\n  fix link to added issues from the debt overview\n  respect precision of float metrics during web formatting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d547fdddf958c20cddd00cdbf7a280182400f595",
        "buggy_code": "static final Set<String> DISABLED_PLUGINS = Sets.newHashSet(\"devcockpit\",",
        "fixed_code": "static final Set<String> DISABLED_PLUGINS = Sets.newHashSet(",
        "patch": "@@ -49,7 +49,7 @@ public class PluginsTest {\n   /**\n    * Temporarily disabled plugins. To be re-enabled.\n    */\n-  static final Set<String> DISABLED_PLUGINS = Sets.newHashSet(\"devcockpit\",\n+  static final Set<String> DISABLED_PLUGINS = Sets.newHashSet(\n     // internal plugin used for integration tests of language plugins\n     \"lits\");\n "
    },
    {
        "commit_id": "d547fdddf958c20cddd00cdbf7a280182400f595",
        "commit_message": "Automatic merge from branch-5.3\n\n* origin/branch-5.3:\n  SONAR-6968 Bad error message when analyzer detects that no language plugins are installed\n  SONAR-6905 Batch should dump analysis-related URL into a properties file\n  fix displaying of the workspace on the overview pages\n  SONAR-7030 Remove dashboards bundles\n  Reactivate devcockpit in PluginsTest\n  fix link to added issues from the debt overview\n  respect precision of float metrics during web formatting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d547fdddf958c20cddd00cdbf7a280182400f595",
        "buggy_code": "\"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask: org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask has unsatisfied dependency 'class org.sonar.api.issue.action.Actions'\");",
        "fixed_code": "\"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask\");",
        "patch": "@@ -87,7 +87,7 @@ public void runBroken() throws Exception {\n \n     thrown.expect(IllegalStateException.class);\n     thrown.expectMessage(\n-      \"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask: org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask has unsatisfied dependency 'class org.sonar.api.issue.action.Actions'\");\n+      \"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask\");\n \n     tester.newTask()\n       .properties(ImmutableMap.<String, String>builder()"
    },
    {
        "commit_id": "d547fdddf958c20cddd00cdbf7a280182400f595",
        "commit_message": "Automatic merge from branch-5.3\n\n* origin/branch-5.3:\n  SONAR-6968 Bad error message when analyzer detects that no language plugins are installed\n  SONAR-6905 Batch should dump analysis-related URL into a properties file\n  fix displaying of the workspace on the overview pages\n  SONAR-7030 Remove dashboards bundles\n  Reactivate devcockpit in PluginsTest\n  fix link to added issues from the debt overview\n  respect precision of float metrics during web formatting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d547fdddf958c20cddd00cdbf7a280182400f595",
        "buggy_code": "throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType + \": \" + t.getMessage(), t);",
        "fixed_code": "throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType, t);",
        "patch": "@@ -59,7 +59,7 @@ public Object getComponent(final Object componentKeyOrType, final Class<? extend\n       try {\n         return super.getComponent(componentKeyOrType, annotation);\n       } catch (Throwable t) {\n-        throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType + \": \" + t.getMessage(), t);\n+        throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType, t);\n       }\n     }\n "
    },
    {
        "commit_id": "56a4685a6061731fe701ea3ec8afbf9a8a1015f0",
        "commit_message": "SONAR-6968 Bad error message when analyzer detects that no language plugins are installed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56a4685a6061731fe701ea3ec8afbf9a8a1015f0",
        "buggy_code": "\"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask: org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask has unsatisfied dependency 'class org.sonar.api.issue.action.Actions'\");",
        "fixed_code": "\"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask\");",
        "patch": "@@ -87,7 +87,7 @@ public void runBroken() throws Exception {\n \n     thrown.expect(IllegalStateException.class);\n     thrown.expectMessage(\n-      \"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask: org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask has unsatisfied dependency 'class org.sonar.api.issue.action.Actions'\");\n+      \"Unable to load component class org.sonar.batch.mediumtest.tasks.TasksMediumTest$BrokenTask\");\n \n     tester.newTask()\n       .properties(ImmutableMap.<String, String>builder()"
    },
    {
        "commit_id": "56a4685a6061731fe701ea3ec8afbf9a8a1015f0",
        "commit_message": "SONAR-6968 Bad error message when analyzer detects that no language plugins are installed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56a4685a6061731fe701ea3ec8afbf9a8a1015f0",
        "buggy_code": "throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType + \": \" + t.getMessage(), t);",
        "fixed_code": "throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType, t);",
        "patch": "@@ -59,7 +59,7 @@ public Object getComponent(final Object componentKeyOrType, final Class<? extend\n       try {\n         return super.getComponent(componentKeyOrType, annotation);\n       } catch (Throwable t) {\n-        throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType + \": \" + t.getMessage(), t);\n+        throw new IllegalStateException(\"Unable to load component \" + componentKeyOrType, t);\n       }\n     }\n "
    },
    {
        "commit_id": "1f7717e5e8692486be2cf7ef763c977ee13dc2b5",
        "commit_message": "Fix minor quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f7717e5e8692486be2cf7ef763c977ee13dc2b5",
        "buggy_code": "private void addFirstColumn(Dashboard dashboard) {",
        "fixed_code": "private static void addFirstColumn(Dashboard dashboard) {",
        "patch": "@@ -54,7 +54,7 @@ public Dashboard createDashboard() {\n     return dashboard;\n   }\n \n-  private void addFirstColumn(Dashboard dashboard) {\n+  private static void addFirstColumn(Dashboard dashboard) {\n     dashboard.addWidget(\"size\", 1);\n     dashboard.addWidget(\"code_coverage\", 1);\n     dashboard.addWidget(\"duplications\", 1);"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "String[] seriesSplit = null;",
        "fixed_code": "String[] seriesSplit;",
        "patch": "@@ -178,7 +178,7 @@ private void addMeasures(String values) {\n \n       // Series\n       String seriesParam = params.get(BaseChartWeb.CHART_PARAM_SERIES);\n-      String[] seriesSplit = null;\n+      String[] seriesSplit;\n       if (seriesParam != null && seriesParam.length() > 0) {\n         seriesSplit = seriesParam.split(\",\");\n       } else {"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "String[] categoriesSplit = null;",
        "fixed_code": "String[] categoriesSplit;",
        "patch": "@@ -109,7 +109,7 @@ private void addMeasures(String values) {\n \n       // Categories\n       String categoriesParam = params.get(CHART_PARAM_CATEGORIES);\n-      String[] categoriesSplit = null;\n+      String[] categoriesSplit;\n       if (categoriesParam != null && categoriesParam.length() > 0) {\n         categoriesSplit = categoriesParam.split(\",\");\n       } else {"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "return new DefaultMeasure<G>(sensorStorage);",
        "fixed_code": "return new DefaultMeasure<>(sensorStorage);",
        "patch": "@@ -96,7 +96,7 @@ public AnalysisMode analysisMode() {\n \n   @Override\n   public <G extends Serializable> NewMeasure<G> newMeasure() {\n-    return new DefaultMeasure<G>(sensorStorage);\n+    return new DefaultMeasure<>(sensorStorage);\n   }\n \n   @Override"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "@Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")",
        "fixed_code": "@Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")",
        "patch": "@@ -45,6 +45,6 @@ public interface DashboardMapper {\n   @Insert(\"INSERT INTO dashboards (user_id, name, description, column_layout, shared, is_global, created_at, \" +\n     \"updated_at) VALUES (#{userId}, #{name}, #{description}, #{columnLayout}, #{shared}, \" +\n     \"#{global}, #{createdAt}, #{updatedAt})\")\n-  @Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")\n+  @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")\n   void insert(DashboardDto dashboardDto);\n }"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "@Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")",
        "fixed_code": "@Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")",
        "patch": "@@ -31,7 +31,7 @@ public interface WidgetMapper {\n     \" values (#{dashboardId,jdbcType=INTEGER}, #{widgetKey,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, \" +\n     \" #{description,jdbcType=VARCHAR}, #{columnIndex,jdbcType=INTEGER}, \" +\n     \" #{rowIndex,jdbcType=INTEGER}, #{configured,jdbcType=BOOLEAN}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{resourceId,jdbcType=INTEGER})\")\n-  @Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")\n+  @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")\n   void insert(WidgetDto widgetDto);\n \n   WidgetDto selectById(long widgetId);"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "@Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")",
        "fixed_code": "@Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")",
        "patch": "@@ -31,7 +31,7 @@ public interface WidgetPropertyMapper {\n   String COLUMNS = \"wp.id, wp.widget_id as \\\"widgetId\\\", wp.kee as \\\"propertyKey\\\", wp.text_value as \\\"textValue\\\"\";\n \n   @Insert(\"insert into widget_properties (widget_id, kee, text_value) values (#{widgetId}, #{propertyKey}, #{textValue})\")\n-  @Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")\n+  @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")\n   void insert(WidgetPropertyDto dto);\n \n   @CheckForNull"
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "supportedLanguages = (languages != null ? languages : new String[0]);",
        "fixed_code": "supportedLanguages = (languages != null) ? languages : new String[0];",
        "patch": "@@ -66,7 +66,7 @@ public final ProfileExporter setName(String s) {\n   }\n \n   protected final ProfileExporter setSupportedLanguages(String... languages) {\n-    supportedLanguages = (languages != null ? languages : new String[0]);\n+    supportedLanguages = (languages != null) ? languages : new String[0];\n     return this;\n   }\n "
    },
    {
        "commit_id": "9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9df8ed37f34ceb5d26045bf2d75a56b2fe80e172",
        "buggy_code": "supportedLanguages = (languages != null ? languages : new String[0]);",
        "fixed_code": "supportedLanguages = (languages != null) ? languages : new String[0];",
        "patch": "@@ -64,7 +64,7 @@ public final ProfileImporter setName(String s) {\n   }\n \n   protected final ProfileImporter setSupportedLanguages(String... languages) {\n-    supportedLanguages = (languages != null ? languages : new String[0]);\n+    supportedLanguages = (languages != null) ? languages : new String[0];\n     return this;\n   }\n "
    },
    {
        "commit_id": "18a077aac51e118a93ccc796dd96264ee19e862e",
        "commit_message": "Fix logging of public url",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/18a077aac51e118a93ccc796dd96264ee19e862e",
        "buggy_code": "wsClient = new BatchWsClient(new HttpWsClient(builder.build()), login != null, settings.property(CoreProperties.SERVER_BASE_URL));",
        "fixed_code": "wsClient = new BatchWsClient(new HttpWsClient(builder.build()), login != null);",
        "patch": "@@ -55,7 +55,7 @@ public synchronized BatchWsClient provide(final GlobalProperties settings, final\n         .url(url)\n         .credentials(login, settings.property(CoreProperties.PASSWORD));\n \n-      wsClient = new BatchWsClient(new HttpWsClient(builder.build()), login != null, settings.property(CoreProperties.SERVER_BASE_URL));\n+      wsClient = new BatchWsClient(new HttpWsClient(builder.build()), login != null);\n     }\n     return wsClient;\n   }"
    },
    {
        "commit_id": "e8910d10bff9c115dc8bf2c614ff5ef839626f80",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8910d10bff9c115dc8bf2c614ff5ef839626f80",
        "buggy_code": "private void dumpReport(String dumpDirLocation, String projectKey, String relativeUrl, File report) {",
        "fixed_code": "private static void dumpReport(String dumpDirLocation, String projectKey, String relativeUrl, File report) {",
        "patch": "@@ -203,7 +203,7 @@ public void setTaskId(String taskId) {\n     }\n   }\n \n-  private void dumpReport(String dumpDirLocation, String projectKey, String relativeUrl, File report) {\n+  private static void dumpReport(String dumpDirLocation, String projectKey, String relativeUrl, File report) {\n     LOG.debug(\"Dump report to file\");\n     try {\n       dumpReportImpl(dumpDirLocation, projectKey, relativeUrl, report);"
    },
    {
        "commit_id": "6ec3fcf19a77c31b9fe137eabc56334948d39ac8",
        "commit_message": "SONAR-7073 revert fix of SNAPSHOTS.SCOPE\n\nBecause of O.R.A.C.L.E.\nIt allowed us to create a column with name \"scope\" but now it fails to alter it because reserved name (only in Oracle btw).",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ec3fcf19a77c31b9fe137eabc56334948d39ac8",
        "buggy_code": "public static final int LAST_VERSION = 1002;",
        "fixed_code": "public static final int LAST_VERSION = 1001;",
        "patch": "@@ -29,7 +29,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 1002;\n+  public static final int LAST_VERSION = 1001;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "ac6428a4a218bc311e3707b3d86c0d3c6ba67e4b",
        "commit_message": "Fix index size limit of user_tokens_login_name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ac6428a4a218bc311e3707b3d86c0d3c6ba67e4b",
        "buggy_code": ".setName(randomAlphanumeric(255))",
        "fixed_code": ".setName(randomAlphanumeric(100))",
        "patch": "@@ -27,7 +27,7 @@ public class UserTokenTesting {\n   public static UserTokenDto newUserToken() {\n     return new UserTokenDto()\n       .setLogin(randomAlphanumeric(255))\n-      .setName(randomAlphanumeric(255))\n+      .setName(randomAlphanumeric(100))\n       .setTokenHash(randomAlphanumeric(40))\n       .setCreatedAt(nextLong());\n   }"
    },
    {
        "commit_id": "358e938715a5e46342e35a00274817a37f76802a",
        "commit_message": "Fix type",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/358e938715a5e46342e35a00274817a37f76802a",
        "buggy_code": "public Developer getDevelope() {",
        "fixed_code": "public Developer getDeveloper() {",
        "patch": "@@ -63,7 +63,7 @@ public int getRuleId() {\n   }\n \n   @CheckForNull\n-  public Developer getDevelope() {\n+  public Developer getDeveloper() {\n     return developer;\n   }\n "
    },
    {
        "commit_id": "acc1f7b6c754afd765cedd4cd19400ac1c495cea",
        "commit_message": "Fix insert_developer_measure_from_report on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/acc1f7b6c754afd765cedd4cd19400ac1c495cea",
        "buggy_code": "assertThat(dto.get(\"value\")).isEqualTo(1d);",
        "fixed_code": "assertValue(dto, 1d);",
        "patch": "@@ -450,7 +450,7 @@ public void insert_developer_measure_from_report() {\n     List<Map<String, Object>> dtos = selectSnapshots();\n     Map<String, Object> dto = dtos.get(0);\n \n-    assertThat(dto.get(\"value\")).isEqualTo(1d);\n+    assertValue(dto, 1d);\n     assertThat(dto.get(\"developerId\")).isEqualTo(10L);\n   }\n "
    },
    {
        "commit_id": "678d27506f2c945273ce9703933d19ea79723a34",
        "commit_message": "SONAR-6947 api/issues/search use issue.SearchWsRequest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/678d27506f2c945273ce9703933d19ea79723a34",
        "buggy_code": "import org.sonar.server.issue.filter.IssueFilterParameters;",
        "fixed_code": "import org.sonarqube.ws.client.issue.IssueFilterParameters;",
        "patch": "@@ -49,7 +49,7 @@\n import org.sonar.server.es.SearchOptions;\n import org.sonar.server.exceptions.BadRequestException;\n import org.sonar.server.issue.actionplan.ActionPlanService;\n-import org.sonar.server.issue.filter.IssueFilterParameters;\n+import org.sonarqube.ws.client.issue.IssueFilterParameters;\n import org.sonar.server.issue.filter.IssueFilterService;\n import org.sonar.server.search.QueryContext;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "678d27506f2c945273ce9703933d19ea79723a34",
        "commit_message": "SONAR-6947 api/issues/search use issue.SearchWsRequest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/678d27506f2c945273ce9703933d19ea79723a34",
        "buggy_code": "import org.sonar.server.issue.filter.IssueFilterParameters;",
        "fixed_code": "import org.sonarqube.ws.client.issue.IssueFilterParameters;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.IssueQueryService;\n import org.sonar.server.issue.IssueService;\n-import org.sonar.server.issue.filter.IssueFilterParameters;\n+import org.sonarqube.ws.client.issue.IssueFilterParameters;\n \n import java.util.Map;\n "
    },
    {
        "commit_id": "678d27506f2c945273ce9703933d19ea79723a34",
        "commit_message": "SONAR-6947 api/issues/search use issue.SearchWsRequest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/678d27506f2c945273ce9703933d19ea79723a34",
        "buggy_code": "import org.sonar.server.issue.filter.IssueFilterParameters;",
        "fixed_code": "import org.sonarqube.ws.client.issue.IssueFilterParameters;",
        "patch": "@@ -42,7 +42,7 @@\n import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.IssueQuery.Builder;\n import org.sonar.server.issue.IssueTesting;\n-import org.sonar.server.issue.filter.IssueFilterParameters;\n+import org.sonarqube.ws.client.issue.IssueFilterParameters;\n import org.sonar.server.tester.UserSessionRule;\n import org.sonar.server.view.index.ViewIndexDefinition;\n import org.sonar.server.view.index.ViewIndexer;"
    },
    {
        "commit_id": "08d3297f4a786d1763f7f6475561307339fe6985",
        "commit_message": "SONAR-6947 Add tests and bug fixes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/08d3297f4a786d1763f7f6475561307339fe6985",
        "buggy_code": "private void doHandle(AddGroupWsRequest request) throws Exception {",
        "fixed_code": "private void doHandle(AddGroupWsRequest request) {",
        "patch": "@@ -80,7 +80,7 @@ public void handle(Request request, Response response) throws Exception {\n     response.noContent();\n   }\n \n-  private void doHandle(AddGroupWsRequest request) throws Exception {\n+  private void doHandle(AddGroupWsRequest request) {\n     DbSession dbSession = dbClient.openSession(false);\n     try {\n       Long groupId = request.getGroupId() == null ? null : Long.valueOf(request.getGroupId());"
    },
    {
        "commit_id": "3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "commit_message": "SONAR-7003 Refactor batch issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "buggy_code": "return rules.find(issue.ruleKey());",
        "fixed_code": "return rules.find(issue.getRuleKey());",
        "patch": "@@ -97,7 +97,7 @@ private static boolean validate(TrackedIssue issue, Rule rule, BatchComponent re\n \n   @CheckForNull\n   private Rule findRule(TrackedIssue issue) {\n-    return rules.find(issue.ruleKey());\n+    return rules.find(issue.getRuleKey());\n   }\n \n }"
    },
    {
        "commit_id": "3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "commit_message": "SONAR-7003 Refactor batch issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "buggy_code": "System.out.println(i.startLine() + \" \" + i.message());",
        "fixed_code": "System.out.println(i.startLine() + \" \" + i.getMessage());",
        "patch": "@@ -78,7 +78,7 @@ public void testIssueTrackingWithIssueOnEmptyFile() throws Exception {\n       .start();\n \n     for(TrackedIssue i : result.trackedIssues()) {\n-      System.out.println(i.startLine() + \" \" + i.message());\n+      System.out.println(i.startLine() + \" \" + i.getMessage());\n     }\n     \n     assertThat(result.trackedIssues()).hasSize(11);"
    },
    {
        "commit_id": "3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "commit_message": "SONAR-7003 Refactor batch issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3e019c0afb4a3df57ed86fe394a090b75f2d7218",
        "buggy_code": ".println(issue.message() + \" \" + issue.key() + \" \" + issue.ruleKey() + \" \" + issue.isNew() + \" \" + issue.resolution() + \" \" + issue.componentKey() + \" \"",
        "fixed_code": ".println(issue.getMessage() + \" \" + issue.key() + \" \" + issue.getRuleKey() + \" \" + issue.isNew() + \" \" + issue.resolution() + \" \" + issue.componentKey() + \" \"",
        "patch": "@@ -193,7 +193,7 @@ private static void assertNumberIssues(TaskResult result, int expectedNew, int e\n     int resolvedIssue = 0;\n     for (TrackedIssue issue : result.trackedIssues()) {\n       System.out\n-        .println(issue.message() + \" \" + issue.key() + \" \" + issue.ruleKey() + \" \" + issue.isNew() + \" \" + issue.resolution() + \" \" + issue.componentKey() + \" \"\n+        .println(issue.getMessage() + \" \" + issue.key() + \" \" + issue.getRuleKey() + \" \" + issue.isNew() + \" \" + issue.resolution() + \" \" + issue.componentKey() + \" \"\n           + issue.startLine());\n       if (issue.isNew()) {\n         newIssues++;"
    },
    {
        "commit_id": "69095c5d5bba7d613205536af1529c750fe4547d",
        "commit_message": "fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/69095c5d5bba7d613205536af1529c750fe4547d",
        "buggy_code": "private static final ThreadLocal<UserSession> THREAD_LOCAL = new ThreadLocal<UserSession>();",
        "fixed_code": "private static final ThreadLocal<UserSession> THREAD_LOCAL = new ThreadLocal<>();",
        "patch": "@@ -31,7 +31,7 @@\n  */\n public class ThreadLocalUserSession implements UserSession {\n \n-  private static final ThreadLocal<UserSession> THREAD_LOCAL = new ThreadLocal<UserSession>();\n+  private static final ThreadLocal<UserSession> THREAD_LOCAL = new ThreadLocal<>();\n \n   public UserSession get() {\n     return Objects.firstNonNull(THREAD_LOCAL.get(), AnonymousUserSession.INSTANCE);"
    },
    {
        "commit_id": "69095c5d5bba7d613205536af1529c750fe4547d",
        "commit_message": "fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/69095c5d5bba7d613205536af1529c750fe4547d",
        "buggy_code": "String lineToHash = hasNextLine ? line + '\\n' : line;",
        "fixed_code": "String lineToHash = hasNextLine ? (line + '\\n') : line;",
        "patch": "@@ -33,7 +33,7 @@ public class SourceHashComputer {\n   private final MessageDigest md5Digest = DigestUtils.getMd5Digest();\n \n   public void addLine(String line, boolean hasNextLine) {\n-    String lineToHash = hasNextLine ? line + '\\n' : line;\n+    String lineToHash = hasNextLine ? (line + '\\n') : line;\n     this.md5Digest.update(lineToHash.getBytes(UTF_8));\n   }\n "
    },
    {
        "commit_id": "347978968e87735dacb333f72e32f20b8a7a3163",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/347978968e87735dacb333f72e32f20b8a7a3163",
        "buggy_code": "private static final String JDBC_SPECIFIC_MESSAGE = \"There is no more DB connection to the SQ database. It will be ignored.\";",
        "fixed_code": "private static final String JDBC_SPECIFIC_MESSAGE = \"It will be ignored. There is no longer any DB connection to the SQ database.\";",
        "patch": "@@ -33,7 +33,7 @@ public class GlobalSettings extends Settings {\n \n   private static final Logger LOG = LoggerFactory.getLogger(GlobalSettings.class);\n \n-  private static final String JDBC_SPECIFIC_MESSAGE = \"There is no more DB connection to the SQ database. It will be ignored.\";\n+  private static final String JDBC_SPECIFIC_MESSAGE = \"It will be ignored. There is no longer any DB connection to the SQ database.\";\n   /**\n    * A map of dropped properties as key and specific message to display for that property\n    * (what will happen, what should the user do, ...) as a value"
    },
    {
        "commit_id": "347978968e87735dacb333f72e32f20b8a7a3163",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/347978968e87735dacb333f72e32f20b8a7a3163",
        "buggy_code": "LOG.info(\"-- Succesfully synchronized project cache\");",
        "fixed_code": "LOG.info(\"-- Successfully synchronized project cache\");",
        "patch": "@@ -112,7 +112,7 @@ public void load(String projectKey, boolean force) {\n \n   private void saveStatus() {\n     cacheStatus.save();\n-    LOG.info(\"-- Succesfully synchronized project cache\");\n+    LOG.info(\"-- Successfully synchronized project cache\");\n   }\n \n   private void loadData(String projectKey) {"
    },
    {
        "commit_id": "47ca20b31b270592f5dcd64b7c6cb9d257a672cc",
        "commit_message": "Add Xoo senor to generate a issue with one day debt on each file",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/47ca20b31b270592f5dcd64b7c6cb9d257a672cc",
        "buggy_code": "assertThat(repo.rules()).hasSize(12);",
        "fixed_code": "assertThat(repo.rules()).hasSize(13);",
        "patch": "@@ -42,7 +42,7 @@ public void define_xoo_rules() {\n     assertThat(repo).isNotNull();\n     assertThat(repo.name()).isEqualTo(\"Xoo\");\n     assertThat(repo.language()).isEqualTo(\"xoo\");\n-    assertThat(repo.rules()).hasSize(12);\n+    assertThat(repo.rules()).hasSize(13);\n \n     RulesDefinition.Rule rule = repo.rule(OneIssuePerLineSensor.RULE_KEY);\n     assertThat(rule.name()).isNotEmpty();"
    },
    {
        "commit_id": "0235ff6fffe8a45bfb5b82eb4c6d8aeb2b7eccf9",
        "commit_message": "reduce code duplication in package issue.suite",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0235ff6fffe8a45bfb5b82eb4c6d8aeb2b7eccf9",
        "buggy_code": "ItUtils.runProjectAnalysis(TechnicalDebtMeasureVariationTest.orchestrator, \"shared/xoo-sample\", properties);",
        "fixed_code": "ItUtils.runVerboseProjectAnalysis(TechnicalDebtMeasureVariationTest.orchestrator, \"shared/xoo-sample\", properties);",
        "patch": "@@ -146,7 +146,7 @@ private void defineQualityProfile(String qualityProfileKey) {\n   }\n \n   private void runSampleProjectAnalysis(String... properties) {\n-    ItUtils.runProjectAnalysis(TechnicalDebtMeasureVariationTest.orchestrator, \"shared/xoo-sample\", properties);\n+    ItUtils.runVerboseProjectAnalysis(TechnicalDebtMeasureVariationTest.orchestrator, \"shared/xoo-sample\", properties);\n   }\n \n   private Resource getSampleProjectResourceWithVariations(String metricKey) {"
    },
    {
        "commit_id": "194a6bc383963486033e6f563bcd3fd962a1771f",
        "commit_message": "Fix descriptions of 2 CE steps",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/194a6bc383963486033e6f563bcd3fd962a1771f",
        "buggy_code": "return \"Compute Quality Profile measures\";",
        "fixed_code": "return \"Compute Quality profile measures\";",
        "patch": "@@ -122,6 +122,6 @@ public Measure createMeasure() {\n \n   @Override\n   public String getDescription() {\n-    return \"Compute Quality Profile measures\";\n+    return \"Compute Quality profile measures\";\n   }\n }"
    },
    {
        "commit_id": "f0f585d25d40d6117e586167f5f42c93978060f8",
        "commit_message": "Automatic merge from branch-5.2\n\n* origin/branch-5.2:\n  fix reset of TreeRootHolderRule + reduce duplication\n  reduce polling time of Compute Engine scheduler from 10s to 2\n  add name to thread used by NotificationService\n  fix duplicated SqlSessionFactory in memory\n  minor fix in MutableAnalysisMetadataHolder#setAnalysisDate javadoc\n  do not reload profile details when selecting a project, fix tooltips\n  improve readability of language selection on the profiles page\n  fix capitalization inconsistency of the notification dispatcher names\n  fix error in JsonWriter usage description in javadoc of WebService",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0f585d25d40d6117e586167f5f42c93978060f8",
        "buggy_code": "this.delayBetweenTasks = 10;",
        "fixed_code": "this.delayBetweenTasks = 2;",
        "patch": "@@ -33,7 +33,7 @@ public CeProcessingSchedulerImpl(CeProcessingSchedulerExecutorService processing\n     this.executorService = processingExecutorService;\n     this.workerRunnable = workerRunnable;\n \n-    this.delayBetweenTasks = 10;\n+    this.delayBetweenTasks = 2;\n     this.delayForFirstStart = 0;\n     this.timeUnit = TimeUnit.SECONDS;\n   }"
    },
    {
        "commit_id": "f0f585d25d40d6117e586167f5f42c93978060f8",
        "commit_message": "Automatic merge from branch-5.2\n\n* origin/branch-5.2:\n  fix reset of TreeRootHolderRule + reduce duplication\n  reduce polling time of Compute Engine scheduler from 10s to 2\n  add name to thread used by NotificationService\n  fix duplicated SqlSessionFactory in memory\n  minor fix in MutableAnalysisMetadataHolder#setAnalysisDate javadoc\n  do not reload profile details when selecting a project, fix tooltips\n  improve readability of language selection on the profiles page\n  fix capitalization inconsistency of the notification dispatcher names\n  fix error in JsonWriter usage description in javadoc of WebService",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0f585d25d40d6117e586167f5f42c93978060f8",
        "buggy_code": "verify(processingExecutorService).scheduleAtFixedRate(same(workerRunnable), eq(0L), eq(10L), eq(TimeUnit.SECONDS));",
        "fixed_code": "verify(processingExecutorService).scheduleAtFixedRate(same(workerRunnable), eq(0L), eq(2L), eq(TimeUnit.SECONDS));",
        "patch": "@@ -37,7 +37,7 @@ public class CeProcessingSchedulerImplTest {\n   public void startScheduling_schedules_CeWorkerRunnable_at_fixed_rate_run_head_of_queue() {\n     underTest.startScheduling();\n \n-    verify(processingExecutorService).scheduleAtFixedRate(same(workerRunnable), eq(0L), eq(10L), eq(TimeUnit.SECONDS));\n+    verify(processingExecutorService).scheduleAtFixedRate(same(workerRunnable), eq(0L), eq(2L), eq(TimeUnit.SECONDS));\n     verifyNoMoreInteractions(processingExecutorService);\n   }\n "
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -45,7 +45,7 @@ public class AdministrationTestSuite {\n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n     .setServerProperty(\"sonar.notifications.delay\", \"1\")\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(ItUtils.pluginArtifact(\"property-sets-plugin\"))\n     .addPlugin(ItUtils.pluginArtifact(\"sonar-subcategories-plugin\"))\n "
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -52,7 +52,7 @@ public class AnalysisTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(ItUtils.xooPlugin())\n     .build();\n }"
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -22,7 +22,7 @@ public class BatchTestSuite {\n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n     .addPlugin(ItUtils.xooPlugin())\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .setOrchestratorProperty(\"javaVersion\", \"LATEST_RELEASE\").addPlugin(\"java\")\n     .setContext(\"/\")\n "
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -27,7 +27,7 @@ public class IssueTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(xooPlugin())\n     .addPlugin(pluginArtifact(\"issue-action-plugin\"))\n     .build();"
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": "builder.setSonarVersion(System.getProperty(\"sonar.runtimeVersion\")));",
        "fixed_code": "builder.setSonarVersion(\"DEV\");",
        "patch": "@@ -74,7 +74,7 @@ public static void startServer() {\n     OrchestratorBuilder builder = Orchestrator.builderEnv();\n \n     // install latest compatible releases of plugins\n-    builder.setSonarVersion(System.getProperty(\"sonar.runtimeVersion\")));\n+    builder.setSonarVersion(\"DEV\");\n     org.sonar.updatecenter.common.Version sonarVersion = org.sonar.updatecenter.common.Version.create(builder.getSonarVersion());\n     builder.getUpdateCenter().setInstalledSonarVersion(sonarVersion);\n     for (Plugin plugin : builder.getUpdateCenter().findAllCompatiblePlugins()) {"
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -36,7 +36,7 @@ public class QualityGateNotificationTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(ItUtils.xooPlugin())\n \n     // 1 second. Required for notification test."
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -30,7 +30,7 @@ public class QualityGateTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(ItUtils.xooPlugin())\n \n     // 1 second. Required for notification test."
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -36,7 +36,7 @@ public class ServerTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .addPlugin(ItUtils.xooPlugin())\n \n     // Used in global_property_change_extension_point"
    },
    {
        "commit_id": "9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "commit_message": "Revert \"Fix the bad SQ version used by integration tests\"\n\nThis reverts commit 2d67d61504c354f3ebe5d9bedc54d66b1122bd75.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ffc146ae57af2f7117710d6710f84c10d6957ff",
        "buggy_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "fixed_code": ".setSonarVersion(\"DEV\")",
        "patch": "@@ -22,7 +22,7 @@ public class UpdateCenterTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n+    .setSonarVersion(\"DEV\")\n     .setServerProperty(\"sonar.updatecenter.url\", UpdateCenterTest.class.getResource(\"UpdateCenterTest/update-center.properties\").toString())\n     .addPlugin(pluginArtifact(\"sonar-fake-plugin\"))\n     .build();"
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -45,7 +45,7 @@ public class AdministrationTestSuite {\n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n     .setServerProperty(\"sonar.notifications.delay\", \"1\")\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(ItUtils.pluginArtifact(\"property-sets-plugin\"))\n     .addPlugin(ItUtils.pluginArtifact(\"sonar-subcategories-plugin\"))\n "
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -52,7 +52,7 @@ public class AnalysisTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(ItUtils.xooPlugin())\n     .build();\n }"
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -22,7 +22,7 @@ public class BatchTestSuite {\n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n     .addPlugin(ItUtils.xooPlugin())\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .setOrchestratorProperty(\"javaVersion\", \"LATEST_RELEASE\").addPlugin(\"java\")\n     .setContext(\"/\")\n "
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -27,7 +27,7 @@ public class IssueTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(xooPlugin())\n     .addPlugin(pluginArtifact(\"issue-action-plugin\"))\n     .build();"
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": "builder.setSonarVersion(\"DEV\");",
        "fixed_code": "builder.setSonarVersion(System.getProperty(\"sonar.runtimeVersion\")));",
        "patch": "@@ -74,7 +74,7 @@ public static void startServer() {\n     OrchestratorBuilder builder = Orchestrator.builderEnv();\n \n     // install latest compatible releases of plugins\n-    builder.setSonarVersion(\"DEV\");\n+    builder.setSonarVersion(System.getProperty(\"sonar.runtimeVersion\")));\n     org.sonar.updatecenter.common.Version sonarVersion = org.sonar.updatecenter.common.Version.create(builder.getSonarVersion());\n     builder.getUpdateCenter().setInstalledSonarVersion(sonarVersion);\n     for (Plugin plugin : builder.getUpdateCenter().findAllCompatiblePlugins()) {"
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -36,7 +36,7 @@ public class QualityGateNotificationTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(ItUtils.xooPlugin())\n \n     // 1 second. Required for notification test."
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -30,7 +30,7 @@ public class QualityGateTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(ItUtils.xooPlugin())\n \n     // 1 second. Required for notification test."
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -36,7 +36,7 @@ public class ServerTestSuite {\n \n   @ClassRule\n   public static final Orchestrator ORCHESTRATOR = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .addPlugin(ItUtils.xooPlugin())\n \n     // Used in global_property_change_extension_point"
    },
    {
        "commit_id": "2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "commit_message": "Fix the bad SQ version used by integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d67d61504c354f3ebe5d9bedc54d66b1122bd75",
        "buggy_code": ".setSonarVersion(\"DEV\")",
        "fixed_code": ".setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))",
        "patch": "@@ -22,7 +22,7 @@ public class UpdateCenterTest {\n \n   @ClassRule\n   public static Orchestrator orchestrator = Orchestrator.builderEnv()\n-    .setSonarVersion(\"DEV\")\n+    .setSonarVersion(System.getProperty(\"sonar.runtimeVersion\"))\n     .setServerProperty(\"sonar.updatecenter.url\", UpdateCenterTest.class.getResource(\"UpdateCenterTest/update-center.properties\").toString())\n     .addPlugin(pluginArtifact(\"sonar-fake-plugin\"))\n     .build();"
    },
    {
        "commit_id": "e812a77ec2f9760794fefead8bd2bb6de5a6e68f",
        "commit_message": "Fix Xms java option of sonar.web.javaOpts\n\n- missing \"-Djava.net.preferIPv4Stack=true\" in comment of sonar.properties\n- missing default value \"-Xms256m\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e812a77ec2f9760794fefead8bd2bb6de5a6e68f",
        "buggy_code": "defaults.put(ProcessProperties.WEB_JAVA_OPTS, \"-Xmx768m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.net.preferIPv4Stack=true\");",
        "fixed_code": "defaults.put(ProcessProperties.WEB_JAVA_OPTS, \"-Xmx768m -Xms256m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.net.preferIPv4Stack=true\");",
        "patch": "@@ -112,7 +112,7 @@ public static Map<String, String> defaults() {\n       \"-XX:+HeapDumpOnOutOfMemoryError\");\n     defaults.put(ProcessProperties.SEARCH_JAVA_ADDITIONAL_OPTS, \"\");\n \n-    defaults.put(ProcessProperties.WEB_JAVA_OPTS, \"-Xmx768m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.net.preferIPv4Stack=true\");\n+    defaults.put(ProcessProperties.WEB_JAVA_OPTS, \"-Xmx768m -Xms256m -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError -Djava.net.preferIPv4Stack=true\");\n     defaults.put(ProcessProperties.WEB_JAVA_ADDITIONAL_OPTS, \"\");\n     defaults.put(ProcessProperties.JDBC_URL, \"jdbc:h2:tcp://localhost:9092/sonar\");\n     defaults.put(ProcessProperties.JDBC_MAX_ACTIVE, \"60\");"
    },
    {
        "commit_id": "2165aab926de048fd908412ab5c6500529ee802f",
        "commit_message": "Remove issue attributes from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2165aab926de048fd908412ab5c6500529ee802f",
        "buggy_code": "return null;",
        "fixed_code": "return Collections.emptyMap();",
        "patch": "@@ -128,7 +128,7 @@ public String attribute(String key) {\n \n   @Override\n   public Map<String, String> attributes() {\n-    return null;\n+    return Collections.emptyMap();\n   }\n \n   @Override"
    },
    {
        "commit_id": "61388ef867ca83f58636499231105f78e4fbbbcb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61388ef867ca83f58636499231105f78e4fbbbcb",
        "buggy_code": "private void writeDashboards(JsonWriter json, List<DashboardDto> dashboards) {",
        "fixed_code": "private static void writeDashboards(JsonWriter json, List<DashboardDto> dashboards) {",
        "patch": "@@ -78,7 +78,7 @@ public void handle(Request request, Response response) throws Exception {\n     json.endObject().close();\n   }\n \n-  private void writeDashboards(JsonWriter json, List<DashboardDto> dashboards) {\n+  private static void writeDashboards(JsonWriter json, List<DashboardDto> dashboards) {\n     json.name(\"globalDashboards\").beginArray();\n     for (DashboardDto dashboard : dashboards) {\n       json.beginObject()"
    },
    {
        "commit_id": "61388ef867ca83f58636499231105f78e4fbbbcb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61388ef867ca83f58636499231105f78e4fbbbcb",
        "buggy_code": "private String getPageUrl(ViewProxy<Page> page) {",
        "fixed_code": "private static String getPageUrl(ViewProxy<Page> page) {",
        "patch": "@@ -83,7 +83,7 @@ public void handle(Request request, Response response) throws Exception {\n     json.endObject().close();\n   }\n \n-  private String getPageUrl(ViewProxy<Page> page) {\n+  private static String getPageUrl(ViewProxy<Page> page) {\n     return page.isController() ? page.getId() : String.format(\"/plugins/configuration/%s\", page.getId());\n   }\n }"
    },
    {
        "commit_id": "96f6a9d147111f89d6a9ee7ad61f484ae08dc5d8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/96f6a9d147111f89d6a9ee7ad61f484ae08dc5d8",
        "buggy_code": "static String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";",
        "fixed_code": "static final String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";",
        "patch": "@@ -24,5 +24,5 @@ private Messages() {\n     // constants\n   }\n \n-  static String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";\n+  static final String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";\n }"
    },
    {
        "commit_id": "96f6a9d147111f89d6a9ee7ad61f484ae08dc5d8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/96f6a9d147111f89d6a9ee7ad61f484ae08dc5d8",
        "buggy_code": "private void checkIsProjectOrModule(ComponentDto component, ResourceTypes resourceTypes) {",
        "fixed_code": "private static void checkIsProjectOrModule(ComponentDto component, ResourceTypes resourceTypes) {",
        "patch": "@@ -88,7 +88,7 @@ private static ComponentDto getIfPresentOrFail(Optional<ComponentDto> component,\n     return component.get();\n   }\n \n-  private void checkIsProjectOrModule(ComponentDto component, ResourceTypes resourceTypes) {\n+  private static void checkIsProjectOrModule(ComponentDto component, ResourceTypes resourceTypes) {\n     Set<String> rootQualifiers = from(resourceTypes.getRoots())\n       .transform(RESOURCE_TYPE_TO_QUALIFIER)\n       .toSet();"
    },
    {
        "commit_id": "2b702eaff6c12860cbfe38699affb206ae0c03a2",
        "commit_message": "SONAR-6857 Fix escaping in a like query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b702eaff6c12860cbfe38699affb206ae0c03a2",
        "buggy_code": "ComponentQuery componentDtoQuery = new ComponentQuery(dbClient.getDatabase(), componentQuery, Qualifiers.PROJECT, Qualifiers.VIEW);",
        "fixed_code": "ComponentQuery componentDtoQuery = new ComponentQuery(componentQuery, Qualifiers.PROJECT, Qualifiers.VIEW);",
        "patch": "@@ -173,7 +173,7 @@ private void loadComponentUuids(DbSession dbSession, Request wsRequest, CeActivi\n       query.setComponentUuid(componentUuid);\n     }\n     if (componentQuery != null) {\n-      ComponentQuery componentDtoQuery = new ComponentQuery(dbClient.getDatabase(), componentQuery, Qualifiers.PROJECT, Qualifiers.VIEW);\n+      ComponentQuery componentDtoQuery = new ComponentQuery(componentQuery, Qualifiers.PROJECT, Qualifiers.VIEW);\n       List<ComponentDto> componentDtos = dbClient.componentDao().selectByQuery(dbSession, componentDtoQuery, 0, CeActivityQuery.MAX_COMPONENT_UUIDS);\n       query.setComponentUuids(Lists.transform(componentDtos, ComponentDtoFunctions.toUuid()));\n     }"
    },
    {
        "commit_id": "2b702eaff6c12860cbfe38699affb206ae0c03a2",
        "commit_message": "SONAR-6857 Fix escaping in a like query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b702eaff6c12860cbfe38699affb206ae0c03a2",
        "buggy_code": "package org.sonar.db.dialect;",
        "fixed_code": "package org.sonar.db;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.db.dialect;\n+package org.sonar.db;\n \n public enum WildcardPosition {\n   BEFORE, AFTER, BEFORE_AND_AFTER"
    },
    {
        "commit_id": "d032346ab2c77a6650200825effa202bd4153da5",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d032346ab2c77a6650200825effa202bd4153da5",
        "buggy_code": "assertThat(logTester.logs()).contains(\"Trigger views update\");",
        "fixed_code": "assertThat(logTester.logs()).contains(\"Trigger Views update\");",
        "patch": "@@ -68,7 +68,7 @@ public void triggerViews() throws Exception {\n         .put(\"sonar.task\", \"views\").build())\n       .start();\n \n-    assertThat(logTester.logs()).contains(\"Trigger views update\");\n+    assertThat(logTester.logs()).contains(\"Trigger Views update\");\n   }\n \n   @Test(expected = MessageException.class)"
    },
    {
        "commit_id": "020753a24d0e0416fe2d37f83151321c3eb42208",
        "commit_message": "SONAR-6736 fix unrenamed tests after class has been renamed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/020753a24d0e0416fe2d37f83151321c3eb42208",
        "buggy_code": "public class CeWorkerRunnableTest {",
        "fixed_code": "public class CeWorkerRunnableImplTest {",
        "patch": "@@ -33,7 +33,7 @@\n import static org.mockito.Mockito.verifyZeroInteractions;\n import static org.mockito.Mockito.when;\n \n-public class CeWorkerRunnableTest {\n+public class CeWorkerRunnableImplTest {\n \n   CeQueue queue = mock(CeQueueImpl.class);\n   ReportTaskProcessor taskProcessor = mock(ReportTaskProcessor.class);"
    },
    {
        "commit_id": "020753a24d0e0416fe2d37f83151321c3eb42208",
        "commit_message": "SONAR-6736 fix unrenamed tests after class has been renamed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/020753a24d0e0416fe2d37f83151321c3eb42208",
        "buggy_code": "public class FeedDebtModelStepTest extends BaseStepTest {",
        "fixed_code": "public class LoadDebtModelStepTest extends BaseStepTest {",
        "patch": "@@ -37,7 +37,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n @Category(DbTests.class)\n-public class FeedDebtModelStepTest extends BaseStepTest {\n+public class LoadDebtModelStepTest extends BaseStepTest {\n \n   @Rule\n   public DbTester dbTester = DbTester.create(System2.INSTANCE);"
    },
    {
        "commit_id": "020753a24d0e0416fe2d37f83151321c3eb42208",
        "commit_message": "SONAR-6736 fix unrenamed tests after class has been renamed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/020753a24d0e0416fe2d37f83151321c3eb42208",
        "buggy_code": "public class FeedMeasureComputersTest {",
        "fixed_code": "public class LoadMeasureComputersStepTest {",
        "patch": "@@ -44,7 +44,7 @@\n import static org.sonar.api.measures.Metric.ValueType.INT;\n import static org.sonar.api.measures.Metric.ValueType.MILLISEC;\n \n-public class FeedMeasureComputersTest {\n+public class LoadMeasureComputersStepTest {\n \n   @Rule\n   public ExpectedException thrown = ExpectedException.none();"
    },
    {
        "commit_id": "020753a24d0e0416fe2d37f83151321c3eb42208",
        "commit_message": "SONAR-6736 fix unrenamed tests after class has been renamed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/020753a24d0e0416fe2d37f83151321c3eb42208",
        "buggy_code": "public class FeedPeriodsStepTest extends BaseStepTest {",
        "fixed_code": "public class LoadPeriodsStepTest extends BaseStepTest {",
        "patch": "@@ -52,7 +52,7 @@\n \n @Category(DbTests.class)\n @RunWith(DataProviderRunner.class)\n-public class FeedPeriodsStepTest extends BaseStepTest {\n+public class LoadPeriodsStepTest extends BaseStepTest {\n \n   private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");\n   private static final String ROOT_KEY = \"ROOT_KEY\";"
    },
    {
        "commit_id": "dab419c5e535a5e0c4c698490f140cbd770ce90f",
        "commit_message": "Fix Messages to become a static field",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dab419c5e535a5e0c4c698490f140cbd770ce90f",
        "buggy_code": "String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";",
        "fixed_code": "static String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";",
        "patch": "@@ -24,5 +24,5 @@ private Messages() {\n     // constants\n   }\n \n-  String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";\n+  static String NO_PERMISSION = \"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\";\n }"
    },
    {
        "commit_id": "c3d9ca2c7e8db8e188f15dbc0db2278c5303e906",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c3d9ca2c7e8db8e188f15dbc0db2278c5303e906",
        "buggy_code": "private SortedMap<String, String> buildGramSearchField() {",
        "fixed_code": "private static SortedMap<String, String> buildGramSearchField() {",
        "patch": "@@ -88,7 +88,7 @@ public void define(IndexDefinitionContext context) {\n     mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).build();\n   }\n \n-  private SortedMap<String, String> buildGramSearchField() {\n+  private static SortedMap<String, String> buildGramSearchField() {\n     return ImmutableSortedMap.of(\n       \"type\", \"string\",\n       \"index\", \"analyzed\","
    },
    {
        "commit_id": "a6d3158b27dc9a0018998af2439e42ba1ddda8a6",
        "commit_message": "SONAR-6833 fix missing change",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a6d3158b27dc9a0018998af2439e42ba1ddda8a6",
        "buggy_code": "userSession.addProjectUuidPermissions(UserRole.ADMIN, \"PROJECT_1\");",
        "fixed_code": "userSession.addComponentUuidPermission(UserRole.ADMIN, \"PROJECT_1\", \"PROJECT_1\");",
        "patch": "@@ -158,7 +158,7 @@ private void assertPage(int pageIndex, int pageSize, int expectedTotal, List<Str\n \n   @Test\n   public void get_project_activity() {\n-    userSession.addProjectUuidPermissions(UserRole.ADMIN, \"PROJECT_1\");\n+    userSession.addComponentUuidPermission(UserRole.ADMIN, \"PROJECT_1\", \"PROJECT_1\");\n     insert(\"T1\", \"PROJECT_1\", CeActivityDto.Status.SUCCESS);\n     insert(\"T2\", \"PROJECT_2\", CeActivityDto.Status.FAILED);\n "
    },
    {
        "commit_id": "1b4952702e316695cef84cc7556f073fd469f4d0",
        "commit_message": "SONAR-6854 WS permissions/template_groups fix queries for Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b4952702e316695cef84cc7556f073fd469f4d0",
        "buggy_code": "public void anyone_group_is_not_returned_when_it_has_no_permission() {",
        "fixed_code": "public void anyone_group_is_returned_when_it_has_no_permission() {",
        "patch": "@@ -75,7 +75,7 @@ public void select_groups() {\n   }\n \n   @Test\n-  public void anyone_group_is_not_returned_when_it_has_no_permission() {\n+  public void anyone_group_is_returned_when_it_has_no_permission() {\n     dbTester.prepareDbUnit(getClass(), \"groups_with_permissions.xml\");\n \n     // Anyone group is returned even if it doesn't have the permission"
    },
    {
        "commit_id": "2905a48db212185cfef6cd1c56253bb5bfb6182c",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2905a48db212185cfef6cd1c56253bb5bfb6182c",
        "buggy_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(CePropertyDefinitions.class));",
        "fixed_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(CePropertyDefinitions.class)).isTrue();",
        "patch": "@@ -33,6 +33,6 @@ public void all() {\n \n   @Test\n   public void only_statics() {\n-    assertThat(TestUtils.hasOnlyPrivateConstructors(CePropertyDefinitions.class));\n+    assertThat(TestUtils.hasOnlyPrivateConstructors(CePropertyDefinitions.class)).isTrue();\n   }\n }"
    },
    {
        "commit_id": "e23eaf26ec5868322bce3f17092f88a5dfe40cb4",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e23eaf26ec5868322bce3f17092f88a5dfe40cb4",
        "buggy_code": "return 0l;",
        "fixed_code": "return 0L;",
        "patch": "@@ -141,7 +141,7 @@ private static long getLongValue(Measure measure, Period period) {\n     if (measure.hasVariations() && measure.getVariations().hasVariation(period.getIndex())) {\n       return (long) measure.getVariations().getVariation(period.getIndex());\n     }\n-    return 0l;\n+    return 0L;\n   }\n \n   private void initNewDebtRatioCounter(Component file, Path<NewDevelopmentCostCounter> path) {"
    },
    {
        "commit_id": "021fc77537a86eb9d39bff6fa02e6a662b5eaa15",
        "commit_message": "Fix rule key in issue callback",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/021fc77537a86eb9d39bff6fa02e6a662b5eaa15",
        "buggy_code": "newIssue.setRuleKey(issue.getRuleKey().rule());",
        "fixed_code": "newIssue.setRuleKey(issue.getRuleKey().toString());",
        "patch": "@@ -81,7 +81,7 @@ public void execute() {\n       newIssue.setMessage(issue.getMessage());\n       newIssue.setNew(issue.isNew());\n       newIssue.setResolution(issue.resolution());\n-      newIssue.setRuleKey(issue.getRuleKey().rule());\n+      newIssue.setRuleKey(issue.getRuleKey().toString());\n       newIssue.setRuleName(getRuleName(issue.getRuleKey()));\n       newIssue.setSeverity(issue.severity());\n       newIssue.setStatus(issue.status());"
    },
    {
        "commit_id": "164d6d931c3b015877cbfa936f03ea4503349ddb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/164d6d931c3b015877cbfa936f03ea4503349ddb",
        "buggy_code": "qb.should(QueryBuilders.simpleQueryString(query.getQueryText())",
        "fixed_code": "qb.should(QueryBuilders.simpleQueryStringQuery(query.getQueryText())",
        "patch": "@@ -206,7 +206,7 @@ protected QueryBuilder getQuery(RuleQuery query) {\n     String queryString = query.getQueryText();\n \n     // Human readable type of querying\n-    qb.should(QueryBuilders.simpleQueryString(query.getQueryText())\n+    qb.should(QueryBuilders.simpleQueryStringQuery(query.getQueryText())\n       .field(RuleNormalizer.RuleField.NAME.field() + \".\" + IndexField.SEARCH_WORDS_SUFFIX, 20f)\n       .field(RuleNormalizer.RuleField.HTML_DESCRIPTION.field() + \".\" + IndexField.SEARCH_WORDS_SUFFIX, 3f)\n       .defaultOperator(SimpleQueryStringBuilder.Operator.AND)"
    },
    {
        "commit_id": "2b4227eb6ee14274edf3cfe889b046c56d9b5a67",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b4227eb6ee14274edf3cfe889b046c56d9b5a67",
        "buggy_code": ".preZone(timeZoneString)",
        "fixed_code": ".timeZone(timeZoneString)",
        "patch": "@@ -476,7 +476,7 @@ private AggregationBuilder getCreatedAtFacet(IssueQuery query, Map<String, Filte\n       .interval(bucketSize)\n       .minDocCount(0L)\n       .format(DateUtils.DATETIME_FORMAT)\n-      .preZone(timeZoneString)\n+      .timeZone(timeZoneString)\n       .postZone(timeZoneString)\n       .extendedBounds(startTime, endTime);\n     dateHistogram = addDebtAggregationIfNeeded(query, dateHistogram);"
    },
    {
        "commit_id": "2b4227eb6ee14274edf3cfe889b046c56d9b5a67",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b4227eb6ee14274edf3cfe889b046c56d9b5a67",
        "buggy_code": "private boolean indexResource(long id, String name, String qualifier, long rootId, SqlSession session, ResourceIndexMapper mapper) {",
        "fixed_code": "private static boolean indexResource(long id, String name, String qualifier, long rootId, SqlSession session, ResourceIndexMapper mapper) {",
        "patch": "@@ -162,7 +162,7 @@ public boolean indexResource(int id, String name, String qualifier, int rootId)\n     return indexed;\n   }\n \n-  private boolean indexResource(long id, String name, String qualifier, long rootId, SqlSession session, ResourceIndexMapper mapper) {\n+  private static boolean indexResource(long id, String name, String qualifier, long rootId, SqlSession session, ResourceIndexMapper mapper) {\n     boolean indexed = false;\n     String key = nameToKey(name);\n     if (key.length() >= MINIMUM_KEY_SIZE || key.length() == SINGLE_INDEX_SIZE) {"
    },
    {
        "commit_id": "46445984cf50ef0dda050ea8d369c89936e97f9f",
        "commit_message": "SONAR-6044 Stop storing distribution of issue-related measures by rule",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/46445984cf50ef0dda050ea8d369c89936e97f9f",
        "buggy_code": "public static final int LAST_VERSION = 937;",
        "fixed_code": "public static final int LAST_VERSION = 938;",
        "patch": "@@ -29,7 +29,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 937;\n+  public static final int LAST_VERSION = 938;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "46445984cf50ef0dda050ea8d369c89936e97f9f",
        "commit_message": "SONAR-6044 Stop storing distribution of issue-related measures by rule",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/46445984cf50ef0dda050ea8d369c89936e97f9f",
        "buggy_code": "assertThat(container.size()).isEqualTo(40);",
        "fixed_code": "assertThat(container.size()).isEqualTo(41);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(40);\n+    assertThat(container.size()).isEqualTo(41);\n   }\n }"
    },
    {
        "commit_id": "1930d3927a57af7007c46605ae2a99357218b4ed",
        "commit_message": "Fix merge of branch feature/ce-monitoring\n\n- JS changes (ES2015)\n- DB migration conflicts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1930d3927a57af7007c46605ae2a99357218b4ed",
        "buggy_code": "public static final int LAST_VERSION = 936;",
        "fixed_code": "public static final int LAST_VERSION = 937;",
        "patch": "@@ -29,7 +29,7 @@\n \n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 936;\n+  public static final int LAST_VERSION = 937;\n \n   /**\n    * The minimum supported version which can be upgraded. Lower"
    },
    {
        "commit_id": "1930d3927a57af7007c46605ae2a99357218b4ed",
        "commit_message": "Fix merge of branch feature/ce-monitoring\n\n- JS changes (ES2015)\n- DB migration conflicts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1930d3927a57af7007c46605ae2a99357218b4ed",
        "buggy_code": "assertThat(container.size()).isEqualTo(39);",
        "fixed_code": "assertThat(container.size()).isEqualTo(40);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(39);\n+    assertThat(container.size()).isEqualTo(40);\n   }\n }"
    },
    {
        "commit_id": "32dcee49dc835eaeb9345c6558198f33f5d9efc7",
        "commit_message": "Fix benchmark of saving of FILE_SOURCES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/32dcee49dc835eaeb9345c6558198f33f5d9efc7",
        "buggy_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 140000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "fixed_code": "benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 125000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -90,7 +90,7 @@ private void persistFileSources(File reportDir) {\n     assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(NUMBER_OF_FILES);\n     LOGGER.info(String.format(\"File sources has been persisted in %d ms\", duration));\n \n-    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 140000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n+    benchmark.expectAround(\"Duration to persist FILE_SOURCES\", duration, 125000, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n   }\n \n   private File prepareReport() throws IOException {"
    },
    {
        "commit_id": "0bc2180be6cc7dea6f2bb74b573818af1f121389",
        "commit_message": "fix ComponentTesting: Subview in table PROJECTS have no path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0bc2180be6cc7dea6f2bb74b573818af1f121389",
        "buggy_code": "ComponentDto subviewDto = ComponentTesting.newSubView(VIEW_DTO, \"dir\", \"who cares?\");",
        "fixed_code": "ComponentDto subviewDto = ComponentTesting.newSubView(VIEW_DTO, \"dir\", \"key\");",
        "patch": "@@ -134,7 +134,7 @@ public void set_variation() {\n     dbClient.measureDao().insert(session, newMeasureDto(ISSUES_METRIC.getId(), VIEW_DTO.getId(), period1ViewSnapshot.getId(), 60d));\n \n     // SubView\n-    ComponentDto subviewDto = ComponentTesting.newSubView(VIEW_DTO, \"dir\", \"who cares?\");\n+    ComponentDto subviewDto = ComponentTesting.newSubView(VIEW_DTO, \"dir\", \"key\");\n     dbClient.componentDao().insert(session, subviewDto);\n     SnapshotDto period1SubviewSnapshot = createForComponent(subviewDto, period1ViewSnapshot);\n     dbClient.snapshotDao().insert(session, period1SubviewSnapshot);"
    },
    {
        "commit_id": "c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "commit_message": "Fix metrics of type MILLISEC\n\nUnderlying type must be long instead of int",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "buggy_code": "private class IsGreaterOrEqualThanLine implements Predicate<DbFileSources.Line> {",
        "fixed_code": "private static class IsGreaterOrEqualThanLine implements Predicate<DbFileSources.Line> {",
        "patch": "@@ -115,7 +115,7 @@ public String apply(@Nonnull DbFileSources.Line line) {\n \n   }\n \n-  private class IsGreaterOrEqualThanLine implements Predicate<DbFileSources.Line> {\n+  private static class IsGreaterOrEqualThanLine implements Predicate<DbFileSources.Line> {\n     private final int from;\n \n     IsGreaterOrEqualThanLine(int from) {"
    },
    {
        "commit_id": "c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "commit_message": "Fix metrics of type MILLISEC\n\nUnderlying type must be long instead of int",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "buggy_code": "public static final Metric<Integer> TEST_EXECUTION_TIME = new Metric.Builder(TEST_EXECUTION_TIME_KEY, \"Unit tests duration\", Metric.ValueType.MILLISEC)",
        "fixed_code": "public static final Metric<Long> TEST_EXECUTION_TIME = new Metric.Builder(TEST_EXECUTION_TIME_KEY, \"Unit tests duration\", Metric.ValueType.MILLISEC)",
        "patch": "@@ -413,7 +413,7 @@ public final class CoreMetrics {\n     .create();\n \n   public static final String TEST_EXECUTION_TIME_KEY = \"test_execution_time\";\n-  public static final Metric<Integer> TEST_EXECUTION_TIME = new Metric.Builder(TEST_EXECUTION_TIME_KEY, \"Unit tests duration\", Metric.ValueType.MILLISEC)\n+  public static final Metric<Long> TEST_EXECUTION_TIME = new Metric.Builder(TEST_EXECUTION_TIME_KEY, \"Unit tests duration\", Metric.ValueType.MILLISEC)\n     .setDescription(\"Execution duration of unit tests\")\n     .setDirection(Metric.DIRECTION_WORST)\n     .setQualitative(false)"
    },
    {
        "commit_id": "c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "commit_message": "Fix metrics of type MILLISEC\n\nUnderlying type must be long instead of int",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c19e6ff4081c25fce35e91de0219021ffaa05f3f",
        "buggy_code": "MILLISEC(Integer.class),",
        "fixed_code": "MILLISEC(Long.class),",
        "patch": "@@ -58,7 +58,7 @@ public enum ValueType {\n     PERCENT(Double.class),\n     BOOL(Boolean.class),\n     STRING(String.class),\n-    MILLISEC(Integer.class),\n+    MILLISEC(Long.class),\n     DATA(String.class),\n     LEVEL(Metric.Level.class),\n     DISTRIB(String.class),"
    },
    {
        "commit_id": "d156cfffc2efd849f85bbbfc3d8f0870697ec7b1",
        "commit_message": "Fix project lock on windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d156cfffc2efd849f85bbbfc3d8f0870697ec7b1",
        "buggy_code": "private static final IOFileFilter FILE_FILTER = HiddenFileFilter.VISIBLE;",
        "fixed_code": "private static final IOFileFilter FILE_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter(\".sonar_lock\")));",
        "patch": "@@ -58,7 +58,7 @@ public class FileIndexer {\n   private static final Logger LOG = LoggerFactory.getLogger(FileIndexer.class);\n \n   private static final IOFileFilter DIR_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(\".\")));\n-  private static final IOFileFilter FILE_FILTER = HiddenFileFilter.VISIBLE;\n+  private static final IOFileFilter FILE_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter(\".sonar_lock\")));\n \n   private final List<InputFileFilter> filters;\n   private final boolean isAggregator;"
    },
    {
        "commit_id": "b90f78348c9325d58c9f236e2cdedbf10548d1ea",
        "commit_message": "SONAR-6499 WS permission/set_default_template fix when views default template has never been set",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b90f78348c9325d58c9f236e2cdedbf10548d1ea",
        "buggy_code": "assertThat(persistentSettings.getString(DEFAULT_TEMPLATE_PROPERTY)).isEqualTo(template.getUuid());",
        "fixed_code": "assertThat(persistentSettings.getString(DEFAULT_TEMPLATE_PROPERTY)).isEqualTo(\"any-template-uuid\");",
        "patch": "@@ -106,7 +106,7 @@ public void update_settings_of_default_and_qualifier_default_for_project_qualifi\n     String result = newRequest(template.getUuid(), null);\n \n     assertThat(result).isEmpty();\n-    assertThat(persistentSettings.getString(DEFAULT_TEMPLATE_PROPERTY)).isEqualTo(template.getUuid());\n+    assertThat(persistentSettings.getString(DEFAULT_TEMPLATE_PROPERTY)).isEqualTo(\"any-template-uuid\");\n     assertThat(persistentSettings.getString(defaultRootQualifierTemplateProperty(PROJECT))).isEqualTo(template.getUuid());\n     assertThat(persistentSettings.getString(defaultRootQualifierTemplateProperty(VIEW))).isEqualTo(\"any-view-template-uuid\");\n     assertThat(persistentSettings.getString(defaultRootQualifierTemplateProperty(\"DEV\"))).isEqualTo(\"any-dev-template-uuid\");"
    },
    {
        "commit_id": "b90f78348c9325d58c9f236e2cdedbf10548d1ea",
        "commit_message": "SONAR-6499 WS permission/set_default_template fix when views default template has never been set",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b90f78348c9325d58c9f236e2cdedbf10548d1ea",
        "buggy_code": "verifyZeroInteractions(permissionTemplateDao, settings);",
        "fixed_code": "verifyZeroInteractions(permissionTemplateDao);",
        "patch": "@@ -108,7 +108,7 @@ public void should_skip_insertion_and_registration() {\n     RegisterPermissionTemplates initializer = new RegisterPermissionTemplates(dbClient, settings);\n     initializer.start();\n \n-    verifyZeroInteractions(permissionTemplateDao, settings);\n+    verifyZeroInteractions(permissionTemplateDao);\n     verify(loadedTemplateDao, never()).insert(any(LoadedTemplateDto.class));\n   }\n "
    },
    {
        "commit_id": "3fb22d775c9d195fed69ca154ee98d208b81c62f",
        "commit_message": "Fail fast on cache write error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3fb22d775c9d195fed69ca154ee98d208b81c62f",
        "buggy_code": "LOG.warn(\"Error saving to WS cache\", e);",
        "fixed_code": "throw new IllegalStateException(\"Error saving to WS cache\", e);",
        "patch": "@@ -111,7 +111,7 @@ private void updateCache(String id, byte[] value) {\n     try {\n       cache.put(client.getURI(id).toString(), value);\n     } catch (IOException e) {\n-      LOG.warn(\"Error saving to WS cache\", e);\n+      throw new IllegalStateException(\"Error saving to WS cache\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "b87a4ac9478262ad261dbd6ec3378a7d4a46efd1",
        "commit_message": "Fix test false-positives when port is already in use",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b87a4ac9478262ad261dbd6ec3378a7d4a46efd1",
        "buggy_code": "socket.bind(new InetSocketAddress(0));",
        "fixed_code": "socket.bind(new InetSocketAddress(\"localhost\", 0));",
        "patch": "@@ -39,7 +39,7 @@ public static int freePort() {\n     try  {\n       socket = new ServerSocket();\n       socket.setReuseAddress(true);\n-      socket.bind(new InetSocketAddress(0));\n+      socket.bind(new InetSocketAddress(\"localhost\", 0));\n       return socket.getLocalPort();\n \n     } catch (IOException e) {"
    },
    {
        "commit_id": "91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "buggy_code": "private static abstract class MessageField {",
        "fixed_code": "private abstract static class MessageField {",
        "patch": "@@ -74,7 +74,7 @@ private ProtobufJsonFormat() {\n     // only statics\n   }\n \n-  private static abstract class MessageField {\n+  private abstract static class MessageField {\n     protected final Descriptors.FieldDescriptor descriptor;\n \n     public MessageField(Descriptors.FieldDescriptor descriptor) {"
    },
    {
        "commit_id": "91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "buggy_code": "private PreparedStatement newScrollingSelectStatement(DbSession session, String sql, int fetchSize) {",
        "fixed_code": "private static PreparedStatement newScrollingSelectStatement(DbSession session, String sql, int fetchSize) {",
        "patch": "@@ -284,7 +284,7 @@ public PreparedStatement newScrollingSingleRowSelectStatement(DbSession session,\n     return newScrollingSelectStatement(session, sql, fetchSize);\n   }\n \n-  private PreparedStatement newScrollingSelectStatement(DbSession session, String sql, int fetchSize) {\n+  private static PreparedStatement newScrollingSelectStatement(DbSession session, String sql, int fetchSize) {\n     try {\n       PreparedStatement stmt = session.getConnection().prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n       stmt.setFetchSize(fetchSize);"
    },
    {
        "commit_id": "91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "buggy_code": "private void checkNewNameOfAllModules(Set<ResourceDto> modules, String stringToReplace, String replacementString, ResourceKeyUpdaterMapper mapper) {",
        "fixed_code": "private static void checkNewNameOfAllModules(Set<ResourceDto> modules, String stringToReplace, String replacementString, ResourceKeyUpdaterMapper mapper) {",
        "patch": "@@ -145,7 +145,7 @@ private static Set<ResourceDto> collectAllModules(long projectId, String stringT\n     return modules;\n   }\n \n-  private void checkNewNameOfAllModules(Set<ResourceDto> modules, String stringToReplace, String replacementString, ResourceKeyUpdaterMapper mapper) {\n+  private static void checkNewNameOfAllModules(Set<ResourceDto> modules, String stringToReplace, String replacementString, ResourceKeyUpdaterMapper mapper) {\n     for (ResourceDto module : modules) {\n       String newName = computeNewKey(module, stringToReplace, replacementString);\n       if (mapper.countResourceByKey(newName) > 0) {"
    },
    {
        "commit_id": "91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "buggy_code": "public K call() throws Exception;",
        "fixed_code": "K call() throws Exception;",
        "patch": "@@ -24,5 +24,5 @@\n public interface ClusterAction<K> extends Callable<K> {\n \n   @Override\n-  public K call() throws Exception;\n+  K call() throws Exception;\n }"
    },
    {
        "commit_id": "91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91496e1aff8cd5d8037aeca1fce944dd4fd8bc61",
        "buggy_code": "private List<Entry<String, Long>> truncateList(List<Entry<String, Long>> sortedFullList) {",
        "fixed_code": "private static List<Entry<String, Long>> truncateList(List<Entry<String, Long>> sortedFullList) {",
        "patch": "@@ -82,7 +82,7 @@ public int compare(Entry<String, Long> o1, Entry<String, Long> o2) {\n     }\n   }\n \n-  private List<Entry<String, Long>> truncateList(List<Entry<String, Long>> sortedFullList) {\n+  private static List<Entry<String, Long>> truncateList(List<Entry<String, Long>> sortedFullList) {\n     int maxSize = 10;\n     List<Entry<String, Long>> result = new ArrayList<>(maxSize);\n     int i = 0;"
    },
    {
        "commit_id": "65a791b7eab29403268ea9b3f9c9eea2850949be",
        "commit_message": "SONAR-6730 Fix test implementation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/65a791b7eab29403268ea9b3f9c9eea2850949be",
        "buggy_code": "public class SettingsImpl implements Settings {",
        "fixed_code": "public class TestSettings implements Settings {",
        "patch": "@@ -27,7 +27,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.sonar.api.ce.measure.Settings;\n \n-public class SettingsImpl implements Settings {\n+public class TestSettings implements Settings {\n \n   private Map<String, String> valuesByKey = new HashMap<>();\n "
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "private void check(Logger logger, ResourceFilter[] filters) {",
        "fixed_code": "private static void check(Logger logger, ResourceFilter[] filters) {",
        "patch": "@@ -41,7 +41,7 @@ public ResourceFilters() {\n     check(logger, filters);\n   }\n \n-  private void check(Logger logger, ResourceFilter[] filters) {\n+  private static void check(Logger logger, ResourceFilter[] filters) {\n     if (filters.length > 0) {\n       logger.warn(\"ResourceFilters are not supported since version 4.2: \" + Joiner.on(\", \").join(filters));\n     }"
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "private class ToMessage implements Function<ActiveRule, BatchReport.ActiveRule> {",
        "fixed_code": "private static class ToMessage implements Function<ActiveRule, BatchReport.ActiveRule> {",
        "patch": "@@ -43,7 +43,7 @@ public void publish(BatchReportWriter writer) {\n     writer.writeActiveRules(activeRuleMessages);\n   }\n \n-  private class ToMessage implements Function<ActiveRule, BatchReport.ActiveRule> {\n+  private static class ToMessage implements Function<ActiveRule, BatchReport.ActiveRule> {\n     private final BatchReport.ActiveRule.Builder builder = BatchReport.ActiveRule.newBuilder();\n \n     @Override"
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "private List<User> toUsers(Collection<UserDto> dtos) {",
        "fixed_code": "private static List<User> toUsers(Collection<UserDto> dtos) {",
        "patch": "@@ -59,7 +59,7 @@ public List<User> find(UserQuery query) {\n     return toUsers(dtos);\n   }\n \n-  private List<User> toUsers(Collection<UserDto> dtos) {\n+  private static List<User> toUsers(Collection<UserDto> dtos) {\n     List<User> users = Lists.newArrayList();\n     for (UserDto dto : dtos) {\n       users.add(dto.toUser());"
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "private User copy(@Nullable UserDto dto) {",
        "fixed_code": "private static User copy(@Nullable UserDto dto) {",
        "patch": "@@ -46,7 +46,7 @@ public User findByLogin(String login) {\n     return copy(userDao.selectActiveUserByLogin(login));\n   }\n \n-  private User copy(@Nullable UserDto dto) {\n+  private static User copy(@Nullable UserDto dto) {\n     if (dto != null) {\n       User user = new User().setEmail(dto.getEmail()).setLogin(dto.getLogin()).setName(dto.getName());\n       user.setId(dto.getId().intValue());"
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "private Set<ResourceDto> collectAllModules(long projectId, String stringToReplace, ResourceKeyUpdaterMapper mapper) {",
        "fixed_code": "private static Set<ResourceDto> collectAllModules(long projectId, String stringToReplace, ResourceKeyUpdaterMapper mapper) {",
        "patch": "@@ -133,7 +133,7 @@ private static void runBatchUpdateForAllResources(Collection<ResourceDto> resour\n     }\n   }\n \n-  private Set<ResourceDto> collectAllModules(long projectId, String stringToReplace, ResourceKeyUpdaterMapper mapper) {\n+  private static Set<ResourceDto> collectAllModules(long projectId, String stringToReplace, ResourceKeyUpdaterMapper mapper) {\n     ResourceDto project = mapper.selectProject(projectId);\n     Set<ResourceDto> modules = Sets.newHashSet();\n     if (project.getKey().contains(stringToReplace)) {"
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "supportedLanguages = (languages != null) ? languages : new String[0];",
        "fixed_code": "supportedLanguages = (languages != null ? languages : new String[0]);",
        "patch": "@@ -66,7 +66,7 @@ public final ProfileExporter setName(String s) {\n   }\n \n   protected final ProfileExporter setSupportedLanguages(String... languages) {\n-    supportedLanguages = (languages != null) ? languages : new String[0];\n+    supportedLanguages = (languages != null ? languages : new String[0]);\n     return this;\n   }\n "
    },
    {
        "commit_id": "a1d9480ac376955a23c3b23e6237a587139d86bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1d9480ac376955a23c3b23e6237a587139d86bb",
        "buggy_code": "supportedLanguages = ((languages != null) ? languages : new String[0]);",
        "fixed_code": "supportedLanguages = (languages != null ? languages : new String[0]);",
        "patch": "@@ -64,7 +64,7 @@ public final ProfileImporter setName(String s) {\n   }\n \n   protected final ProfileImporter setSupportedLanguages(String... languages) {\n-    supportedLanguages = ((languages != null) ? languages : new String[0]);\n+    supportedLanguages = (languages != null ? languages : new String[0]);\n     return this;\n   }\n "
    },
    {
        "commit_id": "259fa0a5f2076aad072ea5f83980948553089fa8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/259fa0a5f2076aad072ea5f83980948553089fa8",
        "buggy_code": "public Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};",
        "fixed_code": "Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};",
        "patch": "@@ -25,7 +25,7 @@\n \n public interface Check {\n \n-  public Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};\n+  Class<Check>[] ALL = new Class[] {TemplateRuleCheck.class};\n \n   void execute(SensorContext context, InputFile file, RuleKey ruleKey);\n "
    },
    {
        "commit_id": "259fa0a5f2076aad072ea5f83980948553089fa8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/259fa0a5f2076aad072ea5f83980948553089fa8",
        "buggy_code": "public static final Paint[] COLORS = {",
        "fixed_code": "protected static final Paint[] COLORS = {",
        "patch": "@@ -25,7 +25,7 @@\n \n public class CustomBarRenderer extends BarRenderer {\n \n-  public static final Paint[] COLORS = {\n+  protected static final Paint[] COLORS = {\n     Color.red, Color.blue, Color.green,\n     Color.yellow, Color.orange, Color.cyan,\n     Color.magenta, Color.blue};"
    },
    {
        "commit_id": "259fa0a5f2076aad072ea5f83980948553089fa8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/259fa0a5f2076aad072ea5f83980948553089fa8",
        "buggy_code": "public static final EnumSet<SearchAdditionalField> ALL_ADDITIONAL_FIELDS = EnumSet.allOf(SearchAdditionalField.class);",
        "fixed_code": "static final EnumSet<SearchAdditionalField> ALL_ADDITIONAL_FIELDS = EnumSet.allOf(SearchAdditionalField.class);",
        "patch": "@@ -39,7 +39,7 @@ public enum SearchAdditionalField {\n   USERS(\"users\");\n \n   public static final String ALL_ALIAS = \"_all\";\n-  public static final EnumSet<SearchAdditionalField> ALL_ADDITIONAL_FIELDS = EnumSet.allOf(SearchAdditionalField.class);\n+  static final EnumSet<SearchAdditionalField> ALL_ADDITIONAL_FIELDS = EnumSet.allOf(SearchAdditionalField.class);\n \n   private final String label;\n "
    },
    {
        "commit_id": "29814478d54b8e74d4ed2450a01c4123333fee2d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29814478d54b8e74d4ed2450a01c4123333fee2d",
        "buggy_code": "for (DuplicationsParser.Duplication duplication : block.duplications()) {",
        "fixed_code": "for (DuplicationsParser.Duplication duplication : block.getDuplications()) {",
        "patch": "@@ -57,7 +57,7 @@ void write(List<DuplicationsParser.Block> blocks, JsonWriter json, DbSession ses\n   private static void writeDuplications(List<DuplicationsParser.Block> blocks, Map<String, String> refByComponentKey, JsonWriter json) {\n     for (DuplicationsParser.Block block : blocks) {\n       json.beginObject().name(\"blocks\").beginArray();\n-      for (DuplicationsParser.Duplication duplication : block.duplications()) {\n+      for (DuplicationsParser.Duplication duplication : block.getDuplications()) {\n         writeDuplication(refByComponentKey, duplication, json);\n       }\n       json.endArray().endObject();"
    },
    {
        "commit_id": "29814478d54b8e74d4ed2450a01c4123333fee2d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29814478d54b8e74d4ed2450a01c4123333fee2d",
        "buggy_code": "propertiesByActions.put(CommentAction.KEY, commentMap);",
        "fixed_code": "propertiesByActions.put(CommentAction.COMMENT_KEY, commentMap);",
        "patch": "@@ -77,7 +77,7 @@ private void parse(Map<String, Object> props, @Nullable String comment) {\n       hasComment = true;\n       Map<String, Object> commentMap = newHashMap();\n       commentMap.put(CommentAction.COMMENT_PROPERTY, comment);\n-      propertiesByActions.put(CommentAction.KEY, commentMap);\n+      propertiesByActions.put(CommentAction.COMMENT_KEY, commentMap);\n     }\n   }\n "
    },
    {
        "commit_id": "29814478d54b8e74d4ed2450a01c4123333fee2d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29814478d54b8e74d4ed2450a01c4123333fee2d",
        "buggy_code": "applyAction(getAction(CommentAction.KEY), actionContext, issueBulkChangeQuery, result);",
        "fixed_code": "applyAction(getAction(CommentAction.COMMENT_KEY), actionContext, issueBulkChangeQuery, result);",
        "patch": "@@ -103,7 +103,7 @@ public IssueBulkChangeResult execute(IssueBulkChangeQuery issueBulkChangeQuery,\n       if (result.issuesChanged().contains(issue)) {\n         // Apply comment action only on changed issues\n         if (issueBulkChangeQuery.hasComment()) {\n-          applyAction(getAction(CommentAction.KEY), actionContext, issueBulkChangeQuery, result);\n+          applyAction(getAction(CommentAction.COMMENT_KEY), actionContext, issueBulkChangeQuery, result);\n         }\n         issueStorage.save((DefaultIssue) issue);\n         if (issueBulkChangeQuery.sendNotifications()) {"
    },
    {
        "commit_id": "29814478d54b8e74d4ed2450a01c4123333fee2d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29814478d54b8e74d4ed2450a01c4123333fee2d",
        "buggy_code": "public static final List<String> ALL_WITHOUT_PAGINATION = newArrayList(Iterables.filter(ALL, new Predicate<String>() {",
        "fixed_code": "static final List<String> ALL_WITHOUT_PAGINATION = newArrayList(Iterables.filter(ALL, new Predicate<String>() {",
        "patch": "@@ -79,7 +79,7 @@ public class IssueFilterParameters {\n     ASSIGNEES, LANGUAGES, ASSIGNED, PLANNED, HIDE_RULES, CREATED_AT, CREATED_AFTER, CREATED_BEFORE, CREATED_IN_LAST, COMPONENT_UUIDS, COMPONENT_ROOT_UUIDS, FACET_MODE,\n     PROJECTS, PROJECT_UUIDS, PROJECT_KEYS, COMPONENT_KEYS, MODULE_UUIDS, DIRECTORIES, FILE_UUIDS, AUTHORS, HIDE_COMMENTS, PAGE_SIZE, PAGE_INDEX, SORT, ASC);\n \n-  public static final List<String> ALL_WITHOUT_PAGINATION = newArrayList(Iterables.filter(ALL, new Predicate<String>() {\n+  static final List<String> ALL_WITHOUT_PAGINATION = newArrayList(Iterables.filter(ALL, new Predicate<String>() {\n     @Override\n     public boolean apply(String input) {\n       return !PAGE_INDEX.equals(input) && !PAGE_SIZE.equals(input);"
    },
    {
        "commit_id": "bdb27317d1d7627a262aa004d0a1265a7100e1cc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdb27317d1d7627a262aa004d0a1265a7100e1cc",
        "buggy_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(LogInterceptors.class));",
        "fixed_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(LogInterceptors.class)).isTrue();",
        "patch": "@@ -39,7 +39,7 @@ public void instance_cant_be_null() {\n \n   @Test\n   public void private_constructor() {\n-    assertThat(TestUtils.hasOnlyPrivateConstructors(LogInterceptors.class));\n+    assertThat(TestUtils.hasOnlyPrivateConstructors(LogInterceptors.class)).isTrue();\n   }\n }\n "
    },
    {
        "commit_id": "e2e52c5f487e85f480c118190f62aad49cf927d8",
        "commit_message": "Fix perf tests of issue indexing\n\nFaster thanks to change of UUID format.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2e52c5f487e85f480c118190f62aad49cf927d8",
        "buggy_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 5116, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 6500, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -114,7 +114,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 5116, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n+    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 6500, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").setWaitForMerge(true).get();"
    },
    {
        "commit_id": "aeccf8fba38eed49136826020d80cf7e0cef9bc6",
        "commit_message": "SONAR-6730 Improve error message when adding measure on not allowed metric",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aeccf8fba38eed49136826020d80cf7e0cef9bc6",
        "buggy_code": "thrown.expectMessage(\"Only metrics in [int_metric_key] can be used to add measures\");",
        "fixed_code": "thrown.expectMessage(\"Only metrics in [int_metric_key] can be used to add measures. Metric 'double_metric_key' is not allowed.\");",
        "patch": "@@ -221,7 +221,7 @@ public void add_string_measure_create_measure_of_type_string_with_right_value()\n   @Test\n   public void fail_with_IAE_when_add_measure_is_called_on_metric_not_in_output_list() throws Exception {\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\"Only metrics in [int_metric_key] can be used to add measures\");\n+    thrown.expectMessage(\"Only metrics in [int_metric_key] can be used to add measures. Metric 'double_metric_key' is not allowed.\");\n \n     MeasureComputer.Implementation.Context underTest = newContext(PROJECT_REF, of(NCLOC_KEY), of(INT_METRIC_KEY));\n     underTest.addMeasure(DOUBLE_METRIC_KEY, 10);"
    },
    {
        "commit_id": "b8c669b40e77f5aab2c6d7a1d8248f5508f48d1f",
        "commit_message": "fix badly named test LanguageDistributionMeasuresTest\n\nshouls be named LanguageDistributionMeasuresStepTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8c669b40e77f5aab2c6d7a1d8248f5508f48d1f",
        "buggy_code": "public class LanguageDistributionMeasuresTest {",
        "fixed_code": "public class LanguageDistributionMeasuresStepTest {",
        "patch": "@@ -41,7 +41,7 @@\n import static org.sonar.server.computation.component.ReportComponent.builder;\n import static org.sonar.server.computation.measure.Measure.newMeasureBuilder;\n \n-public class LanguageDistributionMeasuresTest {\n+public class LanguageDistributionMeasuresStepTest {\n \n   private static final String XOO_LANGUAGE = \"xoo\";\n   private static final String JAVA_LANGUAGE = \"java\";"
    },
    {
        "commit_id": "704cdda91825f66dd47303edc7fa2f916cb5764f",
        "commit_message": "SONAR-4865 Apply some feedback on issue location API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/704cdda91825f66dd47303edc7fa2f916cb5764f",
        "buggy_code": "public IssueBuilder addExecutionFlow(NewIssueLocation... flow) {",
        "fixed_code": "public IssueBuilder addExecutionFlow(Iterable<NewIssueLocation> flow) {",
        "patch": "@@ -81,7 +81,7 @@ public NewIssueLocation newLocation() {\n   }\n \n   @Override\n-  public IssueBuilder addExecutionFlow(NewIssueLocation... flow) {\n+  public IssueBuilder addExecutionFlow(Iterable<NewIssueLocation> flow) {\n     throw unsupported();\n   }\n "
    },
    {
        "commit_id": "f0ea6e6f05bc2575ddaa94fdce1e0abe8fd07b35",
        "commit_message": "fix MyBatis and mapper loading to support mapper in server extensions\n\nBatchSession and DbSession constructors need to be public to be used from server extensions\nfix MyBatis XML mapper file loading which did not support mapper defined in a plugin ClassLoader\nadd MyBatisConfBuilder so that conf building code can be shared with server extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0ea6e6f05bc2575ddaa94fdce1e0abe8fd07b35",
        "buggy_code": "BatchSession(WorkQueue<?> queue, SqlSession session) {",
        "fixed_code": "public BatchSession(WorkQueue<?> queue, SqlSession session) {",
        "patch": "@@ -39,7 +39,7 @@ public class BatchSession extends DbSession {\n   private final int batchSize;\n   private int count = 0;\n \n-  BatchSession(WorkQueue<?> queue, SqlSession session) {\n+  public BatchSession(WorkQueue<?> queue, SqlSession session) {\n     this(queue, session, MAX_BATCH_SIZE);\n   }\n "
    },
    {
        "commit_id": "f0ea6e6f05bc2575ddaa94fdce1e0abe8fd07b35",
        "commit_message": "fix MyBatis and mapper loading to support mapper in server extensions\n\nBatchSession and DbSession constructors need to be public to be used from server extensions\nfix MyBatis XML mapper file loading which did not support mapper defined in a plugin ClassLoader\nadd MyBatisConfBuilder so that conf building code can be shared with server extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0ea6e6f05bc2575ddaa94fdce1e0abe8fd07b35",
        "buggy_code": "DbSession(WorkQueue queue, SqlSession session) {",
        "fixed_code": "public DbSession(WorkQueue queue, SqlSession session) {",
        "patch": "@@ -39,7 +39,7 @@ public class DbSession implements SqlSession {\n   private SqlSession session;\n   private int actionCount;\n \n-  DbSession(WorkQueue queue, SqlSession session) {\n+  public DbSession(WorkQueue queue, SqlSession session) {\n     this.actionCount = 0;\n     this.session = session;\n     this.queue = queue;"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake { }",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake { }"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "5f1577e73bb9a1d15c168a07326fc3de95760321",
        "commit_message": "Fix Cpd errors on test sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f1577e73bb9a1d15c168a07326fc3de95760321",
        "buggy_code": "Fake",
        "fixed_code": "class Fake {}",
        "patch": "@@ -1 +1 @@\n-Fake\n+class Fake {}"
    },
    {
        "commit_id": "157ab0155285444751f45f2a7522259772a71994",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157ab0155285444751f45f2a7522259772a71994",
        "buggy_code": "private boolean canModifyFilter(UserSession userSession, IssueFilterDto filter) {",
        "fixed_code": "private static boolean canModifyFilter(UserSession userSession, IssueFilterDto filter) {",
        "patch": "@@ -48,7 +48,7 @@ void write(JsonWriter json, IssueFilterDto filter, UserSession userSession) {\n       .endObject();\n   }\n \n-  private boolean canModifyFilter(UserSession userSession, IssueFilterDto filter) {\n+  private static boolean canModifyFilter(UserSession userSession, IssueFilterDto filter) {\n     return userSession.isLoggedIn() &&\n       (StringUtils.equals(filter.getUserLogin(), userSession.getLogin()) || userSession.hasGlobalPermission(GlobalPermissions.SYSTEM_ADMIN));\n   }"
    },
    {
        "commit_id": "157ab0155285444751f45f2a7522259772a71994",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157ab0155285444751f45f2a7522259772a71994",
        "buggy_code": "private void checkNotAnyoneAndAdmin(String permission, String group) {",
        "fixed_code": "private static void checkNotAnyoneAndAdmin(String permission, String group) {",
        "patch": "@@ -234,7 +234,7 @@ private boolean applyChangeOnGroup(DbSession session, Operation operation, Permi\n     return true;\n   }\n \n-  private void checkNotAnyoneAndAdmin(String permission, String group) {\n+  private static void checkNotAnyoneAndAdmin(String permission, String group) {\n     if (GlobalPermissions.SYSTEM_ADMIN.equals(permission)\n       && DefaultGroups.isAnyone(group)) {\n       throw new BadRequestException(String.format(\"It is not possible to add the '%s' permission to the '%s' group.\", permission, group));"
    },
    {
        "commit_id": "157ab0155285444751f45f2a7522259772a71994",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157ab0155285444751f45f2a7522259772a71994",
        "buggy_code": "private void checkNotAnyoneAndAdmin(String permission, String group) {",
        "fixed_code": "private static void checkNotAnyoneAndAdmin(String permission, String group) {",
        "patch": "@@ -123,7 +123,7 @@ private boolean applyChangeOnGroup(DbSession session, Operation operation, Permi\n     return true;\n   }\n \n-  private void checkNotAnyoneAndAdmin(String permission, String group) {\n+  private static void checkNotAnyoneAndAdmin(String permission, String group) {\n     if (GlobalPermissions.SYSTEM_ADMIN.equals(permission)\n       && DefaultGroups.isAnyone(group)) {\n       throw new BadRequestException(String.format(\"It is not possible to add the '%s' permission to the '%s' group.\", permission, group));"
    },
    {
        "commit_id": "157ab0155285444751f45f2a7522259772a71994",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157ab0155285444751f45f2a7522259772a71994",
        "buggy_code": "private Map<String, Object> groupsParamaters(PermissionQuery query, Long templateId) {",
        "fixed_code": "private static Map<String, Object> groupsParamaters(PermissionQuery query, Long templateId) {",
        "patch": "@@ -108,7 +108,7 @@ public int countGroups(DbSession session, PermissionQuery query, Long templateId\n     return mapper(session).countGroups(parameters);\n   }\n \n-  private Map<String, Object> groupsParamaters(PermissionQuery query, Long templateId) {\n+  private static Map<String, Object> groupsParamaters(PermissionQuery query, Long templateId) {\n     Map<String, Object> params = newHashMap();\n     params.put(QUERY_PARAMETER, query);\n     params.put(TEMPLATE_ID_PARAMETER, templateId);"
    },
    {
        "commit_id": "c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "commit_message": "Add consistency in error messages of permissions WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "buggy_code": "\"Requires 'Administer System' permission.\")",
        "fixed_code": "\"It requires administration permissions to access.\")",
        "patch": "@@ -52,7 +52,7 @@ public SearchGlobalPermissionsAction(DbClient dbClient, UserSession userSession,\n   public void define(WebService.NewController context) {\n     context.createAction(\"search_global_permissions\")\n       .setDescription(\"List global permissions. <br />\" +\n-        \"Requires 'Administer System' permission.\")\n+        \"It requires administration permissions to access.\")\n       .setResponseExample(getClass().getResource(\"search_global_permissions-example.json\"))\n       .setSince(\"5.2\")\n       .setHandler(this);"
    },
    {
        "commit_id": "c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "commit_message": "Add consistency in error messages of permissions WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "buggy_code": "\"It requires administration permissions to access.<br /> \",",
        "fixed_code": "\"It requires administration permissions to access.<br />\",",
        "patch": "@@ -60,7 +60,7 @@ public void define(WebService.NewController context) {\n       .setDescription(String.format(\"Lists the users that have been granted the specified permission as individual users rather than through group affiliation. <br />\" +\n         \"This service defaults to global permissions, but can be limited to project permissions by providing project id or project key.<br /> \" +\n         \"If the query parameter '%s' is specified, the '%s' parameter is forced to '%s'.<br />\" +\n-        \"It requires administration permissions to access.<br /> \",\n+        \"It requires administration permissions to access.<br />\",\n         Param.TEXT_QUERY, Param.SELECTED, SelectionMode.ALL.value()))\n       .addPagingParams(100)\n       .addSearchQuery(\"stas\", \"names\")"
    },
    {
        "commit_id": "c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "commit_message": "Add consistency in error messages of permissions WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c669c3a34dfce5839f8d4f614165cd3ef0240727",
        "buggy_code": "assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Parameter 'message' is missing\\\"}]}\");",
        "fixed_code": "assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"The 'message' parameter is missing\\\"}]}\");",
        "patch": "@@ -187,7 +187,7 @@ public void required_parameter_is_not_set() {\n     ServletResponse response = new ServletResponse();\n     engine.execute(request, response, \"api/system\", \"print\");\n \n-    assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Parameter 'message' is missing\\\"}]}\");\n+    assertThat(response.stream().outputAsString()).isEqualTo(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"The 'message' parameter is missing\\\"}]}\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "5de2eec060d571f1873c4a8cec436dcf23f64fa2",
        "commit_message": "Improve permissions WS description and error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5de2eec060d571f1873c4a8cec436dcf23f64fa2",
        "buggy_code": "throw new NotFoundException(String.format(\"Component '%s' does not exist\", componentKey));",
        "fixed_code": "throw new NotFoundException(String.format(\"Project '%s' does not exist\", componentKey));",
        "patch": "@@ -131,7 +131,7 @@ private Long componentId(@Nullable String componentKey) {\n     } else {\n       ResourceDto resourceDto = resourceDao.selectResource(ResourceQuery.create().setKey(componentKey));\n       if (resourceDto == null) {\n-        throw new NotFoundException(String.format(\"Component '%s' does not exist\", componentKey));\n+        throw new NotFoundException(String.format(\"Project '%s' does not exist\", componentKey));\n       }\n       return resourceDto.getId();\n     }"
    },
    {
        "commit_id": "5de2eec060d571f1873c4a8cec436dcf23f64fa2",
        "commit_message": "Improve permissions WS description and error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5de2eec060d571f1873c4a8cec436dcf23f64fa2",
        "buggy_code": "assertThat(e).isInstanceOf(NotFoundException.class).hasMessage(\"Component 'Unknown' does not exist\");",
        "fixed_code": "assertThat(e).isInstanceOf(NotFoundException.class).hasMessage(\"Project 'Unknown' does not exist\");",
        "patch": "@@ -95,7 +95,7 @@ public void fail_to_find_users_when_component_not_found() {\n       underTest.findUsersWithPermission(PermissionQuery.builder().permission(\"user\").component(\"Unknown\").build());\n       fail();\n     } catch (Exception e) {\n-      assertThat(e).isInstanceOf(NotFoundException.class).hasMessage(\"Component 'Unknown' does not exist\");\n+      assertThat(e).isInstanceOf(NotFoundException.class).hasMessage(\"Project 'Unknown' does not exist\");\n     }\n   }\n "
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(failed);",
        "fixed_code": "assertThat(failed).isTrue();",
        "patch": "@@ -119,7 +119,7 @@ public void fail_to_start_multiple_times() throws Exception {\n       failed = e.getMessage().equals(\"Can not start multiple times\");\n     }\n     monitor.stop();\n-    assertThat(failed);\n+    assertThat(failed).isTrue();\n   }\n \n   @Test"
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(myDto.getId());",
        "fixed_code": "assertThat(myDto.getId()).isGreaterThan(0);",
        "patch": "@@ -84,7 +84,7 @@ public void can_insert_and_select_by_key() {\n     dao.insert(session, myDto);\n \n     session.commit();\n-    assertThat(myDto.getId());\n+    assertThat(myDto.getId()).isGreaterThan(0);\n \n     long t1 = System.currentTimeMillis() + 1000;\n "
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(EsUtils.class));",
        "fixed_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(EsUtils.class)).isTrue();",
        "patch": "@@ -65,7 +65,7 @@ public BaseDoc apply(Map<String, Object> input) {\n \n   @Test\n   public void util_class() {\n-    assertThat(TestUtils.hasOnlyPrivateConstructors(EsUtils.class));\n+    assertThat(TestUtils.hasOnlyPrivateConstructors(EsUtils.class)).isTrue();\n   }\n \n   @Test"
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(CommonRuleKeys.class));",
        "fixed_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(CommonRuleKeys.class)).isTrue();",
        "patch": "@@ -33,7 +33,7 @@ public void wonderful_test_for_commonRepositoryForLang() throws Exception {\n \n   @Test\n   public void wonderful_test_to_verify_that_this_class_is_an_helper_class() throws Exception {\n-    assertThat(TestUtils.hasOnlyPrivateConstructors(CommonRuleKeys.class));\n+    assertThat(TestUtils.hasOnlyPrivateConstructors(CommonRuleKeys.class)).isTrue();\n \n   }\n }"
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));",
        "fixed_code": "assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt)).isTrue();",
        "patch": "@@ -321,7 +321,7 @@ public void init(RulesDefinition.NewRepository repository) {\n \n     // Verify rule has not been updated\n     Rule customRuleReloaded = ruleIndex.getByKey(RuleTesting.XOO_X1);\n-    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));\n+    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt)).isTrue();\n   }\n \n   @Test"
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(DateUtils.parseDateTime(value.getKey()).before(new Date()));",
        "fixed_code": "assertThat(DateUtils.parseDateTime(value.getKey()).before(new Date())).isTrue();",
        "patch": "@@ -145,7 +145,7 @@ public void should_process_result_with_date_histogram() throws Exception {\n     assertThat(facets.getFacetKeys(FIELD_TAGS)).isEmpty();\n     assertThat(facets.getFacetKeys(FIELD_CREATED_AT)).hasSize(1);\n     FacetValue value = facets.getFacetValues(FIELD_CREATED_AT).iterator().next();\n-    assertThat(DateUtils.parseDateTime(value.getKey()).before(new Date()));\n+    assertThat(DateUtils.parseDateTime(value.getKey()).before(new Date())).isTrue();\n     assertThat(value.getValue()).isEqualTo(3L);\n   }\n "
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(Protobuf.class));",
        "fixed_code": "assertThat(TestUtils.hasOnlyPrivateConstructors(Protobuf.class)).isTrue();",
        "patch": "@@ -41,7 +41,7 @@ public class ProtobufTest {\n \n   @Test\n   public void only_utils() {\n-    assertThat(TestUtils.hasOnlyPrivateConstructors(Protobuf.class));\n+    assertThat(TestUtils.hasOnlyPrivateConstructors(Protobuf.class)).isTrue();\n   }\n \n   @Test"
    },
    {
        "commit_id": "e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "commit_message": "fix incomplete assertions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15532991b8ab189d27563abb1c7c36b91f6dcae",
        "buggy_code": "assertThat(underTest.selectByKeys(dbTester.getSession(), asList(RuleKey.of(\"NOT\", \"FOUND\"))).isEmpty());",
        "fixed_code": "assertThat(underTest.selectByKeys(dbTester.getSession(), asList(RuleKey.of(\"NOT\", \"FOUND\")))).isEmpty();",
        "patch": "@@ -85,7 +85,7 @@ public void selectByKeys() {\n     dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n \n     assertThat(underTest.selectByKeys(dbTester.getSession(), Collections.<RuleKey>emptyList())).isEmpty();\n-    assertThat(underTest.selectByKeys(dbTester.getSession(), asList(RuleKey.of(\"NOT\", \"FOUND\"))).isEmpty());\n+    assertThat(underTest.selectByKeys(dbTester.getSession(), asList(RuleKey.of(\"NOT\", \"FOUND\")))).isEmpty();\n \n     List<RuleDto> rules = underTest.selectByKeys(dbTester.getSession(), asList(RuleKey.of(\"java\", \"S001\"), RuleKey.of(\"java\", \"OTHER\")));\n     assertThat(rules).hasSize(1);"
    },
    {
        "commit_id": "c5bd94becf874e57b2d624f3d9a2cb3ae546616f",
        "commit_message": "Fix bug creating project keys with branch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd94becf874e57b2d624f3d9a2cb3ae546616f",
        "buggy_code": "return STATUS_PREFIX + client.getURL() + projectKey;",
        "fixed_code": "return STATUS_PREFIX + client.getURL() + \"-\" + projectKey;",
        "patch": "@@ -80,6 +80,6 @@ public Date getSyncStatus(String projectKey) {\n   }\n \n   private String getKey(String projectKey) {\n-    return STATUS_PREFIX + client.getURL() + projectKey;\n+    return STATUS_PREFIX + client.getURL() + \"-\" + projectKey;\n   }\n }"
    },
    {
        "commit_id": "d891213ff2a2e204d5b4f45b845fa46f23168d3d",
        "commit_message": "fix RegisterMetrics, duplicated disabled metrics\n\nwhen it actually should enable and update them",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d891213ff2a2e204d5b4f45b845fa46f23168d3d",
        "buggy_code": "for (MetricDto base : from(dbClient.metricDao().selectEnabled(session)).toList()) {",
        "fixed_code": "for (MetricDto base : from(dbClient.metricDao().selectAll(session)).toList()) {",
        "patch": "@@ -83,7 +83,7 @@ private void sanitizeQualityGates(DbSession session) {\n \n   private void save(DbSession session, Iterable<Metric> metrics) {\n     Map<String, MetricDto> basesByKey = new HashMap<>();\n-    for (MetricDto base : from(dbClient.metricDao().selectEnabled(session)).toList()) {\n+    for (MetricDto base : from(dbClient.metricDao().selectAll(session)).toList()) {\n       basesByKey.put(base.getKey(), base);\n     }\n "
    },
    {
        "commit_id": "31b625fdf1a0ef6682940e8caf20cb047126e4f1",
        "commit_message": "Improve response of POST api/issues/assign\n\nReturn the same format as for api/issues/search, except that:\n- field \"issues\" is replaced by \"issue\"\n- of course there are no facets nor paging\n- field \"languages\" is not present (that should be dropped from api/issues/search too)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31b625fdf1a0ef6682940e8caf20cb047126e4f1",
        "buggy_code": "Issues.Search responseBody = this.format.format(ALL_ADDITIONAL_FIELDS, data, null, null);",
        "fixed_code": "Issues.Operation responseBody = this.format.formatOperation(data);",
        "patch": "@@ -42,7 +42,7 @@ public void write(String issueKey, Request request, Response response) throws Ex\n       ALL_ADDITIONAL_FIELDS, singletonList(issueKey));\n     SearchResponseData data = loader.load(collector, null);\n \n-    Issues.Search responseBody = this.format.format(ALL_ADDITIONAL_FIELDS, data, null, null);\n+    Issues.Operation responseBody = this.format.formatOperation(data);\n \n     WsUtils.writeProtobuf(responseBody, request, response);\n   }"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private void createIssues(InputFile file, SensorContext context) {",
        "fixed_code": "private static void createIssues(InputFile file, SensorContext context) {",
        "patch": "@@ -51,7 +51,7 @@ public void execute(SensorContext context) {\n     }\n   }\n \n-  private void createIssues(InputFile file, SensorContext context) {\n+  private static void createIssues(InputFile file, SensorContext context) {\n     ActiveRule rule = context.activeRules().findByInternalKey(XooRulesDefinition.XOO_REPOSITORY,\n       context.settings().getString(INTERNAL_KEY_PROPERTY));\n     if (rule != null) {"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private void createIssues(InputFile file, SensorContext context) {",
        "fixed_code": "private static void createIssues(InputFile file, SensorContext context) {",
        "patch": "@@ -47,7 +47,7 @@ public void execute(SensorContext context) {\n     }\n   }\n \n-  private void createIssues(InputFile file, SensorContext context) {\n+  private static void createIssues(InputFile file, SensorContext context) {\n     RuleKey ruleKey = RuleKey.of(XooRulesDefinition.XOO_REPOSITORY, RULE_KEY);\n     InputDir inputDir = context.fileSystem().inputDir(file.file().getParentFile());\n     if (inputDir != null) {"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private void createIssues(InputFile file, SensorContext context) {",
        "fixed_code": "private static void createIssues(InputFile file, SensorContext context) {",
        "patch": "@@ -61,7 +61,7 @@ public void execute(SensorContext context) {\n     }\n   }\n \n-  private void createIssues(InputFile file, SensorContext context) {\n+  private static void createIssues(InputFile file, SensorContext context) {\n     RuleKey ruleKey = RuleKey.of(XooRulesDefinition.XOO_REPOSITORY, RULE_KEY);\n     NewIssue newIssue = context.newIssue();\n     newIssue"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private Integer lineNotNull(ServerIssue i) {",
        "fixed_code": "private static Integer lineNotNull(ServerIssue i) {",
        "patch": "@@ -92,7 +92,7 @@ void addUnmatched(ServerIssue i) {\n     unmatchedForRuleAndLine.put(checksumNotNull, i);\n   }\n \n-  private Integer lineNotNull(ServerIssue i) {\n+  private static Integer lineNotNull(ServerIssue i) {\n     Integer line = i.line();\n     return line != null ? line : 0;\n   }"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private void putUTFOrNull(Value value, @Nullable String utfOrNull) {",
        "fixed_code": "private static void putUTFOrNull(Value value, @Nullable String utfOrNull) {",
        "patch": "@@ -58,7 +58,7 @@ public void put(Value value, Object object, CoderContext context) {\n     value.putString(persistenceMode != null ? persistenceMode.name() : null);\n   }\n \n-  private void putUTFOrNull(Value value, @Nullable String utfOrNull) {\n+  private static void putUTFOrNull(Value value, @Nullable String utfOrNull) {\n     if (utfOrNull != null) {\n       value.putUTF(utfOrNull);\n     } else {"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private void log(String title, Collection<WildcardPattern> patterns) {",
        "fixed_code": "private static void log(String title, Collection<WildcardPattern> patterns) {",
        "patch": "@@ -124,7 +124,7 @@ final void initPatterns() {\n     log(\"Excluded sources for coverage: \", resourcePatterns);\n   }\n \n-  private void log(String title, Collection<WildcardPattern> patterns) {\n+  private static void log(String title, Collection<WildcardPattern> patterns) {\n     if (!patterns.isEmpty()) {\n       LOG.info(title);\n       for (WildcardPattern pattern : patterns) {"
    },
    {
        "commit_id": "e2daa5befa8916b585567a942141edcb7eff9a19",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2daa5befa8916b585567a942141edcb7eff9a19",
        "buggy_code": "private UnsupportedOperationException unsupported() {",
        "fixed_code": "private static UnsupportedOperationException unsupported() {",
        "patch": "@@ -79,7 +79,7 @@ public Iterable<CoverageBlock> coverageBlocks() {\n     throw unsupported();\n   }\n \n-  private UnsupportedOperationException unsupported() {\n+  private static UnsupportedOperationException unsupported() {\n     return new UnsupportedOperationException(\"No more available since SQ 5.2\");\n   }\n "
    },
    {
        "commit_id": "23c08dc82f4db3c14ac2fb5c8eb66ccb49d021ac",
        "commit_message": "FIX reduce awaitTermination delay",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23c08dc82f4db3c14ac2fb5c8eb66ccb49d021ac",
        "buggy_code": "executorService.awaitTermination(5, TimeUnit.SECONDS);",
        "fixed_code": "executorService.awaitTermination(1, TimeUnit.SECONDS);",
        "patch": "@@ -53,7 +53,7 @@ public void test_concurrent_modifications_in_any_order() throws InterruptedExcep\n       executorService.submit(runnable);\n     }\n \n-    executorService.awaitTermination(5, TimeUnit.SECONDS);\n+    executorService.awaitTermination(1, TimeUnit.SECONDS);\n \n     assertThat(underTest.getReceivedCount()).isEqualTo(100);\n     assertThat(underTest.getPendingCount()).isEqualTo(2);"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "return new DeprecatedIssueBuilderWrapper(component, newIssue);",
        "fixed_code": "return new DeprecatedIssueBuilderWrapper(component.inputComponent(), newIssue);",
        "patch": "@@ -43,7 +43,7 @@ public class DefaultIssuable implements Issuable {\n   @Override\n   public IssueBuilder newIssueBuilder() {\n     DefaultIssue newIssue = (DefaultIssue) sensorContext.newIssue();\n-    return new DeprecatedIssueBuilderWrapper(component, newIssue);\n+    return new DeprecatedIssueBuilderWrapper(component.inputComponent(), newIssue);\n   }\n \n   @Override"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "return newIssue.key();",
        "fixed_code": "return null;",
        "patch": "@@ -45,7 +45,7 @@ public DefaultIssue wrapped() {\n \n   @Override\n   public String key() {\n-    return newIssue.key();\n+    return null;\n   }\n \n   @Override"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "InputFile inputFile = (InputFile) inputPathCache.getInputPath(component);",
        "fixed_code": "InputFile inputFile = (InputFile) component.inputComponent();",
        "patch": "@@ -99,7 +99,7 @@ public Iterable<ServerIssue> byComponent(BatchComponent component) {\n       if (!component.isFile()) {\n         throw new UnsupportedOperationException(\"Incremental mode should only get issues on files\");\n       }\n-      InputFile inputFile = (InputFile) inputPathCache.getInputPath(component);\n+      InputFile inputFile = (InputFile) component.inputComponent();\n       if (inputFile.status() == Status.ADDED) {\n         return Collections.emptyList();\n       }"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "private String key(InputPath inputPath) {",
        "fixed_code": "private static String key(InputPath inputPath) {",
        "patch": "@@ -140,7 +140,7 @@ public List<BatchReport.Issue> issuesFor(InputPath inputPath) {\n     return result;\n   }\n \n-  private String key(InputPath inputPath) {\n+  private static String key(InputPath inputPath) {\n     return inputPath instanceof InputFile ? ((DefaultInputFile) inputPath).key() : ((DefaultInputDir) inputPath).key();\n   }\n "
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "builder.setLines(((InputFile) batchComponent.inputPath()).lines());",
        "fixed_code": "builder.setLines(((InputFile) batchComponent.inputComponent()).lines());",
        "patch": "@@ -74,7 +74,7 @@ private void recursiveWriteComponent(BatchComponent batchComponent, BatchReportW\n \n     if (batchComponent.isFile()) {\n       builder.setIsTest(ResourceUtils.isUnitTestFile(r));\n-      builder.setLines(((InputFile) batchComponent.inputPath()).lines());\n+      builder.setLines(((InputFile) batchComponent.inputComponent()).lines());\n     }\n     String name = getName(r);\n     if (name != null) {"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "DefaultInputFile inputFile = (DefaultInputFile) resource.inputPath();",
        "fixed_code": "DefaultInputFile inputFile = (DefaultInputFile) resource.inputComponent();",
        "patch": "@@ -50,7 +50,7 @@ public void publish(BatchReportWriter writer) {\n         continue;\n       }\n \n-      DefaultInputFile inputFile = (DefaultInputFile) resource.inputPath();\n+      DefaultInputFile inputFile = (DefaultInputFile) resource.inputComponent();\n       File iofile = writer.getSourceFile(resource.batchId());\n       int line = 0;\n       try (FileOutputStream output = new FileOutputStream(iofile); BOMInputStream bomIn = new BOMInputStream(new FileInputStream(inputFile.file()),"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "DefaultInputFile inputFile = (DefaultInputFile) component.inputPath();",
        "fixed_code": "DefaultInputFile inputFile = (DefaultInputFile) component.inputComponent();",
        "patch": "@@ -119,7 +119,7 @@ public void publish(BatchReportWriter writer) {\n         continue;\n       }\n \n-      DefaultInputFile inputFile = (DefaultInputFile) component.inputPath();\n+      DefaultInputFile inputFile = (DefaultInputFile) component.inputComponent();\n       if (inputFile.type() != Type.TEST) {\n         continue;\n       }"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "InputFile path = (InputFile) component.inputPath();",
        "fixed_code": "InputFile path = (InputFile) component.inputComponent();",
        "patch": "@@ -40,7 +40,7 @@ public HighlightableBuilder(SensorStorage sensorStorage) {\n   @Override\n   public Highlightable loadPerspective(Class<Highlightable> perspectiveClass, BatchComponent component) {\n     if (component.isFile()) {\n-      InputFile path = (InputFile) component.inputPath();\n+      InputFile path = (InputFile) component.inputComponent();\n       return new DefaultHighlightable((DefaultInputFile) path, sensorStorage);\n     }\n     return null;"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "InputFile path = (InputFile) component.inputPath();",
        "fixed_code": "InputFile path = (InputFile) component.inputComponent();",
        "patch": "@@ -41,7 +41,7 @@ public SymbolizableBuilder(DefaultSensorStorage sensorStorage) {\n   @Override\n   public Symbolizable loadPerspective(Class<Symbolizable> perspectiveClass, BatchComponent component) {\n     if (component.isFile()) {\n-      InputFile path = (InputFile) component.inputPath();\n+      InputFile path = (InputFile) component.inputComponent();\n       return new DefaultSymbolizable((DefaultInputFile) path, sensorStorage);\n     }\n     return null;"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "InputFile inputFile = (InputFile) component.inputPath();",
        "fixed_code": "InputFile inputFile = (InputFile) component.inputComponent();",
        "patch": "@@ -40,7 +40,7 @@ public TestPlanBuilder() {\n   @Override\n   public MutableTestPlan loadPerspective(Class<MutableTestPlan> perspectiveClass, BatchComponent component) {\n     if (component.isFile()) {\n-      InputFile inputFile = (InputFile) component.inputPath();\n+      InputFile inputFile = (InputFile) component.inputComponent();\n       if (inputFile.type() == Type.TEST) {\n         if (!testPlanByFile.containsKey(inputFile)) {\n           testPlanByFile.put(inputFile, new DefaultTestPlan());"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "InputFile inputFile = (InputFile) component.inputPath();",
        "fixed_code": "InputFile inputFile = (InputFile) component.inputComponent();",
        "patch": "@@ -37,7 +37,7 @@ public TestableBuilder() {\n   @Override\n   public MutableTestable loadPerspective(Class<MutableTestable> perspectiveClass, BatchComponent component) {\n     if (component.isFile()) {\n-      InputFile inputFile = (InputFile) component.inputPath();\n+      InputFile inputFile = (InputFile) component.inputComponent();\n       if (inputFile.type() == Type.MAIN) {\n         return new DefaultTestable((DefaultInputFile) inputFile);\n       }"
    },
    {
        "commit_id": "93420cb74009febd28256484ca73241442bc1ff9",
        "commit_message": "SONAR-6052 Extract primaryLocation as a special attribute\n\nAlso rework new issue API on batch side.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93420cb74009febd28256484ca73241442bc1ff9",
        "buggy_code": "resourceCache.add(sonarFile, null).setInputPath(file);",
        "fixed_code": "resourceCache.add(sonarFile, null).setInputComponent(file);",
        "patch": "@@ -106,7 +106,7 @@ public void shouldSaveFileMeasureToSensorContext() {\n \n     ArgumentCaptor<org.sonar.api.measures.Measure> argumentCaptor = ArgumentCaptor.forClass(org.sonar.api.measures.Measure.class);\n     Resource sonarFile = File.create(\"src/Foo.php\").setEffectiveKey(\"foo:src/Foo.php\");\n-    resourceCache.add(sonarFile, null).setInputPath(file);\n+    resourceCache.add(sonarFile, null).setInputComponent(file);\n     when(measureCache.put(eq(sonarFile), argumentCaptor.capture())).thenReturn(null);\n     sensorStorage.store(new DefaultMeasure()\n       .onFile(file)"
    },
    {
        "commit_id": "f29c36073b923b4ad722e814602e656416b2424b",
        "commit_message": "Fix selenium id in ProjectAdministrationTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f29c36073b923b4ad722e814602e656416b2424b",
        "buggy_code": ".setHtmlTestsInClasspath(\"delete_version_of_multimodule_project\",",
        "fixed_code": ".setHtmlTestsInClasspath(\"modify_version_of_multimodule_project\",",
        "patch": "@@ -143,7 +143,7 @@ public void delete_version_of_multimodule_project() throws Exception {\n \n     Selenese selenese = Selenese\n       .builder()\n-      .setHtmlTestsInClasspath(\"delete_version_of_multimodule_project\",\n+      .setHtmlTestsInClasspath(\"modify_version_of_multimodule_project\",\n         \"/administration/suite/ProjectAdministrationTest/project-administration/multimodule-project-modify-version.html\"\n       ).build();\n     orchestrator.executeSelenese(selenese);"
    },
    {
        "commit_id": "23699dc534e3978abc10c643566715a345296b2c",
        "commit_message": "Fix rules handling with duplicated internalKey",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23699dc534e3978abc10c643566715a345296b2c",
        "buggy_code": "Rule findByInternalKey(String repository, String internalKey);",
        "fixed_code": "Collection<Rule> findByInternalKey(String repository, String internalKey);",
        "patch": "@@ -49,6 +49,6 @@ public interface Rules {\n    */\n   Collection<Rule> findByRepository(String repository);\n \n-  Rule findByInternalKey(String repository, String internalKey);\n+  Collection<Rule> findByInternalKey(String repository, String internalKey);\n \n }"
    },
    {
        "commit_id": "b7f643c6de90ce58e58879e350cd59ae28e99d01",
        "commit_message": "Fix administration package name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b7f643c6de90ce58e58879e350cd59ae28e99d01",
        "buggy_code": "package administation;",
        "fixed_code": "package administration;",
        "patch": "@@ -3,7 +3,7 @@\n  * All rights reserved\n  * mailto:contact AT sonarsource DOT com\n  */\n-package administation;\n+package administration;\n \n import com.sonar.orchestrator.Orchestrator;\n import com.sonar.orchestrator.util.NetworkUtils;"
    },
    {
        "commit_id": "b7f643c6de90ce58e58879e350cd59ae28e99d01",
        "commit_message": "Fix administration package name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b7f643c6de90ce58e58879e350cd59ae28e99d01",
        "buggy_code": "package administation;",
        "fixed_code": "package administration;",
        "patch": "@@ -3,7 +3,7 @@\n  * All rights reserved\n  * mailto:contact AT sonarsource DOT com\n  */\n-package administation;\n+package administration;\n \n import com.sonar.orchestrator.Orchestrator;\n import com.sonar.orchestrator.OrchestratorBuilder;"
    },
    {
        "commit_id": "056b4bdc63c2ef126d9f9d2e0526f60be930cb81",
        "commit_message": "SONAR-4865, SONAR-6052 Improved issue locations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/056b4bdc63c2ef126d9f9d2e0526f60be930cb81",
        "buggy_code": "BatchReport.Range range = syntaxHighlighting.getRange();",
        "fixed_code": "BatchReport.TextRange range = syntaxHighlighting.getRange();",
        "patch": "@@ -63,7 +63,7 @@ public void read(FileSources.Line.Builder lineBuilder) {\n     incrementHighlightingListMatchingLine(line);\n     for (Iterator<BatchReport.SyntaxHighlighting> syntaxHighlightingIterator = highlightingList.iterator(); syntaxHighlightingIterator.hasNext();) {\n       BatchReport.SyntaxHighlighting syntaxHighlighting = syntaxHighlightingIterator.next();\n-      BatchReport.Range range = syntaxHighlighting.getRange();\n+      BatchReport.TextRange range = syntaxHighlighting.getRange();\n       if (range.getStartLine() <= line) {\n         String offsets = RangeOffsetHelper.offsetToString(syntaxHighlighting.getRange(), line, lineBuilder.getSource().length());\n         if (!offsets.isEmpty()) {"
    },
    {
        "commit_id": "51f8fa984e4a2c11ededba97e6b2c0a2fe29bb02",
        "commit_message": "fix some coverage flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f8fa984e4a2c11ededba97e6b2c0a2fe29bb02",
        "buggy_code": "public boolean equals(Object o) {",
        "fixed_code": "public boolean equals(@Nullable Object o) {",
        "patch": "@@ -68,7 +68,7 @@ public String getDescription() {\n   }\n \n   @Override\n-  public boolean equals(Object o) {\n+  public boolean equals(@Nullable Object o) {\n     if (this == o) {\n       return true;\n     }"
    },
    {
        "commit_id": "853cb392d56ded01fe1e1bc902022d56cf4a90e8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/853cb392d56ded01fe1e1bc902022d56cf4a90e8",
        "buggy_code": "throw new IllegalStateException(\"Failed to create temp directory\");",
        "fixed_code": "throw new IllegalStateException(\"Failed to create temp directory\", e);",
        "patch": "@@ -52,7 +52,7 @@ private static Path createTempDir(Path baseDir) {\n     try {\n       return Files.createTempDirectory(baseDir, null);\n     } catch (IOException e) {\n-      throw new IllegalStateException(\"Failed to create temp directory\");\n+      throw new IllegalStateException(\"Failed to create temp directory\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "buggy_code": "public ComponentDto getByKeyOrUuid(DbSession dbSession, @Nullable String componentUuid, @Nullable String componentKey) {",
        "fixed_code": "public ComponentDto getByUuidOrKey(DbSession dbSession, @Nullable String componentUuid, @Nullable String componentKey) {",
        "patch": "@@ -37,7 +37,7 @@ public ComponentFinder(DbClient dbClient) {\n     this.dbClient = dbClient;\n   }\n \n-  public ComponentDto getByKeyOrUuid(DbSession dbSession, @Nullable String componentUuid, @Nullable String componentKey) {\n+  public ComponentDto getByUuidOrKey(DbSession dbSession, @Nullable String componentUuid, @Nullable String componentKey) {\n     checkArgument(componentUuid != null ^ componentKey != null, \"The component key or the component id must be provided, not both.\");\n \n     if (componentUuid != null) {"
    },
    {
        "commit_id": "2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "buggy_code": "ComponentDto component = componentFinder.getByKeyOrUuid(session, fileUuid, fileKey);",
        "fixed_code": "ComponentDto component = componentFinder.getByUuidOrKey(session, fileUuid, fileKey);",
        "patch": "@@ -85,7 +85,7 @@ public void handle(Request request, Response response) {\n \n     DbSession session = dbClient.openSession(false);\n     try {\n-      ComponentDto component = componentFinder.getByKeyOrUuid(session, fileUuid, fileKey);\n+      ComponentDto component = componentFinder.getByUuidOrKey(session, fileUuid, fileKey);\n       String componentKey = component.key();\n       userSession.checkComponentPermission(UserRole.CODEVIEWER, componentKey);\n       JsonWriter json = response.newJsonWriter().beginObject();"
    },
    {
        "commit_id": "2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "buggy_code": "ComponentDto component = componentFinder.getByKeyOrUuid(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));",
        "fixed_code": "ComponentDto component = componentFinder.getByUuidOrKey(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));",
        "patch": "@@ -115,7 +115,7 @@ public void handle(Request request, Response response) throws Exception {\n     long now = system.now();\n \n     try {\n-      ComponentDto component = componentFinder.getByKeyOrUuid(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));\n+      ComponentDto component = componentFinder.getByUuidOrKey(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));\n       MetricDto metric = searchMetric(dbSession, request);\n       checkPermissions(userSession, component);\n       checkIsProjectOrModule(component);"
    },
    {
        "commit_id": "2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "buggy_code": "ComponentDto project = componentFinder.getByKeyOrUuid(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));",
        "fixed_code": "ComponentDto project = componentFinder.getByUuidOrKey(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));",
        "patch": "@@ -77,7 +77,7 @@ public void handle(Request request, Response response) throws Exception {\n     DbSession dbSession = dbClient.openSession(false);\n \n     try {\n-      ComponentDto project = componentFinder.getByKeyOrUuid(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));\n+      ComponentDto project = componentFinder.getByUuidOrKey(dbSession, request.param(CreateAction.PARAM_PROJECT_ID), request.param(CreateAction.PARAM_PROJECT_KEY));\n       checkPermissions(userSession, project);\n       List<MetricDto> metrics = searchMetrics(dbSession, project);\n "
    },
    {
        "commit_id": "2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b803cfc96db00f74f1eb59a198e78c21bdf956c",
        "buggy_code": "ComponentDto project = componentFinder.getByKeyOrUuid(dbSession, projectUuid, projectKey);",
        "fixed_code": "ComponentDto project = componentFinder.getByUuidOrKey(dbSession, projectUuid, projectKey);",
        "patch": "@@ -100,7 +100,7 @@ public void handle(Request request, Response response) throws Exception {\n \n     DbSession dbSession = dbClient.openSession(false);\n     try {\n-      ComponentDto project = componentFinder.getByKeyOrUuid(dbSession, projectUuid, projectKey);\n+      ComponentDto project = componentFinder.getByUuidOrKey(dbSession, projectUuid, projectKey);\n       checkPermissions(userSession, project);\n       Long lastAnalysisDateMs = searchLastSnapshot(dbSession, project);\n       List<CustomMeasureDto> customMeasures = searchCustomMeasures(dbSession, project, searchOptions);"
    },
    {
        "commit_id": "aa5aedac205005477230665673a0f446d0cd3661",
        "commit_message": "SONAR-6644 do not compute issue debt if SQALE characteristic is not set",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aa5aedac205005477230665673a0f446d0cd3661",
        "buggy_code": "if (fn != null) {",
        "fixed_code": "if (fn != null && rule.getSubCharacteristicId() != null) {",
        "patch": "@@ -42,7 +42,7 @@ public DebtCalculator(RuleRepository ruleRepository, Durations durations) {\n   public Duration calculate(DefaultIssue issue) {\n     Rule rule = ruleRepository.getByKey(issue.ruleKey());\n     DebtRemediationFunction fn = rule.getRemediationFunction();\n-    if (fn != null) {\n+    if (fn != null && rule.getSubCharacteristicId() != null) {\n       verifyEffortToFix(issue, fn);\n \n       Duration debt = Duration.create(0);"
    },
    {
        "commit_id": "8cda62bcc116f3de80f1defa679c7d847c597576",
        "commit_message": "fix quality flaw: method can be static",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8cda62bcc116f3de80f1defa679c7d847c597576",
        "buggy_code": "private void dumpReportImpl(String dumpDirLocation, String projectKey, String relativeUrl, File report) throws IOException, URISyntaxException {",
        "fixed_code": "private static void dumpReportImpl(String dumpDirLocation, String projectKey, String relativeUrl, File report) throws IOException, URISyntaxException {",
        "patch": "@@ -183,7 +183,7 @@ private void dumpReport(String dumpDirLocation, String projectKey, String relati\n     }\n   }\n \n-  private void dumpReportImpl(String dumpDirLocation, String projectKey, String relativeUrl, File report) throws IOException, URISyntaxException {\n+  private static void dumpReportImpl(String dumpDirLocation, String projectKey, String relativeUrl, File report) throws IOException, URISyntaxException {\n     File dumpDir = new File(dumpDirLocation);\n     if (!dumpDir.exists() || !dumpDir.isDirectory()) {\n       LOG.warn(\"Report dump directory '{}' does not exist or is not a directory\", dumpDirLocation);"
    },
    {
        "commit_id": "52d59498d50b54e28dc5f5cc38049f01d64bd0fb",
        "commit_message": "Fix 's' parameter description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/52d59498d50b54e28dc5f5cc38049f01d64bd0fb",
        "buggy_code": ".setDescription(\"To filter on resources containing a specified text in their key\")",
        "fixed_code": ".setDescription(\"To filter on resources containing a specified text in their name\")",
        "patch": "@@ -125,7 +125,7 @@ private void defineSearchAction(NewController controller) {\n       .setResponseExample(Resources.getResource(this.getClass(), \"resources-example-search.json\"));\n \n     action.createParam(\"s\")\n-      .setDescription(\"To filter on resources containing a specified text in their key\")\n+      .setDescription(\"To filter on resources containing a specified text in their name\")\n       .setExampleValue(\"sonar\");\n \n     action.createParam(\"display_key\")"
    },
    {
        "commit_id": "d712da480c0a6553e508fff490ecfe2c64a40a40",
        "commit_message": "fix generics declaration in Counter and Formula",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d712da480c0a6553e508fff490ecfe2c64a40a40",
        "buggy_code": "public interface Counter<T extends Counter> {",
        "fixed_code": "public interface Counter<T extends Counter<T>> {",
        "patch": "@@ -25,7 +25,7 @@\n /**\n  * A counter is used to aggregate some data\n  */\n-public interface Counter<T extends Counter> {\n+public interface Counter<T extends Counter<T>> {\n \n   /**\n    * This method is used on not {@link Type#FILE} levels, to aggregate the value of counter from a child"
    },
    {
        "commit_id": "a5f41ef44e0647d1924b528ba75f57393e3c8b88",
        "commit_message": "Fix issue tracking when comparing only hash of line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5f41ef44e0647d1924b528ba75f57393e3c8b88",
        "buggy_code": "LineAndLineHashKey that = (LineAndLineHashKey) o;",
        "fixed_code": "LineHashKey that = (LineHashKey) o;",
        "patch": "@@ -261,7 +261,7 @@ public boolean equals(@Nonnull Object o) {\n       if (this == o) {\n         return true;\n       }\n-      LineAndLineHashKey that = (LineAndLineHashKey) o;\n+      LineHashKey that = (LineHashKey) o;\n       // start with most discriminant field\n       return lineHash.equals(that.lineHash)\n         && ruleKey.equals(that.ruleKey);"
    },
    {
        "commit_id": "6c9d4e9d3502589a0e8b556c89c7360bba6e4b57",
        "commit_message": "Minor - fix log in PluginInfo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6c9d4e9d3502589a0e8b556c89c7360bba6e4b57",
        "buggy_code": "Loggers.get(PluginInfo.class).info(\"Plugin [{}] still defines 'l10nen' as base plugin. \" +",
        "fixed_code": "Loggers.get(PluginInfo.class).info(\"Plugin [{}] defines 'l10nen' as base plugin. \" +",
        "patch": "@@ -288,7 +288,7 @@ public PluginInfo setUseChildFirstClassLoader(boolean b) {\n \n   public PluginInfo setBasePlugin(@Nullable String s) {\n     if (\"l10nen\".equals(s)) {\n-      Loggers.get(PluginInfo.class).info(\"Plugin [{}] still defines 'l10nen' as base plugin. \" +\n+      Loggers.get(PluginInfo.class).info(\"Plugin [{}] defines 'l10nen' as base plugin. \" +\n         \"This metadata can be removed from manifest of l10n plugins since version 5.2.\", key);\n       basePlugin = null;\n     } else {"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void cleanUp() throws Exception {",
        "fixed_code": "public void cleanUp() {",
        "patch": "@@ -43,7 +43,7 @@ public class QualityGateNotificationTest {\n     .build();\n \n   @Before\n-  public void cleanUp() throws Exception {\n+  public void cleanUp() {\n     orchestrator.resetData();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void cleanUp() throws Exception {",
        "fixed_code": "public void cleanUp() {",
        "patch": "@@ -38,7 +38,7 @@ public class QualityGateTest {\n     .build();\n \n   @Before\n-  public void cleanUp() throws Exception {\n+  public void cleanUp() {\n     orchestrator.resetData();\n     provisionnedProjectId = Long.parseLong(orchestrator.getServer().adminWsClient().projectClient().create(NewProject.create().key(PROJECT_KEY).name(\"Sample\")).id());\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "private void scrollRows() throws Exception {",
        "fixed_code": "private void scrollRows() {",
        "patch": "@@ -60,7 +60,7 @@ public void benchmark() throws Exception {\n     scrollRows();\n   }\n \n-  private void scrollRows() throws Exception {\n+  private void scrollRows() {\n     LOGGER.info(\"Scroll table FILE_SOURCES\");\n     AtomicLong counter = new AtomicLong();\n     ProgressTask progress = new ProgressTask(LOGGER, \"source file\", counter);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -40,7 +40,7 @@ public class ActivityResultSetIteratorTest {\n   public DbTester dbTester = DbTester.create(System2.INSTANCE);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void verify_count_of_added_components() throws Exception {",
        "fixed_code": "public void verify_count_of_added_components() {",
        "patch": "@@ -26,7 +26,7 @@\n \n public class BatchWsModuleTest {\n   @Test\n-  public void verify_count_of_added_components() throws Exception {\n+  public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new BatchWsModule().configure(container);\n     assertThat(container.size()).isEqualTo(10);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void select_ghost_projects() throws Exception {",
        "fixed_code": "public void select_ghost_projects() {",
        "patch": "@@ -498,7 +498,7 @@ public void count_provisioned_projects() {\n   }\n \n   @Test\n-  public void select_ghost_projects() throws Exception {\n+  public void select_ghost_projects() {\n     db.prepareDbUnit(getClass(), \"select_ghost_projects.xml\");\n \n     List<ComponentDto> result = sut.selectGhostProjects(session, null, new SearchOptions());"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void tearDown() throws Exception {",
        "fixed_code": "public void tearDown() {",
        "patch": "@@ -80,7 +80,7 @@ public void setUp() throws Exception {\n   }\n \n   @After\n-  public void tearDown() throws Exception {\n+  public void tearDown() {\n     session.close();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void creating_a_new_characteristic_with_null_key_throws_a_NPE() throws Exception {",
        "fixed_code": "public void creating_a_new_characteristic_with_null_key_throws_a_NPE() {",
        "patch": "@@ -62,7 +62,7 @@ public void test_equals_and_hashcode() throws Exception {\n   }\n \n   @Test\n-  public void creating_a_new_characteristic_with_null_key_throws_a_NPE() throws Exception {\n+  public void creating_a_new_characteristic_with_null_key_throws_a_NPE() {\n     thrown.expect(NullPointerException.class);\n     thrown.expectMessage(\"key cannot be null\");\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void check_formulas_are_not_empty() throws Exception {",
        "fixed_code": "public void check_formulas_are_not_empty() {",
        "patch": "@@ -27,7 +27,7 @@\n public class CoreFormulaRepositoryImplTest {\n \n   @Test\n-  public void check_formulas_are_not_empty() throws Exception {\n+  public void check_formulas_are_not_empty() {\n     assertThat(new CoreFormulaRepositoryImpl().getFormulas()).isNotEmpty();\n \n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -50,7 +50,7 @@ public class IssueAssignerTest {\n   IssueAssigner underTest;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     esTester.truncateIndices();\n     underTest = new IssueAssigner(new SourceLineIndex(esTester.client()), reportReader, scmAccountToUser, defaultAssignee);\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void no_measures_if_no_periods() throws Exception {",
        "fixed_code": "public void no_measures_if_no_periods() {",
        "patch": "@@ -99,7 +99,7 @@ public void aggregate_new_debt_of_children() {\n   }\n \n   @Test\n-  public void no_measures_if_no_periods() throws Exception {\n+  public void no_measures_if_no_periods() {\n     periodsHolder.setPeriods();\n     DefaultIssue unresolved = new DefaultIssue().setDebt(Duration.create(10));\n     verifyZeroInteractions(calculator);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void getByKey() throws Exception {",
        "fixed_code": "public void getByKey() {",
        "patch": "@@ -34,7 +34,7 @@ public class RuleRepositoryImplTest {\n   RuleRepositoryImpl underTest = new RuleRepositoryImpl(cacheLoader);\n \n   @Test\n-  public void getByKey() throws Exception {\n+  public void getByKey() {\n     when(cacheLoader.load(XOO_X1)).thenReturn(new DumbRule(XOO_X1));\n \n     assertThat(underTest.getByKey(XOO_X1).getKey()).isEqualTo(XOO_X1);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -45,7 +45,7 @@ public class MetricRepositoryImplTest {\n   private MetricRepositoryImpl underTest = new MetricRepositoryImpl(dbClient);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void verify_to_string() throws Exception {",
        "fixed_code": "public void verify_to_string() {",
        "patch": "@@ -73,7 +73,7 @@ public void constructor_throws_IAE_if_index_is_less_then_1() {\n   }\n \n   @Test\n-  public void verify_to_string() throws Exception {\n+  public void verify_to_string() {\n     assertThat(new Period(1, CoreProperties.TIMEMACHINE_MODE_VERSION, \"2.3\", 1420034400000L, 10L).toString())\n       .isEqualTo(\"Period{index=1, mode=version, modeParameter=2.3, snapshotDate=1420034400000, snapshotId=10}\");\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -52,7 +52,7 @@ public class BuildComponentTreeStepTest {\n   private BuildComponentTreeStep underTest = new BuildComponentTreeStep(reportReader, treeRootHolder);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     reportReader.setMetadata(Metadata.newBuilder().setRootComponentRef(ROOT_REF).build());\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void call_indexProject_of_dao() throws IOException {",
        "fixed_code": "public void call_indexProject_of_dao() {",
        "patch": "@@ -48,7 +48,7 @@ public class IndexComponentsStepTest extends BaseStepTest {\n   IndexComponentsStep sut = new IndexComponentsStep(resourceIndexDao, dbIdsRepository, treeRootHolder);\n \n   @Test\n-  public void call_indexProject_of_dao() throws IOException {\n+  public void call_indexProject_of_dao() {\n     Component project = DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"PROJECT_UUID\").setKey(PROJECT_KEY).build();\n     dbIdsRepository.setComponentId(project, 123L);\n     treeRootHolder.setRoot(project);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -80,7 +80,7 @@ public class NewCoverageMeasuresStepTest {\n   public static final DumbComponent FILE_COMPONENT = DumbComponent.builder(Component.Type.FILE, 1).setFileAttributes(new FileAttributes(false, null)).build();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     periodsHolder.setPeriods(\n       new Period(2, \"mode_p_1\", null, parseDate(\"2009-12-25\").getTime(), 1),\n       new Period(5, \"mode_p_5\", null, parseDate(\"2011-02-18\").getTime(), 2));"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -68,7 +68,7 @@ public class PersistNumberOfDaysSinceLastCommitStepTest extends BaseStepTest {\n   LanguageRepository languageRepository;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     db.truncateTables();\n     dbClient = new DbClient(db.database(), db.myBatis(), new MeasureDao());\n     sourceLineIndex = mock(SourceLineIndex.class);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setup() throws Exception {",
        "fixed_code": "public void setup() {",
        "patch": "@@ -86,7 +86,7 @@ public class PersistTestsStepTest extends BaseStepTest {\n   long now = 123456789L;\n \n   @Before\n-  public void setup() throws Exception {\n+  public void setup() {\n     db.truncateTables();\n     session = db.myBatis().openSession(false);\n     dbClient = new DbClient(db.database(), db.myBatis(), new FileSourceDao(db.myBatis()));"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -74,7 +74,7 @@ public class QualityGateEventsStepTest {\n   private QualityGateEventsStep underTest = new QualityGateEventsStep(treeRootHolder, metricRepository, measureRepository, eventRepository, notificationManager);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(metricRepository.getByKey(ALERT_STATUS_KEY)).thenReturn(alertStatusMetric);\n     treeRootHolder.setRoot(PROJECT_COMPONENT);\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -80,7 +80,7 @@ public class QualityGateMeasuresStepTest {\n   private QualityGateMeasuresStep underTest = new QualityGateMeasuresStep(treeRootHolder, qualityGateHolder, measureRepository, metricRepository, resultTextConverter);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     treeRootHolder.setRoot(PROJECT_COMPONENT);\n \n     when(metricRepository.getByKey(CoreMetrics.ALERT_STATUS_KEY)).thenReturn(ALERT_STATUS_METRIC);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -83,7 +83,7 @@ public class QualityProfileEventsStepTest {\n   private QualityProfileEventsStep underTest = new QualityProfileEventsStep(treeRootHolder, metricRepository, measureRepository, languageRepository, eventRepository);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     when(metricRepository.getByKey(CoreMetrics.QUALITY_PROFILES_KEY)).thenReturn(qualityProfileMetric);\n     treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT, 1).setUuid(\"uuid\").setKey(\"key\").build());\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void do_not_send_notifications_if_no_subscribers() throws IOException {",
        "fixed_code": "public void do_not_send_notifications_if_no_subscribers() {",
        "patch": "@@ -87,7 +87,7 @@ public void setUp() throws Exception {\n   }\n \n   @Test\n-  public void do_not_send_notifications_if_no_subscribers() throws IOException {\n+  public void do_not_send_notifications_if_no_subscribers() {\n     when(notifService.hasProjectSubscribersForTypes(PROJECT_UUID, SendIssueNotificationsStep.NOTIF_TYPES)).thenReturn(false);\n \n     sut.execute();"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -74,7 +74,7 @@ public class SqaleMeasuresStepTest {\n   private SqaleMeasuresStep underTest = new SqaleMeasuresStep(treeRootHolder, metricRepository, measureRepository, sqaleRatingSettings);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     // assumes SQALE rating configuration is consistent\n     when(sqaleRatingSettings.getRatingGrid()).thenReturn(RATING_GRID);\n     when(sqaleRatingSettings.getSizeMetricKey(LANGUAGE_KEY_1)).thenReturn(METRIC_KEY_1);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void verify_count_of_added_MigrationStep_types() throws Exception {",
        "fixed_code": "public void verify_count_of_added_MigrationStep_types() {",
        "patch": "@@ -26,7 +26,7 @@\n \n public class MigrationStepModuleTest {\n   @Test\n-  public void verify_count_of_added_MigrationStep_types() throws Exception {\n+  public void verify_count_of_added_MigrationStep_types() {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n     assertThat(container.size()).isEqualTo(55);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -41,7 +41,7 @@ public class IssueAuthorizationDaoTest {\n   IssueAuthorizationDao dao = new IssueAuthorizationDao();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -40,7 +40,7 @@ public class IssueResultSetIteratorTest {\n   public DbTester dbTester = DbTester.create(System2.INSTANCE);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -91,7 +91,7 @@ public static void setUpClass() throws Exception {\n   }\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbClient = new DbClient(db.database(), db.myBatis(), new CustomMeasureDao(), new ComponentDao(), new MetricDao());\n     dbSession = dbClient.openSession(false);\n     db.truncateTables();"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -32,7 +32,7 @@ public class TypesActionTest {\n   WsTester ws;\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     ws = new WsTester(new MetricsWs(new TypesAction()));\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void tearDown() throws Exception {",
        "fixed_code": "public void tearDown() {",
        "patch": "@@ -68,7 +68,7 @@ public void setUp() {\n   }\n \n   @After\n-  public void tearDown() throws Exception {\n+  public void tearDown() {\n     dbSession.close();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void verify_count_of_added_components() throws Exception {",
        "fixed_code": "public void verify_count_of_added_components() {",
        "patch": "@@ -26,7 +26,7 @@\n \n public class EsSearchModuleTest {\n   @Test\n-  public void verify_count_of_added_components() throws Exception {\n+  public void verify_count_of_added_components() {\n     ComponentContainer container = new ComponentContainer();\n     new EsSearchModule().configure(container);\n     assertThat(container.size()).isEqualTo(5);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void after() throws Exception {",
        "fixed_code": "public void after() {",
        "patch": "@@ -42,7 +42,7 @@ public class SourceLineResultSetIteratorTest {\n \n   SourceLineResultSetIterator iterator;\n \n-  public void after() throws Exception {\n+  public void after() {\n     if (iterator != null) {\n       iterator.close();\n     }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void after() throws Exception {",
        "fixed_code": "public void after() {",
        "patch": "@@ -50,7 +50,7 @@ public class TestResultSetIteratorTest {\n   TestResultSetIterator sut;\n \n   @After\n-  public void after() throws Exception {\n+  public void after() {\n     if (sut != null) {\n       sut.close();\n     }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -34,7 +34,7 @@ public class DoPrivilegedTest {\n   private MockUserSession session = new MockUserSession(LOGIN);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     threadLocalUserSession.set(session);\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void tearDown() throws Exception {",
        "fixed_code": "public void tearDown() {",
        "patch": "@@ -47,7 +47,7 @@ public void setUp() {\n   }\n \n   @After\n-  public void tearDown() throws Exception {\n+  public void tearDown() {\n     // clean up for next test\n     threadLocalUserSession.remove();\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void tearDown() throws Exception {",
        "fixed_code": "public void tearDown() {",
        "patch": "@@ -42,7 +42,7 @@ public void setUp() {\n   }\n \n   @After\n-  public void tearDown() throws Exception {\n+  public void tearDown() {\n     // clean up for next test\n     threadLocalUserSession.remove();\n   }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -39,7 +39,7 @@ public class UserResultSetIteratorTest {\n   public DbTester dbTester = DbTester.create(System2.INSTANCE);\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void should_handle_headers() throws Exception {",
        "fixed_code": "public void should_handle_headers() {",
        "patch": "@@ -291,7 +291,7 @@ public void bad_request_with_multiple_i18n_messages() {\n   }\n \n   @Test\n-  public void should_handle_headers() throws Exception {\n+  public void should_handle_headers() {\n     ServletResponse response = new ServletResponse();\n     String name = \"Content-Disposition\";\n     String value = \"attachment; filename=sonarqube.zip\";"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void should_clean_resources() throws PersistitException {",
        "fixed_code": "public void should_clean_resources() {",
        "patch": "@@ -45,7 +45,7 @@ public void should_not_create_cache_twice() {\n   }\n \n   @Test\n-  public void should_clean_resources() throws PersistitException {\n+  public void should_clean_resources() {\n     Cache<String> c = caches.<String>createCache(\"test1\");\n     for (int i = 0; i < 1_000_000; i++) {\n       c.put(\"a\" + i, \"a\" + i);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void should_add_measure_with_big_data() throws InterruptedException {",
        "fixed_code": "public void should_add_measure_with_big_data() {",
        "patch": "@@ -80,7 +80,7 @@ public void should_add_measure() {\n   }\n \n   @Test\n-  public void should_add_measure_with_big_data() throws InterruptedException {\n+  public void should_add_measure_with_big_data() {\n     Project p = new Project(\"struts\");\n \n     assertThat(measureCache.entries()).hasSize(0);"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void l10n_plugins_should_not_extend_english_plugin() throws Exception {",
        "fixed_code": "public void l10n_plugins_should_not_extend_english_plugin() {",
        "patch": "@@ -209,7 +209,7 @@ public void test_toString() throws Exception {\n    * it as base plugin anymore\n    */\n   @Test\n-  public void l10n_plugins_should_not_extend_english_plugin() throws Exception {\n+  public void l10n_plugins_should_not_extend_english_plugin() {\n     PluginInfo pluginInfo = new PluginInfo(\"l10nfr\").setBasePlugin(\"l10nen\");\n     assertThat(pluginInfo.getBasePlugin()).isNull();\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void select_previous_version_snapshots() throws Exception {",
        "fixed_code": "public void select_previous_version_snapshots() {",
        "patch": "@@ -169,7 +169,7 @@ public void select_snapshots_by_query() {\n   }\n \n   @Test\n-  public void select_previous_version_snapshots() throws Exception {\n+  public void select_previous_version_snapshots() {\n     db.prepareDbUnit(getClass(), \"select_previous_version_snapshots.xml\");\n \n     List<SnapshotDto> snapshots = sut.selectPreviousVersionSnapshots(session, 1L, \"1.2-SNAPSHOT\");"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -34,7 +34,7 @@ public class ActionPlanDaoTest extends AbstractDaoTestCase {\n   ActionPlanDao dao = dbTester.getDbClient().actionPlanDao();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -26,7 +26,7 @@\n public class IssueChangeMapperTest extends AbstractDaoTestCase {\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void get_value_throw_a_NPE_if_value_is_null() throws Exception {",
        "fixed_code": "public void get_value_throw_a_NPE_if_value_is_null() {",
        "patch": "@@ -66,7 +66,7 @@ public void test_has_value() throws Exception {\n   }\n \n   @Test(expected = NullPointerException.class)\n-  public void get_value_throw_a_NPE_if_value_is_null() throws Exception {\n+  public void get_value_throw_a_NPE_if_value_is_null() {\n     new PastMeasureDto().getValue();\n   }\n }"
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -34,7 +34,7 @@ public class NotificationQueueDaoTest extends AbstractDaoTestCase {\n   NotificationQueueDao dao = new NotificationQueueDao(dbTester.myBatis());\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "commit_message": "FIX Redundant throws clause",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0390ff8452ea1aecf060e70d27e21e1c04629a7",
        "buggy_code": "public void setUp() throws Exception {",
        "fixed_code": "public void setUp() {",
        "patch": "@@ -37,7 +37,7 @@ public class FileSourceDaoTest extends AbstractDaoTestCase {\n   FileSourceDao sut = dbTester.getDbClient().fileSourceDao();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     dbTester.truncateTables();\n   }\n "
    },
    {
        "commit_id": "38df1425f5f4e967ac7f27367599c852a52b8b7c",
        "commit_message": "Fix deprecated code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38df1425f5f4e967ac7f27367599c852a52b8b7c",
        "buggy_code": "import static org.junit.matchers.JUnitMatchers.hasItem;",
        "fixed_code": "import static org.hamcrest.CoreMatchers.hasItem;",
        "patch": "@@ -34,11 +34,11 @@\n import java.util.Iterator;\n import java.util.List;\n \n+import static org.hamcrest.CoreMatchers.hasItem;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n-import static org.junit.matchers.JUnitMatchers.hasItem;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;"
    },
    {
        "commit_id": "38df1425f5f4e967ac7f27367599c852a52b8b7c",
        "commit_message": "Fix deprecated code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38df1425f5f4e967ac7f27367599c852a52b8b7c",
        "buggy_code": "assertJson(new File(\"target/missing\").toURL());",
        "fixed_code": "assertJson(new File(\"target/missing\").toURI().toURL());",
        "patch": "@@ -72,7 +72,7 @@ public void actual_can_be_superset_of_expected() {\n \n   @Test(expected = IllegalStateException.class)\n   public void fail_to_load_url() throws Exception {\n-    assertJson(new File(\"target/missing\").toURL());\n+    assertJson(new File(\"target/missing\").toURI().toURL());\n   }\n \n   @Test"
    },
    {
        "commit_id": "854f1e5cd9acdad37fc041f7966aa85f39c8523f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/854f1e5cd9acdad37fc041f7966aa85f39c8523f",
        "buggy_code": "private void process(DebtModel debtModel, @Nullable String parent, SMInputCursor chcCursor) throws XMLStreamException {",
        "fixed_code": "private static void process(DebtModel debtModel, @Nullable String parent, SMInputCursor chcCursor) throws XMLStreamException {",
        "patch": "@@ -82,7 +82,7 @@ private static SMInputFactory initStax() {\n   }\n \n   @CheckForNull\n-  private void process(DebtModel debtModel, @Nullable String parent, SMInputCursor chcCursor) throws XMLStreamException {\n+  private static void process(DebtModel debtModel, @Nullable String parent, SMInputCursor chcCursor) throws XMLStreamException {\n     DefaultDebtCharacteristic characteristic = new DefaultDebtCharacteristic();\n     SMInputCursor cursor = chcCursor.childElementCursor();\n     while (cursor.getNext() != null) {"
    },
    {
        "commit_id": "2e2c1fbdc5f17b9d8577c7582139d7427c398589",
        "commit_message": "SONAR-6628 fix warning log displaying value, security hole",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2e2c1fbdc5f17b9d8577c7582139d7427c398589",
        "buggy_code": "assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property '\" + DROPPED_PROPERTY_1 + \"' (which value is '\" + SOME_VALUE +\"') is not supported any more. \" + DROPPED_PROPERTY_MSG_1);",
        "fixed_code": "assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property '\" + DROPPED_PROPERTY_1 + \"' is not supported any more. \" + DROPPED_PROPERTY_MSG_1);",
        "patch": "@@ -61,7 +61,7 @@ public void warn_log_if_settings_contains_any_dropped_property() {\n     new DroppedPropertyChecker(settings, ImmutableMap.of(DROPPED_PROPERTY_1, DROPPED_PROPERTY_MSG_1)).checkDroppedProperties();\n \n     assertThat(logTester.logs(LoggerLevel.ERROR)).isEmpty();\n-    assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property '\" + DROPPED_PROPERTY_1 + \"' (which value is '\" + SOME_VALUE +\"') is not supported any more. \" + DROPPED_PROPERTY_MSG_1);\n+    assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property '\" + DROPPED_PROPERTY_1 + \"' is not supported any more. \" + DROPPED_PROPERTY_MSG_1);\n     assertThat(logTester.logs(LoggerLevel.INFO)).isEmpty();\n     assertThat(logTester.logs(LoggerLevel.DEBUG)).isEmpty();\n     assertThat(logTester.logs(LoggerLevel.TRACE)).isEmpty();"
    },
    {
        "commit_id": "2e2c1fbdc5f17b9d8577c7582139d7427c398589",
        "commit_message": "SONAR-6628 fix warning log displaying value, security hole",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2e2c1fbdc5f17b9d8577c7582139d7427c398589",
        "buggy_code": "assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property 'sonar.qualitygate' (which value is 'somevalue') is not supported any more. It will be ignored.\");",
        "fixed_code": "assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property 'sonar.qualitygate' is not supported any more. It will be ignored.\");",
        "patch": "@@ -121,7 +121,7 @@ public void should_log_a_warning_when_a_dropper_property_is_present() {\n     GlobalSettings settings = new GlobalSettings(new BootstrapProperties(ImmutableMap.of(\"sonar.qualitygate\", \"somevalue\")), new PropertyDefinitions(), new GlobalRepositories(), mode);\n     new ProjectSettings(new ProjectReactor(project), settings, new PropertyDefinitions(), projectRef, mode);\n \n-    assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property 'sonar.qualitygate' (which value is 'somevalue') is not supported any more. It will be ignored.\");\n+    assertThat(logTester.logs(LoggerLevel.WARN)).containsOnly(\"Property 'sonar.qualitygate' is not supported any more. It will be ignored.\");\n \n   }\n }"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.Date;\n import java.util.Map;\n import java.util.Set;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.server.computation.batch.BatchReportReader;\n import org.sonar.server.computation.component.Component;\n import org.sonar.server.computation.component.TreeRootHolder;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.IsUnResolved;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.server.rule.RuleTagFormat;\n import org.sonar.core.issue.IssueUpdater;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.IssueChangeContext;",
        "fixed_code": "import org.sonar.core.issue.IssueChangeContext;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.Condition;\n-import org.sonar.api.issue.internal.IssueChangeContext;\n+import org.sonar.core.issue.IssueChangeContext;\n import org.sonar.server.user.UserSession;\n \n import java.util.Collection;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.IsUnResolved;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.user.User;\n import org.sonar.api.user.UserFinder;\n import org.sonar.core.issue.IssueUpdater;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -24,7 +24,7 @@\n import java.util.Collection;\n import java.util.Map;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.server.ServerSide;\n import org.sonar.core.issue.IssueUpdater;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.FieldDiffs;",
        "fixed_code": "import org.sonar.core.issue.FieldDiffs;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.issue;\n \n import com.google.common.collect.Maps;\n-import org.sonar.api.issue.internal.FieldDiffs;\n+import org.sonar.core.issue.FieldDiffs;\n import org.sonar.api.user.User;\n \n import javax.annotation.CheckForNull;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.FieldDiffs;",
        "fixed_code": "import org.sonar.core.issue.FieldDiffs;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.Map;\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.i18n.I18n;\n-import org.sonar.api.issue.internal.FieldDiffs;\n+import org.sonar.core.issue.FieldDiffs;\n import org.sonar.api.utils.Duration;\n import org.sonar.api.utils.Durations;\n import org.sonar.core.issue.IssueUpdater;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.FieldDiffs;",
        "fixed_code": "import org.sonar.core.issue.FieldDiffs;",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.List;\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.FieldDiffs;\n+import org.sonar.core.issue.FieldDiffs;\n import org.sonar.api.user.User;\n import org.sonar.api.user.UserFinder;\n import org.sonar.core.issue.db.IssueChangeDao;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.api.issue.ActionPlan;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.IsUnResolved;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.core.issue.IssueUpdater;\n import org.sonar.server.issue.actionplan.ActionPlanService;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.issue;\n \n import org.sonar.api.server.ServerSide;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rules.RuleFinder;\n import org.sonar.core.component.ComponentDto;\n import org.sonar.core.issue.db.IssueDto;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.condition.Condition;\n import org.sonar.api.issue.condition.IsUnResolved;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.server.ServerSide;\n import org.sonar.api.web.UserRole;\n import org.sonar.core.issue.IssueUpdater;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -27,7 +27,7 @@\n import java.util.Map;\n import org.apache.commons.lang.StringUtils;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.server.ServerSide;\n import org.sonar.core.issue.workflow.IssueWorkflow;\n import org.sonar.core.issue.workflow.Transition;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssueComment;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssueComment;",
        "patch": "@@ -35,13 +35,13 @@\n import org.sonar.api.issue.ActionPlan;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.IssueComment;\n-import org.sonar.api.issue.internal.DefaultIssueComment;\n import org.sonar.api.user.User;\n import org.sonar.api.utils.DateUtils;\n import org.sonar.api.utils.Duration;\n import org.sonar.api.utils.Durations;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.core.component.ComponentDto;\n+import org.sonar.core.issue.DefaultIssueComment;\n import org.sonar.markdown.Markdown;\n import org.sonar.server.user.UserSession;\n import org.sonar.server.ws.JsonWriterUtils;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssueComment;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssueComment;",
        "patch": "@@ -38,7 +38,6 @@\n import org.sonar.api.i18n.I18n;\n import org.sonar.api.issue.ActionPlan;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssueComment;\n import org.sonar.api.resources.Language;\n import org.sonar.api.resources.Languages;\n import org.sonar.api.rule.RuleKey;\n@@ -52,6 +51,7 @@\n import org.sonar.api.utils.DateUtils;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.core.component.ComponentDto;\n+import org.sonar.core.issue.DefaultIssueComment;\n import org.sonar.core.persistence.DbSession;\n import org.sonar.server.component.ws.ComponentJsonWriter;\n import org.sonar.server.db.DbClient;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.notifications.Notification;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.System2;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.FieldDiffs;",
        "fixed_code": "import org.sonar.core.issue.FieldDiffs;",
        "patch": "@@ -28,7 +28,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.i18n.I18n;\n-import org.sonar.api.issue.internal.FieldDiffs;\n+import org.sonar.core.issue.FieldDiffs;\n import org.sonar.api.utils.Duration;\n import org.sonar.api.utils.Durations;\n import org.sonar.server.tester.UserSessionRule;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssueComment;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssueComment;",
        "patch": "@@ -27,7 +27,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssueComment;\n+import org.sonar.core.issue.DefaultIssueComment;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.RuleStatus;\n import org.sonar.api.security.DefaultGroups;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -24,7 +24,7 @@\n import com.google.common.collect.Lists;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.DateUtils;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -22,7 +22,7 @@\n \n import com.google.common.collect.Lists;\n import org.junit.Test;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.Duration;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -29,7 +29,7 @@\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.action.Action;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.utils.text.JsonWriter;\n import org.sonar.api.web.UserRole;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonar.api.component.ResourcePerspectives;\n import org.sonar.api.issue.Issuable;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.measures.CoreMetrics;\n import org.sonar.api.measures.Measure;\n import org.sonar.api.measures.MeasuresFilters;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.List;\n import org.sonar.api.issue.Issuable;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.Project;\n import org.sonar.batch.index.BatchComponent;\n import org.sonar.core.issue.DefaultIssueBuilder;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import com.google.common.collect.Iterables;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.ProjectIssues;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.batch.issue;\n \n import org.sonar.api.batch.BatchSide;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.batch.index.Cache;\n import org.sonar.batch.index.Caches;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.api.batch.BatchSide;\n import org.sonar.api.issue.batch.IssueFilter;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n \n @BatchSide\n public class IssueFilters {"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.api.batch.rule.Rule;\n import org.sonar.api.batch.rule.Rules;\n import org.sonar.api.batch.rule.internal.DefaultActiveRule;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.Project;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rules.Violation;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -29,7 +29,7 @@\n import com.google.common.collect.Multimap;\n import org.sonar.api.batch.BatchSide;\n import org.sonar.api.batch.InstantiationStrategy;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import org.apache.commons.lang.StringUtils;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n \n import javax.annotation.Nullable;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -37,7 +37,7 @@\n import org.sonar.api.batch.sensor.highlighting.TypeOfText;\n import org.sonar.api.batch.sensor.measure.internal.DefaultMeasure;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.measures.Measure;\n import org.sonar.batch.duplication.DuplicationCache;\n import org.sonar.batch.index.Cache.Entry;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -28,7 +28,7 @@\n import org.sonar.api.batch.postjob.issue.Issue;\n import org.sonar.api.batch.rule.Severity;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.batch.index.BatchComponent;\n import org.sonar.batch.index.BatchComponentCache;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.api.Property;\n import org.sonar.api.PropertyType;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.log.Logger;\n import org.sonar.api.utils.log.Loggers;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import org.slf4j.LoggerFactory;\n import org.sonar.api.batch.BatchSide;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.Project;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rules.Rule;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.api.batch.rule.ActiveRules;\n import org.sonar.api.batch.rule.internal.DefaultActiveRule;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.platform.Server;\n import org.sonar.api.resources.Project;\n import org.sonar.api.rule.RuleKey;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -42,7 +42,7 @@\n import org.sonar.api.batch.sensor.measure.Measure;\n import org.sonar.api.batch.sensor.measure.internal.DefaultMeasure;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.measures.Formula;\n import org.sonar.api.measures.Metric;\n import org.sonar.api.measures.PersistenceMode;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -37,7 +37,7 @@\n import org.sonar.api.component.ResourcePerspectives;\n import org.sonar.api.issue.Issuable;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.measures.CoreMetrics;\n import org.sonar.api.measures.Measure;\n import org.sonar.api.measures.MeasuresFilter;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.List;\n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.Project;\n import org.sonar.batch.index.BatchComponent;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -22,7 +22,7 @@\n import com.google.common.collect.Lists;\n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -26,7 +26,7 @@\n import com.google.common.collect.ImmutableList;\n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.Severity;\n \n import javax.annotation.Nullable;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.any;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.api.batch.debt.DebtRemediationFunction;\n import org.sonar.api.batch.rule.internal.ActiveRulesBuilder;\n import org.sonar.api.batch.rule.internal.RulesBuilder;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.File;\n import org.sonar.api.resources.Project;\n import org.sonar.api.resources.Resource;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -32,7 +32,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.Project;\n import org.sonar.api.resources.Resource;\n import org.sonar.api.rule.RuleKey;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.batch.postjob.issue.Issue;\n import org.sonar.api.batch.rule.Severity;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.resources.File;\n import org.sonar.batch.index.BatchComponentCache;\n import org.sonar.batch.issue.IssueCache;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.api.batch.fs.InputFile;\n import org.sonar.api.batch.fs.internal.DefaultInputFile;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.log.LogTester;\n import org.sonar.batch.issue.IssueCache;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.api.batch.rule.internal.ActiveRulesBuilder;\n import org.sonar.api.config.Settings;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.platform.Server;\n import org.sonar.api.resources.Project;\n import org.sonar.api.resources.Resource;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "package org.sonar.api.issue.internal;",
        "fixed_code": "package org.sonar.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue.internal;\n+package org.sonar.core.issue;\n \n import org.sonar.api.issue.IssueComment;\n import org.sonar.api.utils.internal.Uuids;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "package org.sonar.api.issue.internal;",
        "fixed_code": "package org.sonar.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue.internal;\n+package org.sonar.core.issue;\n \n import com.google.common.base.Splitter;\n import com.google.common.base.Strings;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "package org.sonar.api.issue.internal;",
        "fixed_code": "package org.sonar.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue.internal;\n+package org.sonar.core.issue;\n \n import javax.annotation.CheckForNull;\n import javax.annotation.Nullable;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "package org.sonar.batch.phases.event;",
        "fixed_code": "package org.sonar.core.issue.tracking;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.batch.phases.event;\n+package org.sonar.core.issue.tracking;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "public class SetCloseDate implements Function {",
        "fixed_code": "class SetCloseDate implements Function {",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.core.issue.workflow;\n \n-public class SetCloseDate implements Function {\n+class SetCloseDate implements Function {\n   private final boolean set;\n \n   public SetCloseDate(boolean set) {"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -24,7 +24,7 @@\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.utils.Duration;\n import org.sonar.core.rule.RuleDto;\n "
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.DateUtils;"
    },
    {
        "commit_id": "bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "commit_message": "SONAR-6623 extract issue tracking algorithm from batch",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4118d6a9ceb9ad24274cdc6537d4a607121815",
        "buggy_code": "import org.sonar.api.issue.internal.DefaultIssue;",
        "fixed_code": "import org.sonar.core.issue.DefaultIssue;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.issue.condition.Condition;\n-import org.sonar.api.issue.internal.DefaultIssue;\n+import org.sonar.core.issue.DefaultIssue;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;"
    },
    {
        "commit_id": "7aa69eb1de0a994a92a24162de5200f2a3e1e7e8",
        "commit_message": "fix typo in method name in MeasureVariations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7aa69eb1de0a994a92a24162de5200f2a3e1e7e8",
        "buggy_code": "public static Builder newMeasureVarationsBuilder() {",
        "fixed_code": "public static Builder newMeasureVariationsBuilder() {",
        "patch": "@@ -39,7 +39,7 @@ public MeasureVariations(Double... variations) {\n     System.arraycopy(variations, 0, this.variations, 0, variations.length);\n   }\n \n-  public static Builder newMeasureVarationsBuilder() {\n+  public static Builder newMeasureVariationsBuilder() {\n     return new Builder();\n   }\n "
    },
    {
        "commit_id": "7aa69eb1de0a994a92a24162de5200f2a3e1e7e8",
        "commit_message": "fix typo in method name in MeasureVariations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7aa69eb1de0a994a92a24162de5200f2a3e1e7e8",
        "buggy_code": "MeasureVariations.Builder variationsBuilder = MeasureVariations.newMeasureVarationsBuilder();",
        "fixed_code": "MeasureVariations.Builder variationsBuilder = MeasureVariations.newMeasureVariationsBuilder();",
        "patch": "@@ -150,7 +150,7 @@ private void computeMeasure(final Counters counters, Metric metric, NewCoverageM\n       return;\n     }\n \n-    MeasureVariations.Builder variationsBuilder = MeasureVariations.newMeasureVarationsBuilder();\n+    MeasureVariations.Builder variationsBuilder = MeasureVariations.newMeasureVariationsBuilder();\n     for (Counter counter : nonEmptyCounters) {\n       variationsBuilder.setVariation(counter.getPeriodIndex(), measureComputer.compute(counter));\n     }"
    },
    {
        "commit_id": "0063b92f605464e8d684e5e4aabc41c23a04f513",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0063b92f605464e8d684e5e4aabc41c23a04f513",
        "buggy_code": "props.setProperty(batchStep.getKey().toString(), \"\" + batchStep.getValue().totalTime());",
        "fixed_code": "props.setProperty(batchStep.getKey().toString(), Long.toString(batchStep.getValue().totalTime()));",
        "patch": "@@ -70,7 +70,7 @@ public void dump(Properties props) {\n     categories.putAll(profilingPerBatchStep);\n \n     for (Map.Entry<Object, AbstractTimeProfiling> batchStep : categories.entrySet()) {\n-      props.setProperty(batchStep.getKey().toString(), \"\" + batchStep.getValue().totalTime());\n+      props.setProperty(batchStep.getKey().toString(), Long.toString(batchStep.getValue().totalTime()));\n     }\n \n     for (Map.Entry<Object, AbstractTimeProfiling> batchStep : sortByDescendingTotalTime(categories).entrySet()) {"
    },
    {
        "commit_id": "0063b92f605464e8d684e5e4aabc41c23a04f513",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0063b92f605464e8d684e5e4aabc41c23a04f513",
        "buggy_code": "private void checkSize(String key) {",
        "fixed_code": "private static void checkSize(String key) {",
        "patch": "@@ -241,7 +241,7 @@ public void setKey(String key) {\n     this.key = key;\n   }\n \n-  private void checkSize(String key) {\n+  private static void checkSize(String key) {\n     if (key.length() > KEY_SIZE) {\n       throw new IllegalArgumentException(\"Resource key is too long, max is \" + KEY_SIZE + \" characters. Got : \" + key);\n     }"
    },
    {
        "commit_id": "81e17e86cb55558de9d48c6e5fbda1cc79e98355",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81e17e86cb55558de9d48c6e5fbda1cc79e98355",
        "buggy_code": "props.setProperty(ProcessEntryPoint.PROPERTY_PROCESS_INDEX, \"\" + javaCommand.getProcessIndex());",
        "fixed_code": "props.setProperty(ProcessEntryPoint.PROPERTY_PROCESS_INDEX, Integer.toString(javaCommand.getProcessIndex()));",
        "patch": "@@ -99,7 +99,7 @@ private File buildPropertiesFile(JavaCommand javaCommand) {\n       Properties props = new Properties();\n       props.putAll(javaCommand.getArguments());\n       props.setProperty(ProcessEntryPoint.PROPERTY_PROCESS_KEY, javaCommand.getKey());\n-      props.setProperty(ProcessEntryPoint.PROPERTY_PROCESS_INDEX, \"\" + javaCommand.getProcessIndex());\n+      props.setProperty(ProcessEntryPoint.PROPERTY_PROCESS_INDEX, Integer.toString(javaCommand.getProcessIndex()));\n       props.setProperty(ProcessEntryPoint.PROPERTY_TERMINATION_TIMEOUT, String.valueOf(timeouts.getTerminationTimeout()));\n       props.setProperty(ProcessEntryPoint.PROPERTY_SHARED_PATH, javaCommand.getTempDir().getAbsolutePath());\n       OutputStream out = new FileOutputStream(propertiesFile);"
    },
    {
        "commit_id": "3176e6a63f06386a78ea73d69c5f082959562ac3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3176e6a63f06386a78ea73d69c5f082959562ac3",
        "buggy_code": "Map<String, String> failedAssertionMessages = new HashMap();",
        "fixed_code": "Map<String, String> failedAssertionMessages = new HashMap<>();",
        "patch": "@@ -56,7 +56,7 @@ public static void assertBundlesUpToDate() {\n     }\n \n     Collection<File> bundles = FileUtils.listFiles(bundleFolder, new String[]{\"properties\"}, false);\n-    Map<String, String> failedAssertionMessages = new HashMap();\n+    Map<String, String> failedAssertionMessages = new HashMap<>();\n     for (File bundle : bundles) {\n       String bundleName = bundle.getName();\n       if (bundleName.indexOf('_') > 0) {"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "boolean isNewKo = (rawStatus.getStatus() == Measure.Level.OK);",
        "fixed_code": "boolean isNewKo = rawStatus.getStatus() == Measure.Level.OK;",
        "patch": "@@ -97,7 +97,7 @@ private void checkQualityGateStatusChange(Component project, Metric metric, Qual\n       // The QualityGate status has changed\n       String label = String.format(\"%s (was %s)\", rawStatus.getStatus().getColorName(), baseStatus.getStatus().getColorName());\n       createEvent(project, label, rawStatus.getText());\n-      boolean isNewKo = (rawStatus.getStatus() == Measure.Level.OK);\n+      boolean isNewKo = rawStatus.getStatus() == Measure.Level.OK;\n       notifyUsers(project, label, rawStatus, isNewKo);\n     }\n   }"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "status = (STATUS_OPEN.equals(reviewStatus) ? STATUS_CONFIRMED : reviewStatus);",
        "fixed_code": "status = STATUS_OPEN.equals(reviewStatus) ? STATUS_CONFIRMED : reviewStatus;",
        "patch": "@@ -194,7 +194,7 @@ private void convert(List<Map<String, Object>> rows, Long[] violationIds) throws\n         } else {\n           // violation + review\n           String reviewStatus = (String) row.get(REVIEW_STATUS);\n-          status = (STATUS_OPEN.equals(reviewStatus) ? STATUS_CONFIRMED : reviewStatus);\n+          status = STATUS_OPEN.equals(reviewStatus) ? STATUS_CONFIRMED : reviewStatus;\n           manualSeverity = Objects.firstNonNull((Boolean) row.get(REVIEW_MANUAL_SEVERITY), false);\n           severity = (String) row.get(REVIEW_SEVERITY);\n           updatedAt = Objects.firstNonNull(row.get(REVIEW_UPDATED_AT), ONE_YEAR_AGO);"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "if (l10nKey != null ? !l10nKey.equals(message.l10nKey) : message.l10nKey != null) {",
        "fixed_code": "if ((l10nKey != null) ? !l10nKey.equals(message.l10nKey) : (message.l10nKey != null)) {",
        "patch": "@@ -129,7 +129,7 @@ public boolean equals(Object o) {\n       }\n       Message message = (Message) o;\n \n-      if (l10nKey != null ? !l10nKey.equals(message.l10nKey) : message.l10nKey != null) {\n+      if ((l10nKey != null) ? !l10nKey.equals(message.l10nKey) : (message.l10nKey != null)) {\n         return false;\n       }\n       // Probably incorrect - comparing Object[] arrays with Arrays.equals"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "if (cssClass != null ? !cssClass.equals(otherTag.cssClass) : otherTag.cssClass != null) {",
        "fixed_code": "if ((cssClass != null) ? !cssClass.equals(otherTag.cssClass) : (otherTag.cssClass != null)) {",
        "patch": "@@ -59,7 +59,7 @@ private boolean compareTo(OpeningHtmlTag otherTag) {\n     if (startOffset != otherTag.startOffset) {\n       return false;\n     }\n-    if (cssClass != null ? !cssClass.equals(otherTag.cssClass) : otherTag.cssClass != null) {\n+    if ((cssClass != null) ? !cssClass.equals(otherTag.cssClass) : (otherTag.cssClass != null)) {\n       return false;\n     }\n     return true;"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "this.userHome = (path == null ? null : new File(path));",
        "fixed_code": "this.userHome = (path == null) ? null : new File(path);",
        "patch": "@@ -37,7 +37,7 @@ public FileCacheBuilder setUserHome(File d) {\n   }\n \n   public FileCacheBuilder setUserHome(@Nullable String path) {\n-    this.userHome = (path == null ? null : new File(path));\n+    this.userHome = (path == null) ? null : new File(path);\n     return this;\n   }\n "
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "supportedLanguages = (languages != null) ? languages : new String[0];",
        "fixed_code": "supportedLanguages = ((languages != null) ? languages : new String[0]);",
        "patch": "@@ -64,7 +64,7 @@ public final ProfileImporter setName(String s) {\n   }\n \n   protected final ProfileImporter setSupportedLanguages(String... languages) {\n-    supportedLanguages = (languages != null) ? languages : new String[0];\n+    supportedLanguages = ((languages != null) ? languages : new String[0]);\n     return this;\n   }\n "
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "entryName += '/';",
        "fixed_code": "entryName += \"/\";",
        "patch": "@@ -174,7 +174,7 @@ private static void doZip(String entryName, InputStream in, ZipOutputStream out)\n \n   private static void doZip(String entryName, File file, ZipOutputStream out) throws IOException {\n     if (file.isDirectory()) {\n-      entryName += '/';\n+      entryName += \"/\";\n       ZipEntry entry = new ZipEntry(entryName);\n       out.putNextEntry(entry);\n       out.closeEntry();"
    },
    {
        "commit_id": "c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5bd5ad0ae4124f42818dfaf4eca2adc8c34423e",
        "buggy_code": "this.switchMode = (b ? SwitchMode.OFF : SwitchMode.ON);",
        "fixed_code": "this.switchMode = b ? SwitchMode.OFF : SwitchMode.ON;",
        "patch": "@@ -60,7 +60,7 @@ public static ViolationQuery create() {\n    * @return the current violation query\n    */\n   public ViolationQuery setSwitchedOff(boolean b) {\n-    this.switchMode = (b ? SwitchMode.OFF : SwitchMode.ON);\n+    this.switchMode = b ? SwitchMode.OFF : SwitchMode.ON;\n     return this;\n   }\n "
    },
    {
        "commit_id": "501289ca85e1c8dd21d5e0ba5f457b40ee62f5ef",
        "commit_message": "Quality flaws\n\n- do not declare multiple variables on same line\n- fix imports",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/501289ca85e1c8dd21d5e0ba5f457b40ee62f5ef",
        "buggy_code": "static HttpsTrust INSTANCE = new HttpsTrust(new Ssl());",
        "fixed_code": "static final HttpsTrust INSTANCE = new HttpsTrust(new Ssl());",
        "patch": "@@ -37,7 +37,7 @@\n  */\n class HttpsTrust {\n \n-  static HttpsTrust INSTANCE = new HttpsTrust(new Ssl());\n+  static final HttpsTrust INSTANCE = new HttpsTrust(new Ssl());\n \n   static class Ssl {\n     SSLSocketFactory newFactory(TrustManager... managers) throws NoSuchAlgorithmException, KeyManagementException {"
    },
    {
        "commit_id": "d9b79fab67740d8e637838b210ec36e5da05ba07",
        "commit_message": "fix quality flaw (unnecessary boxing)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9b79fab67740d8e637838b210ec36e5da05ba07",
        "buggy_code": "return new Double(measure.getDoubleValue()).longValue();",
        "fixed_code": "return (long) measure.getDoubleValue();",
        "patch": "@@ -164,7 +164,7 @@ private static long getLongValue(Measure measure) {\n       case LONG:\n         return measure.getLongValue();\n       case DOUBLE:\n-        return new Double(measure.getDoubleValue()).longValue();\n+        return (long) measure.getDoubleValue();\n       default:\n         return 0L;\n     }"
    },
    {
        "commit_id": "3630f86f9aaa8edaf7b5ee84d1f858da5dd2b01b",
        "commit_message": "Fix lock on windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3630f86f9aaa8edaf7b5ee84d1f858da5dd2b01b",
        "buggy_code": "FileUtils.deleteDirectory(root);",
        "fixed_code": "FileUtils.deleteQuietly(root);",
        "patch": "@@ -103,7 +103,7 @@ public void testReconfigure() throws Exception {\n     assertCacheHit(false);\n \n     File root = tmp.getRoot();\n-    FileUtils.deleteDirectory(root);\n+    FileUtils.deleteQuietly(root);\n \n     // should re-create cache directory and start using the cache\n     cache.reconfigure(false);"
    },
    {
        "commit_id": "20589b0579adb0c86f74aad19962b84b4a8901bd",
        "commit_message": "SONAR-6610 ws custom_measures/create add user and correct date in response\n\n- only project and module are allowed\n- add user in response\n- set created_at and updated_at field in db and response\n- update several error message to make them clearer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/20589b0579adb0c86f74aad19962b84b4a8901bd",
        "buggy_code": "throw new IllegalArgumentException(String.format(\"Ill formatted value '%s' for metric type '%s'\", valueAsString, metricType.description()), e);",
        "fixed_code": "throw new IllegalArgumentException(String.format(\"Incorrect value '%s' for metric type '%s'\", valueAsString, metricType.description()), e);",
        "patch": "@@ -66,7 +66,7 @@ public void setMeasureValue(CustomMeasureDto measure, String valueAsString, Metr\n           throw new IllegalArgumentException(\"Unsupported metric type:\" + metricType.description());\n       }\n     } catch (Exception e) {\n-      throw new IllegalArgumentException(String.format(\"Ill formatted value '%s' for metric type '%s'\", valueAsString, metricType.description()), e);\n+      throw new IllegalArgumentException(String.format(\"Incorrect value '%s' for metric type '%s'\", valueAsString, metricType.description()), e);\n     }\n \n   }"
    },
    {
        "commit_id": "8b38a0ea417b681ef2553ba29870fa5933908007",
        "commit_message": "Fix test PersistentCache",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8b38a0ea417b681ef2553ba29870fa5933908007",
        "buggy_code": "FileUtils.deleteDirectory(root);",
        "fixed_code": "FileUtils.deleteQuietly(root);",
        "patch": "@@ -103,7 +103,7 @@ public void testReconfigure() throws Exception {\n     assertCacheHit(false);\n \n     File root = tmp.getRoot();\n-    FileUtils.deleteDirectory(root);\n+    FileUtils.deleteQuietly(root);\n \n     // should re-create cache directory and start using the cache\n     cache.reconfigure(false);"
    },
    {
        "commit_id": "34f120e8723a1746305f591b642a85e186b40602",
        "commit_message": "fix various quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/34f120e8723a1746305f591b642a85e186b40602",
        "buggy_code": "private void checkValueTypeConsistency(Metric metric, Measure measure) {",
        "fixed_code": "private static void checkValueTypeConsistency(Metric metric, Measure measure) {",
        "patch": "@@ -146,7 +146,7 @@ public void update(Component component, Metric metric, Measure measure) {\n     addLocal(component, metric, measure, OverridePolicy.OVERRIDE);\n   }\n \n-  private void checkValueTypeConsistency(Metric metric, Measure measure) {\n+  private static void checkValueTypeConsistency(Metric metric, Measure measure) {\n     checkArgument(\n       measure.getValueType() == Measure.ValueType.NO_VALUE || measure.getValueType() == metric.getType().getValueType(),\n       format("
    },
    {
        "commit_id": "34f120e8723a1746305f591b642a85e186b40602",
        "commit_message": "fix various quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/34f120e8723a1746305f591b642a85e186b40602",
        "buggy_code": "private JsonObject toJson(EvaluatedCondition evaluatedCondition) {",
        "fixed_code": "private static JsonObject toJson(EvaluatedCondition evaluatedCondition) {",
        "patch": "@@ -52,7 +52,7 @@ public String toJson() {\n     return details.toString();\n   }\n \n-  private JsonObject toJson(EvaluatedCondition evaluatedCondition) {\n+  private static JsonObject toJson(EvaluatedCondition evaluatedCondition) {\n     Condition condition = evaluatedCondition.getCondition();\n \n     JsonObject result = new JsonObject();"
    },
    {
        "commit_id": "44f9112e5cf4573fafbac8766d07d49624cfbf18",
        "commit_message": "fix level of conditions in JSON of QualityGateDetails measure",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44f9112e5cf4573fafbac8766d07d49624cfbf18",
        "buggy_code": "result.addProperty(FIELD_LEVEL, level.toString());",
        "fixed_code": "result.addProperty(FIELD_LEVEL, evaluatedCondition.getLevel().name());",
        "patch": "@@ -68,7 +68,7 @@ private JsonObject toJson(EvaluatedCondition evaluatedCondition) {\n       result.addProperty(\"error\", condition.getErrorThreshold());\n     }\n     result.addProperty(\"actual\", evaluatedCondition.getActualValue());\n-    result.addProperty(FIELD_LEVEL, level.toString());\n+    result.addProperty(FIELD_LEVEL, evaluatedCondition.getLevel().name());\n     return result;\n   }\n "
    },
    {
        "commit_id": "1eb94e56649b47cfd4e14d7448fbdd380b0bf1f4",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1eb94e56649b47cfd4e14d7448fbdd380b0bf1f4",
        "buggy_code": "private void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String> desiredFields) {",
        "fixed_code": "private static void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String> desiredFields) {",
        "patch": "@@ -110,7 +110,7 @@ private Set<String> desiredFields(@Nullable List<String> fields) {\n     return newHashSet(fields);\n   }\n \n-  private void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String> desiredFields) {\n+  private static void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String> desiredFields) {\n     json.name(\"metrics\");\n     json.beginArray();\n     for (MetricDto metric : metrics) {"
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "private void configureLogbackAccess(Tomcat tomcat, Props props) {",
        "fixed_code": "private static void configureLogbackAccess(Tomcat tomcat, Props props) {",
        "patch": "@@ -40,7 +40,7 @@ void configure(Tomcat tomcat, Props props) {\n     configureLogbackAccess(tomcat, props);\n   }\n \n-  private void configureLogbackAccess(Tomcat tomcat, Props props) {\n+  private static void configureLogbackAccess(Tomcat tomcat, Props props) {\n     if (props.valueAsBoolean(PROPERTY_ENABLE, true)) {\n       ProgrammaticLogbackValve valve = new ProgrammaticLogbackValve();\n       LogbackHelper helper = new LogbackHelper();"
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "private ThreadFactory newThreadFactory() {",
        "fixed_code": "private static ThreadFactory newThreadFactory() {",
        "patch": "@@ -89,7 +89,7 @@ public void onServerStart(Server server) {\n     executorService.scheduleAtFixedRate(new ComputationThread(queue, sqContainer, containerFactory), delayForFirstStart, delayBetweenTasks, timeUnit);\n   }\n \n-  private ThreadFactory newThreadFactory() {\n+  private static ThreadFactory newThreadFactory() {\n     return new ThreadFactoryBuilder()\n       .setNameFormat(THREAD_NAME_PREFIX + \"%d\").setPriority(Thread.MIN_PRIORITY).build();\n   }"
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "private Set<Driver> registeredDrivers() {",
        "fixed_code": "private static Set<Driver> registeredDrivers() {",
        "patch": "@@ -59,7 +59,7 @@ public List<String> unregisterDrivers() throws SQLException {\n     return unregisteredNames;\n   }\n \n-  private Set<Driver> registeredDrivers() {\n+  private static Set<Driver> registeredDrivers() {\n     Set<Driver> registeredDrivers = new HashSet<>();\n     Enumeration<Driver> drivers = DriverManager.getDrivers();\n     while (drivers.hasMoreElements()) {"
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "private double calculateCoverage(final long coveredLines, final long lines) {",
        "fixed_code": "private static double calculateCoverage(final long coveredLines, final long lines) {",
        "patch": "@@ -84,7 +84,7 @@ private void computeMeasureForNewCode(DecoratorContext context) {\n     }\n   }\n \n-  private double calculateCoverage(final long coveredLines, final long lines) {\n+  private static double calculateCoverage(final long coveredLines, final long lines) {\n     return (100.0 * coveredLines) / lines;\n   }\n "
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));",
        "fixed_code": "log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");",
        "patch": "@@ -106,7 +106,7 @@ private void renameQuietly(File sourceFile, File targetFile) {\n     // Check if the file was cached by another process during download\n     if (!rename && !targetFile.exists()) {\n       log.warn(String.format(\"Unable to rename %s to %s\", sourceFile.getAbsolutePath(), targetFile.getAbsolutePath()));\n-      log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));\n+      log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");\n       try {\n         Files.move(sourceFile.toPath(), targetFile.toPath());\n       } catch (IOException e) {"
    },
    {
        "commit_id": "71e022071f6b244422f74580ec3c04179695a3ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e022071f6b244422f74580ec3c04179695a3ea",
        "buggy_code": "return !(key != null ? !key.equals(that.getKey()) : that.getKey() != null);",
        "fixed_code": "return !((key != null) ? !key.equals(that.getKey()) : (that.getKey() != null));",
        "patch": "@@ -621,7 +621,7 @@ public boolean equals(Object o) {\n     }\n     ProjectDefinition that = (ProjectDefinition) o;\n     String key = getKey();\n-    return !(key != null ? !key.equals(that.getKey()) : that.getKey() != null);\n+    return !((key != null) ? !key.equals(that.getKey()) : (that.getKey() != null));\n \n   }\n "
    },
    {
        "commit_id": "44447ed6b69b1497ed60cc4d610742a5d9987873",
        "commit_message": "Fix Q flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44447ed6b69b1497ed60cc4d610742a5d9987873",
        "buggy_code": "plot.setSectionPaint(\"\" + i, COLORS[i]);",
        "fixed_code": "plot.setSectionPaint(Integer.toString(i), COLORS[i]);",
        "patch": "@@ -93,7 +93,7 @@ private void configureColors(String colors) {\n   private void configureDefaultColors() {\n     PiePlot plot = (PiePlot) jfreechart.getPlot();\n     for (int i=0 ; i<COLORS.length ; i++) {\n-      plot.setSectionPaint(\"\" + i, COLORS[i]);\n+      plot.setSectionPaint(Integer.toString(i), COLORS[i]);\n     }\n   }\n "
    },
    {
        "commit_id": "44447ed6b69b1497ed60cc4d610742a5d9987873",
        "commit_message": "Fix Q flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44447ed6b69b1497ed60cc4d610742a5d9987873",
        "buggy_code": "return shouldResultBeInPercent ? result * 100 : result;",
        "fixed_code": "return shouldResultBeInPercent ? (result * 100) : result;",
        "patch": "@@ -88,7 +88,7 @@ protected boolean shouldDecorateResource(DecoratorContext context) {\n \n   protected double compute(Measure dividend, Measure divisor, boolean shouldResultBeInPercent) {\n     double result = dividend.getValue() / divisor.getValue();\n-    return shouldResultBeInPercent ? result * 100 : result;\n+    return shouldResultBeInPercent ? (result * 100) : result;\n   }\n \n }"
    },
    {
        "commit_id": "44447ed6b69b1497ed60cc4d610742a5d9987873",
        "commit_message": "Fix Q flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44447ed6b69b1497ed60cc4d610742a5d9987873",
        "buggy_code": "return new Measure(context.getTargetMetric(), count==0 ? 0.0 : sum/count);",
        "fixed_code": "return new Measure(context.getTargetMetric(), (count==0) ? 0.0 : (sum/count));",
        "patch": "@@ -60,6 +60,6 @@ public Measure calculate(FormulaData data, FormulaContext context) {\n     if (!hasValue && !forceZeroIfMissingData) {\n       return null;\n     }\n-    return new Measure(context.getTargetMetric(), count==0 ? 0.0 : sum/count);\n+    return new Measure(context.getTargetMetric(), (count==0) ? 0.0 : (sum/count));\n   }\n }"
    },
    {
        "commit_id": "44447ed6b69b1497ed60cc4d610742a5d9987873",
        "commit_message": "Fix Q flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44447ed6b69b1497ed60cc4d610742a5d9987873",
        "buggy_code": "double result = Double.doubleToRawLongBits(count)==0L ? 0.0 : sum/count;",
        "fixed_code": "double result = (Double.doubleToRawLongBits(count)==0L) ? 0.0 : (sum/count);",
        "patch": "@@ -63,7 +63,7 @@ public Measure calculate(FormulaData data, FormulaContext context) {\n       return null;\n     }\n \n-    double result = Double.doubleToRawLongBits(count)==0L ? 0.0 : sum/count;\n+    double result = (Double.doubleToRawLongBits(count)==0L) ? 0.0 : (sum/count);\n     return new Measure(context.getTargetMetric(), result);\n   }\n }"
    },
    {
        "commit_id": "95314e58decc1185afc29a1428cac374a935d8fb",
        "commit_message": "SONAR-6582 Fix reporter serialization in issues search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/95314e58decc1185afc29a1428cac374a935d8fb",
        "buggy_code": ".setParam(\"extra_fields\", \"actions,transitions,reporterName,actionPlanName\").execute();",
        "fixed_code": ".setParam(\"extra_fields\", \"actions,transitions,actionPlanName\").execute();",
        "patch": "@@ -273,7 +273,7 @@ public void issue_with_extra_fields() throws Exception {\n \n     userSessionRule.login(\"john\");\n     WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)\n-      .setParam(\"extra_fields\", \"actions,transitions,reporterName,actionPlanName\").execute();\n+      .setParam(\"extra_fields\", \"actions,transitions,actionPlanName\").execute();\n     result.assertJson(this.getClass(), \"issue_with_extra_fields.json\");\n   }\n "
    },
    {
        "commit_id": "51f9e345101fc78a78168e98fdebc61d0575ac57",
        "commit_message": "fix quality flaws\n\n- add static inner class\n- make methods static\n- declare one field by line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f9e345101fc78a78168e98fdebc61d0575ac57",
        "buggy_code": "private boolean hasNotProjectScope(ComponentDto project) {",
        "fixed_code": "private static boolean hasNotProjectScope(ComponentDto project) {",
        "patch": "@@ -90,7 +90,7 @@ private void deleteFromIndices(String projectUuid) {\n     testIndexer.deleteByProject(projectUuid);\n   }\n \n-  private boolean hasNotProjectScope(ComponentDto project) {\n+  private static boolean hasNotProjectScope(ComponentDto project) {\n     return !Scopes.PROJECT.equals(project.scope());\n   }\n "
    },
    {
        "commit_id": "51f9e345101fc78a78168e98fdebc61d0575ac57",
        "commit_message": "fix quality flaws\n\n- add static inner class\n- make methods static\n- declare one field by line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f9e345101fc78a78168e98fdebc61d0575ac57",
        "buggy_code": "private void genericAppendOfMetric(Metric metric, String label, StringBuilder message, Notification notification) {",
        "fixed_code": "private static void genericAppendOfMetric(Metric metric, String label, StringBuilder message, Notification notification) {",
        "patch": "@@ -105,7 +105,7 @@ private static boolean doNotHaveValue(Notification notification, Metric metric)\n     return notification.getFieldValue(metric + DOT + \"1\" + LABEL) == null;\n   }\n \n-  private void genericAppendOfMetric(Metric metric, String label, StringBuilder message, Notification notification) {\n+  private static void genericAppendOfMetric(Metric metric, String label, StringBuilder message, Notification notification) {\n     if (doNotHaveValue(notification, metric)) {\n       return;\n     }"
    },
    {
        "commit_id": "51f9e345101fc78a78168e98fdebc61d0575ac57",
        "commit_message": "fix quality flaws\n\n- add static inner class\n- make methods static\n- declare one field by line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f9e345101fc78a78168e98fdebc61d0575ac57",
        "buggy_code": "private void writeType(JsonWriter json, String typeKey, Set<String> desiredFields) {",
        "fixed_code": "private static void writeType(JsonWriter json, String typeKey, Set<String> desiredFields) {",
        "patch": "@@ -126,7 +126,7 @@ private void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String>\n     json.endArray();\n   }\n \n-  private void writeType(JsonWriter json, String typeKey, Set<String> desiredFields) {\n+  private static void writeType(JsonWriter json, String typeKey, Set<String> desiredFields) {\n     if (desiredFields.contains(FIELD_TYPE)) {\n       json.name(FIELD_TYPE);\n       json.beginObject();"
    },
    {
        "commit_id": "51f9e345101fc78a78168e98fdebc61d0575ac57",
        "commit_message": "fix quality flaws\n\n- add static inner class\n- make methods static\n- declare one field by line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f9e345101fc78a78168e98fdebc61d0575ac57",
        "buggy_code": "private void writeProjects(JsonWriter json, List<ComponentDto> projects, Set<String> fieldsToReturn) {",
        "fixed_code": "private static void writeProjects(JsonWriter json, List<ComponentDto> projects, Set<String> fieldsToReturn) {",
        "patch": "@@ -89,7 +89,7 @@ public void handle(Request request, Response response) throws Exception {\n     }\n   }\n \n-  private void writeProjects(JsonWriter json, List<ComponentDto> projects, Set<String> fieldsToReturn) {\n+  private static void writeProjects(JsonWriter json, List<ComponentDto> projects, Set<String> fieldsToReturn) {\n     json.name(\"projects\");\n     json.beginArray();\n     for (ComponentDto project : projects) {"
    },
    {
        "commit_id": "51f9e345101fc78a78168e98fdebc61d0575ac57",
        "commit_message": "fix quality flaws\n\n- add static inner class\n- make methods static\n- declare one field by line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51f9e345101fc78a78168e98fdebc61d0575ac57",
        "buggy_code": "private void deleteProject(IdUuidPair rootProjectId, PurgeMapper mapper, PurgeCommands commands) {",
        "fixed_code": "private static void deleteProject(IdUuidPair rootProjectId, PurgeMapper mapper, PurgeCommands commands) {",
        "patch": "@@ -190,7 +190,7 @@ private static void deleteFileSources(String rootUuid, PurgeCommands commands) {\n     commands.deleteFileSources(rootUuid);\n   }\n \n-  private void deleteProject(IdUuidPair rootProjectId, PurgeMapper mapper, PurgeCommands commands) {\n+  private static void deleteProject(IdUuidPair rootProjectId, PurgeMapper mapper, PurgeCommands commands) {\n     List<IdUuidPair> childrenIdUuid = mapper.selectProjectIdUuidsByRootId(rootProjectId.getId());\n     for (IdUuidPair childId : childrenIdUuid) {\n       deleteProject(childId, mapper, commands);"
    },
    {
        "commit_id": "7cff3b0b66694aea1186d33816882fc5c3ce8fe9",
        "commit_message": "Revert \"Fix quality flaws\"\n\nThis reverts commit 47bad47ae07d3ffc895f3e76261d637073c57981 which breaks the compiltation of SQ",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7cff3b0b66694aea1186d33816882fc5c3ce8fe9",
        "buggy_code": "log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");",
        "fixed_code": "log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));",
        "patch": "@@ -106,7 +106,7 @@ private void renameQuietly(File sourceFile, File targetFile) {\n     // Check if the file was cached by another process during download\n     if (!rename && !targetFile.exists()) {\n       log.warn(String.format(\"Unable to rename %s to %s\", sourceFile.getAbsolutePath(), targetFile.getAbsolutePath()));\n-      log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");\n+      log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));\n       try {\n         Files.move(sourceFile.toPath(), targetFile.toPath());\n       } catch (IOException e) {"
    },
    {
        "commit_id": "47bad47ae07d3ffc895f3e76261d637073c57981",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/47bad47ae07d3ffc895f3e76261d637073c57981",
        "buggy_code": "log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));",
        "fixed_code": "log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");",
        "patch": "@@ -106,7 +106,7 @@ private void renameQuietly(File sourceFile, File targetFile) {\n     // Check if the file was cached by another process during download\n     if (!rename && !targetFile.exists()) {\n       log.warn(String.format(\"Unable to rename %s to %s\", sourceFile.getAbsolutePath(), targetFile.getAbsolutePath()));\n-      log.warn(String.format(\"A copy/delete will be tempted but with no garantee of atomicity\"));\n+      log.warn(\"A copy/delete will be tempted but with no guarantee of atomicity\");\n       try {\n         Files.move(sourceFile.toPath(), targetFile.toPath());\n       } catch (IOException e) {"
    },
    {
        "commit_id": "5df799013fe35f29ae369e8ae35a7bbc8ba07218",
        "commit_message": "SONAR-6582 Extract issue serialization class\n\nUse common issue JSON representation for most actions on issues.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5df799013fe35f29ae369e8ae35a7bbc8ba07218",
        "buggy_code": ".setParam(\"extra_fields\", \"actions,transitions,assigneeName,reporterName,actionPlanName\").execute();",
        "fixed_code": ".setParam(\"extra_fields\", \"actions,transitions,reporterName,actionPlanName\").execute();",
        "patch": "@@ -273,7 +273,7 @@ public void issue_with_extra_fields() throws Exception {\n \n     userSessionRule.login(\"john\");\n     WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)\n-      .setParam(\"extra_fields\", \"actions,transitions,assigneeName,reporterName,actionPlanName\").execute();\n+      .setParam(\"extra_fields\", \"actions,transitions,reporterName,actionPlanName\").execute();\n     result.assertJson(this.getClass(), \"issue_with_extra_fields.json\");\n   }\n "
    },
    {
        "commit_id": "4b866dabfe44891fc40362de199110a3647f6067",
        "commit_message": "fix minor quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4b866dabfe44891fc40362de199110a3647f6067",
        "buggy_code": "long qualityGateId = Long.valueOf(qualityGateSetting.trim());",
        "fixed_code": "long qualityGateId = Long.parseLong(qualityGateSetting.trim());",
        "patch": "@@ -82,7 +82,7 @@ private void executeForProject(Component project) {\n     }\n \n     try {\n-      long qualityGateId = Long.valueOf(qualityGateSetting.trim());\n+      long qualityGateId = Long.parseLong(qualityGateSetting.trim());\n       qualityGateHolder.setQualityGate(qualityGateService.findById(qualityGateId).or(DEFAULT_QUALITY_GATE));\n     } catch (NumberFormatException e) {\n       LOGGER.error(String.format(\"Unsupported value in property %s, using empty Quality Gate\", PROPERTY_QUALITY_GATE));"
    },
    {
        "commit_id": "3491304c33660a71c9dd90827b1b2e1b3a0b47a7",
        "commit_message": "fix minor flaws in Characteristic class",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3491304c33660a71c9dd90827b1b2e1b3a0b47a7",
        "buggy_code": "assertThat(new Characteristic(1, \"PORTABILITY\").toString()).isEqualTo(\"CharacteristicImpl{id=1, key='PORTABILITY'}\");",
        "fixed_code": "assertThat(new Characteristic(1, \"PORTABILITY\").toString()).isEqualTo(\"Characteristic{id=1, key='PORTABILITY'}\");",
        "patch": "@@ -40,7 +40,7 @@ public void test_getter_and_setter() throws Exception {\n \n   @Test\n   public void test_to_string() throws Exception {\n-    assertThat(new Characteristic(1, \"PORTABILITY\").toString()).isEqualTo(\"CharacteristicImpl{id=1, key='PORTABILITY'}\");\n+    assertThat(new Characteristic(1, \"PORTABILITY\").toString()).isEqualTo(\"Characteristic{id=1, key='PORTABILITY'}\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void processRule(RuleDebt rule, StringBuilder xml) {",
        "fixed_code": "private static void processRule(RuleDebt rule, StringBuilder xml) {",
        "patch": "@@ -109,7 +109,7 @@ private void processCharacteristic(DebtModel debtModel, DebtCharacteristic chara\n     xml.append(\"</\" + CHARACTERISTIC + \">\");\n   }\n \n-  private void processRule(RuleDebt rule, StringBuilder xml) {\n+  private static void processRule(RuleDebt rule, StringBuilder xml) {\n     xml.append(\"<\" + CHARACTERISTIC + \">\");\n     xml.append(\"<\" + REPOSITORY_KEY + \">\");\n     xml.append(StringEscapeUtils.escapeXml(rule.ruleKey().repository()));"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private RuleDebt createRule(RuleKey ruleKey, Properties properties, ValidationMessages validationMessages) {",
        "fixed_code": "private static RuleDebt createRule(RuleKey ruleKey, Properties properties, ValidationMessages validationMessages) {",
        "patch": "@@ -166,7 +166,7 @@ private static Property processProperty(ValidationMessages validationMessages, S\n   }\n \n   @CheckForNull\n-  private RuleDebt createRule(RuleKey ruleKey, Properties properties, ValidationMessages validationMessages) {\n+  private static RuleDebt createRule(RuleKey ruleKey, Properties properties, ValidationMessages validationMessages) {\n     Property function = properties.function();\n     if (function != null) {\n "
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void writeDuplications(List<DuplicationsParser.Block> blocks, Map<String, String> refByComponentKey, JsonWriter json) {",
        "fixed_code": "private static void writeDuplications(List<DuplicationsParser.Block> blocks, Map<String, String> refByComponentKey, JsonWriter json) {",
        "patch": "@@ -53,7 +53,7 @@ void write(List<DuplicationsParser.Block> blocks, JsonWriter json, DbSession ses\n     json.endObject();\n   }\n \n-  private void writeDuplications(List<DuplicationsParser.Block> blocks, Map<String, String> refByComponentKey, JsonWriter json) {\n+  private static void writeDuplications(List<DuplicationsParser.Block> blocks, Map<String, String> refByComponentKey, JsonWriter json) {\n     for (DuplicationsParser.Block block : blocks) {\n       json.beginObject().name(\"blocks\").beginArray();\n       for (DuplicationsParser.Duplication duplication : block.duplications()) {"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void defineRailsActions(NewController controller) {",
        "fixed_code": "private static void defineRailsActions(NewController controller) {",
        "patch": "@@ -60,7 +60,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineRailsActions(NewController controller) {\n+  private static void defineRailsActions(NewController controller) {\n     defineChangelogAction(controller);\n     defineAssignAction(controller);\n     defineAddCommentAction(controller);"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private UserWithPermissionQueryResult toUserQueryResult(List<UserWithPermissionDto> dtos, int limit) {",
        "fixed_code": "private static UserWithPermissionQueryResult toUserQueryResult(List<UserWithPermissionDto> dtos, int limit) {",
        "patch": "@@ -85,7 +85,7 @@ public GroupWithPermissionQueryResult findGroupsWithPermissionTemplate(Permissio\n     return toGroupQueryResult(permissionTemplateDao.selectGroups(query, permissionTemplateId), query);\n   }\n \n-  private UserWithPermissionQueryResult toUserQueryResult(List<UserWithPermissionDto> dtos, int limit) {\n+  private static UserWithPermissionQueryResult toUserQueryResult(List<UserWithPermissionDto> dtos, int limit) {\n     boolean hasMoreResults = false;\n     if (dtos.size() == limit) {\n       hasMoreResults = true;"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void addLine(List<String> decoratedHtmlLines, String line, int currentLine, @Nullable Integer from, @Nullable Integer to) {",
        "fixed_code": "private static void addLine(List<String> decoratedHtmlLines, String line, int currentLine, @Nullable Integer from, @Nullable Integer to) {",
        "patch": "@@ -119,7 +119,7 @@ private void addCharToCurrentLine(CharactersReader charsReader, StringBuilder cu\n     }\n   }\n \n-  private void addLine(List<String> decoratedHtmlLines, String line, int currentLine, @Nullable Integer from, @Nullable Integer to) {\n+  private static void addLine(List<String> decoratedHtmlLines, String line, int currentLine, @Nullable Integer from, @Nullable Integer to) {\n     if (canAddLine(currentLine, from) && !shouldStop(currentLine, to)) {\n       decoratedHtmlLines.add(line);\n     }"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private GroupMembershipQuery parseQuery(Map<String, Object> params) {",
        "fixed_code": "private static GroupMembershipQuery parseQuery(Map<String, Object> params) {",
        "patch": "@@ -44,7 +44,7 @@ public GroupMembershipFinder.Membership find(Map<String, Object> params) {\n     return finder.find(parseQuery(params));\n   }\n \n-  private GroupMembershipQuery parseQuery(Map<String, Object> params) {\n+  private static GroupMembershipQuery parseQuery(Map<String, Object> params) {\n     GroupMembershipQuery.Builder builder = GroupMembershipQuery.builder();\n     builder.membership(membership(params));\n     builder.groupSearch((String) params.get(\"query\"));"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private long doIndex(BulkIndexer bulk, Iterator<UserDoc> users) {",
        "fixed_code": "private static long doIndex(BulkIndexer bulk, Iterator<UserDoc> users) {",
        "patch": "@@ -58,7 +58,7 @@ protected long doIndex(long lastUpdatedAt) {\n     }\n   }\n \n-  private long doIndex(BulkIndexer bulk, Iterator<UserDoc> users) {\n+  private static long doIndex(BulkIndexer bulk, Iterator<UserDoc> users) {\n     long maxUpdatedAt = 0L;\n     bulk.start();\n     while (users.hasNext()) {"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void writeUser(JsonWriter json, UserDoc user) {",
        "fixed_code": "private static void writeUser(JsonWriter json, UserDoc user) {",
        "patch": "@@ -115,7 +115,7 @@ private void writeResponse(Response response, String login, boolean isUserReacti\n     json.endObject().close();\n   }\n \n-  private void writeUser(JsonWriter json, UserDoc user) {\n+  private static void writeUser(JsonWriter json, UserDoc user) {\n     json.name(\"user\").beginObject()\n       .prop(\"login\", user.login())\n       .prop(\"name\", user.name())"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private void saveIssuesPerRules(DecoratorContext context, RulePriority severity, Map<RulePriority, Multiset<RuleKey>> rulesPerSeverity) {",
        "fixed_code": "private static void saveIssuesPerRules(DecoratorContext context, RulePriority severity, Map<RulePriority, Multiset<RuleKey>> rulesPerSeverity) {",
        "patch": "@@ -178,7 +178,7 @@ private void saveNewIssuesForSeverity(DecoratorContext context, RulePriority sev\n     }\n   }\n \n-  private void saveIssuesPerRules(DecoratorContext context, RulePriority severity, Map<RulePriority, Multiset<RuleKey>> rulesPerSeverity) {\n+  private static void saveIssuesPerRules(DecoratorContext context, RulePriority severity, Map<RulePriority, Multiset<RuleKey>> rulesPerSeverity) {\n     Metric metric = SeverityUtils.severityToIssueMetric(severity);\n \n     Collection<Measure> children = context.getChildrenMeasures(MeasuresFilters.rules(metric));"
    },
    {
        "commit_id": "0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ace9fe008ae66ca0899827556f1d45fdfeb18c5",
        "buggy_code": "private boolean shouldSaveMeasure(DecoratorContext context) {",
        "fixed_code": "private static boolean shouldSaveMeasure(DecoratorContext context) {",
        "patch": "@@ -188,7 +188,7 @@ private static void saveMeasure(DecoratorContext context, Measure measure, Doubl\n     context.saveMeasure(measure);\n   }\n \n-  private boolean shouldSaveMeasure(DecoratorContext context) {\n+  private static boolean shouldSaveMeasure(DecoratorContext context) {\n     return context.getMeasure(CoreMetrics.TECHNICAL_DEBT) == null;\n   }\n "
    },
    {
        "commit_id": "9a4d88a0ff796a50040f30e23b9842abe3b0bf43",
        "commit_message": "fix QualityGateServiceImpl: QualityGateConditionDto has only metricId\n\nand no metricKey has was initially assumed by the implementation of QualityGateServiceImpl,",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a4d88a0ff796a50040f30e23b9842abe3b0bf43",
        "buggy_code": "Metric metric = metricRepository.getByKey(input.getMetricKey());",
        "fixed_code": "Metric metric = metricRepository.getById(input.getMetricId());",
        "patch": "@@ -43,7 +43,7 @@ public QualityGateServiceImpl(QualityGateDao qualityGateDao, QualityGateConditio\n       @Override\n       @Nonnull\n       public Condition apply(@Nonnull QualityGateConditionDto input) {\n-        Metric metric = metricRepository.getByKey(input.getMetricKey());\n+        Metric metric = metricRepository.getById(input.getMetricId());\n         return new Condition(metric, input.getPeriod(), input.getOperator(), input.getErrorThreshold(), input.getWarningThreshold());\n       }\n     };"
    },
    {
        "commit_id": "169d0f087b1d551567e2a0211749ada67b15a319",
        "commit_message": "fix CustomMeasureTesting to generate alpha numeric characters only",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/169d0f087b1d551567e2a0211749ada67b15a319",
        "buggy_code": ".setComponentUuid(RandomStringUtils.random(50))",
        "fixed_code": ".setComponentUuid(RandomStringUtils.randomAlphanumeric(50))",
        "patch": "@@ -38,7 +38,7 @@ public static CustomMeasureDto newCustomMeasureDto() {\n       .setValue(RandomUtils.nextDouble())\n       .setMetricId(RandomUtils.nextInt())\n       .setComponentId(RandomUtils.nextInt())\n-      .setComponentUuid(RandomStringUtils.random(50))\n+      .setComponentUuid(RandomStringUtils.randomAlphanumeric(50))\n       .setCreatedAt(System2.INSTANCE.now())\n       .setUpdatedAt(System2.INSTANCE.now());\n   }"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private MeasureDto setData(BatchReport.Measure in, MeasureDto out) {",
        "fixed_code": "private static MeasureDto setData(BatchReport.Measure in, MeasureDto out) {",
        "patch": "@@ -138,7 +138,7 @@ MeasureDto toMeasureDto(BatchReport.Measure in, long componentId, long snapshotI\n     return out;\n   }\n \n-  private MeasureDto setData(BatchReport.Measure in, MeasureDto out) {\n+  private static MeasureDto setData(BatchReport.Measure in, MeasureDto out) {\n     if (in.hasStringValue()) {\n       out.setData(in.getStringValue());\n     }"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private void writeReports(List<AnalysisReportDto> reports, JsonWriter json) {",
        "fixed_code": "private static void writeReports(List<AnalysisReportDto> reports, JsonWriter json) {",
        "patch": "@@ -61,7 +61,7 @@ public void handle(Request request, Response response) throws Exception {\n     json.close();\n   }\n \n-  private void writeReports(List<AnalysisReportDto> reports, JsonWriter json) {\n+  private static void writeReports(List<AnalysisReportDto> reports, JsonWriter json) {\n     json.name(\"reports\").beginArray();\n     for (AnalysisReportDto report : reports) {\n       json.beginObject();"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private String projectName(ComponentDto project) {",
        "fixed_code": "private static String projectName(ComponentDto project) {",
        "patch": "@@ -191,7 +191,7 @@ private void addComponents(DbSession session, Issue issue, JsonWriter json) {\n       .prop(\"subProjectName\", parentProjectName);\n   }\n \n-  private String projectName(ComponentDto project) {\n+  private static String projectName(ComponentDto project) {\n     return project.longName() != null ? project.longName() : project.name();\n   }\n "
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private void writeDomains(JsonWriter json, List<String> domains) {",
        "fixed_code": "private static void writeDomains(JsonWriter json, List<String> domains) {",
        "patch": "@@ -62,7 +62,7 @@ public void handle(Request request, Response response) throws Exception {\n     }\n   }\n \n-  private void writeDomains(JsonWriter json, List<String> domains) {\n+  private static void writeDomains(JsonWriter json, List<String> domains) {\n     json.name(\"domains\");\n     json.beginArray();\n     json.values(domains);"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private void writeIfDesired(JsonWriter json, String field, String value, Set<String> desiredFields) {",
        "fixed_code": "private static void writeIfDesired(JsonWriter json, String field, String value, Set<String> desiredFields) {",
        "patch": "@@ -126,7 +126,7 @@ private void writeMetrics(JsonWriter json, List<MetricDto> metrics, Set<String>\n     json.endArray();\n   }\n \n-  private void writeIfDesired(JsonWriter json, String field, String value, Set<String> desiredFields) {\n+  private static void writeIfDesired(JsonWriter json, String field, String value, Set<String> desiredFields) {\n     if (desiredFields.contains(field)) {\n       json.prop(field, value);\n     }"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private void addZeroFacetsForSelectedItems(Request request, String facetName, Set<String> itemsFromFacets, JsonWriter json) {",
        "fixed_code": "private static void addZeroFacetsForSelectedItems(Request request, String facetName, Set<String> itemsFromFacets, JsonWriter json) {",
        "patch": "@@ -424,7 +424,7 @@ protected void mergeNoneAndEmptyBucketOnCharacteristics(Result<?> results) {\n     }\n   }\n \n-  private void addZeroFacetsForSelectedItems(Request request, String facetName, Set<String> itemsFromFacets, JsonWriter json) {\n+  private static void addZeroFacetsForSelectedItems(Request request, String facetName, Set<String> itemsFromFacets, JsonWriter json) {\n     List<String> requestParams = request.paramAsStrings(facetName);\n     if (requestParams != null) {\n       for (String param : requestParams) {"
    },
    {
        "commit_id": "2029453c4933b478ff50d50d31e99d225a783ff6",
        "commit_message": "fix bunch a 'Make 'XXX' a static method' issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2029453c4933b478ff50d50d31e99d225a783ff6",
        "buggy_code": "private void writeTests(List<CoveredFileDoc> coveredFiles, Map<String, ComponentDto> componentsByUuid, JsonWriter json) {",
        "fixed_code": "private static void writeTests(List<CoveredFileDoc> coveredFiles, Map<String, ComponentDto> componentsByUuid, JsonWriter json) {",
        "patch": "@@ -84,7 +84,7 @@ public void handle(Request request, Response response) {\n     json.endObject().close();\n   }\n \n-  private void writeTests(List<CoveredFileDoc> coveredFiles, Map<String, ComponentDto> componentsByUuid, JsonWriter json) {\n+  private static void writeTests(List<CoveredFileDoc> coveredFiles, Map<String, ComponentDto> componentsByUuid, JsonWriter json) {\n     json.name(\"files\").beginArray();\n     for (CoveredFileDoc coveredFile : coveredFiles) {\n       json.beginObject();"
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private void copyGobblerToConsole() {",
        "fixed_code": "private static void copyGobblerToConsole() {",
        "patch": "@@ -60,7 +60,7 @@ LoggerContext configure(Props props) {\n   /**\n    * Enable the copy in console of the logs written in logs/sonar.log\n    */\n-  private void copyGobblerToConsole() {\n+  private static void copyGobblerToConsole() {\n     Logger consoleLogger = (Logger) LoggerFactory.getLogger(CONSOLE_LOGGER);\n     Appender consoleAppender = consoleLogger.getAppender(CONSOLE_APPENDER);\n "
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private void checkRequiredParameter(String url, String val) {",
        "fixed_code": "private static void checkRequiredParameter(String url, String val) {",
        "patch": "@@ -92,7 +92,7 @@ void checkUrlParameters(Provider provider, String url) {\n     }\n   }\n \n-  private void checkRequiredParameter(String url, String val) {\n+  private static void checkRequiredParameter(String url, String val) {\n     if (!url.contains(val)) {\n       throw new MessageException(String.format(\"JDBC URL must have the property '%s'\", val));\n     }"
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private Properties loadPropertiesFile(File homeDir) throws IOException {",
        "fixed_code": "private static Properties loadPropertiesFile(File homeDir) throws IOException {",
        "patch": "@@ -83,7 +83,7 @@ static File detectHomeDir() throws URISyntaxException {\n     return appJar.getParentFile().getParentFile();\n   }\n \n-  private Properties loadPropertiesFile(File homeDir) throws IOException {\n+  private static Properties loadPropertiesFile(File homeDir) throws IOException {\n     Properties p = new Properties();\n     File propsFile = new File(homeDir, \"conf/sonar.properties\");\n     if (propsFile.exists()) {"
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private void checkBufferForISOControlChars(byte[] buffer, int off, int len) {",
        "fixed_code": "private static void checkBufferForISOControlChars(byte[] buffer, int off, int len) {",
        "patch": "@@ -191,7 +191,7 @@ public long skip(long n) throws IOException {\n       return inputToCheck.skip(n);\n     }\n \n-    private void checkBufferForISOControlChars(byte[] buffer, int off, int len) {\n+    private static void checkBufferForISOControlChars(byte[] buffer, int off, int len) {\n       for (int i = off; i < len; i++) {\n         char streamChar = (char) buffer[i];\n         if (Character.isISOControl(streamChar) && streamChar != '\\n') {"
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private IllegalStateException rethrow(Exception e) {",
        "fixed_code": "private static IllegalStateException rethrow(Exception e) {",
        "patch": "@@ -382,7 +382,7 @@ public void close() {\n     }\n   }\n \n-  private IllegalStateException rethrow(Exception e) {\n+  private static IllegalStateException rethrow(Exception e) {\n     // stacktrace is not helpful\n     throw new WriterException(\"Fail to write JSON: \" + e.getMessage());\n   }"
    },
    {
        "commit_id": "42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42bd0823e16c36baf43906be7ed12a5450ac2ff2",
        "buggy_code": "private IllegalStateException rethrow(XMLStreamException e) {",
        "fixed_code": "private static IllegalStateException rethrow(XMLStreamException e) {",
        "patch": "@@ -176,7 +176,7 @@ public void close() {\n     }\n   }\n \n-  private IllegalStateException rethrow(XMLStreamException e) {\n+  private static IllegalStateException rethrow(XMLStreamException e) {\n     // stacktrace is not helpful\n     throw new IllegalStateException(\"Fail to write XML: \" + e.getMessage());\n   }"
    },
    {
        "commit_id": "60098df151efa8203affe6ba047a6ea32947d4f0",
        "commit_message": "SONAR-6370 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/60098df151efa8203affe6ba047a6ea32947d4f0",
        "buggy_code": "String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : emailMessage.getFrom() + \" (SonarQube)\";",
        "fixed_code": "String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : (emailMessage.getFrom() + \" (SonarQube)\");",
        "patch": "@@ -163,7 +163,7 @@ private void send(EmailMessage emailMessage) throws EmailException {\n       }\n       // Set general information\n       email.setCharset(\"UTF-8\");\n-      String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : emailMessage.getFrom() + \" (SonarQube)\";\n+      String from = StringUtils.isBlank(emailMessage.getFrom()) ? FROM_NAME_DEFAULT : (emailMessage.getFrom() + \" (SonarQube)\");\n       email.setFrom(configuration.getFrom(), from);\n       email.addTo(emailMessage.getTo(), \" \");\n       String subject = StringUtils.defaultIfBlank(StringUtils.trimToEmpty(configuration.getPrefix()) + \" \", \"\")"
    },
    {
        "commit_id": "60098df151efa8203affe6ba047a6ea32947d4f0",
        "commit_message": "SONAR-6370 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/60098df151efa8203affe6ba047a6ea32947d4f0",
        "buggy_code": "Assertions.assertThat(predicates.all().apply(javaFile)).isTrue();",
        "fixed_code": "assertThat(predicates.all().apply(javaFile)).isTrue();",
        "patch": "@@ -54,7 +54,7 @@ public void before() throws IOException {\n \n   @Test\n   public void all() {\n-    Assertions.assertThat(predicates.all().apply(javaFile)).isTrue();\n+    assertThat(predicates.all().apply(javaFile)).isTrue();\n   }\n \n   @Test"
    },
    {
        "commit_id": "bfcd3ad81503bc5c1d0024b685cf54d46f11a1d1",
        "commit_message": "fix Benchmark tests after ServerTester optimisation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bfcd3ad81503bc5c1d0024b685cf54d46f11a1d1",
        "buggy_code": "public static ServerTester tester = new ServerTester();",
        "fixed_code": "public static ServerTester tester = new ServerTester().withEsIndexes();",
        "patch": "@@ -61,7 +61,7 @@ public class IssueIndexBenchmarkTest {\n   final static int ISSUES_PER_FILE = 100;\n \n   @ClassRule\n-  public static ServerTester tester = new ServerTester();\n+  public static ServerTester tester = new ServerTester().withEsIndexes();\n   @Rule\n   public UserSessionRule userSessionRule = UserSessionRule.forServerTester(tester);\n "
    },
    {
        "commit_id": "bfcd3ad81503bc5c1d0024b685cf54d46f11a1d1",
        "commit_message": "fix Benchmark tests after ServerTester optimisation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bfcd3ad81503bc5c1d0024b685cf54d46f11a1d1",
        "buggy_code": "public ServerTester tester = new ServerTester();",
        "fixed_code": "public ServerTester tester = new ServerTester().withEsIndexes();",
        "patch": "@@ -50,7 +50,7 @@ public class SourceIndexBenchmarkTest {\n   private static final int LINES_PER_FILE = 3220;\n \n   @Rule\n-  public ServerTester tester = new ServerTester();\n+  public ServerTester tester = new ServerTester().withEsIndexes();\n \n   @Rule\n   public Benchmark benchmark = new Benchmark();"
    },
    {
        "commit_id": "571b9e4665467481ebbd39050f7e4cebedf7f04f",
        "commit_message": "SONAR-6569 fix QG event computation\n\ncomputation was broken because alertStatus and alertText column were not mapped to the MeasureDto",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/571b9e4665467481ebbd39050f7e4cebedf7f04f",
        "buggy_code": "LOGGER.warn(\"Previous alterStatus for project %s is not a supported value. Can not compute Quality Gate event\");",
        "fixed_code": "LOGGER.warn(String.format(\"Previous alterStatus for project %s is not a supported value. Can not compute Quality Gate event\", project.getKey()));",
        "patch": "@@ -77,7 +77,7 @@ private void checkQualityGateStatusChange(Component project, AlertStatus current\n \n     Optional<AlertStatus> previousQGStatus = parse(previousMeasure.get().getAlertStatus());\n     if (!previousQGStatus.isPresent()) {\n-      LOGGER.warn(\"Previous alterStatus for project %s is not a supported value. Can not compute Quality Gate event\");\n+      LOGGER.warn(String.format(\"Previous alterStatus for project %s is not a supported value. Can not compute Quality Gate event\", project.getKey()));\n       checkNewQualityGate(project, currentStatus, alertText);\n       return;\n     }"
    },
    {
        "commit_id": "107396992a8ea047b99c17f1c114011652e3539f",
        "commit_message": "Fix query on MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/107396992a8ea047b99c17f1c114011652e3539f",
        "buggy_code": "checkTables(\"insert\", \"snapshots\");",
        "fixed_code": "checkTables(\"insert\", new String[] {\"id\"}, \"snapshots\");",
        "patch": "@@ -109,7 +109,7 @@ public void insert() {\n     session.commit();\n \n     assertThat(dto.getId()).isNotNull();\n-    checkTables(\"insert\", \"snapshots\");\n+    checkTables(\"insert\", new String[] {\"id\"}, \"snapshots\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "for (int i = (startLine == 0 ? startLine : startLine - 1); i < endLine && i < lines.size(); i++) {",
        "fixed_code": "for (int i = (startLine == 0 ? startLine : (startLine - 1)); i < endLine && i < lines.size(); i++) {",
        "patch": "@@ -145,7 +145,7 @@ public StringBuffer getCodeBuffer() {\n   public String getSlice(int startLine, int endLine) {\n     StringBuffer sb = new StringBuffer();\n     List lines = cl.getCode();\n-    for (int i = (startLine == 0 ? startLine : startLine - 1); i < endLine && i < lines.size(); i++) {\n+    for (int i = (startLine == 0 ? startLine : (startLine - 1)); i < endLine && i < lines.size(); i++) {\n       if (sb.length() != 0) {\n         sb.append(EOL);\n       }"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private RuntimeException failToInstantiateCheck(ActiveRule activeRule, Object checkClassOrInstance, Exception e) {",
        "fixed_code": "private static RuntimeException failToInstantiateCheck(ActiveRule activeRule, Object checkClassOrInstance, Exception e) {",
        "patch": "@@ -161,7 +161,7 @@ private Object instantiate(ActiveRule activeRule, Object checkClassOrInstance) {\n     }\n   }\n \n-  private RuntimeException failToInstantiateCheck(ActiveRule activeRule, Object checkClassOrInstance, Exception e) {\n+  private static RuntimeException failToInstantiateCheck(ActiveRule activeRule, Object checkClassOrInstance, Exception e) {\n     throw new IllegalStateException(String.format(\"Fail to instantiate class %s for rule %s\", checkClassOrInstance, activeRule.ruleKey()), e);\n   }\n "
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private void improveChart(JFreeChart jfrechart, ChartParameters params) {",
        "fixed_code": "private static void improveChart(JFreeChart jfrechart, ChartParameters params) {",
        "patch": "@@ -63,7 +63,7 @@ public BufferedImage generateImage(ChartParameters params) {\n     return chart.createBufferedImage(params.getWidth(), params.getHeight());\n   }\n \n-  private void improveChart(JFreeChart jfrechart, ChartParameters params) {\n+  private static void improveChart(JFreeChart jfrechart, ChartParameters params) {\n     Color background = Color.decode(\"#\" + params.getValue(ChartParameters.PARAM_BACKGROUND_COLOR, \"FFFFFF\", false));\n     jfrechart.setBackgroundPaint(background);\n "
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "return !(key != null ? !key.equals(that.key) : that.key != null);",
        "fixed_code": "return !(key != null ? !key.equals(that.key) : (that.key != null));",
        "patch": "@@ -101,7 +101,7 @@ public boolean equals(Object o) {\n     }\n \n     MockSourceFile that = (MockSourceFile) o;\n-    return !(key != null ? !key.equals(that.key) : that.key != null);\n+    return !(key != null ? !key.equals(that.key) : (that.key != null));\n   }\n \n   @Override"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "return !(key != null ? !key.equals(that.key) : that.key != null);",
        "fixed_code": "return !(key != null ? !key.equals(that.key) : (that.key != null));",
        "patch": "@@ -557,7 +557,7 @@ public boolean equals(Object o) {\n       return false;\n     }\n     DefaultIssue that = (DefaultIssue) o;\n-    return !(key != null ? !key.equals(that.key) : that.key != null);\n+    return !(key != null ? !key.equals(that.key) : (that.key != null));\n   }\n \n   @Override"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private boolean areSameLimits(Number[] bottomLimits, Set<Double> limits) {",
        "fixed_code": "private static boolean areSameLimits(Number[] bottomLimits, Set<Double> limits) {",
        "patch": "@@ -166,7 +166,7 @@ public RangeDistributionBuilder add(@Nullable Measure<String> measure) {\n     return this;\n   }\n \n-  private boolean areSameLimits(Number[] bottomLimits, Set<Double> limits) {\n+  private static boolean areSameLimits(Number[] bottomLimits, Set<Double> limits) {\n     if (limits.size() == bottomLimits.length) {\n       for (Number l : bottomLimits) {\n         if (!limits.contains(l.doubleValue())) {"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "return !(rulesProfile != null ? !rulesProfile.equals(that.rulesProfile) : that.rulesProfile != null);",
        "fixed_code": "return !((rulesProfile != null) ? !rulesProfile.equals(that.rulesProfile) : (that.rulesProfile != null));",
        "patch": "@@ -268,7 +268,7 @@ public boolean equals(Object o) {\n     if (!rule.equals(that.rule)) {\n       return false;\n     }\n-    return !(rulesProfile != null ? !rulesProfile.equals(that.rulesProfile) : that.rulesProfile != null);\n+    return !((rulesProfile != null) ? !rulesProfile.equals(that.rulesProfile) : (that.rulesProfile != null));\n \n   }\n "
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private File parentDir(Collection<File> dirs, File cursor) {",
        "fixed_code": "private static File parentDir(Collection<File> dirs, File cursor) {",
        "patch": "@@ -89,7 +89,7 @@ public String relativePath(File dir, File file) {\n   }\n \n   @CheckForNull\n-  private File parentDir(Collection<File> dirs, File cursor) {\n+  private static File parentDir(Collection<File> dirs, File cursor) {\n     for (File dir : dirs) {\n       if (PathUtils.canonicalPath(dir).equals(PathUtils.canonicalPath(cursor))) {\n         return dir;"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private String sanitizeValue(String label, @Nullable String s) {",
        "fixed_code": "private static String sanitizeValue(String label, @Nullable String s) {",
        "patch": "@@ -45,7 +45,7 @@ public DefaultDebtRemediationFunction(@Nullable Type type, @Nullable String coef\n   }\n \n   @CheckForNull\n-  private String sanitizeValue(String label, @Nullable String s) {\n+  private static String sanitizeValue(String label, @Nullable String s) {\n     if (StringUtils.isNotBlank(s)) {\n       try {\n         Duration duration = Duration.decode(s, HOURS_IN_DAY);"
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private void validate(String value, WebService.Param definition) {",
        "fixed_code": "private static void validate(String value, WebService.Param definition) {",
        "patch": "@@ -125,7 +125,7 @@ private String readParamOrDefaultValue(String key, @Nullable WebService.Param de\n   @CheckForNull\n   protected abstract InputStream readInputStreamParam(String key);\n \n-  private void validate(String value, WebService.Param definition) {\n+  private static void validate(String value, WebService.Param definition) {\n     Set<String> possibleValues = definition.possibleValues();\n     if (possibleValues != null && !possibleValues.contains(value)) {\n       throw new IllegalArgumentException(String.format("
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "return !(ruleKey != null ? !ruleKey.equals(that.ruleKey) : that.ruleKey != null);",
        "fixed_code": "return !((ruleKey != null) ? !ruleKey.equals(that.ruleKey) : (that.ruleKey != null));",
        "patch": "@@ -331,7 +331,7 @@ public boolean equals(Object o) {\n     if ((key != null) ? !key.equals(that.key) : (that.key != null)) {\n       return false;\n     }\n-    return !(ruleKey != null ? !ruleKey.equals(that.ruleKey) : that.ruleKey != null);\n+    return !((ruleKey != null) ? !ruleKey.equals(that.ruleKey) : (that.ruleKey != null));\n \n   }\n "
    },
    {
        "commit_id": "93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93e2db9c467f56954a1a2f33a45ab57a3cf24d75",
        "buggy_code": "private String searchTextToSql(@Nullable String s) {",
        "fixed_code": "private static String searchTextToSql(@Nullable String s) {",
        "patch": "@@ -48,7 +48,7 @@ private UserQuery(Builder builder) {\n     this.searchTextSql = searchTextToSql(searchText);\n   }\n \n-  private String searchTextToSql(@Nullable String s) {\n+  private static String searchTextToSql(@Nullable String s) {\n     String sql = null;\n     if (s != null) {\n       sql = StringUtils.replace(s, \"%\", \"/%\");"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private String generateSubject(String projectName, String alertLevel, boolean isNewAlert) {",
        "fixed_code": "private static String generateSubject(String projectName, String alertLevel, boolean isNewAlert) {",
        "patch": "@@ -65,7 +65,7 @@ public EmailMessage format(Notification notification) {\n         .setMessage(messageBody);\n   }\n \n-  private String generateSubject(String projectName, String alertLevel, boolean isNewAlert) {\n+  private static String generateSubject(String projectName, String alertLevel, boolean isNewAlert) {\n     StringBuilder subjectBuilder = new StringBuilder();\n     if (Metric.Level.OK.toString().equals(alertLevel)) {\n       subjectBuilder.append(\"\\\"\").append(projectName).append(\"\\\" is back to green\");"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -36,7 +36,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private Set<Long> pagedProjectIds(Collection<Long> projectIds, SearchOptions options) {",
        "fixed_code": "private static Set<Long> pagedProjectIds(Collection<Long> projectIds, SearchOptions options) {",
        "patch": "@@ -120,7 +120,7 @@ public void handle(Request request, Response response) {\n     json.close();\n   }\n \n-  private Set<Long> pagedProjectIds(Collection<Long> projectIds, SearchOptions options) {\n+  private static Set<Long> pagedProjectIds(Collection<Long> projectIds, SearchOptions options) {\n     Set<Long> results = Sets.newLinkedHashSet();\n     int index = 0;\n     for (Long projectId : projectIds) {"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "PersistComponentsStep.class,",
        "fixed_code": "PersistComponentsAndSnapshotsStep.class,",
        "patch": "@@ -52,7 +52,7 @@ public List<Class<? extends ComputationStep>> orderedStepClasses() {\n       QualityProfileEventsStep.class,\n \n       // Persist data\n-      PersistComponentsStep.class,\n+      PersistComponentsAndSnapshotsStep.class,\n       PersistNumberOfDaysSinceLastCommitStep.class,\n       PersistMeasuresStep.class,\n       PersistIssuesStep.class,"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {",
        "fixed_code": "private static void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {",
        "patch": "@@ -96,7 +96,7 @@ public void execute() {\n     }\n   }\n \n-  private void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {\n+  private static void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {\n     for (IssueComment comment : issue.comments()) {\n       DefaultIssueComment c = (DefaultIssueComment) comment;\n       if (c.isNew()) {"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void feedComponent(ComponentImpl component, String componentKey, Map<String, String> componentUuidByKey) {",
        "fixed_code": "private static void feedComponent(ComponentImpl component, String componentKey, Map<String, String> componentUuidByKey) {",
        "patch": "@@ -115,7 +115,7 @@ private void processDirectoryAndFile(ComponentContext componentContext, Componen\n     feedComponent((ComponentImpl) component, componentKey, componentContext.componentUuidsByKey);\n   }\n \n-  private void feedComponent(ComponentImpl component, String componentKey, Map<String, String> componentUuidByKey) {\n+  private static void feedComponent(ComponentImpl component, String componentKey, Map<String, String> componentUuidByKey) {\n     component.setKey(componentKey);\n \n     String componentUuid = componentUuidByKey.get(componentKey);"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -36,7 +36,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void writeUsers(JsonWriter json, Map<String, User> usersByLogin) {",
        "fixed_code": "private static void writeUsers(JsonWriter json, Map<String, User> usersByLogin) {",
        "patch": "@@ -684,7 +684,7 @@ private void writeProjects(JsonWriter json, List<ComponentDto> projects) {\n     json.endArray();\n   }\n \n-  private void writeUsers(JsonWriter json, Map<String, User> usersByLogin) {\n+  private static void writeUsers(JsonWriter json, Map<String, User> usersByLogin) {\n     json.name(\"users\").beginArray();\n     for (User user : usersByLogin.values()) {\n       json.beginObject()"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -36,7 +36,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.10\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private MetricDto newMetricTemplate(Request request) {",
        "fixed_code": "private static MetricDto newMetricTemplate(Request request) {",
        "patch": "@@ -116,7 +116,7 @@ public void handle(Request request, Response response) throws Exception {\n     }\n   }\n \n-  private MetricDto newMetricTemplate(Request request) {\n+  private static MetricDto newMetricTemplate(Request request) {\n     String key = request.mandatoryParam(PARAM_KEY);\n     String name = request.mandatoryParam(PARAM_NAME);\n     String type = Metric.ValueType.valueOf(request.mandatoryParam(PARAM_TYPE)).name();"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -47,7 +47,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void addQuotedValue(PropertyDto property, StringBuilder message) {",
        "fixed_code": "private static void addQuotedValue(PropertyDto property, StringBuilder message) {",
        "patch": "@@ -61,7 +61,7 @@ void logServerId(Logger logger) {\n     }\n   }\n \n-  private void addQuotedValue(PropertyDto property, StringBuilder message) {\n+  private static void addQuotedValue(PropertyDto property, StringBuilder message) {\n     message.append(\"\\\"\");\n     message.append(property.getValue());\n     message.append(\"\\\"\\n\");"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -36,7 +36,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void writeUser(JsonWriter json, UserDoc user) {",
        "fixed_code": "private static void writeUser(JsonWriter json, UserDoc user) {",
        "patch": "@@ -105,7 +105,7 @@ private void writeResponse(Response response, String login) {\n     json.endObject().close();\n   }\n \n-  private void writeUser(JsonWriter json, UserDoc user) {\n+  private static void writeUser(JsonWriter json, UserDoc user) {\n     json.name(\"user\").beginObject()\n       .prop(\"login\", user.login())\n       .prop(\"name\", user.name())"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void defineIndexAction(NewController controller) {",
        "fixed_code": "private static void defineIndexAction(NewController controller) {",
        "patch": "@@ -36,7 +36,7 @@ public void define(Context context) {\n     controller.done();\n   }\n \n-  private void defineIndexAction(NewController controller) {\n+  private static void defineIndexAction(NewController controller) {\n     controller.createAction(\"index\")\n       .setDescription(\"Documentation of this web service is available <a href=\\\"http://redirect.sonarsource.com/doc/old-web-service-api.html\\\">here</a>\")\n       .setSince(\"2.6\")"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private Map<Integer, Integer> parseCountByLine(@Nullable Measure measure) {",
        "fixed_code": "private static Map<Integer, Integer> parseCountByLine(@Nullable Measure measure) {",
        "patch": "@@ -175,7 +175,7 @@ private void compute(DecoratorContext context) {\n     context.saveMeasure(newUncoveredConditions);\n   }\n \n-  private Map<Integer, Integer> parseCountByLine(@Nullable Measure measure) {\n+  private static Map<Integer, Integer> parseCountByLine(@Nullable Measure measure) {\n     if (measure != null && measure.hasData()) {\n       return KeyValueFormat.parseIntInt(measure.getData());\n     }"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private void updatePeriodParams(Snapshot snapshot, PastSnapshot pastSnapshot) {",
        "fixed_code": "private static void updatePeriodParams(Snapshot snapshot, PastSnapshot pastSnapshot) {",
        "patch": "@@ -74,7 +74,7 @@ public boolean shouldExecuteOnProject(Project project) {\n     return true;\n   }\n \n-  private void updatePeriodParams(Snapshot snapshot, PastSnapshot pastSnapshot) {\n+  private static void updatePeriodParams(Snapshot snapshot, PastSnapshot pastSnapshot) {\n     int periodIndex = pastSnapshot.getIndex();\n     snapshot.setPeriodMode(periodIndex, pastSnapshot.getMode());\n     snapshot.setPeriodModeParameter(periodIndex, pastSnapshot.getModeParameter());"
    },
    {
        "commit_id": "81c526901fb2f10eca77c7cccb306c959da4469b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81c526901fb2f10eca77c7cccb306c959da4469b",
        "buggy_code": "private String groupSearchToSql(@Nullable String s) {",
        "fixed_code": "private static String groupSearchToSql(@Nullable String s) {",
        "patch": "@@ -64,7 +64,7 @@ private GroupMembershipQuery(Builder builder) {\n     this.pageIndex = builder.pageIndex;\n   }\n \n-  private String groupSearchToSql(@Nullable String s) {\n+  private static String groupSearchToSql(@Nullable String s) {\n     String sql = null;\n     if (s != null) {\n       sql = StringUtils.replace(StringUtils.upperCase(s), \"%\", \"/%\");"
    },
    {
        "commit_id": "5381835db07e40e02cd4e9d214988ab6418dffd6",
        "commit_message": "SONAR-6571 fix use of Boolean for boolean db column in Metrics table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5381835db07e40e02cd4e9d214988ab6418dffd6",
        "buggy_code": "assertThat(container.size()).isEqualTo(54);",
        "fixed_code": "assertThat(container.size()).isEqualTo(55);",
        "patch": "@@ -29,6 +29,6 @@ public class MigrationStepModuleTest {\n   public void verify_count_of_added_MigrationStep_types() throws Exception {\n     ComponentContainer container = new ComponentContainer();\n     new MigrationStepModule().configure(container);\n-    assertThat(container.size()).isEqualTo(54);\n+    assertThat(container.size()).isEqualTo(55);\n   }\n }"
    },
    {
        "commit_id": "5381835db07e40e02cd4e9d214988ab6418dffd6",
        "commit_message": "SONAR-6571 fix use of Boolean for boolean db column in Metrics table",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5381835db07e40e02cd4e9d214988ab6418dffd6",
        "buggy_code": "public static final int LAST_VERSION = 915;",
        "fixed_code": "public static final int LAST_VERSION = 916;",
        "patch": "@@ -35,7 +35,7 @@\n @ServerSide\n public class DatabaseVersion {\n \n-  public static final int LAST_VERSION = 915;\n+  public static final int LAST_VERSION = 916;\n \n   /**\n    * List of all the tables.n"
    },
    {
        "commit_id": "44e7ca131970744ed1b667048a895bb622804196",
        "commit_message": "SONAR-6586 Fix user login length check",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/44e7ca131970744ed1b667048a895bb622804196",
        "buggy_code": "assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 2));",
        "fixed_code": "assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 3));",
        "patch": "@@ -251,7 +251,7 @@ public void fail_to_create_user_with_too_short_login() {\n         .setPasswordConfirmation(\"password\"));\n       fail();\n     } catch (BadRequestException e) {\n-      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 2));\n+      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 3));\n     }\n   }\n "
    },
    {
        "commit_id": "1b771f631c4a73458583718d1fd8b3fcc61d5009",
        "commit_message": "Fix definition of core component qualifiers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b771f631c4a73458583718d1fd8b3fcc61d5009",
        "buggy_code": "DefaultResourceTypes.class,",
        "fixed_code": "DefaultResourceTypes.get(),",
        "patch": "@@ -343,7 +343,7 @@ protected void configureLevel() {\n       DistributionAreaChart.class,\n       Views.class,\n       ResourceTypes.class,\n-      DefaultResourceTypes.class,\n+      DefaultResourceTypes.get(),\n       SettingsChangeNotifier.class,\n       PageDecorations.class,\n       DefaultResourcePermissions.class,"
    },
    {
        "commit_id": "1b771f631c4a73458583718d1fd8b3fcc61d5009",
        "commit_message": "Fix definition of core component qualifiers",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b771f631c4a73458583718d1fd8b3fcc61d5009",
        "buggy_code": "DefaultResourceTypes.class,",
        "fixed_code": "DefaultResourceTypes.get(),",
        "patch": "@@ -84,7 +84,7 @@ private BatchComponents() {\n \n   public static Collection all(DefaultAnalysisMode analysisMode) {\n     List components = Lists.newArrayList(\n-      DefaultResourceTypes.class,\n+      DefaultResourceTypes.get(),\n \n       // Maven\n       MavenProjectBootstrapper.class, MavenProjectConverter.class, MavenProjectBuilder.class,"
    },
    {
        "commit_id": "55e60bba3b96421c1a2071618343e8211a47b0b7",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55e60bba3b96421c1a2071618343e8211a47b0b7",
        "buggy_code": "return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";",
        "fixed_code": "return period != null ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";",
        "patch": "@@ -124,7 +124,7 @@ String column() {\n \n   private String getMetricColumn() {\n     if (metric.isNumericType()) {\n-      return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";\n+      return period != null ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";\n     } else {\n       return \"pmsort.text_value\";\n     }"
    },
    {
        "commit_id": "55e60bba3b96421c1a2071618343e8211a47b0b7",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55e60bba3b96421c1a2071618343e8211a47b0b7",
        "buggy_code": "sumByKeys.put(key, currentValue != null ? currentValue + value : value);",
        "fixed_code": "sumByKeys.put(key, currentValue != null ? (currentValue + value) : value);",
        "patch": "@@ -204,7 +204,7 @@ public SumMap() {\n     public void add(@Nullable E key, Long value) {\n       if (key != null) {\n         Long currentValue = sumByKeys.get(key);\n-        sumByKeys.put(key, currentValue != null ? currentValue + value : value);\n+        sumByKeys.put(key, currentValue != null ? (currentValue + value) : value);\n       }\n     }\n "
    },
    {
        "commit_id": "9de86423ed465f18ebdc4b883cd6d40ee9f373c8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9de86423ed465f18ebdc4b883cd6d40ee9f373c8",
        "buggy_code": "public interface Perspective<C extends Component> {",
        "fixed_code": "public interface Perspective {",
        "patch": "@@ -23,5 +23,5 @@\n  * @deprecated since 5.2\n  */\n @Deprecated\n-public interface Perspective<C extends Component> {\n+public interface Perspective {\n }"
    },
    {
        "commit_id": "895b846371f62c9cdf8bbc7f47fc921ea72614ff",
        "commit_message": "Fix creation of component key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/895b846371f62c9cdf8bbc7f47fc921ea72614ff",
        "buggy_code": "\"<duplications><g><b s=\\\"1\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:file:origin/master\\\"/><b s=\\\"6\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:file:origin/master\\\"/></g></duplications>\");",
        "fixed_code": "\"<duplications><g><b s=\\\"1\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:origin/master:file\\\"/><b s=\\\"6\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:origin/master:file\\\"/></g></duplications>\");",
        "patch": "@@ -344,7 +344,7 @@ public void persist_duplications_on_same_file_when_a_branch_is_used() throws Exc\n     Map<String, Object> dto = dbTester.selectFirst(\"select snapshot_id as \\\"snapshotId\\\", text_value as \\\"textValue\\\" from project_measures\");\n     assertThat(dto.get(\"snapshotId\")).isEqualTo(11L);\n     assertThat(dto.get(\"textValue\")).isEqualTo(\n-      \"<duplications><g><b s=\\\"1\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:file:origin/master\\\"/><b s=\\\"6\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:file:origin/master\\\"/></g></duplications>\");\n+      \"<duplications><g><b s=\\\"1\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:origin/master:file\\\"/><b s=\\\"6\\\" l=\\\"5\\\" r=\\\"PROJECT_KEY:origin/master:file\\\"/></g></duplications>\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "895b846371f62c9cdf8bbc7f47fc921ea72614ff",
        "commit_message": "Fix creation of component key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/895b846371f62c9cdf8bbc7f47fc921ea72614ff",
        "buggy_code": "assertThat(ComponentKeys.createKey(\"module_key\", \"file\", \"origin/master\")).isEqualTo(\"module_key:file:origin/master\");",
        "fixed_code": "assertThat(ComponentKeys.createKey(\"module_key\", \"file\", \"origin/master\")).isEqualTo(\"module_key:origin/master:file\");",
        "patch": "@@ -43,7 +43,7 @@ public void create_effective_key() {\n \n   @Test\n   public void create_key_from_module_key_path_and_branch() {\n-    assertThat(ComponentKeys.createKey(\"module_key\", \"file\", \"origin/master\")).isEqualTo(\"module_key:file:origin/master\");\n+    assertThat(ComponentKeys.createKey(\"module_key\", \"file\", \"origin/master\")).isEqualTo(\"module_key:origin/master:file\");\n     assertThat(ComponentKeys.createKey(\"module_key\", \"file\", null)).isEqualTo(\"module_key:file\");\n     assertThat(ComponentKeys.createKey(\"module_key\", null, null)).isEqualTo(\"module_key\");\n   }"
    },
    {
        "commit_id": "aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "buggy_code": "activity.setData(\"profileKey\", getKey().qProfile().toString());",
        "fixed_code": "activity.setData(\"profileKey\", getKey().qProfile());",
        "patch": "@@ -96,7 +96,7 @@ public Activity toActivity() {\n     activity.setAction(type.name());\n     activity.setData(\"key\", getKey().toString());\n     activity.setData(\"ruleKey\", getKey().ruleKey().toString());\n-    activity.setData(\"profileKey\", getKey().qProfile().toString());\n+    activity.setData(\"profileKey\", getKey().qProfile());\n \n     for (Map.Entry<String, String> param : parameters.entrySet()) {\n       if (!param.getKey().isEmpty()) {"
    },
    {
        "commit_id": "aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "buggy_code": ".prop(\"qProfile\", activeRule.key().qProfile().toString())",
        "fixed_code": ".prop(\"qProfile\", activeRule.key().qProfile())",
        "patch": "@@ -112,7 +112,7 @@ private Collection<String> writeActiveRules(RuleKey ruleKey, Collection<ActiveRu\n   private String writeActiveRule(ActiveRule activeRule, JsonWriter json) {\n     json\n       .beginObject()\n-      .prop(\"qProfile\", activeRule.key().qProfile().toString())\n+      .prop(\"qProfile\", activeRule.key().qProfile())\n       .prop(\"inherit\", activeRule.inheritance().toString())\n       .prop(\"severity\", activeRule.severity());\n     ActiveRuleKey parentKey = activeRule.parentKey();"
    },
    {
        "commit_id": "aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/aa0cc3c59c5c4d4efe52edc8684ff3c224d745de",
        "buggy_code": "return String.format(\"%s:%s\", qualityProfileKey.toString(), ruleKey.toString());",
        "fixed_code": "return String.format(\"%s:%s\", qualityProfileKey, ruleKey.toString());",
        "patch": "@@ -103,6 +103,6 @@ public int hashCode() {\n    */\n   @Override\n   public String toString() {\n-    return String.format(\"%s:%s\", qualityProfileKey.toString(), ruleKey.toString());\n+    return String.format(\"%s:%s\", qualityProfileKey, ruleKey.toString());\n   }\n }"
    },
    {
        "commit_id": "a0b334f10eedb58bb5bbcf1fbf05054e93927988",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a0b334f10eedb58bb5bbcf1fbf05054e93927988",
        "buggy_code": "public class PersistComponentLinksStepTest extends BaseStepTest {",
        "fixed_code": "public class PersistProjectLinksStepTest extends BaseStepTest {",
        "patch": "@@ -49,7 +49,7 @@\n import static org.mockito.Mockito.when;\n \n @Category(DbTests.class)\n-public class PersistComponentLinksStepTest extends BaseStepTest {\n+public class PersistProjectLinksStepTest extends BaseStepTest {\n \n   @Rule\n   public TemporaryFolder temp = new TemporaryFolder();"
    },
    {
        "commit_id": "f8f2f5a95b8a485dd283222afbf13fdc822240bb",
        "commit_message": "SONAR-6427 SONAR-6428 Fix l10n of dashboard titles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8f2f5a95b8a485dd283222afbf13fdc822240bb",
        "buggy_code": ".prop(\"name\", i18n.message(locale, String.format(\"dashboard.%s.name\", dashboard.getName()), dashboard.getName()))",
        "fixed_code": ".prop(\"name\", dashboard.getName())",
        "patch": "@@ -197,7 +197,7 @@ private void writeDashboards(JsonWriter json, ComponentDto component, List<Dashb\n     for (DashboardDto dashboard : dashboards) {\n       json.beginObject()\n         .prop(\"key\", dashboard.getId())\n-        .prop(\"name\", i18n.message(locale, String.format(\"dashboard.%s.name\", dashboard.getName()), dashboard.getName()))\n+        .prop(\"name\", dashboard.getName())\n         .endObject();\n     }\n     json.endArray();"
    },
    {
        "commit_id": "2ac386b279183456c8ec1059ea815c7605af8588",
        "commit_message": "Fix stability of PluginInfoTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2ac386b279183456c8ec1059ea815c7605af8588",
        "buggy_code": "assertThat(pluginInfo.getRequiredPlugins()).extracting(\"key\").containsExactly(\"java\", \"pmd\");",
        "fixed_code": "assertThat(pluginInfo.getRequiredPlugins()).extracting(\"key\").containsOnly(\"java\", \"pmd\");",
        "patch": "@@ -182,7 +182,7 @@ public void create_from_complete_manifest() throws Exception {\n     assertThat(pluginInfo.getOrganizationName()).isEqualTo(\"SonarSource\");\n     assertThat(pluginInfo.getOrganizationUrl()).isEqualTo(\"http://sonarsource.com\");\n     assertThat(pluginInfo.getMinimalSqVersion().getName()).isEqualTo(\"4.5.1\");\n-    assertThat(pluginInfo.getRequiredPlugins()).extracting(\"key\").containsExactly(\"java\", \"pmd\");\n+    assertThat(pluginInfo.getRequiredPlugins()).extracting(\"key\").containsOnly(\"java\", \"pmd\");\n     assertThat(pluginInfo.isCore()).isTrue();\n   }\n "
    },
    {
        "commit_id": "f7c5f42cf3ca81ff948ae08afe50d15c09412bfc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7c5f42cf3ca81ff948ae08afe50d15c09412bfc",
        "buggy_code": "return (period != null) ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";",
        "fixed_code": "return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";",
        "patch": "@@ -123,7 +123,7 @@ String column() {\n \n   private String getMetricColumn() {\n     if (metric.isNumericType()) {\n-      return (period != null) ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";\n+      return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";\n     } else {\n       return \"pmsort.text_value\";\n     }"
    },
    {
        "commit_id": "f7c5f42cf3ca81ff948ae08afe50d15c09412bfc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7c5f42cf3ca81ff948ae08afe50d15c09412bfc",
        "buggy_code": "sumByKeys.put(key, (currentValue != null) ? (currentValue + value) : value);",
        "fixed_code": "sumByKeys.put(key, currentValue != null ? currentValue + value : value);",
        "patch": "@@ -202,7 +202,7 @@ public SumMap() {\n     public void add(@Nullable E key, Long value) {\n       if (key != null) {\n         Long currentValue = sumByKeys.get(key);\n-        sumByKeys.put(key, (currentValue != null) ? (currentValue + value) : value);\n+        sumByKeys.put(key, currentValue != null ? currentValue + value : value);\n       }\n     }\n "
    },
    {
        "commit_id": "43cde24fb6eb8ced9ff2ca63c7d0f84bac2fbf40",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43cde24fb6eb8ced9ff2ca63c7d0f84bac2fbf40",
        "buggy_code": "private final class TestConverter implements Function<MutableTestCase, BatchReport.Test> {",
        "fixed_code": "private static final class TestConverter implements Function<MutableTestCase, BatchReport.Test> {",
        "patch": "@@ -41,7 +41,7 @@\n \n public class TestExecutionAndCoveragePublisher implements ReportPublisherStep {\n \n-  private final class TestConverter implements Function<MutableTestCase, BatchReport.Test> {\n+  private static final class TestConverter implements Function<MutableTestCase, BatchReport.Test> {\n     private final Set<String> testNamesWithCoverage;\n     private BatchReport.Test.Builder builder = BatchReport.Test.newBuilder();\n "
    },
    {
        "commit_id": "43cde24fb6eb8ced9ff2ca63c7d0f84bac2fbf40",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43cde24fb6eb8ced9ff2ca63c7d0f84bac2fbf40",
        "buggy_code": "return StringEscapeUtils.escapeJavaScript(name != null ? name : ruleKey.toString());",
        "fixed_code": "return StringEscapeUtils.escapeJavaScript(name != null ? name : ruleKey);",
        "patch": "@@ -47,7 +47,7 @@ public String nameForHTML(RuleKey ruleKey) {\n \n   public String nameForJS(String ruleKey) {\n     String name = nameFromDB(RuleKey.parse(ruleKey));\n-    return StringEscapeUtils.escapeJavaScript(name != null ? name : ruleKey.toString());\n+    return StringEscapeUtils.escapeJavaScript(name != null ? name : ruleKey);\n   }\n \n   public String nameForHTML(Rule rule) {"
    },
    {
        "commit_id": "fa4a08153fdc252d3d172c2548f8c76a30257f3f",
        "commit_message": "SONAR-6428 Fix WS example & response",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa4a08153fdc252d3d172c2548f8c76a30257f3f",
        "buggy_code": ".prop(\"date\", DateUtils.formatDateTime(new Date(snapshot.getCreatedAt())));",
        "fixed_code": ".prop(\"snapshotDate\", DateUtils.formatDateTime(new Date(snapshot.getCreatedAt())));",
        "patch": "@@ -145,7 +145,7 @@ private void writeComponent(JsonWriter json, DbSession session, ComponentDto com\n \n     if (snapshot != null) {\n       json.prop(\"version\", snapshot.getVersion())\n-        .prop(\"date\", DateUtils.formatDateTime(new Date(snapshot.getCreatedAt())));\n+        .prop(\"snapshotDate\", DateUtils.formatDateTime(new Date(snapshot.getCreatedAt())));\n       String[] availableMeasures = dbClient.measureDao().selectMetricKeysForSnapshot(session, snapshot.getId()).toArray(new String[0]);\n       List<ViewProxy<Page>> pages = views.getPages(NavigationSection.RESOURCE, component.scope(), component.qualifier(), component.language(), availableMeasures);\n       writeExtensions(json, component, pages, userSession.locale());"
    },
    {
        "commit_id": "d14403162522261ca8d2a2e4b3d966629d7e4a0d",
        "commit_message": "SONAR-6427 Fix WS example & response",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d14403162522261ca8d2a2e4b3d966629d7e4a0d",
        "buggy_code": "json.name(\"rootQualifiers\").beginArray();",
        "fixed_code": "json.name(\"qualifiers\").beginArray();",
        "patch": "@@ -107,7 +107,7 @@ private void writeLogoProperties(JsonWriter json) {\n   }\n \n   private void writeQualifiers(JsonWriter json) {\n-    json.name(\"rootQualifiers\").beginArray();\n+    json.name(\"qualifiers\").beginArray();\n     for (ResourceType rootType : resourceTypes.getRoots()) {\n       json.value(rootType.getQualifier());\n     }"
    },
    {
        "commit_id": "5dd3163dd2a669919363d398cf7e9f35343241a7",
        "commit_message": "fix JSON empty msg field on /api/system/restart when not in dev mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5dd3163dd2a669919363d398cf7e9f35343241a7",
        "buggy_code": "throw new ForbiddenException();",
        "fixed_code": "throw new ForbiddenException(\"Webservice available only in dev mode\");",
        "patch": "@@ -56,7 +56,7 @@ public void define(WebService.NewController controller) {\n   @Override\n   public void handle(Request request, Response response) {\n     if (!settings.getBoolean(\"sonar.web.dev\")) {\n-      throw new ForbiddenException();\n+      throw new ForbiddenException(\"Webservice available only in dev mode\");\n     }\n \n     LOGGER.info(\"Restart server\");"
    },
    {
        "commit_id": "51c20b583a715c11d9640d4575e8b15aaddeb5e3",
        "commit_message": "SONAR-6379 fix minor typo in action description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51c20b583a715c11d9640d4575e8b15aaddeb5e3",
        "buggy_code": "\"br/>\" +",
        "fixed_code": "\"<br/>\" +",
        "patch": "@@ -73,7 +73,7 @@ public UpdatesPluginsWsAction(UpdateCenterMatrixFactory updateCenterMatrixFactor\n   public void define(WebService.NewController controller) {\n     controller.createAction(\"updates\")\n       .setDescription(\"Lists plugins installed on the SonarQube instance for which at least one newer version is available, sorted by plugin name.\" +\n-        \"br/>\" +\n+        \"<br/>\" +\n         \"Each newer version is listed, ordered from the oldest to the newest, with its own update/compatibility status.\" +\n         \"<br/>\" +\n         \"Plugin information is retrieved from Update Center. Date and time at which Update Center was last refreshed is provided in the response.\" +"
    },
    {
        "commit_id": "d9d0f54bfb814a236699e6525c60bb9df098904d",
        "commit_message": "SONAR-6377 fix typo in actio description",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9d0f54bfb814a236699e6525c60bb9df098904d",
        "buggy_code": "\"<li>DEPS_REQUIRE_SYSTEM_UPGRADE: at least plugin on which the plugin is dependent requires SonarQube to be upgraded.</li>\" +",
        "fixed_code": "\"<li>DEPS_REQUIRE_SYSTEM_UPGRADE: at least one plugin on which the plugin is dependent requires SonarQube to be upgraded.</li>\" +",
        "patch": "@@ -57,7 +57,7 @@ public void define(WebService.NewController controller) {\n           \"<li>COMPATIBLE: plugin is compatible with current SonarQube instance.</li>\" +\n           \"<li>INCOMPATIBLE: plugin is not compatible with current SonarQube instance.</li>\" +\n           \"<li>REQUIRES_SYSTEM_UPGRADE: plugin requires SonarQube to be upgraded before being installed.</li>\" +\n-          \"<li>DEPS_REQUIRE_SYSTEM_UPGRADE: at least plugin on which the plugin is dependent requires SonarQube to be upgraded.</li>\" +\n+          \"<li>DEPS_REQUIRE_SYSTEM_UPGRADE: at least one plugin on which the plugin is dependent requires SonarQube to be upgraded.</li>\" +\n           \"</ul>\")\n       .setSince(\"5.2\")\n       .setHandler(this)"
    },
    {
        "commit_id": "d241928142bfb2d83cc748876936af044cda9241",
        "commit_message": "Fix some other quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d241928142bfb2d83cc748876936af044cda9241",
        "buggy_code": "boolean isNewAlert = Boolean.valueOf(notification.getFieldValue(\"isNewAlert\"));",
        "fixed_code": "boolean isNewAlert = Boolean.parseBoolean(notification.getFieldValue(\"isNewAlert\"));",
        "patch": "@@ -52,7 +52,7 @@ public EmailMessage format(Notification notification) {\n     String alertName = notification.getFieldValue(\"alertName\");\n     String alertText = notification.getFieldValue(\"alertText\");\n     String alertLevel = notification.getFieldValue(\"alertLevel\");\n-    boolean isNewAlert = Boolean.valueOf(notification.getFieldValue(\"isNewAlert\"));\n+    boolean isNewAlert = Boolean.parseBoolean(notification.getFieldValue(\"isNewAlert\"));\n \n     // Generate text\n     String subject = generateSubject(projectName, alertLevel, isNewAlert);"
    },
    {
        "commit_id": "d241928142bfb2d83cc748876936af044cda9241",
        "commit_message": "Fix some other quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d241928142bfb2d83cc748876936af044cda9241",
        "buggy_code": "protected void logServerId(Logger logger) {",
        "fixed_code": "void logServerId(Logger logger) {",
        "patch": "@@ -42,7 +42,7 @@ public void start() {\n   }\n \n   @VisibleForTesting\n-  protected void logServerId(Logger logger) {\n+  void logServerId(Logger logger) {\n     PropertyDto serverIdProp = propertiesDao.selectGlobalProperty(CoreProperties.PERMANENT_SERVER_ID);\n     if (serverIdProp != null) {\n       // a server ID has been generated, let's print out the other useful informations that can help debugging license issues"
    },
    {
        "commit_id": "30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "buggy_code": "return range.getEndLine() - range.getStartLine() + 1;",
        "fixed_code": "return (range.getEndLine() - range.getStartLine()) + 1;",
        "patch": "@@ -79,7 +79,7 @@ private static boolean matchLine(BatchReport.Range range, int line) {\n   }\n \n   private static int length(BatchReport.Range range) {\n-    return range.getEndLine() - range.getStartLine() + 1;\n+    return (range.getEndLine() - range.getStartLine()) + 1;\n   }\n \n   private Map<BatchReport.Range, Integer> createDuplicationIdsByRange(List<BatchReport.Duplication> duplications) {"
    },
    {
        "commit_id": "30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "buggy_code": "public static enum Error {",
        "fixed_code": "public enum Error {",
        "patch": "@@ -25,7 +25,7 @@\n \n public class MeasureFilterResult {\n \n-  public static enum Error {\n+  public enum Error {\n     UNKNOWN, VALUE_SHOULD_BE_A_NUMBER\n   }\n "
    },
    {
        "commit_id": "30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "buggy_code": "return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";",
        "fixed_code": "return (period != null) ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";",
        "patch": "@@ -123,7 +123,7 @@ String column() {\n \n   private String getMetricColumn() {\n     if (metric.isNumericType()) {\n-      return period != null ? \"pmsort.variation_value_\" + period : \"pmsort.value\";\n+      return (period != null) ? (\"pmsort.variation_value_\" + period) : \"pmsort.value\";\n     } else {\n       return \"pmsort.text_value\";\n     }"
    },
    {
        "commit_id": "30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "buggy_code": "sumByKeys.put(key, currentValue != null ? currentValue + value : value);",
        "fixed_code": "sumByKeys.put(key, (currentValue != null) ? (currentValue + value) : value);",
        "patch": "@@ -202,7 +202,7 @@ public SumMap() {\n     public void add(@Nullable E key, Long value) {\n       if (key != null) {\n         Long currentValue = sumByKeys.get(key);\n-        sumByKeys.put(key, currentValue != null ? currentValue + value : value);\n+        sumByKeys.put(key, (currentValue != null) ? (currentValue + value) : value);\n       }\n     }\n "
    },
    {
        "commit_id": "30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/30e34a064dad8df08fcb72cfd25310ee7e95fc5e",
        "buggy_code": "return !(id != null ? !id.equals(actionPlanDto.id) : actionPlanDto.id != null);",
        "fixed_code": "return !((id != null) ? !id.equals(actionPlanDto.id) : (actionPlanDto.id != null));",
        "patch": "@@ -163,7 +163,7 @@ public boolean equals(Object o) {\n     }\n \n     ActionPlanDto actionPlanDto = (ActionPlanDto) o;\n-    return !(id != null ? !id.equals(actionPlanDto.id) : actionPlanDto.id != null);\n+    return !((id != null) ? !id.equals(actionPlanDto.id) : (actionPlanDto.id != null));\n   }\n \n   @Override"
    },
    {
        "commit_id": "221ee536cf4e04e1e60b389432aa381d914a270b",
        "commit_message": "fix various quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/221ee536cf4e04e1e60b389432aa381d914a270b",
        "buggy_code": "Collection<?> level1Components() {",
        "fixed_code": "Collection<Object> level1Components() {",
        "patch": "@@ -411,7 +411,7 @@ class ServerComponents {\n   /**\n    * All the stuff required to connect to database\n    */\n-  Collection<?> level1Components() {\n+  Collection<Object> level1Components() {\n     List<Object> components = Lists.newArrayList(platform, properties);\n     addExtraRootComponents(components);\n     components.addAll(Arrays.asList("
    },
    {
        "commit_id": "221ee536cf4e04e1e60b389432aa381d914a270b",
        "commit_message": "fix various quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/221ee536cf4e04e1e60b389432aa381d914a270b",
        "buggy_code": "return newArrayList(transform(listPlugins(this.downloadDir), installer.fileToPlugin(false)));",
        "fixed_code": "return newArrayList(transform(listPlugins(this.downloadDir), installer.fileToPlugin()));",
        "patch": "@@ -115,7 +115,7 @@ public List<String> getDownloadedPluginFilenames() {\n    * @return the list of download plugins as {@link DefaultPluginMetadata} instances\n    */\n   public Collection<DefaultPluginMetadata> getDownloadedPlugins() {\n-    return newArrayList(transform(listPlugins(this.downloadDir), installer.fileToPlugin(false)));\n+    return newArrayList(transform(listPlugins(this.downloadDir), installer.fileToPlugin()));\n   }\n \n   public void download(String pluginKey, Version version) {"
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "public static enum State {",
        "fixed_code": "public enum State {",
        "patch": "@@ -21,7 +21,7 @@\n \n public class Lifecycle {\n \n-  public static enum State {\n+  public enum State {\n     INIT, STARTING, STARTED, STOPPING, STOPPED\n   }\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "public static enum Type {",
        "fixed_code": "public enum Type {",
        "patch": "@@ -27,7 +27,7 @@\n \n public class Activity {\n \n-  public static enum Type {\n+  public enum Type {\n     QPROFILE, SERVER, ANALYSIS_REPORT\n   }\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "private static enum Operation {",
        "fixed_code": "private enum Operation {",
        "patch": "@@ -47,7 +47,7 @@\n  */\n public class InternalPermissionService implements ServerComponent {\n \n-  private static enum Operation {\n+  private enum Operation {\n     ADD, REMOVE\n   }\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "public static enum Type {",
        "fixed_code": "public enum Type {",
        "patch": "@@ -32,7 +32,7 @@\n \n public class ActiveRuleChange {\n \n-  public static enum Type {\n+  public enum Type {\n     ACTIVATED, DEACTIVATED, UPDATED\n   }\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "public static enum Type {",
        "fixed_code": "public enum Type {",
        "patch": "@@ -27,7 +27,7 @@\n \n public class IndexField {\n \n-  public static enum Type {\n+  public enum Type {\n     STRING, TEXT, DATE, BOOLEAN, INTEGER, LONG, DOUBLE, OBJECT, UUID_PATH\n   }\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "public static enum Status {",
        "fixed_code": "public enum Status {",
        "patch": "@@ -27,7 +27,7 @@\n  */\n public class Server extends Model {\n \n-  public static enum Status {\n+  public enum Status {\n     SETUP,\n     UP,\n     DOWN,"
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "static enum Provider {",
        "fixed_code": "enum Provider {",
        "patch": "@@ -34,7 +34,7 @@\n \n public class JdbcSettings {\n \n-  static enum Provider {\n+  enum Provider {\n     H2(\"lib/jdbc/h2\"), JTDS(\"lib/jdbc/jtds\"), MYSQL(\"lib/jdbc/mysql\"), ORACLE(\"extensions/jdbc-driver/oracle\"),\n     POSTGRESQL(\"lib/jdbc/postgresql\");\n "
    },
    {
        "commit_id": "3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3612afdc027b0d4052e053f1e47de286d8d7d1a5",
        "buggy_code": "static enum ElementPropertiesRule {",
        "fixed_code": "enum ElementPropertiesRule {",
        "patch": "@@ -28,7 +28,7 @@\n  */\n class ElementPropertyConfig {\n \n-  static enum ElementPropertiesRule {\n+  enum ElementPropertiesRule {\n     INCLUDE, EXCLUDE\n   }\n "
    },
    {
        "commit_id": "a79c792835a2dcf508d42cf746739bcc00c509d6",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a79c792835a2dcf508d42cf746739bcc00c509d6",
        "buggy_code": "public static enum Phase {",
        "fixed_code": "public enum Phase {",
        "patch": "@@ -29,7 +29,7 @@\n  */\n public class Phases {\n \n-  public static enum Phase {\n+  public enum Phase {\n     INIT(\"Initializers\"), SENSOR(\"Sensors\"), DECORATOR(\"Decorators\"), PERSISTER(\"Persisters\"), POSTJOB(\"Post-Jobs\");\n \n     private final String label;"
    },
    {
        "commit_id": "e5c9087d3bb50e74a80b64624d6425dc5cda4641",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5c9087d3bb50e74a80b64624d6425dc5cda4641",
        "buggy_code": "(isEmpty(parentName) || isEmpty(parentKey)), \"parentKey and parentName cannot be used simultaneously\");",
        "fixed_code": "isEmpty(parentName) || isEmpty(parentKey), \"parentKey and parentName cannot be used simultaneously\");",
        "patch": "@@ -98,7 +98,7 @@ private static String getParentKeyFromParameters(Request request, QProfileFactor\n     String parentKey = request.param(PARAM_PARENT_KEY);\n \n     Preconditions.checkArgument(\n-      (isEmpty(parentName) || isEmpty(parentKey)), \"parentKey and parentName cannot be used simultaneously\");\n+      isEmpty(parentName) || isEmpty(parentKey), \"parentKey and parentName cannot be used simultaneously\");\n \n     if (isEmpty(parentKey)) {\n       if (!isEmpty(parentName)) {"
    },
    {
        "commit_id": "ae3b5f5b5128b07eaf8896cf9fc52b809ca7cb51",
        "commit_message": "SONAR-6258 Fix hashes, symbols and highlighting persistence",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae3b5f5b5128b07eaf8896cf9fc52b809ca7cb51",
        "buggy_code": "lineReaders.add(new SymbolsLineReader(newArrayList(symbols)));",
        "fixed_code": "lineReaders.add(new SymbolsLineReader(symbols));",
        "patch": "@@ -196,7 +196,7 @@ private static class LineReaders {\n         lineReaders.add(new DuplicationLineReader(duplications));\n       }\n       if (!symbols.isEmpty()) {\n-        lineReaders.add(new SymbolsLineReader(newArrayList(symbols)));\n+        lineReaders.add(new SymbolsLineReader(symbols));\n       }\n     }\n "
    },
    {
        "commit_id": "a1b10d22ff9b0785bff99daac17ac499d010ea74",
        "commit_message": "SONAR-6408 Fix post-job log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1b10d22ff9b0785bff99daac17ac499d010ea74",
        "buggy_code": "LOG.info(\"Executing post-job {}\", postJob.getClass());",
        "fixed_code": "LOG.info(\"Executing post-job {}\", postJob.toString());",
        "patch": "@@ -57,7 +57,7 @@ private void execute(SensorContext context, Collection<PostJob> postJobs) {\n     logPostJobs(postJobs);\n \n     for (PostJob postJob : postJobs) {\n-      LOG.info(\"Executing post-job {}\", postJob.getClass());\n+      LOG.info(\"Executing post-job {}\", postJob.toString());\n       eventBus.fireEvent(new PostJobExecutionEvent(postJob, true));\n       postJob.executeOn(project, context);\n       eventBus.fireEvent(new PostJobExecutionEvent(postJob, false));"
    },
    {
        "commit_id": "1ed423756675550bb540020e7aa087c1751e45d4",
        "commit_message": "SONAR-6303 Fix issue with JaCoCo (and simplify code)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1ed423756675550bb540020e7aa087c1751e45d4",
        "buggy_code": "public static ServerTester tester = new ServerTester();",
        "fixed_code": "public static ServerTester tester = new ServerTester().addXoo();",
        "patch": "@@ -43,7 +43,7 @@\n public class QProfileComparisonMediumTest {\n \n   @ClassRule\n-  public static ServerTester tester = new ServerTester();\n+  public static ServerTester tester = new ServerTester().addXoo();\n \n   DbClient db;\n   DbSession dbSession;"
    },
    {
        "commit_id": "183b78861f7b48113686e19765b2d13d31b5cd64",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/183b78861f7b48113686e19765b2d13d31b5cd64",
        "buggy_code": "throw new IllegalStateException(\"Can't read syntax highlighting for \" + inputFile.absolutePath());",
        "fixed_code": "throw new IllegalStateException(\"Can't read syntax highlighting for \" + inputFile.absolutePath(), e);",
        "patch": "@@ -225,7 +225,7 @@ void applyHighlighting(DefaultInputFile inputFile, FileSourceDb.Data.Builder to)\n       }\n \n     } catch (Exception e) {\n-      throw new IllegalStateException(\"Can't read syntax highlighting for \" + inputFile.absolutePath());\n+      throw new IllegalStateException(\"Can't read syntax highlighting for \" + inputFile.absolutePath(), e);\n     } finally {\n       IOUtils.closeQuietly(inputStream);\n     }"
    },
    {
        "commit_id": "183b78861f7b48113686e19765b2d13d31b5cd64",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/183b78861f7b48113686e19765b2d13d31b5cd64",
        "buggy_code": "throw new IllegalStateException(\"Can't read syntax highlighting for \" + file.absolutePath());",
        "fixed_code": "throw new IllegalStateException(\"Can't read syntax highlighting for \" + file.absolutePath(), e);",
        "patch": "@@ -217,7 +217,7 @@ public List<TypeOfText> highlightingTypeFor(InputFile file, int line, int lineOf\n       }\n \n     } catch (Exception e) {\n-      throw new IllegalStateException(\"Can't read syntax highlighting for \" + file.absolutePath());\n+      throw new IllegalStateException(\"Can't read syntax highlighting for \" + file.absolutePath(), e);\n     } finally {\n       IOUtils.closeQuietly(inputStream);\n     }"
    },
    {
        "commit_id": "0fa306da07d0b600f98830672e5ad3730735c2c5",
        "commit_message": "SONAR-6277 Fix id of component when publishing source code in report",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0fa306da07d0b600f98830672e5ad3730735c2c5",
        "buggy_code": "File iofile = writer.getSourceFile(1);",
        "fixed_code": "File iofile = writer.getSourceFile(resource.batchId());",
        "patch": "@@ -46,7 +46,7 @@ public void publish(BatchReportWriter writer) {\n       }\n \n       DefaultInputFile inputFile = (DefaultInputFile) resource.inputPath();\n-      File iofile = writer.getSourceFile(1);\n+      File iofile = writer.getSourceFile(resource.batchId());\n       int line = 0;\n       try (FileOutputStream output = new FileOutputStream(iofile); BOMInputStream bomIn = new BOMInputStream(new FileInputStream(inputFile.file()),\n         ByteOrderMark.UTF_8, ByteOrderMark.UTF_16LE, ByteOrderMark.UTF_16BE, ByteOrderMark.UTF_32LE, ByteOrderMark.UTF_32BE);"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public enum Name {",
        "fixed_code": "enum Name {",
        "patch": "@@ -33,7 +33,7 @@\n \n   Name name();\n \n-  public enum Name {\n+  enum Name {\n     PRE, DEFAULT, POST\n   }\n }"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public static enum Type {",
        "fixed_code": "public enum Type {",
        "patch": "@@ -34,7 +34,7 @@\n  */\n public class DebtRemediationFunction {\n \n-  public static enum Type {\n+  public enum Type {\n     LINEAR, LINEAR_OFFSET, CONSTANT_ISSUE\n   }\n "
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public static interface Index {",
        "fixed_code": "interface Index {",
        "patch": "@@ -153,7 +153,7 @@ public interface FileSystem extends BatchComponent {\n   /**\n    * Interface of the underlying file index.\n    */\n-  public static interface Index {\n+  interface Index {\n     Iterable<InputFile> inputFiles();\n \n     @CheckForNull"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "return Collections.<InputFile>emptyList();",
        "fixed_code": "return Collections.emptyList();",
        "patch": "@@ -51,7 +51,7 @@ public boolean apply(InputFile f) {\n   public Iterable<InputFile> get(Index index) {\n     String relative = PathUtils.sanitize(new PathResolver().relativePath(baseDir.toFile(), new File(path)));\n     if (relative == null) {\n-      return Collections.<InputFile>emptyList();\n+      return Collections.emptyList();\n     }\n     InputFile f = index.inputFile(relative);\n     return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public static interface LineHashConsumer {",
        "fixed_code": "public interface LineHashConsumer {",
        "patch": "@@ -316,7 +316,7 @@ private Metadata(int lines, int nonBlankLines, String hash, List<Integer> origin\n     }\n   }\n \n-  public static interface LineHashConsumer {\n+  public interface LineHashConsumer {\n \n     void consume(int lineIdx, @Nullable byte[] hash);\n "
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "storage.store((Dependency) this);",
        "fixed_code": "storage.store(this);",
        "patch": "@@ -72,7 +72,7 @@ public void doSave() {\n     Preconditions.checkState(!this.fromKey.equals(this.toKey), \"From and To can't be the same inputFile\");\n     Preconditions.checkNotNull(this.fromKey, \"From inputFile can't be null\");\n     Preconditions.checkNotNull(this.toKey, \"To inputFile can't be null\");\n-    storage.store((Dependency) this);\n+    storage.store(this);\n   }\n \n   @Override"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public static class Block {",
        "fixed_code": "class Block {",
        "patch": "@@ -39,7 +39,7 @@\n @Beta\n public interface Duplication {\n \n-  public static class Block {\n+  class Block {\n     private final String resourceKey;\n     private final int startLine;\n     private final int length;"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public interface Context {",
        "fixed_code": "interface Context {",
        "patch": "@@ -40,7 +40,7 @@ public interface FileSystemFilter extends BatchExtension {\n   /**\n    * Plugins must not implement this interface. It is provided at runtime.\n    */\n-  public interface Context {\n+  interface Context {\n     ModuleFileSystem fileSystem();\n \n     FileType type();"
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "static String NONE = \"NONE\";",
        "fixed_code": "String NONE = \"NONE\";",
        "patch": "@@ -30,7 +30,7 @@ public interface DebtCharacteristic {\n   /**\n    * Only used when a characteristic is disabled (id is -1 in dto) by the user. see {@link org.sonar.server.rule.index.RuleNormalizer}\n    */\n-  static String NONE = \"NONE\";\n+  String NONE = \"NONE\";\n \n   String key();\n "
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "static enum Type {",
        "fixed_code": "enum Type {",
        "patch": "@@ -42,7 +42,7 @@\n  */\n public interface DebtRemediationFunction {\n \n-  static enum Type {\n+  enum Type {\n     LINEAR, LINEAR_OFFSET, CONSTANT_ISSUE\n   }\n "
    },
    {
        "commit_id": "8688a3671e2df6de78d99bce5744c0be9129e556",
        "commit_message": "Fix quality flaws in API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8688a3671e2df6de78d99bce5744c0be9129e556",
        "buggy_code": "public static enum SwitchMode {",
        "fixed_code": "public enum SwitchMode {",
        "patch": "@@ -30,7 +30,7 @@\n @Deprecated\n public final class ViolationQuery {\n \n-  public static enum SwitchMode {\n+  public enum SwitchMode {\n     OFF, ON, BOTH\n   }\n "
    },
    {
        "commit_id": "7bad03950e4ec3e82a5fef2ef50867a2e4ac29e2",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7bad03950e4ec3e82a5fef2ef50867a2e4ac29e2",
        "buggy_code": "InputFileMetadata metadata = inputPathCache.getFileMetadata(f.moduleKey(), f.relativePath());",
        "fixed_code": "InputFileMetadata metadata = inputPathCache.getFileMetadata(f);",
        "patch": "@@ -110,7 +110,7 @@ private List<InputFile> collectFilesToBlame() {\n   }\n \n   private void addIfNotEmpty(List<InputFile> filesToBlame, DefaultInputFile f) {\n-    InputFileMetadata metadata = inputPathCache.getFileMetadata(f.moduleKey(), f.relativePath());\n+    InputFileMetadata metadata = inputPathCache.getFileMetadata(f);\n     if (!metadata.isEmpty()) {\n       filesToBlame.add(f);\n     }"
    },
    {
        "commit_id": "7bad03950e4ec3e82a5fef2ef50867a2e4ac29e2",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7bad03950e4ec3e82a5fef2ef50867a2e4ac29e2",
        "buggy_code": "InputFileMetadata metadata = inputPathCache.getFileMetadata(((DefaultInputFile) f).moduleKey(), f.relativePath());",
        "fixed_code": "InputFileMetadata metadata = inputPathCache.getFileMetadata((DefaultInputFile) f);",
        "patch": "@@ -58,7 +58,7 @@ public void execute(final SensorContext context) {\n         .save();\n       if (f.language() == null) {\n         // As an approximation for files with no language plugin we consider every non blank line as ncloc\n-        InputFileMetadata metadata = inputPathCache.getFileMetadata(((DefaultInputFile) f).moduleKey(), f.relativePath());\n+        InputFileMetadata metadata = inputPathCache.getFileMetadata((DefaultInputFile) f);\n         ((DefaultMeasure<Integer>) context.<Integer>newMeasure()\n           .onFile(f)\n           .forMetric(CoreMetrics.NCLOC)"
    },
    {
        "commit_id": "9f351b68655bf061300952e0d384606aa7a28f73",
        "commit_message": "Fix timezone errors in some server tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f351b68655bf061300952e0d384606aa7a28f73",
        "buggy_code": "db.assertDbUnit(getClass(), \"migrate_issue_changelog_debt_result.xml\", \"issue_changes\");",
        "fixed_code": "db.assertDbUnit(getClass(), \"migrate_issue_changelog_debt_result.xml\", new String[]{\"updated_at\"}, \"issue_changes\");",
        "patch": "@@ -65,7 +65,7 @@ public void migrate_issue_changelog_debt() throws Exception {\n \n     migration.execute();\n \n-    db.assertDbUnit(getClass(), \"migrate_issue_changelog_debt_result.xml\", \"issue_changes\");\n+    db.assertDbUnit(getClass(), \"migrate_issue_changelog_debt_result.xml\", new String[]{\"updated_at\"}, \"issue_changes\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "9f351b68655bf061300952e0d384606aa7a28f73",
        "commit_message": "Fix timezone errors in some server tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f351b68655bf061300952e0d384606aa7a28f73",
        "buggy_code": "db.assertDbUnit(getClass(), \"register-result.xml\", \"issue_filters\", \"loaded_templates\");",
        "fixed_code": "db.assertDbUnit(getClass(), \"register-result.xml\", new String[]{\"created_at\", \"updated_at\"}, \"issue_filters\", \"loaded_templates\");",
        "patch": "@@ -69,7 +69,7 @@ public void should_register_issue_filters() throws Exception {\n     db.prepareDbUnit(getClass(), \"empty.xml\");\n     taskUnderTest.start();\n     taskUnderTest.stop();\n-    db.assertDbUnit(getClass(), \"register-result.xml\", \"issue_filters\", \"loaded_templates\");\n+    db.assertDbUnit(getClass(), \"register-result.xml\", new String[]{\"created_at\", \"updated_at\"}, \"issue_filters\", \"loaded_templates\");\n \n   }\n }"
    },
    {
        "commit_id": "b2c22f3e028098ca783d8e81714aa45aa17c3318",
        "commit_message": "Fix timeout margin of benchmark test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b2c22f3e028098ca783d8e81714aa45aa17c3318",
        "buggy_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 11, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "fixed_code": "benchmark.expectBetween(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 9, 13);",
        "patch": "@@ -84,7 +84,7 @@ private void scrollRows() throws SQLException {\n       long period = end - start;\n       long throughputPerSecond = 1000L * counter.get() / period;\n       LOGGER.info(String.format(\"%d FILE_SOURCES rows scrolled in %d ms (%d rows/second)\", counter.get(), period, throughputPerSecond));\n-      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 11, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n+      benchmark.expectBetween(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 9, 13);\n \n     } finally {\n       DbUtils.closeQuietly(connection);"
    },
    {
        "commit_id": "9f0fce00cd2815a8047ef170b84c215f7879cc1d",
        "commit_message": "Fix tags dropdown in issue bulk change",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f0fce00cd2815a8047ef170b84c215f7879cc1d",
        "buggy_code": "return resultAsList.size() > maxNumberOfTags ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;",
        "fixed_code": "return resultAsList.size() > maxNumberOfTags && maxNumberOfTags > 0 ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;",
        "patch": "@@ -586,7 +586,7 @@ public List<String> listTags(IssueQuery query, @Nullable String textQuery, int m\n     result.addAll(EsUtils.termsKeys(issuesResult));\n     result.addAll(EsUtils.termsKeys(rulesResult));\n     List<String> resultAsList = Lists.newArrayList(result);\n-    return resultAsList.size() > maxNumberOfTags ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;\n+    return resultAsList.size() > maxNumberOfTags && maxNumberOfTags > 0 ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;\n   }\n \n   public Map<String, Long> countTags(IssueQuery query, int maxNumberOfTags) {"
    },
    {
        "commit_id": "472ec39ded1cea93fe9538afb72cebd72c239588",
        "commit_message": "Fix tags dropdown in issue bulk change",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/472ec39ded1cea93fe9538afb72cebd72c239588",
        "buggy_code": "return resultAsList.size() > maxNumberOfTags ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;",
        "fixed_code": "return resultAsList.size() > maxNumberOfTags && maxNumberOfTags > 0 ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;",
        "patch": "@@ -623,7 +623,7 @@ public List<String> listTags(IssueQuery query, @Nullable String textQuery, int m\n     result.addAll(EsUtils.termsKeys(issuesResult));\n     result.addAll(EsUtils.termsKeys(rulesResult));\n     List<String> resultAsList = Lists.newArrayList(result);\n-    return resultAsList.size() > maxNumberOfTags ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;\n+    return resultAsList.size() > maxNumberOfTags && maxNumberOfTags > 0 ? resultAsList.subList(0, maxNumberOfTags) : resultAsList;\n   }\n \n   public Map<String, Long> countTags(IssueQuery query, int maxNumberOfTags) {"
    },
    {
        "commit_id": "78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "buggy_code": "Date now = system.newDate();",
        "fixed_code": "Date now = new Date(system.now());",
        "patch": "@@ -64,7 +64,7 @@ private boolean shouldRegisterBuiltinIssueFilters() {\n   }\n \n   private void createBuiltinIssueFilters() {\n-    Date now = system.newDate();\n+    Date now = new Date(system.now());\n \n     IssueFilterDto unresolvedIssueFilter = new IssueFilterDto().setName(BUILTIN_ISSUE_FILTER_UNRESOLVED)\n       .setShared(true)"
    },
    {
        "commit_id": "78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "buggy_code": "when(system.newDate()).thenReturn(now);",
        "fixed_code": "when(system.now()).thenReturn(now.getTime());",
        "patch": "@@ -64,7 +64,7 @@ public void should_do_nothing_if_not_needed() throws Exception {\n   @Test\n   public void should_register_issue_filters() throws Exception {\n     Date now = DateUtils.parseDateTime(\"2011-04-25T01:15:00+0200\");\n-    when(system.newDate()).thenReturn(now);\n+    when(system.now()).thenReturn(now.getTime());\n \n     db.prepareDbUnit(getClass(), \"empty.xml\");\n     taskUnderTest.start();"
    },
    {
        "commit_id": "78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "buggy_code": "when(system.newDate()).thenReturn(new Date());",
        "fixed_code": "when(system.now()).thenReturn(System.currentTimeMillis());",
        "patch": "@@ -78,7 +78,7 @@ public void setUp() throws Exception {\n     viewIndexer = new ViewIndexer(null, tester.client());\n     System2 system = mock(System2.class);\n     when(system.getDefaultTimeZone()).thenReturn(TimeZone.getTimeZone(\"+01:00\"));\n-    when(system.newDate()).thenReturn(new Date());\n+    when(system.now()).thenReturn(System.currentTimeMillis());\n \n     index = new IssueIndex(tester.client(), system);\n "
    },
    {
        "commit_id": "78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/78f3fbd20dd936f7fc88b736aaef2568cabc2be3",
        "buggy_code": "when(system2.newDate()).thenReturn(now);",
        "fixed_code": "when(system2.now()).thenReturn(now.getTime());",
        "patch": "@@ -65,7 +65,7 @@ public void should_skip_when_already_executed() throws Exception {\n   private void doStart() {\n     System2 system2 = mock(System2.class);\n     Date now = DateUtils.parseDateTime(\"2003-03-23T01:23:45+0100\");\n-    when(system2.newDate()).thenReturn(now);\n+    when(system2.now()).thenReturn(now.getTime());\n \n     RenameIssueWidgets task = new RenameIssueWidgets(\n       new DbClient("
    },
    {
        "commit_id": "064a699b7a3843cc11be3ffd27f4f5c52ac2563c",
        "commit_message": "Improve memory consumption of SourceDbBenchmarkTest and fix EsUtilsTest on GMT TZ",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/064a699b7a3843cc11be3ffd27f4f5c52ac2563c",
        "buggy_code": "assertThat(EsUtils.formatDateTime(new Date(1_500_000_000_000L))).startsWith(\"2017-07-\").hasSize(29);",
        "fixed_code": "assertThat(EsUtils.formatDateTime(new Date(1_500_000_000_000L))).startsWith(\"2017-07-\");",
        "patch": "@@ -70,7 +70,7 @@ public void util_class() throws Exception {\n \n   @Test\n   public void es_date_format() throws Exception {\n-    assertThat(EsUtils.formatDateTime(new Date(1_500_000_000_000L))).startsWith(\"2017-07-\").hasSize(29);\n+    assertThat(EsUtils.formatDateTime(new Date(1_500_000_000_000L))).startsWith(\"2017-07-\");\n     assertThat(EsUtils.formatDateTime(null)).isNull();\n \n     assertThat(EsUtils.parseDateTime(\"2017-07-14T04:40:00.000+02:00\").getTime()).isEqualTo(1_500_000_000_000L);"
    },
    {
        "commit_id": "76c7edaf18f761ece61238bebe31da6bb5a85d75",
        "commit_message": "Fix DB tests on MSSQL and Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/76c7edaf18f761ece61238bebe31da6bb5a85d75",
        "buggy_code": "for (WidgetPropertyDto prop : propertiesByWidget.get(widget.getKey())) {",
        "fixed_code": "for (WidgetPropertyDto prop : propertiesByWidget.get(widget.getId())) {",
        "patch": "@@ -102,7 +102,7 @@ public void handle(Request request, Response response) throws Exception {\n         json.prop(\"configured\", widget.getConfigured());\n         json.prop(\"componentId\", widget.getResourceId());\n         json.name(\"props\").beginArray();\n-        for (WidgetPropertyDto prop : propertiesByWidget.get(widget.getKey())) {\n+        for (WidgetPropertyDto prop : propertiesByWidget.get(widget.getId())) {\n           json.beginObject();\n           json.prop(\"key\", prop.getPropertyKey());\n           json.prop(\"val\", prop.getTextValue());"
    },
    {
        "commit_id": "c005313b3dd0dddff09bcb057ec9c90f981f8157",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c005313b3dd0dddff09bcb057ec9c90f981f8157",
        "buggy_code": "public class Context {",
        "fixed_code": "public static class Context {",
        "patch": "@@ -47,7 +47,7 @@ public final void execute() throws SQLException {\n     }\n   }\n \n-  public class Context {\n+  public static class Context {\n     private final Connection writeConnection;\n \n     public Context(Connection writeConnection) {"
    },
    {
        "commit_id": "5e691b5d2c39e58a626b8ed29207cdcab1bb1223",
        "commit_message": "Improve db migration from 5.0 and indexing step at server startup\n\n* Parallel bulk indexing of documents into Elasticsearch\n* reduce memory consumption when building JSON requests\n* no need to change type of column PROJECT_MEASURES.MEASURE_DATE as it is not used\n* fix created_at/updated_at fields of manual_measure when saved from Rails\n* remove usage of deprecated delete-by-query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e691b5d2c39e58a626b8ed29207cdcab1bb1223",
        "buggy_code": "node = new InternalNode(settings.build(), true);",
        "fixed_code": "node = new InternalNode(settings.build(), false);",
        "patch": "@@ -42,7 +42,7 @@ public SearchServer(Props props) {\n   public void start() {\n     LoggerFactory.getLogger(SearchServer.class).info(\"Starting Elasticsearch[{}] on port {}\", settings.clusterName(), settings.tcpPort());\n \n-    node = new InternalNode(settings.build(), true);\n+    node = new InternalNode(settings.build(), false);\n     node.start();\n   }\n "
    },
    {
        "commit_id": "194cac3982b108e718b204f2a3645ea7b1794205",
        "commit_message": "Fix test on MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/194cac3982b108e718b204f2a3645ea7b1794205",
        "buggy_code": "dbTester.assertDbUnit(getClass(), \"insert-result.xml\", \"events\");",
        "fixed_code": "dbTester.assertDbUnit(getClass(), \"insert-result.xml\", new String[]{\"id\"}, \"events\");",
        "patch": "@@ -101,7 +101,7 @@ public void insert() throws Exception {\n       );\n     session.commit();\n \n-    dbTester.assertDbUnit(getClass(), \"insert-result.xml\", \"events\");\n+    dbTester.assertDbUnit(getClass(), \"insert-result.xml\", new String[]{\"id\"}, \"events\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "c8be82a605f1507d28d7693f5ef6a82af6201101",
        "commit_message": "Fix compatibility of build with Java 8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8be82a605f1507d28d7693f5ef6a82af6201101",
        "buggy_code": "\"Bulk[1 delete request(s) on index fakes and type fake, 1 update request(s) on index fakes and type fake, 1 index request(s) on index fakes and type fake]\");",
        "fixed_code": "\"Bulk[1 update request(s) on index fakes and type fake, 1 delete request(s) on index fakes and type fake, 1 index request(s) on index fakes and type fake]\");",
        "patch": "@@ -67,7 +67,7 @@ private void testBulk() {\n       .source(FakeIndexDefinition.newDoc(3)));\n \n     assertThat(req.toString()).isEqualTo(\n-      \"Bulk[1 delete request(s) on index fakes and type fake, 1 update request(s) on index fakes and type fake, 1 index request(s) on index fakes and type fake]\");\n+      \"Bulk[1 update request(s) on index fakes and type fake, 1 delete request(s) on index fakes and type fake, 1 index request(s) on index fakes and type fake]\");\n \n     BulkResponse response = req.get();\n     assertThat(response.getItems()).hasSize(3);"
    },
    {
        "commit_id": "b80e9eec7d794ca02ab22116c18fcaad125bebe7",
        "commit_message": "SONAR-6244 Fix bad behavior of assignees facet on selected items",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b80e9eec7d794ca02ab22116c18fcaad125bebe7",
        "buggy_code": "facetTopAggregation = assigneeFacetBuilder.addSelectedItemsToFacet(fieldName, facetName, facetTopAggregation, assigneesEscaped);",
        "fixed_code": "facetTopAggregation = assigneeFacetBuilder.addSelectedItemsToFacet(fieldName, facetName, facetTopAggregation, assigneesEscaped.toArray());",
        "patch": "@@ -481,7 +481,7 @@ private AggregationBuilder createAssigneesFacet(IssueQuery query, Map<String, Fi\n \n     Collection<String> assigneesEscaped = escapeValuesForFacetInclusion(query.assignees());\n     if (!assigneesEscaped.isEmpty()) {\n-      facetTopAggregation = assigneeFacetBuilder.addSelectedItemsToFacet(fieldName, facetName, facetTopAggregation, assigneesEscaped);\n+      facetTopAggregation = assigneeFacetBuilder.addSelectedItemsToFacet(fieldName, facetName, facetTopAggregation, assigneesEscaped.toArray());\n     }\n \n     // Add missing facet for unassigned issues"
    },
    {
        "commit_id": "c6d1b136d095f10f87ea250e2d0ebe8de46577dd",
        "commit_message": "SONAR-6262 Fix display of links in components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6d1b136d095f10f87ea250e2d0ebe8de46577dd",
        "buggy_code": "public static List<String> PROVIDED_TYPES = ImmutableList.of(TYPE_HOME_PAGE, TYPE_CI, TYPE_ISSUE_TRACKER, TYPE_SOURCES, TYPE_SOURCES_DEV);",
        "fixed_code": "public static final List<String> PROVIDED_TYPES = ImmutableList.of(TYPE_HOME_PAGE, TYPE_CI, TYPE_ISSUE_TRACKER, TYPE_SOURCES, TYPE_SOURCES_DEV);",
        "patch": "@@ -36,7 +36,7 @@ public class ComponentLinkDto {\n   public static final String TYPE_SOURCES = \"scm\";\n   public static final String TYPE_SOURCES_DEV = \"scm_dev\";\n \n-  public static List<String> PROVIDED_TYPES = ImmutableList.of(TYPE_HOME_PAGE, TYPE_CI, TYPE_ISSUE_TRACKER, TYPE_SOURCES, TYPE_SOURCES_DEV);\n+  public static final List<String> PROVIDED_TYPES = ImmutableList.of(TYPE_HOME_PAGE, TYPE_CI, TYPE_ISSUE_TRACKER, TYPE_SOURCES, TYPE_SOURCES_DEV);\n \n   private Long id;\n   private String componentUuid;"
    },
    {
        "commit_id": "81694b1f98c68e84d893205bc0a416544cf1aac4",
        "commit_message": "SONAR-6273 Fix NPE when working on projects with branches",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/81694b1f98c68e84d893205bc0a416544cf1aac4",
        "buggy_code": "ProjectDefinition def = reactor.getProject(r.getEffectiveKey());",
        "fixed_code": "ProjectDefinition def = reactor.getProject(r.getKey());",
        "patch": "@@ -92,7 +92,7 @@ private void recursiveWriteComponent(BatchResource batchResource, BatchReportWri\n       builder.addChildRefs(child.batchId());\n     }\n     if (ResourceUtils.isProject(r)) {\n-      ProjectDefinition def = reactor.getProject(r.getEffectiveKey());\n+      ProjectDefinition def = reactor.getProject(r.getKey());\n       ComponentLink.Builder linkBuilder = ComponentLink.newBuilder();\n \n       writeProjectLink(builder, def, linkBuilder, CoreProperties.LINKS_HOME_PAGE, ComponentLinkType.HOME);"
    },
    {
        "commit_id": "1f380e5f3f16ca5ff9b3512149a00dc06602d387",
        "commit_message": "SONAR-6235 Update the provided \"Assigned to me\" issue filter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f380e5f3f16ca5ff9b3512149a00dc06602d387",
        "buggy_code": ".setData(\"resolved=false|assigned_to_me=true\");",
        "fixed_code": ".setData(\"resolved=false|assignees=__me__\");",
        "patch": "@@ -84,7 +84,7 @@ private void createBuiltinIssueFilters() {\n       .setShared(true)\n       .setCreatedAt(now)\n       .setUpdatedAt(now)\n-      .setData(\"resolved=false|assigned_to_me=true\");\n+      .setData(\"resolved=false|assignees=__me__\");\n     issueFilterDao.insert(myUnresolvedFilter);\n \n   }"
    },
    {
        "commit_id": "048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "commit_message": "Use default 8% for error margin of performance tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "buggy_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -112,7 +112,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);\n+    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").get();"
    },
    {
        "commit_id": "048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "commit_message": "Use default 8% for error margin of performance tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "buggy_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);",
        "fixed_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -84,7 +84,7 @@ private void scrollRows() throws SQLException {\n       long period = end - start;\n       long throughputPerSecond = 1000L * counter.get() / period;\n       LOGGER.info(String.format(\"%d FILE_SOURCES rows scrolled in %d ms (%d rows/second)\", counter.get(), period, throughputPerSecond));\n-      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);\n+      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n \n     } finally {\n       DbUtils.closeQuietly(connection);"
    },
    {
        "commit_id": "048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "commit_message": "Use default 8% for error margin of performance tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/048f2d4fcef3eacef538d61ef79e75992c0c12a2",
        "buggy_code": "benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, 0.04);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);",
        "patch": "@@ -88,7 +88,7 @@ private void benchmarkIndexing() {\n     long nbLines = files.count.get() * LINES_PER_FILE;\n     long throughputPerSecond = 1000L * nbLines / period;\n     LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n-    benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, 0.04);\n+    benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();"
    },
    {
        "commit_id": "7f7aa0b194631a3bc77315655e9cf3809f9d7fed",
        "commit_message": "SONAR-6217 SONAR-6218 Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f7aa0b194631a3bc77315655e9cf3809f9d7fed",
        "buggy_code": "assertThat(show.params()).hasSize(1);",
        "fixed_code": "assertThat(show.params()).hasSize(2);",
        "patch": "@@ -48,7 +48,7 @@ public void define_ws() throws Exception {\n     assertThat(show.since()).isEqualTo(\"4.4\");\n     assertThat(show.isInternal()).isFalse();\n     assertThat(show.responseExampleAsString()).isNotEmpty();\n-    assertThat(show.params()).hasSize(1);\n+    assertThat(show.params()).hasSize(2);\n   }\n \n }"
    },
    {
        "commit_id": "7f7aa0b194631a3bc77315655e9cf3809f9d7fed",
        "commit_message": "SONAR-6217 SONAR-6218 Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f7aa0b194631a3bc77315655e9cf3809f9d7fed",
        "buggy_code": "assertThat(action.params()).hasSize(2);",
        "fixed_code": "assertThat(action.params()).hasSize(3);",
        "patch": "@@ -83,7 +83,7 @@ public void define_test_cases_action() throws Exception {\n     assertThat(action.isPost()).isFalse();\n     assertThat(action.handler()).isNotNull();\n     assertThat(action.responseExampleAsString()).isNotEmpty();\n-    assertThat(action.params()).hasSize(2);\n+    assertThat(action.params()).hasSize(3);\n   }\n \n }"
    },
    {
        "commit_id": "7e2f105666f4fc4acb59200114a950e789aa35c9",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  SONAR-5884 update coverage tooltips\n  Fix quality flaws\n  Fix indexing of issues -> mix functional and technical dates\n  SONAR-4624 Add \"won't fix\" in the Administer Issues permission\n  SONAR-6055 Embed latest Java 3.0 plugin and stop embedding Findbugs Plugin",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e2f105666f4fc4acb59200114a950e789aa35c9",
        "buggy_code": "maxDate = Math.max(maxDate, issue.updateDate().getTime());",
        "fixed_code": "maxDate = Math.max(maxDate, issue.getTechnicalUpdateDate().getTime());",
        "patch": "@@ -82,7 +82,7 @@ private long doIndex(BulkIndexer bulk, Iterator<IssueDoc> issues) {\n       bulk.add(newUpsertRequest(issue));\n \n       // it's more efficient to sort programmatically than in SQL on some databases (MySQL for instance)\n-      maxDate = Math.max(maxDate, issue.updateDate().getTime());\n+      maxDate = Math.max(maxDate, issue.getTechnicalUpdateDate().getTime());\n     }\n     bulk.stop();\n     return maxDate;"
    },
    {
        "commit_id": "29f7b15feea86c67c8e75fb89c8fa0dd4b807ba8",
        "commit_message": "Fix indexing of issues -> mix functional and technical dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29f7b15feea86c67c8e75fb89c8fa0dd4b807ba8",
        "buggy_code": "maxDate = Math.max(maxDate, issue.updateDate().getTime());",
        "fixed_code": "maxDate = Math.max(maxDate, issue.getTechnicalUpdateDate().getTime());",
        "patch": "@@ -82,7 +82,7 @@ private long doIndex(BulkIndexer bulk, Iterator<IssueDoc> issues) {\n       bulk.add(newUpsertRequest(issue));\n \n       // it's more efficient to sort programmatically than in SQL on some databases (MySQL for instance)\n-      maxDate = Math.max(maxDate, issue.updateDate().getTime());\n+      maxDate = Math.max(maxDate, issue.getTechnicalUpdateDate().getTime());\n     }\n     bulk.stop();\n     return maxDate;"
    },
    {
        "commit_id": "c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  SONAR-5945 close issues on deleted components\n  Fix error margin of SourceDbBenchmarkTest\n  Fix error margin of server benchmark\n  Fix Javadoc and add useful method using Charset for RulesDefinitionXmlLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "buggy_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);",
        "patch": "@@ -112,7 +112,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);\n+    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").get();"
    },
    {
        "commit_id": "c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  SONAR-5945 close issues on deleted components\n  Fix error margin of SourceDbBenchmarkTest\n  Fix error margin of server benchmark\n  Fix Javadoc and add useful method using Charset for RulesDefinitionXmlLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "buggy_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.04);",
        "fixed_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);",
        "patch": "@@ -84,7 +84,7 @@ private void scrollRows() throws SQLException {\n       long period = end - start;\n       long throughputPerSecond = 1000L * counter.get() / period;\n       LOGGER.info(String.format(\"%d FILE_SOURCES rows scrolled in %d ms (%d rows/second)\", counter.get(), period, throughputPerSecond));\n-      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.04);\n+      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);\n \n     } finally {\n       DbUtils.closeQuietly(connection);"
    },
    {
        "commit_id": "c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  SONAR-5945 close issues on deleted components\n  Fix error margin of SourceDbBenchmarkTest\n  Fix error margin of server benchmark\n  Fix Javadoc and add useful method using Charset for RulesDefinitionXmlLoader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c28f679d77f99cc00ade34fd3c0eba38b84ddfc3",
        "buggy_code": "ISSUES(\"issues-\"), COMPONENT(\"component-\");",
        "fixed_code": "ISSUES(\"issues-\"), ISSUES_ON_DELETED(\"issues-deleted-\"), COMPONENT(\"component-\");",
        "patch": "@@ -27,7 +27,7 @@\n public class FileStructure {\n \n   public static enum Domain {\n-    ISSUES(\"issues-\"), COMPONENT(\"component-\");\n+    ISSUES(\"issues-\"), ISSUES_ON_DELETED(\"issues-deleted-\"), COMPONENT(\"component-\");\n \n     private final String filePrefix;\n "
    },
    {
        "commit_id": "ae4801956efbc9eba1971d0b899267a3e8406c42",
        "commit_message": "Fix error margin of SourceDbBenchmarkTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae4801956efbc9eba1971d0b899267a3e8406c42",
        "buggy_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.04);",
        "fixed_code": "benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);",
        "patch": "@@ -84,7 +84,7 @@ private void scrollRows() throws SQLException {\n       long period = end - start;\n       long throughputPerSecond = 1000L * counter.get() / period;\n       LOGGER.info(String.format(\"%d FILE_SOURCES rows scrolled in %d ms (%d rows/second)\", counter.get(), period, throughputPerSecond));\n-      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.04);\n+      benchmark.expectAround(\"Throughput to scroll FILE_SOURCES\", throughputPerSecond, 120, 0.08);\n \n     } finally {\n       DbUtils.closeQuietly(connection);"
    },
    {
        "commit_id": "29cb666027135482de9e93aeaa89b20dcb015b33",
        "commit_message": "Fix error margin of server benchmark",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29cb666027135482de9e93aeaa89b20dcb015b33",
        "buggy_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);",
        "patch": "@@ -112,7 +112,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);\n+    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3400, 0.06);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").get();"
    },
    {
        "commit_id": "87e6c20902ab4200af6ff49c1522a06c03fc61d6",
        "commit_message": "SONAR-6234 fix widget name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/87e6c20902ab4200af6ff49c1522a06c03fc61d6",
        "buggy_code": "super(ID, \"Issue Filter\", \"/org/sonar/plugins/core/widgets/issues/project_issue_filter.html.erb\");",
        "fixed_code": "super(ID, \"Project Issue Filter\", \"/org/sonar/plugins/core/widgets/issues/project_issue_filter.html.erb\");",
        "patch": "@@ -41,6 +41,6 @@ public class ProjectIssueFilterWidget extends CoreWidget {\n   public static final String ID = \"project_issue_filter\";\n \n   public ProjectIssueFilterWidget() {\n-    super(ID, \"Issue Filter\", \"/org/sonar/plugins/core/widgets/issues/project_issue_filter.html.erb\");\n+    super(ID, \"Project Issue Filter\", \"/org/sonar/plugins/core/widgets/issues/project_issue_filter.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "7c6ee4b7c3140ed0eccd6b4ed7c4b641ad25596e",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  Improve assertions in server benchmarks\n  update shortcuts help labels\n  Fix compatibility of tests with Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c6ee4b7c3140ed0eccd6b4ed7c4b641ad25596e",
        "buggy_code": "benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 3000, 3400);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);",
        "patch": "@@ -112,7 +112,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 3000, 3400);\n+    benchmark.expectAround(\"Throughput to index issues\", throughputPerSecond, 3000, 0.04);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").get();"
    },
    {
        "commit_id": "7c6ee4b7c3140ed0eccd6b4ed7c4b641ad25596e",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  Improve assertions in server benchmarks\n  update shortcuts help labels\n  Fix compatibility of tests with Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c6ee4b7c3140ed0eccd6b4ed7c4b641ad25596e",
        "buggy_code": "benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7500, 8000);",
        "fixed_code": "benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, 0.04);",
        "patch": "@@ -88,7 +88,7 @@ private void benchmarkIndexing() {\n     long nbLines = files.count.get() * LINES_PER_FILE;\n     long throughputPerSecond = 1000L * nbLines / period;\n     LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n-    benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7500, 8000);\n+    benchmark.expectAround(\"Throughput to index source lines\", throughputPerSecond, 7800, 0.04);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();"
    },
    {
        "commit_id": "e0d9c3793d99ff6a26c694bf0f1d9af2e73b4950",
        "commit_message": "Automatic merge from master\n\n* origin/master:\n  fix source viewer test\n  Add search the ability to search for rules by profiles in RubyRuleService Needed to fix SQALE-269\n  SONAR-5884 show ut and it coverage separately\n  SONAR-5884 show ut and it coverage separately\n  SONAR-5884 Apply feedback on unit test and field names\n  SONAR-5884 Replace overall coverage with UT coverage, add IT coverage info\n  Revert \"SONAR-6202 Compute overall coverage on all files\"\n  SONAR-5077 Display ncloc of files with no language in size widget\n  SONAR-6233 Searching for rules without debt characteristic is not working\n  fix bug with extra duplicated line in the popup\n  fix bug with extra duplicated line\n  Fix quality flaws\n  update events widget\n  Update version of Git and SVN plugins to 1.0",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0d9c3793d99ff6a26c694bf0f1d9af2e73b4950",
        "buggy_code": ".setRequired(false)",
        "fixed_code": ".setRequired(true)",
        "patch": "@@ -62,7 +62,7 @@ public void define(WebService.NewController controller) {\n \n     action\n       .createParam(PARAM_REPORT_DATA)\n-      .setRequired(false)\n+      .setRequired(true)\n       .setDescription(\"Report file. Format is not an API, it changes among SonarQube versions.\");\n   }\n "
    },
    {
        "commit_id": "3576710090a88ea826bf71313b3a8368c0f740bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3576710090a88ea826bf71313b3a8368c0f740bb",
        "buggy_code": ".setRequired(false)",
        "fixed_code": ".setRequired(true)",
        "patch": "@@ -62,7 +62,7 @@ public void define(WebService.NewController controller) {\n \n     action\n       .createParam(PARAM_REPORT_DATA)\n-      .setRequired(false)\n+      .setRequired(true)\n       .setDescription(\"Report file. Format is not an API, it changes among SonarQube versions.\");\n   }\n "
    },
    {
        "commit_id": "db229037bdb6e7a8ab8289efbe791bd75a6295db",
        "commit_message": "fix merge 5.2",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db229037bdb6e7a8ab8289efbe791bd75a6295db",
        "buggy_code": "\u00e5ComputationContext context = new ComputationContext(mock(BatchReportReader.class), project);",
        "fixed_code": "ComputationContext context = new ComputationContext(mock(BatchReportReader.class), project);",
        "patch": "@@ -51,7 +51,7 @@ public void call_purge_method_of_the_purge_task() throws IOException {\n     ComponentDto project = mock(ComponentDto.class);\n     when(project.getId()).thenReturn(123L);\n     when(project.uuid()).thenReturn(\"UUID-1234\");\n-    \u00e5ComputationContext context = new ComputationContext(mock(BatchReportReader.class), project);\n+    ComputationContext context = new ComputationContext(mock(BatchReportReader.class), project);\n \n     sut.execute(context);\n "
    },
    {
        "commit_id": "e4dc2a8ea862b81881453c7ef06e41e366a99ebf",
        "commit_message": "fix connection leak",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e4dc2a8ea862b81881453c7ef06e41e366a99ebf",
        "buggy_code": "context.setProjectSettings(projectSettingsFactory.newProjectSettings(dbClient.openSession(false), project.getId()));",
        "fixed_code": "context.setProjectSettings(projectSettingsFactory.newProjectSettings(project.getId()));",
        "patch": "@@ -61,7 +61,7 @@ public void process(AnalysisReportDto report) {\n     ComponentDto project = loadProject(report);\n     try {\n       ComputationContext context = new ComputationContext(report, project);\n-      context.setProjectSettings(projectSettingsFactory.newProjectSettings(dbClient.openSession(false), project.getId()));\n+      context.setProjectSettings(projectSettingsFactory.newProjectSettings(project.getId()));\n       for (ComputationStep step : steps.orderedSteps()) {\n         if (ArrayUtils.contains(step.supportedProjectQualifiers(), context.getProject().qualifier())) {\n           Profiler stepProfiler = Profiler.create(LOG).startInfo(step.getDescription());"
    },
    {
        "commit_id": "908b9d0b5b9c21fabd10d697a5466bcc12d80d83",
        "commit_message": "SONAR-5927, SONAR-6012 Rework incremental preview mode to speedup issue retrieval",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/908b9d0b5b9c21fabd10d697a5466bcc12d80d83",
        "buggy_code": "public interface PreviousIssue {",
        "fixed_code": "public interface ServerIssue {",
        "patch": "@@ -23,7 +23,7 @@\n \n import javax.annotation.CheckForNull;\n \n-public interface PreviousIssue {\n+public interface ServerIssue {\n \n   String key();\n "
    },
    {
        "commit_id": "908b9d0b5b9c21fabd10d697a5466bcc12d80d83",
        "commit_message": "SONAR-5927, SONAR-6012 Rework incremental preview mode to speedup issue retrieval",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/908b9d0b5b9c21fabd10d697a5466bcc12d80d83",
        "buggy_code": "DefaultAnalysisMode analysisMode = new DefaultAnalysisMode(bootstrapProperties);",
        "fixed_code": "DefaultAnalysisMode analysisMode = new DefaultAnalysisMode(Collections.<String, String>emptyMap());",
        "patch": "@@ -62,7 +62,7 @@ public class ProjectScanContainerTest {\n   public void prepare() {\n     projectBootstrapper = mock(ProjectBootstrapper.class);\n     bootstrapProperties = new BootstrapProperties(Collections.<String, String>emptyMap());\n-    DefaultAnalysisMode analysisMode = new DefaultAnalysisMode(bootstrapProperties);\n+    DefaultAnalysisMode analysisMode = new DefaultAnalysisMode(Collections.<String, String>emptyMap());\n     when(projectBootstrapper.bootstrap()).thenReturn(new ProjectReactor(ProjectDefinition.create()));\n     parentContainer = new ComponentContainer();\n     parentContainer.add(System2.INSTANCE);"
    },
    {
        "commit_id": "98c4b34bade9af878d170bd429ac4b3207b930b4",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/98c4b34bade9af878d170bd429ac4b3207b930b4",
        "buggy_code": "if (!(this.getClass() == o.getClass())) {",
        "fixed_code": "if (o == null || this.getClass() != o.getClass()) {",
        "patch": "@@ -83,7 +83,7 @@ public boolean equals(Object o) {\n     if (this == o) {\n       return true;\n     }\n-    if (!(this.getClass() == o.getClass())) {\n+    if (o == null || this.getClass() != o.getClass()) {\n       return false;\n     }\n "
    },
    {
        "commit_id": "7da2dd85e6006655ba0c39d7b4fcd569daa2b379",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7da2dd85e6006655ba0c39d7b4fcd569daa2b379",
        "buggy_code": "public void define(WebService.NewController controller);",
        "fixed_code": "void define(WebService.NewController controller);",
        "patch": "@@ -25,5 +25,5 @@\n \n public interface SystemWsAction extends RequestHandler {\n \n-  public void define(WebService.NewController controller);\n+  void define(WebService.NewController controller);\n }"
    },
    {
        "commit_id": "079096f44a4a5aed828d936e87596bef604303ce",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/079096f44a4a5aed828d936e87596bef604303ce",
        "buggy_code": "public static abstract class RollingPolicy {",
        "fixed_code": "public abstract static class RollingPolicy {",
        "patch": "@@ -110,7 +110,7 @@ public RollingPolicy createRollingPolicy(Context ctx, Props props, String filena\n     }\n   }\n \n-  public static abstract class RollingPolicy {\n+  public abstract static class RollingPolicy {\n     protected final Context context;\n     protected final String filenamePrefix;\n     protected final File logsDir;"
    },
    {
        "commit_id": "2bc4e191083b996abf80bcbc535064bce6881bed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2bc4e191083b996abf80bcbc535064bce6881bed",
        "buggy_code": "} else if (rollingPolicy.equals(\"none\")) {",
        "fixed_code": "} else if (\"none\".equals(rollingPolicy)) {",
        "patch": "@@ -102,7 +102,7 @@ public RollingPolicy createRollingPolicy(Context ctx, Props props, String filena\n     } else if (rollingPolicy.startsWith(\"size:\")) {\n       return new SizeRollingPolicy(ctx, filenamePrefix, logsDir, maxFiles, StringUtils.substringAfter(rollingPolicy, \"size:\"));\n \n-    } else if (rollingPolicy.equals(\"none\")) {\n+    } else if (\"none\".equals(rollingPolicy)) {\n       return new NoRollingPolicy(ctx, filenamePrefix, logsDir, maxFiles);\n \n     } else {"
    },
    {
        "commit_id": "2bc4e191083b996abf80bcbc535064bce6881bed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2bc4e191083b996abf80bcbc535064bce6881bed",
        "buggy_code": "public static final Logger SQL_LOGGER = Loggers.get(\"sql\");",
        "fixed_code": "static final Logger SQL_LOGGER = Loggers.get(\"sql\");",
        "patch": "@@ -31,7 +31,7 @@\n \n public class ProfiledDataSource extends BasicDataSource {\n \n-  public static final Logger SQL_LOGGER = Loggers.get(\"sql\");\n+  static final Logger SQL_LOGGER = Loggers.get(\"sql\");\n \n   private final BasicDataSource delegate;\n "
    },
    {
        "commit_id": "2bc4e191083b996abf80bcbc535064bce6881bed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2bc4e191083b996abf80bcbc535064bce6881bed",
        "buggy_code": "Preconditions.checkNotNull(input, \"Null inputs are not allowed in this function\");",
        "fixed_code": "Preconditions.checkArgument(input != null, \"Null inputs are not allowed in this function\");",
        "patch": "@@ -32,7 +32,7 @@ public abstract class NonNullInputFunction<F,T> implements Function<F, T> {\n \n   @Override\n   public final T apply(@Nullable F input) {\n-    Preconditions.checkNotNull(input, \"Null inputs are not allowed in this function\");\n+    Preconditions.checkArgument(input != null, \"Null inputs are not allowed in this function\");\n     return doApply(input);\n   }\n "
    },
    {
        "commit_id": "2bc4e191083b996abf80bcbc535064bce6881bed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2bc4e191083b996abf80bcbc535064bce6881bed",
        "buggy_code": "} catch (NullPointerException e) {",
        "fixed_code": "} catch (IllegalArgumentException e) {",
        "patch": "@@ -33,7 +33,7 @@ public void fail_if_null_input() throws Exception {\n     try {\n       sut.apply(null);\n       fail();\n-    } catch (NullPointerException e) {\n+    } catch (IllegalArgumentException e) {\n       assertThat(e).hasMessage(\"Null inputs are not allowed in this function\");\n     }\n   }"
    },
    {
        "commit_id": "2bc4e191083b996abf80bcbc535064bce6881bed",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2bc4e191083b996abf80bcbc535064bce6881bed",
        "buggy_code": "protected LoggerLevel getLevel() {",
        "fixed_code": "LoggerLevel getLevel() {",
        "patch": "@@ -75,7 +75,7 @@ protected void after() {\n     setLevel(initialLevel);\n   }\n \n-  protected LoggerLevel getLevel() {\n+  LoggerLevel getLevel() {\n     return Loggers.getFactory().getLevel();\n   }\n "
    },
    {
        "commit_id": "ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "buggy_code": "private static InetAddress instance;",
        "fixed_code": "private static volatile InetAddress instance;",
        "patch": "@@ -27,7 +27,7 @@\n \n public class LoopbackAddress {\n \n-  private static InetAddress instance;\n+  private static volatile InetAddress instance;\n \n   private LoopbackAddress() {\n     // only static stuff"
    },
    {
        "commit_id": "ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "buggy_code": "private static WSUtils instance = null;",
        "fixed_code": "private static volatile WSUtils instance = null;",
        "patch": "@@ -31,7 +31,7 @@\n  */\n public abstract class WSUtils {\n \n-  private static WSUtils instance = null;\n+  private static volatile WSUtils instance = null;\n \n   public static void setInstance(WSUtils utils) {\n     instance = utils;"
    },
    {
        "commit_id": "ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5c44dd34ba4e77d43a0f6b67c9326a38c243dc",
        "buggy_code": "private static Map<Class, Unmarshaller> unmarshallers;",
        "fixed_code": "private static volatile Map<Class, Unmarshaller> unmarshallers;",
        "patch": "@@ -28,7 +28,7 @@ public final class Unmarshallers {\n   private Unmarshallers() {\n   }\n \n-  private static Map<Class, Unmarshaller> unmarshallers;\n+  private static volatile Map<Class, Unmarshaller> unmarshallers;\n \n   static {\n     unmarshallers = new HashMap<Class, Unmarshaller>();"
    },
    {
        "commit_id": "9ce28f33bd1014bfee51c4b7587823c9258fd874",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ce28f33bd1014bfee51c4b7587823c9258fd874",
        "buggy_code": "public static MasterServletFilter INSTANCE;",
        "fixed_code": "public static volatile MasterServletFilter INSTANCE;",
        "patch": "@@ -37,7 +37,7 @@\n  */\n public class MasterServletFilter implements Filter {\n \n-  public static MasterServletFilter INSTANCE;\n+  public static volatile MasterServletFilter INSTANCE;\n   private ServletFilter[] filters;\n   private FilterConfig config;\n "
    },
    {
        "commit_id": "cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "commit_message": "Revert \"Fix quality flaws\"\n\nThis reverts commit 7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "buggy_code": "if (this.getClass() != object.getClass()) {",
        "fixed_code": "if (!(object instanceof CloneGroup)) {",
        "patch": "@@ -135,7 +135,7 @@ public String toString() {\n    */\n   @Override\n   public boolean equals(Object object) {\n-    if (this.getClass() != object.getClass()) {\n+    if (!(object instanceof CloneGroup)) {\n       return false;\n     }\n     CloneGroup another = (CloneGroup) object;"
    },
    {
        "commit_id": "cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "commit_message": "Revert \"Fix quality flaws\"\n\nThis reverts commit 7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "buggy_code": "if (this.getClass() == obj.getClass()) {",
        "fixed_code": "if (obj instanceof ClonePart) {",
        "patch": "@@ -64,7 +64,7 @@ public int getLines() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (this.getClass() == obj.getClass()) {\n+    if (obj instanceof ClonePart) {\n       ClonePart another = (ClonePart) obj;\n       return another.resourceId.equals(resourceId)\n         && another.startLine == startLine"
    },
    {
        "commit_id": "cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "commit_message": "Revert \"Fix quality flaws\"\n\nThis reverts commit 7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "buggy_code": "if (this.getClass() != obj.getClass()) {",
        "fixed_code": "if (!(obj instanceof Statement)) {",
        "patch": "@@ -82,7 +82,7 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (this.getClass() != obj.getClass()) {\n+    if (!(obj instanceof Statement)) {\n       return false;\n     }\n     Statement other = (Statement) obj;"
    },
    {
        "commit_id": "cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "commit_message": "Revert \"Fix quality flaws\"\n\nThis reverts commit 7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc12644634a2b5d5d2d63764f4e0f97fc3ed333d",
        "buggy_code": "if (this.getClass() == object.getClass()) {",
        "fixed_code": "if (object instanceof Token) {",
        "patch": "@@ -50,7 +50,7 @@ public String getValue() {\n \n   @Override\n   public boolean equals(Object object) {\n-    if (this.getClass() == object.getClass()) {\n+    if (object instanceof Token) {\n       Token anotherToken = (Token) object;\n       return anotherToken.line == line && anotherToken.column == column && anotherToken.value.equals(value);\n     }"
    },
    {
        "commit_id": "7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "buggy_code": "if (!(object instanceof CloneGroup)) {",
        "fixed_code": "if (this.getClass() != object.getClass()) {",
        "patch": "@@ -135,7 +135,7 @@ public String toString() {\n    */\n   @Override\n   public boolean equals(Object object) {\n-    if (!(object instanceof CloneGroup)) {\n+    if (this.getClass() != object.getClass()) {\n       return false;\n     }\n     CloneGroup another = (CloneGroup) object;"
    },
    {
        "commit_id": "7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "buggy_code": "if (obj instanceof ClonePart) {",
        "fixed_code": "if (this.getClass() == obj.getClass()) {",
        "patch": "@@ -64,7 +64,7 @@ public int getLines() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (obj instanceof ClonePart) {\n+    if (this.getClass() == obj.getClass()) {\n       ClonePart another = (ClonePart) obj;\n       return another.resourceId.equals(resourceId)\n         && another.startLine == startLine"
    },
    {
        "commit_id": "7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "buggy_code": "if (!(obj instanceof Statement)) {",
        "fixed_code": "if (this.getClass() != obj.getClass()) {",
        "patch": "@@ -82,7 +82,7 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (!(obj instanceof Statement)) {\n+    if (this.getClass() != obj.getClass()) {\n       return false;\n     }\n     Statement other = (Statement) obj;"
    },
    {
        "commit_id": "7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7efdaa4a6e4f2ce8cbcc024e74407ccb13a413d3",
        "buggy_code": "if (object instanceof Token) {",
        "fixed_code": "if (this.getClass() == object.getClass()) {",
        "patch": "@@ -50,7 +50,7 @@ public String getValue() {\n \n   @Override\n   public boolean equals(Object object) {\n-    if (object instanceof Token) {\n+    if (this.getClass() == object.getClass()) {\n       Token anotherToken = (Token) object;\n       return anotherToken.line == line && anotherToken.column == column && anotherToken.value.equals(value);\n     }"
    },
    {
        "commit_id": "dd5c6a9d606bcf9a6c3b7df612f5632cb9f4fc87",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd5c6a9d606bcf9a6c3b7df612f5632cb9f4fc87",
        "buggy_code": "if (!(o instanceof DefaultInputDir)) {",
        "fixed_code": "if (!(this.getClass() == o.getClass())) {",
        "patch": "@@ -83,7 +83,7 @@ public boolean equals(Object o) {\n     if (this == o) {\n       return true;\n     }\n-    if (!(o instanceof DefaultInputDir)) {\n+    if (!(this.getClass() == o.getClass())) {\n       return false;\n     }\n "
    },
    {
        "commit_id": "dd5c6a9d606bcf9a6c3b7df612f5632cb9f4fc87",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd5c6a9d606bcf9a6c3b7df612f5632cb9f4fc87",
        "buggy_code": "if (!(obj instanceof Category)) {",
        "fixed_code": "if (!(this.getClass() == obj.getClass())) {",
        "patch": "@@ -59,7 +59,7 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (!(obj instanceof Category)) {\n+    if (!(this.getClass() == obj.getClass())) {\n       return false;\n     }\n     return StringUtils.equalsIgnoreCase(((Category) obj).originalKey, this.originalKey);"
    },
    {
        "commit_id": "2e3b73ad771219dbe958397853e9d2842114fc56",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2e3b73ad771219dbe958397853e9d2842114fc56",
        "buggy_code": "private final transient ch.qos.logback.classic.Logger logback;",
        "fixed_code": "private final ch.qos.logback.classic.Logger logback;",
        "patch": "@@ -29,7 +29,7 @@\n  */\n class LogbackLogger extends BaseLogger {\n \n-  private final transient ch.qos.logback.classic.Logger logback;\n+  private final ch.qos.logback.classic.Logger logback;\n \n   LogbackLogger(ch.qos.logback.classic.Logger logback) {\n     this.logback = logback;"
    },
    {
        "commit_id": "debb5c4828a05a05812bac2bdc430ed15f28b52d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/debb5c4828a05a05812bac2bdc430ed15f28b52d",
        "buggy_code": "private static LogInterceptor instance = NullInterceptor.NULL_INSTANCE;",
        "fixed_code": "private static volatile LogInterceptor instance = NullInterceptor.NULL_INSTANCE;",
        "patch": "@@ -23,7 +23,7 @@\n \n class LogInterceptors {\n \n-  private static LogInterceptor instance = NullInterceptor.NULL_INSTANCE;\n+  private static volatile LogInterceptor instance = NullInterceptor.NULL_INSTANCE;\n \n   private LogInterceptors() {\n   }"
    },
    {
        "commit_id": "a4e409caa5f745b9895fe38a05f34ecf931af7d3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a4e409caa5f745b9895fe38a05f34ecf931af7d3",
        "buggy_code": "private StringBuffer sb = new StringBuffer();",
        "fixed_code": "private StringBuilder sb = new StringBuilder();",
        "patch": "@@ -139,7 +139,7 @@ public boolean isEmpty() {\n \n   private static class FileHashComputer extends CharHandler {\n     private MessageDigest globalMd5Digest = DigestUtils.getMd5Digest();\n-    private StringBuffer sb = new StringBuffer();\n+    private StringBuilder sb = new StringBuilder();\n \n     @Override\n     void handleIgnoreEoL(char c) {"
    },
    {
        "commit_id": "a4e409caa5f745b9895fe38a05f34ecf931af7d3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a4e409caa5f745b9895fe38a05f34ecf931af7d3",
        "buggy_code": "if (left != null & right != null) {",
        "fixed_code": "if (left != null && right != null) {",
        "patch": "@@ -78,7 +78,7 @@ public static class ReferenceComparator implements Comparator<Integer>, Serializ\n     @Override\n     public int compare(Integer left, Integer right) {\n       int result;\n-      if (left != null & right != null) {\n+      if (left != null && right != null) {\n         result = left - right;\n       } else {\n         result = left == null ? -1 : 1;"
    },
    {
        "commit_id": "c8b23efd4cb7aae3b697a3745ef93e8f824d2369",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c8b23efd4cb7aae3b697a3745ef93e8f824d2369",
        "buggy_code": "} else if (!characteristic.getParentId().equals(parent.getId())) {",
        "fixed_code": "} else if (!parentId.equals(parent.getId())) {",
        "patch": "@@ -254,7 +254,7 @@ public boolean apply(@Nullable Characteristic input) {\n         Integer parentId = characteristic.getParentId();\n         if (parentId == null) {\n           throw MessageException.of(String.format(\"'%s' must be a sub-characteristic. \" + ERROR_SUFFIX, characteristic.getName()));\n-        } else if (!characteristic.getParentId().equals(parent.getId())) {\n+        } else if (!parentId.equals(parent.getId())) {\n           throw MessageException.of(String.format(\"'%s' must be defined under '%s'. \" + ERROR_SUFFIX, characteristic.getName(), parent.getName()));\n         }\n       }"
    },
    {
        "commit_id": "a66973a3b3b249effd46904307d249ae4b5abea5",
        "commit_message": "Fix non-deterministic NPE in BaseLogger due to incorrect static field initialization",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a66973a3b3b249effd46904307d249ae4b5abea5",
        "buggy_code": "assertThat(LogInterceptor.instance()).isSameAs(NullInterceptor.NULL_INSTANCE);",
        "fixed_code": "assertThat(LogInterceptors.get()).isSameAs(NullInterceptor.NULL_INSTANCE);",
        "patch": "@@ -59,6 +59,6 @@ public void intercept_logs() throws Throwable {\n     assertThat(sut.logs()).isEmpty();\n \n     sut.after();\n-    assertThat(LogInterceptor.instance()).isSameAs(NullInterceptor.NULL_INSTANCE);\n+    assertThat(LogInterceptors.get()).isSameAs(NullInterceptor.NULL_INSTANCE);\n   }\n }"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": ".ruleKey(ruleKey)",
        "fixed_code": ".forRule(ruleKey)",
        "patch": "@@ -38,7 +38,7 @@ public class TemplateRuleCheck implements Check {\n   public void execute(SensorContext sensorContext, InputFile file, RuleKey ruleKey) {\n     sensorContext.newIssue()\n       .onFile(file)\n-      .ruleKey(ruleKey)\n+      .forRule(ruleKey)\n       .atLine(line)\n       .save();\n   }"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": ".ruleKey(rule.ruleKey())",
        "fixed_code": ".forRule(rule.ruleKey())",
        "patch": "@@ -55,7 +55,7 @@ private void createIssues(InputFile file, SensorContext context) {\n       context.settings().getString(INTERNAL_KEY_PROPERTY));\n     if (rule != null) {\n       context.newIssue()\n-        .ruleKey(rule.ruleKey())\n+        .forRule(rule.ruleKey())\n         .onFile(file)\n         .message(\"This issue is generated on each file\")\n         .save();"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": ".ruleKey(ruleKey)",
        "fixed_code": ".forRule(ruleKey)",
        "patch": "@@ -51,7 +51,7 @@ private void createIssues(InputFile file, SensorContext context) {\n     InputDir inputDir = context.fileSystem().inputDir(file.file().getParentFile());\n     if (inputDir != null) {\n       context.newIssue()\n-        .ruleKey(ruleKey)\n+        .forRule(ruleKey)\n         .onDir(inputDir)\n         .message(\"This issue is generated for file \" + file.relativePath())\n         .save();"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": ".ruleKey(ruleKey)",
        "fixed_code": ".forRule(ruleKey)",
        "patch": "@@ -58,7 +58,7 @@ private void createIssues(InputFile file, SensorContext context) {\n     String severity = context.settings().getString(FORCE_SEVERITY_PROPERTY);\n     for (int line = 1; line <= file.lines(); line++) {\n       context.newIssue()\n-        .ruleKey(ruleKey)\n+        .forRule(ruleKey)\n         .onFile(file)\n         .atLine(line)\n         .effortToFix(context.settings().getDouble(EFFORT_TO_FIX_PROPERTY))"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": ".ruleKey(ruleKey)",
        "fixed_code": ".forRule(ruleKey)",
        "patch": "@@ -64,7 +64,7 @@ public void execute(SensorContext context) {\n   private void createIssues(InputFile file, SensorContext context) {\n     RuleKey ruleKey = RuleKey.of(XooRulesDefinition.XOO_REPOSITORY, RULE_KEY);\n     context.newIssue()\n-      .ruleKey(ruleKey)\n+      .forRule(ruleKey)\n       .onFile(file)\n       .atLine(1)\n       .message(\"This issue is generated on each file\")"
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": "NewIssue ruleKey(RuleKey ruleKey);",
        "fixed_code": "NewIssue forRule(RuleKey ruleKey);",
        "patch": "@@ -37,7 +37,7 @@ public interface NewIssue {\n   /**\n    * The {@link RuleKey} of the issue.\n    */\n-  NewIssue ruleKey(RuleKey ruleKey);\n+  NewIssue forRule(RuleKey ruleKey);\n \n   /**\n    * The {@link InputFile} the issue belongs to. For global issues call {@link #onProject()}."
    },
    {
        "commit_id": "272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/272fb51fc5f7dcbef163938c3230ef1e4f87640a",
        "buggy_code": "public DefaultIssue ruleKey(RuleKey ruleKey) {",
        "fixed_code": "public DefaultIssue forRule(RuleKey ruleKey) {",
        "patch": "@@ -61,7 +61,7 @@ public DefaultIssue(SensorStorage storage) {\n   }\n \n   @Override\n-  public DefaultIssue ruleKey(RuleKey ruleKey) {\n+  public DefaultIssue forRule(RuleKey ruleKey) {\n     this.ruleKey = ruleKey;\n     return this;\n   }"
    },
    {
        "commit_id": "51db1a41ea40cf2d07f4cebaf2feef12d80c2a34",
        "commit_message": "SONAR-5931 Cleanup new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51db1a41ea40cf2d07f4cebaf2feef12d80c2a34",
        "buggy_code": "package org.sonar.api.batch.sensor;",
        "fixed_code": "package org.sonar.api.batch.sensor.internal;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.batch.sensor;\n+package org.sonar.api.batch.sensor.internal;\n \n import org.sonar.api.batch.sensor.dependency.Dependency;\n import org.sonar.api.batch.sensor.duplication.Duplication;"
    },
    {
        "commit_id": "c4b5599db5513b38019997dff7a787880208c4c9",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c4b5599db5513b38019997dff7a787880208c4c9",
        "buggy_code": "thrown.expectMessage(\"Error during processing of row: [id=1]\");",
        "fixed_code": "thrown.expectMessage(\"Error during processing of row: [id=1,data=\");",
        "patch": "@@ -76,7 +76,7 @@ public void fail_to_parse_csv() throws Exception {\n     DatabaseMigration migration = new FeedFileSourcesBinaryData(db.database());\n \n     thrown.expect(IllegalStateException.class);\n-    thrown.expectMessage(\"Error during processing of row: [id=1]\");\n+    thrown.expectMessage(\"Error during processing of row: [id=1,data=\");\n \n     migration.execute();\n   }"
    },
    {
        "commit_id": "15f8b5caf71d9f3774fde6b41310e2ea32a3a05d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/15f8b5caf71d9f3774fde6b41310e2ea32a3a05d",
        "buggy_code": "return ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource);",
        "fixed_code": "return ResourceUtils.isUnitTestFile(resource) || !ResourceUtils.isEntity(resource);",
        "patch": "@@ -47,7 +47,7 @@ public boolean shouldExecuteOnProject(Project project) {\n   }\n \n   public boolean shouldDecorateResource(Resource resource) {\n-    return ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource);\n+    return ResourceUtils.isUnitTestFile(resource) || !ResourceUtils.isEntity(resource);\n   }\n \n   @Override"
    },
    {
        "commit_id": "737f056055326ba3b6cc4483de65d2804f112d94",
        "commit_message": "SONAR-5885 Fix mapping of htmlDesc attribute to fetch correct fields in ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/737f056055326ba3b6cc4483de65d2804f112d94",
        "buggy_code": "map(\"htmlDesc\", new Mapper<RuleDoc, RuleMappingContext>() {",
        "fixed_code": "map(\"htmlDesc\", new IndexMapper<RuleDoc, RuleMappingContext>(RuleNormalizer.RuleField.MARKDOWN_DESCRIPTION.field(), RuleNormalizer.RuleField.HTML_DESCRIPTION.field()) {",
        "patch": "@@ -78,7 +78,7 @@ public void write(JsonWriter json, RuleDoc rule, RuleMappingContext context) {\n   }\n \n   private void mapDescriptionFields(final MacroInterpreter macroInterpreter) {\n-    map(\"htmlDesc\", new Mapper<RuleDoc, RuleMappingContext>() {\n+    map(\"htmlDesc\", new IndexMapper<RuleDoc, RuleMappingContext>(RuleNormalizer.RuleField.MARKDOWN_DESCRIPTION.field(), RuleNormalizer.RuleField.HTML_DESCRIPTION.field()) {\n       @Override\n       public void write(JsonWriter json, RuleDoc rule, RuleMappingContext context) {\n         if (rule.markdownDescription() != null) {"
    },
    {
        "commit_id": "e851b2631ee9c78c0cfb32d8ab12062176a4ea82",
        "commit_message": "SONAR-5596 Fix migration on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e851b2631ee9c78c0cfb32d8ab12062176a4ea82",
        "buggy_code": "\"WHERE projects.module_uuid IS NOT NULL;\");",
        "fixed_code": "\"WHERE projects.module_uuid IS NOT NULL\");",
        "patch": "@@ -53,7 +53,7 @@ private void removeUserRolePermissions(Context context, String tableName, String\n     massUpdate.select(\"SELECT r.id \" +\n       \"FROM \" + tableName + \" r \" +\n       \"  INNER JOIN projects ON projects.id = r.resource_id \" +\n-      \"WHERE projects.module_uuid IS NOT NULL;\");\n+      \"WHERE projects.module_uuid IS NOT NULL\");\n     massUpdate.update(\"DELETE FROM \" + tableName + \" WHERE id=?\");\n     massUpdate.rowPluralName(pluralName);\n     massUpdate.execute(new MassUpdate.Handler() {"
    },
    {
        "commit_id": "295d9c3da4707d765ddb2f8246cc56efce0f32c8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/295d9c3da4707d765ddb2f8246cc56efce0f32c8",
        "buggy_code": "if (ResourceUtils.isPersistable(resource) && !ResourceUtils.isUnitTestClass(resource)) {",
        "fixed_code": "if (ResourceUtils.isPersistable(resource) && !ResourceUtils.isUnitTestFile(resource)) {",
        "patch": "@@ -82,7 +82,7 @@ public List<Metric> generatesMetrics() {\n \n   @Override\n   public void decorate(Resource resource, DecoratorContext context) {\n-    if (ResourceUtils.isPersistable(resource) && !ResourceUtils.isUnitTestClass(resource)) {\n+    if (ResourceUtils.isPersistable(resource) && !ResourceUtils.isUnitTestFile(resource)) {\n       Long developmentCost = getDevelopmentCost(context);\n       context.saveMeasure(new Measure(CoreMetrics.DEVELOPMENT_COST, Long.toString(developmentCost)));\n "
    },
    {
        "commit_id": "f0d1fa77e8eb0b782c1664b1271e3b0823d6f1a4",
        "commit_message": "SONAR-6084 Fix message when using invalid branch name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0d1fa77e8eb0b782c1664b1271e3b0823d6f1a4",
        "buggy_code": "+ \"Allowed characters are alphanumeric, '-', '_' and '.'.\", branch));",
        "fixed_code": "+ \"Allowed characters are alphanumeric, '-', '_', '.' and '/'.\", branch));",
        "patch": "@@ -123,7 +123,7 @@ private boolean isSubProject(ProjectDefinition moduleDef) {\n   private void validateBranch(List<String> validationMessages, @Nullable String branch) {\n     if (StringUtils.isNotEmpty(branch) && !ComponentKeys.isValidBranch(branch)) {\n       validationMessages.add(String.format(\"\\\"%s\\\" is not a valid branch name. \"\n-        + \"Allowed characters are alphanumeric, '-', '_' and '.'.\", branch));\n+        + \"Allowed characters are alphanumeric, '-', '_', '.' and '/'.\", branch));\n     }\n   }\n "
    },
    {
        "commit_id": "24839b644682909ac76a5736c0ff474e0a89daa1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/24839b644682909ac76a5736c0ff474e0a89daa1",
        "buggy_code": "long qGateId = Long.valueOf(qualityGateSetting);",
        "fixed_code": "long qGateId = Long.parseLong(qualityGateSetting);",
        "patch": "@@ -84,7 +84,7 @@ private QualityGate load(String qualityGateSetting, ServerClient client, MetricF\n   private QualityGate fetch(String qualityGateSetting, ServerClient client, MetricFinder metricFinder) {\n     String jsonText = null;\n     try {\n-      long qGateId = Long.valueOf(qualityGateSetting);\n+      long qGateId = Long.parseLong(qualityGateSetting);\n       jsonText = client.request(SHOW_URL + \"?id=\" + qGateId, false);\n     } catch (NumberFormatException configIsNameInsteadOfId) {\n       jsonText = client.request(SHOW_URL + \"?name=\" + qualityGateSetting, false);"
    },
    {
        "commit_id": "24839b644682909ac76a5736c0ff474e0a89daa1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/24839b644682909ac76a5736c0ff474e0a89daa1",
        "buggy_code": "private transient String metricKey;",
        "fixed_code": "private String metricKey;",
        "patch": "@@ -86,7 +86,7 @@ public class QualityGateConditionDto {\n \n   private long metricId;\n \n-  private transient String metricKey;\n+  private String metricKey;\n \n   private Integer period;\n "
    },
    {
        "commit_id": "06b3b224141e8519781e4a63fde38758b9e9d1c1",
        "commit_message": "Fix regression in issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/06b3b224141e8519781e4a63fde38758b9e9d1c1",
        "buggy_code": "if (lineIdx > 0) {",
        "fixed_code": "if (lineIdx > 1) {",
        "patch": "@@ -132,7 +132,7 @@ private String lineHashesAsMd5Hex(DefaultInputFile f) {\n \n       @Override\n       public void consume(int lineIdx, @Nullable byte[] hash) {\n-        if (lineIdx > 0) {\n+        if (lineIdx > 1) {\n           result.append(\"\\n\");\n         }\n         result.append(hash != null ? Hex.encodeHexString(hash) : \"\");"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "Component<?> component = mock(Component.class);",
        "fixed_code": "Component component = mock(Component.class);",
        "patch": "@@ -57,7 +57,7 @@ public void before() {\n \n   @Test\n   public void find_by_key() {\n-    Component<?> component = mock(Component.class);\n+    Component component = mock(Component.class);\n     when(resourceDao.findByKey(\"struts\")).thenReturn(component);\n \n     assertThat(service.findByKey(\"struts\")).isEqualTo(component);"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "for (ClassRealm realm : (Collection<ClassRealm>) world.getRealms()) {",
        "fixed_code": "for (ClassRealm realm : world.getRealms()) {",
        "patch": "@@ -240,7 +240,7 @@ private boolean isResource(File file) {\n   }\n \n   public void clean() {\n-    for (ClassRealm realm : (Collection<ClassRealm>) world.getRealms()) {\n+    for (ClassRealm realm : world.getRealms()) {\n       try {\n         world.disposeRealm(realm.getId());\n       } catch (Exception e) {"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "protected final Rule doFindById(int ruleId) {",
        "fixed_code": "private Rule doFindById(int ruleId) {",
        "patch": "@@ -90,7 +90,7 @@ private void hibernateHack(Rule rule) {\n     Hibernate.initialize(rule.getParams());\n   }\n \n-  protected final Rule doFindById(int ruleId) {\n+  private Rule doFindById(int ruleId) {\n     DatabaseSession session = sessionFactory.getSession();\n     return session.getSingleResult(\n       session.createQuery(\"FROM \" + Rule.class.getSimpleName() + \" r WHERE r.id=:id and r.status<>:status\")"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "Component<?> component = dao.findByKey(\"org.struts:struts-core:src/org/struts/RequestContext.java\");",
        "fixed_code": "Component component = dao.findByKey(\"org.struts:struts-core:src/org/struts/RequestContext.java\");",
        "patch": "@@ -345,7 +345,7 @@ public void should_find_component_by_key() {\n     setupData(\"fixture\");\n \n     assertThat(dao.findByKey(\"org.struts:struts\")).isNotNull();\n-    Component<?> component = dao.findByKey(\"org.struts:struts-core:src/org/struts/RequestContext.java\");\n+    Component component = dao.findByKey(\"org.struts:struts-core:src/org/struts/RequestContext.java\");\n     assertThat(component).isNotNull();\n     assertThat(component.path()).isEqualTo(\"src/org/struts/RequestContext.java\");\n     assertThat(dao.findByKey(\"unknown\")).isNull();"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "protected Object createCheck(ActiveRule activeRule) {",
        "fixed_code": "public Object createCheck(ActiveRule activeRule) {",
        "patch": "@@ -67,7 +67,7 @@ private void groupByKey(Collection checks) {\n   }\n \n   @Override\n-  protected Object createCheck(ActiveRule activeRule) {\n+  public Object createCheck(ActiveRule activeRule) {\n     Object object = checksByKey.get(activeRule.getConfigKey());\n     if (object != null) {\n       return instantiate(activeRule, object);"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "for (String classPathString : (List<String>) pom.getCompileClasspathElements()) {",
        "fixed_code": "for (String classPathString : pom.getCompileClasspathElements()) {",
        "patch": "@@ -80,7 +80,7 @@ protected List<File> createElements() {\n     try {\n       List<File> files = Lists.newArrayList();\n       if (pom.getCompileClasspathElements() != null) {\n-        for (String classPathString : (List<String>) pom.getCompileClasspathElements()) {\n+        for (String classPathString : pom.getCompileClasspathElements()) {\n           files.add(new File(classPathString));\n         }\n       }"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "public interface Component<C extends Component> {",
        "fixed_code": "public interface Component {",
        "patch": "@@ -21,7 +21,7 @@\n \n import javax.annotation.CheckForNull;\n \n-public interface Component<C extends Component> {\n+public interface Component {\n   String key();\n \n   /**"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "public interface Module extends Component<Module> {",
        "fixed_code": "public interface Module extends Component {",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.component;\n \n-public interface Module extends Component<Module> {\n+public interface Module extends Component {\n   String getDescription();\n \n   String getBranch();"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "public interface Perspective<C extends Component<C>> {",
        "fixed_code": "public interface Perspective<C extends Component> {",
        "patch": "@@ -19,6 +19,6 @@\n  */\n package org.sonar.api.component;\n \n-public interface Perspective<C extends Component<C>> {\n+public interface Perspective<C extends Component> {\n   C component();\n }"
    },
    {
        "commit_id": "1f52154068f1750bcce6cf41715ac056e12372dc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f52154068f1750bcce6cf41715ac056e12372dc",
        "buggy_code": "public interface SourceFile extends Component<SourceFile> {",
        "fixed_code": "public interface SourceFile extends Component {",
        "patch": "@@ -19,5 +19,5 @@\n  */\n package org.sonar.api.component;\n \n-public interface SourceFile extends Component<SourceFile> {\n+public interface SourceFile extends Component {\n }"
    },
    {
        "commit_id": "bdac02bee44acab843eac1f57e100468566250f4",
        "commit_message": "Fix SourceIndexBenchmarkTest as indexing was improved (some fields are not searchable at all)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdac02bee44acab843eac1f57e100468566250f4",
        "buggy_code": "benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7400, 7800);",
        "fixed_code": "benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7800, 8200);",
        "patch": "@@ -88,7 +88,7 @@ private void benchmarkIndexing() {\n     long nbLines = files.count.get() * LINES_PER_FILE;\n     long throughputPerSecond = 1000L * nbLines / period;\n     LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n-    benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7400, 7800);\n+    benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7800, 8200);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();"
    },
    {
        "commit_id": "069ea95835b904dcef634c90b4c059ba45183c87",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/069ea95835b904dcef634c90b4c059ba45183c87",
        "buggy_code": "return new QProfileActivityResult(result.getHits(), Paging.create(queryContext.getLimit(), pageIndex, Long.valueOf(result.getTotal()).intValue()));",
        "fixed_code": "return new QProfileActivityResult(result.getHits(), Paging.create(queryContext.getLimit(), pageIndex, (int) result.getTotal()));",
        "patch": "@@ -69,7 +69,7 @@ public QProfileActivityResult search(Map<String, Object> params) {\n     queryContext.setPage(pageIndex, 50);\n \n     Result<QProfileActivity> result = service.searchActivities(query, queryContext);\n-    return new QProfileActivityResult(result.getHits(), Paging.create(queryContext.getLimit(), pageIndex, Long.valueOf(result.getTotal()).intValue()));\n+    return new QProfileActivityResult(result.getHits(), Paging.create(queryContext.getLimit(), pageIndex, (int) result.getTotal()));\n   }\n \n   @Override"
    },
    {
        "commit_id": "069ea95835b904dcef634c90b4c059ba45183c87",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/069ea95835b904dcef634c90b4c059ba45183c87",
        "buggy_code": "public final class SqaleRatingDecorator implements Decorator {",
        "fixed_code": "public class SqaleRatingDecorator implements Decorator {",
        "patch": "@@ -44,7 +44,7 @@\n /**\n  * Decorator that computes Sqale Rating metric\n  */\n-public final class SqaleRatingDecorator implements Decorator {\n+public class SqaleRatingDecorator implements Decorator {\n \n   private final SqaleRatingSettings sqaleRatingSettings;\n   private final Metric[] metrics;"
    },
    {
        "commit_id": "87b925a5dd02dfdd11dc1f6be885d52cbe6422de",
        "commit_message": "SONAR-6048 Fix views",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/87b925a5dd02dfdd11dc1f6be885d52cbe6422de",
        "buggy_code": "super(initializer.baseDir().toPath(), moduleInputFileCache);",
        "fixed_code": "super(initializer.baseDir(), moduleInputFileCache);",
        "patch": "@@ -62,7 +62,7 @@ public class DefaultModuleFileSystem extends DefaultFileSystem implements Module\n \n   public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, Project project,\n     Settings settings, FileIndexer indexer, ModuleFileSystemInitializer initializer, ComponentIndexer componentIndexer) {\n-    super(initializer.baseDir().toPath(), moduleInputFileCache);\n+    super(initializer.baseDir(), moduleInputFileCache);\n     this.componentIndexer = componentIndexer;\n     this.moduleKey = project.getKey();\n     this.settings = settings;"
    },
    {
        "commit_id": "db911e46da06f2339afa889acb3c8f1e7bbe5ae9",
        "commit_message": "issue - update mapper accepting nullable value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/db911e46da06f2339afa889acb3c8f1e7bbe5ae9",
        "buggy_code": "issue.setCreationDate(new Date(issueCreationDate));",
        "fixed_code": "issue.setCreationDate(longToDate(issueCreationDate));",
        "patch": "@@ -677,7 +677,7 @@ public DefaultIssue toDefaultIssue() {\n     issue.setActionPlanKey(actionPlanKey);\n     issue.setAuthorLogin(authorLogin);\n     issue.setNew(false);\n-    issue.setCreationDate(new Date(issueCreationDate));\n+    issue.setCreationDate(longToDate(issueCreationDate));\n     issue.setCloseDate(longToDate(issueCloseDate));\n     issue.setUpdateDate(longToDate(issueUpdateDate));\n     issue.setSelectedAt(selectedAt);"
    },
    {
        "commit_id": "bb882254ad79bfa75140ee4ea99a95ff46b7d11d",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bb882254ad79bfa75140ee4ea99a95ff46b7d11d",
        "buggy_code": "issue.setCreationDate(longToDate(issueCreationDate));",
        "fixed_code": "issue.setCreationDate(new Date(issueCreationDate));",
        "patch": "@@ -677,7 +677,7 @@ public DefaultIssue toDefaultIssue() {\n     issue.setActionPlanKey(actionPlanKey);\n     issue.setAuthorLogin(authorLogin);\n     issue.setNew(false);\n-    issue.setCreationDate(longToDate(issueCreationDate));\n+    issue.setCreationDate(new Date(issueCreationDate));\n     issue.setCloseDate(longToDate(issueCloseDate));\n     issue.setUpdateDate(longToDate(issueUpdateDate));\n     issue.setSelectedAt(selectedAt);"
    },
    {
        "commit_id": "41b5bad5d03711faacb58e704f180f9dacf653d7",
        "commit_message": "SONAR-6162 Fix bad merge",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/41b5bad5d03711faacb58e704f180f9dacf653d7",
        "buggy_code": "activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).activate();",
        "fixed_code": "activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).setName(SQUID_RULE_NAME).activate();",
        "patch": "@@ -179,7 +179,7 @@ public void use_severity_from_active_rule_if_no_severity_on_issue() throws Excep\n   @Test\n   public void use_rule_name_if_no_message() throws Exception {\n     ruleBuilder.add(SQUID_RULE_KEY).setName(SQUID_RULE_NAME);\n-    activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).activate();\n+    activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).setName(SQUID_RULE_NAME).activate();\n     initModuleIssues();\n \n     Date analysisDate = new Date();"
    },
    {
        "commit_id": "a2fa3e4651b30a3cb9284a34656ed8ecfc13d274",
        "commit_message": "SONAR-6162 Fix NPE when searching for Check of custom rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a2fa3e4651b30a3cb9284a34656ed8ecfc13d274",
        "buggy_code": "assertThat(new XooPlugin().getExtensions()).hasSize(18);",
        "fixed_code": "assertThat(new XooPlugin().getExtensions()).hasSize(19);",
        "patch": "@@ -27,6 +27,6 @@ public class XooPluginTest {\n \n   @Test\n   public void provide_extensions() {\n-    assertThat(new XooPlugin().getExtensions()).hasSize(18);\n+    assertThat(new XooPlugin().getExtensions()).hasSize(19);\n   }\n }"
    },
    {
        "commit_id": "a2fa3e4651b30a3cb9284a34656ed8ecfc13d274",
        "commit_message": "SONAR-6162 Fix NPE when searching for Check of custom rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a2fa3e4651b30a3cb9284a34656ed8ecfc13d274",
        "buggy_code": "assertThat(repo.rules()).hasSize(1);",
        "fixed_code": "assertThat(repo.rules()).hasSize(2);",
        "patch": "@@ -37,7 +37,7 @@ public void define_xoo_rules() {\n     assertThat(repo).isNotNull();\n     assertThat(repo.name()).isEqualTo(\"Xoo\");\n     assertThat(repo.language()).isEqualTo(\"xoo\");\n-    assertThat(repo.rules()).hasSize(1);\n+    assertThat(repo.rules()).hasSize(2);\n \n     RulesDefinition.Rule x1 = repo.rule(\"x1\");\n     assertThat(x1.key()).isEqualTo(\"x1\");"
    },
    {
        "commit_id": "7526781e77eb8abd4fd08b1c9fc035ae093a286b",
        "commit_message": "Fix log level",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7526781e77eb8abd4fd08b1c9fc035ae093a286b",
        "buggy_code": "TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load previous line hashes of: \" + fileKey).setLevelToDebug();",
        "fixed_code": "TimeProfiler profiler = new TimeProfiler(LOG).setLevelToDebug().start(\"Load previous line hashes of: \" + fileKey);",
        "patch": "@@ -43,7 +43,7 @@ public String[] getLineHashes(String fileKey) {\n   }\n \n   private String loadHashesFromWs(String fileKey) {\n-    TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load previous line hashes of: \" + fileKey).setLevelToDebug();\n+    TimeProfiler profiler = new TimeProfiler(LOG).setLevelToDebug().start(\"Load previous line hashes of: \" + fileKey);\n     try {\n       return server.request(\"/api/sources/hash?key=\" + ServerClient.encodeForUrl(fileKey));\n     } finally {"
    },
    {
        "commit_id": "2e0239d5170db953f631fa4a443b2025f8d3fe5b",
        "commit_message": "Fix SearchOptions#setPage(int page, int pageSize) when pageSize is zero",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2e0239d5170db953f631fa4a443b2025f8d3fe5b",
        "buggy_code": "if (limit < 0) {",
        "fixed_code": "if (limit <= 0) {",
        "patch": "@@ -89,7 +89,7 @@ public int getLimit() {\n    * Sets the limit on the number of results to return.\n    */\n   public SearchOptions setLimit(int limit) {\n-    if (limit < 0) {\n+    if (limit <= 0) {\n       this.limit = MAX_LIMIT;\n     } else {\n       this.limit = Math.min(limit, MAX_LIMIT);"
    },
    {
        "commit_id": "2e0239d5170db953f631fa4a443b2025f8d3fe5b",
        "commit_message": "Fix SearchOptions#setPage(int page, int pageSize) when pageSize is zero",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2e0239d5170db953f631fa4a443b2025f8d3fe5b",
        "buggy_code": "assertThat(result.getDocs()).hasSize(0);",
        "fixed_code": "assertThat(result.getDocs()).hasSize(10);",
        "patch": "@@ -786,7 +786,7 @@ public void paging() throws Exception {\n     assertThat(result.getTotal()).isEqualTo(12);\n \n     result = index.search(IssueQuery.builder().build(), new SearchOptions().setOffset(2).setLimit(0));\n-    assertThat(result.getDocs()).hasSize(0);\n+    assertThat(result.getDocs()).hasSize(10);\n     assertThat(result.getTotal()).isEqualTo(12);\n   }\n "
    },
    {
        "commit_id": "3793804f13e14be6f12006a144f84dbab2e6ce20",
        "commit_message": "Revert \"SONAR-6044 Fix migration on MySQL\"\n\nThis reverts commit 838feafafc06f752ebd6cabfd467167fa9746404.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3793804f13e14be6f12006a144f84dbab2e6ce20",
        "buggy_code": "String sql = \"DELETE FROM project_measures WHERE rule_id IS NOT NULL AND metric_id IN (\";",
        "fixed_code": "String sql = \"DELETE FROM project_measures pm WHERE pm.rule_id IS NOT NULL AND pm.metric_id IN (\";",
        "patch": "@@ -44,7 +44,7 @@ public void execute(Context context) throws SQLException {\n         \"'new_blocker_violations', 'new_critical_violations', 'new_major_violations', 'new_minor_violations', 'new_info_violations')\")\n       .list(Select.LONG_READER);\n     if (!metricIds.isEmpty()) {\n-      String sql = \"DELETE FROM project_measures WHERE rule_id IS NOT NULL AND metric_id IN (\";\n+      String sql = \"DELETE FROM project_measures pm WHERE pm.rule_id IS NOT NULL AND pm.metric_id IN (\";\n       String[] parameters = new String[metricIds.size()];\n       Arrays.fill(parameters, \"?\");\n       sql += Joiner.on(\",\").join(parameters);"
    },
    {
        "commit_id": "838feafafc06f752ebd6cabfd467167fa9746404",
        "commit_message": "SONAR-6044 Fix migration on MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/838feafafc06f752ebd6cabfd467167fa9746404",
        "buggy_code": "String sql = \"DELETE FROM project_measures pm WHERE pm.rule_id IS NOT NULL AND pm.metric_id IN (\";",
        "fixed_code": "String sql = \"DELETE FROM project_measures WHERE rule_id IS NOT NULL AND metric_id IN (\";",
        "patch": "@@ -44,7 +44,7 @@ public void execute(Context context) throws SQLException {\n         \"'new_blocker_violations', 'new_critical_violations', 'new_major_violations', 'new_minor_violations', 'new_info_violations')\")\n       .list(Select.LONG_READER);\n     if (!metricIds.isEmpty()) {\n-      String sql = \"DELETE FROM project_measures pm WHERE pm.rule_id IS NOT NULL AND pm.metric_id IN (\";\n+      String sql = \"DELETE FROM project_measures WHERE rule_id IS NOT NULL AND metric_id IN (\";\n       String[] parameters = new String[metricIds.size()];\n       Arrays.fill(parameters, \"?\");\n       sql += Joiner.on(\",\").join(parameters);"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "snapshot.setPeriodDate(periodIndex, dateToLong(pastSnapshot.getDate()));",
        "fixed_code": "snapshot.setPeriodDateMs(periodIndex, dateToLong(pastSnapshot.getDate()));",
        "patch": "@@ -77,6 +77,6 @@ private void updatePeriodParams(Snapshot snapshot, PastSnapshot pastSnapshot) {\n     int periodIndex = pastSnapshot.getIndex();\n     snapshot.setPeriodMode(periodIndex, pastSnapshot.getMode());\n     snapshot.setPeriodModeParameter(periodIndex, pastSnapshot.getModeParameter());\n-    snapshot.setPeriodDate(periodIndex, dateToLong(pastSnapshot.getDate()));\n+    snapshot.setPeriodDateMs(periodIndex, dateToLong(pastSnapshot.getDate()));\n   }\n }"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "return projectSnapshot != null ? longToDate(projectSnapshot.getCreatedAt()) : null;",
        "fixed_code": "return projectSnapshot != null ? longToDate(projectSnapshot.getCreatedAtMs()) : null;",
        "patch": "@@ -75,7 +75,7 @@ public Snapshot getProjectSnapshot() {\n   }\n \n   public Date getDate() {\n-    return projectSnapshot != null ? longToDate(projectSnapshot.getCreatedAt()) : null;\n+    return projectSnapshot != null ? longToDate(projectSnapshot.getCreatedAtMs()) : null;\n   }\n \n   public PastSnapshot setMode(String mode) {"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "return new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION, longToDate(snapshot.getCreatedAt()), snapshot).setModeParameter(snapshot.getVersion());",
        "fixed_code": "return new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION, longToDate(snapshot.getCreatedAtMs()), snapshot).setModeParameter(snapshot.getVersion());",
        "patch": "@@ -57,7 +57,7 @@ PastSnapshot findByPreviousVersion(Snapshot projectSnapshot) {\n     Event previousVersionEvent = events.get(0);\n     Snapshot snapshot = session.getSingleResult(Snapshot.class, \"id\", previousVersionEvent.getSnapshot().getId());\n \n-    return new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION, longToDate(snapshot.getCreatedAt()), snapshot).setModeParameter(snapshot.getVersion());\n+    return new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION, longToDate(snapshot.getCreatedAtMs()), snapshot).setModeParameter(snapshot.getVersion());\n   }\n \n }"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "Date targetDate = longToDate(snapshot.getCreatedAt());",
        "fixed_code": "Date targetDate = longToDate(snapshot.getCreatedAtMs());",
        "patch": "@@ -53,7 +53,7 @@ PastSnapshot findByVersion(Snapshot projectSnapshot, String version) {\n       result = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION);\n     } else {\n       Snapshot snapshot = snapshots.get(0);\n-      Date targetDate = longToDate(snapshot.getCreatedAt());\n+      Date targetDate = longToDate(snapshot.getCreatedAtMs());\n       result = new PastSnapshot(CoreProperties.TIMEMACHINE_MODE_VERSION, targetDate, snapshot).setModeParameter(version);\n     }\n     return result;"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "periods.add(new Period(pastSnapshot.getIndex(), snapshot != null ? longToDate(snapshot.getCreatedAt()) : null));",
        "fixed_code": "periods.add(new Period(pastSnapshot.getIndex(), snapshot != null ? longToDate(snapshot.getCreatedAtMs()) : null));",
        "patch": "@@ -60,7 +60,7 @@ private void initModulePastSnapshots() {\n       PastSnapshot pastSnapshot = projectPastSnapshot.clonePastSnapshot();\n       modulePastSnapshots.add(pastSnapshot);\n       // When no snapshot is found, date of the period is null\n-      periods.add(new Period(pastSnapshot.getIndex(), snapshot != null ? longToDate(snapshot.getCreatedAt()) : null));\n+      periods.add(new Period(pastSnapshot.getIndex(), snapshot != null ? longToDate(snapshot.getCreatedAtMs()) : null));\n       log(pastSnapshot);\n     }\n   }"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "snapshot.setCreatedAt(dateFormat.parse(date).getTime());",
        "fixed_code": "snapshot.setCreatedAtMs(dateFormat.parse(date).getTime());",
        "patch": "@@ -107,7 +107,7 @@ public void shouldReturnNullIfNoSnapshots() throws ParseException {\n   private Snapshot newSnapshot(int id, String date) throws ParseException {\n     Snapshot snapshot = new Snapshot();\n     snapshot.setId(id);\n-    snapshot.setCreatedAt(dateFormat.parse(date).getTime());\n+    snapshot.setCreatedAtMs(dateFormat.parse(date).getTime());\n     return snapshot;\n   }\n }"
    },
    {
        "commit_id": "d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "commit_message": "SONAR-5183 timezones - fix views and devcockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3091d1e2dd25441dab59fc92699d02715caf4fa",
        "buggy_code": "this.date = (snapshot.getCreatedAt() == null ? null : new Date(snapshot.getCreatedAt()));",
        "fixed_code": "this.date = (snapshot.getCreatedAtMs() == null ? null : new Date(snapshot.getCreatedAtMs()));",
        "patch": "@@ -125,7 +125,7 @@ public void setCreatedAt(Date createdAt) {\n   public final void setSnapshot(Snapshot snapshot) {\n     this.snapshot = snapshot;\n     if (snapshot != null) {\n-      this.date = (snapshot.getCreatedAt() == null ? null : new Date(snapshot.getCreatedAt()));\n+      this.date = (snapshot.getCreatedAtMs() == null ? null : new Date(snapshot.getCreatedAtMs()));\n       this.resourceId = snapshot.getResourceId();\n     }\n   }"
    },
    {
        "commit_id": "217d3d5d39aa5a06828743d11b5a7fab0e10d8f0",
        "commit_message": "SONAR-6044 Stop storing distribution of issue-related measures by rule",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/217d3d5d39aa5a06828743d11b5a7fab0e10d8f0",
        "buggy_code": "public static final int LAST_VERSION = 773;",
        "fixed_code": "public static final int LAST_VERSION = 774;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 773;\n+  public static final int LAST_VERSION = 774;\n \n   /**\n    * List of all the tables.n"
    },
    {
        "commit_id": "a16e744e547bdf86fc3e5c51b33354505e2bf30d",
        "commit_message": "Fix description of property sonar.scm.disabled",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a16e744e547bdf86fc3e5c51b33354505e2bf30d",
        "buggy_code": "description = \"This property can be set to true in order to deactivate the SCM Sensor.\",",
        "fixed_code": "description = \"Disable the retrieval of blame information from Source Control Manager\",",
        "patch": "@@ -235,7 +235,7 @@\n     key = CoreProperties.SCM_DISABLED_KEY,\n     defaultValue = \"false\",\n     name = \"Disable the SCM Sensor\",\n-    description = \"This property can be set to true in order to deactivate the SCM Sensor.\",\n+    description = \"Disable the retrieval of blame information from Source Control Manager\",\n     module = false,\n     project = true,\n     global = true,"
    },
    {
        "commit_id": "e1cccbbbe8582831026b32189ae81259bc6bd308",
        "commit_message": "SONAR-5521 fix widget path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e1cccbbbe8582831026b32189ae81259bc6bd308",
        "buggy_code": "super(\"rules\", \"Issues and Technical Debt\", \"/Users/stasvilchik/Projects/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/issues.html.erb\");",
        "fixed_code": "super(\"rules\", \"Issues and Technical Debt\", \"/org/sonar/plugins/core/widgets/issues/issues.html.erb\");",
        "patch": "@@ -26,6 +26,6 @@\n public class IssuesWidget extends CoreWidget {\n \n   public IssuesWidget() {\n-    super(\"rules\", \"Issues and Technical Debt\", \"/Users/stasvilchik/Projects/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/issues.html.erb\");\n+    super(\"rules\", \"Issues and Technical Debt\", \"/org/sonar/plugins/core/widgets/issues/issues.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "2393ec0e2aeb25b66628644c9f2493ea09732115",
        "commit_message": "SONAR-5953 Fix search for issues on unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2393ec0e2aeb25b66628644c9f2493ea09732115",
        "buggy_code": "} else if (Qualifiers.FILE.equals(uniqueQualifier)) {",
        "fixed_code": "} else if (Qualifiers.FILE.equals(uniqueQualifier) || Qualifiers.UNIT_TEST_FILE.equals(uniqueQualifier)) {",
        "patch": "@@ -236,7 +236,7 @@ private void addComponentUuids(IssueQuery.Builder builder, DbSession session,\n         builder.moduleUuids(directoryModuleUuids);\n         builder.directories(directoryPaths);\n         addComponentsBelowDirectory(builder, fileUuids);\n-      } else if (Qualifiers.FILE.equals(uniqueQualifier)) {\n+      } else if (Qualifiers.FILE.equals(uniqueQualifier) || Qualifiers.UNIT_TEST_FILE.equals(uniqueQualifier)) {\n         builder.fileUuids(allComponentUuids);\n       } else {\n         throw new IllegalArgumentException(\"Unable to set search root context for components \" + Joiner.on(',').join(allComponentUuids));"
    },
    {
        "commit_id": "6cd1b4f123012f2caf53f5329e3fba0a42e29bd0",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6cd1b4f123012f2caf53f5329e3fba0a42e29bd0",
        "buggy_code": "DuplicationsParser.DuplicationComparator comparator = new DuplicationsParser.DuplicationComparator(currentFile);",
        "fixed_code": "DuplicationsParser.DuplicationComparator comparator = new DuplicationsParser.DuplicationComparator(currentFile.uuid(), currentFile.projectUuid());",
        "patch": "@@ -203,7 +203,7 @@ public void compare_duplications() throws Exception {\n     ComponentDto fileOnSameProject = ComponentTesting.newFileDto(project1).setId(12L);\n     ComponentDto fileOnDifferentProject = ComponentTesting.newFileDto(project2).setId(13L);\n \n-    DuplicationsParser.DuplicationComparator comparator = new DuplicationsParser.DuplicationComparator(currentFile);\n+    DuplicationsParser.DuplicationComparator comparator = new DuplicationsParser.DuplicationComparator(currentFile.uuid(), currentFile.projectUuid());\n \n     // On same file\n     assertThat(comparator.compare(new DuplicationsParser.Duplication(currentFile, 2, 2), new DuplicationsParser.Duplication(currentFile, 5, 2))).isEqualTo(-1);"
    },
    {
        "commit_id": "1a2f1cf907543e7a3612bb822121ed844c9f156a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1a2f1cf907543e7a3612bb822121ed844c9f156a",
        "buggy_code": "public interface GlobalReferentialsLoader {",
        "fixed_code": "public interface GlobalRepositoriesLoader {",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.batch.protocol.input.GlobalRepositories;\n \n-public interface GlobalReferentialsLoader {\n+public interface GlobalRepositoriesLoader {\n \n   GlobalRepositories load();\n "
    },
    {
        "commit_id": "1a2f1cf907543e7a3612bb822121ed844c9f156a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1a2f1cf907543e7a3612bb822121ed844c9f156a",
        "buggy_code": "TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load project referentials\");",
        "fixed_code": "TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load project repositories\");",
        "patch": "@@ -35,7 +35,7 @@ public class ProjectRepositoriesProvider extends ProviderAdapter {\n \n   public ProjectRepositories provide(ProjectRepositoriesLoader loader, ProjectReactor reactor, TaskProperties taskProps) {\n     if (projectReferentials == null) {\n-      TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load project referentials\");\n+      TimeProfiler profiler = new TimeProfiler(LOG).start(\"Load project repositories\");\n       try {\n         projectReferentials = loader.load(reactor, taskProps);\n       } finally {"
    },
    {
        "commit_id": "fa23d5c75f19292e488c6aed3da14794b193a5de",
        "commit_message": "SONAR-6012 Fix manual severity and get previous creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa23d5c75f19292e488c6aed3da14794b193a5de",
        "buggy_code": "\"{\\\"key\\\": \\\"key2\\\"}]\",",
        "fixed_code": "\"{\\\"key\\\": \\\"key2\\\", \\\"manualSeverity\\\": false}]\",",
        "patch": "@@ -61,7 +61,7 @@ public void writeIssues() throws JSONException {\n         \"[{\\\"key\\\": \\\"key1\\\", \\\"componentKey\\\": \\\"key\\\", \\\"ruleKey\\\": \\\"rulekey\\\", \\\"ruleRepo\\\": \\\"repokey\\\", \\\"line\\\": 2,\\\"message\\\": \\\"message\\\", \" +\n           \"\\\"severity\\\": \\\"severity\\\", \\\"manualSeverity\\\": true, \\\"resolution\\\": \\\"resolution\\\", \\\"status\\\": \\\"status\\\", \\\"checksum\\\": \\\"checksum\\\",\\\"assigneeLogin\\\": \\\"login\\\"},\"\n           +\n-          \"{\\\"key\\\": \\\"key2\\\"}]\",\n+          \"{\\\"key\\\": \\\"key2\\\", \\\"manualSeverity\\\": false}]\",\n         out.getBuffer().toString(), true);\n   }\n "
    },
    {
        "commit_id": "fa23d5c75f19292e488c6aed3da14794b193a5de",
        "commit_message": "SONAR-6012 Fix manual severity and get previous creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa23d5c75f19292e488c6aed3da14794b193a5de",
        "buggy_code": ".setOverriddenSeverity(\"MAJOR\")",
        "fixed_code": ".setSeverity(\"MAJOR\")",
        "patch": "@@ -58,7 +58,7 @@ public class ReportsMediumTest {\n       .setComponentKey(\"sample:xources/hello/HelloJava.xoo\")\n       .setRuleKey(\"xoo\", \"OneIssuePerLine\")\n       .setLine(1)\n-      .setOverriddenSeverity(\"MAJOR\")\n+      .setSeverity(\"MAJOR\")\n       .setChecksum(DigestUtils.md5Hex(\"dontexist\"))\n       .setStatus(\"OPEN\"))\n     .build();"
    },
    {
        "commit_id": "7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "buggy_code": "return Base64.encodeBase64String(clearText.getBytes());",
        "fixed_code": "return Base64.encodeBase64String(clearText.getBytes(Charsets.UTF_8));",
        "patch": "@@ -26,7 +26,7 @@\n final class Base64Cipher implements Cipher {\n   @Override\n   public String encrypt(String clearText) {\n-    return Base64.encodeBase64String(clearText.getBytes());\n+    return Base64.encodeBase64String(clearText.getBytes(Charsets.UTF_8));\n   }\n \n   @Override"
    },
    {
        "commit_id": "7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "buggy_code": "private transient RuleKey key;",
        "fixed_code": "private RuleKey key;",
        "patch": "@@ -69,7 +69,7 @@ public enum Format {\n   private String tags;\n   private String systemTags;\n \n-  private transient RuleKey key;\n+  private RuleKey key;\n \n   @Override\n   public RuleKey getKey() {"
    },
    {
        "commit_id": "7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d09b43edee2aee10127e9f2f6a33f027bbb975d",
        "buggy_code": "return Base64.encodeBase64String(clearText.getBytes());",
        "fixed_code": "return Base64.encodeBase64String(clearText.getBytes(Charsets.UTF_8));",
        "patch": "@@ -25,7 +25,7 @@\n final class Base64Cipher extends Cipher {\n   @Override\n   String encrypt(String clearText) {\n-    return Base64.encodeBase64String(clearText.getBytes());\n+    return Base64.encodeBase64String(clearText.getBytes(Charsets.UTF_8));\n   }\n \n   @Override"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "private InputSupplier<InputStream> doRequest(String pathStartingWithSlash, String requestMethod, @Nullable Integer timeoutMillis) {",
        "fixed_code": "public InputSupplier<InputStream> doRequest(String pathStartingWithSlash, String requestMethod, @Nullable Integer timeoutMillis) {",
        "patch": "@@ -103,7 +103,7 @@ public String request(String pathStartingWithSlash, String requestMethod, boolea\n     }\n   }\n \n-  private InputSupplier<InputStream> doRequest(String pathStartingWithSlash, String requestMethod, @Nullable Integer timeoutMillis) {\n+  public InputSupplier<InputStream> doRequest(String pathStartingWithSlash, String requestMethod, @Nullable Integer timeoutMillis) {\n     Preconditions.checkArgument(pathStartingWithSlash.startsWith(\"/\"), \"Path must start with slash /\");\n     String path = StringEscapeUtils.escapeHtml(pathStartingWithSlash);\n "
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue.tracking;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.tracking;\n+package org.sonar.batch.issue.tracking;\n \n import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.Multimap;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue;\n+package org.sonar.batch.issue.tracking;\n \n import org.sonar.api.BatchExtension;\n import org.sonar.api.issue.Issue;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue.tracking;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.tracking;\n+package org.sonar.batch.issue.tracking;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue.tracking;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.tracking;\n+package org.sonar.batch.issue.tracking;\n \n /**\n  * Compute hashes of block around each line"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.batch.referential;",
        "fixed_code": "package org.sonar.batch.repository;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.referential;\n+package org.sonar.batch.repository;\n \n import org.sonar.batch.bootstrap.ServerClient;\n import org.sonar.batch.protocol.input.GlobalReferentials;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.batch.referential;",
        "fixed_code": "package org.sonar.batch.repository;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.referential;\n+package org.sonar.batch.repository;\n \n import org.sonar.batch.protocol.input.GlobalReferentials;\n "
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.batch.referential;",
        "fixed_code": "package org.sonar.batch.repository;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.referential;\n+package org.sonar.batch.repository;\n \n import org.picocontainer.injectors.ProviderAdapter;\n import org.slf4j.Logger;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.batch.referential;",
        "fixed_code": "package org.sonar.batch.repository;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.batch.referential;\n+package org.sonar.batch.repository;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue;\n+package org.sonar.batch.issue.tracking;\n \n import org.apache.ibatis.session.ResultHandler;\n import org.junit.Test;"
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue.tracking;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.tracking;\n+package org.sonar.batch.issue.tracking;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue.tracking;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.tracking;\n+package org.sonar.batch.issue.tracking;\n \n import org.junit.Test;\n "
    },
    {
        "commit_id": "1340ee7da7a1688ebb059812504e117d041e0124",
        "commit_message": "SONAR-6012 Local issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1340ee7da7a1688ebb059812504e117d041e0124",
        "buggy_code": "package org.sonar.plugins.core.issue;",
        "fixed_code": "package org.sonar.batch.issue.tracking;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue;\n+package org.sonar.batch.issue.tracking;\n \n import org.junit.Before;\n import org.junit.Test;"
    },
    {
        "commit_id": "7039474b055f0d2a7d37f7f2c45c1542c608aaee",
        "commit_message": "Fix compatibility of tests with mysql and postgresql\n\nThe schema used by dbunit is badly set. It should not be the db login on mysql and postgresql.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7039474b055f0d2a7d37f7f2c45c1542c608aaee",
        "buggy_code": "databaseTester = new DataSourceDatabaseTester(database.getDataSource(), login);",
        "fixed_code": "databaseTester = new DataSourceDatabaseTester(database.getDataSource(), databaseCommands.useLoginAsSchema() ? login : null);",
        "patch": "@@ -106,7 +106,7 @@ public static void startDatabase() throws Exception {\n   @Before\n   public void startDbUnit() throws Exception {\n     databaseCommands.truncateDatabase(database.getDataSource());\n-    databaseTester = new DataSourceDatabaseTester(database.getDataSource(), login);\n+    databaseTester = new DataSourceDatabaseTester(database.getDataSource(), databaseCommands.useLoginAsSchema() ? login : null);\n   }\n \n   /**"
    },
    {
        "commit_id": "7039474b055f0d2a7d37f7f2c45c1542c608aaee",
        "commit_message": "Fix compatibility of tests with mysql and postgresql\n\nThe schema used by dbunit is badly set. It should not be the db login on mysql and postgresql.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7039474b055f0d2a7d37f7f2c45c1542c608aaee",
        "buggy_code": "tester = new DataSourceDatabaseTester(db.getDataSource(), login);",
        "fixed_code": "tester = new DataSourceDatabaseTester(db.getDataSource(), commands.useLoginAsSchema() ? login : null);",
        "patch": "@@ -122,7 +122,7 @@ protected void before() throws Throwable {\n     LOG.info(\"Test Database: \" + db);\n \n     commands = DatabaseCommands.forDialect(db.getDialect());\n-    tester = new DataSourceDatabaseTester(db.getDataSource(), login);\n+    tester = new DataSourceDatabaseTester(db.getDataSource(), commands.useLoginAsSchema() ? login : null);\n \n     myBatis = new MyBatis(db, new Logback(), new NullQueue());\n     myBatis.start();"
    },
    {
        "commit_id": "fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "commit_message": "SONAR-5077 Fix regression when a Sensor try to read \"lines\" measure. LinesSensor forced to be executed first.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "buggy_code": "import org.sonar.api.batch.BatchExtensionDictionnary;",
        "fixed_code": "import org.sonar.batch.bootstrap.BatchExtensionDictionnary;",
        "patch": "@@ -21,7 +21,6 @@\n \n import com.google.common.collect.Lists;\n import org.sonar.api.BatchComponent;\n-import org.sonar.api.batch.BatchExtensionDictionnary;\n import org.sonar.api.batch.Decorator;\n import org.sonar.api.batch.DecoratorContext;\n import org.sonar.api.batch.SonarIndex;\n@@ -32,6 +31,7 @@\n import org.sonar.api.utils.SonarException;\n import org.sonar.batch.DecoratorsSelector;\n import org.sonar.batch.DefaultDecoratorContext;\n+import org.sonar.batch.bootstrap.BatchExtensionDictionnary;\n import org.sonar.batch.duplication.DuplicationCache;\n import org.sonar.batch.events.EventBus;\n import org.sonar.batch.scan.measure.MeasureCache;"
    },
    {
        "commit_id": "fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "commit_message": "SONAR-5077 Fix regression when a Sensor try to read \"lines\" measure. LinesSensor forced to be executed first.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "buggy_code": "import org.sonar.api.batch.BatchExtensionDictionnary;",
        "fixed_code": "import org.sonar.batch.bootstrap.BatchExtensionDictionnary;",
        "patch": "@@ -24,10 +24,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.sonar.api.BatchComponent;\n-import org.sonar.api.batch.BatchExtensionDictionnary;\n import org.sonar.api.batch.maven.MavenPlugin;\n import org.sonar.api.batch.maven.MavenPluginHandler;\n import org.sonar.api.resources.Project;\n+import org.sonar.batch.bootstrap.BatchExtensionDictionnary;\n \n import java.io.File;\n import java.io.FileOutputStream;"
    },
    {
        "commit_id": "fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "commit_message": "SONAR-5077 Fix regression when a Sensor try to read \"lines\" measure. LinesSensor forced to be executed first.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fb21d4cbafc3a5e7b9c63c0df300129d9135045b",
        "buggy_code": "import org.sonar.api.batch.BatchExtensionDictionnary;",
        "fixed_code": "import org.sonar.batch.bootstrap.BatchExtensionDictionnary;",
        "patch": "@@ -20,7 +20,6 @@\n package org.sonar.batch.phases;\n \n import org.junit.Test;\n-import org.sonar.api.batch.BatchExtensionDictionnary;\n import org.sonar.api.batch.Decorator;\n import org.sonar.api.batch.DecoratorContext;\n import org.sonar.api.batch.SonarIndex;\n@@ -30,6 +29,7 @@\n import org.sonar.api.resources.Resource;\n import org.sonar.api.utils.SonarException;\n import org.sonar.batch.DefaultDecoratorContext;\n+import org.sonar.batch.bootstrap.BatchExtensionDictionnary;\n import org.sonar.batch.duplication.DuplicationCache;\n import org.sonar.batch.events.EventBus;\n import org.sonar.batch.scan.measure.MeasureCache;"
    },
    {
        "commit_id": "feaf31f478e1980c66297d7527b3d259112b3683",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/feaf31f478e1980c66297d7527b3d259112b3683",
        "buggy_code": "public static final Logger LOGGER = LoggerFactory.getLogger(DefaultPhaseExecutor.class);",
        "fixed_code": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultPhaseExecutor.class);",
        "patch": "@@ -46,7 +46,7 @@\n \n public final class DefaultPhaseExecutor implements PhaseExecutor {\n \n-  public static final Logger LOGGER = LoggerFactory.getLogger(DefaultPhaseExecutor.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultPhaseExecutor.class);\n \n   private final EventBus eventBus;\n   private final Phases phases;"
    },
    {
        "commit_id": "feaf31f478e1980c66297d7527b3d259112b3683",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/feaf31f478e1980c66297d7527b3d259112b3683",
        "buggy_code": "public MeasureValueCoder(MetricFinder metricFinder, TechnicalDebtModel techDebtModel) {",
        "fixed_code": "public MeasureValueCoder(MetricFinder metricFinder, @Nullable TechnicalDebtModel techDebtModel) {",
        "patch": "@@ -37,7 +37,7 @@ class MeasureValueCoder implements ValueCoder {\n   private final MetricFinder metricFinder;\n   private final TechnicalDebtModel techDebtModel;\n \n-  public MeasureValueCoder(MetricFinder metricFinder, TechnicalDebtModel techDebtModel) {\n+  public MeasureValueCoder(MetricFinder metricFinder, @Nullable TechnicalDebtModel techDebtModel) {\n     this.metricFinder = metricFinder;\n     this.techDebtModel = techDebtModel;\n   }"
    },
    {
        "commit_id": "d4d6c8a1e01d5b09ff518d1723b96719510eeee1",
        "commit_message": "Fix SourcePersisterTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4d6c8a1e01d5b09ff518d1723b96719510eeee1",
        "buggy_code": ".setHash(\"\")",
        "fixed_code": ".setHash(null)",
        "patch": "@@ -153,7 +153,7 @@ public void testPersistEmptyFile() throws Exception {\n     String relativePathEmpty = \"src/empty.java\";\n     DefaultInputFile inputFileEmpty = new DefaultInputFile(PROJECT_KEY, relativePathEmpty)\n       .setLines(0)\n-      .setHash(\"\")\n+      .setHash(null)\n       .setLineHashes(new byte[][] {});\n     when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileEmpty));\n "
    },
    {
        "commit_id": "cde3e4569709adc7b49596c3d1b790391cb032d3",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cde3e4569709adc7b49596c3d1b790391cb032d3",
        "buggy_code": "public Param(Action action, NewParam newParam) {",
        "fixed_code": "protected Param(Action action, NewParam newParam) {",
        "patch": "@@ -535,7 +535,7 @@ class Param {\n     private final boolean required;\n     private final Set<String> possibleValues;\n \n-    public Param(Action action, NewParam newParam) {\n+    protected Param(Action action, NewParam newParam) {\n       this.key = newParam.key;\n       this.deprecatedKey = newParam.deprecatedKey;\n       this.description = newParam.description;"
    },
    {
        "commit_id": "fc0b5f439da6138d3d8681ce50cf06d9eb6da68f",
        "commit_message": "fix issue_changes insert with correct jdbcType and fix issue change migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc0b5f439da6138d3d8681ce50cf06d9eb6da68f",
        "buggy_code": "massUpdate.select(\"SELECT i.created_at, i.updated_at, i.issue_change_creation_date_ms, i.id FROM issue_changes i WHERE created_at_ms IS NULL\");",
        "fixed_code": "massUpdate.select(\"SELECT i.created_at, i.updated_at, i.issue_change_creation_date, i.id FROM issue_changes i WHERE created_at_ms IS NULL\");",
        "patch": "@@ -44,7 +44,7 @@ public void execute(Context context) throws SQLException {\n     final long now = system.now();\n \n     MassUpdate massUpdate = context.prepareMassUpdate();\n-    massUpdate.select(\"SELECT i.created_at, i.updated_at, i.issue_change_creation_date_ms, i.id FROM issue_changes i WHERE created_at_ms IS NULL\");\n+    massUpdate.select(\"SELECT i.created_at, i.updated_at, i.issue_change_creation_date, i.id FROM issue_changes i WHERE created_at_ms IS NULL\");\n     massUpdate.update(\"UPDATE issue_changes SET created_at_ms=?, updated_at_ms=?, issue_change_creation_date_ms=? WHERE id=?\");\n     massUpdate.rowPluralName(\"issue_changes\");\n     massUpdate.execute(new MassUpdate.Handler() {"
    },
    {
        "commit_id": "fc0b5f439da6138d3d8681ce50cf06d9eb6da68f",
        "commit_message": "fix issue_changes insert with correct jdbcType and fix issue change migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc0b5f439da6138d3d8681ce50cf06d9eb6da68f",
        "buggy_code": "assertThat(countWithAllDateFieldsNull).isEqualTo(1);",
        "fixed_code": "assertThat(countWithAllDateFieldsNull).isEqualTo(2);",
        "patch": "@@ -48,6 +48,6 @@ public void execute() throws Exception {\n \n     int countWithAllDateFieldsNull = db\n       .countSql(\"select count(*) from issue_changes where created_at_ms is not null and updated_at_ms is not null and issue_change_creation_date_ms is not null\");\n-    assertThat(countWithAllDateFieldsNull).isEqualTo(1);\n+    assertThat(countWithAllDateFieldsNull).isEqualTo(2);\n   }\n }"
    },
    {
        "commit_id": "c173a87a511c1242e3c5c7ac6d0f637c7c2ad66b",
        "commit_message": "SONAR-5830 Fix issue when same email is used by multiple users",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c173a87a511c1242e3c5c7ac6d0f637c7c2ad66b",
        "buggy_code": ".setSize(1);",
        "fixed_code": ".setSize(2);",
        "patch": "@@ -59,7 +59,7 @@ public UserDoc getNullableByScmAccount(String scmAccount) {\n         .should(QueryBuilders.termQuery(UserIndexDefinition.FIELD_LOGIN, scmAccount))\n         .should(QueryBuilders.termQuery(UserIndexDefinition.FIELD_EMAIL, scmAccount))\n         .should(QueryBuilders.termQuery(UserIndexDefinition.FIELD_SCM_ACCOUNTS, scmAccount)))\n-      .setSize(1);\n+      .setSize(2);\n     SearchHit[] result = request.get().getHits().getHits();\n     if (result.length == 1) {\n       return new UserDoc(result[0].sourceAsMap());"
    },
    {
        "commit_id": "4d26e2512ad367010bbb1fbf3ebb8bb0f02f2579",
        "commit_message": "SONAR-5908 When creating a manual issue, assign it to the author of the line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4d26e2512ad367010bbb1fbf3ebb8bb0f02f2579",
        "buggy_code": ".add(\"params\", params)",
        "fixed_code": ".add(\"params\", params != null ? Arrays.toString(params) : null)",
        "patch": "@@ -79,7 +79,7 @@ public int hashCode() {\n   public String toString() {\n     return Objects.toStringHelper(this)\n       .add(\"key\", key)\n-      .add(\"params\", params)\n+      .add(\"params\", params != null ? Arrays.toString(params) : null)\n       .toString();\n   }\n }"
    },
    {
        "commit_id": "b3b409caf9572a3f8c0a60f73e3ca424ee14227f",
        "commit_message": "Fix description of computation step \"DigestReportStep\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b3b409caf9572a3f8c0a60f73e3ca424ee14227f",
        "buggy_code": "return \"Decompress analysis report\";",
        "fixed_code": "return \"Digest analysis report\";",
        "patch": "@@ -39,6 +39,6 @@ public void execute(DbSession session, ComputationContext context) {\n \n   @Override\n   public String getDescription() {\n-    return \"Decompress analysis report\";\n+    return \"Digest analysis report\";\n   }\n }"
    },
    {
        "commit_id": "62d74d700ee3805ab1d2909e23c7e4efaf96c519",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/62d74d700ee3805ab1d2909e23c7e4efaf96c519",
        "buggy_code": "Map<Class, DaoComponent> map = new IdentityHashMap<Class, DaoComponent>();",
        "fixed_code": "Map<Class, DaoComponent> map = new IdentityHashMap<>();",
        "patch": "@@ -88,7 +88,7 @@ public DbClient(Database db, MyBatis myBatis, DaoComponent... daoComponents) {\n     this.db = db;\n     this.myBatis = myBatis;\n \n-    Map<Class, DaoComponent> map = new IdentityHashMap<Class, DaoComponent>();\n+    Map<Class, DaoComponent> map = new IdentityHashMap<>();\n     for (DaoComponent daoComponent : daoComponents) {\n       map.put(daoComponent.getClass(), daoComponent);\n     }"
    },
    {
        "commit_id": "b51e88207146f945a21e44fc7a163883423a3876",
        "commit_message": "SONAR-5909 Fix SQL query on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b51e88207146f945a21e44fc7a163883423a3876",
        "buggy_code": "\"  (SELECT person_id, COUNT(*) AS nb FROM authors GROUP BY person_id HAVING COUNT(*) > 1) AS group_by_person\" +",
        "fixed_code": "\"  (SELECT person_id, COUNT(*) AS nb FROM authors GROUP BY person_id HAVING COUNT(*) > 1) group_by_person\" +",
        "patch": "@@ -59,7 +59,7 @@ public void execute(final Context context) throws SQLException {\n     try {\n       final Multimap<Long, String> authorsByPersonId = ArrayListMultimap.create();\n       context.prepareSelect(\"SELECT a.person_id, a.login FROM authors a,\" +\n-          \"  (SELECT person_id, COUNT(*) AS nb FROM authors GROUP BY person_id HAVING COUNT(*) > 1) AS group_by_person\" +\n+        \"  (SELECT person_id, COUNT(*) AS nb FROM authors GROUP BY person_id HAVING COUNT(*) > 1) group_by_person\" +\n           \"     WHERE a.person_id = group_by_person.person_id \"\n       ).scroll(new Select.RowHandler() {\n         @Override"
    },
    {
        "commit_id": "dd26cee9305fa490ca4ecc50117da416ed5eca7a",
        "commit_message": "Fix expected timeouts of server-benchmarks after change of hardware",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd26cee9305fa490ca4ecc50117da416ed5eca7a",
        "buggy_code": "benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 2300L, 2800L);",
        "fixed_code": "benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 3200, 3600);",
        "patch": "@@ -112,7 +112,7 @@ private void benchmarkIssueIndexing() {\n     long period = System.currentTimeMillis() - start;\n     long throughputPerSecond = 1000 * issues.count.get() / period;\n     LOGGER.info(String.format(\"%d issues indexed in %d ms (%d docs/second)\", issues.count.get(), period, throughputPerSecond));\n-    benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 2300L, 2800L);\n+    benchmark.expectBetween(\"Throughput to index issues\", throughputPerSecond, 3200, 3600);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(\"issues\").get();"
    },
    {
        "commit_id": "dd26cee9305fa490ca4ecc50117da416ed5eca7a",
        "commit_message": "Fix expected timeouts of server-benchmarks after change of hardware",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd26cee9305fa490ca4ecc50117da416ed5eca7a",
        "buggy_code": "benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 6000L, 6400L);",
        "fixed_code": "benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7200, 7600);",
        "patch": "@@ -88,7 +88,7 @@ private void benchmarkIndexing() {\n     long nbLines = files.count.get() * LINES_PER_FILE;\n     long throughputPerSecond = 1000L * nbLines / period;\n     LOGGER.info(String.format(\"%d lines indexed in %d ms (%d docs/second)\", nbLines, period, throughputPerSecond));\n-    benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 6000L, 6400L);\n+    benchmark.expectBetween(\"Throughput to index source lines\", throughputPerSecond, 7200, 7600);\n \n     // be sure that physical files do not evolve during estimation of size\n     tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();"
    },
    {
        "commit_id": "c698fdc1b308fef1a7af5767e42e6b7e82fb502e",
        "commit_message": "SONAR-6014 Fix regression when persisting dependencies and start dropping violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c698fdc1b308fef1a7af5767e42e6b7e82fb502e",
        "buggy_code": "public final class ResourcePersister implements ScanPersister {",
        "fixed_code": "public class ResourcePersister implements ScanPersister {",
        "patch": "@@ -45,7 +45,7 @@\n import java.util.Date;\n import java.util.List;\n \n-public final class ResourcePersister implements ScanPersister {\n+public class ResourcePersister implements ScanPersister {\n \n   private static final String RESOURCE_ID = \"resourceId\";\n   private static final String LAST = \"last\";"
    },
    {
        "commit_id": "65c6daf0e9715f169d1d991fe33dba354f42b0ec",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/65c6daf0e9715f169d1d991fe33dba354f42b0ec",
        "buggy_code": "scmAccounts = sanitizeScmAccounts(updateUser.scmAccounts());",
        "fixed_code": "scmAccounts = sanitizeScmAccounts(scmAccounts);",
        "patch": "@@ -188,7 +188,7 @@ private void updateUserDto(DbSession dbSession, UpdateUser updateUser, UserDto u\n     if (updateUser.isScmAccountsChanged()) {\n       List<String> scmAccounts = updateUser.scmAccounts();\n       if (scmAccounts != null && !scmAccounts.isEmpty()) {\n-        scmAccounts = sanitizeScmAccounts(updateUser.scmAccounts());\n+        scmAccounts = sanitizeScmAccounts(scmAccounts);\n         validateScmAccounts(dbSession, scmAccounts, userDto.getLogin(), email != null ? email : userDto.getEmail(), userDto, messages);\n         userDto.setScmAccounts(convertScmAccountsToCsv(scmAccounts));\n       } else {"
    },
    {
        "commit_id": "d89704376bf0add2f3ac04d57e16e6a7f0aaf39b",
        "commit_message": "SONAR-5959 Fix an issue with case sensitive search on UUID path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d89704376bf0add2f3ac04d57e16e6a7f0aaf39b",
        "buggy_code": ".putArray(\"index.analysis.analyzer.uuid_analyzer.filter\", \"trim\", \"lowercase\")",
        "fixed_code": ".putArray(\"index.analysis.analyzer.uuid_analyzer.filter\", \"trim\")",
        "patch": "@@ -87,7 +87,7 @@ static ImmutableSettings.Builder defaults() {\n       .put(\"index.analysis.tokenizer.dot_tokenizer.type\", \"pattern\")\n       .put(\"index.analysis.tokenizer.dot_tokenizer.pattern\", \"\\\\.\")\n       .put(\"index.analysis.analyzer.uuid_analyzer.type\", \"custom\")\n-      .putArray(\"index.analysis.analyzer.uuid_analyzer.filter\", \"trim\", \"lowercase\")\n+      .putArray(\"index.analysis.analyzer.uuid_analyzer.filter\", \"trim\")\n       .put(\"index.analysis.analyzer.uuid_analyzer.tokenizer\", \"dot_tokenizer\");\n \n   }"
    },
    {
        "commit_id": "e2077f4e2f23304264ab626b81d74a39b5270ce4",
        "commit_message": "SONAR-5911 issues persisted on server side and fix issue mapping",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2077f4e2f23304264ab626b81d74a39b5270ce4",
        "buggy_code": "verify(storage, times(1)).save(issues);",
        "fixed_code": "verify(storage, never()).save(issues);",
        "patch": "@@ -52,7 +52,7 @@ public void prepare() {\n   public void should_not_persist_issues_anymore() throws Exception {\n     persister.persist();\n \n-    verify(storage, times(1)).save(issues);\n+    verify(storage, never()).save(issues);\n   }\n \n   @Test"
    },
    {
        "commit_id": "e6740c707c8cc05051f8c0ac716d809809df43ce",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e6740c707c8cc05051f8c0ac716d809809df43ce",
        "buggy_code": "class Context {",
        "fixed_code": "public class Context {",
        "patch": "@@ -301,7 +301,7 @@ private SubCharacteristics() {\n   /**\n    * Instantiated by core but not by plugins\n    */\n-  class Context {\n+  public class Context {\n     private final Map<String, Repository> repositoriesByKey = Maps.newHashMap();\n     private final ListMultimap<String, ExtendedRepository> extendedRepositoriesByKey = ArrayListMultimap.create();\n "
    },
    {
        "commit_id": "928ab1799d78924833c622e7f327dd0875efd50a",
        "commit_message": "SONAR-5959 Change behavior of component-related issue search queries",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/928ab1799d78924833c622e7f327dd0875efd50a",
        "buggy_code": "assertThat(query.componentRootUuids()).containsOnly(\"BCDE\");",
        "fixed_code": "assertThat(query.moduleUuids()).containsOnly(\"BCDE\");",
        "patch": "@@ -117,7 +117,7 @@ public void create_query_from_parameters() {\n     assertThat(query.resolutions()).containsOnly(\"FALSE-POSITIVE\");\n     assertThat(query.resolved()).isTrue();\n     assertThat(query.componentUuids()).containsOnly(\"ABCD\");\n-    assertThat(query.componentRootUuids()).containsOnly(\"BCDE\");\n+    assertThat(query.moduleUuids()).containsOnly(\"BCDE\");\n     assertThat(query.reporters()).containsOnly(\"marilyn\");\n     assertThat(query.assignees()).containsOnly(\"joanna\");\n     assertThat(query.languages()).containsOnly(\"xoo\");"
    },
    {
        "commit_id": "e87e06f2789cc3c42c30de31f62084552f6295d3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e87e06f2789cc3c42c30de31f62084552f6295d3",
        "buggy_code": "Project module = (Project) file.getParent().getParent();",
        "fixed_code": "Project module = currentProject;",
        "patch": "@@ -497,7 +497,7 @@ public String getSource(Resource reference) {\n     Resource resource = getResource(reference);\n     if (resource instanceof File) {\n       File file = (File) resource;\n-      Project module = (Project) file.getParent().getParent();\n+      Project module = currentProject;\n       ProjectDefinition def = projectTree.getProjectDefinition(module);\n       try {\n         return FileUtils.readFileToString(new java.io.File(def.getBaseDir(), file.getPath()));"
    },
    {
        "commit_id": "5fdff45fc6e56b5240e619d296d9975a317b94ea",
        "commit_message": "SONAR-5849 Performance issue of Project Referentials WS for project with many modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5fdff45fc6e56b5240e619d296d9975a317b94ea",
        "buggy_code": ".setModuleUuidPath(subProjectOrProject.moduleUuidPath() == null ? subProjectOrProject.uuid() : subProjectOrProject.moduleUuidPath() + \".\" + subProjectOrProject.uuid())",
        "fixed_code": ".setModuleUuidPath(subProjectOrProject.moduleUuidPath() == null ? subProjectOrProject.uuid() + \".\" : subProjectOrProject.moduleUuidPath() + subProjectOrProject.uuid() + \".\")",
        "patch": "@@ -67,7 +67,7 @@ public static ComponentDto newModuleDto(ComponentDto subProjectOrProject) {\n       .setUuid(Uuids.create())\n       .setProjectUuid(subProjectOrProject.projectUuid())\n       .setModuleUuid(subProjectOrProject.uuid())\n-      .setModuleUuidPath(subProjectOrProject.moduleUuidPath() == null ? subProjectOrProject.uuid() : subProjectOrProject.moduleUuidPath() + \".\" + subProjectOrProject.uuid())\n+      .setModuleUuidPath(subProjectOrProject.moduleUuidPath() == null ? subProjectOrProject.uuid() + \".\" : subProjectOrProject.moduleUuidPath() + subProjectOrProject.uuid() + \".\")\n       .setKey(\"KEY_\" + uuid)\n       .setName(\"NAME_\" + uuid)\n       .setLongName(\"LONG_NAME_\" + uuid)"
    },
    {
        "commit_id": "90b37b0a075a6d85f28d1534e67aff947b619b5a",
        "commit_message": "SONAR-5958 Rename parameters used in issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/90b37b0a075a6d85f28d1534e67aff947b619b5a",
        "buggy_code": "public static final int LAST_VERSION = 757;",
        "fixed_code": "public static final int LAST_VERSION = 758;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 757;\n+  public static final int LAST_VERSION = 758;\n \n   /**\n    * List of all the tables.n"
    },
    {
        "commit_id": "9632d46538eee762a108cc6f77f1acd75b97c733",
        "commit_message": "SONAR-5945 Improve export of components in report and fix upload",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9632d46538eee762a108cc6f77f1acd75b97c733",
        "buggy_code": "resourceCache.add(project, projectSnapshot);",
        "fixed_code": "resourceCache.add(project, null, projectSnapshot);",
        "patch": "@@ -49,7 +49,7 @@ public void shouldSaveConfigurationInSnapshotsTable() {\n \n     ResourceCache resourceCache = new ResourceCache();\n     Project project = new Project(\"foo\");\n-    resourceCache.add(project, projectSnapshot);\n+    resourceCache.add(project, null, projectSnapshot);\n \n     TimeMachineConfigurationPersister persister = new TimeMachineConfigurationPersister(timeMachineConfiguration, resourceCache, getSession());\n "
    },
    {
        "commit_id": "9632d46538eee762a108cc6f77f1acd75b97c733",
        "commit_message": "SONAR-5945 Improve export of components in report and fix upload",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9632d46538eee762a108cc6f77f1acd75b97c733",
        "buggy_code": "request.part(\"report\", report);",
        "fixed_code": "request.part(\"report\", null, \"application/octet-stream\", report);",
        "patch": "@@ -111,7 +111,7 @@ void uploadMultiPartReport(File report) {\n     request.trustAllHosts();\n     request.header(\"User-Agent\", String.format(\"SonarQube %s\", server.getVersion()));\n     request.basic(serverClient.getLogin(), serverClient.getPassword());\n-    request.part(\"report\", report);\n+    request.part(\"report\", null, \"application/octet-stream\", report);\n     if (!request.ok()) {\n       int responseCode = request.code();\n       if (responseCode == 401) {"
    },
    {
        "commit_id": "9632d46538eee762a108cc6f77f1acd75b97c733",
        "commit_message": "SONAR-5945 Improve export of components in report and fix upload",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9632d46538eee762a108cc6f77f1acd75b97c733",
        "buggy_code": "resourceCache.add(new Project(\"myProject\").setId(200), snapshot);",
        "fixed_code": "resourceCache.add(new Project(\"myProject\").setId(200), null, snapshot);",
        "patch": "@@ -57,7 +57,7 @@ public void should_persist_component_data() throws Exception {\n     Snapshot snapshot = new Snapshot();\n     snapshot.setId(100);\n     snapshot.setResourceId(200);\n-    resourceCache.add(new Project(\"myProject\").setId(200), snapshot);\n+    resourceCache.add(new Project(\"myProject\").setId(200), null, snapshot);\n \n     data = new ComponentDataCache(caches);\n     data.setStringData(\"myProject\", SnapshotDataTypes.FILE_HASHES, \"org/struts/Action.java=123ABC\");"
    },
    {
        "commit_id": "9632d46538eee762a108cc6f77f1acd75b97c733",
        "commit_message": "SONAR-5945 Improve export of components in report and fix upload",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9632d46538eee762a108cc6f77f1acd75b97c733",
        "buggy_code": "resourceCache.add(project, snapshot);",
        "fixed_code": "resourceCache.add(project, null, snapshot);",
        "patch": "@@ -95,7 +95,7 @@ public void before() {\n     project = new Project(\"foo\");\n \n     resourceCache = new ResourceCache();\n-    resourceCache.add(project, snapshot);\n+    resourceCache.add(project, null, snapshot);\n \n     verifier = new QualityGateVerifier(qualityGate, resourceCache, periods, i18n, durations);\n   }"
    },
    {
        "commit_id": "9632d46538eee762a108cc6f77f1acd75b97c733",
        "commit_message": "SONAR-5945 Improve export of components in report and fix upload",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9632d46538eee762a108cc6f77f1acd75b97c733",
        "buggy_code": "resourceCache.add(project, snapshot);",
        "fixed_code": "resourceCache.add(project, null, snapshot);",
        "patch": "@@ -59,7 +59,7 @@ public class PreviousFileHashLoaderTest {\n   @Before\n   public void prepare() {\n     resourceCache = new ResourceCache();\n-    resourceCache.add(project, snapshot);\n+    resourceCache.add(project, null, snapshot);\n     loader = new PreviousFileHashLoader(project, resourceCache, snapshotDataDao, pastSnapshotFinder);\n   }\n "
    },
    {
        "commit_id": "1be6148ae4371650449a905d2237fa6abee8e1f5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1be6148ae4371650449a905d2237fa6abee8e1f5",
        "buggy_code": "throw new IllegalStateException(String.format(\"Fail to read scm accounts for user '%s'\", login));",
        "fixed_code": "throw new IllegalStateException(String.format(\"Fail to read scm accounts for user '%s'\", login), e);",
        "patch": "@@ -111,7 +111,7 @@ private List<String> getScmAccounts(@Nullable String csv, String login) {\n       }\n       return result;\n     } catch (IOException e) {\n-      throw new IllegalStateException(String.format(\"Fail to read scm accounts for user '%s'\", login));\n+      throw new IllegalStateException(String.format(\"Fail to read scm accounts for user '%s'\", login), e);\n     } finally {\n       IOUtils.closeQuietly(reader);\n       IOUtils.closeQuietly(csvParser);"
    },
    {
        "commit_id": "797e1949fdc1a94c31e89c72b8e6e642ec4d1b66",
        "commit_message": "SONAR-5954 Deprecate and update description of issue search WS parameters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/797e1949fdc1a94c31e89c72b8e6e642ec4d1b66",
        "buggy_code": "assertThat(show.params()).hasSize(32);",
        "fixed_code": "assertThat(show.params()).hasSize(37);",
        "patch": "@@ -132,7 +132,7 @@ public void define_action() throws Exception {\n     assertThat(show.isPost()).isFalse();\n     assertThat(show.isInternal()).isFalse();\n     assertThat(show.responseExampleAsString()).isNotEmpty();\n-    assertThat(show.params()).hasSize(32);\n+    assertThat(show.params()).hasSize(37);\n   }\n \n   @Test"
    },
    {
        "commit_id": "a76be79d65c9eb278688887a068cc5dacc857d28",
        "commit_message": "SONAR-5910 fix methods contracts and possible NPE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a76be79d65c9eb278688887a068cc5dacc857d28",
        "buggy_code": "return \"Uncompress analysis report\";",
        "fixed_code": "return \"Decompress analysis report\";",
        "patch": "@@ -38,6 +38,6 @@ public void execute(DbSession session, ComputeEngineContext context) {\n \n   @Override\n   public String getDescription() {\n-    return \"Uncompress analysis report\";\n+    return \"Decompress analysis report\";\n   }\n }"
    },
    {
        "commit_id": "5f3fc47926a2a2d9226ad004b93c8961615394c1",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f3fc47926a2a2d9226ad004b93c8961615394c1",
        "buggy_code": "public Collection<String> listTagsMatching(String query, int pageSize) {",
        "fixed_code": "public Collection<String> listTagsMatching(@Nullable String query, int pageSize) {",
        "patch": "@@ -475,7 +475,7 @@ private FilterBuilder matchFilter(String field, @Nullable Collection<?> values)\n     }\n   }\n \n-  public Collection<String> listTagsMatching(String query, int pageSize) {\n+  public Collection<String> listTagsMatching(@Nullable String query, int pageSize) {\n     SearchRequestBuilder count = getClient().prepareSearch(IssueIndexDefinition.INDEX)\n       .setTypes(IssueIndexDefinition.TYPE_ISSUE)\n       .setQuery(QueryBuilders.matchAllQuery());"
    },
    {
        "commit_id": "63e79feb4bc099a53bfbc5d3b8fd1cb023c614a2",
        "commit_message": "Db migration to remove sort criteria from existing issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63e79feb4bc099a53bfbc5d3b8fd1cb023c614a2",
        "buggy_code": "protected BaseDataChange(Database db) {",
        "fixed_code": "public BaseDataChange(Database db) {",
        "patch": "@@ -29,7 +29,7 @@ public abstract class BaseDataChange implements DataChange, DatabaseMigration {\n \n   private final Database db;\n \n-  protected BaseDataChange(Database db) {\n+  public BaseDataChange(Database db) {\n     this.db = db;\n   }\n "
    },
    {
        "commit_id": "63e79feb4bc099a53bfbc5d3b8fd1cb023c614a2",
        "commit_message": "Db migration to remove sort criteria from existing issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63e79feb4bc099a53bfbc5d3b8fd1cb023c614a2",
        "buggy_code": "public static final int LAST_VERSION = 720;",
        "fixed_code": "public static final int LAST_VERSION = 721;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 720;\n+  public static final int LAST_VERSION = 721;\n \n   /**\n    * List of all the tables."
    },
    {
        "commit_id": "3372885a79badd59f6ef03f7aa09f45029f8fe2c",
        "commit_message": "SONAR-5896 Create database column to hold issue tags",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3372885a79badd59f6ef03f7aa09f45029f8fe2c",
        "buggy_code": "public static final int LAST_VERSION = 720;",
        "fixed_code": "public static final int LAST_VERSION = 750;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 720;\n+  public static final int LAST_VERSION = 750;\n \n   /**\n    * List of all the tables."
    },
    {
        "commit_id": "8566dd7796789ffc6ee6a080c367e9b7fea41891",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8566dd7796789ffc6ee6a080c367e9b7fea41891",
        "buggy_code": "json.endObject().endArray().close();;",
        "fixed_code": "json.endObject().endArray().close();",
        "patch": "@@ -87,7 +87,7 @@ public void handle(Request request, Response response) {\n         json.prop(lineCounter.toString(), line);\n         lineCounter ++;\n       }\n-      json.endObject().endArray().close();;\n+      json.endObject().endArray().close();\n     } finally {\n       session.close();\n     }"
    },
    {
        "commit_id": "1a66b2fc17251ef1ae7cd5d221e886d49848804c",
        "commit_message": "fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1a66b2fc17251ef1ae7cd5d221e886d49848804c",
        "buggy_code": "sut = new UploadReportAction(queue, computationService, analysisTaskLauncher);",
        "fixed_code": "sut = new UploadReportAction(queue, analysisTaskLauncher);",
        "patch": "@@ -45,7 +45,7 @@ public void before() {\n     analysisTaskLauncher = mock(AnalysisReportTaskLauncher.class);\n     queue = mock(AnalysisReportQueue.class);\n \n-    sut = new UploadReportAction(queue, computationService, analysisTaskLauncher);\n+    sut = new UploadReportAction(queue, analysisTaskLauncher);\n   }\n \n   @Test"
    },
    {
        "commit_id": "4c60b894f15b5bc3d84f48cd20df26550301d5aa",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4c60b894f15b5bc3d84f48cd20df26550301d5aa",
        "buggy_code": "writer.beginObject().prop(\"key\", i + 1).prop(\"text\", periods.label(i + 1)).endObject();",
        "fixed_code": "writer.beginObject().prop(\"key\", (long) i + 1).prop(\"text\", periods.label(i + 1)).endObject();",
        "patch": "@@ -70,7 +70,7 @@ private void addPermissions(JsonWriter writer) {\n   private void addPeriods(JsonWriter writer) {\n     writer.name(\"periods\").beginArray();\n     for (int i=0; i < 3; i ++) {\n-      writer.beginObject().prop(\"key\", i + 1).prop(\"text\", periods.label(i + 1)).endObject();\n+      writer.beginObject().prop(\"key\", (long) i + 1).prop(\"text\", periods.label(i + 1)).endObject();\n     }\n     addProjectPeriod(4, writer);\n     addProjectPeriod(5, writer);"
    },
    {
        "commit_id": "7bb6fe7a2ec9451f2507464a830066ef1870e1a5",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7bb6fe7a2ec9451f2507464a830066ef1870e1a5",
        "buggy_code": "throw new UnsupportedOperationException(\"Cannot add reference (\" + fromOffset + \") overlapping \" + symbol);",
        "fixed_code": "throw new UnsupportedOperationException(\"Cannot add reference (\" + fromOffset + \") overlapping \" + symbol + \" in \" + componentKey);",
        "patch": "@@ -77,7 +77,7 @@ public void newReference(Symbol symbol, int fromOffset) {\n         throw new UnsupportedOperationException(\"Cannot add reference to a symbol in another file\");\n       }\n       if (fromOffset >= symbol.getDeclarationStartOffset() && fromOffset < symbol.getDeclarationEndOffset()) {\n-        throw new UnsupportedOperationException(\"Cannot add reference (\" + fromOffset + \") overlapping \" + symbol);\n+        throw new UnsupportedOperationException(\"Cannot add reference (\" + fromOffset + \") overlapping \" + symbol + \" in \" + componentKey);\n       }\n       referencesBySymbol.get(symbol).add(fromOffset);\n     }"
    },
    {
        "commit_id": "7bb6fe7a2ec9451f2507464a830066ef1870e1a5",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7bb6fe7a2ec9451f2507464a830066ef1870e1a5",
        "buggy_code": "PersistenceManager persistenceManager = new DefaultPersistenceManager(persister, null, null, null, null);",
        "fixed_code": "PersistenceManager persistenceManager = new DefaultPersistenceManager(persister, null, null, null);",
        "patch": "@@ -230,7 +230,7 @@ public void shouldSaveNewMultiModulesProjectUsingIndex() throws IOException {\n     when(projectTree.getProjectDefinition(moduleB)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir, \"moduleB\")));\n     when(projectTree.getProjectDefinition(moduleB1)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir, \"moduleB/moduleB1\")));\n \n-    PersistenceManager persistenceManager = new DefaultPersistenceManager(persister, null, null, null, null);\n+    PersistenceManager persistenceManager = new DefaultPersistenceManager(persister, null, null, null);\n     DefaultIndex index = new DefaultIndex(persistenceManager, projectTree, mock(MetricFinder.class), mock(ScanGraph.class), mock(DeprecatedViolations.class),\n       mock(ResourceKeyMigration.class),\n       mock(MeasureCache.class));"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -39,7 +39,7 @@\n \n public class ProxyBulkRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyClusterHealthRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyClusterStateRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyClusterStatsRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyCountRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyCreateIndexRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -34,7 +34,7 @@\n \n public class ProxyDeleteByQueryRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -31,7 +31,7 @@\n \n public class ProxyDeleteRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyFlushRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -34,7 +34,7 @@\n \n public class ProxyGetRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyIndicesExistsRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyIndicesStatsRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -36,7 +36,7 @@\n \n public class ProxyMultiGetRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxyNodesStatsRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -38,7 +38,7 @@\n \n public class ProxyPutMappingRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -34,7 +34,7 @@\n \n public class ProxyRefreshRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8f035c327cd7f9e84ef3491aff3d2a23fd7dd5d4",
        "buggy_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));",
        "fixed_code": "Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));",
        "patch": "@@ -33,7 +33,7 @@\n \n public class ProxySearchRequestBuilderTest {\n \n-  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n+  Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.NONE.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);\n \n   @After"
    },
    {
        "commit_id": "a6320e1ba094d3d42a90e7ec871b1b04a9998a53",
        "commit_message": "Automatic merge from branch-4.5\n\n* origin/branch-4.5:\n  SSF-24 SQL Injection on Measures page\n  Revert \"SONAR-5844 Profile inheritance is always displaying '0 rules' whatever the content of Profiles\"\n  SONAR-5844 Profile inheritance is always displaying '0 rules' whatever the content of Profiles\n  SONAR-5902 Fix preserving of planned=false\n  Update documentation of PostJob extension",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a6320e1ba094d3d42a90e7ec871b1b04a9998a53",
        "buggy_code": "\"alertLevels\", Arrays.asList(\"error\", \"warn\")",
        "fixed_code": "\"alertLevels\", Arrays.asList(\"error\", \"warn\", \"unknown\")",
        "patch": "@@ -195,7 +195,7 @@ public void measure_variation_condition() {\n   public void alert_level_condition() {\n     MeasureFilterFactory factory = new MeasureFilterFactory(newMetricFinder(), system);\n     Map<String, Object> props = ImmutableMap.<String, Object>of(\n-      \"alertLevels\", Arrays.asList(\"error\", \"warn\")\n+      \"alertLevels\", Arrays.asList(\"error\", \"warn\", \"unknown\")\n     );\n     MeasureFilter filter = factory.create(props);\n "
    },
    {
        "commit_id": "02ae6ed098db3b4b97cebcf02e727596a467bed4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/02ae6ed098db3b4b97cebcf02e727596a467bed4",
        "buggy_code": "json.value(i + from);",
        "fixed_code": "json.value(1L * i + from);",
        "patch": "@@ -107,7 +107,7 @@ private void writeSource(List<String> lines, int from, JsonWriter json) {\n     for (int i = 0; i < lines.size(); i++) {\n       String line = lines.get(i);\n       json.beginArray();\n-      json.value(i + from);\n+      json.value(1L * i + from);\n       json.value(line);\n       json.endArray();\n     }"
    },
    {
        "commit_id": "d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "buggy_code": "StopWatch fullProfile = profiling.start(\"search\", Profiling.Level.FULL);",
        "fixed_code": "StopWatch fullProfile = profiling.start(\"search scroll\", Profiling.Level.FULL);",
        "patch": "@@ -39,7 +39,7 @@ public ProxySearchScrollRequestBuilder(String scrollId, Client client, Profiling\n \n   @Override\n   public SearchResponse get() {\n-    StopWatch fullProfile = profiling.start(\"search\", Profiling.Level.FULL);\n+    StopWatch fullProfile = profiling.start(\"search scroll\", Profiling.Level.FULL);\n     try {\n       return super.execute().actionGet();\n     } catch (Exception e) {"
    },
    {
        "commit_id": "d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "buggy_code": "public class ProxyClusterStateRequestBuilderText {",
        "fixed_code": "public class ProxyClusterStateRequestBuilderTest {",
        "patch": "@@ -31,7 +31,7 @@\n import static org.fest.assertions.Assertions.assertThat;\n import static org.fest.assertions.Fail.fail;\n \n-public class ProxyClusterStateRequestBuilderText {\n+public class ProxyClusterStateRequestBuilderTest {\n \n   Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);"
    },
    {
        "commit_id": "d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "buggy_code": "public class ProxyClusterStatsRequestBuilderText {",
        "fixed_code": "public class ProxyClusterStatsRequestBuilderTest {",
        "patch": "@@ -31,7 +31,7 @@\n import static org.fest.assertions.Assertions.assertThat;\n import static org.fest.assertions.Fail.fail;\n \n-public class ProxyClusterStatsRequestBuilderText {\n+public class ProxyClusterStatsRequestBuilderTest {\n \n   Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);"
    },
    {
        "commit_id": "d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d8b2419ba390e7602cf33718e9ef1c5b07c81cb5",
        "buggy_code": "public class ProxyCreateIndexRequestBuilderText {",
        "fixed_code": "public class ProxyCreateIndexRequestBuilderTest {",
        "patch": "@@ -31,7 +31,7 @@\n import static org.fest.assertions.Assertions.assertThat;\n import static org.fest.assertions.Fail.fail;\n \n-public class ProxyCreateIndexRequestBuilderText {\n+public class ProxyCreateIndexRequestBuilderTest {\n \n   Profiling profiling = new Profiling(new Settings().setProperty(Profiling.CONFIG_PROFILING_LEVEL, Profiling.Level.FULL.name()));\n   SearchClient searchClient = new SearchClient(new Settings(), profiling);"
    },
    {
        "commit_id": "357f8f85cc94acc1216f5c0dd32f0218ad7758e5",
        "commit_message": "Fix server-test-benchmarks assertions because of Lucene optimizations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/357f8f85cc94acc1216f5c0dd32f0218ad7758e5",
        "buggy_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 80L * FileUtils.ONE_MB, 100L * FileUtils.ONE_MB);",
        "fixed_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 68L * FileUtils.ONE_MB, 74L * FileUtils.ONE_MB);",
        "patch": "@@ -86,7 +86,7 @@ private void benchmarkIndexing() {\n     tester.get(EsClient.class).prepareOptimize(SourceLineIndexDefinition.INDEX).get();\n     long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n     LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n-    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 80L * FileUtils.ONE_MB, 100L * FileUtils.ONE_MB);\n+    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 68L * FileUtils.ONE_MB, 74L * FileUtils.ONE_MB);\n   }\n \n   private void benchmarkQueries() {"
    },
    {
        "commit_id": "6e6dffc3e011c212e721c101e5c2c341a77e055d",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6e6dffc3e011c212e721c101e5c2c341a77e055d",
        "buggy_code": "return workingDays * DAY_POSITION_IN_LONG + workingHours * HOUR_POSITION_IN_LONG + minutes * MINUTE_POSITION_IN_LONG;",
        "fixed_code": "return 1L * workingDays * DAY_POSITION_IN_LONG + workingHours * HOUR_POSITION_IN_LONG + minutes * MINUTE_POSITION_IN_LONG;",
        "patch": "@@ -127,7 +127,7 @@ public long toLong() {\n       workingDays += nbAdditionalDays;\n       workingHours = hours - (nbAdditionalDays * hoursInDay);\n     }\n-    return workingDays * DAY_POSITION_IN_LONG + workingHours * HOUR_POSITION_IN_LONG + minutes * MINUTE_POSITION_IN_LONG;\n+    return 1L * workingDays * DAY_POSITION_IN_LONG + workingHours * HOUR_POSITION_IN_LONG + minutes * MINUTE_POSITION_IN_LONG;\n   }\n \n   public long toMinutes() {"
    },
    {
        "commit_id": "1984af2fdfa1eb53cf34ae9f908caddd94c0101c",
        "commit_message": "Fix assertions of sonar-server-benchmarks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1984af2fdfa1eb53cf34ae9f908caddd94c0101c",
        "buggy_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 385L * FileUtils.ONE_MB, 400L * FileUtils.ONE_MB);",
        "fixed_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 385L * FileUtils.ONE_MB, 420L * FileUtils.ONE_MB);",
        "patch": "@@ -113,7 +113,7 @@ private void benchmarkIssueIndexing() {\n \n     long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n     LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n-    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 385L * FileUtils.ONE_MB, 400L * FileUtils.ONE_MB);\n+    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 385L * FileUtils.ONE_MB, 420L * FileUtils.ONE_MB);\n   }\n \n   private void benchmarkQueries() {"
    },
    {
        "commit_id": "1984af2fdfa1eb53cf34ae9f908caddd94c0101c",
        "commit_message": "Fix assertions of sonar-server-benchmarks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1984af2fdfa1eb53cf34ae9f908caddd94c0101c",
        "buggy_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 86L * FileUtils.ONE_MB, 93L * FileUtils.ONE_MB);",
        "fixed_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 80L * FileUtils.ONE_MB, 100L * FileUtils.ONE_MB);",
        "patch": "@@ -82,7 +82,7 @@ private void benchmarkIndexing() {\n \n     long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n     LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n-    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 86L * FileUtils.ONE_MB, 93L * FileUtils.ONE_MB);\n+    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 80L * FileUtils.ONE_MB, 100L * FileUtils.ONE_MB);\n   }\n \n   private void benchmarkQueries() {"
    },
    {
        "commit_id": "d1e393bd27b1d3cfdf1729a886751ab900318340",
        "commit_message": "Fix assertions of sonar-server-benchmarks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1e393bd27b1d3cfdf1729a886751ab900318340",
        "buggy_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 73L * FileUtils.ONE_MB, 80L * FileUtils.ONE_MB);",
        "fixed_code": "benchmark.expectBetween(\"ES dir size (b)\", dirSize, 86L * FileUtils.ONE_MB, 93L * FileUtils.ONE_MB);",
        "patch": "@@ -82,7 +82,7 @@ private void benchmarkIndexing() {\n \n     long dirSize = FileUtils.sizeOfDirectory(tester.getEsServerHolder().getHomeDir());\n     LOGGER.info(String.format(\"ES dir: \" + FileUtils.byteCountToDisplaySize(dirSize)));\n-    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 73L * FileUtils.ONE_MB, 80L * FileUtils.ONE_MB);\n+    benchmark.expectBetween(\"ES dir size (b)\", dirSize, 86L * FileUtils.ONE_MB, 93L * FileUtils.ONE_MB);\n   }\n \n   private void benchmarkQueries() {"
    },
    {
        "commit_id": "c9863df6828342adab79de3b26553a932c308518",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c9863df6828342adab79de3b26553a932c308518",
        "buggy_code": "addProperties(reactor.getRoot().getProperties());",
        "fixed_code": "addProperties(reactor.getRoot().properties());",
        "patch": "@@ -55,7 +55,7 @@ private void init(ProjectReactor reactor) {\n \n     addProperties(projectReferentials.settings(reactor.getRoot().getKeyWithBranch()));\n \n-    addProperties(reactor.getRoot().getProperties());\n+    addProperties(reactor.getRoot().properties());\n   }\n \n   @Override"
    },
    {
        "commit_id": "0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "commit_message": "Refactor issue indexer (project-agnostic approach)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "buggy_code": "dto.setSelectedAt(now);",
        "fixed_code": "dto.setSelectedAt(now.getTime());",
        "patch": "@@ -63,7 +63,7 @@ public void analyse(Project project, SensorContext context) {\n       @Override\n       public void handleResult(ResultContext rc) {\n         IssueDto dto = (IssueDto) rc.getResultObject();\n-        dto.setSelectedAt(now);\n+        dto.setSelectedAt(now.getTime());\n         initialOpenIssuesStack.addIssue(dto);\n       }\n     });"
    },
    {
        "commit_id": "0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "commit_message": "Refactor issue indexer (project-agnostic approach)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "buggy_code": "List<IssueDto> issueDtos = dbClient.issueDao().getByKeys(session, authorizedIssueKeys);",
        "fixed_code": "List<IssueDto> issueDtos = dbClient.issueDao().selectByKeys(session, authorizedIssueKeys);",
        "patch": "@@ -130,7 +130,7 @@ public String apply(@Nullable Issue input) {\n \n     DbSession session = dbClient.openSession(false);\n     try {\n-      List<IssueDto> issueDtos = dbClient.issueDao().getByKeys(session, authorizedIssueKeys);\n+      List<IssueDto> issueDtos = dbClient.issueDao().selectByKeys(session, authorizedIssueKeys);\n       return newArrayList(Iterables.transform(issueDtos, new Function<IssueDto, Issue>() {\n         @Override\n         public Issue apply(@Nullable IssueDto input) {"
    },
    {
        "commit_id": "0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "commit_message": "Refactor issue indexer (project-agnostic approach)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "buggy_code": "return dbClient.issueDao().getByKey(session, authorizedIssueIndex.key());",
        "fixed_code": "return dbClient.issueDao().selectByKey(session, authorizedIssueIndex.key());",
        "patch": "@@ -312,7 +312,7 @@ public Issue getByKey(String key) {\n   IssueDto getByKeyForUpdate(DbSession session, String key) {\n     // Load from index to check permission : if the user has no permission to see the issue an exception will be generated\n     Issue authorizedIssueIndex = getByKey(key);\n-    return dbClient.issueDao().getByKey(session, authorizedIssueIndex.key());\n+    return dbClient.issueDao().selectByKey(session, authorizedIssueIndex.key());\n   }\n \n   void saveIssue(DbSession session, DefaultIssue issue, IssueChangeContext context, @Nullable String comment) {"
    },
    {
        "commit_id": "0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "commit_message": "Refactor issue indexer (project-agnostic approach)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "buggy_code": "mapper.resolveResourceIssuesNotAlreadyResolved(resourceId, new Date(system2.now()));",
        "fixed_code": "mapper.resolveResourceIssuesNotAlreadyResolved(resourceId, new Date(system2.now()), system2.now());",
        "patch": "@@ -195,7 +195,7 @@ private void disableResource(IdUuidPair resourceIdUuid, PurgeMapper mapper) {\n     mapper.setSnapshotIsLastToFalse(resourceId);\n     mapper.deleteFileSourcesByUuid(resourceIdUuid.getUuid());\n     mapper.disableResource(resourceId);\n-    mapper.resolveResourceIssuesNotAlreadyResolved(resourceId, new Date(system2.now()));\n+    mapper.resolveResourceIssuesNotAlreadyResolved(resourceId, new Date(system2.now()), system2.now());\n   }\n \n   public PurgeDao deleteSnapshots(PurgeSnapshotQuery query) {"
    },
    {
        "commit_id": "0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "commit_message": "Refactor issue indexer (project-agnostic approach)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0da5d5aca58df54a695c5dacb9dee1b0be180756",
        "buggy_code": "void resolveResourceIssuesNotAlreadyResolved(@Param(\"resourceId\") long resourceId, @Param(\"date\") Date date);",
        "fixed_code": "void resolveResourceIssuesNotAlreadyResolved(@Param(\"resourceId\") long resourceId, @Param(\"date\") Date date, @Param(\"dateAsLong\") Long dateAsLong);",
        "patch": "@@ -60,7 +60,7 @@ public interface PurgeMapper {\n \n   void disableResource(long resourceId);\n \n-  void resolveResourceIssuesNotAlreadyResolved(@Param(\"resourceId\") long resourceId, @Param(\"date\") Date date);\n+  void resolveResourceIssuesNotAlreadyResolved(@Param(\"resourceId\") long resourceId, @Param(\"date\") Date date, @Param(\"dateAsLong\") Long dateAsLong);\n \n   void deleteResourceIndex(@Param(\"resourceIds\") List<Long> resourceIds);\n "
    },
    {
        "commit_id": "421ca0d61503b7286175866608ec43a60acc7fc3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/421ca0d61503b7286175866608ec43a60acc7fc3",
        "buggy_code": "return hashesFromWs != null ? Iterators.toArray(Splitter.on('\\n').split(hashesFromWs).iterator(), String.class) : null;",
        "fixed_code": "return Iterators.toArray(Splitter.on('\\n').split(hashesFromWs).iterator(), String.class);",
        "patch": "@@ -39,7 +39,7 @@ public LastLineHashes(ServerClient server) {\n \n   public String[] getLineHashes(String fileKey) {\n     String hashesFromWs = loadHashesFromWs(fileKey);\n-    return hashesFromWs != null ? Iterators.toArray(Splitter.on('\\n').split(hashesFromWs).iterator(), String.class) : null;\n+    return Iterators.toArray(Splitter.on('\\n').split(hashesFromWs).iterator(), String.class);\n   }\n \n   private String loadHashesFromWs(String fileKey) {"
    },
    {
        "commit_id": "7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "commit_message": "SONAR-5819 SONAR-5868 Fix required permission in description of source related WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "buggy_code": ".setDescription(\"Show line line hashes for a given file. Require Browse permission on file's project<br/>\")",
        "fixed_code": ".setDescription(\"Show line line hashes for a given file. Require See Source Code permission on file's project<br/>\")",
        "patch": "@@ -46,7 +46,7 @@ public HashAction(DbClient dbClient, FileSourceDao fileSourceDao) {\n \n   void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"hash\")\n-      .setDescription(\"Show line line hashes for a given file. Require Browse permission on file's project<br/>\")\n+      .setDescription(\"Show line line hashes for a given file. Require See Source Code permission on file's project<br/>\")\n       .setSince(\"5.0\")\n       .setInternal(true)\n       .setResponseExample(Resources.getResource(getClass(), \"example-hash.txt\"))"
    },
    {
        "commit_id": "7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "commit_message": "SONAR-5819 SONAR-5868 Fix required permission in description of source related WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "buggy_code": ".setDescription(\"Show source code with line oriented info. Require Browse permission on file's project<br/>\" +",
        "fixed_code": ".setDescription(\"Show source code with line oriented info. Require See Source Code permission on file's project<br/>\" +",
        "patch": "@@ -53,7 +53,7 @@ public LinesAction(SourceLineIndex sourceLineIndex, HtmlSourceDecorator htmlSour\n \n   void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"lines\")\n-      .setDescription(\"Show source code with line oriented info. Require Browse permission on file's project<br/>\" +\n+      .setDescription(\"Show source code with line oriented info. Require See Source Code permission on file's project<br/>\" +\n         \"Each element of the result array is an object which contains:\" +\n         \"<ol>\" +\n         \"<li>Line number</li>\" +"
    },
    {
        "commit_id": "7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "commit_message": "SONAR-5819 SONAR-5868 Fix required permission in description of source related WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "buggy_code": ".setDescription(\"Get source code as plain text. Require Code viewer permission on file\")",
        "fixed_code": ".setDescription(\"Get source code as plain text. Require See Source Code permission on file\")",
        "patch": "@@ -49,7 +49,7 @@ public RawAction(DbClient dbClient, SourceService sourceService) {\n \n   void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"raw\")\n-      .setDescription(\"Get source code as plain text. Require Code viewer permission on file\")\n+      .setDescription(\"Get source code as plain text. Require See Source Code permission on file\")\n       .setSince(\"5.0\")\n       .setResponseExample(Resources.getResource(getClass(), \"example-raw.txt\"))\n       .setHandler(this);"
    },
    {
        "commit_id": "7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "commit_message": "SONAR-5819 SONAR-5868 Fix required permission in description of source related WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "buggy_code": ".setDescription(\"Get SCM information of source files. Require Browse permission on file's project<br/>\" +",
        "fixed_code": ".setDescription(\"Get SCM information of source files. Require See Source Code permission on file's project<br/>\" +",
        "patch": "@@ -40,7 +40,7 @@ public ScmAction(SourceService service, ScmWriter scmWriter) {\n \n   void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"scm\")\n-      .setDescription(\"Get SCM information of source files. Require Browse permission on file's project<br/>\" +\n+      .setDescription(\"Get SCM information of source files. Require See Source Code permission on file's project<br/>\" +\n         \"Each element of the result array is composed of:\" +\n         \"<ol>\" +\n         \"<li>Line number</li>\" +"
    },
    {
        "commit_id": "7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "commit_message": "SONAR-5819 SONAR-5868 Fix required permission in description of source related WS",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7234161efc2d0dd2650a85a6b43cbf4b5198f06d",
        "buggy_code": ".setDescription(\"Get source code. Require Browse permission on file's project<br/>\" +",
        "fixed_code": ".setDescription(\"Get source code. Require See Source Code permission on file's project<br/>\" +",
        "patch": "@@ -48,7 +48,7 @@ public ShowAction(SourceService sourceService, DbClient dbClient) {\n \n   void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"show\")\n-      .setDescription(\"Get source code. Require Browse permission on file's project<br/>\" +\n+      .setDescription(\"Get source code. Require See Source Code permission on file's project<br/>\" +\n         \"Each element of the result array is composed of:\" +\n         \"<ol>\" +\n         \"<li>Line number</li>\" +"
    },
    {
        "commit_id": "0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995",
        "commit_message": "SONAR-5868 Issue tracking now use hash WS instead of raw sources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995",
        "buggy_code": "LastSnapshots.class,",
        "fixed_code": "LastLineHashes.class,",
        "patch": "@@ -149,7 +149,7 @@ private void addBatchComponents() {\n       ResourceKeyMigration.class,\n       DefaultFileLinesContextFactory.class,\n       ProjectLock.class,\n-      LastSnapshots.class,\n+      LastLineHashes.class,\n       Caches.class,\n       SnapshotCache.class,\n       ResourceCache.class,"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueAuthorizationIndexer;",
        "fixed_code": "import org.sonar.server.issue.index.IssueAuthorizationIndexer;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.core.component.ComponentDto;\n import org.sonar.core.computation.db.AnalysisReportDto;\n import org.sonar.core.persistence.DbSession;\n-import org.sonar.server.es.IssueAuthorizationIndexer;\n+import org.sonar.server.issue.index.IssueAuthorizationIndexer;\n \n public class SynchronizeProjectPermissionsStep implements ComputationStep {\n "
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueAuthorizationIndexer;",
        "fixed_code": "import org.sonar.server.issue.index.IssueAuthorizationIndexer;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.core.user.GroupDto;\n import org.sonar.core.user.UserDto;\n import org.sonar.server.db.DbClient;\n-import org.sonar.server.es.IssueAuthorizationIndexer;\n+import org.sonar.server.issue.index.IssueAuthorizationIndexer;\n import org.sonar.server.exceptions.BadRequestException;\n import org.sonar.server.exceptions.ForbiddenException;\n import org.sonar.server.user.UserSession;"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueAuthorizationIndexer;",
        "fixed_code": "import org.sonar.server.issue.index.IssueAuthorizationIndexer;",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.server.activity.index.ActivityIndex;\n import org.sonar.server.db.Dao;\n import org.sonar.server.db.DbClient;\n-import org.sonar.server.es.IssueAuthorizationIndexer;\n+import org.sonar.server.issue.index.IssueAuthorizationIndexer;\n import org.sonar.server.issue.index.IssueIndex;\n import org.sonar.server.issue.index.IssueNormalizer;\n import org.sonar.server.qualityprofile.index.ActiveRuleIndex;"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueIndexDefinition;",
        "fixed_code": "import org.sonar.server.issue.index.IssueIndexDefinition;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.server.component.db.ComponentDao;\n import org.sonar.server.db.DbClient;\n import org.sonar.server.es.EsClient;\n-import org.sonar.server.es.IssueIndexDefinition;\n+import org.sonar.server.issue.index.IssueIndexDefinition;\n import org.sonar.server.issue.IssueTesting;\n import org.sonar.server.issue.db.IssueDao;\n import org.sonar.server.issue.index.IssueIndex;"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueAuthorizationIndexer;",
        "fixed_code": "import org.sonar.server.issue.index.IssueAuthorizationIndexer;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.server.computation;\n \n import org.junit.Test;\n-import org.sonar.server.es.IssueAuthorizationIndexer;\n+import org.sonar.server.issue.index.IssueAuthorizationIndexer;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "return (E) ConstructorUtils.invokeExactConstructor(docClass, input.getSource());",
        "fixed_code": "return (E) ConstructorUtils.invokeConstructor(docClass, input.getSource());",
        "patch": "@@ -152,7 +152,7 @@ public <E extends BaseDoc> List<E> getDocuments(String indexName, String typeNam\n       @Override\n       public E apply(SearchHit input) {\n         try {\n-          return (E) ConstructorUtils.invokeExactConstructor(docClass, input.getSource());\n+          return (E) ConstructorUtils.invokeConstructor(docClass, input.getSource());\n         } catch (Exception e) {\n           throw Throwables.propagate(e);\n         }"
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueIndexDefinition;",
        "fixed_code": "import org.sonar.server.issue.index.IssueIndexDefinition;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.server.component.ComponentTesting;\n import org.sonar.server.db.DbClient;\n import org.sonar.server.es.EsClient;\n-import org.sonar.server.es.IssueIndexDefinition;\n+import org.sonar.server.issue.index.IssueIndexDefinition;\n import org.sonar.server.tester.ServerTester;\n import org.sonar.server.user.MockUserSession;\n "
    },
    {
        "commit_id": "5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "commit_message": "Improve issue indexing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e33b9ef616e1271cc85574f6968f6e9b35c5a34",
        "buggy_code": "import org.sonar.server.es.IssueAuthorizationIndexer;",
        "fixed_code": "import org.sonar.server.issue.index.IssueAuthorizationIndexer;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.core.rule.RuleDto;\n import org.sonar.server.component.ComponentTesting;\n import org.sonar.server.db.DbClient;\n-import org.sonar.server.es.IssueAuthorizationIndexer;\n+import org.sonar.server.issue.index.IssueAuthorizationIndexer;\n import org.sonar.server.issue.IssueTesting;\n import org.sonar.server.issue.index.IssueIndex;\n import org.sonar.server.rule.RuleTesting;"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "return FilterBuilders.hasParentFilter(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION,",
        "fixed_code": "return FilterBuilders.hasParentFilter(IssueIndexDefinition.TYPE_AUTHORIZATION,",
        "patch": "@@ -293,7 +293,7 @@ private FilterBuilder getAuthorizationFilter(QueryContext options) {\n     for (String group : groups) {\n       groupsAndUser.add(FilterBuilders.termFilter(IssueIndexDefinition.FIELD_AUTHORIZATION_GROUPS, group));\n     }\n-    return FilterBuilders.hasParentFilter(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION,\n+    return FilterBuilders.hasParentFilter(IssueIndexDefinition.TYPE_AUTHORIZATION,\n       QueryBuilders.filteredQuery(\n         QueryBuilders.matchAllQuery(),\n         FilterBuilders.boolFilter()"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "sourceLineIndexer.indexSourceLines(true);",
        "fixed_code": "sourceLineIndexer.index();",
        "patch": "@@ -72,7 +72,7 @@ public void execute() {\n       synchronize(session, db.activityDao(), index.get(ActivityIndex.class));\n \n       LOG.info(\"Indexing of sourceLine records\");\n-      sourceLineIndexer.indexSourceLines(true);\n+      sourceLineIndexer.index();\n \n       session.commit();\n       LOG.info(\"Synchronization done in {}ms...\", System.currentTimeMillis() - start);"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX_ISSUES).setTypes(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION).get().getCount();",
        "fixed_code": "return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX).setTypes(IssueIndexDefinition.TYPE_AUTHORIZATION).get().getCount();",
        "patch": "@@ -135,6 +135,6 @@ public void fail_to_delete_not_project() throws Exception {\n   }\n \n   private long countIssueAuthorizationDocs() {\n-    return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX_ISSUES).setTypes(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION).get().getCount();\n+    return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX).setTypes(IssueIndexDefinition.TYPE_AUTHORIZATION).get().getCount();\n   }\n }"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "public void truncateAllIndices() {",
        "fixed_code": "public void truncateIndices() {",
        "patch": "@@ -115,7 +115,7 @@ protected void after() {\n     }\n   }\n \n-  public void truncateAllIndices() {\n+  public void truncateIndices() {\n     client.prepareDeleteByQuery(client.prepareState().get()\n       .getState().getMetaData().concreteAllIndices())\n       .setQuery(QueryBuilders.matchAllQuery())"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "assertThat(esTester.countDocuments(IssueIndexDefinition.INDEX_ISSUES, IssueIndexDefinition.TYPE_ISSUE)).isEqualTo(0L);",
        "fixed_code": "assertThat(esTester.countDocuments(IssueIndexDefinition.INDEX, IssueIndexDefinition.TYPE_ISSUE)).isEqualTo(0L);",
        "patch": "@@ -36,7 +36,7 @@ public class IssueIndexerTest {\n   public void index_nothing() throws Exception {\n     IssueIndexer indexer = new IssueIndexer(null, esTester.client());\n     indexer.index(indexer.createBulkIndexer(false), Iterators.<IssueDoc>emptyIterator());\n-    assertThat(esTester.countDocuments(IssueIndexDefinition.INDEX_ISSUES, IssueIndexDefinition.TYPE_ISSUE)).isEqualTo(0L);\n+    assertThat(esTester.countDocuments(IssueIndexDefinition.INDEX, IssueIndexDefinition.TYPE_ISSUE)).isEqualTo(0L);\n   }\n \n }"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX_ISSUES).setTypes(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION).get().getCount();",
        "fixed_code": "return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX).setTypes(IssueIndexDefinition.TYPE_AUTHORIZATION).get().getCount();",
        "patch": "@@ -176,6 +176,6 @@ private Map<String, Object> params(@Nullable String login, @Nullable String grou\n   }\n \n   private long countIssueAuthorizationDocs() {\n-    return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX_ISSUES).setTypes(IssueIndexDefinition.TYPE_ISSUE_AUTHORIZATION).get().getCount();\n+    return tester.get(EsClient.class).prepareCount(IssueIndexDefinition.INDEX).setTypes(IssueIndexDefinition.TYPE_AUTHORIZATION).get().getCount();\n   }\n }"
    },
    {
        "commit_id": "92db06d9381acec6188bb6ee547afa2193391d6e",
        "commit_message": "SONAR-5801 support empty files\n\n+ fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92db06d9381acec6188bb6ee547afa2193391d6e",
        "buggy_code": "es.putDocuments(SourceLineIndexDefinition.INDEX_SOURCE_LINES, SourceLineIndexDefinition.TYPE_SOURCE_LINE,",
        "fixed_code": "es.putDocuments(SourceLineIndexDefinition.INDEX, SourceLineIndexDefinition.TYPE,",
        "patch": "@@ -41,7 +41,7 @@ public void setUp() {\n \n   @Test\n   public void should_retrieve_line_range() throws Exception {\n-    es.putDocuments(SourceLineIndexDefinition.INDEX_SOURCE_LINES, SourceLineIndexDefinition.TYPE_SOURCE_LINE,\n+    es.putDocuments(SourceLineIndexDefinition.INDEX, SourceLineIndexDefinition.TYPE,\n       this.getClass(),\n       \"file1_line1.json\",\n       \"file1_line2.json\","
    },
    {
        "commit_id": "074b44ed7d64a306826fd76add9d48fdcbb9ae59",
        "commit_message": "Fix faulty test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/074b44ed7d64a306826fd76add9d48fdcbb9ae59",
        "buggy_code": "jRubyI18n.ageFromNow(new Date());",
        "fixed_code": "jRubyI18n.ageFromNow(date);",
        "patch": "@@ -83,7 +83,7 @@ public void message() throws Exception {\n   @Test\n   public void age_from_now() throws Exception {\n     Date date = new Date();\n-    jRubyI18n.ageFromNow(new Date());\n+    jRubyI18n.ageFromNow(date);\n     verify(i18n).ageFromNow(any(Locale.class), eq(date));\n   }\n "
    },
    {
        "commit_id": "fb4d00ab50f9daabba1b421f33789c77fceebb15",
        "commit_message": "Fix SQL request used by issues indexing\n\n* strict comparison of issue updated_at",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fb4d00ab50f9daabba1b421f33789c77fceebb15",
        "buggy_code": "sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \" AND projects.authorization_updated_at>=? \");",
        "fixed_code": "sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \" AND projects.authorization_updated_at>? \");",
        "patch": "@@ -165,7 +165,7 @@ Collection<Dto> selectAfterDate(DbClient dbClient, Connection connection, long a\n   private PreparedStatement createStatement(DbClient dbClient, Connection connection, long afterDate) throws SQLException {\n     String sql;\n     if (afterDate > 0L) {\n-      sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \" AND projects.authorization_updated_at>=? \");\n+      sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \" AND projects.authorization_updated_at>? \");\n     } else {\n       sql = StringUtils.replace(SQL_TEMPLATE, \"{dateCondition}\", \"\");\n     }"
    },
    {
        "commit_id": "fb4d00ab50f9daabba1b421f33789c77fceebb15",
        "commit_message": "Fix SQL request used by issues indexing\n\n* strict comparison of issue updated_at",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fb4d00ab50f9daabba1b421f33789c77fceebb15",
        "buggy_code": "private static final String SQL_AFTER_DATE = SQL_ALL + \" where i.updated_at>=?\";",
        "fixed_code": "private static final String SQL_AFTER_DATE = SQL_ALL + \" where i.updated_at>?\";",
        "patch": "@@ -77,7 +77,7 @@ class IssueResultSetIterator extends ResultSetIterator<IssueDoc> {\n     \"inner join projects p on p.id=i.component_id \" +\n     \"inner join projects root on root.id=i.root_component_id\";\n \n-  private static final String SQL_AFTER_DATE = SQL_ALL + \" where i.updated_at>=?\";\n+  private static final String SQL_AFTER_DATE = SQL_ALL + \" where i.updated_at>?\";\n \n   static IssueResultSetIterator create(DbClient dbClient, Connection connection, long afterDate) {\n     try {"
    },
    {
        "commit_id": "2421409de3a7402d6f9cb31ee7c2a43fa1b76e39",
        "commit_message": " Fix compatibility of SourceLineDoc with Java 6",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2421409de3a7402d6f9cb31ee7c2a43fa1b76e39",
        "buggy_code": "return getField(SourceLineIndexDefinition.FIELD_LINE);",
        "fixed_code": "return ((Number)getField(SourceLineIndexDefinition.FIELD_LINE)).intValue();",
        "patch": "@@ -48,7 +48,7 @@ public void setFileUuid(String fileUuid) {\n   }\n \n   public int line() {\n-    return getField(SourceLineIndexDefinition.FIELD_LINE);\n+    return ((Number)getField(SourceLineIndexDefinition.FIELD_LINE)).intValue();\n   }\n \n   public void setLine(int line) {"
    },
    {
        "commit_id": "50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "buggy_code": "return (DefaultIssue) new DefaultIssueBuilder()",
        "fixed_code": "return new DefaultIssueBuilder()",
        "patch": "@@ -72,7 +72,7 @@ public boolean initAndAddViolation(Violation violation) {\n   }\n \n   private DefaultIssue newIssue(Violation violation) {\n-    return (DefaultIssue) new DefaultIssueBuilder()\n+    return new DefaultIssueBuilder()\n       .componentKey(violation.getResource().getEffectiveKey())\n       // Project can be null but Violation not used by scan2\n       .projectKey(project.getRoot().getEffectiveKey())"
    },
    {
        "commit_id": "50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "buggy_code": "this(((long) days * hoursInDay * MINUTES_IN_ONE_HOUR) + (hours * MINUTES_IN_ONE_HOUR) + minutes);",
        "fixed_code": "this((days * hoursInDay * MINUTES_IN_ONE_HOUR) + (hours * MINUTES_IN_ONE_HOUR) + minutes);",
        "patch": "@@ -48,7 +48,7 @@ private Duration(long durationInMinutes) {\n   }\n \n   private Duration(int days, int hours, int minutes, int hoursInDay) {\n-    this(((long) days * hoursInDay * MINUTES_IN_ONE_HOUR) + (hours * MINUTES_IN_ONE_HOUR) + minutes);\n+    this((days * hoursInDay * MINUTES_IN_ONE_HOUR) + (hours * MINUTES_IN_ONE_HOUR) + minutes);\n   }\n \n   /**"
    },
    {
        "commit_id": "50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/50050c7ea204110ee4ac3bf59e8f42f510622f12",
        "buggy_code": "int days = ((Double) ((double) duration / hoursInDay / 60d)).intValue();",
        "fixed_code": "int days = ((Double) (duration / hoursInDay / 60d)).intValue();",
        "patch": "@@ -100,7 +100,7 @@ static WorkDuration createFromLong(long duration, int hoursInDay) {\n   }\n \n   static WorkDuration createFromMinutes(long duration, int hoursInDay) {\n-    int days = ((Double) ((double) duration / hoursInDay / 60d)).intValue();\n+    int days = ((Double) (duration / hoursInDay / 60d)).intValue();\n     Long currentDurationInMinutes = duration - (60L * days * hoursInDay);\n     int hours = ((Double) (currentDurationInMinutes / 60d)).intValue();\n     currentDurationInMinutes = currentDurationInMinutes - (60L * hours);"
    },
    {
        "commit_id": "392223920378664ef36a697abf83289da135a6f8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/392223920378664ef36a697abf83289da135a6f8",
        "buggy_code": "LOGGER.info(\"Processed {} Issues in {} ms with avg {} Issue/second\", ISSUE_COUNT, time, documentPerSecond(time));",
        "fixed_code": "LOGGER.info(\"Inserted {} Issues in {} ms with avg {} Issue/second\", ISSUE_COUNT, time, documentPerSecond(time));",
        "patch": "@@ -100,7 +100,7 @@ public void inject_issues() throws Exception {\n       assertThat(issueIndex.countAll()).isEqualTo(ISSUE_COUNT);\n \n       long time = stop - start;\n-      LOGGER.info(\"Processed {} Issues in {} ms with avg {} Issue/second\", ISSUE_COUNT, time, documentPerSecond(time));\n+      LOGGER.info(\"Inserted {} Issues in {} ms with avg {} Issue/second\", ISSUE_COUNT, time, documentPerSecond(time));\n       assertDurationAround(time, Long.parseLong(getProperty(\"IssuesIndexInjectionTest.inject_issues\")));\n \n     } finally {"
    },
    {
        "commit_id": "995281fc1ef2a052da65f423e7f5f0cc4f44b21a",
        "commit_message": "fix quality flaws and refactorings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/995281fc1ef2a052da65f423e7f5f0cc4f44b21a",
        "buggy_code": "public void clean(long projectId, Settings settings, DbSession session) {",
        "fixed_code": "public void clean(DbSession session, long projectId, Settings settings) {",
        "patch": "@@ -61,7 +61,7 @@ public void clean(long projectId, Settings settings) {\n     }\n   }\n \n-  public void clean(long projectId, Settings settings, DbSession session) {\n+  public void clean(DbSession session, long projectId, Settings settings) {\n     doClean(projectId, new Filters(settings).all(), session);\n   }\n "
    },
    {
        "commit_id": "ded6f5142faee4e1fd527083818dccf9ad27662b",
        "commit_message": "SONAR-5742 Fix visibility condition for extra fields (check is already done underneath for actions/transitions)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ded6f5142faee4e1fd527083818dccf9ad27662b",
        "buggy_code": "if (extraFields != null && UserSession.get().isLoggedIn()) {",
        "fixed_code": "if (extraFields != null) {",
        "patch": "@@ -534,7 +534,7 @@ private void writeIssueAttributes(Issue issue, JsonWriter json) {\n   private void writeIssueExtraFields(Issue issue, @Nullable String projectKey, Map<String, User> usersByLogin, Map<String, ActionPlan> actionPlanByKeys,\n     @Nullable List<String> extraFields,\n     JsonWriter json) {\n-    if (extraFields != null && UserSession.get().isLoggedIn()) {\n+    if (extraFields != null) {\n       if (extraFields.contains(ACTIONS_EXTRA_FIELD)) {\n         actionsWriter.writeActions(issue, json);\n       }"
    },
    {
        "commit_id": "90a5a37c6b1846310ab11901a039094ffbf08040",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/90a5a37c6b1846310ab11901a039094ffbf08040",
        "buggy_code": "public static IndexDefinition TEST = new IndexDefinition(\"test\", \"test\");",
        "fixed_code": "static final IndexDefinition TEST = new IndexDefinition(\"test\", \"test\");",
        "patch": "@@ -44,7 +44,7 @@ public String getIndexType() {\n   public static final IndexDefinition LOG = new IndexDefinition(\"logs\", \"sonarLog\");\n \n   // Only used for test\n-  public static IndexDefinition TEST = new IndexDefinition(\"test\", \"test\");\n+  static final IndexDefinition TEST = new IndexDefinition(\"test\", \"test\");\n \n   public static IndexDefinition createFor(String indexName, String indexType) {\n     return new IndexDefinition(indexName, indexType);"
    },
    {
        "commit_id": "fe4f8f3ea793534076e23def2c2f94550053b663",
        "commit_message": "SONAR-5810 fix compatibility with SQLServer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe4f8f3ea793534076e23def2c2f94550053b663",
        "buggy_code": "massUpdate.select(\"SELECT if.id, if.data FROM issue_filters if\");",
        "fixed_code": "massUpdate.select(\"SELECT f.id, f.data FROM issue_filters f\");",
        "patch": "@@ -51,7 +51,7 @@ public void execute(final Context context) throws SQLException {\n     final Date now = new Date(system.now());\n \n     MassUpdate massUpdate = context.prepareMassUpdate();\n-    massUpdate.select(\"SELECT if.id, if.data FROM issue_filters if\");\n+    massUpdate.select(\"SELECT f.id, f.data FROM issue_filters f\");\n     massUpdate.update(\"UPDATE issue_filters SET data=?, updated_at=? WHERE id=?\");\n     massUpdate.execute(new MassUpdate.Handler() {\n       @Override"
    },
    {
        "commit_id": "78f292cad7cab9cfc654173c3184c91bd66af668",
        "commit_message": "SONAR-5810 Migrate issue filters to replace project keys by uuids",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/78f292cad7cab9cfc654173c3184c91bd66af668",
        "buggy_code": "public static final int LAST_VERSION = 709;",
        "fixed_code": "public static final int LAST_VERSION = 710;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 709;\n+  public static final int LAST_VERSION = 710;\n   /**\n    * List of all the tables.\n    * This list is hardcoded because we didn't succeed in using java.sql.DatabaseMetaData#getTables() in the same way"
    },
    {
        "commit_id": "0ddf1ebc068e1ffb9dd1c24ba6eb7230e3649865",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ddf1ebc068e1ffb9dd1c24ba6eb7230e3649865",
        "buggy_code": "String url = String.format(\"%s/issues/search#componentRootUUids=%s|createdAt=%s\",",
        "fixed_code": "String url = String.format(\"%s/issues/search#componentRootUuids=%s|createdAt=%s\",",
        "patch": "@@ -87,7 +87,7 @@ private void appendFooter(StringBuilder sb, Notification notification) {\n     String dateString = notification.getFieldValue(FIELD_PROJECT_DATE);\n     if (projectUuid != null && dateString != null) {\n       Date date = DateUtils.parseDateTime(dateString);\n-      String url = String.format(\"%s/issues/search#componentRootUUids=%s|createdAt=%s\",\n+      String url = String.format(\"%s/issues/search#componentRootUuids=%s|createdAt=%s\",\n         settings.getServerBaseURL(), encode(projectUuid), encode(DateUtils.formatDateTime(date)));\n       sb.append(\"\\n\").append(\"See it in SonarQube: \").append(url).append(\"\\n\");\n     }"
    },
    {
        "commit_id": "0ddf1ebc068e1ffb9dd1c24ba6eb7230e3649865",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ddf1ebc068e1ffb9dd1c24ba6eb7230e3649865",
        "buggy_code": "\"See it in SonarQube: http://nemo.sonarsource.org/issues/search#componentRootUUids=ABCDE|createdAt=2010-05-1\");",
        "fixed_code": "\"See it in SonarQube: http://nemo.sonarsource.org/issues/search#componentRootUuids=ABCDE|createdAt=2010-05-1\");",
        "patch": "@@ -103,7 +103,7 @@ public void shouldFormatCommentAdded() {\n       \"\\n\" +\n       \"   Blocker: 0   Critical: 5   Major: 10   Minor: 3   Info: 1\\n\" +\n       \"\\n\" +\n-      \"See it in SonarQube: http://nemo.sonarsource.org/issues/search#componentRootUUids=ABCDE|createdAt=2010-05-1\");\n+      \"See it in SonarQube: http://nemo.sonarsource.org/issues/search#componentRootUuids=ABCDE|createdAt=2010-05-1\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "8d4de159470b0be61376b0b47e54758a55b51b28",
        "commit_message": "SONAR-5747 Make issue facet on component root consistent with issue filter\n(componentRootUuids)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d4de159470b0be61376b0b47e54758a55b51b28",
        "buggy_code": "IssueFilterParameters.COMPONENT_ROOT_UUIDS, IssueNormalizer.IssueField.PROJECT.field(), query.componentRootUuids().toArray());",
        "fixed_code": "IssueFilterParameters.COMPONENT_ROOT_UUIDS, IssueNormalizer.IssueField.MODULE_PATH.field(), query.componentRootUuids().toArray());",
        "patch": "@@ -327,7 +327,7 @@ private void setFacets(IssueQuery query, QueryContext options, Map<String, Filte\n       addSimpleStickyFacetIfNeeded(query, options, filters, esQuery, esSearch,\n         IssueFilterParameters.ACTION_PLANS, IssueNormalizer.IssueField.ACTION_PLAN.field(), query.actionPlans().toArray());\n       addSimpleStickyFacetIfNeeded(query, options, filters, esQuery, esSearch,\n-        IssueFilterParameters.COMPONENT_ROOT_UUIDS, IssueNormalizer.IssueField.PROJECT.field(), query.componentRootUuids().toArray());\n+        IssueFilterParameters.COMPONENT_ROOT_UUIDS, IssueNormalizer.IssueField.MODULE_PATH.field(), query.componentRootUuids().toArray());\n       addSimpleStickyFacetIfNeeded(query, options, filters, esQuery, esSearch,\n         IssueFilterParameters.COMPONENT_UUIDS, IssueNormalizer.IssueField.COMPONENT.field(), query.componentUuids().toArray());\n       addSimpleStickyFacetIfNeeded(query, options, filters, esQuery, esSearch,"
    },
    {
        "commit_id": "7c6bdb3fae33e96d69fa91da05bdbba7e6a7c840",
        "commit_message": "Fix issue tracking regression after last optimizations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c6bdb3fae33e96d69fa91da05bdbba7e6a7c840",
        "buggy_code": "issueCache.removeAll(resource.getEffectiveKey());",
        "fixed_code": "issueCache.clear(resource.getEffectiveKey());",
        "patch": "@@ -114,7 +114,7 @@ void doDecorate(Resource resource) {\n     for (Issue issue : issueCache.byComponent(resource.getEffectiveKey())) {\n       issues.add((DefaultIssue) issue);\n     }\n-    issueCache.removeAll(resource.getEffectiveKey());\n+    issueCache.clear(resource.getEffectiveKey());\n     // issues = all the issues created by rule engines during this module scan and not excluded by filters\n \n     // all the issues that are not closed in db before starting this module scan, including manual issues"
    },
    {
        "commit_id": "1a3678f675549ee82d492efc031de96711e9bc19",
        "commit_message": "SONAR-5687 fix settings of ES cluster",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1a3678f675549ee82d492efc031de96711e9bc19",
        "buggy_code": "assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with property \" + ProcessConstants.CLUSTER_ACTIVATE + \"=true\");",
        "fixed_code": "assertThat(e).hasMessage(\"Invalid number of Elasticsearch replicas: 0\");",
        "patch": "@@ -163,7 +163,7 @@ public void slave_failed_replication() throws Exception {\n       slaveServer.start();\n       fail();\n     } catch (Exception e) {\n-      assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with property \" + ProcessConstants.CLUSTER_ACTIVATE + \"=true\");\n+      assertThat(e).hasMessage(\"Invalid number of Elasticsearch replicas: 0\");\n     }\n \n     assertThat(client.admin().cluster().prepareClusterStats().get()"
    },
    {
        "commit_id": "3aad958a181266d3bbb3ff3c1a177907baa5b893",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3aad958a181266d3bbb3ff3c1a177907baa5b893",
        "buggy_code": "Boolean facets = request.paramAsBoolean(\"facets\");",
        "fixed_code": "Boolean facets = request.paramAsBoolean(PARAM_FACETS);",
        "patch": "@@ -214,7 +214,7 @@ public void handle(Request request, Response response) {\n     RuleQuery query = createRuleQuery(ruleService.newRuleQuery(), request);\n     SearchOptions searchOptions = SearchOptions.create(request);\n     QueryContext queryContext = mapping.newQueryOptions(searchOptions);\n-    Boolean facets = request.paramAsBoolean(\"facets\");\n+    Boolean facets = request.paramAsBoolean(PARAM_FACETS);\n     if (facets != null && facets) {\n       queryContext.addFacets(Arrays.asList(\"languages\", \"repositories\", \"tags\"));\n     }"
    },
    {
        "commit_id": "d3f4edab1a59c5ebd800cf4f83891208ba483308",
        "commit_message": "SONAR-5787 fix sorting of issues by file then line\n\nES analyzer \"sortable\" must not truncate values",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d3f4edab1a59c5ebd800cf4f83891208ba483308",
        "buggy_code": ".putArray(\"index.analysis.analyzer.sortable.filter\", \"trim\", \"lowercase\", \"truncate\")",
        "fixed_code": ".putArray(\"index.analysis.analyzer.sortable.filter\", \"trim\", \"lowercase\")",
        "patch": "@@ -544,7 +544,7 @@ private ImmutableSettings.Builder getBaseIndexSettings() {\n       // Sortable text analyzer\n       .put(\"index.analysis.analyzer.sortable.type\", \"custom\")\n       .put(\"index.analysis.analyzer.sortable.tokenizer\", \"keyword\")\n-      .putArray(\"index.analysis.analyzer.sortable.filter\", \"trim\", \"lowercase\", \"truncate\")\n+      .putArray(\"index.analysis.analyzer.sortable.filter\", \"trim\", \"lowercase\")\n \n       // Edge NGram index-analyzer\n       .put(\"index.analysis.analyzer.index_grams.type\", \"custom\")"
    },
    {
        "commit_id": "92521dc6547d516be403e2621fc2cf536face4d2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92521dc6547d516be403e2621fc2cf536face4d2",
        "buggy_code": "LOGGER.info(\" - synchronized {} {}\", count, getIndexType());",
        "fixed_code": "LOGGER.info(\"Synchronized {} {}\", count, getIndexType());",
        "patch": "@@ -324,7 +324,7 @@ public void handleResult(ResultContext resultContext) {\n         getSession().enqueue(new InsertDto<DTO>(getIndexType(), dto, false));\n         count++;\n         if (count % 100000 == 0) {\n-          LOGGER.info(\" - synchronized {} {}\", count, getIndexType());\n+          LOGGER.info(\"Synchronized {} {}\", count, getIndexType());\n         }\n       }\n "
    },
    {
        "commit_id": "dc5bbf3ed6fdf9cb2aecbe552b4e4a6e6eb673b3",
        "commit_message": "Fix profiling output",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dc5bbf3ed6fdf9cb2aecbe552b4e4a6e6eb673b3",
        "buggy_code": "getProfilingPerPhase(phase).dump();",
        "fixed_code": "getProfilingPerPhase(phase).dump(props);",
        "patch": "@@ -85,7 +85,7 @@ public void dump(Properties props) {\n       if (profilingPerPhase.containsKey(phase) && getProfilingPerPhase(phase).hasItems()) {\n         println(\"\");\n         println(\" * \" + phase + \" execution time breakdown: \", getProfilingPerPhase(phase));\n-        getProfilingPerPhase(phase).dump();\n+        getProfilingPerPhase(phase).dump(props);\n       }\n     }\n   }"
    },
    {
        "commit_id": "96911ca23e7f017975567d3ba1afb0994a230aff",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/96911ca23e7f017975567d3ba1afb0994a230aff",
        "buggy_code": "assertThat(new DbCleanerProperties().all()).hasSize(6);",
        "fixed_code": "assertThat(DbCleanerProperties.all()).hasSize(6);",
        "patch": "@@ -28,6 +28,6 @@ public class DbCleanerPropertiesTest {\n \n   @Test\n   public void shouldGetExtensions() {\n-    assertThat(new DbCleanerProperties().all()).hasSize(6);\n+    assertThat(DbCleanerProperties.all()).hasSize(6);\n   }\n }"
    },
    {
        "commit_id": "ab4ec0fea3f5bb7ecae9cdb2739b373046515b59",
        "commit_message": "SONAR-5755 Fix issue with deeply nested modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab4ec0fea3f5bb7ecae9cdb2739b373046515b59",
        "buggy_code": "private Bucket doIndex(Resource resource, Resource parentReference) {",
        "fixed_code": "private Bucket doIndex(Resource resource, @Nullable Resource parentReference) {",
        "patch": "@@ -546,7 +546,7 @@ public boolean index(Resource resource, Resource parentReference) {\n     return bucket != null;\n   }\n \n-  private Bucket doIndex(Resource resource, Resource parentReference) {\n+  private Bucket doIndex(Resource resource, @Nullable Resource parentReference) {\n     Bucket bucket = getBucket(resource);\n     if (bucket != null) {\n       return bucket;"
    },
    {
        "commit_id": "ab4ec0fea3f5bb7ecae9cdb2739b373046515b59",
        "commit_message": "SONAR-5755 Fix issue with deeply nested modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ab4ec0fea3f5bb7ecae9cdb2739b373046515b59",
        "buggy_code": "snapshot = persistProject((Project) resource, project);",
        "fixed_code": "snapshot = persistProject((Project) resource, (Project) parent);",
        "patch": "@@ -181,7 +181,7 @@ private Snapshot persist(Project project, Resource resource, @Nullable Resource\n     Snapshot snapshot;\n     if (resource instanceof Project) {\n       // should not occur, please use the method saveProject()\n-      snapshot = persistProject((Project) resource, project);\n+      snapshot = persistProject((Project) resource, (Project) parent);\n \n     } else if (resource instanceof Library) {\n       snapshot = persistLibrary(project, (Library) resource);"
    },
    {
        "commit_id": "9c467f71a35ebb691acbb77bb1de3d825c4b109d",
        "commit_message": "Fix documentation of sonar.cluster.activate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c467f71a35ebb691acbb77bb1de3d825c4b109d",
        "buggy_code": "assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with 'sonar.cluster.activation=true'\");",
        "fixed_code": "assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with property \" + ProcessConstants.CLUSTER_ACTIVATE + \"=true\");",
        "patch": "@@ -163,7 +163,7 @@ public void slave_failed_replication() throws Exception {\n       slaveServer.start();\n       fail();\n     } catch (Exception e) {\n-      assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with 'sonar.cluster.activation=true'\");\n+      assertThat(e).hasMessage(\"Index configuration is not set to cluster. Please start the master node with property \" + ProcessConstants.CLUSTER_ACTIVATE + \"=true\");\n     }\n \n     assertThat(client.admin().cluster().prepareClusterStats().get()"
    },
    {
        "commit_id": "545887882d1bba374d91d733badc03033d4ee331",
        "commit_message": "Fix SwitchLogbackAppenderTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/545887882d1bba374d91d733badc03033d4ee331",
        "buggy_code": "logger.warn(\"an error\");",
        "fixed_code": "logger.error(\"an error\");",
        "patch": "@@ -87,7 +87,7 @@ public void compute_service_log_goes_to_dedicated_appender() throws JoranExcepti\n       assertThat(console.list).hasSize(1);\n       assertThat(console.list.get(0).getMessage()).isEqualTo(\"a warning\");\n \n-      logger.warn(\"an error\");\n+      logger.error(\"an error\");\n       assertThat(analyisReports.list).hasSize(3);\n       assertThat(analyisReports.list.get(2).getMessage()).isEqualTo(\"an error\");\n       assertThat(console.list).hasSize(2);"
    },
    {
        "commit_id": "8dff1cb96de47823bfe3f587591fc16a9194e380",
        "commit_message": "SONAR-5753 Fix migration on mssql",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8dff1cb96de47823bfe3f587591fc16a9194e380",
        "buggy_code": "LOG.info(\"Try to synchronize issues permissions on a project without UUID, ignore\");",
        "fixed_code": "LOG.warn(\"Try to synchronize issues permissions on a project without UUID, ignore\");",
        "patch": "@@ -283,7 +283,7 @@ public void synchronizePermissions(DbSession session, @Nullable String projectUu\n         ImmutableMap.of(IssueAuthorizationDao.PROJECT_UUID, projectUuid));\n     } else {\n       // TODO Set this log in debug mode to not poluate the logs.\n-      LOG.info(\"Try to synchronize issues permissions on a project without UUID, ignore\");\n+      LOG.warn(\"Try to synchronize issues permissions on a project without UUID, ignore\");\n     }\n   }\n }"
    },
    {
        "commit_id": "3c63eef41f5702262960b05a5667ddefe1fc3c82",
        "commit_message": "Fix JDBC connection leak when executing tests on non-H2",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c63eef41f5702262960b05a5667ddefe1fc3c82",
        "buggy_code": "dbSession.close();",
        "fixed_code": "MyBatis.closeQuietly(dbSession);",
        "patch": "@@ -71,8 +71,8 @@ public void clearDb() {\n       }\n \n     } finally {\n-      dbSession.close();\n       DbUtils.closeQuietly(connection);\n+      MyBatis.closeQuietly(dbSession);\n     }\n   }\n "
    },
    {
        "commit_id": "3c63eef41f5702262960b05a5667ddefe1fc3c82",
        "commit_message": "Fix JDBC connection leak when executing tests on non-H2",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c63eef41f5702262960b05a5667ddefe1fc3c82",
        "buggy_code": "System.out.println(nodeHealth.getAddress());",
        "fixed_code": "dbSession.close();",
        "patch": "@@ -45,6 +45,7 @@ public void get_search_health() {\n     DbSession dbSession = tester.get(DbClient.class).openSession(false);\n     tester.get(RuleDao.class).insert(dbSession, RuleTesting.newDto(RuleKey.of(\"javascript\", \"S001\")));\n     dbSession.commit();\n+    dbSession.close();\n \n     SearchHealth health = tester.get(SearchHealth.class);\n     Date now = new Date();\n@@ -55,7 +56,6 @@ public void get_search_health() {\n \n     NodeHealth nodeHealth = health.getNodesHealth().values().iterator().next();\n     assertThat(nodeHealth.isMaster()).isTrue();\n-    System.out.println(nodeHealth.getAddress());\n     assertThat(nodeHealth.getAddress()).contains(\":\");\n     assertThat(nodeHealth.getJvmHeapUsedPercent()).contains(\"%\");\n     assertThat(nodeHealth.getFsUsedPercent()).contains(\"%\");"
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": "updater.setPastProject(issue, ref.getRootComponentKey(), changeContext);",
        "fixed_code": "updater.setPastProject(issue, ref.getProjectKey(), changeContext);",
        "patch": "@@ -183,7 +183,7 @@ protected void mergeMatched(IssueTrackingResult result) {\n       Long debtInMinutes = ref.getDebt();\n       Duration previousTechnicalDebt = debtInMinutes != null ? Duration.create(debtInMinutes) : null;\n       updater.setPastTechnicalDebt(issue, previousTechnicalDebt, changeContext);\n-      updater.setPastProject(issue, ref.getRootComponentKey(), changeContext);\n+      updater.setPastProject(issue, ref.getProjectKey(), changeContext);\n     }\n   }\n "
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": ".setLine(10).setSeverity(\"MAJOR\").setMessage(\"Message\").setEffortToFix(1.5).setDebt(1L).setRootComponentKey(\"sample\");",
        "fixed_code": ".setLine(10).setSeverity(\"MAJOR\").setMessage(\"Message\").setEffortToFix(1.5).setDebt(1L).setProjectKey(\"sample\");",
        "patch": "@@ -508,7 +508,7 @@ public boolean matches(Object o) {\n   @Test\n   public void merge_matched_issue() throws Exception {\n     IssueDto previousIssue = new IssueDto().setKee(\"ABCDE\").setResolution(null).setStatus(\"OPEN\").setRuleKey(\"squid\", \"AvoidCycle\")\n-      .setLine(10).setSeverity(\"MAJOR\").setMessage(\"Message\").setEffortToFix(1.5).setDebt(1L).setRootComponentKey(\"sample\");\n+      .setLine(10).setSeverity(\"MAJOR\").setMessage(\"Message\").setEffortToFix(1.5).setDebt(1L).setProjectKey(\"sample\");\n     DefaultIssue issue = new DefaultIssue();\n \n     IssueTrackingResult trackingResult = mock(IssueTrackingResult.class);"
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": "STRING, TEXT, DATE, BOOLEAN, NUMERIC, OBJECT",
        "fixed_code": "STRING, TEXT, DATE, BOOLEAN, NUMERIC, OBJECT, UUID_PATH",
        "patch": "@@ -28,7 +28,7 @@\n public class IndexField {\n \n   public static enum Type {\n-    STRING, TEXT, DATE, BOOLEAN, NUMERIC, OBJECT\n+    STRING, TEXT, DATE, BOOLEAN, NUMERIC, OBJECT, UUID_PATH\n   }\n \n   public static final String SORT_SUFFIX = \"sort\";"
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": "when(issueService.getByKeyForUpdate(session, \"ABCD\")).thenReturn(issue.setRootComponentKey(\"struts\"));",
        "fixed_code": "when(issueService.getByKeyForUpdate(session, \"ABCD\")).thenReturn(issue.setProjectKey(\"struts\"));",
        "patch": "@@ -131,7 +131,7 @@ public void inject_project_settings_when_executing_a_function() {\n     when(userSession.login()).thenReturn(\"arthur\");\n \n     when(componentDao.getByKey(session, \"struts\")).thenReturn(new ComponentDto().setKey(\"struts\"));\n-    when(issueService.getByKeyForUpdate(session, \"ABCD\")).thenReturn(issue.setRootComponentKey(\"struts\"));\n+    when(issueService.getByKeyForUpdate(session, \"ABCD\")).thenReturn(issue.setProjectKey(\"struts\"));\n \n     actions.add(\"link-to-jira\").setConditions(new AlwaysMatch()).setFunctions(function);\n     assertThat(actionService.execute(\"ABCD\", \"link-to-jira\", userSession)).isNotNull();"
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": "IssueDto dto = IssueDto.toDtoForInsert(issue, componentId, projectId, ruleId, now);",
        "fixed_code": "IssueDto dto = IssueDto.toDtoForBatchInsert(issue, componentId, projectId, ruleId, now);",
        "patch": "@@ -59,7 +59,7 @@ protected void doInsert(DbSession session, Date now, DefaultIssue issue) {\n     long componentId = componentId(issue);\n     long projectId = projectId();\n     int ruleId = ruleId(issue);\n-    IssueDto dto = IssueDto.toDtoForInsert(issue, componentId, projectId, ruleId, now);\n+    IssueDto dto = IssueDto.toDtoForBatchInsert(issue, componentId, projectId, ruleId, now);\n     issueMapper.insert(dto);\n   }\n "
    },
    {
        "commit_id": "dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "commit_message": "SONAR-5530 Add uuid in Issue Index",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dabfb5f4d87c195a7190a60c0d2f955324583f69",
        "buggy_code": "mapper.update(IssueDto.toDtoForUpdate(issue, dbIssue.getRootComponentId(), new Date()));",
        "fixed_code": "mapper.update(IssueDto.toDtoForUpdate(issue, dbIssue.getProjectId(), new Date()));",
        "patch": "@@ -41,7 +41,7 @@ public void resolve(DefaultIssue issue, IssueMapper mapper) {\n     IssueDto dbIssue = mapper.selectByKey(issue.key());\n     if (dbIssue != null) {\n       mergeFields(dbIssue, issue);\n-      mapper.update(IssueDto.toDtoForUpdate(issue, dbIssue.getRootComponentId(), new Date()));\n+      mapper.update(IssueDto.toDtoForUpdate(issue, dbIssue.getProjectId(), new Date()));\n     }\n   }\n "
    },
    {
        "commit_id": "72045d70986657e12fa25f9ca525eb8463b4cbbd",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/72045d70986657e12fa25f9ca525eb8463b4cbbd",
        "buggy_code": "import org.elasticsearch.common.collect.Maps;",
        "fixed_code": "import com.google.common.collect.Maps;",
        "patch": "@@ -21,11 +21,11 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n import org.apache.commons.lang.BooleanUtils;\n import org.elasticsearch.action.search.SearchRequestBuilder;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.search.SearchType;\n-import org.elasticsearch.common.collect.Maps;\n import org.elasticsearch.common.settings.ImmutableSettings;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.index.query.*;"
    },
    {
        "commit_id": "0ea4f8c3a5f4f10dbb46578d66d92a7c68754a24",
        "commit_message": "Automatic merge from branch-4.5\n\n* origin/branch-4.5:\n  SONAR-5758 fix SQL request",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0ea4f8c3a5f4f10dbb46578d66d92a7c68754a24",
        "buggy_code": "massUpdate.update(\"delete activities where id=?\");",
        "fixed_code": "massUpdate.update(\"delete from activities where id=?\");",
        "patch": "@@ -45,7 +45,7 @@ public DeleteUnescapedActivities(Database db) {\n   public void execute(Context context) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"select id,data_field from activities where log_type='QPROFILE'\");\n-    massUpdate.update(\"delete activities where id=?\");\n+    massUpdate.update(\"delete from activities where id=?\");\n     massUpdate.execute(new MassUpdate.Handler() {\n       @Override\n       public boolean handle(Select.Row row, SqlStatement update) throws SQLException {"
    },
    {
        "commit_id": "63cdfde62aef9741ff58214ef6c149fa32c6dbb4",
        "commit_message": "SONAR-5758 fix SQL request",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63cdfde62aef9741ff58214ef6c149fa32c6dbb4",
        "buggy_code": "massUpdate.update(\"delete activities where id=?\");",
        "fixed_code": "massUpdate.update(\"delete from activities where id=?\");",
        "patch": "@@ -45,7 +45,7 @@ public DeleteUnescapedActivities(Database db) {\n   public void execute(Context context) throws SQLException {\n     MassUpdate massUpdate = context.prepareMassUpdate();\n     massUpdate.select(\"select id,data_field from activities where log_type='QPROFILE'\");\n-    massUpdate.update(\"delete activities where id=?\");\n+    massUpdate.update(\"delete from activities where id=?\");\n     massUpdate.execute(new MassUpdate.Handler() {\n       @Override\n       public boolean handle(Select.Row row, SqlStatement update) throws SQLException {"
    },
    {
        "commit_id": "d729f8a4210f367385bce3784bcf12bd7602e1d1",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d729f8a4210f367385bce3784bcf12bd7602e1d1",
        "buggy_code": ".setValue(indexTotalTime / indexCount));",
        "fixed_code": ".setValue(indexCount > 0L ? indexTotalTime / indexCount : 0.0));",
        "patch": "@@ -186,7 +186,7 @@ public long getFilterCacheMemory() {\n         .setWarnThreshold(10)\n         .setErrorThreshold(50)\n         .setMessage(\"Too complex documents or low IO/CPU\")\n-        .setValue(indexTotalTime / indexCount));\n+        .setValue(indexCount > 0L ? indexTotalTime / indexCount : 0.0));\n \n     // Query stats\n     long queryCount = nodesStats.getIndices().getSearch().getTotal().getQueryCount();"
    },
    {
        "commit_id": "32cde0094a41917cdfb3b1496d00f0f3b5d526bf",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/32cde0094a41917cdfb3b1496d00f0f3b5d526bf",
        "buggy_code": "if (rule != null && rule.status() != RuleStatus.REMOVED) { // Why removed ?",
        "fixed_code": "if (rule != null && rule.status() != RuleStatus.REMOVED) {",
        "patch": "@@ -86,7 +86,7 @@ public Collection<org.sonar.api.rules.Rule> findByKeys(Collection<RuleKey> ruleK\n   @CheckForNull\n   public org.sonar.api.rules.Rule findByKey(RuleKey key) {\n     Rule rule = index.getNullableByKey(key);\n-    if (rule != null && rule.status() != RuleStatus.REMOVED) { // Why removed ?\n+    if (rule != null && rule.status() != RuleStatus.REMOVED) {\n       return toRule(rule);\n     } else {\n       return null;"
    },
    {
        "commit_id": "e32c8e0de68a635133caf0bac8422dc775a0579d",
        "commit_message": "SONAR-5529 Fix issue on MySQL when adding a comment",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e32c8e0de68a635133caf0bac8422dc775a0579d",
        "buggy_code": "issueStorage.save(issue);",
        "fixed_code": "issueStorage.save(session, issue);",
        "patch": "@@ -317,7 +317,7 @@ void saveIssue(DbSession session, DefaultIssue issue, IssueChangeContext context\n     if (projectKey == null) {\n       throw new IllegalStateException(String.format(\"Issue '%s' has no project key\", issue.key()));\n     }\n-    issueStorage.save(issue);\n+    issueStorage.save(session, issue);\n     issueNotifications.sendChanges(issue, context,\n       getRuleByKey(issue.ruleKey()),\n       dbClient.componentDao().getByKey(session, projectKey),"
    },
    {
        "commit_id": "e32c8e0de68a635133caf0bac8422dc775a0579d",
        "commit_message": "SONAR-5529 Fix issue on MySQL when adding a comment",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e32c8e0de68a635133caf0bac8422dc775a0579d",
        "buggy_code": "if (rule != null && rule.status() != RuleStatus.REMOVED) {",
        "fixed_code": "if (rule != null && rule.status() != RuleStatus.REMOVED) { // Why removed ?",
        "patch": "@@ -86,7 +86,7 @@ public Collection<org.sonar.api.rules.Rule> findByKeys(Collection<RuleKey> ruleK\n   @CheckForNull\n   public org.sonar.api.rules.Rule findByKey(RuleKey key) {\n     Rule rule = index.getNullableByKey(key);\n-    if (rule != null && rule.status() != RuleStatus.REMOVED) {\n+    if (rule != null && rule.status() != RuleStatus.REMOVED) { // Why removed ?\n       return toRule(rule);\n     } else {\n       return null;"
    },
    {
        "commit_id": "faac1c4c612560a410c250dfd5a3876024addfe8",
        "commit_message": "Automatic merge from branch-4.5\n\n* origin/branch-4.5:\n  Fix SearchClient to display exception detail on error\n  SONAR-5751 Table headers don't wrap correctly in printable version",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/faac1c4c612560a410c250dfd5a3876024addfe8",
        "buggy_code": "LOGGER.error(\"could not execute request: {}\", request);",
        "fixed_code": "LOGGER.error(String.format(\"could not execute request: %s\", request), e);",
        "patch": "@@ -100,7 +100,7 @@ public <K extends ActionResponse> K execute(ActionRequestBuilder request) {\n       }\n       return response;\n     } catch (Exception e) {\n-      LOGGER.error(\"could not execute request: {}\", request);\n+      LOGGER.error(String.format(\"could not execute request: %s\", request), e);\n       throw new IllegalStateException(\"ES error: \", e);\n     }\n   }"
    },
    {
        "commit_id": "6541635733c140e7e6cfa0fb4f454cefe98de1fd",
        "commit_message": "Fix SearchClient to display exception detail on error",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6541635733c140e7e6cfa0fb4f454cefe98de1fd",
        "buggy_code": "LOGGER.error(\"could not execute request: {}\", request);",
        "fixed_code": "LOGGER.error(String.format(\"could not execute request: %s\", request), e);",
        "patch": "@@ -100,7 +100,7 @@ public <K extends ActionResponse> K execute(ActionRequestBuilder request) {\n       }\n       return response;\n     } catch (Exception e) {\n-      LOGGER.error(\"could not execute request: {}\", request);\n+      LOGGER.error(String.format(\"could not execute request: %s\", request), e);\n       throw new IllegalStateException(\"ES error: \", e);\n     }\n   }"
    },
    {
        "commit_id": "b82da6d622c3648f016098eb6964555ad75879f9",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b82da6d622c3648f016098eb6964555ad75879f9",
        "buggy_code": "FileUtils.write(xooTestPlanFile, \"test1:UNIT:OK:::3\\ntest2:INTEGRATION:ERROR:Assertion failure:A very long stack:12\");",
        "fixed_code": "FileUtils.write(xooTestPlanFile, \"test1:UNIT:OK:::\\ntest2:INTEGRATION:ERROR:Assertion failure:A very long stack:12\");",
        "patch": "@@ -73,7 +73,7 @@ public void populateTestCaseOnTempProject() throws IOException {\n     File xooTestFile = new File(testDir, \"sampleTest.xoo\");\n     File xooTestPlanFile = new File(testDir, \"sampleTest.xoo.testplan\");\n     FileUtils.write(xooTestFile, \"Sample test xoo\\ncontent\");\n-    FileUtils.write(xooTestPlanFile, \"test1:UNIT:OK:::3\\ntest2:INTEGRATION:ERROR:Assertion failure:A very long stack:12\");\n+    FileUtils.write(xooTestPlanFile, \"test1:UNIT:OK:::\\ntest2:INTEGRATION:ERROR:Assertion failure:A very long stack:12\");\n \n     TaskResult result = tester.newTask()\n       .properties(ImmutableMap.<String, String>builder()"
    },
    {
        "commit_id": "4fde336a3e06fa28f65f19fd078cc377828c4524",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4fde336a3e06fa28f65f19fd078cc377828c4524",
        "buggy_code": "if (developmentCost != 0d) {",
        "fixed_code": "if (Double.doubleToRawLongBits(developmentCost) != 0L) {",
        "patch": "@@ -141,7 +141,7 @@ private long getMeasureValue(DecoratorContext context, Metric metric) {\n   }\n \n   protected double computeDensity(double debt, double developmentCost) {\n-    if (developmentCost != 0d) {\n+    if (Double.doubleToRawLongBits(developmentCost) != 0L) {\n       return debt / developmentCost;\n     }\n     return 0d;"
    },
    {
        "commit_id": "92f899b7f11ab6127f7333289a06e31f45eaa8e0",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92f899b7f11ab6127f7333289a06e31f45eaa8e0",
        "buggy_code": "if (developmentCost != 0f) {",
        "fixed_code": "if (Double.doubleToRawLongBits(developmentCost) != 0L) {",
        "patch": "@@ -141,7 +141,7 @@ private long getMeasureValue(DecoratorContext context, Metric metric) {\n   }\n \n   protected double computeDensity(double debt, double developmentCost) {\n-    if (developmentCost != 0f) {\n+    if (Double.doubleToRawLongBits(developmentCost) != 0L) {\n       return debt / developmentCost;\n     }\n     return 0f;"
    },
    {
        "commit_id": "c809056c115524c9303c5b9c8e77964d976d4226",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c809056c115524c9303c5b9c8e77964d976d4226",
        "buggy_code": "double result = count==0.0 ? 0.0 : sum/count;",
        "fixed_code": "double result = Double.doubleToRawLongBits(count)==0L ? 0.0 : sum/count;",
        "patch": "@@ -63,7 +63,7 @@ public Measure calculate(FormulaData data, FormulaContext context) {\n       return null;\n     }\n \n-    double result = count==0.0 ? 0.0 : sum/count;\n+    double result = Double.doubleToRawLongBits(count)==0L ? 0.0 : sum/count;\n     return new Measure(context.getTargetMetric(), result);\n   }\n }"
    },
    {
        "commit_id": "5e7744ae006b41948359fe60841e8e66701fc5f9",
        "commit_message": "SONAR-5330 Fix issue when source dirs are symbolic links",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5e7744ae006b41948359fe60841e8e66701fc5f9",
        "buggy_code": "File workingDir = new File(workingDirPath);",
        "fixed_code": "File workingDir = new File(workingDirPath).getAbsoluteFile();",
        "patch": "@@ -36,7 +36,7 @@ public class TempFolderProvider extends ProviderAdapter {\n   public TempFolder provide(BootstrapProperties bootstrapProps) {\n     if (tempFolder == null) {\n       String workingDirPath = StringUtils.defaultIfBlank(bootstrapProps.property(CoreProperties.WORKING_DIRECTORY), CoreProperties.WORKING_DIRECTORY_DEFAULT_VALUE);\n-      File workingDir = new File(workingDirPath);\n+      File workingDir = new File(workingDirPath).getAbsoluteFile();\n       File tempDir = new File(workingDir, \".sonartmp\");\n       try {\n         FileUtils.forceMkdir(tempDir);"
    },
    {
        "commit_id": "95551739d6659af8c03250a708f075937e607456",
        "commit_message": "Fix merge",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/95551739d6659af8c03250a708f075937e607456",
        "buggy_code": "assertThat(new XooPlugin().getExtensions()).hasSize(14);",
        "fixed_code": "assertThat(new XooPlugin().getExtensions()).hasSize(17);",
        "patch": "@@ -27,6 +27,6 @@ public class XooPluginTest {\n \n   @Test\n   public void provide_extensions() {\n-    assertThat(new XooPlugin().getExtensions()).hasSize(14);\n+    assertThat(new XooPlugin().getExtensions()).hasSize(17);\n   }\n }"
    },
    {
        "commit_id": "d65c9957139e4b0da94f5cf797dfe98cfd62ce77",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d65c9957139e4b0da94f5cf797dfe98cfd62ce77",
        "buggy_code": "CoverageService.TYPE type = CoverageService.TYPE.valueOf(request.param(TYPE));",
        "fixed_code": "CoverageService.TYPE type = CoverageService.TYPE.valueOf(request.mandatoryParam(TYPE));",
        "patch": "@@ -95,7 +95,7 @@ public void handle(Request request, Response response) {\n \n     int from = Math.max(request.mandatoryParamAsInt(FROM), 1);\n     int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(TO), Integer.MAX_VALUE);\n-    CoverageService.TYPE type = CoverageService.TYPE.valueOf(request.param(TYPE));\n+    CoverageService.TYPE type = CoverageService.TYPE.valueOf(request.mandatoryParam(TYPE));\n \n     JsonWriter json = response.newJsonWriter().beginObject();\n "
    },
    {
        "commit_id": "28d06e64fc9658e8d6b6947d1213a6e046aac2fc",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/28d06e64fc9658e8d6b6947d1213a6e046aac2fc",
        "buggy_code": "this(uri, responseContent, null);",
        "fixed_code": "this(uri, responseContent, \"\");",
        "patch": "@@ -341,7 +341,7 @@ public static class HttpException extends RuntimeException {\n     private final String responseContent;\n \n     public HttpException(URI uri, int responseContent) {\n-      this(uri, responseContent, null);\n+      this(uri, responseContent, \"\");\n     }\n \n     public HttpException(URI uri, int responseCode, String responseContent) {"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "MeasureKey(int metricId, Integer characteristicId, Integer personId, @Nullable Integer ruleId) {",
        "fixed_code": "MeasureKey(int metricId, @Nullable Integer characteristicId, @Nullable Integer personId, @Nullable Integer ruleId) {",
        "patch": "@@ -160,7 +160,7 @@ static final class MeasureKey {\n       ruleId = PastMeasuresLoader.getRuleId(pastFields);\n     }\n \n-    MeasureKey(int metricId, Integer characteristicId, Integer personId, @Nullable Integer ruleId) {\n+    MeasureKey(int metricId, @Nullable Integer characteristicId, @Nullable Integer personId, @Nullable Integer ruleId) {\n       this.metricId = metricId;\n       this.characteristicId = characteristicId;\n       this.personId = personId;"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "package org.sonar.plugins.emailnotifications.templates.alerts;",
        "fixed_code": "package org.sonar.plugins.emailnotifications;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.emailnotifications.templates.alerts;\n+package org.sonar.plugins.emailnotifications;\n \n import org.apache.commons.lang.StringUtils;\n import org.sonar.api.config.EmailSettings;"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "package org.sonar.plugins.emailnotifications.templates.alerts;",
        "fixed_code": "package org.sonar.plugins.emailnotifications;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.emailnotifications.templates.alerts;\n+package org.sonar.plugins.emailnotifications;\n \n import org.junit.Before;\n import org.junit.Test;"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "public static Set<IndexField> ALL_FIELDS = getAllFields();",
        "fixed_code": "public static final Set<IndexField> ALL_FIELDS = getAllFields();",
        "patch": "@@ -58,7 +58,7 @@ public static class ActiveRuleField extends Indexable {\n     public static final IndexField CREATED_AT = addSortable(IndexField.Type.DATE, \"createdAt\");\n     public static final IndexField UPDATED_AT = addSortable(IndexField.Type.DATE, UPDATED_AT_FIELD);\n \n-    public static Set<IndexField> ALL_FIELDS = getAllFields();\n+    public static final Set<IndexField> ALL_FIELDS = getAllFields();\n \n     private static Set<IndexField> getAllFields() {\n       Set<IndexField> fields = new HashSet<IndexField>();"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "public class DirectoryTangleIndexDecorator extends TangleIndexDecorator {",
        "fixed_code": "public class DirectoryTangleIndexDecorator extends BaseTangleIndexDecorator {",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.api.measures.CoreMetrics;\n \n-public class DirectoryTangleIndexDecorator extends TangleIndexDecorator {\n+public class DirectoryTangleIndexDecorator extends BaseTangleIndexDecorator {\n \n   public DirectoryTangleIndexDecorator() {\n     super(CoreMetrics.DIRECTORY_TANGLES, CoreMetrics.DIRECTORY_EDGES_WEIGHT, CoreMetrics.DIRECTORY_TANGLE_INDEX);"
    },
    {
        "commit_id": "7d562d641868532e5edbd6f03fac739eff9bcc90",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7d562d641868532e5edbd6f03fac739eff9bcc90",
        "buggy_code": "public class FileTangleIndexDecorator extends TangleIndexDecorator {",
        "fixed_code": "public class FileTangleIndexDecorator extends BaseTangleIndexDecorator {",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.api.measures.CoreMetrics;\n \n-public class FileTangleIndexDecorator extends TangleIndexDecorator {\n+public class FileTangleIndexDecorator extends BaseTangleIndexDecorator {\n \n   public FileTangleIndexDecorator() {\n     super(CoreMetrics.FILE_TANGLES, CoreMetrics.FILE_EDGES_WEIGHT, CoreMetrics.FILE_TANGLE_INDEX);"
    },
    {
        "commit_id": "39934181c5a5eba68665ea8922ff9a28322d0c0a",
        "commit_message": "fix MySql IT tests caused by MySql limitation regarding Update statement with a sub-query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/39934181c5a5eba68665ea8922ff9a28322d0c0a",
        "buggy_code": "AnalysisReportDto report = dao.tryToBookReportAnalysis(session, nextAvailableReport);",
        "fixed_code": "AnalysisReportDto report = dao.bookAnalysisReport(session, nextAvailableReport);",
        "patch": "@@ -108,7 +108,7 @@ public synchronized AnalysisReportDto findAndBookNextAvailableAnalysisReport() {\n         return null;\n       }\n \n-      AnalysisReportDto report = dao.tryToBookReportAnalysis(session, nextAvailableReport);\n+      AnalysisReportDto report = dao.bookAnalysisReport(session, nextAvailableReport);\n       session.commit();\n \n       return report;"
    },
    {
        "commit_id": "39934181c5a5eba68665ea8922ff9a28322d0c0a",
        "commit_message": "fix MySql IT tests caused by MySql limitation regarding Update statement with a sub-query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/39934181c5a5eba68665ea8922ff9a28322d0c0a",
        "buggy_code": "int updateWithBookingReport(@Param(\"id\") Long id, @Param(\"projectKey\") String projectKey, @Param(\"updatedAt\") Date updatedAt,",
        "fixed_code": "int updateWithBookingReport(@Param(\"id\") Long id, @Param(\"updatedAt\") Date updatedAt,",
        "patch": "@@ -43,7 +43,7 @@ public interface AnalysisReportMapper {\n \n   int update(AnalysisReportDto report);\n \n-  int updateWithBookingReport(@Param(\"id\") Long id, @Param(\"projectKey\") String projectKey, @Param(\"updatedAt\") Date updatedAt,\n+  int updateWithBookingReport(@Param(\"id\") Long id, @Param(\"updatedAt\") Date updatedAt,\n     @Param(\"availableStatus\") AnalysisReportDto.Status availableStatus,\n     @Param(\"busyStatus\") AnalysisReportDto.Status busyStatus);\n "
    },
    {
        "commit_id": "393f9888e69e209b2755aebaed3709a167399b29",
        "commit_message": "Fix merge with 4.5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/393f9888e69e209b2755aebaed3709a167399b29",
        "buggy_code": "assertThat(dashboard.getWidgets()).hasSize(11);",
        "fixed_code": "assertThat(dashboard.getWidgets()).hasSize(10);",
        "patch": "@@ -44,6 +44,6 @@ public void should_create_dashboard() {\n     Dashboard dashboard = template.createDashboard();\n \n     assertThat(dashboard.getLayout()).isEqualTo(DashboardLayout.TWO_COLUMNS);\n-    assertThat(dashboard.getWidgets()).hasSize(11);\n+    assertThat(dashboard.getWidgets()).hasSize(10);\n   }\n }"
    },
    {
        "commit_id": "b0903c3790a72643840e147501a739604e3083de",
        "commit_message": "SONAR-5575 Fix missing parameter when creating and updating custom rule with empty parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b0903c3790a72643840e147501a739604e3083de",
        "buggy_code": "public static final int LAST_VERSION = 600;",
        "fixed_code": "public static final int LAST_VERSION = 601;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 600;\n+  public static final int LAST_VERSION = 601;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "2442eb65831fbe560a7530b6eb3452b4a5e63238",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2442eb65831fbe560a7530b6eb3452b4a5e63238",
        "buggy_code": "private static Logger LOGGER = LoggerFactory.getLogger(SearchSettings.class);",
        "fixed_code": "private static final Logger LOGGER = LoggerFactory.getLogger(SearchSettings.class);",
        "patch": "@@ -37,7 +37,7 @@\n \n class SearchSettings {\n \n-  private static Logger LOGGER = LoggerFactory.getLogger(SearchSettings.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SearchSettings.class);\n \n   public static final String PROP_HTTP_PORT = \"sonar.search.httpPort\";\n   public static final String PROP_MARVEL_HOSTS = \"sonar.search.marvelHosts\";"
    },
    {
        "commit_id": "9ff8fd5b773b4fc5ac1587311c4b0d3b7d21c609",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9ff8fd5b773b4fc5ac1587311c4b0d3b7d21c609",
        "buggy_code": "return (G) Boolean.valueOf(1.0 == value);",
        "fixed_code": "return (G) Boolean.valueOf(Double.doubleToRawLongBits(value) != 0L);",
        "patch": "@@ -248,7 +248,7 @@ public Double getValue() {\n   public G value() {\n     switch (getMetric().getType()) {\n       case BOOL:\n-        return (G) Boolean.valueOf(1.0 == value);\n+        return (G) Boolean.valueOf(Double.doubleToRawLongBits(value) != 0L);\n       case INT:\n       case MILLISEC:\n         return (G) Integer.valueOf(value.intValue());"
    },
    {
        "commit_id": "fac42bff8871befc994f1efd5cb8e6c803f44283",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fac42bff8871befc994f1efd5cb8e6c803f44283",
        "buggy_code": "private final static Set<String> BLACKLISTED_PLUGINS = new HashSet<String>(Arrays.asList(\"scmactivity\"));",
        "fixed_code": "private static final Set<String> BLACKLISTED_PLUGINS = new HashSet<String>(Arrays.asList(\"scmactivity\"));",
        "patch": "@@ -53,7 +53,7 @@ public class ServerPluginJarsInstaller {\n   private final ServerPluginJarInstaller installer;\n   private final Map<String, PluginMetadata> pluginByKeys = Maps.newHashMap();\n   private final ServerUpgradeStatus serverUpgradeStatus;\n-  private final static Set<String> BLACKLISTED_PLUGINS = new HashSet<String>(Arrays.asList(\"scmactivity\"));\n+  private static final Set<String> BLACKLISTED_PLUGINS = new HashSet<String>(Arrays.asList(\"scmactivity\"));\n \n   public ServerPluginJarsInstaller(Server server, ServerUpgradeStatus serverUpgradeStatus,\n     DefaultServerFileSystem fs, ServerPluginJarInstaller installer) {"
    },
    {
        "commit_id": "fac42bff8871befc994f1efd5cb8e6c803f44283",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fac42bff8871befc994f1efd5cb8e6c803f44283",
        "buggy_code": "public DefaultMeasure<?> byMetric(String projectKey, String resourceKey, String metricKey) {",
        "fixed_code": "public DefaultMeasure byMetric(String projectKey, String resourceKey, String metricKey) {",
        "patch": "@@ -49,7 +49,7 @@ public Iterable<DefaultMeasure> byModule(String projectKey) {\n     return cache.values(projectKey);\n   }\n \n-  public DefaultMeasure<?> byMetric(String projectKey, String resourceKey, String metricKey) {\n+  public DefaultMeasure byMetric(String projectKey, String resourceKey, String metricKey) {\n     return cache.get(projectKey, resourceKey, metricKey);\n   }\n "
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<DeleteRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<DeleteRequest> doCall(Index index) {",
        "patch": "@@ -42,7 +42,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<DeleteRequest> doCall(Index index) throws Exception {\n+  public List<DeleteRequest> doCall(Index index) {\n     List<DeleteRequest> requests = new ArrayList<DeleteRequest>();\n     requests.add(Requests.deleteRequest(index.getIndexName())\n       .id(getKey())"
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<UpdateRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<UpdateRequest> doCall(Index index) {",
        "patch": "@@ -45,7 +45,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<UpdateRequest> doCall(Index index) throws Exception {\n+  public List<UpdateRequest> doCall(Index index) {\n     List<UpdateRequest> updates = new ArrayList<UpdateRequest>();\n     updates.addAll(deleteItem(index, item, key));\n     for (Object otherItem : items) {"
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<ActionRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<ActionRequest> doCall(Index index) {",
        "patch": "@@ -42,7 +42,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<ActionRequest> doCall(Index index) throws Exception {\n+  public List<ActionRequest> doCall(Index index) {\n     List<ActionRequest> inserts = new ArrayList<ActionRequest>();\n     List<UpdateRequest> updates = index.getNormalizer().normalize(dto);\n     for (UpdateRequest update : updates) {"
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<RefreshRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<RefreshRequest> doCall(Index index) {",
        "patch": "@@ -37,7 +37,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<RefreshRequest> doCall(Index index) throws Exception {\n+  public List<RefreshRequest> doCall(Index index) {\n     return ImmutableList.of(\n       new RefreshRequest()\n         .force(false)"
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<UpdateRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<UpdateRequest> doCall(Index index) {",
        "patch": "@@ -44,7 +44,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<UpdateRequest> doCall(Index index) throws Exception {\n+  public List<UpdateRequest> doCall(Index index) {\n     List<UpdateRequest> updates = index.getNormalizer().normalize(dto);\n     for (UpdateRequest update : updates) {\n       update.index(index.getIndexName())"
    },
    {
        "commit_id": "eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb5a7d26a5b7270351a78ba239068e197430b3ec",
        "buggy_code": "public List<UpdateRequest> doCall(Index index) throws Exception {",
        "fixed_code": "public List<UpdateRequest> doCall(Index index) {",
        "patch": "@@ -45,7 +45,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public List<UpdateRequest> doCall(Index index) throws Exception {\n+  public List<UpdateRequest> doCall(Index index) {\n     List<UpdateRequest> updates = new ArrayList<UpdateRequest>();\n     updates.addAll(normalizeItem(index, item, key));\n     for (Object otherItem : items) {"
    },
    {
        "commit_id": "99fa2be3429f1612edd016d1260c08d97ebc8404",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/99fa2be3429f1612edd016d1260c08d97ebc8404",
        "buggy_code": "ruleDebt != null ? ruleDebt.offset() : null, updateDate, session);",
        "fixed_code": "ruleDebt != null ? ruleDebt.offset() : null, session);",
        "patch": "@@ -240,7 +240,7 @@ private void restoreRules(List<CharacteristicDto> allCharacteristicDtos, List<Ru\n       ruleOperations.updateRule(rule, subCharacteristicDto,\n         ruleDebt != null ? ruleDebt.function() : null,\n         ruleDebt != null ? ruleDebt.coefficient() : null,\n-        ruleDebt != null ? ruleDebt.offset() : null, updateDate, session);\n+        ruleDebt != null ? ruleDebt.offset() : null, session);\n       rule.setUpdatedAt(updateDate);\n       ruleDebts.remove(ruleDebt);\n     }"
    },
    {
        "commit_id": "99fa2be3429f1612edd016d1260c08d97ebc8404",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/99fa2be3429f1612edd016d1260c08d97ebc8404",
        "buggy_code": "long projectId = storage.projectId(new DefaultIssue().setComponentKey(\"struts:Action.java\"));",
        "fixed_code": "long projectId = storage.projectId();",
        "patch": "@@ -100,7 +100,7 @@ public void should_fail_to_load_component_id_if_unknown_component() throws Excep\n   public void should_load_project_id() throws Exception {\n     when(projectTree.getRootProject()).thenReturn((Project) new Project(\"struts\").setId(100));\n \n-    long projectId = storage.projectId(new DefaultIssue().setComponentKey(\"struts:Action.java\"));\n+    long projectId = storage.projectId();\n \n     assertThat(projectId).isEqualTo(100);\n   }"
    },
    {
        "commit_id": "118382fbab8c1c829a22a013ee16ac13d4286655",
        "commit_message": "Fixed SearchClient error output to show request",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/118382fbab8c1c829a22a013ee16ac13d4286655",
        "buggy_code": "LOGGER.error(\"could not execute request: \" + request, e);",
        "fixed_code": "LOGGER.error(\"could not execute request: {}\", request);",
        "patch": "@@ -100,7 +100,7 @@ public <K extends ActionResponse> K execute(ActionRequestBuilder request) {\n       }\n       return response;\n     } catch (Exception e) {\n-      LOGGER.error(\"could not execute request: \" + request, e);\n+      LOGGER.error(\"could not execute request: {}\", request);\n       throw new IllegalStateException(\"ES error: \", e);\n     }\n   }"
    },
    {
        "commit_id": "d0ff15f62677b41d72e2c0ad63d799ce6778ad01",
        "commit_message": "Fixed SearchClient error output to show request",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0ff15f62677b41d72e2c0ad63d799ce6778ad01",
        "buggy_code": "LOGGER.error(\"could not execute request: \" + response, e);",
        "fixed_code": "LOGGER.error(\"could not execute request: \" + request, e);",
        "patch": "@@ -100,7 +100,7 @@ public <K extends ActionResponse> K execute(ActionRequestBuilder request) {\n       }\n       return response;\n     } catch (Exception e) {\n-      LOGGER.error(\"could not execute request: \" + response, e);\n+      LOGGER.error(\"could not execute request: \" + request, e);\n       throw new IllegalStateException(\"ES error: \", e);\n     }\n   }"
    },
    {
        "commit_id": "22264aabab2636a64a18513650e973df185aeb43",
        "commit_message": "SONAR-5531 Fix /api/issues/search when issues are linked on removed file",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/22264aabab2636a64a18513650e973df185aeb43",
        "buggy_code": ".prop(\"componentId\", componentDto.getId())",
        "fixed_code": ".prop(\"componentId\", componentDto != null ? componentDto.getId() : null)",
        "patch": "@@ -342,7 +342,7 @@ private void writeIssues(Result<Issue> result, Multimap<String, DefaultIssueComm\n         .prop(\"key\", issue.key())\n         .prop(\"component\", issue.componentKey())\n         // Only used for the compatibility with the Issues Java WS Client <= 4.4 used by Eclipse\n-        .prop(\"componentId\", componentDto.getId())\n+        .prop(\"componentId\", componentDto != null ? componentDto.getId() : null)\n         .prop(\"project\", issue.projectKey())\n         .prop(\"rule\", issue.ruleKey().toString())\n         .prop(\"status\", issue.status())"
    },
    {
        "commit_id": "b0c0624706cdaf22a6d4c966ad69693e13430e74",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b0c0624706cdaf22a6d4c966ad69693e13430e74",
        "buggy_code": "getComponentByType(ModuleScanExecutor.class).execute(moduleDefinition);",
        "fixed_code": "getComponentByType(ModuleScanExecutor.class).execute();",
        "patch": "@@ -139,7 +139,7 @@ public boolean accept(Object extension) {\n \n   @Override\n   protected void doAfterStart() {\n-    getComponentByType(ModuleScanExecutor.class).execute(moduleDefinition);\n+    getComponentByType(ModuleScanExecutor.class).execute();\n   }\n \n }"
    },
    {
        "commit_id": "d8a2f59a61e32d547c378197efd53edeab3e9f4b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d8a2f59a61e32d547c378197efd53edeab3e9f4b",
        "buggy_code": "result = index.search(new RuleQuery().setQueryText(\"aeiou\"), new QueryOptions().setFacet(true));",
        "fixed_code": "result = index.search(new RuleQuery().setQueryText(\"aeiou\"), new QueryContext().setFacet(true));",
        "patch": "@@ -107,7 +107,7 @@ public void global_facet_on_repositories_and_tags() {\n     assertThat(result.getFacets()).isEmpty();\n \n     // should not have any facet on non matching query!\n-    result = index.search(new RuleQuery().setQueryText(\"aeiou\"), new QueryOptions().setFacet(true));\n+    result = index.search(new RuleQuery().setQueryText(\"aeiou\"), new QueryContext().setFacet(true));\n     assertThat(result.getFacets()).isEmpty();\n \n     // Repositories Facet is preset"
    },
    {
        "commit_id": "0f476a79eb6f8eec7cc439e8e4a792eee1beeb5d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f476a79eb6f8eec7cc439e8e4a792eee1beeb5d",
        "buggy_code": "public ChangeLogMigration(ActivityService service, ActivityDao dao, DbClient db) {",
        "fixed_code": "public ChangeLogMigration(ActivityDao dao, DbClient db) {",
        "patch": "@@ -51,7 +51,7 @@ public class ChangeLogMigration implements DatabaseMigration {\n   private final ActivityDao dao;\n   private final DbClient db;\n \n-  public ChangeLogMigration(ActivityService service, ActivityDao dao, DbClient db) {\n+  public ChangeLogMigration(ActivityDao dao, DbClient db) {\n     this.dao = dao;\n     this.db = db;\n   }"
    },
    {
        "commit_id": "0f476a79eb6f8eec7cc439e8e4a792eee1beeb5d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f476a79eb6f8eec7cc439e8e4a792eee1beeb5d",
        "buggy_code": "migration = new ChangeLogMigration(null, dao, dbClient);",
        "fixed_code": "migration = new ChangeLogMigration(dao, dbClient);",
        "patch": "@@ -58,7 +58,7 @@ public void setUp() throws Exception {\n     when(system2.now()).thenReturn(DateUtils.parseDate(\"2014-03-13\").getTime());\n     dao = new ActivityDao(system2);\n     dbClient = new DbClient(db.database(), db.myBatis(), dao);\n-    migration = new ChangeLogMigration(null, dao, dbClient);\n+    migration = new ChangeLogMigration(dao, dbClient);\n     session = dbClient.openSession(false);\n   }\n "
    },
    {
        "commit_id": "2354a1598072700ef24fb5d41ab26d82f383fb6b",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2354a1598072700ef24fb5d41ab26d82f383fb6b",
        "buggy_code": "public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, ProjectDefinition def, Project project,",
        "fixed_code": "public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, Project project,",
        "patch": "@@ -74,7 +74,7 @@ public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, Projec\n     this(moduleInputFileCache, def.getKey(), settings, indexer, initializer, null);\n   }\n \n-  public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, ProjectDefinition def, Project project,\n+  public DefaultModuleFileSystem(ModuleInputFileCache moduleInputFileCache, Project project,\n     Settings settings, FileIndexer indexer,\n     ModuleFileSystemInitializer initializer,\n     ComponentIndexer componentIndexer) {"
    },
    {
        "commit_id": "6ac7d32bc92d65d760bfc615427b12e32ed1025f",
        "commit_message": "Fix timeout issue and speed up UT on my box",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ac7d32bc92d65d760bfc615427b12e32ed1025f",
        "buggy_code": "descriptions.add(\"proxy: \" + proxy.address());",
        "fixed_code": "descriptions.add(proxy.type() + \" proxy: \" + proxy.address());",
        "patch": "@@ -185,7 +185,7 @@ static String getProxySynthesis(URI uri, ProxySelector proxySelector) {\n       List<String> descriptions = Lists.newArrayList();\n       for (Proxy proxy : proxies) {\n         if (proxy.type() != Proxy.Type.DIRECT) {\n-          descriptions.add(\"proxy: \" + proxy.address());\n+          descriptions.add(proxy.type() + \" proxy: \" + proxy.address());\n         }\n       }\n "
    },
    {
        "commit_id": "1f1399a327dd79619ec950ebdd8474a35fde0866",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f1399a327dd79619ec950ebdd8474a35fde0866",
        "buggy_code": "if (facetValue.getKey().equals(\"_notAssigned_\")) {",
        "fixed_code": "if (\"_notAssigned_\".equals(facetValue.getKey())) {",
        "patch": "@@ -293,7 +293,7 @@ public Map<String, Integer> findIssueAssignees(IssueQuery query) {\n     Map<String, Integer> result = newLinkedHashMap();\n     List<FacetValue> facetValues = indexClient.get(IssueIndex.class).listAssignees(query);\n     for (FacetValue facetValue : facetValues) {\n-      if (facetValue.getKey().equals(\"_notAssigned_\")) {\n+      if (\"_notAssigned_\".equals(facetValue.getKey())) {\n         result.put(null, facetValue.getValue());\n       } else {\n         result.put(facetValue.getKey(), facetValue.getValue());"
    },
    {
        "commit_id": "42ad3f41b26168de03f9fe5e17f019fbd718140e",
        "commit_message": "SONAR-5535 Fix widget path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/42ad3f41b26168de03f9fe5e17f019fbd718140e",
        "buggy_code": "super(\"size\", \"Size metrics\", \"/Users/jean-baptiste.lievremont/Dev/Source/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");",
        "fixed_code": "super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");",
        "patch": "@@ -22,6 +22,6 @@\n public class SizeWidget extends CoreWidget {\n \n   public SizeWidget() {\n-    super(\"size\", \"Size metrics\", \"/Users/jean-baptiste.lievremont/Dev/Source/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");\n+    super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "37dc7ea307e00451bdb09ffca55e97b9e1fe20ac",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/37dc7ea307e00451bdb09ffca55e97b9e1fe20ac",
        "buggy_code": "ArrayList result = new ArrayList();",
        "fixed_code": "List result = new ArrayList();",
        "patch": "@@ -28,7 +28,7 @@\n public final class SvnPlugin extends SonarPlugin {\n \n   public List getExtensions() {\n-    ArrayList result = new ArrayList();\n+    List result = new ArrayList();\n     result.addAll(ImmutableList.of(\n       SvnScmProvider.class,\n       SvnBlameCommand.class,"
    },
    {
        "commit_id": "d102a8a9916bac0ab600cd5e90ba5359766f8d6d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d102a8a9916bac0ab600cd5e90ba5359766f8d6d",
        "buggy_code": "DefaultIssue newIssue = new DefaultIssue(null);",
        "fixed_code": "DefaultIssue newIssue = new DefaultIssue();",
        "patch": "@@ -73,7 +73,7 @@ public void put(Value value, Object object, CoderContext context) {\n \n   @Override\n   public Object get(Value value, Class clazz, CoderContext context) {\n-    DefaultIssue newIssue = new DefaultIssue(null);\n+    DefaultIssue newIssue = new DefaultIssue();\n     newIssue.withKey(value.getString());\n     if (value.isNull(true)) {\n       newIssue.onProject();"
    },
    {
        "commit_id": "d102a8a9916bac0ab600cd5e90ba5359766f8d6d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d102a8a9916bac0ab600cd5e90ba5359766f8d6d",
        "buggy_code": "return new DefaultTestCase(null)",
        "fixed_code": "return new DefaultTestCase()",
        "patch": "@@ -72,7 +72,7 @@ public Object get(Value value, Class clazz, CoderContext context) {\n     long duration = value.getLong();\n     TestCase.Type type = TestCase.Type.values()[value.getInt()];\n     TestCase.Status status = TestCase.Status.values()[value.getInt()];\n-    return new DefaultTestCase(null)\n+    return new DefaultTestCase()\n       .inTestFile(testFile)\n       .ofType(type)\n       .name(name)"
    },
    {
        "commit_id": "ed330af0f4cf10cbc8dde0dc18fa9a3a02c87fb6",
        "commit_message": "SONAR-5535 Fix widget path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ed330af0f4cf10cbc8dde0dc18fa9a3a02c87fb6",
        "buggy_code": "super(\"size\", \"Size metrics\", \"/Users/jean-baptiste.lievremont/Dev/Source/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");",
        "fixed_code": "super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");",
        "patch": "@@ -22,6 +22,6 @@\n public class SizeWidget extends CoreWidget {\n \n   public SizeWidget() {\n-    super(\"size\", \"Size metrics\", \"/Users/jean-baptiste.lievremont/Dev/Source/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");\n+    super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "d9e1d64b43cbbb726fc1eee32c4e18da037f1a1c",
        "commit_message": "Automatic merge from branch-4.5\n\n* origin/branch-4.5:\n  Fix administration section in webapp",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d9e1d64b43cbbb726fc1eee32c4e18da037f1a1c",
        "buggy_code": "class SubCategory extends Category {",
        "fixed_code": "public class SubCategory extends Category {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 3.7\n  */\n-class SubCategory extends Category {\n+public class SubCategory extends Category {\n \n   SubCategory(String originalKey) {\n     super(originalKey);"
    },
    {
        "commit_id": "6db2ab62cedcbd6e203fd9c1e52744923bbff395",
        "commit_message": "Fix administration section in webapp",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6db2ab62cedcbd6e203fd9c1e52744923bbff395",
        "buggy_code": "class SubCategory extends Category {",
        "fixed_code": "public class SubCategory extends Category {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 3.7\n  */\n-class SubCategory extends Category {\n+public class SubCategory extends Category {\n \n   SubCategory(String originalKey) {\n     super(originalKey);"
    },
    {
        "commit_id": "ddb4d8c4adcbf86be6b2c70e685893963e9cddbb",
        "commit_message": "SONAR-5473 Fix fake project referential implementaion",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ddb4d8c4adcbf86be6b2c70e685893963e9cddbb",
        "buggy_code": "ref.addFileData(projectKey, path, new FileData(hash, lastCommits, revisions, authors));",
        "fixed_code": "ref.addFileData(module.getKeyWithBranch(), path, new FileData(hash, lastCommits, revisions, authors));",
        "patch": "@@ -105,7 +105,7 @@ public ProjectReferentials load(ProjectReactor reactor, TaskProperties taskPrope\n             authors = ((MeasureModel) measureByKey[1]).getData(CoreMetrics.SCM_AUTHORS_BY_LINE);\n           }\n         }\n-        ref.addFileData(projectKey, path, new FileData(hash, lastCommits, revisions, authors));\n+        ref.addFileData(module.getKeyWithBranch(), path, new FileData(hash, lastCommits, revisions, authors));\n       }\n     }\n     return ref;"
    },
    {
        "commit_id": "fdf66ba2f4ff25083bac5fd81e2e2a3b542fd2f4",
        "commit_message": "SONAR-5473 Fix fetching of remote SCM data",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fdf66ba2f4ff25083bac5fd81e2e2a3b542fd2f4",
        "buggy_code": "inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));",
        "fixed_code": "inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));",
        "patch": "@@ -98,7 +98,7 @@ DeprecatedDefaultInputFile complete(DeprecatedDefaultInputFile inputFile, InputF\n     FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(inputFile.file(), fs.encoding());\n     inputFile.setLines(metadata.lines);\n     inputFile.setHash(metadata.hash);\n-    inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));\n+    inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));\n     if (analysisMode.isIncremental() && inputFile.status() == InputFile.Status.SAME) {\n       return null;\n     }"
    },
    {
        "commit_id": "22710990afe5162eba741dce85d9452ccda7ec66",
        "commit_message": "Fix wrong commit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/22710990afe5162eba741dce85d9452ccda7ec66",
        "buggy_code": "super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/Users/julienlancelot/Dev/Sources/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");",
        "fixed_code": "super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");",
        "patch": "@@ -25,6 +25,6 @@\n @WidgetCategory({\"Issues\"})\n public class UnresolvedIssuesPerAssigneeWidget extends CoreWidget {\n   public UnresolvedIssuesPerAssigneeWidget() {\n-    super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/Users/julienlancelot/Dev/Sources/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");\n+    super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "c7e2e99344f9ac49cd664a85193a260bdc37599e",
        "commit_message": "SONAR-5603 Get issues from E/S in Unresolved Issues per Assignee widget\n\nConflicts:\n\tserver/sonar-server/src/test/java/org/sonar/server/issue/index/IssueIndexMediumTest.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7e2e99344f9ac49cd664a85193a260bdc37599e",
        "buggy_code": "super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");",
        "fixed_code": "super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/Users/julienlancelot/Dev/Sources/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");",
        "patch": "@@ -25,6 +25,6 @@\n @WidgetCategory({\"Issues\"})\n public class UnresolvedIssuesPerAssigneeWidget extends CoreWidget {\n   public UnresolvedIssuesPerAssigneeWidget() {\n-    super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");\n+    super(\"reviews_per_developer\", \"Unresolved issues per assignee\", \"/Users/julienlancelot/Dev/Sources/sonarqube/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/unresolved_issues_per_assignee.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "c7e2e99344f9ac49cd664a85193a260bdc37599e",
        "commit_message": "SONAR-5603 Get issues from E/S in Unresolved Issues per Assignee widget\n\nConflicts:\n\tserver/sonar-server/src/test/java/org/sonar/server/issue/index/IssueIndexMediumTest.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c7e2e99344f9ac49cd664a85193a260bdc37599e",
        "buggy_code": "IssueMapper.class, IssueAuthorizationMapper.class, IssueStatsMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,",
        "fixed_code": "IssueMapper.class, IssueAuthorizationMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,",
        "patch": "@@ -169,7 +169,7 @@ public MyBatis start() {\n     loadMapper(conf, \"org.sonar.core.permission.PermissionMapper\");\n     Class<?>[] mappers = {ActivityMapper.class, ActiveDashboardMapper.class, AuthorMapper.class, DashboardMapper.class,\n       DependencyMapper.class, DuplicationMapper.class, GraphDtoMapper.class,\n-      IssueMapper.class, IssueAuthorizationMapper.class, IssueStatsMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,\n+      IssueMapper.class, IssueAuthorizationMapper.class, IssueChangeMapper.class, IssueFilterMapper.class, IssueFilterFavouriteMapper.class,\n       LoadedTemplateMapper.class, MeasureFilterMapper.class, Migration44Mapper.class, PermissionTemplateMapper.class, PropertiesMapper.class, PurgeMapper.class,\n       ResourceKeyUpdaterMapper.class, ResourceIndexerMapper.class, ResourceSnapshotMapper.class, RoleMapper.class, RuleMapper.class,\n       SchemaMigrationMapper.class, SemaphoreMapper.class, UserMapper.class, GroupMapper.class, WidgetMapper.class, WidgetPropertyMapper.class,"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -24,7 +24,6 @@\n import com.google.common.collect.Iterables;\n import org.sonar.api.ServerComponent;\n import org.sonar.api.issue.ActionPlan;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.issue.internal.DefaultIssue;\n import org.sonar.api.issue.internal.IssueChangeContext;\n import org.sonar.api.web.UserRole;\n@@ -37,6 +36,7 @@\n import org.sonar.core.resource.ResourceDto;\n import org.sonar.core.resource.ResourceQuery;\n import org.sonar.server.exceptions.NotFoundException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.user.UserSession;\n \n import javax.annotation.CheckForNull;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -26,7 +26,6 @@\n import com.google.common.collect.Maps;\n import org.sonar.api.ServerComponent;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.utils.Paging;\n import org.sonar.core.issue.DefaultIssueFilter;\n import org.sonar.core.issue.IssueFilterSerializer;\n@@ -40,6 +39,7 @@\n import org.sonar.server.exceptions.ForbiddenException;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.exceptions.UnauthorizedException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.index.IssueIndex;\n import org.sonar.server.search.QueryContext;\n import org.sonar.server.search.Result;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -29,7 +29,6 @@\n import org.sonar.api.issue.ActionPlan;\n import org.sonar.api.issue.Issue;\n import org.sonar.api.issue.IssueComment;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.issue.internal.DefaultIssueComment;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n@@ -47,6 +46,7 @@\n import org.sonar.core.persistence.DbSession;\n import org.sonar.markdown.Markdown;\n import org.sonar.server.db.DbClient;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.IssueService;\n import org.sonar.server.issue.actionplan.ActionPlanService;\n import org.sonar.server.issue.filter.IssueFilterParameters;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -24,7 +24,6 @@\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.security.DefaultGroups;\n import org.sonar.api.server.ws.WebService;\n import org.sonar.api.utils.DateUtils;\n@@ -39,6 +38,7 @@\n import org.sonar.server.component.SnapshotTesting;\n import org.sonar.server.db.DbClient;\n import org.sonar.server.exceptions.ForbiddenException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.IssueTesting;\n import org.sonar.server.issue.db.IssueDao;\n import org.sonar.server.issue.index.IssueAuthorizationIndex;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -29,7 +29,6 @@\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.issue.ActionPlan;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.issue.internal.DefaultIssue;\n import org.sonar.api.issue.internal.IssueChangeContext;\n import org.sonar.api.web.UserRole;\n@@ -42,6 +41,7 @@\n import org.sonar.core.resource.ResourceQuery;\n import org.sonar.server.exceptions.ForbiddenException;\n import org.sonar.server.exceptions.NotFoundException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.user.MockUserSession;\n import org.sonar.server.user.UserSession;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -27,7 +27,6 @@\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.issue.internal.DefaultIssue;\n import org.sonar.api.web.UserRole;\n import org.sonar.core.issue.DefaultIssueFilter;\n@@ -42,6 +41,7 @@\n import org.sonar.server.exceptions.ForbiddenException;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.exceptions.UnauthorizedException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.index.IssueIndex;\n import org.sonar.server.search.QueryContext;\n import org.sonar.server.search.Result;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -26,7 +26,6 @@\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.sonar.api.issue.Issue;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.security.DefaultGroups;\n@@ -45,6 +44,7 @@\n import org.sonar.server.component.db.ComponentDao;\n import org.sonar.server.db.DbClient;\n import org.sonar.server.exceptions.NotFoundException;\n+import org.sonar.server.issue.IssueQuery;\n import org.sonar.server.issue.IssueTesting;\n import org.sonar.server.issue.db.IssueDao;\n import org.sonar.server.platform.BackendCleanup;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -26,10 +26,10 @@\n import org.apache.ibatis.session.SqlSession;\n import org.sonar.api.BatchComponent;\n import org.sonar.api.ServerComponent;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.core.persistence.DbSession;\n import org.sonar.core.persistence.MyBatis;\n import org.sonar.core.rule.RuleDto;\n+import org.sonar.server.issue.IssueQuery;\n \n import javax.annotation.CheckForNull;\n import javax.annotation.Nullable;"
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -20,8 +20,8 @@\n package org.sonar.core.issue.db;\n \n import org.apache.ibatis.annotations.Param;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.core.rule.RuleDto;\n+import org.sonar.server.issue.IssueQuery;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -22,8 +22,8 @@\n \n import org.apache.ibatis.session.SqlSession;\n import org.sonar.api.ServerComponent;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.core.persistence.MyBatis;\n+import org.sonar.server.issue.IssueQuery;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -21,7 +21,7 @@\n package org.sonar.core.issue.db;\n \n import org.apache.ibatis.annotations.Param;\n-import org.sonar.api.issue.IssueQuery;\n+import org.sonar.server.issue.IssueQuery;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -26,12 +26,12 @@\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rule.Severity;\n import org.sonar.api.utils.DateUtils;\n import org.sonar.core.persistence.AbstractDaoTestCase;\n import org.sonar.core.persistence.DbSession;\n+import org.sonar.server.issue.IssueQuery;\n \n import java.util.List;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "import org.sonar.api.issue.IssueQuery;",
        "fixed_code": "import org.sonar.server.issue.IssueQuery;",
        "patch": "@@ -22,8 +22,8 @@\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.sonar.api.issue.IssueQuery;\n import org.sonar.core.persistence.AbstractDaoTestCase;\n+import org.sonar.server.issue.IssueQuery;\n \n import java.util.List;\n "
    },
    {
        "commit_id": "7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "commit_message": "SONAR-5529 Move IssueQuery from api to server\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/index/IssueIndex.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7b8464adf1bc41765efe1f582e7fef3ee7d9af48",
        "buggy_code": "package org.sonar.api.issue;",
        "fixed_code": "package org.sonar.server.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.api.issue;\n+package org.sonar.server.issue;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSet;"
    },
    {
        "commit_id": "3e433a17e229793b83163e68731efdf846f67aaa",
        "commit_message": "SONAR-5603 Replace rails usage of IssueFinder by IssueService in issue filters widget",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3e433a17e229793b83163e68731efdf846f67aaa",
        "buggy_code": "notifications.sendChanges(shouldSentNotification, context, project, null);",
        "fixed_code": "notifications.sendChanges(shouldSentNotification, context, project, null, null);",
        "patch": "@@ -72,7 +72,7 @@ private void sendNotifications(Project project) {\n       }\n     }\n     if (!shouldSentNotification.isEmpty()) {\n-      notifications.sendChanges(shouldSentNotification, context, project, null);\n+      notifications.sendChanges(shouldSentNotification, context, project, null, null);\n     }\n     if (!newIssues.isEmpty()) {\n       notifications.sendNewIssues(project, newIssues);"
    },
    {
        "commit_id": "3bdeb5ec00f5074c5de4cf2ff5fc66ee7f74793c",
        "commit_message": "SONAR-5603 Replace rails usage of IssueFinder by IssueService in /issue/show",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3bdeb5ec00f5074c5de4cf2ff5fc66ee7f74793c",
        "buggy_code": "return ((IssueService) service).search(query, context);",
        "fixed_code": "return service.search(query, context);",
        "patch": "@@ -222,7 +222,7 @@ protected Result<Issue> doSearch(IssueQuery query, QueryContext context) {\n     if (components != null && components.size() == 1) {\n       context.setShowFullResult(true);\n     }\n-    return ((IssueService) service).search(query, context);\n+    return service.search(query, context);\n   }\n \n   @Override"
    },
    {
        "commit_id": "90681168450aa342e9f85bc723f64b961e0dd647",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/90681168450aa342e9f85bc723f64b961e0dd647",
        "buggy_code": "LoggerFactory.getLogger(ProcessUtils.class).error(\"Fail to kill \" + process);",
        "fixed_code": "LoggerFactory.getLogger(ProcessUtils.class).error(\"Fail to kill \" + process, e);",
        "patch": "@@ -58,7 +58,7 @@ public static boolean sendKillSignal(@Nullable Process process) {\n         process.destroy();\n         sentSignal = true;\n       } catch (Exception e) {\n-        LoggerFactory.getLogger(ProcessUtils.class).error(\"Fail to kill \" + process);\n+        LoggerFactory.getLogger(ProcessUtils.class).error(\"Fail to kill \" + process, e);\n       }\n     }\n     return sentSignal;"
    },
    {
        "commit_id": "05b1172fa916ff7b0d2373eacb761df6613f89fb",
        "commit_message": "Fix timeout issue and speed up UT on my box",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05b1172fa916ff7b0d2373eacb761df6613f89fb",
        "buggy_code": "descriptions.add(\"proxy: \" + proxy.address());",
        "fixed_code": "descriptions.add(proxy.type() + \" proxy: \" + proxy.address());",
        "patch": "@@ -186,7 +186,7 @@ static String getProxySynthesis(URI uri, ProxySelector proxySelector) {\n       List<String> descriptions = Lists.newArrayList();\n       for (Proxy proxy : proxies) {\n         if (proxy.type() != Proxy.Type.DIRECT) {\n-          descriptions.add(\"proxy: \" + proxy.address());\n+          descriptions.add(proxy.type() + \" proxy: \" + proxy.address());\n         }\n       }\n "
    },
    {
        "commit_id": "73e2ceadeb3d0f44d3a96a07947e26531c409053",
        "commit_message": "Backport fix for UT on Windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/73e2ceadeb3d0f44d3a96a07947e26531c409053",
        "buggy_code": "FileUtils.write(propsFile, \"sonar.foo=bar\\nprocess.key=web\\nprocess.sharedDir=\" + temp.newFolder().getAbsolutePath());",
        "fixed_code": "FileUtils.write(propsFile, \"sonar.foo=bar\\nprocess.key=web\\nprocess.sharedDir=\" + temp.newFolder().getAbsolutePath().replaceAll(\"\\\\\\\\\", \"/\"));",
        "patch": "@@ -50,7 +50,7 @@ public class ProcessEntryPointTest {\n   @Test\n   public void load_properties_from_file() throws Exception {\n     File propsFile = temp.newFile();\n-    FileUtils.write(propsFile, \"sonar.foo=bar\\nprocess.key=web\\nprocess.sharedDir=\" + temp.newFolder().getAbsolutePath());\n+    FileUtils.write(propsFile, \"sonar.foo=bar\\nprocess.key=web\\nprocess.sharedDir=\" + temp.newFolder().getAbsolutePath().replaceAll(\"\\\\\\\\\", \"/\"));\n \n     ProcessEntryPoint entryPoint = ProcessEntryPoint.createForArguments(new String[] {propsFile.getAbsolutePath()});\n     assertThat(entryPoint.getProps().value(\"sonar.foo\")).isEqualTo(\"bar\");"
    },
    {
        "commit_id": "160a14fdc6ed87215d093d3a6d4ced1f1bc31450",
        "commit_message": "SONAR-5590 When no more permission on a project, there should be nothing in the Issue Authorization Index for this project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/160a14fdc6ed87215d093d3a6d4ced1f1bc31450",
        "buggy_code": "protected Map getSynchronizationParams(Date date, Map<String, String> params) {",
        "fixed_code": "protected Map<String, Object> getSynchronizationParams(Date date, Map<String, String> params) {",
        "patch": "@@ -67,7 +67,7 @@ protected String getSynchronizationStatementName() {\n   }\n \n   @Override\n-  protected Map getSynchronizationParams(Date date, Map<String, String> params) {\n+  protected Map<String, Object> getSynchronizationParams(Date date, Map<String, String> params) {\n     throw new UnsupportedOperationException();\n   }\n }"
    },
    {
        "commit_id": "6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "commit_message": "SONAR-5646 fix api/dashboards/show (bad git merge)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "buggy_code": "protected WidgetDao(System2 system2) {",
        "fixed_code": "public WidgetDao(System2 system2) {",
        "patch": "@@ -29,7 +29,7 @@\n \n public class WidgetDao extends BaseDao<WidgetMapper, WidgetDto, Long> {\n \n-  protected WidgetDao(System2 system2) {\n+  public WidgetDao(System2 system2) {\n     super(WidgetMapper.class, system2);\n   }\n "
    },
    {
        "commit_id": "6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "commit_message": "SONAR-5646 fix api/dashboards/show (bad git merge)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "buggy_code": "protected WidgetPropertyDao(System2 system2) {",
        "fixed_code": "public WidgetPropertyDao(System2 system2) {",
        "patch": "@@ -29,7 +29,7 @@\n \n public class WidgetPropertyDao extends BaseDao<WidgetPropertyMapper, WidgetPropertyDto, Long> {\n \n-  protected WidgetPropertyDao(System2 system2) {\n+  public WidgetPropertyDao(System2 system2) {\n     super(WidgetPropertyMapper.class, system2);\n   }\n "
    },
    {
        "commit_id": "6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "commit_message": "SONAR-5646 fix api/dashboards/show (bad git merge)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d3465b0b5dcedd37340bb37de8a6845a14c24d5",
        "buggy_code": "String COLUMNS = \"wp.id, wp.widget_id as \\\"widgetId\\\", wp.key as \\\"propertyKey\\\", wp.text_value as \\\"textValue\\\"\";",
        "fixed_code": "String COLUMNS = \"wp.id, wp.widget_id as \\\"widgetId\\\", wp.kee as \\\"propertyKey\\\", wp.text_value as \\\"textValue\\\"\";",
        "patch": "@@ -29,7 +29,7 @@\n \n public interface WidgetPropertyMapper {\n \n-  String COLUMNS = \"wp.id, wp.widget_id as \\\"widgetId\\\", wp.key as \\\"propertyKey\\\", wp.text_value as \\\"textValue\\\"\";\n+  String COLUMNS = \"wp.id, wp.widget_id as \\\"widgetId\\\", wp.kee as \\\"propertyKey\\\", wp.text_value as \\\"textValue\\\"\";\n \n   @Insert(\"insert into widget_properties (widget_id, kee, text_value) values (#{widgetId}, #{propertyKey}, #{textValue})\")\n   @Options(keyColumn = \"id\", useGeneratedKeys = true, keyProperty = \"id\")"
    },
    {
        "commit_id": "4234c8d5b402e751dfd0c17732cfc843ba807fe0",
        "commit_message": "Revert \"SONAR-5473 Fix fetching of remote SCM data\"\n\nThis reverts commit da96eeccbe28e91619d60b34ae91ad442de6ce08.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4234c8d5b402e751dfd0c17732cfc843ba807fe0",
        "buggy_code": "inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));",
        "fixed_code": "inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));",
        "patch": "@@ -98,7 +98,7 @@ DeprecatedDefaultInputFile complete(DeprecatedDefaultInputFile inputFile, InputF\n     FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(inputFile.file(), fs.encoding());\n     inputFile.setLines(metadata.lines);\n     inputFile.setHash(metadata.hash);\n-    inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));\n+    inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));\n     if (analysisMode.isIncremental() && inputFile.status() == InputFile.Status.SAME) {\n       return null;\n     }"
    },
    {
        "commit_id": "da96eeccbe28e91619d60b34ae91ad442de6ce08",
        "commit_message": "SONAR-5473 Fix fetching of remote SCM data",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/da96eeccbe28e91619d60b34ae91ad442de6ce08",
        "buggy_code": "inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));",
        "fixed_code": "inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));",
        "patch": "@@ -98,7 +98,7 @@ DeprecatedDefaultInputFile complete(DeprecatedDefaultInputFile inputFile, InputF\n     FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(inputFile.file(), fs.encoding());\n     inputFile.setLines(metadata.lines);\n     inputFile.setHash(metadata.hash);\n-    inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));\n+    inputFile.setStatus(statusDetection.status(inputFile.moduleKey(), inputFile.relativePath(), metadata.hash));\n     if (analysisMode.isIncremental() && inputFile.status() == InputFile.Status.SAME) {\n       return null;\n     }"
    },
    {
        "commit_id": "f1336d0ec3232a4226adb6864e57a9bd3d9932ce",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f1336d0ec3232a4226adb6864e57a9bd3d9932ce",
        "buggy_code": "DOMAIN getByKey(KEY item);",
        "fixed_code": "DOMAIN getNullableByKey(KEY key);",
        "patch": "@@ -32,7 +32,7 @@\n public interface Index<DOMAIN, DTO extends Dto<KEY>, KEY extends Serializable> extends Startable, ServerComponent {\n \n   @CheckForNull\n-  DOMAIN getByKey(KEY item);\n+  DOMAIN getNullableByKey(KEY key);\n \n   String getIndexType();\n "
    },
    {
        "commit_id": "f1336d0ec3232a4226adb6864e57a9bd3d9932ce",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f1336d0ec3232a4226adb6864e57a9bd3d9932ce",
        "buggy_code": "public boolean setProject(DefaultIssue issue, @Nullable String projectKey, IssueChangeContext context) {",
        "fixed_code": "public boolean setProject(DefaultIssue issue, String projectKey, IssueChangeContext context) {",
        "patch": "@@ -247,7 +247,7 @@ public boolean plan(DefaultIssue issue, @Nullable ActionPlan actionPlan, IssueCh\n     return false;\n   }\n \n-  public boolean setProject(DefaultIssue issue, @Nullable String projectKey, IssueChangeContext context) {\n+  public boolean setProject(DefaultIssue issue, String projectKey, IssueChangeContext context) {\n     if (!Objects.equal(projectKey, issue.projectKey())) {\n       issue.setProjectKey(projectKey);\n       issue.setUpdateDate(context.date());"
    },
    {
        "commit_id": "3c8726bcaeb9898d995452938d702d9b3543a39e",
        "commit_message": "SONAR-5531 Fix sort and search by dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c8726bcaeb9898d995452938d702d9b3543a39e",
        "buggy_code": "private final QueryContext getQueryContext(Request request) {",
        "fixed_code": "private QueryContext getQueryContext(Request request) {",
        "patch": "@@ -124,7 +124,7 @@ public final void handle(Request request, Response response) throws Exception {\n     json.endObject().close();\n   }\n \n-  private final QueryContext getQueryContext(Request request) {\n+  private QueryContext getQueryContext(Request request) {\n     return new QueryContext().addFieldsToReturn(request.paramAsStrings(PARAM_FIELDS))\n       .setFacet(request.mandatoryParamAsBoolean(PARAM_FACETS))\n       .setPage(request.mandatoryParamAsInt(PARAM_PAGE),"
    },
    {
        "commit_id": "14f36bfb794a37ac67b643924e8608421a8f549c",
        "commit_message": "SONAR-5389 Refactor new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14f36bfb794a37ac67b643924e8608421a8f549c",
        "buggy_code": "LOG.warn(\"Metric \" + metric + \" is an internal metric computed by SonarQube. Please update your plugin.\");",
        "fixed_code": "LOG.warn(\"Metric \" + metric.key() + \" is an internal metric computed by SonarQube. Please update your plugin.\");",
        "patch": "@@ -216,7 +216,7 @@ public Measure addMeasure(Resource resource, Measure measure) {\n         throw new SonarException(\"Unknown metric: \" + measure.getMetricKey());\n       }\n       if (DefaultSensorContext.INTERNAL_METRICS.contains(metric)) {\n-        LOG.warn(\"Metric \" + metric + \" is an internal metric computed by SonarQube. Please update your plugin.\");\n+        LOG.warn(\"Metric \" + metric.key() + \" is an internal metric computed by SonarQube. Please update your plugin.\");\n         return measure;\n       }\n       measure.setMetric(metric);"
    },
    {
        "commit_id": "14f36bfb794a37ac67b643924e8608421a8f549c",
        "commit_message": "SONAR-5389 Refactor new issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14f36bfb794a37ac67b643924e8608421a8f549c",
        "buggy_code": "value.putUTF(m.metric().key());",
        "fixed_code": "value.putString(m.metric().key());",
        "patch": "@@ -51,7 +51,7 @@ public void put(Value value, Object object, CoderContext context) {\n     } else {\n       value.putNull();\n     }\n-    value.putUTF(m.metric().key());\n+    value.putString(m.metric().key());\n     value.put(m.value());\n   }\n "
    },
    {
        "commit_id": "b1d2bf53909ae35f0f2c36fbaca44a30d9e6c7b5",
        "commit_message": "SONAR-5614 Fix Medium test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b1d2bf53909ae35f0f2c36fbaca44a30d9e6c7b5",
        "buggy_code": ".getState().getMetaData().concreteIndices(new String[]{IndexDefinition.ISSUES.getIndexName()}))",
        "fixed_code": ".getState().getMetaData().concreteIndices(new String[]{IndexDefinition.ISSUES.getIndexName()})).setTypes(new String[]{IndexDefinition.ISSUES.getIndexType()})",
        "patch": "@@ -182,7 +182,7 @@ public void index_project_issues() throws Exception {\n \n   private void clearIssueIndex(){\n     tester.get(SearchClient.class).prepareDeleteByQuery(tester.get(SearchClient.class).admin().cluster().prepareState().get()\n-      .getState().getMetaData().concreteIndices(new String[]{IndexDefinition.ISSUES.getIndexName()}))\n+      .getState().getMetaData().concreteIndices(new String[]{IndexDefinition.ISSUES.getIndexName()})).setTypes(new String[]{IndexDefinition.ISSUES.getIndexType()})\n       .setQuery(QueryBuilders.matchAllQuery())\n       .get();\n   }"
    },
    {
        "commit_id": "3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "commit_message": "SONAR-5531 Update IssueStorage to allow issue index modification on server side",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "buggy_code": "return index.get(ActiveRuleIndex.class).getByKey(key);",
        "fixed_code": "return index.get(ActiveRuleIndex.class).getNullableByKey(key);",
        "patch": "@@ -86,7 +86,7 @@ public QualityProfileDto getByLangAndName(String lang, String name) {\n \n   @CheckForNull\n   public ActiveRule getActiveRule(ActiveRuleKey key) {\n-    return index.get(ActiveRuleIndex.class).getByKey(key);\n+    return index.get(ActiveRuleIndex.class).getNullableByKey(key);\n   }\n \n   public List<ActiveRule> findActiveRulesByRule(RuleKey key) {"
    },
    {
        "commit_id": "3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "commit_message": "SONAR-5531 Update IssueStorage to allow issue index modification on server side",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "buggy_code": "Rule rule = index.getByKey(key);",
        "fixed_code": "Rule rule = index.getNullableByKey(key);",
        "patch": "@@ -73,7 +73,7 @@ public Collection<org.sonar.api.rules.Rule> findByIds(Collection<Integer> ruleId\n \n   @CheckForNull\n   public org.sonar.api.rules.Rule findByKey(RuleKey key) {\n-    Rule rule = index.getByKey(key);\n+    Rule rule = index.getNullableByKey(key);\n     if (rule != null && rule.status() != RuleStatus.REMOVED) {\n       return toRule(rule);\n     } else {"
    },
    {
        "commit_id": "3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "commit_message": "SONAR-5531 Update IssueStorage to allow issue index modification on server side",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "buggy_code": "IssueDto issueDto = new IssueDto().setId(100L).setStatus(Issue.STATUS_OPEN).setRuleKey_unit_test_only(\"squid\", \"s100\");",
        "fixed_code": "IssueDto issueDto = new IssueDto().setId(100L).setStatus(Issue.STATUS_OPEN).setRuleKey(\"squid\", \"s100\");",
        "patch": "@@ -144,7 +144,7 @@ public void unplan_all_linked_issues_when_deleting_an_action_plan() {\n     when(actionPlanDao.findByKey(\"ABCD\")).thenReturn(new ActionPlanDto().setKey(\"ABCD\").setProjectKey_unit_test_only(projectKey));\n     when(resourceDao.getResource(any(ResourceQuery.class))).thenReturn(new ResourceDto().setKey(projectKey).setId(1l));\n \n-    IssueDto issueDto = new IssueDto().setId(100L).setStatus(Issue.STATUS_OPEN).setRuleKey_unit_test_only(\"squid\", \"s100\");\n+    IssueDto issueDto = new IssueDto().setId(100L).setStatus(Issue.STATUS_OPEN).setRuleKey(\"squid\", \"s100\");\n     when(issueDao.selectIssues(any(IssueQuery.class))).thenReturn(newArrayList(issueDto));\n     when(issueUpdater.plan(any(DefaultIssue.class), eq((ActionPlan) null), any(IssueChangeContext.class))).thenReturn(true);\n "
    },
    {
        "commit_id": "3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "commit_message": "SONAR-5531 Update IssueStorage to allow issue index modification on server side",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "buggy_code": "Rule rule = index.getByKey(RuleKey.of(\"javascript\", \"unknown\"));",
        "fixed_code": "Rule rule = index.getNullableByKey(RuleKey.of(\"javascript\", \"unknown\"));",
        "patch": "@@ -82,7 +82,7 @@ public void getByKey() throws InterruptedException {\n \n   @Test\n   public void getByKey_null_if_not_found() throws InterruptedException {\n-    Rule rule = index.getByKey(RuleKey.of(\"javascript\", \"unknown\"));\n+    Rule rule = index.getNullableByKey(RuleKey.of(\"javascript\", \"unknown\"));\n \n     assertThat(rule).isNull();\n   }"
    },
    {
        "commit_id": "3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "commit_message": "SONAR-5531 Update IssueStorage to allow issue index modification on server side",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a86b9a72a32eed7205df7fc89cef32321c4f550",
        "buggy_code": "class UpdateConflictResolver {",
        "fixed_code": "public class UpdateConflictResolver {",
        "patch": "@@ -31,7 +31,7 @@\n  *\n  * @since 3.6\n  */\n-class UpdateConflictResolver {\n+public class UpdateConflictResolver {\n \n   private static final Logger LOG = LoggerFactory.getLogger(IssueStorage.class);\n "
    },
    {
        "commit_id": "add64436be2fc275aa2578dc6a4eeab427b41208",
        "commit_message": "SONAR-5580 Migration issue to SQ 4.4 when the quality profile used to analyze the last version of a project has been removed before the migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/add64436be2fc275aa2578dc6a4eeab427b41208",
        "buggy_code": "public static final int LAST_VERSION = 583;",
        "fixed_code": "public static final int LAST_VERSION = 584;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 583;\n+  public static final int LAST_VERSION = 584;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "86869250d59ed743c784d667e1937b48d9dc11e1",
        "commit_message": "SONAR-4898 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86869250d59ed743c784d667e1937b48d9dc11e1",
        "buggy_code": "private long jmxConnectionTimeout = 30000L;",
        "fixed_code": "private long jmxConnectionTimeout = 15000L;",
        "patch": "@@ -25,7 +25,7 @@\n class Timeouts {\n \n   private long terminationTimeout = 120000L;\n-  private long jmxConnectionTimeout = 30000L;\n+  private long jmxConnectionTimeout = 15000L;\n   private long monitorPingInterval = 3000L;\n   private long monitorIsReadyTimeout = 10000L;\n   private long autokillPingTimeout = 60000L;"
    },
    {
        "commit_id": "6309b7510b59176c836102e2d19e736d260114da",
        "commit_message": "SONAR-4898 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6309b7510b59176c836102e2d19e736d260114da",
        "buggy_code": "private long jmxConnectionTimeout = 30000L;",
        "fixed_code": "private long jmxConnectionTimeout = 15000L;",
        "patch": "@@ -25,7 +25,7 @@\n class Timeouts {\n \n   private long terminationTimeout = 120000L;\n-  private long jmxConnectionTimeout = 30000L;\n+  private long jmxConnectionTimeout = 15000L;\n   private long monitorPingInterval = 3000L;\n   private long monitorIsReadyTimeout = 10000L;\n   private long autokillPingTimeout = 60000L;"
    },
    {
        "commit_id": "19898ed3e183f4a61ffa0834ab8c9c6171d77280",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19898ed3e183f4a61ffa0834ab8c9c6171d77280",
        "buggy_code": "return (debt != null) ? Duration.create(new Long(debt)) : null;",
        "fixed_code": "return (debt != null) ? Duration.create(Long.valueOf(debt)) : null;",
        "patch": "@@ -159,7 +159,7 @@ public boolean isNew() {\n   @CheckForNull\n   public Duration debt() {\n     Integer debt = getNullableField(IssueNormalizer.IssueField.DEBT.field());\n-    return (debt != null) ? Duration.create(new Long(debt)) : null;\n+    return (debt != null) ? Duration.create(Long.valueOf(debt)) : null;\n   }\n \n   @Override"
    },
    {
        "commit_id": "19898ed3e183f4a61ffa0834ab8c9c6171d77280",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19898ed3e183f4a61ffa0834ab8c9c6171d77280",
        "buggy_code": ".setRootComponentId(new Long(project.getId()))",
        "fixed_code": ".setRootComponentId(Long.valueOf(project.getId()))",
        "patch": "@@ -480,7 +480,7 @@ public DefaultIssue toDefaultIssue() {\n \n   public static IssueDto createFor(Project project, RuleDto rule) {\n     return new IssueDto()\n-      .setRootComponentId(new Long(project.getId()))\n+      .setRootComponentId(Long.valueOf(project.getId()))\n       .setRuleId(rule.getId())\n       .setKee(UUID.randomUUID().toString());\n   }"
    },
    {
        "commit_id": "b7afdcce65c72060d64a36a41927751d2fc4e072",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b7afdcce65c72060d64a36a41927751d2fc4e072",
        "buggy_code": "RoleDao roleDao = new RoleDao(getMyBatis());",
        "fixed_code": "RoleDao roleDao = new RoleDao();",
        "patch": "@@ -56,7 +56,7 @@ public void setUp() {\n     when(system2.now()).thenReturn(DateUtils.parseDate(\"2014-09-03\").getTime());\n \n     session = getMyBatis().openSession(false);\n-    RoleDao roleDao = new RoleDao(getMyBatis());\n+    RoleDao roleDao = new RoleDao();\n     UserDao userDao = new UserDao(getMyBatis());\n     permissionTemplateDao = new PermissionTemplateDao(getMyBatis(), System2.INSTANCE);\n     Settings settings = new Settings();"
    },
    {
        "commit_id": "b7afdcce65c72060d64a36a41927751d2fc4e072",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b7afdcce65c72060d64a36a41927751d2fc4e072",
        "buggy_code": "permissionFacade = new PermissionFacade(new RoleDao(getMyBatis()), new UserDao(getMyBatis()), new ResourceDao(getMyBatis(), System2.INSTANCE),",
        "fixed_code": "permissionFacade = new PermissionFacade(new RoleDao(), new UserDao(getMyBatis()), new ResourceDao(getMyBatis(), System2.INSTANCE),",
        "patch": "@@ -56,7 +56,7 @@ public void initResourcePermissions() {\n     session = getMyBatis().openSession(false);\n     project = new Project(\"project\").setId(PROJECT_ID.intValue());\n     settings = new Settings();\n-    permissionFacade = new PermissionFacade(new RoleDao(getMyBatis()), new UserDao(getMyBatis()), new ResourceDao(getMyBatis(), System2.INSTANCE),\n+    permissionFacade = new PermissionFacade(new RoleDao(), new UserDao(getMyBatis()), new ResourceDao(getMyBatis(), System2.INSTANCE),\n       new PermissionTemplateDao(getMyBatis(), System2.INSTANCE), settings);\n     permissions = new DefaultResourcePermissions(getMyBatis(), permissionFacade);\n   }"
    },
    {
        "commit_id": "9bebcfba20d194bc01d59f47d94c5ee1ce0cf2fe",
        "commit_message": "SONAR-5561 Fix query on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9bebcfba20d194bc01d59f47d94c5ee1ce0cf2fe",
        "buggy_code": "assertThat(dto.getUpdatedAt()).isNotNull();",
        "fixed_code": "assertThat(dto.getUpdatedAt()).isEqualTo(DateUtils.parseDate(\"2014-01-01\"));",
        "patch": "@@ -67,7 +67,7 @@ public void find_after_date(){\n     assertThat(dto.getPermission()).isEqualTo(\"user\");\n     assertThat(dto.getGroups()).containsExactly(\"Anyone\", \"devs\");\n     assertThat(dto.getUsers()).containsExactly(\"user1\");\n-    assertThat(dto.getUpdatedAt()).isNotNull();\n+    assertThat(dto.getUpdatedAt()).isEqualTo(DateUtils.parseDate(\"2014-01-01\"));\n   }\n \n   @Test"
    },
    {
        "commit_id": "d7a4731e80067b0ba11ca1d60c0b0eb3eca7277a",
        "commit_message": "Merge branch 'master' into issues-in-es\n\nConflicts:\n\tserver/sonar-server/src/main/java/org/sonar/server/db/DbClient.java\n\tserver/sonar-server/src/main/java/org/sonar/server/issue/db/IssueAuthorizationDao.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d7a4731e80067b0ba11ca1d60c0b0eb3eca7277a",
        "buggy_code": "private static final Integer IMPLICIT_COMMIT_SIZE = 1000;",
        "fixed_code": "private static final Integer IMPLICIT_COMMIT_SIZE = 2000;",
        "patch": "@@ -34,7 +34,7 @@\n \n public class DbSession implements SqlSession {\n \n-  private static final Integer IMPLICIT_COMMIT_SIZE = 1000;\n+  private static final Integer IMPLICIT_COMMIT_SIZE = 2000;\n   private List<ClusterAction> actions;\n \n   private WorkQueue queue;"
    },
    {
        "commit_id": "b99273b9ad4f1ef006e419ee53b7e8a3314ec4f4",
        "commit_message": "fix mistake (should not have been commited)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b99273b9ad4f1ef006e419ee53b7e8a3314ec4f4",
        "buggy_code": "public interface Rule extends org.sonar.api.rules.Rule {",
        "fixed_code": "public interface Rule {",
        "patch": "@@ -31,7 +31,7 @@\n /**\n  * @since 4.4\n  */\n-public interface Rule extends org.sonar.api.rules.Rule {\n+public interface Rule {\n \n   RuleKey key();\n "
    },
    {
        "commit_id": "7a298e6f6ebe5cf486b0a3470a6178c35656a878",
        "commit_message": "SONAR-5531 - Initial SearchAction for Issue WS Stack. ES Search Action is mapped to /api/issues/es-search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7a298e6f6ebe5cf486b0a3470a6178c35656a878",
        "buggy_code": "tester = new WsTester(new IssuesWs(showAction, searchAction));",
        "fixed_code": "tester = new WsTester(new IssuesWs(showAction, mock(SearchAction.class), searchAction));",
        "patch": "@@ -52,7 +52,7 @@ public void setUp() throws Exception {\n \n     showAction = new IssueShowAction(issueFinder, issueChangelogService, actionsWriter, debtModelService, i18n, durations);\n     searchAction = new IssueSearchAction(issueFinder, actionsWriter, i18n, durations);\n-    tester = new WsTester(new IssuesWs(showAction, searchAction));\n+    tester = new WsTester(new IssuesWs(showAction, mock(SearchAction.class), searchAction));\n   }\n \n   @Test"
    },
    {
        "commit_id": "6b27baa486aaa19ef6381677064f18b81cd58cd4",
        "commit_message": "Merge branch 'master' into SONAR-5529\n\nConflicts:\n\tserver/sonar-server/src/test/java/org/sonar/server/issue/db/IssueBackendMediumTest.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6b27baa486aaa19ef6381677064f18b81cd58cd4",
        "buggy_code": "private final Integer lock = new Integer(1);",
        "fixed_code": "private final Object lock = new Object();",
        "patch": "@@ -58,7 +58,7 @@ public class SearchServer extends MonitoredProcess {\n   private final boolean isBlocking;\n \n   private Node node;\n-  private final Integer lock = new Integer(1);\n+  private final Object lock = new Object();\n \n   @VisibleForTesting\n   public SearchServer(final Props props, boolean monitored, boolean blocking) {"
    },
    {
        "commit_id": "6b27baa486aaa19ef6381677064f18b81cd58cd4",
        "commit_message": "Merge branch 'master' into SONAR-5529\n\nConflicts:\n\tserver/sonar-server/src/test/java/org/sonar/server/issue/db/IssueBackendMediumTest.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6b27baa486aaa19ef6381677064f18b81cd58cd4",
        "buggy_code": "String url = props.value(DefaultSettings.JDBC_URL);",
        "fixed_code": "String url = props.nonNullValue(DefaultSettings.JDBC_URL);",
        "patch": "@@ -50,7 +50,7 @@ static enum Provider {\n   }\n \n   public void checkAndComplete(File homeDir, Props props) {\n-    String url = props.value(DefaultSettings.JDBC_URL);\n+    String url = props.nonNullValue(DefaultSettings.JDBC_URL);\n     Provider provider = driverProvider(url);\n     checkUrlParameters(provider, url);\n     String driverPath = driverPath(homeDir, provider);"
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public Class<?> getPayloadClass() {",
        "fixed_code": "public Class getPayloadClass() {",
        "patch": "@@ -42,7 +42,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public Class<?> getPayloadClass() {\n+  public Class getPayloadClass() {\n     return dto.getClass();\n   }\n "
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public Class<?> getPayloadClass() {",
        "fixed_code": "public Class getPayloadClass() {",
        "patch": "@@ -42,7 +42,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public Class<?> getPayloadClass() {\n+  public Class getPayloadClass() {\n     throw new IllegalStateException(\"Deletion by key does not have an object payload!\");\n   }\n "
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public Class<?> getPayloadClass() {",
        "fixed_code": "public Class getPayloadClass() {",
        "patch": "@@ -45,7 +45,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public Class<?> getPayloadClass() {\n+  public Class getPayloadClass() {\n     return item.getClass();\n   }\n "
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public abstract Class<?> getPayloadClass();",
        "fixed_code": "public abstract Class getPayloadClass();",
        "patch": "@@ -46,7 +46,7 @@ protected IndexActionRequest(String indexType, boolean requiresRefresh) {\n \n   public abstract String getKey();\n \n-  public abstract Class<?> getPayloadClass();\n+  public abstract Class getPayloadClass();\n \n   public String getIndexType() {\n     return indexType;"
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public Class<?> getPayloadClass() {",
        "fixed_code": "public Class getPayloadClass() {",
        "patch": "@@ -44,7 +44,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public Class<?> getPayloadClass() {\n+  public Class getPayloadClass() {\n     return dto.getClass();\n   }\n "
    },
    {
        "commit_id": "5b11d674c478568b9445d5d65624b473cff8b84f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5b11d674c478568b9445d5d65624b473cff8b84f",
        "buggy_code": "public Class<?> getPayloadClass() {",
        "fixed_code": "public Class getPayloadClass() {",
        "patch": "@@ -46,7 +46,7 @@ public String getKey() {\n   }\n \n   @Override\n-  public Class<?> getPayloadClass() {\n+  public Class getPayloadClass() {\n     return item.getClass();\n   }\n "
    },
    {
        "commit_id": "a9bd7ecdd2b0f138275c1bb2954ab6ee9b804844",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a9bd7ecdd2b0f138275c1bb2954ab6ee9b804844",
        "buggy_code": "boolean verifyCrossProject(Project project, Logger logger) {",
        "fixed_code": "boolean verifyCrossProject(@Nullable Project project, Logger logger) {",
        "patch": "@@ -64,7 +64,7 @@ public SonarDuplicationsIndex create(@Nullable Project project, String languageK\n   }\n \n   @VisibleForTesting\n-  boolean verifyCrossProject(Project project, Logger logger) {\n+  boolean verifyCrossProject(@Nullable Project project, Logger logger) {\n     boolean crossProject = false;\n \n     if (settings.getBoolean(CoreProperties.CPD_CROSS_PROJECT)) {"
    },
    {
        "commit_id": "a9bd7ecdd2b0f138275c1bb2954ab6ee9b804844",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a9bd7ecdd2b0f138275c1bb2954ab6ee9b804844",
        "buggy_code": "public ArrayList<Block> chunk(String resourceId, List<TokensLine> fragments) {",
        "fixed_code": "public List<Block> chunk(String resourceId, List<TokensLine> fragments) {",
        "patch": "@@ -51,7 +51,7 @@ public PmdBlockChunker(int blockSize) {\n   /**\n    * @return ArrayList as we need a serializable object\n    */\n-  public ArrayList<Block> chunk(String resourceId, List<TokensLine> fragments) {\n+  public List<Block> chunk(String resourceId, List<TokensLine> fragments) {\n     List<TokensLine> filtered = Lists.newArrayList();\n     int i = 0;\n     while (i < fragments.size()) {"
    },
    {
        "commit_id": "a8c697477813095e59a87be7ab63e1eb3177cc66",
        "commit_message": "Fix minor quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a8c697477813095e59a87be7ab63e1eb3177cc66",
        "buggy_code": "String url = props.value(DefaultSettings.JDBC_URL);",
        "fixed_code": "String url = props.nonNullValue(DefaultSettings.JDBC_URL);",
        "patch": "@@ -50,7 +50,7 @@ static enum Provider {\n   }\n \n   public void checkAndComplete(File homeDir, Props props) {\n-    String url = props.value(DefaultSettings.JDBC_URL);\n+    String url = props.nonNullValue(DefaultSettings.JDBC_URL);\n     Provider provider = driverProvider(url);\n     checkUrlParameters(provider, url);\n     String driverPath = driverPath(homeDir, provider);"
    },
    {
        "commit_id": "cf818e127b54dbb9791e206874146c62b680a3f9",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cf818e127b54dbb9791e206874146c62b680a3f9",
        "buggy_code": "private final Integer lock = new Integer(1);",
        "fixed_code": "private final Object lock = new Object();",
        "patch": "@@ -58,7 +58,7 @@ public class SearchServer extends MonitoredProcess {\n   private final boolean isBlocking;\n \n   private Node node;\n-  private final Integer lock = new Integer(1);\n+  private final Object lock = new Object();\n \n   @VisibleForTesting\n   public SearchServer(final Props props, boolean monitored, boolean blocking) {"
    },
    {
        "commit_id": "9dda0bbeab053cc4a09f7d54176d074179fdf9e4",
        "commit_message": "SONAR-4898 try to fix ping monitoring\n\nSometimes child autokills because it did not receive pings in the last 30 seconds. I hope it comes from the parent process that is slow to start monitoring (send pings).",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9dda0bbeab053cc4a09f7d54176d074179fdf9e4",
        "buggy_code": "private static final long AUTOKILL_TIMEOUT_MS = 30000L;",
        "fixed_code": "private static final long AUTOKILL_TIMEOUT_MS = 60000L;",
        "patch": "@@ -31,7 +31,7 @@ public abstract class MonitoredProcess implements ProcessMXBean {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(MonitoredProcess.class);\n \n-  private static final long AUTOKILL_TIMEOUT_MS = 30000L;\n+  private static final long AUTOKILL_TIMEOUT_MS = 60000L;\n   private static final long AUTOKILL_CHECK_DELAY_MS = 2000L;\n   public static final String NAME_PROPERTY = \"pName\";\n "
    },
    {
        "commit_id": "9dda0bbeab053cc4a09f7d54176d074179fdf9e4",
        "commit_message": "SONAR-4898 try to fix ping monitoring\n\nSometimes child autokills because it did not receive pings in the last 30 seconds. I hope it comes from the parent process that is slow to start monitoring (send pings).",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9dda0bbeab053cc4a09f7d54176d074179fdf9e4",
        "buggy_code": "monitor.registerProcess(process);",
        "fixed_code": "monitor.monitor(process);",
        "patch": "@@ -68,7 +68,7 @@ public void monitor_should_interrupt_process() throws Exception {\n \n     // 1 start my monitor & register process\n     monitor.start();\n-    monitor.registerProcess(process);\n+    monitor.monitor(process);\n \n     // 2 terminate monitor, assert process is terminated\n     monitor.terminate();"
    },
    {
        "commit_id": "1f0d02d7b2023e358a5947b04523fae35b8b5f63",
        "commit_message": "SONAR-4898 fix NPE on termination of ES",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f0d02d7b2023e358a5947b04523fae35b8b5f63",
        "buggy_code": "while (!node.isClosed()) {",
        "fixed_code": "while (node != null && !node.isClosed()) {",
        "patch": "@@ -167,7 +167,7 @@ protected void doStart() {\n       .get();\n \n     if (isBlocking) {\n-      while (!node.isClosed()) {\n+      while (node != null && !node.isClosed()) {\n         try {\n           Thread.sleep(100);\n         } catch (InterruptedException e) {"
    },
    {
        "commit_id": "2cb0ac9b106a7fe0bea98cb1517e5f55d24ab8ca",
        "commit_message": "SONAR-4898 fix parallel termination of processes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2cb0ac9b106a7fe0bea98cb1517e5f55d24ab8ca",
        "buggy_code": "public void terminate() {",
        "fixed_code": "public synchronized void terminate() {",
        "patch": "@@ -126,7 +126,7 @@ public void run() {\n   volatile Boolean isRunning = true;\n \n   @Override\n-  public void terminate() {\n+  public synchronized void terminate() {\n     LOGGER.debug(\"Monitoring thread is terminating\");\n \n     if (!monitorExecutionService.isShutdown()) {"
    },
    {
        "commit_id": "b5e8fd0ef143c9309c30854ce6d8a1d19c2b138d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b5e8fd0ef143c9309c30854ce6d8a1d19c2b138d",
        "buggy_code": "import org.sonar.api.batch.sensor.highlighting.HighlightingBuilder.TypeOfText;",
        "fixed_code": "import org.sonar.api.batch.sensor.highlighting.TypeOfText;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-import org.sonar.api.batch.sensor.highlighting.HighlightingBuilder.TypeOfText;\n+import org.sonar.api.batch.sensor.highlighting.TypeOfText;\n import org.sonar.batch.index.ComponentDataCache;\n import org.sonar.core.source.SnapshotDataTypes;\n "
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "context.putProperty(PATH_LOGS_PROPERTY, props.of(PATH_LOGS_PROPERTY));",
        "fixed_code": "context.putProperty(PATH_LOGS_PROPERTY, props.nonNullValue(PATH_LOGS_PROPERTY));",
        "patch": "@@ -35,7 +35,7 @@ public void configure(Props props, String logbackXmlResource) {\n       JoranConfigurator configurator = new JoranConfigurator();\n       configurator.setContext(context);\n       context.reset();\n-      context.putProperty(PATH_LOGS_PROPERTY, props.of(PATH_LOGS_PROPERTY));\n+      context.putProperty(PATH_LOGS_PROPERTY, props.nonNullValue(PATH_LOGS_PROPERTY));\n       doConfigure(configurator, logbackXmlResource);\n     } catch (JoranException ignored) {\n       // StatusPrinter will handle this"
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "assertThat(result.of(\"foo\")).isEqualTo(\"bar\");",
        "fixed_code": "assertThat(result.value(\"foo\")).isEqualTo(\"bar\");",
        "patch": "@@ -76,7 +76,7 @@ public void loadPropsFromCommandLineArgs_load_properties_from_file() throws Exce\n     FileUtils.write(propsFile, \"foo=bar\");\n \n     Props result = ConfigurationUtils.loadPropsFromCommandLineArgs(new String[] {propsFile.getAbsolutePath()});\n-    assertThat(result.of(\"foo\")).isEqualTo(\"bar\");\n+    assertThat(result.value(\"foo\")).isEqualTo(\"bar\");\n     assertThat(result.rawProperties()).hasSize(1);\n   }\n "
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "return new File(props.of(\"sonar.path.temp\"), \"tc\");",
        "fixed_code": "return new File(props.value(\"sonar.path.temp\"), \"tc\");",
        "patch": "@@ -80,7 +80,7 @@ void start() {\n   }\n \n   private File tomcatBasedir() {\n-    return new File(props.of(\"sonar.path.temp\"), \"tc\");\n+    return new File(props.value(\"sonar.path.temp\"), \"tc\");\n   }\n \n   boolean isReady() {"
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "int port = props.intOf(key, -1);",
        "fixed_code": "int port = props.valueAsInt(key, -1);",
        "patch": "@@ -55,7 +55,7 @@ static void init(Props props) {\n     // init ports\n     for (Map.Entry<String, Integer> entry : defaultPorts().entrySet()) {\n       String key = entry.getKey();\n-      int port = props.intOf(key, -1);\n+      int port = props.valueAsInt(key, -1);\n       if (port == -1) {\n         // default port\n         props.set(key, String.valueOf((int) entry.getValue()));"
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "String url = props.of(DefaultSettings.JDBC_URL);",
        "fixed_code": "String url = props.value(DefaultSettings.JDBC_URL);",
        "patch": "@@ -50,7 +50,7 @@ static enum Provider {\n   }\n \n   public void checkAndComplete(File homeDir, Props props) {\n-    String url = props.of(DefaultSettings.JDBC_URL);\n+    String url = props.value(DefaultSettings.JDBC_URL);\n     Provider provider = driverProvider(url);\n     checkUrlParameters(provider, url);\n     String driverPath = driverPath(homeDir, provider);"
    },
    {
        "commit_id": "c2d7e44f722f3c14af036553fdc001408f47343a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c2d7e44f722f3c14af036553fdc001408f47343a",
        "buggy_code": "String path = props.of(propKey, defaultRelativePath);",
        "fixed_code": "String path = props.value(propKey, defaultRelativePath);",
        "patch": "@@ -111,7 +111,7 @@ private void initExistingDir(Props props, String propKey, String defaultRelative\n   }\n \n   private File configureDir(Props props, String propKey, String defaultRelativePath) {\n-    String path = props.of(propKey, defaultRelativePath);\n+    String path = props.value(propKey, defaultRelativePath);\n     File d = new File(path);\n     if (!d.isAbsolute()) {\n       d = new File(homeDir, path);"
    },
    {
        "commit_id": "ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "buggy_code": "private final static Logger LOGGER = LoggerFactory.getLogger(Monitor.class);",
        "fixed_code": "private static final Logger LOGGER = LoggerFactory.getLogger(Monitor.class);",
        "patch": "@@ -31,7 +31,7 @@\n \n public class Monitor extends Thread implements Terminable {\n \n-  private final static Logger LOGGER = LoggerFactory.getLogger(Monitor.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(Monitor.class);\n \n   private static final long PING_DELAY_MS = 3000L;\n "
    },
    {
        "commit_id": "ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "buggy_code": "private final static Logger LOGGER = LoggerFactory.getLogger(MonitoredProcess.class);",
        "fixed_code": "private static final Logger LOGGER = LoggerFactory.getLogger(MonitoredProcess.class);",
        "patch": "@@ -30,7 +30,7 @@\n \n public abstract class MonitoredProcess implements ProcessMXBean {\n \n-  private final static Logger LOGGER = LoggerFactory.getLogger(MonitoredProcess.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MonitoredProcess.class);\n \n   private static final long AUTOKILL_TIMEOUT_MS = 30000L;\n   private static final long AUTOKILL_CHECK_DELAY_MS = 2000L;"
    },
    {
        "commit_id": "ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec5d30ee4a81111698840edf1f3ee2dc492e6eac",
        "buggy_code": "} catch (JoranException je) {",
        "fixed_code": "} catch (JoranException ignored) {",
        "patch": "@@ -37,7 +37,7 @@ public void configure(Props props, String logbackXmlResource) {\n       context.reset();\n       context.putProperty(PATH_LOGS_PROPERTY, props.of(PATH_LOGS_PROPERTY));\n       doConfigure(configurator, logbackXmlResource);\n-    } catch (JoranException je) {\n+    } catch (JoranException ignored) {\n       // StatusPrinter will handle this\n     }\n     StatusPrinter.printInCaseOfErrorsOrWarnings(context);"
    },
    {
        "commit_id": "5bba55cd38c983e09767246e777d8d317942ab5d",
        "commit_message": "SONAR-5417 Handle permision error for project referential loader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5bba55cd38c983e09767246e777d8d317942ab5d",
        "buggy_code": "public InputSupplier<InputStream> doRequest(String pathStartingWithSlash, @Nullable Integer timeoutMillis) {",
        "fixed_code": "private InputSupplier<InputStream> doRequest(String pathStartingWithSlash, @Nullable Integer timeoutMillis) {",
        "patch": "@@ -92,7 +92,7 @@ public String request(String pathStartingWithSlash, boolean wrapHttpException, @\n     }\n   }\n \n-  public InputSupplier<InputStream> doRequest(String pathStartingWithSlash, @Nullable Integer timeoutMillis) {\n+  private InputSupplier<InputStream> doRequest(String pathStartingWithSlash, @Nullable Integer timeoutMillis) {\n     Preconditions.checkArgument(pathStartingWithSlash.startsWith(\"/\"), \"Path must start with slash /\");\n     String path = StringEscapeUtils.escapeHtml(pathStartingWithSlash);\n "
    },
    {
        "commit_id": "edd595afbafd67632bb7215a081cf4cc5b77d81c",
        "commit_message": "SONAR-5483 - Fix log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/edd595afbafd67632bb7215a081cf4cc5b77d81c",
        "buggy_code": "LoggerFactory.getLogger(SearchServer.class).info(\"Joining ES cluster with masters: {}\", nodes);",
        "fixed_code": "LoggerFactory.getLogger(SearchServer.class).info(\"Joining ES cluster with master: {}\", nodes);",
        "patch": "@@ -120,7 +120,7 @@ protected void doStart() {\n \n     if (!nodes.isEmpty()) {\n \n-      LoggerFactory.getLogger(SearchServer.class).info(\"Joining ES cluster with masters: {}\", nodes);\n+      LoggerFactory.getLogger(SearchServer.class).info(\"Joining ES cluster with master: {}\", nodes);\n       esSettings.put(\"discovery.zen.ping.unicast.hosts\", StringUtils.join(nodes, \",\"));\n       esSettings.put(\"node.master\", false);\n       // Enforce a N/2+1 number of masters in cluster"
    },
    {
        "commit_id": "1a477b1a1304443053b0b72a32aa536d26810e67",
        "commit_message": "fixing case sensitive issue on file",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1a477b1a1304443053b0b72a32aa536d26810e67",
        "buggy_code": "class UpsertDto<DTO extends Dto> extends IndexActionRequest {",
        "fixed_code": "public class UpsertDto<DTO extends Dto> extends IndexActionRequest {",
        "patch": "@@ -25,7 +25,7 @@\n \n import java.util.List;\n \n-class UpsertDto<DTO extends Dto> extends IndexActionRequest {\n+public class UpsertDto<DTO extends Dto> extends IndexActionRequest {\n \n   private final DTO dto;\n "
    },
    {
        "commit_id": "84c18742d3a6406e6c32648bdc656bb040d4f4ca",
        "commit_message": "fix quality flaw & added test for UpdateListScriptFactory",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/84c18742d3a6406e6c32648bdc656bb040d4f4ca",
        "buggy_code": "props.setDefault(entry.getKey(), entry.getValue());",
        "fixed_code": "props.set(entry.getKey(), entry.getValue());",
        "patch": "@@ -49,7 +49,7 @@ static void init(Props props) {\n \n     // init string properties\n     for (Map.Entry<String, String> entry : defaults().entrySet()) {\n-      props.setDefault(entry.getKey(), entry.getValue());\n+      props.set(entry.getKey(), entry.getValue());\n     }\n \n     // init ports"
    },
    {
        "commit_id": "48ca0521616a251dc9963f15f9728e0b92aad4f3",
        "commit_message": "fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/48ca0521616a251dc9963f15f9728e0b92aad4f3",
        "buggy_code": "LOGGER.trace(\"Error while Gobbling\", ignored);",
        "fixed_code": "logger.trace(\"Error while Gobbling\", ignored);",
        "patch": "@@ -360,7 +360,7 @@ public void run() {\n           logger.info(line);\n         }\n       } catch (Exception ignored) {\n-        LOGGER.trace(\"Error while Gobbling\", ignored);\n+        logger.trace(\"Error while Gobbling\", ignored);\n       } finally {\n         IOUtils.closeQuietly(br);\n         IOUtils.closeQuietly(isr);"
    },
    {
        "commit_id": "9a1366b2550521904cbda94386d174fc3c53db2f",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a1366b2550521904cbda94386d174fc3c53db2f",
        "buggy_code": "if (name.equals(\"ctx\")) {",
        "fixed_code": "if (\"ctx\".equals(name)) {",
        "patch": "@@ -83,7 +83,7 @@ public ListUpdate(String idField, String idValue, String field, @Nullable Map<St\n \n   @Override\n   public void setNextVar(String name, Object value) {\n-    if (name.equals(\"ctx\")) {\n+    if (\"ctx\".equals(name)) {\n       ctx = (Map<String, Object>) value;\n     }\n   }"
    },
    {
        "commit_id": "46bd831271222c3a9ae5c51a77e1ad693f1cc3e9",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/46bd831271222c3a9ae5c51a77e1ad693f1cc3e9",
        "buggy_code": "Properties parseArguments(String[] args) throws Exception {",
        "fixed_code": "Properties parseArguments(String[] args) {",
        "patch": "@@ -28,7 +28,7 @@ class CommandLineParser {\n   /**\n    * Build properties from command-line arguments and system properties\n    */\n-  Properties parseArguments(String[] args) throws Exception {\n+  Properties parseArguments(String[] args) {\n     Properties props = argumentsToProperties(args);\n \n     // complete with only the system properties that start with \"sonar.\""
    },
    {
        "commit_id": "80346c2d8aaff33baf91f94817d9f22d09d94c6d",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80346c2d8aaff33baf91f94817d9f22d09d94c6d",
        "buggy_code": "Rule rule = ruleService.getByKey(activeRule.key().ruleKey());",
        "fixed_code": "Rule rule = ruleService.getNonNullByKey(activeRule.key().ruleKey());",
        "patch": "@@ -223,7 +223,7 @@ private QualityProfileDto getProfile(String languageKey, @Nullable String projec\n   private void addActiveRules(ProjectReferentials ref) {\n     for (org.sonar.batch.protocol.input.QProfile qProfile : ref.qProfiles()) {\n       for (ActiveRule activeRule : qProfileLoader.findActiveRulesByProfile(qProfile.key())) {\n-        Rule rule = ruleService.getByKey(activeRule.key().ruleKey());\n+        Rule rule = ruleService.getNonNullByKey(activeRule.key().ruleKey());\n         org.sonar.batch.protocol.input.ActiveRule inputActiveRule = new org.sonar.batch.protocol.input.ActiveRule(\n           activeRule.key().ruleKey().repository(),\n           activeRule.key().ruleKey().rule(),"
    },
    {
        "commit_id": "80346c2d8aaff33baf91f94817d9f22d09d94c6d",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80346c2d8aaff33baf91f94817d9f22d09d94c6d",
        "buggy_code": "when(ruleService.getByKey(ruleKey)).thenReturn(rule);",
        "fixed_code": "when(ruleService.getNonNullByKey(ruleKey)).thenReturn(rule);",
        "patch": "@@ -379,7 +379,7 @@ public void return_active_rules() throws Exception {\n     Rule rule = mock(Rule.class);\n     when(rule.name()).thenReturn(\"Avoid Cycle\");\n     when(rule.internalKey()).thenReturn(\"squid-1\");\n-    when(ruleService.getByKey(ruleKey)).thenReturn(rule);\n+    when(ruleService.getNonNullByKey(ruleKey)).thenReturn(rule);\n \n     WsTester.TestRequest request = tester.newGetRequest(\"batch\", \"project\").setParam(\"key\", projectKey);\n     request.execute().assertJson(getClass(), \"return_active_rules.json\");"
    },
    {
        "commit_id": "17a299b77abc930879e7c2b83664d826bf9f322c",
        "commit_message": "SONAR-4898 fix support of properties that don't start with \"sonar.\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/17a299b77abc930879e7c2b83664d826bf9f322c",
        "buggy_code": "public Properties encryptedProperties() {",
        "fixed_code": "public Properties rawProperties() {",
        "patch": "@@ -78,7 +78,7 @@ public int intOf(String key, int defaultValue) {\n     return i == null ? defaultValue : i;\n   }\n \n-  public Properties encryptedProperties() {\n+  public Properties rawProperties() {\n     return props;\n   }\n "
    },
    {
        "commit_id": "324e7ea6fb166942a519dfac10647eae5af803cd",
        "commit_message": "SONAR-5402 Fix issue on provisionned projects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/324e7ea6fb166942a519dfac10647eae5af803cd",
        "buggy_code": "project = componentDao.getById(projectId, session);",
        "fixed_code": "project = componentDao.getNullableById(projectId, session);",
        "patch": "@@ -125,7 +125,7 @@ private void addProject(JsonWriter json, @Nullable ComponentDto project, @Nullab\n   private ComponentDto getProject(@Nullable Long projectId, Map<Long, ComponentDto> projectsById, DbSession session) {\n     ComponentDto project = projectsById.get(projectId);\n     if (project == null && projectId != null) {\n-      project = componentDao.getById(projectId, session);\n+      project = componentDao.getNullableById(projectId, session);\n       if (project != null) {\n         projectsById.put(project.getId(), project);\n       }"
    },
    {
        "commit_id": "b392394253933286c7c234a459df6ad1cef53f02",
        "commit_message": "SONAR-5513 Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b392394253933286c7c234a459df6ad1cef53f02",
        "buggy_code": "public static final String DUPLICATION_LINES_DATA_KEY = \"comment_lines_data\";",
        "fixed_code": "public static final String DUPLICATION_LINES_DATA_KEY = \"duplication_lines_data\";",
        "patch": "@@ -1355,7 +1355,7 @@ public final class CoreMetrics {\n    * @since 4.5 used by dev cockpit.\n    */\n   @Beta\n-  public static final String DUPLICATION_LINES_DATA_KEY = \"comment_lines_data\";\n+  public static final String DUPLICATION_LINES_DATA_KEY = \"duplication_lines_data\";\n \n   /**\n    * Information about duplication in file."
    },
    {
        "commit_id": "a570bd8448809fd4cf4ef9a86dfdd2dfcce33e6d",
        "commit_message": "SONAR-4898 add missing tests, fix loading of default settings and check Java6+",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a570bd8448809fd4cf4ef9a86dfdd2dfcce33e6d",
        "buggy_code": "for (Map.Entry<Object, Object> entry : props.cryptedProperties().entrySet()) {",
        "fixed_code": "for (Map.Entry<Object, Object> entry : props.encryptedProperties().entrySet()) {",
        "patch": "@@ -47,7 +47,7 @@ static void configure(Tomcat tomcat, Props props) {\n       context.setXmlNamespaceAware(false);\n       context.setUseNaming(false);\n       context.setDelegate(true);\n-      for (Map.Entry<Object, Object> entry : props.cryptedProperties().entrySet()) {\n+      for (Map.Entry<Object, Object> entry : props.encryptedProperties().entrySet()) {\n         String key = entry.getKey().toString();\n         if (key.startsWith(\"sonar.\")) {\n           context.addParameter(key, entry.getValue().toString());"
    },
    {
        "commit_id": "7fb06c70e7cae244f2044a8a8e1937d873f8ecd7",
        "commit_message": "SONAR-4898 fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fb06c70e7cae244f2044a8a8e1937d873f8ecd7",
        "buggy_code": "settings = new Settings().setProperty(CoreProperties.SONAR_HOME, sonarHome.getRoot().getAbsolutePath());",
        "fixed_code": "settings = new Settings().setProperty(\"sonar.path.home\", sonarHome.getRoot().getAbsolutePath());",
        "patch": "@@ -47,7 +47,7 @@ public class ServerImplTest {\n \n   @Before\n   public void setUp() throws Exception {\n-    settings = new Settings().setProperty(CoreProperties.SONAR_HOME, sonarHome.getRoot().getAbsolutePath());\n+    settings = new Settings().setProperty(\"sonar.path.home\", sonarHome.getRoot().getAbsolutePath());\n     new File(sonarHome.getRoot(), \"web/deploy\").mkdirs();\n \n     server = new ServerImpl(settings, \"/org/sonar/server/platform/ServerImplTest/build.properties\", \"/org/sonar/server/platform/ServerImplTest/version.txt\");"
    },
    {
        "commit_id": "c23d068c034d54dab6ef962c916edd46dc44597f",
        "commit_message": "Fix issue after renaming Analyzer -> Sensor",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c23d068c034d54dab6ef962c916edd46dc44597f",
        "buggy_code": "&& acceptSensor((Sensor) extension) || ClassUtils.isAssignable(extension.getClass(), Sensor.class);",
        "fixed_code": "&& acceptSensor((Sensor) extension) || ClassUtils.isAssignable(extension.getClass(), org.sonar.api.batch.sensor.Sensor.class);",
        "patch": "@@ -36,7 +36,7 @@ public abstract class SensorMatcher implements BatchExtension, ExtensionMatcher\n   @Override\n   public final boolean accept(Object extension) {\n     return ClassUtils.isAssignable(extension.getClass(), Sensor.class)\n-      && acceptSensor((Sensor) extension) || ClassUtils.isAssignable(extension.getClass(), Sensor.class);\n+      && acceptSensor((Sensor) extension) || ClassUtils.isAssignable(extension.getClass(), org.sonar.api.batch.sensor.Sensor.class);\n   }\n \n   public abstract boolean acceptSensor(Sensor sensor);"
    },
    {
        "commit_id": "5df2d2e6fa4cb7201c125115934c97076c550d55",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5df2d2e6fa4cb7201c125115934c97076c550d55",
        "buggy_code": "Long metricId = context.prepareSelect(\"select id from metrics where name='development_cost'\").get(Select.RowReader.LONG);",
        "fixed_code": "Long metricId = context.prepareSelect(\"select id from metrics where name='development_cost'\").get(Select.LONG_READER);",
        "patch": "@@ -48,7 +48,7 @@ public DevelopmentCostMeasuresMigration(Database database, PropertiesDao propert\n   public void execute(Context context) throws SQLException {\n     workDurationConvertor.init();\n \n-    Long metricId = context.prepareSelect(\"select id from metrics where name='development_cost'\").get(Select.RowReader.LONG);\n+    Long metricId = context.prepareSelect(\"select id from metrics where name='development_cost'\").get(Select.LONG_READER);\n     if (metricId != null) {\n       MassUpdate massUpdate = context.prepareMassUpdate();\n       massUpdate.select(\"select id, value from project_measures where metric_id=? and value is not null\").setLong(1, metricId);"
    },
    {
        "commit_id": "1cd3cec55a7bd9584b56992c4380a7f2029b3c76",
        "commit_message": "DataChange : fix lock between connections and log progress status",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1cd3cec55a7bd9584b56992c4380a7f2029b3c76",
        "buggy_code": "return new MassUpdate(db, writeConnection);",
        "fixed_code": "return new MassUpdate(db, readConnection, writeConnection);",
        "patch": "@@ -45,7 +45,7 @@ public Upsert prepareUpsert(String sql) throws SQLException {\n     }\n \n     public MassUpdate prepareMassUpdate() throws SQLException {\n-      return new MassUpdate(db, writeConnection);\n+      return new MassUpdate(db, readConnection, writeConnection);\n     }\n   }\n "
    },
    {
        "commit_id": "e83fe5c02952d4c9b0292588bc8aa72f3860c53d",
        "commit_message": "fix qualitiy flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e83fe5c02952d4c9b0292588bc8aa72f3860c53d",
        "buggy_code": "public ListUpdate(String idField, String idValue, String field, Map<String, Object> value) {",
        "fixed_code": "public ListUpdate(String idField, String idValue, String field, @Nullable Map<String, Object> value) {",
        "patch": "@@ -74,7 +74,7 @@ public ExecutableScript newScript(@Nullable Map<String, Object> params) {\n \n   private Map<String, Object> ctx;\n \n-  public ListUpdate(String idField, String idValue, String field, Map<String, Object> value) {\n+  public ListUpdate(String idField, String idValue, String field, @Nullable Map<String, Object> value) {\n     this.idField = idField;\n     this.idValue = idValue;\n     this.field = field;"
    },
    {
        "commit_id": "3ae1e72bbc27fad46362b9b0ad574d2dca47d705",
        "commit_message": "SONAR-4898 - Adjusting timeouts & fix possible NPE when ES is not ready",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ae1e72bbc27fad46362b9b0ad574d2dca47d705",
        "buggy_code": "pingTask = monitor.scheduleWithFixedDelay(breakOnMissingPing, 0, 3, TimeUnit.SECONDS);",
        "fixed_code": "pingTask = monitor.scheduleWithFixedDelay(breakOnMissingPing, 5, 5, TimeUnit.SECONDS);",
        "patch": "@@ -115,7 +115,7 @@ public final void start() {\n     LOGGER.info(\"Process[{}]::start START\", name);\n     if (this.port != null) {\n       lastPing = System.currentTimeMillis();\n-      pingTask = monitor.scheduleWithFixedDelay(breakOnMissingPing, 0, 3, TimeUnit.SECONDS);\n+      pingTask = monitor.scheduleWithFixedDelay(breakOnMissingPing, 5, 5, TimeUnit.SECONDS);\n     }\n     this.onStart();\n     LOGGER.info(\"Process[{}]::start END\", name);"
    },
    {
        "commit_id": "3ae1e72bbc27fad46362b9b0ad574d2dca47d705",
        "commit_message": "SONAR-4898 - Adjusting timeouts & fix possible NPE when ES is not ready",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3ae1e72bbc27fad46362b9b0ad574d2dca47d705",
        "buggy_code": "@Test(timeout = 5000L)",
        "fixed_code": "@Test(timeout = 15000L)",
        "patch": "@@ -130,7 +130,7 @@ public void run() {\n     procThread.join();\n   }\n \n-  @Test(timeout = 5000L)\n+  @Test(timeout = 15000L)\n   public void should_stop_implicit() throws Exception {\n     Properties properties = new Properties();\n     properties.setProperty(Process.NAME_PROPERTY, \"TEST\");"
    },
    {
        "commit_id": "2ad895bec65ff949ba96c96db8602fb102103fc5",
        "commit_message": "Fix wrong import",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2ad895bec65ff949ba96c96db8602fb102103fc5",
        "buggy_code": "import org.codehaus.plexus.util.StringUtils;",
        "fixed_code": "import org.apache.commons.lang.StringUtils;",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.batch.scan.filesystem;\n \n import com.google.common.annotations.VisibleForTesting;\n-import org.codehaus.plexus.util.StringUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.sonar.api.BatchComponent;"
    },
    {
        "commit_id": "05be0dff7b176e4f5236da44098ea4c24ec750b7",
        "commit_message": "fix quality flaw (Using production ready timeout value)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05be0dff7b176e4f5236da44098ea4c24ec750b7",
        "buggy_code": "private static final int TIMEOUT = 3000;",
        "fixed_code": "private static final int TIMEOUT = 30000;",
        "patch": "@@ -43,7 +43,7 @@ public class IndexQueue extends LinkedBlockingQueue<Runnable>\n   private static final Logger LOGGER = LoggerFactory.getLogger(IndexQueue.class);\n \n   private static final Integer DEFAULT_QUEUE_SIZE = 200;\n-  private static final int TIMEOUT = 3000;\n+  private static final int TIMEOUT = 30000;\n \n   public IndexQueue() {\n     super(DEFAULT_QUEUE_SIZE);"
    },
    {
        "commit_id": "972e4d53dfad4692574b70e1bc495c76a2c177d3",
        "commit_message": "fix quality flaw (Using production ready timeout value)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/972e4d53dfad4692574b70e1bc495c76a2c177d3",
        "buggy_code": "private static final int TIMEOUT = 3000;",
        "fixed_code": "private static final int TIMEOUT = 30000;",
        "patch": "@@ -43,7 +43,7 @@ public class IndexQueue extends LinkedBlockingQueue<Runnable>\n   private static final Logger LOGGER = LoggerFactory.getLogger(IndexQueue.class);\n \n   private static final Integer DEFAULT_QUEUE_SIZE = 200;\n-  private static final int TIMEOUT = 3000;\n+  private static final int TIMEOUT = 30000;\n \n   public IndexQueue() {\n     super(DEFAULT_QUEUE_SIZE);"
    },
    {
        "commit_id": "f8136fcae2693df33c4c9cd8edefe5a381f165b3",
        "commit_message": "fix quality flaw (possible NPE)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8136fcae2693df33c4c9cd8edefe5a381f165b3",
        "buggy_code": "refreshes.add(action.getIndex().getIndexName());",
        "fixed_code": "refreshes.add(index.getIndexName());",
        "patch": "@@ -82,7 +82,7 @@ public void enqueue(List<IndexAction> actions) {\n           refreshTime = System.currentTimeMillis();\n           index.refresh();\n           refreshTime = System.currentTimeMillis() - refreshTime;\n-          refreshes.add(action.getIndex().getIndexName());\n+          refreshes.add(index.getIndexName());\n         }\n         types.add(action.getPayloadClass().getSimpleName());\n       } catch (InterruptedException e) {"
    },
    {
        "commit_id": "266d901ba901b8cfd33727610efeb6a0fcfa0e2a",
        "commit_message": "fix quality flaw (possible NPE)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/266d901ba901b8cfd33727610efeb6a0fcfa0e2a",
        "buggy_code": "refreshes.add(action.getIndex().getIndexName());",
        "fixed_code": "refreshes.add(index.getIndexName());",
        "patch": "@@ -82,7 +82,7 @@ public void enqueue(List<IndexAction> actions) {\n           refreshTime = System.currentTimeMillis();\n           index.refresh();\n           refreshTime = System.currentTimeMillis() - refreshTime;\n-          refreshes.add(action.getIndex().getIndexName());\n+          refreshes.add(index.getIndexName());\n         }\n         types.add(action.getPayloadClass().getSimpleName());\n       } catch (InterruptedException e) {"
    },
    {
        "commit_id": "741384c532587cc786937415ab8fe574ab852b27",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/741384c532587cc786937415ab8fe574ab852b27",
        "buggy_code": "patterns[i] = \"**/*.\" + extension;",
        "fixed_code": "patterns[i] = new StringBuilder().append(\"**/*.\").append(extension).toString();",
        "patch": "@@ -66,7 +66,7 @@ class LanguageDetection {\n         for (int i = 0; i < patterns.length; i++) {\n           String suffix = patterns[i];\n           String extension = sanitizeExtension(suffix);\n-          patterns[i] = \"**/*.\" + extension;\n+          patterns[i] = new StringBuilder().append(\"**/*.\").append(extension).toString();\n         }\n         PathPattern[] defaultLanguagePatterns = PathPattern.create(patterns);\n         patternsByLanguage.put(language.key(), defaultLanguagePatterns);"
    },
    {
        "commit_id": "741384c532587cc786937415ab8fe574ab852b27",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/741384c532587cc786937415ab8fe574ab852b27",
        "buggy_code": "packagesToExport[i] = PREFIXES_TO_EXPORT[i] + realm.getId() + \".api\";",
        "fixed_code": "packagesToExport[i] = String.format(\"%s%s.api\", PREFIXES_TO_EXPORT[i], realm.getId());",
        "patch": "@@ -180,7 +180,7 @@ public void done() {\n         String[] packagesToExport = new String[PREFIXES_TO_EXPORT.length];\n         for (int i = 0; i < PREFIXES_TO_EXPORT.length; i++) {\n           // important to have dot at the end of package name only for classworlds 1.1\n-          packagesToExport[i] = PREFIXES_TO_EXPORT[i] + realm.getId() + \".api\";\n+          packagesToExport[i] = String.format(\"%s%s.api\", PREFIXES_TO_EXPORT[i], realm.getId());\n         }\n         export(realm, packagesToExport);\n       }"
    },
    {
        "commit_id": "7884f1112e53b07ecd7616ee206b9fb143d6f989",
        "commit_message": "fix quality flaws (RuleDoc CTor needs a non-nullable map)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7884f1112e53b07ecd7616ee206b9fb143d6f989",
        "buggy_code": "RuleDoc(@Nullable Map<String, Object> fields) {",
        "fixed_code": "RuleDoc(Map<String, Object> fields) {",
        "patch": "@@ -46,7 +46,7 @@ public class RuleDoc extends BaseDoc implements Rule {\n \n   public static final String MANUAL_REPOSITORY = \"manual\";\n \n-  RuleDoc(@Nullable Map<String, Object> fields) {\n+  RuleDoc(Map<String, Object> fields) {\n     super(fields);\n   }\n "
    },
    {
        "commit_id": "4e3dd47b835ff7640bf2cbeaa437ef3fb2798cc5",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e3dd47b835ff7640bf2cbeaa437ef3fb2798cc5",
        "buggy_code": "throw new IllegalStateException(\"Could not access Field '\" + classField.getName() + \"'\");",
        "fixed_code": "throw new IllegalStateException(\"Could not access Field '\" + classField.getName() + \"'\", e);",
        "patch": "@@ -66,7 +66,7 @@ private static final Set<IndexField> getAllFields() {\n           try {\n             fields.add(IndexField.class.cast(classField.get(null)));\n           } catch (IllegalAccessException e) {\n-            throw new IllegalStateException(\"Could not access Field '\" + classField.getName() + \"'\");\n+            throw new IllegalStateException(\"Could not access Field '\" + classField.getName() + \"'\", e);\n           }\n         }\n       }"
    },
    {
        "commit_id": "ed1ad8229a9e73d1d83fb4adc0fdcf966bfb7d77",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ed1ad8229a9e73d1d83fb4adc0fdcf966bfb7d77",
        "buggy_code": "if (query.getQueryText() == null || query.getQueryText().isEmpty()) {",
        "fixed_code": "if (queryText == null || queryText.isEmpty()) {",
        "patch": "@@ -176,7 +176,7 @@ protected QueryBuilder getQuery(RuleQuery query, QueryOptions options) {\n \n     // No contextual query case\n     String queryText = query.getQueryText();\n-    if (query.getQueryText() == null || query.getQueryText().isEmpty()) {\n+    if (queryText == null || queryText.isEmpty()) {\n       return QueryBuilders.matchAllQuery();\n     }\n "
    },
    {
        "commit_id": "b2c6d534251f2d2ed12256ff7b57ddba0d067dde",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b2c6d534251f2d2ed12256ff7b57ddba0d067dde",
        "buggy_code": "public static final Set<IndexField> ALL_FIELDS = getAllFields();",
        "fixed_code": "public static Set<IndexField> ALL_FIELDS = getAllFields();",
        "patch": "@@ -57,7 +57,7 @@ public static final class LogFields extends Indexable {\n     public static final IndexField DETAILS = addSearchable(IndexField.Type.OBJECT, \"details\");\n     public static final IndexField MESSAGE = addSearchable(IndexField.Type.STRING, \"message\");\n \n-    public static final Set<IndexField> ALL_FIELDS = getAllFields();\n+    public static Set<IndexField> ALL_FIELDS = getAllFields();\n \n     private static final Set<IndexField> getAllFields() {\n       Set<IndexField> fields = new HashSet<IndexField>();"
    },
    {
        "commit_id": "c067855053a2ed2f28326627ffd0718af3d61817",
        "commit_message": "fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c067855053a2ed2f28326627ffd0718af3d61817",
        "buggy_code": "Collection items = ((Collection) fieldValue);",
        "fixed_code": "Collection items = (Collection) fieldValue;",
        "patch": "@@ -119,7 +119,7 @@ public Object run() {\n         }\n       } else {\n         // 3. field is a list\n-        Collection items = ((Collection) fieldValue);\n+        Collection items = (Collection) fieldValue;\n         Object target = null;\n         for (Object item : items) {\n           Map<String, Object> fields = (Map<String, Object>) item;"
    },
    {
        "commit_id": "b34de6cbb17ae0f15c5ddc19573e0c8704ac564c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b34de6cbb17ae0f15c5ddc19573e0c8704ac564c",
        "buggy_code": "import java.lang.reflect.Method;",
        "fixed_code": "assertThat(PathUtils.canonicalPath(null)).isNull();",
        "patch": "@@ -26,7 +26,6 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.lang.reflect.Method;\n \n import static org.fest.assertions.Assertions.assertThat;\n import static org.fest.assertions.Fail.fail;\n@@ -65,6 +64,7 @@ public void testCanonicalPath() throws Exception {\n     File file = temp.newFile();\n     String path = PathUtils.canonicalPath(file);\n     assertThat(path).isEqualTo(FilenameUtils.separatorsToUnix(file.getCanonicalPath()));\n+    assertThat(PathUtils.canonicalPath(null)).isNull();\n   }\n \n   @Test"
    },
    {
        "commit_id": "e20c23f822908cad7ddb1038322c5a395b51f49c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e20c23f822908cad7ddb1038322c5a395b51f49c",
        "buggy_code": "if (!Strings.isNullOrEmpty(format) && !format.equals(\"json\")){",
        "fixed_code": "if (!Strings.isNullOrEmpty(format) && !\"json\".equals(format)){",
        "patch": "@@ -191,7 +191,7 @@ public void handle(Request request, Response response) {\n \n   private void checkFormatParameter(Request request) {\n     String format = request.param(\"format\");\n-    if (!Strings.isNullOrEmpty(format) && !format.equals(\"json\")){\n+    if (!Strings.isNullOrEmpty(format) && !\"json\".equals(format)){\n       throw new BadRequestException(\"Only json format is supported.\");\n     }\n   }"
    },
    {
        "commit_id": "bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "buggy_code": "doClean(projectId, new Filters(settings).getFilters());",
        "fixed_code": "doClean(projectId, new Filters(settings).all());",
        "patch": "@@ -48,7 +48,7 @@ public void purge(Project project, int projectSnapshotId) {\n   }\n \n   public void clean(long projectId) {\n-    doClean(projectId, new Filters(settings).getFilters());\n+    doClean(projectId, new Filters(settings).all());\n   }\n \n   @VisibleForTesting"
    },
    {
        "commit_id": "bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "buggy_code": "categoriesSplit[i] = DEFAULT_NAME_CATEGORY + i;",
        "fixed_code": "categoriesSplit[i] = new StringBuilder().append(DEFAULT_NAME_CATEGORY).append(i).toString();",
        "patch": "@@ -115,7 +115,7 @@ private void addMeasures(String values) {\n       } else {\n         categoriesSplit = new String[nbValues];\n         for (int i = 0; i < nbValues; i++) {\n-          categoriesSplit[i] = DEFAULT_NAME_CATEGORY + i;\n+          categoriesSplit[i] = new StringBuilder().append(DEFAULT_NAME_CATEGORY).append(i).toString();\n         }\n       }\n "
    },
    {
        "commit_id": "bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "buggy_code": "private static class BlockComparator implements Comparator<Block> {",
        "fixed_code": "private static class BlockComparator implements Comparator<Block>, Serializable {",
        "patch": "@@ -145,7 +145,7 @@ public int compare(@Nullable Duplication d1,\n     }\n   }\n \n-  private static class BlockComparator implements Comparator<Block> {\n+  private static class BlockComparator implements Comparator<Block>, Serializable {\n     @Override\n     public int compare(@Nullable Block b1,\n       @Nullable Block b2) {"
    },
    {
        "commit_id": "bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "buggy_code": "activation.setReset(request.paramAsBoolean(RESET) == Boolean.TRUE);",
        "fixed_code": "activation.setReset(Boolean.TRUE.equals(request.paramAsBoolean(RESET)));",
        "patch": "@@ -117,7 +117,7 @@ private void activate(Request request, Response response) throws Exception {\n     if (params != null) {\n       activation.setParameters(KeyValueFormat.parse(params));\n     }\n-    activation.setReset(request.paramAsBoolean(RESET) == Boolean.TRUE);\n+    activation.setReset(Boolean.TRUE.equals(request.paramAsBoolean(RESET)));\n     service.activate(request.mandatoryParam(PROFILE_KEY), activation);\n   }\n "
    },
    {
        "commit_id": "bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdc239fc9ac9c6aa94bc80eab122de7a0fb698ef",
        "buggy_code": "LOG.info(\"-- Synchronized {} in {}ms\", index.getIndexType(), (System.currentTimeMillis() - start));",
        "fixed_code": "LOG.info(\"-- Synchronized {} in {}ms\", index.getIndexType(), System.currentTimeMillis() - start);",
        "patch": "@@ -60,6 +60,6 @@ private void synchronize(DbSession session, Dao dao, Index index) {\n     long start = System.currentTimeMillis();\n     dao.synchronizeAfter(session,\n       index.getLastSynchronization());\n-    LOG.info(\"-- Synchronized {} in {}ms\", index.getIndexType(), (System.currentTimeMillis() - start));\n+    LOG.info(\"-- Synchronized {} in {}ms\", index.getIndexType(), System.currentTimeMillis() - start);\n   }\n }"
    },
    {
        "commit_id": "31c56c4337d47b6e0486c8ceb2815c7fa1173dcc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31c56c4337d47b6e0486c8ceb2815c7fa1173dcc",
        "buggy_code": "class LoggingWatch extends StopWatch {",
        "fixed_code": "class LoggingWatch implements StopWatch {",
        "patch": "@@ -23,7 +23,7 @@\n import org.slf4j.Logger;\n import org.sonar.api.utils.System2;\n \n-class LoggingWatch extends StopWatch {\n+class LoggingWatch implements StopWatch {\n \n   private Logger logger;\n   private System2 system;"
    },
    {
        "commit_id": "31c56c4337d47b6e0486c8ceb2815c7fa1173dcc",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31c56c4337d47b6e0486c8ceb2815c7fa1173dcc",
        "buggy_code": "class NoopWatch extends StopWatch {",
        "fixed_code": "class NoopWatch implements StopWatch {",
        "patch": "@@ -20,7 +20,7 @@\n package org.sonar.core.profiling;\n \n \n-class NoopWatch extends StopWatch {\n+class NoopWatch implements StopWatch {\n \n   @Override\n   public void stop(String message, Object... args) {"
    },
    {
        "commit_id": "ef3e590d1ba5372d825216f85816463fa8e50a99",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ef3e590d1ba5372d825216f85816463fa8e50a99",
        "buggy_code": "public static abstract class Cache {",
        "fixed_code": "public abstract static class Cache {",
        "patch": "@@ -204,7 +204,7 @@ protected void doPreloadFiles() {\n     // nothing to do by default\n   }\n \n-  public static abstract class Cache {\n+  public abstract static class Cache {\n     protected abstract Iterable<InputFile> inputFiles();\n \n     @CheckForNull"
    },
    {
        "commit_id": "ef3e590d1ba5372d825216f85816463fa8e50a99",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ef3e590d1ba5372d825216f85816463fa8e50a99",
        "buggy_code": "public final static String MANUAL_REPOSITORY = \"manual\";",
        "fixed_code": "public static final String MANUAL_REPOSITORY = \"manual\";",
        "patch": "@@ -45,7 +45,7 @@\n  */\n public class RuleDoc extends BaseDoc implements Rule {\n \n-  public final static String MANUAL_REPOSITORY = \"manual\";\n+  public static final String MANUAL_REPOSITORY = \"manual\";\n \n   RuleDoc(@Nullable Map<String, Object> fields) {\n     super(fields);"
    },
    {
        "commit_id": "85445db60e417c23237e38715256449839efbb4b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/85445db60e417c23237e38715256449839efbb4b",
        "buggy_code": "return Type.valueOf((String) this.getNullableField(ActivityNormalizer.LogFields.TYPE.field()));",
        "fixed_code": "return Type.valueOf((String) getField(ActivityNormalizer.LogFields.TYPE.field()));",
        "patch": "@@ -48,7 +48,7 @@ public String login() {\n \n   @Override\n   public Type type() {\n-    return Type.valueOf((String) this.getNullableField(ActivityNormalizer.LogFields.TYPE.field()));\n+    return Type.valueOf((String) getField(ActivityNormalizer.LogFields.TYPE.field()));\n   }\n \n   @Override"
    },
    {
        "commit_id": "ed8b193aabca70842f9210e46464a26144dc9da5",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ed8b193aabca70842f9210e46464a26144dc9da5",
        "buggy_code": "this.key = ActiveRuleKey.parse((String) getNullableField(ActiveRuleNormalizer.ActiveRuleField.KEY.field()));",
        "fixed_code": "this.key = ActiveRuleKey.parse((String) getField(ActiveRuleNormalizer.ActiveRuleField.KEY.field()));",
        "patch": "@@ -35,7 +35,7 @@ public class ActiveRuleDoc extends BaseDoc implements ActiveRule {\n \n   public ActiveRuleDoc(Map<String, Object> fields) {\n     super(fields);\n-    this.key = ActiveRuleKey.parse((String) getNullableField(ActiveRuleNormalizer.ActiveRuleField.KEY.field()));\n+    this.key = ActiveRuleKey.parse((String) getField(ActiveRuleNormalizer.ActiveRuleField.KEY.field()));\n     Preconditions.checkArgument(key!=null, \"Invalid ActiveRuleKey!\");\n   }\n "
    },
    {
        "commit_id": "ed8b193aabca70842f9210e46464a26144dc9da5",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ed8b193aabca70842f9210e46464a26144dc9da5",
        "buggy_code": "Rule rule = service.getByKey(ruleKey);",
        "fixed_code": "Rule rule = service.getNonNullByKey(ruleKey);",
        "patch": "@@ -213,7 +213,7 @@ private void readDebt(Request request, RuleUpdate update) {\n   }\n \n   private void writeResponse(Response response, RuleKey ruleKey) {\n-    Rule rule = service.getByKey(ruleKey);\n+    Rule rule = service.getNonNullByKey(ruleKey);\n     JsonWriter json = response.newJsonWriter().beginObject().name(\"rule\");\n     mapping.write((BaseDoc) rule, json);\n     json.endObject().close();"
    },
    {
        "commit_id": "d44ef046f3dd7d59397c681cb79ebe3173d915bb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d44ef046f3dd7d59397c681cb79ebe3173d915bb",
        "buggy_code": "Snapshot projectSnapshot = resourcePersister.getSnapshot(project);",
        "fixed_code": "Snapshot projectSnapshot = resourcePersister.getSnapshotOrFail(project);",
        "patch": "@@ -38,7 +38,7 @@ public DependencyPersister(ResourcePersister resourcePersister, DatabaseSession\n   public void saveDependency(Project project, Dependency dependency, Dependency parentDependency) {\n     Snapshot fromSnapshot = resourcePersister.saveResource(project, dependency.getFrom());\n     Snapshot toSnapshot = resourcePersister.saveResource(project, dependency.getTo());\n-    Snapshot projectSnapshot = resourcePersister.getSnapshot(project);\n+    Snapshot projectSnapshot = resourcePersister.getSnapshotOrFail(project);\n \n     DependencyDto model = new DependencyDto();\n     model.setProjectSnapshotId(projectSnapshot.getId());"
    },
    {
        "commit_id": "ef9b3e8704be8de9f30c42f9e8034588309f6e16",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ef9b3e8704be8de9f30c42f9e8034588309f6e16",
        "buggy_code": "PutIndexTemplateResponse response = node.client().admin().indices()",
        "fixed_code": "node.client().admin().indices()",
        "patch": "@@ -159,7 +159,7 @@ private void initDataES(ImmutableSettings.Builder builder) {\n   }\n \n   private void addIndexTemplates() {\n-    PutIndexTemplateResponse response = node.client().admin().indices()\n+    node.client().admin().indices()\n       .preparePutTemplate(\"default\")\n       .setTemplate(\"*\")\n       .addMapping(\"_default_\", \"{\\\"dynamic\\\": \\\"strict\\\"}\")"
    },
    {
        "commit_id": "b0d5f026d7b3430edd6f076a90fbde0b370e1605",
        "commit_message": "SONAR-5135 fix bulk activation and reset",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b0d5f026d7b3430edd6f076a90fbde0b370e1605",
        "buggy_code": "assertThat(restoreProfiles.params()).hasSize(4);",
        "fixed_code": "assertThat(restoreProfiles.params()).hasSize(5);",
        "patch": "@@ -68,7 +68,7 @@ public void define_activate_rule_action() throws Exception {\n     WebService.Action restoreProfiles = controller.action(RuleActivationActions.ACTIVATE_ACTION);\n     assertThat(restoreProfiles).isNotNull();\n     assertThat(restoreProfiles.isPost()).isTrue();\n-    assertThat(restoreProfiles.params()).hasSize(4);\n+    assertThat(restoreProfiles.params()).hasSize(5);\n   }\n \n   @Test"
    },
    {
        "commit_id": "0f2c9d91534967377bd4901320b8ef568fdbad73",
        "commit_message": "Fix NPE when no source on file",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f2c9d91534967377bd4901320b8ef568fdbad73",
        "buggy_code": "if (sourceHtml.isEmpty()) {",
        "fixed_code": "if (sourceHtml == null) {",
        "patch": "@@ -76,7 +76,7 @@ public void handle(Request request, Response response) {\n     int to = (Integer) ObjectUtils.defaultIfNull(request.paramAsInt(\"to\"), Integer.MAX_VALUE);\n \n     List<String> sourceHtml = sourceService.getLinesAsHtml(fileKey, from, to);\n-    if (sourceHtml.isEmpty()) {\n+    if (sourceHtml == null) {\n       throw new NotFoundException(\"File '\" + fileKey + \"' has no sources\");\n     }\n "
    },
    {
        "commit_id": "058273a7be1fd07ad1abff67c777a9ef52eb1498",
        "commit_message": "SONAR-5007 fix db migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/058273a7be1fd07ad1abff67c777a9ef52eb1498",
        "buggy_code": ".setRulesUpdatedAt(now);",
        "fixed_code": ".setRulesUpdatedAtAsDate(now);",
        "patch": "@@ -78,7 +78,7 @@ private QualityProfileDto doCreate(DbSession dbSession, QProfileName name) {\n       QualityProfileDto dto = QualityProfileDto.createFor(key)\n         .setName(name.getName())\n         .setLanguage(name.getLanguage())\n-        .setRulesUpdatedAt(now);\n+        .setRulesUpdatedAtAsDate(now);\n       if (db.qualityProfileDao().getByKey(dbSession, dto.getKey()) == null) {\n         db.qualityProfileDao().insert(dbSession, dto);\n         return dto;"
    },
    {
        "commit_id": "058273a7be1fd07ad1abff67c777a9ef52eb1498",
        "commit_message": "SONAR-5007 fix db migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/058273a7be1fd07ad1abff67c777a9ef52eb1498",
        "buggy_code": "context.profile().setRulesUpdatedAt(context.getInitDate());",
        "fixed_code": "context.profile().setRulesUpdatedAtAsDate(context.getInitDate());",
        "patch": "@@ -144,7 +144,7 @@ private List<ActiveRuleChange> doActivate(DbSession dbSession, RuleActivation ac\n   }\n \n   private void updateProfileDate(DbSession dbSession, RuleActivatorContext context) {\n-    context.profile().setRulesUpdatedAt(context.getInitDate());\n+    context.profile().setRulesUpdatedAtAsDate(context.getInitDate());\n     db.qualityProfileDao().update(dbSession, context.profile());\n   }\n "
    },
    {
        "commit_id": "985c7517da8aa61375d03e799caac12e72bd82e5",
        "commit_message": "SONAR-5389 Fix some issues with analyzer -> sensor compatibility mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/985c7517da8aa61375d03e799caac12e72bd82e5",
        "buggy_code": "private Rules rules;",
        "fixed_code": "private final Rules rules;",
        "patch": "@@ -50,7 +50,7 @@ public class DefaultAnalyzerContext implements AnalyzerContext {\n   private final FileSystem fs;\n   private final ActiveRules activeRules;\n   private final IssueFilters issueFilters;\n-  private Rules rules;\n+  private final Rules rules;\n \n   public DefaultAnalyzerContext(ProjectDefinition def, AnalyzerMeasureCache measureCache, AnalyzerIssueCache issueCache,\n     Settings settings, FileSystem fs, ActiveRules activeRules, IssueFilters issueFilters, Rules rules) {"
    },
    {
        "commit_id": "e6ce2d564b5dd2d5396a8550dfa009e3a5c857a1",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e6ce2d564b5dd2d5396a8550dfa009e3a5c857a1",
        "buggy_code": "Snapshot saveResource(Project project, Resource resource, Resource parent);",
        "fixed_code": "Snapshot saveResource(Project project, Resource resource, @Nullable Resource parent);",
        "patch": "@@ -35,7 +35,7 @@ public interface PersistenceManager {\n \n   void saveProject(Project project, @Nullable Project parent);\n \n-  Snapshot saveResource(Project project, Resource resource, Resource parent);\n+  Snapshot saveResource(Project project, Resource resource, @Nullable Resource parent);\n \n   void setSource(Resource file, String source);\n "
    },
    {
        "commit_id": "4cb80adde707a46e28e2e0d414a19a3790767424",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cb80adde707a46e28e2e0d414a19a3790767424",
        "buggy_code": "AnalyzisPublisher.class);",
        "fixed_code": "AnalysisPublisher.class);",
        "patch": "@@ -123,7 +123,7 @@ private void addCoreComponents() {\n       EnforceIssuesFilter.class,\n       IgnoreIssuesFilter.class,\n \n-      AnalyzisPublisher.class);\n+      AnalysisPublisher.class);\n   }\n \n   private void addExtensions() {"
    },
    {
        "commit_id": "4cb80adde707a46e28e2e0d414a19a3790767424",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4cb80adde707a46e28e2e0d414a19a3790767424",
        "buggy_code": "public void prepare() throws Throwable {",
        "fixed_code": "public void prepare() {",
        "patch": "@@ -55,7 +55,7 @@ public class XooMediumTest {\n     .build();\n \n   @Before\n-  public void prepare() throws Throwable {\n+  public void prepare() {\n     tester.start();\n   }\n "
    },
    {
        "commit_id": "2f49e919ce9455fdb10613334ed23ae0ae076e2e",
        "commit_message": "Fix UT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f49e919ce9455fdb10613334ed23ae0ae076e2e",
        "buggy_code": "assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\").setLast(true))).isTrue();",
        "fixed_code": "assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\").setLast(true))).isFalse();",
        "patch": "@@ -78,7 +78,7 @@ public void shouldKeepNonDeletableSnapshots() {\n   @Test\n   public void test_isDeletable() {\n     assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\"))).isTrue();\n-    assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\").setLast(true))).isTrue();\n+    assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\").setLast(true))).isFalse();\n     assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L, \"2011-05-01\").setHasEvents(true))).isFalse();\n   }\n "
    },
    {
        "commit_id": "d0569c1ebf7aa7b2aa4a42cef4f0664a2a4bb534",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0569c1ebf7aa7b2aa4a42cef4f0664a2a4bb534",
        "buggy_code": "return project.getModules().size() > 0;",
        "fixed_code": "return !project.getModules().isEmpty();",
        "patch": "@@ -40,7 +40,7 @@ public Metric provides() {\n   }\n \n   public boolean shouldExecuteOnProject(Project project) {\n-    return project.getModules().size() > 0;\n+    return !project.getModules().isEmpty();\n   }\n \n   @Override"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -36,7 +36,7 @@\n import java.util.Arrays;\n import java.util.Date;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Matchers.anyList;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.junit.internal.matchers.IsCollectionContaining.hasItem;",
        "fixed_code": "import static org.hamcrest.Matchers.hasItem;",
        "patch": "@@ -29,7 +29,7 @@\n \n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n-import static org.junit.internal.matchers.IsCollectionContaining.hasItem;\n+import static org.hamcrest.Matchers.hasItem;\n \n public class DeleteAllFilterTest {\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.number.OrderingComparisons.greaterThan;",
        "fixed_code": "import static org.hamcrest.Matchers.greaterThan;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.plugins.design;\n \n-import static org.hamcrest.number.OrderingComparisons.greaterThan;\n+import static org.hamcrest.Matchers.greaterThan;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.Map;\n import java.util.Properties;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class ConfigurationUtilsTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -22,7 +22,7 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class EncryptionTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.junit.internal.matchers.IsCollectionContaining.hasItem;",
        "fixed_code": "import static org.hamcrest.Matchers.hasItem;",
        "patch": "@@ -33,7 +33,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n-import static org.junit.internal.matchers.IsCollectionContaining.hasItem;\n+import static org.hamcrest.Matchers.hasItem;\n import static org.mockito.Mockito.mock;\n \n public class BatchExtensionDictionnaryTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -27,7 +27,7 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class PastSnapshotFinderByDateTest extends AbstractDbUnitTestCase {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -31,7 +31,7 @@\n import java.util.Date;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.database.model.Snapshot;\n import org.sonar.jpa.test.AbstractDbUnitTestCase;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.core.IsNull.nullValue;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -36,7 +36,7 @@\n import java.text.SimpleDateFormat;\n \n import static org.fest.assertions.Assertions.assertThat;\n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.notNullValue;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -28,7 +28,7 @@\n \n import java.io.File;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyList;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.Locale;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.*;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.junit.internal.matchers.IsCollectionContaining.hasItem;",
        "fixed_code": "import static org.hamcrest.Matchers.hasItem;",
        "patch": "@@ -33,7 +33,7 @@\n \n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n-import static org.junit.internal.matchers.IsCollectionContaining.hasItem;\n+import static org.hamcrest.Matchers.hasItem;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.number.OrderingComparisons.greaterThan;",
        "fixed_code": "import static org.hamcrest.Matchers.greaterThan;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n \n import static org.hamcrest.core.Is.is;\n-import static org.hamcrest.number.OrderingComparisons.greaterThan;\n+import static org.hamcrest.Matchers.greaterThan;\n import static org.junit.Assert.assertThat;\n \n public class PurgeableSnapshotDtoTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.number.OrderingComparisons.greaterThan;",
        "fixed_code": "import static org.hamcrest.Matchers.greaterThan;",
        "patch": "@@ -29,7 +29,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n \n-import static org.hamcrest.number.OrderingComparisons.greaterThan;\n+import static org.hamcrest.Matchers.greaterThan;\n import static org.junit.Assert.assertThat;\n \n public class ResourceIndexerDaoTest extends AbstractDaoTestCase {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -25,7 +25,7 @@\n import org.sonar.core.rule.CacheRuleFinder;\n import org.sonar.jpa.test.AbstractDbUnitTestCase;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.hamcrest.core.IsNull.notNullValue;\n import static org.junit.Assert.assertThat;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import org.junit.internal.matchers.IsCollectionContaining;",
        "fixed_code": "import org.hamcrest.core.IsCollectionContaining;",
        "patch": "@@ -20,9 +20,9 @@\n package org.sonar.jpa.session;\n \n import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsCollectionContaining;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.internal.matchers.IsCollectionContaining;\n import org.sonar.api.database.model.MeasureModel;\n import org.sonar.api.database.model.ResourceModel;\n import org.sonar.api.database.model.Snapshot;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class MethodTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -35,7 +35,7 @@\n import java.io.File;\n import java.net.URISyntaxException;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyDouble;\n import static org.mockito.Matchers.argThat;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.*;",
        "fixed_code": "import static org.hamcrest.Matchers.*;",
        "patch": "@@ -26,7 +26,7 @@\n import java.util.Collections;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.assertThat;\n \n /**"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.duplications.block.Block;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class BlocksGroupTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -29,7 +29,7 @@\n import java.io.IOException;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class TokenizerBridgeTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -35,7 +35,7 @@\n import java.util.Collection;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n /**"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.duplications.statement;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.resources.Java;\n import org.sonar.api.resources.Language;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class JavaClassTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class JavaMethodTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.java.api;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n import org.apache.commons.configuration.BaseConfiguration;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.batch.bootstrap;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -27,7 +27,7 @@\n \n import java.nio.charset.Charset;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class EncryptionTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.measures;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -25,7 +25,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.measures;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.measures;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.measures;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.collection.IsCollectionContaining.hasItems;",
        "fixed_code": "import static org.hamcrest.Matchers.hasItems;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.collection.IsCollectionContaining.hasItems;\n+import static org.hamcrest.Matchers.hasItems;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n import static org.sonar.api.resources.ResourceTypesTest.qualifiers;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -29,7 +29,7 @@\n import java.util.TreeMap;\n \n import static junit.framework.Assert.assertEquals;\n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n public class DeprecatedKeyValueFormatTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -30,7 +30,7 @@\n import java.util.Locale;\n import java.util.MissingResourceException;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import static org.junit.matchers.JUnitMatchers.hasItems;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.utils;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.utils;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.api.web;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import org.junit.Test;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.is;",
        "fixed_code": "import static org.hamcrest.Matchers.is;",
        "patch": "@@ -32,7 +32,7 @@\n import java.net.URLClassLoader;\n import java.util.Collections;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.text.StringStartsWith.startsWith;",
        "fixed_code": "import static org.hamcrest.Matchers.startsWith;",
        "patch": "@@ -28,7 +28,7 @@\n import java.net.UnknownHostException;\n \n import static org.fest.assertions.Assertions.assertThat;\n-import static org.hamcrest.text.StringStartsWith.startsWith;\n+import static org.hamcrest.Matchers.startsWith;\n import static org.junit.Assert.assertThat;\n \n public class ServerIdGeneratorTest {"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.Collection;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.Collection;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;"
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -23,7 +23,7 @@\n import org.junit.Test;\n import org.sonar.wsclient.services.Profile;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.Collection;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.wsclient.services.ResourceSearchResult;\n import org.sonar.wsclient.services.Server;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.wsclient.services.ServerSetup;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.wsclient.services.Server;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "commit_message": "Upgrade hamcrest and fix conflicts with JUnit and Mockito",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f779df51e9da5b07ad6f837fe1c98eab9fbf439",
        "buggy_code": "import static org.hamcrest.CoreMatchers.nullValue;",
        "fixed_code": "import static org.hamcrest.Matchers.nullValue;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.wsclient.services.Source;\n \n-import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.Matchers.nullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n "
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return ImmutableList.of(",
        "fixed_code": "return ImmutableList.<Metric>of(",
        "patch": "@@ -85,7 +85,7 @@ public boolean shouldExecuteOnProject(Project project) {\n \n   @DependedUpon\n   public List<Metric> generatesIssuesMetrics() {\n-    return ImmutableList.of(\n+    return ImmutableList.<Metric>of(\n       CoreMetrics.VIOLATIONS,\n       CoreMetrics.BLOCKER_VIOLATIONS,\n       CoreMetrics.CRITICAL_VIOLATIONS,"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return ImmutableList.of(CoreMetrics.LINES_TO_COVER, CoreMetrics.UNCOVERED_LINES, CoreMetrics.NEW_LINES_TO_COVER,",
        "fixed_code": "return ImmutableList.<Metric>of(CoreMetrics.LINES_TO_COVER, CoreMetrics.UNCOVERED_LINES, CoreMetrics.NEW_LINES_TO_COVER,",
        "patch": "@@ -31,7 +31,7 @@\n public final class CoverageDecorator extends AbstractCoverageDecorator {\n   @DependsUpon\n   public Collection<Metric> usedMetrics() {\n-    return ImmutableList.of(CoreMetrics.LINES_TO_COVER, CoreMetrics.UNCOVERED_LINES, CoreMetrics.NEW_LINES_TO_COVER,\n+    return ImmutableList.<Metric>of(CoreMetrics.LINES_TO_COVER, CoreMetrics.UNCOVERED_LINES, CoreMetrics.NEW_LINES_TO_COVER,\n       CoreMetrics.NEW_UNCOVERED_LINES, CoreMetrics.CONDITIONS_TO_COVER, CoreMetrics.UNCOVERED_CONDITIONS,\n       CoreMetrics.NEW_CONDITIONS_TO_COVER, CoreMetrics.NEW_UNCOVERED_CONDITIONS);\n   }"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return Arrays.asList(CoreMetrics.TEST_EXECUTION_TIME, CoreMetrics.TESTS, CoreMetrics.TEST_ERRORS, CoreMetrics.TEST_FAILURES, CoreMetrics.TEST_SUCCESS_DENSITY);",
        "fixed_code": "return Arrays.<Metric>asList(CoreMetrics.TEST_EXECUTION_TIME, CoreMetrics.TESTS, CoreMetrics.TEST_ERRORS, CoreMetrics.TEST_FAILURES, CoreMetrics.TEST_SUCCESS_DENSITY);",
        "patch": "@@ -38,7 +38,7 @@ public class UnitTestDecorator implements Decorator {\n \n   @DependedUpon\n   public List<Metric> generatesMetrics() {\n-    return Arrays.asList(CoreMetrics.TEST_EXECUTION_TIME, CoreMetrics.TESTS, CoreMetrics.TEST_ERRORS, CoreMetrics.TEST_FAILURES, CoreMetrics.TEST_SUCCESS_DENSITY);\n+    return Arrays.<Metric>asList(CoreMetrics.TEST_EXECUTION_TIME, CoreMetrics.TESTS, CoreMetrics.TEST_ERRORS, CoreMetrics.TEST_FAILURES, CoreMetrics.TEST_SUCCESS_DENSITY);\n   }\n \n   public boolean shouldExecuteOnProject(Project project) {"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return Arrays.asList(CoreMetrics.DUPLICATED_BLOCKS, CoreMetrics.DUPLICATED_FILES, CoreMetrics.DUPLICATED_LINES);",
        "fixed_code": "return Arrays.<Metric>asList(CoreMetrics.DUPLICATED_BLOCKS, CoreMetrics.DUPLICATED_FILES, CoreMetrics.DUPLICATED_LINES);",
        "patch": "@@ -35,7 +35,7 @@ public class SumDuplicationsDecorator extends AbstractSumChildrenDecorator {\n   @Override\n   @DependedUpon\n   public List<Metric> generatesMetrics() {\n-    return Arrays.asList(CoreMetrics.DUPLICATED_BLOCKS, CoreMetrics.DUPLICATED_FILES, CoreMetrics.DUPLICATED_LINES);\n+    return Arrays.<Metric>asList(CoreMetrics.DUPLICATED_BLOCKS, CoreMetrics.DUPLICATED_FILES, CoreMetrics.DUPLICATED_LINES);\n   }\n \n   @Override"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return Arrays.asList(CoreMetrics.TECHNICAL_DEBT);",
        "fixed_code": "return Arrays.<Metric>asList(CoreMetrics.TECHNICAL_DEBT);",
        "patch": "@@ -85,7 +85,7 @@ public boolean shouldExecuteOnProject(Project project) {\n \n   @DependedUpon\n   public List<Metric> generatesMetrics() {\n-    return Arrays.asList(CoreMetrics.TECHNICAL_DEBT);\n+    return Arrays.<Metric>asList(CoreMetrics.TECHNICAL_DEBT);\n   }\n \n   public void decorate(Resource resource, DecoratorContext context) {"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return Arrays.asList(CoreMetrics.FILES, CoreMetrics.COMPLEXITY);",
        "fixed_code": "return Arrays.<Metric>asList(CoreMetrics.FILES, CoreMetrics.COMPLEXITY);",
        "patch": "@@ -58,7 +58,7 @@ public boolean shouldExecuteOnProject(Project project) {\n    */\n   @DependsUpon\n   public List<Metric> dependsUponFileAndComplexityMetrics() {\n-    return Arrays.asList(CoreMetrics.FILES, CoreMetrics.COMPLEXITY);\n+    return Arrays.<Metric>asList(CoreMetrics.FILES, CoreMetrics.COMPLEXITY);\n   }\n \n   /**"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "return Arrays.asList(CoreMetrics.FUNCTIONS, CoreMetrics.COMPLEXITY);",
        "fixed_code": "return Arrays.<Metric>asList(CoreMetrics.FUNCTIONS, CoreMetrics.COMPLEXITY);",
        "patch": "@@ -57,7 +57,7 @@ public boolean shouldExecuteOnProject(Project project) {\n    */\n   @DependsUpon\n   public List<Metric> dependsUponFileAndComplexityMetrics() {\n-    return Arrays.asList(CoreMetrics.FUNCTIONS, CoreMetrics.COMPLEXITY);\n+    return Arrays.<Metric>asList(CoreMetrics.FUNCTIONS, CoreMetrics.COMPLEXITY);\n   }\n \n   /**"
    },
    {
        "commit_id": "bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "commit_message": "SONAR-5389 Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bbf1f60af78c263234c3411b4c0cc29a13c65451",
        "buggy_code": "LEVEL(String.class),",
        "fixed_code": "LEVEL(Metric.Level.class),",
        "patch": "@@ -69,7 +69,7 @@ public enum ValueType {\n     STRING(String.class),\n     MILLISEC(Integer.class),\n     DATA(String.class),\n-    LEVEL(String.class),\n+    LEVEL(Metric.Level.class),\n     DISTRIB(String.class),\n     RATING(String.class),\n     WORK_DUR(Long.class);"
    },
    {
        "commit_id": "8dee812b1bb3350dfc125a403126f12fd940f6bd",
        "commit_message": "Fix display of debt in /api/issues/show",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8dee812b1bb3350dfc125a403126f12fd940f6bd",
        "buggy_code": ".prop(\"debt\", debt != null ? durations.format(UserSession.get().locale(), debt, Durations.DurationFormat.SHORT) : null)",
        "fixed_code": ".prop(\"debt\", debt != null ? durations.encode(debt) : null)",
        "patch": "@@ -127,7 +127,7 @@ private void writeIssue(IssueQueryResult result, DefaultIssue issue, JsonWriter\n       .prop(\"author\", issue.authorLogin())\n       .prop(\"actionPlan\", actionPlanKey)\n       .prop(\"actionPlanName\", actionPlan != null ? actionPlan.name() : null)\n-      .prop(\"debt\", debt != null ? durations.format(UserSession.get().locale(), debt, Durations.DurationFormat.SHORT) : null)\n+      .prop(\"debt\", debt != null ? durations.encode(debt) : null)\n       .prop(\"creationDate\", DateUtils.formatDateTime(issue.creationDate()))\n       .prop(\"fCreationDate\", formatDate(issue.creationDate()))\n       .prop(\"updateDate\", updateDate != null ? DateUtils.formatDateTime(updateDate) : null)"
    },
    {
        "commit_id": "8dee812b1bb3350dfc125a403126f12fd940f6bd",
        "commit_message": "Fix display of debt in /api/issues/show",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8dee812b1bb3350dfc125a403126f12fd940f6bd",
        "buggy_code": "when(durations.format(any(Locale.class), eq(debt), eq(Durations.DurationFormat.SHORT))).thenReturn(\"2 hours 1 minutes\");",
        "fixed_code": "when(durations.encode(debt)).thenReturn(\"2h1min\");",
        "patch": "@@ -310,7 +310,7 @@ public void show_issue_with_technical_debt() throws Exception {\n     Issue issue = createStandardIssue().setDebt(debt);\n     issues.add(issue);\n \n-    when(durations.format(any(Locale.class), eq(debt), eq(Durations.DurationFormat.SHORT))).thenReturn(\"2 hours 1 minutes\");\n+    when(durations.encode(debt)).thenReturn(\"2h1min\");\n \n     MockUserSession.set();\n     WsTester.TestRequest request = tester.newGetRequest(\"api/issues\", \"show\").setParam(\"key\", issue.key());"
    },
    {
        "commit_id": "e09f42884478ab1a1da0d79bde3c466200101e3b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e09f42884478ab1a1da0d79bde3c466200101e3b",
        "buggy_code": "if(latch != null){",
        "fixed_code": "if (latch != null){",
        "patch": "@@ -38,7 +38,7 @@ public void setLatch(CountDownLatch latch){\n   @Override\n   public void run(){\n     this.doExecute();\n-    if(latch != null){\n+    if (latch != null){\n       latch.countDown();\n     }\n   }"
    },
    {
        "commit_id": "d47cc1a7f9a7eebf0dbb10c627efba0c50457502",
        "commit_message": "SONAR-5007 fix renaming of table LOGS to ACTIVITIES on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d47cc1a7f9a7eebf0dbb10c627efba0c50457502",
        "buggy_code": "public static final int LAST_VERSION = 548;",
        "fixed_code": "public static final int LAST_VERSION = 547;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 548;\n+  public static final int LAST_VERSION = 547;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "5603bc48ca5209c93542bc51229b774c066fb346",
        "commit_message": "SONAR-5007 keep error messages when bulk activating rules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5603bc48ca5209c93542bc51229b774c066fb346",
        "buggy_code": "Integer getExecutionTime();",
        "fixed_code": "int getExecutionTime();",
        "patch": "@@ -28,6 +28,6 @@ public interface Loggable {\n \n   Map<String, String> getDetails();\n \n-  Integer getExecutionTime();\n+  int getExecutionTime();\n \n }"
    },
    {
        "commit_id": "5ec2f0ceea08762ba87dc83443cbe0a9f3bbf5b7",
        "commit_message": "SONAR-5007 Fix bad merge of 65920936508883a128dab1b77f9a49332bb5d363\n\nRevert param \"activation_severity\" on bulk activation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ec2f0ceea08762ba87dc83443cbe0a9f3bbf5b7",
        "buggy_code": "public static final String SEVERITY = \"severity\";",
        "fixed_code": "public static final String SEVERITY = \"activation_severity\";",
        "patch": "@@ -35,7 +35,7 @@\n public class BulkRuleActivationActions implements ServerComponent {\n \n   public static final String PROFILE_KEY = \"profile_key\";\n-  public static final String SEVERITY = \"severity\";\n+  public static final String SEVERITY = \"activation_severity\";\n \n   public static final String BULK_ACTIVATE_ACTION = \"activate_rules\";\n   public static final String BULK_DEACTIVATE_ACTION = \"deactivate_rules\";"
    },
    {
        "commit_id": "6d591e486d0a1fc196833fe4df44737d33d27088",
        "commit_message": "SONAR-5136 Fix default value of sonar.web.context so that it never ends with /",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d591e486d0a1fc196833fe4df44737d33d27088",
        "buggy_code": "return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"rules/show/$1:$2?modal=true&layout=false'>$2</a>\";",
        "fixed_code": "return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"/rules/show/$1:$2?modal=true&layout=false'>$2</a>\";",
        "patch": "@@ -36,6 +36,6 @@ public String getRegex() {\n   }\n \n   public String getReplacement() {\n-    return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"rules/show/$1:$2?modal=true&layout=false'>$2</a>\";\n+    return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"/rules/show/$1:$2?modal=true&layout=false'>$2</a>\";\n   }\n }"
    },
    {
        "commit_id": "dd3adbe6b335f80afa87578275cc5ba7b18d3c4b",
        "commit_message": "SONAR-5136 Fix rule macro interpretation + config in dev mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd3adbe6b335f80afa87578275cc5ba7b18d3c4b",
        "buggy_code": "return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"/rules/show/$1:$2?modal=true&layout=false'>$2</a>\";",
        "fixed_code": "return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"rules/show/$1:$2?modal=true&layout=false'>$2</a>\";",
        "patch": "@@ -36,6 +36,6 @@ public String getRegex() {\n   }\n \n   public String getReplacement() {\n-    return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"/rules/show/$1:$2?modal=true&layout=false'>$2</a>\";\n+    return \"<a class='open-modal rule-modal' modal-width='800' href='\" + contextPath + \"rules/show/$1:$2?modal=true&layout=false'>$2</a>\";\n   }\n }"
    },
    {
        "commit_id": "caf24e20db288a44f0e6000d249d64fff8e5c68a",
        "commit_message": "SONAR-5007 fix SQALE console when no search results",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/caf24e20db288a44f0e6000d249d64fff8e5c68a",
        "buggy_code": "return new PagedResult<org.sonar.server.rule.Rule>(rules, PagingResult.create(rules.size(), 1, rules.size()));",
        "fixed_code": "return new PagedResult<org.sonar.server.rule.Rule>(rules, PagingResult.create(Integer.MAX_VALUE, 1, rules.size()));",
        "patch": "@@ -97,7 +97,7 @@ public PagedResult<org.sonar.server.rule.Rule> find(Map<String, Object> params)\n         offset += QueryOptions.MAX_LIMIT;\n       }\n     }\n-    return new PagedResult<org.sonar.server.rule.Rule>(rules, PagingResult.create(rules.size(), 1, rules.size()));\n+    return new PagedResult<org.sonar.server.rule.Rule>(rules, PagingResult.create(Integer.MAX_VALUE, 1, rules.size()));\n   }\n \n   // sqale"
    },
    {
        "commit_id": "cb21dae44d90ad27c81af7650f97ce3bdbc8e9fc",
        "commit_message": "Fix DefaultDatabase and ServerImpl for logging",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cb21dae44d90ad27c81af7650f97ce3bdbc8e9fc",
        "buggy_code": "return \"Database[\" + properties.getProperty(SONAR_JDBC_URL) + \"]\";",
        "fixed_code": "return \"Database[\" + (properties != null ? properties.getProperty(SONAR_JDBC_URL) : \"?\")+ \"]\";",
        "patch": "@@ -221,6 +221,6 @@ private static void completeDefaultProperty(Properties props, String key, String\n \n   @Override\n   public String toString() {\n-    return \"Database[\" + properties.getProperty(SONAR_JDBC_URL) + \"]\";\n+    return \"Database[\" + (properties != null ? properties.getProperty(SONAR_JDBC_URL) : \"?\")+ \"]\";\n   }\n }"
    },
    {
        "commit_id": "40810539a4b96fee13f141ce5efbc1ad99c7cc92",
        "commit_message": "Fix potential NPE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40810539a4b96fee13f141ce5efbc1ad99c7cc92",
        "buggy_code": "this(metric, rule.ruleKey(), rulePriority, ruleCategory);",
        "fixed_code": "this(metric, rule != null ? rule.ruleKey() : null, rulePriority, ruleCategory);",
        "patch": "@@ -42,7 +42,7 @@ public class RuleMeasure extends Measure {\n    */\n   @Deprecated\n   public RuleMeasure(Metric metric, @Nullable Rule rule, @Nullable RulePriority rulePriority, @Nullable Integer ruleCategory) {\n-    this(metric, rule.ruleKey(), rulePriority, ruleCategory);\n+    this(metric, rule != null ? rule.ruleKey() : null, rulePriority, ruleCategory);\n   }\n \n   public RuleMeasure(Metric metric, @Nullable RuleKey ruleKey, @Nullable RulePriority rulePriority, @Nullable Integer ruleCategory) {"
    },
    {
        "commit_id": "7e54c2b6ab7e387d7d7b5f28483d106f4471ec87",
        "commit_message": "fix quality flaw (missing header)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e54c2b6ab7e387d7d7b5f28483d106f4471ec87",
        "buggy_code": "protected LogIndex(LogNormalizer normalizer, WorkQueue workQueue, ESNode node) {",
        "fixed_code": "public LogIndex(LogNormalizer normalizer, WorkQueue workQueue, ESNode node) {",
        "patch": "@@ -39,7 +39,7 @@\n  */\n public class LogIndex extends BaseIndex<Log, LogDto, LogKey>{\n \n-  protected LogIndex(LogNormalizer normalizer, WorkQueue workQueue, ESNode node) {\n+  public LogIndex(LogNormalizer normalizer, WorkQueue workQueue, ESNode node) {\n     super(IndexDefinition.LOG, normalizer, workQueue, node);\n   }\n "
    },
    {
        "commit_id": "9d68b7b15265b78de61c5949d917c8d9dcb53bb5",
        "commit_message": "Fix unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9d68b7b15265b78de61c5949d917c8d9dcb53bb5",
        "buggy_code": "WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"plan\").setParam(\"key\", TEST_PLAN_KEY).setParam(\"test\", \"my_test\");",
        "fixed_code": "WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"covered_files\").setParam(\"key\", TEST_PLAN_KEY).setParam(\"test\", \"my_test\");",
        "patch": "@@ -66,7 +66,7 @@ public void plan() throws Exception {\n     MutableTestCase testCase2 = testCase(\"org.foo.File.java\", \"src/main/java/org/foo/File.java\", 3);\n     when(testPlan.testCasesByName(\"my_test\")).thenReturn(newArrayList(testCase1, testCase2));\n \n-    WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"plan\").setParam(\"key\", TEST_PLAN_KEY).setParam(\"test\", \"my_test\");\n+    WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"covered_files\").setParam(\"key\", TEST_PLAN_KEY).setParam(\"test\", \"my_test\");\n \n     request.execute().assertJson(\"{\\n\" +\n       \"  \\\"files\\\": [\\n\" +"
    },
    {
        "commit_id": "9d68b7b15265b78de61c5949d917c8d9dcb53bb5",
        "commit_message": "Fix unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9d68b7b15265b78de61c5949d917c8d9dcb53bb5",
        "buggy_code": "WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"testable\").setParam(\"key\", FILE_KEY).setParam(\"line\", \"10\");",
        "fixed_code": "WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"test_cases\").setParam(\"key\", FILE_KEY).setParam(\"line\", \"10\");",
        "patch": "@@ -63,7 +63,7 @@ public void testable() throws Exception {\n     TestCase testCase2 = testCase(\"test2\", TestCase.Status.ERROR, 97L, \"org.foo.FileTest.java\", \"src/test/java/org/foo/FileTest.java\");\n     when(testable.testCasesOfLine(10)).thenReturn(newArrayList(testCase1, testCase2));\n \n-    WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"testable\").setParam(\"key\", FILE_KEY).setParam(\"line\", \"10\");\n+    WsTester.TestRequest request = tester.newGetRequest(\"api/tests\", \"test_cases\").setParam(\"key\", FILE_KEY).setParam(\"line\", \"10\");\n \n     request.execute().assertJson(\"{\\n\" +\n       \"  \\\"tests\\\": [\\n\" +"
    },
    {
        "commit_id": "478e983d478747faab5fe59fbe566c3e16bd71fc",
        "commit_message": "SONAR-5244 - fix count of actions in WS Test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/478e983d478747faab5fe59fbe566c3e16bd71fc",
        "buggy_code": "assertThat(controller.actions()).hasSize(5);",
        "fixed_code": "assertThat(controller.actions()).hasSize(6);",
        "patch": "@@ -52,7 +52,7 @@ public void define_controller() throws Exception {\n     assertThat(controller).isNotNull();\n     assertThat(controller.path()).isEqualTo(QProfilesWs.API_ENDPOINT);\n     assertThat(controller.description()).isNotEmpty();\n-    assertThat(controller.actions()).hasSize(5);\n+    assertThat(controller.actions()).hasSize(6);\n   }\n \n   @Test"
    },
    {
        "commit_id": "c71f6fdec8beb6bb494e9533e4c2ba053adc6d3f",
        "commit_message": "fix quality flaw (method naming)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c71f6fdec8beb6bb494e9533e4c2ba053adc6d3f",
        "buggy_code": "List<ActiveRuleParamDto> paramDtos = db.activeRuleDao().findParamsByActiveRule(dbSession, activeRuleDto);",
        "fixed_code": "List<ActiveRuleParamDto> paramDtos = db.activeRuleDao().findParamsByActiveRuleKey(dbSession, activeRuleDto.getKey());",
        "patch": "@@ -518,7 +518,7 @@ private void verifyOneActiveRule(QualityProfileKey profileKey, String expectedSe\n     assertThat(activeRuleDto.getInheritance()).isEqualTo(expectedInheritance);\n \n     // verify parameters in db\n-    List<ActiveRuleParamDto> paramDtos = db.activeRuleDao().findParamsByActiveRule(dbSession, activeRuleDto);\n+    List<ActiveRuleParamDto> paramDtos = db.activeRuleDao().findParamsByActiveRuleKey(dbSession, activeRuleDto.getKey());\n     assertThat(paramDtos).hasSize(expectedParams.size());\n     for (Map.Entry<String, String> entry : expectedParams.entrySet()) {\n       ActiveRuleParamDto paramDto = db.activeRuleDao().getParamByKeyAndName(activeRuleDto.getKey(), entry.getKey(), dbSession);"
    },
    {
        "commit_id": "888b6440b19e13f707e96c80638d409c31de86e9",
        "commit_message": "SONAR-5007 fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/888b6440b19e13f707e96c80638d409c31de86e9",
        "buggy_code": "private static Set<IndexField> ALL_FIELDS = new HashSet<IndexField>();",
        "fixed_code": "private static final Set<IndexField> ALL_FIELDS = new HashSet<IndexField>();",
        "patch": "@@ -31,7 +31,7 @@\n  */\n public class Indexable {\n \n-  private static Set<IndexField> ALL_FIELDS = new HashSet<IndexField>();\n+  private static final Set<IndexField> ALL_FIELDS = new HashSet<IndexField>();\n \n   public static IndexField add(IndexField.Type type, String field){\n     IndexField indexField = new IndexField(type, field);"
    },
    {
        "commit_id": "4190ab5618ece9ea2b51793ac7fc4db6097a83ab",
        "commit_message": "fix quality flaw (NPE check)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4190ab5618ece9ea2b51793ac7fc4db6097a83ab",
        "buggy_code": "if(!sf.sortable()){",
        "fixed_code": "if(sf != null && !sf.sortable()){",
        "patch": "@@ -187,7 +187,7 @@ public IndexField getSortField() {\n   }\n \n   public RuleQuery setSortField(@Nullable IndexField sf) {\n-    if(!sf.sortable()){\n+    if(sf != null && !sf.sortable()){\n       throw new IllegalStateException(\"Field '\"+sf.field()+\"' is not sortable!\");\n     }\n     this.sortField = sf;"
    },
    {
        "commit_id": "b03f8f36be6e6d6faae65c58132c197d9598ade0",
        "commit_message": "fix quality flaw (exception test)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b03f8f36be6e6d6faae65c58132c197d9598ade0",
        "buggy_code": "@Test(expected = IllegalStateException.class)",
        "fixed_code": "@Test",
        "patch": "@@ -421,7 +421,7 @@ public void sort_by_name() {\n     assertThat(Iterables.getLast(results.getHits(), null).key().rule()).isEqualTo(\"S002\");\n   }\n \n-  @Test(expected = IllegalStateException.class)\n+  @Test\n   public void fail_sort_by_language() throws InterruptedException {\n \n     try {"
    },
    {
        "commit_id": "e0869d2808824bc3628fcc81c2776a875554e9b1",
        "commit_message": "fix quality flaw (todo message)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e0869d2808824bc3628fcc81c2776a875554e9b1",
        "buggy_code": "@Ignore //TODO generate corrupted Index",
        "fixed_code": "@Ignore //TODO should use the Mng Index",
        "patch": "@@ -163,7 +163,7 @@ public void should_restore_status_on_startup() throws Exception {\n   }\n \n   @Test(expected = IllegalStateException.class)\n-  @Ignore //TODO generate corrupted Index\n+  @Ignore //TODO should use the Mng Index\n   public void should_fail_on_corrupt_index() throws Exception {\n     File zip = new File(Resources.getResource(getClass(), \"ESNodeTest/data-es-corrupt.zip\").toURI());\n     ZipUtils.unzip(zip, dataDir);"
    },
    {
        "commit_id": "87539bd0bcce6662119afac6361617100b40c44e",
        "commit_message": "SONAR-5341 Fix display of debt",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/87539bd0bcce6662119afac6361617100b40c44e",
        "buggy_code": ".prop(\"debt\", debt != null ? durations.format(UserSession.get().locale(), debt, Durations.DurationFormat.SHORT) : null)",
        "fixed_code": ".prop(\"debt\", debt != null ? durations.encode(debt) : null)",
        "patch": "@@ -211,7 +211,7 @@ private void writeIssues(IssueQueryResult result, @Nullable List<String> extraFi\n         .prop(\"severity\", issue.severity())\n         .prop(\"message\", issue.message())\n         .prop(\"line\", issue.line())\n-        .prop(\"debt\", debt != null ? durations.format(UserSession.get().locale(), debt, Durations.DurationFormat.SHORT) : null)\n+        .prop(\"debt\", debt != null ? durations.encode(debt) : null)\n         .prop(\"reporter\", issue.reporter())\n         .prop(\"assignee\", issue.assignee())\n         .prop(\"author\", issue.authorLogin())"
    },
    {
        "commit_id": "87539bd0bcce6662119afac6361617100b40c44e",
        "commit_message": "SONAR-5341 Fix display of debt",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/87539bd0bcce6662119afac6361617100b40c44e",
        "buggy_code": "when(durations.format(any(Locale.class), eq(debt), eq(Durations.DurationFormat.SHORT))).thenReturn(\"2 hours 1 minutes\");",
        "fixed_code": "when(durations.encode(debt)).thenReturn(\"2h1min\");",
        "patch": "@@ -154,7 +154,7 @@ public void issues_with_debt() throws Exception {\n     Issue issue = createStandardIssue().setDebt(debt);\n     issues.add(issue);\n \n-    when(durations.format(any(Locale.class), eq(debt), eq(Durations.DurationFormat.SHORT))).thenReturn(\"2 hours 1 minutes\");\n+    when(durations.encode(debt)).thenReturn(\"2h1min\");\n \n     WsTester.TestRequest request = tester.newGetRequest(\"api/issues\", \"search\");\n     request.execute().assertJson(getClass(), \"issues_with_debt.json\");"
    },
    {
        "commit_id": "0f6a4b2d86aab52e46fc99e29de2c403ac160d37",
        "commit_message": "fix quality flaw (method rename)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f6a4b2d86aab52e46fc99e29de2c403ac160d37",
        "buggy_code": "public void sortable_analyzer() throws Exception {",
        "fixed_code": "public void check_analyzer() throws Exception {",
        "patch": "@@ -114,7 +114,7 @@ public void should_use_default_settings_for_index() throws Exception {\n   }\n \n   @Test\n-  public void sortable_analyzer() throws Exception {\n+  public void check_analyzer() throws Exception {\n     ESNode node = new ESNode(fs, new Settings());\n     node.start();\n "
    },
    {
        "commit_id": "c649f88d76006b217367c39f2f19cc10ceae923d",
        "commit_message": "SONAR-5007 fix db migration when registering q profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c649f88d76006b217367c39f2f19cc10ceae923d",
        "buggy_code": "throw new RuntimeException(\"Invalid configuration for index \" + this.getIndexName(), e);",
        "fixed_code": "throw new IllegalStateException(\"Invalid configuration for index \" + this.getIndexName(), e);",
        "patch": "@@ -118,7 +118,7 @@ protected void initializeIndex() {\n           .execute().actionGet();\n       }\n     } catch (Exception e) {\n-      throw new RuntimeException(\"Invalid configuration for index \" + this.getIndexName(), e);\n+      throw new IllegalStateException(\"Invalid configuration for index \" + this.getIndexName(), e);\n     }\n   }\n "
    },
    {
        "commit_id": "736c10722f11c2d23b900110fd6684539a442efb",
        "commit_message": "Try to fix MeasureDataMigration on mssql",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/736c10722f11c2d23b900110fd6684539a442efb",
        "buggy_code": "return \"UPDATE project_measures m SET m.measure_data = (SELECT md.data FROM measure_data md WHERE md.id = ?) WHERE m.id=?\";",
        "fixed_code": "return \"UPDATE project_measures SET measure_data = (SELECT md.data FROM measure_data md WHERE md.id = ?) WHERE id=?\";",
        "patch": "@@ -70,7 +70,7 @@ public Row load(ResultSet rs) throws SQLException {\n \n         @Override\n         public String updateSql() {\n-          return \"UPDATE project_measures m SET m.measure_data = (SELECT md.data FROM measure_data md WHERE md.id = ?) WHERE m.id=?\";\n+          return \"UPDATE project_measures SET measure_data = (SELECT md.data FROM measure_data md WHERE md.id = ?) WHERE id=?\";\n         }\n \n         @Override"
    },
    {
        "commit_id": "8070dafc93d03545686ed19659c25ac902f518e6",
        "commit_message": "Fix query to check that project exists in Gality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8070dafc93d03545686ed19659c25ac902f518e6",
        "buggy_code": "long count(@Param(\"key\") MeasureKey key);",
        "fixed_code": "long countByKey(@Param(\"key\") MeasureKey key);",
        "patch": "@@ -30,6 +30,6 @@ public interface MeasureMapper {\n \n   List<MeasureDto> selectByComponentAndMetrics(@Param(\"componentKey\") String componentKey, @Param(\"metricKeys\") List<String> metricKeys);\n \n-  long count(@Param(\"key\") MeasureKey key);\n+  long countByKey(@Param(\"key\") MeasureKey key);\n \n }"
    },
    {
        "commit_id": "8070dafc93d03545686ed19659c25ac902f518e6",
        "commit_message": "Fix query to check that project exists in Gality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8070dafc93d03545686ed19659c25ac902f518e6",
        "buggy_code": "return measureDao.exists(MeasureKey.of(fileKey, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY), session);",
        "fixed_code": "return measureDao.existsByKey(MeasureKey.of(fileKey, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY), session);",
        "patch": "@@ -83,7 +83,7 @@ public String getScmDateData(String fileKey) {\n   }\n \n   public boolean hasScmData(String fileKey, DbSession session) {\n-    return measureDao.exists(MeasureKey.of(fileKey, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY), session);\n+    return measureDao.existsByKey(MeasureKey.of(fileKey, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY), session);\n   }\n \n   public boolean hasScmData(String fileKey) {"
    },
    {
        "commit_id": "8070dafc93d03545686ed19659c25ac902f518e6",
        "commit_message": "Fix query to check that project exists in Gality Gate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8070dafc93d03545686ed19659c25ac902f518e6",
        "buggy_code": "when(measureDao.exists(any(MeasureKey.class), eq(session))).thenReturn(true);",
        "fixed_code": "when(measureDao.existsByKey(any(MeasureKey.class), eq(session))).thenReturn(true);",
        "patch": "@@ -139,7 +139,7 @@ public void not_get_scm_date_data_if_no_data() throws Exception {\n   public void has_scm_data() throws Exception {\n     MockUserSession.set().addComponentPermission(UserRole.CODEVIEWER, PROJECT_KEY, COMPONENT_KEY);\n \n-    when(measureDao.exists(any(MeasureKey.class), eq(session))).thenReturn(true);\n+    when(measureDao.existsByKey(any(MeasureKey.class), eq(session))).thenReturn(true);\n     assertThat(service.hasScmData(COMPONENT_KEY)).isTrue();\n   }\n }"
    },
    {
        "commit_id": "48232482f4c6a15a709f98c7760e01f897136724",
        "commit_message": "SONAR-5007 better error in api/rules/set_tags when param \"tags\" is missing",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/48232482f4c6a15a709f98c7760e01f897136724",
        "buggy_code": "Set<String> tags = Sets.newHashSet(request.paramAsStrings(\"tags\"));",
        "fixed_code": "Set<String> tags = Sets.newHashSet(request.mandatoryParamAsStrings(\"tags\"));",
        "patch": "@@ -59,7 +59,7 @@ void define(WebService.NewController controller) {\n   @Override\n   public void handle(Request request, Response response) {\n     RuleKey key = RuleKey.parse(request.mandatoryParam(\"key\"));\n-    Set<String> tags = Sets.newHashSet(request.paramAsStrings(\"tags\"));\n+    Set<String> tags = Sets.newHashSet(request.mandatoryParamAsStrings(\"tags\"));\n     service.setTags(key, tags);\n   }\n }"
    },
    {
        "commit_id": "c20a133b4d43489eadf8bdc6647568a6d9f60ef5",
        "commit_message": "Fix SemaphoreDaoTest when db and test timezones are different",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c20a133b4d43489eadf8bdc6647568a6d9f60ef5",
        "buggy_code": "if (dao.acquire(\"my-lock\", 60 * 5).isLocked()) {",
        "fixed_code": "if (dao.acquire(\"my-lock\", 60 * 60 * 24).isLocked()) {",
        "patch": "@@ -280,7 +280,7 @@ public void run() {\n       try {\n         barrier.await();\n         for (int i = 0; i < 100; i++) {\n-          if (dao.acquire(\"my-lock\", 60 * 5).isLocked()) {\n+          if (dao.acquire(\"my-lock\", 60 * 60 * 24).isLocked()) {\n             locks.incrementAndGet();\n           }\n         }"
    },
    {
        "commit_id": "04fd42e534b452ae5939d5fce10767725305695a",
        "commit_message": "SONAR-5304 Fix UT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/04fd42e534b452ae5939d5fce10767725305695a",
        "buggy_code": "assertThat(metrics).hasSize(152);",
        "fixed_code": "assertThat(metrics).hasSize(151);",
        "patch": "@@ -32,7 +32,7 @@ public class CoreMetricsTest {\n   @Test\n   public void read_metrics_from_class_reflection() {\n     List<Metric> metrics = CoreMetrics.getMetrics();\n-    assertThat(metrics).hasSize(152);\n+    assertThat(metrics).hasSize(151);\n     assertThat(metrics).contains(CoreMetrics.NCLOC, CoreMetrics.DIRECTORIES);\n   }\n "
    },
    {
        "commit_id": "f711c4f8189dd7886f289aa5e285a65a1d6e1817",
        "commit_message": "SONAR-5285 Fix wrong name of method to return test cases by lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f711c4f8189dd7886f289aa5e285a65a1d6e1817",
        "buggy_code": "public Map<Integer, Integer> getCoveredLines(String fileKey) {",
        "fixed_code": "public Map<Integer, Integer> getTestCasesByLines(String fileKey) {",
        "patch": "@@ -76,7 +76,7 @@ public String getCoveredConditionsData(String fileKey) {\n    * Warning - does not check permission\n    */\n   @CheckForNull\n-  public Map<Integer, Integer> getCoveredLines(String fileKey) {\n+  public Map<Integer, Integer> getTestCasesByLines(String fileKey) {\n     Testable testable = snapshotPerspectives.as(MutableTestable.class, fileKey);\n     if (testable != null) {\n       return testable.testCasesByLines();"
    },
    {
        "commit_id": "05242f4403fab7cbaa276d601b86d09634a14672",
        "commit_message": "Fix response examples",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05242f4403fab7cbaa276d601b86d09634a14672",
        "buggy_code": ".setResponseExample(Resources.getResource(getClass(), \"show-example-show.json\"))",
        "fixed_code": ".setResponseExample(Resources.getResource(getClass(), \"example-show.json\"))",
        "patch": "@@ -43,7 +43,7 @@ void define(WebService.NewController controller) {\n     WebService.NewAction action = controller.createAction(\"show\")\n       .setDescription(\"Get source code\")\n       .setSince(\"4.4\")\n-      .setResponseExample(Resources.getResource(getClass(), \"show-example-show.json\"))\n+      .setResponseExample(Resources.getResource(getClass(), \"example-show.json\"))\n       .setHandler(this);\n \n     action"
    },
    {
        "commit_id": "0b3a644150a0f3fc33ddc09e6d8ff1e625a9998f",
        "commit_message": "Fix bad commit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0b3a644150a0f3fc33ddc09e6d8ff1e625a9998f",
        "buggy_code": "super(\"size\", \"Size metrics\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");",
        "fixed_code": "super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");",
        "patch": "@@ -22,6 +22,6 @@\n public class SizeWidget extends CoreWidget {\n \n   public SizeWidget() {\n-    super(\"size\", \"Size metrics\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");\n+    super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "98d666aee3703b2555210ba85e4c17095ac7d70a",
        "commit_message": "- Fixed FieldEnum rename error in Medium Test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/98d666aee3703b2555210ba85e4c17095ac7d70a",
        "buggy_code": "assertThat(_activeRuleParamValue.get(RuleNormalizer.RuleParamField.DEFAULT_VALUE.key())).isEqualTo(\"maximum\");",
        "fixed_code": "assertThat(_activeRuleParamValue.get(RuleNormalizer.ActiveRuleParamField.VALUE.key())).isEqualTo(\"maximum\");",
        "patch": "@@ -236,7 +236,7 @@ public void insert_and_index_activeRuleParams() {\n \n     Map<String, String> _activeRuleParamValue = (Map<String, String>) _activeRuleParams.get(maxParam.getName());\n     assertThat(_activeRuleParamValue).isNotNull().hasSize(1);\n-    assertThat(_activeRuleParamValue.get(RuleNormalizer.RuleParamField.DEFAULT_VALUE.key())).isEqualTo(\"maximum\");\n+    assertThat(_activeRuleParamValue.get(RuleNormalizer.ActiveRuleParamField.VALUE.key())).isEqualTo(\"maximum\");\n \n   }\n "
    },
    {
        "commit_id": "5389dd935f2e9a86623508cd67f0e31207b0195f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5389dd935f2e9a86623508cd67f0e31207b0195f",
        "buggy_code": "fieldsToReturn = keep;",
        "fixed_code": "fieldsToReturn = Sets.newHashSet(keep);",
        "patch": "@@ -120,7 +120,7 @@ public QueryOptions addFieldsToReturn(String... c) {\n \n   public QueryOptions filterFieldsToReturn(final Set<String> keep) {\n     if (fieldsToReturn == null) {\n-      fieldsToReturn = keep;\n+      fieldsToReturn = Sets.newHashSet(keep);\n     } else {\n       fieldsToReturn = Sets.filter(fieldsToReturn, new Predicate<String>() {\n         @Override"
    },
    {
        "commit_id": "5389dd935f2e9a86623508cd67f0e31207b0195f",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5389dd935f2e9a86623508cd67f0e31207b0195f",
        "buggy_code": "public class RuleSearchMediumTest {",
        "fixed_code": "public class RuleIndexMediumTest {",
        "patch": "@@ -39,7 +39,7 @@\n \n import static org.fest.assertions.Assertions.assertThat;\n \n-public class RuleSearchMediumTest {\n+public class RuleIndexMediumTest {\n \n   @ClassRule\n   public static ServerTester tester = new ServerTester();"
    },
    {
        "commit_id": "4e6ce48288c10f14af1969cef727bb32d31c5942",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e6ce48288c10f14af1969cef727bb32d31c5942",
        "buggy_code": "public DefaultIssue setProjectKey(String projectKey) {",
        "fixed_code": "public DefaultIssue setProjectKey(@Nullable String projectKey) {",
        "patch": "@@ -141,7 +141,7 @@ public String projectKey() {\n     return projectKey;\n   }\n \n-  public DefaultIssue setProjectKey(String projectKey) {\n+  public DefaultIssue setProjectKey(@Nullable String projectKey) {\n     this.projectKey = projectKey;\n     return this;\n   }"
    },
    {
        "commit_id": "4e6ce48288c10f14af1969cef727bb32d31c5942",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e6ce48288c10f14af1969cef727bb32d31c5942",
        "buggy_code": "assertThat(restoreProfiles.handler()).isNotNull();",
        "fixed_code": "assertThat(restoreProfiles.handler()).isSameAs(qProfileBackupWsHandler);",
        "patch": "@@ -53,7 +53,7 @@ public void define_ws() throws Exception {\n \n     WebService.Action restoreProfiles = controller.action(\"restore_default\");\n     assertThat(restoreProfiles).isNotNull();\n-    assertThat(restoreProfiles.handler()).isNotNull();\n+    assertThat(restoreProfiles.handler()).isSameAs(qProfileBackupWsHandler);\n     assertThat(restoreProfiles.since()).isEqualTo(\"4.4\");\n     assertThat(restoreProfiles.isPost()).isFalse();\n     assertThat(restoreProfiles.isInternal()).isFalse();"
    },
    {
        "commit_id": "88168861298ce1314d924d7f603ebd2224c29fb5",
        "commit_message": "fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/88168861298ce1314d924d7f603ebd2224c29fb5",
        "buggy_code": "int httpPort = 8888;//settings.getInt(\"sonar.es.http.port\");",
        "fixed_code": "int httpPort = settings.getInt(\"sonar.es.http.port\");",
        "patch": "@@ -120,7 +120,7 @@ private void initNetwork(ImmutableSettings.Builder esSettings) {\n   }\n \n   private void initRestConsole(ImmutableSettings.Builder esSettings) {\n-    int httpPort = 8888;//settings.getInt(\"sonar.es.http.port\");\n+    int httpPort = settings.getInt(\"sonar.es.http.port\");\n     if (httpPort > 0) {\n       LOG.warn(\"Elasticsearch HTTP console enabled on port {}. Only for debugging purpose.\", httpPort);\n       esSettings.put(HTTP_ENABLED, true);"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": ".setDescription(\"Quality profiles\");",
        "fixed_code": ".setDescription(\"Quality profiles management\");",
        "patch": "@@ -33,7 +33,7 @@ public QProfilesWs(QProfileBackupWsHandler qProfileBackupWsHandler) {\n   @Override\n   public void define(Context context) {\n     NewController controller = context.createController(\"api/qprofiles\")\n-      .setDescription(\"Quality profiles\");\n+      .setDescription(\"Quality profiles management\");\n \n     controller.createAction(\"restore_default\")\n       .setDescription(\"Restore default profiles\")"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "assertThat(e.l10nParams().iterator().next()).isEqualTo(\"Compilation\");",
        "fixed_code": "assertThat(e.l10nParams()[0]).isEqualTo(\"Compilation\");",
        "patch": "@@ -170,7 +170,7 @@ public void fail_to_create_sub_characteristic_when_name_already_used() {\n       fail();\n     } catch (BadRequestException e) {\n       assertThat(e.l10nKey()).isEqualTo(\"errors.is_already_used\");\n-      assertThat(e.l10nParams().iterator().next()).isEqualTo(\"Compilation\");\n+      assertThat(e.l10nParams()[0]).isEqualTo(\"Compilation\");\n     }\n   }\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.core.issue.DefaultIssueFilter;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.user.MockUserSession;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rules.Rule;\n import org.sonar.api.server.debt.internal.DefaultDebtCharacteristic;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.api.user.User;\n import org.sonar.api.utils.DateUtils;\n import org.sonar.api.utils.Duration;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n \n import static org.fest.assertions.Assertions.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.config.Settings;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.api.utils.System2;\n import org.sonar.server.exceptions.ForbiddenException;\n import org.sonar.server.platform.Platform;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -27,7 +27,7 @@\n import org.junit.rules.ExpectedException;\n import org.junit.rules.TemporaryFolder;\n import org.sonar.api.platform.Server;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n \n import java.io.File;\n import java.io.IOException;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.api.i18n.I18n;\n import org.sonar.api.measures.Metric;\n import org.sonar.api.measures.Metric.ValueType;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.core.timemachine.Periods;\n import org.sonar.server.qualitygate.QualityGates;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -25,7 +25,7 @@\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.server.qualityprofile.QProfileBackup;\n import org.sonar.server.qualityprofile.QProfileResult;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -26,7 +26,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n \n import static org.fest.assertions.Assertions.assertThat;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -30,7 +30,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.rule.RuleKey;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.core.permission.GlobalPermissions;\n import org.sonar.server.rule.Rule;\n import org.sonar.server.rule.Rules;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -28,7 +28,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.rule.RuleKey;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.core.permission.GlobalPermissions;\n import org.sonar.server.rule.Rule;\n import org.sonar.server.rule.Rules;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -32,7 +32,7 @@\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.server.debt.DebtRemediationFunction;\n import org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.server.paging.PagedResult;\n import org.sonar.server.paging.PagingResult;\n import org.sonar.server.rule.Rule;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.api.resources.Languages;\n import org.sonar.api.rule.RuleKey;\n import org.sonar.api.rules.RuleFinder;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.api.utils.DateUtils;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.rule.Rule;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -26,7 +26,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.core.rule.RuleTagDto;\n import org.sonar.server.rule.RuleTags;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -25,7 +25,7 @@\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n \n import static org.fest.assertions.Assertions.assertThat;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -25,7 +25,7 @@\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n import org.sonar.server.exceptions.NotFoundException;\n import org.sonar.server.source.SourceService;\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "import org.sonar.api.server.ws.WsTester;",
        "fixed_code": "import org.sonar.server.ws.WsTester;",
        "patch": "@@ -22,7 +22,7 @@\n \n import org.junit.Test;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.api.server.ws.WsTester;\n+import org.sonar.server.ws.WsTester;\n \n import static org.fest.assertions.Assertions.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");",
        "fixed_code": "assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");",
        "patch": "@@ -57,7 +57,7 @@ public void fail_on_invalid_boolean() {\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(BadRequestException.class);\n       BadRequestException badRequestException = (BadRequestException) e;\n-      assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");\n+      assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");\n     }\n   }\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");",
        "fixed_code": "assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");",
        "patch": "@@ -55,7 +55,7 @@ public void fail_on_invalid_float() {\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(BadRequestException.class);\n       BadRequestException badRequestException = (BadRequestException) e;\n-      assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");\n+      assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");\n     }\n   }\n "
    },
    {
        "commit_id": "940944f6b9ed7e387cf924b4ddda45f986593447",
        "commit_message": "Merge branch 'master' of https://github.com/SonarSource/sonarqube\n\n# By Julien Lancelot (6) and others\n# Via Julien Lancelot\n* 'master' of https://github.com/SonarSource/sonarqube:\n  SONAR-4764 When removing profile at startup, do not check if the profile is deletable or not\n  SONAR-4764 Fix issue on MySQL where profiles are empty because hibernate do not see new rules\n  Complete WebService with new param metadata\n  SONAR-4764 Remove icon near \"Restore Default Profile\" button\n  SONAR-4764 Add a medium test\n  SONAR-4764 Add Java WS Client to restore default profiles\n  Rename addExtensions by addComponents\n  SONAR-4927 Add Quality Gate widget\n  SONAR-4927 Fix Build Breaker (remove alertLevel from new metric)\n\nConflicts:\n\tsonar-server/src/main/java/org/sonar/server/rule2/RuleService.java",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/940944f6b9ed7e387cf924b4ddda45f986593447",
        "buggy_code": "assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");",
        "fixed_code": "assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");",
        "patch": "@@ -54,7 +54,7 @@ public void fail_on_invalid_integer() {\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(BadRequestException.class);\n       BadRequestException badRequestException = (BadRequestException) e;\n-      assertThat(badRequestException.l10nParams().toArray()[0]).isEqualTo(\"abc\");\n+      assertThat(badRequestException.l10nParams()[0]).isEqualTo(\"abc\");\n     }\n   }\n "
    },
    {
        "commit_id": "e3426094b776b73079996dd33cefb7cb1542388c",
        "commit_message": "Fix bad import",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e3426094b776b73079996dd33cefb7cb1542388c",
        "buggy_code": "import com.google.inject.internal.util.Lists;",
        "fixed_code": "import com.google.common.collect.Lists;",
        "patch": "@@ -19,9 +19,9 @@\n  */\n package org.sonar.batch.qualitygate;\n \n+import com.google.common.collect.Lists;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n-import com.google.inject.internal.util.Lists;\n import org.sonar.api.measures.Metric.Level;\n \n import java.util.List;"
    },
    {
        "commit_id": "6d465a7eeee59a615cfbb27508dc40957142ee1b",
        "commit_message": "SONAR-3437 Fix UT of MeasurePersister",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d465a7eeee59a615cfbb27508dc40957142ee1b",
        "buggy_code": "when(ruleFinder.findByKey(\"pmd\", \"key\")).thenReturn(rule);",
        "fixed_code": "when(ruleFinder.findByKey(rule.ruleKey())).thenReturn(rule);",
        "patch": "@@ -114,7 +114,7 @@ public void should_insert_rule_measure() {\n     setupData(\"empty\");\n \n     Rule rule = Rule.create(\"pmd\", \"key\");\n-    when(ruleFinder.findByKey(\"pmd\", \"key\")).thenReturn(rule);\n+    when(ruleFinder.findByKey(rule.ruleKey())).thenReturn(rule);\n \n     Measure measure = new RuleMeasure(ncloc(), rule, RulePriority.MAJOR, 1).setValue(1234.0);\n     when(measureCache.entries()).thenReturn(Arrays.asList(new Cache.Entry<Measure>(new String[] {\"foo\", \"ncloc\"}, measure)));"
    },
    {
        "commit_id": "c11d9299f6ecaea6de21fb5d5c11a2c8c672b228",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c11d9299f6ecaea6de21fb5d5c11a2c8c672b228",
        "buggy_code": "assertThat(list.isInternal()).isFalse();",
        "fixed_code": "assertThat(list.isInternal()).isTrue();",
        "patch": "@@ -64,7 +64,7 @@ public void define_ws() throws Exception {\n     assertThat(list.handler()).isNotNull();\n     assertThat(list.since()).isEqualTo(\"4.3\");\n     assertThat(list.isPost()).isFalse();\n-    assertThat(list.isInternal()).isFalse();\n+    assertThat(list.isInternal()).isTrue();\n     assertThat(list.params()).hasSize(11);\n \n     WebService.Action show = controller.action(\"show\");"
    },
    {
        "commit_id": "53fc70e961eceebd1524e4a8df96e3321b80b9ee",
        "commit_message": "SONAR-5212 Fix tests metric in multi-language projects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53fc70e961eceebd1524e4a8df96e3321b80b9ee",
        "buggy_code": "return context.getMeasure(CoreMetrics.TESTS) == null && (ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource));",
        "fixed_code": "return ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource);",
        "patch": "@@ -46,7 +46,7 @@ public boolean shouldExecuteOnProject(Project project) {\n   }\n \n   public boolean shouldDecorateResource(Resource resource, DecoratorContext context) {\n-    return context.getMeasure(CoreMetrics.TESTS) == null && (ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource));\n+    return ResourceUtils.isUnitTestClass(resource) || !ResourceUtils.isEntity(resource);\n   }\n \n   public void decorate(Resource resource, DecoratorContext context) {"
    },
    {
        "commit_id": "18fbb41d409fa4b58e298de2d30581d8e1f4a3a8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/18fbb41d409fa4b58e298de2d30581d8e1f4a3a8",
        "buggy_code": "public Component<?> findByKey(String key) {",
        "fixed_code": "public Component findByKey(String key) {",
        "patch": "@@ -53,7 +53,7 @@ public DefaultRubyComponentService(ResourceDao resourceDao, DefaultComponentFind\n   }\n \n   @Override\n-  public Component<?> findByKey(String key) {\n+  public Component findByKey(String key) {\n     return resourceDao.findByKey(key);\n   }\n "
    },
    {
        "commit_id": "18fbb41d409fa4b58e298de2d30581d8e1f4a3a8",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/18fbb41d409fa4b58e298de2d30581d8e1f4a3a8",
        "buggy_code": "public static abstract class Task {",
        "fixed_code": "public abstract static class Task {",
        "patch": "@@ -53,7 +53,7 @@ public static void execute(Task task) {\n    * Define a task that will be executed using the highest privileges available. The privileged section is restricted\n    * to the execution of the {@link #doPrivileged()} method.\n    */\n-  public static abstract class Task {\n+  public abstract static class Task {\n \n     /**\n      * Code placed in this method will be executed in a privileged environment."
    },
    {
        "commit_id": "e2d38e8b8ac49ca50fb93acf0357f5c91c28bca2",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2d38e8b8ac49ca50fb93acf0357f5c91c28bca2",
        "buggy_code": "assertThat(messages).isNotNull().isNotEmpty().hasSize(51);",
        "fixed_code": "assertThat(messages).isNotNull().isNotEmpty().hasSize(53);",
        "patch": "@@ -89,7 +89,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {\n     Collection<Map> periods = (Collection<Map>) responseJson.get(\"periods\");\n     assertThat(periods).hasSize(3);\n     Map messages = (Map) responseJson.get(\"messages\");\n-    assertThat(messages).isNotNull().isNotEmpty().hasSize(51);\n+    assertThat(messages).isNotNull().isNotEmpty().hasSize(53);\n     for (Entry message: (Set<Entry>) messages.entrySet()) {\n       assertThat(message.getKey()).isEqualTo(message.getValue());\n     }"
    },
    {
        "commit_id": "7fbccc246de0a2629eed933e2b9ede0d678ef4dd",
        "commit_message": "SONAR-4366 Fix display of conditions defined on deprecated (hidden) metrics",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7fbccc246de0a2629eed933e2b9ede0d678ef4dd",
        "buggy_code": "assertThat(qGates.gateMetrics()).hasSize(1).containsOnly(classicMetric);",
        "fixed_code": "assertThat(qGates.gateMetrics()).hasSize(3).containsOnly(classicMetric, hiddenMetric, nullHiddenMetric);",
        "patch": "@@ -569,6 +569,6 @@ public void should_list_gate_metrics() {\n     when(classicMetric.getType()).thenReturn(ValueType.BOOL);\n     when(metricFinder.findAll()).thenReturn(ImmutableList.of(\n       dataMetric, hiddenMetric, nullHiddenMetric, alertMetric, ratingMetric, classicMetric));\n-    assertThat(qGates.gateMetrics()).hasSize(1).containsOnly(classicMetric);\n+    assertThat(qGates.gateMetrics()).hasSize(3).containsOnly(classicMetric, hiddenMetric, nullHiddenMetric);\n   }\n }"
    },
    {
        "commit_id": "31a769e8450a1da2c516fa042b1433059daa1325",
        "commit_message": "SONAR-5186 Fix validation when property is set from command line",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31a769e8450a1da2c516fa042b1433059daa1325",
        "buggy_code": "reactor.getRoot().setProperty(\"sonar.phase\", \"phase\");",
        "fixed_code": "settings.setProperty(\"sonar.phase\", \"phase\");",
        "patch": "@@ -232,7 +232,7 @@ public void fail_with_only_digits() {\n   @Test\n   public void fail_with_deprecated_sonar_phase() {\n     ProjectReactor reactor = createProjectReactor(\"foo\");\n-    reactor.getRoot().setProperty(\"sonar.phase\", \"phase\");\n+    settings.setProperty(\"sonar.phase\", \"phase\");\n \n     thrown.expect(SonarException.class);\n     thrown.expectMessage(\"\\\"sonar.phase\\\" is deprecated\");"
    },
    {
        "commit_id": "3bfcfa0de67e7f00d7cd0dc74649fef7e5772298",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3bfcfa0de67e7f00d7cd0dc74649fef7e5772298",
        "buggy_code": "assertThat(rule.metadata()).isNull();",
        "fixed_code": "assertThat(rule.internalKey()).isNull();",
        "patch": "@@ -101,7 +101,7 @@ public void build_rules() throws Exception {\n     assertThat(rule.name()).isEqualTo(\"Avoid Null\");\n     assertThat(rule.description()).isEqualTo(\"Should avoid NULL\");\n     assertThat(rule.severity()).isEqualTo(Severity.MINOR);\n-    assertThat(rule.metadata()).isNull();\n+    assertThat(rule.internalKey()).isNull();\n     assertThat(rule.params()).hasSize(1);\n \n     RuleParam param = rule.param(\"myParameter\");"
    },
    {
        "commit_id": "0be190ef3ae0ad32c9324c6021704ab2dcc35978",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0be190ef3ae0ad32c9324c6021704ab2dcc35978",
        "buggy_code": "assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Invalid coefficient: foo\");",
        "fixed_code": "assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Invalid coefficient: foo (Duration 'foo' is invalid, it should use the following sample format : 2d 10h 15min)\");",
        "patch": "@@ -661,7 +661,7 @@ public void fail_to_update_rule_on_invalid_coefficient() throws Exception {\n         authorizedUserSession\n       );\n     } catch (Exception e) {\n-      assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Invalid coefficient: foo\");\n+      assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Invalid coefficient: foo (Duration 'foo' is invalid, it should use the following sample format : 2d 10h 15min)\");\n     }\n \n     verify(ruleDao, never()).update(any(RuleDto.class), eq(session));"
    },
    {
        "commit_id": "9b6dcfe706b8bafe2c18bb152ebc2b50ecb4c289",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9b6dcfe706b8bafe2c18bb152ebc2b50ecb4c289",
        "buggy_code": ".setPath(\"src/org/Foo.java\").setModuleKey(\"myproject\");",
        "fixed_code": ".setPath(\"src/org/Foo.java\");",
        "patch": "@@ -36,7 +36,7 @@ public void should_copy() {\n     BeanGraph beanGraph = new BeanGraph(new TinkerGraph());\n     ComponentVertex vertex = beanGraph.createVertex(ComponentVertex.class);\n     Component file = MockSourceFile.createMain(\"myproject:org/Foo.java\").setName(\"Foo.java\").setQualifier(Qualifiers.FILE)\n-      .setPath(\"src/org/Foo.java\").setModuleKey(\"myproject\");\n+      .setPath(\"src/org/Foo.java\");\n \n     vertex.copyFrom(file);\n "
    },
    {
        "commit_id": "7ad9ede752fad42ff8fb236af852463219032585",
        "commit_message": "SONAR-5056 Fix NPE when disabling debt on rule",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7ad9ede752fad42ff8fb236af852463219032585",
        "buggy_code": "if (!ruleDto.getSubCharacteristicId().equals(RuleDto.DISABLED_CHARACTERISTIC_ID)) {",
        "fixed_code": "if (!RuleDto.DISABLED_CHARACTERISTIC_ID.equals(ruleDto.getSubCharacteristicId())) {",
        "patch": "@@ -294,7 +294,7 @@ public void updateRule(RuleChange ruleChange, UserSession userSession) {\n         // No sub-characteristic is given -> disable rule debt if not already disabled\n       } else {\n         // Rule characteristic is not already disabled -> update it\n-        if (!ruleDto.getSubCharacteristicId().equals(RuleDto.DISABLED_CHARACTERISTIC_ID)) {\n+        if (!RuleDto.DISABLED_CHARACTERISTIC_ID.equals(ruleDto.getSubCharacteristicId())) {\n           ruleDto.setSubCharacteristicId(RuleDto.DISABLED_CHARACTERISTIC_ID);\n           ruleDto.setRemediationFunction(null);\n           ruleDto.setRemediationCoefficient(null);"
    },
    {
        "commit_id": "95820442b90fc0642453e51c9233bae36a3b28db",
        "commit_message": "Fix compatibility of some tests with java8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/95820442b90fc0642453e51c9233bae36a3b28db",
        "buggy_code": "Map<String, Object> mappedCriterias = Maps.newHashMap();",
        "fixed_code": "Map<String, Object> mappedCriterias = Maps.newLinkedHashMap();",
        "patch": "@@ -69,7 +69,7 @@ public void shouldReturnDefaultValue() {\n   @Test\n   public void shouldBuildCriteriasHQL() {\n     StringBuilder hql = new StringBuilder();\n-    Map<String, Object> mappedCriterias = Maps.newHashMap();\n+    Map<String, Object> mappedCriterias = Maps.newLinkedHashMap();\n     mappedCriterias.put(\"foo\", \"value\");\n     mappedCriterias.put(\"bar\", null);\n     session.buildCriteriasHQL(hql, mappedCriterias);"
    },
    {
        "commit_id": "569a517a2728403dfe821d1ffeb1203c4695d3d8",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/569a517a2728403dfe821d1ffeb1203c4695d3d8",
        "buggy_code": "assertThat(list.params()).hasSize(4);",
        "fixed_code": "assertThat(list.params()).hasSize(11);",
        "patch": "@@ -65,7 +65,7 @@ public void define_ws() throws Exception {\n     assertThat(list.since()).isEqualTo(\"4.3\");\n     assertThat(list.isPost()).isFalse();\n     assertThat(list.isInternal()).isFalse();\n-    assertThat(list.params()).hasSize(4);\n+    assertThat(list.params()).hasSize(11);\n \n     WebService.Action show = controller.action(\"show\");\n     assertThat(show).isNotNull();"
    },
    {
        "commit_id": "55904b241664b38632d23c62962b660850bc9dd6",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55904b241664b38632d23c62962b660850bc9dd6",
        "buggy_code": "EsSetup.index(\"rules\", \"rule\", \"3\").withSource(testFileAsString(\"shared/removed_rule.json\"))",
        "fixed_code": "EsSetup.index(\"rules\", \"rule\", \"3\").withSource(testFileAsString(\"shared/rule3.json\"))",
        "patch": "@@ -100,7 +100,7 @@ public void setUp() throws Exception {\n     esSetup.execute(\n       EsSetup.index(\"rules\", \"rule\", \"1\").withSource(testFileAsString(\"shared/rule1.json\")),\n       EsSetup.index(\"rules\", \"rule\", \"2\").withSource(testFileAsString(\"shared/rule2.json\")),\n-      EsSetup.index(\"rules\", \"rule\", \"3\").withSource(testFileAsString(\"shared/removed_rule.json\"))\n+      EsSetup.index(\"rules\", \"rule\", \"3\").withSource(testFileAsString(\"shared/rule3.json\"))\n     );\n   }\n "
    },
    {
        "commit_id": "4a108310e196bcff760bc81de326346b1ee4ac4c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a108310e196bcff760bc81de326346b1ee4ac4c",
        "buggy_code": "return ((characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId))) || (characteristicId == null && defaultCharacteristicId != null);",
        "fixed_code": "return (characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId)) || (characteristicId == null && defaultCharacteristicId != null);",
        "patch": "@@ -315,7 +315,7 @@ public RuleDto setUpdatedAt(Date updatedAt) {\n   }\n \n   public boolean hasCharacteristic(){\n-    return ((characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId))) || (characteristicId == null && defaultCharacteristicId != null);\n+    return (characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId)) || (characteristicId == null && defaultCharacteristicId != null);\n   }\n \n   @Override"
    },
    {
        "commit_id": "e93b51a5ca7b451e55d56632b2a1b314cf83f491",
        "commit_message": "Fix loading of Hibernate rules on MyBatis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e93b51a5ca7b451e55d56632b2a1b314cf83f491",
        "buggy_code": "session.getEntityManager().clear();",
        "fixed_code": "session.commit();",
        "patch": "@@ -85,7 +85,7 @@ public void start() {\n     session = sessionFactory.getSession();\n \n     // hibernate session can contain an invalid cache of rules\n-    session.getEntityManager().clear();\n+    session.commit();\n \n     ListMultimap<String, RulesProfile> profilesByLanguage = loadDefinitions();\n     for (String language : profilesByLanguage.keySet()) {"
    },
    {
        "commit_id": "d93268cebc05e32cf5fee908538350d44859962b",
        "commit_message": "SONAR-5056 Fix issue when removing characteristic and rules linked with default characteristic linked on it was updated",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d93268cebc05e32cf5fee908538350d44859962b",
        "buggy_code": "return (characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId)) || defaultCharacteristicId != null;",
        "fixed_code": "return ((characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId))) || (characteristicId == null && defaultCharacteristicId != null);",
        "patch": "@@ -315,7 +315,7 @@ public RuleDto setUpdatedAt(Date updatedAt) {\n   }\n \n   public boolean hasCharacteristic(){\n-    return (characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId)) || defaultCharacteristicId != null;\n+    return ((characteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(characteristicId))) || (characteristicId == null && defaultCharacteristicId != null);\n   }\n \n   @Override"
    },
    {
        "commit_id": "d93268cebc05e32cf5fee908538350d44859962b",
        "commit_message": "SONAR-5056 Fix issue when removing characteristic and rules linked with default characteristic linked on it was updated",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d93268cebc05e32cf5fee908538350d44859962b",
        "buggy_code": "List<RuleDto> selectByCharacteristicOrSubCharacteristicId(int id);",
        "fixed_code": "List<RuleDto> selectBySubCharacteristicId(int characteristicId);",
        "patch": "@@ -30,7 +30,7 @@ public interface RuleMapper {\n \n   List<RuleDto> selectNonManual();\n \n-  List<RuleDto> selectByCharacteristicOrSubCharacteristicId(int id);\n+  List<RuleDto> selectBySubCharacteristicId(int characteristicId);\n \n   List<RuleDto> selectOverridingDebt(@Param(\"repositories\") List<String> repositories);\n "
    },
    {
        "commit_id": "dd1478fd1c40ceca4382eda011c3f093ba75dfe5",
        "commit_message": "SONAR-5056 Fix issue on move up/down",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd1478fd1c40ceca4382eda011c3f093ba75dfe5",
        "buggy_code": "public List<DebtCharacteristic> characteristics() {",
        "fixed_code": "public List<DebtCharacteristic> allCharacteristics() {",
        "patch": "@@ -47,7 +47,7 @@ public List<DebtCharacteristic> rootCharacteristics() {\n     return toCharacteristics(dao.selectEnabledRootCharacteristics());\n   }\n \n-  public List<DebtCharacteristic> characteristics() {\n+  public List<DebtCharacteristic> allCharacteristics() {\n     return toCharacteristics(dao.selectEnabledCharacteristics());\n   }\n "
    },
    {
        "commit_id": "c0b4c90a31009d38dfd02e8e55e307527afc3867",
        "commit_message": "Fix path size for Windows build...",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c0b4c90a31009d38dfd02e8e55e307527afc3867",
        "buggy_code": "public void should_fail_on_plugin_depending_on_more_recent_sonar() {",
        "fixed_code": "public void fail_if_require_greater_SQ_version() {",
        "patch": "@@ -113,7 +113,7 @@ public void ignoreJarsWhichAreNotPlugins() {\n   }\n \n   @Test\n-  public void should_fail_on_plugin_depending_on_more_recent_sonar() {\n+  public void fail_if_require_greater_SQ_version() {\n     when(server.getVersion()).thenReturn(\"2.0\");\n \n     exception.expect(IllegalStateException.class);"
    },
    {
        "commit_id": "194d1b9d31993c14ab35965582500bc2dade7947",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/194d1b9d31993c14ab35965582500bc2dade7947",
        "buggy_code": "LinkedList<Node> stack = Lists.newLinkedList();",
        "fixed_code": "Deque<Node> stack = Lists.newLinkedList();",
        "patch": "@@ -63,7 +63,7 @@ public int compare(Node o1, Node o2) {\n    * Depth-first search (DFS).\n    */\n   private void dfs() {\n-    LinkedList<Node> stack = Lists.newLinkedList();\n+    Deque<Node> stack = Lists.newLinkedList();\n     stack.add(tree.getRootNode());\n     while (!stack.isEmpty()) {\n       Node node = stack.removeLast();"
    },
    {
        "commit_id": "194d1b9d31993c14ab35965582500bc2dade7947",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/194d1b9d31993c14ab35965582500bc2dade7947",
        "buggy_code": "HashMap<SubCategory, Collection<PropertyDefinition>> emailSubCategories = new HashMap<SubCategory, Collection<PropertyDefinition>>();",
        "fixed_code": "Map<SubCategory, Collection<PropertyDefinition>> emailSubCategories = new HashMap<SubCategory, Collection<PropertyDefinition>>();",
        "patch": "@@ -166,7 +166,7 @@ public Map<Category, Map<SubCategory, Collection<PropertyDefinition>>> propertie\n     Map<Category, Map<SubCategory, Collection<PropertyDefinition>>> byCategory = new HashMap<Category, Map<SubCategory, Collection<PropertyDefinition>>>();\n     if (qualifier == null) {\n       // Special categories on global page\n-      HashMap<SubCategory, Collection<PropertyDefinition>> emailSubCategories = new HashMap<SubCategory, Collection<PropertyDefinition>>();\n+      Map<SubCategory, Collection<PropertyDefinition>> emailSubCategories = new HashMap<SubCategory, Collection<PropertyDefinition>>();\n       emailSubCategories.put(new SubCategory(\"email\", true), new ArrayList<PropertyDefinition>());\n       byCategory.put(new Category(CoreProperties.CATEGORY_GENERAL, false), emailSubCategories);\n "
    },
    {
        "commit_id": "fbbf0d48b0d922112ba405bee7da94eae0fd4194",
        "commit_message": "SONAR-5094 Change error message when quality gate is not found",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fbbf0d48b0d922112ba405bee7da94eae0fd4194",
        "buggy_code": "throw MessageException.of(\"No quality gate found with configured value '\" + qualityGateSetting + \"'. Please check your configuration.\");",
        "fixed_code": "throw MessageException.of(\"Quality gate '\" + qualityGateSetting + \"' was not found.\");",
        "patch": "@@ -70,7 +70,7 @@ private QualityGate load(String qualityGateSetting, ServerClient client, MetricF\n       configuredGate = fetch(qualityGateSetting, client, metricFinder);\n     } catch (HttpDownloader.HttpException serverError) {\n       if (serverError.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n-        throw MessageException.of(\"No quality gate found with configured value '\" + qualityGateSetting + \"'. Please check your configuration.\");\n+        throw MessageException.of(\"Quality gate '\" + qualityGateSetting + \"' was not found.\");\n       } else {\n         throw serverError;\n       }"
    },
    {
        "commit_id": "f9b18cc1aea5d6b80095664248ee18a5afb8a655",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f9b18cc1aea5d6b80095664248ee18a5afb8a655",
        "buggy_code": "return createDebtRemediationFunction(ruleDto.getDefaultRemediationFunction(), ruleDto.getDefaultRemediationFactor(), ruleDto.getDefaultRemediationOffset(), durations);",
        "fixed_code": "return createDebtRemediationFunction(defaultFunction, ruleDto.getDefaultRemediationFactor(), ruleDto.getDefaultRemediationOffset(), durations);",
        "patch": "@@ -109,7 +109,7 @@ private DebtRemediationFunction effectiveFunction(RuleDto ruleDto, RuleKey ruleK\n     if (function != null) {\n       return createDebtRemediationFunction(function, ruleDto.getRemediationFactor(), ruleDto.getRemediationOffset(), durations);\n     } else if (defaultFunction != null) {\n-      return createDebtRemediationFunction(ruleDto.getDefaultRemediationFunction(), ruleDto.getDefaultRemediationFactor(), ruleDto.getDefaultRemediationOffset(), durations);\n+      return createDebtRemediationFunction(defaultFunction, ruleDto.getDefaultRemediationFactor(), ruleDto.getDefaultRemediationOffset(), durations);\n     } else {\n       throw new IllegalStateException(String.format(\"Remediation function should not be null on rule '%s'\", ruleKey));\n     }"
    },
    {
        "commit_id": "503e9bd751e98645e6e0148ab6e1bc29ccbe5943",
        "commit_message": "Fix bad import edu.emory.mathcs.backport.java.util.Collections",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/503e9bd751e98645e6e0148ab6e1bc29ccbe5943",
        "buggy_code": "import edu.emory.mathcs.backport.java.util.Collections;",
        "fixed_code": "import java.util.Collections;",
        "patch": "@@ -21,7 +21,7 @@\n package org.sonar.plugins.core.technicaldebt;\n \n import com.google.common.collect.Lists;\n-import edu.emory.mathcs.backport.java.util.Collections;\n+import java.util.Collections;\n import org.apache.commons.lang.ObjectUtils;\n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;"
    },
    {
        "commit_id": "283c343d94f764e6c6f4c3d7b7fd546cf325ffe4",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/283c343d94f764e6c6f4c3d7b7fd546cf325ffe4",
        "buggy_code": "ConcurrentLinkedQueue<long[]> queue = new ConcurrentLinkedQueue<long[]>();",
        "fixed_code": "Queue<long[]> queue = new ConcurrentLinkedQueue<long[]>();",
        "patch": "@@ -107,7 +107,7 @@ private Queue<long[]> initGroupOfViolationIds(Database database) throws SQLExcep\n       stmt = connection.createStatement();\n       stmt.setFetchSize(10000);\n       rs = stmt.executeQuery(\"select id from rule_failures\");\n-      ConcurrentLinkedQueue<long[]> queue = new ConcurrentLinkedQueue<long[]>();\n+      Queue<long[]> queue = new ConcurrentLinkedQueue<long[]>();\n \n       totalViolations = 0;\n       long[] block = new long[VIOLATION_GROUP_SIZE];"
    },
    {
        "commit_id": "283c343d94f764e6c6f4c3d7b7fd546cf325ffe4",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/283c343d94f764e6c6f4c3d7b7fd546cf325ffe4",
        "buggy_code": "if (key.equals(\"[default]\")) {",
        "fixed_code": "if (\"[default]\".equals(key)) {",
        "patch": "@@ -77,7 +77,7 @@ public void convert(Row row, PreparedStatement updateStatement) throws SQLExcept\n   String convertKey(String packageKey) {\n     String prefix = StringUtils.substringBeforeLast(packageKey, \":\") + \":\";\n     String key = StringUtils.substringAfterLast(packageKey, \":\");\n-    if (key.equals(\"[default]\")) {\n+    if (\"[default]\".equals(key)) {\n       return prefix + \"[root]\";\n     }\n     return prefix + StringUtils.replace(key, \".\", \"/\");"
    },
    {
        "commit_id": "109a3219b99352aa2b79388b44363aa3a959b2ef",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/109a3219b99352aa2b79388b44363aa3a959b2ef",
        "buggy_code": "result = rule.factor().multiply(effortToFixValue);",
        "fixed_code": "result = factor.multiply(effortToFixValue);",
        "patch": "@@ -127,7 +127,7 @@ private Duration calculateDebt(Rule rule, @Nullable Double effortToFix) {\n \n     if (factor != null) {\n       int effortToFixValue = Objects.firstNonNull(effortToFix, 1).intValue();\n-      result = rule.factor().multiply(effortToFixValue);\n+      result = factor.multiply(effortToFixValue);\n     }\n \n     if (offset != null) {"
    },
    {
        "commit_id": "6b0986efbfcbac2048f18ff9e9eae55f0d18b616",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6b0986efbfcbac2048f18ff9e9eae55f0d18b616",
        "buggy_code": "int days = ((Double) (duration / hoursInDay / 60d)).intValue();",
        "fixed_code": "int days = ((Double) ((double) duration / hoursInDay / 60d)).intValue();",
        "patch": "@@ -100,7 +100,7 @@ static WorkDuration createFromLong(long duration, int hoursInDay) {\n   }\n \n   static WorkDuration createFromMinutes(long duration, int hoursInDay) {\n-    int days = ((Double) (duration / hoursInDay / 60d)).intValue();\n+    int days = ((Double) ((double) duration / hoursInDay / 60d)).intValue();\n     Long currentDurationInMinutes = duration - (60L * days * hoursInDay);\n     int hours = ((Double) (currentDurationInMinutes / 60d)).intValue();\n     currentDurationInMinutes = currentDurationInMinutes - (60L * hours);"
    },
    {
        "commit_id": "0bfbecd3d0562f62e5e61c42579b2dce45d33a2c",
        "commit_message": "Fix alerts.warning_tooltip",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0bfbecd3d0562f62e5e61c42579b2dce45d33a2c",
        "buggy_code": "\"alerts.warn_tooltip\",",
        "fixed_code": "\"alerts.warning_tooltip\",",
        "patch": "@@ -39,7 +39,7 @@ public class QgateAppHandler implements RequestHandler {\n       \"alerts.notes.ok\",\n       \"alerts.notes.warn\",\n       \"alerts.select_metric\",\n-      \"alerts.warn_tooltip\",\n+      \"alerts.warning_tooltip\",\n       \"are_you_sure\",\n       \"cancel\",\n       \"copy\","
    },
    {
        "commit_id": "6c7dcb3a2af976d6cfdf7ac7dec2cedbe6013619",
        "commit_message": "SONAR-5056 Update Issue.debt from Long to Duration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6c7dcb3a2af976d6cfdf7ac7dec2cedbe6013619",
        "buggy_code": "Long currentDebt = ((DefaultIssue) issue).debt();",
        "fixed_code": "Long currentDebt = ((DefaultIssue) issue).debtInMinutes();",
        "patch": "@@ -164,7 +164,7 @@ private double computeTechnicalDebt(Metric metric, DecoratorContext context, Req\n     long debt = 0L;\n     if (issues != null) {\n       for (Issue issue : issues) {\n-        Long currentDebt = ((DefaultIssue) issue).debt();\n+        Long currentDebt = ((DefaultIssue) issue).debtInMinutes();\n         if (currentDebt != null) {\n           debt += currentDebt;\n         }"
    },
    {
        "commit_id": "fce2631d576ab64674661f9028d86eae13c5e97e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fce2631d576ab64674661f9028d86eae13c5e97e",
        "buggy_code": "if (result.key().equals(\" \")) {",
        "fixed_code": "if (\" \".equals(result.key())) {",
        "patch": "@@ -155,7 +155,7 @@ public String formatWorkDuration(Locale locale, long duration) {\n     List<WorkDurationFormatter.Result> results = workDurationFormatter.format(duration);\n     StringBuilder message = new StringBuilder();\n     for (WorkDurationFormatter.Result result : results) {\n-      if (result.key().equals(\" \")) {\n+      if (\" \".equals(result.key())) {\n         message.append(\" \");\n       } else {\n         message.append(message(locale, result.key(), null, result.value()));"
    },
    {
        "commit_id": "03f76f203acd6f93ddcebc9ec0bd7f1231472e94",
        "commit_message": "SONAR-4996 Fix migration type on null string value",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/03f76f203acd6f93ddcebc9ec0bd7f1231472e94",
        "buggy_code": "statement.setNull(1, Types.DOUBLE);",
        "fixed_code": "statement.setNull(1, Types.VARCHAR);",
        "patch": "@@ -83,7 +83,7 @@ public void convert(Row row, PreparedStatement statement) throws SQLException {\n           if (row.value != null) {\n             statement.setString(1, convertDebtForDays(row.value));\n           } else {\n-            statement.setNull(1, Types.DOUBLE);\n+            statement.setNull(1, Types.VARCHAR);\n           }\n           statement.setLong(2, row.id);\n         }"
    },
    {
        "commit_id": "1516e18d0b5335d00b7754f8e64fec68468f7703",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1516e18d0b5335d00b7754f8e64fec68468f7703",
        "buggy_code": "long id();",
        "fixed_code": "Long id();",
        "patch": "@@ -24,7 +24,7 @@\n  */\n public interface QualityGate {\n \n-  long id();\n+  Long id();\n \n   String name();\n }"
    },
    {
        "commit_id": "758e376cc9fa3a3d2f3518f10e0f0449023c8d79",
        "commit_message": "Fix drilldown page when project was analyzed before v4.2",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/758e376cc9fa3a3d2f3518f10e0f0449023c8d79",
        "buggy_code": "assertThat(tree.getTypes()).hasSize(5);",
        "fixed_code": "assertThat(tree.getTypes()).hasSize(7);",
        "patch": "@@ -32,7 +32,7 @@ public class DefaultResourceTypesTest {\n   public void provide_types() {\n     ResourceTypeTree tree = new DefaultResourceTypes().provide();\n \n-    assertThat(tree.getTypes()).hasSize(5);\n+    assertThat(tree.getTypes()).hasSize(7);\n     assertThat(tree.getChildren(Qualifiers.PROJECT)).containsExactly(Qualifiers.MODULE);\n   }\n "
    },
    {
        "commit_id": "462f3c3a33e6f2f85b068ce4c164a14d2569ed5d",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/462f3c3a33e6f2f85b068ce4c164a14d2569ed5d",
        "buggy_code": "assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Membership is not valid (got unknwown). Availables values are [ANY, IN, OUT]\");",
        "fixed_code": "assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Membership is not valid (got unknwown). Availables values are [all, selected, deselected]\");",
        "patch": "@@ -50,7 +50,7 @@ public void fail_on_invalid_membership() throws Exception {\n       builder.build();\n       fail();\n     } catch (Exception e) {\n-      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Membership is not valid (got unknwown). Availables values are [ANY, IN, OUT]\");\n+      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Membership is not valid (got unknwown). Availables values are [all, selected, deselected]\");\n     }\n   }\n "
    },
    {
        "commit_id": "c815ce7870782886d8670b18249208feae290b43",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c815ce7870782886d8670b18249208feae290b43",
        "buggy_code": "public Object call() throws Exception {",
        "fixed_code": "public Object call() throws SQLException {",
        "patch": "@@ -130,7 +130,7 @@ class ViolationConverter implements Callable<Object> {\n   }\n \n   @Override\n-  public Object call() throws Exception {\n+  public Object call() throws SQLException {\n     // For each group of 1000 violation ids:\n     // - load related violations, reviews and action plans\n     // - in a transaction"
    },
    {
        "commit_id": "9bfe86782a7d5e2b25407ef1295096fb0ee3b7d5",
        "commit_message": "SONAR-4996 Add migration to update issue changelog debt to seconds",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9bfe86782a7d5e2b25407ef1295096fb0ee3b7d5",
        "buggy_code": "public static final int LAST_VERSION = 513;",
        "fixed_code": "public static final int LAST_VERSION = 514;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 513;\n+  public static final int LAST_VERSION = 514;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "9bfe86782a7d5e2b25407ef1295096fb0ee3b7d5",
        "commit_message": "SONAR-4996 Add migration to update issue changelog debt to seconds",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9bfe86782a7d5e2b25407ef1295096fb0ee3b7d5",
        "buggy_code": "assertThat(DatabaseMigrations.CLASSES).hasSize(2);",
        "fixed_code": "assertThat(DatabaseMigrations.CLASSES).hasSize(3);",
        "patch": "@@ -28,6 +28,6 @@ public class DatabaseMigrationsTest {\n \n   @Test\n   public void check_number_of_migrations() throws Exception {\n-    assertThat(DatabaseMigrations.CLASSES).hasSize(2);\n+    assertThat(DatabaseMigrations.CLASSES).hasSize(3);\n   }\n }"
    },
    {
        "commit_id": "d2de9de08f20e690b6b96e866c80cc6f9cf0f9b7",
        "commit_message": "SONAR-4996 Update issue changelog debt to seconds (backend + display)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d2de9de08f20e690b6b96e866c80cc6f9cf0f9b7",
        "buggy_code": "IssueUpdater updater = new IssueUpdater(null);",
        "fixed_code": "IssueUpdater updater = new IssueUpdater();",
        "patch": "@@ -42,7 +42,7 @@\n \n public class IssueWorkflowTest {\n \n-  IssueUpdater updater = new IssueUpdater(null);\n+  IssueUpdater updater = new IssueUpdater();\n   IssueWorkflow workflow = new IssueWorkflow(new FunctionExecutor(updater), updater);\n \n   @Test"
    },
    {
        "commit_id": "d2de9de08f20e690b6b96e866c80cc6f9cf0f9b7",
        "commit_message": "SONAR-4996 Update issue changelog debt to seconds (backend + display)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d2de9de08f20e690b6b96e866c80cc6f9cf0f9b7",
        "buggy_code": "public String formatWorkDuration(Locale locale, WorkDuration debt) {",
        "fixed_code": "private String formatWorkDuration(Locale locale, WorkDuration debt) {",
        "patch": "@@ -41,7 +41,7 @@ public String format(Locale locale, long debt) {\n     return formatWorkDuration(locale, workDurationFactory.createFromSeconds(debt));\n   }\n \n-  public String formatWorkDuration(Locale locale, WorkDuration debt) {\n+  private String formatWorkDuration(Locale locale, WorkDuration debt) {\n     StringBuilder message = new StringBuilder();\n     if (debt.days() > 0) {\n       message.append(defaultI18n.message(locale, \"issue.technical_debt.x_days\", null, debt.days()));"
    },
    {
        "commit_id": "23124a18155d030527aa7760b35a0bea5744f9ce",
        "commit_message": "SONAR-4996 Update issue debt to seconds (backend + display)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23124a18155d030527aa7760b35a0bea5744f9ce",
        "buggy_code": "issue.setTechnicalDebt(technicalDebtCalculator.calculateTechnicalDebt(issue.ruleKey(), issue.effortToFix()));",
        "fixed_code": "issue.setDebt(technicalDebtCalculator.calculateTechnicalDebt(issue.ruleKey(), issue.effortToFix()));",
        "patch": "@@ -111,7 +111,7 @@ private void updateIssue(DefaultIssue issue, Rule rule, ActiveRule activeRule ){\n     if (issue.severity() == null) {\n       issue.setSeverity(activeRule.getSeverity().name());\n     }\n-    issue.setTechnicalDebt(technicalDebtCalculator.calculateTechnicalDebt(issue.ruleKey(), issue.effortToFix()));\n+    issue.setDebt(technicalDebtCalculator.calculateTechnicalDebt(issue.ruleKey(), issue.effortToFix()));\n   }\n \n }"
    },
    {
        "commit_id": "b93e0b5019eb8975f5af8a2662eebc727638ab97",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b93e0b5019eb8975f5af8a2662eebc727638ab97",
        "buggy_code": "if (normalizedPath.contains(Directory.SEPARATOR)) {",
        "fixed_code": "if (normalizedPath != null && normalizedPath.contains(Directory.SEPARATOR)) {",
        "patch": "@@ -213,7 +213,7 @@ public static JavaFile create(String relativePathFromBasedir) {\n     javaFile.setPath(normalizedPath);\n     javaFile.parent = new JavaPackage();\n     String directoryPath;\n-    if (normalizedPath.contains(Directory.SEPARATOR)) {\n+    if (normalizedPath != null && normalizedPath.contains(Directory.SEPARATOR)) {\n       directoryPath = StringUtils.substringBeforeLast(normalizedPath, Directory.SEPARATOR);\n     } else {\n       directoryPath = Directory.SEPARATOR;"
    },
    {
        "commit_id": "b93e0b5019eb8975f5af8a2662eebc727638ab97",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b93e0b5019eb8975f5af8a2662eebc727638ab97",
        "buggy_code": "if (normalizedPath.contains(Directory.SEPARATOR)) {",
        "fixed_code": "if (normalizedPath != null && normalizedPath.contains(Directory.SEPARATOR)) {",
        "patch": "@@ -251,7 +251,7 @@ public static File create(String relativePathFromBasedir) {\n     file.setKey(normalizedPath);\n     file.setPath(normalizedPath);\n     String directoryPath;\n-    if (normalizedPath.contains(Directory.SEPARATOR)) {\n+    if (normalizedPath != null && normalizedPath.contains(Directory.SEPARATOR)) {\n       directoryPath = StringUtils.substringBeforeLast(normalizedPath, Directory.SEPARATOR);\n     } else {\n       directoryPath = Directory.SEPARATOR;"
    },
    {
        "commit_id": "9409d0c2e94126127b0546117a8089f6bff5a637",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9409d0c2e94126127b0546117a8089f6bff5a637",
        "buggy_code": "StringUtils.removeEndIgnoreCase(path, extension);",
        "fixed_code": "path = StringUtils.removeEndIgnoreCase(path, extension);",
        "patch": "@@ -79,7 +79,7 @@ public boolean match(InputFile inputFile, boolean caseSensitiveFileExtension) {\n       if (!caseSensitiveFileExtension) {\n         String extension = sanitizeExtension(FilenameUtils.getExtension(inputFile.file().getName()));\n         if (StringUtils.isNotBlank(extension)) {\n-          StringUtils.removeEndIgnoreCase(path, extension);\n+          path = StringUtils.removeEndIgnoreCase(path, extension);\n           path = path + extension;\n         }\n       }"
    },
    {
        "commit_id": "34cce8e330192c56a159a856ebd8072d38299087",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/34cce8e330192c56a159a856ebd8072d38299087",
        "buggy_code": "LOG.debug(\"Language of file '\" + inputFile.relativePath() + \"' was detected to be '\" + detectedLanguage + \"'\");",
        "fixed_code": "LOG.debug(String.format(\"Language of file '%s' is detected to be '%s'\", inputFile.relativePath(), detectedLanguage));",
        "patch": "@@ -109,7 +109,7 @@ String language(InputFile inputFile) {\n       }\n     }\n     if (detectedLanguage != null) {\n-      LOG.debug(\"Language of file '\" + inputFile.relativePath() + \"' was detected to be '\" + detectedLanguage + \"'\");\n+      LOG.debug(String.format(\"Language of file '%s' is detected to be '%s'\", inputFile.relativePath(), detectedLanguage));\n       return detectedLanguage;\n     }\n "
    },
    {
        "commit_id": "c83cb3b0e6f90040cd073e0cf9753657e6e24ec6",
        "commit_message": "SONAR-926 Fix computation of number of lines when the latest line is empty",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c83cb3b0e6f90040cd073e0cf9753657e6e24ec6",
        "buggy_code": "if (c != LINE_FEED) {",
        "fixed_code": "if (c != (char)-1) {",
        "patch": "@@ -77,7 +77,7 @@ Metadata read(File file, Charset encoding) {\n         md5Digest.update(charToBytesUTF(c));\n         i = reader.read();\n       }\n-      if (c != LINE_FEED) {\n+      if (c != (char)-1) {\n         lines++;\n       }\n       String hash = Hex.encodeHexString(md5Digest.digest());"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore;",
        "fixed_code": "package org.sonar.batch.issue.ignore;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.plugins.core.issue.ignore;\n+package org.sonar.batch.issue.ignore;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.pattern;",
        "fixed_code": "package org.sonar.batch.issue.ignore.pattern;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.plugins.core.issue.ignore.pattern;\n+package org.sonar.batch.issue.ignore.pattern;\n \n import com.google.common.collect.Sets;\n import org.apache.commons.lang.builder.ToStringBuilder;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.pattern;",
        "fixed_code": "package org.sonar.batch.issue.ignore.pattern;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.plugins.core.issue.ignore.pattern;\n+package org.sonar.batch.issue.ignore.pattern;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.Sets;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.pattern;",
        "fixed_code": "package org.sonar.batch.issue.ignore.pattern;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.plugins.core.issue.ignore.pattern;\n+package org.sonar.batch.issue.ignore.pattern;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Lists;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.pattern;",
        "fixed_code": "package org.sonar.batch.issue.ignore.pattern;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.plugins.core.issue.ignore.pattern;\n+package org.sonar.batch.issue.ignore.pattern;\n \n import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.Multimap;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.scanner;",
        "fixed_code": "package org.sonar.batch.issue.ignore.pattern;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.plugins.core.issue.ignore.scanner;\n+package org.sonar.batch.issue.ignore.pattern;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "c128fb65044ab2664b459e741d2e793112f540e4",
        "commit_message": "Issue exclusions patterns are now initialized prior to sensor phase",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c128fb65044ab2664b459e741d2e793112f540e4",
        "buggy_code": "package org.sonar.plugins.core.issue.ignore.pattern;",
        "fixed_code": "package org.sonar.batch.issue.ignore.scanner;",
        "patch": "@@ -18,6 +18,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n @ParametersAreNonnullByDefault\n-package org.sonar.plugins.core.issue.ignore.pattern;\n+package org.sonar.batch.issue.ignore.scanner;\n \n import javax.annotation.ParametersAreNonnullByDefault;"
    },
    {
        "commit_id": "df59bd424fed979410efc311472f0357976420a8",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/df59bd424fed979410efc311472f0357976420a8",
        "buggy_code": "assertThat(manager.age(Locale.ENGLISH, 130000)).isEqualTo(\"less than a minute\");",
        "fixed_code": "assertThat(manager.age(Locale.ENGLISH, 10)).isEqualTo(\"less than a minute\");",
        "patch": "@@ -170,7 +170,7 @@ public void should_locate_file_with_missing_locale() {\n \n   @Test\n   public void get_age_with_duration() {\n-    assertThat(manager.age(Locale.ENGLISH, 130000)).isEqualTo(\"less than a minute\");\n+    assertThat(manager.age(Locale.ENGLISH, 10)).isEqualTo(\"less than a minute\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "38f1a444b801ff0020f33232a77b3c8fee7b48af",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38f1a444b801ff0020f33232a77b3c8fee7b48af",
        "buggy_code": "assertThat(manager.age(Locale.ENGLISH, 10)).isEqualTo(\"less than a minute\");",
        "fixed_code": "assertThat(manager.age(Locale.ENGLISH, 130000)).isEqualTo(\"less than a minute\");",
        "patch": "@@ -170,7 +170,7 @@ public void should_locate_file_with_missing_locale() {\n \n   @Test\n   public void get_age_with_duration() {\n-    assertThat(manager.age(Locale.ENGLISH, 10)).isEqualTo(\"less than a minute\");\n+    assertThat(manager.age(Locale.ENGLISH, 130000)).isEqualTo(\"less than a minute\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "e894e5443bc9cc452a0e00914db2afadb8a25fce",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e894e5443bc9cc452a0e00914db2afadb8a25fce",
        "buggy_code": "static Directory create(String relativePathFromBaseDir) {",
        "fixed_code": "public static Directory create(String relativePathFromBaseDir) {",
        "patch": "@@ -131,7 +131,7 @@ public static Directory fromIOFile(java.io.File dir, Project module) {\n    * {@link SensorContext#saveMeasure(Resource, org.sonar.api.measures.Measure)} when resources are already indexed.\n    * Internal use only.\n    */\n-  static Directory create(String relativePathFromBaseDir) {\n+  public static Directory create(String relativePathFromBaseDir) {\n     Directory d = new Directory();\n     String normalizedPath = normalize(relativePathFromBaseDir);\n     d.setKey(normalizedPath);"
    },
    {
        "commit_id": "e894e5443bc9cc452a0e00914db2afadb8a25fce",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e894e5443bc9cc452a0e00914db2afadb8a25fce",
        "buggy_code": "return null;",
        "fixed_code": "return new String[0];",
        "patch": "@@ -46,7 +46,7 @@ public class Project extends Resource implements Component {\n   public static final Language NONE_LANGUAGE = new AbstractLanguage(\"none\", \"None\") {\n     @Override\n     public String[] getFileSuffixes() {\n-      return null;\n+      return new String[0];\n     }\n   };\n "
    },
    {
        "commit_id": "5ee856101612cd046e945529239609f73500e262",
        "commit_message": "SONAR-926 Fix deprecated key of indexed resources",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5ee856101612cd046e945529239609f73500e262",
        "buggy_code": "return javaFile.getKey().equals(\"src/test/java/foo/bar/FooTest.java\")",
        "fixed_code": "return javaFile.getKey().equals(\"src/test/java/foo/bar/FooTest.java\") && javaFile.getDeprecatedKey().equals(\"foo.bar.FooTest\")",
        "patch": "@@ -106,7 +106,7 @@ public void should_index_java_files() throws IOException {\n       @Override\n       public boolean matches(Object arg0) {\n         org.sonar.api.resources.File javaFile = (org.sonar.api.resources.File) arg0;\n-        return javaFile.getKey().equals(\"src/test/java/foo/bar/FooTest.java\")\n+        return javaFile.getKey().equals(\"src/test/java/foo/bar/FooTest.java\") && javaFile.getDeprecatedKey().equals(\"foo.bar.FooTest\")\n           && javaFile.getPath().equals(\"src/test/java/foo/bar/FooTest.java\")\n           && javaFile.getQualifier().equals(Qualifiers.UNIT_TEST_FILE);\n       }"
    },
    {
        "commit_id": "8b61ed0708c261fb4984861589f37b2c138c4ea1",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8b61ed0708c261fb4984861589f37b2c138c4ea1",
        "buggy_code": "String json = requestFactory.post(\"/api/issues/assign\", params);",
        "fixed_code": "String json = requestFactory.post(ASSIGN_URL, params);",
        "patch": "@@ -66,7 +66,7 @@ public Issue setSeverity(String issueKey, String severity) {\n   @Override\n   public Issue assign(String issueKey, @Nullable String assignee) {\n     Map<String, Object> params = EncodingUtils.toMap(\"issue\", issueKey, \"assignee\", assignee);\n-    String json = requestFactory.post(\"/api/issues/assign\", params);\n+    String json = requestFactory.post(ASSIGN_URL, params);\n     return jsonToIssue(json);\n   }\n "
    },
    {
        "commit_id": "0c23daa2178eaab20d78f90cb2a116104e5be9de",
        "commit_message": "SONAR-4785 Revert display of rule name if no issue message by migration of issues without message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0c23daa2178eaab20d78f90cb2a116104e5be9de",
        "buggy_code": "public static final int LAST_VERSION = 496;",
        "fixed_code": "public static final int LAST_VERSION = 497;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 496;\n+  public static final int LAST_VERSION = 497;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "453d6eb279f53cd16ac16fc8f0449430321351b7",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/453d6eb279f53cd16ac16fc8f0449430321351b7",
        "buggy_code": "myBatis = new MyBatis(db, settings, new Logback());",
        "fixed_code": "myBatis = new MyBatis(db, new Logback());",
        "patch": "@@ -107,7 +107,7 @@ protected void before() throws Throwable {\n       commands = DatabaseCommands.forDialect(db.getDialect());\n       tester = new DataSourceDatabaseTester(db.getDataSource());\n \n-      myBatis = new MyBatis(db, settings, new Logback());\n+      myBatis = new MyBatis(db, new Logback());\n       myBatis.start();\n     }\n     commands.truncateDatabase(db.getDataSource());"
    },
    {
        "commit_id": "f01cfd845d078e6b2df8b53c5d00866e16623e09",
        "commit_message": "SONAR-4925 Fix an issue with unexpected exception thrown by proxified objects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f01cfd845d078e6b2df8b53c5d00866e16623e09",
        "buggy_code": "Object result = method.invoke(connection, args);",
        "fixed_code": "Object result = InvocationUtils.invokeQuietly(connection, method, args);",
        "patch": "@@ -36,7 +36,7 @@ class ProfilingConnectionHandler implements InvocationHandler {\n \n   @Override\n   public Object invoke(Object target, Method method, Object[] args) throws Throwable {\n-    Object result = method.invoke(connection, args);\n+    Object result = InvocationUtils.invokeQuietly(connection, method, args);\n     if (\"prepareStatement\".equals(method.getName())) {\n       PreparedStatement statement = (PreparedStatement) result;\n       String sql = (String) args[0];"
    },
    {
        "commit_id": "12c14f0149b0ed09041e5c13fcf12d5cf31b61ea",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/12c14f0149b0ed09041e5c13fcf12d5cf31b61ea",
        "buggy_code": "private void RuleDocumentParser() {",
        "fixed_code": "private RuleDocumentParser() {",
        "patch": "@@ -33,7 +33,7 @@\n \n public class RuleDocumentParser {\n \n-  private void RuleDocumentParser() {\n+  private RuleDocumentParser() {\n     // Utility class\n   }\n "
    },
    {
        "commit_id": "4a5184d1f9883111a6c9db6d188845cbe21ea81a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a5184d1f9883111a6c9db6d188845cbe21ea81a",
        "buggy_code": "activeRuleParams.add(new ActiveRuleParam(this, ruleParameter, key, value));",
        "fixed_code": "activeRuleParams.add(new ActiveRuleParam(this, ruleParameter, value));",
        "patch": "@@ -208,7 +208,7 @@ public void setActiveRuleParams(List<ActiveRuleParam> params) {\n   public ActiveRule setParameter(String key, String value) {\n     RuleParam ruleParameter = rule.getParam(key);\n     if (ruleParameter != null) {\n-      activeRuleParams.add(new ActiveRuleParam(this, ruleParameter, key, value));\n+      activeRuleParams.add(new ActiveRuleParam(this, ruleParameter, value));\n     }\n     return this;\n   }"
    },
    {
        "commit_id": "4a5184d1f9883111a6c9db6d188845cbe21ea81a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4a5184d1f9883111a6c9db6d188845cbe21ea81a",
        "buggy_code": "if (ruleKey.repository().equals(\"manual\")) {",
        "fixed_code": "if (ruleKey.repository().equals(Rule.MANUAL_REPOSITORY_KEY)) {",
        "patch": "@@ -73,7 +73,7 @@ public void handle(Request request, Response response) {\n \n   @CheckForNull\n   private Rule findRule(RuleKey ruleKey) {\n-    if (ruleKey.repository().equals(\"manual\")) {\n+    if (ruleKey.repository().equals(Rule.MANUAL_REPOSITORY_KEY)) {\n       org.sonar.api.rules.Rule rule = ruleFinder.findByKey(ruleKey);\n       if (rule != null) {\n         return new Rule.Builder()"
    },
    {
        "commit_id": "f26c8af03c4790b72ad30ade0cc5e9f9e5f36546",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f26c8af03c4790b72ad30ade0cc5e9f9e5f36546",
        "buggy_code": "public PastSnapshot clone(){",
        "fixed_code": "public PastSnapshot clonePastSnapshot(){",
        "patch": "@@ -107,7 +107,7 @@ private Date getTargetDate() {\n     return targetDate;\n   }\n \n-  public PastSnapshot clone(){\n+  public PastSnapshot clonePastSnapshot(){\n     PastSnapshot clone = new PastSnapshot(mode, targetDate, projectSnapshot);\n     clone.setIndex(index);\n     clone.setModeParameter(modeParameter);"
    },
    {
        "commit_id": "f26c8af03c4790b72ad30ade0cc5e9f9e5f36546",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f26c8af03c4790b72ad30ade0cc5e9f9e5f36546",
        "buggy_code": "PastSnapshot pastSnapshot = projectPastSnapshot.clone();",
        "fixed_code": "PastSnapshot pastSnapshot = projectPastSnapshot.clonePastSnapshot();",
        "patch": "@@ -58,7 +58,7 @@ private void initModulePastSnapshots() {\n     for (PastSnapshot projectPastSnapshot : periodsDefinition.getRootProjectPastSnapshots()) {\n       Snapshot snapshot = findSnapshot(projectPastSnapshot.getProjectSnapshot());\n \n-      PastSnapshot pastSnapshot = projectPastSnapshot.clone();\n+      PastSnapshot pastSnapshot = projectPastSnapshot.clonePastSnapshot();\n       modulePastSnapshots.add(pastSnapshot);\n       // When no snapshot is found, date of the period is null\n       periods.add(new Period(pastSnapshot.getIndex(), snapshot != null ? snapshot.getCreatedAt() : null));"
    },
    {
        "commit_id": "137116eb124a9e271d56d19c48a7bd99d8413098",
        "commit_message": "SONAR-926 fix support of non-fs projects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/137116eb124a9e271d56d19c48a7bd99d8413098",
        "buggy_code": "} else {",
        "fixed_code": "} else if (fileSystem.baseDir() != null) {",
        "patch": "@@ -113,7 +113,7 @@ void index(DefaultModuleFileSystem fileSystem) {\n       // Index only provided files\n       indexFiles(fileSystem, progress, fileSystem.sourceFiles(), InputFile.TYPE_MAIN);\n       indexFiles(fileSystem, progress, fileSystem.testFiles(), InputFile.TYPE_TEST);\n-    } else {\n+    } else if (fileSystem.baseDir() != null) {\n       // index from basedir\n       indexDirectory(fileSystem, progress, fileSystem.baseDir(), InputFile.TYPE_MAIN);\n       indexDirectory(fileSystem, progress, fileSystem.baseDir(), InputFile.TYPE_TEST);"
    },
    {
        "commit_id": "344057340c64db0087497615169112178323e48c",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/344057340c64db0087497615169112178323e48c",
        "buggy_code": "if (decoratedSource != null) {",
        "fixed_code": "if (!decoratedSource.isEmpty()) {",
        "patch": "@@ -66,7 +66,7 @@ public List<String> getSourcesByComponent(String componentKey, @Nullable Integer\n     UserSession.get().checkProjectPermission(UserRole.CODEVIEWER, project.getKey());\n \n     List<String> decoratedSource = sourceDecorator.getDecoratedSourceAsHtml(componentKey, from, to);\n-    if (decoratedSource != null) {\n+    if (!decoratedSource.isEmpty()) {\n       return decoratedSource;\n     } else {\n       return deprecatedSourceDecorator.getSourceAsHtml(componentKey, from, to);"
    },
    {
        "commit_id": "4e357b47ca81641409cb2dc87c23161569bf2080",
        "commit_message": "SONAR-4818 Replace log level from ERROR to DEBUG",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e357b47ca81641409cb2dc87c23161569bf2080",
        "buggy_code": "LOG.error(\"Value selected for the metric should be a number: \" + context);",
        "fixed_code": "LOG.debug(\"Value selected for the metric should be a number: \" + context);",
        "patch": "@@ -62,7 +62,7 @@ public MeasureFilterResult execute(Map<String, Object> filterMap, @Nullable Long\n \n     } catch (NumberFormatException e) {\n       result.setError(MeasureFilterResult.Error.VALUE_SHOULD_BE_A_NUMBER);\n-      LOG.error(\"Value selected for the metric should be a number: \" + context);\n+      LOG.debug(\"Value selected for the metric should be a number: \" + context);\n     } catch (Exception e) {\n       result.setError(MeasureFilterResult.Error.UNKNOWN);\n       LOG.error(\"Fail to execute measure filter: \" + context, e);"
    },
    {
        "commit_id": "da8f8285fe77723cf7b07c644366c86b25ca67b1",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/da8f8285fe77723cf7b07c644366c86b25ca67b1",
        "buggy_code": "public AbstractDirectoriesDecorator(Language language) {//NOSONAR this unused parameter is kept for backward-compatibility of API",
        "fixed_code": "public AbstractDirectoriesDecorator(Language language) {",
        "patch": "@@ -36,7 +36,7 @@ public abstract class AbstractDirectoriesDecorator implements Decorator {\n   /**\n    * @param language this will be use to defined whether the decorator should be executed on a project\n    */\n-  public AbstractDirectoriesDecorator(Language language) {//NOSONAR this unused parameter is kept for backward-compatibility of API\n+  public AbstractDirectoriesDecorator(Language language) {\n   }\n \n   /**"
    },
    {
        "commit_id": "da8f8285fe77723cf7b07c644366c86b25ca67b1",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/da8f8285fe77723cf7b07c644366c86b25ca67b1",
        "buggy_code": "private Integer id;",
        "fixed_code": "private final Integer id;",
        "patch": "@@ -34,7 +34,7 @@\n public class DefaultRule implements Rule {\n \n   private final RuleKey key;\n-  private Integer id;\n+  private final Integer id;\n   private final String name, severity, description, metadata;\n   private final RuleStatus status;\n   private final Map<String, RuleParam> params;"
    },
    {
        "commit_id": "4e7951c48812616165f2c4c546f39c61cb51053b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4e7951c48812616165f2c4c546f39c61cb51053b",
        "buggy_code": "protected synchronized Class<?> loadClass(String s, boolean b) throws ClassNotFoundException {",
        "fixed_code": "protected synchronized Class loadClass(String s, boolean b) throws ClassNotFoundException {",
        "patch": "@@ -60,7 +60,7 @@ public URL getResource(String name) {\n   }\n \n   @Override\n-  protected synchronized Class<?> loadClass(String s, boolean b) throws ClassNotFoundException {\n+  protected synchronized Class loadClass(String s, boolean b) throws ClassNotFoundException {\n     throw new UnsupportedOperationException(\"I18n classloader does support only resources, but not classes\");\n   }\n "
    },
    {
        "commit_id": "8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "buggy_code": "CharacteristicDto selectById(Integer id);",
        "fixed_code": "CharacteristicDto selectById(int id);",
        "patch": "@@ -30,7 +30,7 @@ public interface CharacteristicMapper {\n \n   CharacteristicDto selectByKey(String key);\n \n-  CharacteristicDto selectById(Integer id);\n+  CharacteristicDto selectById(int id);\n \n   CharacteristicDto selectByRuleId(Integer ruleId);\n "
    },
    {
        "commit_id": "8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "buggy_code": "private Map<String, String> params;",
        "fixed_code": "private final Map<String, String> params;",
        "patch": "@@ -49,7 +49,7 @@ public class ChartParameters {\n   public static final int DEFAULT_HEIGHT = 200;\n \n \n-  private Map<String, String> params;\n+  private final Map<String, String> params;\n \n   /**\n    * Creates a ChartParameter based on a list of parameters"
    },
    {
        "commit_id": "8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "buggy_code": "package org.sonar.server.ui;",
        "fixed_code": "package org.sonar.server.user;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.ui;\n+package org.sonar.server.user;\n \n import org.sonar.api.security.LoginPasswordAuthenticator;\n import org.sonar.api.security.SecurityRealm;"
    },
    {
        "commit_id": "8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "buggy_code": "package org.sonar.server.ui;",
        "fixed_code": "package org.sonar.server.user;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.ui;\n+package org.sonar.server.user;\n \n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;"
    },
    {
        "commit_id": "8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ee22cbabf8142c29b510bc82bfb726b3b215520",
        "buggy_code": "package org.sonar.server.ui;",
        "fixed_code": "package org.sonar.server.user;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.ui;\n+package org.sonar.server.user;\n \n import org.junit.Test;\n import org.sonar.api.security.LoginPasswordAuthenticator;"
    },
    {
        "commit_id": "936c27bf5f6e063d4c64163177fa4dadb98ced9d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/936c27bf5f6e063d4c64163177fa4dadb98ced9d",
        "buggy_code": "public String apply(@Nullable Action input) {",
        "fixed_code": "public String apply(Action input) {",
        "patch": "@@ -140,7 +140,7 @@ public List<String> formatChangelog(FieldDiffs diffs) {\n   public List<String> listPluginActions() {\n     return newArrayList(Iterables.transform(actionService.listAllActions(), new Function<Action, String>() {\n       @Override\n-      public String apply(@Nullable Action input) {\n+      public String apply(Action input) {\n         return input.key();\n       }\n     }));"
    },
    {
        "commit_id": "936c27bf5f6e063d4c64163177fa4dadb98ced9d",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/936c27bf5f6e063d4c64163177fa4dadb98ced9d",
        "buggy_code": "private void badRequestIfNullResult(Object component, String objectType, String objectKey) {",
        "fixed_code": "private void badRequestIfNullResult(@Nullable Object component, String objectType, String objectKey) {",
        "patch": "@@ -218,7 +218,7 @@ private Long getComponentId(String componentKey) {\n     }\n   }\n \n-  private void badRequestIfNullResult(Object component, String objectType, String objectKey) {\n+  private void badRequestIfNullResult(@Nullable Object component, String objectType, String objectKey) {\n     if (component == null) {\n       throw new BadRequestException(String.format(NOT_FOUND_FORMAT, objectType, objectKey));\n     }"
    },
    {
        "commit_id": "71e4863b5b198fa3bcbae1ef165526bac507222b",
        "commit_message": "SONAR-4581 Fix commit 586eb4f (use plugin key instead of JAR name)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e4863b5b198fa3bcbae1ef165526bac507222b",
        "buggy_code": "String PREVIEW_EXCLUDE_PLUGINS_DEFAULT_VALUE = \"buildstability,devcockpit,pdfreport,report,scmactivity,views,jira,build-breaker\";",
        "fixed_code": "String PREVIEW_EXCLUDE_PLUGINS_DEFAULT_VALUE = \"buildstability,devcockpit,pdfreport,report,scmactivity,views,jira,buildbreaker\";",
        "patch": "@@ -502,7 +502,7 @@ public interface CoreProperties {\n    * @since 4.0\n    */\n   String PREVIEW_EXCLUDE_PLUGINS = \"sonar.preview.excludePlugins\";\n-  String PREVIEW_EXCLUDE_PLUGINS_DEFAULT_VALUE = \"buildstability,devcockpit,pdfreport,report,scmactivity,views,jira,build-breaker\";\n+  String PREVIEW_EXCLUDE_PLUGINS_DEFAULT_VALUE = \"buildstability,devcockpit,pdfreport,report,scmactivity,views,jira,buildbreaker\";\n \n   /**\n    * @since 4.0"
    },
    {
        "commit_id": "4f065283795e1146bbdeff5e164b3f0a69a89466",
        "commit_message": "SONAR-926 Fix regression after renaming of InputFile type SOURCE => MAIN",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4f065283795e1146bbdeff5e164b3f0a69a89466",
        "buggy_code": "query.on(InputFile.ATTRIBUTE_TYPE, type.name());",
        "fixed_code": "query.on(InputFile.ATTRIBUTE_TYPE, type.typeValue());",
        "patch": "@@ -50,7 +50,7 @@ public class FileQuery {\n   public static FileQuery on(FileType... types) {\n     FileQuery query = new FileQuery();\n     for (FileType type : types) {\n-      query.on(InputFile.ATTRIBUTE_TYPE, type.name());\n+      query.on(InputFile.ATTRIBUTE_TYPE, type.typeValue());\n     }\n     return query;\n   }"
    },
    {
        "commit_id": "1215bbe2d4569aab44e1bd2503e7d0897c7e3180",
        "commit_message": "SONAR-926 fix metric PROFILE on single-lang modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1215bbe2d4569aab44e1bd2503e7d0897c7e3180",
        "buggy_code": "Measure measure = new Measure(CoreMetrics.PROFILE, qProfile.name());",
        "fixed_code": "Measure measure = new Measure(CoreMetrics.PROFILE, qProfile.name()).setValue((double)qProfile.id());",
        "patch": "@@ -57,7 +57,7 @@ public void analyse(Project project, SensorContext context) {\n       String language = moduleLanguages.keys().iterator().next();\n       ModuleQProfiles.QProfile qProfile = moduleQProfiles.findByLanguage(language);\n       if (qProfile != null) {\n-        Measure measure = new Measure(CoreMetrics.PROFILE, qProfile.name());\n+        Measure measure = new Measure(CoreMetrics.PROFILE, qProfile.name()).setValue((double)qProfile.id());\n         Measure measureVersion = new Measure(CoreMetrics.PROFILE_VERSION, qProfile.version().doubleValue());\n         context.saveMeasure(measure);\n         context.saveMeasure(measureVersion);"
    },
    {
        "commit_id": "19aa4b81f42f8f6dd3a5ad55bd9e148108716098",
        "commit_message": "SONAR-926 fix RulesProfile#getLanguage() on single-lang modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19aa4b81f42f8f6dd3a5ad55bd9e148108716098",
        "buggy_code": "return singleLanguageProfile.getName();",
        "fixed_code": "return singleLanguageProfile.getLanguage();",
        "patch": "@@ -80,7 +80,7 @@ public String getLanguage() {\n       LOG.debug(\"Please update your plugin to support multi-language analysis\", new SonarException(\"Please update your plugin to support multi-language analysis\"));\n       return \"\";\n     }\n-    return singleLanguageProfile.getName();\n+    return singleLanguageProfile.getLanguage();\n   }\n \n   public RulesProfile getProfileByLanguage(String languageKey) {"
    },
    {
        "commit_id": "7112f474914ab190df8964f07da1e21a201eb34a",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7112f474914ab190df8964f07da1e21a201eb34a",
        "buggy_code": "public List<? extends RuleParam> params() {",
        "fixed_code": "public List<RuleParam> params() {",
        "patch": "@@ -184,7 +184,7 @@ public List<String> adminTags() {\n     return adminTags;\n   }\n \n-  public List<? extends RuleParam> params() {\n+  public List<RuleParam> params() {\n     return params;\n   }\n "
    },
    {
        "commit_id": "58f7ccdb23474f33c7d61c60f6e03cdb3ad67a5b",
        "commit_message": "SONAR-926 fix loading of ModuleRules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58f7ccdb23474f33c7d61c60f6e03cdb3ad67a5b",
        "buggy_code": "import org.sonar.batch.RulesProfileWrapper;",
        "fixed_code": "import org.sonar.batch.rule.RulesProfileWrapper;",
        "patch": "@@ -30,7 +30,7 @@\n import org.sonar.api.measures.Metric;\n import org.sonar.api.profiles.RulesProfile;\n import org.sonar.api.resources.Project;\n-import org.sonar.batch.RulesProfileWrapper;\n+import org.sonar.batch.rule.RulesProfileWrapper;\n \n import java.util.List;\n "
    },
    {
        "commit_id": "29f3ccd0bd31c1fc869e46f28d5e7f4a065e6e35",
        "commit_message": "IssueShowWS : Rename action 'severity' by 'set_severity' and fix test on comments",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29f3ccd0bd31c1fc869e46f28d5e7f4a065e6e35",
        "buggy_code": "actions.add(\"severity\");",
        "fixed_code": "actions.add(\"set_severity\");",
        "patch": "@@ -156,7 +156,7 @@ private List<String> actions(DefaultIssue issue) {\n         }\n         actions.add(\"plan\");\n         if (UserSession.get().hasProjectPermission(UserRole.ISSUE_ADMIN, issue.projectKey())) {\n-          actions.add(\"severity\");\n+          actions.add(\"set_severity\");\n         }\n         for (Action action : actionService.listAvailableActions(issue)) {\n           actions.add(action.key());"
    },
    {
        "commit_id": "d65773c6bf2ac93ae6081297fa130eca85fe9e91",
        "commit_message": "SONAR-5010 improve testability of web service and fix media type of response",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d65773c6bf2ac93ae6081297fa130eca85fe9e91",
        "buggy_code": "import org.sonar.server.ws.WsTester;",
        "fixed_code": "import org.sonar.api.server.ws.WsTester;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.junit.Test;\n import org.sonar.api.server.ws.WebService;\n-import org.sonar.server.ws.WsTester;\n+import org.sonar.api.server.ws.WsTester;\n \n import static org.fest.assertions.Assertions.assertThat;\n import static org.mockito.Mockito.mock;"
    },
    {
        "commit_id": "21e68cde8a2b1f4d8d89105be49ef2787d151c2b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/21e68cde8a2b1f4d8d89105be49ef2787d151c2b",
        "buggy_code": "private Map<String, String> properties = Maps.newHashMap();",
        "fixed_code": "private final Map<String, String> properties = Maps.newHashMap();",
        "patch": "@@ -61,7 +61,7 @@ public static class Builder {\n     private String qualifier;\n     private String iconPath;\n     private boolean hasSourceCode = false;\n-    private Map<String, String> properties = Maps.newHashMap();\n+    private final Map<String, String> properties = Maps.newHashMap();\n \n     /**\n      * Creates a new {@link Builder}"
    },
    {
        "commit_id": "00a8307c85a5a188cf9d25024b34e2a128e944bb",
        "commit_message": "SONAR-4326 Fix error message on tag validation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/00a8307c85a5a188cf9d25024b34e2a128e944bb",
        "buggy_code": "throw new IllegalArgumentException(String.format(\"Whitespaces are not allowed in rule tags: '%s'\", tag));",
        "fixed_code": "throw new IllegalArgumentException(String.format(\"Rule tags accept only the following characters: a-z, 0-9, '+', '-', '#', '.' - '%s'\", tag));",
        "patch": "@@ -40,7 +40,7 @@ public static boolean isValid(String tag) {\n \n   public static void validate(String tag) {\n     if (!isValid(tag)) {\n-      throw new IllegalArgumentException(String.format(\"Whitespaces are not allowed in rule tags: '%s'\", tag));\n+      throw new IllegalArgumentException(String.format(\"Rule tags accept only the following characters: a-z, 0-9, '+', '-', '#', '.' - '%s'\", tag));\n     }\n   }\n }"
    },
    {
        "commit_id": "2efda9a119ba00e648fd80497713af1c39f4460e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2efda9a119ba00e648fd80497713af1c39f4460e",
        "buggy_code": "ProfilesManager profilesManager = new ProfilesManager(session, null, dryRunCache);",
        "fixed_code": "ProfilesManager profilesManager = new ProfilesManager(session, dryRunCache);",
        "patch": "@@ -98,7 +98,7 @@ public void exportXml(SonarConfig sonarConfig) {\n   public void importXml(SonarConfig sonarConfig) {\n     if (sonarConfig.getProfiles() != null && !sonarConfig.getProfiles().isEmpty()) {\n       LoggerFactory.getLogger(getClass()).info(\"Delete profiles\");\n-      ProfilesManager profilesManager = new ProfilesManager(session, null, dryRunCache);\n+      ProfilesManager profilesManager = new ProfilesManager(session, dryRunCache);\n       profilesManager.deleteAllProfiles();\n \n       RulesDao rulesDao = new RulesDao(session);"
    },
    {
        "commit_id": "bb066b65f2e12e615ba806dac6577aaeff7693ba",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bb066b65f2e12e615ba806dac6577aaeff7693ba",
        "buggy_code": "public QProfile newProfile(String name, String language, String parent, boolean failIfAlreadyExists, UserSession userSession, SqlSession session) {",
        "fixed_code": "public QProfile newProfile(String name, String language, @Nullable String parent, boolean failIfAlreadyExists, UserSession userSession, SqlSession session) {",
        "patch": "@@ -92,7 +92,7 @@ public QProfile newProfile(String name, String language, boolean failIfAlreadyEx\n     return newProfile(name, language, null, failIfAlreadyExists, userSession, session);\n   }\n \n-  public QProfile newProfile(String name, String language, String parent, boolean failIfAlreadyExists, UserSession userSession, SqlSession session) {\n+  public QProfile newProfile(String name, String language, @Nullable String parent, boolean failIfAlreadyExists, UserSession userSession, SqlSession session) {\n     checkPermission(userSession);\n     if (failIfAlreadyExists) {\n       checkNotAlreadyExists(name, language, session);"
    },
    {
        "commit_id": "5303e2eaece1d802fe7e65480e7a40fad9a86580",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5303e2eaece1d802fe7e65480e7a40fad9a86580",
        "buggy_code": "if (defaultProfile != null && defaultProfile.id().equals(profile.id())) {",
        "fixed_code": "if (defaultProfile != null && (defaultProfile.id() == profile.id())) {",
        "patch": "@@ -138,7 +138,7 @@ public List<QProfile> ancestors(QProfile profile) {\n \n   public boolean isDeletable(QProfile profile, SqlSession session) {\n     QProfile defaultProfile = defaultProfile(profile.language(), session);\n-    if (defaultProfile != null && defaultProfile.id().equals(profile.id())) {\n+    if (defaultProfile != null && (defaultProfile.id() == profile.id())) {\n       return false;\n     }\n     return countChildren(profile, session) == 0;"
    },
    {
        "commit_id": "2713ed5e8afdaa59d81a2bc4288fc360008c69b2",
        "commit_message": "SONAR-4923 Fix hard coded profile id",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2713ed5e8afdaa59d81a2bc4288fc360008c69b2",
        "buggy_code": "operations.setDefaultProfile(1, UserSession.get());",
        "fixed_code": "operations.setDefaultProfile(profileId, UserSession.get());",
        "patch": "@@ -126,7 +126,7 @@ public void renameProfile(int profileId, String newName) {\n   }\n \n   public void setDefaultProfile(int profileId) {\n-    operations.setDefaultProfile(1, UserSession.get());\n+    operations.setDefaultProfile(profileId, UserSession.get());\n   }\n \n   @CheckForNull"
    },
    {
        "commit_id": "cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "commit_message": "SONAR-4923 Fix issue where active rule parent id where not updated in ES when setting parent profile",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "buggy_code": "Integer parentId = rule.parentId();",
        "fixed_code": "Integer parentId = rule.activeRuleParentId();",
        "patch": "@@ -282,7 +282,7 @@ public QProfileRule deleteActiveRuleNote(int activeRuleId) {\n \n   @CheckForNull\n   public QProfileRule parentProfileRule(QProfileRule rule) {\n-    Integer parentId = rule.parentId();\n+    Integer parentId = rule.activeRuleParentId();\n     if (parentId != null) {\n       return rules.findByActiveRuleId(parentId);\n     }"
    },
    {
        "commit_id": "cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "commit_message": "SONAR-4923 Fix issue where active rule parent id where not updated in ES when setting parent profile",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "buggy_code": "public static final String FIELD_PARENT_ID = \"parentId\";",
        "fixed_code": "public static final String FIELD_ACTIVE_RULE_PARENT_ID = \"activeRuleParentId\";",
        "patch": "@@ -23,10 +23,10 @@\n public class ActiveRuleDocument {\n \n   public static final String FIELD_ID = \"id\";\n-  public static final String FIELD_PARENT_ID = \"parentId\";\n   public static final String FIELD_SEVERITY = \"severity\";\n   public static final String FIELD_PROFILE_ID = \"profileId\";\n   public static final String FIELD_INHERITANCE = \"inheritance\";\n+  public static final String FIELD_ACTIVE_RULE_PARENT_ID = \"activeRuleParentId\";\n   public static final String FIELD_PARAMS = \"params\";\n \n   public static final String FIELD_NOTE = \"note\";"
    },
    {
        "commit_id": "cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "commit_message": "SONAR-4923 Fix issue where active rule parent id where not updated in ES when setting parent profile",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cd44bc8dd3a6035abdf30ba4ab3e011c7f0a18ec",
        "buggy_code": "public static final String FIELD_PARENT_KEY = \"parentKey\";",
        "fixed_code": "public static final String FIELD_TEMPLATE_ID = \"templateId\";",
        "patch": "@@ -30,7 +30,7 @@ public final class RuleDocument {\n   public static final String FIELD_STATUS = \"status\";\n   public static final String FIELD_SEVERITY = \"severity\";\n   public static final String FIELD_REPOSITORY_KEY = \"repositoryKey\";\n-  public static final String FIELD_PARENT_KEY = \"parentKey\";\n+  public static final String FIELD_TEMPLATE_ID = \"templateId\";\n   public static final String FIELD_DESCRIPTION = \"description\";\n   public static final String FIELD_NAME = \"name\";\n   public static final String FIELD_LANGUAGE = \"language\";"
    },
    {
        "commit_id": "f518d075e1034e6af936babfa9c3fb6583469987",
        "commit_message": "SONAR-4908 fix merge",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f518d075e1034e6af936babfa9c3fb6583469987",
        "buggy_code": "public String getName() {",
        "fixed_code": "public String getName(boolean b) {",
        "patch": "@@ -72,7 +72,7 @@ public String getKey() {\n     /**\n      * Kept for backward-compatibility in Ruby code\n      */\n-    public String getName() {\n+    public String getName(boolean b) {\n       return name;\n     }\n "
    },
    {
        "commit_id": "eda36f17ec11950bc73719dd84677591e92f8888",
        "commit_message": "SONAR-3024 Fix SonarEngine to work with new resource keys",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eda36f17ec11950bc73719dd84677591e92f8888",
        "buggy_code": "sonarEngine = new SonarEngine(indexFactory, null, null, null);",
        "fixed_code": "sonarEngine = new SonarEngine(indexFactory, null, null);",
        "patch": "@@ -42,7 +42,7 @@ public class CpdSensorTest {\n   @Before\n   public void setUp() {\n     IndexFactory indexFactory = mock(IndexFactory.class);\n-    sonarEngine = new SonarEngine(indexFactory, null, null, null);\n+    sonarEngine = new SonarEngine(indexFactory, null, null);\n     sonarBridgeEngine = new SonarBridgeEngine(indexFactory, null, null);\n     settings = new Settings(new PropertyDefinitions(CpdPlugin.class));\n     sensor = new CpdSensor(sonarEngine, sonarBridgeEngine, settings);"
    },
    {
        "commit_id": "1af08a6f1cac582c97edd2dd13ec1a8964bf18d4",
        "commit_message": "Fix build",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1af08a6f1cac582c97edd2dd13ec1a8964bf18d4",
        "buggy_code": "return String.format(\"%s/%s\", WebServiceEngine.BASE_PATH, key);",
        "fixed_code": "return String.format(\"ws/%s\", key);",
        "patch": "@@ -132,7 +132,7 @@ public String key() {\n     }\n \n     public String path() {\n-      return String.format(\"%s/%s\", WebServiceEngine.BASE_PATH, key);\n+      return String.format(\"ws/%s\", key);\n     }\n \n     @CheckForNull"
    },
    {
        "commit_id": "a35c03b255dac26885347b0c5afed10a8ff6b1cc",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a35c03b255dac26885347b0c5afed10a8ff6b1cc",
        "buggy_code": "assertThat(e).hasMessage(\"The parameter 'NPE' is declared several times on the rule [repository=findbugs, key=NPE]\");",
        "fixed_code": "assertThat(e).hasMessage(\"The parameter 'level' is declared several times on the rule [repository=findbugs, key=NPE]\");",
        "patch": "@@ -173,7 +173,7 @@ public void fail_if_duplicated_rule_param_keys() {\n       rule.newParam(\"level\");\n       fail();\n     } catch (IllegalArgumentException e) {\n-      assertThat(e).hasMessage(\"The parameter 'NPE' is declared several times on the rule [repository=findbugs, key=NPE]\");\n+      assertThat(e).hasMessage(\"The parameter 'level' is declared several times on the rule [repository=findbugs, key=NPE]\");\n     }\n   }\n "
    },
    {
        "commit_id": "1524f7aa202253fe7bf8512135e422d5418080b6",
        "commit_message": "Fix quality flaws in class SearchIndex",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1524f7aa202253fe7bf8512135e422d5418080b6",
        "buggy_code": "@Test(expected = IllegalArgumentException.class)",
        "fixed_code": "@Test(expected = RuntimeException.class)",
        "patch": "@@ -103,7 +103,7 @@ public void should_fail_to_load_inexistent_mapping() {\n     searchIndex.addMappingFromClasspath(\"unchecked\", \"unchecked\", resourcePath);\n   }\n \n-  @Test(expected = IllegalArgumentException.class)\n+  @Test(expected = RuntimeException.class)\n   public void should_fail_to_load_malformed_mapping() {\n     String resourcePath = \"/org/sonar/server/search/SearchIndexTest/malformed.json\";\n "
    },
    {
        "commit_id": "ac40c604939422e059f4957f6006acab60de39cd",
        "commit_message": "SONAR-4326 Fix bad merge in DB migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ac40c604939422e059f4957f6006acab60de39cd",
        "buggy_code": "public static final int LAST_VERSION = 486;",
        "fixed_code": "public static final int LAST_VERSION = 487;",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 486;\n+  public static final int LAST_VERSION = 487;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "cba6dcf8b735ca9da345538c8308318c040ec899",
        "commit_message": "SONAR-4896 Display full path to ES data directory in error message",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cba6dcf8b735ca9da345538c8308318c040ec899",
        "buggy_code": "String.format(\"Elasticsearch index is corrupt, please delete directory '${SonarQubeHomeDirectory}/%s' and relaunch the SonarQube server.\", DATA_DIR));",
        "fixed_code": "String.format(\"Elasticsearch index is corrupt, please delete directory '%s/%s' and relaunch the SonarQube server.\", fileSystem.getHomeDir().getAbsolutePath(), DATA_DIR));",
        "patch": "@@ -93,7 +93,7 @@ public void start() {\n       .execute().actionGet()\n       .getStatus() == ClusterHealthStatus.RED) {\n       throw new IllegalStateException(\n-        String.format(\"Elasticsearch index is corrupt, please delete directory '${SonarQubeHomeDirectory}/%s' and relaunch the SonarQube server.\", DATA_DIR));\n+        String.format(\"Elasticsearch index is corrupt, please delete directory '%s/%s' and relaunch the SonarQube server.\", fileSystem.getHomeDir().getAbsolutePath(), DATA_DIR));\n     }\n \n     LOG.info(\"Elasticsearch started\");"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public static List<?> getExtensions() {",
        "fixed_code": "public static List getExtensions() {",
        "patch": "@@ -34,7 +34,7 @@ private IgnoreIssuesPlugin() {\n     // static extension declaration only\n   }\n \n-  public static List<?> getExtensions() {\n+  public static List getExtensions() {\n     ImmutableList.Builder<Object> extensions = ImmutableList.builder();\n \n     extensions.addAll(IgnoreIssuesConfiguration.getPropertyDefinitions());"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public static List<? extends PropertyDefinition> getPropertyDefinitions() {",
        "fixed_code": "public static List<PropertyDefinition> getPropertyDefinitions() {",
        "patch": "@@ -95,7 +95,7 @@ final void initPatterns() {\n     resourcePatterns = builder.build();\n   }\n \n-  public static List<? extends PropertyDefinition> getPropertyDefinitions() {\n+  public static List<PropertyDefinition> getPropertyDefinitions() {\n     return ImmutableList.of(\n       PropertyDefinition.builder(PROPERTY_COVERAGE_EXCLUSIONS)\n         .category(CoreProperties.CATEGORY_EXCLUSIONS)"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public List<?> getExtensions() {",
        "fixed_code": "public List getExtensions() {",
        "patch": "@@ -33,7 +33,7 @@\n \n public final class CpdPlugin extends SonarPlugin {\n \n-  public List<?> getExtensions() {\n+  public List getExtensions() {\n     return ImmutableList.of(\n       PropertyDefinition.builder(CoreProperties.CPD_CROSS_RPOJECT)\n         .defaultValue(CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE + \"\")"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public List<?> getExtensions() {",
        "fixed_code": "public List getExtensions() {",
        "patch": "@@ -26,7 +26,7 @@\n import java.util.List;\n \n public class EmailNotificationsPlugin extends SonarPlugin {\n-  public List<?> getExtensions() {\n+  public List getExtensions() {\n     return ImmutableList.of(\n       EmailNotificationChannel.class,\n "
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public List<?> getExtensions() {",
        "fixed_code": "public List getExtensions() {",
        "patch": "@@ -26,7 +26,7 @@\n \n public final class EnglishPackPlugin extends SonarPlugin {\n \n-  public List<?> getExtensions() {\n+  public List getExtensions() {\n     return Collections.emptyList();\n   }\n }"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public static List<? extends PropertyDefinition> getPropertyDefinitions() {",
        "fixed_code": "public static List<PropertyDefinition> getPropertyDefinitions() {",
        "patch": "@@ -196,7 +196,7 @@ private PastSnapshot findByDays(Snapshot projectSnapshot, String property) {\n     }\n   }\n \n-  public static List<? extends PropertyDefinition> getPropertyDefinitions() {\n+  public static List<PropertyDefinition> getPropertyDefinitions() {\n     return ImmutableList.of(\n       PropertyDefinition.builder(CoreProperties.TIMEMACHINE_PERIOD_PREFIX + 1)\n         .name(\"Period 1\")"
    },
    {
        "commit_id": "8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8655f86fc33e92fabf3eedaad886e218f5e3bf85",
        "buggy_code": "public List<?> getExtensions() {",
        "fixed_code": "public List getExtensions() {",
        "patch": "@@ -49,7 +49,7 @@ Map<PluginMetadata, Plugin> newPlugin(final Object... extensions) {\n     Map<PluginMetadata, Plugin> result = Maps.newHashMap();\n     result.put(metadata,\n       new SonarPlugin() {\n-        public List<?> getExtensions() {\n+        public List getExtensions() {\n           return Arrays.asList(extensions);\n         }\n       }"
    },
    {
        "commit_id": "720ecca97f6fff64df514446fc6fc84d6242f15f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/720ecca97f6fff64df514446fc6fc84d6242f15f",
        "buggy_code": "&& profile.getAlerts().size() > 0",
        "fixed_code": "&& !profile.getAlerts().isEmpty()",
        "patch": "@@ -78,7 +78,7 @@ public List<Metric> dependsUponMetrics() {\n   public boolean shouldExecuteOnProject(Project project) {\n     return profile != null\n         && profile.getAlerts() != null\n-        && profile.getAlerts().size() > 0\n+        && !profile.getAlerts().isEmpty()\n         && ResourceUtils.isRootProject(project);\n   }\n "
    },
    {
        "commit_id": "720ecca97f6fff64df514446fc6fc84d6242f15f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/720ecca97f6fff64df514446fc6fc84d6242f15f",
        "buggy_code": "return profile != null && profile.getAlerts() != null && profile.getAlerts().size() > 0;",
        "fixed_code": "return profile != null && profile.getAlerts() != null && !profile.getAlerts().isEmpty();",
        "patch": "@@ -46,7 +46,7 @@ public GenerateAlertEvents(RulesProfile profile, TimeMachine timeMachine, Notifi\n   }\n \n   public boolean shouldExecuteOnProject(Project project) {\n-    return profile != null && profile.getAlerts() != null && profile.getAlerts().size() > 0;\n+    return profile != null && profile.getAlerts() != null && !profile.getAlerts().isEmpty();\n   }\n \n   @DependsUpon"
    },
    {
        "commit_id": "720ecca97f6fff64df514446fc6fc84d6242f15f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/720ecca97f6fff64df514446fc6fc84d6242f15f",
        "buggy_code": "if (reactor.getProjects().size() > 0 && StringUtils.isNotBlank(reactor.getProjects().get(0).getKey())) {",
        "fixed_code": "if (!reactor.getProjects().isEmpty() && StringUtils.isNotBlank(reactor.getProjects().get(0).getKey())) {",
        "patch": "@@ -58,7 +58,7 @@ public ProjectExclusions(Settings settings, ProjectReactor reactor, ProjectSetti\n   }\n \n   public void apply() {\n-    if (reactor.getProjects().size() > 0 && StringUtils.isNotBlank(reactor.getProjects().get(0).getKey())) {\n+    if (!reactor.getProjects().isEmpty() && StringUtils.isNotBlank(reactor.getProjects().get(0).getKey())) {\n       LOG.info(\"Apply project exclusions\");\n       for (ProjectDefinition project : reactor.getProjects()) {\n         if (isExcluded(key(project), project == reactor.getRoot())) {"
    },
    {
        "commit_id": "720ecca97f6fff64df514446fc6fc84d6242f15f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/720ecca97f6fff64df514446fc6fc84d6242f15f",
        "buggy_code": "} while (cycleDetector.getCycles().size() != 0);",
        "fixed_code": "} while (!cycleDetector.getCycles().isEmpty());",
        "patch": "@@ -55,7 +55,7 @@ public IncrementalCyclesAndFESSolver(DirectedGraphAccessor<V, ? extends Edge> gr\n       cycles.addAll(cycleDetector.getCycles());\n       solver = new MinimumFeedbackEdgeSetSolver(cycles);\n       edgesToExclude = solver.getEdges();\n-    } while (cycleDetector.getCycles().size() != 0);\n+    } while (!cycleDetector.getCycles().isEmpty());\n   }\n \n   public int getWeightOfFeedbackEdgeSet() {"
    },
    {
        "commit_id": "720ecca97f6fff64df514446fc6fc84d6242f15f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/720ecca97f6fff64df514446fc6fc84d6242f15f",
        "buggy_code": "if (persistedRule.getParams() != null && persistedRule.getParams().size() > 0) {",
        "fixed_code": "if (persistedRule.getParams() != null && !persistedRule.getParams().isEmpty()) {",
        "patch": "@@ -223,7 +223,7 @@ private void updateParameters(Rule persistedRule, Rule rule) {\n   }\n \n   private void deleteDeprecatedParameters(Rule persistedRule, Rule rule) {\n-    if (persistedRule.getParams() != null && persistedRule.getParams().size() > 0) {\n+    if (persistedRule.getParams() != null && !persistedRule.getParams().isEmpty()) {\n       for (Iterator<RuleParam> it = persistedRule.getParams().iterator(); it.hasNext(); ) {\n         RuleParam persistedParam = it.next();\n         if (rule.getParam(persistedParam.getKey()) == null) {"
    },
    {
        "commit_id": "8e2428ab161d64964e65e434ac785222a0163bc9",
        "commit_message": "SONAR-4776 Fix new technical debt calculation by using project analysis date in changelog instead of technical date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8e2428ab161d64964e65e434ac785222a0163bc9",
        "buggy_code": "issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : oldValue, value != null ? value.toLong() : null);",
        "fixed_code": "issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : null, value != null ? value.toLong() : null);",
        "patch": "@@ -204,7 +204,7 @@ public boolean setTechnicalDebt(DefaultIssue issue, @Nullable WorkDayDuration va\n     WorkDayDuration oldValue = issue.technicalDebt();\n     if (!Objects.equal(value, oldValue)) {\n       issue.setTechnicalDebt(value);\n-      issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : oldValue, value != null ? value.toLong() : null);\n+      issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : null, value != null ? value.toLong() : null);\n       issue.setUpdateDate(context.date());\n       issue.setChanged(true);\n       return true;"
    },
    {
        "commit_id": "568e5ddf9c1f805f269055d20b1601ea58f01304",
        "commit_message": "Fix HTTP failure during server startup",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/568e5ddf9c1f805f269055d20b1601ea58f01304",
        "buggy_code": "DatabaseSessionFactory sessionFactory = Platform.getInstance().getContainer().getComponentByType(DatabaseSessionFactory.class);",
        "fixed_code": "DatabaseSessionFactory sessionFactory = Platform.component(DatabaseSessionFactory.class);",
        "patch": "@@ -35,7 +35,7 @@ public void init(FilterConfig filterConfig) throws ServletException {\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n     chain.doFilter(request, response);\n \n-    DatabaseSessionFactory sessionFactory = Platform.getInstance().getContainer().getComponentByType(DatabaseSessionFactory.class);\n+    DatabaseSessionFactory sessionFactory = Platform.component(DatabaseSessionFactory.class);\n     if (sessionFactory != null) {\n       sessionFactory.clear();\n     }"
    },
    {
        "commit_id": "c4ed21e22f01c536dbbe53d4ad9a76ba0b1ab466",
        "commit_message": "SONAR-4985 Fix persistence of file hashes when sonar.branch is used",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c4ed21e22f01c536dbbe53d4ad9a76ba0b1ab466",
        "buggy_code": "componentDataCache.setStringData(project.getKey(), SnapshotDataTypes.FILE_HASHES, data);",
        "fixed_code": "componentDataCache.setStringData(project.key(), SnapshotDataTypes.FILE_HASHES, data);",
        "patch": "@@ -65,7 +65,7 @@ public void analyse(Project project, SensorContext context) {\n     }\n     if (!map.isEmpty()) {\n       String data = KeyValueFormat.format(map);\n-      componentDataCache.setStringData(project.getKey(), SnapshotDataTypes.FILE_HASHES, data);\n+      componentDataCache.setStringData(project.key(), SnapshotDataTypes.FILE_HASHES, data);\n     }\n   }\n "
    },
    {
        "commit_id": "6f97a4140c7dd7ce3507993fe7f4c5bb1a876b07",
        "commit_message": "Fix last details of rules search (profiling logs, activation checkbox)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6f97a4140c7dd7ce3507993fe7f4c5bb1a876b07",
        "buggy_code": "import org.joda.time.format.ISODateTimeFormat;",
        "fixed_code": "import org.elasticsearch.common.joda.time.format.ISODateTimeFormat;",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.elasticsearch.common.collect.Lists;\n import org.elasticsearch.common.collect.Maps;\n-import org.joda.time.format.ISODateTimeFormat;\n+import org.elasticsearch.common.joda.time.format.ISODateTimeFormat;\n import org.sonar.api.rules.ActiveRule;\n import org.sonar.check.Cardinality;\n import org.sonar.server.rule.ActiveRuleDocument;"
    },
    {
        "commit_id": "cf10ce72b921014b5c867e0a2ddad30dc7aaf0f2",
        "commit_message": "Fix minor quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cf10ce72b921014b5c867e0a2ddad30dc7aaf0f2",
        "buggy_code": "InputStream resultingInputStream = null;",
        "fixed_code": "InputStream resultingInputStream;",
        "patch": "@@ -287,7 +287,7 @@ public InputStream getInput() throws IOException {\n           }\n         }\n \n-        InputStream resultingInputStream = null;\n+        InputStream resultingInputStream;\n         // create the appropriate stream wrapper based on the encoding type\n         if (encoding != null && \"gzip\".equalsIgnoreCase(encoding)) {\n           resultingInputStream = new GZIPInputStream(connection.getInputStream());"
    },
    {
        "commit_id": "95f097f8487dd0577219e7d308deca2843562022",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/95f097f8487dd0577219e7d308deca2843562022",
        "buggy_code": "return checkNotNull((qualityProfile));",
        "fixed_code": "return checkNotNull(qualityProfile);",
        "patch": "@@ -240,7 +240,7 @@ private void checkNotAlreadyExists(String name, String language) {\n \n   private QualityProfileDto findNotNull(Integer id) {\n     QualityProfileDto qualityProfile = find(id);\n-    return checkNotNull((qualityProfile));\n+    return checkNotNull(qualityProfile);\n   }\n \n   private QualityProfileDto findNotNull(String name, String language) {"
    },
    {
        "commit_id": "6641643ee94e8c7393af31bbaa3f29bda4abefa9",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6641643ee94e8c7393af31bbaa3f29bda4abefa9",
        "buggy_code": "return l10nParams;",
        "fixed_code": "return Arrays.copyOf(l10nParams, l10nParams.length);",
        "patch": "@@ -101,7 +101,7 @@ public String l10nKey() {\n \n     @CheckForNull\n     public Object[] l10nParams() {\n-      return l10nParams;\n+      return Arrays.copyOf(l10nParams, l10nParams.length);\n     }\n \n     @Override"
    },
    {
        "commit_id": "5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "commit_message": "Rename HttpException to ServerException, and remove ServerErrorException (managed error 500)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "buggy_code": "public class BadRequestException extends HttpException {",
        "fixed_code": "public class BadRequestException extends ServerException {",
        "patch": "@@ -24,7 +24,7 @@\n /**\n  * Request is not valid and can not be processed.\n  */\n-public class BadRequestException extends HttpException {\n+public class BadRequestException extends ServerException {\n \n   private static final int BAD_REQUEST = 400;\n "
    },
    {
        "commit_id": "5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "commit_message": "Rename HttpException to ServerException, and remove ServerErrorException (managed error 500)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "buggy_code": "public class ForbiddenException extends HttpException {",
        "fixed_code": "public class ForbiddenException extends ServerException {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * Permission denied. User does not have the required permissions.\n  */\n-public class ForbiddenException extends HttpException {\n+public class ForbiddenException extends ServerException {\n \n   private static final int FORBIDDEN = 403;\n "
    },
    {
        "commit_id": "5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "commit_message": "Rename HttpException to ServerException, and remove ServerErrorException (managed error 500)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "buggy_code": "public class NotFoundException extends HttpException {",
        "fixed_code": "public class NotFoundException extends ServerException {",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.server.exceptions;\n \n-public class NotFoundException extends HttpException {\n+public class NotFoundException extends ServerException {\n \n   private static final int NOT_FOUND = 404;\n "
    },
    {
        "commit_id": "5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "commit_message": "Rename HttpException to ServerException, and remove ServerErrorException (managed error 500)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c9c1d754a814bffea825e17e8489d0c045cd6cb",
        "buggy_code": "public class UnauthorizedException extends HttpException {",
        "fixed_code": "public class UnauthorizedException extends ServerException {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * User needs to be authenticated. HTTP request is generally redirected to login form.\n  */\n-public class UnauthorizedException extends HttpException {\n+public class UnauthorizedException extends ServerException {\n \n   private static final int UNAUTHORIZED = 401;\n "
    },
    {
        "commit_id": "56545efc9e158b50e19f7432990e301a8a5b3822",
        "commit_message": "SONAR-4535 Update error message when several permission templates are matching key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56545efc9e158b50e19f7432990e301a8a5b3822",
        "buggy_code": ".expectMessage(\"The following permission templates have a key pattern that matches the 'foo.project' key: 'Start with foo', 'Start with foo again'. The administrator must update them to make sure that only one permission template can be selected for foo.project component.\");",
        "fixed_code": ".expectMessage(\"The \\\"foo.project\\\" key matches multiple permission templates: \\\"Start with foo\\\", \\\"Start with foo again\\\". A system administrator must update these templates so that only one of them matches the key.\");",
        "patch": "@@ -135,7 +135,7 @@ public void grantDefaultRoles_several_matching_pattern() {\n \n     throwable.expect(IllegalStateException.class);\n     throwable\n-      .expectMessage(\"The following permission templates have a key pattern that matches the 'foo.project' key: 'Start with foo', 'Start with foo again'. The administrator must update them to make sure that only one permission template can be selected for foo.project component.\");\n+      .expectMessage(\"The \\\"foo.project\\\" key matches multiple permission templates: \\\"Start with foo\\\", \\\"Start with foo again\\\". A system administrator must update these templates so that only one of them matches the key.\");\n \n     permissions.grantDefaultRoles(project);\n "
    },
    {
        "commit_id": "99466d1784f8e6b791a2c0505d3a0202513172f8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/99466d1784f8e6b791a2c0505d3a0202513172f8",
        "buggy_code": "throw new IllegalStateException(\"Fail to extract \" + relativePath + \" to \" + toFile.getAbsolutePath());",
        "fixed_code": "throw new IllegalStateException(\"Fail to extract \" + relativePath + \" to \" + toFile.getAbsolutePath(), e);",
        "patch": "@@ -58,7 +58,7 @@ public static File copyResources(ClassLoader classLoader, String rootPath, File\n       try {\n         FileUtils.copyURLToFile(resource, toFile);\n       } catch (IOException e) {\n-        throw new IllegalStateException(\"Fail to extract \" + relativePath + \" to \" + toFile.getAbsolutePath());\n+        throw new IllegalStateException(\"Fail to extract \" + relativePath + \" to \" + toFile.getAbsolutePath(), e);\n       }\n     }\n "
    },
    {
        "commit_id": "f0cbff8e9697dd5cb4999eee5e6f92871eacdfe2",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0cbff8e9697dd5cb4999eee5e6f92871eacdfe2",
        "buggy_code": "return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule(), Locale.getDefault());",
        "fixed_code": "return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule());",
        "patch": "@@ -216,7 +216,7 @@ private void writeUsers(JsonWriter json, List<User> users) throws IOException {\n   }\n \n   private String getRuleName(RuleKey ruleKey) {\n-    return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule(), Locale.getDefault());\n+    return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule());\n   }\n \n   @VisibleForTesting"
    },
    {
        "commit_id": "f0cbff8e9697dd5cb4999eee5e6f92871eacdfe2",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f0cbff8e9697dd5cb4999eee5e6f92871eacdfe2",
        "buggy_code": "throw new IllegalStateException();",
        "fixed_code": "throw new IllegalStateException(\"Fail to create temp file\", e);",
        "patch": "@@ -144,7 +144,7 @@ private File newTempFile() {\n       } catch (IOException e) {\n         // ignore except the last try\n         if (counter == TEMP_FILE_ATTEMPTS - 1) {\n-          throw new IllegalStateException();\n+          throw new IllegalStateException(\"Fail to create temp file\", e);\n         }\n       }\n     }"
    },
    {
        "commit_id": "67eecec4680c94292d1e243aa9e2e558b46a5b68",
        "commit_message": "SONAR-4535 Display key pattern on permission template UI\nfix issue with dev cockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/67eecec4680c94292d1e243aa9e2e558b46a5b68",
        "buggy_code": "permissionFacade.grantDefaultRoles(Long.valueOf(resource.getId()), resource.getEffectiveKey(), resource.getQualifier());",
        "fixed_code": "permissionFacade.grantDefaultRoles(Long.valueOf(resource.getId()), resource.getQualifier());",
        "patch": "@@ -78,6 +78,6 @@ public void grantGroupRole(Resource resource, String groupName, String role) {\n   }\n \n   public void grantDefaultRoles(Resource resource) {\n-    permissionFacade.grantDefaultRoles(Long.valueOf(resource.getId()), resource.getEffectiveKey(), resource.getQualifier());\n+    permissionFacade.grantDefaultRoles(Long.valueOf(resource.getId()), resource.getQualifier());\n   }\n }"
    },
    {
        "commit_id": "67eecec4680c94292d1e243aa9e2e558b46a5b68",
        "commit_message": "SONAR-4535 Display key pattern on permission template UI\nfix issue with dev cockpit",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/67eecec4680c94292d1e243aa9e2e558b46a5b68",
        "buggy_code": "permissionFacade.grantDefaultRoles(component.getId(), componentKey, component.qualifier());",
        "fixed_code": "permissionFacade.grantDefaultRoles(component.getId(), component.qualifier());",
        "patch": "@@ -93,7 +93,7 @@ public void applyDefaultPermissionTemplate(final String componentKey) {\n       UserSession.get().checkGlobalPermission(GlobalPermissions.PROVISIONING);\n     }\n \n-    permissionFacade.grantDefaultRoles(component.getId(), componentKey, component.qualifier());\n+    permissionFacade.grantDefaultRoles(component.getId(), component.qualifier());\n   }\n \n   public void applyPermissionTemplate(Map<String, Object> params) {"
    },
    {
        "commit_id": "929fe9cf5cdec97d93c76a2bd652da8d23cf5aa5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/929fe9cf5cdec97d93c76a2bd652da8d23cf5aa5",
        "buggy_code": "return toCharacteristic(dao.selectById(id), null);",
        "fixed_code": "return toCharacteristic(dto, null);",
        "patch": "@@ -60,7 +60,7 @@ public List<Characteristic> findRootCharacteristics() {\n   public Characteristic findCharacteristicById(Integer id) {\n     CharacteristicDto dto = dao.selectById(id);\n     if (dto != null) {\n-      return toCharacteristic(dao.selectById(id), null);\n+      return toCharacteristic(dto, null);\n     }\n     return null;\n   }"
    },
    {
        "commit_id": "929fe9cf5cdec97d93c76a2bd652da8d23cf5aa5",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/929fe9cf5cdec97d93c76a2bd652da8d23cf5aa5",
        "buggy_code": "DefaultCharacteristic javaCharacteristic = new DefaultCharacteristic().setKey(\"COMPILER_RELATED_PORTABILITY\").setParent(javaRootCharacteristic);",
        "fixed_code": "DefaultCharacteristic javaCharacteristic = new DefaultCharacteristic().setKey(\"COMPILER_RELATED_PORTABILITY\").setParent(javaRootCharacteristic).setRoot(javaRootCharacteristic);",
        "patch": "@@ -134,7 +134,7 @@ public void create_model_with_requirements_from_plugin_on_first_execution() thro\n     // Java model\n     DefaultTechnicalDebtModel javaModel = new DefaultTechnicalDebtModel();\n     DefaultCharacteristic javaRootCharacteristic = new DefaultCharacteristic().setKey(\"PORTABILITY\");\n-    DefaultCharacteristic javaCharacteristic = new DefaultCharacteristic().setKey(\"COMPILER_RELATED_PORTABILITY\").setParent(javaRootCharacteristic);\n+    DefaultCharacteristic javaCharacteristic = new DefaultCharacteristic().setKey(\"COMPILER_RELATED_PORTABILITY\").setParent(javaRootCharacteristic).setRoot(javaRootCharacteristic);\n     javaModel.addRootCharacteristic(javaRootCharacteristic);\n \n     Rule rule = Rule.create();"
    },
    {
        "commit_id": "1ff7b7c9b2302379519e18a32309f002a3f66415",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1ff7b7c9b2302379519e18a32309f002a3f66415",
        "buggy_code": "throw new ForbiddenException(\"Insufficient privileges\");",
        "fixed_code": "throw new ForbiddenException(INSUFFICIENT_PRIVILEGES_MESSAGE);",
        "patch": "@@ -139,7 +139,7 @@ List<String> globalPermissions() {\n    */\n   public UserSession checkProjectPermission(String projectPermission, String projectKey) {\n     if (!hasProjectPermission(projectPermission, projectKey)) {\n-      throw new ForbiddenException(\"Insufficient privileges\");\n+      throw new ForbiddenException(INSUFFICIENT_PRIVILEGES_MESSAGE);\n     }\n     return this;\n   }"
    },
    {
        "commit_id": "80151c7bf59af795045df02b2dddaf58aaf77393",
        "commit_message": "Fix quality flawy",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/80151c7bf59af795045df02b2dddaf58aaf77393",
        "buggy_code": "private class Properties {",
        "fixed_code": "private static class Properties {",
        "patch": "@@ -228,7 +228,7 @@ private DefaultRequirement processFunctionsOnRequirement(DefaultRequirement requ\n     return null;\n   }\n \n-  private class Properties {\n+  private static class Properties {\n     List<Property> properties;\n \n     public Properties() {"
    },
    {
        "commit_id": "9774b1e57f8a947591e32fcab63bb7bee6147378",
        "commit_message": "Update message to display when not effort to fix on constant_issue requirement",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9774b1e57f8a947591e32fcab63bb7bee6147378",
        "buggy_code": ".hasMessage(\"The implementation of rule 'squid:AvoidCycle' defines an effort to fix whereas its requirement is set to 'constant/issue' - which is not compatible.\");",
        "fixed_code": ".hasMessage(\"Requirement for 'squid:AvoidCycle' can not use 'Constant/issue' remediation function because this rule does not have a fixed remediation cost.\");",
        "patch": "@@ -148,7 +148,7 @@ public void fail_to_calcul_technical_debt_on_constant_issue_function_with_effort\n       fail();\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(IllegalArgumentException.class)\n-        .hasMessage(\"The implementation of rule 'squid:AvoidCycle' defines an effort to fix whereas its requirement is set to 'constant/issue' - which is not compatible.\");\n+        .hasMessage(\"Requirement for 'squid:AvoidCycle' can not use 'Constant/issue' remediation function because this rule does not have a fixed remediation cost.\");\n     }\n     verifyZeroInteractions(converter);\n   }"
    },
    {
        "commit_id": "5566320d47b945175f6e3a3be789160dd4e16c87",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5566320d47b945175f6e3a3be789160dd4e16c87",
        "buggy_code": "public DefaultCharacteristic toCharacteristic(DefaultCharacteristic parent) {",
        "fixed_code": "public DefaultCharacteristic toCharacteristic(@Nullable DefaultCharacteristic parent) {",
        "patch": "@@ -196,7 +196,7 @@ public CharacteristicDto setEnabled(boolean enabled) {\n     return this;\n   }\n \n-  public DefaultCharacteristic toCharacteristic(DefaultCharacteristic parent) {\n+  public DefaultCharacteristic toCharacteristic(@Nullable DefaultCharacteristic parent) {\n     return new DefaultCharacteristic()\n       .setId(id)\n       .setKey(kee)"
    },
    {
        "commit_id": "e352c11418f34ec1f274839990fa080dfa9c3436",
        "commit_message": "SONAR-2447 Fix permission template tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e352c11418f34ec1f274839990fa080dfa9c3436",
        "buggy_code": "thrown.expectMessage(\"Invalid component permission key invalid. Valid values are [user, admin, codeviewer]\");",
        "fixed_code": "thrown.expectMessage(\"Invalid component permission key invalid. Valid values are [user, admin, issueadmin, codeviewer]\");",
        "patch": "@@ -133,7 +133,7 @@ public void validate_component_permission_reference() throws Exception {\n     PermissionChangeQuery query = PermissionChangeQuery.buildFromParams(inconsistentParams);\n \n     thrown.expect(BadRequestException.class);\n-    thrown.expectMessage(\"Invalid component permission key invalid. Valid values are [user, admin, codeviewer]\");\n+    thrown.expectMessage(\"Invalid component permission key invalid. Valid values are [user, admin, issueadmin, codeviewer]\");\n     query.validate();\n   }\n }"
    },
    {
        "commit_id": "c20be90eb013ce9fcb3d7105e4b47142006ec5fd",
        "commit_message": "SONAR-4892 Fix NPE when searching for characteristic",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c20be90eb013ce9fcb3d7105e4b47142006ec5fd",
        "buggy_code": "when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(dbRootCharacteristic, dbCharacteristic, requirement));",
        "fixed_code": "when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(requirement, dbCharacteristic, dbRootCharacteristic));",
        "patch": "@@ -166,7 +166,7 @@ public void add_new_requirements_from_plugin() throws Exception {\n     rule1.setId(10);\n     when(ruleCache.getByRuleKey(ruleKey1)).thenReturn(rule1);\n     when(ruleCache.exists(10)).thenReturn(true);\n-    when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(dbRootCharacteristic, dbCharacteristic, requirement));\n+    when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(requirement, dbCharacteristic, dbRootCharacteristic));\n \n     // Java model\n     TechnicalDebtModel javaModel = new TechnicalDebtModel();"
    },
    {
        "commit_id": "9c50c0db93e7206dd74f0ff1fccec14549be48ef",
        "commit_message": "SONAR-4889 Fix deprecation message for sonar.dryRun.readTimeout",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c50c0db93e7206dd74f0ff1fccec14549be48ef",
        "buggy_code": "LOG.warn(String.format(\"Property {0} is deprecated. Please use {1} instead.\", CoreProperties.DRY_RUN_READ_TIMEOUT_SEC, CoreProperties.PREVIEW_READ_TIMEOUT_SEC));",
        "fixed_code": "LOG.warn(\"Property {} is deprecated. Please use {} instead.\", CoreProperties.DRY_RUN_READ_TIMEOUT_SEC, CoreProperties.PREVIEW_READ_TIMEOUT_SEC);",
        "patch": "@@ -77,7 +77,7 @@ public void start() {\n   private int getReadTimeout() {\n     int readTimeoutSec;\n     if (settings.hasKey(CoreProperties.DRY_RUN_READ_TIMEOUT_SEC)) {\n-      LOG.warn(String.format(\"Property {0} is deprecated. Please use {1} instead.\", CoreProperties.DRY_RUN_READ_TIMEOUT_SEC, CoreProperties.PREVIEW_READ_TIMEOUT_SEC));\n+      LOG.warn(\"Property {} is deprecated. Please use {} instead.\", CoreProperties.DRY_RUN_READ_TIMEOUT_SEC, CoreProperties.PREVIEW_READ_TIMEOUT_SEC);\n       readTimeoutSec = settings.getInt(CoreProperties.DRY_RUN_READ_TIMEOUT_SEC);\n     } else if (settings.hasKey(CoreProperties.PREVIEW_READ_TIMEOUT_SEC)) {\n       readTimeoutSec = settings.getInt(CoreProperties.PREVIEW_READ_TIMEOUT_SEC);"
    },
    {
        "commit_id": "a00d3e66df4c5595f762acd5c83c05a343e62c03",
        "commit_message": "SONAR-4776 Fix the way to convert technical debt from changelog",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a00d3e66df4c5595f762acd5c83c05a343e62c03",
        "buggy_code": "return (WorkDayDuration) newValue;",
        "fixed_code": "return newValue != null && !\"\".equals(newValue) ? (WorkDayDuration.fromLong(Long.parseLong((String) newValue))) : null;",
        "patch": "@@ -144,7 +144,7 @@ private WorkDayDuration newValue(final String field, FieldDiffs fieldDiffs) {\n     for (Map.Entry<String, FieldDiffs.Diff> entry : fieldDiffs.diffs().entrySet()) {\n       if (entry.getKey().equals(field)) {\n         Serializable newValue = entry.getValue().newValue();\n-        return (WorkDayDuration) newValue;\n+        return newValue != null && !\"\".equals(newValue) ? (WorkDayDuration.fromLong(Long.parseLong((String) newValue))) : null;\n       }\n     }\n     return null;"
    },
    {
        "commit_id": "b5116218aebe1ae7ca6f3abcd77b507ae3cb5131",
        "commit_message": "Rename TechnicalDebt class name to WorkDayDuration and move it to issue internal package",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b5116218aebe1ae7ca6f3abcd77b507ae3cb5131",
        "buggy_code": "TechnicalDebt technicalDebt();",
        "fixed_code": "WorkDayDuration technicalDebt();",
        "patch": "@@ -53,7 +53,7 @@ public interface Issue {\n   Double effortToFix();\n \n   @CheckForNull\n-  TechnicalDebt technicalDebt();\n+  WorkDayDuration technicalDebt();\n \n   String status();\n "
    },
    {
        "commit_id": "b5116218aebe1ae7ca6f3abcd77b507ae3cb5131",
        "commit_message": "Rename TechnicalDebt class name to WorkDayDuration and move it to issue internal package",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b5116218aebe1ae7ca6f3abcd77b507ae3cb5131",
        "buggy_code": "public interface TechnicalDebt {",
        "fixed_code": "public interface WorkDayDuration {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 4.0\n  */\n-public interface TechnicalDebt {\n+public interface WorkDayDuration {\n \n   Integer days();\n "
    },
    {
        "commit_id": "d2b96c467a958aba9187738074b8a227701ada2d",
        "commit_message": "Fix NPE when previous technical debt was null",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d2b96c467a958aba9187738074b8a227701ada2d",
        "buggy_code": "issue.setFieldChange(context, TECHNICAL_DEBT, oldValue.toLong(), value.toLong());",
        "fixed_code": "issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : oldValue, value != null ? value.toLong() : null);",
        "patch": "@@ -204,7 +204,7 @@ public boolean setTechnicalDebt(DefaultIssue issue, @Nullable TechnicalDebt valu\n     TechnicalDebt oldValue = issue.technicalDebt();\n     if (!Objects.equal(value, oldValue)) {\n       issue.setTechnicalDebt(value);\n-      issue.setFieldChange(context, TECHNICAL_DEBT, oldValue.toLong(), value.toLong());\n+      issue.setFieldChange(context, TECHNICAL_DEBT, oldValue != null ? oldValue.toLong() : oldValue, value != null ? value.toLong() : null);\n       issue.setUpdateDate(context.date());\n       issue.setChanged(true);\n       return true;"
    },
    {
        "commit_id": "c1651de4d5399a592c4537ebce4f7da2840424d1",
        "commit_message": "SONAR-55 Provide a Bubble chart widget (fix the widget key)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c1651de4d5399a592c4537ebce4f7da2840424d1",
        "buggy_code": "super(\"timeline\", \"Timeline\", \"/org/sonar/plugins/core/widgets/bubbleChart.html.erb\");",
        "fixed_code": "super(\"bubble_chart\", \"Bubble Chart\", \"/org/sonar/plugins/core/widgets/bubbleChart.html.erb\");",
        "patch": "@@ -36,6 +36,6 @@\n })\n public class BubbleChartWidget extends CoreWidget {\n   public BubbleChartWidget() {\n-    super(\"timeline\", \"Timeline\", \"/org/sonar/plugins/core/widgets/bubbleChart.html.erb\");\n+    super(\"bubble_chart\", \"Bubble Chart\", \"/org/sonar/plugins/core/widgets/bubbleChart.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "8842c50c19054ced2809a8ebdde854a83312a8d2",
        "commit_message": "SONAR-4748 Fix issues and regression for temp folders",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8842c50c19054ced2809a8ebdde854a83312a8d2",
        "buggy_code": "File tempDir = new File(workingDir, \"tmp\");",
        "fixed_code": "File tempDir = new File(workingDir, \".sonartmp\");",
        "patch": "@@ -33,7 +33,7 @@ public class TempFolderProvider extends ProviderAdapter {\n   public TempFolder provide(BootstrapSettings bootstrapSettings) {\n     String workingDirPath = bootstrapSettings.property(CoreProperties.WORKING_DIRECTORY, CoreProperties.WORKING_DIRECTORY_DEFAULT_VALUE);\n     File workingDir = new File(workingDirPath);\n-    File tempDir = new File(workingDir, \"tmp\");\n+    File tempDir = new File(workingDir, \".sonartmp\");\n     try {\n       FileUtils.forceMkdir(tempDir);\n     } catch (IOException e) {"
    },
    {
        "commit_id": "d95e693578b05da9829b2ff9234aeec24d8a63a9",
        "commit_message": "SONAR-4780 When migrating from 3.6- to 3.6+, the severity of each issue is decreased by one level",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d95e693578b05da9829b2ff9234aeec24d8a63a9",
        "buggy_code": "private static final Map<Integer, String> SEVERITIES = ImmutableMap.of(1, Severity.INFO, 2, Severity.MINOR, 3, Severity.MAJOR, 4, Severity.CRITICAL, 5, Severity.BLOCKER);",
        "fixed_code": "private static final Map<Integer, String> SEVERITIES = ImmutableMap.of(0, Severity.INFO, 1, Severity.MINOR, 2, Severity.MAJOR, 3, Severity.CRITICAL, 4, Severity.BLOCKER);",
        "patch": "@@ -277,7 +277,7 @@ protected Map<String, Object> handleRow(ResultSet rs) throws SQLException {\n   }\n \n   private static class ViolationHandler extends AbstractListHandler<Map<String, Object>> {\n-    private static final Map<Integer, String> SEVERITIES = ImmutableMap.of(1, Severity.INFO, 2, Severity.MINOR, 3, Severity.MAJOR, 4, Severity.CRITICAL, 5, Severity.BLOCKER);\n+    private static final Map<Integer, String> SEVERITIES = ImmutableMap.of(0, Severity.INFO, 1, Severity.MINOR, 2, Severity.MAJOR, 3, Severity.CRITICAL, 4, Severity.BLOCKER);\n \n \n     @Override"
    },
    {
        "commit_id": "cd1de0a69ab51a45fba719fe6a665ed938c5e441",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cd1de0a69ab51a45fba719fe6a665ed938c5e441",
        "buggy_code": "throw new RuntimeException(\"Unable to load mapper \" + mapperName, e);",
        "fixed_code": "throw new IllegalArgumentException(\"Unable to load mapper \" + mapperName, e);",
        "patch": "@@ -206,7 +206,7 @@ private void loadMapper(Configuration configuration, String mapperName) {\n       new XMLMapperBuilder(input, configuration, mapperName, configuration.getSqlFragments()).parse();\n       configuration.addLoadedResource(mapperName);\n     } catch (Exception e) {\n-      throw new RuntimeException(\"Unable to load mapper \" + mapperName, e);\n+      throw new IllegalArgumentException(\"Unable to load mapper \" + mapperName, e);\n     } finally {\n       Closeables.closeQuietly(input);\n     }"
    },
    {
        "commit_id": "b463101eed5e9c5353d7b76c9aac5c074a9a0bbf",
        "commit_message": "Fix minor quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b463101eed5e9c5353d7b76c9aac5c074a9a0bbf",
        "buggy_code": "public static final NewProject create() {",
        "fixed_code": "public static NewProject create() {",
        "patch": "@@ -33,7 +33,7 @@ private NewProject() {\n     params = new HashMap<String, Object>();\n   }\n \n-  public static final NewProject create() {\n+  public static NewProject create() {\n     return new NewProject();\n   }\n "
    },
    {
        "commit_id": "401abbe560aa06d5e3a4668f14cd0c646eea40af",
        "commit_message": "Fix SourceScannerTest in order to use existing files",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/401abbe560aa06d5e3a4668f14cd0c646eea40af",
        "buggy_code": "Resource resource = null;",
        "fixed_code": "Resource resource;",
        "patch": "@@ -106,7 +106,7 @@ protected void parseDirs(Project project, boolean isTest) {\n    * This method is necessary because Java resources are not treated as every other resource...\n    */\n   private String resolveComponent(File inputFile, List<File> sourceDirs, Project project, boolean isTest) {\n-    Resource resource = null;\n+    Resource resource;\n \n     if (Java.KEY.equals(project.getLanguageKey()) && Java.isJavaFile(inputFile)) {\n "
    },
    {
        "commit_id": "5d5c93e5c4181fc8cbdfaf6dba7b091fb8b0e16c",
        "commit_message": "Fix MavenProjectConverter on MSWindows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5d5c93e5c4181fc8cbdfaf6dba7b091fb8b0e16c",
        "buggy_code": "private MavenProjectConverter mavenProjectConverter = new MavenProjectConverter();",
        "fixed_code": "MavenProjectConverter mavenProjectConverter = new MavenProjectConverter();",
        "patch": "@@ -51,7 +51,7 @@ public class MavenProjectConverterTest {\n   @Rule\n   public TemporaryFolder temp = new TemporaryFolder();\n \n-  private MavenProjectConverter mavenProjectConverter = new MavenProjectConverter();\n+  MavenProjectConverter mavenProjectConverter = new MavenProjectConverter();\n \n   /**\n    * See SONAR-2681"
    },
    {
        "commit_id": "926049c54c96661eaeb474b238a766cd4e699e48",
        "commit_message": "SONAR-3677 fix another test on MSWindows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/926049c54c96661eaeb474b238a766cd4e699e48",
        "buggy_code": "assertThat(input.path()).isEqualTo(file.getCanonicalPath());",
        "fixed_code": "assertThat(input.path()).isEqualTo(FilenameUtils.separatorsToUnix(file.getCanonicalPath()));",
        "patch": "@@ -73,7 +73,7 @@ public void test_file() throws Exception {\n     assertThat(input.file()).isEqualTo(file);\n     assertThat(input.attribute(InputFile.ATTRIBUTE_SOURCEDIR_PATH)).isEqualTo(FilenameUtils.separatorsToUnix(sourceDir.getAbsolutePath()));\n     assertThat(input.relativePath()).isEqualTo(\"src/main/java/Foo.java\");\n-    assertThat(input.path()).isEqualTo(file.getCanonicalPath());\n+    assertThat(input.path()).isEqualTo(FilenameUtils.separatorsToUnix(file.getCanonicalPath()));\n   }\n \n   @Test"
    },
    {
        "commit_id": "699598cb972ca6f22174f7f7979a084babad2ab9",
        "commit_message": "SONAR-3677 fix test on MSWindows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/699598cb972ca6f22174f7f7979a084babad2ab9",
        "buggy_code": "this.path = file.getCanonicalPath();",
        "fixed_code": "this.path = FilenameUtils.separatorsToUnix(file.getCanonicalPath());",
        "patch": "@@ -41,7 +41,7 @@ public class DefaultInputFile implements InputFile {\n \n   private DefaultInputFile(File file, String relativePath, Map<String, String> attributes) {\n     try {\n-      this.path = file.getCanonicalPath();\n+      this.path = FilenameUtils.separatorsToUnix(file.getCanonicalPath());\n       this.relativePath = FilenameUtils.separatorsToUnix(relativePath);\n       this.attributes = attributes;\n     } catch (IOException e) {"
    },
    {
        "commit_id": "5cd508e6eb76484ae672bf8c1ee19bafd0229dd7",
        "commit_message": "SONAR-4679 Remove line range feature from issue (ex|in)clusion",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5cd508e6eb76484ae672bf8c1ee19bafd0229dd7",
        "buggy_code": "String lineRange = settings.getString(propPrefix + IgnoreIssuesConfiguration.LINE_RANGE_KEY);",
        "fixed_code": "String lineRange = \"*\";",
        "patch": "@@ -74,7 +74,7 @@ protected void loadPatternsFromNewProperties() {\n       String propPrefix = getMulticriteriaConfigurationKey() + \".\" + id + \".\";\n       String resourceKeyPattern = settings.getString(propPrefix + IgnoreIssuesConfiguration.RESOURCE_KEY);\n       String ruleKeyPattern = settings.getString(propPrefix + IgnoreIssuesConfiguration.RULE_KEY);\n-      String lineRange = settings.getString(propPrefix + IgnoreIssuesConfiguration.LINE_RANGE_KEY);\n+      String lineRange = \"*\";\n       String[] fields = new String[] { resourceKeyPattern, ruleKeyPattern, lineRange };\n       PatternDecoder.checkRegularLineConstraints(StringUtils.join(fields, \",\"), fields);\n       IssuePattern pattern = new IssuePattern(firstNonNull(resourceKeyPattern, \"*\"), firstNonNull(ruleKeyPattern, \"*\"));"
    },
    {
        "commit_id": "361f966389b93a636c99058df28acb76d240c3ec",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/361f966389b93a636c99058df28acb76d240c3ec",
        "buggy_code": "public static List<String> FUNCTIONS = ImmutableList.of(FUNCTION_CONSTANT, FUNCTION_LINEAR, FUNCTION_LINEAR_WITH_OFFSET, FUNCTION_LINEAR_WITH_THRESHOLD);",
        "fixed_code": "public static final List<String> FUNCTIONS = ImmutableList.of(FUNCTION_CONSTANT, FUNCTION_LINEAR, FUNCTION_LINEAR_WITH_OFFSET, FUNCTION_LINEAR_WITH_THRESHOLD);",
        "patch": "@@ -35,7 +35,7 @@ public class DefaultRequirement {\n   public static final String FUNCTION_LINEAR_WITH_OFFSET = \"linear_offset\";\n   public static final String FUNCTION_LINEAR_WITH_THRESHOLD = \"linear_threshold\";\n \n-  public static List<String> FUNCTIONS = ImmutableList.of(FUNCTION_CONSTANT, FUNCTION_LINEAR, FUNCTION_LINEAR_WITH_OFFSET, FUNCTION_LINEAR_WITH_THRESHOLD);\n+  public static final List<String> FUNCTIONS = ImmutableList.of(FUNCTION_CONSTANT, FUNCTION_LINEAR, FUNCTION_LINEAR_WITH_OFFSET, FUNCTION_LINEAR_WITH_THRESHOLD);\n \n   private RuleKey ruleKey;\n   private DefaultCharacteristic rootCharacteristic;"
    },
    {
        "commit_id": "f8144252fc962f69dd997effd72a560d7b90902d",
        "commit_message": "SONAR-4716 Add technical debt detail on issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8144252fc962f69dd997effd72a560d7b90902d",
        "buggy_code": ".setKey(name);",
        "fixed_code": ".setName(name);",
        "patch": "@@ -79,7 +79,7 @@ public CharacteristicDto setOrder(Integer i) {\n   public DefaultCharacteristic toDefaultCharacteristic() {\n     return new DefaultCharacteristic()\n       .setKey(kee)\n-      .setKey(name);\n+      .setName(name);\n   }\n \n }"
    },
    {
        "commit_id": "eb61eba8a4e2dead826feca34b22ca8fc5fa0ffb",
        "commit_message": "SONAR-4716 Replace remediation cost by technical debt in issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb61eba8a4e2dead826feca34b22ca8fc5fa0ffb",
        "buggy_code": "issue.setRemediationCost(technicalDebtCalculator.cost(issue));",
        "fixed_code": "issue.setTechnicalDebt(technicalDebtCalculator.calculTechnicalDebt(issue));",
        "patch": "@@ -82,7 +82,7 @@ private boolean initAndAddIssue(DefaultIssue issue, @Nullable Violation violatio\n     if (issue.severity() == null) {\n       issue.setSeverity(activeRule.getSeverity().name());\n     }\n-    issue.setRemediationCost(technicalDebtCalculator.cost(issue));\n+    issue.setTechnicalDebt(technicalDebtCalculator.calculTechnicalDebt(issue));\n \n     if (filters.accept(issue, violation)) {\n       cache.put(issue);"
    },
    {
        "commit_id": "eb61eba8a4e2dead826feca34b22ca8fc5fa0ffb",
        "commit_message": "SONAR-4716 Replace remediation cost by technical debt in issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eb61eba8a4e2dead826feca34b22ca8fc5fa0ffb",
        "buggy_code": "issueFilterService, issueBulkChangeService, null);",
        "fixed_code": "issueFilterService, issueBulkChangeService);",
        "patch": "@@ -64,7 +64,7 @@ public void setUp() {\n     ResourceDto project = new ResourceDto().setKey(\"org.sonar.Sample\");\n     when(resourceDao.getResource(any(ResourceQuery.class))).thenReturn(project);\n     service = new InternalRubyIssueService(issueService, commentService, changelogService, actionPlanService, issueStatsFinder, resourceDao, actionService,\n-      issueFilterService, issueBulkChangeService, null);\n+      issueFilterService, issueBulkChangeService);\n   }\n \n   @Test"
    },
    {
        "commit_id": "28b0f320f5fdcd5be05183717dc46b9ccf4271b0",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/28b0f320f5fdcd5be05183717dc46b9ccf4271b0",
        "buggy_code": "void execute(Referentials referentials, Database db) throws Exception {",
        "fixed_code": "void execute(Referentials referentials, Database db) throws ExecutionException, InterruptedException {",
        "patch": "@@ -38,7 +38,7 @@ class ViolationConverters {\n     this.settings = settings;\n   }\n \n-  void execute(Referentials referentials, Database db) throws Exception {\n+  void execute(Referentials referentials, Database db) throws ExecutionException, InterruptedException {\n     Progress progress = new Progress(referentials.totalViolations());\n \n     List<Callable<Object>> converters = Lists.newArrayList();"
    },
    {
        "commit_id": "fe4bf17e5c93ca6b683161d9ddaf390b0c9320dc",
        "commit_message": "SONAR-2657 Fix circular dependency in IoC container",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe4bf17e5c93ca6b683161d9ddaf390b0c9320dc",
        "buggy_code": "String hash = fileHashCache.getCurrentHash(file);",
        "fixed_code": "String hash = fileHashCache.getCurrentHash(file, moduleFileSystem.sourceCharset());",
        "patch": "@@ -69,7 +69,7 @@ public void analyse(Project project, SensorContext context) {\n   private void analyse(StringBuilder fileHashMap, Project project, FileType fileType) {\n     List<File> files = moduleFileSystem.files(FileQuery.on(fileType).onLanguage(project.getLanguageKey()));\n     for (File file : files) {\n-      String hash = fileHashCache.getCurrentHash(file);\n+      String hash = fileHashCache.getCurrentHash(file, moduleFileSystem.sourceCharset());\n       fileHashMap.append(pathResolver.relativePath(moduleFileSystem.baseDir(), file)).append(\"=\").append(hash).append(\"\\n\");\n     }\n   }"
    },
    {
        "commit_id": "fe4bf17e5c93ca6b683161d9ddaf390b0c9320dc",
        "commit_message": "SONAR-2657 Fix circular dependency in IoC container",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe4bf17e5c93ca6b683161d9ddaf390b0c9320dc",
        "buggy_code": "String currentHash = fileHashCache.getCurrentHash(file);",
        "fixed_code": "String currentHash = fileHashCache.getCurrentHash(file, context.fileSystem().sourceCharset());",
        "patch": "@@ -41,7 +41,7 @@ public boolean accept(File file, Context context) {\n     if (previousHash == null) {\n       return true;\n     }\n-    String currentHash = fileHashCache.getCurrentHash(file);\n+    String currentHash = fileHashCache.getCurrentHash(file, context.fileSystem().sourceCharset());\n     return !currentHash.equals(previousHash);\n   }\n "
    },
    {
        "commit_id": "98c5f3e51ce74a98fd70b7c6855b637371e7371d",
        "commit_message": "SONAR-4675 temporarily fix integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/98c5f3e51ce74a98fd70b7c6855b637371e7371d",
        "buggy_code": "this(new File(Env.class.getResource(\"/sonar.properties\").toURI()));",
        "fixed_code": "this(new File(Env.class.getResource(\"/conf/sonar.properties\").toURI()));",
        "patch": "@@ -34,7 +34,7 @@ class Env {\n   }\n \n   Env() throws URISyntaxException {\n-    this(new File(Env.class.getResource(\"/sonar.properties\").toURI()));\n+    this(new File(Env.class.getResource(\"/conf/sonar.properties\").toURI()));\n   }\n \n   File rootDir() {"
    },
    {
        "commit_id": "780ba987592878d39c5d8b366a785ba0eba2f733",
        "commit_message": "Fix typo in unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/780ba987592878d39c5d8b366a785ba0eba2f733",
        "buggy_code": "assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Component unknown does not exists.\");",
        "fixed_code": "assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Component unknown does not exist\");",
        "patch": "@@ -298,7 +298,7 @@ public void fail_when_component_is_not_found() throws Exception {\n       params = buildPermissionChangeParams(null, \"group\", \"unknown\", \"user\");\n       service.addPermission(params);\n     } catch (Exception e) {\n-      assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Component unknown does not exists.\");\n+      assertThat(e).isInstanceOf(BadRequestException.class).hasMessage(\"Component unknown does not exist\");\n     }\n   }\n "
    },
    {
        "commit_id": "cf8028b7591b0bec28139424f958ac27de2ba311",
        "commit_message": "SONAR-4690 fix compatibility with Postgres",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cf8028b7591b0bec28139424f958ac27de2ba311",
        "buggy_code": "StringBuilder sb = new StringBuilder(\"delete rule_failures where \");",
        "fixed_code": "StringBuilder sb = new StringBuilder(\"delete from rule_failures where \");",
        "patch": "@@ -84,7 +84,7 @@ class ViolationConverter implements Callable<Object> {\n   private static final String SQL_DELETE_RULE_FAILURES;\n \n   static {\n-    StringBuilder sb = new StringBuilder(\"delete rule_failures where \");\n+    StringBuilder sb = new StringBuilder(\"delete from rule_failures where \");\n     for (int i = 0; i < Referentials.VIOLATION_GROUP_SIZE; i++) {\n       if (i > 0) {\n         sb.append(\" or \");"
    },
    {
        "commit_id": "079ce68112ef1f2bb684f00eca9e282e0fd7b447",
        "commit_message": "SONAR-4694 Fix issues when managing groups permission on components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/079ce68112ef1f2bb684f00eca9e282e0fd7b447",
        "buggy_code": "return permissionFacade.countPermissions(resourceId) > 0;",
        "fixed_code": "return permissionFacade.countComponentsPermissions(resourceId) > 0;",
        "patch": "@@ -55,7 +55,7 @@ public DefaultResourcePermissions(Settings settings, MyBatis myBatis, Permission\n   public boolean hasRoles(Resource resource) {\n     if (resource.getId() != null) {\n       Long resourceId = Long.valueOf(resource.getId());\n-      return permissionFacade.countPermissions(resourceId) > 0;\n+      return permissionFacade.countComponentsPermissions(resourceId) > 0;\n     }\n     return false;\n   }"
    },
    {
        "commit_id": "079ce68112ef1f2bb684f00eca9e282e0fd7b447",
        "commit_message": "SONAR-4694 Fix issues when managing groups permission on components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/079ce68112ef1f2bb684f00eca9e282e0fd7b447",
        "buggy_code": "assertThat(permissionFacade.countPermissions(123L)).isEqualTo(2);",
        "fixed_code": "assertThat(permissionFacade.countComponentsPermissions(123L)).isEqualTo(2);",
        "patch": "@@ -65,7 +65,7 @@ public void should_apply_permission_template() throws Exception {\n   public void should_count_component_permissions() throws Exception {\n     setupData(\"should_count_component_permissions\");\n \n-    assertThat(permissionFacade.countPermissions(123L)).isEqualTo(2);\n+    assertThat(permissionFacade.countComponentsPermissions(123L)).isEqualTo(2);\n   }\n \n   @Test"
    },
    {
        "commit_id": "1005aa3a90683235a985b365ae9b4b7446f17797",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1005aa3a90683235a985b365ae9b4b7446f17797",
        "buggy_code": "while (violationIds != null) {",
        "fixed_code": "while (violationIds.length>0) {",
        "patch": "@@ -138,7 +138,7 @@ public Object call() throws Exception {\n     //   -- delete violations\n \n     Long[] violationIds = referentials.pollGroupOfViolationIds();\n-    while (violationIds != null) {\n+    while (violationIds.length>0) {\n       List<Map<String, Object>> rows = selectRows(violationIds);\n       convert(rows, violationIds);\n "
    },
    {
        "commit_id": "de35e37cba8be77be5d24c316e7afedc7797309a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/de35e37cba8be77be5d24c316e7afedc7797309a",
        "buggy_code": "if (newIssues.size() > 0) {",
        "fixed_code": "if (!newIssues.isEmpty()) {",
        "patch": "@@ -74,7 +74,7 @@ private void sendNotifications(Project project) {\n     if (!shouldSentNotification.isEmpty()) {\n       notifications.sendChanges(shouldSentNotification, context, project, null);\n     }\n-    if (newIssues.size() > 0) {\n+    if (!newIssues.isEmpty()) {\n       notifications.sendNewIssues(project, newIssues);\n     }\n   }"
    },
    {
        "commit_id": "eeed9b397bdf2f441424c2dd18ad089558ba3030",
        "commit_message": "SONAR-4676 do not insert changelog when issue is new",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eeed9b397bdf2f441424c2dd18ad089558ba3030",
        "buggy_code": "if (diffs != null) {",
        "fixed_code": "if (!issue.isNew() && diffs != null) {",
        "patch": "@@ -142,7 +142,7 @@ private void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {\n       }\n     }\n     FieldDiffs diffs = issue.currentChange();\n-    if (diffs != null) {\n+    if (!issue.isNew() && diffs != null) {\n       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);\n       mapper.insert(changeDto);\n     }"
    },
    {
        "commit_id": "8d56927558c0a89dbcbf8817022b0340e97a173e",
        "commit_message": "Fix unit test on Java 7",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d56927558c0a89dbcbf8817022b0340e97a173e",
        "buggy_code": "checkTables(\"should_insert_new_notification_queue\", new String[] {\"id\"}, \"notifications\");",
        "fixed_code": "assertThat(dao.count()).isEqualTo(1);",
        "patch": "@@ -45,7 +45,7 @@ public void should_insert_new_notification_queue() {\n \n     dao.insert(Arrays.asList(notificationQueueDto));\n \n-    checkTables(\"should_insert_new_notification_queue\", new String[] {\"id\"}, \"notifications\");\n+    assertThat(dao.count()).isEqualTo(1);\n     assertThat(dao.findOldest(1).get(0).toNotification().getType()).isEqualTo(\"email\");\n   }\n "
    },
    {
        "commit_id": "269a6ecf8cf6511c46284523da0c9195940666de",
        "commit_message": "SONAR-766 Fix subcategory for coverage exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/269a6ecf8cf6511c46284523da0c9195940666de",
        "buggy_code": ".subCategory(CoreProperties.CATEGORY_CODE_COVERAGE) // TODO Replace with dedicated subcat",
        "fixed_code": ".subCategory(CoreProperties.SUBCATEGORY_COVERAGE_EXCLUSIONS)",
        "patch": "@@ -83,7 +83,7 @@ public static List<? extends PropertyDefinition> getPropertyDefinitions() {\n     return ImmutableList.of(\n       PropertyDefinition.builder(\"sonar.coverage.exclusions\")\n         .category(CoreProperties.CATEGORY_EXCLUSIONS)\n-        .subCategory(CoreProperties.CATEGORY_CODE_COVERAGE) // TODO Replace with dedicated subcat\n+        .subCategory(CoreProperties.SUBCATEGORY_COVERAGE_EXCLUSIONS)\n         .type(PropertyType.STRING)\n         .multiValues(true)\n         .onQualifiers(Qualifiers.PROJECT, Qualifiers.MODULE)"
    },
    {
        "commit_id": "586a6ad81a64d39c453cde0df2057e3d7587e4b2",
        "commit_message": "SONAR-3644 Fix issue when matching component key against original file pattern",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/586a6ad81a64d39c453cde0df2057e3d7587e4b2",
        "buggy_code": "patternByComponent.get(component).add(pattern);",
        "fixed_code": "patternByComponent.get(component).add(pattern.forResource(component));",
        "patch": "@@ -145,6 +145,6 @@ private void addPatternForComponent(String component, Pattern pattern) {\n       List<Pattern> newList = Lists.newArrayList();\n       patternByComponent.put(component, newList);\n     }\n-    patternByComponent.get(component).add(pattern);\n+    patternByComponent.get(component).add(pattern.forResource(component));\n   }\n }"
    },
    {
        "commit_id": "58e44d3edc94bf798fa05453f00b9333114b572c",
        "commit_message": "SONAR-3644 Fix issues when matching line range exclusions with file level issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58e44d3edc94bf798fa05453f00b9333114b572c",
        "buggy_code": "addPatternForComponent(resource, new Pattern(resource, \"*\", lineRanges));",
        "fixed_code": "addPatternForComponent(resource, new Pattern(resource, \"*\", lineRanges).setCheckLines(true));",
        "patch": "@@ -121,7 +121,7 @@ public void addPatternToExcludeResource(String resource) {\n   }\n \n   public void addPatternToExcludeLines(String resource, Set<LineRange> lineRanges) {\n-    addPatternForComponent(resource, new Pattern(resource, \"*\", lineRanges));\n+    addPatternForComponent(resource, new Pattern(resource, \"*\", lineRanges).setCheckLines(true));\n   }\n \n   public void configurePatternsForComponent(String componentKey, String path) {"
    },
    {
        "commit_id": "abb2e152f99285512a4d5281562c69338cd23efd",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abb2e152f99285512a4d5281562c69338cd23efd",
        "buggy_code": "private static final String PASSWORD = \"sonar\";",
        "fixed_code": "private static final String PASSWORD = USER;",
        "patch": "@@ -44,7 +44,7 @@ public class DryRunDatabase implements BatchComponent {\n   private static final String DRIVER = \"org.h2.Driver\";\n   private static final String URL = \"jdbc:h2:\";\n   private static final String USER = \"sonar\";\n-  private static final String PASSWORD = \"sonar\";\n+  private static final String PASSWORD = USER;\n \n   private static final int DEFAULT_DRY_RUN_READ_TIMEOUT_SEC = 60;\n "
    },
    {
        "commit_id": "bce5d445c4be210e8693916ec1820199477634f6",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bce5d445c4be210e8693916ec1820199477634f6",
        "buggy_code": "throw new IllegalStateException(e);",
        "fixed_code": "throw new IllegalStateException(\"Encoding not supported\", e);",
        "patch": "@@ -78,7 +78,7 @@ public static String encode(String toEncode) {\n     try {\n       return URLEncoder.encode(toEncode, \"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n-      throw new IllegalStateException(e);\n+      throw new IllegalStateException(\"Encoding not supported\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "bce5d445c4be210e8693916ec1820199477634f6",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bce5d445c4be210e8693916ec1820199477634f6",
        "buggy_code": "throw new SonarException(e);",
        "fixed_code": "throw new SonarException(\"Cannot configure project\", e);",
        "patch": "@@ -60,7 +60,7 @@ public ProjectDefinition configure(List<MavenProject> poms, MavenProject root) {\n \n       rebuildModuleHierarchy(paths, defs);\n     } catch (IOException e) {\n-      throw new SonarException(e);\n+      throw new SonarException(\"Cannot configure project\", e);\n     }\n \n     ProjectDefinition rootProject = defs.get(root);"
    },
    {
        "commit_id": "bce5d445c4be210e8693916ec1820199477634f6",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bce5d445c4be210e8693916ec1820199477634f6",
        "buggy_code": "throw new IllegalStateException(e);",
        "fixed_code": "throw new IllegalStateException(\"Encoding not supported\", e);",
        "patch": "@@ -47,7 +47,7 @@ public String encodeUrl(String url) {\n       return URLEncoder.encode(url, \"UTF-8\");\n \n     } catch (UnsupportedEncodingException e) {\n-      throw new IllegalStateException(e);\n+      throw new IllegalStateException(\"Encoding not supported\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "buggy_code": "boolean visible = (tree.getItemCount() == 0 && !filters.hasKeyword());",
        "fixed_code": "boolean visible = tree.getItemCount() == 0 && !filters.hasKeyword();",
        "patch": "@@ -108,7 +108,7 @@ private Label createNoLibsMessage() {\n   }\n \n   public void filter() {\n-    boolean visible = (tree.getItemCount() == 0 && !filters.hasKeyword());\n+    boolean visible = tree.getItemCount() == 0 && !filters.hasKeyword();\n     for (int index = 0; index < tree.getItemCount(); index++) {\n       Library lib = (Library) tree.getItem(index);\n       visible |= !lib.filter(filters.getKeywordFilter().getKeyword(), filters.isTestFiltered());"
    },
    {
        "commit_id": "cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "buggy_code": "return (children == null ? Collections.<Bucket>emptyList() : children);",
        "fixed_code": "return children == null ? Collections.<Bucket>emptyList() : children;",
        "patch": "@@ -71,7 +71,7 @@ private void removeChild(Bucket child) {\n   }\n \n   public List<Bucket> getChildren() {\n-    return (children == null ? Collections.<Bucket>emptyList() : children);\n+    return children == null ? Collections.<Bucket>emptyList() : children;\n   }\n \n   public Bucket getParent() {"
    },
    {
        "commit_id": "cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "buggy_code": "throw new RuntimeException(\"Can not copy the JDBC driver from \" + driver + \" to \" + deployedDriver, e);",
        "fixed_code": "throw new IllegalStateException(\"Can not copy the JDBC driver from \" + driver + \" to \" + deployedDriver, e);",
        "patch": "@@ -42,7 +42,7 @@ public void start() {\n         FileUtils.copyFile(driver, deployedDriver);\n \n       } catch (IOException e) {\n-        throw new RuntimeException(\"Can not copy the JDBC driver from \" + driver + \" to \" + deployedDriver, e);\n+        throw new IllegalStateException(\"Can not copy the JDBC driver from \" + driver + \" to \" + deployedDriver, e);\n       }\n     }\n     File deployedDriverIndex = fileSystem.getDeployedJdbcDriverIndex();"
    },
    {
        "commit_id": "cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "buggy_code": "public final double probability;",
        "fixed_code": "private final double probability;",
        "patch": "@@ -22,7 +22,7 @@\n \n public abstract class Detector {\n \n-  public final double probability;\n+  private final double probability;\n \n   public Detector(double probability) {\n     if (probability < 0 || probability > 1) {"
    },
    {
        "commit_id": "cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfd9912407a505d6005d70f89ffc01c2d19b7ab4",
        "buggy_code": "String format = (includeTime ? DATETIME_FORMAT : DATE_FORMAT);",
        "fixed_code": "String format = includeTime ? DATETIME_FORMAT : DATE_FORMAT;",
        "patch": "@@ -64,7 +64,7 @@ public static String toQueryParam(String[] strings) {\n   }\n \n   public static String toQueryParam(Date d, boolean includeTime) {\n-    String format = (includeTime ? DATETIME_FORMAT : DATE_FORMAT);\n+    String format = includeTime ? DATETIME_FORMAT : DATE_FORMAT;\n     SimpleDateFormat dateFormat = new SimpleDateFormat(format);\n     return dateFormat.format(d);\n   }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (resource != null ? resource : project);",
        "fixed_code": "return resource!=null ? resource : project;",
        "patch": "@@ -182,6 +182,6 @@ public void deleteEvent(Event event) {\n   }\n \n   private Resource resourceOrProject(Resource resource) {\n-    return (resource != null ? resource : project);\n+    return resource!=null ? resource : project;\n   }\n }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "boolean isModule = (child instanceof Project);",
        "fixed_code": "boolean isModule = child instanceof Project;",
        "patch": "@@ -61,7 +61,7 @@ public void execute() {\n   DecoratorContext decorateResource(Resource resource, Collection<Decorator> decorators, boolean executeDecorators) {\n     List<DecoratorContext> childrenContexts = Lists.newArrayList();\n     for (Resource child : index.getChildren(resource)) {\n-      boolean isModule = (child instanceof Project);\n+      boolean isModule = child instanceof Project;\n       DefaultDecoratorContext childContext = (DefaultDecoratorContext) decorateResource(child, decorators, !isModule);\n       childrenContexts.add(childContext.setReadOnly(true));\n     }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "HtmlOptions opts = (options == null ? HtmlOptions.DEFAULT : options);",
        "fixed_code": "HtmlOptions opts = options == null ? HtmlOptions.DEFAULT : options;",
        "patch": "@@ -39,7 +39,7 @@ public String toHtml(Reader code) {\n   }\n \n   public String toHtml(Reader code, HtmlOptions options) {\n-    HtmlOptions opts = (options == null ? HtmlOptions.DEFAULT : options);\n+    HtmlOptions opts = options == null ? HtmlOptions.DEFAULT : options;\n     return new HtmlRenderer(opts).render(code, tokenizers);\n   }\n "
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (code.lastChar() == firstChar && evenNumberOfBackSlashBeforeDelimiter() && literalValue.length() > 1);",
        "fixed_code": "return code.lastChar()==firstChar && evenNumberOfBackSlashBeforeDelimiter() && literalValue.length()>1;",
        "patch": "@@ -63,7 +63,7 @@ public EndCommentMatcher(int firstChar, CodeReader code) {\n \n     public boolean match(int endFlag) {\n       literalValue.append((char) endFlag);\n-      return (code.lastChar() == firstChar && evenNumberOfBackSlashBeforeDelimiter() && literalValue.length() > 1);\n+      return code.lastChar()==firstChar && evenNumberOfBackSlashBeforeDelimiter() && literalValue.length()>1;\n     }\n \n     private boolean evenNumberOfBackSlashBeforeDelimiter() {"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (vertex != null ? wrapComponent(vertex) : null);",
        "fixed_code": "return vertex != null ? wrapComponent(vertex) : null;",
        "patch": "@@ -55,7 +55,7 @@ public ComponentVertex wrapComponent(Vertex vertex) {\n \n   public ComponentVertex getComponent(String key) {\n     Vertex vertex = GraphUtil.single(getUnderlyingGraph().getVertices(\"key\", key));\n-    return (vertex != null ? wrapComponent(vertex) : null);\n+    return vertex != null ? wrapComponent(vertex) : null;\n   }\n \n   public ComponentVertex addComponent(Resource resource, @Nullable Snapshot snapshot) {"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (max != null ? max.intValue() : 0);",
        "fixed_code": "return max != null ? max.intValue() : 0;",
        "patch": "@@ -48,7 +48,7 @@ public int selectMaxOrderIndexForNullUser() {\n     ActiveDashboardMapper mapper = session.getMapper(ActiveDashboardMapper.class);\n     try {\n       Integer max = mapper.selectMaxOrderIndexForNullUser();\n-      return (max != null ? max.intValue() : 0);\n+      return max != null ? max.intValue() : 0;\n     } finally {\n       session.close();\n     }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (m.getEnabled() && m.getOrigin() != Metric.Origin.JAV);",
        "fixed_code": "return m.getEnabled() && m.getOrigin() != Metric.Origin.JAV;",
        "patch": "@@ -71,7 +71,7 @@ public Collection<Metric> getUserDefinedMetrics() {\n     return CollectionUtils.select(getMetricsByName().values(), new Predicate() {\n       public boolean evaluate(Object o) {\n         Metric m = (Metric) o;\n-        return (m.getEnabled() && m.getOrigin() != Metric.Origin.JAV);\n+        return m.getEnabled() && m.getOrigin() != Metric.Origin.JAV;\n       }\n     });\n   }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));",
        "fixed_code": "hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt(b & 0x0F));",
        "patch": "@@ -96,7 +96,7 @@ public int[] toIntArray() {\n   public String toHexString() {\n     StringBuilder hex = new StringBuilder(2 * bytes.length);\n     for (byte b : bytes) {\n-      hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));\n+      hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt(b & 0x0F));\n     }\n     return hex.toString();\n   }"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "int value = (StringUtils.isBlank(entry.getValue()) ? 0 : Integer.parseInt(entry.getValue()));",
        "fixed_code": "int value = StringUtils.isBlank(entry.getValue()) ? 0 : Integer.parseInt(entry.getValue());",
        "patch": "@@ -106,7 +106,7 @@ public CountDistributionBuilder add(Measure measure) {\n       Map<String, String> map = KeyValueFormat.parse(measure.getData());\n       for (Map.Entry<String, String> entry : map.entrySet()) {\n         String key = entry.getKey();\n-        int value = (StringUtils.isBlank(entry.getValue()) ? 0 : Integer.parseInt(entry.getValue()));\n+        int value = StringUtils.isBlank(entry.getValue()) ? 0 : Integer.parseInt(entry.getValue());\n         if (NumberUtils.isNumber(key)) {\n           add(NumberUtils.toInt(key), value);\n         } else {"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "return (result != null ? result : defaultValue);",
        "fixed_code": "return result != null ? result : defaultValue;",
        "patch": "@@ -87,7 +87,7 @@ public static Double getVariation(Measure measure, int periodIndex, @Nullable Do\n     if (measure != null) {\n       result = measure.getVariation(periodIndex);\n     }\n-    return (result != null ? result : defaultValue);\n+    return result != null ? result : defaultValue;\n   }\n \n   public static Long getVariationAsLong(Measure measure, int periodIndex) {"
    },
    {
        "commit_id": "9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9fe28c5e6f56bd44633283d8b8cb01c5791b7d2a",
        "buggy_code": "Class clazz = (extension instanceof Class ? (Class) extension : extension.getClass());",
        "fixed_code": "Class clazz = extension instanceof Class ? (Class) extension : extension.getClass();",
        "patch": "@@ -92,7 +92,7 @@ static boolean isExtensionProvider(Object extension) {\n   }\n \n   static boolean isType(Object extension, Class<? extends Extension> extensionClass) {\n-    Class clazz = (extension instanceof Class ? (Class) extension : extension.getClass());\n+    Class clazz = extension instanceof Class ? (Class) extension : extension.getClass();\n     return extensionClass.isAssignableFrom(clazz);\n   }\n }"
    },
    {
        "commit_id": "a48f3652c54ac1b9444ff740ab020d035fba293d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a48f3652c54ac1b9444ff740ab020d035fba293d",
        "buggy_code": "throw new RuntimeException(\"Problem while reading \" + getFileName() + \":\" + e.getMessage(), e);",
        "fixed_code": "throw new IllegalStateException(\"Problem while reading \" + getFileName() + \":\" + e.getMessage(), e);",
        "patch": "@@ -69,7 +69,7 @@ protected List<String> load() {\n         }\n         return lines;\n       } catch (Exception e) {\n-        throw new RuntimeException(\"Problem while reading \" + getFileName() + \":\" + e.getMessage(), e);\n+        throw new IllegalStateException(\"Problem while reading \" + getFileName() + \":\" + e.getMessage(), e);\n       } finally {\n         Closeables.closeQuietly(lnr);\n       }"
    },
    {
        "commit_id": "a48f3652c54ac1b9444ff740ab020d035fba293d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a48f3652c54ac1b9444ff740ab020d035fba293d",
        "buggy_code": "boolean isFeedbackEdge = (edge != null && feedbackEdges.contains(edge));",
        "fixed_code": "boolean isFeedbackEdge = edge != null && feedbackEdges.contains(edge);",
        "patch": "@@ -53,7 +53,7 @@ private void initCells(Set<Edge> feedbackEdges) {\n         V to = vertices[y];\n \n         Edge<V> edge = graph.getEdge(from, to);\n-        boolean isFeedbackEdge = (edge != null && feedbackEdges.contains(edge));\n+        boolean isFeedbackEdge = edge != null && feedbackEdges.contains(edge);\n         DsmCell cell = new DsmCell(edge, isFeedbackEdge);\n         cells[x][y] = cell;\n       }"
    },
    {
        "commit_id": "a48f3652c54ac1b9444ff740ab020d035fba293d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a48f3652c54ac1b9444ff740ab020d035fba293d",
        "buggy_code": "boolean isCyclicGraph = (partitionner.leftOrderedIndex < partitionner.rightOrderedIndex);",
        "fixed_code": "boolean isCyclicGraph = partitionner.leftOrderedIndex < partitionner.rightOrderedIndex;",
        "patch": "@@ -39,7 +39,7 @@ public static <V> void sort(Dsm<V> dsm) {\n       boolean dsmCanBeSortedOnRight = partitionner.pushToRightVerticesWithoutOutgointEdges();\n       dsmCanBeSorted = dsmCanBeSortedOnLeft || dsmCanBeSortedOnRight;\n     }\n-    boolean isCyclicGraph = (partitionner.leftOrderedIndex < partitionner.rightOrderedIndex);\n+    boolean isCyclicGraph = partitionner.leftOrderedIndex < partitionner.rightOrderedIndex;\n     if (isCyclicGraph) {\n       throw new IllegalStateException(\"Can't sort a cyclic graph.\");\n     }"
    },
    {
        "commit_id": "a48f3652c54ac1b9444ff740ab020d035fba293d",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a48f3652c54ac1b9444ff740ab020d035fba293d",
        "buggy_code": "for (index++; index < token.length(); index++) {",
        "fixed_code": "while (++index<token.length()) {",
        "patch": "@@ -65,7 +65,7 @@ protected void consume(CharSequence token, MarkdownOutput output) {\n     private int searchIndexOfFirstCharacter(CharSequence token) {\n       for (int index = 0; index < token.length(); index++) {\n         if (token.charAt(index) == '*') {\n-          for (index++; index < token.length(); index++) {\n+          while (++index<token.length()) {\n             if (token.charAt(index) != ' ') {\n               return index;\n             }"
    },
    {
        "commit_id": "5793d47116097bbae05cd8811187ca1a0b362551",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5793d47116097bbae05cd8811187ca1a0b362551",
        "buggy_code": "return new Measure(context.getTargetMetric(), (count==0 ? 0.0 : sum/count));",
        "fixed_code": "return new Measure(context.getTargetMetric(), count==0 ? 0.0 : sum/count);",
        "patch": "@@ -58,6 +58,6 @@ public Measure calculate(FormulaData data, FormulaContext context) {\n     if (!hasValue && !forceZeroIfMissingData) {\n       return null;\n     }\n-    return new Measure(context.getTargetMetric(), (count==0 ? 0.0 : sum/count));\n+    return new Measure(context.getTargetMetric(), count==0 ? 0.0 : sum/count);\n   }\n }"
    },
    {
        "commit_id": "5793d47116097bbae05cd8811187ca1a0b362551",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5793d47116097bbae05cd8811187ca1a0b362551",
        "buggy_code": "return (key != null ? key.hashCode() : 0);",
        "fixed_code": "return key != null ? key.hashCode() : 0;",
        "patch": "@@ -90,7 +90,7 @@ public boolean equals(Object o) {\n \n   @Override\n   public int hashCode() {\n-    return (key != null ? key.hashCode() : 0);\n+    return key != null ? key.hashCode() : 0;\n   }\n \n   @Override"
    },
    {
        "commit_id": "5793d47116097bbae05cd8811187ca1a0b362551",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5793d47116097bbae05cd8811187ca1a0b362551",
        "buggy_code": "Class<?> initialClass = (objectOrClass instanceof Class<?> ? (Class<?>) objectOrClass : objectOrClass.getClass());",
        "fixed_code": "Class<?> initialClass = objectOrClass instanceof Class<?> ? (Class<?>) objectOrClass : objectOrClass.getClass();",
        "patch": "@@ -40,7 +40,7 @@ private AnnotationUtils() {\n    * @since 3.1\n    */\n   public static <A extends Annotation> A getAnnotation(Object objectOrClass, Class<A> annotationClass) {\n-    Class<?> initialClass = (objectOrClass instanceof Class<?> ? (Class<?>) objectOrClass : objectOrClass.getClass());\n+    Class<?> initialClass = objectOrClass instanceof Class<?> ? (Class<?>) objectOrClass : objectOrClass.getClass();\n     \n     for (Class<?> aClass = initialClass; aClass != null; aClass = aClass.getSuperclass()) {\n       A result = aClass.getAnnotation(annotationClass);"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "int maxPeriods = (Qualifiers.isView(resource, true) ? 3 : 5);",
        "fixed_code": "int maxPeriods = Qualifiers.isView(resource, true) ? 3 : 5;",
        "patch": "@@ -52,7 +52,7 @@ public List<Metric> generatesNewCoverageMetrics() {\n \n   public void decorate(Resource resource, DecoratorContext context) {\n     if (shouldDecorate(resource)) {\n-      int maxPeriods = (Qualifiers.isView(resource, true) ? 3 : 5);\n+      int maxPeriods = Qualifiers.isView(resource, true) ? 3 : 5;\n       aggregate(context, CoreMetrics.NEW_LINES_TO_COVER, maxPeriods);\n       aggregate(context, CoreMetrics.NEW_UNCOVERED_LINES, maxPeriods);\n       aggregate(context, CoreMetrics.NEW_CONDITIONS_TO_COVER, maxPeriods);"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "context.saveMeasure(CoreMetrics.SUSPECT_LCOM4_DENSITY, (total / totalFiles));",
        "fixed_code": "context.saveMeasure(CoreMetrics.SUSPECT_LCOM4_DENSITY, total / totalFiles);",
        "patch": "@@ -73,7 +73,7 @@ private void decorateProject(DecoratorContext context) {\n     }\n \n     if (hasLcom4 && totalFiles > 0) {\n-      context.saveMeasure(CoreMetrics.SUSPECT_LCOM4_DENSITY, (total / totalFiles));\n+      context.saveMeasure(CoreMetrics.SUSPECT_LCOM4_DENSITY, total / totalFiles);\n     }\n   }\n "
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "cell = buildCell(row, col, weight, (col > row ? GRID_CELL_TOP_RIGHT : GRID_CELL_BOTTOM_LEFT));",
        "fixed_code": "cell = buildCell(row, col, weight, col > row ? GRID_CELL_TOP_RIGHT : GRID_CELL_BOTTOM_LEFT);",
        "patch": "@@ -289,7 +289,7 @@ private Label createGridCell(final int row, final int col, final int weight) {\n \n   private Label createNonDiagonalCell(final int row, final int col, int weight) {\n     Label cell;\n-    cell = buildCell(row, col, weight, (col > row ? GRID_CELL_TOP_RIGHT : GRID_CELL_BOTTOM_LEFT));\n+    cell = buildCell(row, col, weight, col > row ? GRID_CELL_TOP_RIGHT : GRID_CELL_BOTTOM_LEFT);\n \n     if (weight > 0) {\n       String tooltip = data.get(col).getName() + \" -> \" + data.get(row).getName() + \" (\" + weight + \"). \" + Dictionary.getDictionary(\"l10n\").get(\"design.cellTooltip\");"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "Preconditions.checkArgument((!hidden || (onQualifiers.isEmpty()) && onlyOnQualifiers.isEmpty()), \"Cannot be hidden and defining qualifiers on which to display\");",
        "fixed_code": "Preconditions.checkArgument(!hidden || (onQualifiers.isEmpty() && onlyOnQualifiers.isEmpty()), \"Cannot be hidden and defining qualifiers on which to display\");",
        "patch": "@@ -497,7 +497,7 @@ public PropertyDefinition build() {\n       Preconditions.checkArgument(!Strings.isNullOrEmpty(key), \"Key must be set\");\n       fixType(key, type);\n       Preconditions.checkArgument(onQualifiers.isEmpty() || onlyOnQualifiers.isEmpty(), \"Cannot define both onQualifiers and onlyOnQualifiers\");\n-      Preconditions.checkArgument((!hidden || (onQualifiers.isEmpty()) && onlyOnQualifiers.isEmpty()), \"Cannot be hidden and defining qualifiers on which to display\");\n+      Preconditions.checkArgument(!hidden || (onQualifiers.isEmpty() && onlyOnQualifiers.isEmpty()), \"Cannot be hidden and defining qualifiers on which to display\");\n       if (hidden) {\n         global = false;\n       }"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "return ((Long) o);",
        "fixed_code": "return (Long) o;",
        "patch": "@@ -142,7 +142,7 @@ public static Long toLong(@Nullable Object o) {\n       return ((Integer)o).longValue();\n     }\n     if (o instanceof Long) {\n-      return ((Long) o);\n+      return (Long) o;\n     }\n     if (o instanceof String) {\n       if (StringUtils.isBlank((String)o)) {"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "return children != null && children.size() != 0;",
        "fixed_code": "return children != null && !children.isEmpty();",
        "patch": "@@ -276,7 +276,7 @@ public boolean hasChild(SourceCode squidUnit) {\n   }\n \n   public boolean hasChildren() {\n-    return children != null && children.size() != 0;\n+    return children != null && !children.isEmpty();\n   }\n \n   public boolean hasAmongParents(SourceCode expectedParent) {"
    },
    {
        "commit_id": "6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6ed0c6c21ad38ece31a96c9db3e2fdfa0e07eb21",
        "buggy_code": "throw new RuntimeException(e);",
        "fixed_code": "throw new IllegalArgumentException(\"Fail to parse date property '\" + field + \"': \" + format, e);",
        "patch": "@@ -111,7 +111,7 @@ private static Date parseDate(Map obj, String field, String format) {\n         return dateFormat.parse(value);\n \n       } catch (ParseException e) {\n-        throw new RuntimeException(e);\n+        throw new IllegalArgumentException(\"Fail to parse date property '\" + field + \"': \" + format, e);\n       }\n     }\n     return null;"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "boolean isRemovedRule = (rule == null || Rule.STATUS_REMOVED.equals(rule.getStatus()));",
        "fixed_code": "boolean isRemovedRule = rule == null || Rule.STATUS_REMOVED.equals(rule.getStatus());",
        "patch": "@@ -186,7 +186,7 @@ private void updateUnmatchedIssue(DefaultIssue issue, boolean forceEndOfLife) {\n     Rule rule = ruleFinder.findByKey(issue.ruleKey());\n     if (manualIssue) {\n       // Manual rules are not declared in Quality profiles, so no need to check ActiveRule\n-      boolean isRemovedRule = (rule == null || Rule.STATUS_REMOVED.equals(rule.getStatus()));\n+      boolean isRemovedRule = rule == null || Rule.STATUS_REMOVED.equals(rule.getStatus());\n       issue.setEndOfLife(forceEndOfLife || isRemovedRule);\n       issue.setOnDisabledRule(isRemovedRule);\n     } else {"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "Class clazz = (extension instanceof Class ? (Class) extension : extension.getClass());",
        "fixed_code": "Class clazz = extension instanceof Class ? (Class) extension : extension.getClass();",
        "patch": "@@ -68,7 +68,7 @@ public static boolean isMavenExtensionOnly(Object extension) {\n   }\n \n   public static boolean isType(Object extension, Class<?> extensionClass) {\n-    Class clazz = (extension instanceof Class ? (Class) extension : extension.getClass());\n+    Class clazz = extension instanceof Class ? (Class) extension : extension.getClass();\n     return extensionClass.isAssignableFrom(clazz);\n   }\n }"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "throw (wrapHttpException ? handleHttpException(e) : e);",
        "fixed_code": "throw wrapHttpException ? handleHttpException(e) : e;",
        "patch": "@@ -87,7 +87,7 @@ public String request(String pathStartingWithSlash, boolean wrapHttpException, @\n     try {\n       return IOUtils.toString(inputSupplier.getInput(), \"UTF-8\");\n     } catch (HttpDownloader.HttpException e) {\n-      throw (wrapHttpException ? handleHttpException(e) : e);\n+      throw wrapHttpException ? handleHttpException(e) : e;\n     } catch (IOException e) {\n       throw new SonarException(String.format(\"Unable to request: %s\", pathStartingWithSlash), e);\n     }"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "return (snapshots.isEmpty() ? null : snapshots.get(0));",
        "fixed_code": "return snapshots.isEmpty() ? null : snapshots.get(0);",
        "patch": "@@ -58,6 +58,6 @@ private Snapshot findSnapshot(Snapshot projectSnapshot, Date date) {\n         .setMaxResults(1)\n         .getResultList();\n \n-    return (snapshots.isEmpty() ? null : snapshots.get(0));\n+    return snapshots.isEmpty() ? null : snapshots.get(0);\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "return (snapshots.isEmpty() ? null : snapshots.get(0));",
        "fixed_code": "return snapshots.isEmpty() ? null : snapshots.get(0);",
        "patch": "@@ -194,7 +194,7 @@ private Snapshot findLibrarySnapshot(Integer resourceId, String version) {\n     if (snapshots.isEmpty()) {\n       snapshots = session.getResults(Snapshot.class, \"resourceId\", resourceId, \"version\", version, \"scope\", Scopes.PROJECT, \"qualifier\", Qualifiers.LIBRARY);\n     }\n-    return (snapshots.isEmpty() ? null : snapshots.get(0));\n+    return snapshots.isEmpty() ? null : snapshots.get(0);\n   }\n \n   /**"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "return scanIssues.initAndAddIssue(((DefaultIssue) issue));",
        "fixed_code": "return scanIssues.initAndAddIssue((DefaultIssue) issue);",
        "patch": "@@ -50,7 +50,7 @@ public IssueBuilder newIssueBuilder() {\n \n   @Override\n   public boolean addIssue(Issue issue) {\n-    return scanIssues.initAndAddIssue(((DefaultIssue) issue));\n+    return scanIssues.initAndAddIssue((DefaultIssue) issue);\n   }\n \n   @SuppressWarnings(\"unchecked\")"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "Violation v = (violation != null ? violation : deprecatedViolations.toViolation(issue));",
        "fixed_code": "Violation v = violation != null ? violation : deprecatedViolations.toViolation(issue);",
        "patch": "@@ -50,7 +50,7 @@ public boolean accept(DefaultIssue issue, @Nullable Violation violation) {\n       }\n     }\n     if (!deprecatedFilters.isEmpty()) {\n-      Violation v = (violation != null ? violation : deprecatedViolations.toViolation(issue));\n+      Violation v = violation != null ? violation : deprecatedViolations.toViolation(issue);\n       return !deprecatedFilters.isIgnored(v);\n     }\n     return true;"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": ".name(\"is_new\").value((issue.isNew()))",
        "fixed_code": ".name(\"is_new\").value(issue.isNew())",
        "patch": "@@ -119,7 +119,7 @@ void writeJson(Collection<Resource> resources, Writer writer) {\n             .name(\"rule_repository\").value(issue.ruleKey().repository())\n             .name(\"rule_name\").value(ruleName(issue.ruleKey()))\n             .name(\"switched_off\").value(Issue.RESOLUTION_FALSE_POSITIVE.equals(issue.resolution()))\n-            .name(\"is_new\").value((issue.isNew()))\n+            .name(\"is_new\").value(issue.isNew())\n             .name(\"created_at\").value(DateUtils.formatDateTime(issue.creationDate()))\n             .endObject();\n         }"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "Locale localeWithoutCountry = (locale.getCountry() == null ? locale : new Locale(locale.getLanguage()));",
        "fixed_code": "Locale localeWithoutCountry = locale.getCountry() == null ? locale : new Locale(locale.getLanguage());",
        "patch": "@@ -67,7 +67,7 @@ public String getName(Rule rule, Locale locale) {\n   public String getDescription(String repositoryKey, String ruleKey, Locale locale) {\n     String relatedProperty = new StringBuilder().append(RULE_PREFIX).append(repositoryKey).append(\".\").append(ruleKey).append(NAME_SUFFIX).toString();\n \n-    Locale localeWithoutCountry = (locale.getCountry() == null ? locale : new Locale(locale.getLanguage()));\n+    Locale localeWithoutCountry = locale.getCountry() == null ? locale : new Locale(locale.getLanguage());\n     String ruleDescriptionFilePath = \"rules/\" + repositoryKey + \"/\" + ruleKey + \".html\";\n     String description = i18nManager.messageFromFile(localeWithoutCountry, ruleDescriptionFilePath, relatedProperty, true);\n     if (description == null) {"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "Date dateWithoutMilliseconds = (d == null ? null : DateUtils.truncate(d, Calendar.SECOND));",
        "fixed_code": "Date dateWithoutMilliseconds = d == null ? null : DateUtils.truncate(d, Calendar.SECOND);",
        "patch": "@@ -171,7 +171,7 @@ public void addComment(DefaultIssue issue, String text, IssueChangeContext conte\n   }\n \n   public void setCloseDate(DefaultIssue issue, @Nullable Date d, IssueChangeContext context) {\n-    Date dateWithoutMilliseconds = (d == null ? null : DateUtils.truncate(d, Calendar.SECOND));\n+    Date dateWithoutMilliseconds = d == null ? null : DateUtils.truncate(d, Calendar.SECOND);\n     if (!Objects.equal(dateWithoutMilliseconds, issue.closeDate())) {\n       issue.setCloseDate(d);\n       issue.setUpdateDate(context.date());"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "Long rootSnapshotId = (baseSnapshot.getRootId() != null ? baseSnapshot.getRootId() : baseSnapshot.getId());",
        "fixed_code": "Long rootSnapshotId = baseSnapshot.getRootId() != null ? baseSnapshot.getRootId() : baseSnapshot.getId();",
        "patch": "@@ -153,7 +153,7 @@ private void appendResourceBaseCondition(StringBuilder sb) {\n       if (filter.isOnBaseResourceChildren()) {\n         sb.append(\" AND s.parent_snapshot_id=\").append(baseSnapshot.getId());\n       } else {\n-        Long rootSnapshotId = (baseSnapshot.getRootId() != null ? baseSnapshot.getRootId() : baseSnapshot.getId());\n+        Long rootSnapshotId = baseSnapshot.getRootId() != null ? baseSnapshot.getRootId() : baseSnapshot.getId();\n         sb.append(\" AND s.root_snapshot_id=\").append(rootSnapshotId);\n         sb.append(\" AND s.path LIKE '\").append(StringUtils.defaultString(baseSnapshot.getPath())).append(baseSnapshot.getId()).append(\".%'\");\n       }"
    },
    {
        "commit_id": "424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424cffa7da8a34ab30cf4426cb3ee897ba01c743",
        "buggy_code": "private transient Command command = null;",
        "fixed_code": "private final Command command;",
        "patch": "@@ -23,7 +23,7 @@\n \n public final class CommandException extends RuntimeException {\n \n-  private transient Command command = null;\n+  private final Command command;\n \n   public CommandException(Command command, String message, @Nullable Throwable throwable) {\n     super(message + \" [command: \" + command + \"]\", throwable);"
    },
    {
        "commit_id": "37eacc717911777f4679f6150db018eb652f3cb9",
        "commit_message": "SONAR-3858 - Fixed quality issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/37eacc717911777f4679f6150db018eb652f3cb9",
        "buggy_code": "public void shouldSetNullValueWhenNothingHasChanged() throws Exception {",
        "fixed_code": "public void shouldLeaveNullValueWhenNothingHasChanged() throws Exception {",
        "patch": "@@ -143,7 +143,7 @@ public void shouldNotGetNewConditionsWhenNewLineHasNoConditions() throws ParseEx\n   }\n \n   @Test\n-  public void shouldSetNullValueWhenNothingHasChanged() throws Exception {\n+  public void shouldLeaveNullValueWhenNothingHasChanged() throws Exception {\n     String lastCommitDatesByLine = \"1=2008-08-02T13:56:37+0200;\" +\n                                    \"2=2008-08-02T13:56:37+0200;\" +\n                                    \"3=2008-08-02T13:56:37+0200;\" +"
    },
    {
        "commit_id": "9c4ffc5a109d4452930b7d655aff82931d764fd5",
        "commit_message": "SONAR-4540 Notifications should not be sent on changes of issue line, author or effort to fix",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c4ffc5a109d4452930b7d655aff82931d764fd5",
        "buggy_code": "if (!issue.isNew() && issue.isChanged()) {",
        "fixed_code": "if (!issue.isNew() && issue.isChanged() && issue.mustSendNotifications()) {",
        "patch": "@@ -58,7 +58,7 @@ private void sendNotifications(Project project) {\n       if (issue.isNew() && issue.resolution() == null) {\n         newIssues++;\n       }\n-      if (!issue.isNew() && issue.isChanged()) {\n+      if (!issue.isNew() && issue.isChanged() && issue.mustSendNotifications()) {\n         Rule rule = ruleFinder.findByKey(issue.ruleKey());\n         // TODO warning - rules with status REMOVED are currently ignored, but should not\n         if (rule != null) {"
    },
    {
        "commit_id": "e7d82366f3530741a2512f9935bbf1c148f0765a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e7d82366f3530741a2512f9935bbf1c148f0765a",
        "buggy_code": "return issueFilterService.canShareFilter(UserSession.get().login());",
        "fixed_code": "return issueFilterService.canShareFilter(UserSession.get());",
        "patch": "@@ -412,7 +412,7 @@ public boolean isUserAuthorized(DefaultIssueFilter issueFilter) {\n   }\n \n   public boolean canUserShareIssueFilter(){\n-    return issueFilterService.canShareFilter(UserSession.get().login());\n+    return issueFilterService.canShareFilter(UserSession.get());\n   }\n \n   public String serializeFilterQuery(Map<String, Object> filterQuery) {"
    },
    {
        "commit_id": "e7d82366f3530741a2512f9935bbf1c148f0765a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e7d82366f3530741a2512f9935bbf1c148f0765a",
        "buggy_code": "verify(issueFilterService).canShareFilter(anyString());",
        "fixed_code": "verify(issueFilterService).canShareFilter(any(UserSession.class));",
        "patch": "@@ -540,7 +540,7 @@ public void should_check_if_user_is_authorized_to_see_issue_filter() {\n   @Test\n   public void should_check_if_user_can_share_issue_filter(){\n     service.canUserShareIssueFilter();\n-    verify(issueFilterService).canShareFilter(anyString());\n+    verify(issueFilterService).canShareFilter(any(UserSession.class));\n   }\n \n   @Test"
    },
    {
        "commit_id": "45d043ba336e1ebd0e9f7f48976bbb4ad2b34974",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/45d043ba336e1ebd0e9f7f48976bbb4ad2b34974",
        "buggy_code": "public String request(String pathStartingWithSlash, boolean wrapHttpException, Integer timeoutMillis) {",
        "fixed_code": "public String request(String pathStartingWithSlash, boolean wrapHttpException, @Nullable Integer timeoutMillis) {",
        "patch": "@@ -82,7 +82,7 @@ public String request(String pathStartingWithSlash, boolean wrapHttpException) {\n     return request(pathStartingWithSlash, wrapHttpException, null);\n   }\n \n-  public String request(String pathStartingWithSlash, boolean wrapHttpException, Integer timeoutMillis) {\n+  public String request(String pathStartingWithSlash, boolean wrapHttpException, @Nullable Integer timeoutMillis) {\n     InputSupplier<InputStream> inputSupplier = doRequest(pathStartingWithSlash, timeoutMillis);\n     try {\n       return IOUtils.toString(inputSupplier.getInput(), \"UTF-8\");"
    },
    {
        "commit_id": "68f2569be422634fae7f32eba8056e90fffe9684",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/68f2569be422634fae7f32eba8056e90fffe9684",
        "buggy_code": "public Metric setId(Integer id) {",
        "fixed_code": "public Metric setId(@Nullable Integer id) {",
        "patch": "@@ -274,7 +274,7 @@ public Integer getId() {\n   /**\n    * For internal use only\n    */\n-  public Metric setId(Integer id) {\n+  public Metric setId(@Nullable Integer id) {\n     this.id = id;\n     return this;\n   }"
    },
    {
        "commit_id": "68f2569be422634fae7f32eba8056e90fffe9684",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/68f2569be422634fae7f32eba8056e90fffe9684",
        "buggy_code": "public RuleMeasure setValue(Double v) {",
        "fixed_code": "public RuleMeasure setValue(@Nullable Double v) {",
        "patch": "@@ -121,7 +121,7 @@ public boolean equals(Object obj) {\n   }\n \n   @Override\n-  public RuleMeasure setValue(Double v) {\n+  public RuleMeasure setValue(@Nullable Double v) {\n     return (RuleMeasure) super.setValue(v);\n   }\n "
    },
    {
        "commit_id": "b3ac874100ac8ac2f6b0df47e39395d3ea88c1f8",
        "commit_message": "SONAR-4466 Fixed quality issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b3ac874100ac8ac2f6b0df47e39395d3ea88c1f8",
        "buggy_code": "if((templateId == null || templateId != existingTemplate.getId()) && (existingTemplate.getName().equals(templateName))) {",
        "fixed_code": "if((templateId == null ||  !existingTemplate.getId().equals(templateId)) && (existingTemplate.getName().equals(templateName))) {",
        "patch": "@@ -144,7 +144,7 @@ private void validateTemplateName(Long templateId, String templateName) {\n     List<PermissionTemplateDto> existingTemplates = permissionDao.selectAllPermissionTemplates();\n     if(existingTemplates != null) {\n       for (PermissionTemplateDto existingTemplate : existingTemplates) {\n-        if((templateId == null || templateId != existingTemplate.getId()) && (existingTemplate.getName().equals(templateName))) {\n+        if((templateId == null ||  !existingTemplate.getId().equals(templateId)) && (existingTemplate.getName().equals(templateName))) {\n           String errorMsg = \"A template with that name already exists\";\n           LOG.error(errorMsg);\n           throw new BadRequestException(errorMsg);"
    },
    {
        "commit_id": "425271d535ff6e4c98f8ae71947973c8bde464af",
        "commit_message": "Fix quality flaw and increase timeout of EmbeddedDatabaseTest for slow boxes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/425271d535ff6e4c98f8ae71947973c8bde464af",
        "buggy_code": "public void concreteExecute(MavenProject pom, String goal) throws SecurityException {",
        "fixed_code": "public void concreteExecute(MavenProject pom, String goal) {",
        "patch": "@@ -92,7 +92,7 @@ static String getGoal(String groupId, String artifactId, @Nullable String versio\n         .toString();\n   }\n \n-  public void concreteExecute(MavenProject pom, String goal) throws SecurityException {\n+  public void concreteExecute(MavenProject pom, String goal) {\n     Method executeMethod = null;\n     for (Method m : lifecycleExecutor.getClass().getMethods()) {\n       if (\"execute\".equals(m.getName())) {"
    },
    {
        "commit_id": "6f7955cd5f8b674775a1bb783c31430e815221d2",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6f7955cd5f8b674775a1bb783c31430e815221d2",
        "buggy_code": "result.setIssuesNotChanged(JsonUtils.getArray(issuesNotChanged, \"issues\"));",
        "fixed_code": "result.setIssuesNotChanged(issuesJson);",
        "patch": "@@ -138,7 +138,7 @@ BulkChange parseBulkChange(String json) {\n     result.setTotalIssuesNotChanged(JsonUtils.getInteger(issuesNotChanged, \"total\"));\n     JSONArray issuesJson = JsonUtils.getArray(issuesNotChanged, \"issues\");\n     if (issuesJson != null) {\n-      result.setIssuesNotChanged(JsonUtils.getArray(issuesNotChanged, \"issues\"));\n+      result.setIssuesNotChanged(issuesJson);\n     }\n \n     return  result;"
    },
    {
        "commit_id": "8ffca6c7304e7082b207512e54e55e9d0be3dd68",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8ffca6c7304e7082b207512e54e55e9d0be3dd68",
        "buggy_code": "public Profile setDefaultProfile(@Nullable boolean b) {",
        "fixed_code": "public Profile setDefaultProfile(boolean b) {",
        "patch": "@@ -60,7 +60,7 @@ public boolean isDefaultProfile() {\n     return defaultProfile;\n   }\n \n-  public Profile setDefaultProfile(@Nullable boolean b) {\n+  public Profile setDefaultProfile(boolean b) {\n     this.defaultProfile = b;\n     return this;\n   }"
    },
    {
        "commit_id": "84851fffaa03911500dd2643970f4f7ff9ee4097",
        "commit_message": "Fix quality flaw in ConvertViolationsToIssues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/84851fffaa03911500dd2643970f4f7ff9ee4097",
        "buggy_code": "private static final String SQL;",
        "fixed_code": "static final String SQL;",
        "patch": "@@ -285,7 +285,7 @@ private String plan(@Nullable Long planId) {\n \n \n   private static class ViolationHandler extends AbstractListHandler<Map<String, Object>> {\n-    private static final String SQL;\n+    static final String SQL;\n     static {\n       StringBuilder sb = new StringBuilder(\"select rev.id as reviewId, s.project_id as projectId, rf.rule_id as ruleId, \" +\n         \"  rf.failure_level as failureLevel, rf.message as message, rf.line as line, \" +"
    },
    {
        "commit_id": "9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "buggy_code": "public static interface Context {",
        "fixed_code": "public interface Context {",
        "patch": "@@ -41,7 +41,7 @@ public abstract class ProjectBuilder implements BatchExtension {\n    * Plugins can use the implementation {@link org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext}\n    * for their unit tests.\n    */\n-  public static interface Context {\n+  public interface Context {\n     ProjectReactor projectReactor();\n   }\n   /**"
    },
    {
        "commit_id": "9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "buggy_code": "if ((antPattern.contains(\"/\") && StringUtils.substringAfterLast(antPattern, \"/\").indexOf(\".\") < 0) || antPattern.indexOf(\".\") < 0) {",
        "fixed_code": "if ((antPattern.contains(\"/\") && StringUtils.substringAfterLast(antPattern, \"/\").indexOf('.') < 0) || antPattern.indexOf('.') < 0) {",
        "patch": "@@ -180,7 +180,7 @@ public boolean matchFilePattern(String antPattern) {\n       fileKey += \".java\";\n     }\n     // Add wildcard extension if not provided\n-    if ((antPattern.contains(\"/\") && StringUtils.substringAfterLast(antPattern, \"/\").indexOf(\".\") < 0) || antPattern.indexOf(\".\") < 0) {\n+    if ((antPattern.contains(\"/\") && StringUtils.substringAfterLast(antPattern, \"/\").indexOf('.') < 0) || antPattern.indexOf('.') < 0) {\n       antPattern += \".*\";\n     }\n     String noPackagePrefix = JavaPackage.DEFAULT_PACKAGE_NAME + \".\";"
    },
    {
        "commit_id": "9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9a8bde1be6bc65a0006beaf1a7c88ab4d144ddc1",
        "buggy_code": "return VERSION + DigestUtils.shaHex(id.getBytes(\"UTF-8\")).substring(0, CHECKSUM_SIZE);",
        "fixed_code": "return VERSION + DigestUtils.sha1Hex(id.getBytes(\"UTF-8\")).substring(0, CHECKSUM_SIZE);",
        "patch": "@@ -84,7 +84,7 @@ boolean isFixed(InetAddress address) {\n   String toId(String organisation, InetAddress address) {\n     String id = new StringBuilder().append(organisation).append(\"-\").append(address.getHostAddress()).toString();\n     try {\n-      return VERSION + DigestUtils.shaHex(id.getBytes(\"UTF-8\")).substring(0, CHECKSUM_SIZE);\n+      return VERSION + DigestUtils.sha1Hex(id.getBytes(\"UTF-8\")).substring(0, CHECKSUM_SIZE);\n \n     } catch (UnsupportedEncodingException e) {\n       throw new IllegalArgumentException(\"Organisation is not UTF-8 encoded: \" + organisation, e);"
    },
    {
        "commit_id": "9843eee26eb1e5aa782e0b27b6b8e456bed569bc",
        "commit_message": "Fix regression",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9843eee26eb1e5aa782e0b27b6b8e456bed569bc",
        "buggy_code": "return array == null ? 0 : ((ArrayList) array).size();",
        "fixed_code": "return ((ArrayList) array).size();",
        "patch": "@@ -94,7 +94,7 @@ public Date getDateTime(Object json, String field) {\n \n   @Override\n   public int getArraySize(Object array) {\n-    return array == null ? 0 : ((ArrayList) array).size();\n+    return ((ArrayList) array).size();\n   }\n \n   @Override"
    },
    {
        "commit_id": "ae4700caf7405693b000833ab00d8c2b4611609f",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae4700caf7405693b000833ab00d8c2b4611609f",
        "buggy_code": "final static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);",
        "fixed_code": "static final Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);",
        "patch": "@@ -53,7 +53,7 @@\n public class PhasesSumUpTimeProfiler implements ProjectAnalysisHandler, SensorExecutionHandler, DecoratorExecutionHandler, PostJobExecutionHandler, DecoratorsPhaseHandler,\n     SensorsPhaseHandler, PostJobsPhaseHandler, MavenPhaseHandler, InitializersPhaseHandler, InitializerExecutionHandler, BatchStepHandler {\n \n-  final static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);\n+  static final Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);\n   private static final int TEXT_RIGHT_PAD = 60;\n   private static final int TIME_LEFT_PAD = 10;\n "
    },
    {
        "commit_id": "94be3ff3dbb62e585b80c6c3cf68396ed2e7d2e4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/94be3ff3dbb62e585b80c6c3cf68396ed2e7d2e4",
        "buggy_code": "public void setPathToSecretKey(String pathToSecretKey) {",
        "fixed_code": "public void setPathToSecretKey(@Nullable String pathToSecretKey) {",
        "patch": "@@ -127,7 +127,7 @@ String getPathToSecretKey() {\n     return pathToSecretKey;\n   }\n \n-  public void setPathToSecretKey(String pathToSecretKey) {\n+  public void setPathToSecretKey(@Nullable String pathToSecretKey) {\n     this.pathToSecretKey = pathToSecretKey;\n   }\n }"
    },
    {
        "commit_id": "94be3ff3dbb62e585b80c6c3cf68396ed2e7d2e4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/94be3ff3dbb62e585b80c6c3cf68396ed2e7d2e4",
        "buggy_code": "return ((ArrayList) array).size();",
        "fixed_code": "return array == null ? 0 : ((ArrayList) array).size();",
        "patch": "@@ -94,7 +94,7 @@ public Date getDateTime(Object json, String field) {\n \n   @Override\n   public int getArraySize(Object array) {\n-    return ((ArrayList) array).size();\n+    return array == null ? 0 : ((ArrayList) array).size();\n   }\n \n   @Override"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "private static void executeScript(Connection connection, String path) {",
        "fixed_code": "public static void executeScript(Connection connection, String path) {",
        "patch": "@@ -48,7 +48,7 @@ public static void createSchema(Connection connection, String dialect) {\n     executeScript(connection, \"org/sonar/core/persistence/rows-\" + dialect + \".sql\");\n   }\n \n-  private static void executeScript(Connection connection, String path) {\n+  public static void executeScript(Connection connection, String path) {\n     ScriptRunner scriptRunner = newScriptRunner(connection);\n     try {\n       scriptRunner.runScript(Resources.getResourceAsReader(path));"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "H2Database db = new H2Database(\"sonar2\");",
        "fixed_code": "H2Database db = new H2Database(\"sonar2\", true);",
        "patch": "@@ -30,7 +30,7 @@\n import static org.fest.assertions.Assertions.assertThat;\n \n public class H2DatabaseTest {\n-  H2Database db = new H2Database(\"sonar2\");\n+  H2Database db = new H2Database(\"sonar2\", true);\n \n   @Before\n   public void startDb() {"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "database = new H2Database(\"sonar2\");",
        "fixed_code": "database = new H2Database(\"sonar2\", true);",
        "patch": "@@ -41,7 +41,7 @@ public class MyBatisTest {\n \n   @BeforeClass\n   public static void start() {\n-    database = new H2Database(\"sonar2\");\n+    database = new H2Database(\"sonar2\", true);\n     database.start();\n   }\n "
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "database = new H2Database(\"sonarHibernate\");",
        "fixed_code": "database = new H2Database(\"sonarHibernate\", true);",
        "patch": "@@ -63,7 +63,7 @@ public abstract class AbstractDbUnitTestCase {\n   @Before\n   public void startDatabase() throws SQLException {\n     if (database == null) {\n-      database = new H2Database(\"sonarHibernate\");\n+      database = new H2Database(\"sonarHibernate\", true);\n       database.start();\n \n       databaseCommands = DatabaseCommands.forDialect(database.getDialect());"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "package org.sonar.server.database;",
        "fixed_code": "package org.sonar.server.db;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.database;\n+package org.sonar.server.db;\n \n import org.apache.commons.lang.StringUtils;\n import org.h2.Driver;"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "package org.sonar.server.database;",
        "fixed_code": "package org.sonar.server.db;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.database;\n+package org.sonar.server.db;\n \n import org.sonar.api.config.Settings;\n import org.sonar.api.database.DatabaseProperties;"
    },
    {
        "commit_id": "ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "commit_message": "SONAR-4470 Performance issue when migrating DB from 3.5 to 3.6 (mainly with Oracle)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ccb95087fd7aab08d2e8e057eecd21797ed7f9b6",
        "buggy_code": "package org.sonar.server.database;",
        "fixed_code": "package org.sonar.server.db;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.database;\n+package org.sonar.server.db;\n \n import org.h2.Driver;\n "
    },
    {
        "commit_id": "bce1db9e70ecda6733d68be3db3957aa2d42a897",
        "commit_message": "SONAR-4418 Fix issue when launching bulk change with a period selected and fix set severity action",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bce1db9e70ecda6733d68be3db3957aa2d42a897",
        "buggy_code": "return issueUpdater.setSeverity((DefaultIssue) context.issue(), severity(properties), context.issueChangeContext());",
        "fixed_code": "return issueUpdater.setManualSeverity((DefaultIssue) context.issue(), severity(properties), context.issueChangeContext());",
        "patch": "@@ -50,7 +50,7 @@ public boolean verify(Map<String, Object> properties, List<Issue> issues, UserSe\n \n   @Override\n   public boolean execute(Map<String, Object> properties, Context context) {\n-    return issueUpdater.setSeverity((DefaultIssue) context.issue(), severity(properties), context.issueChangeContext());\n+    return issueUpdater.setManualSeverity((DefaultIssue) context.issue(), severity(properties), context.issueChangeContext());\n   }\n \n   private String severity(Map<String, Object> properties) {"
    },
    {
        "commit_id": "bce1db9e70ecda6733d68be3db3957aa2d42a897",
        "commit_message": "SONAR-4418 Fix issue when launching bulk change with a period selected and fix set severity action",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bce1db9e70ecda6733d68be3db3957aa2d42a897",
        "buggy_code": "verify(issueUpdater).setSeverity(eq(issue), eq(severity), any(IssueChangeContext.class));",
        "fixed_code": "verify(issueUpdater).setManualSeverity(eq(issue), eq(severity), any(IssueChangeContext.class));",
        "patch": "@@ -57,7 +57,7 @@ public void should_execute(){\n     when(context.issue()).thenReturn(issue);\n \n     action.execute(properties, context);\n-    verify(issueUpdater).setSeverity(eq(issue), eq(severity), any(IssueChangeContext.class));\n+    verify(issueUpdater).setManualSeverity(eq(issue), eq(severity), any(IssueChangeContext.class));\n   }\n \n   @Test"
    },
    {
        "commit_id": "8b2e3993e0709e3c7af3fb9cf7031911ea9ab6d0",
        "commit_message": "SONAR-4383 Fix issue when comparing filter ids",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8b2e3993e0709e3c7af3fb9cf7031911ea9ab6d0",
        "buggy_code": "if (userFilterSameName != null && userFilterSameName.getId() != issueFilter.id()) {",
        "fixed_code": "if (userFilterSameName != null && !userFilterSameName.getId().equals(issueFilter.id())) {",
        "patch": "@@ -226,7 +226,7 @@ private void verifyCurrentUserCanChangeFilterOwnership(String user) {\n   private void validateFilter(final DefaultIssueFilter issueFilter) {\n     List<IssueFilterDto> userFilters = selectUserIssueFilters(issueFilter.user());\n     IssueFilterDto userFilterSameName = findFilterWithSameName(userFilters, issueFilter.name());\n-    if (userFilterSameName != null && userFilterSameName.getId() != issueFilter.id()) {\n+    if (userFilterSameName != null && !userFilterSameName.getId().equals(issueFilter.id())) {\n       throw new IllegalArgumentException(\"Name already exists\");\n     }\n     if (issueFilter.shared()) {"
    },
    {
        "commit_id": "219c54231e95599f3dc22d2d653bce05b235e2e1",
        "commit_message": "SONAR-4399 Fixed failing IT when changing issue filter ownership",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/219c54231e95599f3dc22d2d653bce05b235e2e1",
        "buggy_code": "if (sharedFilterWithSameName != null && !sharedFilterWithSameName.getUserLogin().equals(issueFilter.user())) {",
        "fixed_code": "if (sharedFilterWithSameName != null && !sharedFilterWithSameName.getId().equals(issueFilter.id())) {",
        "patch": "@@ -232,7 +232,7 @@ private void validateFilter(final DefaultIssueFilter issueFilter) {\n     if (issueFilter.shared()) {\n       List<IssueFilterDto> sharedFilters = selectSharedFilters();\n       IssueFilterDto sharedFilterWithSameName = findFilterWithSameName(sharedFilters, issueFilter.name());\n-      if (sharedFilterWithSameName != null && !sharedFilterWithSameName.getUserLogin().equals(issueFilter.user())) {\n+      if (sharedFilterWithSameName != null && !sharedFilterWithSameName.getId().equals(issueFilter.id())) {\n         throw new IllegalArgumentException(\"Other users already share filters with the same name\");\n       }\n     }"
    },
    {
        "commit_id": "9eae51614a193b9777685d3728f4cb737477466b",
        "commit_message": "Deprecate MAX_ISSUE_KEYS in favour of MAX_PAGE_SIZE in issue query",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9eae51614a193b9777685d3728f4cb737477466b",
        "buggy_code": "for (int i=0; i<IssueQuery.MAX_ISSUE_KEYS+1; i++) {",
        "fixed_code": "for (int i=0; i<IssueQuery.MAX_PAGE_SIZE+1; i++) {",
        "patch": "@@ -199,7 +199,7 @@ public void page_index_should_be_positive() throws Exception {\n   @Test\n   public void number_of_issue_keys_should_be_limited() throws Exception {\n     List<String> issueKeys = newArrayList();\n-    for (int i=0; i<IssueQuery.MAX_ISSUE_KEYS+1; i++) {\n+    for (int i=0; i<IssueQuery.MAX_PAGE_SIZE+1; i++) {\n       issueKeys.add(\"issue-key-\"+ i);\n     }\n     try {"
    },
    {
        "commit_id": "f61b4f4b92e27fbc98f590833245d22d875881e2",
        "commit_message": "SONAR-4449 Issue display should not fail on deleted action plan",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f61b4f4b92e27fbc98f590833245d22d875881e2",
        "buggy_code": "List<IssueDto> authorizedIssues = issueDao.selectIssues(query, UserSession.get().userId(), sqlSession);",
        "fixed_code": "List<IssueDto> authorizedIssues = issueDao.selectIssueIds(query, UserSession.get().userId(), sqlSession);",
        "patch": "@@ -99,7 +99,7 @@ public IssueQueryResult find(IssueQuery query) {\n     SqlSession sqlSession = myBatis.openSession();\n     try {\n       // 1. Select the authorized ids of all the issues that match the query\n-      List<IssueDto> authorizedIssues = issueDao.selectIssues(query, UserSession.get().userId(), sqlSession);\n+      List<IssueDto> authorizedIssues = issueDao.selectIssueIds(query, UserSession.get().userId(), sqlSession);\n \n       // 2. Sort all authorized issues\n       List<IssueDto> authorizedSortedIssues = sort(authorizedIssues, query, authorizedIssues.size());"
    },
    {
        "commit_id": "21cfc63d506504b983a8bad0d37d44471310f406",
        "commit_message": "SONAR-4397 Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/21cfc63d506504b983a8bad0d37d44471310f406",
        "buggy_code": ".expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin accessing to this property must be deactivated in dry run mode.\");",
        "fixed_code": ".expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin which requires this property must be deactivated in dry run mode.\");",
        "patch": "@@ -146,7 +146,7 @@ public void should_fail_when_accessing_secured_properties_in_dryrun() {\n     assertThat(batchSettings.getString(\"sonar.foo.license.secured\")).isEqualTo(\"bar2\");\n     thrown.expect(SonarException.class);\n     thrown\n-        .expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin accessing to this property must be deactivated in dry run mode.\");\n+        .expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin which requires this property must be deactivated in dry run mode.\");\n     batchSettings.getString(\"sonar.foo.secured\");\n   }\n "
    },
    {
        "commit_id": "21cfc63d506504b983a8bad0d37d44471310f406",
        "commit_message": "SONAR-4397 Fix tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/21cfc63d506504b983a8bad0d37d44471310f406",
        "buggy_code": ".expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin accessing to this property must be deactivated in dry run mode.\");",
        "fixed_code": ".expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin which requires this property must be deactivated in dry run mode.\");",
        "patch": "@@ -124,7 +124,7 @@ public void should_fail_when_accessing_secured_properties_in_dryrun() {\n \n     thrown.expect(SonarException.class);\n     thrown\n-        .expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin accessing to this property must be deactivated in dry run mode.\");\n+        .expectMessage(\"Access to the secured property 'sonar.foo.secured' is not possible in local (dry run) SonarQube analysis. The SonarQube plugin which requires this property must be deactivated in dry run mode.\");\n     moduleSettings.getString(\"sonar.foo.secured\");\n   }\n }"
    },
    {
        "commit_id": "61e3e7a2551b42c4ede37cbdee5392e1d93d6a31",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61e3e7a2551b42c4ede37cbdee5392e1d93d6a31",
        "buggy_code": "static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);",
        "fixed_code": "final static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);",
        "patch": "@@ -53,7 +53,7 @@\n public class PhasesSumUpTimeProfiler implements ProjectAnalysisHandler, SensorExecutionHandler, DecoratorExecutionHandler, PostJobExecutionHandler, DecoratorsPhaseHandler,\n     SensorsPhaseHandler, PostJobsPhaseHandler, MavenPhaseHandler, InitializersPhaseHandler, InitializerExecutionHandler, BatchStepHandler {\n \n-  static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);\n+  final static Logger LOG = LoggerFactory.getLogger(PhasesSumUpTimeProfiler.class);\n   private static final int TEXT_RIGHT_PAD = 60;\n   private static final int TIME_LEFT_PAD = 10;\n "
    },
    {
        "commit_id": "61e3e7a2551b42c4ede37cbdee5392e1d93d6a31",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/61e3e7a2551b42c4ede37cbdee5392e1d93d6a31",
        "buggy_code": "throw new RuntimeException(\"Unable to resolve path '\" + path + \"'\", e);",
        "fixed_code": "throw new IllegalStateException(\"Unable to resolve path '\" + path + \"'\", e);",
        "patch": "@@ -197,7 +197,7 @@ static File resolvePath(String path, File basedir) {\n         try {\n           file = new File(basedir, path).getCanonicalFile();\n         } catch (IOException e) {\n-          throw new RuntimeException(\"Unable to resolve path '\" + path + \"'\", e);\n+          throw new IllegalStateException(\"Unable to resolve path '\" + path + \"'\", e);\n         }\n       }\n       return file;"
    },
    {
        "commit_id": "c0880d1f396241e7dd0226ff6cd66f84fc73c33a",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c0880d1f396241e7dd0226ff6cd66f84fc73c33a",
        "buggy_code": "if(issueFilterDto.getUserLogin() != issueFilter.user()) {",
        "fixed_code": "if(!issueFilterDto.getUserLogin().equals(issueFilter.user())) {",
        "patch": "@@ -95,7 +95,7 @@ public DefaultIssueFilter update(DefaultIssueFilter issueFilter, UserSession use\n     String user = getNotNullLogin(userSession);\n     IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilter.id(), user);\n     verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user);\n-    if(issueFilterDto.getUserLogin() != issueFilter.user()) {\n+    if(!issueFilterDto.getUserLogin().equals(issueFilter.user())) {\n       verifyCurrentUserCanChangeFilterOwnership(user);\n     }\n     validateFilter(issueFilter, user);"
    },
    {
        "commit_id": "8bd7fdb357ba265381a7b013c3a06dc4729e5ec5",
        "commit_message": "SONAR-4417 Fix regression between ProjectBuilder and ProjectExclusions\nProjectBuilders should be executed before ProjectExclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bd7fdb357ba265381a7b013c3a06dc4729e5ec5",
        "buggy_code": "public void start() {",
        "fixed_code": "public void apply() {",
        "patch": "@@ -57,7 +57,7 @@ public ProjectExclusions(Settings settings, ProjectReactor reactor, ProjectSetti\n     this(settings, reactor, settingsReady, new ProjectBuilder[0]);\n   }\n \n-  public void start() {\n+  public void apply() {\n     if (reactor.getProjects().size() > 0 && StringUtils.isNotBlank(reactor.getProjects().get(0).getKey())) {\n       LOG.info(\"Apply project exclusions\");\n       for (ProjectDefinition project : reactor.getProjects()) {"
    },
    {
        "commit_id": "a52fbd8cd565f58464635906c54db7db87b3be77",
        "commit_message": "SONAR-3979, SONAR-4047 Fix Sonar Maven goal to support Maven 3.1\n  * now use Sonar Runner embedded to run Sonar\n  * also updated Maven plugins to make Sonar build pass with Maven 3.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a52fbd8cd565f58464635906c54db7db87b3be77",
        "buggy_code": "logging = LoggingConfiguration.create().setProperties(bootstrapProperties);",
        "fixed_code": "logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);",
        "patch": "@@ -55,7 +55,7 @@ private Batch(Builder builder) {\n     }\n     projectReactor = builder.projectReactor;\n     if (builder.isEnableLoggingConfiguration()) {\n-      logging = LoggingConfiguration.create().setProperties(bootstrapProperties);\n+      logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);\n     }\n   }\n "
    },
    {
        "commit_id": "056145bd7cda3c24a07f182de20624219dcfc5b1",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/056145bd7cda3c24a07f182de20624219dcfc5b1",
        "buggy_code": "if (!userSession.isLoggedIn() || userSession.login() == null) {",
        "fixed_code": "if (!userSession.isLoggedIn() && userSession.login() != null) {",
        "patch": "@@ -161,7 +161,7 @@ public IssueFilterDto findIssueFilter(Long id, UserSession userSession) {\n   }\n \n   private void verifyLoggedIn(UserSession userSession) {\n-    if (!userSession.isLoggedIn() || userSession.login() == null) {\n+    if (!userSession.isLoggedIn() && userSession.login() != null) {\n       throw new IllegalStateException(\"User is not logged in\");\n     }\n   }"
    },
    {
        "commit_id": "bdb21c18c2ac04c2f3664260a04ee9ba6b93a988",
        "commit_message": "SONAR-4394 Improve authorization to modify issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bdb21c18c2ac04c2f3664260a04ee9ba6b93a988",
        "buggy_code": "if (!issueFilterDto.getUserLogin().equals(userSession.login()) && (!issueFilterDto.isShared() || !isAdmin(userSession.login()))) {",
        "fixed_code": "if (!issueFilterDto.getUserLogin().equals(userSession.login()) && !isAdmin(userSession.login())) {",
        "patch": "@@ -174,7 +174,7 @@ private void verifyCurrentUserCanReadFilter(IssueFilterDto issueFilterDto, UserS\n   }\n \n   private void verifyCurrentUserCanModifyFilter(IssueFilterDto issueFilterDto, UserSession userSession) {\n-    if (!issueFilterDto.getUserLogin().equals(userSession.login()) && (!issueFilterDto.isShared() || !isAdmin(userSession.login()))) {\n+    if (!issueFilterDto.getUserLogin().equals(userSession.login()) && !isAdmin(userSession.login())) {\n       // TODO throw unauthorized\n       throw new IllegalStateException(\"User is not authorized to modify this filter\");\n     }"
    },
    {
        "commit_id": "63deafdb8bac4e0f907397094f4855167d3dd1e5",
        "commit_message": "SONAR-4394 Provide ability to share issue filters",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/63deafdb8bac4e0f907397094f4855167d3dd1e5",
        "buggy_code": "private Boolean shared;",
        "fixed_code": "private boolean shared;",
        "patch": "@@ -33,7 +33,7 @@ public class IssueFilterDto {\n   private Long id;\n   private String name;\n   private String userLogin;\n-  private Boolean shared;\n+  private boolean shared;\n   private String description;\n   private String data;\n   private Date createdAt;"
    },
    {
        "commit_id": "32ec8599d050066e41e12acd4b554febd3920197",
        "commit_message": "Revert \"SONAR-3979, SONAR-4047 Fix Sonar Maven goal to support Maven 3.1\"\n\nThis reverts commit ceaddeb0db54d29fd67d11f23488f61f85041446.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/32ec8599d050066e41e12acd4b554febd3920197",
        "buggy_code": "logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);",
        "fixed_code": "logging = LoggingConfiguration.create().setProperties(bootstrapProperties);",
        "patch": "@@ -55,7 +55,7 @@ private Batch(Builder builder) {\n     }\n     projectReactor = builder.projectReactor;\n     if (builder.isEnableLoggingConfiguration()) {\n-      logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);\n+      logging = LoggingConfiguration.create().setProperties(bootstrapProperties);\n     }\n   }\n "
    },
    {
        "commit_id": "ceaddeb0db54d29fd67d11f23488f61f85041446",
        "commit_message": "SONAR-3979, SONAR-4047 Fix Sonar Maven goal to support Maven 3.1\n  * now use Sonar Runner embedded to run Sonar\n  * also updated Maven plugins to make Sonar build pass with Maven 3.1",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ceaddeb0db54d29fd67d11f23488f61f85041446",
        "buggy_code": "logging = LoggingConfiguration.create().setProperties(bootstrapProperties);",
        "fixed_code": "logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);",
        "patch": "@@ -55,7 +55,7 @@ private Batch(Builder builder) {\n     }\n     projectReactor = builder.projectReactor;\n     if (builder.isEnableLoggingConfiguration()) {\n-      logging = LoggingConfiguration.create().setProperties(bootstrapProperties);\n+      logging = LoggingConfiguration.create(builder.environment).setProperties(bootstrapProperties);\n     }\n   }\n "
    },
    {
        "commit_id": "457e860fff1600e98bbd04ed59b0e4e90742a63f",
        "commit_message": "Fix unit test on windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/457e860fff1600e98bbd04ed59b0e4e90742a63f",
        "buggy_code": "assertThat(e.getCause()).hasMessage(\"Connection refused\");",
        "fixed_code": "assertThat(e.getCause().getMessage()).contains(\"Connection refused\");",
        "patch": "@@ -59,7 +59,7 @@ public void should_throw_illegal_state_exc_if_connect_exception() {\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(IllegalStateException.class);\n       assertThat(e).hasMessage(\"Fail to request http://localhost:1/api/issues\");\n-      assertThat(e.getCause()).hasMessage(\"Connection refused\");\n+      assertThat(e.getCause().getMessage()).contains(\"Connection refused\");\n \n     }\n   }"
    },
    {
        "commit_id": "9678ebc554ee2c2581268c956040e3ebc7adcb12",
        "commit_message": "Improve error handling of ws-client",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9678ebc554ee2c2581268c956040e3ebc7adcb12",
        "buggy_code": "static final String BASE_URL = \"/api/action_plans/search\";",
        "fixed_code": "public static final String BASE_URL = \"/api/action_plans/search\";",
        "patch": "@@ -27,7 +27,7 @@\n  */\n public class ActionPlanQuery {\n \n-  static final String BASE_URL = \"/api/action_plans/search\";\n+  public static final String BASE_URL = \"/api/action_plans/search\";\n \n   private final Map<String, Object> params = new HashMap<String, Object>();\n "
    },
    {
        "commit_id": "92b4d736ed08613824523d2acd033cc39b56b412",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/92b4d736ed08613824523d2acd033cc39b56b412",
        "buggy_code": "private final Logger LOG = LoggerFactory.getLogger(IssueStorage.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(IssueStorage.class);",
        "patch": "@@ -33,7 +33,7 @@\n  */\n class UpdateConflictResolver {\n \n-  private final Logger LOG = LoggerFactory.getLogger(IssueStorage.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(IssueStorage.class);\n \n   public void resolve(DefaultIssue issue, IssueMapper mapper) {\n     LOG.debug(\"Resolve conflict on issue \" + issue.key());"
    },
    {
        "commit_id": "9e5fe807e20689fef2d8936c6aa2667b1732461a",
        "commit_message": "SONAR-4221 Fix regression with property loading and module exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e5fe807e20689fef2d8936c6aa2667b1732461a",
        "buggy_code": "projectScanContainer.add(mock(ProjectConfigurator.class), mock(ProjectReactor.class), mock(Settings.class));",
        "fixed_code": "projectScanContainer.add(mock(ProjectConfigurator.class), mock(ProjectReactor.class), mock(Settings.class), mock(ProjectSettingsReady.class));",
        "patch": "@@ -42,7 +42,7 @@ public void test_definition() {\n   public void should_enable_all_phases() {\n     ScanTask task = new ScanTask(mock(TaskContainer.class));\n     ComponentContainer projectScanContainer = new ComponentContainer();\n-    projectScanContainer.add(mock(ProjectConfigurator.class), mock(ProjectReactor.class), mock(Settings.class));\n+    projectScanContainer.add(mock(ProjectConfigurator.class), mock(ProjectReactor.class), mock(Settings.class), mock(ProjectSettingsReady.class));\n     task.scan(projectScanContainer);\n \n     Phases phases = projectScanContainer.getComponentByType(Phases.class);"
    },
    {
        "commit_id": "72fbbf025107c5bad6739313c29e05e72bb528a5",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/72fbbf025107c5bad6739313c29e05e72bb528a5",
        "buggy_code": "if (deadLine.before(today) && !org.apache.commons.lang.time.DateUtils.isSameDay(deadLine, today)) {",
        "fixed_code": "if (deadLine != null && deadLine.before(today) && !org.apache.commons.lang.time.DateUtils.isSameDay(deadLine, today)) {",
        "patch": "@@ -306,7 +306,7 @@ Result<ActionPlan> createActionPlanResult(Map<String, String> parameters, @Nulla\n       try {\n         deadLine = RubyUtils.toDate(deadLineParam);\n         Date today = new Date();\n-        if (deadLine.before(today) && !org.apache.commons.lang.time.DateUtils.isSameDay(deadLine, today)) {\n+        if (deadLine != null && deadLine.before(today) && !org.apache.commons.lang.time.DateUtils.isSameDay(deadLine, today)) {\n           result.addError(Result.Message.ofL10n(\"action_plans.date_cant_be_in_past\"));\n         }\n       } catch (SonarException e) {"
    },
    {
        "commit_id": "19170ca15132f97a5c8f9c32943cd2a7b6af074b",
        "commit_message": "SONAR-3755 Update com.github.kevinsawicki:http-request version to 5.2 that fix issue when encoding + character",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/19170ca15132f97a5c8f9c32943cd2a7b6af074b",
        "buggy_code": "assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon%2Cloic\");",
        "fixed_code": "assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon,loic\");",
        "patch": "@@ -41,7 +41,7 @@ public void should_find_issues() {\n     UserQuery query = UserQuery.create().logins(\"simon\", \"loic\");\n     List<User> users = client.find(query);\n \n-    assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon%2Cloic\");\n+    assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon,loic\");\n     assertThat(users).hasSize(1);\n     User simon = users.get(0);\n     assertThat(simon.login()).isEqualTo(\"simon\");"
    },
    {
        "commit_id": "48df13d33938b36a1af7feed65e9bb464af597e2",
        "commit_message": "SONAR-3755 Fix bug in Issue WS Client when encoding dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/48df13d33938b36a1af7feed65e9bb464af597e2",
        "buggy_code": "assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon,loic\");",
        "fixed_code": "assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon%2Cloic\");",
        "patch": "@@ -41,7 +41,7 @@ public void should_find_issues() {\n     UserQuery query = UserQuery.create().logins(\"simon\", \"loic\");\n     List<User> users = client.find(query);\n \n-    assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon,loic\");\n+    assertThat(httpServer.requestedPath()).isEqualTo(\"/api/users/search?logins=simon%2Cloic\");\n     assertThat(users).hasSize(1);\n     User simon = users.get(0);\n     assertThat(simon.login()).isEqualTo(\"simon\");"
    },
    {
        "commit_id": "1b47644db7d409deb5840072eabf1cd0d08d934e",
        "commit_message": "Fix storage of libraries in C# Plugin",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1b47644db7d409deb5840072eabf1cd0d08d934e",
        "buggy_code": "if (snapshot != null && !ResourceUtils.isLibrary(resource)) {",
        "fixed_code": "if (snapshot != null) {",
        "patch": "@@ -67,7 +67,7 @@ public Snapshot saveProject(Project project, Project parent) {\n   }\n \n   private void addToCache(Resource resource, Snapshot snapshot) {\n-    if (snapshot != null && !ResourceUtils.isLibrary(resource)) {\n+    if (snapshot != null) {\n       snapshotsByResource.put(resource, snapshot);\n       resourceCache.add(resource);\n       snapshotCache.put(resource.getEffectiveKey(), snapshot);"
    },
    {
        "commit_id": "ea775c680b15bc3de5d28f3c67195f5ad8ffbb9b",
        "commit_message": "SONAR-3755 Improve creation of manual issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea775c680b15bc3de5d28f3c67195f5ad8ffbb9b",
        "buggy_code": "public final class ResourceDto {",
        "fixed_code": "public class ResourceDto {",
        "patch": "@@ -21,7 +21,7 @@\n \n import java.util.Date;\n \n-public final class ResourceDto {\n+public class ResourceDto {\n \n   private Long id;\n   private String key;"
    },
    {
        "commit_id": "ea775c680b15bc3de5d28f3c67195f5ad8ffbb9b",
        "commit_message": "SONAR-3755 Improve creation of manual issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ea775c680b15bc3de5d28f3c67195f5ad8ffbb9b",
        "buggy_code": "public final class ResourceQuery {",
        "fixed_code": "public class ResourceQuery {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 3.0\n  */\n-public final class ResourceQuery {\n+public class ResourceQuery {\n   private String[] qualifiers = null;\n   private String key = null;\n   private boolean excludeDisabled = false;"
    },
    {
        "commit_id": "4ad3ba86653463e48bce0333a06128322837a44a",
        "commit_message": "Fix cache of libraries",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4ad3ba86653463e48bce0333a06128322837a44a",
        "buggy_code": "if (snapshot != null) {",
        "fixed_code": "if (snapshot != null && !ResourceUtils.isLibrary(resource)) {",
        "patch": "@@ -67,7 +67,7 @@ public Snapshot saveProject(Project project, Project parent) {\n   }\n \n   private void addToCache(Resource resource, Snapshot snapshot) {\n-    if (snapshot != null) {\n+    if (snapshot != null && !ResourceUtils.isLibrary(resource)) {\n       snapshotsByResource.put(resource, snapshot);\n       resourceCache.add(resource);\n       snapshotCache.put(resource.getEffectiveKey(), snapshot);"
    },
    {
        "commit_id": "436ddc308f1fe46f8225aefd8923433254d99ea2",
        "commit_message": "Fix some JDBC connection pbs in unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/436ddc308f1fe46f8225aefd8923433254d99ea2",
        "buggy_code": "private ActionPlanDao dao;",
        "fixed_code": "ActionPlanDao dao;",
        "patch": "@@ -31,7 +31,7 @@\n \n public class ActionPlanDaoTest extends AbstractDaoTestCase {\n \n-  private ActionPlanDao dao;\n+  ActionPlanDao dao;\n \n   @Before\n   public void createDao() {"
    },
    {
        "commit_id": "436ddc308f1fe46f8225aefd8923433254d99ea2",
        "commit_message": "Fix some JDBC connection pbs in unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/436ddc308f1fe46f8225aefd8923433254d99ea2",
        "buggy_code": "private ActionPlanStatsDao dao;",
        "fixed_code": "ActionPlanStatsDao dao;",
        "patch": "@@ -30,7 +30,7 @@\n \n public class ActionPlanStatsDaoTest extends AbstractDaoTestCase {\n \n-  private ActionPlanStatsDao dao;\n+  ActionPlanStatsDao dao;\n \n   @Before\n   public void createDao() {"
    },
    {
        "commit_id": "2b90c6d9deb4fafe99ae7c88cdc67d02cd1d2d76",
        "commit_message": "SONAR-4284 Display a changelog in the Issue detail page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b90c6d9deb4fafe99ae7c88cdc67d02cd1d2d76",
        "buggy_code": "FieldDiffs diffs = issue.diffs();",
        "fixed_code": "FieldDiffs diffs = issue.currentChange();",
        "patch": "@@ -88,7 +88,7 @@ private void insertChanges(IssueChangeMapper mapper, DefaultIssue issue) {\n         mapper.insert(changeDto);\n       }\n     }\n-    FieldDiffs diffs = issue.diffs();\n+    FieldDiffs diffs = issue.currentChange();\n     if (diffs != null) {\n       IssueChangeDto changeDto = IssueChangeDto.of(issue.key(), diffs);\n       mapper.insert(changeDto);"
    },
    {
        "commit_id": "2b90c6d9deb4fafe99ae7c88cdc67d02cd1d2d76",
        "commit_message": "SONAR-4284 Display a changelog in the Issue detail page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b90c6d9deb4fafe99ae7c88cdc67d02cd1d2d76",
        "buggy_code": ".setFieldDiff(context, \"severity\", \"INFO\", \"BLOCKER\")",
        "fixed_code": ".setFieldChange(context, \"severity\", \"INFO\", \"BLOCKER\")",
        "patch": "@@ -89,7 +89,7 @@ public void should_update_issues() throws Exception {\n       .setChecksum(\"FFFFF\")\n       .setAuthorLogin(\"simon\")\n       .setAssignee(\"loic\")\n-      .setFieldDiff(context, \"severity\", \"INFO\", \"BLOCKER\")\n+      .setFieldChange(context, \"severity\", \"INFO\", \"BLOCKER\")\n       .setReporter(\"emmerik\")\n       .setResolution(\"FIXED\")\n       .setStatus(\"RESOLVED\")"
    },
    {
        "commit_id": "9252f14cf53c146aaf52862f298d67989874b41f",
        "commit_message": "Do not send notifications on issue changes when no field diff",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9252f14cf53c146aaf52862f298d67989874b41f",
        "buggy_code": "if (issue.isChanged() && issue.diffs() != null) {",
        "fixed_code": "if (issue.isChanged()) {",
        "patch": "@@ -56,7 +56,7 @@ private void sendNotifications(Project project) {\n       if (issue.isNew() && issue.resolution() == null) {\n         newIssues++;\n       }\n-      if (issue.isChanged() && issue.diffs() != null) {\n+      if (issue.isChanged()) {\n         Rule rule = ruleFinder.findByKey(issue.ruleKey());\n         // TODO warning - rules with status REMOVED are currently ignored, but should not\n         if (rule != null) {"
    },
    {
        "commit_id": "1afee765024b8ed5bb41af811fd56b7d8f2b1000",
        "commit_message": "SONAR-3755 improve email of issue changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1afee765024b8ed5bb41af811fd56b7d8f2b1000",
        "buggy_code": "notification.setFieldValue(\"componentName\", component.name());",
        "fixed_code": "notification.setFieldValue(\"componentName\", component.longName());",
        "patch": "@@ -95,7 +95,7 @@ private Notification createNotification(DefaultIssue issue, IssueChangeContext c\n     notification.setFieldValue(\"ruleName\", ruleName(rule));\n     notification.setFieldValue(\"componentKey\", issue.componentKey());\n     if (component != null) {\n-      notification.setFieldValue(\"componentName\", component.name());\n+      notification.setFieldValue(\"componentName\", component.longName());\n     }\n     if (comment != null) {\n       notification.setFieldValue(\"comment\", comment);"
    },
    {
        "commit_id": "510f15727092dfd75a1476c6054fbb3ff40e831e",
        "commit_message": "SONAR-3755 fix JSON report when directly analyzing module (like in Eclipse plugin)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/510f15727092dfd75a1476c6054fbb3ff40e831e",
        "buggy_code": "template.copyTable(source, dest, \"projects\", \"(id=\" + projectId + \" or root_id=\" + projectId + \")\");",
        "fixed_code": "template.copyTable(source, dest, \"projects\", \"id in (select project_id from snapshots where \" + snapshotCondition + \") or (id=\" + projectId + \" or root_id=\" + projectId + \")\");",
        "patch": "@@ -77,7 +77,7 @@ private void copy(DataSource source, DataSource dest, @Nullable Long projectId)\n       .copyTable(source, dest, \"rules_profiles\");\n     if (projectId != null) {\n       String snapshotCondition = \"islast=\" + database.getDialect().getTrueSqlValue() + \" and (project_id=\" + projectId + \" or root_project_id=\" + projectId + \")\";\n-      template.copyTable(source, dest, \"projects\", \"(id=\" + projectId + \" or root_id=\" + projectId + \")\");\n+      template.copyTable(source, dest, \"projects\", \"id in (select project_id from snapshots where \" + snapshotCondition + \") or (id=\" + projectId + \" or root_id=\" + projectId + \")\");\n       template.copyTable(source, dest, \"snapshots\", snapshotCondition);\n \n       String forRootModule = \"(root_component_id in (select id from projects where id=\" + projectId + \" and qualifier='TRK'))\";"
    },
    {
        "commit_id": "2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "commit_message": "SONAR-3755 fix JSON report when directly analyzing module (like in Eclipse plugin)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "buggy_code": "List<IssueDto> dtos = issueDao.selectNonClosedIssuesByRootComponent(project.getId());",
        "fixed_code": "List<IssueDto> dtos = issueDao.selectNonClosedIssuesByModule(project.getId());",
        "patch": "@@ -49,7 +49,7 @@ public boolean shouldExecuteOnProject(Project project) {\n   @Override\n   public void analyse(Project project, SensorContext context) {\n     Date loadingDate = new Date();\n-    List<IssueDto> dtos = issueDao.selectNonClosedIssuesByRootComponent(project.getId());\n+    List<IssueDto> dtos = issueDao.selectNonClosedIssuesByModule(project.getId());\n     initialOpenIssuesStack.setIssues(dtos, loadingDate);\n   }\n "
    },
    {
        "commit_id": "2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "commit_message": "SONAR-3755 fix JSON report when directly analyzing module (like in Eclipse plugin)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "buggy_code": "verify(issueDao).selectNonClosedIssuesByRootComponent(1);",
        "fixed_code": "verify(issueDao).selectNonClosedIssuesByModule(1);",
        "patch": "@@ -46,7 +46,7 @@ public void should_select_module_open_issues() {\n     project.setId(1);\n     sensor.analyse(project, null);\n \n-    verify(issueDao).selectNonClosedIssuesByRootComponent(1);\n+    verify(issueDao).selectNonClosedIssuesByModule(1);\n     verify(stack).setIssues(anyListOf(IssueDto.class), any(Date.class));\n   }\n }"
    },
    {
        "commit_id": "2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "commit_message": "SONAR-3755 fix JSON report when directly analyzing module (like in Eclipse plugin)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2a37a23b0ff74cd69a3a4c9053f3a2331b234097",
        "buggy_code": "List<IssueDto> selectNonClosedIssues(int rootComponentId);",
        "fixed_code": "List<IssueDto> selectNonClosedIssuesByModule(int rootComponentId);",
        "patch": "@@ -31,7 +31,7 @@ public interface IssueMapper {\n \n   IssueDto selectByKey(String key);\n \n-  List<IssueDto> selectNonClosedIssues(int rootComponentId);\n+  List<IssueDto> selectNonClosedIssuesByModule(int rootComponentId);\n \n   List<IssueDto> selectIssues(@Param(\"query\") IssueQuery query, @Param(\"componentRootKeys\") Collection<String> componentRootKeys,\n                               @Nullable @Param(\"userId\") Integer userId, @Param(\"role\") String role, @Param(\"maxResults\") Integer maxResult);"
    },
    {
        "commit_id": "4f4091d09b31b18c3053518c84dff26e3a6d48ce",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4f4091d09b31b18c3053518c84dff26e3a6d48ce",
        "buggy_code": "System.out.println(sb.toString());",
        "fixed_code": "println(sb.toString());",
        "patch": "@@ -77,7 +77,7 @@ public void dump() {\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"   o \").append(itemProfiling.itemName()).append(\": \").append(itemProfiling.totalTimeAsString())\n           .append(\" (\").append((int) (itemProfiling.totalTime() / percent)).append(\"%)\");\n-      System.out.println(sb.toString());\n+      println(sb.toString());\n     }\n   }\n "
    },
    {
        "commit_id": "7f8bce0bf7dcf96495fa1a55d82a39ce2a106f66",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8bce0bf7dcf96495fa1a55d82a39ce2a106f66",
        "buggy_code": "package org.sonar.server.platform;",
        "fixed_code": "package org.sonar.server.user;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.server.platform;\n+package org.sonar.server.user;\n \n import org.slf4j.LoggerFactory;\n import org.sonar.api.ServerComponent;"
    },
    {
        "commit_id": "1cc4c03f1ae083a6691e7e233b4d83481e10af08",
        "commit_message": "SONAR-4333 Fix type in widget name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1cc4c03f1ae083a6691e7e233b4d83481e10af08",
        "buggy_code": "super(\"unresolved_issues_statuses\", \"Unresolved issue statuses\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_statuses.html.erb\");",
        "fixed_code": "super(\"unresolved_issues_statuses\", \"Unresolved issues by status\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_statuses.html.erb\");",
        "patch": "@@ -25,6 +25,6 @@\n @WidgetCategory({\"Issues\"})\n public class UnresolvedIssuesStatusesWidget extends CoreWidget {\n   public UnresolvedIssuesStatusesWidget() {\n-    super(\"unresolved_issues_statuses\", \"Unresolved issue statuses\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_statuses.html.erb\");\n+    super(\"unresolved_issues_statuses\", \"Unresolved issues by status\", \"/org/sonar/plugins/core/widgets/issues/unresolved_issues_statuses.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "c190bcb42388e17abc2c3ba26864ceb43058c89e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c190bcb42388e17abc2c3ba26864ceb43058c89e",
        "buggy_code": "int countIssuesAfterDate(Collection<Issue> issues, Date targetDate) {",
        "fixed_code": "int countIssuesAfterDate(Collection<Issue> issues, @Nullable Date targetDate) {",
        "patch": "@@ -260,7 +260,7 @@ private Multiset<Rule> initRules(Map<RulePriority, Multiset<Rule>> rulesPerSever\n   }\n \n   @VisibleForTesting\n-  int countIssuesAfterDate(Collection<Issue> issues, Date targetDate) {\n+  int countIssuesAfterDate(Collection<Issue> issues, @Nullable Date targetDate) {\n     if (issues == null) {\n       return 0;\n     }"
    },
    {
        "commit_id": "c190bcb42388e17abc2c3ba26864ceb43058c89e",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c190bcb42388e17abc2c3ba26864ceb43058c89e",
        "buggy_code": "return super.status() == ActionPlan.STATUS_OPEN && new Date().after(super.deadLine());",
        "fixed_code": "return super.status() == ActionPlan.STATUS_OPEN && super.deadLine() != null && new Date().after(super.deadLine());",
        "patch": "@@ -71,6 +71,6 @@ public boolean isOpen(){\n   }\n \n   public boolean overDue(){\n-    return super.status() == ActionPlan.STATUS_OPEN && new Date().after(super.deadLine());\n+    return super.status() == ActionPlan.STATUS_OPEN && super.deadLine() != null && new Date().after(super.deadLine());\n   }\n }"
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -40,7 +40,7 @@\n import org.sonar.core.resource.ResourceDao;\n import org.sonar.core.rule.DefaultRuleFinder;\n import org.sonar.core.user.AuthorizationDao;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n import java.util.Collection;\n import java.util.List;"
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -38,7 +38,7 @@\n import org.sonar.core.resource.ResourceDao;\n import org.sonar.core.resource.ResourceDto;\n import org.sonar.core.resource.ResourceQuery;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n import org.sonar.server.util.RubyUtils;\n \n import javax.annotation.Nullable;"
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.core.issue.db.IssueChangeDao;\n import org.sonar.core.issue.db.IssueChangeDto;\n import org.sonar.core.issue.db.IssueStorage;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n import java.util.Date;\n "
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -34,7 +34,7 @@\n import org.sonar.core.issue.db.IssueStorage;\n import org.sonar.core.issue.workflow.IssueWorkflow;\n import org.sonar.core.issue.workflow.Transition;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n import javax.annotation.Nullable;\n "
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.api.user.UserFinder;\n import org.sonar.core.issue.db.IssueStatsColumn;\n import org.sonar.core.issue.db.IssueStatsDao;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n import javax.annotation.CheckForNull;\n "
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -23,7 +23,7 @@\n import org.sonar.api.ServerComponent;\n import org.sonar.api.rules.Rule;\n import org.sonar.core.i18n.RuleI18nManager;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n /**\n  * Used through ruby code <pre>Internal.rules</pre>"
    },
    {
        "commit_id": "7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7652deb6f19e3bc4ed062a34f3a04b47cd89fbfe",
        "buggy_code": "import org.sonar.server.platform.UserSession;",
        "fixed_code": "import org.sonar.server.user.UserSession;",
        "patch": "@@ -22,7 +22,7 @@\n import org.junit.Test;\n import org.sonar.api.rules.Rule;\n import org.sonar.core.i18n.RuleI18nManager;\n-import org.sonar.server.platform.UserSession;\n+import org.sonar.server.user.UserSession;\n \n import java.util.Locale;\n "
    },
    {
        "commit_id": "d864b2120708473a363bed2f4fa50ecdf73762a1",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d864b2120708473a363bed2f4fa50ecdf73762a1",
        "buggy_code": "\"of last known quality snapshot on this project. This property must be used to replay the past in a chronological order.\");",
        "fixed_code": "\"of last known quality snapshot on this project. This property must only be used to rebuild the past in a chronological order.\");",
        "patch": "@@ -155,7 +155,7 @@ public void fail_if_not_latest_analysis() {\n       fail();\n     } catch (Exception e) {\n       assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The value '2005-12-25' of the sonar.projectDate property can't be older than the date \" +\n-        \"of last known quality snapshot on this project. This property must be used to replay the past in a chronological order.\");\n+        \"of last known quality snapshot on this project. This property must only be used to rebuild the past in a chronological order.\");\n     }\n   }\n "
    },
    {
        "commit_id": "371ab065edbef2e92b502878eec9a73d310af54b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/371ab065edbef2e92b502878eec9a73d310af54b",
        "buggy_code": "private final Set<String> QUALIFIERS = ImmutableSet.of(Qualifiers.PROJECT, Qualifiers.VIEW, Qualifiers.SUBVIEW);",
        "fixed_code": "private static final Set<String> QUALIFIERS = ImmutableSet.of(Qualifiers.PROJECT, Qualifiers.VIEW, Qualifiers.SUBVIEW);",
        "patch": "@@ -34,8 +34,8 @@\n @DryRunIncompatible\n public class ApplyProjectRolesDecorator implements Decorator {\n \n+  private static final Set<String> QUALIFIERS = ImmutableSet.of(Qualifiers.PROJECT, Qualifiers.VIEW, Qualifiers.SUBVIEW);\n   private final ResourcePermissions resourcePermissions;\n-  private final Set<String> QUALIFIERS = ImmutableSet.of(Qualifiers.PROJECT, Qualifiers.VIEW, Qualifiers.SUBVIEW);\n \n   public ApplyProjectRolesDecorator(ResourcePermissions resourcePermissions) {\n     this.resourcePermissions = resourcePermissions;"
    },
    {
        "commit_id": "371ab065edbef2e92b502878eec9a73d310af54b",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/371ab065edbef2e92b502878eec9a73d310af54b",
        "buggy_code": "ComponentDataPersister persister = new ComponentDataPersister(data, snapshots, dataDao);",
        "fixed_code": "ComponentDataPersister persister = new ComponentDataPersister(data, snapshots, dataDao, getMyBatis());",
        "patch": "@@ -56,7 +56,7 @@ public void should_persist_component_data() throws Exception {\n     data.setStringData(\"org/struts/Other.java\", \"SYMBOL\", \"unregistered component, should not be persisted\");\n \n     SnapshotDataDao dataDao = new SnapshotDataDao(getMyBatis());\n-    ComponentDataPersister persister = new ComponentDataPersister(data, snapshots, dataDao);\n+    ComponentDataPersister persister = new ComponentDataPersister(data, snapshots, dataDao, getMyBatis());\n     persister.persist();\n \n     checkTables(\"should_persist_component_data\", new String[]{\"id\", \"created_at\", \"updated_at\"}, \"snapshot_data\");"
    },
    {
        "commit_id": "babb50a4f143c312df1ba45955d3d589ecb2845f",
        "commit_message": "SONAR-4360 OufOfMemory error when too many issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/babb50a4f143c312df1ba45955d3d589ecb2845f",
        "buggy_code": "IssueCache issueCache = mock(IssueCache.class);",
        "fixed_code": "IssueCache issueCache = mock(IssueCache.class, RETURNS_MOCKS);",
        "patch": "@@ -49,7 +49,7 @@\n public class IssueTrackingDecoratorTest extends AbstractDaoTestCase {\n \n   IssueTrackingDecorator decorator;\n-  IssueCache issueCache = mock(IssueCache.class);\n+  IssueCache issueCache = mock(IssueCache.class, RETURNS_MOCKS);\n   InitialOpenIssuesStack initialOpenIssues = mock(InitialOpenIssuesStack.class);\n   IssueTracking tracking = mock(IssueTracking.class, RETURNS_MOCKS);\n   IssueHandlers handlers = mock(IssueHandlers.class);"
    },
    {
        "commit_id": "babb50a4f143c312df1ba45955d3d589ecb2845f",
        "commit_message": "SONAR-4360 OufOfMemory error when too many issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/babb50a4f143c312df1ba45955d3d589ecb2845f",
        "buggy_code": "Collection<DefaultIssue> issues = issueCache.byComponent(componentKey);",
        "fixed_code": "Iterable<DefaultIssue> issues = issueCache.byComponent(componentKey);",
        "patch": "@@ -50,7 +50,7 @@ public DeprecatedViolations(IssueCache issueCache, RuleFinder ruleFinder, Resour\n   }\n \n   public List<Violation> get(String componentKey) {\n-    Collection<DefaultIssue> issues = issueCache.byComponent(componentKey);\n+    Iterable<DefaultIssue> issues = issueCache.byComponent(componentKey);\n     List<Violation> violations = Lists.newArrayList();\n     for (DefaultIssue issue : issues) {\n       violations.add(toViolation(issue));"
    },
    {
        "commit_id": "babb50a4f143c312df1ba45955d3d589ecb2845f",
        "commit_message": "SONAR-4360 OufOfMemory error when too many issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/babb50a4f143c312df1ba45955d3d589ecb2845f",
        "buggy_code": "Collection<DefaultIssue> getIssues() {",
        "fixed_code": "Iterable<DefaultIssue> getIssues() {",
        "patch": "@@ -175,7 +175,7 @@ private String getRuleName(RuleKey ruleKey) {\n   }\n \n   @VisibleForTesting\n-  Collection<DefaultIssue> getIssues() {\n+  Iterable<DefaultIssue> getIssues() {\n     return issueCache.all();\n   }\n }"
    },
    {
        "commit_id": "43c9839354d12e4a25642511c1adcbbc50813331",
        "commit_message": "Fix conflicts",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/43c9839354d12e4a25642511c1adcbbc50813331",
        "buggy_code": "package org.sonar.server.issue;",
        "fixed_code": "package org.sonar.core.issue;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.server.issue;\n+package org.sonar.core.issue;\n \n import com.google.common.collect.Maps;\n import org.sonar.api.component.Component;"
    },
    {
        "commit_id": "26a782fc420625f2428e172c2f847ed73750ecde",
        "commit_message": "SONAR-4283 notifications on new issues and issue changes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/26a782fc420625f2428e172c2f847ed73750ecde",
        "buggy_code": "assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(3);",
        "fixed_code": "assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(2);",
        "patch": "@@ -26,6 +26,6 @@\n public class EmailNotificationsPluginTest {\n   @Test\n   public void should_get_extensions() {\n-    assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(3);\n+    assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(2);\n   }\n }"
    },
    {
        "commit_id": "3e4d1ad986e546bf6699ce12555218ac09f546ee",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3e4d1ad986e546bf6699ce12555218ac09f546ee",
        "buggy_code": "throw new IllegalArgumentException(\"Cannot sort issues on field : \" + query.sort().name());",
        "fixed_code": "throw new IllegalArgumentException(\"Cannot sort issues on field : \" + sort.name());",
        "patch": "@@ -63,7 +63,7 @@ public List<IssueDto> sort() {\n           issueProcessor = new CloseDateSortIssueProcessor();\n           break;\n         default:\n-          throw new IllegalArgumentException(\"Cannot sort issues on field : \" + query.sort().name());\n+          throw new IllegalArgumentException(\"Cannot sort issues on field : \" + sort.name());\n       }\n       return issueProcessor.sort(issues, query.asc());\n     }"
    },
    {
        "commit_id": "a686502af62bff2ae1fb43a479a444c96a0774e1",
        "commit_message": "Fix minor quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a686502af62bff2ae1fb43a479a444c96a0774e1",
        "buggy_code": "public boolean setResolution(DefaultIssue issue, String resolution, IssueChangeContext context) {",
        "fixed_code": "public boolean setResolution(DefaultIssue issue, @Nullable String resolution, IssueChangeContext context) {",
        "patch": "@@ -79,7 +79,7 @@ public boolean setLine(DefaultIssue issue, @Nullable Integer line) {\n     return false;\n   }\n \n-  public boolean setResolution(DefaultIssue issue, String resolution, IssueChangeContext context) {\n+  public boolean setResolution(DefaultIssue issue, @Nullable String resolution, IssueChangeContext context) {\n     if (!Objects.equal(resolution, issue.resolution())) {\n       issue.setFieldDiff(context, \"resolution\", issue.resolution(), resolution);\n       issue.setResolution(resolution);"
    },
    {
        "commit_id": "bd5bba641d127ee33978d33e280fb8c1e2f88a14",
        "commit_message": "SONAR-4333 Fix widget position",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bd5bba641d127ee33978d33e280fb8c1e2f88a14",
        "buggy_code": "dashboard.addWidget(\"issues_action_plans\", 2);",
        "fixed_code": "dashboard.addWidget(\"issues_action_plans\", 1);",
        "patch": "@@ -46,7 +46,7 @@ public Dashboard createDashboard() {\n \n   private void addFirstColumn(Dashboard dashboard) {\n     dashboard.addWidget(\"unresolved_issues_statuses\", 1);\n-    dashboard.addWidget(\"issues_action_plans\", 2);\n+    dashboard.addWidget(\"issues_action_plans\", 1);\n   }\n \n   private void addSecondColumn(Dashboard dashboard) {"
    },
    {
        "commit_id": "208f3c14209dffd20fa3b9a4c8cb232e7d95a20c",
        "commit_message": "SONAR-3755 Fix issues param when searching by issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/208f3c14209dffd20fa3b9a4c8cb232e7d95a20c",
        "buggy_code": "builder.issueKeys(RubyUtils.toStrings(props.get(\"issueKeys\")));",
        "fixed_code": "builder.issueKeys(RubyUtils.toStrings(props.get(\"issues\")));",
        "patch": "@@ -66,7 +66,7 @@ public IssueQueryResult find(Map<String, Object> params) {\n   IssueQuery toQuery(Map<String, Object> props) {\n     IssueQuery.Builder builder = IssueQuery.builder();\n     builder.requiredRole(UserRole.CODEVIEWER);\n-    builder.issueKeys(RubyUtils.toStrings(props.get(\"issueKeys\")));\n+    builder.issueKeys(RubyUtils.toStrings(props.get(\"issues\")));\n     builder.severities(RubyUtils.toStrings(props.get(\"severities\")));\n     builder.statuses(RubyUtils.toStrings(props.get(\"statuses\")));\n     builder.resolutions(RubyUtils.toStrings(props.get(\"resolutions\")));"
    },
    {
        "commit_id": "ae9e693c2d82c2fa450b29d8c3656d260aac9894",
        "commit_message": "SONAR-4287 Fix issue when loading action plan form",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae9e693c2d82c2fa450b29d8c3656d260aac9894",
        "buggy_code": "private DefaultIssue loadIssue(String issueKey) {",
        "fixed_code": "public DefaultIssue loadIssue(String issueKey) {",
        "patch": "@@ -128,7 +128,7 @@ public Issue create(DefaultIssue issue, UserSession userSession) {\n     return issue;\n   }\n \n-  private DefaultIssue loadIssue(String issueKey) {\n+  public DefaultIssue loadIssue(String issueKey) {\n     return finder.findByKey(issueKey, UserRole.USER);\n   }\n "
    },
    {
        "commit_id": "cc9867702ad0dcd63dd868f4319ceb442d0d0b09",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cc9867702ad0dcd63dd868f4319ceb442d0d0b09",
        "buggy_code": "assertThat(decorator.generatesIssuesMetrics()).hasSize(16);",
        "fixed_code": "assertThat(decorator.generatesIssuesMetrics()).hasSize(14);",
        "patch": "@@ -111,7 +111,7 @@ public void before() {\n \n   @Test\n   public void should_be_depended_upon_metric() {\n-    assertThat(decorator.generatesIssuesMetrics()).hasSize(16);\n+    assertThat(decorator.generatesIssuesMetrics()).hasSize(14);\n   }\n \n   @Test"
    },
    {
        "commit_id": "13846be5ff67723050f1ebf1ba2e1e1500798761",
        "commit_message": "Fix template path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/13846be5ff67723050f1ebf1ba2e1e1500798761",
        "buggy_code": "super(\"false_positive_issues\", \"False positive open issues\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/false_positive_issues.html.erb\");",
        "fixed_code": "super(\"false_positive_issues\", \"False positive open issues\", \"/org/sonar/plugins/core/widgets/issues/false_positive_issues.html.erb\");",
        "patch": "@@ -31,6 +31,6 @@\n })\n public class FalsePositiveIssuesWidget extends CoreWidget {\n   public FalsePositiveIssuesWidget() {\n-    super(\"false_positive_issues\", \"False positive open issues\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/false_positive_issues.html.erb\");\n+    super(\"false_positive_issues\", \"False positive open issues\", \"/org/sonar/plugins/core/widgets/issues/false_positive_issues.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "13846be5ff67723050f1ebf1ba2e1e1500798761",
        "commit_message": "Fix template path",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/13846be5ff67723050f1ebf1ba2e1e1500798761",
        "buggy_code": "super(\"my_unresolved_issues\", \"My unresolved issues\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/my_unresolved_issues.html.erb\");",
        "fixed_code": "super(\"my_unresolved_issues\", \"My unresolved issues\", \"/org/sonar/plugins/core/widgets/issues/my_unresolved_issues.html.erb\");",
        "patch": "@@ -31,6 +31,6 @@\n })\n public class MyUnresolvedIssuesWidget extends CoreWidget {\n   public MyUnresolvedIssuesWidget() {\n-    super(\"my_unresolved_issues\", \"My unresolved issues\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/issues/my_unresolved_issues.html.erb\");\n+    super(\"my_unresolved_issues\", \"My unresolved issues\", \"/org/sonar/plugins/core/widgets/issues/my_unresolved_issues.html.erb\");\n   }\n }"
    },
    {
        "commit_id": "23a7f05c6655a2a22d3e81a3bcb848bc03a48fb5",
        "commit_message": "SONAR-3755 Fix query to create H2 db on issues resolution",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23a7f05c6655a2a22d3e81a3bcb848bc03a48fb5",
        "buggy_code": ".copyTable(source, dest, \"issues\", \"resource_id in (\" + projectsConditionForIssues + \")\", \"resolution is not null\")",
        "fixed_code": ".copyTable(source, dest, \"issues\", \"resource_id in (\" + projectsConditionForIssues + \")\", \"resolution is null\")",
        "patch": "@@ -83,7 +83,7 @@ private void copy(DataSource source, DataSource dest, @Nullable Long projectId)\n         .copyTable(source, dest, \"projects\", \"(id=\" + projectId + \" or root_id=\" + projectId + \")\")\n         .copyTable(source, dest, \"reviews\", \"project_id=\" + projectId, \"status<>'\" + ReviewDto.STATUS_CLOSED + \"'\")\n         .copyTable(source, dest, \"rule_failures\", \"snapshot_id in (select id from snapshots where \" + snapshotCondition + \")\")\n-        .copyTable(source, dest, \"issues\", \"resource_id in (\" + projectsConditionForIssues + \")\", \"resolution is not null\")\n+        .copyTable(source, dest, \"issues\", \"resource_id in (\" + projectsConditionForIssues + \")\", \"resolution is null\")\n         .copyTable(source, dest, \"snapshots\", snapshotCondition);\n     }\n   }"
    },
    {
        "commit_id": "54740f6de3e0605a7a94eb0eb41b4a00f469498a",
        "commit_message": "SONAR-4282 Fix problem when returning issues when componentRoots is a module",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/54740f6de3e0605a7a94eb0eb41b4a00f469498a",
        "buggy_code": "assertThat(rowCount(\"issues\")).isEqualTo(2);",
        "fixed_code": "assertThat(rowCount(\"issues\")).isEqualTo(1);",
        "patch": "@@ -105,7 +105,7 @@ public void should_create_database_with_issues() throws IOException, SQLExceptio\n     byte[] database = localDatabaseFactory.createDatabaseForDryRun(399L);\n     dataSource = createDatabase(database);\n \n-    assertThat(rowCount(\"issues\")).isEqualTo(2);\n+    assertThat(rowCount(\"issues\")).isEqualTo(1);\n   }\n \n   private BasicDataSource createDatabase(byte[] db) throws IOException {"
    },
    {
        "commit_id": "3f561eed8bab854162ce9ed88c143ce7a1d2ca65",
        "commit_message": "SONAR-3755 Fix problem when updating action plan",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3f561eed8bab854162ce9ed88c143ce7a1d2ca65",
        "buggy_code": "Result result = internalRubyIssueService.createActionPlanResult(parameters);",
        "fixed_code": "Result result = internalRubyIssueService.createActionPlanResult(parameters, \"Short term\");",
        "patch": "@@ -149,7 +149,7 @@ public void should_get_error_on_action_plan_result_when_name_is_already_used_for\n \n     when(actionPlanService.isNameAlreadyUsedForProject(anyString(), anyString())).thenReturn(true);\n \n-    Result result = internalRubyIssueService.createActionPlanResult(parameters);\n+    Result result = internalRubyIssueService.createActionPlanResult(parameters, \"Short term\");\n     assertThat(result.ok()).isFalse();\n     assertThat(result.errors()).contains(new Result.Message(\"issues_action_plans.same_name_in_same_project\"));\n   }"
    },
    {
        "commit_id": "b9e0daf97c2107da6575bb7c4977c35193952248",
        "commit_message": "SONAR-3755 refactor issue sorting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b9e0daf97c2107da6575bb7c4977c35193952248",
        "buggy_code": "final ClassRealm realm;",
        "fixed_code": "ClassRealm realm;",
        "patch": "@@ -119,7 +119,7 @@ public ClassLoader add(PluginMetadata plugin) {\n       } else {\n         parent = new ResourcesClassloader(resources, baseClassloader);\n       }\n-      final ClassRealm realm;\n+      ClassRealm realm;\n       if (plugin.isUseChildFirstClassLoader()) {\n         ClassRealm parentRealm = world.newRealm(plugin.getKey() + \"-parent\", parent);\n         realm = parentRealm.createChildRealm(plugin.getKey());"
    },
    {
        "commit_id": "b9e0daf97c2107da6575bb7c4977c35193952248",
        "commit_message": "SONAR-3755 refactor issue sorting",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b9e0daf97c2107da6575bb7c4977c35193952248",
        "buggy_code": "protected HtmlSourceDecorator(SnapshotSourceDao snapshotSourceDao, SnapshotDataDao snapshotDataDao) {",
        "fixed_code": "HtmlSourceDecorator(SnapshotSourceDao snapshotSourceDao, SnapshotDataDao snapshotDataDao) {",
        "patch": "@@ -45,7 +45,7 @@ public HtmlSourceDecorator(MyBatis myBatis) {\n   }\n \n   @VisibleForTesting\n-  protected HtmlSourceDecorator(SnapshotSourceDao snapshotSourceDao, SnapshotDataDao snapshotDataDao) {\n+  HtmlSourceDecorator(SnapshotSourceDao snapshotSourceDao, SnapshotDataDao snapshotDataDao) {\n     this.snapshotSourceDao = snapshotSourceDao;\n     this.snapshotDataDao= snapshotDataDao;\n   }"
    },
    {
        "commit_id": "d36537ad6bb829c4a3fb19ac4de1fccd77aa1f64",
        "commit_message": "SONAR-3755 refactor issue search",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d36537ad6bb829c4a3fb19ac4de1fccd77aa1f64",
        "buggy_code": "public interface JRubyIssues extends ServerComponent {",
        "fixed_code": "public interface WebIssues extends ServerComponent {",
        "patch": "@@ -31,7 +31,7 @@\n  *\n  * @since 3.6\n  */\n-public interface JRubyIssues extends ServerComponent {\n+public interface WebIssues extends ServerComponent {\n \n   /**\n    * Search for issues."
    },
    {
        "commit_id": "29c859727de870fe1eb8aae067027f7a868459fd",
        "commit_message": "SONAR-3755 force to reload issue migrations in dev env",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/29c859727de870fe1eb8aae067027f7a868459fd",
        "buggy_code": "public static final int LAST_VERSION = 394;",
        "fixed_code": "public static final int LAST_VERSION = 396;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 394;\n+  public static final int LAST_VERSION = 396;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "53c455995c5d49b2876f334a98ddc86bbdf1c896",
        "commit_message": "SONAR-3755 Return Action plans in Issue Finder",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53c455995c5d49b2876f334a98ddc86bbdf1c896",
        "buggy_code": "public static final int LAST_VERSION = 393;",
        "fixed_code": "public static final int LAST_VERSION = 394;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 393;\n+  public static final int LAST_VERSION = 394;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "e2137e632995710ad3aebc4da3f3868e50f7c4d0",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2137e632995710ad3aebc4da3f3868e50f7c4d0",
        "buggy_code": "public static IssueChangeContext createUser(Date date, String login) {",
        "fixed_code": "public static IssueChangeContext createUser(Date date, @Nullable String login) {",
        "patch": "@@ -53,7 +53,7 @@ public static IssueChangeContext createScan(Date date) {\n     return new IssueChangeContext(null, date, true);\n   }\n \n-  public static IssueChangeContext createUser(Date date, String login) {\n+  public static IssueChangeContext createUser(Date date, @Nullable String login) {\n     return new IssueChangeContext(login, date, false);\n   }\n }"
    },
    {
        "commit_id": "a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "commit_message": "SONAR-3755 refactor issue dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "buggy_code": "Iterable<DefaultIssue> issues = issueCache.componentIssues();",
        "fixed_code": "Iterable<DefaultIssue> issues = issueCache.all();",
        "patch": "@@ -37,7 +37,7 @@ public IssuePersister(IssueCache issueCache, ScanIssueStorage storage) {\n \n   @Override\n   public void persist() {\n-    Iterable<DefaultIssue> issues = issueCache.componentIssues();\n+    Iterable<DefaultIssue> issues = issueCache.all();\n     storage.save(issues);\n   }\n }"
    },
    {
        "commit_id": "a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "commit_message": "SONAR-3755 refactor issue dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "buggy_code": "when(issueCache.componentIssues()).thenReturn(issues);",
        "fixed_code": "when(issueCache.all()).thenReturn(issues);",
        "patch": "@@ -36,7 +36,7 @@ public class IssuePersisterTest extends AbstractDaoTestCase {\n   public void should_persist_all_issues() throws Exception {\n     List<DefaultIssue> issues = Arrays.asList(new DefaultIssue());\n     IssueCache issueCache = mock(IssueCache.class);\n-    when(issueCache.componentIssues()).thenReturn(issues);\n+    when(issueCache.all()).thenReturn(issues);\n     ScanIssueStorage storage = mock(ScanIssueStorage.class);\n \n     persister = new IssuePersister(issueCache, storage);"
    },
    {
        "commit_id": "a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "commit_message": "SONAR-3755 refactor issue dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "buggy_code": "Context setClosedDate(boolean b);",
        "fixed_code": "Context setCloseDate(boolean b);",
        "patch": "@@ -25,7 +25,7 @@ interface Function {\n   interface Context {\n     Issue issue();\n     Context setResolution(String s);\n-    Context setClosedDate(boolean b);\n+    Context setCloseDate(boolean b);\n   }\n \n   void execute(Context context);"
    },
    {
        "commit_id": "a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "commit_message": "SONAR-3755 refactor issue dates",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1a1cd56cf3464200911a8c0dbef3ed25563aa6a",
        "buggy_code": "assertThat(issue.closedAt()).isNotNull();",
        "fixed_code": "assertThat(issue.closeDate()).isNotNull();",
        "patch": "@@ -72,7 +72,7 @@ public void should_do_automatic_transition() throws Exception {\n     workflow.doAutomaticTransition(issue, IssueChangeContext.createScan(new Date()));\n     assertThat(issue.resolution()).isEqualTo(Issue.RESOLUTION_FIXED);\n     assertThat(issue.status()).isEqualTo(Issue.STATUS_CLOSED);\n-    assertThat(issue.closedAt()).isNotNull();\n+    assertThat(issue.closeDate()).isNotNull();\n   }\n \n "
    },
    {
        "commit_id": "3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "commit_message": "SONAR-3755 fix issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "buggy_code": "return new DefaultIssueBuilder(component.key());",
        "fixed_code": "return new DefaultIssueBuilder().componentKey(component.key());",
        "patch": "@@ -42,7 +42,7 @@ public class DefaultIssuable implements Issuable {\n \n   @Override\n   public IssueBuilder newIssueBuilder() {\n-    return new DefaultIssueBuilder(component.key());\n+    return new DefaultIssueBuilder().componentKey(component.key());\n   }\n \n   @Override"
    },
    {
        "commit_id": "3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "commit_message": "SONAR-3755 fix issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "buggy_code": "public DefaultIssue setCreatedAt(@Nullable Date d) {",
        "fixed_code": "public DefaultIssue setCreatedAt(Date d) {",
        "patch": "@@ -179,7 +179,7 @@ public Date createdAt() {\n     return createdAt;\n   }\n \n-  public DefaultIssue setCreatedAt(@Nullable Date d) {\n+  public DefaultIssue setCreatedAt(Date d) {\n     this.createdAt = d;\n     return this;\n   }"
    },
    {
        "commit_id": "3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "commit_message": "SONAR-3755 fix issue creation date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b72f7890d6f811b3cd05c6bdb0578a5855b5106",
        "buggy_code": "DefaultIssueBuilder builder = new DefaultIssueBuilder(componentKey);",
        "fixed_code": "DefaultIssueBuilder builder = new DefaultIssueBuilder().componentKey(componentKey);",
        "patch": "@@ -61,7 +61,7 @@ public Issue create(Map<String, String> parameters) {\n     String componentKey = parameters.get(\"component\");\n     // TODO verify authorization\n     // TODO check existence of component\n-    DefaultIssueBuilder builder = new DefaultIssueBuilder(componentKey);\n+    DefaultIssueBuilder builder = new DefaultIssueBuilder().componentKey(componentKey);\n     String line = parameters.get(\"line\");\n     builder.line(line != null ? Integer.parseInt(line) : null);\n     builder.description(parameters.get(\"description\"));"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDto;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDto;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.api.utils.KeyValueFormat;\n import org.sonar.batch.scan.LastSnapshots;\n import org.sonar.core.issue.DefaultIssue;\n-import org.sonar.core.issue.IssueDto;\n+import org.sonar.core.issue.db.IssueDto;\n import org.sonar.plugins.core.timemachine.SourceChecksum;\n import org.sonar.plugins.core.timemachine.ViolationTrackingBlocksRecognizer;\n import org.sonar.plugins.core.timemachine.tracking.*;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDto;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDto;",
        "patch": "@@ -22,7 +22,7 @@\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.sonar.core.issue.IssueDto;\n+import org.sonar.core.issue.db.IssueDto;\n \n import java.util.Date;\n import java.util.List;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDto;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDto;",
        "patch": "@@ -29,7 +29,7 @@\n import org.sonar.api.resources.Resource;\n import org.sonar.batch.issue.ScanIssues;\n import org.sonar.core.issue.DefaultIssue;\n-import org.sonar.core.issue.IssueDto;\n+import org.sonar.core.issue.db.IssueDto;\n import org.sonar.core.issue.workflow.IssueWorkflow;\n import org.sonar.core.persistence.AbstractDaoTestCase;\n import org.sonar.java.api.JavaClass;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDto;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDto;",
        "patch": "@@ -33,7 +33,7 @@\n import org.sonar.api.utils.DateUtils;\n import org.sonar.batch.scan.LastSnapshots;\n import org.sonar.core.issue.DefaultIssue;\n-import org.sonar.core.issue.IssueDto;\n+import org.sonar.core.issue.db.IssueDto;\n \n import java.io.IOException;\n import java.util.Arrays;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDao;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDao;",
        "patch": "@@ -31,7 +31,7 @@\n import org.sonar.api.utils.DateUtils;\n import org.sonar.batch.index.SnapshotCache;\n import org.sonar.core.issue.DefaultIssue;\n-import org.sonar.core.issue.IssueDao;\n+import org.sonar.core.issue.db.IssueDao;\n import org.sonar.core.persistence.AbstractDaoTestCase;\n \n import static com.google.common.collect.Lists.newArrayList;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "package org.sonar.core.issue;",
        "fixed_code": "package org.sonar.core.issue.db;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.core.issue;\n+package org.sonar.core.issue.db;\n \n import org.apache.ibatis.session.SqlSession;\n import org.sonar.api.BatchComponent;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "package org.sonar.core.issue;",
        "fixed_code": "package org.sonar.core.issue.db;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.core.issue;\n+package org.sonar.core.issue.db;\n \n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "package org.sonar.core.issue;",
        "fixed_code": "package org.sonar.core.issue.db;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.core.issue;\n+package org.sonar.core.issue.db;\n \n import java.util.Collection;\n "
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": ".functions(new SetResolution(Issue.RESOLUTION_OPEN))// TODO new UnsetClosedAt",
        "fixed_code": ".functions(new SetResolution(Issue.RESOLUTION_OPEN), new UnsetClosedAt())",
        "patch": "@@ -63,7 +63,7 @@ public void start() {\n         .build())\n       .transition(Transition.builder(DefaultTransitions.REOPEN)\n         .from(Issue.STATUS_CLOSED).to(Issue.STATUS_REOPENED)\n-        .functions(new SetResolution(Issue.RESOLUTION_OPEN))// TODO new UnsetClosedAt\n+        .functions(new SetResolution(Issue.RESOLUTION_OPEN), new UnsetClosedAt())\n         .build())\n       .transition(Transition.builder(DefaultTransitions.FALSE_POSITIVE)\n         .from(Issue.STATUS_OPEN).to(Issue.STATUS_RESOLVED)"
    },
    {
        "commit_id": "f293e4b9558877a35a893ea8f0f4dcc037645396",
        "commit_message": "SONAR-3755 move db stuff to org.sonar.core.issue.db",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f293e4b9558877a35a893ea8f0f4dcc037645396",
        "buggy_code": "import org.sonar.core.issue.IssueDao;",
        "fixed_code": "import org.sonar.core.issue.db.IssueDao;",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.core.dashboard.DashboardDao;\n import org.sonar.core.duplication.DuplicationDao;\n import org.sonar.core.graph.jdbc.GraphDao;\n-import org.sonar.core.issue.IssueDao;\n+import org.sonar.core.issue.db.IssueDao;\n import org.sonar.core.measure.MeasureFilterDao;\n import org.sonar.core.properties.PropertiesDao;\n import org.sonar.core.purge.PurgeDao;"
    },
    {
        "commit_id": "cfa28e900d9b52cfca276e03c07e1e3b75c853cf",
        "commit_message": "Fix Cache#clear(String)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cfa28e900d9b52cfca276e03c07e1e3b75c853cf",
        "buggy_code": "key.to(Key.AFTER);",
        "fixed_code": "key.append(Key.AFTER);",
        "patch": "@@ -126,7 +126,7 @@ public Cache clear(String group) {\n       exchange.clear();\n       exchange.append(group);\n       Key key = new Key(exchange.getKey());\n-      key.to(Key.AFTER);\n+      key.append(Key.AFTER);\n       exchange.removeKeyRange(exchange.getKey(), key);\n       return this;\n     } catch (Exception e) {"
    },
    {
        "commit_id": "6f1161efb92298ace498df544e38f6f97216ec36",
        "commit_message": "SONAR-3755 new concept of automatic transitions in issue workflow",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6f1161efb92298ace498df544e38f6f97216ec36",
        "buggy_code": "thrown.expectMessage(\"Issue attributes must not exceed 1000 characters: \");",
        "fixed_code": "thrown.expectMessage(\"Issue attributes must not exceed 4000 characters: \");",
        "patch": "@@ -37,7 +37,7 @@ public class IssueDtoTest {\n   @Test\n   public void set_data_check_maximal_length() {\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\"Issue attributes must not exceed 1000 characters: \");\n+    thrown.expectMessage(\"Issue attributes must not exceed 4000 characters: \");\n \n     StringBuilder s = new StringBuilder(4500);\n     for (int i = 0; i < 4500; i++) {"
    },
    {
        "commit_id": "6f1161efb92298ace498df544e38f6f97216ec36",
        "commit_message": "SONAR-3755 new concept of automatic transitions in issue workflow",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6f1161efb92298ace498df544e38f6f97216ec36",
        "buggy_code": "ServerIssueChanges changes = mock(ServerIssueChanges.class);",
        "fixed_code": "ServerIssueActions changes = mock(ServerIssueActions.class);",
        "patch": "@@ -42,7 +42,7 @@\n public class DefaultJRubyIssuesTest {\n \n   IssueFinder finder = mock(IssueFinder.class);\n-  ServerIssueChanges changes = mock(ServerIssueChanges.class);\n+  ServerIssueActions changes = mock(ServerIssueActions.class);\n   DefaultJRubyIssues facade = new DefaultJRubyIssues(finder, changes);\n \n   @Test"
    },
    {
        "commit_id": "9e3d50f54b37411f5a0138ea8788fcb79b4a3058",
        "commit_message": "Fix migration on active rule changes by renaming user_name to username",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e3d50f54b37411f5a0138ea8788fcb79b4a3058",
        "buggy_code": "public static final int LAST_VERSION = 391;",
        "fixed_code": "public static final int LAST_VERSION = 392;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 391;\n+  public static final int LAST_VERSION = 392;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "c4c1dca2f2b6d264b4d57b58f5e6802faa599a20",
        "commit_message": "SONAR-3755 default issue resolution is OPEN",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c4c1dca2f2b6d264b4d57b58f5e6802faa599a20",
        "buggy_code": "assertThat(defaultIssue.resolution()).isNull();",
        "fixed_code": "assertThat(defaultIssue.resolution()).isEqualTo(Issue.RESOLUTION_OPEN);",
        "patch": "@@ -119,7 +119,7 @@ public void should_reopen_unresolved_issue() {\n     // First call is done when updating issues after calling issue tracking and we don't care\n     DefaultIssue defaultIssue = capturedDefaultIssues.get(1);\n     assertThat(defaultIssue.status()).isEqualTo(Issue.STATUS_REOPENED);\n-    assertThat(defaultIssue.resolution()).isNull();\n+    assertThat(defaultIssue.resolution()).isEqualTo(Issue.RESOLUTION_OPEN);\n     assertThat(defaultIssue.updatedAt()).isEqualTo(loadedDate);\n   }\n "
    },
    {
        "commit_id": "5846e6c2a88a0fa46d999689d9eb51ef0921ab94",
        "commit_message": "SONAR-3755 Add methods in IssueFinder Results to get rule by issue and component by issue and remove title from Issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5846e6c2a88a0fa46d999689d9eb51ef0921ab94",
        "buggy_code": "public final class JRubyI18n implements ServerComponent {",
        "fixed_code": "public class JRubyI18n implements ServerComponent {",
        "patch": "@@ -33,7 +33,7 @@\n /**\n  * Bridge between JRuby webapp and Java I18n component\n  */\n-public final class JRubyI18n implements ServerComponent {\n+public class JRubyI18n implements ServerComponent {\n \n   private I18n i18n;\n   private Map<String, Locale> localesByRubyKey = Maps.newHashMap();"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import org.sonar.api.batch.Sensor;\n import org.sonar.api.batch.SensorContext;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import org.sonar.api.batch.*;\n import org.sonar.api.measures.CoreMetrics;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import org.sonar.api.measures.CoreMetrics;\n import org.sonar.api.measures.Metric;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -17,7 +17,7 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import com.google.common.collect.Multiset;\n import com.google.common.collect.TreeMultiset;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import org.junit.Before;\n import org.junit.Test;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "package org.sonar.batch.issue;",
        "fixed_code": "package org.sonar.plugins.core.issue;",
        "patch": "@@ -18,7 +18,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package org.sonar.batch.issue;\n+package org.sonar.plugins.core.issue;\n \n import com.google.common.collect.Lists;\n import org.apache.commons.lang.ObjectUtils;"
    },
    {
        "commit_id": "e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "commit_message": "SONAR-3755 fix declaration of properties declared in issues components",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e8edf3d35c87e31da947b9f4052d91f125cfc01f",
        "buggy_code": "Issue apply(Issue issue, IssueChange change);",
        "fixed_code": "Issue change(Issue issue, IssueChange change);",
        "patch": "@@ -30,6 +30,6 @@\n  */\n public interface IssueChanges extends BatchComponent {\n \n-  Issue apply(Issue issue, IssueChange change);\n+  Issue change(Issue issue, IssueChange change);\n \n }"
    },
    {
        "commit_id": "0d43c9230e6f70849028cb81ff056531eb68e918",
        "commit_message": "SONAR-3755 complete issue workflow",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0d43c9230e6f70849028cb81ff056531eb68e918",
        "buggy_code": "private static final Set<String> RESOLUTIONS = ImmutableSet.of(RESOLUTION_FALSE_POSITIVE, RESOLUTION_FIXED);",
        "fixed_code": "private static final Set<String> RESOLUTIONS = ImmutableSet.of(RESOLUTION_OPEN, RESOLUTION_FALSE_POSITIVE, RESOLUTION_FIXED);",
        "patch": "@@ -40,7 +40,7 @@\n \n public class DefaultIssue implements Issue, Serializable {\n \n-  private static final Set<String> RESOLUTIONS = ImmutableSet.of(RESOLUTION_FALSE_POSITIVE, RESOLUTION_FIXED);\n+  private static final Set<String> RESOLUTIONS = ImmutableSet.of(RESOLUTION_OPEN, RESOLUTION_FALSE_POSITIVE, RESOLUTION_FIXED);\n   private static final Set<String> STATUSES = ImmutableSet.of(STATUS_OPEN, STATUS_CLOSED, STATUS_REOPENED, STATUS_RESOLVED);\n \n   private String key;"
    },
    {
        "commit_id": "e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "commit_message": "SONAR-3755 first draft of issue state machine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "buggy_code": "public boolean isManual() {",
        "fixed_code": "public boolean manual() {",
        "patch": "@@ -214,7 +214,7 @@ public DefaultIssue setClosedAt(@Nullable Date d) {\n     return this;\n   }\n \n-  public boolean isManual() {\n+  public boolean manual() {\n     return manual;\n   }\n "
    },
    {
        "commit_id": "e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "commit_message": "SONAR-3755 first draft of issue state machine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "buggy_code": ".setManualIssue(issue.isManual())",
        "fixed_code": ".setManualIssue(issue.manual())",
        "patch": "@@ -317,7 +317,7 @@ public static IssueDto toDto(DefaultIssue issue, Integer componentId, Integer ru\n       .setStatus(issue.status())\n       .setSeverity(issue.severity())\n       .setChecksum(issue.getChecksum())\n-      .setManualIssue(issue.isManual())\n+      .setManualIssue(issue.manual())\n       .setManualSeverity(issue.isManualSeverity())\n       .setUserLogin(issue.userLogin())\n       .setAssignee(issue.assignee())"
    },
    {
        "commit_id": "e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "commit_message": "SONAR-3755 first draft of issue state machine",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5e0c1076f177f79ab3024d8800e1c01ae7c40a2",
        "buggy_code": "assertThat(issue.isManual()).isTrue();",
        "fixed_code": "assertThat(issue.manual()).isTrue();",
        "patch": "@@ -87,7 +87,7 @@ public void should_set_issue_fields() {\n     assertThat(issue.title()).isEqualTo(\"title\");\n     assertThat(issue.description()).isEqualTo(\"message\");\n     assertThat(issue.isManualSeverity()).isTrue();\n-    assertThat(issue.isManual()).isTrue();\n+    assertThat(issue.manual()).isTrue();\n     assertThat(issue.userLogin()).isEqualTo(\"arthur\");\n     assertThat(issue.assignee()).isEqualTo(\"perceval\");\n     assertThat(issue.attribute(\"key\")).isEqualTo(\"value\");"
    },
    {
        "commit_id": "477f1750a5b07e18e3bb6e8cff9e310d8d6131fd",
        "commit_message": "SONAR-3755 Restore fix of issue tracking, add author login to issue",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/477f1750a5b07e18e3bb6e8cff9e310d8d6131fd",
        "buggy_code": "assertThat(issue.getPersonId()).isNull();",
        "fixed_code": "assertThat(issue.getAuthorLogin()).isEqualTo(\"pierre\");",
        "patch": "@@ -111,7 +111,7 @@ public void should_select_by_id() {\n     assertThat(issue.getStatus()).isEqualTo(\"OPEN\");\n     assertThat(issue.getResolution()).isEqualTo(\"FIXED\");\n     assertThat(issue.getChecksum()).isEqualTo(\"XXX\");\n-    assertThat(issue.getPersonId()).isNull();\n+    assertThat(issue.getAuthorLogin()).isEqualTo(\"pierre\");\n     assertThat(issue.getUserLogin()).isEqualTo(\"arthur\");\n     assertThat(issue.getAssignee()).isEqualTo(\"perceval\");\n     assertThat(issue.getAttributes()).isEqualTo(\"JIRA=FOO-1234\");"
    },
    {
        "commit_id": "3396cdad099113d7418142a68ec73de35d3e174c",
        "commit_message": "SONAR-3755 fix INSERT of ISSUES on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3396cdad099113d7418142a68ec73de35d3e174c",
        "buggy_code": "public String getIssueUuid() {",
        "fixed_code": "public String getIssueKey() {",
        "patch": "@@ -47,7 +47,7 @@ public IssueChangeDto setId(Long id) {\n     return this;\n   }\n \n-  public String getIssueUuid() {\n+  public String getIssueKey() {\n     return issueKey;\n   }\n "
    },
    {
        "commit_id": "3396cdad099113d7418142a68ec73de35d3e174c",
        "commit_message": "SONAR-3755 fix INSERT of ISSUES on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3396cdad099113d7418142a68ec73de35d3e174c",
        "buggy_code": "assertThat(dto.getIssueUuid()).isEqualTo(\"100\");",
        "fixed_code": "assertThat(dto.getIssueKey()).isEqualTo(\"100\");",
        "patch": "@@ -63,7 +63,7 @@ public void should_find_by_id() {\n \n     IssueChangeDto dto = dao.findById(100L);\n     assertThat(dto.getId()).isEqualTo(100L);\n-    assertThat(dto.getIssueUuid()).isEqualTo(\"100\");\n+    assertThat(dto.getIssueKey()).isEqualTo(\"100\");\n     assertThat(dto.getUserLogin()).isEqualTo(\"arthur\");\n     assertThat(dto.getChangeType()).isEqualTo(\"type\");\n     assertThat(dto.getChangeData()).isEqualTo(\"data\");"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": ".setMessage(violation.getMessage())",
        "fixed_code": ".setDescription(violation.getMessage())",
        "patch": "@@ -55,7 +55,7 @@ Issue toIssue(Violation violation) {\n       .setRuleKey(RuleKey.of(violation.getRule().getRepositoryKey(), violation.getRule().getKey()))\n       .setCost(violation.getCost())\n       .setLine(violation.getLineId())\n-      .setMessage(violation.getMessage())\n+      .setDescription(violation.getMessage())\n       .setStatus(Issue.STATUS_OPEN)\n       .setSeverity(violation.getSeverity() != null ? violation.getSeverity().name() : null);\n "
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "if (issue.assigneeLogin() == null) {",
        "fixed_code": "if (issue.assignee() == null) {",
        "patch": "@@ -98,7 +98,7 @@ public void decorate(Resource resource, DecoratorContext context) {\n         rulesBag.add(rulefinder.findByKey(issue.ruleKey().repository(), issue.ruleKey().rule()));\n         issuesPerSeverities.put(RulePriority.valueOf(issue.severity()), issue);\n \n-        if (issue.assigneeLogin() == null) {\n+        if (issue.assignee() == null) {\n           countUnassigned++;\n         }\n         if (Issue.RESOLUTION_FALSE_POSITIVE.equals(issue.resolution())) {"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "issues.add(new DefaultIssue().setRuleKey(ruleA2.ruleKey()).setStatus(Issue.STATUS_OPEN).setAssigneeLogin(\"arthur\").setSeverity(RulePriority.CRITICAL.name()));",
        "fixed_code": "issues.add(new DefaultIssue().setRuleKey(ruleA2.ruleKey()).setStatus(Issue.STATUS_OPEN).setAssignee(\"arthur\").setSeverity(RulePriority.CRITICAL.name()));",
        "patch": "@@ -212,7 +212,7 @@ public void should_save_unassigned_issues() {\n     List<Issue> issues = newArrayList();\n     issues.add(new DefaultIssue().setRuleKey(ruleA1.ruleKey()).setStatus(Issue.STATUS_OPEN).setSeverity(RulePriority.CRITICAL.name()));\n     issues.add(new DefaultIssue().setRuleKey(ruleA1.ruleKey()).setStatus(Issue.STATUS_REOPENED).setSeverity(RulePriority.CRITICAL.name()));\n-    issues.add(new DefaultIssue().setRuleKey(ruleA2.ruleKey()).setStatus(Issue.STATUS_OPEN).setAssigneeLogin(\"arthur\").setSeverity(RulePriority.CRITICAL.name()));\n+    issues.add(new DefaultIssue().setRuleKey(ruleA2.ruleKey()).setStatus(Issue.STATUS_OPEN).setAssignee(\"arthur\").setSeverity(RulePriority.CRITICAL.name()));\n     when(issuable.issues()).thenReturn(issues);\n \n     decorator.decorate(resource, context);"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "IssueBuilder message(String message);",
        "fixed_code": "IssueBuilder description(String description);",
        "patch": "@@ -35,7 +35,7 @@ interface IssueBuilder {\n \n     IssueBuilder line(Integer line);\n \n-    IssueBuilder message(String message);\n+    IssueBuilder description(String description);\n \n     IssueBuilder title(String title);\n "
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "public interface IssueChanges extends BatchComponent, ServerComponent {",
        "fixed_code": "public interface IssueChanges extends BatchComponent {",
        "patch": "@@ -28,7 +28,7 @@\n  * Change existing issues\n  * @since 3.6\n  */\n-public interface IssueChanges extends BatchComponent, ServerComponent {\n+public interface IssueChanges extends BatchComponent {\n \n   Issue apply(Issue issue, IssueChange change);\n "
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "Results find(IssueQuery query, @Nullable Integer currentUserId);",
        "fixed_code": "Results find(IssueQuery query, @Nullable Integer currentUserId, String role);",
        "patch": "@@ -37,7 +37,7 @@ interface Results {\n     List<Issue> issues();\n   }\n \n-  Results find(IssueQuery query, @Nullable Integer currentUserId);\n+  Results find(IssueQuery query, @Nullable Integer currentUserId, String role);\n \n   Issue findByKey(String key /* TODO @Nullable Integer currentUserId */);\n /*"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "public String getAssigneeLogin() {",
        "fixed_code": "public String getAssignee() {",
        "patch": "@@ -151,7 +151,7 @@ public Issue setUserLogin(String userLogin) {\n     return this;\n   }\n \n-  public String getAssigneeLogin() {\n+  public String getAssignee() {\n     return assigneeLogin;\n   }\n "
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "appendUrlParameter(url, \"assigneeLogins\", assigneeLogins);",
        "fixed_code": "appendUrlParameter(url, \"assignees\", assigneeLogins);",
        "patch": "@@ -182,7 +182,7 @@ public String getUrl() {\n     appendUrlParameter(url, \"componentRoots\", componentRoots);\n     appendUrlParameter(url, \"rules\", rules);\n     appendUrlParameter(url, \"userLogins\", userLogins);\n-    appendUrlParameter(url, \"assigneeLogins\", assigneeLogins);\n+    appendUrlParameter(url, \"assignees\", assigneeLogins);\n     appendUrlParameter(url, \"createdAfter\", createdAfter);\n     appendUrlParameter(url, \"createdBefore\", createdBefore);\n     appendUrlParameter(url, \"limit\", limit);"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": ".setAssigneeLogin(utils.getString(json, \"assigneeLogin\"))",
        "fixed_code": ".setAssigneeLogin(utils.getString(json, \"assignee\"))",
        "patch": "@@ -40,7 +40,7 @@ protected Issue parse(Object json) {\n         .setStatus(utils.getString(json, \"status\"))\n         .setResolution(utils.getString(json, \"resolution\"))\n         .setUserLogin(utils.getString(json, \"userLogin\"))\n-        .setAssigneeLogin(utils.getString(json, \"assigneeLogin\"))\n+        .setAssigneeLogin(utils.getString(json, \"assignee\"))\n         .setCreatedAt(utils.getDateTime(json, \"createdAt\"))\n         .setUpdatedAt(utils.getDateTime(json, \"updatedAt\"))\n         .setClosedAt(utils.getDateTime(json, \"closedAt\"));"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "\"userLogins=userLogin1,userLogin2&assigneeLogins=arthur,perceval&limit=1&\");",
        "fixed_code": "\"userLogins=userLogin1,userLogin2&assignees=arthur,perceval&limit=1&\");",
        "patch": "@@ -50,7 +50,7 @@ public void get_all_issues_by_parameter() {\n         ;\n     assertThat(query.getUrl()).isEqualTo(\"/api/issues/search?keys=ABCDE,FGHIJ&severities=BLOCKER,INFO&statuses=OPEN,CLOSED&\" +\n         \"resolutions=resolution1,resolution2&components=component1,component2&componentRoots=componentRoot1,componentRoot2&rules=squid%3AAvoidCycle&\" +\n-        \"userLogins=userLogin1,userLogin2&assigneeLogins=arthur,perceval&limit=1&\");\n+        \"userLogins=userLogin1,userLogin2&assignees=arthur,perceval&limit=1&\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "commit_message": "SONAR-3755 rename Issue#message() to description()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7f8c6bc89dbc2f5a1792b17228b1a17b2c8483d6",
        "buggy_code": "assertThat(issue.getAssigneeLogin()).isEqualTo(\"admin\");",
        "fixed_code": "assertThat(issue.getAssignee()).isEqualTo(\"admin\");",
        "patch": "@@ -50,7 +50,7 @@ public void should_return_one_issue() {\n     assertThat(issue.getStatus()).isEqualTo(\"OPEN\");\n     assertThat(issue.getResolution()).isEqualTo(\"FIXED\");\n     assertThat(issue.getUserLogin()).isEqualTo(\"admin\");\n-    assertThat(issue.getAssigneeLogin()).isEqualTo(\"admin\");\n+    assertThat(issue.getAssignee()).isEqualTo(\"admin\");\n     assertThat(issue.getCreatedAt()).isNotNull();\n     assertThat(issue.getUpdatedAt()).isNotNull();\n     assertThat(issue.getClosedAt()).isNull();"
    },
    {
        "commit_id": "398c82a5810e446a22b31d204a87ad7fd806a068",
        "commit_message": "SONAR-4188 Fix Regex to validate project key",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/398c82a5810e446a22b31d204a87ad7fd806a068",
        "buggy_code": "private static final String VALID_MODULE_KEY_REGEXP = \"[0-9a-zA-Z:-_\\\\.]+\";",
        "fixed_code": "private static final String VALID_MODULE_KEY_REGEXP = \"[0-9a-zA-Z-_\\\\.:]+\";",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class ProjectReactorValidator {\n \n-  private static final String VALID_MODULE_KEY_REGEXP = \"[0-9a-zA-Z:-_\\\\.]+\";\n+  private static final String VALID_MODULE_KEY_REGEXP = \"[0-9a-zA-Z-_\\\\.:]+\";\n \n   public void validate(ProjectReactor reactor) {\n     List<String> validationMessages = new ArrayList<String>();"
    },
    {
        "commit_id": "c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "commit_message": "Fix IssuePersisterTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "buggy_code": "rulesBag.add(rulefinder.findByKey(issue.ruleRepositoryKey(), issue.ruleKey()));",
        "fixed_code": "rulesBag.add(rulefinder.findByKey(issue.ruleKey().repository(), issue.ruleKey().rule()));",
        "patch": "@@ -101,7 +101,7 @@ private void computeIssuesPerRules(DecoratorContext context, Collection<Issue> i\n     Map<RulePriority, Multiset<Rule>> rulesPerSeverity = Maps.newHashMap();\n     for (Issue issue : issues) {\n       Multiset<Rule> rulesBag = initRules(rulesPerSeverity, RulePriority.valueOf(issue.severity()));\n-      rulesBag.add(rulefinder.findByKey(issue.ruleRepositoryKey(), issue.ruleKey()));\n+      rulesBag.add(rulefinder.findByKey(issue.ruleKey().repository(), issue.ruleKey().rule()));\n     }\n \n     for (RulePriority severity : RulePriority.values()) {"
    },
    {
        "commit_id": "c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "commit_message": "Fix IssuePersisterTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "buggy_code": "ActiveRule activeRule = qProfile.getActiveRule(issue.ruleRepositoryKey(), issue.ruleKey());",
        "fixed_code": "ActiveRule activeRule = qProfile.getActiveRule(issue.ruleKey().repository(), issue.ruleKey().rule());",
        "patch": "@@ -56,7 +56,7 @@ public ModuleIssues addOrUpdate(DefaultIssue issue) {\n \n   @Override\n   public void onIssueCreation(DefaultIssue issue) {\n-    ActiveRule activeRule = qProfile.getActiveRule(issue.ruleRepositoryKey(), issue.ruleKey());\n+    ActiveRule activeRule = qProfile.getActiveRule(issue.ruleKey().repository(), issue.ruleKey().rule());\n     if (activeRule == null || activeRule.getRule() == null) {\n       // rule does not exist or is not enabled -> ignore the issue\n       return;"
    },
    {
        "commit_id": "c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "commit_message": "Fix IssuePersisterTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "buggy_code": "Rule rule = rulefinder.findByKey(issue.ruleRepositoryKey(), issue.ruleKey());",
        "fixed_code": "Rule rule = rulefinder.findByKey(issue.ruleKey().repository(), issue.ruleKey().rule());",
        "patch": "@@ -148,7 +148,7 @@ private void computeNewIssuesPerRule(DecoratorContext context, Collection<Issue>\n \n       for (Issue issue : issues) {\n         if (RulePriority.valueOf(issue.severity()).equals(severity)) {\n-          Rule rule = rulefinder.findByKey(issue.ruleRepositoryKey(), issue.ruleKey());\n+          Rule rule = rulefinder.findByKey(issue.ruleKey().repository(), issue.ruleKey().rule());\n           rules.add(rule);\n           issuesPerRule.put(rule, issue);\n         }"
    },
    {
        "commit_id": "c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "commit_message": "Fix IssuePersisterTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6a6e97394200ac5a58fde0cbfc80e59631c5f6c",
        "buggy_code": "throw new UnsupportedOperationException(\"TODO\");",
        "fixed_code": "throw new UnsupportedOperationException(\"Not supported yet from batch\");",
        "patch": "@@ -29,7 +29,7 @@ public class ScanIssueActions implements IssueActions {\n \n   @Override\n   public Issue comment(Issue issue, String userLogin, String comment) {\n-    throw new UnsupportedOperationException(\"TODO\");\n+    throw new UnsupportedOperationException(\"Not supported yet from batch\");\n   }\n \n   @Override"
    },
    {
        "commit_id": "6200b1a0835a7260f651492df1f452e0461b2a4c",
        "commit_message": "SONAR-3755 complete ModuleIssues for issue tracking",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6200b1a0835a7260f651492df1f452e0461b2a4c",
        "buggy_code": "cache.add(issue);",
        "fixed_code": "cache.addOrUpdate(issue);",
        "patch": "@@ -39,7 +39,7 @@ public DeprecatedViolations(IssueCache cache) {\n   public void add(Violation violation) {\n     Issue issue = toIssue(violation);\n     if (issue != null) {\n-      cache.add(issue);\n+      cache.addOrUpdate(issue);\n     }\n   }\n "
    },
    {
        "commit_id": "d5775b6b816717262b98e62fdd95097985bc5f77",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5775b6b816717262b98e62fdd95097985bc5f77",
        "buggy_code": "private void mapLastIssues(List<DefaultIssue> newIssues, @Nullable Collection<IssueDto> lastIssues, Multimap<Integer, IssueDto> lastIssuesByRule) {",
        "fixed_code": "private void mapLastIssues(List<DefaultIssue> newIssues, Collection<IssueDto> lastIssues, Multimap<Integer, IssueDto> lastIssuesByRule) {",
        "patch": "@@ -236,7 +236,7 @@ Map<DefaultIssue, IssueDto> mapIssues(List<DefaultIssue> newIssues, @Nullable Co\n     return referenceIssuesMap;\n   }\n \n-  private void mapLastIssues(List<DefaultIssue> newIssues, @Nullable Collection<IssueDto> lastIssues, Multimap<Integer, IssueDto> lastIssuesByRule) {\n+  private void mapLastIssues(List<DefaultIssue> newIssues, Collection<IssueDto> lastIssues, Multimap<Integer, IssueDto> lastIssuesByRule) {\n     unmappedLastIssues.addAll(lastIssues);\n \n     for (IssueDto lastIssue : lastIssues) {"
    },
    {
        "commit_id": "8d4c8f7f63c1826df40f904da80de21e3ef15391",
        "commit_message": "SONAR-3755 Fix issue where Issues updated at was not set",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d4c8f7f63c1826df40f904da80de21e3ef15391",
        "buggy_code": "void update(IssueDto review);",
        "fixed_code": "void update(IssueDto issueDto);",
        "patch": "@@ -31,7 +31,7 @@ public interface IssueMapper {\n \n   void insert(IssueDto issueDto);\n \n-  void update(IssueDto review);\n+  void update(IssueDto issueDto);\n \n   IssueDto findById(long issueId);\n "
    },
    {
        "commit_id": "d6b0805ce675f1d70fbf3b6b0b9a3a5d919ec2e5",
        "commit_message": "SONAR-3755 Add IssueTracking and update IssuePersister to save or update issue (but without re-loading issue being update during analysis)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d6b0805ce675f1d70fbf3b6b0b9a3a5d919ec2e5",
        "buggy_code": "assertThat(issue.key()).isNotEmpty();",
        "fixed_code": "assertThat(issue.key()).isNull();",
        "patch": "@@ -42,7 +42,7 @@ public void should_create_issue() throws Exception {\n       .done();\n \n     assertThat(issue).isNotNull();\n-    assertThat(issue.key()).isNotEmpty();\n+    assertThat(issue.key()).isNull();\n     assertThat(issue.cost()).isEqualTo(10000.0);\n     assertThat(issue.componentKey()).isEqualTo(componentKey);\n     assertThat(issue.message()).isEqualTo(\"msg\");"
    },
    {
        "commit_id": "86033bd3c9ba856afdd42aaf06948169205a4522",
        "commit_message": "SONAR-3755 fix component key and rename Issuable.IssueBuilder#create()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86033bd3c9ba856afdd42aaf06948169205a4522",
        "buggy_code": "public Issue create() {",
        "fixed_code": "public Issue done() {",
        "patch": "@@ -88,7 +88,7 @@ public Issuable.IssueBuilder manual(boolean b) {\n   }\n \n   @Override\n-  public Issue create() {\n+  public Issue done() {\n     Preconditions.checkNotNull(componentKey, \"Component key must be set\");\n     Preconditions.checkNotNull(ruleRepository, \"Rule repository must be set\");\n     Preconditions.checkNotNull(ruleKey, \"Rule key must be set\");"
    },
    {
        "commit_id": "86033bd3c9ba856afdd42aaf06948169205a4522",
        "commit_message": "SONAR-3755 fix component key and rename Issuable.IssueBuilder#create()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86033bd3c9ba856afdd42aaf06948169205a4522",
        "buggy_code": "Issue create();",
        "fixed_code": "Issue done();",
        "patch": "@@ -45,7 +45,7 @@ interface IssueBuilder {\n \n     IssueBuilder manual(boolean b);\n \n-    Issue create();\n+    Issue done();\n   }\n \n   IssueBuilder newIssue();"
    },
    {
        "commit_id": "fa8904d9f15dbce28f7c08d927b93c2b3a82cc67",
        "commit_message": "SONAR-3755 Rename IssueChangelog in IssueChange and rename uuid to key in Issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa8904d9f15dbce28f7c08d927b93c2b3a82cc67",
        "buggy_code": "\"issue_changelog\",",
        "fixed_code": "\"issue_changes\",",
        "patch": "@@ -62,7 +62,7 @@ private DatabaseUtils() {\n     \"groups_users\",\n     \"group_roles\",\n     \"issues\",\n-    \"issue_changelog\",\n+    \"issue_changes\",\n     \"loaded_templates\",\n     \"manual_measures\",\n     \"measure_data\","
    },
    {
        "commit_id": "fa8904d9f15dbce28f7c08d927b93c2b3a82cc67",
        "commit_message": "SONAR-3755 Rename IssueChangelog in IssueChange and rename uuid to key in Issue API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fa8904d9f15dbce28f7c08d927b93c2b3a82cc67",
        "buggy_code": "Issue apply(Issue issue, IssueChangelog issueChangelog);",
        "fixed_code": "Issue apply(Issue issue, IssueChange issueChangelog);",
        "patch": "@@ -30,7 +30,7 @@\n  */\n public interface Issuable extends Perspective {\n \n-  Issue apply(Issue issue, IssueChangelog issueChangelog);\n+  Issue apply(Issue issue, IssueChange issueChangelog);\n \n   List<Issue> issues();\n "
    },
    {
        "commit_id": "996c779bd2b0336bbb3d207d0fb3c5bcaab18fca",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/996c779bd2b0336bbb3d207d0fb3c5bcaab18fca",
        "buggy_code": "public RequestLogHandler configureRequestLogHandler(String filenamePattern) {",
        "fixed_code": "private RequestLogHandler configureRequestLogHandler(String filenamePattern) {",
        "patch": "@@ -107,7 +107,7 @@ private Server configureProgrammatically() throws URISyntaxException {\n     return server;\n   }\n \n-  public RequestLogHandler configureRequestLogHandler(String filenamePattern) {\n+  private RequestLogHandler configureRequestLogHandler(String filenamePattern) {\n     RequestLogHandler requestLogHandler = new RequestLogHandler();\n     NCSARequestLog requestLog = new NCSARequestLog(filenamePattern);\n     requestLog.setRetainDays(7);"
    },
    {
        "commit_id": "996c779bd2b0336bbb3d207d0fb3c5bcaab18fca",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/996c779bd2b0336bbb3d207d0fb3c5bcaab18fca",
        "buggy_code": "package org.sonar.batch.scan;",
        "fixed_code": "package org.sonar.batch.bootstrap;",
        "patch": "@@ -17,7 +17,7 @@\n  * License along with Sonar; if not, write to the Free Software\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02\n  */\n-package org.sonar.batch.scan;\n+package org.sonar.batch.bootstrap;\n \n /**\n  * @since 3.6"
    },
    {
        "commit_id": "55adf33f94ec33c30f127f664248a3e84c9ea161",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/55adf33f94ec33c30f127f664248a3e84c9ea161",
        "buggy_code": "if (o == null || !(o instanceof Language)) {",
        "fixed_code": "if (!(o instanceof Language)) {",
        "patch": "@@ -82,7 +82,7 @@ public boolean equals(Object o) {\n       return true;\n     }\n     // We replace the test equality on classes by test on Language instance in order to keep backward compatibility between this deprecated class and the new one in sonar-java\n-    if (o == null || !(o instanceof Language)) {\n+    if (!(o instanceof Language)) {\n       return false;\n     }\n "
    },
    {
        "commit_id": "e2b6f6e550116d588ef0e2ade68fda4cc22d77bb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2b6f6e550116d588ef0e2ade68fda4cc22d77bb",
        "buggy_code": "add(rule);",
        "fixed_code": "ruleRepositoryList.put(rule.getRepositoryKey(), rule);",
        "patch": "@@ -288,7 +288,7 @@ public RulesByRepository() {\n     public RulesByRepository(List<Rule> rules){\n       this();\n       for (Rule rule :rules) {\n-        add(rule);\n+        ruleRepositoryList.put(rule.getRepositoryKey(), rule);\n       }\n     }\n "
    },
    {
        "commit_id": "f6b11a44af6032d46afd2809cc7e54e93d05e5a0",
        "commit_message": "Fix log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f6b11a44af6032d46afd2809cc7e54e93d05e5a0",
        "buggy_code": "private static final Logger LOG = LoggerFactory.getLogger(RegisterRules2.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(RegisterRules.class);",
        "patch": "@@ -54,7 +54,7 @@\n \n public final class RegisterRules {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(RegisterRules2.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(RegisterRules.class);\n   private final DatabaseSessionFactory sessionFactory;\n   private final List<RuleRepository> repositories;\n   private final RuleI18nManager ruleI18nManager;"
    },
    {
        "commit_id": "e11f72d0113efc197a0d42b6b6caa3c91c7e4ec1",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e11f72d0113efc197a0d42b6b6caa3c91c7e4ec1",
        "buggy_code": "public void setEnabled(Boolean enabled) {",
        "fixed_code": "public Rule setEnabled(Boolean enabled) {",
        "patch": "@@ -256,7 +256,7 @@ public Rule setDescription(String description) {\n    * @deprecated in 3.6\n    */\n   @Deprecated\n-  public void setEnabled(Boolean enabled) {\n+  public Rule setEnabled(Boolean enabled) {\n     throw new UnsupportedOperationException(\"No more supported since version 3.6. Please use setStatus() instead.\");\n   }\n "
    },
    {
        "commit_id": "914e1160fa83f1c4613b164fcb79d204f677938d",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/914e1160fa83f1c4613b164fcb79d204f677938d",
        "buggy_code": "public void setEnabled(boolean enabled) {",
        "fixed_code": "public void setEnabled(Boolean enabled) {",
        "patch": "@@ -256,7 +256,7 @@ public Rule setDescription(String description) {\n    * @deprecated in 3.6\n    */\n   @Deprecated\n-  public void setEnabled(boolean enabled) {\n+  public void setEnabled(Boolean enabled) {\n     throw new UnsupportedOperationException(\"No more supported since version 3.6. Please use setStatus() instead.\");\n   }\n "
    },
    {
        "commit_id": "274b6608415ca828981de87f42b4ff9ea070d207",
        "commit_message": "SONAR-3837 Fix violation tracking mechanism",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/274b6608415ca828981de87f42b4ff9ea070d207",
        "buggy_code": "if (rec.isValidLineInSource(pastViolation.getLine())) {",
        "fixed_code": "if (rec.isValidLineInReference(pastViolation.getLine())) {",
        "patch": "@@ -280,7 +280,7 @@ private Multimap<Integer, Violation> newViolationsByLines(Collection<Violation>\n   private Multimap<Integer, RuleFailureModel> lastViolationsByLines(Collection<RuleFailureModel> lastViolations, ViolationTrackingBlocksRecognizer rec) {\n     Multimap<Integer, RuleFailureModel> lastViolationsByLines = LinkedHashMultimap.create();\n     for (RuleFailureModel pastViolation : lastViolations) {\n-      if (rec.isValidLineInSource(pastViolation.getLine())) {\n+      if (rec.isValidLineInReference(pastViolation.getLine())) {\n         lastViolationsByLines.put(pastViolation.getLine(), pastViolation);\n       }\n     }"
    },
    {
        "commit_id": "041dceb1c50d4e1c073e044ab37a610faae2d6a4",
        "commit_message": "Fix after refactoring for views",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/041dceb1c50d4e1c073e044ab37a610faae2d6a4",
        "buggy_code": "TaskBootstrapContainer module = new TaskBootstrapContainer(\"inspect\", null);",
        "fixed_code": "TaskBootstrapContainer module = new TaskBootstrapContainer(\"inspect\");",
        "patch": "@@ -44,7 +44,7 @@ protected void configure() {\n       }\n     };\n     bootstrapModule.init();\n-    TaskBootstrapContainer module = new TaskBootstrapContainer(\"inspect\", null);\n+    TaskBootstrapContainer module = new TaskBootstrapContainer(\"inspect\");\n     bootstrapModule.installChild(module);\n \n     thrown.expect(SonarException.class);"
    },
    {
        "commit_id": "5a4782df34c85ca03afc186a6b63f27aa4603618",
        "commit_message": "Fix issue on update center : do not always use last release to know the current release",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5a4782df34c85ca03afc186a6b63f27aa4603618",
        "buggy_code": "for (String key : getPluginReferential().findReleasesWithDependencies(pluginKey)) {",
        "fixed_code": "for (String key : getPluginReferential().findLastReleasesWithDependencies(pluginKey)) {",
        "patch": "@@ -149,7 +149,7 @@ private void loadCorePlugins() {\n   }\n \n   public void uninstall(String pluginKey) {\n-    for (String key : getPluginReferential().findReleasesWithDependencies(pluginKey)) {\n+    for (String key : getPluginReferential().findLastReleasesWithDependencies(pluginKey)) {\n       uninstallPlugin(key);\n     }\n   }"
    },
    {
        "commit_id": "17a2fd51a13238eda003aed85249278253d8003f",
        "commit_message": "Fix compatibility with latest SNAPSHOT of sonar-update-center-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/17a2fd51a13238eda003aed85249278253d8003f",
        "buggy_code": "metadata.setRequiredPlugins(Arrays.asList(manifest.getRequiresPlugins()));",
        "fixed_code": "metadata.setRequiredPlugins(Arrays.asList(manifest.getRequirePlugins()));",
        "patch": "@@ -121,7 +121,7 @@ public DefaultPluginMetadata extractMetadata(File file, boolean isCore) {\n       metadata.setBasePlugin(manifest.getBasePlugin());\n       metadata.setImplementationBuild(manifest.getImplementationBuild());\n       metadata.setParent(manifest.getParent());\n-      metadata.setRequiredPlugins(Arrays.asList(manifest.getRequiresPlugins()));\n+      metadata.setRequiredPlugins(Arrays.asList(manifest.getRequirePlugins()));\n       metadata.setCore(isCore);\n       return metadata;\n "
    },
    {
        "commit_id": "17a2fd51a13238eda003aed85249278253d8003f",
        "commit_message": "Fix compatibility with latest SNAPSHOT of sonar-update-center-common",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/17a2fd51a13238eda003aed85249278253d8003f",
        "buggy_code": "pluginManifest.setRequiresPlugins(metadata.getRequiredPlugins().toArray(new String []{}));",
        "fixed_code": "pluginManifest.setRequirePlugins(metadata.getRequiredPlugins().toArray(new String []{}));",
        "patch": "@@ -63,7 +63,7 @@ private static PluginManifest toPluginManifest(PluginMetadata metadata) {\n     pluginManifest.setHomepage(metadata.getHomepage());\n     pluginManifest.setBasePlugin(metadata.getBasePlugin());\n     pluginManifest.setParent(metadata.getParent());\n-    pluginManifest.setRequiresPlugins(metadata.getRequiredPlugins().toArray(new String []{}));\n+    pluginManifest.setRequirePlugins(metadata.getRequiredPlugins().toArray(new String []{}));\n     return pluginManifest;\n   }\n }"
    },
    {
        "commit_id": "7975f4777901956c93ca2f08606415840a682816",
        "commit_message": "Fix inclusions by absolute path and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7975f4777901956c93ca2f08606415840a682816",
        "buggy_code": "return settings.hasKey(CoreProperties.ENCODING_PROPERTY);",
        "fixed_code": "return !settings.hasKey(CoreProperties.ENCODING_PROPERTY);",
        "patch": "@@ -94,7 +94,7 @@ public Charset sourceCharset() {\n   }\n \n   boolean isDefaultSourceCharset() {\n-    return settings.hasKey(CoreProperties.ENCODING_PROPERTY);\n+    return !settings.hasKey(CoreProperties.ENCODING_PROPERTY);\n   }\n \n   public File workingDir() {"
    },
    {
        "commit_id": "3b3a95475d7de97c485f2a704aab60633c39a8ba",
        "commit_message": "Merge pull request #24 from Batmat/fix-typo\n\nFixing typo.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b3a95475d7de97c485f2a704aab60633c39a8ba",
        "buggy_code": "throw new SonarException(\"The project is already been analysing.\");",
        "fixed_code": "throw new SonarException(\"The project is already being analysed.\");",
        "patch": "@@ -48,7 +48,7 @@ public void start() {\n       Semaphores.Semaphore semaphore = acquire();\n       if (!semaphore.isLocked()) {\n         LOG.error(getErrorMessage(semaphore));\n-        throw new SonarException(\"The project is already been analysing.\");\n+        throw new SonarException(\"The project is already being analysed.\");\n       }\n     }\n   }"
    },
    {
        "commit_id": "2151dc3d68f5d1eefa4bbbf5dc27a04a5df8dc81",
        "commit_message": "Fix log level of batch working dir",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2151dc3d68f5d1eefa4bbbf5dc27a04a5df8dc81",
        "buggy_code": "LOG.warn(\"Working dir: \" + workDir.getAbsolutePath());",
        "fixed_code": "LOG.info(\"Working dir: \" + workDir.getAbsolutePath());",
        "patch": "@@ -79,7 +79,7 @@ private File guessWorkingDir(ProjectDefinition module, TempDirectories tempDirec\n       workDir = tempDirectories.getDir(\"work\");\n       LOG.warn(\"Working dir is not set. Using: \" + workDir.getAbsolutePath());\n     } else {\n-      LOG.warn(\"Working dir: \" + workDir.getAbsolutePath());\n+      LOG.info(\"Working dir: \" + workDir.getAbsolutePath());\n       try {\n         FileUtils.forceMkdir(workDir);\n       } catch (Exception e) {"
    },
    {
        "commit_id": "549b5ce23cf164e7935f697a7c516f828ea22565",
        "commit_message": "Try to fix SemaphoreDaoTest on mysql",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/549b5ce23cf164e7935f697a7c516f828ea22565",
        "buggy_code": "Thread.sleep(100);",
        "fixed_code": "Thread.sleep(500);",
        "patch": "@@ -99,7 +99,7 @@ public void create_and_acquire_and_update_semaphore() throws Exception {\n     SemaphoreDto semaphore = selectSemaphore(\"foo\");\n     assertThat(semaphore.getCreatedAt().getTime()).isEqualTo(semaphore.getUpdatedAt().getTime());\n \n-    Thread.sleep(100);\n+    Thread.sleep(500);\n \n     dao.update(lock);\n "
    },
    {
        "commit_id": "84792078764ce7e6dbdffabb03f40f3bf2bb37b7",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/84792078764ce7e6dbdffabb03f40f3bf2bb37b7",
        "buggy_code": "static abstract class FilePattern {",
        "fixed_code": "abstract static class FilePattern {",
        "patch": "@@ -125,7 +125,7 @@ FilePattern[] testExclusions() {\n     return testExclusions;\n   }\n \n-  static abstract class FilePattern {\n+  abstract static class FilePattern {\n     final WildcardPattern pattern;\n \n     protected FilePattern(String pattern) {"
    },
    {
        "commit_id": "b6e7cc0ac63191ebcd85a3ef77fb18c224280195",
        "commit_message": "Fix loading of source encoding from Maven POM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b6e7cc0ac63191ebcd85a3ef77fb18c224280195",
        "buggy_code": "verify(fs).resetDirs(any(File.class), any(File.class), any(File.class), anyList(), anyList(), anyList());",
        "fixed_code": "verify(fs).resetDirs(any(File.class), any(File.class), anyList(), anyList(), anyList());",
        "patch": "@@ -62,7 +62,7 @@ public void concreteExecute(MavenProject pom, String goal) throws Exception {\n     DefaultModuleFileSystem fs = mock(DefaultModuleFileSystem.class);\n     executor.execute(foo, fs, new AddSourceMavenPluginHandler());\n \n-    verify(fs).resetDirs(any(File.class), any(File.class), any(File.class), anyList(), anyList(), anyList());\n+    verify(fs).resetDirs(any(File.class), any(File.class), anyList(), anyList(), anyList());\n   }\n \n   static class AddSourceMavenPluginHandler implements MavenPluginHandler {"
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "private static DependencyInfo INSTANCE = new DependencyInfo();",
        "fixed_code": "private static final DependencyInfo INSTANCE = new DependencyInfo();",
        "patch": "@@ -39,7 +39,7 @@\n \n public final class DependencyInfo extends Composite {\n \n-  private static DependencyInfo INSTANCE = new DependencyInfo();\n+  private static final DependencyInfo INSTANCE = new DependencyInfo();\n \n   private VerticalPanel panel;\n   private Loading loading = new Loading();"
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "public void load() {",
        "fixed_code": "public final void load() {",
        "patch": "@@ -45,7 +45,7 @@ public DatabaseConfiguration(DatabaseSession session) {\n     load();\n   }\n \n-  public void load() {\n+  public final void load() {\n     clear();\n \n     // Ugly workaround before the move to myBatis"
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "protected final <T extends BeanVertex> T getVertex(Class<T> vertexClass, Direction direction) throws IllegalArgumentException {",
        "fixed_code": "protected final <T extends BeanVertex> T getVertex(Class<T> vertexClass, Direction direction) {",
        "patch": "@@ -24,7 +24,7 @@\n \n public abstract class BeanEdge extends BeanElement<Edge, BeanEdge> {\n \n-  protected final <T extends BeanVertex> T getVertex(Class<T> vertexClass, Direction direction) throws IllegalArgumentException {\n+  protected final <T extends BeanVertex> T getVertex(Class<T> vertexClass, Direction direction) {\n     return beanGraph().wrap(element().getVertex(direction), vertexClass);\n   }\n "
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "static abstract class RowProcessor {",
        "fixed_code": "abstract static class RowProcessor {",
        "patch": "@@ -215,7 +215,7 @@ private static void appendInStatement(List<String> values, StringBuilder to) {\n     to.append(\"') \");\n   }\n \n-  static abstract class RowProcessor {\n+  abstract static class RowProcessor {\n     abstract Function sortFieldFunction();\n \n     abstract Ordering sortFieldOrdering(boolean ascending);"
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "public static interface Downloader {",
        "fixed_code": "public interface Downloader {",
        "patch": "@@ -71,7 +71,7 @@ public File get(String filename, String hash) {\n     return null;\n   }\n \n-  public static interface Downloader {\n+  public interface Downloader {\n     void download(String filename, File toFile) throws IOException;\n   }\n "
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "public abstract void setSource(Resource reference, String source) throws DuplicatedSourceException;",
        "fixed_code": "public abstract void setSource(Resource reference, String source);",
        "patch": "@@ -97,7 +97,7 @@ public abstract class SonarIndex implements DirectedGraphAccessor<Resource, Depe\n    * @throws org.sonar.api.resources.DuplicatedSourceException\n    *          if the source has already been set on this resource\n    */\n-  public abstract void setSource(Resource reference, String source) throws DuplicatedSourceException;\n+  public abstract void setSource(Resource reference, String source);\n \n   /**\n    * @return source code associated with a specified resource, <code>null</code> if not available"
    },
    {
        "commit_id": "58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58aec721087a86cd5bd298d217842b3ca2b07bfb",
        "buggy_code": "static interface Context {",
        "fixed_code": "interface Context {",
        "patch": "@@ -33,7 +33,7 @@ enum FileType {\n     SOURCE, TEST\n   }\n \n-  static interface Context {\n+  interface Context {\n     ModuleFileSystem fileSystem();\n     FileType fileType();\n     File sourceDir();"
    },
    {
        "commit_id": "f535f02d56515a571430f7ccb77dcd315e525cbd",
        "commit_message": "Fix unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f535f02d56515a571430f7ccb77dcd315e525cbd",
        "buggy_code": "assertThat(FileUtils.readFileToString(deployedIndex)).isEqualTo(\"my-driver.jar|02B97F7BC37B2B68FC847FCC3FC1C156\");",
        "fixed_code": "assertThat(FileUtils.readFileToString(deployedIndex)).isEqualTo(\"my-driver.jar|02b97f7bc37b2b68fc847fcc3fc1c156\");",
        "patch": "@@ -52,6 +52,6 @@ public void test_deploy() throws Exception {\n     assertThat(deployedIndex).exists();\n     assertThat(deployedFile).exists();\n     assertThat(deployedFile).hasSize(initialDriver.length());\n-    assertThat(FileUtils.readFileToString(deployedIndex)).isEqualTo(\"my-driver.jar|02B97F7BC37B2B68FC847FCC3FC1C156\");\n+    assertThat(FileUtils.readFileToString(deployedIndex)).isEqualTo(\"my-driver.jar|02b97f7bc37b2b68fc847fcc3fc1c156\");\n   }\n }"
    },
    {
        "commit_id": "7a1de48e56dcefa56e13891205c84adbd86da741",
        "commit_message": "SONAR-2501 refactor test API and fix extraction of subgraphs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7a1de48e56dcefa56e13891205c84adbd86da741",
        "buggy_code": "Graph subGraph = SubGraph.extract(component.element(), builder.path());",
        "fixed_code": "Graph subGraph = SubGraph.extract(component.element(), builder.storagePath());",
        "patch": "@@ -52,7 +52,7 @@ public void save() {\n           for (PerspectiveBuilder builder : builders) {\n             Perspective perspective = builder.load(component);\n             if (perspective != null) {\n-              Graph subGraph = SubGraph.extract(component.element(), builder.path());\n+              Graph subGraph = SubGraph.extract(component.element(), builder.storagePath());\n               String data = writer.write(subGraph);\n               mapper.insert(new GraphDto()\n                 .setData(data)"
    },
    {
        "commit_id": "7a1de48e56dcefa56e13891205c84adbd86da741",
        "commit_message": "SONAR-2501 refactor test API and fix extraction of subgraphs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7a1de48e56dcefa56e13891205c84adbd86da741",
        "buggy_code": "public Object[] path() {",
        "fixed_code": "public Object[] storagePath() {",
        "patch": "@@ -56,7 +56,7 @@ public MutableTestPlan create(ComponentVertex component) {\n   }\n \n   @Override\n-  public Object[] path() {\n+  public Object[] storagePath() {\n     return PATH;\n   }\n }"
    },
    {
        "commit_id": "7a1de48e56dcefa56e13891205c84adbd86da741",
        "commit_message": "SONAR-2501 refactor test API and fix extraction of subgraphs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7a1de48e56dcefa56e13891205c84adbd86da741",
        "buggy_code": "public Object[] path() {",
        "fixed_code": "public Object[] storagePath() {",
        "patch": "@@ -56,7 +56,7 @@ public MutableTestable create(ComponentVertex component) {\n   }\n \n   @Override\n-  public Object[] path() {\n+  public Object[] storagePath() {\n     return PATH;\n   }\n }"
    },
    {
        "commit_id": "8d9e20f386991373ffbcad3ab5c784fad3deaf34",
        "commit_message": "SONAR-2501 second step to fix case of Graphson* classes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d9e20f386991373ffbcad3ab5c784fad3deaf34",
        "buggy_code": "public enum GraphonMode {",
        "fixed_code": "public enum GraphsonMode {",
        "patch": "@@ -24,7 +24,7 @@\n  *\n  * @author Stephen Mallette\n  */\n-public enum GraphonMode {\n+public enum GraphsonMode {\n   /**\n    * COMPACT constructs GraphSON on the assumption that all property keys\n    * are fair game for exclusion including _type, _inV, _outV, _label and _id."
    },
    {
        "commit_id": "8d9e20f386991373ffbcad3ab5c784fad3deaf34",
        "commit_message": "SONAR-2501 second step to fix case of Graphson* classes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8d9e20f386991373ffbcad3ab5c784fad3deaf34",
        "buggy_code": "class GraphonTokens {",
        "fixed_code": "class GraphsonTokens {",
        "patch": "@@ -23,7 +23,7 @@\n  * @author Marko A. Rodriguez (http://markorodriguez.com)\n  * @author Stephen Mallette\n  */\n-class GraphonTokens {\n+class GraphsonTokens {\n   public static final String VERTEX = \"vertex\";\n   public static final String EDGE = \"edge\";\n   public static final String _ID = \"_id\";"
    },
    {
        "commit_id": "31680c993557c3cd862005dc073f03412d62cc05",
        "commit_message": "SONAR-2501 first step to fix case of Graphson* classes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31680c993557c3cd862005dc073f03412d62cc05",
        "buggy_code": "public enum GraphSONMode {",
        "fixed_code": "public enum GraphonMode {",
        "patch": "@@ -24,7 +24,7 @@\n  *\n  * @author Stephen Mallette\n  */\n-public enum GraphSONMode {\n+public enum GraphonMode {\n   /**\n    * COMPACT constructs GraphSON on the assumption that all property keys\n    * are fair game for exclusion including _type, _inV, _outV, _label and _id."
    },
    {
        "commit_id": "31680c993557c3cd862005dc073f03412d62cc05",
        "commit_message": "SONAR-2501 first step to fix case of Graphson* classes",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/31680c993557c3cd862005dc073f03412d62cc05",
        "buggy_code": "class GraphSONTokens {",
        "fixed_code": "class GraphonTokens {",
        "patch": "@@ -23,7 +23,7 @@\n  * @author Marko A. Rodriguez (http://markorodriguez.com)\n  * @author Stephen Mallette\n  */\n-class GraphSONTokens {\n+class GraphonTokens {\n   public static final String VERTEX = \"vertex\";\n   public static final String EDGE = \"edge\";\n   public static final String _ID = \"_id\";"
    },
    {
        "commit_id": "3c4b6fb0ef02390e1683587d96f17a408edc6d06",
        "commit_message": "SONAR-2746 Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c4b6fb0ef02390e1683587d96f17a408edc6d06",
        "buggy_code": "assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(5);",
        "fixed_code": "assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(7);",
        "patch": "@@ -26,6 +26,6 @@\n public class EmailNotificationsPluginTest {\n   @Test\n   public void should_get_extensions() {\n-    assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(5);\n+    assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(7);\n   }\n }"
    },
    {
        "commit_id": "3944edc8c87616e7b41daac6beefaa39bb9ce004",
        "commit_message": "SONAR-4069 Refactoring to fix issues with ProjectBuilder",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3944edc8c87616e7b41daac6beefaa39bb9ce004",
        "buggy_code": "ComponentContainer container;",
        "fixed_code": "protected ComponentContainer container;",
        "patch": "@@ -28,7 +28,7 @@\n  */\n public abstract class Module {\n \n-  ComponentContainer container;\n+  protected ComponentContainer container;\n \n   /**\n    * @return this"
    },
    {
        "commit_id": "e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "commit_message": "SONAR-4069 Fix issue with ProjectBuilder extension\n  * ProjectBuilder is now a TaskExtension but with a @RequiresProject to be loaded only when\ntask is executed on a project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "buggy_code": "super(task);",
        "fixed_code": "super(task, false);",
        "patch": "@@ -24,7 +24,7 @@\n public class ProjectLessTaskModule extends AbstractTaskModule {\n \n   public ProjectLessTaskModule(TaskDefinition task) {\n-    super(task);\n+    super(task, false);\n   }\n \n   @Override"
    },
    {
        "commit_id": "e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "commit_message": "SONAR-4069 Fix issue with ProjectBuilder extension\n  * ProjectBuilder is now a TaskExtension but with a @RequiresProject to be loaded only when\ntask is executed on a project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "buggy_code": "super(task);",
        "fixed_code": "super(task, true);",
        "patch": "@@ -28,7 +28,7 @@\n public class ProjectTaskModule extends AbstractTaskModule {\n \n   public ProjectTaskModule(TaskDefinition task) {\n-    super(task);\n+    super(task, true);\n   }\n \n   @Override"
    },
    {
        "commit_id": "e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "commit_message": "SONAR-4069 Fix issue with ProjectBuilder extension\n  * ProjectBuilder is now a TaskExtension but with a @RequiresProject to be loaded only when\ntask is executed on a project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5ee5b9ca0c582bb282e3174e4fc8590a9d2737c",
        "buggy_code": "public interface TaskExtension extends Extension {",
        "fixed_code": "public interface TaskExtension extends Extension, TaskComponent {",
        "patch": "@@ -24,5 +24,5 @@\n  *\n  * @since 3.5\n  */\n-public interface TaskExtension extends Extension {\n+public interface TaskExtension extends Extension, TaskComponent {\n }"
    },
    {
        "commit_id": "40dd5f8f8dd1a78d5b9dd7ebf6d8ea14436f5ee1",
        "commit_message": "SONAR-4069 Fix multi-module projects.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/40dd5f8f8dd1a78d5b9dd7ebf6d8ea14436f5ee1",
        "buggy_code": "ProjectModule projectModule = new ProjectModule(rootProject);",
        "fixed_code": "ProjectModule projectModule = new ProjectModule(project);",
        "patch": "@@ -53,7 +53,7 @@ private void analyze(Project project) {\n       analyze(subProject);\n     }\n \n-    ProjectModule projectModule = new ProjectModule(rootProject);\n+    ProjectModule projectModule = new ProjectModule(project);\n     try {\n       installChild(projectModule);\n       projectModule.start();"
    },
    {
        "commit_id": "f478e8f0db76bca44e626e6eb9bdf0e002523fb0",
        "commit_message": "SONAR-3825 fix sorting on variations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f478e8f0db76bca44e626e6eb9bdf0e002523fb0",
        "buggy_code": "if (filter.sort().getPeriod() != null && filter.sort().getPeriod() < 1) {",
        "fixed_code": "if (filter.sort().period() != null && filter.sort().period() < 1) {",
        "patch": "@@ -106,7 +106,7 @@ private static boolean validateMeasureConditions(MeasureFilter filter) {\n \n   private static boolean validateSort(MeasureFilter filter) {\n     boolean valid = true;\n-    if (filter.sort().getPeriod() != null && filter.sort().getPeriod() < 1) {\n+    if (filter.sort().period() != null && filter.sort().period() < 1) {\n       valid = false;\n     }\n     if (filter.sort().onMeasures() && filter.sort().metric() == null) {"
    },
    {
        "commit_id": "747e52172260bb174fbfecb8f7248e488920c85a",
        "commit_message": "Fix backward-compatibility of db migration with 3.4 milestone 5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/747e52172260bb174fbfecb8f7248e488920c85a",
        "buggy_code": "public static final int LAST_VERSION = 361;",
        "fixed_code": "public static final int LAST_VERSION = 362;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 361;\n+  public static final int LAST_VERSION = 362;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "b951a180f8f247d809ba4358d409460192c67416",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b951a180f8f247d809ba4358d409460192c67416",
        "buggy_code": "super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/actionPlans/action_plans.html.erb\");",
        "fixed_code": "super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/action_plans.html.erb\");",
        "patch": "@@ -24,6 +24,6 @@\n @WidgetCategory({\"Action plans\", \"Reviews\"})\n public class ActionPlansWidget extends CoreWidget {\n   public ActionPlansWidget() {\n-    super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/actionPlans/action_plans.html.erb\");\n+    super(\"action_plans\", \"Action plans\", \"/org/sonar/plugins/core/widgets/action_plans.html.erb\");\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "153aa2fa65b7f76a62e22bc22d6c4344bb0a4987",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/153aa2fa65b7f76a62e22bc22d6c4344bb0a4987",
        "buggy_code": "if (key.equals(\"availableForFilters\")) {",
        "fixed_code": "if (\"availableForFilters\".equals(key)) {",
        "patch": "@@ -111,7 +111,7 @@ public Builder setProperty(String key, String value) {\n       properties.put(key, value);\n \n       // for backward-compatibility since version 3.4\n-      if (key.equals(\"availableForFilters\")) {\n+      if (\"availableForFilters\".equals(key)) {\n         properties.put(\"supportsMeasureFilters\", value);\n       }\n       return this;"
    },
    {
        "commit_id": "f09252799644be3b7bb3a852b926386df0c24936",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f09252799644be3b7bb3a852b926386df0c24936",
        "buggy_code": "private class PeriodParameters {",
        "fixed_code": "private static class PeriodParameters {",
        "patch": "@@ -100,7 +100,7 @@ private Locale getLocale() {\n     return Locale.ENGLISH;\n   }\n \n-  private class PeriodParameters {\n+  private static class PeriodParameters {\n \n     private String mode;\n     private String param;"
    },
    {
        "commit_id": "d1a65e8c6cd5c5f3893e706b44e0ae9b7d68702b",
        "commit_message": "Fix treemaps on IE8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d1a65e8c6cd5c5f3893e706b44e0ae9b7d68702b",
        "buggy_code": "@WidgetProperty(key = MeasureFilterTreemapWidget.COLOR_METRIC_PROPERTY, type = WidgetPropertyType.METRIC, optional = true)",
        "fixed_code": "@WidgetProperty(key = MeasureFilterTreemapWidget.COLOR_METRIC_PROPERTY, type = WidgetPropertyType.METRIC, optional = true, options = \"type:PERCENT\")",
        "patch": "@@ -34,7 +34,7 @@\n @WidgetProperties({\n   @WidgetProperty(key = MeasureFilterTreemapWidget.FILTER_PROPERTY, type = WidgetPropertyType.FILTER, optional = false),\n   @WidgetProperty(key = MeasureFilterTreemapWidget.SIZE_METRIC_PROPERTY, type = WidgetPropertyType.METRIC, optional = true),\n-  @WidgetProperty(key = MeasureFilterTreemapWidget.COLOR_METRIC_PROPERTY, type = WidgetPropertyType.METRIC, optional = true)\n+  @WidgetProperty(key = MeasureFilterTreemapWidget.COLOR_METRIC_PROPERTY, type = WidgetPropertyType.METRIC, optional = true, options = \"type:PERCENT\")\n }\n )\n public class MeasureFilterTreemapWidget extends AbstractRubyTemplate implements RubyRailsWidget {"
    },
    {
        "commit_id": "53df3f4abb20e16ba8439991e01562a677cce75e",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53df3f4abb20e16ba8439991e01562a677cce75e",
        "buggy_code": "static class Lock {",
        "fixed_code": "class Lock {",
        "patch": "@@ -57,7 +57,7 @@ public interface DatabaseSemaphore extends BatchComponent, ServerComponent {\n    */\n   void release(String name);\n \n-  static class Lock {\n+  class Lock {\n \n     private String name;\n     private boolean acquired;"
    },
    {
        "commit_id": "9c573f1b661e4a7c75c086c2aa376dcd436dd48b",
        "commit_message": "SONAR-3862 Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9c573f1b661e4a7c75c086c2aa376dcd436dd48b",
        "buggy_code": "if (!children.contains(type)) {",
        "fixed_code": "if (!children.contains(type.getQualifier())) {",
        "patch": "@@ -106,7 +106,7 @@ public Builder addRelations(String parentQualifier, String... childrenQualifiers\n     public ResourceTypeTree build() {\n       Collection<String> children = relations.values();\n       for (ResourceType type : types) {\n-        if (!children.contains(type)) {\n+        if (!children.contains(type.getQualifier())) {\n           root = type;\n           break;\n         }"
    },
    {
        "commit_id": "404437827385fa720792e9661552b5be6a7e5567",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/404437827385fa720792e9661552b5be6a7e5567",
        "buggy_code": "byte[] database = localDatabaseFactory.createDatabaseForDryRun(1);",
        "fixed_code": "byte[] database = localDatabaseFactory.createDatabaseForDryRun();",
        "patch": "@@ -63,7 +63,7 @@ public void should_create_database() throws IOException, SQLException {\n \n     when(serverFileSystem.getTempDir()).thenReturn(temporaryFolder.getRoot());\n \n-    byte[] database = localDatabaseFactory.createDatabaseForDryRun(1);\n+    byte[] database = localDatabaseFactory.createDatabaseForDryRun();\n     dataSource = createDatabase(database);\n \n     assertThat(rowCount(\"metrics\")).isEqualTo(2);"
    },
    {
        "commit_id": "fe5e5d0c6c9e0629469df039d0a1b65c505a2f7d",
        "commit_message": "SONAR-3306 Improve unit test to fix issue on it-sonar-persistence tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe5e5d0c6c9e0629469df039d0a1b65c505a2f7d",
        "buggy_code": "SemaphoreDto semaphore = dao.selectSemaphore(\"foo\", getMyBatis().openSession());",
        "fixed_code": "SemaphoreDto semaphore = selectSemaphore(\"foo\");",
        "patch": "@@ -190,7 +190,7 @@ public void fail_to_acquire_locked_semaphore_when_no_timeout() throws Exception\n   public void should_select_semaphore_return_current_semaphore_when_acquiring() throws Exception {\n     dao.acquire(\"foo\");\n \n-    SemaphoreDto semaphore = dao.selectSemaphore(\"foo\", getMyBatis().openSession());\n+    SemaphoreDto semaphore = selectSemaphore(\"foo\");\n     assertThat(semaphore).isNotNull();\n     assertThat(semaphore.getName()).isEqualTo(\"foo\");\n     assertThat(semaphore.getCreatedAt()).isNotNull();"
    },
    {
        "commit_id": "a38602149510e58a7f2421faa02327feb8236396",
        "commit_message": "SONAR-3825 fix loading of qualifiers in the form",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a38602149510e58a7f2421faa02327feb8236396",
        "buggy_code": "return input != null && input.getBooleanProperty(\"availableForFilters\");",
        "fixed_code": "return input != null && input.getBooleanProperty(\"supports_measure_filters\");",
        "patch": "@@ -45,7 +45,7 @@ public final class ResourceTypes implements BatchComponent, ServerComponent {\n \n   public static final Predicate<ResourceType> AVAILABLE_FOR_FILTERS = new Predicate<ResourceType>() {\n     public boolean apply(@Nullable ResourceType input) {\n-      return input != null && input.getBooleanProperty(\"availableForFilters\");\n+      return input != null && input.getBooleanProperty(\"supports_measure_filters\");\n     }\n   };\n "
    },
    {
        "commit_id": "8813b58b3301c8baaa386e67e49ab05922d93477",
        "commit_message": "Fix build",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8813b58b3301c8baaa386e67e49ab05922d93477",
        "buggy_code": "container.addSingleton(mock(BatchSettings.class));",
        "fixed_code": "container.addSingleton(new BatchSettings());",
        "patch": "@@ -56,7 +56,7 @@ protected void configure() {\n         container.addSingleton(extensionInstaller);\n         container.addSingleton(projectTree);\n         container.addSingleton(resourcePersister);\n-        container.addSingleton(mock(BatchSettings.class));\n+        container.addSingleton(new BatchSettings());\n       }\n     };\n "
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BATCH)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -27,7 +27,7 @@\n import org.sonar.api.resources.ResourceType;\n import org.sonar.api.resources.ResourceTypeTree;\n \n-@InstantiationStrategy(InstantiationStrategy.BATCH)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public final class DefaultResourceTypes extends ExtensionProvider implements BatchExtension, ServerExtension {\n   @Override\n   public ResourceTypeTree provide() {"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "if (InstantiationStrategy.PROJECT.equals(instantiationStrategy) && ExtensionUtils.isMavenExtensionOnly(extension)) {",
        "fixed_code": "if (InstantiationStrategy.PER_PROJECT.equals(instantiationStrategy) && ExtensionUtils.isMavenExtensionOnly(extension)) {",
        "patch": "@@ -98,7 +98,7 @@ boolean installExtension(ComponentContainer container, @Nullable PluginMetadata\n    * Example : C# plugin adds sub-projects at runtime, even if they are not defined in root pom.\n    */\n   static boolean isMavenExtensionOnEmulatedMavenProject(Object extension, String instantiationStrategy, ComponentContainer container) {\n-    if (InstantiationStrategy.PROJECT.equals(instantiationStrategy) && ExtensionUtils.isMavenExtensionOnly(extension)) {\n+    if (InstantiationStrategy.PER_PROJECT.equals(instantiationStrategy) && ExtensionUtils.isMavenExtensionOnly(extension)) {\n       Project project = container.getComponentByType(Project.class);\n       return project!=null && project.getPom()==null;\n     }"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BATCH)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -30,7 +30,7 @@\n \n import java.util.List;\n \n-@InstantiationStrategy(InstantiationStrategy.BATCH)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public class MetricProvider extends ExtensionProvider implements BatchExtension {\n \n   private Metrics[] factories;"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "verify(extensionInstaller).install(any(ComponentContainer.class), eq(InstantiationStrategy.BATCH));",
        "fixed_code": "verify(extensionInstaller).install(any(ComponentContainer.class), eq(InstantiationStrategy.PER_BATCH));",
        "patch": "@@ -44,7 +44,7 @@ protected void configure() {\n     BatchModule module = new BatchModule();\n     bootstrapModule.installChild(module);\n \n-    verify(extensionInstaller).install(any(ComponentContainer.class), eq(InstantiationStrategy.BATCH));\n+    verify(extensionInstaller).install(any(ComponentContainer.class), eq(InstantiationStrategy.PER_BATCH));\n     assertThat(module.container.getComponentByType(MetricProvider.class)).isNotNull();\n   }\n }"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BOOTSTRAP)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -34,7 +34,7 @@\n  *\n  * @since 2.9\n  */\n-@InstantiationStrategy(InstantiationStrategy.BOOTSTRAP)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public abstract class ProjectBuilder implements BatchExtension {\n \n   private ProjectReactor reactor;"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BATCH)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -35,7 +35,7 @@\n  */\n @Table(name = \"metrics\")\n @Entity(name = \"Metric\")\n-@InstantiationStrategy(InstantiationStrategy.BATCH)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public class Metric implements ServerExtension, BatchExtension {\n \n   /**"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BATCH)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -28,7 +28,7 @@\n /**\n  * @since 1.10\n  */\n-@InstantiationStrategy(InstantiationStrategy.BATCH)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public interface Metrics extends BatchExtension, ServerExtension {\n   List<Metric> getMetrics();\n }"
    },
    {
        "commit_id": "8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "commit_message": "SONAR-3895 fix compatibility of dry-run mode with ProjectBuilder extensions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8bccd3cd3d8ae636a070fc325e38a45d7fdd8438",
        "buggy_code": "@InstantiationStrategy(InstantiationStrategy.BATCH)",
        "fixed_code": "@InstantiationStrategy(InstantiationStrategy.PER_BATCH)",
        "patch": "@@ -36,7 +36,7 @@\n  */\n @Beta\n @Immutable\n-@InstantiationStrategy(InstantiationStrategy.BATCH)\n+@InstantiationStrategy(InstantiationStrategy.PER_BATCH)\n public final class ResourceTypeTree implements BatchExtension, ServerExtension {\n \n   private List<ResourceType> types;"
    },
    {
        "commit_id": "5c8d43bc7610a4ab89b870954871ca54b67a2cca",
        "commit_message": "SONAR-3907 fix compatibility with postgresql 8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5c8d43bc7610a4ab89b870954871ca54b67a2cca",
        "buggy_code": "sql.append(\"SELECT block.id, max(block.rid) rid, max(block.rootid) rootid, max(sortval) sortval\");",
        "fixed_code": "sql.append(\"SELECT block.id, max(block.rid) as rid, max(block.rootid) as rootid, max(sortval) as sortval\");",
        "patch": "@@ -76,7 +76,7 @@ String sql() {\n   }\n \n   private void init() {\n-    sql.append(\"SELECT block.id, max(block.rid) rid, max(block.rootid) rootid, max(sortval) sortval\");\n+    sql.append(\"SELECT block.id, max(block.rid) as rid, max(block.rootid) as rootid, max(sortval) as sortval\");\n     for (int index = 0; index < filter.getMeasureConditions().size(); index++) {\n       sql.append(\", max(crit_\").append(index).append(\")\");\n     }"
    },
    {
        "commit_id": "73ae841b1d90ca0d51fc2d27ec3f9b235c75dd61",
        "commit_message": "Fix backward compatibility with org.sonar.batch.ServerMetadata",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/73ae841b1d90ca0d51fc2d27ec3f9b235c75dd61",
        "buggy_code": "public BootstrapSettings load() {",
        "fixed_code": "private BootstrapSettings load() {",
        "patch": "@@ -39,7 +39,7 @@ public BootstrapSettings(PropertyDefinitions propertyDefinitions, ProjectReactor\n     load();\n   }\n \n-  public BootstrapSettings load() {\n+  private BootstrapSettings load() {\n     clear();\n \n     // order is important -> bottom-up. The last one overrides all the others."
    },
    {
        "commit_id": "f7a628ba80b14f5ae3a61853b7a04eca7178755f",
        "commit_message": "SONAR-3895 remove unused code and fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7a628ba80b14f5ae3a61853b7a04eca7178755f",
        "buggy_code": "List<String> driverNames = (List<String>) obj.getClass().getMethod(\"clearJdbcDriverRegistrations\").invoke(obj);",
        "fixed_code": "List<String> driverNames = (List<String>) obj.getClass().getMethod(\"unregisterDrivers\").invoke(obj);",
        "patch": "@@ -139,7 +139,7 @@ public void clearReferencesJdbc() {\n         Class<?> lpClass = defineClass(\"org.sonar.batch.bootstrap.JdbcLeakPrevention\", classBytes, 0, offset, this.getClass().getProtectionDomain());\n         Object obj = lpClass.newInstance();\n \n-        List<String> driverNames = (List<String>) obj.getClass().getMethod(\"clearJdbcDriverRegistrations\").invoke(obj);\n+        List<String> driverNames = (List<String>) obj.getClass().getMethod(\"unregisterDrivers\").invoke(obj);\n \n         for (String name : driverNames) {\n           LOG.debug(\"To prevent a memory leak, the JDBC Driver [{}] has been forcibly deregistered\", name);"
    },
    {
        "commit_id": "f7a628ba80b14f5ae3a61853b7a04eca7178755f",
        "commit_message": "SONAR-3895 remove unused code and fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7a628ba80b14f5ae3a61853b7a04eca7178755f",
        "buggy_code": "public final class ProjectDefinition {",
        "fixed_code": "public class ProjectDefinition {",
        "patch": "@@ -34,7 +34,7 @@\n  *\n  * @since 2.9\n  */\n-public final class ProjectDefinition {\n+public class ProjectDefinition {\n \n   public static final String SOURCE_DIRS_PROPERTY = \"sonar.sources\";\n   public static final String SOURCE_FILES_PROPERTY = \"sonar.sourceFiles\";"
    },
    {
        "commit_id": "8a8788fb4e8eb083935fdca81884f21fb443d6a4",
        "commit_message": "Fix quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8a8788fb4e8eb083935fdca81884f21fb443d6a4",
        "buggy_code": "public static <MODEL extends Model> Unmarshaller<MODEL> forModel(Class<MODEL> modelClass) {",
        "fixed_code": "public static <M extends Model> Unmarshaller<M> forModel(Class<M> modelClass) {",
        "patch": "@@ -70,7 +70,7 @@ private Unmarshallers() {\n     unmarshallers.put(Authentication.class, new AuthenticationUnmarshaller());\n   }\n \n-  public static <MODEL extends Model> Unmarshaller<MODEL> forModel(Class<MODEL> modelClass) {\n+  public static <M extends Model> Unmarshaller<M> forModel(Class<M> modelClass) {\n     return unmarshallers.get(modelClass);\n   }\n }"
    },
    {
        "commit_id": "0aaf2941ee812b63c7f84b357586ecfba9853b15",
        "commit_message": "SONAR-3887 fix MySQL compatibility",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aaf2941ee812b63c7f84b357586ecfba9853b15",
        "buggy_code": "int initialize(@Param(\"name\") String name, @Param(\"lockedAt\") Date lockedAt);",
        "fixed_code": "int initialize(SemaphoreDto semaphore);",
        "patch": "@@ -25,7 +25,7 @@\n \n public interface SemaphoreMapper {\n \n-  int initialize(@Param(\"name\") String name, @Param(\"lockedAt\") Date lockedAt);\n+  int initialize(SemaphoreDto semaphore);\n \n   int acquire(@Param(\"name\") String name, @Param(\"lockedBefore\") Date lockedBefore);\n "
    },
    {
        "commit_id": "7c3bda2872be16a28df497a3565063d1a97ca929",
        "commit_message": "Fix test on MSWindows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7c3bda2872be16a28df497a3565063d1a97ca929",
        "buggy_code": "assertThat(log).contains(workDir.getCanonicalPath());",
        "fixed_code": "assertThat(log).contains(workDir.getAbsolutePath());",
        "patch": "@@ -117,7 +117,7 @@ public void should_use_working_directory_to_store_argument_and_environment_varia\n     File logFile = new File(workDir, \"echo.log\");\n     assertThat(logFile).exists();\n     String log = FileUtils.readFileToString(logFile);\n-    assertThat(log).contains(workDir.getCanonicalPath());\n+    assertThat(log).contains(workDir.getAbsolutePath());\n     assertThat(log).contains(\"Parameter: 1\");\n     assertThat(log).contains(\"Environment variable: 2\");\n   }"
    },
    {
        "commit_id": "2295e6131a920023467dba0b3ea730f2f494c9c2",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2295e6131a920023467dba0b3ea730f2f494c9c2",
        "buggy_code": "throw new RuntimeException(e);",
        "fixed_code": "throw new IllegalStateException(e);",
        "patch": "@@ -45,7 +45,7 @@ public String encodeUrl(String url) {\n       return URLEncoder.encode(url, \"UTF-8\");\n \n     } catch (UnsupportedEncodingException e) {\n-      throw new RuntimeException(e);\n+      throw new IllegalStateException(e);\n     }\n   }\n "
    },
    {
        "commit_id": "14e81abf83cff0f76b7cc38131d7991f9afae0b3",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14e81abf83cff0f76b7cc38131d7991f9afae0b3",
        "buggy_code": "assertThat(command.toCommandLine()).isEqualTo(\"cmd /C foo.bat\");",
        "fixed_code": "assertThat(command.toCommandLine()).isEqualTo(\"cmd /C call foo.bat\");",
        "patch": "@@ -92,7 +92,7 @@ public void should_use_new_shell() {\n     if (SystemUtils.IS_OS_WINDOWS) {\n       Command command = Command.create(\"foo.bat\");\n       command.setNewShell(true);\n-      assertThat(command.toCommandLine()).isEqualTo(\"cmd /C foo.bat\");\n+      assertThat(command.toCommandLine()).isEqualTo(\"cmd /C call foo.bat\");\n       assertThat(command.isNewShell()).isTrue();\n     } else {\n       Command command = Command.create(\"foo.sh\");"
    },
    {
        "commit_id": "abf9afb8e5bb3fc70665e315ebd8a18548cdf07c",
        "commit_message": "SONAR-3758 Add logs and SONAR-1078 Fix default test exclusions",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abf9afb8e5bb3fc70665e315ebd8a18548cdf07c",
        "buggy_code": "defaultValue = \"**/package-info.java\"),",
        "fixed_code": "defaultValue = CoreProperties.GLOBAL_TEST_EXCLUSIONS_DEFAULT),",
        "patch": "@@ -186,7 +186,7 @@\n     description = \"Exclude tests from code analysis. Applies to every project. Cannot be overriden. Changes will be applied during next code analysis.\",\n     multiValues = true,\n     category = CoreProperties.CATEGORY_EXCLUSIONS,\n-    defaultValue = \"**/package-info.java\"),\n+    defaultValue = CoreProperties.GLOBAL_TEST_EXCLUSIONS_DEFAULT),\n   @Property(\n     key = CoreProperties.PROJECT_EXCLUSIONS_PROPERTY,\n     name = \"Exclusions\","
    },
    {
        "commit_id": "05878a9361d89e086c4ec3e2b2ebd0de0761f0a2",
        "commit_message": "SONAR-3765 Better fix",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05878a9361d89e086c4ec3e2b2ebd0de0761f0a2",
        "buggy_code": "super(ID, \"h2\", \"org.h2.Driver\", \"true\", \"false\", \"SELECT 1\");",
        "fixed_code": "super(ID, \".h2.\", \"org.h2.Driver\", \"true\", \"false\", \"SELECT 1\");",
        "patch": "@@ -30,7 +30,7 @@ public class H2 extends AbstractDialect {\n   public static final String ID = \"h2\";\n \n   public H2() {\n-    super(ID, \"h2\", \"org.h2.Driver\", \"true\", \"false\", \"SELECT 1\");\n+    super(ID, \".h2.\", \"org.h2.Driver\", \"true\", \"false\", \"SELECT 1\");\n   }\n \n   public Class<? extends org.hibernate.dialect.Dialect> getHibernateDialectClass() {"
    },
    {
        "commit_id": "05878a9361d89e086c4ec3e2b2ebd0de0761f0a2",
        "commit_message": "SONAR-3765 Better fix",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/05878a9361d89e086c4ec3e2b2ebd0de0761f0a2",
        "buggy_code": "assertThat(h2.getActiveRecordDialectCode()).isEqualTo(\"h2\");",
        "fixed_code": "assertThat(h2.getActiveRecordDialectCode()).isEqualTo(\".h2.\");",
        "patch": "@@ -42,7 +42,7 @@ public void testBooleanSqlValues() {\n   @Test\n   public void should_configure() {\n     assertThat(h2.getId()).isEqualTo(\"h2\");\n-    assertThat(h2.getActiveRecordDialectCode()).isEqualTo(\"h2\");\n+    assertThat(h2.getActiveRecordDialectCode()).isEqualTo(\".h2.\");\n     assertThat(h2.getDefaultDriverClassName()).isEqualTo(\"org.h2.Driver\");\n     assertThat(h2.getValidationQuery()).isEqualTo(\"SELECT 1\");\n   }"
    },
    {
        "commit_id": "4939a71b7d8a97e2bda14649c8381e3a983b0f25",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4939a71b7d8a97e2bda14649c8381e3a983b0f25",
        "buggy_code": "+ \" This error may be due to an inefficient use of alternations - see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5050507\");",
        "fixed_code": "+ \" This error may be due to an inefficient use of alternations - see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5050507\", e);",
        "patch": "@@ -194,7 +194,7 @@ public final int popTo(Matcher matcher, Matcher afterMatcher, Appendable appenda\n       throw new ChannelException(\"Unable to apply regular expression '\" + matcher.pattern().pattern()\n           + \"' at line \" + getCursor().getLine() + \" and column \" + getCursor().getColumn()\n           + \", because it led to a stack overflow error.\"\n-          + \" This error may be due to an inefficient use of alternations - see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5050507\");\n+          + \" This error may be due to an inefficient use of alternations - see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5050507\", e);\n     } catch (IndexOutOfBoundsException e) {\n       return -1;\n     } catch (IOException e) {"
    },
    {
        "commit_id": "4939a71b7d8a97e2bda14649c8381e3a983b0f25",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4939a71b7d8a97e2bda14649c8381e3a983b0f25",
        "buggy_code": "public void test() {",
        "fixed_code": "public void testStackOverflowError() {",
        "patch": "@@ -101,7 +101,7 @@ public void testPopToWithRegex() {\n   }\n \n   @Test\n-  public void test() {\n+  public void testStackOverflowError() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"\\n\");\n     for (int i = 0; i < 10000; i++) {"
    },
    {
        "commit_id": "424a818ede8e8f782bc125021e93b2786d0e4088",
        "commit_message": "Fix violation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/424a818ede8e8f782bc125021e93b2786d0e4088",
        "buggy_code": "private final static Integer DEFAULT_PRIORITY = Priorities.NORMAL_PRIORITY;",
        "fixed_code": "private static final Integer DEFAULT_PRIORITY = Priorities.NORMAL_PRIORITY;",
        "patch": "@@ -72,7 +72,7 @@ public class FindbugsExecutor implements BatchExtension {\n     priorityNameToValueMap.put(\"low\", (Priorities.LOW_PRIORITY));\n     priorityNameToValueMap.put(\"experimental\", (Priorities.EXP_PRIORITY));\n   }\n-  private final static Integer DEFAULT_PRIORITY = Priorities.NORMAL_PRIORITY;\n+  private static final Integer DEFAULT_PRIORITY = Priorities.NORMAL_PRIORITY;\n \n   private FindbugsConfiguration configuration;\n "
    },
    {
        "commit_id": "e5fd63c9312d4f7209c09f038d8e98d9c29479e5",
        "commit_message": "Fix quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e5fd63c9312d4f7209c09f038d8e98d9c29479e5",
        "buggy_code": "return decorations;",
        "fixed_code": "return decorations;//NOSONAR expose internal representation",
        "patch": "@@ -41,6 +41,6 @@ public PageDecorations() {\n   }\n \n   public PageDecoration[] get() {\n-    return decorations;\n+    return decorations;//NOSONAR expose internal representation\n   }\n }"
    },
    {
        "commit_id": "7e44abab607e2e4ef509074a064261bd245b3dd3",
        "commit_message": "SONAR-3542 force activerecord to use the connection pool on oracle\n\n# remove oracle_enhanced adapter.\n# fix some date/time issues with activerecord-jdbc-adapter\n# fix db migrations that forget to set name of indexes\n# add enforcer to not forget to set index name in the method add_index()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e44abab607e2e4ef509074a064261bd245b3dd3",
        "buggy_code": "super(ID, \"oracle\", \"oracle_enhanced\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");",
        "fixed_code": "super(ID, \"oracle\", \"jdbc\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");",
        "patch": "@@ -33,7 +33,7 @@ public class Oracle extends AbstractDialect {\n   public static final String ID = \"oracle\";\n \n   public Oracle() {\n-    super(ID, \"oracle\", \"oracle_enhanced\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");\n+    super(ID, \"oracle\", \"jdbc\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");\n   }\n \n   public Class<? extends org.hibernate.dialect.Dialect> getHibernateDialectClass() {"
    },
    {
        "commit_id": "7e44abab607e2e4ef509074a064261bd245b3dd3",
        "commit_message": "SONAR-3542 force activerecord to use the connection pool on oracle\n\n# remove oracle_enhanced adapter.\n# fix some date/time issues with activerecord-jdbc-adapter\n# fix db migrations that forget to set name of indexes\n# add enforcer to not forget to set index name in the method add_index()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e44abab607e2e4ef509074a064261bd245b3dd3",
        "buggy_code": "assertThat(oracle.getActiveRecordJdbcAdapter()).isEqualTo(\"oracle_enhanced\");",
        "fixed_code": "assertThat(oracle.getActiveRecordJdbcAdapter()).isEqualTo(\"jdbc\");",
        "patch": "@@ -58,7 +58,7 @@ public void testBooleanSqlValues() {\n   public void should_configure() {\n     assertThat(oracle.getId()).isEqualTo(\"oracle\");\n     assertThat(oracle.getActiveRecordDialectCode()).isEqualTo(\"oracle\");\n-    assertThat(oracle.getActiveRecordJdbcAdapter()).isEqualTo(\"oracle_enhanced\");\n+    assertThat(oracle.getActiveRecordJdbcAdapter()).isEqualTo(\"jdbc\");\n     assertThat(oracle.getDefaultDriverClassName()).isEqualTo(\"oracle.jdbc.OracleDriver\");\n     assertThat(oracle.getValidationQuery()).isEqualTo(\"SELECT 1 FROM DUAL\");\n   }"
    },
    {
        "commit_id": "15dbe01585a9d498d55bc877b1c0232608972e13",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/15dbe01585a9d498d55bc877b1c0232608972e13",
        "buggy_code": "JaCoCoUtils.LOG.info(\"Project coverage is set to 0% as build output directory doesn't exists: {}\", buildOutputDir);",
        "fixed_code": "JaCoCoUtils.LOG.info(\"Project coverage is set to 0% as build output directory does not exist: {}\", buildOutputDir);",
        "patch": "@@ -49,7 +49,7 @@ public abstract class AbstractAnalyzer {\n   public final void analyse(Project project, SensorContext context) {\n     final File buildOutputDir = project.getFileSystem().getBuildOutputDir();\n     if (!buildOutputDir.exists()) {\n-      JaCoCoUtils.LOG.info(\"Project coverage is set to 0% as build output directory doesn't exists: {}\", buildOutputDir);\n+      JaCoCoUtils.LOG.info(\"Project coverage is set to 0% as build output directory does not exist: {}\", buildOutputDir);\n       return;\n     }\n     String path = getReportPath(project);"
    },
    {
        "commit_id": "7cd84ab05c0610c9faea163be591a64c61958cae",
        "commit_message": "Fix Oracle ActiveRecord adapter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7cd84ab05c0610c9faea163be591a64c61958cae",
        "buggy_code": "super(ID, \"oracle\", \"oracle\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");",
        "fixed_code": "super(ID, \"oracle\", \"oracle_enhanced\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");",
        "patch": "@@ -33,7 +33,7 @@ public class Oracle extends AbstractDialect {\n   public static final String ID = \"oracle\";\n \n   public Oracle() {\n-    super(ID, \"oracle\", \"oracle\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");\n+    super(ID, \"oracle\", \"oracle_enhanced\", \"oracle.jdbc.OracleDriver\", \"1\", \"0\", \"SELECT 1 FROM DUAL\");\n   }\n \n   public Class<? extends org.hibernate.dialect.Dialect> getHibernateDialectClass() {"
    },
    {
        "commit_id": "f7f2fb63589f6cba07339bd0ba56f638caa1dfab",
        "commit_message": "Fix violation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f7f2fb63589f6cba07339bd0ba56f638caa1dfab",
        "buggy_code": "class Context {",
        "fixed_code": "final class Context {",
        "patch": "@@ -29,7 +29,7 @@\n  */\n public interface NewUserHandler extends ServerExtension {\n \n-  class Context {\n+  final class Context {\n     private String login;\n     private String name;\n     private String email;"
    },
    {
        "commit_id": "49e0d090313ec7b9f5f28236df7a113e17fc4fd7",
        "commit_message": "Fix violation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49e0d090313ec7b9f5f28236df7a113e17fc4fd7",
        "buggy_code": "public static final class Context {",
        "fixed_code": "class Context {",
        "patch": "@@ -29,7 +29,7 @@\n  */\n public interface NewUserHandler extends ServerExtension {\n \n-  public static final class Context {\n+  class Context {\n     private String login;\n     private String name;\n     private String email;"
    },
    {
        "commit_id": "c483248114cadab291a4a64aa8e8aaeacdbbe610",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c483248114cadab291a4a64aa8e8aaeacdbbe610",
        "buggy_code": "protected List execute(TimeMachineQuery query, boolean selectAllFields, Set<Integer> metricIds) {",
        "fixed_code": "protected List<Object[]> execute(TimeMachineQuery query, boolean selectAllFields, Set<Integer> metricIds) {",
        "patch": "@@ -73,7 +73,7 @@ public List<Object[]> getMeasuresFields(TimeMachineQuery query) {\n     return rows;\n   }\n \n-  protected List execute(TimeMachineQuery query, boolean selectAllFields, Set<Integer> metricIds) {\n+  protected List<Object[]> execute(TimeMachineQuery query, boolean selectAllFields, Set<Integer> metricIds) {\n     Resource resource = query.getResource();\n     if (resource != null && resource.getId() == null) {\n       resource = index.getResource(query.getResource());"
    },
    {
        "commit_id": "c483248114cadab291a4a64aa8e8aaeacdbbe610",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c483248114cadab291a4a64aa8e8aaeacdbbe610",
        "buggy_code": "private void addToPicocontainer(Class classToExpose) {",
        "fixed_code": "private void addToPicocontainer(Class<?> classToExpose) {",
        "patch": "@@ -108,7 +108,7 @@ public SourceProject getProject() {\n     return project;\n   }\n \n-  private void addToPicocontainer(Class classToExpose) {\n+  private void addToPicocontainer(Class<?> classToExpose) {\n     if (pico.getComponent(classToExpose) == null) {\n       pico.addComponent(classToExpose);\n     }"
    },
    {
        "commit_id": "8586c9fc456d84ee7b8dfa9d7a5ef78672ab1a12",
        "commit_message": "SONAR-2496 Fix HQL request that doesn't work on Oracle...",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8586c9fc456d84ee7b8dfa9d7a5ef78672ab1a12",
        "buggy_code": "\" where version!=:version AND version!='' AND resourceId=:resourceId AND status=:status AND qualifier<>:lib order by createdAt desc\";",
        "fixed_code": "\" where version<>:version AND version IS NOT NULL AND resourceId=:resourceId AND status=:status AND qualifier<>:lib order by createdAt desc\";",
        "patch": "@@ -38,7 +38,7 @@ public PastSnapshotFinderByPreviousVersion(DatabaseSession session) {\n \n   PastSnapshot findByPreviousVersion(Snapshot projectSnapshot) {\n     String hql = \"from \" + Snapshot.class.getSimpleName() +\n-      \" where version!=:version AND version!='' AND resourceId=:resourceId AND status=:status AND qualifier<>:lib order by createdAt desc\";\n+      \" where version<>:version AND version IS NOT NULL AND resourceId=:resourceId AND status=:status AND qualifier<>:lib order by createdAt desc\";\n     List<Snapshot> snapshots = session.createQuery(hql)\n         .setParameter(\"version\", projectSnapshot.getVersion())\n         .setParameter(\"resourceId\", projectSnapshot.getResourceId())"
    },
    {
        "commit_id": "69ee1a8389e95db1eebee4e683eb2d11f40e3bdd",
        "commit_message": "Fix measure data not being evicted anymore",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/69ee1a8389e95db1eebee4e683eb2d11f40e3bdd",
        "buggy_code": "void insertData(MeasureModel data);",
        "fixed_code": "void insertData(MeasureData data);",
        "patch": "@@ -22,7 +22,7 @@\n public interface MeasureMapper {\n   void insert(MeasureModel measure);\n \n-  void insertData(MeasureModel data);\n+  void insertData(MeasureData data);\n \n   void deleteData(MeasureModel data);\n "
    },
    {
        "commit_id": "6e904433517be27b849f302730e80b38bf3e0b5a",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6e904433517be27b849f302730e80b38bf3e0b5a",
        "buggy_code": "abstract static class SchemeProcessor implements BatchComponent, ServerComponent {",
        "fixed_code": "abstract static class SchemeProcessor {",
        "patch": "@@ -94,7 +94,7 @@ SchemeProcessor searchForSupportedProcessor(URI uri) {\n     return processor;\n   }\n \n-  abstract static class SchemeProcessor implements BatchComponent, ServerComponent {\n+  abstract static class SchemeProcessor {\n     abstract String[] getSupportedSchemes();\n \n     abstract byte[] readBytes(URI uri);"
    },
    {
        "commit_id": "9f6f69e368d06a0ae064ad9fd6fded06307d0c99",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9f6f69e368d06a0ae064ad9fd6fded06307d0c99",
        "buggy_code": "public static class Builder {",
        "fixed_code": "public static final class Builder {",
        "patch": "@@ -58,7 +58,7 @@ public static Builder builder() {\n       return new Builder();\n     }\n \n-    public static class Builder {\n+    public static final class Builder {\n       private String login;\n       private String name;\n       private String email;"
    },
    {
        "commit_id": "a5c7d63779283abdc46cfd65e19ee1a175568b8b",
        "commit_message": "Fix some quality flaw",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a5c7d63779283abdc46cfd65e19ee1a175568b8b",
        "buggy_code": "public static final class Builder {",
        "fixed_code": "public static class Builder {",
        "patch": "@@ -58,7 +58,7 @@ public static Builder builder() {\n       return new Builder();\n     }\n \n-    public static final class Builder {\n+    public static class Builder {\n       private String login;\n       private String name;\n       private String email;"
    },
    {
        "commit_id": "22c56a89235eaa229af5d88e93bdbc26628a07ec",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/22c56a89235eaa229af5d88e93bdbc26628a07ec",
        "buggy_code": "private final static Map<String, String> TYPE_MAP = typeMapWithDeprecatedValues();",
        "fixed_code": "private static final Map<String, String> TYPE_MAP = typeMapWithDeprecatedValues();",
        "patch": "@@ -49,7 +49,7 @@\n  * @since 2.3\n  */\n public final class XMLRuleParser implements ServerComponent {\n-  private final static Map<String, String> TYPE_MAP = typeMapWithDeprecatedValues();\n+  private static final Map<String, String> TYPE_MAP = typeMapWithDeprecatedValues();\n \n   public List<Rule> parse(File file) {\n     Reader reader = null;"
    },
    {
        "commit_id": "0607151797ad10b8905a85b8345019a35a10959c",
        "commit_message": "Revert \"Fix compatibility with Java 5\"\n\nThis reverts commit d46e36a21f012c4acac4421a3ec5f680a5046e20.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0607151797ad10b8905a85b8345019a35a10959c",
        "buggy_code": "return StringUtils.isNotEmpty(id) && id.charAt(0) == '/';",
        "fixed_code": "return id != null && !id.isEmpty() && id.charAt(0) == '/';",
        "patch": "@@ -210,7 +210,7 @@ public String getId() {\n \n   public boolean isController() {\n     String id = view.getId();\n-    return StringUtils.isNotEmpty(id) && id.charAt(0) == '/';\n+    return id != null && !id.isEmpty() && id.charAt(0) == '/';\n   }\n \n   public String getTitle() {"
    },
    {
        "commit_id": "d46e36a21f012c4acac4421a3ec5f680a5046e20",
        "commit_message": "Fix compatibility with Java 5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d46e36a21f012c4acac4421a3ec5f680a5046e20",
        "buggy_code": "return id != null && !id.isEmpty() && id.charAt(0) == '/';",
        "fixed_code": "return StringUtils.isNotEmpty(id) && id.charAt(0) == '/';",
        "patch": "@@ -210,7 +210,7 @@ public String getId() {\n \n   public boolean isController() {\n     String id = view.getId();\n-    return id != null && !id.isEmpty() && id.charAt(0) == '/';\n+    return StringUtils.isNotEmpty(id) && id.charAt(0) == '/';\n   }\n \n   public String getTitle() {"
    },
    {
        "commit_id": "0f0b5465adb9e247087c97e9e083b1991585565f",
        "commit_message": "Fix bug",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f0b5465adb9e247087c97e9e083b1991585565f",
        "buggy_code": "Server server = Server.createTcpServer(\"-tcpPort\", port, \"-tcpAllowOthers\", \"-ifExists\", \"-baseDir\", dbHome.getAbsolutePath());",
        "fixed_code": "server = Server.createTcpServer(\"-tcpPort\", port, \"-tcpAllowOthers\", \"-ifExists\", \"-baseDir\", dbHome.getAbsolutePath());",
        "patch": "@@ -59,7 +59,7 @@ public void start() {\n     try {\n       createDatabase(dbHome, user, password);\n \n-      Server server = Server.createTcpServer(\"-tcpPort\", port, \"-tcpAllowOthers\", \"-ifExists\", \"-baseDir\", dbHome.getAbsolutePath());\n+      server = Server.createTcpServer(\"-tcpPort\", port, \"-tcpAllowOthers\", \"-ifExists\", \"-baseDir\", dbHome.getAbsolutePath());\n \n       LOG.info(\"Starting embedded database on port \" + server.getPort());\n       server.start();"
    },
    {
        "commit_id": "5813393da3c337c469e89a04692273c0723866e1",
        "commit_message": "SONAR-1608 Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5813393da3c337c469e89a04692273c0723866e1",
        "buggy_code": "assertThat(checkResults.get(\"org.struts:struts-core\")).isEqualTo(\"update_impossible\");",
        "fixed_code": "assertThat(checkResults.get(\"org.struts:struts-core\")).isEqualTo(\"#duplicate_key#\");",
        "patch": "@@ -104,7 +104,7 @@ public void shouldCheckModuleKeysBeforeRenaming() {\n     Map<String, String> checkResults = dao.checkModuleKeysBeforeRenaming(1, \"org.struts\", \"foo\");\n     assertThat(checkResults.size()).isEqualTo(3);\n     assertThat(checkResults.get(\"org.struts:struts\")).isEqualTo(\"foo:struts\");\n-    assertThat(checkResults.get(\"org.struts:struts-core\")).isEqualTo(\"update_impossible\");\n+    assertThat(checkResults.get(\"org.struts:struts-core\")).isEqualTo(\"#duplicate_key#\");\n     assertThat(checkResults.get(\"org.struts:struts-ui\")).isEqualTo(\"foo:struts-ui\");\n   }\n "
    },
    {
        "commit_id": "3c6dd63f2edaf89c1795e0ac97a1373df1ec5843",
        "commit_message": "FIX unused parameter",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3c6dd63f2edaf89c1795e0ac97a1373df1ec5843",
        "buggy_code": "Files.write(\"<FILE CONTENT>\", file, Charsets.UTF_8);",
        "fixed_code": "Files.write(content, file, Charsets.UTF_8);",
        "patch": "@@ -168,7 +168,7 @@ public void should_fail_to_get_input_stream_of_unknown_file() throws IOException\n \n   static void write(String content, File file) throws IOException {\n     file.getParentFile().mkdirs();\n-    Files.write(\"<FILE CONTENT>\", file, Charsets.UTF_8);\n+    Files.write(content, file, Charsets.UTF_8);\n   }\n \n   static String read(InputStream input) throws IOException {"
    },
    {
        "commit_id": "86d584bd2c9f31c033d9a833558fa6a80d614211",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86d584bd2c9f31c033d9a833558fa6a80d614211",
        "buggy_code": "private DefaultServerFileSystem fileSystem;",
        "fixed_code": "private final DefaultServerFileSystem fileSystem;",
        "patch": "@@ -27,7 +27,7 @@\n \n public class JdbcDriverDeployer {\n \n-  private DefaultServerFileSystem fileSystem;\n+  private final DefaultServerFileSystem fileSystem;\n \n   public JdbcDriverDeployer(DefaultServerFileSystem fileSystem) {\n     this.fileSystem = fileSystem;"
    },
    {
        "commit_id": "86d584bd2c9f31c033d9a833558fa6a80d614211",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/86d584bd2c9f31c033d9a833558fa6a80d614211",
        "buggy_code": "private ModelManager manager;",
        "fixed_code": "private final ModelManager manager;",
        "patch": "@@ -24,7 +24,7 @@\n \n public final class RegisterQualityModels {\n \n-  private ModelManager manager;\n+  private final ModelManager manager;\n \n   /**\n    * @param registerRulesBeforeModels used only to be started after the creation of check templates"
    },
    {
        "commit_id": "858b34a0652ce0a819302e69d935a3590b0f0df9",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/858b34a0652ce0a819302e69d935a3590b0f0df9",
        "buggy_code": "public DefaultReview setPropertiesAsString(String s) {",
        "fixed_code": "public DefaultReview setPropertiesAsString(@Nullable String s) {",
        "patch": "@@ -172,7 +172,7 @@ public DefaultReview setProperties(Map<String, String> properties) {\n     return this;\n   }\n \n-  public DefaultReview setPropertiesAsString(String s) {\n+  public DefaultReview setPropertiesAsString(@Nullable String s) {\n     this.properties = (s == null ? null : KeyValueFormat.parse(s));\n     return this;\n   }"
    },
    {
        "commit_id": "2f66634a7ab0cff2eb20f7b32347a35174075334",
        "commit_message": "Cleaner code and fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f66634a7ab0cff2eb20f7b32347a35174075334",
        "buggy_code": "return new ProjectFilter().getName();",
        "fixed_code": "return ProjectFilter.NAME;",
        "patch": "@@ -34,6 +34,6 @@ public String getName() {\n \n   @Override\n   protected String getFilterKey() {\n-    return new ProjectFilter().getName();\n+    return ProjectFilter.NAME;\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "2f66634a7ab0cff2eb20f7b32347a35174075334",
        "commit_message": "Cleaner code and fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2f66634a7ab0cff2eb20f7b32347a35174075334",
        "buggy_code": "return new TreeMapFilter().getName();",
        "fixed_code": "return TreeMapFilter.NAME;",
        "patch": "@@ -34,6 +34,6 @@ public String getName() {\n \n   @Override\n   protected String getFilterKey() {\n-    return new TreeMapFilter().getName();\n+    return TreeMapFilter.NAME;\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "d5ff32e910b970f464b1fadd70fd65809f07e4e2",
        "commit_message": "Fix dashboard name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5ff32e910b970f464b1fadd70fd65809f07e4e2",
        "buggy_code": "return \"My Favourites\";",
        "fixed_code": "return \"My favourites\";",
        "patch": "@@ -30,7 +30,7 @@\n public final class MyFavouritesDashboard extends AbstractFilterDashboard {\n   @Override\n   public String getName() {\n-    return \"My Favourites\";\n+    return \"My favourites\";\n   }\n \n   @Override"
    },
    {
        "commit_id": "d5ff32e910b970f464b1fadd70fd65809f07e4e2",
        "commit_message": "Fix dashboard name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d5ff32e910b970f464b1fadd70fd65809f07e4e2",
        "buggy_code": "assertThat(template.getName()).isEqualTo(\"My Favourites\");",
        "fixed_code": "assertThat(template.getName()).isEqualTo(\"My favourites\");",
        "patch": "@@ -34,7 +34,7 @@ public class MyFavouritesDashboardTest {\n \n   @Test\n   public void should_have_a_name() {\n-    assertThat(template.getName()).isEqualTo(\"My Favourites\");\n+    assertThat(template.getName()).isEqualTo(\"My favourites\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "51051a8ec9d8d78f29f6768d1abc3a19011a8fa3",
        "commit_message": "Fix violation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/51051a8ec9d8d78f29f6768d1abc3a19011a8fa3",
        "buggy_code": "public final String getPropertyKey() {",
        "fixed_code": "public String getPropertyKey() {",
        "patch": "@@ -39,7 +39,7 @@ public HasReviewPropertyCondition(String propertyKey) {\n     this.propertyKey = propertyKey;\n   }\n \n-  public final String getPropertyKey() {\n+  public String getPropertyKey() {\n     return propertyKey;\n   }\n "
    },
    {
        "commit_id": "0f11a1afd7361990b651302c65f58db809ddf5a4",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0f11a1afd7361990b651302c65f58db809ddf5a4",
        "buggy_code": "public class Comment {",
        "fixed_code": "public class Comment implements Cloneable {",
        "patch": "@@ -22,7 +22,7 @@\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n \n-public class Comment {\n+public class Comment implements Cloneable {\n   private String markdownText;\n   private Long userId;\n "
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "return Arrays.asList(BatchService.class, ServerService.class);",
        "fixed_code": "return Arrays.<Object> asList(BatchService.class, ServerService.class);",
        "patch": "@@ -116,7 +116,7 @@ public static class BatchServiceProvider extends ExtensionProvider implements Ba\n \n     @Override\n     public Object provide() {\n-      return Arrays.asList(BatchService.class, ServerService.class);\n+      return Arrays.<Object> asList(BatchService.class, ServerService.class);\n     }\n   }\n "
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "when(remoteServerMetadata.getServerId()).thenThrow(IOException.class);",
        "fixed_code": "when(remoteServerMetadata.getServerId()).thenThrow(new IOException());",
        "patch": "@@ -110,7 +110,7 @@ public void shouldUseDefaultUserNameWhenFaillingIfNotSameServerIdAndNoUserNameFo\n \n   @Test\n   public void shouldFailIfCantGetServerId() throws Exception {\n-    when(remoteServerMetadata.getServerId()).thenThrow(IOException.class);\n+    when(remoteServerMetadata.getServerId()).thenThrow(new IOException());\n \n     thrown.expect(SonarException.class);\n     thrown.expectMessage(\"Impossible to get the ID of the remote server: http://localhost:9000\");"
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "public class Criterion {",
        "fixed_code": "public final class Criterion {",
        "patch": "@@ -29,7 +29,7 @@\n  *\n  * @since 3.1\n  */\n-public class Criterion {\n+public final class Criterion {\n   public static final String EQ = \"=\";\n   public static final String GT = \">\";\n   public static final String GTE = \">=\";"
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "public class Filter {",
        "fixed_code": "public final class Filter {",
        "patch": "@@ -32,7 +32,7 @@\n  *\n  * @since 3.1\n  */\n-public class Filter {\n+public final class Filter {\n   public static final String LIST = \"list\";\n   public static final String TREEMAP = \"treemap\";\n "
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "public class FilterColumn {",
        "fixed_code": "public final class FilterColumn {",
        "patch": "@@ -30,7 +30,7 @@\n  *\n  * @since 3.1\n  */\n-public class FilterColumn {\n+public final class FilterColumn {\n   public static final String ASC = \"ASC\";\n   public static final String DESC = \"DESC\";\n   public static final Set<String> DIRECTIONS = ImmutableSortedSet.of(ASC, DESC);"
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "return Arrays.asList(FakeBatchExtension.class, FakeServerExtension.class);",
        "fixed_code": "return Arrays.<Object> asList(FakeBatchExtension.class, FakeServerExtension.class);",
        "patch": "@@ -149,7 +149,7 @@ public static class FakeExtensionProvider extends ExtensionProvider implements S\n \n     @Override\n     public Object provide() {\n-      return Arrays.asList(FakeBatchExtension.class, FakeServerExtension.class);\n+      return Arrays.<Object> asList(FakeBatchExtension.class, FakeServerExtension.class);\n     }\n   }\n "
    },
    {
        "commit_id": "fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "commit_message": "Fix violations, simplify code and improve documentation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe9e4f3eea867948e25642c24d0ff376907a3f2a",
        "buggy_code": "return Arrays.asList(FakeBatchExtension.class, FakeServerExtension.class);",
        "fixed_code": "return Arrays.<Object> asList(FakeBatchExtension.class, FakeServerExtension.class);",
        "patch": "@@ -88,7 +88,7 @@ public static class FakeExtensionProvider extends ExtensionProvider implements S\n \n     @Override\n     public Object provide() {\n-      return Arrays.asList(FakeBatchExtension.class, FakeServerExtension.class);\n+      return Arrays.<Object> asList(FakeBatchExtension.class, FakeServerExtension.class);\n     }\n   }\n "
    },
    {
        "commit_id": "99e41b12a0200c8495de634f9202aea5edfd1ed4",
        "commit_message": "SONAR-2706 improve error handling on command execution",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/99e41b12a0200c8495de634f9202aea5edfd1ed4",
        "buggy_code": "thrown.expectMessage(\"Conditions are not respected\");",
        "fixed_code": "thrown.expectMessage(\"Condition is not respected: Property foo must be set\");",
        "patch": "@@ -150,7 +150,7 @@ public void execute_conditions_pass() {\n   @Test\n   public void execute_fail_if_conditions_dont_pass() {\n     thrown.expect(IllegalStateException.class);\n-    thrown.expectMessage(\"Conditions are not respected\");\n+    thrown.expectMessage(\"Condition is not respected: Property foo must be set\");\n \n     Workflow workflow = new Workflow();\n     workflow.addCommand(\"resolve\");"
    },
    {
        "commit_id": "58ab1b98fac50c265e2e7e915b94715c8aeed771",
        "commit_message": "Fix minor quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58ab1b98fac50c265e2e7e915b94715c8aeed771",
        "buggy_code": "ImmutableMap<String, String> immutableParameters = ImmutableMap.copyOf(parameters);",
        "fixed_code": "Map<String, String> immutableParameters = ImmutableMap.copyOf(parameters);",
        "patch": "@@ -97,7 +97,7 @@ public void execute(String commandKey, MutableReview review, DefaultWorkflowCont\n \n     Preconditions.checkState(verifyConditions(review, context, workflow.getConditions(commandKey)), \"Conditions are not respected\");\n \n-    ImmutableMap<String, String> immutableParameters = ImmutableMap.copyOf(parameters);\n+    Map<String, String> immutableParameters = ImmutableMap.copyOf(parameters);\n \n     // TODO execute functions are change state before functions that consume state (like \"create-jira-issue\")\n     Review initialReview = ((DefaultReview) review).cloneImmutable();"
    },
    {
        "commit_id": "eca9a9f8c9072ca2f4b1ad9302a6058fa21b3aed",
        "commit_message": "SONAR-2706 Fix test and some issues",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eca9a9f8c9072ca2f4b1ad9302a6058fa21b3aed",
        "buggy_code": "assertThat(reviewDto.getData(), is(action.getId() + \"=FOO-15\"));",
        "fixed_code": "assertThat(reviewDto.getData(), is(\"jira-issue-key=FOO-15\"));",
        "patch": "@@ -95,7 +95,7 @@ public void shouldExecute() throws Exception {\n     ArgumentCaptor<Collection> reviewCaptor = ArgumentCaptor.forClass(Collection.class);\n     verify(reviewDao).update(reviewCaptor.capture());\n     ReviewDto reviewDto = (ReviewDto) reviewCaptor.getValue().iterator().next();\n-    assertThat(reviewDto.getData(), is(action.getId() + \"=FOO-15\"));\n+    assertThat(reviewDto.getData(), is(\"jira-issue-key=FOO-15\"));\n \n   }\n "
    },
    {
        "commit_id": "c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "buggy_code": "private List components;",
        "fixed_code": "private List<Object> components;",
        "patch": "@@ -37,7 +37,7 @@\n public final class Batch {\n \n   private LoggingConfiguration logging;\n-  private List components;\n+  private List<Object> components;\n   private ProjectReactor projectReactor;\n \n   private Batch(Builder builder) {"
    },
    {
        "commit_id": "c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "buggy_code": "when(data.getChildrenMeasures(new Metric(\"foo\"))).thenReturn((List) Collections.emptyList());",
        "fixed_code": "when(data.getChildrenMeasures(new Metric(\"foo\"))).thenReturn(Collections.<Measure> emptyList());",
        "patch": "@@ -60,7 +60,7 @@ public void testWhenGetChildrenReturnsNull() {\n   @Test\n   public void testWhenGetChildrenReturnsEmpty() {\n     when(context.getTargetMetric()).thenReturn(new Metric(\"foo\"));\n-    when(data.getChildrenMeasures(new Metric(\"foo\"))).thenReturn((List) Collections.emptyList());\n+    when(data.getChildrenMeasures(new Metric(\"foo\"))).thenReturn(Collections.<Measure> emptyList());\n     assertNull(formula.calculate(data, context));\n   }\n "
    },
    {
        "commit_id": "c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "commit_message": "Fix warnings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5d1b2b0665adf51abf4a448df7d1555ffed8e20",
        "buggy_code": "this.rows = new ArrayList(rows);",
        "fixed_code": "this.rows = new ArrayList<Object[]>(rows);",
        "patch": "@@ -30,7 +30,7 @@ public class FilterResult {\n   public static final int SORTED_COLUMN_INDEX = 3;\n \n   public FilterResult(Filter filter, List rows) {\n-    this.rows = new ArrayList(rows);\n+    this.rows = new ArrayList<Object[]>(rows);\n     this.filter = filter;\n   }\n "
    },
    {
        "commit_id": "68e826e238d0fc16b06675bedd2f3805c17bc117",
        "commit_message": "SONAR-1927 Add global image widget and fix HelloWorld widget",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/68e826e238d0fc16b06675bedd2f3805c17bc117",
        "buggy_code": "assertThat(dashboard.getWidgets()).onProperty(\"id\").containsOnly(\"global\");",
        "fixed_code": "assertThat(dashboard.getWidgets()).onProperty(\"id\").containsOnly(\"global\", \"image\");",
        "patch": "@@ -34,6 +34,6 @@ public void should_create_dashboard() {\n \n     assertThat(template.getName()).isEqualTo(\"Global\");\n     assertThat(dashboard.getLayout()).isEqualTo(DashboardLayout.ONE_COLUMN);\n-    assertThat(dashboard.getWidgets()).onProperty(\"id\").containsOnly(\"global\");\n+    assertThat(dashboard.getWidgets()).onProperty(\"id\").containsOnly(\"global\", \"image\");\n   }\n }"
    },
    {
        "commit_id": "1ff9677915d04fe5d9131eed029ee013824dcad2",
        "commit_message": "SONAR-1927 Fix default dashboard and widget",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1ff9677915d04fe5d9131eed029ee013824dcad2",
        "buggy_code": "@WidgetCategory(\"Information\")",
        "fixed_code": "@WidgetCategory(\"Beta\")",
        "patch": "@@ -26,7 +26,7 @@\n import org.sonar.api.web.UserRole;\n import org.sonar.api.web.WidgetCategory;\n \n-@WidgetCategory(\"Information\")\n+@WidgetCategory(\"Beta\")\n @WidgetGlobal\n @UserRole(UserRole.USER)\n public class GlobalWidget extends AbstractRubyTemplate implements RubyRailsWidget {"
    },
    {
        "commit_id": "dad9c03d2ff2fceaf0a3933d922c9f8daff62e60",
        "commit_message": "Trying to fix the build on windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dad9c03d2ff2fceaf0a3933d922c9f8daff62e60",
        "buggy_code": "when(fs.writeToWorkingDirectory(matches(\".*[\\r\\n]*<pmd.*[\\r\\n].*</pmd>\"), eq(\"pmd-result.xml\"))).thenReturn(new File(\"/workingDir/pmd-result.xml\"));",
        "fixed_code": "when(fs.writeToWorkingDirectory(matches(\"(?s).*<pmd.*>.*</pmd>\"), eq(\"pmd-result.xml\"))).thenReturn(new File(\"/workingDir/pmd-result.xml\"));",
        "patch": "@@ -90,7 +90,7 @@ public void should_fail_to_dump_xml_rule_set() throws IOException {\n \n   @Test\n   public void should_dump_xml_report() throws IOException {\n-    when(fs.writeToWorkingDirectory(matches(\".*[\\r\\n]*<pmd.*[\\r\\n].*</pmd>\"), eq(\"pmd-result.xml\"))).thenReturn(new File(\"/workingDir/pmd-result.xml\"));\n+    when(fs.writeToWorkingDirectory(matches(\"(?s).*<pmd.*>.*</pmd>\"), eq(\"pmd-result.xml\"))).thenReturn(new File(\"/workingDir/pmd-result.xml\"));\n \n     settings.setProperty(PmdConfiguration.PROPERTY_GENERATE_XML, true);\n     File reportFile = configuration.dumpXmlReport(new Report());"
    },
    {
        "commit_id": "4fa3030add4fa2d5f04da4d82fbb2bc82551d7d1",
        "commit_message": "Fix violation introduced in 1a6a18a5c4e73987a72b8176f398477f13074d29",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4fa3030add4fa2d5f04da4d82fbb2bc82551d7d1",
        "buggy_code": "private static CharMatcher EOLS = CharMatcher.anyOf(\"\\n\\r\");",
        "fixed_code": "private static final CharMatcher EOLS = CharMatcher.anyOf(\"\\n\\r\");",
        "patch": "@@ -26,7 +26,7 @@\n  * Conditions for use with FestAssert.\n  */\n public final class MoreConditions {\n-  private static CharMatcher EOLS = CharMatcher.anyOf(\"\\n\\r\");\n+  private static final CharMatcher EOLS = CharMatcher.anyOf(\"\\n\\r\");\n \n   private MoreConditions() {\n     // static utility class"
    },
    {
        "commit_id": "ebb88505550b103814bacc0660313ab5d8fc2f7e",
        "commit_message": "Fix upgrade from version 2.13 with Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ebb88505550b103814bacc0660313ab5d8fc2f7e",
        "buggy_code": "public static final int LAST_VERSION = 286;",
        "fixed_code": "public static final int LAST_VERSION = 287;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 286;\n+  public static final int LAST_VERSION = 287;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "d0e2c4c943462e91ef2d5e7c814ae161454e1ca6",
        "commit_message": "Fix MyBatis tests for Oracle (PropertiesDaoTest + ResourceIndexerDaoTest)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d0e2c4c943462e91ef2d5e7c814ae161454e1ca6",
        "buggy_code": "checkTables(\"insert\", new String[]{\"id\"}, \"properties\");",
        "fixed_code": "checkTables(\"insert\", \"properties\");",
        "patch": "@@ -91,7 +91,7 @@ public void setProperty_insert() throws Exception {\n     dao.setProperty(new PropertyDto().setKey(\"project.key\").setResourceId(10L).setValue(\"new_project\"));\n     dao.setProperty(new PropertyDto().setKey(\"user.key\").setUserId(100L).setValue(\"new_user\"));\n \n-    checkTables(\"insert\", new String[]{\"id\"}, \"properties\");\n+    checkTables(\"insert\", \"properties\");\n   }\n \n   private PropertyDto findById(List<PropertyDto> properties, int id) {"
    },
    {
        "commit_id": "e15f46a96e862ebf97f2098d049ea35d2437ca37",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e15f46a96e862ebf97f2098d049ea35d2437ca37",
        "buggy_code": "public class HashedSequence<S extends Sequence> implements Sequence {",
        "fixed_code": "public final class HashedSequence<S extends Sequence> implements Sequence {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * Wraps a {@link Sequence} to assign hash codes to elements.\n  */\n-public class HashedSequence<S extends Sequence> implements Sequence {\n+public final class HashedSequence<S extends Sequence> implements Sequence {\n \n   final S base;\n   final int[] hashes;"
    },
    {
        "commit_id": "e7b778f1ff40234f3fd68cb0fc55ae50453330de",
        "commit_message": "Fix compatibility with Java 5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e7b778f1ff40234f3fd68cb0fc55ae50453330de",
        "buggy_code": "return new String(Base64.encodeBase64(cipher.doFinal(clearText.getBytes(Charsets.UTF_8))));",
        "fixed_code": "return new String(Base64.encodeBase64(cipher.doFinal(clearText.getBytes(\"UTF-8\"))));",
        "patch": "@@ -58,7 +58,7 @@ String encrypt(String clearText) {\n     try {\n       javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(CRYPTO_KEY);\n       cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, loadSecretFile());\n-      return new String(Base64.encodeBase64(cipher.doFinal(clearText.getBytes(Charsets.UTF_8))));\n+      return new String(Base64.encodeBase64(cipher.doFinal(clearText.getBytes(\"UTF-8\"))));\n     } catch (Exception e) {\n       throw Throwables.propagate(e);\n     }"
    },
    {
        "commit_id": "2a93969813f040f9072fe261ac94f1c9b65738bb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2a93969813f040f9072fe261ac94f1c9b65738bb",
        "buggy_code": "InputStream stream = getClass().getResourceAsStream(rulesetPath);",
        "fixed_code": "InputStream stream = PmdExecutor.class.getResourceAsStream(rulesetPath);",
        "patch": "@@ -118,7 +118,7 @@ private InputStream openRuleset(String rulesetPath) {\n       if (found) {\n         return new FileInputStream(file);\n       }\n-      InputStream stream = getClass().getResourceAsStream(rulesetPath);\n+      InputStream stream = PmdExecutor.class.getResourceAsStream(rulesetPath);\n       if (stream == null) {\n         throw new SonarException(\"The PMD ruleset can not be found: \" + rulesetPath);\n       }"
    },
    {
        "commit_id": "e563e04cbdce81b04ad09e9ca1212a031846a12a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e563e04cbdce81b04ad09e9ca1212a031846a12a",
        "buggy_code": "throw new RuntimeException(\"The PMD ruleset can not be found: \" + rulesetPath);",
        "fixed_code": "throw new SonarException(\"The PMD ruleset can not be found: \" + rulesetPath);",
        "patch": "@@ -120,7 +120,7 @@ private InputStream openRuleset(String rulesetPath) {\n       }\n       InputStream stream = getClass().getResourceAsStream(rulesetPath);\n       if (stream == null) {\n-        throw new RuntimeException(\"The PMD ruleset can not be found: \" + rulesetPath);\n+        throw new SonarException(\"The PMD ruleset can not be found: \" + rulesetPath);\n       }\n       return stream;\n "
    },
    {
        "commit_id": "e93d3eb4d95d89051eb9ea6f6ab6b8f2f6751487",
        "commit_message": "SONAR-3352 Fix issue linked to nullable boolean columns",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e93d3eb4d95d89051eb9ea6f6ab6b8f2f6751487",
        "buggy_code": "public static final int LAST_VERSION = 280;",
        "fixed_code": "public static final int LAST_VERSION = 281;",
        "patch": "@@ -32,7 +32,7 @@\n  */\n public class DatabaseVersion implements BatchComponent, ServerComponent {\n \n-  public static final int LAST_VERSION = 280;\n+  public static final int LAST_VERSION = 281;\n \n   public static enum Status {\n     UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL"
    },
    {
        "commit_id": "38094d45fcc9abf666dadbee19b7e11b768960b8",
        "commit_message": "SONAR-2084 fix the key of the property sonar.secretKeyPath",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/38094d45fcc9abf666dadbee19b7e11b768960b8",
        "buggy_code": "String ENCRYPTION_SECRET_KEY_FILE = \"sonar.secretKeyFile\";",
        "fixed_code": "String ENCRYPTION_SECRET_KEY_PATH = \"sonar.secretKeyPath\";",
        "patch": "@@ -30,7 +30,7 @@ public interface CoreProperties {\n   /**\n    * @since 2.15\n    */\n-  String ENCRYPTION_SECRET_KEY_FILE = \"sonar.secretKeyFile\";\n+  String ENCRYPTION_SECRET_KEY_PATH = \"sonar.secretKeyPath\";\n \n \n   /**"
    },
    {
        "commit_id": "5d55f72823ad1fac99682c4f9bd2aa91e0ad776a",
        "commit_message": "SONAR-3072 Fix wrong refactoring of ViolationTrackingDecorator",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5d55f72823ad1fac99682c4f9bd2aa91e0ad776a",
        "buggy_code": "if (!context.getViolations(violationQuery).isEmpty()) {",
        "fixed_code": "if (context.getViolations(violationQuery).isEmpty()) {",
        "patch": "@@ -54,7 +54,7 @@ public void decorate(Resource resource, DecoratorContext context) {\n     referenceViolationsMap.clear();\n \n     ViolationQuery violationQuery = ViolationQuery.create().forResource(resource).setSwitchMode(ViolationQuery.SwitchMode.BOTH);\n-    if (!context.getViolations(violationQuery).isEmpty()) {\n+    if (context.getViolations(violationQuery).isEmpty()) {\n       return;\n     }\n "
    },
    {
        "commit_id": "94f0a69457d1ec7f72b1603e5409ace2c6d99b81",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/94f0a69457d1ec7f72b1603e5409ace2c6d99b81",
        "buggy_code": "public static final String[] TABLE_NAMES = {",
        "fixed_code": "static final String[] TABLE_NAMES = {",
        "patch": "@@ -36,7 +36,7 @@ private DatabaseUtils() {\n    * This list is hardcoded because we didn't succeed in using java.sql.DatabaseMetaData#getTables() in the same way\n    * for all the supported databases, particularly due to Oracle results.\n    */\n-  public static final String[] TABLE_NAMES = {\n+  static final String[] TABLE_NAMES = {\n     \"action_plans\",\n     \"action_plans_reviews\",\n     \"active_dashboards\","
    },
    {
        "commit_id": "94f0a69457d1ec7f72b1603e5409ace2c6d99b81",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/94f0a69457d1ec7f72b1603e5409ace2c6d99b81",
        "buggy_code": "} catch (Exception e) {",
        "fixed_code": "} catch (RuntimeException e) {",
        "patch": "@@ -53,7 +53,7 @@ public Integer getVersion() {\n         return versions.get(versions.size() - 1);\n       }\n       return null;\n-    } catch (Exception e) {\n+    } catch (RuntimeException e) {\n       // The table SCHEMA_MIGRATIONS does not exist.\n       // Ignore this exception -> it will be created by Ruby on Rails migrations.\n       return null;"
    },
    {
        "commit_id": "39d5161f8959451117a9063c4470298cf16c89dd",
        "commit_message": "Fix support of dry run mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/39d5161f8959451117a9063c4470298cf16c89dd",
        "buggy_code": "if (!ResourceUtils.isPersistable(resource) || ResourceUtils.isUnitTestClass(resource)) {",
        "fixed_code": "if (!ResourceUtils.isPersistable(resource) || ResourceUtils.isUnitTestClass(resource) || resource.getId()==null) {",
        "patch": "@@ -68,7 +68,7 @@ public Collection<Metric> generatesMetrics() {\n \n   @SuppressWarnings({\"rawtypes\"})\n   public void decorate(Resource resource, DecoratorContext context) {\n-    if (!ResourceUtils.isPersistable(resource) || ResourceUtils.isUnitTestClass(resource)) {\n+    if (!ResourceUtils.isPersistable(resource) || ResourceUtils.isUnitTestClass(resource) || resource.getId()==null) {\n       return;\n     }\n "
    },
    {
        "commit_id": "39d5161f8959451117a9063c4470298cf16c89dd",
        "commit_message": "Fix support of dry run mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/39d5161f8959451117a9063c4470298cf16c89dd",
        "buggy_code": "if (!ResourceUtils.isPersistable(resource)) {",
        "fixed_code": "if (resource.getId()==null) {",
        "patch": "@@ -62,7 +62,7 @@ public Class dependsUponViolationTracking() {\n   }\n \n   public void decorate(Resource resource, DecoratorContext context) {\n-    if (!ResourceUtils.isPersistable(resource)) {\n+    if (resource.getId()==null) {\n       return;\n     }\n     Map<Integer, Violation> violationMap = filterViolationsPerPermanent(context.getViolations());"
    },
    {
        "commit_id": "929f50815d7c0679b34ade1d75024d54dd35d057",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/929f50815d7c0679b34ade1d75024d54dd35d057",
        "buggy_code": "throw new RuntimeException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\");",
        "fixed_code": "throw new IllegalStateException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\", e);",
        "patch": "@@ -132,7 +132,7 @@ private void printReport(File dumpFile, String details) {\n       writer = new FileWriter(dumpFile);\n       writer.write(details);\n     } catch (IOException e) {\n-      throw new RuntimeException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\");\n+      throw new IllegalStateException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\", e);\n     } finally {\n       IOUtils.closeQuietly(writer);\n     }"
    },
    {
        "commit_id": "58d94501900849959346beb5988454122c623470",
        "commit_message": "Fix some typos",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/58d94501900849959346beb5988454122c623470",
        "buggy_code": "assertThat(\"number of leafs\", tree.getNumberOfLeafs(), is(text.length()));",
        "fixed_code": "assertThat(\"number of leaves\", tree.getNumberOfLeafs(), is(text.length()));",
        "patch": "@@ -50,7 +50,7 @@ public void test() {\n     String text = this.data + \"$\";\n     StringSuffixTree tree = StringSuffixTree.create(text);\n \n-    assertThat(\"number of leafs\", tree.getNumberOfLeafs(), is(text.length()));\n+    assertThat(\"number of leaves\", tree.getNumberOfLeafs(), is(text.length()));\n     assertThat(\"number of inner nodes\", tree.getNumberOfInnerNodes(), lessThan(text.length() - 1));\n     assertThat(\"number of edges\", tree.getNumberOfEdges(), is(tree.getNumberOfInnerNodes() + tree.getNumberOfLeafs()));\n "
    },
    {
        "commit_id": "23a25219854d57d811735745104655b81d102a82",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23a25219854d57d811735745104655b81d102a82",
        "buggy_code": "data = new DuplicationsData(resourceKey, context);",
        "fixed_code": "data = new DuplicationsData(resourceKey);",
        "patch": "@@ -92,7 +92,7 @@ private DuplicationsData getDuplicationsData(Map<Resource, DuplicationsData> fil\n     DuplicationsData data = fileContainer.get(file);\n     if (data == null) {\n       String resourceKey = SonarEngine.getFullKey(project, file);\n-      data = new DuplicationsData(resourceKey, context);\n+      data = new DuplicationsData(resourceKey);\n       fileContainer.put(file, data);\n     }\n     return data;"
    },
    {
        "commit_id": "23a25219854d57d811735745104655b81d102a82",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/23a25219854d57d811735745104655b81d102a82",
        "buggy_code": "public DuplicationsData(String resourceKey, SensorContext context) {",
        "fixed_code": "public DuplicationsData(String resourceKey) {",
        "patch": "@@ -39,7 +39,7 @@ public class DuplicationsData {\n \n   private double duplicatedBlocks;\n \n-  public DuplicationsData(String resourceKey, SensorContext context) {\n+  public DuplicationsData(String resourceKey) {\n     this.resourceKey = resourceKey;\n   }\n "
    },
    {
        "commit_id": "726c17ed044d5e23a4ee1465a8a8c487ac1a9646",
        "commit_message": "Add unit tests and fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/726c17ed044d5e23a4ee1465a8a8c487ac1a9646",
        "buggy_code": "this.status = status;",
        "fixed_code": "this.status = status; //NOSONAR org.sonar.core.purge.PurgeSnapshotQuery.setStatus(String[]) may expose internal representation",
        "patch": "@@ -69,7 +69,7 @@ public String[] getStatus() {\n   }\n \n   public PurgeSnapshotQuery setStatus(String[] status) {\n-    this.status = status;\n+    this.status = status; //NOSONAR org.sonar.core.purge.PurgeSnapshotQuery.setStatus(String[]) may expose internal representation\n     return this;\n   }\n "
    },
    {
        "commit_id": "726c17ed044d5e23a4ee1465a8a8c487ac1a9646",
        "commit_message": "Add unit tests and fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/726c17ed044d5e23a4ee1465a8a8c487ac1a9646",
        "buggy_code": "System.out.println(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'.\");",
        "fixed_code": "throw new RuntimeException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\");",
        "patch": "@@ -129,7 +129,7 @@ private void printReport(File dumpFile, String details) {\n       writer = new FileWriter(dumpFile);\n       writer.write(details);\n     } catch (IOException e) {\n-      System.out.println(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'.\");\n+      throw new RuntimeException(\"Unable to write the report to 'target/l10n/\" + bundleName + \".report.txt'\");\n     } finally {\n       IOUtils.closeQuietly(writer);\n     }"
    },
    {
        "commit_id": "4b0854c3e66cd98ab2089c120ea615e9f35c8db9",
        "commit_message": "SONAR-3248 add unit tests and fix deletion of review comments",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4b0854c3e66cd98ab2089c120ea615e9f35c8db9",
        "buggy_code": "assertEmptyTables(\"projects\", \"snapshots\", \"events\");",
        "fixed_code": "assertEmptyTables(\"projects\", \"snapshots\", \"events\", \"reviews\", \"review_comments\");",
        "patch": "@@ -168,7 +168,7 @@ public void shouldDeleteResource() {\n     } finally {\n       MyBatis.closeQuietly(session);\n     }\n-    assertEmptyTables(\"projects\", \"snapshots\", \"events\");\n+    assertEmptyTables(\"projects\", \"snapshots\", \"events\", \"reviews\", \"review_comments\");\n   }\n \n   @Test"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "private final static Map<String, String> FINDBUGS_TO_SONAR = new HashMap<String, String>();",
        "fixed_code": "private static final Map<String, String> FINDBUGS_TO_SONAR = new HashMap<String, String>();",
        "patch": "@@ -23,7 +23,7 @@\n import java.util.Map;\n \n public final class FindbugsCategory {\n-  private final static Map<String, String> FINDBUGS_TO_SONAR = new HashMap<String, String>();\n+  private static final Map<String, String> FINDBUGS_TO_SONAR = new HashMap<String, String>();\n \n   static {\n     FINDBUGS_TO_SONAR.put(\"BAD_PRACTICE\", \"Bad practice\");"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "private static abstract class TaskEnhancer {",
        "fixed_code": "private abstract static class TaskEnhancer {",
        "patch": "@@ -106,7 +106,7 @@ public void enhanceTask(final Task task, final String jvmArg) {\n \n   }\n \n-  private static abstract class TaskEnhancer {\n+  private abstract static class TaskEnhancer {\n     /**\n      * @param task Task instance to enhance\n      * @return <code>true</code> if this enhancer is capable of enhancing the requested task"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "private final static int DOT = '.';",
        "fixed_code": "private static final int DOT = '.';",
        "patch": "@@ -29,7 +29,7 @@ public class JavaConstantTokenizer extends Tokenizer {\n \n   private final String tagBefore;\n   private final String tagAfter;\n-  private final static int DOT = '.';\n+  private static final int DOT = '.';\n \n   public JavaConstantTokenizer(String tagBefore, String tagAfter) {\n     this.tagBefore = tagBefore;"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "public static abstract class CodeLoader {",
        "fixed_code": "public abstract static class CodeLoader {",
        "patch": "@@ -37,7 +37,7 @@ public class SourceCode {\n \n   public static final String EOL = System.getProperty(\"line.separator\", \"\\n\");\n \n-  public static abstract class CodeLoader {\n+  public abstract static class CodeLoader {\n     private SoftReference<List<String>> code;\n \n     public List<String> getCode() {"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "private final static Map<String, Integer> TOKENS = new HashMap<String, Integer>();",
        "fixed_code": "private static final Map<String, Integer> TOKENS = new HashMap<String, Integer>();",
        "patch": "@@ -33,7 +33,7 @@\n  */\n public class TokenEntry implements Comparable<TokenEntry> {\n \n-  private final static Map<String, Integer> TOKENS = new HashMap<String, Integer>();\n+  private static final Map<String, Integer> TOKENS = new HashMap<String, Integer>();\n   private static int tokenCount = 0;\n \n   /**"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "public final static int DEFAULT_PRECISION = 1;",
        "fixed_code": "public static final int DEFAULT_PRECISION = 1;",
        "patch": "@@ -38,7 +38,7 @@ public class Measure {\n   /**\n    * Default precision when saving a float type metric\n    */\n-  public final static int DEFAULT_PRECISION = 1;\n+  public static final int DEFAULT_PRECISION = 1;\n \n   private Long id; // for internal use\n   protected String metricKey;"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "public static abstract class MetricFilter<M> implements MeasuresFilter<M> {",
        "fixed_code": "public abstract static class MetricFilter<M> implements MeasuresFilter<M> {",
        "patch": "@@ -159,7 +159,7 @@ public Collection<RuleMeasure> filter(Collection<Measure> measures) {\n   /**\n    * Used for internal optimizations.\n    */\n-  public static abstract class MetricFilter<M> implements MeasuresFilter<M> {\n+  public abstract static class MetricFilter<M> implements MeasuresFilter<M> {\n     private final String metricKey;\n \n     protected MetricFilter(Metric metric) {"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "public static abstract class Converter<TYPE> {",
        "fixed_code": "public abstract static class Converter<TYPE> {",
        "patch": "@@ -48,7 +48,7 @@ private KeyValueFormat() {\n     // only static methods\n   }\n \n-  public static abstract class Converter<TYPE> {\n+  public abstract static class Converter<TYPE> {\n     abstract String format(TYPE type);\n \n     abstract TYPE parse(String s);"
    },
    {
        "commit_id": "0aa289a5926819abf28961be3d2f1e772648e9fb",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0aa289a5926819abf28961be3d2f1e772648e9fb",
        "buggy_code": "public final static int DEPTH_UNLIMITED = -1;",
        "fixed_code": "public static final int DEPTH_UNLIMITED = -1;",
        "patch": "@@ -22,7 +22,7 @@\n public class ResourceQuery extends Query<Resource> {\n   public static final String BASE_URL = \"/api/resources\";\n \n-  public final static int DEPTH_UNLIMITED = -1;\n+  public static final int DEPTH_UNLIMITED = -1;\n \n   private Integer depth;\n   private String resourceKeyOrId;"
    },
    {
        "commit_id": "4677430bfe3da77a26dd23ae3e9296952e0bb40c",
        "commit_message": "SONAR-3102 Fix issues on reviews when a user is deleted from the DB\n\nIt was not possible to see or update a review which had been created/\nassigned/commented by a deleted user.\n\n=> A migration script cleans the DB and the constraint on review \n   author is now removed",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4677430bfe3da77a26dd23ae3e9296952e0bb40c",
        "buggy_code": "public static final int LAST_VERSION = 259;",
        "fixed_code": "public static final int LAST_VERSION = 260;",
        "patch": "@@ -34,7 +34,7 @@ public class SchemaMigration {\n \n   public final static int VERSION_UNKNOWN = -1;\n \n-  public static final int LAST_VERSION = 259;\n+  public static final int LAST_VERSION = 260;\n   public static final int VERSION_2_13 = 241;\n \n   public final static String TABLE_NAME = \"schema_migrations\";"
    },
    {
        "commit_id": "72caee0b94b9c6955dd46925c2f5145d9924872b",
        "commit_message": "SONAR-2069 fix path to treemap widget + minor refactoring",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/72caee0b94b9c6955dd46925c2f5145d9924872b",
        "buggy_code": "return \"/Users/sbrandhof/projects/github/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/treemap.html.erb\";",
        "fixed_code": "return \"/org/sonar/plugins/core/widgets/treemap.html.erb\";",
        "patch": "@@ -39,6 +39,6 @@ public String getTitle() {\n \n   @Override\n   protected String getTemplatePath() {\n-    return \"/Users/sbrandhof/projects/github/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/treemap.html.erb\";\n+    return \"/org/sonar/plugins/core/widgets/treemap.html.erb\";\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "a215fc5df9dd127140dd64c41f6e3940fc29e74a",
        "commit_message": "Fix path to treemap erb template",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a215fc5df9dd127140dd64c41f6e3940fc29e74a",
        "buggy_code": "return \"/Users/sbrandhof/projects/github/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/treemap.html.erb\";",
        "fixed_code": "return \"/org/sonar/plugins/core/widgets/treemap.html.erb\";",
        "patch": "@@ -39,6 +39,6 @@ public String getTitle() {\n \n   @Override\n   protected String getTemplatePath() {\n-    return \"/Users/sbrandhof/projects/github/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/treemap.html.erb\";\n+    return \"/org/sonar/plugins/core/widgets/treemap.html.erb\";\n   }\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "buggy_code": "measure.setRulePriority(severity);",
        "fixed_code": "measure.setSeverity(severity);",
        "patch": "@@ -113,7 +113,7 @@ private void computeViolationsPerRules(DecoratorContext context) {\n       if (rulesBag != null) {\n         for (Multiset.Entry<Rule> entry : rulesBag.entrySet()) {\n           RuleMeasure measure = RuleMeasure.createForRule(metric, entry.getElement(), (double) entry.getCount());\n-          measure.setRulePriority(severity);\n+          measure.setSeverity(severity);\n           context.saveMeasure(measure);\n         }\n       }"
    },
    {
        "commit_id": "93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "buggy_code": "measure.setRulePriority(severity);",
        "fixed_code": "measure.setSeverity(severity);",
        "patch": "@@ -156,7 +156,7 @@ private void computeNewViolationsPerRule(DecoratorContext context) {\n \n       for (Rule rule : rules) {\n         RuleMeasure measure = RuleMeasure.createForRule(metric, rule, null);\n-        measure.setRulePriority(severity);\n+        measure.setSeverity(severity);\n         for (PastSnapshot pastSnapshot : timeMachineConfiguration.getProjectPastSnapshots()) {\n           int variationIndex = pastSnapshot.getIndex();\n           int count = countViolations(violationsPerRule.get(rule), pastSnapshot.getTargetDate());"
    },
    {
        "commit_id": "93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/93a7bc8f307a431f2a1cb82b8401c4fd48042e79",
        "buggy_code": "merge.setRulePriority(ruleMeasure.getRulePriority());",
        "fixed_code": "merge.setRulePriority(ruleMeasure.getSeverity());",
        "patch": "@@ -158,7 +158,7 @@ MeasureModel mergeModel(Measure measure, MeasureModel merge) {\n     }\n     if (measure instanceof RuleMeasure) {\n       RuleMeasure ruleMeasure = (RuleMeasure) measure;\n-      merge.setRulePriority(ruleMeasure.getRulePriority());\n+      merge.setRulePriority(ruleMeasure.getSeverity());\n       if (ruleMeasure.getRule() != null) {\n         Rule ruleWithId = ruleFinder.findByKey(ruleMeasure.getRule().getRepositoryKey(), ruleMeasure.getRule().getKey());\n         if (ruleWithId != null) {"
    },
    {
        "commit_id": "56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "buggy_code": "measure.setRulePriority(severity);",
        "fixed_code": "measure.setSeverity(severity);",
        "patch": "@@ -113,7 +113,7 @@ private void computeViolationsPerRules(DecoratorContext context) {\n       if (rulesBag != null) {\n         for (Multiset.Entry<Rule> entry : rulesBag.entrySet()) {\n           RuleMeasure measure = RuleMeasure.createForRule(metric, entry.getElement(), (double) entry.getCount());\n-          measure.setRulePriority(severity);\n+          measure.setSeverity(severity);\n           context.saveMeasure(measure);\n         }\n       }"
    },
    {
        "commit_id": "56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "buggy_code": "measure.setRulePriority(severity);",
        "fixed_code": "measure.setSeverity(severity);",
        "patch": "@@ -156,7 +156,7 @@ private void computeNewViolationsPerRule(DecoratorContext context) {\n \n       for (Rule rule : rules) {\n         RuleMeasure measure = RuleMeasure.createForRule(metric, rule, null);\n-        measure.setRulePriority(severity);\n+        measure.setSeverity(severity);\n         for (PastSnapshot pastSnapshot : timeMachineConfiguration.getProjectPastSnapshots()) {\n           int variationIndex = pastSnapshot.getIndex();\n           int count = countViolations(violationsPerRule.get(rule), pastSnapshot.getTargetDate());"
    },
    {
        "commit_id": "56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/56d1477e5bc4db00a066e6fe6f5ccd8ca107970a",
        "buggy_code": "merge.setRulePriority(ruleMeasure.getRulePriority());",
        "fixed_code": "merge.setRulePriority(ruleMeasure.getSeverity());",
        "patch": "@@ -158,7 +158,7 @@ MeasureModel mergeModel(Measure measure, MeasureModel merge) {\n     }\n     if (measure instanceof RuleMeasure) {\n       RuleMeasure ruleMeasure = (RuleMeasure) measure;\n-      merge.setRulePriority(ruleMeasure.getRulePriority());\n+      merge.setRulePriority(ruleMeasure.getSeverity());\n       if (ruleMeasure.getRule() != null) {\n         Rule ruleWithId = ruleFinder.findByKey(ruleMeasure.getRule().getRepositoryKey(), ruleMeasure.getRule().getKey());\n         if (ruleWithId != null) {"
    },
    {
        "commit_id": "480b51e830ad9f64a363b86bbf183879a5a76728",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/480b51e830ad9f64a363b86bbf183879a5a76728",
        "buggy_code": "filter.add(new CloneGroup(cloneLength, origin, parts));",
        "fixed_code": "filter.add(CloneGroup.builder().setLength(cloneLength).setOrigin(origin).setParts(parts).build());",
        "patch": "@@ -223,7 +223,7 @@ private void reportClones(BlocksGroup beginGroup, BlocksGroup endGroup, int clon\n       parts.add(part);\n     }\n \n-    filter.add(new CloneGroup(cloneLength, origin, parts));\n+    filter.add(CloneGroup.builder().setLength(cloneLength).setOrigin(origin).setParts(parts).build());\n   }\n \n }"
    },
    {
        "commit_id": "ffb17d7291b42b51784aab7457afc97b3cc9dae8",
        "commit_message": "New try to fix Oracle batch mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ffb17d7291b42b51784aab7457afc97b3cc9dae8",
        "buggy_code": "public static final int MAX_BATCH_SIZE = 1000;",
        "fixed_code": "public static final int MAX_BATCH_SIZE = 250;",
        "patch": "@@ -31,7 +31,7 @@\n \n public final class BatchSession implements SqlSession {\n \n-  public static final int MAX_BATCH_SIZE = 1000;\n+  public static final int MAX_BATCH_SIZE = 250;\n \n   private final SqlSession session;\n   private final int batchSize;"
    },
    {
        "commit_id": "8b84563a0452b7ec0d83a11a8a1c75b822a110cc",
        "commit_message": "Experimental fix for purges on Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8b84563a0452b7ec0d83a11a8a1c75b822a110cc",
        "buggy_code": "public static final int MAX_BATCH_SIZE = 1000;",
        "fixed_code": "public static final int MAX_BATCH_SIZE = 250;",
        "patch": "@@ -31,7 +31,7 @@\n \n public final class BatchSession implements SqlSession {\n \n-  public static final int MAX_BATCH_SIZE = 1000;\n+  public static final int MAX_BATCH_SIZE = 250;\n \n   private final SqlSession session;\n   private final int batchSize;"
    },
    {
        "commit_id": "ec1df33232cfe41612c4f402abfa9e3262c65a2d",
        "commit_message": "SONAR-3139 Fix wrong refactoring",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ec1df33232cfe41612c4f402abfa9e3262c65a2d",
        "buggy_code": "for (int duplicatedLine = part.getStartLine(); duplicatedLine < part.getEndLine() + part.getLines(); duplicatedLine++) {",
        "fixed_code": "for (int duplicatedLine = part.getStartLine(); duplicatedLine < part.getStartLine() + part.getLines(); duplicatedLine++) {",
        "patch": "@@ -176,7 +176,7 @@ static void save(SensorContext context, Resource resource, Iterable<CloneGroup>\n       for (ClonePart part : clone.getCloneParts()) {\n         if (part.getResourceId().equals(origin.getResourceId())) {\n           duplicatedBlocks++;\n-          for (int duplicatedLine = part.getStartLine(); duplicatedLine < part.getEndLine() + part.getLines(); duplicatedLine++) {\n+          for (int duplicatedLine = part.getStartLine(); duplicatedLine < part.getStartLine() + part.getLines(); duplicatedLine++) {\n             duplicatedLines.add(duplicatedLine);\n           }\n         }"
    },
    {
        "commit_id": "14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "commit_message": "DBCleaner : fix deletion of events + improve mybatis batch mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "buggy_code": "LoggerFactory.getLogger(getClass()).debug(\"-> Delete data prior to: \" + DateUtils.formatDate(before));",
        "fixed_code": "LoggerFactory.getLogger(getClass()).info(\"-> Delete data prior to: \" + DateUtils.formatDate(before));",
        "patch": "@@ -47,6 +47,6 @@ List<PurgeableSnapshotDto> filter(List<PurgeableSnapshotDto> history) {\n \n   @Override\n   void log() {\n-    LoggerFactory.getLogger(getClass()).debug(\"-> Delete data prior to: \" + DateUtils.formatDate(before));\n+    LoggerFactory.getLogger(getClass()).info(\"-> Delete data prior to: \" + DateUtils.formatDate(before));\n   }\n }"
    },
    {
        "commit_id": "14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "commit_message": "DBCleaner : fix deletion of events + improve mybatis batch mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "buggy_code": "LoggerFactory.getLogger(getClass()).debug(\"-> Keep one snapshot per \" + label + \" between \" + DateUtils.formatDate(start) + \" and \" + DateUtils.formatDate(end));",
        "fixed_code": "LoggerFactory.getLogger(getClass()).info(\"-> Keep one snapshot per \" + label + \" between \" + DateUtils.formatDate(start) + \" and \" + DateUtils.formatDate(end));",
        "patch": "@@ -55,7 +55,7 @@ List<PurgeableSnapshotDto> filter(List<PurgeableSnapshotDto> history) {\n \n   @Override\n   void log() {\n-    LoggerFactory.getLogger(getClass()).debug(\"-> Keep one snapshot per \" + label + \" between \" + DateUtils.formatDate(start) + \" and \" + DateUtils.formatDate(end));\n+    LoggerFactory.getLogger(getClass()).info(\"-> Keep one snapshot per \" + label + \" between \" + DateUtils.formatDate(start) + \" and \" + DateUtils.formatDate(end));\n   }\n \n   private void appendSnapshotsToDelete(Interval interval, List<PurgeableSnapshotDto> toDelete) {"
    },
    {
        "commit_id": "14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "commit_message": "DBCleaner : fix deletion of events + improve mybatis batch mode",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/14091c078d2ca1793e5186ef4dd7b55002d1b1cd",
        "buggy_code": "SqlSession session = mybatis.openSession(ExecutorType.BATCH);",
        "fixed_code": "SqlSession session = mybatis.openBatchSession();",
        "patch": "@@ -51,7 +51,7 @@ public List<DuplicationUnitDto> selectCandidates(int resourceSnapshotId, Integer\n    * Note that generated ids are not returned.\n    */\n   public void insert(Collection<DuplicationUnitDto> units) {\n-    SqlSession session = mybatis.openSession(ExecutorType.BATCH);\n+    SqlSession session = mybatis.openBatchSession();\n     try {\n       DuplicationMapper mapper = session.getMapper(DuplicationMapper.class);\n       for (DuplicationUnitDto unit : units) {"
    },
    {
        "commit_id": "28dc9e5c031a045fa561cbddfb3fbd4b4092f6a5",
        "commit_message": "SONAR-3012 Improvements on Review Activity\n\n- Computes metrics even on folders/packages\n- Fixes a bug in computation of unreviewed violations\n- Improves widget rendering",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/28dc9e5c031a045fa561cbddfb3fbd4b4092f6a5",
        "buggy_code": "return \"Reviews metrics\";",
        "fixed_code": "return \"Review Activity\";",
        "patch": "@@ -30,7 +30,7 @@ public String getId() {\n   }\n \n   public String getTitle() {\n-    return \"Reviews metrics\";\n+    return \"Review Activity\";\n   }\n \n   @Override"
    },
    {
        "commit_id": "9215b60984179e3fc28cea11a032556de4f7abdf",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9215b60984179e3fc28cea11a032556de4f7abdf",
        "buggy_code": "public void saveSource(Resource reference, String source) throws DuplicatedSourceException {",
        "fixed_code": "public void saveSource(Resource reference, String source) {",
        "patch": "@@ -155,7 +155,7 @@ public Collection<Dependency> getOutgoingDependencies(Resource from) {\n     return index.getOutgoingEdges(resourceOrProject(from));\n   }\n \n-  public void saveSource(Resource reference, String source) throws DuplicatedSourceException {\n+  public void saveSource(Resource reference, String source) {\n     index.setSource(reference, source);\n   }\n "
    },
    {
        "commit_id": "9215b60984179e3fc28cea11a032556de4f7abdf",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9215b60984179e3fc28cea11a032556de4f7abdf",
        "buggy_code": "public Snapshot getSnapshotOrFail(Resource resource) throws ResourceNotPersistedException {",
        "fixed_code": "public Snapshot getSnapshotOrFail(Resource resource) {",
        "patch": "@@ -87,7 +87,7 @@ public Snapshot getSnapshot(Resource reference) {\n     return snapshotsByResource.get(reference);\n   }\n \n-  public Snapshot getSnapshotOrFail(Resource resource) throws ResourceNotPersistedException {\n+  public Snapshot getSnapshotOrFail(Resource resource) {\n     Snapshot snapshot = getSnapshot(resource);\n     if (snapshot == null) {\n       throw new ResourceNotPersistedException(resource);"
    },
    {
        "commit_id": "9215b60984179e3fc28cea11a032556de4f7abdf",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9215b60984179e3fc28cea11a032556de4f7abdf",
        "buggy_code": "public MeasureModel setValue(Double value) throws IllegalArgumentException {",
        "fixed_code": "public MeasureModel setValue(Double value) {",
        "patch": "@@ -184,7 +184,7 @@ public void setDescription(String description) {\n    *\n    * @throws IllegalArgumentException in case value is not a valid double\n    */\n-  public MeasureModel setValue(Double value) throws IllegalArgumentException {\n+  public MeasureModel setValue(Double value) {\n     if (value != null && (value.isNaN() || value.isInfinite())) {\n       throw new IllegalArgumentException();\n     }"
    },
    {
        "commit_id": "076ef00a0d479abe7053d4dd29842edb453b60f8",
        "commit_message": "Fix some quality flaws",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/076ef00a0d479abe7053d4dd29842edb453b60f8",
        "buggy_code": "public static final String[] TABLE_NAMES = {",
        "fixed_code": "static final String[] TABLE_NAMES = {",
        "patch": "@@ -36,7 +36,7 @@ private DatabaseUtils() {\n    * This list is hardcoded because we didn't succeed in using java.sql.DatabaseMetaData#getTables() in the same way\n    * for all the supported databases, particularly due to Oracle results.\n    */\n-  public static final String[] TABLE_NAMES = {\n+  static final String[] TABLE_NAMES = {\n     \"action_plans\",\n     \"action_plans_reviews\",\n     \"active_dashboards\","
    },
    {
        "commit_id": "d34190653034aa5a4587e9046244747f27482cb5",
        "commit_message": "SONAR-3090 Fix purge for MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d34190653034aa5a4587e9046244747f27482cb5",
        "buggy_code": "executeNativeQuery(session, \"delete duplication blocks\", snapshotIds, \"delete from duplications_index e where e.snapshot_id in (:ids)\");",
        "fixed_code": "executeNativeQuery(session, \"delete duplication blocks\", snapshotIds, \"delete from duplications_index where snapshot_id in (:ids)\");",
        "patch": "@@ -110,7 +110,7 @@ public static void deleteViolations(DatabaseSession session, List<Integer> snaps\n    * @since 2.11\n    */\n   private static void deleteDuplicationBlocks(DatabaseSession session, List<Integer> snapshotIds) {\n-    executeNativeQuery(session, \"delete duplication blocks\", snapshotIds, \"delete from duplications_index e where e.snapshot_id in (:ids)\");\n+    executeNativeQuery(session, \"delete duplication blocks\", snapshotIds, \"delete from duplications_index where snapshot_id in (:ids)\");\n   }\n \n   /**"
    },
    {
        "commit_id": "d34190653034aa5a4587e9046244747f27482cb5",
        "commit_message": "SONAR-3090 Fix purge for MySQL",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d34190653034aa5a4587e9046244747f27482cb5",
        "buggy_code": "checkTables(\"purgeSnapshots\", \"snapshots\", \"project_measures\", \"measure_data\", \"rule_failures\", \"snapshot_sources\", \"dependencies\", \"events\");",
        "fixed_code": "checkTables(\"purgeSnapshots\", \"snapshots\", \"project_measures\", \"measure_data\", \"rule_failures\", \"snapshot_sources\", \"dependencies\", \"events\", \"duplications_index\");",
        "patch": "@@ -50,6 +50,6 @@ public void purgeSnapshots() throws SQLException {\n \n     PurgeUtils.deleteSnapshotsData(getSession(), Arrays.asList(3, 4));\n \n-    checkTables(\"purgeSnapshots\", \"snapshots\", \"project_measures\", \"measure_data\", \"rule_failures\", \"snapshot_sources\", \"dependencies\", \"events\");\n+    checkTables(\"purgeSnapshots\", \"snapshots\", \"project_measures\", \"measure_data\", \"rule_failures\", \"snapshot_sources\", \"dependencies\", \"events\", \"duplications_index\");\n   }\n }"
    },
    {
        "commit_id": "5f377882e3a3b906bc41fbcc27a95ab590c7a00e",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f377882e3a3b906bc41fbcc27a95ab590c7a00e",
        "buggy_code": "if (node != tree.getRootNode()) { // inner node = not leaf and not root",
        "fixed_code": "if (!node.equals(tree.getRootNode())) { // inner node = not leaf and not root",
        "patch": "@@ -72,7 +72,7 @@ private void dfs() {\n         list.add(node.depth);\n         node.endSize = list.size();\n       } else {\n-        if (node != tree.getRootNode()) { // inner node = not leaf and not root\n+        if (!node.equals(tree.getRootNode())) { // inner node = not leaf and not root\n           innerNodes.add(node);\n         }\n         for (Edge edge : node.getEdges()) {"
    },
    {
        "commit_id": "5f377882e3a3b906bc41fbcc27a95ab590c7a00e",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/5f377882e3a3b906bc41fbcc27a95ab590c7a00e",
        "buggy_code": "if ((node != null) && (node != root)) {",
        "fixed_code": "if ((node != null) && (!node.equals(root))) {",
        "patch": "@@ -108,7 +108,7 @@ private void addPrefix(Suffix active, int endIndex) {\n   }\n \n   private void updateSuffixNode(Node node, Node suffixNode) {\n-    if ((node != null) && (node != root)) {\n+    if ((node != null) && (!node.equals(root))) {\n       node.setSuffixNode(suffixNode);\n     }\n   }"
    },
    {
        "commit_id": "62a1cb35eae3d226c64220139dd45fad20fe9082",
        "commit_message": "Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/62a1cb35eae3d226c64220139dd45fad20fe9082",
        "buggy_code": "for (int i = 0; i < 5000; i++) {",
        "fixed_code": "for (int i = 0; i < 2000; i++) {",
        "patch": "@@ -69,7 +69,7 @@ public void huge() {\n     CloneIndex index = createIndex();\n     List<Block> fileBlocks = Lists.newArrayList();\n     int indexInFile = 0;\n-    for (int i = 0; i < 5000; i++) {\n+    for (int i = 0; i < 2000; i++) {\n       Block block = newBlock(\"x\", new ByteArray(\"01\"), indexInFile);\n       fileBlocks.add(block);\n       indexInFile++;"
    },
    {
        "commit_id": "b34960b90f6376697d4d5aaf79d6050b2874848f",
        "commit_message": "Fix violations, increase coverage",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b34960b90f6376697d4d5aaf79d6050b2874848f",
        "buggy_code": "new Search(SuffixTree.create(text), text.lens, reporter).compute();",
        "fixed_code": "new Search(SuffixTree.create(text), text.getLens(), reporter).compute();",
        "patch": "@@ -31,7 +31,7 @@ public final class Search {\n   private final List<Node> innerNodes = new ArrayList<Node>();\n \n   public static void perform(TextSet text, Collector reporter) {\n-    new Search(SuffixTree.create(text), text.lens, reporter).compute();\n+    new Search(SuffixTree.create(text), text.getLens(), reporter).compute();\n   }\n \n   private Search(SuffixTree tree, int[] lens, Collector reporter) {"
    },
    {
        "commit_id": "7e4637f22c996216c08c66593453f607c9875f42",
        "commit_message": "Fix typo in RuleDaoTest",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/7e4637f22c996216c08c66593453f607c9875f42",
        "buggy_code": "setupData(\"select\");",
        "fixed_code": "setupData(\"selectById\");",
        "patch": "@@ -52,7 +52,7 @@ public void testSelectAll() throws Exception {\n \n   @Test\n   public void testSelectById() throws Exception {\n-    setupData(\"select\");\n+    setupData(\"selectById\");\n     org.sonar.persistence.model.Rule rule = dao.selectById(2L);\n \n     assertThat(rule.getId(), Is.is(2L));"
    },
    {
        "commit_id": "07dbf1697c830277934eed8ddb9cd5df1161ed97",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/07dbf1697c830277934eed8ddb9cd5df1161ed97",
        "buggy_code": "initializer = new CoberturaMavenInitializer(new CoberturaMavenPluginHandler());",
        "fixed_code": "initializer = new CoberturaMavenInitializer(new CoberturaMavenPluginHandler(null));",
        "patch": "@@ -49,7 +49,7 @@ public class CoberturaMavenInitializerTest {\n   @Before\n   public void setUp() {\n     project = mock(Project.class);\n-    initializer = new CoberturaMavenInitializer(new CoberturaMavenPluginHandler());\n+    initializer = new CoberturaMavenInitializer(new CoberturaMavenPluginHandler(null));\n   }\n \n   @Test"
    },
    {
        "commit_id": "36c7fe808ee079ae8ed82b6d55930666a71e8663",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/36c7fe808ee079ae8ed82b6d55930666a71e8663",
        "buggy_code": "public static List<Metric> metrics = Lists.newLinkedList();",
        "fixed_code": "private static final List<Metric> metrics = Lists.newLinkedList();",
        "patch": "@@ -1423,7 +1423,7 @@ private CoreMetrics() {\n     .setDomain(DOMAIN_GENERAL)\n     .create();\n \n-  public static List<Metric> metrics = Lists.newLinkedList();\n+  private static final List<Metric> metrics = Lists.newLinkedList();\n \n   public static List<Metric> getMetrics() {\n     if (metrics.isEmpty()) {"
    },
    {
        "commit_id": "36c7fe808ee079ae8ed82b6d55930666a71e8663",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/36c7fe808ee079ae8ed82b6d55930666a71e8663",
        "buggy_code": "if (CoreMetrics.metrics.contains(metric)) {",
        "fixed_code": "if (CoreMetrics.getMetrics().contains(metric)) {",
        "patch": "@@ -69,7 +69,7 @@ public void start() {\n   private void checkMetrics(Map<String, Metrics> metricsByRepository, Metrics metrics) {\n     for (Metric metric : metrics.getMetrics()) {\n       String metricKey = metric.getKey();\n-      if (CoreMetrics.metrics.contains(metric)) {\n+      if (CoreMetrics.getMetrics().contains(metric)) {\n         throw new ServerStartException(\"The following metric is already defined in sonar: \" + metricKey);\n       }\n       Metrics anotherRepository = metricsByRepository.get(metricKey);"
    },
    {
        "commit_id": "e2947461a1c1efd82b31b8c223908859c105408d",
        "commit_message": "SONAR-2975 fix typo in Oracle ALTER SESSION statement",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2947461a1c1efd82b31b8c223908859c105408d",
        "buggy_code": "result.add(\"ALTER SESSION SET CURRENT SCHEMA = \" + schema);",
        "fixed_code": "result.add(\"ALTER SESSION SET CURRENT_SCHEMA = \" + schema);",
        "patch": "@@ -186,7 +186,7 @@ static List<String> getConnectionInitStatements(Dialect dialect, String schema)\n         result.add(\"SET SEARCH_PATH TO \" + schema);\n \n       } else if (Oracle.ID.equals(dialect.getId())) {\n-        result.add(\"ALTER SESSION SET CURRENT SCHEMA = \" + schema);\n+        result.add(\"ALTER SESSION SET CURRENT_SCHEMA = \" + schema);\n       }\n     }\n     return result;"
    },
    {
        "commit_id": "e2947461a1c1efd82b31b8c223908859c105408d",
        "commit_message": "SONAR-2975 fix typo in Oracle ALTER SESSION statement",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2947461a1c1efd82b31b8c223908859c105408d",
        "buggy_code": "assertThat(statements.get(0), Is.is(\"ALTER SESSION SET CURRENT SCHEMA = my_schema\"));",
        "fixed_code": "assertThat(statements.get(0), Is.is(\"ALTER SESSION SET CURRENT_SCHEMA = my_schema\"));",
        "patch": "@@ -140,7 +140,7 @@ public void shouldAlterOracleSession() {\n     List<String> statements = DefaultDatabase.getConnectionInitStatements(new Oracle(), \"my_schema\");\n \n     assertThat(statements.size(), Is.is(1));\n-    assertThat(statements.get(0), Is.is(\"ALTER SESSION SET CURRENT SCHEMA = my_schema\"));\n+    assertThat(statements.get(0), Is.is(\"ALTER SESSION SET CURRENT_SCHEMA = my_schema\"));\n   }\n \n   @Test"
    },
    {
        "commit_id": "2d37e6afa362160ffcdecc31c36855ba4ab060d0",
        "commit_message": "fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d37e6afa362160ffcdecc31c36855ba4ab060d0",
        "buggy_code": "public class PmdRule implements Comparable<String> {",
        "fixed_code": "public class PmdRule {",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class PmdRule implements Comparable<String> {\n+public class PmdRule {\n \n   private String ref;\n "
    },
    {
        "commit_id": "2d37e6afa362160ffcdecc31c36855ba4ab060d0",
        "commit_message": "fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2d37e6afa362160ffcdecc31c36855ba4ab060d0",
        "buggy_code": "CustomHibernateConnectionProvider.datasource = database.getDataSource();",
        "fixed_code": "CustomHibernateConnectionProvider.setDatasourceForConfig(database.getDataSource());",
        "patch": "@@ -54,7 +54,7 @@ public void start() {\n \n   private void createDatasource() {\n     try {\n-      CustomHibernateConnectionProvider.datasource = database.getDataSource();\n+      CustomHibernateConnectionProvider.setDatasourceForConfig(database.getDataSource());\n     } catch (Exception e) {\n       throw new SonarException(\"Fail to connect to database\", e);\n     }"
    },
    {
        "commit_id": "3a61986c5815fda72fd97aff91d69e56e7364d1d",
        "commit_message": "Fix blocker violation",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3a61986c5815fda72fd97aff91d69e56e7364d1d",
        "buggy_code": "public static final Paint[] COLORS = new Paint[]{Color.red, Color.blue, Color.green,",
        "fixed_code": "public static final transient Paint[] COLORS = new Paint[]{Color.red, Color.blue, Color.green,",
        "patch": "@@ -26,7 +26,7 @@\n public class CustomBarRenderer extends BarRenderer {\n \n   private static final long serialVersionUID = -1598934457150811079L;\n-  public static final Paint[] COLORS = new Paint[]{Color.red, Color.blue, Color.green,\n+  public static final transient Paint[] COLORS = new Paint[]{Color.red, Color.blue, Color.green,\n       Color.yellow, Color.orange, Color.cyan,\n       Color.magenta, Color.blue};\n "
    },
    {
        "commit_id": "1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "buggy_code": "protected ApplyProjectRolesDecorator(RoleManager roleManager) {",
        "fixed_code": "ApplyProjectRolesDecorator(RoleManager roleManager) {",
        "patch": "@@ -29,7 +29,7 @@ public class ApplyProjectRolesDecorator implements Decorator {\n \n   private RoleManager roleManager;\n \n-  protected ApplyProjectRolesDecorator(RoleManager roleManager) {\n+  ApplyProjectRolesDecorator(RoleManager roleManager) {\n     this.roleManager = roleManager;\n   }\n "
    },
    {
        "commit_id": "1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "buggy_code": "protected WeightedViolationsDecorator(Map<RulePriority, Integer> weights) {",
        "fixed_code": "WeightedViolationsDecorator(Map<RulePriority, Integer> weights) {",
        "patch": "@@ -55,7 +55,7 @@ public WeightedViolationsDecorator() {\n   /**\n    * for unit tests\n    */\n-  protected WeightedViolationsDecorator(Map<RulePriority, Integer> weights) {\n+  WeightedViolationsDecorator(Map<RulePriority, Integer> weights) {\n     this.weights = weights;\n   }\n "
    },
    {
        "commit_id": "1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "buggy_code": "public class DependencyInfo extends Composite {",
        "fixed_code": "public final class DependencyInfo extends Composite {",
        "patch": "@@ -37,7 +37,7 @@\n \n import java.util.List;\n \n-public class DependencyInfo extends Composite {\n+public final class DependencyInfo extends Composite {\n \n   private static DependencyInfo INSTANCE = new DependencyInfo();\n "
    },
    {
        "commit_id": "1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1c87ee80aeefcac5ea4934a4b8d3ccdd20dfbde1",
        "buggy_code": "protected Server getServer() {",
        "fixed_code": "Server getServer() {",
        "patch": "@@ -175,7 +175,7 @@ private String getPath(String resourcePath) throws URISyntaxException {\n     return null;\n   }\n \n-  protected Server getServer() {\n+  Server getServer() {\n     return server;\n   }\n "
    },
    {
        "commit_id": "911c66cab3137ba840b856a4750088ea6709064f",
        "commit_message": "SONAR-2733 Fix unit test and remove useless code",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/911c66cab3137ba840b856a4750088ea6709064f",
        "buggy_code": "assertThat(resourceViewers.size(), is(1 + 3 /* default */));",
        "fixed_code": "assertThat(resourceViewers.size(), is(1 + 4 /* default */));",
        "patch": "@@ -68,7 +68,7 @@ public void getPagesBySection() {\n   public void getResourceViewers() {\n     final Views views = new Views(VIEWS);\n     List resourceViewers = views.getPages(NavigationSection.RESOURCE_TAB);\n-    assertThat(resourceViewers.size(), is(1 + 3 /* default */));\n+    assertThat(resourceViewers.size(), is(1 + 4 /* default */));\n     assertThat(resourceViewers.contains(new ViewProxy((View)FAKE_TAB)), is(true));\n   }\n "
    },
    {
        "commit_id": "1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "buggy_code": "return (filenames.size()>0 ? filenames.get(0) : null);",
        "fixed_code": "return (!filenames.isEmpty() ? filenames.get(0) : null);",
        "patch": "@@ -84,7 +84,7 @@ public List<String> getFilenames() {\n   }\n \n   public String getPluginFilename() {\n-    return (filenames.size()>0 ? filenames.get(0) : null);\n+    return (!filenames.isEmpty() ? filenames.get(0) : null);\n   }\n \n   @Override"
    },
    {
        "commit_id": "1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "buggy_code": "return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE).toString();",
        "fixed_code": "return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);",
        "patch": "@@ -89,6 +89,6 @@ public int hashCode() {\n \n   @Override\n   public String toString() {\n-    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE).toString();\n+    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n   }\n }"
    },
    {
        "commit_id": "1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1e1186f78e87d614db5a6f8860c9bfcbbb07a127",
        "buggy_code": "return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE).toString();",
        "fixed_code": "return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);",
        "patch": "@@ -83,6 +83,6 @@ public UserRole setResourceId(Integer resourceId) {\n \n   @Override\n   public String toString() {\n-    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE).toString();\n+    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n   }\n }"
    },
    {
        "commit_id": "39215678851889b0cb86bb626461f266e9ffef81",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/39215678851889b0cb86bb626461f266e9ffef81",
        "buggy_code": "public abstract String message(final Locale locale, final String key, final String defaultValue, final Object... parameters);",
        "fixed_code": "String message(final Locale locale, final String key, final String defaultValue, final Object... parameters);",
        "patch": "@@ -42,6 +42,6 @@ public interface I18n extends ServerComponent {\n    * @param parameters   the parameters used to format the message from the translated pattern.\n    * @return the message formatted with the translated pattern and the given parameters\n    */\n-  public abstract String message(final Locale locale, final String key, final String defaultValue, final Object... parameters);\n+  String message(final Locale locale, final String key, final String defaultValue, final Object... parameters);\n \n }"
    },
    {
        "commit_id": "f19f49455831b7c5912ee81d2143e7ab74c00729",
        "commit_message": "SONAR-2892 Fix test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f19f49455831b7c5912ee81d2143e7ab74c00729",
        "buggy_code": "assertThat(url.toString(), allOf(startsWith(\"jar:\"), endsWith(\"/bytecode/lib/hello.jar!/META-INF/MANIFEST.MF\")));",
        "fixed_code": "assertThat(url.toString(), allOf(startsWith(\"jar:\"), endsWith(\"hello.jar!/META-INF/MANIFEST.MF\")));",
        "patch": "@@ -41,7 +41,7 @@ public void testFindResource() throws Exception {\n     JarLoader jarLoader = new JarLoader(jar);\n \n     URL url = jarLoader.findResource(\"META-INF/MANIFEST.MF\");\n-    assertThat(url.toString(), allOf(startsWith(\"jar:\"), endsWith(\"/bytecode/lib/hello.jar!/META-INF/MANIFEST.MF\")));\n+    assertThat(url.toString(), allOf(startsWith(\"jar:\"), endsWith(\"hello.jar!/META-INF/MANIFEST.MF\")));\n \n     InputStream is = url.openStream();\n     try {"
    },
    {
        "commit_id": "f8d5c0849d003e8b62c2c06f03428c33fddf4a2a",
        "commit_message": "SONAR-2896 Fix ability to configure Maven plugins under Maven 2.x",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f8d5c0849d003e8b62c2c06f03428c33fddf4a2a",
        "buggy_code": "properties.putAll(properties);",
        "fixed_code": "this.properties.putAll(properties);",
        "patch": "@@ -101,7 +101,7 @@ public Properties getProperties() {\n    * @since 2.12\n    */\n   public ProjectDefinition setProperties(Properties properties) {\n-    properties.putAll(properties);\n+    this.properties.putAll(properties);\n     return this;\n   }\n "
    },
    {
        "commit_id": "02c48e61717340c546cee73635c76d22fc722efc",
        "commit_message": "SONAR-2735 Fix handling of different ways to declare Maven modules",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/02c48e61717340c546cee73635c76d22fc722efc",
        "buggy_code": "root.getModules().add(\"module\");",
        "fixed_code": "root.getModules().add(\"module/pom.xml\");",
        "patch": "@@ -46,7 +46,7 @@ public void shouldConvertModules() {\n     MavenProject root = new MavenProject();\n     root.setFile(new File(\"/foo/pom.xml\"));\n     root.getBuild().setDirectory(\"target\");\n-    root.getModules().add(\"module\");\n+    root.getModules().add(\"module/pom.xml\");\n     MavenProject module = new MavenProject();\n     module.setFile(new File(\"/foo/module/pom.xml\"));\n     module.getBuild().setDirectory(\"target\");"
    },
    {
        "commit_id": "9e6d8153a5d7f10eeb2a07be543fce8253e961b5",
        "commit_message": "SONAR-1091 Fix SQL for CPD over different projects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9e6d8153a5d7f10eeb2a07be543fce8253e961b5",
        "buggy_code": "String sql = \"SELECT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +",
        "fixed_code": "String sql = \"SELECT DISTINCT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +",
        "patch": "@@ -76,7 +76,7 @@ public void prepareCache(Resource resource) {\n     int resourceSnapshotId = getSnapshotIdFor(resource);\n \n     // Order of columns is important - see code below!\n-    String sql = \"SELECT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +\n+    String sql = \"SELECT DISTINCT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +\n         \" FROM duplications_index to_blocks, duplications_index from_blocks, snapshots snapshot, projects res\" +\n         \" WHERE from_blocks.snapshot_id = :resource_snapshot_id\" +\n         \" AND to_blocks.hash = from_blocks.hash\" +"
    },
    {
        "commit_id": "e01749f160a9bead858e17b37c2b1dc0be93b7bc",
        "commit_message": "SONAR-1091 Fix SQL for CPD over different projects",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e01749f160a9bead858e17b37c2b1dc0be93b7bc",
        "buggy_code": "String sql = \"SELECT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +",
        "fixed_code": "String sql = \"SELECT DISTINCT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +",
        "patch": "@@ -76,7 +76,7 @@ public void prepareCache(Resource resource) {\n     int resourceSnapshotId = getSnapshotIdFor(resource);\n \n     // Order of columns is important - see code below!\n-    String sql = \"SELECT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +\n+    String sql = \"SELECT DISTINCT to_blocks.hash, res.kee, to_blocks.index_in_file, to_blocks.start_line, to_blocks.end_line\" +\n         \" FROM duplications_index to_blocks, duplications_index from_blocks, snapshots snapshot, projects res\" +\n         \" WHERE from_blocks.snapshot_id = :resource_snapshot_id\" +\n         \" AND to_blocks.hash = from_blocks.hash\" +"
    },
    {
        "commit_id": "157058813dd0bae520ac4273aa454b73b7e246d4",
        "commit_message": "SONAR-2744 Fix regression in usage of 'sonar.phase'",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157058813dd0bae520ac4273aa454b73b7e246d4",
        "buggy_code": "public void execute(Project project, String goal) {",
        "fixed_code": "public void execute(Project project, ProjectDefinition projectDef, String goal) {",
        "patch": "@@ -24,7 +24,7 @@\n import org.sonar.api.resources.Project;\n \n public final class FakeMavenPluginExecutor implements MavenPluginExecutor {\n-  public void execute(Project project, String goal) {\n+  public void execute(Project project, ProjectDefinition projectDef, String goal) {\n     // do nothing\n   }\n "
    },
    {
        "commit_id": "157058813dd0bae520ac4273aa454b73b7e246d4",
        "commit_message": "SONAR-2744 Fix regression in usage of 'sonar.phase'",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/157058813dd0bae520ac4273aa454b73b7e246d4",
        "buggy_code": "void execute(Project project, String goal);",
        "fixed_code": "void execute(Project project, ProjectDefinition def, String goal);",
        "patch": "@@ -26,7 +26,7 @@\n \n public interface MavenPluginExecutor extends BatchComponent {\n \n-  void execute(Project project, String goal);\n+  void execute(Project project, ProjectDefinition def, String goal);\n \n   MavenPluginHandler execute(Project project, ProjectDefinition def, MavenPluginHandler handler);\n "
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "return snapshot.getQualifier().equals(\"LIB\");",
        "fixed_code": "return \"LIB\".equals(snapshot.getQualifier());",
        "patch": "@@ -25,6 +25,6 @@ class KeepLibrarySnapshotFilter extends SnapshotFilter {\n \n   @Override\n   boolean filter(Snapshot snapshot) {\n-    return snapshot.getQualifier().equals(\"LIB\");\n+    return \"LIB\".equals(snapshot.getQualifier());\n   }\n }"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "if (parentPackage != null && !parentPackage.getKey().equals(\"\")) {",
        "fixed_code": "if (parentPackage != null && !\"\".equals(parentPackage.getKey())) {",
        "patch": "@@ -54,7 +54,7 @@ static String extractFileNameFromFilePath(String filePath) {\n \n   static SourceFile createSourceFile(SourcePackage parentPackage, String fileName) {\n     StringBuilder key = new StringBuilder();\n-    if (parentPackage != null && !parentPackage.getKey().equals(\"\")) {\n+    if (parentPackage != null && !\"\".equals(parentPackage.getKey())) {\n       key.append(parentPackage.getKey());\n       key.append(\"/\");\n     }"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "if (getInternalName().equals(\"java/lang/Object\")) {",
        "fixed_code": "if (\"java/lang/Object\".equals(getInternalName())) {",
        "patch": "@@ -111,7 +111,7 @@ void setSuperClass(AsmClass superClass) {\n   }\n \n   private void addChildren(AsmClass asmClass) {\n-    if (getInternalName().equals(\"java/lang/Object\")) {\n+    if (\"java/lang/Object\".equals(getInternalName())) {\n       return;\n     }\n     if (children == null) {"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "if (jvmJavaType == JvmJavaType.L && (classCanonicalName == null || classCanonicalName.equals(\"\"))) {",
        "fixed_code": "if (jvmJavaType == JvmJavaType.L && (classCanonicalName == null || \"\".equals(classCanonicalName))) {",
        "patch": "@@ -34,7 +34,7 @@ public Parameter(String classCanonicalName, boolean isArray) {\n   }\n \n   Parameter(JvmJavaType jvmJavaType, String classCanonicalName, boolean isArray) {\n-    if (jvmJavaType == JvmJavaType.L && (classCanonicalName == null || classCanonicalName.equals(\"\"))) {\n+    if (jvmJavaType == JvmJavaType.L && (classCanonicalName == null || \"\".equals(classCanonicalName))) {\n       throw new IllegalStateException(\"With an Object JavaType, this is mandatory to specify the canonical name of the class.\");\n     }\n     this.jvmJavaType = jvmJavaType;"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "private static Logger LOG = LoggerFactory.getLogger(I18nManager.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(I18nManager.class);",
        "patch": "@@ -36,7 +36,7 @@\n import java.util.*;\n \n public class I18nManager implements I18n, ServerExtension {\n-  private static Logger LOG = LoggerFactory.getLogger(I18nManager.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(I18nManager.class);\n \n   public static final String ENGLISH_PACK_PLUGIN_KEY = \"l10nen\";\n   public static final String BUNDLE_PACKAGE = \"org.sonar.l10n.\";"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "if (convertedKey.indexOf('.') == -1 && !convertedKey.equals(\"\")) {",
        "fixed_code": "if (convertedKey.indexOf('.') == -1 && !\"\".equals(convertedKey)) {",
        "patch": "@@ -36,7 +36,7 @@ public static JavaFile convertJavaFileKeyFromSquidFormat(String key) {\n     }\n \n     String convertedKey = key.replace('/', '.');\n-    if (convertedKey.indexOf('.') == -1 && !convertedKey.equals(\"\")) {\n+    if (convertedKey.indexOf('.') == -1 && !\"\".equals(convertedKey)) {\n       convertedKey = \"[default].\" + convertedKey;\n \n     } else if (convertedKey.indexOf('.') == -1) {"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "if (reader.getNodeName().equals(\"params\")) {",
        "fixed_code": "if (\"params\".equals(reader.getNodeName())) {",
        "patch": "@@ -157,7 +157,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co\n         while (reader.hasMoreChildren()) {\n           reader.moveDown();\n           valuesRule.put(reader.getNodeName(), reader.getValue());\n-          if (reader.getNodeName().equals(\"params\")) {\n+          if (\"params\".equals(reader.getNodeName())) {\n             while (reader.hasMoreChildren()) {\n               reader.moveDown();\n               Map<String, String> valuesParam = readNode(reader);"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "public class ManualMeasureCreateQuery extends CreateQuery<ManualMeasure> {",
        "fixed_code": "public final class ManualMeasureCreateQuery extends CreateQuery<ManualMeasure> {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 2.10\n  */\n-public class ManualMeasureCreateQuery extends CreateQuery<ManualMeasure> {\n+public final class ManualMeasureCreateQuery extends CreateQuery<ManualMeasure> {\n \n   private String resourceKey;\n   private String metricKey;"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": "public class ManualMeasureDeleteQuery extends DeleteQuery<ManualMeasure> {",
        "fixed_code": "public final class ManualMeasureDeleteQuery extends DeleteQuery<ManualMeasure> {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 2.10\n  */\n-public class ManualMeasureDeleteQuery extends DeleteQuery<ManualMeasure> {\n+public final class ManualMeasureDeleteQuery extends DeleteQuery<ManualMeasure> {\n \n   private String resourceKey;\n   private String metricKey;"
    },
    {
        "commit_id": "1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "commit_message": "Fix new violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f5682409af97410aca5e545ccbd40b6b037e6a9",
        "buggy_code": ".setUserName(utils.getString(json, \"username\"))",
        "fixed_code": ".setUsername(utils.getString(json, \"username\"))",
        "patch": "@@ -37,7 +37,7 @@ protected ManualMeasure parse(Object json) {\n         .setCreatedAt(utils.getDateTime(json, \"created_at\"))\n         .setUpdatedAt(utils.getDateTime(json, \"updated_at\"))\n         .setUserLogin(utils.getString(json, \"login\"))\n-        .setUserName(utils.getString(json, \"username\"))\n+        .setUsername(utils.getString(json, \"username\"))\n         .setValue(utils.getDouble(json, \"val\"))\n         .setTextValue(utils.getString(json, \"text\"))\n         ;"
    },
    {
        "commit_id": "831f128056cdd575e54d1635943833cebf898fb4",
        "commit_message": "Fix label of metric commented_out_code_lines",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/831f128056cdd575e54d1635943833cebf898fb4",
        "buggy_code": "public static final Metric COMMENTED_OUT_CODE_LINES = new Metric.Builder(COMMENTED_OUT_CODE_LINES_KEY, \"Commented LOCs\", Metric.ValueType.INT)",
        "fixed_code": "public static final Metric COMMENTED_OUT_CODE_LINES = new Metric.Builder(COMMENTED_OUT_CODE_LINES_KEY, \"Commented-out LOC\", Metric.ValueType.INT)",
        "patch": "@@ -231,7 +231,7 @@ private CoreMetrics() {\n       .create();\n \n   public static final String COMMENTED_OUT_CODE_LINES_KEY = \"commented_out_code_lines\";\n-  public static final Metric COMMENTED_OUT_CODE_LINES = new Metric.Builder(COMMENTED_OUT_CODE_LINES_KEY, \"Commented LOCs\", Metric.ValueType.INT)\n+  public static final Metric COMMENTED_OUT_CODE_LINES = new Metric.Builder(COMMENTED_OUT_CODE_LINES_KEY, \"Commented-out LOC\", Metric.ValueType.INT)\n       .setDescription(\"Commented lines of code\")\n       .setDirection(Metric.DIRECTION_WORST)\n       .setQualitative(true)"
    },
    {
        "commit_id": "b103c3a4830a88a0721456571e7472dd6a96b054",
        "commit_message": "SONAR-2607 Fix permalink in ReviewEmailTemplate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b103c3a4830a88a0721456571e7472dd6a96b054",
        "buggy_code": ".append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/view/\").append(reviewId).append('\\n');",
        "fixed_code": ".append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/reviews/view/\").append(reviewId).append('\\n');",
        "patch": "@@ -97,7 +97,7 @@ private void appendComment(StringBuilder sb, Notification notification) {\n   private void appendFooter(StringBuilder sb, Notification notification) {\n     String reviewId = notification.getFieldValue(\"reviewId\");\n     sb.append(\"\\n--\\n\")\n-        .append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/view/\").append(reviewId).append('\\n');\n+        .append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/reviews/view/\").append(reviewId).append('\\n');\n   }\n \n   /**"
    },
    {
        "commit_id": "6acbf886c2cc4b8f6998481e24236b1739ba079a",
        "commit_message": "Fix CloseReviewsDecorator for Derby and move Review entity from sonar-plugin-api to sonar-core",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6acbf886c2cc4b8f6998481e24236b1739ba079a",
        "buggy_code": "package org.sonar.api.database.model;",
        "fixed_code": "package org.sonar.jpa.entity;",
        "patch": "@@ -17,7 +17,7 @@\n  * License along with Sonar; if not, write to the Free Software\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02\n  */\n-package org.sonar.api.database.model;\n+package org.sonar.jpa.entity;\n \n import java.util.Date;\n "
    },
    {
        "commit_id": "e7675ba5c8c7d6bb7550fba092dfb1a9abd3ec5c",
        "commit_message": "SONAR-2607 Provide email notifications on review changes\n\n* Update CloseReviewsDecorator to send notifications\n\n* Fix permalink in ReviewEmailTemplate",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e7675ba5c8c7d6bb7550fba092dfb1a9abd3ec5c",
        "buggy_code": ".append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/\").append(reviewId).append('\\n');",
        "fixed_code": ".append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/view/\").append(reviewId).append('\\n');",
        "patch": "@@ -97,7 +97,7 @@ private void appendComment(StringBuilder sb, Notification notification) {\n   private void appendFooter(StringBuilder sb, Notification notification) {\n     String reviewId = notification.getFieldValue(\"reviewId\");\n     sb.append(\"\\n--\\n\")\n-        .append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/\").append(reviewId).append('\\n');\n+        .append(\"See it in Sonar: \").append(configuration.getServerBaseURL()).append(\"/review/view/\").append(reviewId).append('\\n');\n   }\n \n   /**"
    },
    {
        "commit_id": "595485bb2bf8b327cb50e24597894d97d28c178d",
        "commit_message": "SONAR-2404 Refactor reviews API - web-service and sonar-ws-client\n\n* Remove ability to edit and delete comments.\n\n* Fix bug - comment should be transferred in body.\n\n* Fix XML/JSON output - new attribute 'resolution'.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/595485bb2bf8b327cb50e24597894d97d28c178d",
        "buggy_code": "review.setFalsePositive(utils.getBoolean(json, \"falsePositive\"));",
        "fixed_code": "review.setResolution(utils.getString(json, \"resolution\"));",
        "patch": "@@ -42,7 +42,7 @@ protected Review parse(Object json) {\n     review.setSeverity(utils.getString(json, \"severity\"));\n     review.setResourceKee(utils.getString(json, \"resource\"));\n     review.setLine(utils.getInteger(json, \"line\"));\n-    review.setFalsePositive(utils.getBoolean(json, \"falsePositive\"));\n+    review.setResolution(utils.getString(json, \"resolution\"));\n     review.setViolationId(utils.getLong(json, \"violationId\"));\n     review.setType(utils.getString(json, \"type\"));\n "
    },
    {
        "commit_id": "bf4635f2145ce38ee3a198c4fb5ea9438793647c",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/bf4635f2145ce38ee3a198c4fb5ea9438793647c",
        "buggy_code": "private static Logger LOG = LoggerFactory.getLogger(JdbcDriverHolder.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(JdbcDriverHolder.class);",
        "patch": "@@ -36,7 +36,7 @@\n  */\n public class JdbcDriverHolder {\n \n-  private static Logger LOG = LoggerFactory.getLogger(JdbcDriverHolder.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(JdbcDriverHolder.class);\n   private JdbcDriverClassLoader classLoader;\n \n   public JdbcDriverHolder(ArtifactDownloader extensionDownloader) {"
    },
    {
        "commit_id": "eae41c396cc953fe2d3afff2987883d87a200a86",
        "commit_message": "Fix compatibility with ant task",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/eae41c396cc953fe2d3afff2987883d87a200a86",
        "buggy_code": "return new ProjectDefinition((Properties)properties.clone());",
        "fixed_code": "return new ProjectDefinition(properties);",
        "patch": "@@ -59,7 +59,7 @@ private ProjectDefinition(Properties p) {\n   }\n \n   public static ProjectDefinition create(Properties properties) {\n-    return new ProjectDefinition((Properties)properties.clone());\n+    return new ProjectDefinition(properties);\n   }\n \n   public static ProjectDefinition create() {"
    },
    {
        "commit_id": "49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "buggy_code": "if (childrenMeasures != null && childrenMeasures.size() > 0) {",
        "fixed_code": "if (childrenMeasures != null && !childrenMeasures.isEmpty()) {",
        "patch": "@@ -70,7 +70,7 @@ private boolean isPositive(Double d, boolean strict) {\n \n   private Double sumChildren(DecoratorContext jobContext, Metric metric) {\n     Collection<Measure> childrenMeasures = jobContext.getChildrenMeasures(metric);\n-    if (childrenMeasures != null && childrenMeasures.size() > 0) {\n+    if (childrenMeasures != null && !childrenMeasures.isEmpty()) {\n       Double sum = 0.0;\n       boolean hasChildrenMeasures = false;\n       for (Measure measure : childrenMeasures) {"
    },
    {
        "commit_id": "49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "buggy_code": "if (idsToDelete.size() > 0) {",
        "fixed_code": "if (!idsToDelete.isEmpty()) {",
        "patch": "@@ -42,7 +42,7 @@ public void purge(PurgeContext context) {\n     Query query = getSession().createQuery(\"SELECT r1.id FROM \" + ResourceModel.class.getSimpleName() +\n         \" r1 WHERE r1.rootId IS NOT NULL AND NOT EXISTS(FROM \" + ResourceModel.class.getSimpleName() + \" r2 WHERE r1.rootId=r2.id)\");\n     List<Integer> idsToDelete = query.getResultList();\n-    if (idsToDelete.size() > 0) {\n+    if (!idsToDelete.isEmpty()) {\n       PurgeUtils.executeQuery(getSession(), \"\", idsToDelete, \"DELETE FROM \" + ResourceModel.class.getSimpleName() + \" WHERE id in (:ids)\");\n     }\n   }"
    },
    {
        "commit_id": "49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "buggy_code": "return qualifiers != null && qualifiers.size() > 0;",
        "fixed_code": "return qualifiers != null && !qualifiers.isEmpty();",
        "patch": "@@ -121,7 +121,7 @@ public Set<String> getQualifiers() {\n   }\n \n   public boolean hasQualifiers() {\n-    return qualifiers != null && qualifiers.size() > 0;\n+    return qualifiers != null && !qualifiers.isEmpty();\n   }\n \n   public Filter setQualifiers(Set<String> qualifiers) {"
    },
    {
        "commit_id": "49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/49d5f33b357d2a49cee0f2a511cd354a21ec6398",
        "buggy_code": "return PAGES;",
        "fixed_code": "return PAGES.clone();",
        "patch": "@@ -31,7 +31,7 @@ public final class DefaultPages {\n   private static final View[] PAGES = {new SourceTab(), new CoverageTab(), new ViolationsTab()};\n \n   public static View[] getPages() {\n-    return PAGES;\n+    return PAGES.clone();\n   }\n \n   // should be qualifier FILE only but waiting for java refactoring"
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "throw new ChannelException(e.getMessage());",
        "fixed_code": "throw new ChannelException(e.getMessage(), e);",
        "patch": "@@ -79,7 +79,7 @@ public final void pop(Appendable appendable) {\n     try {\n       appendable.append((char) pop());\n     } catch (IOException e) {\n-      throw new ChannelException(e.getMessage());\n+      throw new ChannelException(e.getMessage(), e);\n     }\n   }\n "
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "abstract List<Violation> getViolations(ViolationQuery violationQuery);",
        "fixed_code": "List<Violation> getViolations(ViolationQuery violationQuery);",
        "patch": "@@ -109,7 +109,7 @@ public interface DecoratorContext {\n    *          the request parameters specified as a {@link ViolationQuery}\n    * @return the list of violations that match those parameters\n    */\n-  abstract List<Violation> getViolations(ViolationQuery violationQuery);\n+  List<Violation> getViolations(ViolationQuery violationQuery);\n \n   /**\n    * Returns all the active (= non switched-off) violations found on the current resource."
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "public interface DecoratorExecutionEvent {",
        "fixed_code": "interface DecoratorExecutionEvent {",
        "patch": "@@ -29,7 +29,7 @@ public interface DecoratorExecutionHandler extends EventHandler {\n   /**\n    * This interface is not intended to be implemented by clients.\n    */\n-  public interface DecoratorExecutionEvent {\n+  interface DecoratorExecutionEvent {\n \n     Decorator getDecorator();\n "
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "public interface DecoratorsPhaseEvent {",
        "fixed_code": "interface DecoratorsPhaseEvent {",
        "patch": "@@ -31,7 +31,7 @@ public interface DecoratorsPhaseHandler extends EventHandler {\n   /**\n    * This interface is not intended to be implemented by clients.\n    */\n-  public interface DecoratorsPhaseEvent {\n+  interface DecoratorsPhaseEvent {\n \n     /**\n      * @return list of Decorators in the order of execution"
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "public interface ProjectAnalysisEvent {",
        "fixed_code": "interface ProjectAnalysisEvent {",
        "patch": "@@ -29,7 +29,7 @@ public interface ProjectAnalysisHandler extends EventHandler {\n   /**\n    * This interface is not intended to be implemented by clients.\n    */\n-  public interface ProjectAnalysisEvent {\n+  interface ProjectAnalysisEvent {\n \n     Project getProject();\n "
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "public interface SensorExecutionEvent {",
        "fixed_code": "interface SensorExecutionEvent {",
        "patch": "@@ -29,7 +29,7 @@ public interface SensorExecutionHandler extends EventHandler {\n   /**\n    * This interface is not intended to be implemented by clients.\n    */\n-  public interface SensorExecutionEvent {\n+  interface SensorExecutionEvent {\n \n     Sensor getSensor();\n "
    },
    {
        "commit_id": "a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a44965f6bdee2dcb6b96b7a0cae1ef2a1f8604c9",
        "buggy_code": "public interface SensorsPhaseEvent {",
        "fixed_code": "interface SensorsPhaseEvent {",
        "patch": "@@ -31,7 +31,7 @@ public interface SensorsPhaseHandler extends EventHandler {\n   /**\n    * This interface is not intended to be implemented by clients.\n    */\n-  public interface SensorsPhaseEvent {\n+  interface SensorsPhaseEvent {\n \n     /**\n      * @return list of Sensors in the order of execution"
    },
    {
        "commit_id": "2dbed652688d87b303f7821ea619ed36ba654a19",
        "commit_message": "SONAR-1922 Add a kind of version control for quality profiles\n\nApply patch, which was contributed by Julien Henry:\n\n* Following algorithm was implemented: Every profile starts with\n  version=1 and used=false. As soon as there is an analysis of a\n  project, the involved profile is set to used=true. Every modification\n  to a quality profile (activation, deactivation or modification of\n  rule) is logged in DB in dedicated tables. When a modification is done\n  on a profile that is used=true, then version number is increased and\n  profile is set to used=false.\n\n* Introduced new metric to store profile version, which was used during\n  analysis.\n\n* If profile for project is different than the one used during previous\n  analysis, then event would be created.\n\n* Introduced new tab 'changelog' for profiles.\n\nFollowing fixes were applied on original patch:\n\n* Index name limited to 30 characters in Oracle DB, so names were\n  reduced.\n\n* Field ActiveRuleChange.profileVersion never read locally, because\n  ruby read it directly from DB, so getter added.\n\n* Direction doesn't make sense for 'profile_version' metric, so was\n  removed.\n\n* Fixed ProfileEventsSensor: it seems that TimeMachine not guarantee\n  that the order of measures would be the same as in query, so we should\n  perform two sequential queries.\n\n* Fixed handling of null values during migration.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2dbed652688d87b303f7821ea619ed36ba654a19",
        "buggy_code": "public static final int LAST_VERSION = 201;",
        "fixed_code": "public static final int LAST_VERSION = 202;",
        "patch": "@@ -40,7 +40,7 @@ public class SchemaMigration {\n       - complete the Derby DDL file used for unit tests : sonar-testing-harness/src/main/resources/org/sonar/test/persistence/sonar-test.ddl\n \n    */\n-  public static final int LAST_VERSION = 201;\n+  public static final int LAST_VERSION = 202;\n \n   public final static String TABLE_NAME = \"schema_migrations\";\n "
    },
    {
        "commit_id": "235d3e745d68bf549ce0c5353d76f936572f7c93",
        "commit_message": "SONAR-2469 fix typo in name of InstantiationStrategy class",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/235d3e745d68bf549ce0c5353d76f936572f7c93",
        "buggy_code": "\"<ul><li>Private empty constructors that are intentionally used to prevent any direct instanciation of a class.</li>\" +",
        "fixed_code": "\"<ul><li>Private empty constructors that are intentionally used to prevent any direct instantiation of a class.</li>\" +",
        "patch": "@@ -33,7 +33,7 @@\n         \"This helps in maintenance by decreasing the maintained code size, \" +\n         \"making it easier to understand the program and preventing bugs from being introduced.</p>\" +\n         \"<p>In the following two cases, private methods are not considered as dead code by Sonar :</p>\" +\n-        \"<ul><li>Private empty constructors that are intentionally used to prevent any direct instanciation of a class.</li>\" +\n+        \"<ul><li>Private empty constructors that are intentionally used to prevent any direct instantiation of a class.</li>\" +\n         \"<li>Private methods : readObject(...), writeObject(...), writeReplace(...), readResolve(...) \" +\n         \"which can contractually be used when implementing the Serializable interface.</li></ul>\")\n public class UnusedPrivateMethodCheck extends BytecodeCheck {"
    },
    {
        "commit_id": "235d3e745d68bf549ce0c5353d76f936572f7c93",
        "commit_message": "SONAR-2469 fix typo in name of InstantiationStrategy class",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/235d3e745d68bf549ce0c5353d76f936572f7c93",
        "buggy_code": "throw new SonarException(\"Unable to instanciate dialect class\", e);",
        "fixed_code": "throw new SonarException(\"Unable to instantiate dialect class\", e);",
        "patch": "@@ -82,7 +82,7 @@ private static Dialect getDialectByClassname(String dialectId) {\n     } catch (ClassNotFoundException e) {\n       // dialectId was not a class name :)\n     } catch (Exception e) {\n-      throw new SonarException(\"Unable to instanciate dialect class\", e);\n+      throw new SonarException(\"Unable to instantiate dialect class\", e);\n     }\n     return null;\n   }"
    },
    {
        "commit_id": "27b6358cba309925505e09f4d44d3157435bf096",
        "commit_message": "SONAR-2469 refactor Module\n\nSONAR-2469 instanciation strategy of batch extensions\n\nSONAR-2469 fix initialization of project",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/27b6358cba309925505e09f4d44d3157435bf096",
        "buggy_code": "RulesConsole console = new RulesConsole(repositories, null);",
        "fixed_code": "RulesConsole console = new RulesConsole(repositories);",
        "patch": "@@ -38,7 +38,7 @@ public void shouldIgnoreRepositoryExtensions() throws Exception {\n         new FakeRepository(\"findbugs\", \"java\"),\n         new FakeRepository(\"findbugs\", \"java\"), // for example fb-contrib\n     };\n-    RulesConsole console = new RulesConsole(repositories, null);\n+    RulesConsole console = new RulesConsole(repositories);\n \n     assertThat(console.getRepository(\"findbugs\"), not(Matchers.nullValue()));\n     assertThat(console.getRepositoriesByLanguage(\"java\").size(), is(1));"
    },
    {
        "commit_id": "96f4cf7c9c15947e75b769cf758da49ea15929a6",
        "commit_message": "SONAR-2473 Fix SQL request to prevent \"closing\" again a review",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/96f4cf7c9c15947e75b769cf758da49ea15929a6",
        "buggy_code": "return \"UPDATE reviews SET status='CLOSED', updated_at=CURRENT_TIMESTAMP WHERE resource_id = \" + resourceId",
        "fixed_code": "return \"UPDATE reviews SET status='CLOSED', updated_at=CURRENT_TIMESTAMP WHERE status='OPEN' AND resource_id = \" + resourceId",
        "patch": "@@ -75,7 +75,7 @@ public void decorate(Resource resource, DecoratorContext context) {\n   }\n \n   protected String generateUpdateOnResourceSqlRequest(int resourceId, int snapshotId) {\n-    return \"UPDATE reviews SET status='CLOSED', updated_at=CURRENT_TIMESTAMP WHERE resource_id = \" + resourceId\n+    return \"UPDATE reviews SET status='CLOSED', updated_at=CURRENT_TIMESTAMP WHERE status='OPEN' AND resource_id = \" + resourceId\n         + \" AND rule_failure_permanent_id NOT IN \" + \"(SELECT permanent_id FROM rule_failures WHERE snapshot_id = \" + snapshotId\n         + \" AND permanent_id IS NOT NULL)\";\n   }"
    },
    {
        "commit_id": "ff3117718a1642e99d97416b88b2db702d1b96f8",
        "commit_message": "Fix merge of release 2.8",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ff3117718a1642e99d97416b88b2db702d1b96f8",
        "buggy_code": "ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project.getKey());",
        "fixed_code": "ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project);",
        "patch": "@@ -104,7 +104,7 @@ public ProjectComponents(Project project) {\n \n     @Override\n     protected void configure() {\n-      ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project.getKey());\n+      ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project);\n       addComponent(projectDefinition);\n       for (Object component : projectDefinition.getContainerExtensions()) {\n         addComponent(component);"
    },
    {
        "commit_id": "82e4778aaf039f21d1869011b84984d820712ddb",
        "commit_message": "Fix association between Project and ProjectDefinition",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/82e4778aaf039f21d1869011b84984d820712ddb",
        "buggy_code": "ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project.getKey());",
        "fixed_code": "ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project);",
        "patch": "@@ -104,7 +104,7 @@ public ProjectComponents(Project project) {\n \n     @Override\n     protected void configure() {\n-      ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project.getKey());\n+      ProjectDefinition projectDefinition = getComponent(ProjectTree.class).getProjectDefinition(project);\n       addComponent(projectDefinition);\n       for (Object component : projectDefinition.getContainerExtensions()) {\n         addComponent(component);"
    },
    {
        "commit_id": "fc635a302c1d7b12f9d504d1315d82b247eef716",
        "commit_message": "Fix compatibility with Oracle",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fc635a302c1d7b12f9d504d1315d82b247eef716",
        "buggy_code": "return \"UPDATE reviews SET status='CLOSED' \" + \"WHERE resource_id = \" + resourceId + \" AND rule_failure_permanent_id NOT IN \"",
        "fixed_code": "return \"UPDATE reviews SET status='CLOSED' WHERE resource_id = \" + resourceId + \" AND rule_failure_permanent_id NOT IN \"",
        "patch": "@@ -66,7 +66,7 @@ public void decorate(Resource resource, DecoratorContext context) {\n   }\n \n   String generateSqlRequest(int resourceId, int snapshotId) {\n-    return \"UPDATE reviews SET status='CLOSED' \" + \"WHERE resource_id = \" + resourceId + \" AND rule_failure_permanent_id NOT IN \"\n+    return \"UPDATE reviews SET status='CLOSED' WHERE resource_id = \" + resourceId + \" AND rule_failure_permanent_id NOT IN \"\n         + \"(SELECT permanent_id FROM rule_failures WHERE snapshot_id = \" + snapshotId + \" AND permanent_id IS NOT NULL)\";\n   }\n "
    },
    {
        "commit_id": "804816f9434ba22951a4965155df0837d21f5d22",
        "commit_message": "SONAR-2298 Fix bug, when root project not a first one in Maven reactor\n\nThis situation shouldn't lead to partial analysis.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/804816f9434ba22951a4965155df0837d21f5d22",
        "buggy_code": "collectProjects(MavenProjectConverter.convert(poms), definitions);",
        "fixed_code": "collectProjects(MavenProjectConverter.convert(poms, poms.get(0)), definitions);",
        "patch": "@@ -53,7 +53,7 @@ public ProjectTree(Reactor sonarReactor, DatabaseSession databaseSession) {\n   protected ProjectTree(ProjectBuilder projectBuilder, List<MavenProject> poms) {\n     this.projectBuilder = projectBuilder;\n     definitions = Lists.newArrayList();\n-    collectProjects(MavenProjectConverter.convert(poms), definitions);\n+    collectProjects(MavenProjectConverter.convert(poms, poms.get(0)), definitions);\n   }\n \n   /**"
    },
    {
        "commit_id": "804816f9434ba22951a4965155df0837d21f5d22",
        "commit_message": "SONAR-2298 Fix bug, when root project not a first one in Maven reactor\n\nThis situation shouldn't lead to partial analysis.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/804816f9434ba22951a4965155df0837d21f5d22",
        "buggy_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());",
        "fixed_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);",
        "patch": "@@ -145,7 +145,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n   }\n \n   private void executeBatch() throws MojoExecutionException {\n-    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());\n+    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);\n     Reactor reactor = new Reactor(def);\n \n     Batch batch = new Batch(getInitialConfiguration(), reactor, session, project,"
    },
    {
        "commit_id": "804816f9434ba22951a4965155df0837d21f5d22",
        "commit_message": "SONAR-2298 Fix bug, when root project not a first one in Maven reactor\n\nThis situation shouldn't lead to partial analysis.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/804816f9434ba22951a4965155df0837d21f5d22",
        "buggy_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());",
        "fixed_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);",
        "patch": "@@ -145,7 +145,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n   }\n \n   private void executeBatch() throws MojoExecutionException {\n-    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());\n+    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);\n     Reactor reactor = new Reactor(def);\n \n     Batch batch = new Batch(getInitialConfiguration(),"
    },
    {
        "commit_id": "804816f9434ba22951a4965155df0837d21f5d22",
        "commit_message": "SONAR-2298 Fix bug, when root project not a first one in Maven reactor\n\nThis situation shouldn't lead to partial analysis.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/804816f9434ba22951a4965155df0837d21f5d22",
        "buggy_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());",
        "fixed_code": "ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);",
        "patch": "@@ -138,7 +138,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n   }\n \n   private void executeBatch() throws MojoExecutionException {\n-    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects());\n+    ProjectDefinition def = MavenProjectConverter.convert(session.getSortedProjects(), project);\n     Reactor reactor = new Reactor(def);\n \n     Batch batch = new Batch(getInitialConfiguration(),"
    },
    {
        "commit_id": "1f6a6958150484a5a0dc766b4d794f6ae4bb839a",
        "commit_message": "SONAR-2381 Fix error in Review WS client",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f6a6958150484a5a0dc766b4d794f6ae4bb839a",
        "buggy_code": "return new ReviewQuery().setId(new Long(resource.getId()));",
        "fixed_code": "return new ReviewQuery().setResourceKeysOrIds(resource.getId().toString());",
        "patch": "@@ -230,7 +230,7 @@ public Class<Review> getModelClass() {\n   }\n \n   public static ReviewQuery createForResource(Resource resource) {\n-    return new ReviewQuery().setId(new Long(resource.getId()));\n+    return new ReviewQuery().setResourceKeysOrIds(resource.getId().toString());\n   }\n \n }"
    },
    {
        "commit_id": "1f6a6958150484a5a0dc766b4d794f6ae4bb839a",
        "commit_message": "SONAR-2381 Fix error in Review WS client",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1f6a6958150484a5a0dc766b4d794f6ae4bb839a",
        "buggy_code": "assertThat(query.getUrl(), is(\"/api/reviews?id=69&\"));",
        "fixed_code": "assertThat(query.getUrl(), is(\"/api/reviews?resources=69&\"));",
        "patch": "@@ -33,7 +33,7 @@ public void testSimpleQueryForResource() {\n     Resource resource = mock(Resource.class);\n     when(resource.getId()).thenReturn(69);\n     ReviewQuery query = ReviewQuery.createForResource(resource);\n-    assertThat(query.getUrl(), is(\"/api/reviews?id=69&\"));\n+    assertThat(query.getUrl(), is(\"/api/reviews?resources=69&\"));\n     assertThat(query.getModelClass().getName(), is(Review.class.getName()));\n   }\n "
    },
    {
        "commit_id": "71e1d5887f78d55989ec3383d9138a870c24c9ca",
        "commit_message": "Slightly improve fix bug of violation tracking when past violation has no checksum.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/71e1d5887f78d55989ec3383d9138a870c24c9ca",
        "buggy_code": "return pastViolation.getLine() == newViolation.getLineId();",
        "fixed_code": "return pastViolation.getLine() == newViolation.getLineId(); //When lines are null, we also return true",
        "patch": "@@ -161,7 +161,7 @@ private boolean isSameChecksum(Violation newViolation, RuleFailureModel pastViol\n   }\n \n   private boolean isSameLine(Violation newViolation, RuleFailureModel pastViolation) {\n-    return pastViolation.getLine() == newViolation.getLineId();\n+    return pastViolation.getLine() == newViolation.getLineId(); //When lines are null, we also return true\n   }\n \n   private boolean isSameMessage(Violation newViolation, RuleFailureModel pastViolation) {"
    },
    {
        "commit_id": "c22c2f412714a7d9ff8edee8a07d5589fc250f3b",
        "commit_message": "Fix NPE",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c22c2f412714a7d9ff8edee8a07d5589fc250f3b",
        "buggy_code": "if (d >= 0) {",
        "fixed_code": "if (d == null || d >= 0) {",
        "patch": "@@ -194,7 +194,7 @@ public Double getCost() {\n    * @since 2.4\n    */\n   public Violation setCost(Double d) {\n-    if (d >= 0) {\n+    if (d == null || d >= 0) {\n       this.cost = d;\n       return this;\n     } else {"
    },
    {
        "commit_id": "f4e12a9527a48da48784dce1345f1014509c19e9",
        "commit_message": "Fix scheduling of ViolationDecorator\n\nViolationPersisterDecorator must be executed before computing measures on violations, so the flag switched_off is correctly loaded from database.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f4e12a9527a48da48784dce1345f1014509c19e9",
        "buggy_code": "@DependsUpon(\"ViolationPersisterDecorator\")",
        "fixed_code": "@DependsUpon(ViolationPersisterDecorator.BARRIER)",
        "patch": "@@ -39,7 +39,7 @@\n import java.util.*;\n \n /* temporary workaround - the attributes classes() should be used but it is buggy */\n-@DependsUpon(\"ViolationPersisterDecorator\")\n+@DependsUpon(ViolationPersisterDecorator.BARRIER)\n public class NewViolationsDecorator implements Decorator {\n \n   private TimeMachineConfiguration timeMachineConfiguration;"
    },
    {
        "commit_id": "91b014e384b0c4d776c807cbd27dc92a70e708d3",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/91b014e384b0c4d776c807cbd27dc92a70e708d3",
        "buggy_code": "public class MavenProjectConverter {",
        "fixed_code": "public final class MavenProjectConverter {",
        "patch": "@@ -31,7 +31,7 @@\n import java.util.Map;\n import java.util.Properties;\n \n-public class MavenProjectConverter {\n+public final class MavenProjectConverter {\n \n   private MavenProjectConverter() {\n   }"
    },
    {
        "commit_id": "cb7d0ffc0a45a23674064a956414763372dba86d",
        "commit_message": "SONAR-2384 Fix a bug on HtmlListChannel which was due to CodeBuffer.length() method and make the HtmlEmphasisChannel handle sentence",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/cb7d0ffc0a45a23674064a956414763372dba86d",
        "buggy_code": "super(\"\\\\*[^\\n\\r\\\\*\\\\s]++\\\\*\");",
        "fixed_code": "super(\"\\\\*[^\\\\s\\\\*][^\\n\\r]+?[^\\\\s\\\\*]\\\\*\");",
        "patch": "@@ -29,7 +29,7 @@\n class HtmlEmphasisChannel extends RegexChannel<MarkdownOutput> {\n \n   public HtmlEmphasisChannel() {\n-    super(\"\\\\*[^\\n\\r\\\\*\\\\s]++\\\\*\");\n+    super(\"\\\\*[^\\\\s\\\\*][^\\n\\r]+?[^\\\\s\\\\*]\\\\*\");\n   }\n \n   @Override"
    },
    {
        "commit_id": "1d7e1e31407a49f365b811145b566754250e416a",
        "commit_message": "fix SONAR-2295 : Line number representation in source code view are wrong for files that use mixed line endings",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1d7e1e31407a49f365b811145b566754250e416a",
        "buggy_code": "CodeReader code = new CodeReader(\"\\n\\r\\n\");",
        "fixed_code": "CodeReader code = new CodeReader(\"\\r\\n\\r\");",
        "patch": "@@ -80,7 +80,7 @@ public void endOfFileTagWithoutHeader() {\n   public void shouldAddTagsBetweenEachLine() {\n     HtmlOptions options = new HtmlOptions().setGenerateTable(true).setGenerateHtmlHeader(false);\n     HtmlDecorator decorator = new HtmlDecorator(options);\n-    CodeReader code = new CodeReader(\"\\n\\r\\n\");\n+    CodeReader code = new CodeReader(\"\\r\\n\\r\");\n     HtmlCodeBuilder output = new HtmlCodeBuilder();\n \n     output.appendWithoutTransforming(decorator.getTagBeginOfFile());"
    },
    {
        "commit_id": "df9f736e0e8c9ad2792a242e03759d59548cd8fc",
        "commit_message": "Fix typo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/df9f736e0e8c9ad2792a242e03759d59548cd8fc",
        "buggy_code": "logger.error(\"Error while reading Obeo analyzer output\", ioe);",
        "fixed_code": "logger.error(\"Error while reading stream\", ioe);",
        "patch": "@@ -107,7 +107,7 @@ public void run() {\n           logger.info(line);\n         }\n       } catch (IOException ioe) {\n-        logger.error(\"Error while reading Obeo analyzer output\", ioe);\n+        logger.error(\"Error while reading stream\", ioe);\n \n       } finally {\n         IOUtils.closeQuietly(br);"
    },
    {
        "commit_id": "6a8ddc22378fcc984ae40e5451ade635945ca70e",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6a8ddc22378fcc984ae40e5451ade635945ca70e",
        "buggy_code": "public static interface ZipEntryFilter {",
        "fixed_code": "public interface ZipEntryFilter {",
        "patch": "@@ -157,7 +157,7 @@ private static void zip(File file, ZipOutputStream out, String prefix) throws IO\n     }\n   }\n \n-  public static interface ZipEntryFilter {\n+  public interface ZipEntryFilter {\n     boolean accept(ZipEntry entry);\n   }\n "
    },
    {
        "commit_id": "9380e275b3c6267ef3b958e5a0127dd924cab493",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9380e275b3c6267ef3b958e5a0127dd924cab493",
        "buggy_code": "private void configureValues(DefaultCategoryDataset dataset, String[] series, String xSuffix) {",
        "fixed_code": "static void configureValues(DefaultCategoryDataset dataset, String[] series, String xSuffix) {",
        "patch": "@@ -69,7 +69,7 @@ private CategoryPlot generateJFreeChart(ChartParameters params) {\n     return plot;\n   }\n \n-  private void configureValues(DefaultCategoryDataset dataset, String[] series, String xSuffix) {\n+  static void configureValues(DefaultCategoryDataset dataset, String[] series, String xSuffix) {\n     int index = 0;\n     while (index < series.length) {\n       String[] pairs = StringUtils.split(series[index], \";\");"
    },
    {
        "commit_id": "9380e275b3c6267ef3b958e5a0127dd924cab493",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9380e275b3c6267ef3b958e5a0127dd924cab493",
        "buggy_code": "case 5: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_5; break;",
        "fixed_code": "case 5: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_5; break;// NOSONAR false-positive: constant 5 is the same than 4 (empty string)",
        "patch": "@@ -64,7 +64,7 @@ static String getPropertyValue(Configuration conf, int index) {\n       case 2: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_2; break;\n       case 3: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_3; break;\n       case 4: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_4; break;\n-      case 5: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_5; break;\n+      case 5: defaultValue = CoreProperties.TIMEMACHINE_DEFAULT_PERIOD_5; break;// NOSONAR false-positive: constant 5 is the same than 4 (empty string)\n     }\n     return conf.getString(CoreProperties.TIMEMACHINE_PERIOD_PREFIX + index, defaultValue);\n   }"
    },
    {
        "commit_id": "9380e275b3c6267ef3b958e5a0127dd924cab493",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9380e275b3c6267ef3b958e5a0127dd924cab493",
        "buggy_code": "private static String[] IGNORE = { \"derby\", \"jtds\", \"mysql\", \"postgresql\", \"jruby\", \"jfreechart\", \"eastwood\", \"jetty\" };",
        "fixed_code": "private static final String[] IGNORE = { \"derby\", \"jtds\", \"mysql\", \"postgresql\", \"jruby\", \"jfreechart\", \"eastwood\", \"jetty\" };",
        "patch": "@@ -96,7 +96,7 @@ List<String> getLibs() {\n     return libs;\n   }\n \n-  private static String[] IGNORE = { \"derby\", \"jtds\", \"mysql\", \"postgresql\", \"jruby\", \"jfreechart\", \"eastwood\", \"jetty\" };\n+  private static final String[] IGNORE = { \"derby\", \"jtds\", \"mysql\", \"postgresql\", \"jruby\", \"jfreechart\", \"eastwood\", \"jetty\" };\n \n   /**\n    * Dirty hack to disable downloading for certain files."
    },
    {
        "commit_id": "6217c0d3e45b7534eb9c1860bbe0599376d797e0",
        "commit_message": "fix CI",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6217c0d3e45b7534eb9c1860bbe0599376d797e0",
        "buggy_code": "private static interface ZipEntryFilter {",
        "fixed_code": "public static interface ZipEntryFilter {",
        "patch": "@@ -157,7 +157,7 @@ private static void zip(File file, ZipOutputStream out, String prefix) throws IO\n     }\n   }\n \n-  private static interface ZipEntryFilter {\n+  public static interface ZipEntryFilter {\n     boolean accept(ZipEntry entry);\n   }\n "
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "private final Module init(MutablePicoContainer container) {",
        "fixed_code": "private Module init(MutablePicoContainer container) {",
        "patch": "@@ -46,7 +46,7 @@ public final Module init() {\n   /**\n    * @return this\n    */\n-  private final Module init(MutablePicoContainer container) {\n+  private Module init(MutablePicoContainer container) {\n     this.container = container;\n     configure();\n     return this;"
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "throw new SonarException(\"The resource '\" + resource.getEffectiveKey() + \"' is duplicated in database.\");",
        "fixed_code": "throw new SonarException(\"The resource '\" + resource.getEffectiveKey() + \"' is duplicated in database.\", e);",
        "patch": "@@ -228,7 +228,7 @@ private ResourceModel findOrCreateModel(Resource resource) {\n       return model;\n \n     } catch (NonUniqueResultException e) {\n-      throw new SonarException(\"The resource '\" + resource.getEffectiveKey() + \"' is duplicated in database.\");\n+      throw new SonarException(\"The resource '\" + resource.getEffectiveKey() + \"' is duplicated in database.\", e);\n     }\n   }\n "
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "void saveSource(Resource reference, String source) throws DuplicatedSourceException;",
        "fixed_code": "void saveSource(Resource reference, String source);",
        "patch": "@@ -194,7 +194,7 @@ public interface SensorContext {\n    *          if the source has already been set on this resource\n    * @since 1.10. Returns a boolean since 2.6.\n    */\n-  void saveSource(Resource reference, String source) throws DuplicatedSourceException;\n+  void saveSource(Resource reference, String source);\n \n   // ----------- LINKS --------------\n "
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "throw new SonarException(\"Can not set the value of the field \" + field + \" in the class: \" + check.getClass().getName());",
        "fixed_code": "throw new SonarException(\"Can not set the value of the field \" + field + \" in the class: \" + check.getClass().getName(), e);",
        "patch": "@@ -138,7 +138,7 @@ private void configureField(Object check, Field field, String value) {\n         throw new SonarException(\"The type of the field \" + field + \" is not supported: \" + field.getType());\n       }\n     } catch (IllegalAccessException e) {\n-      throw new SonarException(\"Can not set the value of the field \" + field + \" in the class: \" + check.getClass().getName());\n+      throw new SonarException(\"Can not set the value of the field \" + field + \" in the class: \" + check.getClass().getName(), e);\n     }\n   }\n "
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "if (result.trim().length() == 0) {",
        "fixed_code": "if (StringUtils.isBlank(result)) {",
        "patch": "@@ -96,7 +96,7 @@ public String getMavenRepositoryUrl() {\n \n   protected String executeAction(String action) {\n     String result = getRemoteContent(url + action);\n-    if (result.trim().length() == 0) {\n+    if (StringUtils.isBlank(result)) {\n       throw new ServerApiEmptyContentException(\"Empty \" + action + \" returned from server\");\n     }\n     return result;"
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "public static interface ZipEntryFilter {",
        "fixed_code": "private static interface ZipEntryFilter {",
        "patch": "@@ -157,7 +157,7 @@ private static void zip(File file, ZipOutputStream out, String prefix) throws IO\n     }\n   }\n \n-  public static interface ZipEntryFilter {\n+  private static interface ZipEntryFilter {\n     boolean accept(ZipEntry entry);\n   }\n "
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "public class ProfileQuery extends Query<Profile> {",
        "fixed_code": "public final class ProfileQuery extends Query<Profile> {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 2.7\n  */\n-public class ProfileQuery extends Query<Profile> {\n+public final class ProfileQuery extends Query<Profile> {\n   public static final String BASE_URL = \"/api/profiles\";\n \n   private String language;"
    },
    {
        "commit_id": "d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "commit_message": "Fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/d4ae5228bb668e65baa644b52d41286d5f3d55cd",
        "buggy_code": "public class UpdateCenterQuery extends Query<Plugin> {",
        "fixed_code": "public final class UpdateCenterQuery extends Query<Plugin> {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 2.4\n  */\n-public class UpdateCenterQuery extends Query<Plugin> {\n+public final class UpdateCenterQuery extends Query<Plugin> {\n \n   public static final String BASE_URL = \"/api/updatecenter/\";\n   private String action;"
    },
    {
        "commit_id": "2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "commit_message": "fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "buggy_code": "this.edges = edges.toArray(new Edge[0]);",
        "fixed_code": "this.edges = edges.toArray(new Edge[edges.size()]);",
        "patch": "@@ -27,7 +27,7 @@ public class Cycle {\n   private int hashcode = 0;\n \n   public Cycle(List<Edge> edges) {\n-    this.edges = edges.toArray(new Edge[0]);\n+    this.edges = edges.toArray(new Edge[edges.size()]);\n     for(Edge edge : edges) {\n       hashcode += edge.hashCode();\n     }"
    },
    {
        "commit_id": "2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "commit_message": "fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "buggy_code": "if (!(o.getClass().equals(Measure.class))) {",
        "fixed_code": "if (o == null || getClass() != o.getClass()) {",
        "patch": "@@ -598,7 +598,7 @@ public boolean equals(Object o) {\n     if (this == o) {\n       return true;\n     }\n-    if (!(o.getClass().equals(Measure.class))) {\n+    if (o == null || getClass() != o.getClass()) {\n       return false;\n     }\n "
    },
    {
        "commit_id": "2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "commit_message": "fix coding violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2b560c35ab24a4f7db27d7e180a64e830b9a56a1",
        "buggy_code": "if (defaultTabAnnotation == null || defaultTabAnnotation.metrics().length == 0) {",
        "fixed_code": "if (defaultTabAnnotation.metrics().length == 0) {",
        "patch": "@@ -73,7 +73,7 @@ public ViewProxy(final V view) {\n \n     DefaultTab defaultTabAnnotation = AnnotationUtils.getClassAnnotation(view, DefaultTab.class);\n     if (defaultTabAnnotation != null) {\n-      if (defaultTabAnnotation == null || defaultTabAnnotation.metrics().length == 0) {\n+      if (defaultTabAnnotation.metrics().length == 0) {\n         isDefaultTab = true;\n         defaultForMetrics = new String[0];\n "
    },
    {
        "commit_id": "e04578cf0d52ba18f2902ad353443e6035d388fd",
        "commit_message": "fix SONAR-2267 : The \"duplicated blocks\" measure on each file is not correct when a duplication involved more than two blocks",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e04578cf0d52ba18f2902ad353443e6035d388fd",
        "buggy_code": "verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_BLOCKS, 1d);",
        "fixed_code": "verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_BLOCKS, 2d);",
        "patch": "@@ -262,7 +262,7 @@ public void testDuplicationOnSameFile() throws Exception {\n \n     verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_FILES, 1d);\n     verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_LINES, 400d);\n-    verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_BLOCKS, 1d);\n+    verify(context).saveMeasure(resource1, CoreMetrics.DUPLICATED_BLOCKS, 2d);\n     verify(context).saveMeasure(\n         eq(resource1),\n         argThat(new IsMeasure(CoreMetrics.DUPLICATIONS_DATA, \"<duplications>\""
    },
    {
        "commit_id": "e93f4cb61c1777fcb8d4befa99a6810a5e8930d6",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e93f4cb61c1777fcb8d4befa99a6810a5e8930d6",
        "buggy_code": "merge.setPriority(violation.getPriority());",
        "fixed_code": "merge.setPriority(violation.getSeverity());",
        "patch": "@@ -68,7 +68,7 @@ private RuleFailureModel createModel(Violation violation) {\n   private RuleFailureModel mergeModel(Violation violation, RuleFailureModel merge) {\n     Rule rule = ruleFinder.findByKey(violation.getRule().getRepositoryKey(), violation.getRule().getKey());\n     merge.setRuleId(rule.getId());\n-    merge.setPriority(violation.getPriority());\n+    merge.setPriority(violation.getSeverity());\n     merge.setLine(violation.getLineId());\n     merge.setMessage(violation.getMessage());\n     merge.setCost(violation.getCost());"
    },
    {
        "commit_id": "e93f4cb61c1777fcb8d4befa99a6810a5e8930d6",
        "commit_message": "Fix violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e93f4cb61c1777fcb8d4befa99a6810a5e8930d6",
        "buggy_code": "StringBuilder sb = new StringBuilder(\"Decorator time:\" + SystemUtils.LINE_SEPARATOR);",
        "fixed_code": "StringBuilder sb = new StringBuilder(\"Decorator time:\").append(SystemUtils.LINE_SEPARATOR);",
        "patch": "@@ -121,7 +121,7 @@ void log() {\n     }\n \n     String getMessage() {\n-      StringBuilder sb = new StringBuilder(\"Decorator time:\" + SystemUtils.LINE_SEPARATOR);\n+      StringBuilder sb = new StringBuilder(\"Decorator time:\").append(SystemUtils.LINE_SEPARATOR);\n       for (Decorator decorator : decorators) {\n         sb.append(\"\\t\").append(decorator.toString()).append(\": \").append(durations.get(decorator)).append(\"ms\").append(SystemUtils.LINE_SEPARATOR);\n       }"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "return new StringBuilder().append(FavouriteQuery.BASE_URL).append('/').append(idOrKey).toString();",
        "fixed_code": "return new StringBuilder().append(FavouriteQuery.BASE_URL).append('/').append(encode(idOrKey)).toString();",
        "patch": "@@ -33,6 +33,6 @@ public String getIdOrKey() {\n \n   @Override\n   public String getUrl() {\n-    return new StringBuilder().append(FavouriteQuery.BASE_URL).append('/').append(idOrKey).toString();\n+    return new StringBuilder().append(FavouriteQuery.BASE_URL).append('/').append(encode(idOrKey)).toString();\n   }\n }"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "sb.append(key);",
        "fixed_code": "sb.append(encode(key));",
        "patch": "@@ -36,7 +36,7 @@ public String getUrl() {\n     StringBuilder sb = new StringBuilder(BASE_URL);\n     if (key != null && !\"\".equals(key)) {\n       sb.append(\"/\");\n-      sb.append(key);\n+      sb.append(encode(key));\n     }\n     sb.append(\"?\");\n     return sb.toString();"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "url.append(\"/\").append(key);",
        "fixed_code": "url.append(\"/\").append(encode(key));",
        "patch": "@@ -78,7 +78,7 @@ public PropertyCreateQuery setResourceKeyOrId(String resourceKeyOrId) {\n   public String getUrl() {\n     StringBuilder url = new StringBuilder();\n     url.append(PropertyQuery.BASE_URL);\n-    url.append(\"/\").append(key);\n+    url.append(\"/\").append(encode(key));\n     url.append('?');\n     appendUrlParameter(url, \"value\", value);\n     appendUrlParameter(url, \"resource\", resourceKeyOrId);"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "url.append(\"/\").append(key);",
        "fixed_code": "url.append(\"/\").append(encode(key));",
        "patch": "@@ -62,7 +62,7 @@ public PropertyDeleteQuery setResourceKeyOrId(String resourceKeyOrId) {\n   public String getUrl() {\n     StringBuilder url = new StringBuilder();\n     url.append(PropertyQuery.BASE_URL);\n-    url.append(\"/\").append(key);\n+    url.append(\"/\").append(encode(key));\n     url.append('?');\n     appendUrlParameter(url, \"resource\", resourceKeyOrId);\n     return url.toString();"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "url.append(\"/\").append(key);",
        "fixed_code": "url.append(\"/\").append(encode(key));",
        "patch": "@@ -47,7 +47,7 @@ public PropertyQuery setResourceKeyOrId(String resourceKeyOrId) {\n   public String getUrl() {\n     StringBuilder url = new StringBuilder(BASE_URL);\n     if (key != null) {\n-      url.append(\"/\").append(key);\n+      url.append(\"/\").append(encode(key));\n     }\n     url.append('?');\n     appendUrlParameter(url, \"resource\", resourceKeyOrId);"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "url.append(\"/\").append(key);",
        "fixed_code": "url.append(\"/\").append(encode(key));",
        "patch": "@@ -78,7 +78,7 @@ public PropertyUpdateQuery setResourceKeyOrId(String resourceKeyOrId) {\n   public String getUrl() {\n     StringBuilder url = new StringBuilder();\n     url.append(PropertyQuery.BASE_URL);\n-    url.append(\"/\").append(key);\n+    url.append(\"/\").append(encode(key));\n     url.append('?');\n     appendUrlParameter(url, \"resource\", resourceKeyOrId);\n     return url.toString();"
    },
    {
        "commit_id": "dd4e31cbf0384a1114344602967dfc225b450ddb",
        "commit_message": "SONAR-2204,SONAR-2259 Fix URL encoding\n\n* For correct URL encoding we must encode parameters on lower level - in Query itself,\n  but not in concrete implementation of Connector, because in Query we can distinguish\n  concrete parts of URL.\n\n* Moreover in this case any additional encoding routines in Connector are useless,\n  so were removed.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dd4e31cbf0384a1114344602967dfc225b450ddb",
        "buggy_code": "return new StringBuilder().append(UserPropertyQuery.BASE_URL).append('/').append(key).toString();",
        "fixed_code": "return new StringBuilder().append(UserPropertyQuery.BASE_URL).append('/').append(encode(key)).toString();",
        "patch": "@@ -45,6 +45,6 @@ public UserPropertyDeleteQuery setKey(String key) {\n \n   @Override\n   public String getUrl() {\n-    return new StringBuilder().append(UserPropertyQuery.BASE_URL).append('/').append(key).toString();\n+    return new StringBuilder().append(UserPropertyQuery.BASE_URL).append('/').append(encode(key)).toString();\n   }\n }"
    },
    {
        "commit_id": "70e645356d78d7b90f63bad4f40a343562d84d07",
        "commit_message": "Fix some violations",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/70e645356d78d7b90f63bad4f40a343562d84d07",
        "buggy_code": "bottomLimits[i] = new Integer(bottomLimits[i].intValue());",
        "fixed_code": "bottomLimits[i] = bottomLimits[i].intValue();",
        "patch": "@@ -77,7 +77,7 @@ private void changeDoublesToInts() {\n     }\n     if (onlyInts) {\n       for (int i=0 ; i<bottomLimits.length ; i++) {\n-        bottomLimits[i] = new Integer(bottomLimits[i].intValue());\n+        bottomLimits[i] = bottomLimits[i].intValue();\n       }\n     }\n   }"
    },
    {
        "commit_id": "9b57d0b379935e053ef050b0379c65fc32810bc1",
        "commit_message": "Fix bug on deprecated profiles",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9b57d0b379935e053ef050b0379c65fc32810bc1",
        "buggy_code": "return getRule().isEnabled();",
        "fixed_code": "return getRule()!=null && getRule().isEnabled();",
        "patch": "@@ -288,6 +288,6 @@ public Object transform(Object input) {\n    * @since 2.6\n    */\n   public boolean isEnabled() {\n-    return getRule().isEnabled();\n+    return getRule()!=null && getRule().isEnabled();\n   }\n }"
    },
    {
        "commit_id": "181202a7bcc7764e16c05f8ad93ef748dcc1985b",
        "commit_message": "Fix restoring of backups when rules not found",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/181202a7bcc7764e16c05f8ad93ef748dcc1985b",
        "buggy_code": "for (Iterator<ActiveRule> iar = profile.getActiveRules().iterator(); iar.hasNext();) {",
        "fixed_code": "for (Iterator<ActiveRule> iar = profile.getActiveRules(true).iterator(); iar.hasNext();) {",
        "patch": "@@ -113,7 +113,7 @@ private void importAlerts(RulesProfile profile) {\n   }\n \n   private void importActiveRules(RulesDao rulesDao, RulesProfile profile) {\n-    for (Iterator<ActiveRule> iar = profile.getActiveRules().iterator(); iar.hasNext();) {\n+    for (Iterator<ActiveRule> iar = profile.getActiveRules(true).iterator(); iar.hasNext();) {\n       ActiveRule activeRule = iar.next();\n       Rule unMarshalledRule = activeRule.getRule();\n       Rule matchingRuleInDb = rulesDao.getRuleByKey(unMarshalledRule.getRepositoryKey(), unMarshalledRule.getKey());"
    },
    {
        "commit_id": "356f32fa759fdf4b9801194b26fc8dcc877dc3fc",
        "commit_message": "SONAR-2137: Fix updating of past violations\n\n* Database field rule_failures.failure_level should be updatable\n\n* Change corresponding unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/356f32fa759fdf4b9801194b26fc8dcc877dc3fc",
        "buggy_code": ".setLineId(20).setCost(55.6);",
        "fixed_code": ".setLineId(20).setCost(55.6).setSeverity(RulePriority.MINOR);",
        "patch": "@@ -76,7 +76,7 @@ public void shouldSaveViolations() {\n   @Test\n   public void shouldUpdateViolation() {\n     Violation violation = Violation.create(rule1, javaFile)\n-        .setLineId(20).setCost(55.6);\n+        .setLineId(20).setCost(55.6).setSeverity(RulePriority.MINOR);\n     RuleFailureModel model = getSession().getSingleResult(RuleFailureModel.class, \"id\", 1);\n \n     violationPersister.saveOrUpdateViolation(new Project(\"project\"), violation, model, null);"
    },
    {
        "commit_id": "356f32fa759fdf4b9801194b26fc8dcc877dc3fc",
        "commit_message": "SONAR-2137: Fix updating of past violations\n\n* Database field rule_failures.failure_level should be updatable\n\n* Change corresponding unit test",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/356f32fa759fdf4b9801194b26fc8dcc877dc3fc",
        "buggy_code": "@Column(name = \"failure_level\", updatable = false, nullable = false)",
        "fixed_code": "@Column(name = \"failure_level\", updatable = true, nullable = false)",
        "patch": "@@ -42,7 +42,7 @@ public class RuleFailureModel extends BaseIdentifiable {\n   @Column(name = \"rule_id\", updatable = false, nullable = false)\n   private Integer ruleId;\n \n-  @Column(name = \"failure_level\", updatable = false, nullable = false)\n+  @Column(name = \"failure_level\", updatable = true, nullable = false)\n   @Enumerated(EnumType.ORDINAL)\n   private RulePriority priority;\n "
    },
    {
        "commit_id": "dc7c07b8458ea35d0862c6afbd8eae3ae57162e6",
        "commit_message": "Fix bug in BatchDownloader",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dc7c07b8458ea35d0862c6afbd8eae3ae57162e6",
        "buggy_code": "if (\"\".equals(lib)) {",
        "fixed_code": "if (!\"\".equals(lib)) {",
        "patch": "@@ -77,7 +77,7 @@ public List<File> downloadBatchFiles(File toDir) {\n       String libs = remoteContent(BATCH_PATH);\n \n       for (String lib : libs.split(\"\\n\")) {\n-        if (\"\".equals(lib)) {\n+        if (!\"\".equals(lib)) {\n           File file = new File(toDir, lib);\n           remoteContentToFile(BATCH_PATH + lib, file);\n           files.add(file);"
    },
    {
        "commit_id": "b8eecc041ad4aa23a3bf5cf7c8847573b125d187",
        "commit_message": "SONAR-2149 Resource filters are ignored in complexity distributions of Java projects\n\nThis issue implies SONAR-2153 : API: A decorator should override formulas",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8eecc041ad4aa23a3bf5cf7c8847573b125d187",
        "buggy_code": "assertThat(new SquidPlugin().getExtensions().size(), is(4));",
        "fixed_code": "assertThat(new SquidPlugin().getExtensions().size(), is(6));",
        "patch": "@@ -31,6 +31,6 @@ public class SquidPluginTest {\n   @Test\n   public void coverageForFun() {\n     assertThat(new SquidPlugin().getKey(), not(nullValue()));\n-    assertThat(new SquidPlugin().getExtensions().size(), is(4));\n+    assertThat(new SquidPlugin().getExtensions().size(), is(6));\n   }\n }"
    },
    {
        "commit_id": "b8eecc041ad4aa23a3bf5cf7c8847573b125d187",
        "commit_message": "SONAR-2149 Resource filters are ignored in complexity distributions of Java projects\n\nThis issue implies SONAR-2153 : API: A decorator should override formulas",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b8eecc041ad4aa23a3bf5cf7c8847573b125d187",
        "buggy_code": "JavaMethod method = JavaMethod.createRef(JavaClass.createRef(className), signature);",
        "fixed_code": "JavaMethod method = JavaMethod.createRef(JavaClass.create(className), signature);",
        "patch": "@@ -40,7 +40,7 @@ public void shouldCreateReference() {\n   public void shouldCreateReferenceFromClassAndSignature() {\n     String className = \"org.foo.Bar\";\n     String signature = \"hello(LString;)V\";\n-    JavaMethod method = JavaMethod.createRef(JavaClass.createRef(className), signature);\n+    JavaMethod method = JavaMethod.createRef(JavaClass.create(className), signature);\n     assertThat(method.getKey(), is(className + \"#\" + signature));\n     assertThat(method.getClassName(), is(className));\n     assertThat(method.getName(), is(signature));"
    },
    {
        "commit_id": "0c5aa90e0735e10c2b13c9bed6a6248cf200d2af",
        "commit_message": "Fix unit test for Windows",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0c5aa90e0735e10c2b13c9bed6a6248cf200d2af",
        "buggy_code": "String buildDirectory = new File(project.getBaseDir(), \"/target\").getAbsolutePath();",
        "fixed_code": "String buildDirectory = project.getBaseDir().getAbsolutePath() + \"/target\";",
        "patch": "@@ -90,7 +90,7 @@ public void standardDirectoriesLayout() {\n     MavenProject pom = create();\n \n     assertThat(pom.getBasedir(), is(project.getBaseDir()));\n-    String buildDirectory = new File(project.getBaseDir(), \"/target\").getAbsolutePath();\n+    String buildDirectory = project.getBaseDir().getAbsolutePath() + \"/target\";\n     assertThat(pom.getBuild().getDirectory(), is(buildDirectory));\n     assertThat(pom.getBuild().getOutputDirectory(), is(buildDirectory + \"/classes\"));\n     assertThat(pom.getReporting().getOutputDirectory(), is(buildDirectory + \"/site\"));"
    },
    {
        "commit_id": "ae3c57b069d5f2578877e6066244b5bff15a8344",
        "commit_message": "Fix bug in construction of in-memory POM",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ae3c57b069d5f2578877e6066244b5bff15a8344",
        "buggy_code": "for (String dir : project.getSourceDirs()) {",
        "fixed_code": "for (String dir : project.getTestDirs()) {",
        "patch": "@@ -87,7 +87,7 @@ private static MavenProject createInMemoryPom(ProjectDefinition project) {\n     }\n \n     // Configure test directories\n-    for (String dir : project.getSourceDirs()) {\n+    for (String dir : project.getTestDirs()) {\n       pom.addTestCompileSourceRoot(dir);\n     }\n "
    },
    {
        "commit_id": "259530d1439951f3fd9ba70469fb0fa2cd0db665",
        "commit_message": "filters: fix bug on db migration + do not fail if criterion on disabled metric",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/259530d1439951f3fd9ba70469fb0fa2cd0db665",
        "buggy_code": "if (criterion.isVariation()) {",
        "fixed_code": "if (criterion.isVariation()==Boolean.TRUE) {",
        "patch": "@@ -360,7 +360,7 @@ String getColumnToSort() {\n   public boolean mustReturnEmptyResult() {\n     boolean hasCriterionOnVariation = false;\n     for (MeasureCriterion criterion : measureCriteria) {\n-      if (criterion.isVariation()) {\n+      if (criterion.isVariation()==Boolean.TRUE) {\n         hasCriterionOnVariation = true;\n       }\n     }"
    },
    {
        "commit_id": "32de21d20578c3202141cd1965a8f3d53c8ba786",
        "commit_message": "fix migration to delete unvalid snapshots generated in sonar <= 2.3",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/32de21d20578c3202141cd1965a8f3d53c8ba786",
        "buggy_code": "public static final int LAST_VERSION = 169;",
        "fixed_code": "public static final int LAST_VERSION = 170;",
        "patch": "@@ -31,7 +31,7 @@\n public class SchemaMigration {\n \n   public final static int VERSION_UNKNOWN = -1;\n-  public static final int LAST_VERSION = 169;\n+  public static final int LAST_VERSION = 170;\n \n   public final static String TABLE_NAME = \"schema_migrations\";\n "
    },
    {
        "commit_id": "f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "commit_message": "Move timemachine components from core plugin to batch + do not depend on Snapshot in PastSnapshotLoader components + fix NPE when calculating variations on measures that are still not persisted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "buggy_code": "package org.sonar.plugins.core.timemachine;",
        "fixed_code": "package org.sonar.batch.components;",
        "patch": "@@ -17,7 +17,7 @@\n  * License along with Sonar; if not, write to the Free Software\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02\n  */\n-package org.sonar.plugins.core.timemachine;\n+package org.sonar.batch.components;\n \n import com.google.common.collect.Maps;\n import org.apache.commons.lang.ObjectUtils;"
    },
    {
        "commit_id": "f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "commit_message": "Move timemachine components from core plugin to batch + do not depend on Snapshot in PastSnapshotLoader components + fix NPE when calculating variations on measures that are still not persisted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "buggy_code": "package org.sonar.plugins.core.timemachine;",
        "fixed_code": "package org.sonar.batch.components;",
        "patch": "@@ -17,7 +17,7 @@\n  * License along with Sonar; if not, write to the Free Software\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02\n  */\n-package org.sonar.plugins.core.timemachine;\n+package org.sonar.batch.components;\n \n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.sonar.api.database.model.Snapshot;"
    },
    {
        "commit_id": "f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "commit_message": "Move timemachine components from core plugin to batch + do not depend on Snapshot in PastSnapshotLoader components + fix NPE when calculating variations on measures that are still not persisted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "buggy_code": "package org.sonar.plugins.core.timemachine;",
        "fixed_code": "package org.sonar.batch.components;",
        "patch": "@@ -1,4 +1,4 @@\n-package org.sonar.plugins.core.timemachine;\n+package org.sonar.batch.components;\n \n import org.sonar.api.BatchExtension;\n import org.sonar.api.database.DatabaseSession;"
    },
    {
        "commit_id": "f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "commit_message": "Move timemachine components from core plugin to batch + do not depend on Snapshot in PastSnapshotLoader components + fix NPE when calculating variations on measures that are still not persisted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "buggy_code": "package org.sonar.plugins.core.timemachine;",
        "fixed_code": "package org.sonar.batch.components;",
        "patch": "@@ -1,4 +1,4 @@\n-package org.sonar.plugins.core.timemachine;\n+package org.sonar.batch.components;\n \n import org.junit.Before;\n import org.junit.Test;"
    },
    {
        "commit_id": "f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "commit_message": "Move timemachine components from core plugin to batch + do not depend on Snapshot in PastSnapshotLoader components + fix NPE when calculating variations on measures that are still not persisted",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/f86a62e3c24d2e2587b0f76988fbd9220ee4931a",
        "buggy_code": "LoggerFactory.getLogger(getClass()).info(\"Download: \" + uri + \" (\" + getProxySynthesis(uri) + \")\");",
        "fixed_code": "LoggerFactory.getLogger(getClass()).debug(\"Download: \" + uri + \" (\" + getProxySynthesis(uri) + \")\");",
        "patch": "@@ -170,7 +170,7 @@ public InputStream openStream(URI uri) {\n   }\n \n   private HttpURLConnection newHttpConnection(URI uri) throws IOException {\n-    LoggerFactory.getLogger(getClass()).info(\"Download: \" + uri + \" (\" + getProxySynthesis(uri) + \")\");\n+    LoggerFactory.getLogger(getClass()).debug(\"Download: \" + uri + \" (\" + getProxySynthesis(uri) + \")\");\n     HttpURLConnection connection = (HttpURLConnection) uri.toURL().openConnection();\n     connection.setConnectTimeout(TIMEOUT_MILLISECONDS);\n     connection.setReadTimeout(TIMEOUT_MILLISECONDS);"
    },
    {
        "commit_id": "c6d744a50d661ca5fb1f6846fb9880e4c9484f0d",
        "commit_message": "fix filter by period in violations viewer",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c6d744a50d661ca5fb1f6846fb9880e4c9484f0d",
        "buggy_code": "return createdAt!=null && date!=null && !createdAt.before(date);",
        "fixed_code": "return createdAt!=null && date!=null && createdAt.after(date);",
        "patch": "@@ -152,6 +152,6 @@ public Violation setCreatedAt(Date createdAt) {\n    * @since 2.5\n    */\n   public boolean isCreatedAfter(Date date) {\n-    return createdAt!=null && date!=null && !createdAt.before(date);\n+    return createdAt!=null && date!=null && createdAt.after(date);\n   }\n }"
    },
    {
        "commit_id": "2366419df66b6a46e9be173ee71debff338f2f03",
        "commit_message": "fix memory leak in ruby database migration",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/2366419df66b6a46e9be173ee71debff338f2f03",
        "buggy_code": "import org.sonar.api.platform.ServerUpgradeStatus;",
        "fixed_code": "startupContainer.as(Characteristics.CACHE).addComponent(DeleteDeprecatedMeasures.class);",
        "patch": "@@ -28,7 +28,6 @@\n import org.sonar.api.database.configuration.DatabaseConfiguration;\n import org.sonar.api.platform.Environment;\n import org.sonar.api.platform.Server;\n-import org.sonar.api.platform.ServerUpgradeStatus;\n import org.sonar.api.profiles.AnnotationProfileParser;\n import org.sonar.api.profiles.XMLProfileParser;\n import org.sonar.api.profiles.XMLProfileSerializer;\n@@ -205,6 +204,7 @@ private void executeStartupTasks() {\n       startupContainer.as(Characteristics.CACHE).addComponent(JdbcDriverDeployer.class);\n       startupContainer.as(Characteristics.CACHE).addComponent(ServerMetadataPersister.class);\n       startupContainer.as(Characteristics.CACHE).addComponent(RegisterQualityModels.class);\n+      startupContainer.as(Characteristics.CACHE).addComponent(DeleteDeprecatedMeasures.class);\n       startupContainer.start();\n \n       startupContainer.getComponent(ServerLifecycleNotifier.class).notifyStart();"
    },
    {
        "commit_id": "6d5308e5a52bddee3570a7836f94a497f2389f09",
        "commit_message": "SONAR-1941 fix tracking of violations since previous analysis",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6d5308e5a52bddee3570a7836f94a497f2389f09",
        "buggy_code": "return !violation.getCreatedAt().before(date);",
        "fixed_code": "return violation.getCreatedAt()!= null && violation.getCreatedAt().after(date);",
        "patch": "@@ -168,7 +168,7 @@ int countViolations(Collection<Violation> violations, Date targetDate) {\n   }\n \n   private boolean isAfter(Violation violation, Date date) {\n-    return !violation.getCreatedAt().before(date);\n+    return violation.getCreatedAt()!= null && violation.getCreatedAt().after(date);\n   }\n \n   private Metric getMetricForSeverity(RulePriority severity) {"
    },
    {
        "commit_id": "e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "commit_message": "Fix bug in ActiveRule.clone()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "buggy_code": "ProfilesManager profilesManager = new ProfilesManager(session, null, null, null);",
        "fixed_code": "ProfilesManager profilesManager = new ProfilesManager(session, null);",
        "patch": "@@ -75,7 +75,7 @@ public void exportXml(SonarConfig sonarConfig) {\n \n   public void importXml(SonarConfig sonarConfig) {\n     if (CollectionUtils.isNotEmpty(sonarConfig.getProfiles())) {\n-      ProfilesManager profilesManager = new ProfilesManager(session, null, null, null);\n+      ProfilesManager profilesManager = new ProfilesManager(session, null);\n       profilesManager.deleteAllProfiles();\n \n       RulesDao rulesDao = new RulesDao(session);"
    },
    {
        "commit_id": "e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "commit_message": "Fix bug in ActiveRule.clone()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "buggy_code": "profilesManager = new ProfilesManager(getSession(), null, null, null);",
        "fixed_code": "profilesManager = new ProfilesManager(getSession(), null);",
        "patch": "@@ -9,7 +9,7 @@ public class InheritedProfilesTest extends AbstractDbUnitTestCase {\n \n   @Before\n   public void setUp() {\n-    profilesManager = new ProfilesManager(getSession(), null, null, null);\n+    profilesManager = new ProfilesManager(getSession(), null);\n   }\n \n   @Test"
    },
    {
        "commit_id": "e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "commit_message": "Fix bug in ActiveRule.clone()",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e58aaf76c2ed38afe902877c764ef4bbc2f43de6",
        "buggy_code": "manager = new ProfilesManager(getSession(), null, null, null);",
        "fixed_code": "manager = new ProfilesManager(getSession(), null);",
        "patch": "@@ -35,7 +35,7 @@ public class ProfilesManagerTest extends AbstractDbUnitTestCase {\n \n   @Before\n   public void setup() {\n-    manager = new ProfilesManager(getSession(), null, null, null);\n+    manager = new ProfilesManager(getSession(), null);\n   }\n \n   @Test"
    },
    {
        "commit_id": "08dd37963702aae4122387a37874dbcb6e4f1912",
        "commit_message": "fix IT",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/08dd37963702aae4122387a37874dbcb6e4f1912",
        "buggy_code": "assertThat(getProjectMeasure(CoreMetrics.MAJOR_VIOLATIONS_KEY).getValue(), closeTo(2569.0, 200.0));",
        "fixed_code": "assertThat(getProjectMeasure(CoreMetrics.MAJOR_VIOLATIONS_KEY).getValue(), closeTo(2889.0, 200.0));",
        "patch": "@@ -76,7 +76,7 @@ public void testProjectViolationMeasures() {\n     assertThat(getProjectMeasure(CoreMetrics.VIOLATIONS_KEY).getValue(), closeTo(7726.0, 500.0));\n     assertThat(getProjectMeasure(CoreMetrics.BLOCKER_VIOLATIONS_KEY).getValue(), closeTo(0.0, 20.0));\n     assertThat(getProjectMeasure(CoreMetrics.CRITICAL_VIOLATIONS_KEY).getValue(), closeTo(0.0, 20.0));\n-    assertThat(getProjectMeasure(CoreMetrics.MAJOR_VIOLATIONS_KEY).getValue(), closeTo(2569.0, 200.0));\n+    assertThat(getProjectMeasure(CoreMetrics.MAJOR_VIOLATIONS_KEY).getValue(), closeTo(2889.0, 200.0));\n     assertThat(getProjectMeasure(CoreMetrics.MINOR_VIOLATIONS_KEY).getValue(), closeTo(0.0, 200.0));\n     assertThat(getProjectMeasure(CoreMetrics.INFO_VIOLATIONS_KEY).getValue(), closeTo(5157.0, 20.0));\n     assertThat(getProjectMeasure(CoreMetrics.VIOLATIONS_DENSITY_KEY).getValue(), closeTo(84.6, 5.0));"
    },
    {
        "commit_id": "9be370d0f7cd108c40be4e6aa00bb5a55b39416d",
        "commit_message": "fix bug in SONAR-1729",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9be370d0f7cd108c40be4e6aa00bb5a55b39416d",
        "buggy_code": "verify(context, never()).saveMeasure(argThat(new IsMeasure(CoreMetrics.VIOLATIONS)));// not changed",
        "fixed_code": "verify(context, never()).saveMeasure(argThat(new IsMeasure(CoreMetrics.VIOLATIONS, 4.0)));// not changed",
        "patch": "@@ -84,7 +84,7 @@ public void shouldNotCountViolationsIfMeasureAlreadyExists() {\n \n     decorator.decorate(resource, context);\n \n-    verify(context, never()).saveMeasure(argThat(new IsMeasure(CoreMetrics.VIOLATIONS)));// not changed\n+    verify(context, never()).saveMeasure(argThat(new IsMeasure(CoreMetrics.VIOLATIONS, 4.0)));// not changed\n     verify(context, never()).saveMeasure(argThat(new IsMeasure(CoreMetrics.MAJOR_VIOLATIONS)));// not changed\n     verify(context, times(1)).saveMeasure(argThat(new IsMeasure(CoreMetrics.CRITICAL_VIOLATIONS)));// did not exist\n   }"
    },
    {
        "commit_id": "a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "commit_message": "SONAR-2024: Fix operations with generic types",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "buggy_code": "public void delete(DeleteQuery query) {",
        "fixed_code": "public void delete(DeleteQuery<?> query) {",
        "patch": "@@ -76,7 +76,7 @@ public <MODEL extends Model> MODEL create(CreateQuery<MODEL> query) {\n     return result;\n   }\n \n-  public void delete(DeleteQuery query) {\n+  public void delete(DeleteQuery<?> query) {\n     connector.execute(query);\n   }\n "
    },
    {
        "commit_id": "a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "commit_message": "SONAR-2024: Fix operations with generic types",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "buggy_code": "public class FavouriteDeleteQuery extends DeleteQuery {",
        "fixed_code": "public class FavouriteDeleteQuery extends DeleteQuery<Favourite> {",
        "patch": "@@ -19,7 +19,7 @@\n  */\n package org.sonar.wsclient.services;\n \n-public class FavouriteDeleteQuery extends DeleteQuery {\n+public class FavouriteDeleteQuery extends DeleteQuery<Favourite> {\n \n   private String idOrKey;\n "
    },
    {
        "commit_id": "a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "commit_message": "SONAR-2024: Fix operations with generic types",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a02e4a3754fd80a0ee47fa1349e017d1da1aec59",
        "buggy_code": "public class UserPropertyDeleteQuery extends DeleteQuery {",
        "fixed_code": "public class UserPropertyDeleteQuery extends DeleteQuery<Property> {",
        "patch": "@@ -22,7 +22,7 @@\n /**\n  * @since 2.2\n  */\n-public class UserPropertyDeleteQuery extends DeleteQuery {\n+public class UserPropertyDeleteQuery extends DeleteQuery<Property> {\n \n   private String key;\n "
    },
    {
        "commit_id": "abda43912a17b603677f0216b43aa38ee88333b4",
        "commit_message": "Fix typos",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/abda43912a17b603677f0216b43aa38ee88333b4",
        "buggy_code": "Logs.INFO.warn(\"Reusing existing Findbugs configuration not supported anymore.\");",
        "fixed_code": "Logs.INFO.warn(\"Reusing existing Findbugs configuration not supported any more.\");",
        "patch": "@@ -53,7 +53,7 @@ public boolean shouldExecuteOnProject(Project project) {\n \n   public void analyse(Project project, SensorContext context) {\n     if (project.getReuseExistingRulesConfig()) {\n-      Logs.INFO.warn(\"Reusing existing Findbugs configuration not supported anymore.\");\n+      Logs.INFO.warn(\"Reusing existing Findbugs configuration not supported any more.\");\n     }\n     File report = getFindbugsReportFile(project);\n     if (report == null) {"
    },
    {
        "commit_id": "def5c589d4d2b79c8e4a0c6da5d18c34ca22a889",
        "commit_message": "NewViolationsDecorator :\n* Fix bug\n* Add unit tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/def5c589d4d2b79c8e4a0c6da5d18c34ca22a889",
        "buggy_code": "public final class PastSnapshot {",
        "fixed_code": "public class PastSnapshot {",
        "patch": "@@ -24,7 +24,7 @@\n \n import java.util.Date;\n \n-public final class PastSnapshot {\n+public class PastSnapshot {\n \n   private int index;\n   private String mode, modeParameter;"
    },
    {
        "commit_id": "c5749a967563442994ab3183c7ecc13fa4e6b1f1",
        "commit_message": "SONAR-249 add 2 periods for variation values + rename SNAPSHOT.VAR_xxx columns + fix saving of dependencies",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/c5749a967563442994ab3183c7ecc13fa4e6b1f1",
        "buggy_code": "public static final int LAST_VERSION = 162;",
        "fixed_code": "public static final int LAST_VERSION = 163;",
        "patch": "@@ -30,7 +30,7 @@\n public class SchemaMigration {\n \n   public final static int VERSION_UNKNOWN = -1;\n-  public static final int LAST_VERSION = 162;\n+  public static final int LAST_VERSION = 163;\n \n   public final static String TABLE_NAME = \"schema_migrations\";\n "
    },
    {
        "commit_id": "ca79bd72bc11d542a33a3f92e3d9dda54a0c8477",
        "commit_message": "Fix metric name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/ca79bd72bc11d542a33a3f92e3d9dda54a0c8477",
        "buggy_code": "RuleMeasure measure = RuleMeasure.createForRule(CoreMetrics.VIOLATIONS, rule, null);",
        "fixed_code": "RuleMeasure measure = RuleMeasure.createForRule(CoreMetrics.NEW_VIOLATIONS, rule, null);",
        "patch": "@@ -123,7 +123,7 @@ private void saveNewViolationsByRule(DecoratorContext context) {\n     }\n \n     for (Rule rule : childrenByRule.keys()) {\n-      RuleMeasure measure = RuleMeasure.createForRule(CoreMetrics.VIOLATIONS, rule, null);\n+      RuleMeasure measure = RuleMeasure.createForRule(CoreMetrics.NEW_VIOLATIONS, rule, null);\n       measure.setRulePriority(ruleToLevel.get(rule));\n       for (PastSnapshot variationSnapshot : timeMachineConfiguration.getProjectPastSnapshots()) {\n         int variationIndex = variationSnapshot.getIndex();"
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "\"(s.rootId=:rootSid OR s.id=:rootSid) and (m.ruleId is not null or m.rulesCategoryId is not null or m.rulePriority is not null)\");",
        "fixed_code": "\"(s.rootId=:rootSid OR s.id=:rootSid) and (m.ruleId is not null or m.rulePriority is not null)\");",
        "patch": "@@ -48,7 +48,7 @@ public void purge(PurgeContext context) {\n \n   private void purge(Integer sid) {\n     Query query = getSession().createQuery(\"SELECT m.id FROM \" + MeasureModel.class.getSimpleName() + \" m, \" + Snapshot.class.getSimpleName() + \" s WHERE s.id = m.snapshotId and \" +\n-        \"(s.rootId=:rootSid OR s.id=:rootSid) and (m.ruleId is not null or m.rulesCategoryId is not null or m.rulePriority is not null)\");\n+        \"(s.rootId=:rootSid OR s.id=:rootSid) and (m.ruleId is not null or m.rulePriority is not null)\");\n     query.setParameter(\"rootSid\", sid);\n     List<Integer> measureIds = query.getResultList();\n     PurgeUtils.deleteMeasuresById(getSession(), measureIds);"
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "sb.append(\" AND m.ruleId IS NULL AND m.rulePriority IS NULL AND m.rulesCategoryId IS NULL \");",
        "fixed_code": "sb.append(\" AND m.ruleId IS NULL AND m.rulePriority IS NULL \");",
        "patch": "@@ -92,7 +92,7 @@ protected List execute(TimeMachineQuery query, boolean selectAllFields, Set<Inte\n     params.put(\"resourceId\", resource.getId());\n     params.put(\"status\", Snapshot.STATUS_PROCESSED);\n \n-    sb.append(\" AND m.ruleId IS NULL AND m.rulePriority IS NULL AND m.rulesCategoryId IS NULL \");\n+    sb.append(\" AND m.ruleId IS NULL AND m.rulePriority IS NULL \");\n     if (!metricIds.isEmpty()) {\n       sb.append(\" AND m.metricId IN (:metricIds) \");\n       params.put(\"metricIds\", metricIds);"
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "IsoCategory isoCategory();",
        "fixed_code": "IsoCategory isoCategory() default IsoCategory.NONE;",
        "patch": "@@ -54,7 +54,7 @@\n   /**\n    * Will probably be deprecated and replaced by tags\n    */\n-  IsoCategory isoCategory();\n+  IsoCategory isoCategory() default IsoCategory.NONE;\n \n   Cardinality cardinality() default Cardinality.SINGLE;\n }\n\\ No newline at end of file"
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "public static final int LAST_VERSION = 161;",
        "fixed_code": "public static final int LAST_VERSION = 162;",
        "patch": "@@ -30,7 +30,7 @@\n public class SchemaMigration {\n \n   public final static int VERSION_UNKNOWN = -1;\n-  public static final int LAST_VERSION = 161;\n+  public static final int LAST_VERSION = 162;\n \n   public final static String TABLE_NAME = \"schema_migrations\";\n "
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "@Rule(isoCategory = IsoCategory.Efficiency, priority = Priority.CRITICAL)",
        "fixed_code": "@Rule(priority = Priority.CRITICAL)",
        "patch": "@@ -21,7 +21,7 @@\n \n import org.sonar.check.*;\n \n-@Rule(isoCategory = IsoCategory.Efficiency, priority = Priority.CRITICAL)\n+@Rule(priority = Priority.CRITICAL)\n class CheckWithIntegerProperty {\n \n   @RuleProperty"
    },
    {
        "commit_id": "e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "commit_message": "SONAR-2007 Remove the useless ISO Categories + fix components page",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e537ea6120df8eb20ba04da66811c21161f6ec6d",
        "buggy_code": "sql.append(\" pm.rule_id is null AND pm.rules_category_id is null AND pm.rule_priority is null AND pm.characteristic_id IS NULL AND \");",
        "fixed_code": "sql.append(\" pm.rule_id is null AND pm.rule_priority is null AND pm.characteristic_id IS NULL AND \");",
        "patch": "@@ -137,7 +137,7 @@ private void addWhereClause(Filter filter, StringBuilder sql) {\n \n         sql.append(\" ) AND \");\n       }\n-      sql.append(\" pm.rule_id is null AND pm.rules_category_id is null AND pm.rule_priority is null AND pm.characteristic_id IS NULL AND \");\n+      sql.append(\" pm.rule_id is null AND pm.rule_priority is null AND pm.characteristic_id IS NULL AND \");\n     }\n     sql.append(\" s.status=:status AND s.islast=:islast \");\n     if (filter.getScopes() != null) {"
    },
    {
        "commit_id": "1648ac3d0f54ab27e2faf3ebe394a41d687d897d",
        "commit_message": "Fix violations reported on Nemo, fix JavaDocs",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/1648ac3d0f54ab27e2faf3ebe394a41d687d897d",
        "buggy_code": "return Resource.SCOPE_PROJECT;",
        "fixed_code": "return Resource.SCOPE_SET;",
        "patch": "@@ -68,7 +68,7 @@ public Language getLanguage() {\n \n   @Override\n   public String getScope() {\n-    return Resource.SCOPE_PROJECT;\n+    return Resource.SCOPE_SET;\n   }\n \n   @Override"
    },
    {
        "commit_id": "a1f30abd291044698fb273803a1f7767631dd60a",
        "commit_message": "Fix violations reported on Nemo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/a1f30abd291044698fb273803a1f7767631dd60a",
        "buggy_code": "public class ParameterSignatureScanner {",
        "fixed_code": "public final class ParameterSignatureScanner {",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class ParameterSignatureScanner {\n+public final class ParameterSignatureScanner {\n \n   private final String signature;\n   private int index = 0;"
    },
    {
        "commit_id": "6502189ac6cec41d2a8f35d7adb48d38b599c39b",
        "commit_message": "* Use AnnotationUtility from checkstyle\n* Fix minor bug - Override annotation can be specified with fully qualified name",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/6502189ac6cec41d2a8f35d7adb48d38b599c39b",
        "buggy_code": "@Override",
        "fixed_code": "@java.lang.Override",
        "patch": "@@ -12,7 +12,7 @@ public void doSomething(){\n     \n   }\n \n-  @Override\n+  @java.lang.Override\n   public void doSomethingElse(){\n     \n   }"
    },
    {
        "commit_id": "dfb53e555565a7fbde113db0cccc93826d1f96a0",
        "commit_message": "Fix violations reported on Nemo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dfb53e555565a7fbde113db0cccc93826d1f96a0",
        "buggy_code": "private static Logger LOG = LoggerFactory.getLogger(FindbugsExecutor.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(FindbugsExecutor.class);",
        "patch": "@@ -48,7 +48,7 @@\n  */\n public class FindbugsExecutor implements BatchExtension {\n \n-  private static Logger LOG = LoggerFactory.getLogger(FindbugsExecutor.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(FindbugsExecutor.class);\n \n   private FindbugsConfiguration configuration;\n "
    },
    {
        "commit_id": "dfb53e555565a7fbde113db0cccc93826d1f96a0",
        "commit_message": "Fix violations reported on Nemo",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/dfb53e555565a7fbde113db0cccc93826d1f96a0",
        "buggy_code": "private static Logger LOG = LoggerFactory.getLogger(FindbugsProfileImporter.class);",
        "fixed_code": "private static final Logger LOG = LoggerFactory.getLogger(FindbugsProfileImporter.class);",
        "patch": "@@ -40,7 +40,7 @@\n public class FindbugsProfileImporter extends ProfileImporter {\n \n   private final RuleFinder ruleFinder;\n-  private static Logger LOG = LoggerFactory.getLogger(FindbugsProfileImporter.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(FindbugsProfileImporter.class);\n \n   public FindbugsProfileImporter(RuleFinder ruleFinder) {\n     super(FindbugsConstants.REPOSITORY_KEY, FindbugsConstants.PLUGIN_NAME);"
    },
    {
        "commit_id": "597e9b5f8716bc0c1b5de4e9f334a57c0425625c",
        "commit_message": "Minor fix",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/597e9b5f8716bc0c1b5de4e9f334a57c0425625c",
        "buggy_code": "CheckMessage message = new CheckMessage(this, \"Avoid undocumented API\");",
        "fixed_code": "CheckMessage message = new CheckMessage(this, \"Avoid undocumented API.\");",
        "patch": "@@ -60,7 +60,7 @@ public void visitToken(DetailAST ast) {\n     if (WildcardPattern.match(getPatterns(), sourceClass.getKey())) {\n       if (PublicApiVisitor.isPublicApi(ast) && !PublicApiVisitor.isDocumentedApi(ast, getFileContents())) {\n         SourceFile sourceFile = currentResource.getParent(SourceFile.class);\n-        CheckMessage message = new CheckMessage(this, \"Avoid undocumented API\");\n+        CheckMessage message = new CheckMessage(this, \"Avoid undocumented API.\");\n         message.setLine(ast.getLineNo());\n         sourceFile.log(message);\n       }"
    },
    {
        "commit_id": "0746d937dfd10730f07b4ac116e228192bea7a9f",
        "commit_message": "update center server: fix log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/0746d937dfd10730f07b4ac116e228192bea7a9f",
        "buggy_code": "LOG.error(\"Download \" + fileURI + \" in \" + toFile);",
        "fixed_code": "LOG.info(\"Download \" + fileURI + \" in \" + toFile);",
        "patch": "@@ -63,7 +63,7 @@ public File download(String url, boolean force, String login, String password) t\n   }\n \n   File downloadFile(URI fileURI, File toFile, String login, String password) {\n-    LOG.error(\"Download \" + fileURI + \" in \" + toFile);\n+    LOG.info(\"Download \" + fileURI + \" in \" + toFile);\n     DefaultHttpClient client = new DefaultHttpClient();\n     try {\n       if (StringUtils.isNotBlank(login)) {"
    },
    {
        "commit_id": "88f8591dab4b1bb81f37f0a933698bf4cbb14d83",
        "commit_message": "fix minor issue in startup log",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/88f8591dab4b1bb81f37f0a933698bf4cbb14d83",
        "buggy_code": "Logs.INFO.info(\"Activate default profile for \", language.getKey());",
        "fixed_code": "Logs.INFO.info(\"Activate default profile for \" + language.getKey());",
        "patch": "@@ -42,7 +42,7 @@ public ActivateDefaultProfiles(DatabaseSessionFactory sessionFactory, Language[]\n   public void start() {\n     DatabaseSession session = sessionFactory.getSession();\n     for (Language language : languages) {\n-      Logs.INFO.info(\"Activate default profile for \", language.getKey());\n+      Logs.INFO.info(\"Activate default profile for \" + language.getKey());\n       activateDefaultProfile(language, session);\n     }\n     session.commit();"
    },
    {
        "commit_id": "4011c6545f4c4488d8b1d647baaa8a88d98dd663",
        "commit_message": "fix format of update center date",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4011c6545f4c4488d8b1d647baaa8a88d98dd663",
        "buggy_code": "set(p, \"date\", FormatUtils.toString(center.getDate(), false));",
        "fixed_code": "set(p, \"date\", FormatUtils.toString(center.getDate(), true));",
        "patch": "@@ -59,7 +59,7 @@ private static void set(Properties props, Plugin plugin, String key, Collection\n \n   public static Properties toProperties(UpdateCenter center) {\n     Properties p = new Properties();\n-    set(p, \"date\", FormatUtils.toString(center.getDate(), false));\n+    set(p, \"date\", FormatUtils.toString(center.getDate(), true));\n     set(p, \"sonar.versions\", center.getSonar().getVersions());\n     for (Release sonarRelease : center.getSonar().getReleases()) {\n       set(p, \"sonar.\" + sonarRelease.getVersion() + \".downloadUrl\", sonarRelease.getDownloadUrl());"
    },
    {
        "commit_id": "4dd938c67ce1682bf5dfd613956ba4b15c740986",
        "commit_message": "fix layout of core widgets",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4dd938c67ce1682bf5dfd613956ba4b15c740986",
        "buggy_code": "return \"file-design\";",
        "fixed_code": "return \"file_design\";",
        "patch": "@@ -26,7 +26,7 @@\n @Description(\"Reports on files dependency cycles and tangle index.\")\n public final class FileDesignWidget extends AbstractRubyTemplate implements RubyRailsWidget {\n   public String getId() {\n-    return \"file-design\";\n+    return \"file_design\";\n   }\n \n   public String getTitle() {"
    },
    {
        "commit_id": "4dd938c67ce1682bf5dfd613956ba4b15c740986",
        "commit_message": "fix layout of core widgets",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4dd938c67ce1682bf5dfd613956ba4b15c740986",
        "buggy_code": "return \"package-design\";",
        "fixed_code": "return \"package_design\";",
        "patch": "@@ -26,7 +26,7 @@\n @Description(\"Reports on package dependency cycles and tangle index.\")\n public final class PackageDesignWidget extends AbstractRubyTemplate implements RubyRailsWidget {\n   public String getId() {\n-    return \"package-design\";\n+    return \"package_design\";\n   }\n \n   public String getTitle() {"
    },
    {
        "commit_id": "e2cf58f8b86e7a047dadc78d09aea6a7804ba772",
        "commit_message": "SONAR-1808: Fix CoberturaSensor.",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/e2cf58f8b86e7a047dadc78d09aea6a7804ba772",
        "buggy_code": "};",
        "fixed_code": "}.parseReport(xmlFile, context);",
        "patch": "@@ -107,7 +107,7 @@ protected void parseReport(File xmlFile, final SensorContext context) {\n       protected Resource<?> getResource(String fileName) {\n         return new JavaFile(fileName);\n       }\n-    };\n+    }.parseReport(xmlFile, context);\n   }\n \n   @Override"
    },
    {
        "commit_id": "3b3ecef9310c109ad17685f864062230c321f1a7",
        "commit_message": "SONAR-1869: Fix creation of attribute 'Plugin-ChildFirstClassLoader'",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/3b3ecef9310c109ad17685f864062230c321f1a7",
        "buggy_code": "archive.addManifestEntry(PluginManifest.USE_CHILD_FIRST_CLASSLOADER, true);",
        "fixed_code": "archive.addManifestEntry(PluginManifest.USE_CHILD_FIRST_CLASSLOADER, \"true\");",
        "patch": "@@ -182,7 +182,7 @@ public File createArchive() throws MojoExecutionException {\n       getLog().info(\"-------------------------------------------------------\");\n \n       if (isUseChildFirstClassLoader()) {\n-        archive.addManifestEntry(PluginManifest.USE_CHILD_FIRST_CLASSLOADER, true);\n+        archive.addManifestEntry(PluginManifest.USE_CHILD_FIRST_CLASSLOADER, \"true\");\n       }\n \n       if (isSkipDependenciesPackaging()) {"
    },
    {
        "commit_id": "53d559670a7b5a3daba4876d87737bb87b8e8cba",
        "commit_message": "fix compatibility with Java 1.5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/53d559670a7b5a3daba4876d87737bb87b8e8cba",
        "buggy_code": "import org.sonar.check.Rule.Cardinality;",
        "fixed_code": "import org.sonar.check.Cardinality;",
        "patch": "@@ -22,7 +22,7 @@\n import org.hamcrest.core.Is;\n import org.junit.Test;\n import org.sonar.api.utils.SonarException;\n-import org.sonar.check.Rule.Cardinality;\n+import org.sonar.check.Cardinality;\n \n import java.io.StringReader;\n import java.util.List;"
    },
    {
        "commit_id": "4400a7bd8870b92293ffd446db12fa52c116433c",
        "commit_message": "fix build compatibility with Java 1.5",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/4400a7bd8870b92293ffd446db12fa52c116433c",
        "buggy_code": "rule.setCardinality(org.sonar.check.Rule.CARDINALITY.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));",
        "fixed_code": "rule.setCardinality(org.sonar.check.Cardinality.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));",
        "patch": "@@ -139,7 +139,7 @@ private static void processRule(Rule rule, SMInputCursor ruleC) throws XMLStream\n         rule.setRulesCategory(new RulesCategory(category));\n \n       } else if (StringUtils.equalsIgnoreCase(\"cardinality\", nodeName)) {\n-        rule.setCardinality(org.sonar.check.Rule.CARDINALITY.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));\n+        rule.setCardinality(org.sonar.check.Cardinality.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));\n \n       } else if (StringUtils.equalsIgnoreCase(\"param\", nodeName)) {\n         processParameter(rule, cursor);"
    },
    {
        "commit_id": "9185222d18826c0648a8bf3cf8e2e491537b472e",
        "commit_message": "Checkstyle: fix export/import of duplicated rules (for example RegexpSingleline)",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/9185222d18826c0648a8bf3cf8e2e491537b472e",
        "buggy_code": "Rule rule2 = Rule.create(\"checkstyle\", \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck_12345\", \"Javadoc\").setConfigKey(\"Checker/JavadocPackage\");",
        "fixed_code": "Rule rule2 = Rule.create(\"checkstyle\", \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck_12345\", \"Javadoc\").setConfigKey(\"Checker/JavadocPackage\").setParent(rule1);",
        "patch": "@@ -85,7 +85,7 @@ public void singleCheckstyleRulesToExport() throws IOException, SAXException {\n   public void addTheIdPropertyWhenManyInstancesWithTheSameConfigKey() throws IOException, SAXException {\n     RulesProfile profile = RulesProfile.create(\"sonar way\", \"java\");\n     Rule rule1 = Rule.create(\"checkstyle\", \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck\", \"Javadoc\").setConfigKey(\"Checker/JavadocPackage\");\n-    Rule rule2 = Rule.create(\"checkstyle\", \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck_12345\", \"Javadoc\").setConfigKey(\"Checker/JavadocPackage\");\n+    Rule rule2 = Rule.create(\"checkstyle\", \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck_12345\", \"Javadoc\").setConfigKey(\"Checker/JavadocPackage\").setParent(rule1);\n \n     profile.activateRule(rule1, RulePriority.MAJOR);\n     profile.activateRule(rule2, RulePriority.CRITICAL);"
    },
    {
        "commit_id": "fe2910fa2ce3a47ba4c2a254f1d3c2f479dae177",
        "commit_message": "fix SONAR-1802 : Can't import FindBugs profile when some rules are duplicated in the findbugs.xml configuration file",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/fe2910fa2ce3a47ba4c2a254f1d3c2f479dae177",
        "buggy_code": "if (prioritiesByRule.containsKey(key)) {",
        "fixed_code": "if (prioritiesByRule.containsKey(key) && prioritiesByRule.get(key) != null) {",
        "patch": "@@ -151,7 +151,7 @@ private interface BugInfoSplitter {\n   }\n \n   private void mapRulePriority(Map<String, RulePriority> prioritiesByRule, RulePriority priority, String key) {\n-    if (prioritiesByRule.containsKey(key)) {\n+    if (prioritiesByRule.containsKey(key) && prioritiesByRule.get(key) != null) {\n       if (prioritiesByRule.get(key).compareTo(priority) < 0) {\n         prioritiesByRule.put(key, priority);\n       }"
    },
    {
        "commit_id": "483e55684694fde66f26e82ba21c3d042feefbbd",
        "commit_message": "fix integration test : the root node of a PMD configuration is \"ruleset\" and not \"resultset\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/483e55684694fde66f26e82ba21c3d042feefbbd",
        "buggy_code": "Element eltRuleset = new Element(\"resultset\");",
        "fixed_code": "Element eltRuleset = new Element(\"ruleset\");",
        "patch": "@@ -94,7 +94,7 @@ protected void processXPathRule(String sonarRuleKey, PmdRule rule) {\n   }\n \n   protected String exportPmdRulesetToXml(PmdRuleset pmdRuleset) {\n-    Element eltRuleset = new Element(\"resultset\");\n+    Element eltRuleset = new Element(\"ruleset\");\n     for (PmdRule pmdRule : pmdRuleset.getPmdRules()) {\n       Element eltRule = new Element(\"rule\");\n       addAttribute(eltRule, \"ref\", pmdRule.getRef());"
    },
    {
        "commit_id": "483e55684694fde66f26e82ba21c3d042feefbbd",
        "commit_message": "fix integration test : the root node of a PMD configuration is \"ruleset\" and not \"resultset\"",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/483e55684694fde66f26e82ba21c3d042feefbbd",
        "buggy_code": "assertThat(FileUtils.readFileToString(xmlFile), is(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<resultset />\\r\\n\\r\\n\"));",
        "fixed_code": "assertThat(FileUtils.readFileToString(xmlFile), is(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<ruleset />\\r\\n\\r\\n\"));",
        "patch": "@@ -45,7 +45,7 @@ public void writeConfigurationToWorkingDir() throws IOException {\n     assertThat(rulesets.size(), is(1));\n     File xmlFile = new File(rulesets.get(0));\n     assertThat(xmlFile.exists(), is(true));\n-    assertThat(FileUtils.readFileToString(xmlFile), is(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<resultset />\\r\\n\\r\\n\"));\n+    assertThat(FileUtils.readFileToString(xmlFile), is(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<ruleset />\\r\\n\\r\\n\"));\n   }\n \n   @Test"
    },
    {
        "commit_id": "b4ba514185fae1283073f3cc9c0f7cffd6e69a04",
        "commit_message": "fix SONAR-1480 : No way to export Findbugs rules in a XML file and then to reimport this file to create a new Quality profile\n\nMoreover, the Findbugs plugin now uses the new Rule API",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/b4ba514185fae1283073f3cc9c0f7cffd6e69a04",
        "buggy_code": "public final class Category {",
        "fixed_code": "public final class FindbugsCategory {",
        "patch": "@@ -22,7 +22,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-public final class Category {\n+public final class FindbugsCategory {\n   private final static Map<String, String> findbugsToSonar = new HashMap<String, String>();\n \n   static {"
    },
    {
        "commit_id": "739c60296c0abc6e258cb77e1576715437e611fe",
        "commit_message": "SONAR-1793: Fix wrong URL construction in ViolationQuery, when depth parameter used",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/739c60296c0abc6e258cb77e1576715437e611fe",
        "buggy_code": "url.append(\"depth\").append(depth).append(\"&\");",
        "fixed_code": "url.append(\"depth=\").append(depth).append(\"&\");",
        "patch": "@@ -96,7 +96,7 @@ public String getUrl() {\n         .append(\"&\");\n \n     if (depth != 0) {\n-      url.append(\"depth\").append(depth).append(\"&\");\n+      url.append(\"depth=\").append(depth).append(\"&\");\n     }\n     append(url, \"scopes\", scopes);\n     append(url, \"qualifiers\", qualifiers);"
    },
    {
        "commit_id": "739c60296c0abc6e258cb77e1576715437e611fe",
        "commit_message": "SONAR-1793: Fix wrong URL construction in ViolationQuery, when depth parameter used",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/739c60296c0abc6e258cb77e1576715437e611fe",
        "buggy_code": "assertThat(query.getUrl(), is(\"/api/violations?resource=myproject&depth-1&qualifiers=FIL&rules=checkstyle:foo,pmd:bar&priorities=MAJOR,BLOCKER&\"));",
        "fixed_code": "assertThat(query.getUrl(), is(\"/api/violations?resource=myproject&depth=-1&qualifiers=FIL&rules=checkstyle:foo,pmd:bar&priorities=MAJOR,BLOCKER&\"));",
        "patch": "@@ -41,6 +41,6 @@ public void resourceTreeViolations() {\n         .setPriorities(\"MAJOR\", \"BLOCKER\")\n         .setQualifiers(\"FIL\")\n         .setRuleKeys(\"checkstyle:foo\", \"pmd:bar\");\n-    assertThat(query.getUrl(), is(\"/api/violations?resource=myproject&depth-1&qualifiers=FIL&rules=checkstyle:foo,pmd:bar&priorities=MAJOR,BLOCKER&\"));\n+    assertThat(query.getUrl(), is(\"/api/violations?resource=myproject&depth=-1&qualifiers=FIL&rules=checkstyle:foo,pmd:bar&priorities=MAJOR,BLOCKER&\"));\n   }\n }"
    },
    {
        "commit_id": "8c95433db8c26f2a1b04f8be178ac5dacfef73ba",
        "commit_message": "* quality models : rename ModelProvider to ModelFinder\n* fix some integration tests",
        "commit_url": "https://github.com/SonarSource/sonarqube/commit/8c95433db8c26f2a1b04f8be178ac5dacfef73ba",
        "buggy_code": "public interface ModelProvider extends BatchComponent, ServerComponent {",
        "fixed_code": "public interface ModelFinder extends BatchComponent, ServerComponent {",
        "patch": "@@ -25,7 +25,7 @@\n /**\n  * @since 2.3\n  */\n-public interface ModelProvider extends BatchComponent, ServerComponent {\n+public interface ModelFinder extends BatchComponent, ServerComponent {\n \n   /**\n    * @return null if the name is not found"
    }
]